[BugLab_Variable_Misuse]^setShape ( beta ) ;^48^^^^^46^50^setShape ( alpha ) ;^[CLASS] WeibullDistributionImpl  [METHOD] <init> [RETURN_TYPE] WeibullDistributionImpl(double,double)   double alpha double beta [VARIABLES] double  alpha  beta  long  serialVersionUID  boolean  
[BugLab_Variable_Misuse]^setScale ( alpha ) ;^49^^^^^46^50^setScale ( beta ) ;^[CLASS] WeibullDistributionImpl  [METHOD] <init> [RETURN_TYPE] WeibullDistributionImpl(double,double)   double alpha double beta [VARIABLES] double  alpha  beta  long  serialVersionUID  boolean  
[BugLab_Variable_Misuse]^if  ( ret <= 0.0 )  {^59^^^^^57^65^if  ( x <= 0.0 )  {^[CLASS] WeibullDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   double x [VARIABLES] double  alpha  beta  ret  x  long  serialVersionUID  boolean  
[BugLab_Wrong_Operator]^if  ( x < 0.0 )  {^59^^^^^57^65^if  ( x <= 0.0 )  {^[CLASS] WeibullDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   double x [VARIABLES] double  alpha  beta  ret  x  long  serialVersionUID  boolean  
[BugLab_Variable_Misuse]^ret = 1.0 - Math.exp ( -Math.pow ( ret / getScale (  ) , getShape (  )  )  ) ;^62^^^^^57^65^ret = 1.0 - Math.exp ( -Math.pow ( x / getScale (  ) , getShape (  )  )  ) ;^[CLASS] WeibullDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   double x [VARIABLES] double  alpha  beta  ret  x  long  serialVersionUID  boolean  
[BugLab_Wrong_Operator]^ret = 1.0  >  Math.exp ( -Math.pow ( x / getScale (  ) , getShape (  )  )  ) ;^62^^^^^57^65^ret = 1.0 - Math.exp ( -Math.pow ( x / getScale (  ) , getShape (  )  )  ) ;^[CLASS] WeibullDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   double x [VARIABLES] double  alpha  beta  ret  x  long  serialVersionUID  boolean  
[BugLab_Wrong_Operator]^ret = 1.0 - Math.exp ( -Math.pow ( x + getScale (  ) , getShape (  )  )  ) ;^62^^^^^57^65^ret = 1.0 - Math.exp ( -Math.pow ( x / getScale (  ) , getShape (  )  )  ) ;^[CLASS] WeibullDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   double x [VARIABLES] double  alpha  beta  ret  x  long  serialVersionUID  boolean  
[BugLab_Wrong_Operator]^ret = 1.0 - Math.exp ( -Math.pow ( x - getScale (  ) , getShape (  )  )  ) ;^62^^^^^57^65^ret = 1.0 - Math.exp ( -Math.pow ( x / getScale (  ) , getShape (  )  )  ) ;^[CLASS] WeibullDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   double x [VARIABLES] double  alpha  beta  ret  x  long  serialVersionUID  boolean  
[BugLab_Wrong_Operator]^ret = 1.0  |  Math.exp ( -Math.pow ( x / getScale (  ) , getShape (  )  )  ) ;^62^^^^^57^65^ret = 1.0 - Math.exp ( -Math.pow ( x / getScale (  ) , getShape (  )  )  ) ;^[CLASS] WeibullDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   double x [VARIABLES] double  alpha  beta  ret  x  long  serialVersionUID  boolean  
[BugLab_Variable_Misuse]^return x;^64^^^^^57^65^return ret;^[CLASS] WeibullDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   double x [VARIABLES] double  alpha  beta  ret  x  long  serialVersionUID  boolean  
[BugLab_Variable_Misuse]^return x;^72^^^^^71^73^return alpha;^[CLASS] WeibullDistributionImpl  [METHOD] getShape [RETURN_TYPE] double   [VARIABLES] double  alpha  beta  ret  x  long  serialVersionUID  boolean  
[BugLab_Variable_Misuse]^return x;^80^^^^^79^81^return beta;^[CLASS] WeibullDistributionImpl  [METHOD] getScale [RETURN_TYPE] double   [VARIABLES] double  alpha  beta  ret  x  long  serialVersionUID  boolean  
[BugLab_Variable_Misuse]^if  ( ret < 0.0 || p > 1.0 )  {^97^^^^^95^108^if  ( p < 0.0 || p > 1.0 )  {^[CLASS] WeibullDistributionImpl  [METHOD] inverseCumulativeProbability [RETURN_TYPE] double   double p [VARIABLES] double  alpha  beta  p  ret  x  long  serialVersionUID  boolean  
[BugLab_Wrong_Operator]^if  ( p < 0.0 && p > 1.0 )  {^97^^^^^95^108^if  ( p < 0.0 || p > 1.0 )  {^[CLASS] WeibullDistributionImpl  [METHOD] inverseCumulativeProbability [RETURN_TYPE] double   double p [VARIABLES] double  alpha  beta  p  ret  x  long  serialVersionUID  boolean  
[BugLab_Wrong_Operator]^if  ( p == 0.0 || p > 1.0 )  {^97^^^^^95^108^if  ( p < 0.0 || p > 1.0 )  {^[CLASS] WeibullDistributionImpl  [METHOD] inverseCumulativeProbability [RETURN_TYPE] double   double p [VARIABLES] double  alpha  beta  p  ret  x  long  serialVersionUID  boolean  
[BugLab_Wrong_Operator]^if  ( p < 0.0 || p >= 1.0 )  {^97^^^^^95^108^if  ( p < 0.0 || p > 1.0 )  {^[CLASS] WeibullDistributionImpl  [METHOD] inverseCumulativeProbability [RETURN_TYPE] double   double p [VARIABLES] double  alpha  beta  p  ret  x  long  serialVersionUID  boolean  
[BugLab_Wrong_Literal]^if  ( p < -1.-1 || p > 1.-1 )  {^97^^^^^95^108^if  ( p < 0.0 || p > 1.0 )  {^[CLASS] WeibullDistributionImpl  [METHOD] inverseCumulativeProbability [RETURN_TYPE] double   double p [VARIABLES] double  alpha  beta  p  ret  x  long  serialVersionUID  boolean  
[BugLab_Wrong_Literal]^if  ( p < 0.0 || p > 2.0 )  {^97^^^^^95^108^if  ( p < 0.0 || p > 1.0 )  {^[CLASS] WeibullDistributionImpl  [METHOD] inverseCumulativeProbability [RETURN_TYPE] double   double p [VARIABLES] double  alpha  beta  p  ret  x  long  serialVersionUID  boolean  
[BugLab_Variable_Misuse]^} else if  ( x == 0 )  {^100^^^^^95^108^} else if  ( p == 0 )  {^[CLASS] WeibullDistributionImpl  [METHOD] inverseCumulativeProbability [RETURN_TYPE] double   double p [VARIABLES] double  alpha  beta  p  ret  x  long  serialVersionUID  boolean  
[BugLab_Wrong_Operator]^} else if  ( p <= 0 )  {^100^^^^^95^108^} else if  ( p == 0 )  {^[CLASS] WeibullDistributionImpl  [METHOD] inverseCumulativeProbability [RETURN_TYPE] double   double p [VARIABLES] double  alpha  beta  p  ret  x  long  serialVersionUID  boolean  
[BugLab_Wrong_Operator]^} else if  ( p != 0 )  {^100^^^^^95^108^} else if  ( p == 0 )  {^[CLASS] WeibullDistributionImpl  [METHOD] inverseCumulativeProbability [RETURN_TYPE] double   double p [VARIABLES] double  alpha  beta  p  ret  x  long  serialVersionUID  boolean  
[BugLab_Wrong_Literal]^} else if  ( p == null )  {^100^^^^^95^108^} else if  ( p == 0 )  {^[CLASS] WeibullDistributionImpl  [METHOD] inverseCumulativeProbability [RETURN_TYPE] double   double p [VARIABLES] double  alpha  beta  p  ret  x  long  serialVersionUID  boolean  
[BugLab_Variable_Misuse]^} else  if  ( ret == 1 )  {^102^^^^^95^108^} else  if  ( p == 1 )  {^[CLASS] WeibullDistributionImpl  [METHOD] inverseCumulativeProbability [RETURN_TYPE] double   double p [VARIABLES] double  alpha  beta  p  ret  x  long  serialVersionUID  boolean  
[BugLab_Wrong_Operator]^} else  if  ( p != 1 )  {^102^^^^^95^108^} else  if  ( p == 1 )  {^[CLASS] WeibullDistributionImpl  [METHOD] inverseCumulativeProbability [RETURN_TYPE] double   double p [VARIABLES] double  alpha  beta  p  ret  x  long  serialVersionUID  boolean  
[BugLab_Variable_Misuse]^ret = getScale (  )  * Math.pow ( -Math.log ( 1.0 - ret ) , 1.0 / getShape (  )  ) ;^105^^^^^95^108^ret = getScale (  )  * Math.pow ( -Math.log ( 1.0 - p ) , 1.0 / getShape (  )  ) ;^[CLASS] WeibullDistributionImpl  [METHOD] inverseCumulativeProbability [RETURN_TYPE] double   double p [VARIABLES] double  alpha  beta  p  ret  x  long  serialVersionUID  boolean  
[BugLab_Wrong_Operator]^ret + = getScale (  )  * Math.pow ( -Math.log ( 1.0 - p ) , 1.0 / getShape (  )  ) ;^105^^^^^95^108^ret = getScale (  )  * Math.pow ( -Math.log ( 1.0 - p ) , 1.0 / getShape (  )  ) ;^[CLASS] WeibullDistributionImpl  [METHOD] inverseCumulativeProbability [RETURN_TYPE] double   double p [VARIABLES] double  alpha  beta  p  ret  x  long  serialVersionUID  boolean  
[BugLab_Wrong_Operator]^ret = getScale (  )  * Math.pow ( -Math.log ( 1.0  ||  p ) , 1.0 / getShape (  )  ) ;^105^^^^^95^108^ret = getScale (  )  * Math.pow ( -Math.log ( 1.0 - p ) , 1.0 / getShape (  )  ) ;^[CLASS] WeibullDistributionImpl  [METHOD] inverseCumulativeProbability [RETURN_TYPE] double   double p [VARIABLES] double  alpha  beta  p  ret  x  long  serialVersionUID  boolean  
[BugLab_Wrong_Operator]^ret = getScale (  )  * Math.pow ( -Math.log ( 1.0 - p ) , 1.0 + getShape (  )  ) ;^105^^^^^95^108^ret = getScale (  )  * Math.pow ( -Math.log ( 1.0 - p ) , 1.0 / getShape (  )  ) ;^[CLASS] WeibullDistributionImpl  [METHOD] inverseCumulativeProbability [RETURN_TYPE] double   double p [VARIABLES] double  alpha  beta  p  ret  x  long  serialVersionUID  boolean  
[BugLab_Variable_Misuse]^ret = getScale (  )  * Math.pow ( -Math.log ( 1.0 - x ) , 1.0 / getShape (  )  ) ;^105^^^^^95^108^ret = getScale (  )  * Math.pow ( -Math.log ( 1.0 - p ) , 1.0 / getShape (  )  ) ;^[CLASS] WeibullDistributionImpl  [METHOD] inverseCumulativeProbability [RETURN_TYPE] double   double p [VARIABLES] double  alpha  beta  p  ret  x  long  serialVersionUID  boolean  
[BugLab_Wrong_Operator]^ret = getScale (  )  * Math.pow ( -Math.log ( 1.0  &  p ) , 1.0 / getShape (  )  ) ;^105^^^^^95^108^ret = getScale (  )  * Math.pow ( -Math.log ( 1.0 - p ) , 1.0 / getShape (  )  ) ;^[CLASS] WeibullDistributionImpl  [METHOD] inverseCumulativeProbability [RETURN_TYPE] double   double p [VARIABLES] double  alpha  beta  p  ret  x  long  serialVersionUID  boolean  
[BugLab_Wrong_Operator]^ret = getScale (  )  * Math.pow ( -Math.log ( 1.0  <  p ) , 1.0 / getShape (  )  ) ;^105^^^^^95^108^ret = getScale (  )  * Math.pow ( -Math.log ( 1.0 - p ) , 1.0 / getShape (  )  ) ;^[CLASS] WeibullDistributionImpl  [METHOD] inverseCumulativeProbability [RETURN_TYPE] double   double p [VARIABLES] double  alpha  beta  p  ret  x  long  serialVersionUID  boolean  
[BugLab_Wrong_Operator]^ret / = getScale (  )  * Math.pow ( -Math.log ( 1.0 - p ) , 1.0 / getShape (  )  ) ;^105^^^^^95^108^ret = getScale (  )  * Math.pow ( -Math.log ( 1.0 - p ) , 1.0 / getShape (  )  ) ;^[CLASS] WeibullDistributionImpl  [METHOD] inverseCumulativeProbability [RETURN_TYPE] double   double p [VARIABLES] double  alpha  beta  p  ret  x  long  serialVersionUID  boolean  
[BugLab_Wrong_Operator]^ret = getScale (  )  * Math.pow ( -Math.log ( 1.0  !=  p ) , 1.0 / getShape (  )  ) ;^105^^^^^95^108^ret = getScale (  )  * Math.pow ( -Math.log ( 1.0 - p ) , 1.0 / getShape (  )  ) ;^[CLASS] WeibullDistributionImpl  [METHOD] inverseCumulativeProbability [RETURN_TYPE] double   double p [VARIABLES] double  alpha  beta  p  ret  x  long  serialVersionUID  boolean  
[BugLab_Wrong_Operator]^ret = getScale (  )  * Math.pow ( -Math.log ( 1.0 - p ) , 1.0 - getShape (  )  ) ;^105^^^^^95^108^ret = getScale (  )  * Math.pow ( -Math.log ( 1.0 - p ) , 1.0 / getShape (  )  ) ;^[CLASS] WeibullDistributionImpl  [METHOD] inverseCumulativeProbability [RETURN_TYPE] double   double p [VARIABLES] double  alpha  beta  p  ret  x  long  serialVersionUID  boolean  
[BugLab_Variable_Misuse]^} else  if  ( x == 1 )  {^102^^^^^95^108^} else  if  ( p == 1 )  {^[CLASS] WeibullDistributionImpl  [METHOD] inverseCumulativeProbability [RETURN_TYPE] double   double p [VARIABLES] double  alpha  beta  p  ret  x  long  serialVersionUID  boolean  
[BugLab_Wrong_Operator]^} else  if  ( p <= 1 )  {^102^^^^^95^108^} else  if  ( p == 1 )  {^[CLASS] WeibullDistributionImpl  [METHOD] inverseCumulativeProbability [RETURN_TYPE] double   double p [VARIABLES] double  alpha  beta  p  ret  x  long  serialVersionUID  boolean  
[BugLab_Wrong_Literal]^} else  if  ( p == 2 )  {^102^^^^^95^108^} else  if  ( p == 1 )  {^[CLASS] WeibullDistributionImpl  [METHOD] inverseCumulativeProbability [RETURN_TYPE] double   double p [VARIABLES] double  alpha  beta  p  ret  x  long  serialVersionUID  boolean  
[BugLab_Wrong_Operator]^ret = getScale (  )  * Math.pow ( -Math.log ( 1.0  ^  p ) , 1.0 / getShape (  )  ) ;^105^^^^^95^108^ret = getScale (  )  * Math.pow ( -Math.log ( 1.0 - p ) , 1.0 / getShape (  )  ) ;^[CLASS] WeibullDistributionImpl  [METHOD] inverseCumulativeProbability [RETURN_TYPE] double   double p [VARIABLES] double  alpha  beta  p  ret  x  long  serialVersionUID  boolean  
[BugLab_Wrong_Operator]^ret = getScale (  )  * Math.pow ( -Math.log ( 1.0  >=  p ) , 1.0 / getShape (  )  ) ;^105^^^^^95^108^ret = getScale (  )  * Math.pow ( -Math.log ( 1.0 - p ) , 1.0 / getShape (  )  ) ;^[CLASS] WeibullDistributionImpl  [METHOD] inverseCumulativeProbability [RETURN_TYPE] double   double p [VARIABLES] double  alpha  beta  p  ret  x  long  serialVersionUID  boolean  
[BugLab_Wrong_Operator]^ret = getScale (  )  * Math.pow ( -Math.log ( 1.0 - p ) , 1.0 * getShape (  )  ) ;^105^^^^^95^108^ret = getScale (  )  * Math.pow ( -Math.log ( 1.0 - p ) , 1.0 / getShape (  )  ) ;^[CLASS] WeibullDistributionImpl  [METHOD] inverseCumulativeProbability [RETURN_TYPE] double   double p [VARIABLES] double  alpha  beta  p  ret  x  long  serialVersionUID  boolean  
[BugLab_Wrong_Operator]^ret = getScale (  )  * Math.pow ( -Math.log ( 1.0  <<  p ) , 1.0 / getShape (  )  ) ;^105^^^^^95^108^ret = getScale (  )  * Math.pow ( -Math.log ( 1.0 - p ) , 1.0 / getShape (  )  ) ;^[CLASS] WeibullDistributionImpl  [METHOD] inverseCumulativeProbability [RETURN_TYPE] double   double p [VARIABLES] double  alpha  beta  p  ret  x  long  serialVersionUID  boolean  
[BugLab_Wrong_Operator]^ret = getScale (  )  * Math.pow ( -Math.log ( 1.0  |  p ) , 1.0 / getShape (  )  ) ;^105^^^^^95^108^ret = getScale (  )  * Math.pow ( -Math.log ( 1.0 - p ) , 1.0 / getShape (  )  ) ;^[CLASS] WeibullDistributionImpl  [METHOD] inverseCumulativeProbability [RETURN_TYPE] double   double p [VARIABLES] double  alpha  beta  p  ret  x  long  serialVersionUID  boolean  
[BugLab_Wrong_Operator]^ret = getScale (  )  * Math.pow ( -Math.log ( 1.0  >>  p ) , 1.0 / getShape (  )  ) ;^105^^^^^95^108^ret = getScale (  )  * Math.pow ( -Math.log ( 1.0 - p ) , 1.0 / getShape (  )  ) ;^[CLASS] WeibullDistributionImpl  [METHOD] inverseCumulativeProbability [RETURN_TYPE] double   double p [VARIABLES] double  alpha  beta  p  ret  x  long  serialVersionUID  boolean  
[BugLab_Wrong_Operator]^} else if  ( p > 0 )  {^100^^^^^95^108^} else if  ( p == 0 )  {^[CLASS] WeibullDistributionImpl  [METHOD] inverseCumulativeProbability [RETURN_TYPE] double   double p [VARIABLES] double  alpha  beta  p  ret  x  long  serialVersionUID  boolean  
[BugLab_Wrong_Literal]^} else if  ( p == -1 )  {^100^^^^^95^108^} else if  ( p == 0 )  {^[CLASS] WeibullDistributionImpl  [METHOD] inverseCumulativeProbability [RETURN_TYPE] double   double p [VARIABLES] double  alpha  beta  p  ret  x  long  serialVersionUID  boolean  
[BugLab_Wrong_Operator]^ret - = getScale (  )  * Math.pow ( -Math.log ( 1.0 - p ) , 1.0 / getShape (  )  ) ;^105^^^^^95^108^ret = getScale (  )  * Math.pow ( -Math.log ( 1.0 - p ) , 1.0 / getShape (  )  ) ;^[CLASS] WeibullDistributionImpl  [METHOD] inverseCumulativeProbability [RETURN_TYPE] double   double p [VARIABLES] double  alpha  beta  p  ret  x  long  serialVersionUID  boolean  
[BugLab_Wrong_Operator]^ret = getScale (  )  * Math.pow ( -Math.log ( 1.0  &&  p ) , 1.0 / getShape (  )  ) ;^105^^^^^95^108^ret = getScale (  )  * Math.pow ( -Math.log ( 1.0 - p ) , 1.0 / getShape (  )  ) ;^[CLASS] WeibullDistributionImpl  [METHOD] inverseCumulativeProbability [RETURN_TYPE] double   double p [VARIABLES] double  alpha  beta  p  ret  x  long  serialVersionUID  boolean  
[BugLab_Wrong_Operator]^ret = getScale (  )  * Math.pow ( -Math.log ( 1.0  >  p ) , 1.0 / getShape (  )  ) ;^105^^^^^95^108^ret = getScale (  )  * Math.pow ( -Math.log ( 1.0 - p ) , 1.0 / getShape (  )  ) ;^[CLASS] WeibullDistributionImpl  [METHOD] inverseCumulativeProbability [RETURN_TYPE] double   double p [VARIABLES] double  alpha  beta  p  ret  x  long  serialVersionUID  boolean  
[BugLab_Wrong_Operator]^ret = getScale (  )  * Math.pow ( -Math.log ( 1.0   instanceof   p ) , 1.0 / getShape (  )  ) ;^105^^^^^95^108^ret = getScale (  )  * Math.pow ( -Math.log ( 1.0 - p ) , 1.0 / getShape (  )  ) ;^[CLASS] WeibullDistributionImpl  [METHOD] inverseCumulativeProbability [RETURN_TYPE] double   double p [VARIABLES] double  alpha  beta  p  ret  x  long  serialVersionUID  boolean  
[BugLab_Variable_Misuse]^return x;^107^^^^^95^108^return ret;^[CLASS] WeibullDistributionImpl  [METHOD] inverseCumulativeProbability [RETURN_TYPE] double   double p [VARIABLES] double  alpha  beta  p  ret  x  long  serialVersionUID  boolean  
[BugLab_Variable_Misuse]^if  ( x <= 0.0 )  {^115^^^^^114^120^if  ( alpha <= 0.0 )  {^[CLASS] WeibullDistributionImpl  [METHOD] setShape [RETURN_TYPE] void   double alpha [VARIABLES] double  alpha  beta  p  ret  x  long  serialVersionUID  boolean  
[BugLab_Wrong_Operator]^if  ( alpha < 0.0 )  {^115^^^^^114^120^if  ( alpha <= 0.0 )  {^[CLASS] WeibullDistributionImpl  [METHOD] setShape [RETURN_TYPE] void   double alpha [VARIABLES] double  alpha  beta  p  ret  x  long  serialVersionUID  boolean  
[BugLab_Variable_Misuse]^if  ( ret <= 0.0 )  {^127^^^^^126^132^if  ( beta <= 0.0 )  {^[CLASS] WeibullDistributionImpl  [METHOD] setScale [RETURN_TYPE] void   double beta [VARIABLES] double  alpha  beta  p  ret  x  long  serialVersionUID  boolean  
[BugLab_Wrong_Operator]^if  ( beta < 0.0 )  {^127^^^^^126^132^if  ( beta <= 0.0 )  {^[CLASS] WeibullDistributionImpl  [METHOD] setScale [RETURN_TYPE] void   double beta [VARIABLES] double  alpha  beta  p  ret  x  long  serialVersionUID  boolean  
[BugLab_Variable_Misuse]^this.beta = x;^131^^^^^126^132^this.beta = beta;^[CLASS] WeibullDistributionImpl  [METHOD] setScale [RETURN_TYPE] void   double beta [VARIABLES] double  alpha  beta  p  ret  x  long  serialVersionUID  boolean  
[BugLab_Wrong_Operator]^return - Math.pow ( getScale (  )  * Math.log ( 2.0 ) , 1.0 / getShape (  )  ) ;^170^^^^^168^171^return Math.pow ( getScale (  )  * Math.log ( 2.0 ) , 1.0 / getShape (  )  ) ;^[CLASS] WeibullDistributionImpl  [METHOD] getInitialDomain [RETURN_TYPE] double   double p [VARIABLES] double  alpha  beta  p  ret  x  long  serialVersionUID  boolean  
[BugLab_Wrong_Operator]^return Math.pow ( getScale (  )  * Math.log ( 2.0 ) , 1.0 * getShape (  )  ) ;^170^^^^^168^171^return Math.pow ( getScale (  )  * Math.log ( 2.0 ) , 1.0 / getShape (  )  ) ;^[CLASS] WeibullDistributionImpl  [METHOD] getInitialDomain [RETURN_TYPE] double   double p [VARIABLES] double  alpha  beta  p  ret  x  long  serialVersionUID  boolean  
[BugLab_Wrong_Operator]^return / Math.pow ( getScale (  )  * Math.log ( 2.0 ) , 1.0 / getShape (  )  ) ;^170^^^^^168^171^return Math.pow ( getScale (  )  * Math.log ( 2.0 ) , 1.0 / getShape (  )  ) ;^[CLASS] WeibullDistributionImpl  [METHOD] getInitialDomain [RETURN_TYPE] double   double p [VARIABLES] double  alpha  beta  p  ret  x  long  serialVersionUID  boolean  
[BugLab_Wrong_Operator]^return Math.pow ( getScale (  )  * Math.log ( 2.0 ) , 1.0 + getShape (  )  ) ;^170^^^^^168^171^return Math.pow ( getScale (  )  * Math.log ( 2.0 ) , 1.0 / getShape (  )  ) ;^[CLASS] WeibullDistributionImpl  [METHOD] getInitialDomain [RETURN_TYPE] double   double p [VARIABLES] double  alpha  beta  p  ret  x  long  serialVersionUID  boolean  
