[BugLab_Argument_Swapping]^outBuffer.append ( value.format ( getPct ( nf )  )  ) ;^81^^^^^70^87^outBuffer.append ( nf.format ( getPct ( value )  )  ) ;^[CLASS] Frequency NaturalComparator  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] StringBuffer  outBuffer  boolean  Iterator  iter  Object  value  TreeMap  freqTable  long  serialVersionUID  NumberFormat  nf  
[BugLab_Argument_Swapping]^outBuffer.append ( value.format ( getCumPct ( nf )  )  ) ;^83^^^^^70^87^outBuffer.append ( nf.format ( getCumPct ( value )  )  ) ;^[CLASS] Frequency NaturalComparator  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] StringBuffer  outBuffer  boolean  Iterator  iter  Object  value  TreeMap  freqTable  long  serialVersionUID  NumberFormat  nf  
[BugLab_Variable_Misuse]^if  ( obj instanceof Integer )  {^97^^^^^95^111^if  ( v instanceof Integer )  {^[CLASS] Frequency NaturalComparator  [METHOD] addValue [RETURN_TYPE] void   Object v [VARIABLES] Long  count  Object  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  
[BugLab_Wrong_Operator]^if  ( v  <<  Integer )  {^97^^^^^95^111^if  ( v instanceof Integer )  {^[CLASS] Frequency NaturalComparator  [METHOD] addValue [RETURN_TYPE] void   Object v [VARIABLES] Long  count  Object  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  
[BugLab_Wrong_Operator]^if  ( count != null )  {^102^^^^^95^111^if  ( count == null )  {^[CLASS] Frequency NaturalComparator  [METHOD] addValue [RETURN_TYPE] void   Object v [VARIABLES] Long  count  Object  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  
[BugLab_Wrong_Operator]^freqTable.put ( obj, new Long ( count.longValue (  )   <  1 )  ) ;^105^^^^^95^111^freqTable.put ( obj, new Long ( count.longValue (  )  + 1 )  ) ;^[CLASS] Frequency NaturalComparator  [METHOD] addValue [RETURN_TYPE] void   Object v [VARIABLES] Long  count  Object  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  
[BugLab_Wrong_Literal]^freqTable.put ( obj, new Long ( count.longValue (  )   )  ) ;^105^^^^^95^111^freqTable.put ( obj, new Long ( count.longValue (  )  + 1 )  ) ;^[CLASS] Frequency NaturalComparator  [METHOD] addValue [RETURN_TYPE] void   Object v [VARIABLES] Long  count  Object  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  
[BugLab_Variable_Misuse]^freqTable.put ( v, new Long ( count.longValue (  )  + 1 )  ) ;^105^^^^^95^111^freqTable.put ( obj, new Long ( count.longValue (  )  + 1 )  ) ;^[CLASS] Frequency NaturalComparator  [METHOD] addValue [RETURN_TYPE] void   Object v [VARIABLES] Long  count  Object  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  
[BugLab_Argument_Swapping]^freqTable.put ( count, new Long ( obj.longValue (  )  + 1 )  ) ;^105^^^^^95^111^freqTable.put ( obj, new Long ( count.longValue (  )  + 1 )  ) ;^[CLASS] Frequency NaturalComparator  [METHOD] addValue [RETURN_TYPE] void   Object v [VARIABLES] Long  count  Object  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  
[BugLab_Wrong_Operator]^freqTable.put ( obj, new Long ( count.longValue (  )   ==  1 )  ) ;^105^^^^^95^111^freqTable.put ( obj, new Long ( count.longValue (  )  + 1 )  ) ;^[CLASS] Frequency NaturalComparator  [METHOD] addValue [RETURN_TYPE] void   Object v [VARIABLES] Long  count  Object  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  
[BugLab_Wrong_Literal]^freqTable.put ( obj, new Long ( 0 )  ) ;^103^^^^^95^111^freqTable.put ( obj, new Long ( 1 )  ) ;^[CLASS] Frequency NaturalComparator  [METHOD] addValue [RETURN_TYPE] void   Object v [VARIABLES] Long  count  Object  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  
[BugLab_Variable_Misuse]^freqTable.put ( v, new Long ( 1 )  ) ;^103^^^^^95^111^freqTable.put ( obj, new Long ( 1 )  ) ;^[CLASS] Frequency NaturalComparator  [METHOD] addValue [RETURN_TYPE] void   Object v [VARIABLES] Long  count  Object  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  
[BugLab_Wrong_Literal]^freqTable.put ( obj, new Long ( this )  ) ;^103^^^^^95^111^freqTable.put ( obj, new Long ( 1 )  ) ;^[CLASS] Frequency NaturalComparator  [METHOD] addValue [RETURN_TYPE] void   Object v [VARIABLES] Long  count  Object  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  
[BugLab_Wrong_Operator]^freqTable.put ( obj, new Long ( count.longValue (  )   >>  1 )  ) ;^105^^^^^95^111^freqTable.put ( obj, new Long ( count.longValue (  )  + 1 )  ) ;^[CLASS] Frequency NaturalComparator  [METHOD] addValue [RETURN_TYPE] void   Object v [VARIABLES] Long  count  Object  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  
[BugLab_Wrong_Operator]^freqTable.put ( obj, new Long ( count.longValue (  )    instanceof   1 )  ) ;^105^^^^^95^111^freqTable.put ( obj, new Long ( count.longValue (  )  + 1 )  ) ;^[CLASS] Frequency NaturalComparator  [METHOD] addValue [RETURN_TYPE] void   Object v [VARIABLES] Long  count  Object  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  
[BugLab_Wrong_Literal]^freqTable.put ( obj, new Long ( 2 )  ) ;^103^^^^^95^111^freqTable.put ( obj, new Long ( 1 )  ) ;^[CLASS] Frequency NaturalComparator  [METHOD] addValue [RETURN_TYPE] void   Object v [VARIABLES] Long  count  Object  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  
[BugLab_Wrong_Operator]^freqTable.put ( obj, new Long ( count.longValue (  )   ||  1 )  ) ;^105^^^^^95^111^freqTable.put ( obj, new Long ( count.longValue (  )  + 1 )  ) ;^[CLASS] Frequency NaturalComparator  [METHOD] addValue [RETURN_TYPE] void   Object v [VARIABLES] Long  count  Object  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  
[BugLab_Variable_Misuse]^Long count =  ( Long )  freqTable.get ( v ) ;^101^^^^^95^111^Long count =  ( Long )  freqTable.get ( obj ) ;^[CLASS] Frequency NaturalComparator  [METHOD] addValue [RETURN_TYPE] void   Object v [VARIABLES] Long  count  Object  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  
[BugLab_Argument_Swapping]^Long count =  ( Long )  obj.get ( freqTable ) ;^101^^^^^95^111^Long count =  ( Long )  freqTable.get ( obj ) ;^[CLASS] Frequency NaturalComparator  [METHOD] addValue [RETURN_TYPE] void   Object v [VARIABLES] Long  count  Object  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  
[BugLab_Wrong_Operator]^freqTable.put ( obj, new Long ( count.longValue (  )   <=  1 )  ) ;^105^^^^^95^111^freqTable.put ( obj, new Long ( count.longValue (  )  + 1 )  ) ;^[CLASS] Frequency NaturalComparator  [METHOD] addValue [RETURN_TYPE] void   Object v [VARIABLES] Long  count  Object  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  
[BugLab_Wrong_Operator]^freqTable.put ( obj, new Long ( count.longValue (  )   <<  1 )  ) ;^105^^^^^95^111^freqTable.put ( obj, new Long ( count.longValue (  )  + 1 )  ) ;^[CLASS] Frequency NaturalComparator  [METHOD] addValue [RETURN_TYPE] void   Object v [VARIABLES] Long  count  Object  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  
[BugLab_Wrong_Operator]^freqTable.put ( obj, new Long ( count.longValue (  )   &  1 )  ) ;^105^^^^^95^111^freqTable.put ( obj, new Long ( count.longValue (  )  + 1 )  ) ;^[CLASS] Frequency NaturalComparator  [METHOD] addValue [RETURN_TYPE] void   Object v [VARIABLES] Long  count  Object  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  
[BugLab_Variable_Misuse]^addValue ( new Long ( serialVersionUID )  ) ;^137^^^^^136^138^addValue ( new Long ( v )  ) ;^[CLASS] Frequency NaturalComparator  [METHOD] addValue [RETURN_TYPE] void   long v [VARIABLES] TreeMap  freqTable  long  serialVersionUID  v  boolean  
[BugLab_Variable_Misuse]^return v;^180^^^^^174^181^return result;^[CLASS] Frequency NaturalComparator  [METHOD] getSumFreq [RETURN_TYPE] long   [VARIABLES] Iterator  iterator  boolean  TreeMap  freqTable  long  result  serialVersionUID  v  
[BugLab_Wrong_Operator]^if  ( v  >=  Integer )  {^190^^^^^189^203^if  ( v instanceof Integer )  {^[CLASS] Frequency NaturalComparator  [METHOD] getCount [RETURN_TYPE] long   Object v [VARIABLES] Long  count  Object  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  v  ClassCastException  ex  
[BugLab_Wrong_Operator]^if  ( count == null )  {^196^^^^^189^203^if  ( count != null )  {^[CLASS] Frequency NaturalComparator  [METHOD] getCount [RETURN_TYPE] long   Object v [VARIABLES] Long  count  Object  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  v  ClassCastException  ex  
[BugLab_Argument_Swapping]^Long count =   ( Long )  v.get ( freqTable ) ;^195^^^^^189^203^Long count =   ( Long )  freqTable.get ( v ) ;^[CLASS] Frequency NaturalComparator  [METHOD] getCount [RETURN_TYPE] long   Object v [VARIABLES] Long  count  Object  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  v  ClassCastException  ex  
[BugLab_Variable_Misuse]^return v;^202^^^^^189^203^return result;^[CLASS] Frequency NaturalComparator  [METHOD] getCount [RETURN_TYPE] long   Object v [VARIABLES] Long  count  Object  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  v  ClassCastException  ex  
[BugLab_Variable_Misuse]^return getCount ( new Long ( serialVersionUID )  ) ;^222^^^^^221^223^return getCount ( new Long ( v )  ) ;^[CLASS] Frequency NaturalComparator  [METHOD] getCount [RETURN_TYPE] long   long v [VARIABLES] TreeMap  freqTable  long  result  serialVersionUID  v  boolean  
[BugLab_Wrong_Operator]^if  ( getSumFreq (  )  >= 0 )  {^247^^^^^246^251^if  ( getSumFreq (  )  == 0 )  {^[CLASS] Frequency NaturalComparator  [METHOD] getPct [RETURN_TYPE] double   Object v [VARIABLES] Object  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  v  
[BugLab_Wrong_Literal]^if  ( getSumFreq (  )  == -1 )  {^247^^^^^246^251^if  ( getSumFreq (  )  == 0 )  {^[CLASS] Frequency NaturalComparator  [METHOD] getPct [RETURN_TYPE] double   Object v [VARIABLES] Object  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  v  
[BugLab_Wrong_Operator]^return  ( double )  getCount ( v )  *  ( double )  getSumFreq (  ) ;^250^^^^^246^251^return  ( double )  getCount ( v )  /  ( double )  getSumFreq (  ) ;^[CLASS] Frequency NaturalComparator  [METHOD] getPct [RETURN_TYPE] double   Object v [VARIABLES] Object  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  v  
[BugLab_Variable_Misuse]^return getPct ( new Long ( serialVersionUID )  ) ;^272^^^^^271^273^return getPct ( new Long ( v )  ) ;^[CLASS] Frequency NaturalComparator  [METHOD] getPct [RETURN_TYPE] double   long v [VARIABLES] TreeMap  freqTable  long  result  serialVersionUID  v  boolean  
[BugLab_Wrong_Operator]^if  ( getSumFreq (  )  != 0 )  {^297^^^^^282^312^if  ( getSumFreq (  )  == 0 )  {^[CLASS] Frequency NaturalComparator  [METHOD] getCumFreq [RETURN_TYPE] long   Object v [VARIABLES] boolean  ClassCastException  ex  Long  value  Iterator  values  Object  nextValue  v  TreeMap  freqTable  long  result  serialVersionUID  v  Comparator  c  
[BugLab_Wrong_Literal]^if  ( getSumFreq (  )  == 1 )  {^297^^^^^282^312^if  ( getSumFreq (  )  == 0 )  {^[CLASS] Frequency NaturalComparator  [METHOD] getCumFreq [RETURN_TYPE] long   Object v [VARIABLES] boolean  ClassCastException  ex  Long  value  Iterator  values  Object  nextValue  v  TreeMap  freqTable  long  result  serialVersionUID  v  Comparator  c  
[BugLab_Wrong_Literal]^return 1;^298^^^^^283^313^return 0;^[CLASS] Frequency NaturalComparator  [METHOD] getCumFreq [RETURN_TYPE] long   Object v [VARIABLES] boolean  ClassCastException  ex  Long  value  Iterator  values  Object  nextValue  v  TreeMap  freqTable  long  result  serialVersionUID  v  Comparator  c  
[BugLab_Variable_Misuse]^if  ( nextValue instanceof Integer )  {^300^^^^^285^315^if  ( v instanceof Integer )  {^[CLASS] Frequency NaturalComparator  [METHOD] getCumFreq [RETURN_TYPE] long   Object v [VARIABLES] boolean  ClassCastException  ex  Long  value  Iterator  values  Object  nextValue  v  TreeMap  freqTable  long  result  serialVersionUID  v  Comparator  c  
[BugLab_Wrong_Operator]^if  ( v  ==  Integer )  {^300^^^^^285^315^if  ( v instanceof Integer )  {^[CLASS] Frequency NaturalComparator  [METHOD] getCumFreq [RETURN_TYPE] long   Object v [VARIABLES] boolean  ClassCastException  ex  Long  value  Iterator  values  Object  nextValue  v  TreeMap  freqTable  long  result  serialVersionUID  v  Comparator  c  
[BugLab_Wrong_Operator]^if  ( c != null )  {^304^^^^^289^319^if  ( c == null )  {^[CLASS] Frequency NaturalComparator  [METHOD] getCumFreq [RETURN_TYPE] long   Object v [VARIABLES] boolean  ClassCastException  ex  Long  value  Iterator  values  Object  nextValue  v  TreeMap  freqTable  long  result  serialVersionUID  v  Comparator  c  
[BugLab_Wrong_Literal]^long result = 1;^307^^^^^292^322^long result = 0;^[CLASS] Frequency NaturalComparator  [METHOD] getCumFreq [RETURN_TYPE] long   Object v [VARIABLES] boolean  ClassCastException  ex  Long  value  Iterator  values  Object  nextValue  v  TreeMap  freqTable  long  result  serialVersionUID  v  Comparator  c  
[BugLab_Wrong_Operator]^if  ( value == null )  {^311^^^^^296^326^if  ( value != null )  {^[CLASS] Frequency NaturalComparator  [METHOD] getCumFreq [RETURN_TYPE] long   Object v [VARIABLES] boolean  ClassCastException  ex  Long  value  Iterator  values  Object  nextValue  v  TreeMap  freqTable  long  result  serialVersionUID  v  Comparator  c  
[BugLab_Argument_Swapping]^Long freqTablealue =  ( Long )  v.get ( v ) ;^310^^^^^295^325^Long value =  ( Long )  freqTable.get ( v ) ;^[CLASS] Frequency NaturalComparator  [METHOD] getCumFreq [RETURN_TYPE] long   Object v [VARIABLES] boolean  ClassCastException  ex  Long  value  Iterator  values  Object  nextValue  v  TreeMap  freqTable  long  result  serialVersionUID  v  Comparator  c  
[BugLab_Variable_Misuse]^Long nextValuealue =  ( Long )  freqTable.get ( v ) ;^310^^^^^295^325^Long value =  ( Long )  freqTable.get ( v ) ;^[CLASS] Frequency NaturalComparator  [METHOD] getCumFreq [RETURN_TYPE] long   Object v [VARIABLES] boolean  ClassCastException  ex  Long  value  Iterator  values  Object  nextValue  v  TreeMap  freqTable  long  result  serialVersionUID  v  Comparator  c  
[BugLab_Variable_Misuse]^return v;^315^^^^^300^330^return result;^[CLASS] Frequency NaturalComparator  [METHOD] getCumFreq [RETURN_TYPE] long   Object v [VARIABLES] boolean  ClassCastException  ex  Long  value  Iterator  values  Object  nextValue  v  TreeMap  freqTable  long  result  serialVersionUID  v  Comparator  c  
[BugLab_Variable_Misuse]^if  ( c.compare ( nextValue, freqTable.firstKey (  )  )  < 0 )  {^318^^^^^303^333^if  ( c.compare ( v, freqTable.firstKey (  )  )  < 0 )  {^[CLASS] Frequency NaturalComparator  [METHOD] getCumFreq [RETURN_TYPE] long   Object v [VARIABLES] boolean  ClassCastException  ex  Long  value  Iterator  values  Object  nextValue  v  TreeMap  freqTable  long  result  serialVersionUID  v  Comparator  c  
[BugLab_Argument_Swapping]^if  ( freqTable.compare ( v, c.firstKey (  )  )  < 0 )  {^318^^^^^303^333^if  ( c.compare ( v, freqTable.firstKey (  )  )  < 0 )  {^[CLASS] Frequency NaturalComparator  [METHOD] getCumFreq [RETURN_TYPE] long   Object v [VARIABLES] boolean  ClassCastException  ex  Long  value  Iterator  values  Object  nextValue  v  TreeMap  freqTable  long  result  serialVersionUID  v  Comparator  c  
[BugLab_Argument_Swapping]^if  ( v.compare ( c, freqTable.firstKey (  )  )  < 0 )  {^318^^^^^303^333^if  ( c.compare ( v, freqTable.firstKey (  )  )  < 0 )  {^[CLASS] Frequency NaturalComparator  [METHOD] getCumFreq [RETURN_TYPE] long   Object v [VARIABLES] boolean  ClassCastException  ex  Long  value  Iterator  values  Object  nextValue  v  TreeMap  freqTable  long  result  serialVersionUID  v  Comparator  c  
[BugLab_Argument_Swapping]^if  ( c.compare ( freqTable, v.firstKey (  )  )  < 0 )  {^318^^^^^303^333^if  ( c.compare ( v, freqTable.firstKey (  )  )  < 0 )  {^[CLASS] Frequency NaturalComparator  [METHOD] getCumFreq [RETURN_TYPE] long   Object v [VARIABLES] boolean  ClassCastException  ex  Long  value  Iterator  values  Object  nextValue  v  TreeMap  freqTable  long  result  serialVersionUID  v  Comparator  c  
[BugLab_Wrong_Operator]^if  ( c.compare ( v, freqTable.firstKey (  )  )  > 0 )  {^318^^^^^303^333^if  ( c.compare ( v, freqTable.firstKey (  )  )  < 0 )  {^[CLASS] Frequency NaturalComparator  [METHOD] getCumFreq [RETURN_TYPE] long   Object v [VARIABLES] boolean  ClassCastException  ex  Long  value  Iterator  values  Object  nextValue  v  TreeMap  freqTable  long  result  serialVersionUID  v  Comparator  c  
[BugLab_Variable_Misuse]^if  ( c.compare ( nextValue, freqTable.lastKey (  )  )  >= 0 )  {^322^^^^^307^337^if  ( c.compare ( v, freqTable.lastKey (  )  )  >= 0 )  {^[CLASS] Frequency NaturalComparator  [METHOD] getCumFreq [RETURN_TYPE] long   Object v [VARIABLES] boolean  ClassCastException  ex  Long  value  Iterator  values  Object  nextValue  v  TreeMap  freqTable  long  result  serialVersionUID  v  Comparator  c  
[BugLab_Argument_Swapping]^if  ( freqTable.compare ( v, c.lastKey (  )  )  >= 0 )  {^322^^^^^307^337^if  ( c.compare ( v, freqTable.lastKey (  )  )  >= 0 )  {^[CLASS] Frequency NaturalComparator  [METHOD] getCumFreq [RETURN_TYPE] long   Object v [VARIABLES] boolean  ClassCastException  ex  Long  value  Iterator  values  Object  nextValue  v  TreeMap  freqTable  long  result  serialVersionUID  v  Comparator  c  
[BugLab_Argument_Swapping]^if  ( c.compare ( freqTable, v.lastKey (  )  )  >= 0 )  {^322^^^^^307^337^if  ( c.compare ( v, freqTable.lastKey (  )  )  >= 0 )  {^[CLASS] Frequency NaturalComparator  [METHOD] getCumFreq [RETURN_TYPE] long   Object v [VARIABLES] boolean  ClassCastException  ex  Long  value  Iterator  values  Object  nextValue  v  TreeMap  freqTable  long  result  serialVersionUID  v  Comparator  c  
[BugLab_Wrong_Operator]^if  ( c.compare ( v, freqTable.lastKey (  )  )  == 0 )  {^322^^^^^307^337^if  ( c.compare ( v, freqTable.lastKey (  )  )  >= 0 )  {^[CLASS] Frequency NaturalComparator  [METHOD] getCumFreq [RETURN_TYPE] long   Object v [VARIABLES] boolean  ClassCastException  ex  Long  value  Iterator  values  Object  nextValue  v  TreeMap  freqTable  long  result  serialVersionUID  v  Comparator  c  
[BugLab_Argument_Swapping]^if  ( v.compare ( c, freqTable.lastKey (  )  )  >= 0 )  {^322^^^^^307^337^if  ( c.compare ( v, freqTable.lastKey (  )  )  >= 0 )  {^[CLASS] Frequency NaturalComparator  [METHOD] getCumFreq [RETURN_TYPE] long   Object v [VARIABLES] boolean  ClassCastException  ex  Long  value  Iterator  values  Object  nextValue  v  TreeMap  freqTable  long  result  serialVersionUID  v  Comparator  c  
[BugLab_Argument_Swapping]^if  ( v.compare ( c, nextValue )  > 0 )  {^329^^^^^314^344^if  ( c.compare ( v, nextValue )  > 0 )  {^[CLASS] Frequency NaturalComparator  [METHOD] getCumFreq [RETURN_TYPE] long   Object v [VARIABLES] boolean  ClassCastException  ex  Long  value  Iterator  values  Object  nextValue  v  TreeMap  freqTable  long  result  serialVersionUID  v  Comparator  c  
[BugLab_Argument_Swapping]^if  ( c.compare ( nextValue, v )  > 0 )  {^329^^^^^314^344^if  ( c.compare ( v, nextValue )  > 0 )  {^[CLASS] Frequency NaturalComparator  [METHOD] getCumFreq [RETURN_TYPE] long   Object v [VARIABLES] boolean  ClassCastException  ex  Long  value  Iterator  values  Object  nextValue  v  TreeMap  freqTable  long  result  serialVersionUID  v  Comparator  c  
[BugLab_Wrong_Operator]^if  ( c.compare ( v, nextValue )  == 0 )  {^329^^^^^314^344^if  ( c.compare ( v, nextValue )  > 0 )  {^[CLASS] Frequency NaturalComparator  [METHOD] getCumFreq [RETURN_TYPE] long   Object v [VARIABLES] boolean  ClassCastException  ex  Long  value  Iterator  values  Object  nextValue  v  TreeMap  freqTable  long  result  serialVersionUID  v  Comparator  c  
[BugLab_Wrong_Literal]^if  ( c.compare ( v, nextValue )  > this )  {^329^^^^^314^344^if  ( c.compare ( v, nextValue )  > 0 )  {^[CLASS] Frequency NaturalComparator  [METHOD] getCumFreq [RETURN_TYPE] long   Object v [VARIABLES] boolean  ClassCastException  ex  Long  value  Iterator  values  Object  nextValue  v  TreeMap  freqTable  long  result  serialVersionUID  v  Comparator  c  
[BugLab_Variable_Misuse]^return v;^332^^^^^329^333^return result;^[CLASS] Frequency NaturalComparator  [METHOD] getCumFreq [RETURN_TYPE] long   Object v [VARIABLES] boolean  ClassCastException  ex  Long  value  Iterator  values  Object  nextValue  v  TreeMap  freqTable  long  result  serialVersionUID  v  Comparator  c  
[BugLab_Variable_Misuse]^result += getCount ( v ) ;^330^^^^^315^345^result += getCount ( nextValue ) ;^[CLASS] Frequency NaturalComparator  [METHOD] getCumFreq [RETURN_TYPE] long   Object v [VARIABLES] boolean  ClassCastException  ex  Long  value  Iterator  values  Object  nextValue  v  TreeMap  freqTable  long  result  serialVersionUID  v  Comparator  c  
[BugLab_Variable_Misuse]^return v;^332^^^^^317^347^return result;^[CLASS] Frequency NaturalComparator  [METHOD] getCumFreq [RETURN_TYPE] long   Object v [VARIABLES] boolean  ClassCastException  ex  Long  value  Iterator  values  Object  nextValue  v  TreeMap  freqTable  long  result  serialVersionUID  v  Comparator  c  
[BugLab_Wrong_Operator]^if  ( c.compare ( v, nextValue )  >= 0 )  {^329^^^^^314^344^if  ( c.compare ( v, nextValue )  > 0 )  {^[CLASS] Frequency NaturalComparator  [METHOD] getCumFreq [RETURN_TYPE] long   Object v [VARIABLES] boolean  ClassCastException  ex  Long  value  Iterator  values  Object  nextValue  v  TreeMap  freqTable  long  result  serialVersionUID  v  Comparator  c  
[BugLab_Argument_Swapping]^if  ( nextValue.compare ( v, c )  > 0 )  {^329^^^^^314^344^if  ( c.compare ( v, nextValue )  > 0 )  {^[CLASS] Frequency NaturalComparator  [METHOD] getCumFreq [RETURN_TYPE] long   Object v [VARIABLES] boolean  ClassCastException  ex  Long  value  Iterator  values  Object  nextValue  v  TreeMap  freqTable  long  result  serialVersionUID  v  Comparator  c  
[BugLab_Variable_Misuse]^return v;^335^^^^^320^350^return result;^[CLASS] Frequency NaturalComparator  [METHOD] getCumFreq [RETURN_TYPE] long   Object v [VARIABLES] boolean  ClassCastException  ex  Long  value  Iterator  values  Object  nextValue  v  TreeMap  freqTable  long  result  serialVersionUID  v  Comparator  c  
[BugLab_Variable_Misuse]^return getCumFreq ( new Long ( serialVersionUID )  ) ;^359^^^^^358^360^return getCumFreq ( new Long ( v )  ) ;^[CLASS] Frequency NaturalComparator  [METHOD] getCumFreq [RETURN_TYPE] long   long v [VARIABLES] TreeMap  freqTable  long  result  serialVersionUID  v  boolean  
[BugLab_Wrong_Operator]^if  ( getSumFreq (  )  >= 0 )  {^388^^^^^387^392^if  ( getSumFreq (  )  == 0 )  {^[CLASS] Frequency NaturalComparator  [METHOD] getCumPct [RETURN_TYPE] double   Object v [VARIABLES] Object  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  v  
[BugLab_Wrong_Literal]^if  ( getSumFreq (  )  == 1 )  {^388^^^^^387^392^if  ( getSumFreq (  )  == 0 )  {^[CLASS] Frequency NaturalComparator  [METHOD] getCumPct [RETURN_TYPE] double   Object v [VARIABLES] Object  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  v  
[BugLab_Wrong_Operator]^return  ( double )  getCumFreq ( v )  -  ( double )  getSumFreq (  ) ;^391^^^^^387^392^return  ( double )  getCumFreq ( v )  /  ( double )  getSumFreq (  ) ;^[CLASS] Frequency NaturalComparator  [METHOD] getCumPct [RETURN_TYPE] double   Object v [VARIABLES] Object  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  v  
[BugLab_Variable_Misuse]^return getCumPct ( new Long ( serialVersionUID )  ) ;^417^^^^^416^418^return getCumPct ( new Long ( v )  ) ;^[CLASS] Frequency NaturalComparator  [METHOD] getCumPct [RETURN_TYPE] double   long v [VARIABLES] TreeMap  freqTable  long  result  serialVersionUID  v  boolean  
[BugLab_Variable_Misuse]^return  (  ( Comparable ) o1 ) .compareTo ( o1 ) ;^452^^^^^451^453^return  (  ( Comparable ) o1 ) .compareTo ( o2 ) ;^[CLASS] Frequency NaturalComparator  [METHOD] compare [RETURN_TYPE] int   Object o1 Object o2 [VARIABLES] Object  o1  o2  boolean  TreeMap  freqTable  long  result  serialVersionUID  v  
[BugLab_Variable_Misuse]^return  (  ( Comparable ) o1 ) .compareTo ( o1 ) ;^452^^^^^451^453^return  (  ( Comparable ) o1 ) .compareTo ( o2 ) ;^[CLASS] NaturalComparator  [METHOD] compare [RETURN_TYPE] int   Object o1 Object o2 [VARIABLES] boolean  Object  o1  o2  
