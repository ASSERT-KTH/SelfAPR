[buglab_swap_variables]^if  ( min.value ( f )  == 0.0 )  { return min; }^66^^^^^62^77^if  ( f.value ( min )  == 0.0 )  { return min; }^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max double initial [VARIABLES] long  serialVersionUID  double  initial  max  min  boolean  
[buglab_swap_variables]^if  ( max.value ( f )  == 0.0 )  { return max; }^67^^^^^62^77^if  ( f.value ( max )  == 0.0 )  { return max; }^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max double initial [VARIABLES] long  serialVersionUID  double  initial  max  min  boolean  
[buglab_swap_variables]^if  ( initial.value ( f )  == 0.0 )  { return initial; }^68^^^^^62^77^if  ( f.value ( initial )  == 0.0 )  { return initial; }^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max double initial [VARIABLES] long  serialVersionUID  double  initial  max  min  boolean  
[buglab_swap_variables]^verifyBracketing ( max, min, f ) ;^70^^^^^62^77^verifyBracketing ( min, max, f ) ;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max double initial [VARIABLES] long  serialVersionUID  double  initial  max  min  boolean  
[buglab_swap_variables]^verifyBracketing (  max, f ) ;^70^^^^^62^77^verifyBracketing ( min, max, f ) ;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max double initial [VARIABLES] long  serialVersionUID  double  initial  max  min  boolean  
[buglab_swap_variables]^verifyBracketing ( min,  f ) ;^70^^^^^62^77^verifyBracketing ( min, max, f ) ;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max double initial [VARIABLES] long  serialVersionUID  double  initial  max  min  boolean  
[buglab_swap_variables]^verifyBracketing ( f, max, min ) ;^70^^^^^62^77^verifyBracketing ( min, max, f ) ;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max double initial [VARIABLES] long  serialVersionUID  double  initial  max  min  boolean  
[buglab_swap_variables]^verifyBracketing ( min, max ) ;^70^^^^^62^77^verifyBracketing ( min, max, f ) ;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max double initial [VARIABLES] long  serialVersionUID  double  initial  max  min  boolean  
[buglab_swap_variables]^verifySequence ( max, initial, min ) ;^71^^^^^62^77^verifySequence ( min, initial, max ) ;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max double initial [VARIABLES] long  serialVersionUID  double  initial  max  min  boolean  
[buglab_swap_variables]^verifySequence (  initial, max ) ;^71^^^^^62^77^verifySequence ( min, initial, max ) ;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max double initial [VARIABLES] long  serialVersionUID  double  initial  max  min  boolean  
[buglab_swap_variables]^verifySequence ( initial, min, max ) ;^71^^^^^62^77^verifySequence ( min, initial, max ) ;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max double initial [VARIABLES] long  serialVersionUID  double  initial  max  min  boolean  
[buglab_swap_variables]^verifySequence ( min,  max ) ;^71^^^^^62^77^verifySequence ( min, initial, max ) ;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max double initial [VARIABLES] long  serialVersionUID  double  initial  max  min  boolean  
[buglab_swap_variables]^verifySequence ( min, max, initial ) ;^71^^^^^62^77^verifySequence ( min, initial, max ) ;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max double initial [VARIABLES] long  serialVersionUID  double  initial  max  min  boolean  
[buglab_swap_variables]^verifySequence ( min, initial ) ;^71^^^^^62^77^verifySequence ( min, initial, max ) ;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max double initial [VARIABLES] long  serialVersionUID  double  initial  max  min  boolean  
[buglab_swap_variables]^if  ( isBracketing (  initial, f )  )  {^72^^^^^62^77^if  ( isBracketing ( min, initial, f )  )  {^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max double initial [VARIABLES] long  serialVersionUID  double  initial  max  min  boolean  
[buglab_swap_variables]^if  ( isBracketing ( min,  f )  )  {^72^^^^^62^77^if  ( isBracketing ( min, initial, f )  )  {^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max double initial [VARIABLES] long  serialVersionUID  double  initial  max  min  boolean  
[buglab_swap_variables]^if  ( isBracketing ( min, f, initial )  )  {^72^^^^^62^77^if  ( isBracketing ( min, initial, f )  )  {^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max double initial [VARIABLES] long  serialVersionUID  double  initial  max  min  boolean  
[buglab_swap_variables]^if  ( isBracketing ( min, initial )  )  {^72^^^^^62^77^if  ( isBracketing ( min, initial, f )  )  {^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max double initial [VARIABLES] long  serialVersionUID  double  initial  max  min  boolean  
[buglab_swap_variables]^return solve ( max, initial ) ;^75^^^^^62^77^return solve ( initial, max ) ;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max double initial [VARIABLES] long  serialVersionUID  double  initial  max  min  boolean  
[buglab_swap_variables]^return solve (  max ) ;^75^^^^^62^77^return solve ( initial, max ) ;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max double initial [VARIABLES] long  serialVersionUID  double  initial  max  min  boolean  
[buglab_swap_variables]^return solve ( initial ) ;^75^^^^^62^77^return solve ( initial, max ) ;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max double initial [VARIABLES] long  serialVersionUID  double  initial  max  min  boolean  
[buglab_swap_variables]^return solve ( initial, min ) ;^73^^^^^62^77^return solve ( min, initial ) ;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max double initial [VARIABLES] long  serialVersionUID  double  initial  max  min  boolean  
[buglab_swap_variables]^return solve (  initial ) ;^73^^^^^62^77^return solve ( min, initial ) ;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max double initial [VARIABLES] long  serialVersionUID  double  initial  max  min  boolean  
[buglab_swap_variables]^return solve ( min ) ;^73^^^^^62^77^return solve ( min, initial ) ;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max double initial [VARIABLES] long  serialVersionUID  double  initial  max  min  boolean  
[buglab_swap_variables]^if  ( isBracketing ( initial, min, f )  )  {^72^^^^^62^77^if  ( isBracketing ( min, initial, f )  )  {^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max double initial [VARIABLES] long  serialVersionUID  double  initial  max  min  boolean  
[buglab_swap_variables]^x1 = min; y1 = x1.value ( f ) ;^101^^^^^86^116^x1 = min; y1 = f.value ( x1 ) ;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[buglab_swap_variables]^x2 = max; y2 = x2.value ( f ) ;^102^^^^^87^117^x2 = max; y2 = f.value ( x2 ) ;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[buglab_swap_variables]^if  ( min == 0.0 )  { return y1; }^105^^^^^90^120^if  ( y1 == 0.0 )  { return min; }^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[buglab_swap_variables]^if  ( max == 0.0 )  { return y2; }^106^^^^^91^121^if  ( y2 == 0.0 )  { return max; }^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[buglab_swap_variables]^verifyBracketing ( max, min, f ) ;^107^^^^^92^122^verifyBracketing ( min, max, f ) ;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[buglab_swap_variables]^verifyBracketing (  max, f ) ;^107^^^^^92^122^verifyBracketing ( min, max, f ) ;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[buglab_swap_variables]^verifyBracketing ( min,  f ) ;^107^^^^^92^122^verifyBracketing ( min, max, f ) ;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[buglab_swap_variables]^verifyBracketing ( f, max, min ) ;^107^^^^^92^122^verifyBracketing ( min, max, f ) ;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[buglab_swap_variables]^verifyBracketing ( min, max ) ;^107^^^^^92^122^verifyBracketing ( min, max, f ) ;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[buglab_swap_variables]^setResult ( i, x3 ) ;^116^^^^^101^131^setResult ( x3, i ) ;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[buglab_swap_variables]^setResult (  i ) ;^116^^^^^101^131^setResult ( x3, i ) ;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[buglab_swap_variables]^setResult ( x3 ) ;^116^^^^^101^131^setResult ( x3, i ) ;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[buglab_swap_variables]^if  ( Math.abs ( tolerance - oldx )  <= x )  {^127^^^^^112^142^if  ( Math.abs ( x - oldx )  <= tolerance )  {^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[buglab_swap_variables]^if  ( Math.abs ( x - tolerance )  <= oldx )  {^127^^^^^112^142^if  ( Math.abs ( x - oldx )  <= tolerance )  {^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[buglab_swap_variables]^setResult ( i, x ) ;^128^^^^^113^143^setResult ( x, i ) ;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[buglab_swap_variables]^setResult (  i ) ;^128^^^^^113^143^setResult ( x, i ) ;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[buglab_swap_variables]^setResult ( x ) ;^128^^^^^113^143^setResult ( x, i ) ;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[buglab_swap_variables]^setResult ( i, x ) ;^132^^^^^117^147^setResult ( x, i ) ;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[buglab_swap_variables]^setResult (  i ) ;^132^^^^^117^147^setResult ( x, i ) ;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[buglab_swap_variables]^setResult ( x ) ;^132^^^^^117^147^setResult ( x, i ) ;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[buglab_swap_variables]^if  ( MathUtils.sign ( y22 )  + MathUtils.sign ( y )  == 0.0 )  {^146^^^^^138^152^if  ( MathUtils.sign ( y2 )  + MathUtils.sign ( y )  == 0.0 )  {^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[buglab_swap_variables]^if  ( MathUtils.sign ( y )  + MathUtils.sign ( y1 )  == 0.0 )  {^139^^^^^124^154^if  ( MathUtils.sign ( y1 )  + MathUtils.sign ( y )  == 0.0 )  {^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[buglab_swap_variables]^if  ( MathUtils.sign ( y )  + MathUtils.sign ( y2 )  == 0.0 )  {^146^^^^^131^161^if  ( MathUtils.sign ( y2 )  + MathUtils.sign ( y )  == 0.0 )  {^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[buglab_swap_variables]^x3 = 0.5 *  ( x2 + x1 ) ;^113^^^^^98^128^x3 = 0.5 *  ( x1 + x2 ) ;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[buglab_swap_variables]^y3 = x3.value ( f ) ;^114^^^^^99^129^y3 = f.value ( x3 ) ;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[buglab_swap_variables]^delta = 1 -  ( y3 * y2 )  /  ( y1 * y3 ) ;^119^^^^^104^134^delta = 1 -  ( y1 * y2 )  /  ( y3 * y3 ) ;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[buglab_swap_variables]^delta = 1 -  ( y1 * y3 )  /  ( y2 * y3 ) ;^119^^^^^104^134^delta = 1 -  ( y1 * y2 )  /  ( y3 * y3 ) ;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[buglab_swap_variables]^correction =  ( MathUtils.sign ( x1 )  * MathUtils.sign ( y3 )  )  * ( x3 - y2 )  / Math.sqrt ( delta ) ;^120^121^^^^105^135^correction =  ( MathUtils.sign ( y2 )  * MathUtils.sign ( y3 )  )  * ( x3 - x1 )  / Math.sqrt ( delta ) ;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[buglab_swap_variables]^correction =  ( MathUtils.sign ( y2 )  * MathUtils.sign ( x1 )  )  * ( x3 - y3 )  / Math.sqrt ( delta ) ;^120^121^^^^105^135^correction =  ( MathUtils.sign ( y2 )  * MathUtils.sign ( y3 )  )  * ( x3 - x1 )  / Math.sqrt ( delta ) ;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[buglab_swap_variables]^correction =  ( MathUtils.sign ( x3 )  * MathUtils.sign ( y3 )  )  * ( y2 - x1 )  / Math.sqrt ( delta ) ;^120^121^^^^105^135^correction =  ( MathUtils.sign ( y2 )  * MathUtils.sign ( y3 )  )  * ( x3 - x1 )  / Math.sqrt ( delta ) ;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[buglab_swap_variables]^correction =  ( MathUtils.sign ( y2 )  * MathUtils.sign ( delta )  )  * ( x3 - x1 )  / Math.sqrt ( y3 ) ;^120^121^^^^105^135^correction =  ( MathUtils.sign ( y2 )  * MathUtils.sign ( y3 )  )  * ( x3 - x1 )  / Math.sqrt ( delta ) ;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[buglab_swap_variables]^x = correction - x3;^122^^^^^107^137^x = x3 - correction;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[buglab_swap_variables]^y = x.value ( f ) ;^123^^^^^108^138^y = f.value ( x ) ;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[buglab_swap_variables]^tolerance = Math.max ( relativeAccuracy * Math.abs ( absoluteAccuracy ) , x ) ;^126^^^^^111^141^tolerance = Math.max ( relativeAccuracy * Math.abs ( x ) , absoluteAccuracy ) ;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[buglab_swap_variables]^tolerance = Math.max ( x * Math.abs ( relativeAccuracy ) , absoluteAccuracy ) ;^126^^^^^111^141^tolerance = Math.max ( relativeAccuracy * Math.abs ( x ) , absoluteAccuracy ) ;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[buglab_swap_variables]^tolerance = Math.max ( absoluteAccuracy * Math.abs ( x ) , relativeAccuracy ) ;^126^^^^^111^141^tolerance = Math.max ( relativeAccuracy * Math.abs ( x ) , absoluteAccuracy ) ;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[buglab_swap_variables]^tolerance = Math.max ( relativeAccuracy * Math.abs ( x )  ) ;^126^^^^^111^141^tolerance = Math.max ( relativeAccuracy * Math.abs ( x ) , absoluteAccuracy ) ;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[buglab_swap_variables]^if  ( Math.abs ( oldx - x )  <= tolerance )  {^127^^^^^112^142^if  ( Math.abs ( x - oldx )  <= tolerance )  {^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[buglab_swap_variables]^if  ( Math.abs ( functionValueAccuracy )  <= y3 )  {^115^^^^^100^130^if  ( Math.abs ( y3 )  <= functionValueAccuracy )  {^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[buglab_swap_variables]^if  ( MathUtils.sign ( y22 )  + MathUtils.sign ( y )  == 0.0 )  {^146^^^^^131^161^if  ( MathUtils.sign ( y2 )  + MathUtils.sign ( y )  == 0.0 )  {^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[buglab_swap_variables]^delta = 1 -  ( y2 * y1 )  /  ( y3 * y3 ) ;^119^^^^^104^134^delta = 1 -  ( y1 * y2 )  /  ( y3 * y3 ) ;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[buglab_swap_variables]^correction =  ( MathUtils.sign ( delta )  * MathUtils.sign ( y3 )  )  * ( x3 - x1 )  / Math.sqrt ( y2 ) ;^120^121^^^^105^135^correction =  ( MathUtils.sign ( y2 )  * MathUtils.sign ( y3 )  )  * ( x3 - x1 )  / Math.sqrt ( delta ) ;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[buglab_swap_variables]^correction =  ( MathUtils.sign ( y3 )  * MathUtils.sign ( y2 )  )  * ( x3 - x1 )  / Math.sqrt ( delta ) ;^120^121^^^^105^135^correction =  ( MathUtils.sign ( y2 )  * MathUtils.sign ( y3 )  )  * ( x3 - x1 )  / Math.sqrt ( delta ) ;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[buglab_swap_variables]^correction =  ( MathUtils.sign ( y2 )  * MathUtils.sign ( y3 )  )  * ( delta - x1 )  / Math.sqrt ( x3 ) ;^120^121^^^^105^135^correction =  ( MathUtils.sign ( y2 )  * MathUtils.sign ( y3 )  )  * ( x3 - x1 )  / Math.sqrt ( delta ) ;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
