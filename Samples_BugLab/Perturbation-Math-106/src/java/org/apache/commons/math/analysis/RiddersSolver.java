[BugLab_Variable_Misuse]^if  ( f.value ( max )  == 0.0 )  { return min; }^66^^^^^62^77^if  ( f.value ( min )  == 0.0 )  { return min; }^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max double initial [VARIABLES] long  serialVersionUID  double  initial  max  min  boolean  
[BugLab_Argument_Swapping]^if  ( min.value ( f )  == 0.0 )  { return min; }^66^^^^^62^77^if  ( f.value ( min )  == 0.0 )  { return min; }^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max double initial [VARIABLES] long  serialVersionUID  double  initial  max  min  boolean  
[BugLab_Wrong_Operator]^if  ( f.value ( min )  != 0.0 )  { return min; }^66^^^^^62^77^if  ( f.value ( min )  == 0.0 )  { return min; }^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max double initial [VARIABLES] long  serialVersionUID  double  initial  max  min  boolean  
[BugLab_Variable_Misuse]^if  ( f.value ( min )  == 0.0 )  { return max; }^67^^^^^62^77^if  ( f.value ( max )  == 0.0 )  { return max; }^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max double initial [VARIABLES] long  serialVersionUID  double  initial  max  min  boolean  
[BugLab_Argument_Swapping]^if  ( max.value ( f )  == 0.0 )  { return max; }^67^^^^^62^77^if  ( f.value ( max )  == 0.0 )  { return max; }^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max double initial [VARIABLES] long  serialVersionUID  double  initial  max  min  boolean  
[BugLab_Wrong_Operator]^if  ( f.value ( max )  >= 0.0 )  { return max; }^67^^^^^62^77^if  ( f.value ( max )  == 0.0 )  { return max; }^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max double initial [VARIABLES] long  serialVersionUID  double  initial  max  min  boolean  
[BugLab_Variable_Misuse]^if  ( f.value ( min )  == 0.0 )  { return initial; }^68^^^^^62^77^if  ( f.value ( initial )  == 0.0 )  { return initial; }^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max double initial [VARIABLES] long  serialVersionUID  double  initial  max  min  boolean  
[BugLab_Argument_Swapping]^if  ( initial.value ( f )  == 0.0 )  { return initial; }^68^^^^^62^77^if  ( f.value ( initial )  == 0.0 )  { return initial; }^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max double initial [VARIABLES] long  serialVersionUID  double  initial  max  min  boolean  
[BugLab_Wrong_Operator]^if  ( f.value ( initial )  != 0.0 )  { return initial; }^68^^^^^62^77^if  ( f.value ( initial )  == 0.0 )  { return initial; }^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max double initial [VARIABLES] long  serialVersionUID  double  initial  max  min  boolean  
[BugLab_Variable_Misuse]^verifyBracketing ( initial, max, f ) ;^70^^^^^62^77^verifyBracketing ( min, max, f ) ;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max double initial [VARIABLES] long  serialVersionUID  double  initial  max  min  boolean  
[BugLab_Variable_Misuse]^verifyBracketing ( min, initial, f ) ;^70^^^^^62^77^verifyBracketing ( min, max, f ) ;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max double initial [VARIABLES] long  serialVersionUID  double  initial  max  min  boolean  
[BugLab_Argument_Swapping]^verifyBracketing ( max, min, f ) ;^70^^^^^62^77^verifyBracketing ( min, max, f ) ;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max double initial [VARIABLES] long  serialVersionUID  double  initial  max  min  boolean  
[BugLab_Argument_Swapping]^verifyBracketing ( f, max, min ) ;^70^^^^^62^77^verifyBracketing ( min, max, f ) ;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max double initial [VARIABLES] long  serialVersionUID  double  initial  max  min  boolean  
[BugLab_Variable_Misuse]^verifySequence ( max, initial, max ) ;^71^^^^^62^77^verifySequence ( min, initial, max ) ;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max double initial [VARIABLES] long  serialVersionUID  double  initial  max  min  boolean  
[BugLab_Variable_Misuse]^verifySequence ( min, initial, initial ) ;^71^^^^^62^77^verifySequence ( min, initial, max ) ;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max double initial [VARIABLES] long  serialVersionUID  double  initial  max  min  boolean  
[BugLab_Argument_Swapping]^verifySequence ( initial, min, max ) ;^71^^^^^62^77^verifySequence ( min, initial, max ) ;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max double initial [VARIABLES] long  serialVersionUID  double  initial  max  min  boolean  
[BugLab_Argument_Swapping]^verifySequence ( max, initial, min ) ;^71^^^^^62^77^verifySequence ( min, initial, max ) ;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max double initial [VARIABLES] long  serialVersionUID  double  initial  max  min  boolean  
[BugLab_Variable_Misuse]^if  ( isBracketing ( initial, initial, f )  )  {^72^^^^^62^77^if  ( isBracketing ( min, initial, f )  )  {^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max double initial [VARIABLES] long  serialVersionUID  double  initial  max  min  boolean  
[BugLab_Variable_Misuse]^if  ( isBracketing ( min, max, f )  )  {^72^^^^^62^77^if  ( isBracketing ( min, initial, f )  )  {^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max double initial [VARIABLES] long  serialVersionUID  double  initial  max  min  boolean  
[BugLab_Argument_Swapping]^if  ( isBracketing ( initial, min, f )  )  {^72^^^^^62^77^if  ( isBracketing ( min, initial, f )  )  {^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max double initial [VARIABLES] long  serialVersionUID  double  initial  max  min  boolean  
[BugLab_Argument_Swapping]^if  ( isBracketing ( min, f, initial )  )  {^72^^^^^62^77^if  ( isBracketing ( min, initial, f )  )  {^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max double initial [VARIABLES] long  serialVersionUID  double  initial  max  min  boolean  
[BugLab_Variable_Misuse]^return solve ( min, max ) ;^75^^^^^62^77^return solve ( initial, max ) ;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max double initial [VARIABLES] long  serialVersionUID  double  initial  max  min  boolean  
[BugLab_Variable_Misuse]^return solve ( initial, min ) ;^75^^^^^62^77^return solve ( initial, max ) ;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max double initial [VARIABLES] long  serialVersionUID  double  initial  max  min  boolean  
[BugLab_Argument_Swapping]^return solve ( max, initial ) ;^75^^^^^62^77^return solve ( initial, max ) ;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max double initial [VARIABLES] long  serialVersionUID  double  initial  max  min  boolean  
[BugLab_Variable_Misuse]^return solve ( max, initial ) ;^73^^^^^62^77^return solve ( min, initial ) ;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max double initial [VARIABLES] long  serialVersionUID  double  initial  max  min  boolean  
[BugLab_Variable_Misuse]^return solve ( min, max ) ;^73^^^^^62^77^return solve ( min, initial ) ;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max double initial [VARIABLES] long  serialVersionUID  double  initial  max  min  boolean  
[BugLab_Argument_Swapping]^return solve ( initial, min ) ;^73^^^^^62^77^return solve ( min, initial ) ;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max double initial [VARIABLES] long  serialVersionUID  double  initial  max  min  boolean  
[BugLab_Variable_Misuse]^if  ( isBracketing ( max, initial, f )  )  {^72^^^^^62^77^if  ( isBracketing ( min, initial, f )  )  {^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max double initial [VARIABLES] long  serialVersionUID  double  initial  max  min  boolean  
[BugLab_Variable_Misuse]^x1 = x2; y1 = f.value ( x1 ) ;^101^^^^^86^116^x1 = min; y1 = f.value ( x1 ) ;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[BugLab_Variable_Misuse]^x1 = min; y1 = f.value ( y ) ;^101^^^^^86^116^x1 = min; y1 = f.value ( x1 ) ;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[BugLab_Argument_Swapping]^x1 = min; y1 = x1.value ( f ) ;^101^^^^^86^116^x1 = min; y1 = f.value ( x1 ) ;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[BugLab_Variable_Misuse]^x1 = min; y1 = null.value ( x1 ) ;^101^^^^^86^116^x1 = min; y1 = f.value ( x1 ) ;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[BugLab_Variable_Misuse]^x2 = x2; y2 = f.value ( x2 ) ;^102^^^^^87^117^x2 = max; y2 = f.value ( x2 ) ;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[BugLab_Variable_Misuse]^x2 = max; y2 = f.value ( y2 ) ;^102^^^^^87^117^x2 = max; y2 = f.value ( x2 ) ;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[BugLab_Argument_Swapping]^x2 = max; y2 = x2.value ( f ) ;^102^^^^^87^117^x2 = max; y2 = f.value ( x2 ) ;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[BugLab_Variable_Misuse]^x2 = max; y2 = f.value ( y ) ;^102^^^^^87^117^x2 = max; y2 = f.value ( x2 ) ;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[BugLab_Variable_Misuse]^if  ( x2 == 0.0 )  { return min; }^105^^^^^90^120^if  ( y1 == 0.0 )  { return min; }^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[BugLab_Variable_Misuse]^if  ( y1 == 0.0 )  { return y; }^105^^^^^90^120^if  ( y1 == 0.0 )  { return min; }^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[BugLab_Argument_Swapping]^if  ( min == 0.0 )  { return y1; }^105^^^^^90^120^if  ( y1 == 0.0 )  { return min; }^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[BugLab_Wrong_Operator]^if  ( y1 != 0.0 )  { return min; }^105^^^^^90^120^if  ( y1 == 0.0 )  { return min; }^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[BugLab_Variable_Misuse]^if  ( y1 == 0.0 )  { return y3; }^105^^^^^90^120^if  ( y1 == 0.0 )  { return min; }^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[BugLab_Variable_Misuse]^if  ( x2 == 0.0 )  { return max; }^106^^^^^91^121^if  ( y2 == 0.0 )  { return max; }^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[BugLab_Variable_Misuse]^if  ( y2 == 0.0 )  { return x3; }^106^^^^^91^121^if  ( y2 == 0.0 )  { return max; }^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[BugLab_Argument_Swapping]^if  ( max == 0.0 )  { return y2; }^106^^^^^91^121^if  ( y2 == 0.0 )  { return max; }^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[BugLab_Wrong_Operator]^if  ( y2 > 0.0 )  { return max; }^106^^^^^91^121^if  ( y2 == 0.0 )  { return max; }^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[BugLab_Variable_Misuse]^if  ( y2 == 0.0 )  { return y3; }^106^^^^^91^121^if  ( y2 == 0.0 )  { return max; }^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[BugLab_Variable_Misuse]^if  ( y2 == 0.0 )  { return y; }^106^^^^^91^121^if  ( y2 == 0.0 )  { return max; }^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[BugLab_Variable_Misuse]^verifyBracketing ( y2, max, f ) ;^107^^^^^92^122^verifyBracketing ( min, max, f ) ;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[BugLab_Variable_Misuse]^verifyBracketing ( min, y3, f ) ;^107^^^^^92^122^verifyBracketing ( min, max, f ) ;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[BugLab_Argument_Swapping]^verifyBracketing ( max, min, f ) ;^107^^^^^92^122^verifyBracketing ( min, max, f ) ;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[BugLab_Argument_Swapping]^verifyBracketing ( f, max, min ) ;^107^^^^^92^122^verifyBracketing ( min, max, f ) ;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[BugLab_Wrong_Operator]^while  ( i == maximalIterationCount )  {^111^^^^^96^126^while  ( i <= maximalIterationCount )  {^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[BugLab_Wrong_Operator]^while  ( i > maximalIterationCount )  {^111^^^^^96^126^while  ( i <= maximalIterationCount )  {^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[BugLab_Variable_Misuse]^if  ( Math.abs ( x2 )  <= functionValueAccuracy )  {^115^^^^^100^130^if  ( Math.abs ( y3 )  <= functionValueAccuracy )  {^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[BugLab_Wrong_Operator]^if  ( Math.abs ( y3 )  < functionValueAccuracy )  {^115^^^^^100^130^if  ( Math.abs ( y3 )  <= functionValueAccuracy )  {^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[BugLab_Variable_Misuse]^setResult ( y1, i ) ;^116^^^^^101^131^setResult ( x3, i ) ;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[BugLab_Argument_Swapping]^setResult ( i, x3 ) ;^116^^^^^101^131^setResult ( x3, i ) ;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[BugLab_Variable_Misuse]^if  ( Math.abs ( y2 - oldx )  <= tolerance )  {^127^^^^^112^142^if  ( Math.abs ( x - oldx )  <= tolerance )  {^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[BugLab_Variable_Misuse]^if  ( Math.abs ( x - x3 )  <= tolerance )  {^127^^^^^112^142^if  ( Math.abs ( x - oldx )  <= tolerance )  {^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[BugLab_Variable_Misuse]^if  ( Math.abs ( x - oldx )  <= x3 )  {^127^^^^^112^142^if  ( Math.abs ( x - oldx )  <= tolerance )  {^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[BugLab_Argument_Swapping]^if  ( Math.abs ( oldx - x )  <= tolerance )  {^127^^^^^112^142^if  ( Math.abs ( x - oldx )  <= tolerance )  {^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[BugLab_Argument_Swapping]^if  ( Math.abs ( x - tolerance )  <= oldx )  {^127^^^^^112^142^if  ( Math.abs ( x - oldx )  <= tolerance )  {^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[BugLab_Wrong_Operator]^if  ( Math.abs ( x - oldx )  == tolerance )  {^127^^^^^112^142^if  ( Math.abs ( x - oldx )  <= tolerance )  {^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[BugLab_Wrong_Operator]^if  ( Math.abs ( x  &&  oldx )  <= tolerance )  {^127^^^^^112^142^if  ( Math.abs ( x - oldx )  <= tolerance )  {^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[BugLab_Variable_Misuse]^setResult ( y3, i ) ;^128^^^^^113^143^setResult ( x, i ) ;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[BugLab_Argument_Swapping]^setResult ( i, x ) ;^128^^^^^113^143^setResult ( x, i ) ;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[BugLab_Variable_Misuse]^if  ( Math.abs ( x2 )  <= functionValueAccuracy )  {^131^^^^^116^146^if  ( Math.abs ( y )  <= functionValueAccuracy )  {^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[BugLab_Wrong_Operator]^if  ( Math.abs ( y )  < functionValueAccuracy )  {^131^^^^^116^146^if  ( Math.abs ( y )  <= functionValueAccuracy )  {^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[BugLab_Argument_Swapping]^setResult ( i, x ) ;^132^^^^^117^147^setResult ( x, i ) ;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[BugLab_Variable_Misuse]^if  ( x2 > 0.0 )  {^138^^^^^123^153^if  ( correction > 0.0 )  {^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[BugLab_Wrong_Operator]^if  ( correction >= 0.0 )  {^138^^^^^123^153^if  ( correction > 0.0 )  {^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[BugLab_Variable_Misuse]^if  ( MathUtils.sign ( x3 )  + MathUtils.sign ( y )  == 0.0 )  {^146^^^^^138^152^if  ( MathUtils.sign ( y2 )  + MathUtils.sign ( y )  == 0.0 )  {^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[BugLab_Variable_Misuse]^if  ( MathUtils.sign ( x22 )  + MathUtils.sign ( y )  == 0.0 )  {^146^^^^^138^152^if  ( MathUtils.sign ( y2 )  + MathUtils.sign ( y )  == 0.0 )  {^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[BugLab_Wrong_Operator]^if  ( MathUtils.sign ( y2 )  + MathUtils.sign ( y )  >= 0.0 )  {^146^^^^^138^152^if  ( MathUtils.sign ( y2 )  + MathUtils.sign ( y )  == 0.0 )  {^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[BugLab_Wrong_Operator]^if  &&  ( MathUtils.sign ( y2 )  + MathUtils.sign ( y )  == 0.0 )  {^146^^^^^138^152^if  ( MathUtils.sign ( y2 )  + MathUtils.sign ( y )  == 0.0 )  {^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[BugLab_Variable_Misuse]^x1 = y3; x2 = x;^149^^^^^138^152^x1 = x3; x2 = x;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[BugLab_Variable_Misuse]^y1 = x3; y2 = y;^150^^^^^138^152^y1 = y3; y2 = y;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[BugLab_Variable_Misuse]^y1 = x13; y2 = y;^150^^^^^138^152^y1 = y3; y2 = y;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[BugLab_Variable_Misuse]^x1 = y; y1 = y;^147^^^^^138^152^x1 = x; y1 = y;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[BugLab_Variable_Misuse]^x1 = x; x11 = y;^147^^^^^138^152^x1 = x; y1 = y;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[BugLab_Variable_Misuse]^x1 = y3; y1 = y;^147^^^^^138^152^x1 = x; y1 = y;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[BugLab_Variable_Misuse]^x1 = x; x21 = y;^147^^^^^138^152^x1 = x; y1 = y;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[BugLab_Variable_Misuse]^x1 = x1; x2 = x;^149^^^^^138^152^x1 = x3; x2 = x;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[BugLab_Variable_Misuse]^x1 = x23; x2 = x;^149^^^^^138^152^x1 = x3; x2 = x;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[BugLab_Variable_Misuse]^y1 = y2; y2 = y;^150^^^^^138^152^y1 = y3; y2 = y;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[BugLab_Variable_Misuse]^if  ( MathUtils.sign ( y )  + MathUtils.sign ( y )  == 0.0 )  {^146^^^^^138^152^if  ( MathUtils.sign ( y2 )  + MathUtils.sign ( y )  == 0.0 )  {^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[BugLab_Variable_Misuse]^if  ( MathUtils.sign ( y3 )  + MathUtils.sign ( y )  == 0.0 )  {^139^^^^^124^154^if  ( MathUtils.sign ( y1 )  + MathUtils.sign ( y )  == 0.0 )  {^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[BugLab_Variable_Misuse]^if  ( MathUtils.sign ( x21 )  + MathUtils.sign ( y )  == 0.0 )  {^139^^^^^124^154^if  ( MathUtils.sign ( y1 )  + MathUtils.sign ( y )  == 0.0 )  {^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[BugLab_Argument_Swapping]^if  ( MathUtils.sign ( y )  + MathUtils.sign ( y1 )  == 0.0 )  {^139^^^^^124^154^if  ( MathUtils.sign ( y1 )  + MathUtils.sign ( y )  == 0.0 )  {^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[BugLab_Wrong_Operator]^if  ( MathUtils.sign ( y1 )  + MathUtils.sign ( y )  >= 0.0 )  {^139^^^^^124^154^if  ( MathUtils.sign ( y1 )  + MathUtils.sign ( y )  == 0.0 )  {^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[BugLab_Wrong_Operator]^if   instanceof   ( MathUtils.sign ( y1 )  + MathUtils.sign ( y )  == 0.0 )  {^139^^^^^124^154^if  ( MathUtils.sign ( y1 )  + MathUtils.sign ( y )  == 0.0 )  {^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[BugLab_Variable_Misuse]^x1 = y2; x2 = x3;^142^^^^^139^144^x1 = x; x2 = x3;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[BugLab_Variable_Misuse]^x1 = x; x2 = x2;^142^^^^^139^144^x1 = x; x2 = x3;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[BugLab_Variable_Misuse]^y1 = y3; y2 = y3;^143^^^^^139^144^y1 = y; y2 = y3;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[BugLab_Variable_Misuse]^y1 = y; y2 = x2;^143^^^^^139^144^y1 = y; y2 = y3;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[BugLab_Variable_Misuse]^x2 = y3; y2 = y;^140^^^^^125^155^x2 = x; y2 = y;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[BugLab_Variable_Misuse]^x2 = x; x12 = y;^140^^^^^125^155^x2 = x; y2 = y;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[BugLab_Variable_Misuse]^x2 = x3; y2 = y;^140^^^^^125^155^x2 = x; y2 = y;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[BugLab_Variable_Misuse]^x2 = x; x32 = y;^140^^^^^125^155^x2 = x; y2 = y;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[BugLab_Variable_Misuse]^x1 = y2; x2 = x3;^142^^^^^127^157^x1 = x; x2 = x3;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[BugLab_Variable_Misuse]^x1 = x; x2 = x1;^142^^^^^127^157^x1 = x; x2 = x3;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[BugLab_Variable_Misuse]^y1 = y; y2 = x3;^143^^^^^128^158^y1 = y; y2 = y3;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[BugLab_Variable_Misuse]^if  ( MathUtils.sign ( y11 )  + MathUtils.sign ( y )  == 0.0 )  {^139^^^^^124^154^if  ( MathUtils.sign ( y1 )  + MathUtils.sign ( y )  == 0.0 )  {^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[BugLab_Variable_Misuse]^if  ( MathUtils.sign ( x2 )  + MathUtils.sign ( y )  == 0.0 )  {^139^^^^^124^154^if  ( MathUtils.sign ( y1 )  + MathUtils.sign ( y )  == 0.0 )  {^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[BugLab_Variable_Misuse]^if  ( MathUtils.sign ( y21 )  + MathUtils.sign ( y )  == 0.0 )  {^139^^^^^124^154^if  ( MathUtils.sign ( y1 )  + MathUtils.sign ( y )  == 0.0 )  {^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[BugLab_Wrong_Operator]^if  ( MathUtils.sign ( y1 )  + MathUtils.sign ( y )  != 0.0 )  {^139^^^^^124^154^if  ( MathUtils.sign ( y1 )  + MathUtils.sign ( y )  == 0.0 )  {^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[BugLab_Wrong_Operator]^if  <  ( MathUtils.sign ( y1 )  + MathUtils.sign ( y )  == 0.0 )  {^139^^^^^124^154^if  ( MathUtils.sign ( y1 )  + MathUtils.sign ( y )  == 0.0 )  {^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[BugLab_Variable_Misuse]^x1 = y3; x2 = x3;^142^^^^^139^144^x1 = x; x2 = x3;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[BugLab_Variable_Misuse]^x1 = x; x2 = y3;^142^^^^^139^144^x1 = x; x2 = x3;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[BugLab_Variable_Misuse]^y1 = x2; y2 = y3;^143^^^^^139^144^y1 = y; y2 = y3;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[BugLab_Variable_Misuse]^y1 = y; y2 = x1;^143^^^^^139^144^y1 = y; y2 = y3;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[BugLab_Variable_Misuse]^if  ( MathUtils.sign ( x1 )  + MathUtils.sign ( y )  == 0.0 )  {^146^^^^^131^161^if  ( MathUtils.sign ( y2 )  + MathUtils.sign ( y )  == 0.0 )  {^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[BugLab_Variable_Misuse]^if  ( MathUtils.sign ( x12 )  + MathUtils.sign ( y )  == 0.0 )  {^146^^^^^131^161^if  ( MathUtils.sign ( y2 )  + MathUtils.sign ( y )  == 0.0 )  {^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[BugLab_Argument_Swapping]^if  ( MathUtils.sign ( y )  + MathUtils.sign ( y2 )  == 0.0 )  {^146^^^^^131^161^if  ( MathUtils.sign ( y2 )  + MathUtils.sign ( y )  == 0.0 )  {^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[BugLab_Wrong_Operator]^if  ( MathUtils.sign ( y2 )  + MathUtils.sign ( y )  <= 0.0 )  {^146^^^^^131^161^if  ( MathUtils.sign ( y2 )  + MathUtils.sign ( y )  == 0.0 )  {^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[BugLab_Wrong_Operator]^if  <=  ( MathUtils.sign ( y2 )  + MathUtils.sign ( y )  == 0.0 )  {^146^^^^^131^161^if  ( MathUtils.sign ( y2 )  + MathUtils.sign ( y )  == 0.0 )  {^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[BugLab_Variable_Misuse]^x1 = x2; x2 = x;^149^^^^^146^151^x1 = x3; x2 = x;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[BugLab_Variable_Misuse]^y1 = x1; y2 = y;^150^^^^^146^151^y1 = y3; y2 = y;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[BugLab_Variable_Misuse]^y1 = x33; y2 = y;^150^^^^^146^151^y1 = y3; y2 = y;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[BugLab_Variable_Misuse]^x1 = y1; y1 = y;^147^^^^^132^162^x1 = x; y1 = y;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[BugLab_Variable_Misuse]^x1 = x; x11 = y;^147^^^^^132^162^x1 = x; y1 = y;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[BugLab_Variable_Misuse]^x3 = 0.5 *  ( y + x2 ) ;^113^^^^^98^128^x3 = 0.5 *  ( x1 + x2 ) ;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[BugLab_Variable_Misuse]^x3 = 0.5 *  ( x1 + y2 ) ;^113^^^^^98^128^x3 = 0.5 *  ( x1 + x2 ) ;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[BugLab_Argument_Swapping]^x3 = 0.5 *  ( x2 + x1 ) ;^113^^^^^98^128^x3 = 0.5 *  ( x1 + x2 ) ;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[BugLab_Wrong_Operator]^x3 / = 0.5 *  ( x1 + x2 ) ;^113^^^^^98^128^x3 = 0.5 *  ( x1 + x2 ) ;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[BugLab_Wrong_Operator]^x3 = 0.5 *  ( x1  &&  x2 ) ;^113^^^^^98^128^x3 = 0.5 *  ( x1 + x2 ) ;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[BugLab_Variable_Misuse]^y3 = f.value ( y ) ;^114^^^^^99^129^y3 = f.value ( x3 ) ;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[BugLab_Argument_Swapping]^y3 = x3.value ( f ) ;^114^^^^^99^129^y3 = f.value ( x3 ) ;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[BugLab_Variable_Misuse]^delta = 1 -  ( x1 * y2 )  /  ( y3 * y3 ) ;^119^^^^^104^134^delta = 1 -  ( y1 * y2 )  /  ( y3 * y3 ) ;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[BugLab_Variable_Misuse]^delta = 1 -  ( y1 * y1 )  /  ( y3 * y3 ) ;^119^^^^^104^134^delta = 1 -  ( y1 * y2 )  /  ( y3 * y3 ) ;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[BugLab_Variable_Misuse]^delta = 1 -  ( y1 * y2 )  /  ( y2 * y3 ) ;^119^^^^^104^134^delta = 1 -  ( y1 * y2 )  /  ( y3 * y3 ) ;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[BugLab_Argument_Swapping]^delta = 1 -  ( y2 * y1 )  /  ( y3 * y3 ) ;^119^^^^^104^134^delta = 1 -  ( y1 * y2 )  /  ( y3 * y3 ) ;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[BugLab_Argument_Swapping]^delta = 1 -  ( y1 * y3 )  /  ( y2 * y3 ) ;^119^^^^^104^134^delta = 1 -  ( y1 * y2 )  /  ( y3 * y3 ) ;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[BugLab_Argument_Swapping]^delta = 1 -  ( y3 * y2 )  /  ( y1 * y3 ) ;^119^^^^^104^134^delta = 1 -  ( y1 * y2 )  /  ( y3 * y3 ) ;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[BugLab_Wrong_Operator]^delta = 1  !=   ( y1 * y2 )  /  ( y3 * y3 ) ;^119^^^^^104^134^delta = 1 -  ( y1 * y2 )  /  ( y3 * y3 ) ;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[BugLab_Wrong_Operator]^delta = 1 -  ( y1 * y2 )  +  ( y3 * y3 ) ;^119^^^^^104^134^delta = 1 -  ( y1 * y2 )  /  ( y3 * y3 ) ;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[BugLab_Wrong_Operator]^delta = 1 -  ( y1 - y2 )  /  ( y3 * y3 ) ;^119^^^^^104^134^delta = 1 -  ( y1 * y2 )  /  ( y3 * y3 ) ;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[BugLab_Wrong_Operator]^delta = 1 -  ( y1 * y2 )  /  ( y3 / y3 ) ;^119^^^^^104^134^delta = 1 -  ( y1 * y2 )  /  ( y3 * y3 ) ;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[BugLab_Wrong_Literal]^delta = i -  ( yi * y2 )  /  ( y3 * y3 ) ;^119^^^^^104^134^delta = 1 -  ( y1 * y2 )  /  ( y3 * y3 ) ;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[BugLab_Variable_Misuse]^correction =  ( MathUtils.sign ( x2 )  * MathUtils.sign ( y3 )  )  * ( x3 - x1 )  / Math.sqrt ( delta ) ;^120^121^^^^105^135^correction =  ( MathUtils.sign ( y2 )  * MathUtils.sign ( y3 )  )  * ( x3 - x1 )  / Math.sqrt ( delta ) ;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[BugLab_Variable_Misuse]^correction =  ( MathUtils.sign ( y2 )  * MathUtils.sign ( x2 )  )  * ( x3 - x1 )  / Math.sqrt ( delta ) ;^120^121^^^^105^135^correction =  ( MathUtils.sign ( y2 )  * MathUtils.sign ( y3 )  )  * ( x3 - x1 )  / Math.sqrt ( delta ) ;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[BugLab_Variable_Misuse]^correction =  ( MathUtils.sign ( y2 )  * MathUtils.sign ( y3 )  )  * ( y1 - x1 )  / Math.sqrt ( delta ) ;^120^121^^^^105^135^correction =  ( MathUtils.sign ( y2 )  * MathUtils.sign ( y3 )  )  * ( x3 - x1 )  / Math.sqrt ( delta ) ;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[BugLab_Variable_Misuse]^correction =  ( MathUtils.sign ( y2 )  * MathUtils.sign ( y3 )  )  * ( x3 - x2 )  / Math.sqrt ( delta ) ;^120^121^^^^105^135^correction =  ( MathUtils.sign ( y2 )  * MathUtils.sign ( y3 )  )  * ( x3 - x1 )  / Math.sqrt ( delta ) ;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[BugLab_Variable_Misuse]^correction =  ( MathUtils.sign ( y2 )  * MathUtils.sign ( y3 )  )  * ( x3 - x1 )  / Math.sqrt ( x2 ) ;^120^121^^^^105^135^correction =  ( MathUtils.sign ( y2 )  * MathUtils.sign ( y3 )  )  * ( x3 - x1 )  / Math.sqrt ( delta ) ;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[BugLab_Argument_Swapping]^correction =  ( MathUtils.sign ( x1 )  * MathUtils.sign ( y3 )  )  * ( x3 - y2 )  / Math.sqrt ( delta ) ;^120^121^^^^105^135^correction =  ( MathUtils.sign ( y2 )  * MathUtils.sign ( y3 )  )  * ( x3 - x1 )  / Math.sqrt ( delta ) ;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[BugLab_Argument_Swapping]^correction =  ( MathUtils.sign ( y2 )  * MathUtils.sign ( delta )  )  * ( x3 - x1 )  / Math.sqrt ( y3 ) ;^120^121^^^^105^135^correction =  ( MathUtils.sign ( y2 )  * MathUtils.sign ( y3 )  )  * ( x3 - x1 )  / Math.sqrt ( delta ) ;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[BugLab_Argument_Swapping]^correction =  ( MathUtils.sign ( y2 )  * MathUtils.sign ( y3 )  )  * ( x1 - x3 )  / Math.sqrt ( delta ) ;^120^121^^^^105^135^correction =  ( MathUtils.sign ( y2 )  * MathUtils.sign ( y3 )  )  * ( x3 - x1 )  / Math.sqrt ( delta ) ;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[BugLab_Argument_Swapping]^correction =  ( MathUtils.sign ( y2 )  * MathUtils.sign ( x1 )  )  * ( x3 - y3 )  / Math.sqrt ( delta ) ;^120^121^^^^105^135^correction =  ( MathUtils.sign ( y2 )  * MathUtils.sign ( y3 )  )  * ( x3 - x1 )  / Math.sqrt ( delta ) ;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[BugLab_Wrong_Operator]^correction =  ( MathUtils.sign ( y2 )  * MathUtils.sign ( y3 )  )  * ( x3 - x1 )  + Math.sqrt ( delta ) ;^120^121^^^^105^135^correction =  ( MathUtils.sign ( y2 )  * MathUtils.sign ( y3 )  )  * ( x3 - x1 )  / Math.sqrt ( delta ) ;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[BugLab_Wrong_Operator]^correction + =  ( MathUtils.sign ( y2 )  * MathUtils.sign ( y3 )  )  * ( x3 - x1 )  / Math.sqrt ( delta ) ;^120^121^^^^105^135^correction =  ( MathUtils.sign ( y2 )  * MathUtils.sign ( y3 )  )  * ( x3 - x1 )  / Math.sqrt ( delta ) ;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[BugLab_Wrong_Operator]^correction - =  ( MathUtils.sign ( y2 )  * MathUtils.sign ( y3 )  )  * ( x3 - x1 )  / Math.sqrt ( delta ) ;^120^121^^^^105^135^correction =  ( MathUtils.sign ( y2 )  * MathUtils.sign ( y3 )  )  * ( x3 - x1 )  / Math.sqrt ( delta ) ;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[BugLab_Wrong_Operator]^correction =  ( MathUtils.sign ( y2 )  * MathUtils.sign ( y3 )  )  * ( x3  |  x1 )  / Math.sqrt ( delta ) ;^120^121^^^^105^135^correction =  ( MathUtils.sign ( y2 )  * MathUtils.sign ( y3 )  )  * ( x3 - x1 )  / Math.sqrt ( delta ) ;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[BugLab_Variable_Misuse]^x = y3 - correction;^122^^^^^107^137^x = x3 - correction;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[BugLab_Variable_Misuse]^x = x3 - y;^122^^^^^107^137^x = x3 - correction;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[BugLab_Argument_Swapping]^x = correction - x3;^122^^^^^107^137^x = x3 - correction;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[BugLab_Wrong_Operator]^x = x3  >=  correction;^122^^^^^107^137^x = x3 - correction;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[BugLab_Variable_Misuse]^y = f.value ( x2 ) ;^123^^^^^108^138^y = f.value ( x ) ;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[BugLab_Argument_Swapping]^y = x.value ( f ) ;^123^^^^^108^138^y = f.value ( x ) ;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[BugLab_Variable_Misuse]^tolerance = Math.max ( relativeAccuracy * Math.abs ( x3 ) , absoluteAccuracy ) ;^126^^^^^111^141^tolerance = Math.max ( relativeAccuracy * Math.abs ( x ) , absoluteAccuracy ) ;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[BugLab_Variable_Misuse]^tolerance = Math.max ( 1 * Math.abs ( x ) , absoluteAccuracy ) ;^126^^^^^111^141^tolerance = Math.max ( relativeAccuracy * Math.abs ( x ) , absoluteAccuracy ) ;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[BugLab_Argument_Swapping]^tolerance = Math.max ( x * Math.abs ( relativeAccuracy ) , absoluteAccuracy ) ;^126^^^^^111^141^tolerance = Math.max ( relativeAccuracy * Math.abs ( x ) , absoluteAccuracy ) ;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[BugLab_Argument_Swapping]^tolerance = Math.max ( absoluteAccuracy * Math.abs ( x ) , relativeAccuracy ) ;^126^^^^^111^141^tolerance = Math.max ( relativeAccuracy * Math.abs ( x ) , absoluteAccuracy ) ;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[BugLab_Argument_Swapping]^tolerance = Math.max ( relativeAccuracy * Math.abs ( absoluteAccuracy ) , x ) ;^126^^^^^111^141^tolerance = Math.max ( relativeAccuracy * Math.abs ( x ) , absoluteAccuracy ) ;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[BugLab_Wrong_Operator]^tolerance - = Math.max ( relativeAccuracy * Math.abs ( x ) , absoluteAccuracy ) ;^126^^^^^111^141^tolerance = Math.max ( relativeAccuracy * Math.abs ( x ) , absoluteAccuracy ) ;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[BugLab_Variable_Misuse]^x2 = x; y22 = y;^140^^^^^125^155^x2 = x; y2 = y;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[BugLab_Variable_Misuse]^x1 = y; x2 = x3;^142^^^^^127^157^x1 = x; x2 = x3;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[BugLab_Variable_Misuse]^y1 = y2; y2 = y3;^143^^^^^128^158^y1 = y; y2 = y3;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[BugLab_Variable_Misuse]^y1 = y; y2 = y1;^143^^^^^128^158^y1 = y; y2 = y3;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[BugLab_Variable_Misuse]^x1 = y2; y1 = y;^147^^^^^132^162^x1 = x; y1 = y;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[BugLab_Variable_Misuse]^x1 = x; x31 = y;^147^^^^^132^162^x1 = x; y1 = y;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[BugLab_Variable_Misuse]^x1 = y; x2 = x;^149^^^^^134^164^x1 = x3; x2 = x;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[BugLab_Variable_Misuse]^x1 = x33; x2 = x;^149^^^^^134^164^x1 = x3; x2 = x;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[BugLab_Variable_Misuse]^y1 = x1; y2 = y;^150^^^^^135^165^y1 = y3; y2 = y;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[BugLab_Variable_Misuse]^y1 = y33; y2 = y;^150^^^^^135^165^y1 = y3; y2 = y;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[BugLab_Variable_Misuse]^y3 = f.value ( x2 ) ;^114^^^^^99^129^y3 = f.value ( x3 ) ;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[BugLab_Variable_Misuse]^if  ( Math.abs ( y2 )  <= functionValueAccuracy )  {^115^^^^^100^130^if  ( Math.abs ( y3 )  <= functionValueAccuracy )  {^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[BugLab_Variable_Misuse]^setResult ( y, i ) ;^116^^^^^101^131^setResult ( x3, i ) ;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[BugLab_Variable_Misuse]^correction =  ( MathUtils.sign ( x1 )  * MathUtils.sign ( y3 )  )  * ( x3 - x1 )  / Math.sqrt ( delta ) ;^120^121^^^^105^135^correction =  ( MathUtils.sign ( y2 )  * MathUtils.sign ( y3 )  )  * ( x3 - x1 )  / Math.sqrt ( delta ) ;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[BugLab_Variable_Misuse]^correction =  ( MathUtils.sign ( y2 )  * MathUtils.sign ( x3 )  )  * ( x3 - x1 )  / Math.sqrt ( delta ) ;^120^121^^^^105^135^correction =  ( MathUtils.sign ( y2 )  * MathUtils.sign ( y3 )  )  * ( x3 - x1 )  / Math.sqrt ( delta ) ;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[BugLab_Variable_Misuse]^( x3 - x1 )  / Math.sqrt ( y1 ) ;^121^^^^^106^136^( x3 - x1 )  / Math.sqrt ( delta ) ;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[BugLab_Variable_Misuse]^tolerance = Math.max ( relativeAccuracy * Math.abs ( y2 ) , absoluteAccuracy ) ;^126^^^^^111^141^tolerance = Math.max ( relativeAccuracy * Math.abs ( x ) , absoluteAccuracy ) ;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[BugLab_Wrong_Operator]^tolerance + = Math.max ( relativeAccuracy * Math.abs ( x ) , absoluteAccuracy ) ;^126^^^^^111^141^tolerance = Math.max ( relativeAccuracy * Math.abs ( x ) , absoluteAccuracy ) ;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[BugLab_Variable_Misuse]^tolerance = Math.max ( relativeAccuracy * Math.abs ( x2 ) , absoluteAccuracy ) ;^126^^^^^111^141^tolerance = Math.max ( relativeAccuracy * Math.abs ( x ) , absoluteAccuracy ) ;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[BugLab_Variable_Misuse]^if  ( Math.abs ( y1 - oldx )  <= tolerance )  {^127^^^^^112^142^if  ( Math.abs ( x - oldx )  <= tolerance )  {^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[BugLab_Variable_Misuse]^if  ( Math.abs ( x - y3 )  <= tolerance )  {^127^^^^^112^142^if  ( Math.abs ( x - oldx )  <= tolerance )  {^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[BugLab_Wrong_Operator]^if  ( Math.abs ( x  >  oldx )  <= tolerance )  {^127^^^^^112^142^if  ( Math.abs ( x - oldx )  <= tolerance )  {^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[BugLab_Variable_Misuse]^setResult ( y, i ) ;^128^^^^^113^143^setResult ( x, i ) ;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[BugLab_Variable_Misuse]^if  ( Math.abs ( y1 )  <= functionValueAccuracy )  {^131^^^^^116^146^if  ( Math.abs ( y )  <= functionValueAccuracy )  {^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[BugLab_Variable_Misuse]^setResult ( x3, i ) ;^132^^^^^117^147^setResult ( x, i ) ;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[BugLab_Variable_Misuse]^if  ( MathUtils.sign ( x1 )  + MathUtils.sign ( y )  == 0.0 )  {^139^^^^^124^154^if  ( MathUtils.sign ( y1 )  + MathUtils.sign ( y )  == 0.0 )  {^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[BugLab_Variable_Misuse]^if  ( MathUtils.sign ( y31 )  + MathUtils.sign ( y )  == 0.0 )  {^139^^^^^124^154^if  ( MathUtils.sign ( y1 )  + MathUtils.sign ( y )  == 0.0 )  {^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[BugLab_Variable_Misuse]^if  ( MathUtils.sign ( x2 )  + MathUtils.sign ( y )  == 0.0 )  {^146^^^^^131^161^if  ( MathUtils.sign ( y2 )  + MathUtils.sign ( y )  == 0.0 )  {^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[BugLab_Variable_Misuse]^if  ( MathUtils.sign ( y32 )  + MathUtils.sign ( y )  == 0.0 )  {^146^^^^^131^161^if  ( MathUtils.sign ( y2 )  + MathUtils.sign ( y )  == 0.0 )  {^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[BugLab_Variable_Misuse]^setResult ( x2, i ) ;^116^^^^^101^131^setResult ( x3, i ) ;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[BugLab_Variable_Misuse]^if  ( Math.abs ( x3 - oldx )  <= tolerance )  {^127^^^^^112^142^if  ( Math.abs ( x - oldx )  <= tolerance )  {^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[BugLab_Variable_Misuse]^if  ( Math.abs ( x - y2 )  <= tolerance )  {^127^^^^^112^142^if  ( Math.abs ( x - oldx )  <= tolerance )  {^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[BugLab_Variable_Misuse]^if  ( Math.abs ( x - oldx )  <= y )  {^127^^^^^112^142^if  ( Math.abs ( x - oldx )  <= tolerance )  {^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[BugLab_Wrong_Operator]^if  ( Math.abs ( x - oldx )  < tolerance )  {^127^^^^^112^142^if  ( Math.abs ( x - oldx )  <= tolerance )  {^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[BugLab_Variable_Misuse]^return 4;^129^^^^^114^144^return result;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[BugLab_Variable_Misuse]^setResult ( x2, i ) ;^128^^^^^113^143^setResult ( x, i ) ;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[BugLab_Variable_Misuse]^if  ( Math.abs ( y3 )  <= functionValueAccuracy )  {^131^^^^^116^146^if  ( Math.abs ( y )  <= functionValueAccuracy )  {^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[BugLab_Wrong_Operator]^if  ( Math.abs ( y )  > functionValueAccuracy )  {^131^^^^^116^146^if  ( Math.abs ( y )  <= functionValueAccuracy )  {^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[BugLab_Variable_Misuse]^setResult ( x2, i ) ;^132^^^^^117^147^setResult ( x, i ) ;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[BugLab_Variable_Misuse]^if  ( MathUtils.sign ( x12 )  + MathUtils.sign ( y )  == 0.0 )  {^146^^^^^138^152^if  ( MathUtils.sign ( y2 )  + MathUtils.sign ( y )  == 0.0 )  {^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[BugLab_Argument_Swapping]^if  ( MathUtils.sign ( y )  + MathUtils.sign ( y2 )  == 0.0 )  {^146^^^^^138^152^if  ( MathUtils.sign ( y2 )  + MathUtils.sign ( y )  == 0.0 )  {^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[BugLab_Wrong_Operator]^if  ||  ( MathUtils.sign ( y2 )  + MathUtils.sign ( y )  == 0.0 )  {^146^^^^^138^152^if  ( MathUtils.sign ( y2 )  + MathUtils.sign ( y )  == 0.0 )  {^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[BugLab_Variable_Misuse]^x1 = y1; x2 = x;^149^^^^^138^152^x1 = x3; x2 = x;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[BugLab_Variable_Misuse]^y1 = x1; y2 = y;^150^^^^^138^152^y1 = y3; y2 = y;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[BugLab_Variable_Misuse]^y1 = y33; y2 = y;^150^^^^^138^152^y1 = y3; y2 = y;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[BugLab_Variable_Misuse]^x1 = x3; y1 = y;^147^^^^^138^152^x1 = x; y1 = y;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[BugLab_Variable_Misuse]^x1 = x; y31 = y;^147^^^^^138^152^x1 = x; y1 = y;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[BugLab_Variable_Misuse]^if  ( MathUtils.sign ( x1 )  + MathUtils.sign ( y )  == 0.0 )  {^146^^^^^138^152^if  ( MathUtils.sign ( y2 )  + MathUtils.sign ( y )  == 0.0 )  {^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[BugLab_Variable_Misuse]^if  ( MathUtils.sign ( y12 )  + MathUtils.sign ( y )  == 0.0 )  {^146^^^^^138^152^if  ( MathUtils.sign ( y2 )  + MathUtils.sign ( y )  == 0.0 )  {^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[BugLab_Wrong_Operator]^if  &&  ( MathUtils.sign ( y1 )  + MathUtils.sign ( y )  == 0.0 )  {^139^^^^^124^154^if  ( MathUtils.sign ( y1 )  + MathUtils.sign ( y )  == 0.0 )  {^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[BugLab_Variable_Misuse]^x1 = x2; x2 = x3;^142^^^^^139^144^x1 = x; x2 = x3;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[BugLab_Variable_Misuse]^x1 = x; x2 = x1;^142^^^^^139^144^x1 = x; x2 = x3;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[BugLab_Variable_Misuse]^y1 = x3; y2 = y3;^143^^^^^139^144^y1 = y; y2 = y3;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[BugLab_Variable_Misuse]^y1 = y; y2 = y;^143^^^^^139^144^y1 = y; y2 = y3;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[BugLab_Variable_Misuse]^x2 = y1; y2 = y;^140^^^^^125^155^x2 = x; y2 = y;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[BugLab_Variable_Misuse]^x2 = x; y32 = y;^140^^^^^125^155^x2 = x; y2 = y;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[BugLab_Variable_Misuse]^x1 = x2; x2 = x3;^142^^^^^127^157^x1 = x; x2 = x3;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[BugLab_Variable_Misuse]^x1 = x; x2 = y;^142^^^^^127^157^x1 = x; x2 = x3;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[BugLab_Variable_Misuse]^y1 = x1; y2 = y3;^143^^^^^128^158^y1 = y; y2 = y3;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[BugLab_Variable_Misuse]^if  ( MathUtils.sign ( x31 )  + MathUtils.sign ( y )  == 0.0 )  {^139^^^^^124^154^if  ( MathUtils.sign ( y1 )  + MathUtils.sign ( y )  == 0.0 )  {^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[BugLab_Wrong_Operator]^if  |  ( MathUtils.sign ( y1 )  + MathUtils.sign ( y )  == 0.0 )  {^139^^^^^124^154^if  ( MathUtils.sign ( y1 )  + MathUtils.sign ( y )  == 0.0 )  {^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[BugLab_Variable_Misuse]^y1 = x1; y2 = y3;^143^^^^^139^144^y1 = y; y2 = y3;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[BugLab_Variable_Misuse]^x2 = x2; y2 = y;^140^^^^^125^155^x2 = x; y2 = y;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[BugLab_Wrong_Operator]^if  ( MathUtils.sign ( y2 )  + MathUtils.sign ( y )  != 0.0 )  {^146^^^^^131^161^if  ( MathUtils.sign ( y2 )  + MathUtils.sign ( y )  == 0.0 )  {^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[BugLab_Variable_Misuse]^x1 = x1; x2 = x;^149^^^^^146^151^x1 = x3; x2 = x;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[BugLab_Variable_Misuse]^x1 = x33; x2 = x;^149^^^^^146^151^x1 = x3; x2 = x;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[BugLab_Variable_Misuse]^x3 = 0.5 *  ( y1 + x2 ) ;^113^^^^^98^128^x3 = 0.5 *  ( x1 + x2 ) ;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[BugLab_Variable_Misuse]^x3 = 0.5 *  ( x1 + y ) ;^113^^^^^98^128^x3 = 0.5 *  ( x1 + x2 ) ;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[BugLab_Wrong_Operator]^x3 + = 0.5 *  ( x1 + x2 ) ;^113^^^^^98^128^x3 = 0.5 *  ( x1 + x2 ) ;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[BugLab_Wrong_Operator]^x3 = 0.5 *  ( x1  >=  x2 ) ;^113^^^^^98^128^x3 = 0.5 *  ( x1 + x2 ) ;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[BugLab_Variable_Misuse]^y3 = f.value ( y1 ) ;^114^^^^^99^129^y3 = f.value ( x3 ) ;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[BugLab_Variable_Misuse]^delta = 1 -  ( y1 * x2 )  /  ( y3 * y3 ) ;^119^^^^^104^134^delta = 1 -  ( y1 * y2 )  /  ( y3 * y3 ) ;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[BugLab_Variable_Misuse]^delta = 1 -  ( y1 * y2 )  /  ( x2 * y3 ) ;^119^^^^^104^134^delta = 1 -  ( y1 * y2 )  /  ( y3 * y3 ) ;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[BugLab_Wrong_Operator]^delta = 1  ^   ( y1 * y2 )  /  ( y3 * y3 ) ;^119^^^^^104^134^delta = 1 -  ( y1 * y2 )  /  ( y3 * y3 ) ;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[BugLab_Wrong_Operator]^delta = 1 -  ( y1 * y2 )  -  ( y3 * y3 ) ;^119^^^^^104^134^delta = 1 -  ( y1 * y2 )  /  ( y3 * y3 ) ;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[BugLab_Wrong_Operator]^delta = 1 -  ( y1 + y2 )  /  ( y3 * y3 ) ;^119^^^^^104^134^delta = 1 -  ( y1 * y2 )  /  ( y3 * y3 ) ;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[BugLab_Wrong_Operator]^delta = 1 -  ( y1 * y2 )  /  ( y3 + y3 ) ;^119^^^^^104^134^delta = 1 -  ( y1 * y2 )  /  ( y3 * y3 ) ;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[BugLab_Variable_Misuse]^correction =  ( MathUtils.sign ( y )  * MathUtils.sign ( y3 )  )  * ( x3 - x1 )  / Math.sqrt ( delta ) ;^120^121^^^^105^135^correction =  ( MathUtils.sign ( y2 )  * MathUtils.sign ( y3 )  )  * ( x3 - x1 )  / Math.sqrt ( delta ) ;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[BugLab_Variable_Misuse]^correction =  ( MathUtils.sign ( y2 )  * MathUtils.sign ( y )  )  * ( x3 - x1 )  / Math.sqrt ( delta ) ;^120^121^^^^105^135^correction =  ( MathUtils.sign ( y2 )  * MathUtils.sign ( y3 )  )  * ( x3 - x1 )  / Math.sqrt ( delta ) ;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[BugLab_Variable_Misuse]^correction =  ( MathUtils.sign ( y2 )  * MathUtils.sign ( y3 )  )  * ( x1 - x1 )  / Math.sqrt ( delta ) ;^120^121^^^^105^135^correction =  ( MathUtils.sign ( y2 )  * MathUtils.sign ( y3 )  )  * ( x3 - x1 )  / Math.sqrt ( delta ) ;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[BugLab_Variable_Misuse]^correction =  ( MathUtils.sign ( y2 )  * MathUtils.sign ( y3 )  )  * ( x3 - y2 )  / Math.sqrt ( delta ) ;^120^121^^^^105^135^correction =  ( MathUtils.sign ( y2 )  * MathUtils.sign ( y3 )  )  * ( x3 - x1 )  / Math.sqrt ( delta ) ;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[BugLab_Argument_Swapping]^correction =  ( MathUtils.sign ( delta )  * MathUtils.sign ( y3 )  )  * ( x3 - x1 )  / Math.sqrt ( y2 ) ;^120^121^^^^105^135^correction =  ( MathUtils.sign ( y2 )  * MathUtils.sign ( y3 )  )  * ( x3 - x1 )  / Math.sqrt ( delta ) ;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[BugLab_Argument_Swapping]^correction =  ( MathUtils.sign ( y2 )  * MathUtils.sign ( x3 )  )  * ( y3 - x1 )  / Math.sqrt ( delta ) ;^120^121^^^^105^135^correction =  ( MathUtils.sign ( y2 )  * MathUtils.sign ( y3 )  )  * ( x3 - x1 )  / Math.sqrt ( delta ) ;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[BugLab_Wrong_Operator]^correction / =  ( MathUtils.sign ( y2 )  * MathUtils.sign ( y3 )  )  * ( x3 - x1 )  / Math.sqrt ( delta ) ;^120^121^^^^105^135^correction =  ( MathUtils.sign ( y2 )  * MathUtils.sign ( y3 )  )  * ( x3 - x1 )  / Math.sqrt ( delta ) ;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[BugLab_Wrong_Operator]^correction =  ( MathUtils.sign ( y2 )  * MathUtils.sign ( y3 )  )  * ( x3  &  x1 )  / Math.sqrt ( delta ) ;^120^121^^^^105^135^correction =  ( MathUtils.sign ( y2 )  * MathUtils.sign ( y3 )  )  * ( x3 - x1 )  / Math.sqrt ( delta ) ;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[BugLab_Wrong_Operator]^x = x3  >  correction;^122^^^^^107^137^x = x3 - correction;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[BugLab_Variable_Misuse]^y = f.value ( x3 ) ;^123^^^^^108^138^y = f.value ( x ) ;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[BugLab_Variable_Misuse]^y1 = x3; y2 = y3;^143^^^^^128^158^y1 = y; y2 = y3;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[BugLab_Variable_Misuse]^x1 = y; y1 = y;^147^^^^^132^162^x1 = x; y1 = y;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[BugLab_Variable_Misuse]^x1 = x; y31 = y;^147^^^^^132^162^x1 = x; y1 = y;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[BugLab_Variable_Misuse]^x1 = x2; x2 = x;^149^^^^^134^164^x1 = x3; x2 = x;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[BugLab_Variable_Misuse]^x1 = x23; x2 = x;^149^^^^^134^164^x1 = x3; x2 = x;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[BugLab_Variable_Misuse]^y1 = y13; y2 = y;^150^^^^^135^165^y1 = y3; y2 = y;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[BugLab_Variable_Misuse]^oldx = y2;^153^^^^^138^168^oldx = x;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[BugLab_Variable_Misuse]^y3 = f.value ( x1 ) ;^114^^^^^99^129^y3 = f.value ( x3 ) ;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[BugLab_Variable_Misuse]^setResult ( x1, i ) ;^116^^^^^101^131^setResult ( x3, i ) ;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[BugLab_Variable_Misuse]^correction =  ( MathUtils.sign ( y3 )  * MathUtils.sign ( y3 )  )  * ( x3 - x1 )  / Math.sqrt ( delta ) ;^120^121^^^^105^135^correction =  ( MathUtils.sign ( y2 )  * MathUtils.sign ( y3 )  )  * ( x3 - x1 )  / Math.sqrt ( delta ) ;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[BugLab_Variable_Misuse]^( x3 - x1 )  / Math.sqrt ( y ) ;^121^^^^^106^136^( x3 - x1 )  / Math.sqrt ( delta ) ;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[BugLab_Variable_Misuse]^y = f.value ( y1 ) ;^123^^^^^108^138^y = f.value ( x ) ;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[BugLab_Variable_Misuse]^tolerance = Math.max ( relativeAccuracy * Math.abs ( y ) , absoluteAccuracy ) ;^126^^^^^111^141^tolerance = Math.max ( relativeAccuracy * Math.abs ( x ) , absoluteAccuracy ) ;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[BugLab_Variable_Misuse]^if  ( Math.abs ( y3 - oldx )  <= tolerance )  {^127^^^^^112^142^if  ( Math.abs ( x - oldx )  <= tolerance )  {^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[BugLab_Variable_Misuse]^if  ( Math.abs ( x - y1 )  <= tolerance )  {^127^^^^^112^142^if  ( Math.abs ( x - oldx )  <= tolerance )  {^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[BugLab_Wrong_Operator]^if  ( Math.abs ( x  >=  oldx )  <= tolerance )  {^127^^^^^112^142^if  ( Math.abs ( x - oldx )  <= tolerance )  {^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
