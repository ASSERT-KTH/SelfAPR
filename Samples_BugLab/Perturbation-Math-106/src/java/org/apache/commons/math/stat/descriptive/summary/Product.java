[BugLab_Variable_Misuse]^if  ( serialVersionUID == 0 )  {^60^^^^^59^66^if  ( n == 0 )  {^[CLASS] Product  [METHOD] increment [RETURN_TYPE] void   final double d [VARIABLES] double  d  value  long  n  serialVersionUID  boolean  
[BugLab_Wrong_Operator]^if  ( n < 0 )  {^60^^^^^59^66^if  ( n == 0 )  {^[CLASS] Product  [METHOD] increment [RETURN_TYPE] void   final double d [VARIABLES] double  d  value  long  n  serialVersionUID  boolean  
[BugLab_Variable_Misuse]^value *= value;^63^^^^^59^66^value *= d;^[CLASS] Product  [METHOD] increment [RETURN_TYPE] void   final double d [VARIABLES] double  d  value  long  n  serialVersionUID  boolean  
[BugLab_Variable_Misuse]^value = value;^61^^^^^59^66^value = d;^[CLASS] Product  [METHOD] increment [RETURN_TYPE] void   final double d [VARIABLES] double  d  value  long  n  serialVersionUID  boolean  
[BugLab_Variable_Misuse]^return d;^72^^^^^71^73^return value;^[CLASS] Product  [METHOD] getResult [RETURN_TYPE] double   [VARIABLES] double  d  value  long  n  serialVersionUID  boolean  
[BugLab_Variable_Misuse]^return serialVersionUID;^79^^^^^78^80^return n;^[CLASS] Product  [METHOD] getN [RETURN_TYPE] long   [VARIABLES] double  d  value  long  n  serialVersionUID  boolean  
[BugLab_Wrong_Literal]^n = -1;^87^^^^^85^88^n = 0;^[CLASS] Product  [METHOD] clear [RETURN_TYPE] void   [VARIABLES] double  d  value  long  n  serialVersionUID  boolean  
[BugLab_Variable_Misuse]^if  ( test ( values, length, length )  )  {^106^^^^^104^113^if  ( test ( values, begin, length )  )  {^[CLASS] Product  [METHOD] evaluate [RETURN_TYPE] double   final double[] values final int begin final int length [VARIABLES] boolean  double[]  values  double  d  product  value  long  n  serialVersionUID  int  begin  i  length  
[BugLab_Variable_Misuse]^if  ( test ( values, begin, begin )  )  {^106^^^^^104^113^if  ( test ( values, begin, length )  )  {^[CLASS] Product  [METHOD] evaluate [RETURN_TYPE] double   final double[] values final int begin final int length [VARIABLES] boolean  double[]  values  double  d  product  value  long  n  serialVersionUID  int  begin  i  length  
[BugLab_Argument_Swapping]^if  ( test ( length, begin, values )  )  {^106^^^^^104^113^if  ( test ( values, begin, length )  )  {^[CLASS] Product  [METHOD] evaluate [RETURN_TYPE] double   final double[] values final int begin final int length [VARIABLES] boolean  double[]  values  double  d  product  value  long  n  serialVersionUID  int  begin  i  length  
[BugLab_Argument_Swapping]^if  ( test ( values, length, begin )  )  {^106^^^^^104^113^if  ( test ( values, begin, length )  )  {^[CLASS] Product  [METHOD] evaluate [RETURN_TYPE] double   final double[] values final int begin final int length [VARIABLES] boolean  double[]  values  double  d  product  value  long  n  serialVersionUID  int  begin  i  length  
[BugLab_Variable_Misuse]^for  ( int i = length; i < begin + length; i++ )  {^108^^^^^104^113^for  ( int i = begin; i < begin + length; i++ )  {^[CLASS] Product  [METHOD] evaluate [RETURN_TYPE] double   final double[] values final int begin final int length [VARIABLES] boolean  double[]  values  double  d  product  value  long  n  serialVersionUID  int  begin  i  length  
[BugLab_Variable_Misuse]^for  ( lengthnt i = begin; i < begin + length; i++ )  {^108^^^^^104^113^for  ( int i = begin; i < begin + length; i++ )  {^[CLASS] Product  [METHOD] evaluate [RETURN_TYPE] double   final double[] values final int begin final int length [VARIABLES] boolean  double[]  values  double  d  product  value  long  n  serialVersionUID  int  begin  i  length  
[BugLab_Argument_Swapping]^for  ( int i = length; i < begin + begin; i++ )  {^108^^^^^104^113^for  ( int i = begin; i < begin + length; i++ )  {^[CLASS] Product  [METHOD] evaluate [RETURN_TYPE] double   final double[] values final int begin final int length [VARIABLES] boolean  double[]  values  double  d  product  value  long  n  serialVersionUID  int  begin  i  length  
[BugLab_Argument_Swapping]^for  ( beginnt i = i; i < begin + length; i++ )  {^108^^^^^104^113^for  ( int i = begin; i < begin + length; i++ )  {^[CLASS] Product  [METHOD] evaluate [RETURN_TYPE] double   final double[] values final int begin final int length [VARIABLES] boolean  double[]  values  double  d  product  value  long  n  serialVersionUID  int  begin  i  length  
[BugLab_Wrong_Operator]^for  ( int i = begin; i <= begin + length; i++ )  {^108^^^^^104^113^for  ( int i = begin; i < begin + length; i++ )  {^[CLASS] Product  [METHOD] evaluate [RETURN_TYPE] double   final double[] values final int begin final int length [VARIABLES] boolean  double[]  values  double  d  product  value  long  n  serialVersionUID  int  begin  i  length  
[BugLab_Wrong_Operator]^for  <<  ( int i = begin; i < begin + length; i++ )  {^108^^^^^104^113^for  ( int i = begin; i < begin + length; i++ )  {^[CLASS] Product  [METHOD] evaluate [RETURN_TYPE] double   final double[] values final int begin final int length [VARIABLES] boolean  double[]  values  double  d  product  value  long  n  serialVersionUID  int  begin  i  length  
[BugLab_Variable_Misuse]^for  ( int i = begin; i < begin + begin; i++ )  {^108^^^^^104^113^for  ( int i = begin; i < begin + length; i++ )  {^[CLASS] Product  [METHOD] evaluate [RETURN_TYPE] double   final double[] values final int begin final int length [VARIABLES] boolean  double[]  values  double  d  product  value  long  n  serialVersionUID  int  begin  i  length  
[BugLab_Argument_Swapping]^for  ( lengthnt i = begin; i < begin + i; i++ )  {^108^^^^^104^113^for  ( int i = begin; i < begin + length; i++ )  {^[CLASS] Product  [METHOD] evaluate [RETURN_TYPE] double   final double[] values final int begin final int length [VARIABLES] boolean  double[]  values  double  d  product  value  long  n  serialVersionUID  int  begin  i  length  
[BugLab_Wrong_Operator]^for  ( int i = begin; i > begin + length; i++ )  {^108^^^^^104^113^for  ( int i = begin; i < begin + length; i++ )  {^[CLASS] Product  [METHOD] evaluate [RETURN_TYPE] double   final double[] values final int begin final int length [VARIABLES] boolean  double[]  values  double  d  product  value  long  n  serialVersionUID  int  begin  i  length  
[BugLab_Variable_Misuse]^if  ( test ( values, begin, i )  )  {^106^^^^^104^113^if  ( test ( values, begin, length )  )  {^[CLASS] Product  [METHOD] evaluate [RETURN_TYPE] double   final double[] values final int begin final int length [VARIABLES] boolean  double[]  values  double  d  product  value  long  n  serialVersionUID  int  begin  i  length  
[BugLab_Argument_Swapping]^if  ( test ( begin, values, length )  )  {^106^^^^^104^113^if  ( test ( values, begin, length )  )  {^[CLASS] Product  [METHOD] evaluate [RETURN_TYPE] double   final double[] values final int begin final int length [VARIABLES] boolean  double[]  values  double  d  product  value  long  n  serialVersionUID  int  begin  i  length  
[BugLab_Variable_Misuse]^return value;^112^^^^^104^113^return product;^[CLASS] Product  [METHOD] evaluate [RETURN_TYPE] double   final double[] values final int begin final int length [VARIABLES] boolean  double[]  values  double  d  product  value  long  n  serialVersionUID  int  begin  i  length  
