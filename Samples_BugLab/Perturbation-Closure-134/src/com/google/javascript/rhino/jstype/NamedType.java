[BugLab_Wrong_Literal]^private boolean isResolved = true;^86^^^^^81^91^private boolean isResolved = false;^[CLASS] NamedType   [VARIABLES] 
[BugLab_Wrong_Literal]^private boolean forgiving = true;^98^^^^^93^103^private boolean forgiving = false;^[CLASS] NamedType   [VARIABLES] 
[BugLab_Variable_Misuse]^Preconditions.checkNotNull ( sourceName ) ;^107^^^^^103^112^Preconditions.checkNotNull ( reference ) ;^[CLASS] NamedType  [METHOD] <init> [RETURN_TYPE] String,int,int)   JSTypeRegistry registry String reference String sourceName int lineno int charno [VARIABLES] JSTypeRegistry  registry  boolean  forgiving  isResolved  String  reference  sourceName  long  serialVersionUID  int  charno  lineno  
[BugLab_Variable_Misuse]^this.reference = sourceName;^108^^^^^103^112^this.reference = reference;^[CLASS] NamedType  [METHOD] <init> [RETURN_TYPE] String,int,int)   JSTypeRegistry registry String reference String sourceName int lineno int charno [VARIABLES] JSTypeRegistry  registry  boolean  forgiving  isResolved  String  reference  sourceName  long  serialVersionUID  int  charno  lineno  
[BugLab_Variable_Misuse]^this.sourceName = reference;^109^^^^^103^112^this.sourceName = sourceName;^[CLASS] NamedType  [METHOD] <init> [RETURN_TYPE] String,int,int)   JSTypeRegistry registry String reference String sourceName int lineno int charno [VARIABLES] JSTypeRegistry  registry  boolean  forgiving  isResolved  String  reference  sourceName  long  serialVersionUID  int  charno  lineno  
[BugLab_Variable_Misuse]^this.lineno = charno;^110^^^^^103^112^this.lineno = lineno;^[CLASS] NamedType  [METHOD] <init> [RETURN_TYPE] String,int,int)   JSTypeRegistry registry String reference String sourceName int lineno int charno [VARIABLES] JSTypeRegistry  registry  boolean  forgiving  isResolved  String  reference  sourceName  long  serialVersionUID  int  charno  lineno  
[BugLab_Variable_Misuse]^this.charno = lineno;^111^^^^^103^112^this.charno = charno;^[CLASS] NamedType  [METHOD] <init> [RETURN_TYPE] String,int,int)   JSTypeRegistry registry String reference String sourceName int lineno int charno [VARIABLES] JSTypeRegistry  registry  boolean  forgiving  isResolved  String  reference  sourceName  long  serialVersionUID  int  charno  lineno  
[BugLab_Wrong_Literal]^forgiving = false;^116^^^^^115^117^forgiving = true;^[CLASS] NamedType  [METHOD] forgiveUnknownNames [RETURN_TYPE] void   [VARIABLES] boolean  forgiving  isResolved  String  reference  sourceName  long  serialVersionUID  int  charno  lineno  
[BugLab_Variable_Misuse]^return forgiving;^121^^^^^120^122^return isResolved;^[CLASS] NamedType  [METHOD] isResolved [RETURN_TYPE] boolean   [VARIABLES] boolean  forgiving  isResolved  String  reference  sourceName  long  serialVersionUID  int  charno  lineno  
[BugLab_Wrong_Literal]^isResolved = true;^126^^^^^125^127^isResolved = false;^[CLASS] NamedType  [METHOD] clearResolved [RETURN_TYPE] void   [VARIABLES] boolean  forgiving  isResolved  String  reference  sourceName  long  serialVersionUID  int  charno  lineno  
[BugLab_Variable_Misuse]^return 3;^131^^^^^130^132^return referencedType;^[CLASS] NamedType  [METHOD] getReferencedType [RETURN_TYPE] JSType   [VARIABLES] boolean  forgiving  isResolved  String  reference  sourceName  long  serialVersionUID  int  charno  lineno  
[BugLab_Variable_Misuse]^return sourceName;^136^^^^^135^137^return reference;^[CLASS] NamedType  [METHOD] getReferenceName [RETURN_TYPE] String   [VARIABLES] boolean  forgiving  isResolved  String  reference  sourceName  long  serialVersionUID  int  charno  lineno  
[BugLab_Variable_Misuse]^return sourceName;^141^^^^^140^142^return reference;^[CLASS] NamedType  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] boolean  forgiving  isResolved  String  reference  sourceName  long  serialVersionUID  int  charno  lineno  
[BugLab_Wrong_Literal]^return false;^146^^^^^145^147^return true;^[CLASS] NamedType  [METHOD] hasReferenceName [RETURN_TYPE] boolean   [VARIABLES] boolean  forgiving  isResolved  String  reference  sourceName  long  serialVersionUID  int  charno  lineno  
[BugLab_Wrong_Literal]^return false;^151^^^^^150^152^return true;^[CLASS] NamedType  [METHOD] isNamedType [RETURN_TYPE] boolean   [VARIABLES] boolean  forgiving  isResolved  String  reference  sourceName  long  serialVersionUID  int  charno  lineno  
[BugLab_Wrong_Literal]^return false;^156^^^^^155^157^return true;^[CLASS] NamedType  [METHOD] isNominalType [RETURN_TYPE] boolean   [VARIABLES] boolean  forgiving  isResolved  String  reference  sourceName  long  serialVersionUID  int  charno  lineno  
[BugLab_Wrong_Operator]^if  ( this != that )  {^170^^^^^169^180^if  ( this == that )  {^[CLASS] NamedType  [METHOD] equals [RETURN_TYPE] boolean   Object that [VARIABLES] ObjectType  objType  Object  that  boolean  forgiving  isResolved  String  reference  sourceName  long  serialVersionUID  int  charno  lineno  
[BugLab_Wrong_Operator]^} else if  ( that  <<  JSType )  {^172^^^^^169^180^} else if  ( that instanceof JSType )  {^[CLASS] NamedType  [METHOD] equals [RETURN_TYPE] boolean   Object that [VARIABLES] ObjectType  objType  Object  that  boolean  forgiving  isResolved  String  reference  sourceName  long  serialVersionUID  int  charno  lineno  
[BugLab_Wrong_Operator]^if  ( objType == null )  {^174^^^^^169^180^if  ( objType != null )  {^[CLASS] NamedType  [METHOD] equals [RETURN_TYPE] boolean   Object that [VARIABLES] ObjectType  objType  Object  that  boolean  forgiving  isResolved  String  reference  sourceName  long  serialVersionUID  int  charno  lineno  
[BugLab_Argument_Swapping]^return reference.isNominalType (  )  && objType.equals ( objType.getReferenceName (  )  ) ;^175^176^^^^169^180^return objType.isNominalType (  )  && reference.equals ( objType.getReferenceName (  )  ) ;^[CLASS] NamedType  [METHOD] equals [RETURN_TYPE] boolean   Object that [VARIABLES] ObjectType  objType  Object  that  boolean  forgiving  isResolved  String  reference  sourceName  long  serialVersionUID  int  charno  lineno  
[BugLab_Wrong_Operator]^return objType.isNominalType (  )  || reference.equals ( objType.getReferenceName (  )  ) ;^175^176^^^^169^180^return objType.isNominalType (  )  && reference.equals ( objType.getReferenceName (  )  ) ;^[CLASS] NamedType  [METHOD] equals [RETURN_TYPE] boolean   Object that [VARIABLES] ObjectType  objType  Object  that  boolean  forgiving  isResolved  String  reference  sourceName  long  serialVersionUID  int  charno  lineno  
[BugLab_Variable_Misuse]^return objType.isNominalType (  )  && sourceName.equals ( objType.getReferenceName (  )  ) ;^175^176^^^^169^180^return objType.isNominalType (  )  && reference.equals ( objType.getReferenceName (  )  ) ;^[CLASS] NamedType  [METHOD] equals [RETURN_TYPE] boolean   Object that [VARIABLES] ObjectType  objType  Object  that  boolean  forgiving  isResolved  String  reference  sourceName  long  serialVersionUID  int  charno  lineno  
[BugLab_Wrong_Literal]^return false;^171^^^^^169^180^return true;^[CLASS] NamedType  [METHOD] equals [RETURN_TYPE] boolean   Object that [VARIABLES] ObjectType  objType  Object  that  boolean  forgiving  isResolved  String  reference  sourceName  long  serialVersionUID  int  charno  lineno  
[BugLab_Wrong_Operator]^} else if  ( that  |  JSType )  {^172^^^^^169^180^} else if  ( that instanceof JSType )  {^[CLASS] NamedType  [METHOD] equals [RETURN_TYPE] boolean   Object that [VARIABLES] ObjectType  objType  Object  that  boolean  forgiving  isResolved  String  reference  sourceName  long  serialVersionUID  int  charno  lineno  
[BugLab_Wrong_Literal]^return true;^179^^^^^169^180^return false;^[CLASS] NamedType  [METHOD] equals [RETURN_TYPE] boolean   Object that [VARIABLES] ObjectType  objType  Object  that  boolean  forgiving  isResolved  String  reference  sourceName  long  serialVersionUID  int  charno  lineno  
[BugLab_Variable_Misuse]^return sourceName.hashCode (  ) ;^184^^^^^183^185^return reference.hashCode (  ) ;^[CLASS] NamedType  [METHOD] hashCode [RETURN_TYPE] int   [VARIABLES] boolean  forgiving  isResolved  String  reference  sourceName  long  serialVersionUID  int  charno  lineno  
[BugLab_Argument_Swapping]^resolveViaRegistry ( enclosing, t ) ;^197^^^^^190^208^resolveViaRegistry ( t, enclosing ) ;^[CLASS] NamedType  [METHOD] resolve [RETURN_TYPE] void   ErrorReporter t JSType> enclosing [VARIABLES] ErrorReporter  t  boolean  forgiving  isResolved  String  reference  sourceName  long  serialVersionUID  int  charno  lineno  StaticScope  enclosing  
[BugLab_Argument_Swapping]^resolveViaProperties ( enclosing, t ) ;^204^^^^^190^208^resolveViaProperties ( t, enclosing ) ;^[CLASS] NamedType  [METHOD] resolve [RETURN_TYPE] void   ErrorReporter t JSType> enclosing [VARIABLES] ErrorReporter  t  boolean  forgiving  isResolved  String  reference  sourceName  long  serialVersionUID  int  charno  lineno  StaticScope  enclosing  
[BugLab_Variable_Misuse]^ObjectType type = ObjectType.cast ( registry.getType ( sourceName )  ) ;^215^^^^^213^219^ObjectType type = ObjectType.cast ( registry.getType ( reference )  ) ;^[CLASS] NamedType  [METHOD] resolveViaRegistry [RETURN_TYPE] void   ErrorReporter t JSType> enclosing [VARIABLES] ObjectType  type  ErrorReporter  t  boolean  forgiving  isResolved  StaticScope  enclosing  String  reference  sourceName  long  serialVersionUID  int  charno  lineno  
[BugLab_Argument_Swapping]^ObjectType type = ObjectType.cast ( reference.getType ( registry )  ) ;^215^^^^^213^219^ObjectType type = ObjectType.cast ( registry.getType ( reference )  ) ;^[CLASS] NamedType  [METHOD] resolveViaRegistry [RETURN_TYPE] void   ErrorReporter t JSType> enclosing [VARIABLES] ObjectType  type  ErrorReporter  t  boolean  forgiving  isResolved  StaticScope  enclosing  String  reference  sourceName  long  serialVersionUID  int  charno  lineno  
[BugLab_Wrong_Operator]^if  ( type == null )  {^216^^^^^213^219^if  ( type != null )  {^[CLASS] NamedType  [METHOD] resolveViaRegistry [RETURN_TYPE] void   ErrorReporter t JSType> enclosing [VARIABLES] ObjectType  type  ErrorReporter  t  boolean  forgiving  isResolved  StaticScope  enclosing  String  reference  sourceName  long  serialVersionUID  int  charno  lineno  
[BugLab_Argument_Swapping]^setReferencedType ( enclosing, t, type ) ;^217^^^^^213^219^setReferencedType ( type, t, enclosing ) ;^[CLASS] NamedType  [METHOD] resolveViaRegistry [RETURN_TYPE] void   ErrorReporter t JSType> enclosing [VARIABLES] ObjectType  type  ErrorReporter  t  boolean  forgiving  isResolved  StaticScope  enclosing  String  reference  sourceName  long  serialVersionUID  int  charno  lineno  
[BugLab_Argument_Swapping]^setReferencedType ( typeype, t, enclosing ) ;^217^^^^^213^219^setReferencedType ( type, t, enclosing ) ;^[CLASS] NamedType  [METHOD] resolveViaRegistry [RETURN_TYPE] void   ErrorReporter t JSType> enclosing [VARIABLES] ObjectType  type  ErrorReporter  t  boolean  forgiving  isResolved  StaticScope  enclosing  String  reference  sourceName  long  serialVersionUID  int  charno  lineno  
[BugLab_Argument_Swapping]^setReferencedType ( enclosingype, t, t ) ;^217^^^^^213^219^setReferencedType ( type, t, enclosing ) ;^[CLASS] NamedType  [METHOD] resolveViaRegistry [RETURN_TYPE] void   ErrorReporter t JSType> enclosing [VARIABLES] ObjectType  type  ErrorReporter  t  boolean  forgiving  isResolved  StaticScope  enclosing  String  reference  sourceName  long  serialVersionUID  int  charno  lineno  
[BugLab_Variable_Misuse]^String[] componentNames = sourceName.split ( "\\.", -1 ) ;^228^^^^^213^243^String[] componentNames = reference.split ( "\\.", -1 ) ;^[CLASS] NamedType  [METHOD] resolveViaProperties [RETURN_TYPE] void   ErrorReporter t JSType> enclosing [VARIABLES] ObjectType  parentClass  ErrorReporter  t  StaticSlot  slot  boolean  forgiving  isResolved  JSType  slotType  value  StaticScope  enclosing  FunctionType  functionType  String  reference  sourceName  String[]  componentNames  long  serialVersionUID  int  charno  i  lineno  
[BugLab_Wrong_Literal]^String[] componentNames = reference.split ( "\\.", -lineno ) ;^228^^^^^213^243^String[] componentNames = reference.split ( "\\.", -1 ) ;^[CLASS] NamedType  [METHOD] resolveViaProperties [RETURN_TYPE] void   ErrorReporter t JSType> enclosing [VARIABLES] ObjectType  parentClass  ErrorReporter  t  StaticSlot  slot  boolean  forgiving  isResolved  JSType  slotType  value  StaticScope  enclosing  FunctionType  functionType  String  reference  sourceName  String[]  componentNames  long  serialVersionUID  int  charno  i  lineno  
[BugLab_Wrong_Operator]^if  ( componentNames[0].length (  )  <= 0 )  {^229^^^^^214^244^if  ( componentNames[0].length (  )  == 0 )  {^[CLASS] NamedType  [METHOD] resolveViaProperties [RETURN_TYPE] void   ErrorReporter t JSType> enclosing [VARIABLES] ObjectType  parentClass  ErrorReporter  t  StaticSlot  slot  boolean  forgiving  isResolved  JSType  slotType  value  StaticScope  enclosing  FunctionType  functionType  String  reference  sourceName  String[]  componentNames  long  serialVersionUID  int  charno  i  lineno  
[BugLab_Wrong_Literal]^if  ( componentNames[charno].length (  )  == charno )  {^229^^^^^214^244^if  ( componentNames[0].length (  )  == 0 )  {^[CLASS] NamedType  [METHOD] resolveViaProperties [RETURN_TYPE] void   ErrorReporter t JSType> enclosing [VARIABLES] ObjectType  parentClass  ErrorReporter  t  StaticSlot  slot  boolean  forgiving  isResolved  JSType  slotType  value  StaticScope  enclosing  FunctionType  functionType  String  reference  sourceName  String[]  componentNames  long  serialVersionUID  int  charno  i  lineno  
[BugLab_Wrong_Literal]^if  ( componentNames[i].length (  )  == i )  {^229^^^^^214^244^if  ( componentNames[0].length (  )  == 0 )  {^[CLASS] NamedType  [METHOD] resolveViaProperties [RETURN_TYPE] void   ErrorReporter t JSType> enclosing [VARIABLES] ObjectType  parentClass  ErrorReporter  t  StaticSlot  slot  boolean  forgiving  isResolved  JSType  slotType  value  StaticScope  enclosing  FunctionType  functionType  String  reference  sourceName  String[]  componentNames  long  serialVersionUID  int  charno  i  lineno  
[BugLab_Argument_Swapping]^StaticSlot<JSType> slot = componentNames.getSlot ( enclosing[0] ) ;^233^^^^^218^248^StaticSlot<JSType> slot = enclosing.getSlot ( componentNames[0] ) ;^[CLASS] NamedType  [METHOD] resolveViaProperties [RETURN_TYPE] void   ErrorReporter t JSType> enclosing [VARIABLES] ObjectType  parentClass  ErrorReporter  t  StaticSlot  slot  boolean  forgiving  isResolved  JSType  slotType  value  StaticScope  enclosing  FunctionType  functionType  String  reference  sourceName  String[]  componentNames  long  serialVersionUID  int  charno  i  lineno  
[BugLab_Wrong_Literal]^StaticSlot<JSType> slot = enclosing.getSlot ( componentNames[lineno] ) ;^233^^^^^218^248^StaticSlot<JSType> slot = enclosing.getSlot ( componentNames[0] ) ;^[CLASS] NamedType  [METHOD] resolveViaProperties [RETURN_TYPE] void   ErrorReporter t JSType> enclosing [VARIABLES] ObjectType  parentClass  ErrorReporter  t  StaticSlot  slot  boolean  forgiving  isResolved  JSType  slotType  value  StaticScope  enclosing  FunctionType  functionType  String  reference  sourceName  String[]  componentNames  long  serialVersionUID  int  charno  i  lineno  
[BugLab_Wrong_Operator]^if  ( slot != null )  {^234^^^^^219^249^if  ( slot == null )  {^[CLASS] NamedType  [METHOD] resolveViaProperties [RETURN_TYPE] void   ErrorReporter t JSType> enclosing [VARIABLES] ObjectType  parentClass  ErrorReporter  t  StaticSlot  slot  boolean  forgiving  isResolved  JSType  slotType  value  StaticScope  enclosing  FunctionType  functionType  String  reference  sourceName  String[]  componentNames  long  serialVersionUID  int  charno  i  lineno  
[BugLab_Variable_Misuse]^if  ( value == null || slotType.isAllType (  )  || slotType.isNoType (  )  )  {^242^^^^^227^257^if  ( slotType == null || slotType.isAllType (  )  || slotType.isNoType (  )  )  {^[CLASS] NamedType  [METHOD] resolveViaProperties [RETURN_TYPE] void   ErrorReporter t JSType> enclosing [VARIABLES] ObjectType  parentClass  ErrorReporter  t  StaticSlot  slot  boolean  forgiving  isResolved  JSType  slotType  value  StaticScope  enclosing  FunctionType  functionType  String  reference  sourceName  String[]  componentNames  long  serialVersionUID  int  charno  i  lineno  
[BugLab_Wrong_Operator]^if  ( slotType == null && slotType.isAllType (  )  || slotType.isNoType (  )  )  {^242^^^^^227^257^if  ( slotType == null || slotType.isAllType (  )  || slotType.isNoType (  )  )  {^[CLASS] NamedType  [METHOD] resolveViaProperties [RETURN_TYPE] void   ErrorReporter t JSType> enclosing [VARIABLES] ObjectType  parentClass  ErrorReporter  t  StaticSlot  slot  boolean  forgiving  isResolved  JSType  slotType  value  StaticScope  enclosing  FunctionType  functionType  String  reference  sourceName  String[]  componentNames  long  serialVersionUID  int  charno  i  lineno  
[BugLab_Wrong_Operator]^if  ( slotType != null || slotType.isAllType (  )  || slotType.isNoType (  )  )  {^242^^^^^227^257^if  ( slotType == null || slotType.isAllType (  )  || slotType.isNoType (  )  )  {^[CLASS] NamedType  [METHOD] resolveViaProperties [RETURN_TYPE] void   ErrorReporter t JSType> enclosing [VARIABLES] ObjectType  parentClass  ErrorReporter  t  StaticSlot  slot  boolean  forgiving  isResolved  JSType  slotType  value  StaticScope  enclosing  FunctionType  functionType  String  reference  sourceName  String[]  componentNames  long  serialVersionUID  int  charno  i  lineno  
[BugLab_Argument_Swapping]^JSType value = getTypedefType ( slot, t, componentNames[0] ) ;^246^^^^^231^261^JSType value = getTypedefType ( t, slot, componentNames[0] ) ;^[CLASS] NamedType  [METHOD] resolveViaProperties [RETURN_TYPE] void   ErrorReporter t JSType> enclosing [VARIABLES] ObjectType  parentClass  ErrorReporter  t  StaticSlot  slot  boolean  forgiving  isResolved  JSType  slotType  value  StaticScope  enclosing  FunctionType  functionType  String  reference  sourceName  String[]  componentNames  long  serialVersionUID  int  charno  i  lineno  
[BugLab_Argument_Swapping]^JSType value = getTypedefType ( t, componentNames, slot[0] ) ;^246^^^^^231^261^JSType value = getTypedefType ( t, slot, componentNames[0] ) ;^[CLASS] NamedType  [METHOD] resolveViaProperties [RETURN_TYPE] void   ErrorReporter t JSType> enclosing [VARIABLES] ObjectType  parentClass  ErrorReporter  t  StaticSlot  slot  boolean  forgiving  isResolved  JSType  slotType  value  StaticScope  enclosing  FunctionType  functionType  String  reference  sourceName  String[]  componentNames  long  serialVersionUID  int  charno  i  lineno  
[BugLab_Wrong_Literal]^JSType value = getTypedefType ( t, slot, componentNames[1] ) ;^246^^^^^231^261^JSType value = getTypedefType ( t, slot, componentNames[0] ) ;^[CLASS] NamedType  [METHOD] resolveViaProperties [RETURN_TYPE] void   ErrorReporter t JSType> enclosing [VARIABLES] ObjectType  parentClass  ErrorReporter  t  StaticSlot  slot  boolean  forgiving  isResolved  JSType  slotType  value  StaticScope  enclosing  FunctionType  functionType  String  reference  sourceName  String[]  componentNames  long  serialVersionUID  int  charno  i  lineno  
[BugLab_Argument_Swapping]^JSType value = getTypedefType ( componentNames, slot, t[0] ) ;^246^^^^^231^261^JSType value = getTypedefType ( t, slot, componentNames[0] ) ;^[CLASS] NamedType  [METHOD] resolveViaProperties [RETURN_TYPE] void   ErrorReporter t JSType> enclosing [VARIABLES] ObjectType  parentClass  ErrorReporter  t  StaticSlot  slot  boolean  forgiving  isResolved  JSType  slotType  value  StaticScope  enclosing  FunctionType  functionType  String  reference  sourceName  String[]  componentNames  long  serialVersionUID  int  charno  i  lineno  
[BugLab_Wrong_Literal]^JSType value = getTypedefType ( t, slot, componentNames[charno] ) ;^246^^^^^231^261^JSType value = getTypedefType ( t, slot, componentNames[0] ) ;^[CLASS] NamedType  [METHOD] resolveViaProperties [RETURN_TYPE] void   ErrorReporter t JSType> enclosing [VARIABLES] ObjectType  parentClass  ErrorReporter  t  StaticSlot  slot  boolean  forgiving  isResolved  JSType  slotType  value  StaticScope  enclosing  FunctionType  functionType  String  reference  sourceName  String[]  componentNames  long  serialVersionUID  int  charno  i  lineno  
[BugLab_Variable_Misuse]^if  ( slotType == null )  {^247^^^^^232^262^if  ( value == null )  {^[CLASS] NamedType  [METHOD] resolveViaProperties [RETURN_TYPE] void   ErrorReporter t JSType> enclosing [VARIABLES] ObjectType  parentClass  ErrorReporter  t  StaticSlot  slot  boolean  forgiving  isResolved  JSType  slotType  value  StaticScope  enclosing  FunctionType  functionType  String  reference  sourceName  String[]  componentNames  long  serialVersionUID  int  charno  i  lineno  
[BugLab_Wrong_Operator]^if  ( value != null )  {^247^^^^^232^262^if  ( value == null )  {^[CLASS] NamedType  [METHOD] resolveViaProperties [RETURN_TYPE] void   ErrorReporter t JSType> enclosing [VARIABLES] ObjectType  parentClass  ErrorReporter  t  StaticSlot  slot  boolean  forgiving  isResolved  JSType  slotType  value  StaticScope  enclosing  FunctionType  functionType  String  reference  sourceName  String[]  componentNames  long  serialVersionUID  int  charno  i  lineno  
[BugLab_Wrong_Operator]^if  ( parentClass != null )  {^255^^^^^240^270^if  ( parentClass == null )  {^[CLASS] NamedType  [METHOD] resolveViaProperties [RETURN_TYPE] void   ErrorReporter t JSType> enclosing [VARIABLES] ObjectType  parentClass  ErrorReporter  t  StaticSlot  slot  boolean  forgiving  isResolved  JSType  slotType  value  StaticScope  enclosing  FunctionType  functionType  String  reference  sourceName  String[]  componentNames  long  serialVersionUID  int  charno  i  lineno  
[BugLab_Wrong_Operator]^if  ( componentNames[i].length (  )  != 0 )  {^259^^^^^244^274^if  ( componentNames[i].length (  )  == 0 )  {^[CLASS] NamedType  [METHOD] resolveViaProperties [RETURN_TYPE] void   ErrorReporter t JSType> enclosing [VARIABLES] ObjectType  parentClass  ErrorReporter  t  StaticSlot  slot  boolean  forgiving  isResolved  JSType  slotType  value  StaticScope  enclosing  FunctionType  functionType  String  reference  sourceName  String[]  componentNames  long  serialVersionUID  int  charno  i  lineno  
[BugLab_Wrong_Literal]^if  ( componentNames[i].length (  )  == -1 )  {^259^^^^^244^274^if  ( componentNames[i].length (  )  == 0 )  {^[CLASS] NamedType  [METHOD] resolveViaProperties [RETURN_TYPE] void   ErrorReporter t JSType> enclosing [VARIABLES] ObjectType  parentClass  ErrorReporter  t  StaticSlot  slot  boolean  forgiving  isResolved  JSType  slotType  value  StaticScope  enclosing  FunctionType  functionType  String  reference  sourceName  String[]  componentNames  long  serialVersionUID  int  charno  i  lineno  
[BugLab_Variable_Misuse]^for  ( linenont i = 1; i < componentNames.length; i++ )  {^253^^^^^238^268^for  ( int i = 1; i < componentNames.length; i++ )  {^[CLASS] NamedType  [METHOD] resolveViaProperties [RETURN_TYPE] void   ErrorReporter t JSType> enclosing [VARIABLES] ObjectType  parentClass  ErrorReporter  t  StaticSlot  slot  boolean  forgiving  isResolved  JSType  slotType  value  StaticScope  enclosing  FunctionType  functionType  String  reference  sourceName  String[]  componentNames  long  serialVersionUID  int  charno  i  lineno  
[BugLab_Argument_Swapping]^for  ( componentNames.lengthnt i = 1; i < i; i++ )  {^253^^^^^238^268^for  ( int i = 1; i < componentNames.length; i++ )  {^[CLASS] NamedType  [METHOD] resolveViaProperties [RETURN_TYPE] void   ErrorReporter t JSType> enclosing [VARIABLES] ObjectType  parentClass  ErrorReporter  t  StaticSlot  slot  boolean  forgiving  isResolved  JSType  slotType  value  StaticScope  enclosing  FunctionType  functionType  String  reference  sourceName  String[]  componentNames  long  serialVersionUID  int  charno  i  lineno  
[BugLab_Wrong_Operator]^for  ( int i = 1; i <= componentNames.length; i++ )  {^253^^^^^238^268^for  ( int i = 1; i < componentNames.length; i++ )  {^[CLASS] NamedType  [METHOD] resolveViaProperties [RETURN_TYPE] void   ErrorReporter t JSType> enclosing [VARIABLES] ObjectType  parentClass  ErrorReporter  t  StaticSlot  slot  boolean  forgiving  isResolved  JSType  slotType  value  StaticScope  enclosing  FunctionType  functionType  String  reference  sourceName  String[]  componentNames  long  serialVersionUID  int  charno  i  lineno  
[BugLab_Wrong_Literal]^for  ( int i = lineno; i < componentNames.length; i++ )  {^253^^^^^238^268^for  ( int i = 1; i < componentNames.length; i++ )  {^[CLASS] NamedType  [METHOD] resolveViaProperties [RETURN_TYPE] void   ErrorReporter t JSType> enclosing [VARIABLES] ObjectType  parentClass  ErrorReporter  t  StaticSlot  slot  boolean  forgiving  isResolved  JSType  slotType  value  StaticScope  enclosing  FunctionType  functionType  String  reference  sourceName  String[]  componentNames  long  serialVersionUID  int  charno  i  lineno  
[BugLab_Wrong_Operator]^if  ( componentNames[i].length (  )  > 0 )  {^259^^^^^244^274^if  ( componentNames[i].length (  )  == 0 )  {^[CLASS] NamedType  [METHOD] resolveViaProperties [RETURN_TYPE] void   ErrorReporter t JSType> enclosing [VARIABLES] ObjectType  parentClass  ErrorReporter  t  StaticSlot  slot  boolean  forgiving  isResolved  JSType  slotType  value  StaticScope  enclosing  FunctionType  functionType  String  reference  sourceName  String[]  componentNames  long  serialVersionUID  int  charno  i  lineno  
[BugLab_Wrong_Literal]^if  ( componentNames[i].length (  )  == i )  {^259^^^^^244^274^if  ( componentNames[i].length (  )  == 0 )  {^[CLASS] NamedType  [METHOD] resolveViaProperties [RETURN_TYPE] void   ErrorReporter t JSType> enclosing [VARIABLES] ObjectType  parentClass  ErrorReporter  t  StaticSlot  slot  boolean  forgiving  isResolved  JSType  slotType  value  StaticScope  enclosing  FunctionType  functionType  String  reference  sourceName  String[]  componentNames  long  serialVersionUID  int  charno  i  lineno  
[BugLab_Argument_Swapping]^value = componentNames.getPropertyType ( parentClass[i] ) ;^263^^^^^248^278^value = parentClass.getPropertyType ( componentNames[i] ) ;^[CLASS] NamedType  [METHOD] resolveViaProperties [RETURN_TYPE] void   ErrorReporter t JSType> enclosing [VARIABLES] ObjectType  parentClass  ErrorReporter  t  StaticSlot  slot  boolean  forgiving  isResolved  JSType  slotType  value  StaticScope  enclosing  FunctionType  functionType  String  reference  sourceName  String[]  componentNames  long  serialVersionUID  int  charno  i  lineno  
[BugLab_Variable_Misuse]^ObjectType parentClass = ObjectType.cast ( slotType ) ;^254^^^^^239^269^ObjectType parentClass = ObjectType.cast ( value ) ;^[CLASS] NamedType  [METHOD] resolveViaProperties [RETURN_TYPE] void   ErrorReporter t JSType> enclosing [VARIABLES] ObjectType  parentClass  ErrorReporter  t  StaticSlot  slot  boolean  forgiving  isResolved  JSType  slotType  value  StaticScope  enclosing  FunctionType  functionType  String  reference  sourceName  String[]  componentNames  long  serialVersionUID  int  charno  i  lineno  
[BugLab_Variable_Misuse]^if  ( slotType instanceof FunctionType )  {^267^^^^^252^282^if  ( value instanceof FunctionType )  {^[CLASS] NamedType  [METHOD] resolveViaProperties [RETURN_TYPE] void   ErrorReporter t JSType> enclosing [VARIABLES] ObjectType  parentClass  ErrorReporter  t  StaticSlot  slot  boolean  forgiving  isResolved  JSType  slotType  value  StaticScope  enclosing  FunctionType  functionType  String  reference  sourceName  String[]  componentNames  long  serialVersionUID  int  charno  i  lineno  
[BugLab_Wrong_Operator]^if  ( value  >>  FunctionType )  {^267^^^^^252^282^if  ( value instanceof FunctionType )  {^[CLASS] NamedType  [METHOD] resolveViaProperties [RETURN_TYPE] void   ErrorReporter t JSType> enclosing [VARIABLES] ObjectType  parentClass  ErrorReporter  t  StaticSlot  slot  boolean  forgiving  isResolved  JSType  slotType  value  StaticScope  enclosing  FunctionType  functionType  String  reference  sourceName  String[]  componentNames  long  serialVersionUID  int  charno  i  lineno  
[BugLab_Wrong_Operator]^if  ( value  ||  FunctionType )  {^267^^^^^252^282^if  ( value instanceof FunctionType )  {^[CLASS] NamedType  [METHOD] resolveViaProperties [RETURN_TYPE] void   ErrorReporter t JSType> enclosing [VARIABLES] ObjectType  parentClass  ErrorReporter  t  StaticSlot  slot  boolean  forgiving  isResolved  JSType  slotType  value  StaticScope  enclosing  FunctionType  functionType  String  reference  sourceName  String[]  componentNames  long  serialVersionUID  int  charno  i  lineno  
[BugLab_Variable_Misuse]^} else if  ( slotType instanceof EnumType )  {^274^^^^^259^289^} else if  ( value instanceof EnumType )  {^[CLASS] NamedType  [METHOD] resolveViaProperties [RETURN_TYPE] void   ErrorReporter t JSType> enclosing [VARIABLES] ObjectType  parentClass  ErrorReporter  t  StaticSlot  slot  boolean  forgiving  isResolved  JSType  slotType  value  StaticScope  enclosing  FunctionType  functionType  String  reference  sourceName  String[]  componentNames  long  serialVersionUID  int  charno  i  lineno  
[BugLab_Wrong_Operator]^} else if  ( value  <=  EnumType )  {^274^^^^^259^289^} else if  ( value instanceof EnumType )  {^[CLASS] NamedType  [METHOD] resolveViaProperties [RETURN_TYPE] void   ErrorReporter t JSType> enclosing [VARIABLES] ObjectType  parentClass  ErrorReporter  t  StaticSlot  slot  boolean  forgiving  isResolved  JSType  slotType  value  StaticScope  enclosing  FunctionType  functionType  String  reference  sourceName  String[]  componentNames  long  serialVersionUID  int  charno  i  lineno  
[BugLab_Argument_Swapping]^setReferencedType (  (  ( EnumType )  value ) .getElementsType (  ) , enclosing, t ) ;^275^^^^^260^290^setReferencedType (  (  ( EnumType )  value ) .getElementsType (  ) , t, enclosing ) ;^[CLASS] NamedType  [METHOD] resolveViaProperties [RETURN_TYPE] void   ErrorReporter t JSType> enclosing [VARIABLES] ObjectType  parentClass  ErrorReporter  t  StaticSlot  slot  boolean  forgiving  isResolved  JSType  slotType  value  StaticScope  enclosing  FunctionType  functionType  String  reference  sourceName  String[]  componentNames  long  serialVersionUID  int  charno  i  lineno  
[BugLab_Variable_Misuse]^setReferencedType (  (  ( EnumType )  value ) .getElementsType (  ) , t, null ) ;^275^^^^^260^290^setReferencedType (  (  ( EnumType )  value ) .getElementsType (  ) , t, enclosing ) ;^[CLASS] NamedType  [METHOD] resolveViaProperties [RETURN_TYPE] void   ErrorReporter t JSType> enclosing [VARIABLES] ObjectType  parentClass  ErrorReporter  t  StaticSlot  slot  boolean  forgiving  isResolved  JSType  slotType  value  StaticScope  enclosing  FunctionType  functionType  String  reference  sourceName  String[]  componentNames  long  serialVersionUID  int  charno  i  lineno  
[BugLab_Wrong_Operator]^if  ( functionType.isConstructor (  )  && functionType.isInterface (  )  )  {^269^^^^^254^284^if  ( functionType.isConstructor (  )  || functionType.isInterface (  )  )  {^[CLASS] NamedType  [METHOD] resolveViaProperties [RETURN_TYPE] void   ErrorReporter t JSType> enclosing [VARIABLES] ObjectType  parentClass  ErrorReporter  t  StaticSlot  slot  boolean  forgiving  isResolved  JSType  slotType  value  StaticScope  enclosing  FunctionType  functionType  String  reference  sourceName  String[]  componentNames  long  serialVersionUID  int  charno  i  lineno  
[BugLab_Argument_Swapping]^setReferencedType ( t.getInstanceType (  ) , functionType, enclosing ) ;^270^^^^^255^285^setReferencedType ( functionType.getInstanceType (  ) , t, enclosing ) ;^[CLASS] NamedType  [METHOD] resolveViaProperties [RETURN_TYPE] void   ErrorReporter t JSType> enclosing [VARIABLES] ObjectType  parentClass  ErrorReporter  t  StaticSlot  slot  boolean  forgiving  isResolved  JSType  slotType  value  StaticScope  enclosing  FunctionType  functionType  String  reference  sourceName  String[]  componentNames  long  serialVersionUID  int  charno  i  lineno  
[BugLab_Argument_Swapping]^setReferencedType ( functionType.getInstanceType (  ) , enclosing, t ) ;^270^^^^^255^285^setReferencedType ( functionType.getInstanceType (  ) , t, enclosing ) ;^[CLASS] NamedType  [METHOD] resolveViaProperties [RETURN_TYPE] void   ErrorReporter t JSType> enclosing [VARIABLES] ObjectType  parentClass  ErrorReporter  t  StaticSlot  slot  boolean  forgiving  isResolved  JSType  slotType  value  StaticScope  enclosing  FunctionType  functionType  String  reference  sourceName  String[]  componentNames  long  serialVersionUID  int  charno  i  lineno  
[BugLab_Argument_Swapping]^setReferencedType ( enclosing.getInstanceType (  ) , t, functionType ) ;^270^^^^^255^285^setReferencedType ( functionType.getInstanceType (  ) , t, enclosing ) ;^[CLASS] NamedType  [METHOD] resolveViaProperties [RETURN_TYPE] void   ErrorReporter t JSType> enclosing [VARIABLES] ObjectType  parentClass  ErrorReporter  t  StaticSlot  slot  boolean  forgiving  isResolved  JSType  slotType  value  StaticScope  enclosing  FunctionType  functionType  String  reference  sourceName  String[]  componentNames  long  serialVersionUID  int  charno  i  lineno  
[BugLab_Wrong_Literal]^isResolved = false;^285^^^^^281^286^isResolved = true;^[CLASS] NamedType  [METHOD] setReferencedType [RETURN_TYPE] void   ObjectType type ErrorReporter t JSType> enclosing [VARIABLES] ObjectType  type  ErrorReporter  t  boolean  forgiving  isResolved  StaticScope  enclosing  String  reference  sourceName  long  serialVersionUID  int  charno  i  lineno  
[BugLab_Variable_Misuse]^referencedType = 4.getNativeObjectType ( JSTypeNative.UNKNOWN_TYPE ) ;^289^^^^^288^293^referencedType = registry.getNativeObjectType ( JSTypeNative.UNKNOWN_TYPE ) ;^[CLASS] NamedType  [METHOD] handleTypeCycle [RETURN_TYPE] void   ErrorReporter t [VARIABLES] ErrorReporter  t  boolean  forgiving  isResolved  String  reference  sourceName  long  serialVersionUID  int  charno  i  lineno  
[BugLab_Variable_Misuse]^t.warning ( "Cycle detected in inheritance chain of type " + reference, reference, lineno, null, charno ) ;^290^291^^^^288^293^t.warning ( "Cycle detected in inheritance chain of type " + reference, sourceName, lineno, null, charno ) ;^[CLASS] NamedType  [METHOD] handleTypeCycle [RETURN_TYPE] void   ErrorReporter t [VARIABLES] ErrorReporter  t  boolean  forgiving  isResolved  String  reference  sourceName  long  serialVersionUID  int  charno  i  lineno  
[BugLab_Variable_Misuse]^t.warning ( "Cycle detected in inheritance chain of type " + reference, sourceName, i, null, charno ) ;^290^291^^^^288^293^t.warning ( "Cycle detected in inheritance chain of type " + reference, sourceName, lineno, null, charno ) ;^[CLASS] NamedType  [METHOD] handleTypeCycle [RETURN_TYPE] void   ErrorReporter t [VARIABLES] ErrorReporter  t  boolean  forgiving  isResolved  String  reference  sourceName  long  serialVersionUID  int  charno  i  lineno  
[BugLab_Variable_Misuse]^t.warning ( "Cycle detected in inheritance chain of type " + reference, sourceName, lineno, null, lineno ) ;^290^291^^^^288^293^t.warning ( "Cycle detected in inheritance chain of type " + reference, sourceName, lineno, null, charno ) ;^[CLASS] NamedType  [METHOD] handleTypeCycle [RETURN_TYPE] void   ErrorReporter t [VARIABLES] ErrorReporter  t  boolean  forgiving  isResolved  String  reference  sourceName  long  serialVersionUID  int  charno  i  lineno  
[BugLab_Argument_Swapping]^t.warning ( "Cycle detected in inheritance chain of linenoype " + reference, sourceName, t, null, charno ) ;^290^291^^^^288^293^t.warning ( "Cycle detected in inheritance chain of type " + reference, sourceName, lineno, null, charno ) ;^[CLASS] NamedType  [METHOD] handleTypeCycle [RETURN_TYPE] void   ErrorReporter t [VARIABLES] ErrorReporter  t  boolean  forgiving  isResolved  String  reference  sourceName  long  serialVersionUID  int  charno  i  lineno  
[BugLab_Argument_Swapping]^t.warning ( "Cycle detected in inheritance chain of type " + sourceName, reference, lineno, null, charno ) ;^290^291^^^^288^293^t.warning ( "Cycle detected in inheritance chain of type " + reference, sourceName, lineno, null, charno ) ;^[CLASS] NamedType  [METHOD] handleTypeCycle [RETURN_TYPE] void   ErrorReporter t [VARIABLES] ErrorReporter  t  boolean  forgiving  isResolved  String  reference  sourceName  long  serialVersionUID  int  charno  i  lineno  
[BugLab_Argument_Swapping]^t.warning ( "Cycle detected in inheritance chain of type " + reference, sourceName, charno, null, lineno ) ;^290^291^^^^288^293^t.warning ( "Cycle detected in inheritance chain of type " + reference, sourceName, lineno, null, charno ) ;^[CLASS] NamedType  [METHOD] handleTypeCycle [RETURN_TYPE] void   ErrorReporter t [VARIABLES] ErrorReporter  t  boolean  forgiving  isResolved  String  reference  sourceName  long  serialVersionUID  int  charno  i  lineno  
[BugLab_Wrong_Literal]^isResolved = false;^292^^^^^288^293^isResolved = true;^[CLASS] NamedType  [METHOD] handleTypeCycle [RETURN_TYPE] void   ErrorReporter t [VARIABLES] ErrorReporter  t  boolean  forgiving  isResolved  String  reference  sourceName  long  serialVersionUID  int  charno  i  lineno  
[BugLab_Argument_Swapping]^if  ( t instanceof EnumElementType && (  ( EnumElementType )  referencedType ) .getPrimitiveType (  )  == referencedTypehis )  {^296^297^^^^295^300^if  ( referencedType instanceof EnumElementType && (  ( EnumElementType )  referencedType ) .getPrimitiveType (  )  == this )  {^[CLASS] NamedType  [METHOD] checkEnumElementCycle [RETURN_TYPE] void   ErrorReporter t [VARIABLES] ErrorReporter  t  boolean  forgiving  isResolved  String  reference  sourceName  long  serialVersionUID  int  charno  i  lineno  
[BugLab_Wrong_Operator]^if  ( referencedType instanceof EnumElementType || (  ( EnumElementType )  referencedType ) .getPrimitiveType (  )  == this )  {^296^297^^^^295^300^if  ( referencedType instanceof EnumElementType && (  ( EnumElementType )  referencedType ) .getPrimitiveType (  )  == this )  {^[CLASS] NamedType  [METHOD] checkEnumElementCycle [RETURN_TYPE] void   ErrorReporter t [VARIABLES] ErrorReporter  t  boolean  forgiving  isResolved  String  reference  sourceName  long  serialVersionUID  int  charno  i  lineno  
[BugLab_Wrong_Operator]^if  ( referencedType  &&  EnumElementType && (  ( EnumElementType )  referencedType ) .getPrimitiveType (  )  == this )  {^296^297^^^^295^300^if  ( referencedType instanceof EnumElementType && (  ( EnumElementType )  referencedType ) .getPrimitiveType (  )  == this )  {^[CLASS] NamedType  [METHOD] checkEnumElementCycle [RETURN_TYPE] void   ErrorReporter t [VARIABLES] ErrorReporter  t  boolean  forgiving  isResolved  String  reference  sourceName  long  serialVersionUID  int  charno  i  lineno  
[BugLab_Wrong_Operator]^if  ( referencedType instanceof EnumElementType && (  ( EnumElementType )  referencedType ) .getPrimitiveType (  )  != this )  {^296^297^^^^295^300^if  ( referencedType instanceof EnumElementType && (  ( EnumElementType )  referencedType ) .getPrimitiveType (  )  == this )  {^[CLASS] NamedType  [METHOD] checkEnumElementCycle [RETURN_TYPE] void   ErrorReporter t [VARIABLES] ErrorReporter  t  boolean  forgiving  isResolved  String  reference  sourceName  long  serialVersionUID  int  charno  i  lineno  
[BugLab_Variable_Misuse]^if  ( !registry.isForwardDeclaredType ( reference )  && !isResolved && registry.isLastGeneration (  )  )  {^305^306^^^^304^315^if  ( !registry.isForwardDeclaredType ( reference )  && !forgiving && registry.isLastGeneration (  )  )  {^[CLASS] NamedType  [METHOD] handleUnresolvedType [RETURN_TYPE] void   ErrorReporter t [VARIABLES] ErrorReporter  t  boolean  forgiving  isResolved  String  reference  sourceName  long  serialVersionUID  int  charno  i  lineno  
[BugLab_Wrong_Operator]^if  ( !registry.isForwardDeclaredType ( reference )  || !forgiving && registry.isLastGeneration (  )  )  {^305^306^^^^304^315^if  ( !registry.isForwardDeclaredType ( reference )  && !forgiving && registry.isLastGeneration (  )  )  {^[CLASS] NamedType  [METHOD] handleUnresolvedType [RETURN_TYPE] void   ErrorReporter t [VARIABLES] ErrorReporter  t  boolean  forgiving  isResolved  String  reference  sourceName  long  serialVersionUID  int  charno  i  lineno  
[BugLab_Variable_Misuse]^t.warning ( "Unknown type " + reference, sourceName, i, null, charno ) ;^307^308^^^^304^315^t.warning ( "Unknown type " + reference, sourceName, lineno, null, charno ) ;^[CLASS] NamedType  [METHOD] handleUnresolvedType [RETURN_TYPE] void   ErrorReporter t [VARIABLES] ErrorReporter  t  boolean  forgiving  isResolved  String  reference  sourceName  long  serialVersionUID  int  charno  i  lineno  
[BugLab_Variable_Misuse]^t.warning ( "Unknown type " + reference, sourceName, lineno, null, lineno ) ;^307^308^^^^304^315^t.warning ( "Unknown type " + reference, sourceName, lineno, null, charno ) ;^[CLASS] NamedType  [METHOD] handleUnresolvedType [RETURN_TYPE] void   ErrorReporter t [VARIABLES] ErrorReporter  t  boolean  forgiving  isResolved  String  reference  sourceName  long  serialVersionUID  int  charno  i  lineno  
[BugLab_Argument_Swapping]^t.warning ( "Unknown linenoype " + reference, sourceName, t, null, charno ) ;^307^308^^^^304^315^t.warning ( "Unknown type " + reference, sourceName, lineno, null, charno ) ;^[CLASS] NamedType  [METHOD] handleUnresolvedType [RETURN_TYPE] void   ErrorReporter t [VARIABLES] ErrorReporter  t  boolean  forgiving  isResolved  String  reference  sourceName  long  serialVersionUID  int  charno  i  lineno  
[BugLab_Argument_Swapping]^t.warning ( "Unknown type " + sourceName, reference, lineno, null, charno ) ;^307^308^^^^304^315^t.warning ( "Unknown type " + reference, sourceName, lineno, null, charno ) ;^[CLASS] NamedType  [METHOD] handleUnresolvedType [RETURN_TYPE] void   ErrorReporter t [VARIABLES] ErrorReporter  t  boolean  forgiving  isResolved  String  reference  sourceName  long  serialVersionUID  int  charno  i  lineno  
[BugLab_Argument_Swapping]^t.warning ( "Unknown type " + reference, lineno, sourceName, null, charno ) ;^307^308^^^^304^315^t.warning ( "Unknown type " + reference, sourceName, lineno, null, charno ) ;^[CLASS] NamedType  [METHOD] handleUnresolvedType [RETURN_TYPE] void   ErrorReporter t [VARIABLES] ErrorReporter  t  boolean  forgiving  isResolved  String  reference  sourceName  long  serialVersionUID  int  charno  i  lineno  
[BugLab_Argument_Swapping]^t.warning ( "Unknown type " + reference, sourceName, charno, null, lineno ) ;^307^308^^^^304^315^t.warning ( "Unknown type " + reference, sourceName, lineno, null, charno ) ;^[CLASS] NamedType  [METHOD] handleUnresolvedType [RETURN_TYPE] void   ErrorReporter t [VARIABLES] ErrorReporter  t  boolean  forgiving  isResolved  String  reference  sourceName  long  serialVersionUID  int  charno  i  lineno  
[BugLab_Argument_Swapping]^t.warning ( "Unknown type " + charno, sourceName, lineno, null, reference ) ;^307^308^^^^304^315^t.warning ( "Unknown type " + reference, sourceName, lineno, null, charno ) ;^[CLASS] NamedType  [METHOD] handleUnresolvedType [RETURN_TYPE] void   ErrorReporter t [VARIABLES] ErrorReporter  t  boolean  forgiving  isResolved  String  reference  sourceName  long  serialVersionUID  int  charno  i  lineno  
[BugLab_Variable_Misuse]^if  ( !registry.isForwardDeclaredType ( sourceName )  && !forgiving && registry.isLastGeneration (  )  )  {^305^306^^^^304^315^if  ( !registry.isForwardDeclaredType ( reference )  && !forgiving && registry.isLastGeneration (  )  )  {^[CLASS] NamedType  [METHOD] handleUnresolvedType [RETURN_TYPE] void   ErrorReporter t [VARIABLES] ErrorReporter  t  boolean  forgiving  isResolved  String  reference  sourceName  long  serialVersionUID  int  charno  i  lineno  
[BugLab_Argument_Swapping]^if  ( !registry.isForwardDeclaredType ( registry )  && !forgiving && reference.isLastGeneration (  )  )  {^305^306^^^^304^315^if  ( !registry.isForwardDeclaredType ( reference )  && !forgiving && registry.isLastGeneration (  )  )  {^[CLASS] NamedType  [METHOD] handleUnresolvedType [RETURN_TYPE] void   ErrorReporter t [VARIABLES] ErrorReporter  t  boolean  forgiving  isResolved  String  reference  sourceName  long  serialVersionUID  int  charno  i  lineno  
[BugLab_Variable_Misuse]^t.warning ( "Unknown type " + sourceName, sourceName, lineno, null, charno ) ;^307^308^^^^304^315^t.warning ( "Unknown type " + reference, sourceName, lineno, null, charno ) ;^[CLASS] NamedType  [METHOD] handleUnresolvedType [RETURN_TYPE] void   ErrorReporter t [VARIABLES] ErrorReporter  t  boolean  forgiving  isResolved  String  reference  sourceName  long  serialVersionUID  int  charno  i  lineno  
[BugLab_Variable_Misuse]^t.warning ( "Unknown type " + reference, sourceName, lineno, null, i ) ;^307^308^^^^304^315^t.warning ( "Unknown type " + reference, sourceName, lineno, null, charno ) ;^[CLASS] NamedType  [METHOD] handleUnresolvedType [RETURN_TYPE] void   ErrorReporter t [VARIABLES] ErrorReporter  t  boolean  forgiving  isResolved  String  reference  sourceName  long  serialVersionUID  int  charno  i  lineno  
[BugLab_Argument_Swapping]^t.warning ( "Unknown sourceNameype " + reference, t, lineno, null, charno ) ;^307^308^^^^304^315^t.warning ( "Unknown type " + reference, sourceName, lineno, null, charno ) ;^[CLASS] NamedType  [METHOD] handleUnresolvedType [RETURN_TYPE] void   ErrorReporter t [VARIABLES] ErrorReporter  t  boolean  forgiving  isResolved  String  reference  sourceName  long  serialVersionUID  int  charno  i  lineno  
[BugLab_Wrong_Literal]^isResolved = false;^314^^^^^304^315^isResolved = true;^[CLASS] NamedType  [METHOD] handleUnresolvedType [RETURN_TYPE] void   ErrorReporter t [VARIABLES] ErrorReporter  t  boolean  forgiving  isResolved  String  reference  sourceName  long  serialVersionUID  int  charno  i  lineno  
[BugLab_Wrong_Operator]^if  ( type == null )  {^319^^^^^317^324^if  ( type != null )  {^[CLASS] NamedType  [METHOD] getTypedefType [RETURN_TYPE] JSType   ErrorReporter t JSType> slot String name [VARIABLES] ErrorReporter  t  StaticSlot  slot  boolean  forgiving  isResolved  JSType  type  String  name  reference  sourceName  long  serialVersionUID  int  charno  i  lineno  
