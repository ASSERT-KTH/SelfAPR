[BugLab_Wrong_Literal]^return false;^107^^^^^103^111^return true;^[CLASS] UnionType  [METHOD] matchesNumberContext [RETURN_TYPE] boolean   [VARIABLES] Set  alternates  JSType  t  boolean  long  serialVersionUID  
[BugLab_Wrong_Literal]^return true;^110^^^^^103^111^return false;^[CLASS] UnionType  [METHOD] matchesNumberContext [RETURN_TYPE] boolean   [VARIABLES] Set  alternates  JSType  t  boolean  long  serialVersionUID  
[BugLab_Wrong_Literal]^return false;^129^^^^^125^133^return true;^[CLASS] UnionType  [METHOD] matchesStringContext [RETURN_TYPE] boolean   [VARIABLES] Set  alternates  JSType  t  boolean  long  serialVersionUID  
[BugLab_Wrong_Literal]^return true;^132^^^^^125^133^return false;^[CLASS] UnionType  [METHOD] matchesStringContext [RETURN_TYPE] boolean   [VARIABLES] Set  alternates  JSType  t  boolean  long  serialVersionUID  
[BugLab_Wrong_Literal]^return false;^156^^^^^152^160^return true;^[CLASS] UnionType  [METHOD] matchesObjectContext [RETURN_TYPE] boolean   [VARIABLES] Set  alternates  JSType  t  boolean  long  serialVersionUID  
[BugLab_Wrong_Literal]^return true;^159^^^^^152^160^return false;^[CLASS] UnionType  [METHOD] matchesObjectContext [RETURN_TYPE] boolean   [VARIABLES] Set  alternates  JSType  t  boolean  long  serialVersionUID  
[BugLab_Variable_Misuse]^if  ( propertyType.isNullType (  )  || alternate.isVoidType (  )  )  {^168^^^^^163^185^if  ( alternate.isNullType (  )  || alternate.isVoidType (  )  )  {^[CLASS] UnionType  [METHOD] findPropertyType [RETURN_TYPE] JSType   String propertyName [VARIABLES] Set  alternates  String  propertyName  JSType  altPropertyType  alternate  propertyType  boolean  long  serialVersionUID  
[BugLab_Wrong_Operator]^if  ( alternate.isNullType (  )  && alternate.isVoidType (  )  )  {^168^^^^^163^185^if  ( alternate.isNullType (  )  || alternate.isVoidType (  )  )  {^[CLASS] UnionType  [METHOD] findPropertyType [RETURN_TYPE] JSType   String propertyName [VARIABLES] Set  alternates  String  propertyName  JSType  altPropertyType  alternate  propertyType  boolean  long  serialVersionUID  
[BugLab_Variable_Misuse]^if  ( propertyType == null )  {^173^^^^^163^185^if  ( altPropertyType == null )  {^[CLASS] UnionType  [METHOD] findPropertyType [RETURN_TYPE] JSType   String propertyName [VARIABLES] Set  alternates  String  propertyName  JSType  altPropertyType  alternate  propertyType  boolean  long  serialVersionUID  
[BugLab_Wrong_Operator]^if  ( altPropertyType != null )  {^173^^^^^163^185^if  ( altPropertyType == null )  {^[CLASS] UnionType  [METHOD] findPropertyType [RETURN_TYPE] JSType   String propertyName [VARIABLES] Set  alternates  String  propertyName  JSType  altPropertyType  alternate  propertyType  boolean  long  serialVersionUID  
[BugLab_Variable_Misuse]^if  ( alternate == null )  {^177^^^^^163^185^if  ( propertyType == null )  {^[CLASS] UnionType  [METHOD] findPropertyType [RETURN_TYPE] JSType   String propertyName [VARIABLES] Set  alternates  String  propertyName  JSType  altPropertyType  alternate  propertyType  boolean  long  serialVersionUID  
[BugLab_Wrong_Operator]^if  ( propertyType != null )  {^177^^^^^163^185^if  ( propertyType == null )  {^[CLASS] UnionType  [METHOD] findPropertyType [RETURN_TYPE] JSType   String propertyName [VARIABLES] Set  alternates  String  propertyName  JSType  altPropertyType  alternate  propertyType  boolean  long  serialVersionUID  
[BugLab_Variable_Misuse]^propertyType = alternate.getLeastSupertype ( altPropertyType ) ;^180^^^^^163^185^propertyType = propertyType.getLeastSupertype ( altPropertyType ) ;^[CLASS] UnionType  [METHOD] findPropertyType [RETURN_TYPE] JSType   String propertyName [VARIABLES] Set  alternates  String  propertyName  JSType  altPropertyType  alternate  propertyType  boolean  long  serialVersionUID  
[BugLab_Variable_Misuse]^propertyType = propertyType.getLeastSupertype ( alternate ) ;^180^^^^^163^185^propertyType = propertyType.getLeastSupertype ( altPropertyType ) ;^[CLASS] UnionType  [METHOD] findPropertyType [RETURN_TYPE] JSType   String propertyName [VARIABLES] Set  alternates  String  propertyName  JSType  altPropertyType  alternate  propertyType  boolean  long  serialVersionUID  
[BugLab_Argument_Swapping]^propertyType = altPropertyType.getLeastSupertype ( propertyType ) ;^180^^^^^163^185^propertyType = propertyType.getLeastSupertype ( altPropertyType ) ;^[CLASS] UnionType  [METHOD] findPropertyType [RETURN_TYPE] JSType   String propertyName [VARIABLES] Set  alternates  String  propertyName  JSType  altPropertyType  alternate  propertyType  boolean  long  serialVersionUID  
[BugLab_Variable_Misuse]^propertyType = propertyType;^178^^^^^163^185^propertyType = altPropertyType;^[CLASS] UnionType  [METHOD] findPropertyType [RETURN_TYPE] JSType   String propertyName [VARIABLES] Set  alternates  String  propertyName  JSType  altPropertyType  alternate  propertyType  boolean  long  serialVersionUID  
[BugLab_Variable_Misuse]^JSType altPropertyType = propertyType.findPropertyType ( propertyName ) ;^172^^^^^163^185^JSType altPropertyType = alternate.findPropertyType ( propertyName ) ;^[CLASS] UnionType  [METHOD] findPropertyType [RETURN_TYPE] JSType   String propertyName [VARIABLES] Set  alternates  String  propertyName  JSType  altPropertyType  alternate  propertyType  boolean  long  serialVersionUID  
[BugLab_Argument_Swapping]^JSType altPropertyType = propertyName.findPropertyType ( alternate ) ;^172^^^^^163^185^JSType altPropertyType = alternate.findPropertyType ( propertyName ) ;^[CLASS] UnionType  [METHOD] findPropertyType [RETURN_TYPE] JSType   String propertyName [VARIABLES] Set  alternates  String  propertyName  JSType  altPropertyType  alternate  propertyType  boolean  long  serialVersionUID  
[BugLab_Variable_Misuse]^return alternate;^184^^^^^163^185^return propertyType;^[CLASS] UnionType  [METHOD] findPropertyType [RETURN_TYPE] JSType   String propertyName [VARIABLES] Set  alternates  String  propertyName  JSType  altPropertyType  alternate  propertyType  boolean  long  serialVersionUID  
[BugLab_Wrong_Literal]^boolean canAssign = false;^189^^^^^188^197^boolean canAssign = true;^[CLASS] UnionType  [METHOD] canAssignTo [RETURN_TYPE] boolean   JSType that [VARIABLES] Set  alternates  JSType  t  that  boolean  canAssign  long  serialVersionUID  
[BugLab_Variable_Misuse]^if  ( that.isUnknownType (  )  )  {^191^^^^^188^197^if  ( t.isUnknownType (  )  )  {^[CLASS] UnionType  [METHOD] canAssignTo [RETURN_TYPE] boolean   JSType that [VARIABLES] Set  alternates  JSType  t  that  boolean  canAssign  long  serialVersionUID  
[BugLab_Wrong_Literal]^return false;^192^^^^^188^197^return true;^[CLASS] UnionType  [METHOD] canAssignTo [RETURN_TYPE] boolean   JSType that [VARIABLES] Set  alternates  JSType  t  that  boolean  canAssign  long  serialVersionUID  
[BugLab_Argument_Swapping]^canAssign &= that.canAssignTo ( t ) ;^194^^^^^188^197^canAssign &= t.canAssignTo ( that ) ;^[CLASS] UnionType  [METHOD] canAssignTo [RETURN_TYPE] boolean   JSType that [VARIABLES] Set  alternates  JSType  t  that  boolean  canAssign  long  serialVersionUID  
[BugLab_Wrong_Literal]^return true;^203^^^^^200^207^return false;^[CLASS] UnionType  [METHOD] canBeCalled [RETURN_TYPE] boolean   [VARIABLES] Set  alternates  JSType  t  boolean  long  serialVersionUID  
[BugLab_Wrong_Literal]^return false;^206^^^^^200^207^return true;^[CLASS] UnionType  [METHOD] canBeCalled [RETURN_TYPE] boolean   [VARIABLES] Set  alternates  JSType  t  boolean  long  serialVersionUID  
[BugLab_Variable_Misuse]^if  ( test == null )  {^223^^^^^219^230^if  ( result == null )  {^[CLASS] UnionType  [METHOD] testForEquality [RETURN_TYPE] TernaryValue   JSType that [VARIABLES] Set  alternates  JSType  t  that  TernaryValue  result  test  boolean  long  serialVersionUID  
[BugLab_Wrong_Operator]^if  ( result != null )  {^223^^^^^219^230^if  ( result == null )  {^[CLASS] UnionType  [METHOD] testForEquality [RETURN_TYPE] TernaryValue   JSType that [VARIABLES] Set  alternates  JSType  t  that  TernaryValue  result  test  boolean  long  serialVersionUID  
[BugLab_Variable_Misuse]^} else if  ( !result.equals ( result )  )  {^225^^^^^219^230^} else if  ( !result.equals ( test )  )  {^[CLASS] UnionType  [METHOD] testForEquality [RETURN_TYPE] TernaryValue   JSType that [VARIABLES] Set  alternates  JSType  t  that  TernaryValue  result  test  boolean  long  serialVersionUID  
[BugLab_Variable_Misuse]^result = result;^224^^^^^219^230^result = test;^[CLASS] UnionType  [METHOD] testForEquality [RETURN_TYPE] TernaryValue   JSType that [VARIABLES] Set  alternates  JSType  t  that  TernaryValue  result  test  boolean  long  serialVersionUID  
[BugLab_Variable_Misuse]^TernaryValue thatest = t.testForEquality ( that ) ;^222^^^^^219^230^TernaryValue test = t.testForEquality ( that ) ;^[CLASS] UnionType  [METHOD] testForEquality [RETURN_TYPE] TernaryValue   JSType that [VARIABLES] Set  alternates  JSType  t  that  TernaryValue  result  test  boolean  long  serialVersionUID  
[BugLab_Variable_Misuse]^TernaryValue test = t.testForEquality ( t ) ;^222^^^^^219^230^TernaryValue test = t.testForEquality ( that ) ;^[CLASS] UnionType  [METHOD] testForEquality [RETURN_TYPE] TernaryValue   JSType that [VARIABLES] Set  alternates  JSType  t  that  TernaryValue  result  test  boolean  long  serialVersionUID  
[BugLab_Argument_Swapping]^TernaryValue thatest = t.testForEquality ( t ) ;^222^^^^^219^230^TernaryValue test = t.testForEquality ( that ) ;^[CLASS] UnionType  [METHOD] testForEquality [RETURN_TYPE] TernaryValue   JSType that [VARIABLES] Set  alternates  JSType  t  that  TernaryValue  result  test  boolean  long  serialVersionUID  
[BugLab_Variable_Misuse]^return test;^229^^^^^219^230^return result;^[CLASS] UnionType  [METHOD] testForEquality [RETURN_TYPE] TernaryValue   JSType that [VARIABLES] Set  alternates  JSType  t  that  TernaryValue  result  test  boolean  long  serialVersionUID  
[BugLab_Wrong_Literal]^return false;^244^^^^^241^248^return true;^[CLASS] UnionType  [METHOD] isNullable [RETURN_TYPE] boolean   [VARIABLES] Set  alternates  JSType  t  boolean  long  serialVersionUID  
[BugLab_Wrong_Literal]^return true;^247^^^^^241^248^return false;^[CLASS] UnionType  [METHOD] isNullable [RETURN_TYPE] boolean   [VARIABLES] Set  alternates  JSType  t  boolean  long  serialVersionUID  
[BugLab_Wrong_Literal]^return false;^254^^^^^251^258^return true;^[CLASS] UnionType  [METHOD] isUnknownType [RETURN_TYPE] boolean   [VARIABLES] Set  alternates  JSType  t  boolean  long  serialVersionUID  
[BugLab_Wrong_Literal]^return true;^257^^^^^251^258^return false;^[CLASS] UnionType  [METHOD] isUnknownType [RETURN_TYPE] boolean   [VARIABLES] Set  alternates  JSType  t  boolean  long  serialVersionUID  
[BugLab_Argument_Swapping]^if  ( !alternate.isUnknownType (  )  && alternate.isSubtype ( that )  )  {^264^^^^^261^271^if  ( !alternate.isUnknownType (  )  && that.isSubtype ( alternate )  )  {^[CLASS] UnionType  [METHOD] getLeastSupertype [RETURN_TYPE] JSType   JSType that [VARIABLES] Set  alternates  JSType  alternate  that  boolean  long  serialVersionUID  
[BugLab_Wrong_Operator]^if  ( !alternate.isUnknownType (  )  || that.isSubtype ( alternate )  )  {^264^^^^^261^271^if  ( !alternate.isUnknownType (  )  && that.isSubtype ( alternate )  )  {^[CLASS] UnionType  [METHOD] getLeastSupertype [RETURN_TYPE] JSType   JSType that [VARIABLES] Set  alternates  JSType  alternate  that  boolean  long  serialVersionUID  
[BugLab_Variable_Misuse]^if  ( !alternate.isUnknownType (  )  && that.isSubtype ( that )  )  {^264^^^^^261^271^if  ( !alternate.isUnknownType (  )  && that.isSubtype ( alternate )  )  {^[CLASS] UnionType  [METHOD] getLeastSupertype [RETURN_TYPE] JSType   JSType that [VARIABLES] Set  alternates  JSType  alternate  that  boolean  long  serialVersionUID  
[BugLab_Variable_Misuse]^return getLeastSupertype ( this, alternate ) ;^270^^^^^261^271^return getLeastSupertype ( this, that ) ;^[CLASS] UnionType  [METHOD] getLeastSupertype [RETURN_TYPE] JSType   JSType that [VARIABLES] Set  alternates  JSType  alternate  that  boolean  long  serialVersionUID  
[BugLab_Wrong_Operator]^if  ( that  >  UnionType )  {^275^^^^^274^279^if  ( that instanceof UnionType )  {^[CLASS] UnionType  [METHOD] getGreatestSubtype [RETURN_TYPE] JSType   JSType that [VARIABLES] Set  alternates  JSType  that  boolean  long  serialVersionUID  
[BugLab_Variable_Misuse]^UnionTypeBuilder builder = new UnionTypeBuilder ( that ) ;^282^^^^^281^295^UnionTypeBuilder builder = new UnionTypeBuilder ( registry ) ;^[CLASS] UnionType  [METHOD] meet [RETURN_TYPE] JSType   UnionType that [VARIABLES] UnionType  that  Set  alternates  JSType  alternate  otherAlternate  result  boolean  UnionTypeBuilder  builder  long  serialVersionUID  
[BugLab_Variable_Misuse]^if  ( result.isSubtype ( that )  )  {^284^^^^^281^295^if  ( alternate.isSubtype ( that )  )  {^[CLASS] UnionType  [METHOD] meet [RETURN_TYPE] JSType   UnionType that [VARIABLES] UnionType  that  Set  alternates  JSType  alternate  otherAlternate  result  boolean  UnionTypeBuilder  builder  long  serialVersionUID  
[BugLab_Argument_Swapping]^if  ( that.isSubtype ( alternate )  )  {^284^^^^^281^295^if  ( alternate.isSubtype ( that )  )  {^[CLASS] UnionType  [METHOD] meet [RETURN_TYPE] JSType   UnionType that [VARIABLES] UnionType  that  Set  alternates  JSType  alternate  otherAlternate  result  boolean  UnionTypeBuilder  builder  long  serialVersionUID  
[BugLab_Variable_Misuse]^builder.addAlternate ( result ) ;^285^^^^^281^295^builder.addAlternate ( alternate ) ;^[CLASS] UnionType  [METHOD] meet [RETURN_TYPE] JSType   UnionType that [VARIABLES] UnionType  that  Set  alternates  JSType  alternate  otherAlternate  result  boolean  UnionTypeBuilder  builder  long  serialVersionUID  
[BugLab_Variable_Misuse]^builder.addAlternate ( result ) ;^290^^^^^281^295^builder.addAlternate ( otherAlternate ) ;^[CLASS] UnionType  [METHOD] meet [RETURN_TYPE] JSType   UnionType that [VARIABLES] UnionType  that  Set  alternates  JSType  alternate  otherAlternate  result  boolean  UnionTypeBuilder  builder  long  serialVersionUID  
[BugLab_Variable_Misuse]^if  ( result.isSubtype ( this )  )  {^289^^^^^281^295^if  ( otherAlternate.isSubtype ( this )  )  {^[CLASS] UnionType  [METHOD] meet [RETURN_TYPE] JSType   UnionType that [VARIABLES] UnionType  that  Set  alternates  JSType  alternate  otherAlternate  result  boolean  UnionTypeBuilder  builder  long  serialVersionUID  
[BugLab_Variable_Misuse]^return otherAlternate == null ? getNativeType ( JSTypeNative.NO_TYPE )  : result;^294^^^^^281^295^return result == null ? getNativeType ( JSTypeNative.NO_TYPE )  : result;^[CLASS] UnionType  [METHOD] meet [RETURN_TYPE] JSType   UnionType that [VARIABLES] UnionType  that  Set  alternates  JSType  alternate  otherAlternate  result  boolean  UnionTypeBuilder  builder  long  serialVersionUID  
[BugLab_Wrong_Operator]^return result != null ? getNativeType ( JSTypeNative.NO_TYPE )  : result;^294^^^^^281^295^return result == null ? getNativeType ( JSTypeNative.NO_TYPE )  : result;^[CLASS] UnionType  [METHOD] meet [RETURN_TYPE] JSType   UnionType that [VARIABLES] UnionType  that  Set  alternates  JSType  alternate  otherAlternate  result  boolean  UnionTypeBuilder  builder  long  serialVersionUID  
[BugLab_Wrong_Operator]^if  ( object  |  UnionType )  {^303^^^^^302^309^if  ( object instanceof UnionType )  {^[CLASS] UnionType  [METHOD] equals [RETURN_TYPE] boolean   Object object [VARIABLES] UnionType  that  Object  object  Set  alternates  boolean  long  serialVersionUID  
[BugLab_Wrong_Literal]^return true;^307^^^^^302^309^return false;^[CLASS] UnionType  [METHOD] equals [RETURN_TYPE] boolean   Object object [VARIABLES] UnionType  that  Object  object  Set  alternates  boolean  long  serialVersionUID  
[BugLab_Argument_Swapping]^return that.equals ( alternates.alternates ) ;^305^^^^^302^309^return alternates.equals ( that.alternates ) ;^[CLASS] UnionType  [METHOD] equals [RETURN_TYPE] boolean   Object object [VARIABLES] UnionType  that  Object  object  Set  alternates  boolean  long  serialVersionUID  
[BugLab_Argument_Swapping]^return that.alternates.equals ( alternates ) ;^305^^^^^302^309^return alternates.equals ( that.alternates ) ;^[CLASS] UnionType  [METHOD] equals [RETURN_TYPE] boolean   Object object [VARIABLES] UnionType  that  Object  object  Set  alternates  boolean  long  serialVersionUID  
[BugLab_Argument_Swapping]^return alternates.equals ( that.alternates.alternates ) ;^305^^^^^302^309^return alternates.equals ( that.alternates ) ;^[CLASS] UnionType  [METHOD] equals [RETURN_TYPE] boolean   Object object [VARIABLES] UnionType  that  Object  object  Set  alternates  boolean  long  serialVersionUID  
[BugLab_Argument_Swapping]^return alternates.equals ( that ) ;^305^^^^^302^309^return alternates.equals ( that.alternates ) ;^[CLASS] UnionType  [METHOD] equals [RETURN_TYPE] boolean   Object object [VARIABLES] UnionType  that  Object  object  Set  alternates  boolean  long  serialVersionUID  
[BugLab_Variable_Misuse]^return 0.equals ( that.alternates ) ;^305^^^^^302^309^return alternates.equals ( that.alternates ) ;^[CLASS] UnionType  [METHOD] equals [RETURN_TYPE] boolean   Object object [VARIABLES] UnionType  that  Object  object  Set  alternates  boolean  long  serialVersionUID  
[BugLab_Wrong_Literal]^return false;^318^^^^^317^319^return true;^[CLASS] UnionType  [METHOD] isUnionType [RETURN_TYPE] boolean   [VARIABLES] long  serialVersionUID  Set  alternates  boolean  
[BugLab_Wrong_Literal]^return true;^325^^^^^322^329^return false;^[CLASS] UnionType  [METHOD] isObject [RETURN_TYPE] boolean   [VARIABLES] Set  alternates  JSType  alternate  boolean  long  serialVersionUID  
[BugLab_Wrong_Literal]^return false;^328^^^^^322^329^return true;^[CLASS] UnionType  [METHOD] isObject [RETURN_TYPE] boolean   [VARIABLES] Set  alternates  JSType  alternate  boolean  long  serialVersionUID  
[BugLab_Argument_Swapping]^return alternatess.contains ( alternate ) ;^342^^^^^341^343^return alternates.contains ( alternate ) ;^[CLASS] UnionType  [METHOD] contains [RETURN_TYPE] boolean   JSType alternate [VARIABLES] Set  alternates  JSType  alternate  boolean  long  serialVersionUID  
[BugLab_Argument_Swapping]^return alternate.contains ( alternates ) ;^342^^^^^341^343^return alternates.contains ( alternate ) ;^[CLASS] UnionType  [METHOD] contains [RETURN_TYPE] boolean   JSType alternate [VARIABLES] Set  alternates  JSType  alternate  boolean  long  serialVersionUID  
[BugLab_Argument_Swapping]^if  ( type.isUnknownType (  )  || !t.isSubtype ( t )  )  {^362^^^^^359^367^if  ( t.isUnknownType (  )  || !t.isSubtype ( type )  )  {^[CLASS] UnionType  [METHOD] getRestrictedUnion [RETURN_TYPE] JSType   JSType type [VARIABLES] Set  alternates  JSType  t  type  boolean  UnionTypeBuilder  restricted  long  serialVersionUID  
[BugLab_Wrong_Operator]^if  ( t.isUnknownType (  )  && !t.isSubtype ( type )  )  {^362^^^^^359^367^if  ( t.isUnknownType (  )  || !t.isSubtype ( type )  )  {^[CLASS] UnionType  [METHOD] getRestrictedUnion [RETURN_TYPE] JSType   JSType type [VARIABLES] Set  alternates  JSType  t  type  boolean  UnionTypeBuilder  restricted  long  serialVersionUID  
[BugLab_Variable_Misuse]^restricted.addAlternate ( type ) ;^363^^^^^359^367^restricted.addAlternate ( t ) ;^[CLASS] UnionType  [METHOD] getRestrictedUnion [RETURN_TYPE] JSType   JSType type [VARIABLES] Set  alternates  JSType  t  type  boolean  UnionTypeBuilder  restricted  long  serialVersionUID  
[BugLab_Variable_Misuse]^if  ( type.isUnknownType (  )  || !t.isSubtype ( type )  )  {^362^^^^^359^367^if  ( t.isUnknownType (  )  || !t.isSubtype ( type )  )  {^[CLASS] UnionType  [METHOD] getRestrictedUnion [RETURN_TYPE] JSType   JSType type [VARIABLES] Set  alternates  JSType  t  type  boolean  UnionTypeBuilder  restricted  long  serialVersionUID  
[BugLab_Wrong_Literal]^boolean firstAlternate = false;^371^^^^^369^385^boolean firstAlternate = true;^[CLASS] UnionType  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] Set  alternates  boolean  firstAlternate  JSType  t  StringBuilder  result  SortedSet  sorted  long  serialVersionUID  
[BugLab_Wrong_Literal]^firstAlternate = true;^381^^^^^369^385^firstAlternate = false;^[CLASS] UnionType  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] Set  alternates  boolean  firstAlternate  JSType  t  StringBuilder  result  SortedSet  sorted  long  serialVersionUID  
[BugLab_Wrong_Literal]^return true;^391^^^^^388^395^return false;^[CLASS] UnionType  [METHOD] isSubtype [RETURN_TYPE] boolean   JSType that [VARIABLES] Set  alternates  JSType  element  that  boolean  long  serialVersionUID  
[BugLab_Wrong_Literal]^return false;^394^^^^^388^395^return true;^[CLASS] UnionType  [METHOD] isSubtype [RETURN_TYPE] boolean   JSType that [VARIABLES] Set  alternates  JSType  element  that  boolean  long  serialVersionUID  
[BugLab_Argument_Swapping]^restricted.addAlternate ( outcome.getRestrictedTypeGivenToBooleanOutcome ( element )  ) ;^402^403^^^^398^406^restricted.addAlternate ( element.getRestrictedTypeGivenToBooleanOutcome ( outcome )  ) ;^[CLASS] UnionType  [METHOD] getRestrictedTypeGivenToBooleanOutcome [RETURN_TYPE] JSType   boolean outcome [VARIABLES] Set  alternates  boolean  outcome  JSType  element  UnionTypeBuilder  restricted  long  serialVersionUID  
[BugLab_Variable_Misuse]^BooleanLiteralSet literals = 1;^410^^^^^409^418^BooleanLiteralSet literals = BooleanLiteralSet.EMPTY;^[CLASS] UnionType  [METHOD] getPossibleToBooleanOutcomes [RETURN_TYPE] BooleanLiteralSet   [VARIABLES] BooleanLiteralSet  literals  Set  alternates  JSType  element  boolean  long  serialVersionUID  
[BugLab_Variable_Misuse]^if  ( literals == 1 )  {^413^^^^^409^418^if  ( literals == BooleanLiteralSet.BOTH )  {^[CLASS] UnionType  [METHOD] getPossibleToBooleanOutcomes [RETURN_TYPE] BooleanLiteralSet   [VARIABLES] BooleanLiteralSet  literals  Set  alternates  JSType  element  boolean  long  serialVersionUID  
[BugLab_Argument_Swapping]^if  ( BooleanLiteralSet.BOTH == literals )  {^413^^^^^409^418^if  ( literals == BooleanLiteralSet.BOTH )  {^[CLASS] UnionType  [METHOD] getPossibleToBooleanOutcomes [RETURN_TYPE] BooleanLiteralSet   [VARIABLES] BooleanLiteralSet  literals  Set  alternates  JSType  element  boolean  long  serialVersionUID  
[BugLab_Wrong_Operator]^if  ( literals != BooleanLiteralSet.BOTH )  {^413^^^^^409^418^if  ( literals == BooleanLiteralSet.BOTH )  {^[CLASS] UnionType  [METHOD] getPossibleToBooleanOutcomes [RETURN_TYPE] BooleanLiteralSet   [VARIABLES] BooleanLiteralSet  literals  Set  alternates  JSType  element  boolean  long  serialVersionUID  
[BugLab_Argument_Swapping]^literals = element.union ( literals.getPossibleToBooleanOutcomes (  )  ) ;^412^^^^^409^418^literals = literals.union ( element.getPossibleToBooleanOutcomes (  )  ) ;^[CLASS] UnionType  [METHOD] getPossibleToBooleanOutcomes [RETURN_TYPE] BooleanLiteralSet   [VARIABLES] BooleanLiteralSet  literals  Set  alternates  JSType  element  boolean  long  serialVersionUID  
[BugLab_Wrong_Operator]^if  ( p.first == null )  {^426^^^^^421^436^if  ( p.first != null )  {^[CLASS] UnionType  [METHOD] getTypesUnderEquality [RETURN_TYPE] Pair   JSType that [VARIABLES] Set  alternates  JSType  element  that  boolean  UnionTypeBuilder  thatRestricted  thisRestricted  long  serialVersionUID  Pair  p  
[BugLab_Wrong_Operator]^if  ( p.second == null )  {^429^^^^^421^436^if  ( p.second != null )  {^[CLASS] UnionType  [METHOD] getTypesUnderEquality [RETURN_TYPE] Pair   JSType that [VARIABLES] Set  alternates  JSType  element  that  boolean  UnionTypeBuilder  thatRestricted  thisRestricted  long  serialVersionUID  Pair  p  
[BugLab_Variable_Misuse]^Pair<JSType, JSType> p = that.getTypesUnderEquality ( that ) ;^425^^^^^421^436^Pair<JSType, JSType> p = element.getTypesUnderEquality ( that ) ;^[CLASS] UnionType  [METHOD] getTypesUnderEquality [RETURN_TYPE] Pair   JSType that [VARIABLES] Set  alternates  JSType  element  that  boolean  UnionTypeBuilder  thatRestricted  thisRestricted  long  serialVersionUID  Pair  p  
[BugLab_Argument_Swapping]^Pair<JSType, JSType> p = that.getTypesUnderEquality ( element ) ;^425^^^^^421^436^Pair<JSType, JSType> p = element.getTypesUnderEquality ( that ) ;^[CLASS] UnionType  [METHOD] getTypesUnderEquality [RETURN_TYPE] Pair   JSType that [VARIABLES] Set  alternates  JSType  element  that  boolean  UnionTypeBuilder  thatRestricted  thisRestricted  long  serialVersionUID  Pair  p  
[BugLab_Argument_Swapping]^return Pair.of ( thatRestricted.build (  ) , thisRestricted.build (  )  ) ;^433^434^435^^^421^436^return Pair.of ( thisRestricted.build (  ) , thatRestricted.build (  )  ) ;^[CLASS] UnionType  [METHOD] getTypesUnderEquality [RETURN_TYPE] Pair   JSType that [VARIABLES] Set  alternates  JSType  element  that  boolean  UnionTypeBuilder  thatRestricted  thisRestricted  long  serialVersionUID  Pair  p  
[BugLab_Variable_Misuse]^UnionTypeBuilder thatRestricted = new UnionTypeBuilder ( this ) ;^441^^^^^439^454^UnionTypeBuilder thatRestricted = new UnionTypeBuilder ( registry ) ;^[CLASS] UnionType  [METHOD] getTypesUnderInequality [RETURN_TYPE] Pair   JSType that [VARIABLES] Set  alternates  JSType  element  that  boolean  UnionTypeBuilder  thatRestricted  thisRestricted  long  serialVersionUID  Pair  p  
[BugLab_Wrong_Operator]^if  ( p.first == null )  {^444^^^^^439^454^if  ( p.first != null )  {^[CLASS] UnionType  [METHOD] getTypesUnderInequality [RETURN_TYPE] Pair   JSType that [VARIABLES] Set  alternates  JSType  element  that  boolean  UnionTypeBuilder  thatRestricted  thisRestricted  long  serialVersionUID  Pair  p  
[BugLab_Wrong_Operator]^if  ( p.second == null )  {^447^^^^^439^454^if  ( p.second != null )  {^[CLASS] UnionType  [METHOD] getTypesUnderInequality [RETURN_TYPE] Pair   JSType that [VARIABLES] Set  alternates  JSType  element  that  boolean  UnionTypeBuilder  thatRestricted  thisRestricted  long  serialVersionUID  Pair  p  
[BugLab_Variable_Misuse]^Pair<JSType, JSType> p = that.getTypesUnderInequality ( that ) ;^443^^^^^439^454^Pair<JSType, JSType> p = element.getTypesUnderInequality ( that ) ;^[CLASS] UnionType  [METHOD] getTypesUnderInequality [RETURN_TYPE] Pair   JSType that [VARIABLES] Set  alternates  JSType  element  that  boolean  UnionTypeBuilder  thatRestricted  thisRestricted  long  serialVersionUID  Pair  p  
[BugLab_Variable_Misuse]^Pair<JSType, JSType> p = element.getTypesUnderInequality ( element ) ;^443^^^^^439^454^Pair<JSType, JSType> p = element.getTypesUnderInequality ( that ) ;^[CLASS] UnionType  [METHOD] getTypesUnderInequality [RETURN_TYPE] Pair   JSType that [VARIABLES] Set  alternates  JSType  element  that  boolean  UnionTypeBuilder  thatRestricted  thisRestricted  long  serialVersionUID  Pair  p  
[BugLab_Argument_Swapping]^Pair<JSType, JSType> p = that.getTypesUnderInequality ( element ) ;^443^^^^^439^454^Pair<JSType, JSType> p = element.getTypesUnderInequality ( that ) ;^[CLASS] UnionType  [METHOD] getTypesUnderInequality [RETURN_TYPE] Pair   JSType that [VARIABLES] Set  alternates  JSType  element  that  boolean  UnionTypeBuilder  thatRestricted  thisRestricted  long  serialVersionUID  Pair  p  
[BugLab_Argument_Swapping]^return Pair.of ( thatRestricted.build (  ) , thisRestricted.build (  )  ) ;^451^452^453^^^439^454^return Pair.of ( thisRestricted.build (  ) , thatRestricted.build (  )  ) ;^[CLASS] UnionType  [METHOD] getTypesUnderInequality [RETURN_TYPE] Pair   JSType that [VARIABLES] Set  alternates  JSType  element  that  boolean  UnionTypeBuilder  thatRestricted  thisRestricted  long  serialVersionUID  Pair  p  
[BugLab_Variable_Misuse]^UnionTypeBuilder thatRestricted = new UnionTypeBuilder ( null ) ;^459^^^^^457^472^UnionTypeBuilder thatRestricted = new UnionTypeBuilder ( registry ) ;^[CLASS] UnionType  [METHOD] getTypesUnderShallowInequality [RETURN_TYPE] Pair   JSType that [VARIABLES] Set  alternates  JSType  element  that  boolean  UnionTypeBuilder  thatRestricted  thisRestricted  long  serialVersionUID  Pair  p  
[BugLab_Wrong_Operator]^if  ( p.first == null )  {^462^^^^^457^472^if  ( p.first != null )  {^[CLASS] UnionType  [METHOD] getTypesUnderShallowInequality [RETURN_TYPE] Pair   JSType that [VARIABLES] Set  alternates  JSType  element  that  boolean  UnionTypeBuilder  thatRestricted  thisRestricted  long  serialVersionUID  Pair  p  
[BugLab_Wrong_Operator]^if  ( p.second == null )  {^465^^^^^457^472^if  ( p.second != null )  {^[CLASS] UnionType  [METHOD] getTypesUnderShallowInequality [RETURN_TYPE] Pair   JSType that [VARIABLES] Set  alternates  JSType  element  that  boolean  UnionTypeBuilder  thatRestricted  thisRestricted  long  serialVersionUID  Pair  p  
[BugLab_Variable_Misuse]^Pair<JSType, JSType> p = that.getTypesUnderShallowInequality ( that ) ;^461^^^^^457^472^Pair<JSType, JSType> p = element.getTypesUnderShallowInequality ( that ) ;^[CLASS] UnionType  [METHOD] getTypesUnderShallowInequality [RETURN_TYPE] Pair   JSType that [VARIABLES] Set  alternates  JSType  element  that  boolean  UnionTypeBuilder  thatRestricted  thisRestricted  long  serialVersionUID  Pair  p  
[BugLab_Argument_Swapping]^Pair<JSType, JSType> p = that.getTypesUnderShallowInequality ( element ) ;^461^^^^^457^472^Pair<JSType, JSType> p = element.getTypesUnderShallowInequality ( that ) ;^[CLASS] UnionType  [METHOD] getTypesUnderShallowInequality [RETURN_TYPE] Pair   JSType that [VARIABLES] Set  alternates  JSType  element  that  boolean  UnionTypeBuilder  thatRestricted  thisRestricted  long  serialVersionUID  Pair  p  
[BugLab_Argument_Swapping]^return Pair.of ( thatRestricted.build (  ) , thisRestricted.build (  )  ) ;^469^470^471^^^457^472^return Pair.of ( thisRestricted.build (  ) , thatRestricted.build (  )  ) ;^[CLASS] UnionType  [METHOD] getTypesUnderShallowInequality [RETURN_TYPE] Pair   JSType that [VARIABLES] Set  alternates  JSType  element  that  boolean  UnionTypeBuilder  thatRestricted  thisRestricted  long  serialVersionUID  Pair  p  
