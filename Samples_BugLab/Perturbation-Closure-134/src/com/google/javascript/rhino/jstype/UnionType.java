[buglab_swap_variables]^propertyType = altPropertyType.getLeastSupertype ( propertyType ) ;^180^^^^^163^185^propertyType = propertyType.getLeastSupertype ( altPropertyType ) ;^[CLASS] UnionType  [METHOD] findPropertyType [RETURN_TYPE] JSType   String propertyName [VARIABLES] Set  alternates  String  propertyName  JSType  altPropertyType  alternate  propertyType  boolean  long  serialVersionUID  
[buglab_swap_variables]^JSType altPropertyType = propertyName.findPropertyType ( alternate ) ;^172^^^^^163^185^JSType altPropertyType = alternate.findPropertyType ( propertyName ) ;^[CLASS] UnionType  [METHOD] findPropertyType [RETURN_TYPE] JSType   String propertyName [VARIABLES] Set  alternates  String  propertyName  JSType  altPropertyType  alternate  propertyType  boolean  long  serialVersionUID  
[buglab_swap_variables]^canAssign &= that.canAssignTo ( t ) ;^194^^^^^188^197^canAssign &= t.canAssignTo ( that ) ;^[CLASS] UnionType  [METHOD] canAssignTo [RETURN_TYPE] boolean   JSType that [VARIABLES] Set  alternates  JSType  t  that  boolean  canAssign  long  serialVersionUID  
[buglab_swap_variables]^TernaryValue thatest = t.testForEquality ( t ) ;^222^^^^^219^230^TernaryValue test = t.testForEquality ( that ) ;^[CLASS] UnionType  [METHOD] testForEquality [RETURN_TYPE] TernaryValue   JSType that [VARIABLES] Set  alternates  JSType  t  that  TernaryValue  result  test  boolean  long  serialVersionUID  
[buglab_swap_variables]^if  ( !alternate.isUnknownType (  )  && alternate.isSubtype ( that )  )  {^264^^^^^261^271^if  ( !alternate.isUnknownType (  )  && that.isSubtype ( alternate )  )  {^[CLASS] UnionType  [METHOD] getLeastSupertype [RETURN_TYPE] JSType   JSType that [VARIABLES] Set  alternates  JSType  alternate  that  boolean  long  serialVersionUID  
[buglab_swap_variables]^if  ( that.isSubtype ( alternate )  )  {^284^^^^^281^295^if  ( alternate.isSubtype ( that )  )  {^[CLASS] UnionType  [METHOD] meet [RETURN_TYPE] JSType   UnionType that [VARIABLES] UnionType  that  Set  alternates  JSType  alternate  otherAlternate  result  boolean  UnionTypeBuilder  builder  long  serialVersionUID  
[buglab_swap_variables]^return alternates.equals ( that.alternates.alternates ) ;^305^^^^^302^309^return alternates.equals ( that.alternates ) ;^[CLASS] UnionType  [METHOD] equals [RETURN_TYPE] boolean   Object object [VARIABLES] UnionType  that  Object  object  Set  alternates  boolean  long  serialVersionUID  
[buglab_swap_variables]^return that.equals ( alternates.alternates ) ;^305^^^^^302^309^return alternates.equals ( that.alternates ) ;^[CLASS] UnionType  [METHOD] equals [RETURN_TYPE] boolean   Object object [VARIABLES] UnionType  that  Object  object  Set  alternates  boolean  long  serialVersionUID  
[buglab_swap_variables]^return alternates.equals ( that ) ;^305^^^^^302^309^return alternates.equals ( that.alternates ) ;^[CLASS] UnionType  [METHOD] equals [RETURN_TYPE] boolean   Object object [VARIABLES] UnionType  that  Object  object  Set  alternates  boolean  long  serialVersionUID  
[buglab_swap_variables]^return that.alternates.equals ( alternates ) ;^305^^^^^302^309^return alternates.equals ( that.alternates ) ;^[CLASS] UnionType  [METHOD] equals [RETURN_TYPE] boolean   Object object [VARIABLES] UnionType  that  Object  object  Set  alternates  boolean  long  serialVersionUID  
[buglab_swap_variables]^return alternatess.contains ( alternate ) ;^342^^^^^341^343^return alternates.contains ( alternate ) ;^[CLASS] UnionType  [METHOD] contains [RETURN_TYPE] boolean   JSType alternate [VARIABLES] Set  alternates  JSType  alternate  boolean  long  serialVersionUID  
[buglab_swap_variables]^return alternate.contains ( alternates ) ;^342^^^^^341^343^return alternates.contains ( alternate ) ;^[CLASS] UnionType  [METHOD] contains [RETURN_TYPE] boolean   JSType alternate [VARIABLES] Set  alternates  JSType  alternate  boolean  long  serialVersionUID  
[buglab_swap_variables]^if  ( type.isUnknownType (  )  || !t.isSubtype ( t )  )  {^362^^^^^359^367^if  ( t.isUnknownType (  )  || !t.isSubtype ( type )  )  {^[CLASS] UnionType  [METHOD] getRestrictedUnion [RETURN_TYPE] JSType   JSType type [VARIABLES] Set  alternates  JSType  t  type  boolean  UnionTypeBuilder  restricted  long  serialVersionUID  
[buglab_swap_variables]^restricted.addAlternate ( outcome.getRestrictedTypeGivenToBooleanOutcome ( element )  ) ;^402^403^^^^398^406^restricted.addAlternate ( element.getRestrictedTypeGivenToBooleanOutcome ( outcome )  ) ;^[CLASS] UnionType  [METHOD] getRestrictedTypeGivenToBooleanOutcome [RETURN_TYPE] JSType   boolean outcome [VARIABLES] Set  alternates  boolean  outcome  JSType  element  UnionTypeBuilder  restricted  long  serialVersionUID  
[buglab_swap_variables]^if  ( BooleanLiteralSet.BOTH == literals )  {^413^^^^^409^418^if  ( literals == BooleanLiteralSet.BOTH )  {^[CLASS] UnionType  [METHOD] getPossibleToBooleanOutcomes [RETURN_TYPE] BooleanLiteralSet   [VARIABLES] BooleanLiteralSet  literals  Set  alternates  JSType  element  boolean  long  serialVersionUID  
[buglab_swap_variables]^literals = element.union ( literals.getPossibleToBooleanOutcomes (  )  ) ;^412^^^^^409^418^literals = literals.union ( element.getPossibleToBooleanOutcomes (  )  ) ;^[CLASS] UnionType  [METHOD] getPossibleToBooleanOutcomes [RETURN_TYPE] BooleanLiteralSet   [VARIABLES] BooleanLiteralSet  literals  Set  alternates  JSType  element  boolean  long  serialVersionUID  
[buglab_swap_variables]^Pair<JSType, JSType> p = that.getTypesUnderEquality ( element ) ;^425^^^^^421^436^Pair<JSType, JSType> p = element.getTypesUnderEquality ( that ) ;^[CLASS] UnionType  [METHOD] getTypesUnderEquality [RETURN_TYPE] Pair   JSType that [VARIABLES] Set  alternates  JSType  element  that  boolean  UnionTypeBuilder  thatRestricted  thisRestricted  long  serialVersionUID  Pair  p  
[buglab_swap_variables]^return Pair.of ( thatRestricted.build (  ) , thisRestricted.build (  )  ) ;^433^434^435^^^421^436^return Pair.of ( thisRestricted.build (  ) , thatRestricted.build (  )  ) ;^[CLASS] UnionType  [METHOD] getTypesUnderEquality [RETURN_TYPE] Pair   JSType that [VARIABLES] Set  alternates  JSType  element  that  boolean  UnionTypeBuilder  thatRestricted  thisRestricted  long  serialVersionUID  Pair  p  
[buglab_swap_variables]^return Pair.of ( thisRestricted.build (  ) .build (  )  ) ;^433^434^435^^^421^436^return Pair.of ( thisRestricted.build (  ) , thatRestricted.build (  )  ) ;^[CLASS] UnionType  [METHOD] getTypesUnderEquality [RETURN_TYPE] Pair   JSType that [VARIABLES] Set  alternates  JSType  element  that  boolean  UnionTypeBuilder  thatRestricted  thisRestricted  long  serialVersionUID  Pair  p  
[buglab_swap_variables]^Pair<JSType, JSType> p = that.getTypesUnderInequality ( element ) ;^443^^^^^439^454^Pair<JSType, JSType> p = element.getTypesUnderInequality ( that ) ;^[CLASS] UnionType  [METHOD] getTypesUnderInequality [RETURN_TYPE] Pair   JSType that [VARIABLES] Set  alternates  JSType  element  that  boolean  UnionTypeBuilder  thatRestricted  thisRestricted  long  serialVersionUID  Pair  p  
[buglab_swap_variables]^return Pair.of ( thatRestricted.build (  ) , thisRestricted.build (  )  ) ;^451^452^453^^^439^454^return Pair.of ( thisRestricted.build (  ) , thatRestricted.build (  )  ) ;^[CLASS] UnionType  [METHOD] getTypesUnderInequality [RETURN_TYPE] Pair   JSType that [VARIABLES] Set  alternates  JSType  element  that  boolean  UnionTypeBuilder  thatRestricted  thisRestricted  long  serialVersionUID  Pair  p  
[buglab_swap_variables]^return Pair.of ( thisRestricted.build (  ) .build (  )  ) ;^451^452^453^^^439^454^return Pair.of ( thisRestricted.build (  ) , thatRestricted.build (  )  ) ;^[CLASS] UnionType  [METHOD] getTypesUnderInequality [RETURN_TYPE] Pair   JSType that [VARIABLES] Set  alternates  JSType  element  that  boolean  UnionTypeBuilder  thatRestricted  thisRestricted  long  serialVersionUID  Pair  p  
[buglab_swap_variables]^Pair<JSType, JSType> p = that.getTypesUnderShallowInequality ( element ) ;^461^^^^^457^472^Pair<JSType, JSType> p = element.getTypesUnderShallowInequality ( that ) ;^[CLASS] UnionType  [METHOD] getTypesUnderShallowInequality [RETURN_TYPE] Pair   JSType that [VARIABLES] Set  alternates  JSType  element  that  boolean  UnionTypeBuilder  thatRestricted  thisRestricted  long  serialVersionUID  Pair  p  
[buglab_swap_variables]^return Pair.of ( thatRestricted.build (  ) , thisRestricted.build (  )  ) ;^469^470^471^^^457^472^return Pair.of ( thisRestricted.build (  ) , thatRestricted.build (  )  ) ;^[CLASS] UnionType  [METHOD] getTypesUnderShallowInequality [RETURN_TYPE] Pair   JSType that [VARIABLES] Set  alternates  JSType  element  that  boolean  UnionTypeBuilder  thatRestricted  thisRestricted  long  serialVersionUID  Pair  p  
[buglab_swap_variables]^return Pair.of ( thisRestricted.build (  ) .build (  )  ) ;^469^470^471^^^457^472^return Pair.of ( thisRestricted.build (  ) , thatRestricted.build (  )  ) ;^[CLASS] UnionType  [METHOD] getTypesUnderShallowInequality [RETURN_TYPE] Pair   JSType that [VARIABLES] Set  alternates  JSType  element  that  boolean  UnionTypeBuilder  thatRestricted  thisRestricted  long  serialVersionUID  Pair  p  
