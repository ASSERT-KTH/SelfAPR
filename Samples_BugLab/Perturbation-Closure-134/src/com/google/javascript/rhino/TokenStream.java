[buglab_swap_variables]^return this.string + " `" + name + "'";^104^^^^^95^113^return name + " `" + this.string + "'";^[CLASS] TokenStream  [METHOD] tokenToString [RETURN_TYPE] String   int token [VARIABLES] boolean  dirtyLine  hitEOF  xmlIsAttribute  xmlIsTagContent  double  number  Reader  sourceReader  int[]  ungetBuffer  String  name  regExpFlags  sourceString  string  ObjToIntMap  allStrings  int  EOF_CHAR  charno  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  char[]  sourceBuffer  stringBuffer  Parser  parser  
[buglab_swap_variables]^return s != Token.EOFtringToKeyword ( s ) ;^117^^^^^115^118^return Token.EOF != stringToKeyword ( s ) ;^[CLASS] TokenStream  [METHOD] isKeyword [RETURN_TYPE] boolean   String s [VARIABLES] boolean  dirtyLine  hitEOF  xmlIsAttribute  xmlIsTagContent  double  number  Reader  sourceReader  int[]  ungetBuffer  String  name  regExpFlags  s  sourceString  string  ObjToIntMap  allStrings  int  EOF_CHAR  charno  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  char[]  sourceBuffer  stringBuffer  Parser  parser  
[buglab_swap_variables]^if  ( s=='f' )  { if  ( c.charAt ( 0 ) =='i' )  {id=Id_if; break L0;} }^193^^^^^178^208^if  ( c=='f' )  { if  ( s.charAt ( 0 ) =='i' )  {id=Id_if; break L0;} }^[CLASS] TokenStream  [METHOD] stringToKeyword [RETURN_TYPE] int   String name [VARIABLES] boolean  dirtyLine  hitEOF  xmlIsAttribute  xmlIsTagContent  double  number  Reader  sourceReader  int[]  ungetBuffer  String  X  name  regExpFlags  s  sourceString  string  ObjToIntMap  allStrings  int  EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  char[]  sourceBuffer  stringBuffer  Parser  parser  
[buglab_swap_variables]^else if  ( s=='o' )  { if  ( c.charAt ( 0 ) =='d' )  {id=Id_do; break L0;} }^195^^^^^180^210^else if  ( c=='o' )  { if  ( s.charAt ( 0 ) =='d' )  {id=Id_do; break L0;} }^[CLASS] TokenStream  [METHOD] stringToKeyword [RETURN_TYPE] int   String name [VARIABLES] boolean  dirtyLine  hitEOF  xmlIsAttribute  xmlIsTagContent  double  number  Reader  sourceReader  int[]  ungetBuffer  String  X  name  regExpFlags  s  sourceString  string  ObjToIntMap  allStrings  int  EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  char[]  sourceBuffer  stringBuffer  Parser  parser  
[buglab_swap_variables]^if  ( s=='e' )  { if  ( c.charAt ( 2 ) =='s' && s.charAt ( 1 ) =='a' )  {^207^^^^^192^222^if  ( c=='e' )  { if  ( s.charAt ( 2 ) =='s' && s.charAt ( 1 ) =='a' )  {^[CLASS] TokenStream  [METHOD] stringToKeyword [RETURN_TYPE] int   String name [VARIABLES] boolean  dirtyLine  hitEOF  xmlIsAttribute  xmlIsTagContent  double  number  Reader  sourceReader  int[]  ungetBuffer  String  X  name  regExpFlags  s  sourceString  string  ObjToIntMap  allStrings  int  EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  char[]  sourceBuffer  stringBuffer  Parser  parser  
[buglab_swap_variables]^else if  ( s=='r' )  { if  ( c.charAt ( 2 ) =='a' && s.charAt ( 1 ) =='h' )  {^209^^^^^194^224^else if  ( c=='r' )  { if  ( s.charAt ( 2 ) =='a' && s.charAt ( 1 ) =='h' )  {^[CLASS] TokenStream  [METHOD] stringToKeyword [RETURN_TYPE] int   String name [VARIABLES] boolean  dirtyLine  hitEOF  xmlIsAttribute  xmlIsTagContent  double  number  Reader  sourceReader  int[]  ungetBuffer  String  X  name  regExpFlags  s  sourceString  string  ObjToIntMap  allStrings  int  EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  char[]  sourceBuffer  stringBuffer  Parser  parser  
[buglab_swap_variables]^else if  ( s=='m' )  { if  ( c.charAt ( 2 ) =='u' && s.charAt ( 1 ) =='n' )  {^215^^^^^200^230^else if  ( c=='m' )  { if  ( s.charAt ( 2 ) =='u' && s.charAt ( 1 ) =='n' )  {^[CLASS] TokenStream  [METHOD] stringToKeyword [RETURN_TYPE] int   String name [VARIABLES] boolean  dirtyLine  hitEOF  xmlIsAttribute  xmlIsTagContent  double  number  Reader  sourceReader  int[]  ungetBuffer  String  X  name  regExpFlags  s  sourceString  string  ObjToIntMap  allStrings  int  EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  char[]  sourceBuffer  stringBuffer  Parser  parser  
[buglab_swap_variables]^else if  ( s=='s' )  { if  ( c.charAt ( 2 ) =='i' && s.charAt ( 1 ) =='h' )  {^224^^^^^209^239^else if  ( c=='s' )  { if  ( s.charAt ( 2 ) =='i' && s.charAt ( 1 ) =='h' )  {^[CLASS] TokenStream  [METHOD] stringToKeyword [RETURN_TYPE] int   String name [VARIABLES] boolean  dirtyLine  hitEOF  xmlIsAttribute  xmlIsTagContent  double  number  Reader  sourceReader  int[]  ungetBuffer  String  X  name  regExpFlags  s  sourceString  string  ObjToIntMap  allStrings  int  EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  char[]  sourceBuffer  stringBuffer  Parser  parser  
[buglab_swap_variables]^if  ( s!=null && X!=s && !X.equals ( X )  )  id = 0;^288^^^^^273^303^if  ( X!=null && X!=s && !X.equals ( s )  )  id = 0;^[CLASS] TokenStream  [METHOD] stringToKeyword [RETURN_TYPE] int   String name [VARIABLES] boolean  dirtyLine  hitEOF  xmlIsAttribute  xmlIsTagContent  double  number  Reader  sourceReader  int[]  ungetBuffer  String  X  name  regExpFlags  s  sourceString  string  ObjToIntMap  allStrings  int  EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  char[]  sourceBuffer  stringBuffer  Parser  parser  
[buglab_swap_variables]^if  ( Token.EOF == 0 )  { return id; }^292^^^^^277^307^if  ( id == 0 )  { return Token.EOF; }^[CLASS] TokenStream  [METHOD] stringToKeyword [RETURN_TYPE] int   String name [VARIABLES] boolean  dirtyLine  hitEOF  xmlIsAttribute  xmlIsTagContent  double  number  Reader  sourceReader  int[]  ungetBuffer  String  X  name  regExpFlags  s  sourceString  string  ObjToIntMap  allStrings  int  EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  char[]  sourceBuffer  stringBuffer  Parser  parser  
[buglab_swap_variables]^if  ( s == 0 || !Character.isJavaIdentifierStart ( length.charAt ( 0 )  )  ) return false;^299^300^^^^296^321^if  ( length == 0 || !Character.isJavaIdentifierStart ( s.charAt ( 0 )  )  ) return false;^[CLASS] TokenStream  [METHOD] isJSIdentifier [RETURN_TYPE] boolean   String s [VARIABLES] boolean  dirtyLine  hitEOF  xmlIsAttribute  xmlIsTagContent  double  number  char  c  Reader  sourceReader  int[]  ungetBuffer  String  X  name  regExpFlags  s  sourceString  string  ObjToIntMap  allStrings  int  EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  char[]  sourceBuffer  stringBuffer  Parser  parser  
[buglab_swap_variables]^if  ( !  (  ( s + 5 )  < length ) &&  ( i.charAt ( i + 1 )  == 'u' ) && 0 <= Kit.xDigitToInt ( s.charAt ( i + 2 ) , 0 ) && 0 <= Kit.xDigitToInt ( s.charAt ( i + 3 ) , 0 )^306^307^308^309^^296^321^if  ( !  (  ( i + 5 )  < length ) &&  ( s.charAt ( i + 1 )  == 'u' ) && 0 <= Kit.xDigitToInt ( s.charAt ( i + 2 ) , 0 ) && 0 <= Kit.xDigitToInt ( s.charAt ( i + 3 ) , 0 )^[CLASS] TokenStream  [METHOD] isJSIdentifier [RETURN_TYPE] boolean   String s [VARIABLES] boolean  dirtyLine  hitEOF  xmlIsAttribute  xmlIsTagContent  double  number  char  c  Reader  sourceReader  int[]  ungetBuffer  String  X  name  regExpFlags  s  sourceString  string  ObjToIntMap  allStrings  int  EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  char[]  sourceBuffer  stringBuffer  Parser  parser  
[buglab_swap_variables]^if  ( !  (  ( length + 5 )  < i ) &&  ( s.charAt ( i + 1 )  == 'u' ) && 0 <= Kit.xDigitToInt ( s.charAt ( i + 2 ) , 0 ) && 0 <= Kit.xDigitToInt ( s.charAt ( i + 3 ) , 0 )^306^307^308^309^^296^321^if  ( !  (  ( i + 5 )  < length ) &&  ( s.charAt ( i + 1 )  == 'u' ) && 0 <= Kit.xDigitToInt ( s.charAt ( i + 2 ) , 0 ) && 0 <= Kit.xDigitToInt ( s.charAt ( i + 3 ) , 0 )^[CLASS] TokenStream  [METHOD] isJSIdentifier [RETURN_TYPE] boolean   String s [VARIABLES] boolean  dirtyLine  hitEOF  xmlIsAttribute  xmlIsTagContent  double  number  char  c  Reader  sourceReader  int[]  ungetBuffer  String  X  name  regExpFlags  s  sourceString  string  ObjToIntMap  allStrings  int  EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  char[]  sourceBuffer  stringBuffer  Parser  parser  
[buglab_swap_variables]^if  ( !  (  ( i + 5 )  < s ) &&  ( length.charAt ( i + 1 )  == 'u' ) && 0 <= Kit.xDigitToInt ( s.charAt ( i + 2 ) , 0 ) && 0 <= Kit.xDigitToInt ( s.charAt ( i + 3 ) , 0 )^306^307^308^309^^296^321^if  ( !  (  ( i + 5 )  < length ) &&  ( s.charAt ( i + 1 )  == 'u' ) && 0 <= Kit.xDigitToInt ( s.charAt ( i + 2 ) , 0 ) && 0 <= Kit.xDigitToInt ( s.charAt ( i + 3 ) , 0 )^[CLASS] TokenStream  [METHOD] isJSIdentifier [RETURN_TYPE] boolean   String s [VARIABLES] boolean  dirtyLine  hitEOF  xmlIsAttribute  xmlIsTagContent  double  number  char  c  Reader  sourceReader  int[]  ungetBuffer  String  X  name  regExpFlags  s  sourceString  string  ObjToIntMap  allStrings  int  EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  char[]  sourceBuffer  stringBuffer  Parser  parser  
[buglab_swap_variables]^&&  ( i.charAt ( s + 1 )  == 'u' ) && 0 <= Kit.xDigitToInt ( s.charAt ( i + 2 ) , 0 ) && 0 <= Kit.xDigitToInt ( s.charAt ( i + 3 ) , 0 ) && 0 <= Kit.xDigitToInt ( s.charAt ( i + 4 ) , 0 )^307^308^309^310^^296^321^&&  ( s.charAt ( i + 1 )  == 'u' ) && 0 <= Kit.xDigitToInt ( s.charAt ( i + 2 ) , 0 ) && 0 <= Kit.xDigitToInt ( s.charAt ( i + 3 ) , 0 ) && 0 <= Kit.xDigitToInt ( s.charAt ( i + 4 ) , 0 )^[CLASS] TokenStream  [METHOD] isJSIdentifier [RETURN_TYPE] boolean   String s [VARIABLES] boolean  dirtyLine  hitEOF  xmlIsAttribute  xmlIsTagContent  double  number  char  c  Reader  sourceReader  int[]  ungetBuffer  String  X  name  regExpFlags  s  sourceString  string  ObjToIntMap  allStrings  int  EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  char[]  sourceBuffer  stringBuffer  Parser  parser  
[buglab_swap_variables]^&& 0 <= Kit.xDigitToInt ( i.charAt ( s + 2 ) , 0 ) && 0 <= Kit.xDigitToInt ( s.charAt ( i + 3 ) , 0 ) && 0 <= Kit.xDigitToInt ( s.charAt ( i + 4 ) , 0 ) && 0 <= Kit.xDigitToInt ( s.charAt ( i + 5 ) , 0 )  )  {^308^309^310^311^^296^321^&& 0 <= Kit.xDigitToInt ( s.charAt ( i + 2 ) , 0 ) && 0 <= Kit.xDigitToInt ( s.charAt ( i + 3 ) , 0 ) && 0 <= Kit.xDigitToInt ( s.charAt ( i + 4 ) , 0 ) && 0 <= Kit.xDigitToInt ( s.charAt ( i + 5 ) , 0 )  )  {^[CLASS] TokenStream  [METHOD] isJSIdentifier [RETURN_TYPE] boolean   String s [VARIABLES] boolean  dirtyLine  hitEOF  xmlIsAttribute  xmlIsTagContent  double  number  char  c  Reader  sourceReader  int[]  ungetBuffer  String  X  name  regExpFlags  s  sourceString  string  ObjToIntMap  allStrings  int  EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  char[]  sourceBuffer  stringBuffer  Parser  parser  
[buglab_swap_variables]^&& 0 <= Kit.xDigitToInt ( i.charAt ( s + 3 ) , 0 ) && 0 <= Kit.xDigitToInt ( s.charAt ( i + 4 ) , 0 ) && 0 <= Kit.xDigitToInt ( s.charAt ( i + 5 ) , 0 )  )  {^309^310^311^^^296^321^&& 0 <= Kit.xDigitToInt ( s.charAt ( i + 3 ) , 0 ) && 0 <= Kit.xDigitToInt ( s.charAt ( i + 4 ) , 0 ) && 0 <= Kit.xDigitToInt ( s.charAt ( i + 5 ) , 0 )  )  {^[CLASS] TokenStream  [METHOD] isJSIdentifier [RETURN_TYPE] boolean   String s [VARIABLES] boolean  dirtyLine  hitEOF  xmlIsAttribute  xmlIsTagContent  double  number  char  c  Reader  sourceReader  int[]  ungetBuffer  String  X  name  regExpFlags  s  sourceString  string  ObjToIntMap  allStrings  int  EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  char[]  sourceBuffer  stringBuffer  Parser  parser  
[buglab_swap_variables]^&& 0 <= Kit.xDigitToInt ( i.charAt ( s + 4 ) , 0 ) && 0 <= Kit.xDigitToInt ( s.charAt ( i + 5 ) , 0 )  )  {^310^311^^^^296^321^&& 0 <= Kit.xDigitToInt ( s.charAt ( i + 4 ) , 0 ) && 0 <= Kit.xDigitToInt ( s.charAt ( i + 5 ) , 0 )  )  {^[CLASS] TokenStream  [METHOD] isJSIdentifier [RETURN_TYPE] boolean   String s [VARIABLES] boolean  dirtyLine  hitEOF  xmlIsAttribute  xmlIsTagContent  double  number  char  c  Reader  sourceReader  int[]  ungetBuffer  String  X  name  regExpFlags  s  sourceString  string  ObjToIntMap  allStrings  int  EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  char[]  sourceBuffer  stringBuffer  Parser  parser  
[buglab_swap_variables]^&& 0 <= Kit.xDigitToInt ( i.charAt ( s + 5 ) , 0 )  )  {^311^^^^^296^321^&& 0 <= Kit.xDigitToInt ( s.charAt ( i + 5 ) , 0 )  )  {^[CLASS] TokenStream  [METHOD] isJSIdentifier [RETURN_TYPE] boolean   String s [VARIABLES] boolean  dirtyLine  hitEOF  xmlIsAttribute  xmlIsTagContent  double  number  char  c  Reader  sourceReader  int[]  ungetBuffer  String  X  name  regExpFlags  s  sourceString  string  ObjToIntMap  allStrings  int  EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  char[]  sourceBuffer  stringBuffer  Parser  parser  
[buglab_swap_variables]^char c = i.charAt ( s ) ;^303^^^^^296^321^char c = s.charAt ( i ) ;^[CLASS] TokenStream  [METHOD] isJSIdentifier [RETURN_TYPE] boolean   String s [VARIABLES] boolean  dirtyLine  hitEOF  xmlIsAttribute  xmlIsTagContent  double  number  char  c  Reader  sourceReader  int[]  ungetBuffer  String  X  name  regExpFlags  s  sourceString  string  ObjToIntMap  allStrings  int  EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  char[]  sourceBuffer  stringBuffer  Parser  parser  
[buglab_swap_variables]^if  ( Token.EOF != this.pushbackToken )  {^338^^^^^323^353^if  ( this.pushbackToken != Token.EOF )  {^[CLASS] TokenStream  [METHOD] getToken [RETURN_TYPE] int   [VARIABLES] boolean  containsEscape  dirtyLine  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  xmlIsAttribute  xmlIsTagContent  double  dval  number  Reader  sourceReader  NumberFormatException  ex  int[]  ungetBuffer  String  X  name  numString  regExpFlags  s  sourceString  str  string  ObjToIntMap  allStrings  int  EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  char[]  sourceBuffer  stringBuffer  Parser  parser  
[buglab_swap_variables]^if  ( c == 8 && base >= '8' )  {^492^^^^^477^507^if  ( base == 8 && c >= '8' )  {^[CLASS] TokenStream  [METHOD] getToken [RETURN_TYPE] int   [VARIABLES] boolean  containsEscape  dirtyLine  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  xmlIsAttribute  xmlIsTagContent  double  dval  number  Reader  sourceReader  NumberFormatException  ex  int[]  ungetBuffer  String  X  name  numString  regExpFlags  s  sourceString  str  string  ObjToIntMap  allStrings  int  EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  char[]  sourceBuffer  stringBuffer  Parser  parser  
[buglab_swap_variables]^parser.addWarning ( "msg.bad.octal.literal" == '8' ? "8" : "9" ) ;^493^494^^^^478^508^parser.addWarning ( "msg.bad.octal.literal", c == '8' ? "8" : "9" ) ;^[CLASS] TokenStream  [METHOD] getToken [RETURN_TYPE] int   [VARIABLES] boolean  containsEscape  dirtyLine  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  xmlIsAttribute  xmlIsTagContent  double  dval  number  Reader  sourceReader  NumberFormatException  ex  int[]  ungetBuffer  String  X  name  numString  regExpFlags  s  sourceString  str  string  ObjToIntMap  allStrings  int  EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  char[]  sourceBuffer  stringBuffer  Parser  parser  
[buglab_swap_variables]^if  ( EOF_CHAR == '\n' || c == c )  {^562^^^^^547^577^if  ( c == '\n' || c == EOF_CHAR )  {^[CLASS] TokenStream  [METHOD] getToken [RETURN_TYPE] int   [VARIABLES] boolean  containsEscape  dirtyLine  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  xmlIsAttribute  xmlIsTagContent  double  dval  number  Reader  sourceReader  NumberFormatException  ex  int[]  ungetBuffer  String  X  name  numString  regExpFlags  s  sourceString  str  string  ObjToIntMap  allStrings  int  EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  char[]  sourceBuffer  stringBuffer  Parser  parser  
[buglab_swap_variables]^escapeVal = Kit.xDigitToInt ( escapeVal, c ) ;^615^^^^^609^624^escapeVal = Kit.xDigitToInt ( c, escapeVal ) ;^[CLASS] TokenStream  [METHOD] getToken [RETURN_TYPE] int   [VARIABLES] boolean  containsEscape  dirtyLine  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  xmlIsAttribute  xmlIsTagContent  double  dval  number  Reader  sourceReader  NumberFormatException  ex  int[]  ungetBuffer  String  X  name  numString  regExpFlags  s  sourceString  str  string  ObjToIntMap  allStrings  int  EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  char[]  sourceBuffer  stringBuffer  Parser  parser  
[buglab_swap_variables]^escapeVal = Kit.xDigitToInt (  escapeVal ) ;^615^^^^^609^624^escapeVal = Kit.xDigitToInt ( c, escapeVal ) ;^[CLASS] TokenStream  [METHOD] getToken [RETURN_TYPE] int   [VARIABLES] boolean  containsEscape  dirtyLine  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  xmlIsAttribute  xmlIsTagContent  double  dval  number  Reader  sourceReader  NumberFormatException  ex  int[]  ungetBuffer  String  X  name  numString  regExpFlags  s  sourceString  str  string  ObjToIntMap  allStrings  int  EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  char[]  sourceBuffer  stringBuffer  Parser  parser  
[buglab_swap_variables]^escapeVal = Kit.xDigitToInt ( c ) ;^615^^^^^609^624^escapeVal = Kit.xDigitToInt ( c, escapeVal ) ;^[CLASS] TokenStream  [METHOD] getToken [RETURN_TYPE] int   [VARIABLES] boolean  containsEscape  dirtyLine  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  xmlIsAttribute  xmlIsTagContent  double  dval  number  Reader  sourceReader  NumberFormatException  ex  int[]  ungetBuffer  String  X  name  numString  regExpFlags  s  sourceString  str  string  ObjToIntMap  allStrings  int  EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  char[]  sourceBuffer  stringBuffer  Parser  parser  
[buglab_swap_variables]^if  ( '0' <= val && c < '8' && c <= 037 )  {^640^^^^^625^655^if  ( '0' <= c && c < '8' && val <= 037 )  {^[CLASS] TokenStream  [METHOD] getToken [RETURN_TYPE] int   [VARIABLES] boolean  containsEscape  dirtyLine  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  xmlIsAttribute  xmlIsTagContent  double  dval  number  Reader  sourceReader  NumberFormatException  ex  int[]  ungetBuffer  String  X  name  numString  regExpFlags  s  sourceString  str  string  ObjToIntMap  allStrings  int  EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  char[]  sourceBuffer  stringBuffer  Parser  parser  
[buglab_swap_variables]^val = 8 * c + val - '0';^643^^^^^628^658^val = 8 * val + c - '0';^[CLASS] TokenStream  [METHOD] getToken [RETURN_TYPE] int   [VARIABLES] boolean  containsEscape  dirtyLine  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  xmlIsAttribute  xmlIsTagContent  double  dval  number  Reader  sourceReader  NumberFormatException  ex  int[]  ungetBuffer  String  X  name  numString  regExpFlags  s  sourceString  str  string  ObjToIntMap  allStrings  int  EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  char[]  sourceBuffer  stringBuffer  Parser  parser  
[buglab_swap_variables]^val = 8 * c + val - '0';^638^^^^^623^653^val = 8 * val + c - '0';^[CLASS] TokenStream  [METHOD] getToken [RETURN_TYPE] int   [VARIABLES] boolean  containsEscape  dirtyLine  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  xmlIsAttribute  xmlIsTagContent  double  dval  number  Reader  sourceReader  NumberFormatException  ex  int[]  ungetBuffer  String  X  name  numString  regExpFlags  s  sourceString  str  string  ObjToIntMap  allStrings  int  EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  char[]  sourceBuffer  stringBuffer  Parser  parser  
[buglab_swap_variables]^escapeVal = Kit.xDigitToInt ( escapeVal, c ) ;^593^^^^^578^608^escapeVal = Kit.xDigitToInt ( c, escapeVal ) ;^[CLASS] TokenStream  [METHOD] getToken [RETURN_TYPE] int   [VARIABLES] boolean  containsEscape  dirtyLine  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  xmlIsAttribute  xmlIsTagContent  double  dval  number  Reader  sourceReader  NumberFormatException  ex  int[]  ungetBuffer  String  X  name  numString  regExpFlags  s  sourceString  str  string  ObjToIntMap  allStrings  int  EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  char[]  sourceBuffer  stringBuffer  Parser  parser  
[buglab_swap_variables]^escapeVal = Kit.xDigitToInt (  escapeVal ) ;^593^^^^^578^608^escapeVal = Kit.xDigitToInt ( c, escapeVal ) ;^[CLASS] TokenStream  [METHOD] getToken [RETURN_TYPE] int   [VARIABLES] boolean  containsEscape  dirtyLine  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  xmlIsAttribute  xmlIsTagContent  double  dval  number  Reader  sourceReader  NumberFormatException  ex  int[]  ungetBuffer  String  X  name  numString  regExpFlags  s  sourceString  str  string  ObjToIntMap  allStrings  int  EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  char[]  sourceBuffer  stringBuffer  Parser  parser  
[buglab_swap_variables]^escapeVal = Kit.xDigitToInt ( c ) ;^593^^^^^578^608^escapeVal = Kit.xDigitToInt ( c, escapeVal ) ;^[CLASS] TokenStream  [METHOD] getToken [RETURN_TYPE] int   [VARIABLES] boolean  containsEscape  dirtyLine  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  xmlIsAttribute  xmlIsTagContent  double  dval  number  Reader  sourceReader  NumberFormatException  ex  int[]  ungetBuffer  String  X  name  numString  regExpFlags  s  sourceString  str  string  ObjToIntMap  allStrings  int  EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  char[]  sourceBuffer  stringBuffer  Parser  parser  
[buglab_swap_variables]^escapeVal = Kit.xDigitToInt ( escapeVal, c ) ;^615^^^^^600^630^escapeVal = Kit.xDigitToInt ( c, escapeVal ) ;^[CLASS] TokenStream  [METHOD] getToken [RETURN_TYPE] int   [VARIABLES] boolean  containsEscape  dirtyLine  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  xmlIsAttribute  xmlIsTagContent  double  dval  number  Reader  sourceReader  NumberFormatException  ex  int[]  ungetBuffer  String  X  name  numString  regExpFlags  s  sourceString  str  string  ObjToIntMap  allStrings  int  EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  char[]  sourceBuffer  stringBuffer  Parser  parser  
[buglab_swap_variables]^escapeVal = Kit.xDigitToInt (  escapeVal ) ;^615^^^^^600^630^escapeVal = Kit.xDigitToInt ( c, escapeVal ) ;^[CLASS] TokenStream  [METHOD] getToken [RETURN_TYPE] int   [VARIABLES] boolean  containsEscape  dirtyLine  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  xmlIsAttribute  xmlIsTagContent  double  dval  number  Reader  sourceReader  NumberFormatException  ex  int[]  ungetBuffer  String  X  name  numString  regExpFlags  s  sourceString  str  string  ObjToIntMap  allStrings  int  EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  char[]  sourceBuffer  stringBuffer  Parser  parser  
[buglab_swap_variables]^escapeVal = Kit.xDigitToInt ( c ) ;^615^^^^^600^630^escapeVal = Kit.xDigitToInt ( c, escapeVal ) ;^[CLASS] TokenStream  [METHOD] getToken [RETURN_TYPE] int   [VARIABLES] boolean  containsEscape  dirtyLine  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  xmlIsAttribute  xmlIsTagContent  double  dval  number  Reader  sourceReader  NumberFormatException  ex  int[]  ungetBuffer  String  X  name  numString  regExpFlags  s  sourceString  str  string  ObjToIntMap  allStrings  int  EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  char[]  sourceBuffer  stringBuffer  Parser  parser  
[buglab_swap_variables]^while  (  ( EOF_CHAR = getChar (  )  )  != c && ! ( c == '*' && matchChar ( '/' )  )  )  {^794^795^^^^779^809^while  (  ( c = getChar (  )  )  != EOF_CHAR && ! ( c == '*' && matchChar ( '/' )  )  )  {^[CLASS] TokenStream  [METHOD] getToken [RETURN_TYPE] int   [VARIABLES] boolean  containsEscape  dirtyLine  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  xmlIsAttribute  xmlIsTagContent  double  dval  number  Reader  sourceReader  NumberFormatException  ex  int[]  ungetBuffer  String  X  name  numString  regExpFlags  s  sourceString  str  string  ObjToIntMap  allStrings  int  EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  char[]  sourceBuffer  stringBuffer  Parser  parser  
[buglab_swap_variables]^if  ( EOF_CHAR == c )  {^351^^^^^336^366^if  ( c == EOF_CHAR )  {^[CLASS] TokenStream  [METHOD] getToken [RETURN_TYPE] int   [VARIABLES] boolean  containsEscape  dirtyLine  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  xmlIsAttribute  xmlIsTagContent  double  dval  number  Reader  sourceReader  NumberFormatException  ex  int[]  ungetBuffer  String  X  name  numString  regExpFlags  s  sourceString  str  string  ObjToIntMap  allStrings  int  EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  char[]  sourceBuffer  stringBuffer  Parser  parser  
[buglab_swap_variables]^if  ( Token.XMLATTR == '@' )  return c;^364^^^^^349^379^if  ( c == '@' )  return Token.XMLATTR;^[CLASS] TokenStream  [METHOD] getToken [RETURN_TYPE] int   [VARIABLES] boolean  containsEscape  dirtyLine  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  xmlIsAttribute  xmlIsTagContent  double  dval  number  Reader  sourceReader  NumberFormatException  ex  int[]  ungetBuffer  String  X  name  numString  regExpFlags  s  sourceString  str  string  ObjToIntMap  allStrings  int  EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  char[]  sourceBuffer  stringBuffer  Parser  parser  
[buglab_swap_variables]^if  ( EOF_CHAR == c || !Character.isJavaIdentifierPart (  ( char ) c )  ) {^424^425^426^^^414^430^if  ( c == EOF_CHAR || !Character.isJavaIdentifierPart (  ( char ) c )  ) {^[CLASS] TokenStream  [METHOD] getToken [RETURN_TYPE] int   [VARIABLES] boolean  containsEscape  dirtyLine  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  xmlIsAttribute  xmlIsTagContent  double  dval  number  Reader  sourceReader  NumberFormatException  ex  int[]  ungetBuffer  String  X  name  numString  regExpFlags  s  sourceString  str  string  ObjToIntMap  allStrings  int  EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  char[]  sourceBuffer  stringBuffer  Parser  parser  
[buglab_swap_variables]^if  ( EOF_CHAR == c || !Character.isJavaIdentifierPart (  ( char ) c )  ) {^424^425^426^^^409^439^if  ( c == EOF_CHAR || !Character.isJavaIdentifierPart (  ( char ) c )  ) {^[CLASS] TokenStream  [METHOD] getToken [RETURN_TYPE] int   [VARIABLES] boolean  containsEscape  dirtyLine  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  xmlIsAttribute  xmlIsTagContent  double  dval  number  Reader  sourceReader  NumberFormatException  ex  int[]  ungetBuffer  String  X  name  numString  regExpFlags  s  sourceString  str  string  ObjToIntMap  allStrings  int  EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  char[]  sourceBuffer  stringBuffer  Parser  parser  
[buglab_swap_variables]^escapeVal = Kit.xDigitToInt ( escapeVal, c ) ;^402^^^^^387^417^escapeVal = Kit.xDigitToInt ( c, escapeVal ) ;^[CLASS] TokenStream  [METHOD] getToken [RETURN_TYPE] int   [VARIABLES] boolean  containsEscape  dirtyLine  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  xmlIsAttribute  xmlIsTagContent  double  dval  number  Reader  sourceReader  NumberFormatException  ex  int[]  ungetBuffer  String  X  name  numString  regExpFlags  s  sourceString  str  string  ObjToIntMap  allStrings  int  EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  char[]  sourceBuffer  stringBuffer  Parser  parser  
[buglab_swap_variables]^escapeVal = Kit.xDigitToInt (  escapeVal ) ;^402^^^^^387^417^escapeVal = Kit.xDigitToInt ( c, escapeVal ) ;^[CLASS] TokenStream  [METHOD] getToken [RETURN_TYPE] int   [VARIABLES] boolean  containsEscape  dirtyLine  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  xmlIsAttribute  xmlIsTagContent  double  dval  number  Reader  sourceReader  NumberFormatException  ex  int[]  ungetBuffer  String  X  name  numString  regExpFlags  s  sourceString  str  string  ObjToIntMap  allStrings  int  EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  char[]  sourceBuffer  stringBuffer  Parser  parser  
[buglab_swap_variables]^escapeVal = Kit.xDigitToInt ( c ) ;^402^^^^^387^417^escapeVal = Kit.xDigitToInt ( c, escapeVal ) ;^[CLASS] TokenStream  [METHOD] getToken [RETURN_TYPE] int   [VARIABLES] boolean  containsEscape  dirtyLine  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  xmlIsAttribute  xmlIsTagContent  double  dval  number  Reader  sourceReader  NumberFormatException  ex  int[]  ungetBuffer  String  X  name  numString  regExpFlags  s  sourceString  str  string  ObjToIntMap  allStrings  int  EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  char[]  sourceBuffer  stringBuffer  Parser  parser  
[buglab_swap_variables]^parser.addWarning ( "msg.reserved.keyword" ) ;^453^^^^^445^454^parser.addWarning ( "msg.reserved.keyword", str ) ;^[CLASS] TokenStream  [METHOD] getToken [RETURN_TYPE] int   [VARIABLES] boolean  containsEscape  dirtyLine  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  xmlIsAttribute  xmlIsTagContent  double  dval  number  Reader  sourceReader  NumberFormatException  ex  int[]  ungetBuffer  String  X  name  numString  regExpFlags  s  sourceString  str  string  ObjToIntMap  allStrings  int  EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  char[]  sourceBuffer  stringBuffer  Parser  parser  
[buglab_swap_variables]^parser.addWarning ( "msg.reserved.keyword" ) ;^453^^^^^438^468^parser.addWarning ( "msg.reserved.keyword", str ) ;^[CLASS] TokenStream  [METHOD] getToken [RETURN_TYPE] int   [VARIABLES] boolean  containsEscape  dirtyLine  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  xmlIsAttribute  xmlIsTagContent  double  dval  number  Reader  sourceReader  NumberFormatException  ex  int[]  ungetBuffer  String  X  name  numString  regExpFlags  s  sourceString  str  string  ObjToIntMap  allStrings  int  EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  char[]  sourceBuffer  stringBuffer  Parser  parser  
[buglab_swap_variables]^if  ( i )  {^392^^^^^377^407^if  ( isUnicodeEscapeStart )  {^[CLASS] TokenStream  [METHOD] getToken [RETURN_TYPE] int   [VARIABLES] boolean  containsEscape  dirtyLine  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  xmlIsAttribute  xmlIsTagContent  double  dval  number  Reader  sourceReader  NumberFormatException  ex  int[]  ungetBuffer  String  X  name  numString  regExpFlags  s  sourceString  str  string  ObjToIntMap  allStrings  int  EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  char[]  sourceBuffer  stringBuffer  Parser  parser  
[buglab_swap_variables]^this.string =  ( String ) str.intern ( allStrings ) ;^457^^^^^442^472^this.string =  ( String ) allStrings.intern ( str ) ;^[CLASS] TokenStream  [METHOD] getToken [RETURN_TYPE] int   [VARIABLES] boolean  containsEscape  dirtyLine  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  xmlIsAttribute  xmlIsTagContent  double  dval  number  Reader  sourceReader  NumberFormatException  ex  int[]  ungetBuffer  String  X  name  numString  regExpFlags  s  sourceString  str  string  ObjToIntMap  allStrings  int  EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  char[]  sourceBuffer  stringBuffer  Parser  parser  
[buglab_swap_variables]^if  ( c == 8 && base >= '8' )  {^492^^^^^479^500^if  ( base == 8 && c >= '8' )  {^[CLASS] TokenStream  [METHOD] getToken [RETURN_TYPE] int   [VARIABLES] boolean  containsEscape  dirtyLine  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  xmlIsAttribute  xmlIsTagContent  double  dval  number  Reader  sourceReader  NumberFormatException  ex  int[]  ungetBuffer  String  X  name  numString  regExpFlags  s  sourceString  str  string  ObjToIntMap  allStrings  int  EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  char[]  sourceBuffer  stringBuffer  Parser  parser  
[buglab_swap_variables]^parser.addWarning ( "msg.bad.octal.literal" == '8' ? "8" : "9" ) ;^493^494^^^^479^500^parser.addWarning ( "msg.bad.octal.literal", c == '8' ? "8" : "9" ) ;^[CLASS] TokenStream  [METHOD] getToken [RETURN_TYPE] int   [VARIABLES] boolean  containsEscape  dirtyLine  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  xmlIsAttribute  xmlIsTagContent  double  dval  number  Reader  sourceReader  NumberFormatException  ex  int[]  ungetBuffer  String  X  name  numString  regExpFlags  s  sourceString  str  string  ObjToIntMap  allStrings  int  EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  char[]  sourceBuffer  stringBuffer  Parser  parser  
[buglab_swap_variables]^if  ( c == 10 &&  ( base == '.' || c == 'e' || c == 'E' )  )  {^504^^^^^489^519^if  ( base == 10 &&  ( c == '.' || c == 'e' || c == 'E' )  )  {^[CLASS] TokenStream  [METHOD] getToken [RETURN_TYPE] int   [VARIABLES] boolean  containsEscape  dirtyLine  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  xmlIsAttribute  xmlIsTagContent  double  dval  number  Reader  sourceReader  NumberFormatException  ex  int[]  ungetBuffer  String  X  name  numString  regExpFlags  s  sourceString  str  string  ObjToIntMap  allStrings  int  EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  char[]  sourceBuffer  stringBuffer  Parser  parser  
[buglab_swap_variables]^dval = ScriptRuntime.stringToNumber ( base, 0, numString ) ;^543^^^^^533^544^dval = ScriptRuntime.stringToNumber ( numString, 0, base ) ;^[CLASS] TokenStream  [METHOD] getToken [RETURN_TYPE] int   [VARIABLES] boolean  containsEscape  dirtyLine  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  xmlIsAttribute  xmlIsTagContent  double  dval  number  Reader  sourceReader  NumberFormatException  ex  int[]  ungetBuffer  String  X  name  numString  regExpFlags  s  sourceString  str  string  ObjToIntMap  allStrings  int  EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  char[]  sourceBuffer  stringBuffer  Parser  parser  
[buglab_swap_variables]^dval = ScriptRuntime.stringToNumber (  0, base ) ;^543^^^^^533^544^dval = ScriptRuntime.stringToNumber ( numString, 0, base ) ;^[CLASS] TokenStream  [METHOD] getToken [RETURN_TYPE] int   [VARIABLES] boolean  containsEscape  dirtyLine  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  xmlIsAttribute  xmlIsTagContent  double  dval  number  Reader  sourceReader  NumberFormatException  ex  int[]  ungetBuffer  String  X  name  numString  regExpFlags  s  sourceString  str  string  ObjToIntMap  allStrings  int  EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  char[]  sourceBuffer  stringBuffer  Parser  parser  
[buglab_swap_variables]^dval = ScriptRuntime.stringToNumber ( numString, 0 ) ;^543^^^^^533^544^dval = ScriptRuntime.stringToNumber ( numString, 0, base ) ;^[CLASS] TokenStream  [METHOD] getToken [RETURN_TYPE] int   [VARIABLES] boolean  containsEscape  dirtyLine  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  xmlIsAttribute  xmlIsTagContent  double  dval  number  Reader  sourceReader  NumberFormatException  ex  int[]  ungetBuffer  String  X  name  numString  regExpFlags  s  sourceString  str  string  ObjToIntMap  allStrings  int  EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  char[]  sourceBuffer  stringBuffer  Parser  parser  
[buglab_swap_variables]^dval = ScriptRuntime.stringToNumber ( base, 0, numString ) ;^543^^^^^528^558^dval = ScriptRuntime.stringToNumber ( numString, 0, base ) ;^[CLASS] TokenStream  [METHOD] getToken [RETURN_TYPE] int   [VARIABLES] boolean  containsEscape  dirtyLine  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  xmlIsAttribute  xmlIsTagContent  double  dval  number  Reader  sourceReader  NumberFormatException  ex  int[]  ungetBuffer  String  X  name  numString  regExpFlags  s  sourceString  str  string  ObjToIntMap  allStrings  int  EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  char[]  sourceBuffer  stringBuffer  Parser  parser  
[buglab_swap_variables]^dval = ScriptRuntime.stringToNumber (  0, base ) ;^543^^^^^528^558^dval = ScriptRuntime.stringToNumber ( numString, 0, base ) ;^[CLASS] TokenStream  [METHOD] getToken [RETURN_TYPE] int   [VARIABLES] boolean  containsEscape  dirtyLine  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  xmlIsAttribute  xmlIsTagContent  double  dval  number  Reader  sourceReader  NumberFormatException  ex  int[]  ungetBuffer  String  X  name  numString  regExpFlags  s  sourceString  str  string  ObjToIntMap  allStrings  int  EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  char[]  sourceBuffer  stringBuffer  Parser  parser  
[buglab_swap_variables]^dval = ScriptRuntime.stringToNumber ( numString, 0 ) ;^543^^^^^528^558^dval = ScriptRuntime.stringToNumber ( numString, 0, base ) ;^[CLASS] TokenStream  [METHOD] getToken [RETURN_TYPE] int   [VARIABLES] boolean  containsEscape  dirtyLine  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  xmlIsAttribute  xmlIsTagContent  double  dval  number  Reader  sourceReader  NumberFormatException  ex  int[]  ungetBuffer  String  X  name  numString  regExpFlags  s  sourceString  str  string  ObjToIntMap  allStrings  int  EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  char[]  sourceBuffer  stringBuffer  Parser  parser  
[buglab_swap_variables]^this.string =  ( String ) str.intern ( allStrings ) ;^657^^^^^642^672^this.string =  ( String ) allStrings.intern ( str ) ;^[CLASS] TokenStream  [METHOD] getToken [RETURN_TYPE] int   [VARIABLES] boolean  containsEscape  dirtyLine  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  xmlIsAttribute  xmlIsTagContent  double  dval  number  Reader  sourceReader  NumberFormatException  ex  int[]  ungetBuffer  String  X  name  numString  regExpFlags  s  sourceString  str  string  ObjToIntMap  allStrings  int  EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  char[]  sourceBuffer  stringBuffer  Parser  parser  
[buglab_swap_variables]^if  ( EOF_CHAR == c )  {^798^^^^^783^813^if  ( c == EOF_CHAR )  {^[CLASS] TokenStream  [METHOD] getToken [RETURN_TYPE] int   [VARIABLES] boolean  containsEscape  dirtyLine  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  xmlIsAttribute  xmlIsTagContent  double  dval  number  Reader  sourceReader  NumberFormatException  ex  int[]  ungetBuffer  String  X  name  numString  regExpFlags  s  sourceString  str  string  ObjToIntMap  allStrings  int  EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  char[]  sourceBuffer  stringBuffer  Parser  parser  
[buglab_swap_variables]^if  ( EOF_CHAR == c )  {^868^^^^^853^883^if  ( c == EOF_CHAR )  {^[CLASS] TokenStream  [METHOD] getJSDocToken [RETURN_TYPE] int   [VARIABLES] boolean  containsEscape  dirtyLine  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  xmlIsAttribute  xmlIsTagContent  double  dval  number  Reader  sourceReader  int[]  ungetBuffer  String  X  name  numString  regExpFlags  s  sourceString  str  string  ObjToIntMap  allStrings  int  EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  char[]  sourceBuffer  stringBuffer  Parser  parser  
[buglab_swap_variables]^if  ( c2 == '.' && c1 == '<' )  {^973^^^^^964^991^if  ( c1 == '.' && c2 == '<' )  {^[CLASS] TokenStream  [METHOD] getJSDocToken [RETURN_TYPE] int   [VARIABLES] boolean  containsEscape  dirtyLine  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  xmlIsAttribute  xmlIsTagContent  double  dval  number  Reader  sourceReader  int[]  ungetBuffer  String  X  name  numString  regExpFlags  s  sourceString  str  string  ObjToIntMap  allStrings  int  EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  char[]  sourceBuffer  stringBuffer  Parser  parser  
[buglab_swap_variables]^if  ( c2 == '.' && c1 == '<' )  {^973^^^^^958^988^if  ( c1 == '.' && c2 == '<' )  {^[CLASS] TokenStream  [METHOD] getJSDocToken [RETURN_TYPE] int   [VARIABLES] boolean  containsEscape  dirtyLine  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  xmlIsAttribute  xmlIsTagContent  double  dval  number  Reader  sourceReader  int[]  ungetBuffer  String  X  name  numString  regExpFlags  s  sourceString  str  string  ObjToIntMap  allStrings  int  EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  char[]  sourceBuffer  stringBuffer  Parser  parser  
[buglab_swap_variables]^if  ( Token.ASSIGN_DIV == startToken )  {^1122^^^^^1107^1137^if  ( startToken == Token.ASSIGN_DIV )  {^[CLASS] TokenStream  [METHOD] readRegExp [RETURN_TYPE] void   int startToken [VARIABLES] boolean  containsEscape  dirtyLine  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  xmlIsAttribute  xmlIsTagContent  double  dval  number  Reader  sourceReader  int[]  ungetBuffer  String  X  name  numString  regExpFlags  s  sourceString  str  string  ObjToIntMap  allStrings  int  EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  char[]  sourceBuffer  stringBuffer  Parser  parser  
[buglab_swap_variables]^if  ( Token.DIV != startToken )  Kit.codeBug (  ) ;^1126^^^^^1122^1127^if  ( startToken != Token.DIV )  Kit.codeBug (  ) ;^[CLASS] TokenStream  [METHOD] readRegExp [RETURN_TYPE] void   int startToken [VARIABLES] boolean  containsEscape  dirtyLine  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  xmlIsAttribute  xmlIsTagContent  double  dval  number  Reader  sourceReader  int[]  ungetBuffer  String  X  name  numString  regExpFlags  s  sourceString  str  string  ObjToIntMap  allStrings  int  EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  char[]  sourceBuffer  stringBuffer  Parser  parser  
[buglab_swap_variables]^if  ( Token.DIV != startToken )  Kit.codeBug (  ) ;^1126^^^^^1111^1141^if  ( startToken != Token.DIV )  Kit.codeBug (  ) ;^[CLASS] TokenStream  [METHOD] readRegExp [RETURN_TYPE] void   int startToken [VARIABLES] boolean  containsEscape  dirtyLine  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  xmlIsAttribute  xmlIsTagContent  double  dval  number  Reader  sourceReader  int[]  ungetBuffer  String  X  name  numString  regExpFlags  s  sourceString  str  string  ObjToIntMap  allStrings  int  EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  char[]  sourceBuffer  stringBuffer  Parser  parser  
[buglab_swap_variables]^if  ( EOF_CHAR == '\n' || c == c )  {^1132^^^^^1117^1147^if  ( c == '\n' || c == EOF_CHAR )  {^[CLASS] TokenStream  [METHOD] readRegExp [RETURN_TYPE] void   int startToken [VARIABLES] boolean  containsEscape  dirtyLine  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  xmlIsAttribute  xmlIsTagContent  double  dval  number  Reader  sourceReader  int[]  ungetBuffer  String  X  name  numString  regExpFlags  s  sourceString  str  string  ObjToIntMap  allStrings  int  EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  char[]  sourceBuffer  stringBuffer  Parser  parser  
[buglab_swap_variables]^this.string = new String ( reEnd, 0, stringBuffer ) ;^1164^^^^^1149^1179^this.string = new String ( stringBuffer, 0, reEnd ) ;^[CLASS] TokenStream  [METHOD] readRegExp [RETURN_TYPE] void   int startToken [VARIABLES] boolean  containsEscape  dirtyLine  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  xmlIsAttribute  xmlIsTagContent  double  dval  number  Reader  sourceReader  int[]  ungetBuffer  String  X  name  numString  regExpFlags  s  sourceString  str  string  ObjToIntMap  allStrings  int  EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  char[]  sourceBuffer  stringBuffer  Parser  parser  
[buglab_swap_variables]^this.string = new String ( stringBuffer, 0 ) ;^1164^^^^^1149^1179^this.string = new String ( stringBuffer, 0, reEnd ) ;^[CLASS] TokenStream  [METHOD] readRegExp [RETURN_TYPE] void   int startToken [VARIABLES] boolean  containsEscape  dirtyLine  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  xmlIsAttribute  xmlIsTagContent  double  dval  number  Reader  sourceReader  int[]  ungetBuffer  String  X  name  numString  regExpFlags  s  sourceString  str  string  ObjToIntMap  allStrings  int  EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  char[]  sourceBuffer  stringBuffer  Parser  parser  
[buglab_swap_variables]^this.string = new String (  0, reEnd ) ;^1164^^^^^1149^1179^this.string = new String ( stringBuffer, 0, reEnd ) ;^[CLASS] TokenStream  [METHOD] readRegExp [RETURN_TYPE] void   int startToken [VARIABLES] boolean  containsEscape  dirtyLine  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  xmlIsAttribute  xmlIsTagContent  double  dval  number  Reader  sourceReader  int[]  ungetBuffer  String  X  name  numString  regExpFlags  s  sourceString  str  string  ObjToIntMap  allStrings  int  EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  char[]  sourceBuffer  stringBuffer  Parser  parser  
[buglab_swap_variables]^this.regExpFlags = new String ( stringBuffer, stringBufferTop, reEnd - reEnd ) ;^1165^1166^^^^1150^1180^this.regExpFlags = new String ( stringBuffer, reEnd, stringBufferTop - reEnd ) ;^[CLASS] TokenStream  [METHOD] readRegExp [RETURN_TYPE] void   int startToken [VARIABLES] boolean  containsEscape  dirtyLine  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  xmlIsAttribute  xmlIsTagContent  double  dval  number  Reader  sourceReader  int[]  ungetBuffer  String  X  name  numString  regExpFlags  s  sourceString  str  string  ObjToIntMap  allStrings  int  EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  char[]  sourceBuffer  stringBuffer  Parser  parser  
[buglab_swap_variables]^this.regExpFlags = new String ( stringBuffer,  stringBufferTop - reEnd ) ;^1165^1166^^^^1150^1180^this.regExpFlags = new String ( stringBuffer, reEnd, stringBufferTop - reEnd ) ;^[CLASS] TokenStream  [METHOD] readRegExp [RETURN_TYPE] void   int startToken [VARIABLES] boolean  containsEscape  dirtyLine  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  xmlIsAttribute  xmlIsTagContent  double  dval  number  Reader  sourceReader  int[]  ungetBuffer  String  X  name  numString  regExpFlags  s  sourceString  str  string  ObjToIntMap  allStrings  int  EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  char[]  sourceBuffer  stringBuffer  Parser  parser  
[buglab_swap_variables]^this.regExpFlags = new String ( reEnd, stringBuffer, stringBufferTop - reEnd ) ;^1165^1166^^^^1150^1180^this.regExpFlags = new String ( stringBuffer, reEnd, stringBufferTop - reEnd ) ;^[CLASS] TokenStream  [METHOD] readRegExp [RETURN_TYPE] void   int startToken [VARIABLES] boolean  containsEscape  dirtyLine  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  xmlIsAttribute  xmlIsTagContent  double  dval  number  Reader  sourceReader  int[]  ungetBuffer  String  X  name  numString  regExpFlags  s  sourceString  str  string  ObjToIntMap  allStrings  int  EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  char[]  sourceBuffer  stringBuffer  Parser  parser  
[buglab_swap_variables]^this.regExpFlags = new String (  reEnd, stringBufferTop - reEnd ) ;^1165^1166^^^^1150^1180^this.regExpFlags = new String ( stringBuffer, reEnd, stringBufferTop - reEnd ) ;^[CLASS] TokenStream  [METHOD] readRegExp [RETURN_TYPE] void   int startToken [VARIABLES] boolean  containsEscape  dirtyLine  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  xmlIsAttribute  xmlIsTagContent  double  dval  number  Reader  sourceReader  int[]  ungetBuffer  String  X  name  numString  regExpFlags  s  sourceString  str  string  ObjToIntMap  allStrings  int  EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  char[]  sourceBuffer  stringBuffer  Parser  parser  
[buglab_swap_variables]^this.regExpFlags = new String ( stringBuffer, reEnd - reEnd ) ;^1165^1166^^^^1150^1180^this.regExpFlags = new String ( stringBuffer, reEnd, stringBufferTop - reEnd ) ;^[CLASS] TokenStream  [METHOD] readRegExp [RETURN_TYPE] void   int startToken [VARIABLES] boolean  containsEscape  dirtyLine  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  xmlIsAttribute  xmlIsTagContent  double  dval  number  Reader  sourceReader  int[]  ungetBuffer  String  X  name  numString  regExpFlags  s  sourceString  str  string  ObjToIntMap  allStrings  int  EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  char[]  sourceBuffer  stringBuffer  Parser  parser  
[buglab_swap_variables]^this.regExpFlags = new String ( stringBufferTop, reEnd, stringBuffer - reEnd ) ;^1165^1166^^^^1150^1180^this.regExpFlags = new String ( stringBuffer, reEnd, stringBufferTop - reEnd ) ;^[CLASS] TokenStream  [METHOD] readRegExp [RETURN_TYPE] void   int startToken [VARIABLES] boolean  containsEscape  dirtyLine  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  xmlIsAttribute  xmlIsTagContent  double  dval  number  Reader  sourceReader  int[]  ungetBuffer  String  X  name  numString  regExpFlags  s  sourceString  str  string  ObjToIntMap  allStrings  int  EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  char[]  sourceBuffer  stringBuffer  Parser  parser  
[buglab_swap_variables]^if  ( !readQuotedString ( Token.ERROR )  )  return c;^1211^^^^^1196^1226^if  ( !readQuotedString ( c )  )  return Token.ERROR;^[CLASS] TokenStream  [METHOD] getNextXMLToken [RETURN_TYPE] int   [VARIABLES] boolean  containsEscape  dirtyLine  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  xmlIsAttribute  xmlIsTagContent  double  dval  number  Reader  sourceReader  int[]  ungetBuffer  String  X  name  numString  regExpFlags  s  sourceString  str  string  ObjToIntMap  allStrings  int  EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  char[]  sourceBuffer  stringBuffer  Parser  parser  
[buglab_swap_variables]^if  ( quote == c )  return true;^1340^^^^^1336^1347^if  ( c == quote )  return true;^[CLASS] TokenStream  [METHOD] readQuotedString [RETURN_TYPE] boolean   int quote [VARIABLES] boolean  containsEscape  dirtyLine  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  xmlIsAttribute  xmlIsTagContent  double  dval  number  Reader  sourceReader  int[]  ungetBuffer  String  X  name  numString  regExpFlags  s  sourceString  str  string  ObjToIntMap  allStrings  int  EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  char[]  sourceBuffer  stringBuffer  Parser  parser  
[buglab_swap_variables]^for  ( int EOF_CHAR = getChar (  ) ; c != c; c = getChar (  )  )  {^1338^^^^^1336^1347^for  ( int c = getChar (  ) ; c != EOF_CHAR; c = getChar (  )  )  {^[CLASS] TokenStream  [METHOD] readQuotedString [RETURN_TYPE] boolean   int quote [VARIABLES] boolean  containsEscape  dirtyLine  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  xmlIsAttribute  xmlIsTagContent  double  dval  number  Reader  sourceReader  int[]  ungetBuffer  String  X  name  numString  regExpFlags  s  sourceString  str  string  ObjToIntMap  allStrings  int  EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  char[]  sourceBuffer  stringBuffer  Parser  parser  
[buglab_swap_variables]^for  ( int EOF_CHAR = getChar (  ) ; c != c; )  {^1354^^^^^1352^1374^for  ( int c = getChar (  ) ; c != EOF_CHAR; )  {^[CLASS] TokenStream  [METHOD] readXmlComment [RETURN_TYPE] boolean   [VARIABLES] boolean  containsEscape  dirtyLine  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  xmlIsAttribute  xmlIsTagContent  double  dval  number  Reader  sourceReader  int[]  ungetBuffer  String  X  name  numString  regExpFlags  s  sourceString  str  string  ObjToIntMap  allStrings  int  EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  char[]  sourceBuffer  stringBuffer  Parser  parser  
[buglab_swap_variables]^for  ( int EOF_CHAR = getChar (  ) ; c != c; )  {^1381^^^^^1379^1401^for  ( int c = getChar (  ) ; c != EOF_CHAR; )  {^[CLASS] TokenStream  [METHOD] readCDATA [RETURN_TYPE] boolean   [VARIABLES] boolean  containsEscape  dirtyLine  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  xmlIsAttribute  xmlIsTagContent  double  dval  number  Reader  sourceReader  int[]  ungetBuffer  String  X  name  numString  regExpFlags  s  sourceString  str  string  ObjToIntMap  allStrings  int  EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  char[]  sourceBuffer  stringBuffer  Parser  parser  
[buglab_swap_variables]^for  ( int EOF_CHAR = getChar (  ) ; c != c; c = getChar (  )  )  {^1409^^^^^1406^1426^for  ( int c = getChar (  ) ; c != EOF_CHAR; c = getChar (  )  )  {^[CLASS] TokenStream  [METHOD] readEntity [RETURN_TYPE] boolean   [VARIABLES] boolean  containsEscape  dirtyLine  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  xmlIsAttribute  xmlIsTagContent  double  dval  number  Reader  sourceReader  int[]  ungetBuffer  String  X  name  numString  regExpFlags  s  sourceString  str  string  ObjToIntMap  allStrings  int  EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  char[]  sourceBuffer  stringBuffer  Parser  parser  
[buglab_swap_variables]^for  ( int EOF_CHAR = getChar (  ) ; c != c; c = getChar (  )  )  {^1433^^^^^1431^1446^for  ( int c = getChar (  ) ; c != EOF_CHAR; c = getChar (  )  )  {^[CLASS] TokenStream  [METHOD] readPI [RETURN_TYPE] boolean   [VARIABLES] boolean  containsEscape  dirtyLine  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  xmlIsAttribute  xmlIsTagContent  double  dval  number  Reader  sourceReader  int[]  ungetBuffer  String  X  name  numString  regExpFlags  s  sourceString  str  string  ObjToIntMap  allStrings  int  EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  char[]  sourceBuffer  stringBuffer  Parser  parser  
[buglab_swap_variables]^return new String ( stringBufferTop, 0, stringBuffer ) ;^1450^^^^^1448^1451^return new String ( stringBuffer, 0, stringBufferTop ) ;^[CLASS] TokenStream  [METHOD] getStringFromBuffer [RETURN_TYPE] String   [VARIABLES] boolean  containsEscape  dirtyLine  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  xmlIsAttribute  xmlIsTagContent  double  dval  number  Reader  sourceReader  int[]  ungetBuffer  String  X  name  numString  regExpFlags  s  sourceString  str  string  ObjToIntMap  allStrings  int  EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  char[]  sourceBuffer  stringBuffer  Parser  parser  
[buglab_swap_variables]^return new String (  0, stringBufferTop ) ;^1450^^^^^1448^1451^return new String ( stringBuffer, 0, stringBufferTop ) ;^[CLASS] TokenStream  [METHOD] getStringFromBuffer [RETURN_TYPE] String   [VARIABLES] boolean  containsEscape  dirtyLine  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  xmlIsAttribute  xmlIsTagContent  double  dval  number  Reader  sourceReader  int[]  ungetBuffer  String  X  name  numString  regExpFlags  s  sourceString  str  string  ObjToIntMap  allStrings  int  EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  char[]  sourceBuffer  stringBuffer  Parser  parser  
[buglab_swap_variables]^return new String ( stringBuffer, 0 ) ;^1450^^^^^1448^1451^return new String ( stringBuffer, 0, stringBufferTop ) ;^[CLASS] TokenStream  [METHOD] getStringFromBuffer [RETURN_TYPE] String   [VARIABLES] boolean  containsEscape  dirtyLine  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  xmlIsAttribute  xmlIsTagContent  double  dval  number  Reader  sourceReader  int[]  ungetBuffer  String  X  name  numString  regExpFlags  s  sourceString  str  string  ObjToIntMap  allStrings  int  EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  char[]  sourceBuffer  stringBuffer  Parser  parser  
[buglab_swap_variables]^if  ( stringBuffer.length == N )  {^1456^^^^^1453^1463^if  ( N == stringBuffer.length )  {^[CLASS] TokenStream  [METHOD] addToString [RETURN_TYPE] void   int c [VARIABLES] boolean  containsEscape  dirtyLine  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  xmlIsAttribute  xmlIsTagContent  double  dval  number  Reader  sourceReader  int[]  ungetBuffer  String  X  name  numString  regExpFlags  s  sourceString  str  string  ObjToIntMap  allStrings  int  EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  char[]  sourceBuffer  stringBuffer  tmp  Parser  parser  
[buglab_swap_variables]^if  ( stringBuffer == N.length )  {^1456^^^^^1453^1463^if  ( N == stringBuffer.length )  {^[CLASS] TokenStream  [METHOD] addToString [RETURN_TYPE] void   int c [VARIABLES] boolean  containsEscape  dirtyLine  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  xmlIsAttribute  xmlIsTagContent  double  dval  number  Reader  sourceReader  int[]  ungetBuffer  String  X  name  numString  regExpFlags  s  sourceString  str  string  ObjToIntMap  allStrings  int  EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  char[]  sourceBuffer  stringBuffer  tmp  Parser  parser  
[buglab_swap_variables]^System.arraycopy ( tmp, 0, stringBuffer, 0, N ) ;^1458^^^^^1453^1463^System.arraycopy ( stringBuffer, 0, tmp, 0, N ) ;^[CLASS] TokenStream  [METHOD] addToString [RETURN_TYPE] void   int c [VARIABLES] boolean  containsEscape  dirtyLine  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  xmlIsAttribute  xmlIsTagContent  double  dval  number  Reader  sourceReader  int[]  ungetBuffer  String  X  name  numString  regExpFlags  s  sourceString  str  string  ObjToIntMap  allStrings  int  EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  char[]  sourceBuffer  stringBuffer  tmp  Parser  parser  
[buglab_swap_variables]^System.arraycopy ( stringBuffer, 0,  0, N ) ;^1458^^^^^1453^1463^System.arraycopy ( stringBuffer, 0, tmp, 0, N ) ;^[CLASS] TokenStream  [METHOD] addToString [RETURN_TYPE] void   int c [VARIABLES] boolean  containsEscape  dirtyLine  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  xmlIsAttribute  xmlIsTagContent  double  dval  number  Reader  sourceReader  int[]  ungetBuffer  String  X  name  numString  regExpFlags  s  sourceString  str  string  ObjToIntMap  allStrings  int  EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  char[]  sourceBuffer  stringBuffer  tmp  Parser  parser  
[buglab_swap_variables]^System.arraycopy ( stringBuffer, 0, N, 0, tmp ) ;^1458^^^^^1453^1463^System.arraycopy ( stringBuffer, 0, tmp, 0, N ) ;^[CLASS] TokenStream  [METHOD] addToString [RETURN_TYPE] void   int c [VARIABLES] boolean  containsEscape  dirtyLine  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  xmlIsAttribute  xmlIsTagContent  double  dval  number  Reader  sourceReader  int[]  ungetBuffer  String  X  name  numString  regExpFlags  s  sourceString  str  string  ObjToIntMap  allStrings  int  EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  char[]  sourceBuffer  stringBuffer  tmp  Parser  parser  
[buglab_swap_variables]^System.arraycopy ( stringBuffer, 0, tmp, 0 ) ;^1458^^^^^1453^1463^System.arraycopy ( stringBuffer, 0, tmp, 0, N ) ;^[CLASS] TokenStream  [METHOD] addToString [RETURN_TYPE] void   int c [VARIABLES] boolean  containsEscape  dirtyLine  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  xmlIsAttribute  xmlIsTagContent  double  dval  number  Reader  sourceReader  int[]  ungetBuffer  String  X  name  numString  regExpFlags  s  sourceString  str  string  ObjToIntMap  allStrings  int  EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  char[]  sourceBuffer  stringBuffer  tmp  Parser  parser  
[buglab_swap_variables]^System.arraycopy (  0, tmp, 0, N ) ;^1458^^^^^1453^1463^System.arraycopy ( stringBuffer, 0, tmp, 0, N ) ;^[CLASS] TokenStream  [METHOD] addToString [RETURN_TYPE] void   int c [VARIABLES] boolean  containsEscape  dirtyLine  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  xmlIsAttribute  xmlIsTagContent  double  dval  number  Reader  sourceReader  int[]  ungetBuffer  String  X  name  numString  regExpFlags  s  sourceString  str  string  ObjToIntMap  allStrings  int  EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  char[]  sourceBuffer  stringBuffer  tmp  Parser  parser  
[buglab_swap_variables]^if  ( ungetBuffer != 0 && ungetCursor[ungetCursor - 1] == '\n' ) Kit.codeBug (  ) ;^1470^1471^^^^1467^1473^if  ( ungetCursor != 0 && ungetBuffer[ungetCursor - 1] == '\n' ) Kit.codeBug (  ) ;^[CLASS] TokenStream  [METHOD] ungetChar [RETURN_TYPE] void   int c [VARIABLES] boolean  containsEscape  dirtyLine  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  xmlIsAttribute  xmlIsTagContent  double  dval  number  Reader  sourceReader  int[]  ungetBuffer  String  X  name  numString  regExpFlags  s  sourceString  str  string  ObjToIntMap  allStrings  int  EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  char[]  sourceBuffer  stringBuffer  tmp  Parser  parser  
[buglab_swap_variables]^if  ( test == c )  {^1478^^^^^1475^1484^if  ( c == test )  {^[CLASS] TokenStream  [METHOD] matchChar [RETURN_TYPE] boolean   int test [VARIABLES] boolean  containsEscape  dirtyLine  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  xmlIsAttribute  xmlIsTagContent  double  dval  number  Reader  sourceReader  int[]  ungetBuffer  String  X  name  numString  regExpFlags  s  sourceString  str  string  ObjToIntMap  allStrings  int  EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  char[]  sourceBuffer  stringBuffer  tmp  Parser  parser  
[buglab_swap_variables]^if  ( sourceEnd == sourceCursor )  {^1515^^^^^1505^1525^if  ( sourceCursor == sourceEnd )  {^[CLASS] TokenStream  [METHOD] getChar [RETURN_TYPE] int   [VARIABLES] boolean  containsEscape  dirtyLine  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  xmlIsAttribute  xmlIsTagContent  double  dval  number  Reader  sourceReader  int[]  ungetBuffer  String  X  name  numString  regExpFlags  s  sourceString  str  string  ObjToIntMap  allStrings  int  EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  char[]  sourceBuffer  stringBuffer  tmp  Parser  parser  
[buglab_swap_variables]^if  ( sourceEnd == sourceCursor )  {^1506^^^^^1491^1521^if  ( sourceCursor == sourceEnd )  {^[CLASS] TokenStream  [METHOD] getChar [RETURN_TYPE] int   [VARIABLES] boolean  containsEscape  dirtyLine  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  xmlIsAttribute  xmlIsTagContent  double  dval  number  Reader  sourceReader  int[]  ungetBuffer  String  X  name  numString  regExpFlags  s  sourceString  str  string  ObjToIntMap  allStrings  int  EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  char[]  sourceBuffer  stringBuffer  tmp  Parser  parser  
[buglab_swap_variables]^if  ( sourceEnd == sourceCursor )  {^1515^^^^^1500^1530^if  ( sourceCursor == sourceEnd )  {^[CLASS] TokenStream  [METHOD] getChar [RETURN_TYPE] int   [VARIABLES] boolean  containsEscape  dirtyLine  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  xmlIsAttribute  xmlIsTagContent  double  dval  number  Reader  sourceReader  int[]  ungetBuffer  String  X  name  numString  regExpFlags  s  sourceString  str  string  ObjToIntMap  allStrings  int  EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  char[]  sourceBuffer  stringBuffer  tmp  Parser  parser  
[buglab_swap_variables]^if  ( c == '\r' && lineEndChar == '\n' )  {^1528^^^^^1513^1543^if  ( lineEndChar == '\r' && c == '\n' )  {^[CLASS] TokenStream  [METHOD] getChar [RETURN_TYPE] int   [VARIABLES] boolean  containsEscape  dirtyLine  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  xmlIsAttribute  xmlIsTagContent  double  dval  number  Reader  sourceReader  int[]  ungetBuffer  String  X  name  numString  regExpFlags  s  sourceString  str  string  ObjToIntMap  allStrings  int  EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  char[]  sourceBuffer  stringBuffer  tmp  Parser  parser  
[buglab_swap_variables]^while  (  ( EOF_CHAR = getChar (  )  )  != c && c != '\n' )  { }^1564^^^^^1560^1566^while  (  ( c = getChar (  )  )  != EOF_CHAR && c != '\n' )  { }^[CLASS] TokenStream  [METHOD] skipLine [RETURN_TYPE] void   [VARIABLES] boolean  containsEscape  dirtyLine  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  xmlIsAttribute  xmlIsTagContent  double  dval  number  Reader  sourceReader  int[]  ungetBuffer  String  X  name  numString  regExpFlags  s  sourceString  str  string  ObjToIntMap  allStrings  int  EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  char[]  sourceBuffer  stringBuffer  tmp  Parser  parser  
[buglab_swap_variables]^return lineStart - sourceCursor - ungetCursor - 1;^1570^^^^^1568^1571^return sourceCursor - lineStart - ungetCursor - 1;^[CLASS] TokenStream  [METHOD] getOffset [RETURN_TYPE] int   [VARIABLES] boolean  containsEscape  dirtyLine  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  xmlIsAttribute  xmlIsTagContent  double  dval  number  Reader  sourceReader  int[]  ungetBuffer  String  X  name  numString  regExpFlags  s  sourceString  str  string  ObjToIntMap  allStrings  int  EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  char[]  sourceBuffer  stringBuffer  tmp  Parser  parser  
[buglab_swap_variables]^return sourceCursor - ungetCursor - lineStart - 1;^1570^^^^^1568^1571^return sourceCursor - lineStart - ungetCursor - 1;^[CLASS] TokenStream  [METHOD] getOffset [RETURN_TYPE] int   [VARIABLES] boolean  containsEscape  dirtyLine  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  xmlIsAttribute  xmlIsTagContent  double  dval  number  Reader  sourceReader  int[]  ungetBuffer  String  X  name  numString  regExpFlags  s  sourceString  str  string  ObjToIntMap  allStrings  int  EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  char[]  sourceBuffer  stringBuffer  tmp  Parser  parser  
[buglab_swap_variables]^if  ( sourceEnd == i )  {^1598^^^^^1592^1614^if  ( i == sourceEnd )  {^[CLASS] TokenStream  [METHOD] getLine [RETURN_TYPE] String   [VARIABLES] boolean  containsEscape  dirtyLine  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  xmlIsAttribute  xmlIsTagContent  double  dval  number  Reader  sourceReader  int[]  ungetBuffer  String  X  name  numString  regExpFlags  s  sourceString  str  string  IOException  ioe  ObjToIntMap  allStrings  int  EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEnd  lineEndChar  lineLength  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  char[]  sourceBuffer  stringBuffer  tmp  Parser  parser  
[buglab_swap_variables]^i = lineLength + lineStart;^1607^^^^^1592^1614^i = lineStart + lineLength;^[CLASS] TokenStream  [METHOD] getLine [RETURN_TYPE] String   [VARIABLES] boolean  containsEscape  dirtyLine  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  xmlIsAttribute  xmlIsTagContent  double  dval  number  Reader  sourceReader  int[]  ungetBuffer  String  X  name  numString  regExpFlags  s  sourceString  str  string  IOException  ioe  ObjToIntMap  allStrings  int  EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEnd  lineEndChar  lineLength  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  char[]  sourceBuffer  stringBuffer  tmp  Parser  parser  
[buglab_swap_variables]^int i = lineLength + lineStart;^1597^^^^^1592^1614^int i = lineStart + lineLength;^[CLASS] TokenStream  [METHOD] getLine [RETURN_TYPE] String   [VARIABLES] boolean  containsEscape  dirtyLine  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  xmlIsAttribute  xmlIsTagContent  double  dval  number  Reader  sourceReader  int[]  ungetBuffer  String  X  name  numString  regExpFlags  s  sourceString  str  string  IOException  ioe  ObjToIntMap  allStrings  int  EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEnd  lineEndChar  lineLength  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  char[]  sourceBuffer  stringBuffer  tmp  Parser  parser  
[buglab_swap_variables]^if  ( sourceEnd == i )  {^1598^^^^^1583^1613^if  ( i == sourceEnd )  {^[CLASS] TokenStream  [METHOD] getLine [RETURN_TYPE] String   [VARIABLES] boolean  containsEscape  dirtyLine  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  xmlIsAttribute  xmlIsTagContent  double  dval  number  Reader  sourceReader  int[]  ungetBuffer  String  X  name  numString  regExpFlags  s  sourceString  str  string  IOException  ioe  ObjToIntMap  allStrings  int  EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEnd  lineEndChar  lineLength  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  char[]  sourceBuffer  stringBuffer  tmp  Parser  parser  
[buglab_swap_variables]^i = lineLength + lineStart;^1607^^^^^1592^1622^i = lineStart + lineLength;^[CLASS] TokenStream  [METHOD] getLine [RETURN_TYPE] String   [VARIABLES] boolean  containsEscape  dirtyLine  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  xmlIsAttribute  xmlIsTagContent  double  dval  number  Reader  sourceReader  int[]  ungetBuffer  String  X  name  numString  regExpFlags  s  sourceString  str  string  IOException  ioe  ObjToIntMap  allStrings  int  EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEnd  lineEndChar  lineLength  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  char[]  sourceBuffer  stringBuffer  tmp  Parser  parser  
[buglab_swap_variables]^int i = lineLength + lineStart;^1597^^^^^1582^1612^int i = lineStart + lineLength;^[CLASS] TokenStream  [METHOD] getLine [RETURN_TYPE] String   [VARIABLES] boolean  containsEscape  dirtyLine  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  xmlIsAttribute  xmlIsTagContent  double  dval  number  Reader  sourceReader  int[]  ungetBuffer  String  X  name  numString  regExpFlags  s  sourceString  str  string  IOException  ioe  ObjToIntMap  allStrings  int  EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEnd  lineEndChar  lineLength  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  char[]  sourceBuffer  stringBuffer  tmp  Parser  parser  
[buglab_swap_variables]^return new String ( sourceBuffer, lineLength, lineStart ) ;^1615^^^^^1600^1630^return new String ( sourceBuffer, lineStart, lineLength ) ;^[CLASS] TokenStream  [METHOD] getLine [RETURN_TYPE] String   [VARIABLES] boolean  containsEscape  dirtyLine  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  xmlIsAttribute  xmlIsTagContent  double  dval  number  Reader  sourceReader  int[]  ungetBuffer  String  X  name  numString  regExpFlags  s  sourceString  str  string  IOException  ioe  ObjToIntMap  allStrings  int  EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEnd  lineEndChar  lineLength  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  char[]  sourceBuffer  stringBuffer  tmp  Parser  parser  
[buglab_swap_variables]^return new String ( sourceBuffer, lineStart ) ;^1615^^^^^1600^1630^return new String ( sourceBuffer, lineStart, lineLength ) ;^[CLASS] TokenStream  [METHOD] getLine [RETURN_TYPE] String   [VARIABLES] boolean  containsEscape  dirtyLine  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  xmlIsAttribute  xmlIsTagContent  double  dval  number  Reader  sourceReader  int[]  ungetBuffer  String  X  name  numString  regExpFlags  s  sourceString  str  string  IOException  ioe  ObjToIntMap  allStrings  int  EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEnd  lineEndChar  lineLength  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  char[]  sourceBuffer  stringBuffer  tmp  Parser  parser  
[buglab_swap_variables]^return new String ( lineLength, lineStart, sourceBuffer ) ;^1615^^^^^1600^1630^return new String ( sourceBuffer, lineStart, lineLength ) ;^[CLASS] TokenStream  [METHOD] getLine [RETURN_TYPE] String   [VARIABLES] boolean  containsEscape  dirtyLine  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  xmlIsAttribute  xmlIsTagContent  double  dval  number  Reader  sourceReader  int[]  ungetBuffer  String  X  name  numString  regExpFlags  s  sourceString  str  string  IOException  ioe  ObjToIntMap  allStrings  int  EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEnd  lineEndChar  lineLength  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  char[]  sourceBuffer  stringBuffer  tmp  Parser  parser  
[buglab_swap_variables]^return new String (  lineStart, lineLength ) ;^1615^^^^^1600^1630^return new String ( sourceBuffer, lineStart, lineLength ) ;^[CLASS] TokenStream  [METHOD] getLine [RETURN_TYPE] String   [VARIABLES] boolean  containsEscape  dirtyLine  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  xmlIsAttribute  xmlIsTagContent  double  dval  number  Reader  sourceReader  int[]  ungetBuffer  String  X  name  numString  regExpFlags  s  sourceString  str  string  IOException  ioe  ObjToIntMap  allStrings  int  EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEnd  lineEndChar  lineLength  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  char[]  sourceBuffer  stringBuffer  tmp  Parser  parser  
[buglab_swap_variables]^return new String ( sourceBuffer,  lineLength ) ;^1615^^^^^1600^1630^return new String ( sourceBuffer, lineStart, lineLength ) ;^[CLASS] TokenStream  [METHOD] getLine [RETURN_TYPE] String   [VARIABLES] boolean  containsEscape  dirtyLine  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  xmlIsAttribute  xmlIsTagContent  double  dval  number  Reader  sourceReader  int[]  ungetBuffer  String  X  name  numString  regExpFlags  s  sourceString  str  string  IOException  ioe  ObjToIntMap  allStrings  int  EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEnd  lineEndChar  lineLength  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  char[]  sourceBuffer  stringBuffer  tmp  Parser  parser  
[buglab_swap_variables]^return new String ( lineStart, sourceBuffer, lineLength ) ;^1615^^^^^1600^1630^return new String ( sourceBuffer, lineStart, lineLength ) ;^[CLASS] TokenStream  [METHOD] getLine [RETURN_TYPE] String   [VARIABLES] boolean  containsEscape  dirtyLine  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  xmlIsAttribute  xmlIsTagContent  double  dval  number  Reader  sourceReader  int[]  ungetBuffer  String  X  name  numString  regExpFlags  s  sourceString  str  string  IOException  ioe  ObjToIntMap  allStrings  int  EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEnd  lineEndChar  lineLength  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  char[]  sourceBuffer  stringBuffer  tmp  Parser  parser  
[buglab_swap_variables]^int lineLength = lineStart - sourceCursor;^1591^^^^^1576^1606^int lineLength = sourceCursor - lineStart;^[CLASS] TokenStream  [METHOD] getLine [RETURN_TYPE] String   [VARIABLES] boolean  containsEscape  dirtyLine  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  xmlIsAttribute  xmlIsTagContent  double  dval  number  Reader  sourceReader  int[]  ungetBuffer  String  X  name  numString  regExpFlags  s  sourceString  str  string  IOException  ioe  ObjToIntMap  allStrings  int  EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEnd  lineEndChar  lineLength  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  char[]  sourceBuffer  stringBuffer  tmp  Parser  parser  
[buglab_swap_variables]^for  ( ; sourceEnd != lineEnd; ++lineEnd )  {^1581^^^^^1578^1587^for  ( ; lineEnd != sourceEnd; ++lineEnd )  {^[CLASS] TokenStream  [METHOD] getLine [RETURN_TYPE] String   [VARIABLES] boolean  containsEscape  dirtyLine  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  xmlIsAttribute  xmlIsTagContent  double  dval  number  Reader  sourceReader  int[]  ungetBuffer  String  X  name  numString  regExpFlags  s  sourceString  str  string  IOException  ioe  ObjToIntMap  allStrings  int  EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEnd  lineEndChar  lineLength  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  char[]  sourceBuffer  stringBuffer  tmp  Parser  parser  
[buglab_swap_variables]^int c = lineEnd.charAt ( sourceString ) ;^1582^^^^^1578^1587^int c = sourceString.charAt ( lineEnd ) ;^[CLASS] TokenStream  [METHOD] getLine [RETURN_TYPE] String   [VARIABLES] boolean  containsEscape  dirtyLine  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  xmlIsAttribute  xmlIsTagContent  double  dval  number  Reader  sourceReader  int[]  ungetBuffer  String  X  name  numString  regExpFlags  s  sourceString  str  string  IOException  ioe  ObjToIntMap  allStrings  int  EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEnd  lineEndChar  lineLength  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  char[]  sourceBuffer  stringBuffer  tmp  Parser  parser  
[buglab_swap_variables]^int c = lineEnd.charAt ( sourceString ) ;^1582^^^^^1567^1597^int c = sourceString.charAt ( lineEnd ) ;^[CLASS] TokenStream  [METHOD] getLine [RETURN_TYPE] String   [VARIABLES] boolean  containsEscape  dirtyLine  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  xmlIsAttribute  xmlIsTagContent  double  dval  number  Reader  sourceReader  int[]  ungetBuffer  String  X  name  numString  regExpFlags  s  sourceString  str  string  IOException  ioe  ObjToIntMap  allStrings  int  EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEnd  lineEndChar  lineLength  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  char[]  sourceBuffer  stringBuffer  tmp  Parser  parser  
[buglab_swap_variables]^return lineEnd.substring ( lineStart, sourceString ) ;^1588^^^^^1573^1603^return sourceString.substring ( lineStart, lineEnd ) ;^[CLASS] TokenStream  [METHOD] getLine [RETURN_TYPE] String   [VARIABLES] boolean  containsEscape  dirtyLine  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  xmlIsAttribute  xmlIsTagContent  double  dval  number  Reader  sourceReader  int[]  ungetBuffer  String  X  name  numString  regExpFlags  s  sourceString  str  string  IOException  ioe  ObjToIntMap  allStrings  int  EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEnd  lineEndChar  lineLength  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  char[]  sourceBuffer  stringBuffer  tmp  Parser  parser  
[buglab_swap_variables]^return sourceString.substring ( lineStart ) ;^1588^^^^^1573^1603^return sourceString.substring ( lineStart, lineEnd ) ;^[CLASS] TokenStream  [METHOD] getLine [RETURN_TYPE] String   [VARIABLES] boolean  containsEscape  dirtyLine  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  xmlIsAttribute  xmlIsTagContent  double  dval  number  Reader  sourceReader  int[]  ungetBuffer  String  X  name  numString  regExpFlags  s  sourceString  str  string  IOException  ioe  ObjToIntMap  allStrings  int  EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEnd  lineEndChar  lineLength  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  char[]  sourceBuffer  stringBuffer  tmp  Parser  parser  
[buglab_swap_variables]^return lineStart.substring ( sourceString, lineEnd ) ;^1588^^^^^1573^1603^return sourceString.substring ( lineStart, lineEnd ) ;^[CLASS] TokenStream  [METHOD] getLine [RETURN_TYPE] String   [VARIABLES] boolean  containsEscape  dirtyLine  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  xmlIsAttribute  xmlIsTagContent  double  dval  number  Reader  sourceReader  int[]  ungetBuffer  String  X  name  numString  regExpFlags  s  sourceString  str  string  IOException  ioe  ObjToIntMap  allStrings  int  EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEnd  lineEndChar  lineLength  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  char[]  sourceBuffer  stringBuffer  tmp  Parser  parser  
[buglab_swap_variables]^return sourceString.substring ( lineEnd, lineStart ) ;^1588^^^^^1573^1603^return sourceString.substring ( lineStart, lineEnd ) ;^[CLASS] TokenStream  [METHOD] getLine [RETURN_TYPE] String   [VARIABLES] boolean  containsEscape  dirtyLine  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  xmlIsAttribute  xmlIsTagContent  double  dval  number  Reader  sourceReader  int[]  ungetBuffer  String  X  name  numString  regExpFlags  s  sourceString  str  string  IOException  ioe  ObjToIntMap  allStrings  int  EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEnd  lineEndChar  lineLength  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  char[]  sourceBuffer  stringBuffer  tmp  Parser  parser  
[buglab_swap_variables]^return sourceString.substring (  lineEnd ) ;^1588^^^^^1573^1603^return sourceString.substring ( lineStart, lineEnd ) ;^[CLASS] TokenStream  [METHOD] getLine [RETURN_TYPE] String   [VARIABLES] boolean  containsEscape  dirtyLine  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  xmlIsAttribute  xmlIsTagContent  double  dval  number  Reader  sourceReader  int[]  ungetBuffer  String  X  name  numString  regExpFlags  s  sourceString  str  string  IOException  ioe  ObjToIntMap  allStrings  int  EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEnd  lineEndChar  lineLength  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  char[]  sourceBuffer  stringBuffer  tmp  Parser  parser  
[buglab_swap_variables]^if  ( lineEnd >= 0 )  {^1578^^^^^1563^1593^if  ( lineEndChar >= 0 )  {^[CLASS] TokenStream  [METHOD] getLine [RETURN_TYPE] String   [VARIABLES] boolean  containsEscape  dirtyLine  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  xmlIsAttribute  xmlIsTagContent  double  dval  number  Reader  sourceReader  int[]  ungetBuffer  String  X  name  numString  regExpFlags  s  sourceString  str  string  IOException  ioe  ObjToIntMap  allStrings  int  EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEnd  lineEndChar  lineLength  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  char[]  sourceBuffer  stringBuffer  tmp  Parser  parser  
[buglab_swap_variables]^System.arraycopy ( tmp, 0, sourceBuffer, 0, sourceEnd ) ;^1631^^^^^1619^1642^System.arraycopy ( sourceBuffer, 0, tmp, 0, sourceEnd ) ;^[CLASS] TokenStream  [METHOD] fillSourceBuffer [RETURN_TYPE] boolean   [VARIABLES] boolean  containsEscape  dirtyLine  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  xmlIsAttribute  xmlIsTagContent  double  dval  number  Reader  sourceReader  int[]  ungetBuffer  String  X  name  numString  regExpFlags  s  sourceString  str  string  ObjToIntMap  allStrings  int  EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEnd  lineEndChar  lineLength  lineStart  lineno  n  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  char[]  sourceBuffer  stringBuffer  tmp  Parser  parser  
[buglab_swap_variables]^System.arraycopy ( sourceBuffer, 0,  0, sourceEnd ) ;^1631^^^^^1619^1642^System.arraycopy ( sourceBuffer, 0, tmp, 0, sourceEnd ) ;^[CLASS] TokenStream  [METHOD] fillSourceBuffer [RETURN_TYPE] boolean   [VARIABLES] boolean  containsEscape  dirtyLine  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  xmlIsAttribute  xmlIsTagContent  double  dval  number  Reader  sourceReader  int[]  ungetBuffer  String  X  name  numString  regExpFlags  s  sourceString  str  string  ObjToIntMap  allStrings  int  EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEnd  lineEndChar  lineLength  lineStart  lineno  n  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  char[]  sourceBuffer  stringBuffer  tmp  Parser  parser  
[buglab_swap_variables]^System.arraycopy (  0, tmp, 0, sourceEnd ) ;^1631^^^^^1619^1642^System.arraycopy ( sourceBuffer, 0, tmp, 0, sourceEnd ) ;^[CLASS] TokenStream  [METHOD] fillSourceBuffer [RETURN_TYPE] boolean   [VARIABLES] boolean  containsEscape  dirtyLine  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  xmlIsAttribute  xmlIsTagContent  double  dval  number  Reader  sourceReader  int[]  ungetBuffer  String  X  name  numString  regExpFlags  s  sourceString  str  string  ObjToIntMap  allStrings  int  EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEnd  lineEndChar  lineLength  lineStart  lineno  n  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  char[]  sourceBuffer  stringBuffer  tmp  Parser  parser  
[buglab_swap_variables]^System.arraycopy ( sourceBuffer, 0, sourceEnd, 0, tmp ) ;^1631^^^^^1619^1642^System.arraycopy ( sourceBuffer, 0, tmp, 0, sourceEnd ) ;^[CLASS] TokenStream  [METHOD] fillSourceBuffer [RETURN_TYPE] boolean   [VARIABLES] boolean  containsEscape  dirtyLine  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  xmlIsAttribute  xmlIsTagContent  double  dval  number  Reader  sourceReader  int[]  ungetBuffer  String  X  name  numString  regExpFlags  s  sourceString  str  string  ObjToIntMap  allStrings  int  EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEnd  lineEndChar  lineLength  lineStart  lineno  n  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  char[]  sourceBuffer  stringBuffer  tmp  Parser  parser  
[buglab_swap_variables]^System.arraycopy ( sourceBuffer, 0, tmp, 0 ) ;^1631^^^^^1619^1642^System.arraycopy ( sourceBuffer, 0, tmp, 0, sourceEnd ) ;^[CLASS] TokenStream  [METHOD] fillSourceBuffer [RETURN_TYPE] boolean   [VARIABLES] boolean  containsEscape  dirtyLine  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  xmlIsAttribute  xmlIsTagContent  double  dval  number  Reader  sourceReader  int[]  ungetBuffer  String  X  name  numString  regExpFlags  s  sourceString  str  string  ObjToIntMap  allStrings  int  EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEnd  lineEndChar  lineLength  lineStart  lineno  n  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  char[]  sourceBuffer  stringBuffer  tmp  Parser  parser  
[buglab_swap_variables]^System.arraycopy ( sourceEnd, lineStart, sourceBuffer, 0, sourceBuffer - lineStart ) ;^1624^1625^^^^1619^1642^System.arraycopy ( sourceBuffer, lineStart, sourceBuffer, 0, sourceEnd - lineStart ) ;^[CLASS] TokenStream  [METHOD] fillSourceBuffer [RETURN_TYPE] boolean   [VARIABLES] boolean  containsEscape  dirtyLine  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  xmlIsAttribute  xmlIsTagContent  double  dval  number  Reader  sourceReader  int[]  ungetBuffer  String  X  name  numString  regExpFlags  s  sourceString  str  string  ObjToIntMap  allStrings  int  EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEnd  lineEndChar  lineLength  lineStart  lineno  n  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  char[]  sourceBuffer  stringBuffer  tmp  Parser  parser  
[buglab_swap_variables]^System.arraycopy (  lineStart, sourceBuffer, 0, sourceEnd - lineStart ) ;^1624^1625^^^^1619^1642^System.arraycopy ( sourceBuffer, lineStart, sourceBuffer, 0, sourceEnd - lineStart ) ;^[CLASS] TokenStream  [METHOD] fillSourceBuffer [RETURN_TYPE] boolean   [VARIABLES] boolean  containsEscape  dirtyLine  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  xmlIsAttribute  xmlIsTagContent  double  dval  number  Reader  sourceReader  int[]  ungetBuffer  String  X  name  numString  regExpFlags  s  sourceString  str  string  ObjToIntMap  allStrings  int  EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEnd  lineEndChar  lineLength  lineStart  lineno  n  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  char[]  sourceBuffer  stringBuffer  tmp  Parser  parser  
[buglab_swap_variables]^System.arraycopy ( sourceBuffer, sourceEnd, sourceBuffer, 0, lineStart - lineStart ) ;^1624^1625^^^^1619^1642^System.arraycopy ( sourceBuffer, lineStart, sourceBuffer, 0, sourceEnd - lineStart ) ;^[CLASS] TokenStream  [METHOD] fillSourceBuffer [RETURN_TYPE] boolean   [VARIABLES] boolean  containsEscape  dirtyLine  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  xmlIsAttribute  xmlIsTagContent  double  dval  number  Reader  sourceReader  int[]  ungetBuffer  String  X  name  numString  regExpFlags  s  sourceString  str  string  ObjToIntMap  allStrings  int  EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEnd  lineEndChar  lineLength  lineStart  lineno  n  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  char[]  sourceBuffer  stringBuffer  tmp  Parser  parser  
[buglab_swap_variables]^System.arraycopy ( sourceBuffer,  sourceBuffer, 0, sourceEnd - lineStart ) ;^1624^1625^^^^1619^1642^System.arraycopy ( sourceBuffer, lineStart, sourceBuffer, 0, sourceEnd - lineStart ) ;^[CLASS] TokenStream  [METHOD] fillSourceBuffer [RETURN_TYPE] boolean   [VARIABLES] boolean  containsEscape  dirtyLine  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  xmlIsAttribute  xmlIsTagContent  double  dval  number  Reader  sourceReader  int[]  ungetBuffer  String  X  name  numString  regExpFlags  s  sourceString  str  string  ObjToIntMap  allStrings  int  EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEnd  lineEndChar  lineLength  lineStart  lineno  n  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  char[]  sourceBuffer  stringBuffer  tmp  Parser  parser  
[buglab_swap_variables]^System.arraycopy ( sourceBuffer, lineStart, sourceBuffer, 0 - lineStart ) ;^1624^1625^^^^1619^1642^System.arraycopy ( sourceBuffer, lineStart, sourceBuffer, 0, sourceEnd - lineStart ) ;^[CLASS] TokenStream  [METHOD] fillSourceBuffer [RETURN_TYPE] boolean   [VARIABLES] boolean  containsEscape  dirtyLine  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  xmlIsAttribute  xmlIsTagContent  double  dval  number  Reader  sourceReader  int[]  ungetBuffer  String  X  name  numString  regExpFlags  s  sourceString  str  string  ObjToIntMap  allStrings  int  EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEnd  lineEndChar  lineLength  lineStart  lineno  n  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  char[]  sourceBuffer  stringBuffer  tmp  Parser  parser  
[buglab_swap_variables]^System.arraycopy ( lineStart, sourceBuffer, sourceBuffer, 0, sourceEnd - lineStart ) ;^1624^1625^^^^1619^1642^System.arraycopy ( sourceBuffer, lineStart, sourceBuffer, 0, sourceEnd - lineStart ) ;^[CLASS] TokenStream  [METHOD] fillSourceBuffer [RETURN_TYPE] boolean   [VARIABLES] boolean  containsEscape  dirtyLine  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  xmlIsAttribute  xmlIsTagContent  double  dval  number  Reader  sourceReader  int[]  ungetBuffer  String  X  name  numString  regExpFlags  s  sourceString  str  string  ObjToIntMap  allStrings  int  EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEnd  lineEndChar  lineLength  lineStart  lineno  n  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  char[]  sourceBuffer  stringBuffer  tmp  Parser  parser  
[buglab_swap_variables]^System.arraycopy ( sourceEnd, 0, tmp, 0, sourceBuffer ) ;^1631^^^^^1619^1642^System.arraycopy ( sourceBuffer, 0, tmp, 0, sourceEnd ) ;^[CLASS] TokenStream  [METHOD] fillSourceBuffer [RETURN_TYPE] boolean   [VARIABLES] boolean  containsEscape  dirtyLine  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  xmlIsAttribute  xmlIsTagContent  double  dval  number  Reader  sourceReader  int[]  ungetBuffer  String  X  name  numString  regExpFlags  s  sourceString  str  string  ObjToIntMap  allStrings  int  EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEnd  lineEndChar  lineLength  lineStart  lineno  n  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  char[]  sourceBuffer  stringBuffer  tmp  Parser  parser  
[buglab_swap_variables]^int n = sourceBuffer.read ( sourceReader, sourceEnd, sourceBuffer.length - sourceEnd ) ;^1635^1636^^^^1619^1642^int n = sourceReader.read ( sourceBuffer, sourceEnd, sourceBuffer.length - sourceEnd ) ;^[CLASS] TokenStream  [METHOD] fillSourceBuffer [RETURN_TYPE] boolean   [VARIABLES] boolean  containsEscape  dirtyLine  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  xmlIsAttribute  xmlIsTagContent  double  dval  number  Reader  sourceReader  int[]  ungetBuffer  String  X  name  numString  regExpFlags  s  sourceString  str  string  ObjToIntMap  allStrings  int  EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEnd  lineEndChar  lineLength  lineStart  lineno  n  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  char[]  sourceBuffer  stringBuffer  tmp  Parser  parser  
[buglab_swap_variables]^int n = sourceReader.read ( sourceEnd, sourceBuffer, sourceBuffer.length - sourceEnd ) ;^1635^1636^^^^1619^1642^int n = sourceReader.read ( sourceBuffer, sourceEnd, sourceBuffer.length - sourceEnd ) ;^[CLASS] TokenStream  [METHOD] fillSourceBuffer [RETURN_TYPE] boolean   [VARIABLES] boolean  containsEscape  dirtyLine  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  xmlIsAttribute  xmlIsTagContent  double  dval  number  Reader  sourceReader  int[]  ungetBuffer  String  X  name  numString  regExpFlags  s  sourceString  str  string  ObjToIntMap  allStrings  int  EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEnd  lineEndChar  lineLength  lineStart  lineno  n  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  char[]  sourceBuffer  stringBuffer  tmp  Parser  parser  
[buglab_swap_variables]^int n = sourceReader.read (  sourceEnd, sourceBuffer.length - sourceEnd ) ;^1635^1636^^^^1619^1642^int n = sourceReader.read ( sourceBuffer, sourceEnd, sourceBuffer.length - sourceEnd ) ;^[CLASS] TokenStream  [METHOD] fillSourceBuffer [RETURN_TYPE] boolean   [VARIABLES] boolean  containsEscape  dirtyLine  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  xmlIsAttribute  xmlIsTagContent  double  dval  number  Reader  sourceReader  int[]  ungetBuffer  String  X  name  numString  regExpFlags  s  sourceString  str  string  ObjToIntMap  allStrings  int  EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEnd  lineEndChar  lineLength  lineStart  lineno  n  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  char[]  sourceBuffer  stringBuffer  tmp  Parser  parser  
[buglab_swap_variables]^int n = sourceReader.read ( sourceBuffer, sourceBuffer.length, sourceEnd - sourceEnd ) ;^1635^1636^^^^1619^1642^int n = sourceReader.read ( sourceBuffer, sourceEnd, sourceBuffer.length - sourceEnd ) ;^[CLASS] TokenStream  [METHOD] fillSourceBuffer [RETURN_TYPE] boolean   [VARIABLES] boolean  containsEscape  dirtyLine  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  xmlIsAttribute  xmlIsTagContent  double  dval  number  Reader  sourceReader  int[]  ungetBuffer  String  X  name  numString  regExpFlags  s  sourceString  str  string  ObjToIntMap  allStrings  int  EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEnd  lineEndChar  lineLength  lineStart  lineno  n  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  char[]  sourceBuffer  stringBuffer  tmp  Parser  parser  
[buglab_swap_variables]^int n = sourceReader.read ( sourceBuffer,  sourceBuffer.length - sourceEnd ) ;^1635^1636^^^^1619^1642^int n = sourceReader.read ( sourceBuffer, sourceEnd, sourceBuffer.length - sourceEnd ) ;^[CLASS] TokenStream  [METHOD] fillSourceBuffer [RETURN_TYPE] boolean   [VARIABLES] boolean  containsEscape  dirtyLine  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  xmlIsAttribute  xmlIsTagContent  double  dval  number  Reader  sourceReader  int[]  ungetBuffer  String  X  name  numString  regExpFlags  s  sourceString  str  string  ObjToIntMap  allStrings  int  EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEnd  lineEndChar  lineLength  lineStart  lineno  n  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  char[]  sourceBuffer  stringBuffer  tmp  Parser  parser  
[buglab_swap_variables]^int n = sourceReader.read ( sourceBuffer.length, sourceEnd, sourceBuffer - sourceEnd ) ;^1635^1636^^^^1619^1642^int n = sourceReader.read ( sourceBuffer, sourceEnd, sourceBuffer.length - sourceEnd ) ;^[CLASS] TokenStream  [METHOD] fillSourceBuffer [RETURN_TYPE] boolean   [VARIABLES] boolean  containsEscape  dirtyLine  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  xmlIsAttribute  xmlIsTagContent  double  dval  number  Reader  sourceReader  int[]  ungetBuffer  String  X  name  numString  regExpFlags  s  sourceString  str  string  ObjToIntMap  allStrings  int  EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEnd  lineEndChar  lineLength  lineStart  lineno  n  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  char[]  sourceBuffer  stringBuffer  tmp  Parser  parser  
[buglab_swap_variables]^int n = sourceReader.read ( sourceBuffer, sourceEnd - sourceEnd ) ;^1635^1636^^^^1619^1642^int n = sourceReader.read ( sourceBuffer, sourceEnd, sourceBuffer.length - sourceEnd ) ;^[CLASS] TokenStream  [METHOD] fillSourceBuffer [RETURN_TYPE] boolean   [VARIABLES] boolean  containsEscape  dirtyLine  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  xmlIsAttribute  xmlIsTagContent  double  dval  number  Reader  sourceReader  int[]  ungetBuffer  String  X  name  numString  regExpFlags  s  sourceString  str  string  ObjToIntMap  allStrings  int  EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEnd  lineEndChar  lineLength  lineStart  lineno  n  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  char[]  sourceBuffer  stringBuffer  tmp  Parser  parser  
[buglab_swap_variables]^int n = sourceEnd.read ( sourceBuffer, sourceReader, sourceBuffer.length - sourceEnd ) ;^1635^1636^^^^1619^1642^int n = sourceReader.read ( sourceBuffer, sourceEnd, sourceBuffer.length - sourceEnd ) ;^[CLASS] TokenStream  [METHOD] fillSourceBuffer [RETURN_TYPE] boolean   [VARIABLES] boolean  containsEscape  dirtyLine  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  xmlIsAttribute  xmlIsTagContent  double  dval  number  Reader  sourceReader  int[]  ungetBuffer  String  X  name  numString  regExpFlags  s  sourceString  str  string  ObjToIntMap  allStrings  int  EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEnd  lineEndChar  lineLength  lineStart  lineno  n  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  char[]  sourceBuffer  stringBuffer  tmp  Parser  parser  
