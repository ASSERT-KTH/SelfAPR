[buglab_swap_variables]^z = Frac_mask & d0;^208^^^^^193^223^z = d0 & Frac_mask;^[CLASS] DToA  [METHOD] d2b [RETURN_TYPE] BigInteger   double d int[] e int[] bits [VARIABLES] byte[]  dbl_bits  boolean  double[]  bigtens  tens  double  d  int[]  bits  dtoaModes  e  int  Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  d0  d1  de  digit  i  k  n_bigtens  offset  val  x  y  z  long  Exp_msk1L  Frac_maskL  dBits  
[buglab_swap_variables]^if  (  ( de =  ( Exp_shift >>> d0 )  )  != 0 ) z |= Exp_msk1;^211^212^^^^196^226^if  (  ( de =  ( d0 >>> Exp_shift )  )  != 0 ) z |= Exp_msk1;^[CLASS] DToA  [METHOD] d2b [RETURN_TYPE] BigInteger   double d int[] e int[] bits [VARIABLES] byte[]  dbl_bits  boolean  double[]  bigtens  tens  double  d  int[]  bits  dtoaModes  e  int  Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  d0  d1  de  digit  i  k  n_bigtens  offset  val  x  y  z  long  Exp_msk1L  Frac_maskL  dBits  
[buglab_swap_variables]^if  (  ( de =  ( Exp_msk1 >>> Exp_shift )  )  != 0 ) z |= d0;^211^212^^^^196^226^if  (  ( de =  ( d0 >>> Exp_shift )  )  != 0 ) z |= Exp_msk1;^[CLASS] DToA  [METHOD] d2b [RETURN_TYPE] BigInteger   double d int[] e int[] bits [VARIABLES] byte[]  dbl_bits  boolean  double[]  bigtens  tens  double  d  int[]  bits  dtoaModes  e  int  Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  d0  d1  de  digit  i  k  n_bigtens  offset  val  x  y  z  long  Exp_msk1L  Frac_maskL  dBits  
[buglab_swap_variables]^if  (  ( d1 = y )  != 0 )  {^214^^^^^199^229^if  (  ( y = d1 )  != 0 )  {^[CLASS] DToA  [METHOD] d2b [RETURN_TYPE] BigInteger   double d int[] e int[] bits [VARIABLES] byte[]  dbl_bits  boolean  double[]  bigtens  tens  double  d  int[]  bits  dtoaModes  e  int  Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  d0  d1  de  digit  i  k  n_bigtens  offset  val  x  y  z  long  Exp_msk1L  Frac_maskL  dBits  
[buglab_swap_variables]^stuffBits ( z, 0, dbl_bits ) ;^232^^^^^214^235^stuffBits ( dbl_bits, 0, z ) ;^[CLASS] DToA  [METHOD] d2b [RETURN_TYPE] BigInteger   double d int[] e int[] bits [VARIABLES] byte[]  dbl_bits  boolean  double[]  bigtens  tens  double  d  int[]  bits  dtoaModes  e  int  Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  d0  d1  de  digit  i  k  n_bigtens  offset  val  x  y  z  long  Exp_msk1L  Frac_maskL  dBits  
[buglab_swap_variables]^stuffBits (  0, z ) ;^232^^^^^214^235^stuffBits ( dbl_bits, 0, z ) ;^[CLASS] DToA  [METHOD] d2b [RETURN_TYPE] BigInteger   double d int[] e int[] bits [VARIABLES] byte[]  dbl_bits  boolean  double[]  bigtens  tens  double  d  int[]  bits  dtoaModes  e  int  Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  d0  d1  de  digit  i  k  n_bigtens  offset  val  x  y  z  long  Exp_msk1L  Frac_maskL  dBits  
[buglab_swap_variables]^stuffBits ( dbl_bits, 0 ) ;^232^^^^^214^235^stuffBits ( dbl_bits, 0, z ) ;^[CLASS] DToA  [METHOD] d2b [RETURN_TYPE] BigInteger   double d int[] e int[] bits [VARIABLES] byte[]  dbl_bits  boolean  double[]  bigtens  tens  double  d  int[]  bits  dtoaModes  e  int  Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  d0  d1  de  digit  i  k  n_bigtens  offset  val  x  y  z  long  Exp_msk1L  Frac_maskL  dBits  
[buglab_swap_variables]^stuffBits ( y, 4, dbl_bits ) ;^223^^^^^208^238^stuffBits ( dbl_bits, 4, y ) ;^[CLASS] DToA  [METHOD] d2b [RETURN_TYPE] BigInteger   double d int[] e int[] bits [VARIABLES] byte[]  dbl_bits  boolean  double[]  bigtens  tens  double  d  int[]  bits  dtoaModes  e  int  Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  d0  d1  de  digit  i  k  n_bigtens  offset  val  x  y  z  long  Exp_msk1L  Frac_maskL  dBits  
[buglab_swap_variables]^stuffBits (  4, y ) ;^223^^^^^208^238^stuffBits ( dbl_bits, 4, y ) ;^[CLASS] DToA  [METHOD] d2b [RETURN_TYPE] BigInteger   double d int[] e int[] bits [VARIABLES] byte[]  dbl_bits  boolean  double[]  bigtens  tens  double  d  int[]  bits  dtoaModes  e  int  Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  d0  d1  de  digit  i  k  n_bigtens  offset  val  x  y  z  long  Exp_msk1L  Frac_maskL  dBits  
[buglab_swap_variables]^stuffBits ( dbl_bits, 4 ) ;^223^^^^^208^238^stuffBits ( dbl_bits, 4, y ) ;^[CLASS] DToA  [METHOD] d2b [RETURN_TYPE] BigInteger   double d int[] e int[] bits [VARIABLES] byte[]  dbl_bits  boolean  double[]  bigtens  tens  double  d  int[]  bits  dtoaModes  e  int  Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  d0  d1  de  digit  i  k  n_bigtens  offset  val  x  y  z  long  Exp_msk1L  Frac_maskL  dBits  
[buglab_swap_variables]^stuffBits ( k, 4, y | z <<  ( 32 - dbl_bits )  ) ;^219^^^^^204^234^stuffBits ( dbl_bits, 4, y | z <<  ( 32 - k )  ) ;^[CLASS] DToA  [METHOD] d2b [RETURN_TYPE] BigInteger   double d int[] e int[] bits [VARIABLES] byte[]  dbl_bits  boolean  double[]  bigtens  tens  double  d  int[]  bits  dtoaModes  e  int  Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  d0  d1  de  digit  i  k  n_bigtens  offset  val  x  y  z  long  Exp_msk1L  Frac_maskL  dBits  
[buglab_swap_variables]^stuffBits (  4, y | z <<  ( 32 - k )  ) ;^219^^^^^204^234^stuffBits ( dbl_bits, 4, y | z <<  ( 32 - k )  ) ;^[CLASS] DToA  [METHOD] d2b [RETURN_TYPE] BigInteger   double d int[] e int[] bits [VARIABLES] byte[]  dbl_bits  boolean  double[]  bigtens  tens  double  d  int[]  bits  dtoaModes  e  int  Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  d0  d1  de  digit  i  k  n_bigtens  offset  val  x  y  z  long  Exp_msk1L  Frac_maskL  dBits  
[buglab_swap_variables]^stuffBits ( dbl_bits, 4, k | z <<  ( 32 - y )  ) ;^219^^^^^204^234^stuffBits ( dbl_bits, 4, y | z <<  ( 32 - k )  ) ;^[CLASS] DToA  [METHOD] d2b [RETURN_TYPE] BigInteger   double d int[] e int[] bits [VARIABLES] byte[]  dbl_bits  boolean  double[]  bigtens  tens  double  d  int[]  bits  dtoaModes  e  int  Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  d0  d1  de  digit  i  k  n_bigtens  offset  val  x  y  z  long  Exp_msk1L  Frac_maskL  dBits  
[buglab_swap_variables]^stuffBits ( dbl_bits, 4 | z <<  ( 32 - k )  ) ;^219^^^^^204^234^stuffBits ( dbl_bits, 4, y | z <<  ( 32 - k )  ) ;^[CLASS] DToA  [METHOD] d2b [RETURN_TYPE] BigInteger   double d int[] e int[] bits [VARIABLES] byte[]  dbl_bits  boolean  double[]  bigtens  tens  double  d  int[]  bits  dtoaModes  e  int  Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  d0  d1  de  digit  i  k  n_bigtens  offset  val  x  y  z  long  Exp_msk1L  Frac_maskL  dBits  
[buglab_swap_variables]^stuffBits ( dbl_bits, 4, z | y <<  ( 32 - k )  ) ;^219^^^^^204^234^stuffBits ( dbl_bits, 4, y | z <<  ( 32 - k )  ) ;^[CLASS] DToA  [METHOD] d2b [RETURN_TYPE] BigInteger   double d int[] e int[] bits [VARIABLES] byte[]  dbl_bits  boolean  double[]  bigtens  tens  double  d  int[]  bits  dtoaModes  e  int  Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  d0  d1  de  digit  i  k  n_bigtens  offset  val  x  y  z  long  Exp_msk1L  Frac_maskL  dBits  
[buglab_swap_variables]^stuffBits ( dbl_bits, 4, y | k <<  ( 32 - z )  ) ;^219^^^^^204^234^stuffBits ( dbl_bits, 4, y | z <<  ( 32 - k )  ) ;^[CLASS] DToA  [METHOD] d2b [RETURN_TYPE] BigInteger   double d int[] e int[] bits [VARIABLES] byte[]  dbl_bits  boolean  double[]  bigtens  tens  double  d  int[]  bits  dtoaModes  e  int  Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  d0  d1  de  digit  i  k  n_bigtens  offset  val  x  y  z  long  Exp_msk1L  Frac_maskL  dBits  
[buglab_swap_variables]^stuffBits ( z, 0, dbl_bits ) ;^224^^^^^209^239^stuffBits ( dbl_bits, 0, z ) ;^[CLASS] DToA  [METHOD] d2b [RETURN_TYPE] BigInteger   double d int[] e int[] bits [VARIABLES] byte[]  dbl_bits  boolean  double[]  bigtens  tens  double  d  int[]  bits  dtoaModes  e  int  Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  d0  d1  de  digit  i  k  n_bigtens  offset  val  x  y  z  long  Exp_msk1L  Frac_maskL  dBits  
[buglab_swap_variables]^stuffBits (  0, z ) ;^224^^^^^209^239^stuffBits ( dbl_bits, 0, z ) ;^[CLASS] DToA  [METHOD] d2b [RETURN_TYPE] BigInteger   double d int[] e int[] bits [VARIABLES] byte[]  dbl_bits  boolean  double[]  bigtens  tens  double  d  int[]  bits  dtoaModes  e  int  Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  d0  d1  de  digit  i  k  n_bigtens  offset  val  x  y  z  long  Exp_msk1L  Frac_maskL  dBits  
[buglab_swap_variables]^stuffBits ( dbl_bits, 0 ) ;^224^^^^^209^239^stuffBits ( dbl_bits, 0, z ) ;^[CLASS] DToA  [METHOD] d2b [RETURN_TYPE] BigInteger   double d int[] e int[] bits [VARIABLES] byte[]  dbl_bits  boolean  double[]  bigtens  tens  double  d  int[]  bits  dtoaModes  e  int  Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  d0  d1  de  digit  i  k  n_bigtens  offset  val  x  y  z  long  Exp_msk1L  Frac_maskL  dBits  
[buglab_swap_variables]^stuffBits ( z, 4, y | dbl_bits <<  ( 32 - k )  ) ;^219^^^^^204^234^stuffBits ( dbl_bits, 4, y | z <<  ( 32 - k )  ) ;^[CLASS] DToA  [METHOD] d2b [RETURN_TYPE] BigInteger   double d int[] e int[] bits [VARIABLES] byte[]  dbl_bits  boolean  double[]  bigtens  tens  double  d  int[]  bits  dtoaModes  e  int  Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  d0  d1  de  digit  i  k  n_bigtens  offset  val  x  y  z  long  Exp_msk1L  Frac_maskL  dBits  
[buglab_swap_variables]^stuffBits ( z, 0, dbl_bits ) ;^232^^^^^217^247^stuffBits ( dbl_bits, 0, z ) ;^[CLASS] DToA  [METHOD] d2b [RETURN_TYPE] BigInteger   double d int[] e int[] bits [VARIABLES] byte[]  dbl_bits  boolean  double[]  bigtens  tens  double  d  int[]  bits  dtoaModes  e  int  Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  d0  d1  de  digit  i  k  n_bigtens  offset  val  x  y  z  long  Exp_msk1L  Frac_maskL  dBits  
[buglab_swap_variables]^stuffBits (  0, z ) ;^232^^^^^217^247^stuffBits ( dbl_bits, 0, z ) ;^[CLASS] DToA  [METHOD] d2b [RETURN_TYPE] BigInteger   double d int[] e int[] bits [VARIABLES] byte[]  dbl_bits  boolean  double[]  bigtens  tens  double  d  int[]  bits  dtoaModes  e  int  Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  d0  d1  de  digit  i  k  n_bigtens  offset  val  x  y  z  long  Exp_msk1L  Frac_maskL  dBits  
[buglab_swap_variables]^stuffBits ( dbl_bits, 0 ) ;^232^^^^^217^247^stuffBits ( dbl_bits, 0, z ) ;^[CLASS] DToA  [METHOD] d2b [RETURN_TYPE] BigInteger   double d int[] e int[] bits [VARIABLES] byte[]  dbl_bits  boolean  double[]  bigtens  tens  double  d  int[]  bits  dtoaModes  e  int  Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  d0  d1  de  digit  i  k  n_bigtens  offset  val  x  y  z  long  Exp_msk1L  Frac_maskL  dBits  
[buglab_swap_variables]^e[0] = k - Bias -  ( P-1 )  + 1 + de;^241^^^^^236^243^e[0] = de - Bias -  ( P-1 )  + 1 + k;^[CLASS] DToA  [METHOD] d2b [RETURN_TYPE] BigInteger   double d int[] e int[] bits [VARIABLES] byte[]  dbl_bits  boolean  double[]  bigtens  tens  double  d  int[]  bits  dtoaModes  e  int  Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  d0  d1  de  digit  i  k  n_bigtens  offset  val  x  y  z  long  Exp_msk1L  Frac_maskL  dBits  
[buglab_swap_variables]^e[0] = de - k -  ( P-1 )  + 1 + Bias;^241^^^^^236^243^e[0] = de - Bias -  ( P-1 )  + 1 + k;^[CLASS] DToA  [METHOD] d2b [RETURN_TYPE] BigInteger   double d int[] e int[] bits [VARIABLES] byte[]  dbl_bits  boolean  double[]  bigtens  tens  double  d  int[]  bits  dtoaModes  e  int  Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  d0  d1  de  digit  i  k  n_bigtens  offset  val  x  y  z  long  Exp_msk1L  Frac_maskL  dBits  
[buglab_swap_variables]^e[0] = de - Bias -  ( k-1 )  + 1 + P;^241^^^^^236^243^e[0] = de - Bias -  ( P-1 )  + 1 + k;^[CLASS] DToA  [METHOD] d2b [RETURN_TYPE] BigInteger   double d int[] e int[] bits [VARIABLES] byte[]  dbl_bits  boolean  double[]  bigtens  tens  double  d  int[]  bits  dtoaModes  e  int  Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  d0  d1  de  digit  i  k  n_bigtens  offset  val  x  y  z  long  Exp_msk1L  Frac_maskL  dBits  
[buglab_swap_variables]^e[0] = Bias - de -  ( P-1 )  + k;^237^^^^^222^252^e[0] = de - Bias -  ( P-1 )  + k;^[CLASS] DToA  [METHOD] d2b [RETURN_TYPE] BigInteger   double d int[] e int[] bits [VARIABLES] byte[]  dbl_bits  boolean  double[]  bigtens  tens  double  d  int[]  bits  dtoaModes  e  int  Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  d0  d1  de  digit  i  k  n_bigtens  offset  val  x  y  z  long  Exp_msk1L  Frac_maskL  dBits  
[buglab_swap_variables]^e[0] = de - k -  ( P-1 )  + Bias;^237^^^^^222^252^e[0] = de - Bias -  ( P-1 )  + k;^[CLASS] DToA  [METHOD] d2b [RETURN_TYPE] BigInteger   double d int[] e int[] bits [VARIABLES] byte[]  dbl_bits  boolean  double[]  bigtens  tens  double  d  int[]  bits  dtoaModes  e  int  Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  d0  d1  de  digit  i  k  n_bigtens  offset  val  x  y  z  long  Exp_msk1L  Frac_maskL  dBits  
[buglab_swap_variables]^e[0] = P - Bias -  ( de-1 )  + k;^237^^^^^222^252^e[0] = de - Bias -  ( P-1 )  + k;^[CLASS] DToA  [METHOD] d2b [RETURN_TYPE] BigInteger   double d int[] e int[] bits [VARIABLES] byte[]  dbl_bits  boolean  double[]  bigtens  tens  double  d  int[]  bits  dtoaModes  e  int  Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  d0  d1  de  digit  i  k  n_bigtens  offset  val  x  y  z  long  Exp_msk1L  Frac_maskL  dBits  
[buglab_swap_variables]^bits[0] = k - P;^238^^^^^223^253^bits[0] = P - k;^[CLASS] DToA  [METHOD] d2b [RETURN_TYPE] BigInteger   double d int[] e int[] bits [VARIABLES] byte[]  dbl_bits  boolean  double[]  bigtens  tens  double  d  int[]  bits  dtoaModes  e  int  Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  d0  d1  de  digit  i  k  n_bigtens  offset  val  x  y  z  long  Exp_msk1L  Frac_maskL  dBits  
[buglab_swap_variables]^e[0] = k - Bias -  ( P-1 )  + de;^237^^^^^222^252^e[0] = de - Bias -  ( P-1 )  + k;^[CLASS] DToA  [METHOD] d2b [RETURN_TYPE] BigInteger   double d int[] e int[] bits [VARIABLES] byte[]  dbl_bits  boolean  double[]  bigtens  tens  double  d  int[]  bits  dtoaModes  e  int  Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  d0  d1  de  digit  i  k  n_bigtens  offset  val  x  y  z  long  Exp_msk1L  Frac_maskL  dBits  
[buglab_swap_variables]^e[0] = k - Bias -  ( P-1 )  + 1 + de;^241^^^^^226^256^e[0] = de - Bias -  ( P-1 )  + 1 + k;^[CLASS] DToA  [METHOD] d2b [RETURN_TYPE] BigInteger   double d int[] e int[] bits [VARIABLES] byte[]  dbl_bits  boolean  double[]  bigtens  tens  double  d  int[]  bits  dtoaModes  e  int  Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  d0  d1  de  digit  i  k  n_bigtens  offset  val  x  y  z  long  Exp_msk1L  Frac_maskL  dBits  
[buglab_swap_variables]^e[0] = Bias - de -  ( P-1 )  + 1 + k;^241^^^^^226^256^e[0] = de - Bias -  ( P-1 )  + 1 + k;^[CLASS] DToA  [METHOD] d2b [RETURN_TYPE] BigInteger   double d int[] e int[] bits [VARIABLES] byte[]  dbl_bits  boolean  double[]  bigtens  tens  double  d  int[]  bits  dtoaModes  e  int  Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  d0  d1  de  digit  i  k  n_bigtens  offset  val  x  y  z  long  Exp_msk1L  Frac_maskL  dBits  
[buglab_swap_variables]^e[0] = de - Bias -  ( k-1 )  + 1 + P;^241^^^^^226^256^e[0] = de - Bias -  ( P-1 )  + 1 + k;^[CLASS] DToA  [METHOD] d2b [RETURN_TYPE] BigInteger   double d int[] e int[] bits [VARIABLES] byte[]  dbl_bits  boolean  double[]  bigtens  tens  double  d  int[]  bits  dtoaModes  e  int  Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  d0  d1  de  digit  i  k  n_bigtens  offset  val  x  y  z  long  Exp_msk1L  Frac_maskL  dBits  
[buglab_swap_variables]^mantissa =  ( Frac_maskL & floorBits )  | Exp_msk1L;^286^^^^^275^299^mantissa =  ( floorBits & Frac_maskL )  | Exp_msk1L;^[CLASS] DToA  [METHOD] JS_dtobasestr [RETURN_TYPE] String   int base double d [VARIABLES] BigInteger[]  divResult  StringBuffer  sb  boolean  done  negative  double[]  bigtens  tens  double  d  df  dfloor  BigInteger  b  bigBase  delta  mhi  mlo  s  x  int[]  bbits  bits  dtoaModes  e  String  intDigits  int  Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  base  d0  d1  de  digit  exp  i  j  j1  k  n_bigtens  offset  p  q  s2  val  word0  word1  x  y  z  long  Exp_msk1L  Frac_maskL  dBits  floorBits  lfloor  mantissa  char[]  buffer  
[buglab_swap_variables]^mantissa =  ( Exp_msk1L & Frac_maskL )  | floorBits;^286^^^^^275^299^mantissa =  ( floorBits & Frac_maskL )  | Exp_msk1L;^[CLASS] DToA  [METHOD] JS_dtobasestr [RETURN_TYPE] String   int base double d [VARIABLES] BigInteger[]  divResult  StringBuffer  sb  boolean  done  negative  double[]  bigtens  tens  double  d  df  dfloor  BigInteger  b  bigBase  delta  mhi  mlo  s  x  int[]  bbits  bits  dtoaModes  e  String  intDigits  int  Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  base  d0  d1  de  digit  exp  i  j  j1  k  n_bigtens  offset  p  q  s2  val  word0  word1  x  y  z  long  Exp_msk1L  Frac_maskL  dBits  floorBits  lfloor  mantissa  char[]  buffer  
[buglab_swap_variables]^mantissa =  ( Frac_maskL & floorBits )  << 1;^284^^^^^275^299^mantissa =  ( floorBits & Frac_maskL )  << 1;^[CLASS] DToA  [METHOD] JS_dtobasestr [RETURN_TYPE] String   int base double d [VARIABLES] BigInteger[]  divResult  StringBuffer  sb  boolean  done  negative  double[]  bigtens  tens  double  d  df  dfloor  BigInteger  b  bigBase  delta  mhi  mlo  s  x  int[]  bbits  bits  dtoaModes  e  String  intDigits  int  Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  base  d0  d1  de  digit  exp  i  j  j1  k  n_bigtens  offset  p  q  s2  val  word0  word1  x  y  z  long  Exp_msk1L  Frac_maskL  dBits  floorBits  lfloor  mantissa  char[]  buffer  
[buglab_swap_variables]^x = exp.shiftLeft ( x ) ;^294^^^^^275^299^x = x.shiftLeft ( exp ) ;^[CLASS] DToA  [METHOD] JS_dtobasestr [RETURN_TYPE] String   int base double d [VARIABLES] BigInteger[]  divResult  StringBuffer  sb  boolean  done  negative  double[]  bigtens  tens  double  d  df  dfloor  BigInteger  b  bigBase  delta  mhi  mlo  s  x  int[]  bbits  bits  dtoaModes  e  String  intDigits  int  Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  base  d0  d1  de  digit  exp  i  j  j1  k  n_bigtens  offset  p  q  s2  val  word0  word1  x  y  z  long  Exp_msk1L  Frac_maskL  dBits  floorBits  lfloor  mantissa  char[]  buffer  
[buglab_swap_variables]^mantissa =  ( floorBits & Exp_msk1L )  | Frac_maskL;^286^^^^^275^299^mantissa =  ( floorBits & Frac_maskL )  | Exp_msk1L;^[CLASS] DToA  [METHOD] JS_dtobasestr [RETURN_TYPE] String   int base double d [VARIABLES] BigInteger[]  divResult  StringBuffer  sb  boolean  done  negative  double[]  bigtens  tens  double  d  df  dfloor  BigInteger  b  bigBase  delta  mhi  mlo  s  x  int[]  bbits  bits  dtoaModes  e  String  intDigits  int  Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  base  d0  d1  de  digit  exp  i  j  j1  k  n_bigtens  offset  p  q  s2  val  word0  word1  x  y  z  long  Exp_msk1L  Frac_maskL  dBits  floorBits  lfloor  mantissa  char[]  buffer  
[buglab_swap_variables]^intDigits = base.toString ( x ) ;^298^^^^^275^299^intDigits = x.toString ( base ) ;^[CLASS] DToA  [METHOD] JS_dtobasestr [RETURN_TYPE] String   int base double d [VARIABLES] BigInteger[]  divResult  StringBuffer  sb  boolean  done  negative  double[]  bigtens  tens  double  d  df  dfloor  BigInteger  b  bigBase  delta  mhi  mlo  s  x  int[]  bbits  bits  dtoaModes  e  String  intDigits  int  Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  base  d0  d1  de  digit  exp  i  j  j1  k  n_bigtens  offset  p  q  s2  val  word0  word1  x  y  z  long  Exp_msk1L  Frac_maskL  dBits  floorBits  lfloor  mantissa  char[]  buffer  
[buglab_swap_variables]^int exp =  ( int )  ( Exp_shiftL >> floorBits )  & Exp_mask_shifted;^281^^^^^275^299^int exp =  ( int )  ( floorBits >> Exp_shiftL )  & Exp_mask_shifted;^[CLASS] DToA  [METHOD] JS_dtobasestr [RETURN_TYPE] String   int base double d [VARIABLES] BigInteger[]  divResult  StringBuffer  sb  boolean  done  negative  double[]  bigtens  tens  double  d  df  dfloor  BigInteger  b  bigBase  delta  mhi  mlo  s  x  int[]  bbits  bits  dtoaModes  e  String  intDigits  int  Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  base  d0  d1  de  digit  exp  i  j  j1  k  n_bigtens  offset  p  q  s2  val  word0  word1  x  y  z  long  Exp_msk1L  Frac_maskL  dBits  floorBits  lfloor  mantissa  char[]  buffer  
[buglab_swap_variables]^int exp =  ( int )  ( floorBits >> Exp_mask_shifted )  & Exp_shiftL;^281^^^^^275^299^int exp =  ( int )  ( floorBits >> Exp_shiftL )  & Exp_mask_shifted;^[CLASS] DToA  [METHOD] JS_dtobasestr [RETURN_TYPE] String   int base double d [VARIABLES] BigInteger[]  divResult  StringBuffer  sb  boolean  done  negative  double[]  bigtens  tens  double  d  df  dfloor  BigInteger  b  bigBase  delta  mhi  mlo  s  x  int[]  bbits  bits  dtoaModes  e  String  intDigits  int  Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  base  d0  d1  de  digit  exp  i  j  j1  k  n_bigtens  offset  p  q  s2  val  word0  word1  x  y  z  long  Exp_msk1L  Frac_maskL  dBits  floorBits  lfloor  mantissa  char[]  buffer  
[buglab_swap_variables]^intDigits = Long.toString (  ( base )  ? -lfloor : lfloor, negative ) ;^277^^^^^262^292^intDigits = Long.toString (  ( negative )  ? -lfloor : lfloor, base ) ;^[CLASS] DToA  [METHOD] JS_dtobasestr [RETURN_TYPE] String   int base double d [VARIABLES] BigInteger[]  divResult  StringBuffer  sb  boolean  done  negative  double[]  bigtens  tens  double  d  df  dfloor  BigInteger  b  bigBase  delta  mhi  mlo  s  x  int[]  bbits  bits  dtoaModes  e  String  intDigits  int  Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  base  d0  d1  de  digit  exp  i  j  j1  k  n_bigtens  offset  p  q  s2  val  word0  word1  x  y  z  long  Exp_msk1L  Frac_maskL  dBits  floorBits  lfloor  mantissa  char[]  buffer  
[buglab_swap_variables]^intDigits = Long.toString (  ( lfloor )  ? -lfloor : negative, base ) ;^277^^^^^262^292^intDigits = Long.toString (  ( negative )  ? -lfloor : lfloor, base ) ;^[CLASS] DToA  [METHOD] JS_dtobasestr [RETURN_TYPE] String   int base double d [VARIABLES] BigInteger[]  divResult  StringBuffer  sb  boolean  done  negative  double[]  bigtens  tens  double  d  df  dfloor  BigInteger  b  bigBase  delta  mhi  mlo  s  x  int[]  bbits  bits  dtoaModes  e  String  intDigits  int  Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  base  d0  d1  de  digit  exp  i  j  j1  k  n_bigtens  offset  p  q  s2  val  word0  word1  x  y  z  long  Exp_msk1L  Frac_maskL  dBits  floorBits  lfloor  mantissa  char[]  buffer  
[buglab_swap_variables]^intDigits = Long.toString (  ( negative )  ? -lfloor :  base ) ;^277^^^^^262^292^intDigits = Long.toString (  ( negative )  ? -lfloor : lfloor, base ) ;^[CLASS] DToA  [METHOD] JS_dtobasestr [RETURN_TYPE] String   int base double d [VARIABLES] BigInteger[]  divResult  StringBuffer  sb  boolean  done  negative  double[]  bigtens  tens  double  d  df  dfloor  BigInteger  b  bigBase  delta  mhi  mlo  s  x  int[]  bbits  bits  dtoaModes  e  String  intDigits  int  Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  base  d0  d1  de  digit  exp  i  j  j1  k  n_bigtens  offset  p  q  s2  val  word0  word1  x  y  z  long  Exp_msk1L  Frac_maskL  dBits  floorBits  lfloor  mantissa  char[]  buffer  
[buglab_swap_variables]^intDigits = Long.toString (  ( negative )  ? -lfloor : lfloor ) ;^277^^^^^262^292^intDigits = Long.toString (  ( negative )  ? -lfloor : lfloor, base ) ;^[CLASS] DToA  [METHOD] JS_dtobasestr [RETURN_TYPE] String   int base double d [VARIABLES] BigInteger[]  divResult  StringBuffer  sb  boolean  done  negative  double[]  bigtens  tens  double  d  df  dfloor  BigInteger  b  bigBase  delta  mhi  mlo  s  x  int[]  bbits  bits  dtoaModes  e  String  intDigits  int  Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  base  d0  d1  de  digit  exp  i  j  j1  k  n_bigtens  offset  p  q  s2  val  word0  word1  x  y  z  long  Exp_msk1L  Frac_maskL  dBits  floorBits  lfloor  mantissa  char[]  buffer  
[buglab_swap_variables]^intDigits = Long.toString (  ( negative )  ? -lfloor : base, lfloor ) ;^277^^^^^262^292^intDigits = Long.toString (  ( negative )  ? -lfloor : lfloor, base ) ;^[CLASS] DToA  [METHOD] JS_dtobasestr [RETURN_TYPE] String   int base double d [VARIABLES] BigInteger[]  divResult  StringBuffer  sb  boolean  done  negative  double[]  bigtens  tens  double  d  df  dfloor  BigInteger  b  bigBase  delta  mhi  mlo  s  x  int[]  bbits  bits  dtoaModes  e  String  intDigits  int  Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  base  d0  d1  de  digit  exp  i  j  j1  k  n_bigtens  offset  p  q  s2  val  word0  word1  x  y  z  long  Exp_msk1L  Frac_maskL  dBits  floorBits  lfloor  mantissa  char[]  buffer  
[buglab_swap_variables]^mantissa =  ( Exp_msk1L & Frac_maskL )  | floorBits;^286^^^^^283^287^mantissa =  ( floorBits & Frac_maskL )  | Exp_msk1L;^[CLASS] DToA  [METHOD] JS_dtobasestr [RETURN_TYPE] String   int base double d [VARIABLES] BigInteger[]  divResult  StringBuffer  sb  boolean  done  negative  double[]  bigtens  tens  double  d  df  dfloor  BigInteger  b  bigBase  delta  mhi  mlo  s  x  int[]  bbits  bits  dtoaModes  e  String  intDigits  int  Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  base  d0  d1  de  digit  exp  i  j  j1  k  n_bigtens  offset  p  q  s2  val  word0  word1  x  y  z  long  Exp_msk1L  Frac_maskL  dBits  floorBits  lfloor  mantissa  char[]  buffer  
[buglab_swap_variables]^mantissa =  ( Frac_maskL & floorBits )  | Exp_msk1L;^286^^^^^283^287^mantissa =  ( floorBits & Frac_maskL )  | Exp_msk1L;^[CLASS] DToA  [METHOD] JS_dtobasestr [RETURN_TYPE] String   int base double d [VARIABLES] BigInteger[]  divResult  StringBuffer  sb  boolean  done  negative  double[]  bigtens  tens  double  d  df  dfloor  BigInteger  b  bigBase  delta  mhi  mlo  s  x  int[]  bbits  bits  dtoaModes  e  String  intDigits  int  Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  base  d0  d1  de  digit  exp  i  j  j1  k  n_bigtens  offset  p  q  s2  val  word0  word1  x  y  z  long  Exp_msk1L  Frac_maskL  dBits  floorBits  lfloor  mantissa  char[]  buffer  
[buglab_swap_variables]^mantissa =  ( floorBits & Exp_msk1L )  | Frac_maskL;^286^^^^^283^287^mantissa =  ( floorBits & Frac_maskL )  | Exp_msk1L;^[CLASS] DToA  [METHOD] JS_dtobasestr [RETURN_TYPE] String   int base double d [VARIABLES] BigInteger[]  divResult  StringBuffer  sb  boolean  done  negative  double[]  bigtens  tens  double  d  df  dfloor  BigInteger  b  bigBase  delta  mhi  mlo  s  x  int[]  bbits  bits  dtoaModes  e  String  intDigits  int  Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  base  d0  d1  de  digit  exp  i  j  j1  k  n_bigtens  offset  p  q  s2  val  word0  word1  x  y  z  long  Exp_msk1L  Frac_maskL  dBits  floorBits  lfloor  mantissa  char[]  buffer  
[buglab_swap_variables]^mantissa =  ( Frac_maskL & floorBits )  << 1;^284^^^^^269^299^mantissa =  ( floorBits & Frac_maskL )  << 1;^[CLASS] DToA  [METHOD] JS_dtobasestr [RETURN_TYPE] String   int base double d [VARIABLES] BigInteger[]  divResult  StringBuffer  sb  boolean  done  negative  double[]  bigtens  tens  double  d  df  dfloor  BigInteger  b  bigBase  delta  mhi  mlo  s  x  int[]  bbits  bits  dtoaModes  e  String  intDigits  int  Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  base  d0  d1  de  digit  exp  i  j  j1  k  n_bigtens  offset  p  q  s2  val  word0  word1  x  y  z  long  Exp_msk1L  Frac_maskL  dBits  floorBits  lfloor  mantissa  char[]  buffer  
[buglab_swap_variables]^x = exp.shiftLeft ( x ) ;^294^^^^^279^309^x = x.shiftLeft ( exp ) ;^[CLASS] DToA  [METHOD] JS_dtobasestr [RETURN_TYPE] String   int base double d [VARIABLES] BigInteger[]  divResult  StringBuffer  sb  boolean  done  negative  double[]  bigtens  tens  double  d  df  dfloor  BigInteger  b  bigBase  delta  mhi  mlo  s  x  int[]  bbits  bits  dtoaModes  e  String  intDigits  int  Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  base  d0  d1  de  digit  exp  i  j  j1  k  n_bigtens  offset  p  q  s2  val  word0  word1  x  y  z  long  Exp_msk1L  Frac_maskL  dBits  floorBits  lfloor  mantissa  char[]  buffer  
[buglab_swap_variables]^mantissa =  ( Exp_msk1L & Frac_maskL )  | floorBits;^286^^^^^271^301^mantissa =  ( floorBits & Frac_maskL )  | Exp_msk1L;^[CLASS] DToA  [METHOD] JS_dtobasestr [RETURN_TYPE] String   int base double d [VARIABLES] BigInteger[]  divResult  StringBuffer  sb  boolean  done  negative  double[]  bigtens  tens  double  d  df  dfloor  BigInteger  b  bigBase  delta  mhi  mlo  s  x  int[]  bbits  bits  dtoaModes  e  String  intDigits  int  Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  base  d0  d1  de  digit  exp  i  j  j1  k  n_bigtens  offset  p  q  s2  val  word0  word1  x  y  z  long  Exp_msk1L  Frac_maskL  dBits  floorBits  lfloor  mantissa  char[]  buffer  
[buglab_swap_variables]^mantissa =  ( Frac_maskL & floorBits )  | Exp_msk1L;^286^^^^^271^301^mantissa =  ( floorBits & Frac_maskL )  | Exp_msk1L;^[CLASS] DToA  [METHOD] JS_dtobasestr [RETURN_TYPE] String   int base double d [VARIABLES] BigInteger[]  divResult  StringBuffer  sb  boolean  done  negative  double[]  bigtens  tens  double  d  df  dfloor  BigInteger  b  bigBase  delta  mhi  mlo  s  x  int[]  bbits  bits  dtoaModes  e  String  intDigits  int  Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  base  d0  d1  de  digit  exp  i  j  j1  k  n_bigtens  offset  p  q  s2  val  word0  word1  x  y  z  long  Exp_msk1L  Frac_maskL  dBits  floorBits  lfloor  mantissa  char[]  buffer  
[buglab_swap_variables]^mantissa =  ( floorBits & Exp_msk1L )  | Frac_maskL;^286^^^^^271^301^mantissa =  ( floorBits & Frac_maskL )  | Exp_msk1L;^[CLASS] DToA  [METHOD] JS_dtobasestr [RETURN_TYPE] String   int base double d [VARIABLES] BigInteger[]  divResult  StringBuffer  sb  boolean  done  negative  double[]  bigtens  tens  double  d  df  dfloor  BigInteger  b  bigBase  delta  mhi  mlo  s  x  int[]  bbits  bits  dtoaModes  e  String  intDigits  int  Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  base  d0  d1  de  digit  exp  i  j  j1  k  n_bigtens  offset  p  q  s2  val  word0  word1  x  y  z  long  Exp_msk1L  Frac_maskL  dBits  floorBits  lfloor  mantissa  char[]  buffer  
[buglab_swap_variables]^intDigits = base.toString ( x ) ;^298^^^^^283^313^intDigits = x.toString ( base ) ;^[CLASS] DToA  [METHOD] JS_dtobasestr [RETURN_TYPE] String   int base double d [VARIABLES] BigInteger[]  divResult  StringBuffer  sb  boolean  done  negative  double[]  bigtens  tens  double  d  df  dfloor  BigInteger  b  bigBase  delta  mhi  mlo  s  x  int[]  bbits  bits  dtoaModes  e  String  intDigits  int  Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  base  d0  d1  de  digit  exp  i  j  j1  k  n_bigtens  offset  p  q  s2  val  word0  word1  x  y  z  long  Exp_msk1L  Frac_maskL  dBits  floorBits  lfloor  mantissa  char[]  buffer  
[buglab_swap_variables]^int exp =  ( int )  ( Exp_shiftL >> floorBits )  & Exp_mask_shifted;^281^^^^^266^296^int exp =  ( int )  ( floorBits >> Exp_shiftL )  & Exp_mask_shifted;^[CLASS] DToA  [METHOD] JS_dtobasestr [RETURN_TYPE] String   int base double d [VARIABLES] BigInteger[]  divResult  StringBuffer  sb  boolean  done  negative  double[]  bigtens  tens  double  d  df  dfloor  BigInteger  b  bigBase  delta  mhi  mlo  s  x  int[]  bbits  bits  dtoaModes  e  String  intDigits  int  Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  base  d0  d1  de  digit  exp  i  j  j1  k  n_bigtens  offset  p  q  s2  val  word0  word1  x  y  z  long  Exp_msk1L  Frac_maskL  dBits  floorBits  lfloor  mantissa  char[]  buffer  
[buglab_swap_variables]^int exp =  ( int )  ( floorBits >> Exp_mask_shifted )  & Exp_shiftL;^281^^^^^266^296^int exp =  ( int )  ( floorBits >> Exp_shiftL )  & Exp_mask_shifted;^[CLASS] DToA  [METHOD] JS_dtobasestr [RETURN_TYPE] String   int base double d [VARIABLES] BigInteger[]  divResult  StringBuffer  sb  boolean  done  negative  double[]  bigtens  tens  double  d  df  dfloor  BigInteger  b  bigBase  delta  mhi  mlo  s  x  int[]  bbits  bits  dtoaModes  e  String  intDigits  int  Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  base  d0  d1  de  digit  exp  i  j  j1  k  n_bigtens  offset  p  q  s2  val  word0  word1  x  y  z  long  Exp_msk1L  Frac_maskL  dBits  floorBits  lfloor  mantissa  char[]  buffer  
[buglab_swap_variables]^int exp =  ( int )  ( Exp_mask_shifted >> Exp_shiftL )  & floorBits;^281^^^^^266^296^int exp =  ( int )  ( floorBits >> Exp_shiftL )  & Exp_mask_shifted;^[CLASS] DToA  [METHOD] JS_dtobasestr [RETURN_TYPE] String   int base double d [VARIABLES] BigInteger[]  divResult  StringBuffer  sb  boolean  done  negative  double[]  bigtens  tens  double  d  df  dfloor  BigInteger  b  bigBase  delta  mhi  mlo  s  x  int[]  bbits  bits  dtoaModes  e  String  intDigits  int  Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  base  d0  d1  de  digit  exp  i  j  j1  k  n_bigtens  offset  p  q  s2  val  word0  word1  x  y  z  long  Exp_msk1L  Frac_maskL  dBits  floorBits  lfloor  mantissa  char[]  buffer  
[buglab_swap_variables]^if  ( d == df )  {^301^^^^^286^316^if  ( d == dfloor )  {^[CLASS] DToA  [METHOD] JS_dtobasestr [RETURN_TYPE] String   int base double d [VARIABLES] BigInteger[]  divResult  StringBuffer  sb  boolean  done  negative  double[]  bigtens  tens  double  d  df  dfloor  BigInteger  b  bigBase  delta  mhi  mlo  s  x  int[]  bbits  bits  dtoaModes  e  String  intDigits  int  Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  base  d0  d1  de  digit  exp  i  j  j1  k  n_bigtens  offset  p  q  s2  val  word0  word1  x  y  z  long  Exp_msk1L  Frac_maskL  dBits  floorBits  lfloor  mantissa  char[]  buffer  
[buglab_swap_variables]^if  (  ( Bndry_mask == 0 )  &&  (  ( word0 & word1 )  == 0 ) &&  (  ( word0 &  ( Exp_mask & Exp_mask << 1 )  )  != 0 )  )  {^337^338^^^^322^352^if  (  ( word1 == 0 )  &&  (  ( word0 & Bndry_mask )  == 0 ) &&  (  ( word0 &  ( Exp_mask & Exp_mask << 1 )  )  != 0 )  )  {^[CLASS] DToA  [METHOD] JS_dtobasestr [RETURN_TYPE] String   int base double d [VARIABLES] BigInteger[]  divResult  StringBuffer  sb  boolean  done  negative  double[]  bigtens  tens  double  d  df  dfloor  BigInteger  b  bigBase  delta  mhi  mlo  s  x  int[]  bbits  bits  dtoaModes  e  String  intDigits  int  Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  base  d0  d1  de  digit  exp  i  j  j1  k  n_bigtens  offset  p  q  s2  val  word0  word1  x  y  z  long  Exp_msk1L  Frac_maskL  dBits  floorBits  lfloor  mantissa  char[]  buffer  
[buglab_swap_variables]^if  (  ( word1 == 0 )  &&  (  ( Exp_mask & Bndry_mask )  == 0 ) &&  (  ( word0 &  ( word0 & Exp_mask << 1 )  )  != 0 )  )  {^337^338^^^^322^352^if  (  ( word1 == 0 )  &&  (  ( word0 & Bndry_mask )  == 0 ) &&  (  ( word0 &  ( Exp_mask & Exp_mask << 1 )  )  != 0 )  )  {^[CLASS] DToA  [METHOD] JS_dtobasestr [RETURN_TYPE] String   int base double d [VARIABLES] BigInteger[]  divResult  StringBuffer  sb  boolean  done  negative  double[]  bigtens  tens  double  d  df  dfloor  BigInteger  b  bigBase  delta  mhi  mlo  s  x  int[]  bbits  bits  dtoaModes  e  String  intDigits  int  Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  base  d0  d1  de  digit  exp  i  j  j1  k  n_bigtens  offset  p  q  s2  val  word0  word1  x  y  z  long  Exp_msk1L  Frac_maskL  dBits  floorBits  lfloor  mantissa  char[]  buffer  
[buglab_swap_variables]^if  (  ( Exp_mask == 0 )  &&  (  ( word0 & Bndry_mask )  == 0 ) &&  (  ( word0 &  ( word1 & Exp_mask << 1 )  )  != 0 )  )  {^337^338^^^^322^352^if  (  ( word1 == 0 )  &&  (  ( word0 & Bndry_mask )  == 0 ) &&  (  ( word0 &  ( Exp_mask & Exp_mask << 1 )  )  != 0 )  )  {^[CLASS] DToA  [METHOD] JS_dtobasestr [RETURN_TYPE] String   int base double d [VARIABLES] BigInteger[]  divResult  StringBuffer  sb  boolean  done  negative  double[]  bigtens  tens  double  d  df  dfloor  BigInteger  b  bigBase  delta  mhi  mlo  s  x  int[]  bbits  bits  dtoaModes  e  String  intDigits  int  Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  base  d0  d1  de  digit  exp  i  j  j1  k  n_bigtens  offset  p  q  s2  val  word0  word1  x  y  z  long  Exp_msk1L  Frac_maskL  dBits  floorBits  lfloor  mantissa  char[]  buffer  
[buglab_swap_variables]^if  ( mhi == mlo ) mlo = mhi = mlo.multiply ( bigBase ) ;^361^362^^^^346^376^if  ( mlo == mhi ) mlo = mhi = mlo.multiply ( bigBase ) ;^[CLASS] DToA  [METHOD] JS_dtobasestr [RETURN_TYPE] String   int base double d [VARIABLES] BigInteger[]  divResult  StringBuffer  sb  boolean  done  negative  double[]  bigtens  tens  double  d  df  dfloor  BigInteger  b  bigBase  delta  mhi  mlo  s  x  int[]  bbits  bits  dtoaModes  e  String  intDigits  int  Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  base  d0  d1  de  digit  exp  i  j  j1  k  n_bigtens  offset  p  q  s2  val  word0  word1  x  y  z  long  Exp_msk1L  Frac_maskL  dBits  floorBits  lfloor  mantissa  char[]  buffer  
[buglab_swap_variables]^if  ( mlo == bigBase ) mlo = mhi = mlo.multiply ( mhi ) ;^361^362^^^^346^376^if  ( mlo == mhi ) mlo = mhi = mlo.multiply ( bigBase ) ;^[CLASS] DToA  [METHOD] JS_dtobasestr [RETURN_TYPE] String   int base double d [VARIABLES] BigInteger[]  divResult  StringBuffer  sb  boolean  done  negative  double[]  bigtens  tens  double  d  df  dfloor  BigInteger  b  bigBase  delta  mhi  mlo  s  x  int[]  bbits  bits  dtoaModes  e  String  intDigits  int  Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  base  d0  d1  de  digit  exp  i  j  j1  k  n_bigtens  offset  p  q  s2  val  word0  word1  x  y  z  long  Exp_msk1L  Frac_maskL  dBits  floorBits  lfloor  mantissa  char[]  buffer  
[buglab_swap_variables]^mlo = bigBase.multiply ( mlo ) ;^364^^^^^361^366^mlo = mlo.multiply ( bigBase ) ;^[CLASS] DToA  [METHOD] JS_dtobasestr [RETURN_TYPE] String   int base double d [VARIABLES] BigInteger[]  divResult  StringBuffer  sb  boolean  done  negative  double[]  bigtens  tens  double  d  df  dfloor  BigInteger  b  bigBase  delta  mhi  mlo  s  x  int[]  bbits  bits  dtoaModes  e  String  intDigits  int  Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  base  d0  d1  de  digit  exp  i  j  j1  k  n_bigtens  offset  p  q  s2  val  word0  word1  x  y  z  long  Exp_msk1L  Frac_maskL  dBits  floorBits  lfloor  mantissa  char[]  buffer  
[buglab_swap_variables]^mhi = bigBase.multiply ( mhi ) ;^365^^^^^361^366^mhi = mhi.multiply ( bigBase ) ;^[CLASS] DToA  [METHOD] JS_dtobasestr [RETURN_TYPE] String   int base double d [VARIABLES] BigInteger[]  divResult  StringBuffer  sb  boolean  done  negative  double[]  bigtens  tens  double  d  df  dfloor  BigInteger  b  bigBase  delta  mhi  mlo  s  x  int[]  bbits  bits  dtoaModes  e  String  intDigits  int  Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  base  d0  d1  de  digit  exp  i  j  j1  k  n_bigtens  offset  p  q  s2  val  word0  word1  x  y  z  long  Exp_msk1L  Frac_maskL  dBits  floorBits  lfloor  mantissa  char[]  buffer  
[buglab_swap_variables]^mlo = mhi = bigBase.multiply ( mlo ) ;^362^^^^^347^377^mlo = mhi = mlo.multiply ( bigBase ) ;^[CLASS] DToA  [METHOD] JS_dtobasestr [RETURN_TYPE] String   int base double d [VARIABLES] BigInteger[]  divResult  StringBuffer  sb  boolean  done  negative  double[]  bigtens  tens  double  d  df  dfloor  BigInteger  b  bigBase  delta  mhi  mlo  s  x  int[]  bbits  bits  dtoaModes  e  String  intDigits  int  Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  base  d0  d1  de  digit  exp  i  j  j1  k  n_bigtens  offset  p  q  s2  val  word0  word1  x  y  z  long  Exp_msk1L  Frac_maskL  dBits  floorBits  lfloor  mantissa  char[]  buffer  
[buglab_swap_variables]^if  ( j == 0 &&  (  ( word1 & 1 )  == 0 )  )  {^374^^^^^359^389^if  ( j1 == 0 &&  (  ( word1 & 1 )  == 0 )  )  {^[CLASS] DToA  [METHOD] JS_dtobasestr [RETURN_TYPE] String   int base double d [VARIABLES] BigInteger[]  divResult  StringBuffer  sb  boolean  done  negative  double[]  bigtens  tens  double  d  df  dfloor  BigInteger  b  bigBase  delta  mhi  mlo  s  x  int[]  bbits  bits  dtoaModes  e  String  intDigits  int  Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  base  d0  d1  de  digit  exp  i  j  j1  k  n_bigtens  offset  p  q  s2  val  word0  word1  x  y  z  long  Exp_msk1L  Frac_maskL  dBits  floorBits  lfloor  mantissa  char[]  buffer  
[buglab_swap_variables]^if  ( word11 == 0 &&  (  ( j & 1 )  == 0 )  )  {^374^^^^^359^389^if  ( j1 == 0 &&  (  ( word1 & 1 )  == 0 )  )  {^[CLASS] DToA  [METHOD] JS_dtobasestr [RETURN_TYPE] String   int base double d [VARIABLES] BigInteger[]  divResult  StringBuffer  sb  boolean  done  negative  double[]  bigtens  tens  double  d  df  dfloor  BigInteger  b  bigBase  delta  mhi  mlo  s  x  int[]  bbits  bits  dtoaModes  e  String  intDigits  int  Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  base  d0  d1  de  digit  exp  i  j  j1  k  n_bigtens  offset  p  q  s2  val  word0  word1  x  y  z  long  Exp_msk1L  Frac_maskL  dBits  floorBits  lfloor  mantissa  char[]  buffer  
[buglab_swap_variables]^if  ( j11 == 0 &&  (  ( word1 & 1 )  == 0 )  )  {^374^^^^^359^389^if  ( j1 == 0 &&  (  ( word1 & 1 )  == 0 )  )  {^[CLASS] DToA  [METHOD] JS_dtobasestr [RETURN_TYPE] String   int base double d [VARIABLES] BigInteger[]  divResult  StringBuffer  sb  boolean  done  negative  double[]  bigtens  tens  double  d  df  dfloor  BigInteger  b  bigBase  delta  mhi  mlo  s  x  int[]  bbits  bits  dtoaModes  e  String  intDigits  int  Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  base  d0  d1  de  digit  exp  i  j  j1  k  n_bigtens  offset  p  q  s2  val  word0  word1  x  y  z  long  Exp_msk1L  Frac_maskL  dBits  floorBits  lfloor  mantissa  char[]  buffer  
[buglab_swap_variables]^j1 = s.compareTo ( b ) ;^384^^^^^369^399^j1 = b.compareTo ( s ) ;^[CLASS] DToA  [METHOD] JS_dtobasestr [RETURN_TYPE] String   int base double d [VARIABLES] BigInteger[]  divResult  StringBuffer  sb  boolean  done  negative  double[]  bigtens  tens  double  d  df  dfloor  BigInteger  b  bigBase  delta  mhi  mlo  s  x  int[]  bbits  bits  dtoaModes  e  String  intDigits  int  Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  base  d0  d1  de  digit  exp  i  j  j1  k  n_bigtens  offset  p  q  s2  val  word0  word1  x  y  z  long  Exp_msk1L  Frac_maskL  dBits  floorBits  lfloor  mantissa  char[]  buffer  
[buglab_swap_variables]^df = dfloor - d;^316^^^^^301^331^df = d - dfloor;^[CLASS] DToA  [METHOD] JS_dtobasestr [RETURN_TYPE] String   int base double d [VARIABLES] BigInteger[]  divResult  StringBuffer  sb  boolean  done  negative  double[]  bigtens  tens  double  d  df  dfloor  BigInteger  b  bigBase  delta  mhi  mlo  s  x  int[]  bbits  bits  dtoaModes  e  String  intDigits  int  Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  base  d0  d1  de  digit  exp  i  j  j1  k  n_bigtens  offset  p  q  s2  val  word0  word1  x  y  z  long  Exp_msk1L  Frac_maskL  dBits  floorBits  lfloor  mantissa  char[]  buffer  
[buglab_swap_variables]^b = d2b ( bbits, e, df ) ;^325^^^^^310^340^b = d2b ( df, e, bbits ) ;^[CLASS] DToA  [METHOD] JS_dtobasestr [RETURN_TYPE] String   int base double d [VARIABLES] BigInteger[]  divResult  StringBuffer  sb  boolean  done  negative  double[]  bigtens  tens  double  d  df  dfloor  BigInteger  b  bigBase  delta  mhi  mlo  s  x  int[]  bbits  bits  dtoaModes  e  String  intDigits  int  Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  base  d0  d1  de  digit  exp  i  j  j1  k  n_bigtens  offset  p  q  s2  val  word0  word1  x  y  z  long  Exp_msk1L  Frac_maskL  dBits  floorBits  lfloor  mantissa  char[]  buffer  
[buglab_swap_variables]^b = d2b (  e, bbits ) ;^325^^^^^310^340^b = d2b ( df, e, bbits ) ;^[CLASS] DToA  [METHOD] JS_dtobasestr [RETURN_TYPE] String   int base double d [VARIABLES] BigInteger[]  divResult  StringBuffer  sb  boolean  done  negative  double[]  bigtens  tens  double  d  df  dfloor  BigInteger  b  bigBase  delta  mhi  mlo  s  x  int[]  bbits  bits  dtoaModes  e  String  intDigits  int  Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  base  d0  d1  de  digit  exp  i  j  j1  k  n_bigtens  offset  p  q  s2  val  word0  word1  x  y  z  long  Exp_msk1L  Frac_maskL  dBits  floorBits  lfloor  mantissa  char[]  buffer  
[buglab_swap_variables]^b = d2b ( df, bbits, e ) ;^325^^^^^310^340^b = d2b ( df, e, bbits ) ;^[CLASS] DToA  [METHOD] JS_dtobasestr [RETURN_TYPE] String   int base double d [VARIABLES] BigInteger[]  divResult  StringBuffer  sb  boolean  done  negative  double[]  bigtens  tens  double  d  df  dfloor  BigInteger  b  bigBase  delta  mhi  mlo  s  x  int[]  bbits  bits  dtoaModes  e  String  intDigits  int  Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  base  d0  d1  de  digit  exp  i  j  j1  k  n_bigtens  offset  p  q  s2  val  word0  word1  x  y  z  long  Exp_msk1L  Frac_maskL  dBits  floorBits  lfloor  mantissa  char[]  buffer  
[buglab_swap_variables]^b = d2b ( df,  bbits ) ;^325^^^^^310^340^b = d2b ( df, e, bbits ) ;^[CLASS] DToA  [METHOD] JS_dtobasestr [RETURN_TYPE] String   int base double d [VARIABLES] BigInteger[]  divResult  StringBuffer  sb  boolean  done  negative  double[]  bigtens  tens  double  d  df  dfloor  BigInteger  b  bigBase  delta  mhi  mlo  s  x  int[]  bbits  bits  dtoaModes  e  String  intDigits  int  Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  base  d0  d1  de  digit  exp  i  j  j1  k  n_bigtens  offset  p  q  s2  val  word0  word1  x  y  z  long  Exp_msk1L  Frac_maskL  dBits  floorBits  lfloor  mantissa  char[]  buffer  
[buglab_swap_variables]^b = d2b ( df, e ) ;^325^^^^^310^340^b = d2b ( df, e, bbits ) ;^[CLASS] DToA  [METHOD] JS_dtobasestr [RETURN_TYPE] String   int base double d [VARIABLES] BigInteger[]  divResult  StringBuffer  sb  boolean  done  negative  double[]  bigtens  tens  double  d  df  dfloor  BigInteger  b  bigBase  delta  mhi  mlo  s  x  int[]  bbits  bits  dtoaModes  e  String  intDigits  int  Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  base  d0  d1  de  digit  exp  i  j  j1  k  n_bigtens  offset  p  q  s2  val  word0  word1  x  y  z  long  Exp_msk1L  Frac_maskL  dBits  floorBits  lfloor  mantissa  char[]  buffer  
[buglab_swap_variables]^s2 += P + Bias;^332^^^^^317^347^s2 += Bias + P;^[CLASS] DToA  [METHOD] JS_dtobasestr [RETURN_TYPE] String   int base double d [VARIABLES] BigInteger[]  divResult  StringBuffer  sb  boolean  done  negative  double[]  bigtens  tens  double  d  df  dfloor  BigInteger  b  bigBase  delta  mhi  mlo  s  x  int[]  bbits  bits  dtoaModes  e  String  intDigits  int  Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  base  d0  d1  de  digit  exp  i  j  j1  k  n_bigtens  offset  p  q  s2  val  word0  word1  x  y  z  long  Exp_msk1L  Frac_maskL  dBits  floorBits  lfloor  mantissa  char[]  buffer  
[buglab_swap_variables]^b = s2.shiftLeft ( e[0] + b ) ;^345^^^^^330^360^b = b.shiftLeft ( e[0] + s2 ) ;^[CLASS] DToA  [METHOD] JS_dtobasestr [RETURN_TYPE] String   int base double d [VARIABLES] BigInteger[]  divResult  StringBuffer  sb  boolean  done  negative  double[]  bigtens  tens  double  d  df  dfloor  BigInteger  b  bigBase  delta  mhi  mlo  s  x  int[]  bbits  bits  dtoaModes  e  String  intDigits  int  Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  base  d0  d1  de  digit  exp  i  j  j1  k  n_bigtens  offset  p  q  s2  val  word0  word1  x  y  z  long  Exp_msk1L  Frac_maskL  dBits  floorBits  lfloor  mantissa  char[]  buffer  
[buglab_swap_variables]^b = e.shiftLeft ( b[0] + s2 ) ;^345^^^^^330^360^b = b.shiftLeft ( e[0] + s2 ) ;^[CLASS] DToA  [METHOD] JS_dtobasestr [RETURN_TYPE] String   int base double d [VARIABLES] BigInteger[]  divResult  StringBuffer  sb  boolean  done  negative  double[]  bigtens  tens  double  d  df  dfloor  BigInteger  b  bigBase  delta  mhi  mlo  s  x  int[]  bbits  bits  dtoaModes  e  String  intDigits  int  Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  base  d0  d1  de  digit  exp  i  j  j1  k  n_bigtens  offset  p  q  s2  val  word0  word1  x  y  z  long  Exp_msk1L  Frac_maskL  dBits  floorBits  lfloor  mantissa  char[]  buffer  
[buglab_swap_variables]^s = s2.shiftLeft ( s ) ;^347^^^^^332^362^s = s.shiftLeft ( s2 ) ;^[CLASS] DToA  [METHOD] JS_dtobasestr [RETURN_TYPE] String   int base double d [VARIABLES] BigInteger[]  divResult  StringBuffer  sb  boolean  done  negative  double[]  bigtens  tens  double  d  df  dfloor  BigInteger  b  bigBase  delta  mhi  mlo  s  x  int[]  bbits  bits  dtoaModes  e  String  intDigits  int  Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  base  d0  d1  de  digit  exp  i  j  j1  k  n_bigtens  offset  p  q  s2  val  word0  word1  x  y  z  long  Exp_msk1L  Frac_maskL  dBits  floorBits  lfloor  mantissa  char[]  buffer  
[buglab_swap_variables]^b = bigBase.multiply ( b ) ;^357^^^^^342^372^b = b.multiply ( bigBase ) ;^[CLASS] DToA  [METHOD] JS_dtobasestr [RETURN_TYPE] String   int base double d [VARIABLES] BigInteger[]  divResult  StringBuffer  sb  boolean  done  negative  double[]  bigtens  tens  double  d  df  dfloor  BigInteger  b  bigBase  delta  mhi  mlo  s  x  int[]  bbits  bits  dtoaModes  e  String  intDigits  int  Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  base  d0  d1  de  digit  exp  i  j  j1  k  n_bigtens  offset  p  q  s2  val  word0  word1  x  y  z  long  Exp_msk1L  Frac_maskL  dBits  floorBits  lfloor  mantissa  char[]  buffer  
[buglab_swap_variables]^mlo = bigBase.multiply ( mlo ) ;^364^^^^^349^379^mlo = mlo.multiply ( bigBase ) ;^[CLASS] DToA  [METHOD] JS_dtobasestr [RETURN_TYPE] String   int base double d [VARIABLES] BigInteger[]  divResult  StringBuffer  sb  boolean  done  negative  double[]  bigtens  tens  double  d  df  dfloor  BigInteger  b  bigBase  delta  mhi  mlo  s  x  int[]  bbits  bits  dtoaModes  e  String  intDigits  int  Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  base  d0  d1  de  digit  exp  i  j  j1  k  n_bigtens  offset  p  q  s2  val  word0  word1  x  y  z  long  Exp_msk1L  Frac_maskL  dBits  floorBits  lfloor  mantissa  char[]  buffer  
[buglab_swap_variables]^mhi = bigBase.multiply ( mhi ) ;^365^^^^^350^380^mhi = mhi.multiply ( bigBase ) ;^[CLASS] DToA  [METHOD] JS_dtobasestr [RETURN_TYPE] String   int base double d [VARIABLES] BigInteger[]  divResult  StringBuffer  sb  boolean  done  negative  double[]  bigtens  tens  double  d  df  dfloor  BigInteger  b  bigBase  delta  mhi  mlo  s  x  int[]  bbits  bits  dtoaModes  e  String  intDigits  int  Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  base  d0  d1  de  digit  exp  i  j  j1  k  n_bigtens  offset  p  q  s2  val  word0  word1  x  y  z  long  Exp_msk1L  Frac_maskL  dBits  floorBits  lfloor  mantissa  char[]  buffer  
[buglab_swap_variables]^StringBuffer sb = new StringBuffer ( p.length (  )  + 1 + intDigits ) ;^398^^^^^383^413^StringBuffer sb = new StringBuffer ( intDigits.length (  )  + 1 + p ) ;^[CLASS] DToA  [METHOD] JS_dtobasestr [RETURN_TYPE] String   int base double d [VARIABLES] BigInteger[]  divResult  StringBuffer  sb  boolean  done  negative  double[]  bigtens  tens  double  d  df  dfloor  BigInteger  b  bigBase  delta  mhi  mlo  s  x  int[]  bbits  bits  dtoaModes  e  String  intDigits  int  Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  base  d0  d1  de  digit  exp  i  j  j1  k  n_bigtens  offset  p  q  s2  val  word0  word1  x  y  z  long  Exp_msk1L  Frac_maskL  dBits  floorBits  lfloor  mantissa  char[]  buffer  
[buglab_swap_variables]^int s2 = - ( Exp_shift1 >>> word0 & Exp_mask >> Exp_shift1 ) ;^329^^^^^314^344^int s2 = - ( word0 >>> Exp_shift1 & Exp_mask >> Exp_shift1 ) ;^[CLASS] DToA  [METHOD] JS_dtobasestr [RETURN_TYPE] String   int base double d [VARIABLES] BigInteger[]  divResult  StringBuffer  sb  boolean  done  negative  double[]  bigtens  tens  double  d  df  dfloor  BigInteger  b  bigBase  delta  mhi  mlo  s  x  int[]  bbits  bits  dtoaModes  e  String  intDigits  int  Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  base  d0  d1  de  digit  exp  i  j  j1  k  n_bigtens  offset  p  q  s2  val  word0  word1  x  y  z  long  Exp_msk1L  Frac_maskL  dBits  floorBits  lfloor  mantissa  char[]  buffer  
[buglab_swap_variables]^int s2 = - ( word0 >>> Exp_mask & Exp_shift1 >> Exp_shift1 ) ;^329^^^^^314^344^int s2 = - ( word0 >>> Exp_shift1 & Exp_mask >> Exp_shift1 ) ;^[CLASS] DToA  [METHOD] JS_dtobasestr [RETURN_TYPE] String   int base double d [VARIABLES] BigInteger[]  divResult  StringBuffer  sb  boolean  done  negative  double[]  bigtens  tens  double  d  df  dfloor  BigInteger  b  bigBase  delta  mhi  mlo  s  x  int[]  bbits  bits  dtoaModes  e  String  intDigits  int  Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  base  d0  d1  de  digit  exp  i  j  j1  k  n_bigtens  offset  p  q  s2  val  word0  word1  x  y  z  long  Exp_msk1L  Frac_maskL  dBits  floorBits  lfloor  mantissa  char[]  buffer  
[buglab_swap_variables]^BigInteger[] divResult = s.divideAndRemainder ( b ) ;^358^^^^^343^373^BigInteger[] divResult = b.divideAndRemainder ( s ) ;^[CLASS] DToA  [METHOD] JS_dtobasestr [RETURN_TYPE] String   int base double d [VARIABLES] BigInteger[]  divResult  StringBuffer  sb  boolean  done  negative  double[]  bigtens  tens  double  d  df  dfloor  BigInteger  b  bigBase  delta  mhi  mlo  s  x  int[]  bbits  bits  dtoaModes  e  String  intDigits  int  Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  base  d0  d1  de  digit  exp  i  j  j1  k  n_bigtens  offset  p  q  s2  val  word0  word1  x  y  z  long  Exp_msk1L  Frac_maskL  dBits  floorBits  lfloor  mantissa  char[]  buffer  
[buglab_swap_variables]^int j = mlo.compareTo ( b ) ;^369^^^^^354^384^int j = b.compareTo ( mlo ) ;^[CLASS] DToA  [METHOD] JS_dtobasestr [RETURN_TYPE] String   int base double d [VARIABLES] BigInteger[]  divResult  StringBuffer  sb  boolean  done  negative  double[]  bigtens  tens  double  d  df  dfloor  BigInteger  b  bigBase  delta  mhi  mlo  s  x  int[]  bbits  bits  dtoaModes  e  String  intDigits  int  Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  base  d0  d1  de  digit  exp  i  j  j1  k  n_bigtens  offset  p  q  s2  val  word0  word1  x  y  z  long  Exp_msk1L  Frac_maskL  dBits  floorBits  lfloor  mantissa  char[]  buffer  
[buglab_swap_variables]^BigInteger delta = mhi.subtract ( s ) ;^371^^^^^356^386^BigInteger delta = s.subtract ( mhi ) ;^[CLASS] DToA  [METHOD] JS_dtobasestr [RETURN_TYPE] String   int base double d [VARIABLES] BigInteger[]  divResult  StringBuffer  sb  boolean  done  negative  double[]  bigtens  tens  double  d  df  dfloor  BigInteger  b  bigBase  delta  mhi  mlo  s  x  int[]  bbits  bits  dtoaModes  e  String  intDigits  int  Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  base  d0  d1  de  digit  exp  i  j  j1  k  n_bigtens  offset  p  q  s2  val  word0  word1  x  y  z  long  Exp_msk1L  Frac_maskL  dBits  floorBits  lfloor  mantissa  char[]  buffer  
[buglab_swap_variables]^int j1 =  ( b.signum (  )  <= 0 )  ? 1 : delta.compareTo ( delta ) ;^372^^^^^357^387^int j1 =  ( delta.signum (  )  <= 0 )  ? 1 : b.compareTo ( delta ) ;^[CLASS] DToA  [METHOD] JS_dtobasestr [RETURN_TYPE] String   int base double d [VARIABLES] BigInteger[]  divResult  StringBuffer  sb  boolean  done  negative  double[]  bigtens  tens  double  d  df  dfloor  BigInteger  b  bigBase  delta  mhi  mlo  s  x  int[]  bbits  bits  dtoaModes  e  String  intDigits  int  Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  base  d0  d1  de  digit  exp  i  j  j1  k  n_bigtens  offset  p  q  s2  val  word0  word1  x  y  z  long  Exp_msk1L  Frac_maskL  dBits  floorBits  lfloor  mantissa  char[]  buffer  
[buglab_swap_variables]^b = b.shiftLeft ( s2[0] + e ) ;^345^^^^^330^360^b = b.shiftLeft ( e[0] + s2 ) ;^[CLASS] DToA  [METHOD] JS_dtobasestr [RETURN_TYPE] String   int base double d [VARIABLES] BigInteger[]  divResult  StringBuffer  sb  boolean  done  negative  double[]  bigtens  tens  double  d  df  dfloor  BigInteger  b  bigBase  delta  mhi  mlo  s  x  int[]  bbits  bits  dtoaModes  e  String  intDigits  int  Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  base  d0  d1  de  digit  exp  i  j  j1  k  n_bigtens  offset  p  q  s2  val  word0  word1  x  y  z  long  Exp_msk1L  Frac_maskL  dBits  floorBits  lfloor  mantissa  char[]  buffer  
[buglab_swap_variables]^sb.append ( p, 0, buffer ) ;^401^^^^^386^416^sb.append ( buffer, 0, p ) ;^[CLASS] DToA  [METHOD] JS_dtobasestr [RETURN_TYPE] String   int base double d [VARIABLES] BigInteger[]  divResult  StringBuffer  sb  boolean  done  negative  double[]  bigtens  tens  double  d  df  dfloor  BigInteger  b  bigBase  delta  mhi  mlo  s  x  int[]  bbits  bits  dtoaModes  e  String  intDigits  int  Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  base  d0  d1  de  digit  exp  i  j  j1  k  n_bigtens  offset  p  q  s2  val  word0  word1  x  y  z  long  Exp_msk1L  Frac_maskL  dBits  floorBits  lfloor  mantissa  char[]  buffer  
[buglab_swap_variables]^sb.append (  0, p ) ;^401^^^^^386^416^sb.append ( buffer, 0, p ) ;^[CLASS] DToA  [METHOD] JS_dtobasestr [RETURN_TYPE] String   int base double d [VARIABLES] BigInteger[]  divResult  StringBuffer  sb  boolean  done  negative  double[]  bigtens  tens  double  d  df  dfloor  BigInteger  b  bigBase  delta  mhi  mlo  s  x  int[]  bbits  bits  dtoaModes  e  String  intDigits  int  Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  base  d0  d1  de  digit  exp  i  j  j1  k  n_bigtens  offset  p  q  s2  val  word0  word1  x  y  z  long  Exp_msk1L  Frac_maskL  dBits  floorBits  lfloor  mantissa  char[]  buffer  
[buglab_swap_variables]^sb.append ( buffer, 0 ) ;^401^^^^^386^416^sb.append ( buffer, 0, p ) ;^[CLASS] DToA  [METHOD] JS_dtobasestr [RETURN_TYPE] String   int base double d [VARIABLES] BigInteger[]  divResult  StringBuffer  sb  boolean  done  negative  double[]  bigtens  tens  double  d  df  dfloor  BigInteger  b  bigBase  delta  mhi  mlo  s  x  int[]  bbits  bits  dtoaModes  e  String  intDigits  int  Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  base  d0  d1  de  digit  exp  i  j  j1  k  n_bigtens  offset  p  q  s2  val  word0  word1  x  y  z  long  Exp_msk1L  Frac_maskL  dBits  floorBits  lfloor  mantissa  char[]  buffer  
[buglab_swap_variables]^if  (  ( word1 == 0 )  &&  (  ( Bndry_mask & word0 )  == 0 ) &&  (  ( word0 &  ( Exp_mask & Exp_mask << 1 )  )  != 0 )  )  {^337^338^^^^322^352^if  (  ( word1 == 0 )  &&  (  ( word0 & Bndry_mask )  == 0 ) &&  (  ( word0 &  ( Exp_mask & Exp_mask << 1 )  )  != 0 )  )  {^[CLASS] DToA  [METHOD] JS_dtobasestr [RETURN_TYPE] String   int base double d [VARIABLES] BigInteger[]  divResult  StringBuffer  sb  boolean  done  negative  double[]  bigtens  tens  double  d  df  dfloor  BigInteger  b  bigBase  delta  mhi  mlo  s  x  int[]  bbits  bits  dtoaModes  e  String  intDigits  int  Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  base  d0  d1  de  digit  exp  i  j  j1  k  n_bigtens  offset  p  q  s2  val  word0  word1  x  y  z  long  Exp_msk1L  Frac_maskL  dBits  floorBits  lfloor  mantissa  char[]  buffer  
[buglab_swap_variables]^if  ( bigBase == mhi ) mlo = mhi = mlo.multiply ( mlo ) ;^361^362^^^^346^376^if  ( mlo == mhi ) mlo = mhi = mlo.multiply ( bigBase ) ;^[CLASS] DToA  [METHOD] JS_dtobasestr [RETURN_TYPE] String   int base double d [VARIABLES] BigInteger[]  divResult  StringBuffer  sb  boolean  done  negative  double[]  bigtens  tens  double  d  df  dfloor  BigInteger  b  bigBase  delta  mhi  mlo  s  x  int[]  bbits  bits  dtoaModes  e  String  intDigits  int  Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  base  d0  d1  de  digit  exp  i  j  j1  k  n_bigtens  offset  p  q  s2  val  word0  word1  x  y  z  long  Exp_msk1L  Frac_maskL  dBits  floorBits  lfloor  mantissa  char[]  buffer  
[buglab_swap_variables]^if  ( word1 == 0 &&  (  ( j1 & 1 )  == 0 )  )  {^374^^^^^359^389^if  ( j1 == 0 &&  (  ( word1 & 1 )  == 0 )  )  {^[CLASS] DToA  [METHOD] JS_dtobasestr [RETURN_TYPE] String   int base double d [VARIABLES] BigInteger[]  divResult  StringBuffer  sb  boolean  done  negative  double[]  bigtens  tens  double  d  df  dfloor  BigInteger  b  bigBase  delta  mhi  mlo  s  x  int[]  bbits  bits  dtoaModes  e  String  intDigits  int  Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  base  d0  d1  de  digit  exp  i  j  j1  k  n_bigtens  offset  p  q  s2  val  word0  word1  x  y  z  long  Exp_msk1L  Frac_maskL  dBits  floorBits  lfloor  mantissa  char[]  buffer  
[buglab_swap_variables]^if  ( word1 < 0 ||  ( j == 0 &&  (  ( j & 1 )  == 0 )  )  )  {^379^^^^^364^394^if  ( j < 0 ||  ( j == 0 &&  (  ( word1 & 1 )  == 0 )  )  )  {^[CLASS] DToA  [METHOD] JS_dtobasestr [RETURN_TYPE] String   int base double d [VARIABLES] BigInteger[]  divResult  StringBuffer  sb  boolean  done  negative  double[]  bigtens  tens  double  d  df  dfloor  BigInteger  b  bigBase  delta  mhi  mlo  s  x  int[]  bbits  bits  dtoaModes  e  String  intDigits  int  Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  base  d0  d1  de  digit  exp  i  j  j1  k  n_bigtens  offset  p  q  s2  val  word0  word1  x  y  z  long  Exp_msk1L  Frac_maskL  dBits  floorBits  lfloor  mantissa  char[]  buffer  
[buglab_swap_variables]^b = d2b ( e, df, bbits ) ;^325^^^^^310^340^b = d2b ( df, e, bbits ) ;^[CLASS] DToA  [METHOD] JS_dtobasestr [RETURN_TYPE] String   int base double d [VARIABLES] BigInteger[]  divResult  StringBuffer  sb  boolean  done  negative  double[]  bigtens  tens  double  d  df  dfloor  BigInteger  b  bigBase  delta  mhi  mlo  s  x  int[]  bbits  bits  dtoaModes  e  String  intDigits  int  Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  base  d0  d1  de  digit  exp  i  j  j1  k  n_bigtens  offset  p  q  s2  val  word0  word1  x  y  z  long  Exp_msk1L  Frac_maskL  dBits  floorBits  lfloor  mantissa  char[]  buffer  
[buglab_swap_variables]^int s2 = - ( Exp_mask >>> Exp_shift1 & word0 >> Exp_shift1 ) ;^329^^^^^314^344^int s2 = - ( word0 >>> Exp_shift1 & Exp_mask >> Exp_shift1 ) ;^[CLASS] DToA  [METHOD] JS_dtobasestr [RETURN_TYPE] String   int base double d [VARIABLES] BigInteger[]  divResult  StringBuffer  sb  boolean  done  negative  double[]  bigtens  tens  double  d  df  dfloor  BigInteger  b  bigBase  delta  mhi  mlo  s  x  int[]  bbits  bits  dtoaModes  e  String  intDigits  int  Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  base  d0  d1  de  digit  exp  i  j  j1  k  n_bigtens  offset  p  q  s2  val  word0  word1  x  y  z  long  Exp_msk1L  Frac_maskL  dBits  floorBits  lfloor  mantissa  char[]  buffer  
[buglab_swap_variables]^return k.multiply ( BigInteger.valueOf ( 5 ) .pow ( b )  ) ;^464^^^^^462^465^return b.multiply ( BigInteger.valueOf ( 5 ) .pow ( k )  ) ;^[CLASS] DToA  [METHOD] pow5mult [RETURN_TYPE] BigInteger   BigInteger b int k [VARIABLES] BigInteger  b  int[]  bbits  bits  dtoaModes  e  boolean  double[]  bigtens  tens  int  Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  base  d0  d1  de  digit  exp  i  j  j1  k  n_bigtens  offset  p  q  s2  val  word0  word1  x  y  z  long  Exp_msk1L  Frac_maskL  dBits  floorBits  lfloor  mantissa  
[buglab_swap_variables]^buf.setCharAt (   ( char )  ( c + 1 )  ) ;^474^^^^^467^481^buf.setCharAt ( i,  ( char )  ( c + 1 )  ) ;^[CLASS] DToA  [METHOD] roundOff [RETURN_TYPE] boolean   StringBuffer buf [VARIABLES] StringBuffer  buf  boolean  double[]  bigtens  tens  char  c  int[]  bbits  bits  dtoaModes  e  int  Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  base  d0  d1  de  digit  exp  i  j  j1  k  n_bigtens  offset  p  q  s2  val  word0  word1  x  y  z  long  Exp_msk1L  Frac_maskL  dBits  floorBits  lfloor  mantissa  
[buglab_swap_variables]^char c = i.charAt ( buf ) ;^472^^^^^467^481^char c = buf.charAt ( i ) ;^[CLASS] DToA  [METHOD] roundOff [RETURN_TYPE] boolean   StringBuffer buf [VARIABLES] StringBuffer  buf  boolean  double[]  bigtens  tens  char  c  int[]  bbits  bits  dtoaModes  e  int  Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  base  d0  d1  de  digit  exp  i  j  j1  k  n_bigtens  offset  p  q  s2  val  word0  word1  x  y  z  long  Exp_msk1L  Frac_maskL  dBits  floorBits  lfloor  mantissa  
[buglab_swap_variables]^buf.setCharAt ( c,  ( ihar )  ( c + 1 )  ) ;^474^^^^^467^481^buf.setCharAt ( i,  ( char )  ( c + 1 )  ) ;^[CLASS] DToA  [METHOD] roundOff [RETURN_TYPE] boolean   StringBuffer buf [VARIABLES] StringBuffer  buf  boolean  double[]  bigtens  tens  char  c  int[]  bbits  bits  dtoaModes  e  int  Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  base  d0  d1  de  digit  exp  i  j  j1  k  n_bigtens  offset  p  q  s2  val  word0  word1  x  y  z  long  Exp_msk1L  Frac_maskL  dBits  floorBits  lfloor  mantissa  
[buglab_swap_variables]^if  (  ( word0 ( Sign_bit )  & d )  != 0 )  {^540^^^^^525^555^if  (  ( word0 ( d )  & Sign_bit )  != 0 )  {^[CLASS] DToA  [METHOD] JS_dtoa [RETURN_TYPE] int   double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [VARIABLES] byte[]  S_bytes  StringBuffer  buf  BigInteger[]  divResult  boolean  biasUp  denorm  fast_failed  k_check  leftright  spec_case  try_quick  double[]  bigtens  tens  double  d  d2  ds  eps  char  dig  lastCh  BigInteger  S  b  b1  delta  mhi  mlo  int[]  bbits  be  bits  dtoaModes  e  boolean[]  sign  int  Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  long  Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x  
[buglab_swap_variables]^d = setWord0 (  word0 ( d )  & ~Sign_bit ) ;^544^^^^^529^559^d = setWord0 ( d, word0 ( d )  & ~Sign_bit ) ;^[CLASS] DToA  [METHOD] JS_dtoa [RETURN_TYPE] int   double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [VARIABLES] byte[]  S_bytes  StringBuffer  buf  BigInteger[]  divResult  boolean  biasUp  denorm  fast_failed  k_check  leftright  spec_case  try_quick  double[]  bigtens  tens  double  d  d2  ds  eps  char  dig  lastCh  BigInteger  S  b  b1  delta  mhi  mlo  int[]  bbits  be  bits  dtoaModes  e  boolean[]  sign  int  Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  long  Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x  
[buglab_swap_variables]^if  (  ( word0 ( Exp_mask )  & d )  == Exp_mask )  {^549^^^^^534^564^if  (  ( word0 ( d )  & Exp_mask )  == Exp_mask )  {^[CLASS] DToA  [METHOD] JS_dtoa [RETURN_TYPE] int   double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [VARIABLES] byte[]  S_bytes  StringBuffer  buf  BigInteger[]  divResult  boolean  biasUp  denorm  fast_failed  k_check  leftright  spec_case  try_quick  double[]  bigtens  tens  double  d  d2  ds  eps  char  dig  lastCh  BigInteger  S  b  b1  delta  mhi  mlo  int[]  bbits  be  bits  dtoaModes  e  boolean[]  sign  int  Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  long  Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x  
[buglab_swap_variables]^buf.append (  (  ( word1 ( Frac_mask )  == 0 )  &&  (  ( word0 ( d )  & d )  == 0 )  )  ? "Infinity" : "NaN" ) ;^551^^^^^536^566^buf.append (  (  ( word1 ( d )  == 0 )  &&  (  ( word0 ( d )  & Frac_mask )  == 0 )  )  ? "Infinity" : "NaN" ) ;^[CLASS] DToA  [METHOD] JS_dtoa [RETURN_TYPE] int   double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [VARIABLES] byte[]  S_bytes  StringBuffer  buf  BigInteger[]  divResult  boolean  biasUp  denorm  fast_failed  k_check  leftright  spec_case  try_quick  double[]  bigtens  tens  double  d  d2  ds  eps  char  dig  lastCh  BigInteger  S  b  b1  delta  mhi  mlo  int[]  bbits  be  bits  dtoaModes  e  boolean[]  sign  int  Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  long  Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x  
[buglab_swap_variables]^b = bbits2b ( d, be, d ) ;^561^^^^^546^576^b = d2b ( d, be, bbits ) ;^[CLASS] DToA  [METHOD] JS_dtoa [RETURN_TYPE] int   double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [VARIABLES] byte[]  S_bytes  StringBuffer  buf  BigInteger[]  divResult  boolean  biasUp  denorm  fast_failed  k_check  leftright  spec_case  try_quick  double[]  bigtens  tens  double  d  d2  ds  eps  char  dig  lastCh  BigInteger  S  b  b1  delta  mhi  mlo  int[]  bbits  be  bits  dtoaModes  e  boolean[]  sign  int  Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  long  Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x  
[buglab_swap_variables]^b = d2b (  be, bbits ) ;^561^^^^^546^576^b = d2b ( d, be, bbits ) ;^[CLASS] DToA  [METHOD] JS_dtoa [RETURN_TYPE] int   double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [VARIABLES] byte[]  S_bytes  StringBuffer  buf  BigInteger[]  divResult  boolean  biasUp  denorm  fast_failed  k_check  leftright  spec_case  try_quick  double[]  bigtens  tens  double  d  d2  ds  eps  char  dig  lastCh  BigInteger  S  b  b1  delta  mhi  mlo  int[]  bbits  be  bits  dtoaModes  e  boolean[]  sign  int  Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  long  Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x  
[buglab_swap_variables]^b = d2b ( d, bbits, be ) ;^561^^^^^546^576^b = d2b ( d, be, bbits ) ;^[CLASS] DToA  [METHOD] JS_dtoa [RETURN_TYPE] int   double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [VARIABLES] byte[]  S_bytes  StringBuffer  buf  BigInteger[]  divResult  boolean  biasUp  denorm  fast_failed  k_check  leftright  spec_case  try_quick  double[]  bigtens  tens  double  d  d2  ds  eps  char  dig  lastCh  BigInteger  S  b  b1  delta  mhi  mlo  int[]  bbits  be  bits  dtoaModes  e  boolean[]  sign  int  Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  long  Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x  
[buglab_swap_variables]^b = d2b ( d,  bbits ) ;^561^^^^^546^576^b = d2b ( d, be, bbits ) ;^[CLASS] DToA  [METHOD] JS_dtoa [RETURN_TYPE] int   double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [VARIABLES] byte[]  S_bytes  StringBuffer  buf  BigInteger[]  divResult  boolean  biasUp  denorm  fast_failed  k_check  leftright  spec_case  try_quick  double[]  bigtens  tens  double  d  d2  ds  eps  char  dig  lastCh  BigInteger  S  b  b1  delta  mhi  mlo  int[]  bbits  be  bits  dtoaModes  e  boolean[]  sign  int  Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  long  Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x  
[buglab_swap_variables]^b = d2b ( d, be ) ;^561^^^^^546^576^b = d2b ( d, be, bbits ) ;^[CLASS] DToA  [METHOD] JS_dtoa [RETURN_TYPE] int   double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [VARIABLES] byte[]  S_bytes  StringBuffer  buf  BigInteger[]  divResult  boolean  biasUp  denorm  fast_failed  k_check  leftright  spec_case  try_quick  double[]  bigtens  tens  double  d  d2  ds  eps  char  dig  lastCh  BigInteger  S  b  b1  delta  mhi  mlo  int[]  bbits  be  bits  dtoaModes  e  boolean[]  sign  int  Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  long  Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x  
[buglab_swap_variables]^b = be2b ( d, d, bbits ) ;^561^^^^^546^576^b = d2b ( d, be, bbits ) ;^[CLASS] DToA  [METHOD] JS_dtoa [RETURN_TYPE] int   double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [VARIABLES] byte[]  S_bytes  StringBuffer  buf  BigInteger[]  divResult  boolean  biasUp  denorm  fast_failed  k_check  leftright  spec_case  try_quick  double[]  bigtens  tens  double  d  d2  ds  eps  char  dig  lastCh  BigInteger  S  b  b1  delta  mhi  mlo  int[]  bbits  be  bits  dtoaModes  e  boolean[]  sign  int  Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  long  Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x  
[buglab_swap_variables]^if  (  ( Exp_shift1 =  ( word0 ( d )  >>> i &  ( Exp_mask>>Exp_shift1 )  )  )  != 0 )  {^562^^^^^547^577^if  (  ( i =  ( word0 ( d )  >>> Exp_shift1 &  ( Exp_mask>>Exp_shift1 )  )  )  != 0 )  {^[CLASS] DToA  [METHOD] JS_dtoa [RETURN_TYPE] int   double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [VARIABLES] byte[]  S_bytes  StringBuffer  buf  BigInteger[]  divResult  boolean  biasUp  denorm  fast_failed  k_check  leftright  spec_case  try_quick  double[]  bigtens  tens  double  d  d2  ds  eps  char  dig  lastCh  BigInteger  S  b  b1  delta  mhi  mlo  int[]  bbits  be  bits  dtoaModes  e  boolean[]  sign  int  Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  long  Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x  
[buglab_swap_variables]^if  (  ( Exp_mask =  ( word0 ( d )  >>> Exp_shift1 &  ( i>>Exp_shift1 )  )  )  != 0 )  {^562^^^^^547^577^if  (  ( i =  ( word0 ( d )  >>> Exp_shift1 &  ( Exp_mask>>Exp_shift1 )  )  )  != 0 )  {^[CLASS] DToA  [METHOD] JS_dtoa [RETURN_TYPE] int   double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [VARIABLES] byte[]  S_bytes  StringBuffer  buf  BigInteger[]  divResult  boolean  biasUp  denorm  fast_failed  k_check  leftright  spec_case  try_quick  double[]  bigtens  tens  double  d  d2  ds  eps  char  dig  lastCh  BigInteger  S  b  b1  delta  mhi  mlo  int[]  bbits  be  bits  dtoaModes  e  boolean[]  sign  int  Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  long  Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x  
[buglab_swap_variables]^i = be[0] + bbits[0] +  ( Bias +  ( P-1 )  - 1 ) ;^590^^^^^575^605^i = bbits[0] + be[0] +  ( Bias +  ( P-1 )  - 1 ) ;^[CLASS] DToA  [METHOD] JS_dtoa [RETURN_TYPE] int   double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [VARIABLES] byte[]  S_bytes  StringBuffer  buf  BigInteger[]  divResult  boolean  biasUp  denorm  fast_failed  k_check  leftright  spec_case  try_quick  double[]  bigtens  tens  double  d  d2  ds  eps  char  dig  lastCh  BigInteger  S  b  b1  delta  mhi  mlo  int[]  bbits  be  bits  dtoaModes  e  boolean[]  sign  int  Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  long  Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x  
[buglab_swap_variables]^i = bbits[0] + be[0] +  ( P +  ( Bias-1 )  - 1 ) ;^590^^^^^575^605^i = bbits[0] + be[0] +  ( Bias +  ( P-1 )  - 1 ) ;^[CLASS] DToA  [METHOD] JS_dtoa [RETURN_TYPE] int   double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [VARIABLES] byte[]  S_bytes  StringBuffer  buf  BigInteger[]  divResult  boolean  biasUp  denorm  fast_failed  k_check  leftright  spec_case  try_quick  double[]  bigtens  tens  double  d  d2  ds  eps  char  dig  lastCh  BigInteger  S  b  b1  delta  mhi  mlo  int[]  bbits  be  bits  dtoaModes  e  boolean[]  sign  int  Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  long  Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x  
[buglab_swap_variables]^x =  ( d > 32 )  ? word0 ( i )  <<  ( 64 - i )  | word1 ( d )  >>>  ( i - 32 )  : word1 ( d )  <<  ( 32 - i ) ;^591^^^^^576^606^x =  ( i > 32 )  ? word0 ( d )  <<  ( 64 - i )  | word1 ( d )  >>>  ( i - 32 )  : word1 ( d )  <<  ( 32 - i ) ;^[CLASS] DToA  [METHOD] JS_dtoa [RETURN_TYPE] int   double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [VARIABLES] byte[]  S_bytes  StringBuffer  buf  BigInteger[]  divResult  boolean  biasUp  denorm  fast_failed  k_check  leftright  spec_case  try_quick  double[]  bigtens  tens  double  d  d2  ds  eps  char  dig  lastCh  BigInteger  S  b  b1  delta  mhi  mlo  int[]  bbits  be  bits  dtoaModes  e  boolean[]  sign  int  Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  long  Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x  
[buglab_swap_variables]^d2 = setWord0 (  word0 ( x )  - 31*Exp_msk1 ) ;^594^^^^^579^609^d2 = setWord0 ( x, word0 ( x )  - 31*Exp_msk1 ) ;^[CLASS] DToA  [METHOD] JS_dtoa [RETURN_TYPE] int   double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [VARIABLES] byte[]  S_bytes  StringBuffer  buf  BigInteger[]  divResult  boolean  biasUp  denorm  fast_failed  k_check  leftright  spec_case  try_quick  double[]  bigtens  tens  double  d  d2  ds  eps  char  dig  lastCh  BigInteger  S  b  b1  delta  mhi  mlo  int[]  bbits  be  bits  dtoaModes  e  boolean[]  sign  int  Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  long  Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x  
[buglab_swap_variables]^i -=  ( P +  ( Bias-1 )  - 1 )  + 1;^595^^^^^580^610^i -=  ( Bias +  ( P-1 )  - 1 )  + 1;^[CLASS] DToA  [METHOD] JS_dtoa [RETURN_TYPE] int   double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [VARIABLES] byte[]  S_bytes  StringBuffer  buf  BigInteger[]  divResult  boolean  biasUp  denorm  fast_failed  k_check  leftright  spec_case  try_quick  double[]  bigtens  tens  double  d  d2  ds  eps  char  dig  lastCh  BigInteger  S  b  b1  delta  mhi  mlo  int[]  bbits  be  bits  dtoaModes  e  boolean[]  sign  int  Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  long  Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x  
[buglab_swap_variables]^d2 = setWord0 ( Frac_mask1,  ( word0 ( d )  & d )  | Exp_11 ) ;^563^^^^^548^578^d2 = setWord0 ( d,  ( word0 ( d )  & Frac_mask1 )  | Exp_11 ) ;^[CLASS] DToA  [METHOD] JS_dtoa [RETURN_TYPE] int   double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [VARIABLES] byte[]  S_bytes  StringBuffer  buf  BigInteger[]  divResult  boolean  biasUp  denorm  fast_failed  k_check  leftright  spec_case  try_quick  double[]  bigtens  tens  double  d  d2  ds  eps  char  dig  lastCh  BigInteger  S  b  b1  delta  mhi  mlo  int[]  bbits  be  bits  dtoaModes  e  boolean[]  sign  int  Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  long  Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x  
[buglab_swap_variables]^d2 = setWord0 (   ( word0 ( d )  & Frac_mask1 )  | Exp_11 ) ;^563^^^^^548^578^d2 = setWord0 ( d,  ( word0 ( d )  & Frac_mask1 )  | Exp_11 ) ;^[CLASS] DToA  [METHOD] JS_dtoa [RETURN_TYPE] int   double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [VARIABLES] byte[]  S_bytes  StringBuffer  buf  BigInteger[]  divResult  boolean  biasUp  denorm  fast_failed  k_check  leftright  spec_case  try_quick  double[]  bigtens  tens  double  d  d2  ds  eps  char  dig  lastCh  BigInteger  S  b  b1  delta  mhi  mlo  int[]  bbits  be  bits  dtoaModes  e  boolean[]  sign  int  Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  long  Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x  
[buglab_swap_variables]^d2 = setWord0 ( d,  ( word0 ( d )  & Exp_11 )  | Frac_mask1 ) ;^563^^^^^548^578^d2 = setWord0 ( d,  ( word0 ( d )  & Frac_mask1 )  | Exp_11 ) ;^[CLASS] DToA  [METHOD] JS_dtoa [RETURN_TYPE] int   double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [VARIABLES] byte[]  S_bytes  StringBuffer  buf  BigInteger[]  divResult  boolean  biasUp  denorm  fast_failed  k_check  leftright  spec_case  try_quick  double[]  bigtens  tens  double  d  d2  ds  eps  char  dig  lastCh  BigInteger  S  b  b1  delta  mhi  mlo  int[]  bbits  be  bits  dtoaModes  e  boolean[]  sign  int  Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  long  Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x  
[buglab_swap_variables]^if  (  ( i =  ( word0 ( Exp_mask )  >>> Exp_shift1 &  ( d>>Exp_shift1 )  )  )  != 0 )  {^562^^^^^547^577^if  (  ( i =  ( word0 ( d )  >>> Exp_shift1 &  ( Exp_mask>>Exp_shift1 )  )  )  != 0 )  {^[CLASS] DToA  [METHOD] JS_dtoa [RETURN_TYPE] int   double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [VARIABLES] byte[]  S_bytes  StringBuffer  buf  BigInteger[]  divResult  boolean  biasUp  denorm  fast_failed  k_check  leftright  spec_case  try_quick  double[]  bigtens  tens  double  d  d2  ds  eps  char  dig  lastCh  BigInteger  S  b  b1  delta  mhi  mlo  int[]  bbits  be  bits  dtoaModes  e  boolean[]  sign  int  Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  long  Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x  
[buglab_swap_variables]^if  (  ( i =  ( word0 ( d )  >>> Exp_mask &  ( Exp_shift1>>Exp_shift1 )  )  )  != 0 )  {^562^^^^^547^577^if  (  ( i =  ( word0 ( d )  >>> Exp_shift1 &  ( Exp_mask>>Exp_shift1 )  )  )  != 0 )  {^[CLASS] DToA  [METHOD] JS_dtoa [RETURN_TYPE] int   double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [VARIABLES] byte[]  S_bytes  StringBuffer  buf  BigInteger[]  divResult  boolean  biasUp  denorm  fast_failed  k_check  leftright  spec_case  try_quick  double[]  bigtens  tens  double  d  d2  ds  eps  char  dig  lastCh  BigInteger  S  b  b1  delta  mhi  mlo  int[]  bbits  be  bits  dtoaModes  e  boolean[]  sign  int  Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  long  Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x  
[buglab_swap_variables]^d2 = setWord0 ( Exp_11,  ( word0 ( d )  & Frac_mask1 )  | d ) ;^563^^^^^548^578^d2 = setWord0 ( d,  ( word0 ( d )  & Frac_mask1 )  | Exp_11 ) ;^[CLASS] DToA  [METHOD] JS_dtoa [RETURN_TYPE] int   double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [VARIABLES] byte[]  S_bytes  StringBuffer  buf  BigInteger[]  divResult  boolean  biasUp  denorm  fast_failed  k_check  leftright  spec_case  try_quick  double[]  bigtens  tens  double  d  d2  ds  eps  char  dig  lastCh  BigInteger  S  b  b1  delta  mhi  mlo  int[]  bbits  be  bits  dtoaModes  e  boolean[]  sign  int  Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  long  Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x  
[buglab_swap_variables]^i = P[0] + be[0] +  ( Bias +  ( bbits-1 )  - 1 ) ;^590^^^^^575^605^i = bbits[0] + be[0] +  ( Bias +  ( P-1 )  - 1 ) ;^[CLASS] DToA  [METHOD] JS_dtoa [RETURN_TYPE] int   double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [VARIABLES] byte[]  S_bytes  StringBuffer  buf  BigInteger[]  divResult  boolean  biasUp  denorm  fast_failed  k_check  leftright  spec_case  try_quick  double[]  bigtens  tens  double  d  d2  ds  eps  char  dig  lastCh  BigInteger  S  b  b1  delta  mhi  mlo  int[]  bbits  be  bits  dtoaModes  e  boolean[]  sign  int  Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  long  Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x  
[buglab_swap_variables]^i = bbits[0] + P[0] +  ( Bias +  ( be-1 )  - 1 ) ;^590^^^^^575^605^i = bbits[0] + be[0] +  ( Bias +  ( P-1 )  - 1 ) ;^[CLASS] DToA  [METHOD] JS_dtoa [RETURN_TYPE] int   double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [VARIABLES] byte[]  S_bytes  StringBuffer  buf  BigInteger[]  divResult  boolean  biasUp  denorm  fast_failed  k_check  leftright  spec_case  try_quick  double[]  bigtens  tens  double  d  d2  ds  eps  char  dig  lastCh  BigInteger  S  b  b1  delta  mhi  mlo  int[]  bbits  be  bits  dtoaModes  e  boolean[]  sign  int  Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  long  Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x  
[buglab_swap_variables]^ds =  ( i-1.5 ) *0.289529654602168 + 0.1760912590558 + d2*0.301029995663981;^599^^^^^584^614^ds =  ( d2-1.5 ) *0.289529654602168 + 0.1760912590558 + i*0.301029995663981;^[CLASS] DToA  [METHOD] JS_dtoa [RETURN_TYPE] int   double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [VARIABLES] byte[]  S_bytes  StringBuffer  buf  BigInteger[]  divResult  boolean  biasUp  denorm  fast_failed  k_check  leftright  spec_case  try_quick  double[]  bigtens  tens  double  d  d2  ds  eps  char  dig  lastCh  BigInteger  S  b  b1  delta  mhi  mlo  int[]  bbits  be  bits  dtoaModes  e  boolean[]  sign  int  Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  long  Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x  
[buglab_swap_variables]^if  ( k < 0.0 && ds != ds ) k k_check = true;^601^602^603^^^586^616^if  ( ds < 0.0 && ds != k ) k k_check = true;^[CLASS] DToA  [METHOD] JS_dtoa [RETURN_TYPE] int   double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [VARIABLES] byte[]  S_bytes  StringBuffer  buf  BigInteger[]  divResult  boolean  biasUp  denorm  fast_failed  k_check  leftright  spec_case  try_quick  double[]  bigtens  tens  double  d  d2  ds  eps  char  dig  lastCh  BigInteger  S  b  b1  delta  mhi  mlo  int[]  bbits  be  bits  dtoaModes  e  boolean[]  sign  int  Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  long  Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x  
[buglab_swap_variables]^if  ( Ten_pmax >= 0 && k <= k )  {^604^^^^^589^619^if  ( k >= 0 && k <= Ten_pmax )  {^[CLASS] DToA  [METHOD] JS_dtoa [RETURN_TYPE] int   double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [VARIABLES] byte[]  S_bytes  StringBuffer  buf  BigInteger[]  divResult  boolean  biasUp  denorm  fast_failed  k_check  leftright  spec_case  try_quick  double[]  bigtens  tens  double  d  d2  ds  eps  char  dig  lastCh  BigInteger  S  b  b1  delta  mhi  mlo  int[]  bbits  be  bits  dtoaModes  e  boolean[]  sign  int  Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  long  Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x  
[buglab_swap_variables]^if  ( tens < d[k] ) k--;^605^606^^^^590^620^if  ( d < tens[k] ) k--;^[CLASS] DToA  [METHOD] JS_dtoa [RETURN_TYPE] int   double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [VARIABLES] byte[]  S_bytes  StringBuffer  buf  BigInteger[]  divResult  boolean  biasUp  denorm  fast_failed  k_check  leftright  spec_case  try_quick  double[]  bigtens  tens  double  d  d2  ds  eps  char  dig  lastCh  BigInteger  S  b  b1  delta  mhi  mlo  int[]  bbits  be  bits  dtoaModes  e  boolean[]  sign  int  Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  long  Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x  
[buglab_swap_variables]^if  ( d < k[k] ) tens--;^605^606^^^^590^620^if  ( d < tens[k] ) k--;^[CLASS] DToA  [METHOD] JS_dtoa [RETURN_TYPE] int   double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [VARIABLES] byte[]  S_bytes  StringBuffer  buf  BigInteger[]  divResult  boolean  biasUp  denorm  fast_failed  k_check  leftright  spec_case  try_quick  double[]  bigtens  tens  double  d  d2  ds  eps  char  dig  lastCh  BigInteger  S  b  b1  delta  mhi  mlo  int[]  bbits  be  bits  dtoaModes  e  boolean[]  sign  int  Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  long  Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x  
[buglab_swap_variables]^if  ( k < tens[k] ) d--;^605^606^^^^590^620^if  ( d < tens[k] ) k--;^[CLASS] DToA  [METHOD] JS_dtoa [RETURN_TYPE] int   double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [VARIABLES] byte[]  S_bytes  StringBuffer  buf  BigInteger[]  divResult  boolean  biasUp  denorm  fast_failed  k_check  leftright  spec_case  try_quick  double[]  bigtens  tens  double  d  d2  ds  eps  char  dig  lastCh  BigInteger  S  b  b1  delta  mhi  mlo  int[]  bbits  be  bits  dtoaModes  e  boolean[]  sign  int  Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  long  Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x  
[buglab_swap_variables]^j = i[0] - bbits - 1;^611^^^^^596^626^j = bbits[0] - i - 1;^[CLASS] DToA  [METHOD] JS_dtoa [RETURN_TYPE] int   double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [VARIABLES] byte[]  S_bytes  StringBuffer  buf  BigInteger[]  divResult  boolean  biasUp  denorm  fast_failed  k_check  leftright  spec_case  try_quick  double[]  bigtens  tens  double  d  d2  ds  eps  char  dig  lastCh  BigInteger  S  b  b1  delta  mhi  mlo  int[]  bbits  be  bits  dtoaModes  e  boolean[]  sign  int  Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  long  Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x  
[buglab_swap_variables]^i = k + ndigits + 1;^661^^^^^646^676^i = ndigits + k + 1;^[CLASS] DToA  [METHOD] JS_dtoa [RETURN_TYPE] int   double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [VARIABLES] byte[]  S_bytes  StringBuffer  buf  BigInteger[]  divResult  boolean  biasUp  denorm  fast_failed  k_check  leftright  spec_case  try_quick  double[]  bigtens  tens  double  d  d2  ds  eps  char  dig  lastCh  BigInteger  S  b  b1  delta  mhi  mlo  int[]  bbits  be  bits  dtoaModes  e  boolean[]  sign  int  Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  long  Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x  
[buglab_swap_variables]^if  ( Quick_max >= 0 && ilim <= ilim && try_quick )  {^672^^^^^657^687^if  ( ilim >= 0 && ilim <= Quick_max && try_quick )  {^[CLASS] DToA  [METHOD] JS_dtoa [RETURN_TYPE] int   double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [VARIABLES] byte[]  S_bytes  StringBuffer  buf  BigInteger[]  divResult  boolean  biasUp  denorm  fast_failed  k_check  leftright  spec_case  try_quick  double[]  bigtens  tens  double  d  d2  ds  eps  char  dig  lastCh  BigInteger  S  b  b1  delta  mhi  mlo  int[]  bbits  be  bits  dtoaModes  e  boolean[]  sign  int  Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  long  Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x  
[buglab_swap_variables]^else jf  (  ( i1 = -k )  != 0 )  {^698^^^^^683^713^else if  (  ( j1 = -k )  != 0 )  {^[CLASS] DToA  [METHOD] JS_dtoa [RETURN_TYPE] int   double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [VARIABLES] byte[]  S_bytes  StringBuffer  buf  BigInteger[]  divResult  boolean  biasUp  denorm  fast_failed  k_check  leftright  spec_case  try_quick  double[]  bigtens  tens  double  d  d2  ds  eps  char  dig  lastCh  BigInteger  S  b  b1  delta  mhi  mlo  int[]  bbits  be  bits  dtoaModes  e  boolean[]  sign  int  Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  long  Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x  
[buglab_swap_variables]^for ( j1 = j >> 4;  ( j != 0 ) ; j >>= 1, i++ ) if  (  ( j & 1 )  != 0 )  {^700^701^^^^685^715^for ( j = j1 >> 4;  ( j != 0 ) ; j >>= 1, i++ ) if  (  ( j & 1 )  != 0 )  {^[CLASS] DToA  [METHOD] JS_dtoa [RETURN_TYPE] int   double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [VARIABLES] byte[]  S_bytes  StringBuffer  buf  BigInteger[]  divResult  boolean  biasUp  denorm  fast_failed  k_check  leftright  spec_case  try_quick  double[]  bigtens  tens  double  d  d2  ds  eps  char  dig  lastCh  BigInteger  S  b  b1  delta  mhi  mlo  int[]  bbits  be  bits  dtoaModes  e  boolean[]  sign  int  Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  long  Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x  
[buglab_swap_variables]^for ( i = j1 >> 4;  ( j != 0 ) ; j >>= 1, j++ ) if  (  ( j & 1 )  != 0 )  {^700^701^^^^685^715^for ( j = j1 >> 4;  ( j != 0 ) ; j >>= 1, i++ ) if  (  ( j & 1 )  != 0 )  {^[CLASS] DToA  [METHOD] JS_dtoa [RETURN_TYPE] int   double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [VARIABLES] byte[]  S_bytes  StringBuffer  buf  BigInteger[]  divResult  boolean  biasUp  denorm  fast_failed  k_check  leftright  spec_case  try_quick  double[]  bigtens  tens  double  d  d2  ds  eps  char  dig  lastCh  BigInteger  S  b  b1  delta  mhi  mlo  int[]  bbits  be  bits  dtoaModes  e  boolean[]  sign  int  Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  long  Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x  
[buglab_swap_variables]^for ( j = i >> 4;  ( j != 0 ) ; j >>= 1, j1++ ) if  (  ( j & 1 )  != 0 )  {^700^701^^^^685^715^for ( j = j1 >> 4;  ( j != 0 ) ; j >>= 1, i++ ) if  (  ( j & 1 )  != 0 )  {^[CLASS] DToA  [METHOD] JS_dtoa [RETURN_TYPE] int   double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [VARIABLES] byte[]  S_bytes  StringBuffer  buf  BigInteger[]  divResult  boolean  biasUp  denorm  fast_failed  k_check  leftright  spec_case  try_quick  double[]  bigtens  tens  double  d  d2  ds  eps  char  dig  lastCh  BigInteger  S  b  b1  delta  mhi  mlo  int[]  bbits  be  bits  dtoaModes  e  boolean[]  sign  int  Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  long  Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x  
[buglab_swap_variables]^for ( j = j1 >> 4;  ( j != 0 ) ; j >>= 1++ ) if  (  ( j & 1 )  != 0 )  {^700^701^^^^685^715^for ( j = j1 >> 4;  ( j != 0 ) ; j >>= 1, i++ ) if  (  ( j & 1 )  != 0 )  {^[CLASS] DToA  [METHOD] JS_dtoa [RETURN_TYPE] int   double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [VARIABLES] byte[]  S_bytes  StringBuffer  buf  BigInteger[]  divResult  boolean  biasUp  denorm  fast_failed  k_check  leftright  spec_case  try_quick  double[]  bigtens  tens  double  d  d2  ds  eps  char  dig  lastCh  BigInteger  S  b  b1  delta  mhi  mlo  int[]  bbits  be  bits  dtoaModes  e  boolean[]  sign  int  Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  long  Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x  
[buglab_swap_variables]^for ( ;  ( i != 0 ) ; j >>= 1, j++ ) if  (  ( j & 1 )  != 0 )  {^691^692^^^^676^706^for ( ;  ( j != 0 ) ; j >>= 1, i++ ) if  (  ( j & 1 )  != 0 )  {^[CLASS] DToA  [METHOD] JS_dtoa [RETURN_TYPE] int   double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [VARIABLES] byte[]  S_bytes  StringBuffer  buf  BigInteger[]  divResult  boolean  biasUp  denorm  fast_failed  k_check  leftright  spec_case  try_quick  double[]  bigtens  tens  double  d  d2  ds  eps  char  dig  lastCh  BigInteger  S  b  b1  delta  mhi  mlo  int[]  bbits  be  bits  dtoaModes  e  boolean[]  sign  int  Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  long  Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x  
[buglab_swap_variables]^for ( ;  ( j != 0 ) ; j >>= 1++ ) if  (  ( j & 1 )  != 0 )  {^691^692^^^^676^706^for ( ;  ( j != 0 ) ; j >>= 1, i++ ) if  (  ( j & 1 )  != 0 )  {^[CLASS] DToA  [METHOD] JS_dtoa [RETURN_TYPE] int   double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [VARIABLES] byte[]  S_bytes  StringBuffer  buf  BigInteger[]  divResult  boolean  biasUp  denorm  fast_failed  k_check  leftright  spec_case  try_quick  double[]  bigtens  tens  double  d  d2  ds  eps  char  dig  lastCh  BigInteger  S  b  b1  delta  mhi  mlo  int[]  bbits  be  bits  dtoaModes  e  boolean[]  sign  int  Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  long  Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x  
[buglab_swap_variables]^if  (  ( Bletch & j )  != 0 )  {^685^^^^^670^700^if  (  ( j & Bletch )  != 0 )  {^[CLASS] DToA  [METHOD] JS_dtoa [RETURN_TYPE] int   double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [VARIABLES] byte[]  S_bytes  StringBuffer  buf  BigInteger[]  divResult  boolean  biasUp  denorm  fast_failed  k_check  leftright  spec_case  try_quick  double[]  bigtens  tens  double  d  d2  ds  eps  char  dig  lastCh  BigInteger  S  b  b1  delta  mhi  mlo  int[]  bbits  be  bits  dtoaModes  e  boolean[]  sign  int  Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  long  Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x  
[buglab_swap_variables]^else j1f  (  ( i = -k )  != 0 )  {^698^^^^^683^713^else if  (  ( j1 = -k )  != 0 )  {^[CLASS] DToA  [METHOD] JS_dtoa [RETURN_TYPE] int   double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [VARIABLES] byte[]  S_bytes  StringBuffer  buf  BigInteger[]  divResult  boolean  biasUp  denorm  fast_failed  k_check  leftright  spec_case  try_quick  double[]  bigtens  tens  double  d  d2  ds  eps  char  dig  lastCh  BigInteger  S  b  b1  delta  mhi  mlo  int[]  bbits  be  bits  dtoaModes  e  boolean[]  sign  int  Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  long  Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x  
[buglab_swap_variables]^if  ( d && k_check < 1.0 && ilim > 0 )  {^707^^^^^692^722^if  ( k_check && d < 1.0 && ilim > 0 )  {^[CLASS] DToA  [METHOD] JS_dtoa [RETURN_TYPE] int   double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [VARIABLES] byte[]  S_bytes  StringBuffer  buf  BigInteger[]  divResult  boolean  biasUp  denorm  fast_failed  k_check  leftright  spec_case  try_quick  double[]  bigtens  tens  double  d  d2  ds  eps  char  dig  lastCh  BigInteger  S  b  b1  delta  mhi  mlo  int[]  bbits  be  bits  dtoaModes  e  boolean[]  sign  int  Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  long  Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x  
[buglab_swap_variables]^if  ( ilim && d < 1.0 && k_check > 0 )  {^707^^^^^692^722^if  ( k_check && d < 1.0 && ilim > 0 )  {^[CLASS] DToA  [METHOD] JS_dtoa [RETURN_TYPE] int   double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [VARIABLES] byte[]  S_bytes  StringBuffer  buf  BigInteger[]  divResult  boolean  biasUp  denorm  fast_failed  k_check  leftright  spec_case  try_quick  double[]  bigtens  tens  double  d  d2  ds  eps  char  dig  lastCh  BigInteger  S  b  b1  delta  mhi  mlo  int[]  bbits  be  bits  dtoaModes  e  boolean[]  sign  int  Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  long  Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x  
[buglab_swap_variables]^if  ( eps > d )  {^725^^^^^710^740^if  ( d > eps )  {^[CLASS] DToA  [METHOD] JS_dtoa [RETURN_TYPE] int   double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [VARIABLES] byte[]  S_bytes  StringBuffer  buf  BigInteger[]  divResult  boolean  biasUp  denorm  fast_failed  k_check  leftright  spec_case  try_quick  double[]  bigtens  tens  double  d  d2  ds  eps  char  dig  lastCh  BigInteger  S  b  b1  delta  mhi  mlo  int[]  bbits  be  bits  dtoaModes  e  boolean[]  sign  int  Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  long  Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x  
[buglab_swap_variables]^if  ( eps > 0.5 + d )  {^781^^^^^766^796^if  ( d > 0.5 + eps )  {^[CLASS] DToA  [METHOD] JS_dtoa [RETURN_TYPE] int   double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [VARIABLES] byte[]  S_bytes  StringBuffer  buf  BigInteger[]  divResult  boolean  biasUp  denorm  fast_failed  k_check  leftright  spec_case  try_quick  double[]  bigtens  tens  double  d  d2  ds  eps  char  dig  lastCh  BigInteger  S  b  b1  delta  mhi  mlo  int[]  bbits  be  bits  dtoaModes  e  boolean[]  sign  int  Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  long  Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x  
[buglab_swap_variables]^if  ( eps < 0.5 - d )  {^798^^^^^783^813^if  ( d < 0.5 - eps )  {^[CLASS] DToA  [METHOD] JS_dtoa [RETURN_TYPE] int   double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [VARIABLES] byte[]  S_bytes  StringBuffer  buf  BigInteger[]  divResult  boolean  biasUp  denorm  fast_failed  k_check  leftright  spec_case  try_quick  double[]  bigtens  tens  double  d  d2  ds  eps  char  dig  lastCh  BigInteger  S  b  b1  delta  mhi  mlo  int[]  bbits  be  bits  dtoaModes  e  boolean[]  sign  int  Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  long  Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x  
[buglab_swap_variables]^for ( i = 1;; i++ *= 10.0 )  {^776^^^^^761^791^for ( i = 1;; i++, d *= 10.0 )  {^[CLASS] DToA  [METHOD] JS_dtoa [RETURN_TYPE] int   double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [VARIABLES] byte[]  S_bytes  StringBuffer  buf  BigInteger[]  divResult  boolean  biasUp  denorm  fast_failed  k_check  leftright  spec_case  try_quick  double[]  bigtens  tens  double  d  d2  ds  eps  char  dig  lastCh  BigInteger  S  b  b1  delta  mhi  mlo  int[]  bbits  be  bits  dtoaModes  e  boolean[]  sign  int  Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  long  Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x  
[buglab_swap_variables]^if  ( ilim == i )  {^780^^^^^765^795^if  ( i == ilim )  {^[CLASS] DToA  [METHOD] JS_dtoa [RETURN_TYPE] int   double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [VARIABLES] byte[]  S_bytes  StringBuffer  buf  BigInteger[]  divResult  boolean  biasUp  denorm  fast_failed  k_check  leftright  spec_case  try_quick  double[]  bigtens  tens  double  d  d2  ds  eps  char  dig  lastCh  BigInteger  S  b  b1  delta  mhi  mlo  int[]  bbits  be  bits  dtoaModes  e  boolean[]  sign  int  Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  long  Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x  
[buglab_swap_variables]^if  ( eps < d )  {^748^^^^^733^763^if  ( d < eps )  {^[CLASS] DToA  [METHOD] JS_dtoa [RETURN_TYPE] int   double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [VARIABLES] byte[]  S_bytes  StringBuffer  buf  BigInteger[]  divResult  boolean  biasUp  denorm  fast_failed  k_check  leftright  spec_case  try_quick  double[]  bigtens  tens  double  d  d2  ds  eps  char  dig  lastCh  BigInteger  S  b  b1  delta  mhi  mlo  int[]  bbits  be  bits  dtoaModes  e  boolean[]  sign  int  Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  long  Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x  
[buglab_swap_variables]^if  ( 1.0 - eps < d )  {^751^^^^^736^766^if  ( 1.0 - d < eps )  {^[CLASS] DToA  [METHOD] JS_dtoa [RETURN_TYPE] int   double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [VARIABLES] byte[]  S_bytes  StringBuffer  buf  BigInteger[]  divResult  boolean  biasUp  denorm  fast_failed  k_check  leftright  spec_case  try_quick  double[]  bigtens  tens  double  d  d2  ds  eps  char  dig  lastCh  BigInteger  S  b  b1  delta  mhi  mlo  int[]  bbits  be  bits  dtoaModes  e  boolean[]  sign  int  Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  long  Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x  
[buglab_swap_variables]^eps = setWord0 (  word0 ( eps )  -  ( P-1 ) *Exp_msk1 ) ;^721^^^^^706^736^eps = setWord0 ( eps, word0 ( eps )  -  ( P-1 ) *Exp_msk1 ) ;^[CLASS] DToA  [METHOD] JS_dtoa [RETURN_TYPE] int   double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [VARIABLES] byte[]  S_bytes  StringBuffer  buf  BigInteger[]  divResult  boolean  biasUp  denorm  fast_failed  k_check  leftright  spec_case  try_quick  double[]  bigtens  tens  double  d  d2  ds  eps  char  dig  lastCh  BigInteger  S  b  b1  delta  mhi  mlo  int[]  bbits  be  bits  dtoaModes  e  boolean[]  sign  int  Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  long  Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x  
[buglab_swap_variables]^else if  (  ( j = -k )  != 0 )  {^698^^^^^683^713^else if  (  ( j1 = -k )  != 0 )  {^[CLASS] DToA  [METHOD] JS_dtoa [RETURN_TYPE] int   double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [VARIABLES] byte[]  S_bytes  StringBuffer  buf  BigInteger[]  divResult  boolean  biasUp  denorm  fast_failed  k_check  leftright  spec_case  try_quick  double[]  bigtens  tens  double  d  d2  ds  eps  char  dig  lastCh  BigInteger  S  b  b1  delta  mhi  mlo  int[]  bbits  be  bits  dtoaModes  e  boolean[]  sign  int  Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  long  Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x  
[buglab_swap_variables]^if  ( k_check && ilim < 1.0 && d > 0 )  {^707^^^^^692^722^if  ( k_check && d < 1.0 && ilim > 0 )  {^[CLASS] DToA  [METHOD] JS_dtoa [RETURN_TYPE] int   double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [VARIABLES] byte[]  S_bytes  StringBuffer  buf  BigInteger[]  divResult  boolean  biasUp  denorm  fast_failed  k_check  leftright  spec_case  try_quick  double[]  bigtens  tens  double  d  d2  ds  eps  char  dig  lastCh  BigInteger  S  b  b1  delta  mhi  mlo  int[]  bbits  be  bits  dtoaModes  e  boolean[]  sign  int  Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  long  Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x  
[buglab_swap_variables]^if  ( be[0] >= 0 && Int_max <= k )  {^819^^^^^804^834^if  ( be[0] >= 0 && k <= Int_max )  {^[CLASS] DToA  [METHOD] JS_dtoa [RETURN_TYPE] int   double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [VARIABLES] byte[]  S_bytes  StringBuffer  buf  BigInteger[]  divResult  boolean  biasUp  denorm  fast_failed  k_check  leftright  spec_case  try_quick  double[]  bigtens  tens  double  d  d2  ds  eps  char  dig  lastCh  BigInteger  S  b  b1  delta  mhi  mlo  int[]  bbits  be  bits  dtoaModes  e  boolean[]  sign  int  Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  long  Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x  
[buglab_swap_variables]^if  ( ilim == i )  {^837^^^^^822^852^if  ( i == ilim )  {^[CLASS] DToA  [METHOD] JS_dtoa [RETURN_TYPE] int   double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [VARIABLES] byte[]  S_bytes  StringBuffer  buf  BigInteger[]  divResult  boolean  biasUp  denorm  fast_failed  k_check  leftright  spec_case  try_quick  double[]  bigtens  tens  double  d  d2  ds  eps  char  dig  lastCh  BigInteger  S  b  b1  delta  mhi  mlo  int[]  bbits  be  bits  dtoaModes  e  boolean[]  sign  int  Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  long  Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x  
[buglab_swap_variables]^if  (  ( d > biasUp )  ||  ( d == ds &&  (  (  ( L & 1 )  != 0 )  || ds )  )  )  {^839^^^^^824^854^if  (  ( d > ds )  ||  ( d == ds &&  (  (  ( L & 1 )  != 0 )  || biasUp )  )  )  {^[CLASS] DToA  [METHOD] JS_dtoa [RETURN_TYPE] int   double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [VARIABLES] byte[]  S_bytes  StringBuffer  buf  BigInteger[]  divResult  boolean  biasUp  denorm  fast_failed  k_check  leftright  spec_case  try_quick  double[]  bigtens  tens  double  d  d2  ds  eps  char  dig  lastCh  BigInteger  S  b  b1  delta  mhi  mlo  int[]  bbits  be  bits  dtoaModes  e  boolean[]  sign  int  Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  long  Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x  
[buglab_swap_variables]^if  (  ( d > ds )  ||  ( d == ds &&  (  (  ( biasUp & 1 )  != 0 )  || L )  )  )  {^839^^^^^824^854^if  (  ( d > ds )  ||  ( d == ds &&  (  (  ( L & 1 )  != 0 )  || biasUp )  )  )  {^[CLASS] DToA  [METHOD] JS_dtoa [RETURN_TYPE] int   double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [VARIABLES] byte[]  S_bytes  StringBuffer  buf  BigInteger[]  divResult  boolean  biasUp  denorm  fast_failed  k_check  leftright  spec_case  try_quick  double[]  bigtens  tens  double  d  d2  ds  eps  char  dig  lastCh  BigInteger  S  b  b1  delta  mhi  mlo  int[]  bbits  be  bits  dtoaModes  e  boolean[]  sign  int  Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  long  Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x  
[buglab_swap_variables]^if  (  ( ds > d )  ||  ( d == ds &&  (  (  ( L & 1 )  != 0 )  || biasUp )  )  )  {^839^^^^^824^854^if  (  ( d > ds )  ||  ( d == ds &&  (  (  ( L & 1 )  != 0 )  || biasUp )  )  )  {^[CLASS] DToA  [METHOD] JS_dtoa [RETURN_TYPE] int   double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [VARIABLES] byte[]  S_bytes  StringBuffer  buf  BigInteger[]  divResult  boolean  biasUp  denorm  fast_failed  k_check  leftright  spec_case  try_quick  double[]  bigtens  tens  double  d  d2  ds  eps  char  dig  lastCh  BigInteger  S  b  b1  delta  mhi  mlo  int[]  bbits  be  bits  dtoaModes  e  boolean[]  sign  int  Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  long  Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x  
[buglab_swap_variables]^if  (  ( biasUp > ds )  ||  ( d == ds &&  (  (  ( L & 1 )  != 0 )  || d )  )  )  {^839^^^^^824^854^if  (  ( d > ds )  ||  ( d == ds &&  (  (  ( L & 1 )  != 0 )  || biasUp )  )  )  {^[CLASS] DToA  [METHOD] JS_dtoa [RETURN_TYPE] int   double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [VARIABLES] byte[]  S_bytes  StringBuffer  buf  BigInteger[]  divResult  boolean  biasUp  denorm  fast_failed  k_check  leftright  spec_case  try_quick  double[]  bigtens  tens  double  d  d2  ds  eps  char  dig  lastCh  BigInteger  S  b  b1  delta  mhi  mlo  int[]  bbits  be  bits  dtoaModes  e  boolean[]  sign  int  Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  long  Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x  
[buglab_swap_variables]^L =  ( long )   ( ds / d ) ;^834^^^^^819^849^L =  ( long )   ( d / ds ) ;^[CLASS] DToA  [METHOD] JS_dtoa [RETURN_TYPE] int   double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [VARIABLES] byte[]  S_bytes  StringBuffer  buf  BigInteger[]  divResult  boolean  biasUp  denorm  fast_failed  k_check  leftright  spec_case  try_quick  double[]  bigtens  tens  double  d  d2  ds  eps  char  dig  lastCh  BigInteger  S  b  b1  delta  mhi  mlo  int[]  bbits  be  bits  dtoaModes  e  boolean[]  sign  int  Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  long  Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x  
[buglab_swap_variables]^if  ( ilim < 0 && ndigits <= 0 )  {^822^^^^^807^837^if  ( ndigits < 0 && ilim <= 0 )  {^[CLASS] DToA  [METHOD] JS_dtoa [RETURN_TYPE] int   double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [VARIABLES] byte[]  S_bytes  StringBuffer  buf  BigInteger[]  divResult  boolean  biasUp  denorm  fast_failed  k_check  leftright  spec_case  try_quick  double[]  bigtens  tens  double  d  d2  ds  eps  char  dig  lastCh  BigInteger  S  b  b1  delta  mhi  mlo  int[]  bbits  be  bits  dtoaModes  e  boolean[]  sign  int  Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  long  Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x  
[buglab_swap_variables]^if  ( d < 0 || ilim < 5*ds ||  ( !biasUp && d == 5*ds )  )  {^824^^^^^809^839^if  ( ilim < 0 || d < 5*ds ||  ( !biasUp && d == 5*ds )  )  {^[CLASS] DToA  [METHOD] JS_dtoa [RETURN_TYPE] int   double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [VARIABLES] byte[]  S_bytes  StringBuffer  buf  BigInteger[]  divResult  boolean  biasUp  denorm  fast_failed  k_check  leftright  spec_case  try_quick  double[]  bigtens  tens  double  d  d2  ds  eps  char  dig  lastCh  BigInteger  S  b  b1  delta  mhi  mlo  int[]  bbits  be  bits  dtoaModes  e  boolean[]  sign  int  Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  long  Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x  
[buglab_swap_variables]^if  (  ( L > ds )  ||  ( d == ds &&  (  (  ( d & 1 )  != 0 )  || biasUp )  )  )  {^839^^^^^824^854^if  (  ( d > ds )  ||  ( d == ds &&  (  (  ( L & 1 )  != 0 )  || biasUp )  )  )  {^[CLASS] DToA  [METHOD] JS_dtoa [RETURN_TYPE] int   double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [VARIABLES] byte[]  S_bytes  StringBuffer  buf  BigInteger[]  divResult  boolean  biasUp  denorm  fast_failed  k_check  leftright  spec_case  try_quick  double[]  bigtens  tens  double  d  d2  ds  eps  char  dig  lastCh  BigInteger  S  b  b1  delta  mhi  mlo  int[]  bbits  be  bits  dtoaModes  e  boolean[]  sign  int  Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  long  Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x  
[buglab_swap_variables]^if  (  ( d > L )  ||  ( d == ds &&  (  (  ( ds & 1 )  != 0 )  || biasUp )  )  )  {^839^^^^^824^854^if  (  ( d > ds )  ||  ( d == ds &&  (  (  ( L & 1 )  != 0 )  || biasUp )  )  )  {^[CLASS] DToA  [METHOD] JS_dtoa [RETURN_TYPE] int   double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [VARIABLES] byte[]  S_bytes  StringBuffer  buf  BigInteger[]  divResult  boolean  biasUp  denorm  fast_failed  k_check  leftright  spec_case  try_quick  double[]  bigtens  tens  double  d  d2  ds  eps  char  dig  lastCh  BigInteger  S  b  b1  delta  mhi  mlo  int[]  bbits  be  bits  dtoaModes  e  boolean[]  sign  int  Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  long  Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x  
[buglab_swap_variables]^if  ( j >= m5 ) m5 -= j;^881^882^^^^874^893^if  ( m5 >= j ) m5 -= j;^[CLASS] DToA  [METHOD] JS_dtoa [RETURN_TYPE] int   double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [VARIABLES] byte[]  S_bytes  StringBuffer  buf  BigInteger[]  divResult  boolean  biasUp  denorm  fast_failed  k_check  leftright  spec_case  try_quick  double[]  bigtens  tens  double  d  d2  ds  eps  char  dig  lastCh  BigInteger  S  b  b1  delta  mhi  mlo  int[]  bbits  be  bits  dtoaModes  e  boolean[]  sign  int  Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  long  Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x  
[buglab_swap_variables]^if  (  ( ilim = i )  < 0 )  {^888^^^^^874^893^if  (  ( i = ilim )  < 0 )  {^[CLASS] DToA  [METHOD] JS_dtoa [RETURN_TYPE] int   double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [VARIABLES] byte[]  S_bytes  StringBuffer  buf  BigInteger[]  divResult  boolean  biasUp  denorm  fast_failed  k_check  leftright  spec_case  try_quick  double[]  bigtens  tens  double  d  d2  ds  eps  char  dig  lastCh  BigInteger  S  b  b1  delta  mhi  mlo  int[]  bbits  be  bits  dtoaModes  e  boolean[]  sign  int  Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  long  Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x  
[buglab_swap_variables]^i =  ( P )  ? be[0] +  ( Bias +  ( denorm-1 )  - 1 + 1 )  : 1 + P - bbits[0];^875^^^^^860^890^i =  ( denorm )  ? be[0] +  ( Bias +  ( P-1 )  - 1 + 1 )  : 1 + P - bbits[0];^[CLASS] DToA  [METHOD] JS_dtoa [RETURN_TYPE] int   double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [VARIABLES] byte[]  S_bytes  StringBuffer  buf  BigInteger[]  divResult  boolean  biasUp  denorm  fast_failed  k_check  leftright  spec_case  try_quick  double[]  bigtens  tens  double  d  d2  ds  eps  char  dig  lastCh  BigInteger  S  b  b1  delta  mhi  mlo  int[]  bbits  be  bits  dtoaModes  e  boolean[]  sign  int  Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  long  Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x  
[buglab_swap_variables]^i =  ( denorm )  ? P[0] +  ( Bias +  ( be-1 )  - 1 + 1 )  : 1 + P - bbits[0];^875^^^^^860^890^i =  ( denorm )  ? be[0] +  ( Bias +  ( P-1 )  - 1 + 1 )  : 1 + P - bbits[0];^[CLASS] DToA  [METHOD] JS_dtoa [RETURN_TYPE] int   double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [VARIABLES] byte[]  S_bytes  StringBuffer  buf  BigInteger[]  divResult  boolean  biasUp  denorm  fast_failed  k_check  leftright  spec_case  try_quick  double[]  bigtens  tens  double  d  d2  ds  eps  char  dig  lastCh  BigInteger  S  b  b1  delta  mhi  mlo  int[]  bbits  be  bits  dtoaModes  e  boolean[]  sign  int  Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  long  Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x  
[buglab_swap_variables]^i =  ( denorm )  ? be[0] +  ( bbits +  ( P-1 )  - 1 + 1 )  : 1 + P - Bias[0];^875^^^^^860^890^i =  ( denorm )  ? be[0] +  ( Bias +  ( P-1 )  - 1 + 1 )  : 1 + P - bbits[0];^[CLASS] DToA  [METHOD] JS_dtoa [RETURN_TYPE] int   double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [VARIABLES] byte[]  S_bytes  StringBuffer  buf  BigInteger[]  divResult  boolean  biasUp  denorm  fast_failed  k_check  leftright  spec_case  try_quick  double[]  bigtens  tens  double  d  d2  ds  eps  char  dig  lastCh  BigInteger  S  b  b1  delta  mhi  mlo  int[]  bbits  be  bits  dtoaModes  e  boolean[]  sign  int  Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  long  Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x  
[buglab_swap_variables]^i =  ( denorm )  ? be[0] +  ( P +  ( Bias-1 )  - 1 + 1 )  : 1 + P - bbits[0];^875^^^^^860^890^i =  ( denorm )  ? be[0] +  ( Bias +  ( P-1 )  - 1 + 1 )  : 1 + P - bbits[0];^[CLASS] DToA  [METHOD] JS_dtoa [RETURN_TYPE] int   double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [VARIABLES] byte[]  S_bytes  StringBuffer  buf  BigInteger[]  divResult  boolean  biasUp  denorm  fast_failed  k_check  leftright  spec_case  try_quick  double[]  bigtens  tens  double  d  d2  ds  eps  char  dig  lastCh  BigInteger  S  b  b1  delta  mhi  mlo  int[]  bbits  be  bits  dtoaModes  e  boolean[]  sign  int  Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  long  Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x  
[buglab_swap_variables]^if  ( j >= m5 ) m5 -= j;^881^882^^^^866^896^if  ( m5 >= j ) m5 -= j;^[CLASS] DToA  [METHOD] JS_dtoa [RETURN_TYPE] int   double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [VARIABLES] byte[]  S_bytes  StringBuffer  buf  BigInteger[]  divResult  boolean  biasUp  denorm  fast_failed  k_check  leftright  spec_case  try_quick  double[]  bigtens  tens  double  d  d2  ds  eps  char  dig  lastCh  BigInteger  S  b  b1  delta  mhi  mlo  int[]  bbits  be  bits  dtoaModes  e  boolean[]  sign  int  Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  long  Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x  
[buglab_swap_variables]^if  (  ( ilim = i )  < 0 )  {^888^^^^^873^903^if  (  ( i = ilim )  < 0 )  {^[CLASS] DToA  [METHOD] JS_dtoa [RETURN_TYPE] int   double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [VARIABLES] byte[]  S_bytes  StringBuffer  buf  BigInteger[]  divResult  boolean  biasUp  denorm  fast_failed  k_check  leftright  spec_case  try_quick  double[]  bigtens  tens  double  d  d2  ds  eps  char  dig  lastCh  BigInteger  S  b  b1  delta  mhi  mlo  int[]  bbits  be  bits  dtoaModes  e  boolean[]  sign  int  Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  long  Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x  
[buglab_swap_variables]^i =  ( bbits )  ? be[0] +  ( Bias +  ( P-1 )  - 1 + 1 )  : 1 + P - denorm[0];^875^^^^^860^890^i =  ( denorm )  ? be[0] +  ( Bias +  ( P-1 )  - 1 + 1 )  : 1 + P - bbits[0];^[CLASS] DToA  [METHOD] JS_dtoa [RETURN_TYPE] int   double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [VARIABLES] byte[]  S_bytes  StringBuffer  buf  BigInteger[]  divResult  boolean  biasUp  denorm  fast_failed  k_check  leftright  spec_case  try_quick  double[]  bigtens  tens  double  d  d2  ds  eps  char  dig  lastCh  BigInteger  S  b  b1  delta  mhi  mlo  int[]  bbits  be  bits  dtoaModes  e  boolean[]  sign  int  Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  long  Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x  
[buglab_swap_variables]^i =  ( denorm )  ? bbits[0] +  ( Bias +  ( P-1 )  - 1 + 1 )  : 1 + P - be[0];^875^^^^^860^890^i =  ( denorm )  ? be[0] +  ( Bias +  ( P-1 )  - 1 + 1 )  : 1 + P - bbits[0];^[CLASS] DToA  [METHOD] JS_dtoa [RETURN_TYPE] int   double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [VARIABLES] byte[]  S_bytes  StringBuffer  buf  BigInteger[]  divResult  boolean  biasUp  denorm  fast_failed  k_check  leftright  spec_case  try_quick  double[]  bigtens  tens  double  d  d2  ds  eps  char  dig  lastCh  BigInteger  S  b  b1  delta  mhi  mlo  int[]  bbits  be  bits  dtoaModes  e  boolean[]  sign  int  Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  long  Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x  
[buglab_swap_variables]^i =  ( denorm )  ? be[0] +  ( Bias +  ( bbits-1 )  - 1 + 1 )  : 1 + P - P[0];^875^^^^^860^890^i =  ( denorm )  ? be[0] +  ( Bias +  ( P-1 )  - 1 + 1 )  : 1 + P - bbits[0];^[CLASS] DToA  [METHOD] JS_dtoa [RETURN_TYPE] int   double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [VARIABLES] byte[]  S_bytes  StringBuffer  buf  BigInteger[]  divResult  boolean  biasUp  denorm  fast_failed  k_check  leftright  spec_case  try_quick  double[]  bigtens  tens  double  d  d2  ds  eps  char  dig  lastCh  BigInteger  S  b  b1  delta  mhi  mlo  int[]  bbits  be  bits  dtoaModes  e  boolean[]  sign  int  Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  long  Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x  
[buglab_swap_variables]^i =  ( Bias )  ? be[0] +  ( denorm +  ( P-1 )  - 1 + 1 )  : 1 + P - bbits[0];^875^^^^^860^890^i =  ( denorm )  ? be[0] +  ( Bias +  ( P-1 )  - 1 + 1 )  : 1 + P - bbits[0];^[CLASS] DToA  [METHOD] JS_dtoa [RETURN_TYPE] int   double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [VARIABLES] byte[]  S_bytes  StringBuffer  buf  BigInteger[]  divResult  boolean  biasUp  denorm  fast_failed  k_check  leftright  spec_case  try_quick  double[]  bigtens  tens  double  d  d2  ds  eps  char  dig  lastCh  BigInteger  S  b  b1  delta  mhi  mlo  int[]  bbits  be  bits  dtoaModes  e  boolean[]  sign  int  Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  long  Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x  
[buglab_swap_variables]^if  ( s2 > 0 && m2 > 0 )  {^902^^^^^887^917^if  ( m2 > 0 && s2 > 0 )  {^[CLASS] DToA  [METHOD] JS_dtoa [RETURN_TYPE] int   double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [VARIABLES] byte[]  S_bytes  StringBuffer  buf  BigInteger[]  divResult  boolean  biasUp  denorm  fast_failed  k_check  leftright  spec_case  try_quick  double[]  bigtens  tens  double  d  d2  ds  eps  char  dig  lastCh  BigInteger  S  b  b1  delta  mhi  mlo  int[]  bbits  be  bits  dtoaModes  e  boolean[]  sign  int  Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  long  Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x  
[buglab_swap_variables]^i =  ( s2 < m2 )  ? m2 : s2;^903^^^^^888^918^i =  ( m2 < s2 )  ? m2 : s2;^[CLASS] DToA  [METHOD] JS_dtoa [RETURN_TYPE] int   double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [VARIABLES] byte[]  S_bytes  StringBuffer  buf  BigInteger[]  divResult  boolean  biasUp  denorm  fast_failed  k_check  leftright  spec_case  try_quick  double[]  bigtens  tens  double  d  d2  ds  eps  char  dig  lastCh  BigInteger  S  b  b1  delta  mhi  mlo  int[]  bbits  be  bits  dtoaModes  e  boolean[]  sign  int  Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  long  Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x  
[buglab_swap_variables]^b = pow5mult ( b5, b ) ;^921^^^^^906^936^b = pow5mult ( b, b5 ) ;^[CLASS] DToA  [METHOD] JS_dtoa [RETURN_TYPE] int   double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [VARIABLES] byte[]  S_bytes  StringBuffer  buf  BigInteger[]  divResult  boolean  biasUp  denorm  fast_failed  k_check  leftright  spec_case  try_quick  double[]  bigtens  tens  double  d  d2  ds  eps  char  dig  lastCh  BigInteger  S  b  b1  delta  mhi  mlo  int[]  bbits  be  bits  dtoaModes  e  boolean[]  sign  int  Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  long  Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x  
[buglab_swap_variables]^b = pow5mult (  b5 ) ;^921^^^^^906^936^b = pow5mult ( b, b5 ) ;^[CLASS] DToA  [METHOD] JS_dtoa [RETURN_TYPE] int   double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [VARIABLES] byte[]  S_bytes  StringBuffer  buf  BigInteger[]  divResult  boolean  biasUp  denorm  fast_failed  k_check  leftright  spec_case  try_quick  double[]  bigtens  tens  double  d  d2  ds  eps  char  dig  lastCh  BigInteger  S  b  b1  delta  mhi  mlo  int[]  bbits  be  bits  dtoaModes  e  boolean[]  sign  int  Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  long  Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x  
[buglab_swap_variables]^b = pow5mult ( b ) ;^921^^^^^906^936^b = pow5mult ( b, b5 ) ;^[CLASS] DToA  [METHOD] JS_dtoa [RETURN_TYPE] int   double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [VARIABLES] byte[]  S_bytes  StringBuffer  buf  BigInteger[]  divResult  boolean  biasUp  denorm  fast_failed  k_check  leftright  spec_case  try_quick  double[]  bigtens  tens  double  d  d2  ds  eps  char  dig  lastCh  BigInteger  S  b  b1  delta  mhi  mlo  int[]  bbits  be  bits  dtoaModes  e  boolean[]  sign  int  Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  long  Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x  
[buglab_swap_variables]^mhi = pow5mult ( m5, mhi ) ;^913^^^^^898^928^mhi = pow5mult ( mhi, m5 ) ;^[CLASS] DToA  [METHOD] JS_dtoa [RETURN_TYPE] int   double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [VARIABLES] byte[]  S_bytes  StringBuffer  buf  BigInteger[]  divResult  boolean  biasUp  denorm  fast_failed  k_check  leftright  spec_case  try_quick  double[]  bigtens  tens  double  d  d2  ds  eps  char  dig  lastCh  BigInteger  S  b  b1  delta  mhi  mlo  int[]  bbits  be  bits  dtoaModes  e  boolean[]  sign  int  Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  long  Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x  
[buglab_swap_variables]^mhi = pow5mult (  m5 ) ;^913^^^^^898^928^mhi = pow5mult ( mhi, m5 ) ;^[CLASS] DToA  [METHOD] JS_dtoa [RETURN_TYPE] int   double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [VARIABLES] byte[]  S_bytes  StringBuffer  buf  BigInteger[]  divResult  boolean  biasUp  denorm  fast_failed  k_check  leftright  spec_case  try_quick  double[]  bigtens  tens  double  d  d2  ds  eps  char  dig  lastCh  BigInteger  S  b  b1  delta  mhi  mlo  int[]  bbits  be  bits  dtoaModes  e  boolean[]  sign  int  Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  long  Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x  
[buglab_swap_variables]^mhi = pow5mult ( mhi ) ;^913^^^^^898^928^mhi = pow5mult ( mhi, m5 ) ;^[CLASS] DToA  [METHOD] JS_dtoa [RETURN_TYPE] int   double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [VARIABLES] byte[]  S_bytes  StringBuffer  buf  BigInteger[]  divResult  boolean  biasUp  denorm  fast_failed  k_check  leftright  spec_case  try_quick  double[]  bigtens  tens  double  d  d2  ds  eps  char  dig  lastCh  BigInteger  S  b  b1  delta  mhi  mlo  int[]  bbits  be  bits  dtoaModes  e  boolean[]  sign  int  Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  long  Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x  
[buglab_swap_variables]^b1 = b.multiply ( mhi ) ;^914^^^^^899^929^b1 = mhi.multiply ( b ) ;^[CLASS] DToA  [METHOD] JS_dtoa [RETURN_TYPE] int   double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [VARIABLES] byte[]  S_bytes  StringBuffer  buf  BigInteger[]  divResult  boolean  biasUp  denorm  fast_failed  k_check  leftright  spec_case  try_quick  double[]  bigtens  tens  double  d  d2  ds  eps  char  dig  lastCh  BigInteger  S  b  b1  delta  mhi  mlo  int[]  bbits  be  bits  dtoaModes  e  boolean[]  sign  int  Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  long  Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x  
[buglab_swap_variables]^if  (  ( j = m5 - b5 )  != 0 ) b = pow5mult ( b, j ) ;^917^918^^^^902^932^if  (  ( j = b5 - m5 )  != 0 ) b = pow5mult ( b, j ) ;^[CLASS] DToA  [METHOD] JS_dtoa [RETURN_TYPE] int   double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [VARIABLES] byte[]  S_bytes  StringBuffer  buf  BigInteger[]  divResult  boolean  biasUp  denorm  fast_failed  k_check  leftright  spec_case  try_quick  double[]  bigtens  tens  double  d  d2  ds  eps  char  dig  lastCh  BigInteger  S  b  b1  delta  mhi  mlo  int[]  bbits  be  bits  dtoaModes  e  boolean[]  sign  int  Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  long  Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x  
[buglab_swap_variables]^if  (  ( b = j5 - m5 )  != 0 ) b = pow5mult ( b, j ) ;^917^918^^^^902^932^if  (  ( j = b5 - m5 )  != 0 ) b = pow5mult ( b, j ) ;^[CLASS] DToA  [METHOD] JS_dtoa [RETURN_TYPE] int   double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [VARIABLES] byte[]  S_bytes  StringBuffer  buf  BigInteger[]  divResult  boolean  biasUp  denorm  fast_failed  k_check  leftright  spec_case  try_quick  double[]  bigtens  tens  double  d  d2  ds  eps  char  dig  lastCh  BigInteger  S  b  b1  delta  mhi  mlo  int[]  bbits  be  bits  dtoaModes  e  boolean[]  sign  int  Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  long  Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x  
[buglab_swap_variables]^if  (  ( j = b5 - m5 )  != 0 ) b = pow5mult (  j ) ;^917^918^^^^902^932^if  (  ( j = b5 - m5 )  != 0 ) b = pow5mult ( b, j ) ;^[CLASS] DToA  [METHOD] JS_dtoa [RETURN_TYPE] int   double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [VARIABLES] byte[]  S_bytes  StringBuffer  buf  BigInteger[]  divResult  boolean  biasUp  denorm  fast_failed  k_check  leftright  spec_case  try_quick  double[]  bigtens  tens  double  d  d2  ds  eps  char  dig  lastCh  BigInteger  S  b  b1  delta  mhi  mlo  int[]  bbits  be  bits  dtoaModes  e  boolean[]  sign  int  Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  long  Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x  
[buglab_swap_variables]^if  (  ( m5 = b5 - j )  != 0 ) b = pow5mult ( b, j ) ;^917^918^^^^902^932^if  (  ( j = b5 - m5 )  != 0 ) b = pow5mult ( b, j ) ;^[CLASS] DToA  [METHOD] JS_dtoa [RETURN_TYPE] int   double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [VARIABLES] byte[]  S_bytes  StringBuffer  buf  BigInteger[]  divResult  boolean  biasUp  denorm  fast_failed  k_check  leftright  spec_case  try_quick  double[]  bigtens  tens  double  d  d2  ds  eps  char  dig  lastCh  BigInteger  S  b  b1  delta  mhi  mlo  int[]  bbits  be  bits  dtoaModes  e  boolean[]  sign  int  Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  long  Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x  
[buglab_swap_variables]^if  (  ( j = b5 - m5 )  != 0 ) b = pow5mult ( b ) ;^917^918^^^^902^932^if  (  ( j = b5 - m5 )  != 0 ) b = pow5mult ( b, j ) ;^[CLASS] DToA  [METHOD] JS_dtoa [RETURN_TYPE] int   double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [VARIABLES] byte[]  S_bytes  StringBuffer  buf  BigInteger[]  divResult  boolean  biasUp  denorm  fast_failed  k_check  leftright  spec_case  try_quick  double[]  bigtens  tens  double  d  d2  ds  eps  char  dig  lastCh  BigInteger  S  b  b1  delta  mhi  mlo  int[]  bbits  be  bits  dtoaModes  e  boolean[]  sign  int  Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  long  Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x  
[buglab_swap_variables]^b = pow5mult ( j, b ) ;^918^^^^^903^933^b = pow5mult ( b, j ) ;^[CLASS] DToA  [METHOD] JS_dtoa [RETURN_TYPE] int   double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [VARIABLES] byte[]  S_bytes  StringBuffer  buf  BigInteger[]  divResult  boolean  biasUp  denorm  fast_failed  k_check  leftright  spec_case  try_quick  double[]  bigtens  tens  double  d  d2  ds  eps  char  dig  lastCh  BigInteger  S  b  b1  delta  mhi  mlo  int[]  bbits  be  bits  dtoaModes  e  boolean[]  sign  int  Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  long  Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x  
[buglab_swap_variables]^b = pow5mult (  j ) ;^918^^^^^903^933^b = pow5mult ( b, j ) ;^[CLASS] DToA  [METHOD] JS_dtoa [RETURN_TYPE] int   double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [VARIABLES] byte[]  S_bytes  StringBuffer  buf  BigInteger[]  divResult  boolean  biasUp  denorm  fast_failed  k_check  leftright  spec_case  try_quick  double[]  bigtens  tens  double  d  d2  ds  eps  char  dig  lastCh  BigInteger  S  b  b1  delta  mhi  mlo  int[]  bbits  be  bits  dtoaModes  e  boolean[]  sign  int  Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  long  Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x  
[buglab_swap_variables]^b = pow5mult ( b ) ;^918^^^^^903^933^b = pow5mult ( b, j ) ;^[CLASS] DToA  [METHOD] JS_dtoa [RETURN_TYPE] int   double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [VARIABLES] byte[]  S_bytes  StringBuffer  buf  BigInteger[]  divResult  boolean  biasUp  denorm  fast_failed  k_check  leftright  spec_case  try_quick  double[]  bigtens  tens  double  d  d2  ds  eps  char  dig  lastCh  BigInteger  S  b  b1  delta  mhi  mlo  int[]  bbits  be  bits  dtoaModes  e  boolean[]  sign  int  Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  long  Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x  
[buglab_swap_variables]^if  (  ( j = m55 - b )  != 0 ) b = pow5mult ( b, j ) ;^917^918^^^^902^932^if  (  ( j = b5 - m5 )  != 0 ) b = pow5mult ( b, j ) ;^[CLASS] DToA  [METHOD] JS_dtoa [RETURN_TYPE] int   double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [VARIABLES] byte[]  S_bytes  StringBuffer  buf  BigInteger[]  divResult  boolean  biasUp  denorm  fast_failed  k_check  leftright  spec_case  try_quick  double[]  bigtens  tens  double  d  d2  ds  eps  char  dig  lastCh  BigInteger  S  b  b1  delta  mhi  mlo  int[]  bbits  be  bits  dtoaModes  e  boolean[]  sign  int  Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  long  Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x  
[buglab_swap_variables]^if  (  ( j = b - m5 )  != 0 ) b5 = pow5mult ( b, j ) ;^917^918^^^^902^932^if  (  ( j = b5 - m5 )  != 0 ) b = pow5mult ( b, j ) ;^[CLASS] DToA  [METHOD] JS_dtoa [RETURN_TYPE] int   double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [VARIABLES] byte[]  S_bytes  StringBuffer  buf  BigInteger[]  divResult  boolean  biasUp  denorm  fast_failed  k_check  leftright  spec_case  try_quick  double[]  bigtens  tens  double  d  d2  ds  eps  char  dig  lastCh  BigInteger  S  b  b1  delta  mhi  mlo  int[]  bbits  be  bits  dtoaModes  e  boolean[]  sign  int  Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  long  Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x  
[buglab_swap_variables]^if  (  ( b5 = j - m5 )  != 0 ) b = pow5mult ( b, j ) ;^917^918^^^^902^932^if  (  ( j = b5 - m5 )  != 0 ) b = pow5mult ( b, j ) ;^[CLASS] DToA  [METHOD] JS_dtoa [RETURN_TYPE] int   double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [VARIABLES] byte[]  S_bytes  StringBuffer  buf  BigInteger[]  divResult  boolean  biasUp  denorm  fast_failed  k_check  leftright  spec_case  try_quick  double[]  bigtens  tens  double  d  d2  ds  eps  char  dig  lastCh  BigInteger  S  b  b1  delta  mhi  mlo  int[]  bbits  be  bits  dtoaModes  e  boolean[]  sign  int  Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  long  Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x  
[buglab_swap_variables]^if  ( S > 0 ) s5 = pow5mult ( S, s5 ) ;^927^928^^^^912^942^if  ( s5 > 0 ) S = pow5mult ( S, s5 ) ;^[CLASS] DToA  [METHOD] JS_dtoa [RETURN_TYPE] int   double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [VARIABLES] byte[]  S_bytes  StringBuffer  buf  BigInteger[]  divResult  boolean  biasUp  denorm  fast_failed  k_check  leftright  spec_case  try_quick  double[]  bigtens  tens  double  d  d2  ds  eps  char  dig  lastCh  BigInteger  S  b  b1  delta  mhi  mlo  int[]  bbits  be  bits  dtoaModes  e  boolean[]  sign  int  Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  long  Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x  
[buglab_swap_variables]^if  ( s5 > 0 ) S = pow5mult ( S ) ;^927^928^^^^912^942^if  ( s5 > 0 ) S = pow5mult ( S, s5 ) ;^[CLASS] DToA  [METHOD] JS_dtoa [RETURN_TYPE] int   double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [VARIABLES] byte[]  S_bytes  StringBuffer  buf  BigInteger[]  divResult  boolean  biasUp  denorm  fast_failed  k_check  leftright  spec_case  try_quick  double[]  bigtens  tens  double  d  d2  ds  eps  char  dig  lastCh  BigInteger  S  b  b1  delta  mhi  mlo  int[]  bbits  be  bits  dtoaModes  e  boolean[]  sign  int  Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  long  Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x  
[buglab_swap_variables]^if  ( s5 > 0 ) S = pow5mult (  s5 ) ;^927^928^^^^912^942^if  ( s5 > 0 ) S = pow5mult ( S, s5 ) ;^[CLASS] DToA  [METHOD] JS_dtoa [RETURN_TYPE] int   double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [VARIABLES] byte[]  S_bytes  StringBuffer  buf  BigInteger[]  divResult  boolean  biasUp  denorm  fast_failed  k_check  leftright  spec_case  try_quick  double[]  bigtens  tens  double  d  d2  ds  eps  char  dig  lastCh  BigInteger  S  b  b1  delta  mhi  mlo  int[]  bbits  be  bits  dtoaModes  e  boolean[]  sign  int  Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  long  Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x  
[buglab_swap_variables]^S = pow5mult ( s5, S ) ;^928^^^^^913^943^S = pow5mult ( S, s5 ) ;^[CLASS] DToA  [METHOD] JS_dtoa [RETURN_TYPE] int   double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [VARIABLES] byte[]  S_bytes  StringBuffer  buf  BigInteger[]  divResult  boolean  biasUp  denorm  fast_failed  k_check  leftright  spec_case  try_quick  double[]  bigtens  tens  double  d  d2  ds  eps  char  dig  lastCh  BigInteger  S  b  b1  delta  mhi  mlo  int[]  bbits  be  bits  dtoaModes  e  boolean[]  sign  int  Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  long  Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x  
[buglab_swap_variables]^S = pow5mult (  s5 ) ;^928^^^^^913^943^S = pow5mult ( S, s5 ) ;^[CLASS] DToA  [METHOD] JS_dtoa [RETURN_TYPE] int   double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [VARIABLES] byte[]  S_bytes  StringBuffer  buf  BigInteger[]  divResult  boolean  biasUp  denorm  fast_failed  k_check  leftright  spec_case  try_quick  double[]  bigtens  tens  double  d  d2  ds  eps  char  dig  lastCh  BigInteger  S  b  b1  delta  mhi  mlo  int[]  bbits  be  bits  dtoaModes  e  boolean[]  sign  int  Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  long  Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x  
[buglab_swap_variables]^S = pow5mult ( S ) ;^928^^^^^913^943^S = pow5mult ( S, s5 ) ;^[CLASS] DToA  [METHOD] JS_dtoa [RETURN_TYPE] int   double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [VARIABLES] byte[]  S_bytes  StringBuffer  buf  BigInteger[]  divResult  boolean  biasUp  denorm  fast_failed  k_check  leftright  spec_case  try_quick  double[]  bigtens  tens  double  d  d2  ds  eps  char  dig  lastCh  BigInteger  S  b  b1  delta  mhi  mlo  int[]  bbits  be  bits  dtoaModes  e  boolean[]  sign  int  Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  long  Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x  
[buglab_swap_variables]^if  (   ( word1 ( Bndry_mask )  == 0 )  &&  (  ( word0 ( d )  & d )  == 0 ) &&  (  ( word0 ( d )  &  ( Exp_mask & Exp_mask << 1 )  )  != 0 ) )  {^935^936^937^^^920^950^if  (   ( word1 ( d )  == 0 )  &&  (  ( word0 ( d )  & Bndry_mask )  == 0 ) &&  (  ( word0 ( d )  &  ( Exp_mask & Exp_mask << 1 )  )  != 0 ) )  {^[CLASS] DToA  [METHOD] JS_dtoa [RETURN_TYPE] int   double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [VARIABLES] byte[]  S_bytes  StringBuffer  buf  BigInteger[]  divResult  boolean  biasUp  denorm  fast_failed  k_check  leftright  spec_case  try_quick  double[]  bigtens  tens  double  d  d2  ds  eps  char  dig  lastCh  BigInteger  S  b  b1  delta  mhi  mlo  int[]  bbits  be  bits  dtoaModes  e  boolean[]  sign  int  Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  long  Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x  
[buglab_swap_variables]^if  (   ( word1 ( d )  == 0 )  &&  (  ( word0 ( d )  & Exp_mask )  == 0 ) &&  (  ( word0 ( d )  &  ( Bndry_mask & Exp_mask << 1 )  )  != 0 ) )  {^935^936^937^^^920^950^if  (   ( word1 ( d )  == 0 )  &&  (  ( word0 ( d )  & Bndry_mask )  == 0 ) &&  (  ( word0 ( d )  &  ( Exp_mask & Exp_mask << 1 )  )  != 0 ) )  {^[CLASS] DToA  [METHOD] JS_dtoa [RETURN_TYPE] int   double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [VARIABLES] byte[]  S_bytes  StringBuffer  buf  BigInteger[]  divResult  boolean  biasUp  denorm  fast_failed  k_check  leftright  spec_case  try_quick  double[]  bigtens  tens  double  d  d2  ds  eps  char  dig  lastCh  BigInteger  S  b  b1  delta  mhi  mlo  int[]  bbits  be  bits  dtoaModes  e  boolean[]  sign  int  Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  long  Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x  
[buglab_swap_variables]^if  (   ( word1 ( Exp_mask )  == 0 )  &&  (  ( word0 ( d )  & Bndry_mask )  == 0 ) &&  (  ( word0 ( d )  &  ( d & Exp_mask << 1 )  )  != 0 ) )  {^935^936^937^^^920^950^if  (   ( word1 ( d )  == 0 )  &&  (  ( word0 ( d )  & Bndry_mask )  == 0 ) &&  (  ( word0 ( d )  &  ( Exp_mask & Exp_mask << 1 )  )  != 0 ) )  {^[CLASS] DToA  [METHOD] JS_dtoa [RETURN_TYPE] int   double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [VARIABLES] byte[]  S_bytes  StringBuffer  buf  BigInteger[]  divResult  boolean  biasUp  denorm  fast_failed  k_check  leftright  spec_case  try_quick  double[]  bigtens  tens  double  d  d2  ds  eps  char  dig  lastCh  BigInteger  S  b  b1  delta  mhi  mlo  int[]  bbits  be  bits  dtoaModes  e  boolean[]  sign  int  Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  long  Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x  
[buglab_swap_variables]^if  ( S_bytes.length < idx ) S_hiWord |=  ( S_bytes[idx] & 0xFF ) ;^957^958^^^^942^972^if  ( idx < S_bytes.length ) S_hiWord |=  ( S_bytes[idx] & 0xFF ) ;^[CLASS] DToA  [METHOD] JS_dtoa [RETURN_TYPE] int   double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [VARIABLES] byte[]  S_bytes  StringBuffer  buf  BigInteger[]  divResult  boolean  biasUp  denorm  fast_failed  k_check  leftright  spec_case  try_quick  double[]  bigtens  tens  double  d  d2  ds  eps  char  dig  lastCh  BigInteger  S  b  b1  delta  mhi  mlo  int[]  bbits  be  bits  dtoaModes  e  boolean[]  sign  int  Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  long  Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x  
[buglab_swap_variables]^if  ( S_bytes < idx.length ) S_hiWord |=  ( S_bytes[idx] & 0xFF ) ;^957^958^^^^942^972^if  ( idx < S_bytes.length ) S_hiWord |=  ( S_bytes[idx] & 0xFF ) ;^[CLASS] DToA  [METHOD] JS_dtoa [RETURN_TYPE] int   double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [VARIABLES] byte[]  S_bytes  StringBuffer  buf  BigInteger[]  divResult  boolean  biasUp  denorm  fast_failed  k_check  leftright  spec_case  try_quick  double[]  bigtens  tens  double  d  d2  ds  eps  char  dig  lastCh  BigInteger  S  b  b1  delta  mhi  mlo  int[]  bbits  be  bits  dtoaModes  e  boolean[]  sign  int  Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  long  Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x  
[buglab_swap_variables]^if  (  ( s5 =  (  (  ( i != 0 )  ? 32 - hi0bits ( S_hiWord )  : 1 )  + s2 )  & 0x1f )  != 0 ) i = 32 - i;^960^961^^^^945^975^if  (  ( i =  (  (  ( s5 != 0 )  ? 32 - hi0bits ( S_hiWord )  : 1 )  + s2 )  & 0x1f )  != 0 ) i = 32 - i;^[CLASS] DToA  [METHOD] JS_dtoa [RETURN_TYPE] int   double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [VARIABLES] byte[]  S_bytes  StringBuffer  buf  BigInteger[]  divResult  boolean  biasUp  denorm  fast_failed  k_check  leftright  spec_case  try_quick  double[]  bigtens  tens  double  d  d2  ds  eps  char  dig  lastCh  BigInteger  S  b  b1  delta  mhi  mlo  int[]  bbits  be  bits  dtoaModes  e  boolean[]  sign  int  Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  long  Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x  
[buglab_swap_variables]^if  (  ( S_hiWord =  (  (  ( s5 != 0 )  ? 32 - hi0bits ( i )  : 1 )  + s2 )  & 0x1f )  != 0 ) i = 32 - i;^960^961^^^^945^975^if  (  ( i =  (  (  ( s5 != 0 )  ? 32 - hi0bits ( S_hiWord )  : 1 )  + s2 )  & 0x1f )  != 0 ) i = 32 - i;^[CLASS] DToA  [METHOD] JS_dtoa [RETURN_TYPE] int   double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [VARIABLES] byte[]  S_bytes  StringBuffer  buf  BigInteger[]  divResult  boolean  biasUp  denorm  fast_failed  k_check  leftright  spec_case  try_quick  double[]  bigtens  tens  double  d  d2  ds  eps  char  dig  lastCh  BigInteger  S  b  b1  delta  mhi  mlo  int[]  bbits  be  bits  dtoaModes  e  boolean[]  sign  int  Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  long  Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x  
[buglab_swap_variables]^if  (  ( i =  (  (  ( s5 != 0 )  ? 32 - hi0bits ( s2 )  : 1 )  + S_hiWord )  & 0x1f )  != 0 ) i = 32 - i;^960^961^^^^945^975^if  (  ( i =  (  (  ( s5 != 0 )  ? 32 - hi0bits ( S_hiWord )  : 1 )  + s2 )  & 0x1f )  != 0 ) i = 32 - i;^[CLASS] DToA  [METHOD] JS_dtoa [RETURN_TYPE] int   double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [VARIABLES] byte[]  S_bytes  StringBuffer  buf  BigInteger[]  divResult  boolean  biasUp  denorm  fast_failed  k_check  leftright  spec_case  try_quick  double[]  bigtens  tens  double  d  d2  ds  eps  char  dig  lastCh  BigInteger  S  b  b1  delta  mhi  mlo  int[]  bbits  be  bits  dtoaModes  e  boolean[]  sign  int  Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  long  Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x  
[buglab_swap_variables]^if  (  ( s2 =  (  (  ( s5 != 0 )  ? 32 - hi0bits ( S_hiWord )  : 1 )  + i )  & 0x1f )  != 0 ) i = 32 - i;^960^961^^^^945^975^if  (  ( i =  (  (  ( s5 != 0 )  ? 32 - hi0bits ( S_hiWord )  : 1 )  + s2 )  & 0x1f )  != 0 ) i = 32 - i;^[CLASS] DToA  [METHOD] JS_dtoa [RETURN_TYPE] int   double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [VARIABLES] byte[]  S_bytes  StringBuffer  buf  BigInteger[]  divResult  boolean  biasUp  denorm  fast_failed  k_check  leftright  spec_case  try_quick  double[]  bigtens  tens  double  d  d2  ds  eps  char  dig  lastCh  BigInteger  S  b  b1  delta  mhi  mlo  int[]  bbits  be  bits  dtoaModes  e  boolean[]  sign  int  Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  long  Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x  
[buglab_swap_variables]^if  (  ( i =  (  (  ( S_hiWord != 0 )  ? 32 - hi0bits ( s5 )  : 1 )  + s2 )  & 0x1f )  != 0 ) i = 32 - i;^960^961^^^^945^975^if  (  ( i =  (  (  ( s5 != 0 )  ? 32 - hi0bits ( S_hiWord )  : 1 )  + s2 )  & 0x1f )  != 0 ) i = 32 - i;^[CLASS] DToA  [METHOD] JS_dtoa [RETURN_TYPE] int   double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [VARIABLES] byte[]  S_bytes  StringBuffer  buf  BigInteger[]  divResult  boolean  biasUp  denorm  fast_failed  k_check  leftright  spec_case  try_quick  double[]  bigtens  tens  double  d  d2  ds  eps  char  dig  lastCh  BigInteger  S  b  b1  delta  mhi  mlo  int[]  bbits  be  bits  dtoaModes  e  boolean[]  sign  int  Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  long  Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x  
[buglab_swap_variables]^if  (  ( i =  (  (  ( s2 != 0 )  ? 32 - hi0bits ( S_hiWord )  : 1 )  + s5 )  & 0x1f )  != 0 ) i = 32 - i;^960^961^^^^945^975^if  (  ( i =  (  (  ( s5 != 0 )  ? 32 - hi0bits ( S_hiWord )  : 1 )  + s2 )  & 0x1f )  != 0 ) i = 32 - i;^[CLASS] DToA  [METHOD] JS_dtoa [RETURN_TYPE] int   double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [VARIABLES] byte[]  S_bytes  StringBuffer  buf  BigInteger[]  divResult  boolean  biasUp  denorm  fast_failed  k_check  leftright  spec_case  try_quick  double[]  bigtens  tens  double  d  d2  ds  eps  char  dig  lastCh  BigInteger  S  b  b1  delta  mhi  mlo  int[]  bbits  be  bits  dtoaModes  e  boolean[]  sign  int  Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  long  Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x  
[buglab_swap_variables]^if  ( b > 0 ) b2 = b.shiftLeft ( b2 ) ;^976^977^^^^961^991^if  ( b2 > 0 ) b = b.shiftLeft ( b2 ) ;^[CLASS] DToA  [METHOD] JS_dtoa [RETURN_TYPE] int   double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [VARIABLES] byte[]  S_bytes  StringBuffer  buf  BigInteger[]  divResult  boolean  biasUp  denorm  fast_failed  k_check  leftright  spec_case  try_quick  double[]  bigtens  tens  double  d  d2  ds  eps  char  dig  lastCh  BigInteger  S  b  b1  delta  mhi  mlo  int[]  bbits  be  bits  dtoaModes  e  boolean[]  sign  int  Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  long  Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x  
[buglab_swap_variables]^if  ( b22 > 0 ) b = b.shiftLeft ( b ) ;^976^977^^^^961^991^if  ( b2 > 0 ) b = b.shiftLeft ( b2 ) ;^[CLASS] DToA  [METHOD] JS_dtoa [RETURN_TYPE] int   double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [VARIABLES] byte[]  S_bytes  StringBuffer  buf  BigInteger[]  divResult  boolean  biasUp  denorm  fast_failed  k_check  leftright  spec_case  try_quick  double[]  bigtens  tens  double  d  d2  ds  eps  char  dig  lastCh  BigInteger  S  b  b1  delta  mhi  mlo  int[]  bbits  be  bits  dtoaModes  e  boolean[]  sign  int  Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  long  Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x  
[buglab_swap_variables]^b = b2.shiftLeft ( b ) ;^977^^^^^962^992^b = b.shiftLeft ( b2 ) ;^[CLASS] DToA  [METHOD] JS_dtoa [RETURN_TYPE] int   double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [VARIABLES] byte[]  S_bytes  StringBuffer  buf  BigInteger[]  divResult  boolean  biasUp  denorm  fast_failed  k_check  leftright  spec_case  try_quick  double[]  bigtens  tens  double  d  d2  ds  eps  char  dig  lastCh  BigInteger  S  b  b1  delta  mhi  mlo  int[]  bbits  be  bits  dtoaModes  e  boolean[]  sign  int  Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  long  Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x  
[buglab_swap_variables]^if  ( S > 0 ) s2 = S.shiftLeft ( s2 ) ;^978^979^^^^963^993^if  ( s2 > 0 ) S = S.shiftLeft ( s2 ) ;^[CLASS] DToA  [METHOD] JS_dtoa [RETURN_TYPE] int   double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [VARIABLES] byte[]  S_bytes  StringBuffer  buf  BigInteger[]  divResult  boolean  biasUp  denorm  fast_failed  k_check  leftright  spec_case  try_quick  double[]  bigtens  tens  double  d  d2  ds  eps  char  dig  lastCh  BigInteger  S  b  b1  delta  mhi  mlo  int[]  bbits  be  bits  dtoaModes  e  boolean[]  sign  int  Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  long  Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x  
[buglab_swap_variables]^S = s2.shiftLeft ( S ) ;^979^^^^^964^994^S = S.shiftLeft ( s2 ) ;^[CLASS] DToA  [METHOD] JS_dtoa [RETURN_TYPE] int   double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [VARIABLES] byte[]  S_bytes  StringBuffer  buf  BigInteger[]  divResult  boolean  biasUp  denorm  fast_failed  k_check  leftright  spec_case  try_quick  double[]  bigtens  tens  double  d  d2  ds  eps  char  dig  lastCh  BigInteger  S  b  b1  delta  mhi  mlo  int[]  bbits  be  bits  dtoaModes  e  boolean[]  sign  int  Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  long  Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x  
[buglab_swap_variables]^if  ( mhi ) leftright = mhi.multiply ( BigInteger.valueOf ( 10 )  ) ;^986^987^^^^971^1001^if  ( leftright ) mhi = mhi.multiply ( BigInteger.valueOf ( 10 )  ) ;^[CLASS] DToA  [METHOD] JS_dtoa [RETURN_TYPE] int   double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [VARIABLES] byte[]  S_bytes  StringBuffer  buf  BigInteger[]  divResult  boolean  biasUp  denorm  fast_failed  k_check  leftright  spec_case  try_quick  double[]  bigtens  tens  double  d  d2  ds  eps  char  dig  lastCh  BigInteger  S  b  b1  delta  mhi  mlo  int[]  bbits  be  bits  dtoaModes  e  boolean[]  sign  int  Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  long  Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x  
[buglab_swap_variables]^if  ( S.compareTo ( b )  < 0 )  {^983^^^^^968^998^if  ( b.compareTo ( S )  < 0 )  {^[CLASS] DToA  [METHOD] JS_dtoa [RETURN_TYPE] int   double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [VARIABLES] byte[]  S_bytes  StringBuffer  buf  BigInteger[]  divResult  boolean  biasUp  denorm  fast_failed  k_check  leftright  spec_case  try_quick  double[]  bigtens  tens  double  d  d2  ds  eps  char  dig  lastCh  BigInteger  S  b  b1  delta  mhi  mlo  int[]  bbits  be  bits  dtoaModes  e  boolean[]  sign  int  Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  long  Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x  
[buglab_swap_variables]^if  ( modelim <= 0 && i > 2 )  {^993^^^^^978^1008^if  ( ilim <= 0 && mode > 2 )  {^[CLASS] DToA  [METHOD] JS_dtoa [RETURN_TYPE] int   double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [VARIABLES] byte[]  S_bytes  StringBuffer  buf  BigInteger[]  divResult  boolean  biasUp  denorm  fast_failed  k_check  leftright  spec_case  try_quick  double[]  bigtens  tens  double  d  d2  ds  eps  char  dig  lastCh  BigInteger  S  b  b1  delta  mhi  mlo  int[]  bbits  be  bits  dtoaModes  e  boolean[]  sign  int  Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  long  Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x  
[buglab_swap_variables]^if  ( ilimlim <= 0 && mode > 2 )  {^993^^^^^978^1008^if  ( ilim <= 0 && mode > 2 )  {^[CLASS] DToA  [METHOD] JS_dtoa [RETURN_TYPE] int   double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [VARIABLES] byte[]  S_bytes  StringBuffer  buf  BigInteger[]  divResult  boolean  biasUp  denorm  fast_failed  k_check  leftright  spec_case  try_quick  double[]  bigtens  tens  double  d  d2  ds  eps  char  dig  lastCh  BigInteger  S  b  b1  delta  mhi  mlo  int[]  bbits  be  bits  dtoaModes  e  boolean[]  sign  int  Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  long  Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x  
[buglab_swap_variables]^if  (  ( b < 0  ) ||  (  ( i = ilim.compareTo ( S = S.multiply ( BigInteger.valueOf ( 5 )  )  )  )  < 0 ) ||  (  ( i == 0 && !biasUp )  )  )  {^996^997^998^^^981^1011^if  (  ( ilim < 0  ) ||  (  ( i = b.compareTo ( S = S.multiply ( BigInteger.valueOf ( 5 )  )  )  )  < 0 ) ||  (  ( i == 0 && !biasUp )  )  )  {^[CLASS] DToA  [METHOD] JS_dtoa [RETURN_TYPE] int   double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [VARIABLES] byte[]  S_bytes  StringBuffer  buf  BigInteger[]  divResult  boolean  biasUp  denorm  fast_failed  k_check  leftright  spec_case  try_quick  double[]  bigtens  tens  double  d  d2  ds  eps  char  dig  lastCh  BigInteger  S  b  b1  delta  mhi  mlo  int[]  bbits  be  bits  dtoaModes  e  boolean[]  sign  int  Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  long  Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x  
[buglab_swap_variables]^if  (  ( ilim < 0  ) ||  (  ( i = S.compareTo ( b = S.multiply ( BigInteger.valueOf ( 5 )  )  )  )  < 0 ) ||  (  ( i == 0 && !biasUp )  )  )  {^996^997^998^^^981^1011^if  (  ( ilim < 0  ) ||  (  ( i = b.compareTo ( S = S.multiply ( BigInteger.valueOf ( 5 )  )  )  )  < 0 ) ||  (  ( i == 0 && !biasUp )  )  )  {^[CLASS] DToA  [METHOD] JS_dtoa [RETURN_TYPE] int   double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [VARIABLES] byte[]  S_bytes  StringBuffer  buf  BigInteger[]  divResult  boolean  biasUp  denorm  fast_failed  k_check  leftright  spec_case  try_quick  double[]  bigtens  tens  double  d  d2  ds  eps  char  dig  lastCh  BigInteger  S  b  b1  delta  mhi  mlo  int[]  bbits  be  bits  dtoaModes  e  boolean[]  sign  int  Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  long  Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x  
[buglab_swap_variables]^if  (  ( blim < 0  ) ||  (  ( i = i.compareTo ( S = S.multiply ( BigInteger.valueOf ( 5 )  )  )  )  < 0 ) ||  (  ( i == 0 && !biasUp )  )  )  {^996^997^998^^^981^1011^if  (  ( ilim < 0  ) ||  (  ( i = b.compareTo ( S = S.multiply ( BigInteger.valueOf ( 5 )  )  )  )  < 0 ) ||  (  ( i == 0 && !biasUp )  )  )  {^[CLASS] DToA  [METHOD] JS_dtoa [RETURN_TYPE] int   double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [VARIABLES] byte[]  S_bytes  StringBuffer  buf  BigInteger[]  divResult  boolean  biasUp  denorm  fast_failed  k_check  leftright  spec_case  try_quick  double[]  bigtens  tens  double  d  d2  ds  eps  char  dig  lastCh  BigInteger  S  b  b1  delta  mhi  mlo  int[]  bbits  be  bits  dtoaModes  e  boolean[]  sign  int  Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  long  Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x  
[buglab_swap_variables]^||  (  ( i = S.compareTo ( b = S.multiply ( BigInteger.valueOf ( 5 )  )  )  )  < 0 ) ||  (  ( i == 0 && !biasUp )  )  )  {^997^998^^^^982^1012^||  (  ( i = b.compareTo ( S = S.multiply ( BigInteger.valueOf ( 5 )  )  )  )  < 0 ) ||  (  ( i == 0 && !biasUp )  )  )  {^[CLASS] DToA  [METHOD] JS_dtoa [RETURN_TYPE] int   double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [VARIABLES] byte[]  S_bytes  StringBuffer  buf  BigInteger[]  divResult  boolean  biasUp  denorm  fast_failed  k_check  leftright  spec_case  try_quick  double[]  bigtens  tens  double  d  d2  ds  eps  char  dig  lastCh  BigInteger  S  b  b1  delta  mhi  mlo  int[]  bbits  be  bits  dtoaModes  e  boolean[]  sign  int  Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  long  Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x  
[buglab_swap_variables]^if  (  ( i < 0  ) ||  (  ( ilim = b.compareTo ( S = S.multiply ( BigInteger.valueOf ( 5 )  )  )  )  < 0 ) ||  (  ( i == 0 && !biasUp )  )  )  {^996^997^998^^^981^1011^if  (  ( ilim < 0  ) ||  (  ( i = b.compareTo ( S = S.multiply ( BigInteger.valueOf ( 5 )  )  )  )  < 0 ) ||  (  ( i == 0 && !biasUp )  )  )  {^[CLASS] DToA  [METHOD] JS_dtoa [RETURN_TYPE] int   double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [VARIABLES] byte[]  S_bytes  StringBuffer  buf  BigInteger[]  divResult  boolean  biasUp  denorm  fast_failed  k_check  leftright  spec_case  try_quick  double[]  bigtens  tens  double  d  d2  ds  eps  char  dig  lastCh  BigInteger  S  b  b1  delta  mhi  mlo  int[]  bbits  be  bits  dtoaModes  e  boolean[]  sign  int  Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  long  Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x  
[buglab_swap_variables]^if  (  ( ilimlim < 0  ) ||  (  ( i = b.compareTo ( S = S.multiply ( BigInteger.valueOf ( 5 )  )  )  )  < 0 ) ||  (  ( i == 0 && !biasUp )  )  )  {^996^997^998^^^981^1011^if  (  ( ilim < 0  ) ||  (  ( i = b.compareTo ( S = S.multiply ( BigInteger.valueOf ( 5 )  )  )  )  < 0 ) ||  (  ( i == 0 && !biasUp )  )  )  {^[CLASS] DToA  [METHOD] JS_dtoa [RETURN_TYPE] int   double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [VARIABLES] byte[]  S_bytes  StringBuffer  buf  BigInteger[]  divResult  boolean  biasUp  denorm  fast_failed  k_check  leftright  spec_case  try_quick  double[]  bigtens  tens  double  d  d2  ds  eps  char  dig  lastCh  BigInteger  S  b  b1  delta  mhi  mlo  int[]  bbits  be  bits  dtoaModes  e  boolean[]  sign  int  Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  long  Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x  
[buglab_swap_variables]^if  ( ilim >= i ) break;^1115^1116^^^^1100^1130^if  ( i >= ilim ) break;^[CLASS] DToA  [METHOD] JS_dtoa [RETURN_TYPE] int   double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [VARIABLES] byte[]  S_bytes  StringBuffer  buf  BigInteger[]  divResult  boolean  biasUp  denorm  fast_failed  k_check  leftright  spec_case  try_quick  double[]  bigtens  tens  double  d  d2  ds  eps  char  dig  lastCh  BigInteger  S  b  b1  delta  mhi  mlo  int[]  bbits  be  bits  dtoaModes  e  boolean[]  sign  int  Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  long  Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x  
[buglab_swap_variables]^BigInteger[] divResult = S.divideAndRemainder ( b ) ;^1111^^^^^1096^1126^BigInteger[] divResult = b.divideAndRemainder ( S ) ;^[CLASS] DToA  [METHOD] JS_dtoa [RETURN_TYPE] int   double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [VARIABLES] byte[]  S_bytes  StringBuffer  buf  BigInteger[]  divResult  boolean  biasUp  denorm  fast_failed  k_check  leftright  spec_case  try_quick  double[]  bigtens  tens  double  d  d2  ds  eps  char  dig  lastCh  BigInteger  S  b  b1  delta  mhi  mlo  int[]  bbits  be  bits  dtoaModes  e  boolean[]  sign  int  Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  long  Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x  
[buglab_swap_variables]^if  ( mhi > 0 ) m2 = mhi.shiftLeft ( m2 ) ;^1015^1016^^^^1000^1030^if  ( m2 > 0 ) mhi = mhi.shiftLeft ( m2 ) ;^[CLASS] DToA  [METHOD] JS_dtoa [RETURN_TYPE] int   double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [VARIABLES] byte[]  S_bytes  StringBuffer  buf  BigInteger[]  divResult  boolean  biasUp  denorm  fast_failed  k_check  leftright  spec_case  try_quick  double[]  bigtens  tens  double  d  d2  ds  eps  char  dig  lastCh  BigInteger  S  b  b1  delta  mhi  mlo  int[]  bbits  be  bits  dtoaModes  e  boolean[]  sign  int  Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  long  Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x  
[buglab_swap_variables]^mhi = m2.shiftLeft ( mhi ) ;^1016^^^^^1001^1031^mhi = mhi.shiftLeft ( m2 ) ;^[CLASS] DToA  [METHOD] JS_dtoa [RETURN_TYPE] int   double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [VARIABLES] byte[]  S_bytes  StringBuffer  buf  BigInteger[]  divResult  boolean  biasUp  denorm  fast_failed  k_check  leftright  spec_case  try_quick  double[]  bigtens  tens  double  d  d2  ds  eps  char  dig  lastCh  BigInteger  S  b  b1  delta  mhi  mlo  int[]  bbits  be  bits  dtoaModes  e  boolean[]  sign  int  Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  long  Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x  
[buglab_swap_variables]^mhi = Log2P.shiftLeft ( mhi ) ;^1025^^^^^1010^1040^mhi = mhi.shiftLeft ( Log2P ) ;^[CLASS] DToA  [METHOD] JS_dtoa [RETURN_TYPE] int   double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [VARIABLES] byte[]  S_bytes  StringBuffer  buf  BigInteger[]  divResult  boolean  biasUp  denorm  fast_failed  k_check  leftright  spec_case  try_quick  double[]  bigtens  tens  double  d  d2  ds  eps  char  dig  lastCh  BigInteger  S  b  b1  delta  mhi  mlo  int[]  bbits  be  bits  dtoaModes  e  boolean[]  sign  int  Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  long  Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x  
[buglab_swap_variables]^if  (  ( j == 0 )  &&  ( mode == 0 )  &&  (  ( word1 ( d )  & 1 )  == 0 )  )  {^1042^^^^^1027^1057^if  (  ( j1 == 0 )  &&  ( mode == 0 )  &&  (  ( word1 ( d )  & 1 )  == 0 )  )  {^[CLASS] DToA  [METHOD] JS_dtoa [RETURN_TYPE] int   double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [VARIABLES] byte[]  S_bytes  StringBuffer  buf  BigInteger[]  divResult  boolean  biasUp  denorm  fast_failed  k_check  leftright  spec_case  try_quick  double[]  bigtens  tens  double  d  d2  ds  eps  char  dig  lastCh  BigInteger  S  b  b1  delta  mhi  mlo  int[]  bbits  be  bits  dtoaModes  e  boolean[]  sign  int  Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  long  Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x  
[buglab_swap_variables]^if  (  ( mode == 0 )  &&  ( j1 == 0 )  &&  (  ( word1 ( d )  & 1 )  == 0 )  )  {^1042^^^^^1027^1057^if  (  ( j1 == 0 )  &&  ( mode == 0 )  &&  (  ( word1 ( d )  & 1 )  == 0 )  )  {^[CLASS] DToA  [METHOD] JS_dtoa [RETURN_TYPE] int   double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [VARIABLES] byte[]  S_bytes  StringBuffer  buf  BigInteger[]  divResult  boolean  biasUp  denorm  fast_failed  k_check  leftright  spec_case  try_quick  double[]  bigtens  tens  double  d  d2  ds  eps  char  dig  lastCh  BigInteger  S  b  b1  delta  mhi  mlo  int[]  bbits  be  bits  dtoaModes  e  boolean[]  sign  int  Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  long  Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x  
[buglab_swap_variables]^if  (  ( mode < 0 ) ||  (  ( j == 0 ) &&  ( j == 0 ) &&  (  ( word1 ( d )  & 1 )  == 0 )^1057^1058^1059^1060^^1042^1072^if  (  ( j < 0 ) ||  (  ( j == 0 ) &&  ( mode == 0 ) &&  (  ( word1 ( d )  & 1 )  == 0 )^[CLASS] DToA  [METHOD] JS_dtoa [RETURN_TYPE] int   double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [VARIABLES] byte[]  S_bytes  StringBuffer  buf  BigInteger[]  divResult  boolean  biasUp  denorm  fast_failed  k_check  leftright  spec_case  try_quick  double[]  bigtens  tens  double  d  d2  ds  eps  char  dig  lastCh  BigInteger  S  b  b1  delta  mhi  mlo  int[]  bbits  be  bits  dtoaModes  e  boolean[]  sign  int  Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  long  Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x  
[buglab_swap_variables]^if  (  (  ( dig > 0 )  ||  ( j1 == 0 &&  (  (  ( j1 & 1 )  == 1 )  || biasUp )  )  ) &&  ( dig++ == '9' )  )  {^1067^1068^^^^1057^1080^if  (  (  ( j1 > 0 )  ||  ( j1 == 0 &&  (  (  ( dig & 1 )  == 1 )  || biasUp )  )  ) &&  ( dig++ == '9' )  )  {^[CLASS] DToA  [METHOD] JS_dtoa [RETURN_TYPE] int   double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [VARIABLES] byte[]  S_bytes  StringBuffer  buf  BigInteger[]  divResult  boolean  biasUp  denorm  fast_failed  k_check  leftright  spec_case  try_quick  double[]  bigtens  tens  double  d  d2  ds  eps  char  dig  lastCh  BigInteger  S  b  b1  delta  mhi  mlo  int[]  bbits  be  bits  dtoaModes  e  boolean[]  sign  int  Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  long  Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x  
[buglab_swap_variables]^if  (  (  ( j1 > 0 )  ||  ( j1 == 0 &&  (  (  ( biasUp & 1 )  == 1 )  || dig )  )  ) &&  ( dig++ == '9' )  )  {^1067^1068^^^^1057^1080^if  (  (  ( j1 > 0 )  ||  ( j1 == 0 &&  (  (  ( dig & 1 )  == 1 )  || biasUp )  )  ) &&  ( dig++ == '9' )  )  {^[CLASS] DToA  [METHOD] JS_dtoa [RETURN_TYPE] int   double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [VARIABLES] byte[]  S_bytes  StringBuffer  buf  BigInteger[]  divResult  boolean  biasUp  denorm  fast_failed  k_check  leftright  spec_case  try_quick  double[]  bigtens  tens  double  d  d2  ds  eps  char  dig  lastCh  BigInteger  S  b  b1  delta  mhi  mlo  int[]  bbits  be  bits  dtoaModes  e  boolean[]  sign  int  Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  long  Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x  
[buglab_swap_variables]^if  (  (  ( biasUp > 0 )  ||  ( j1 == 0 &&  (  (  ( dig & 1 )  == 1 )  || j1 )  )  ) &&  ( dig++ == '9' )  )  {^1067^1068^^^^1057^1080^if  (  (  ( j1 > 0 )  ||  ( j1 == 0 &&  (  (  ( dig & 1 )  == 1 )  || biasUp )  )  ) &&  ( dig++ == '9' )  )  {^[CLASS] DToA  [METHOD] JS_dtoa [RETURN_TYPE] int   double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [VARIABLES] byte[]  S_bytes  StringBuffer  buf  BigInteger[]  divResult  boolean  biasUp  denorm  fast_failed  k_check  leftright  spec_case  try_quick  double[]  bigtens  tens  double  d  d2  ds  eps  char  dig  lastCh  BigInteger  S  b  b1  delta  mhi  mlo  int[]  bbits  be  bits  dtoaModes  e  boolean[]  sign  int  Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  long  Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x  
[buglab_swap_variables]^j1 = S.compareTo ( b ) ;^1066^^^^^1057^1080^j1 = b.compareTo ( S ) ;^[CLASS] DToA  [METHOD] JS_dtoa [RETURN_TYPE] int   double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [VARIABLES] byte[]  S_bytes  StringBuffer  buf  BigInteger[]  divResult  boolean  biasUp  denorm  fast_failed  k_check  leftright  spec_case  try_quick  double[]  bigtens  tens  double  d  d2  ds  eps  char  dig  lastCh  BigInteger  S  b  b1  delta  mhi  mlo  int[]  bbits  be  bits  dtoaModes  e  boolean[]  sign  int  Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  long  Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x  
[buglab_swap_variables]^if  (  (  ( j1 > 0 )  ||  ( j1 == 0 &&  (  (  ( biasUp & 1 )  == 1 )  || dig )  )  ) &&  ( dig++ == '9' )  )  {^1067^1068^^^^1052^1082^if  (  (  ( j1 > 0 )  ||  ( j1 == 0 &&  (  (  ( dig & 1 )  == 1 )  || biasUp )  )  ) &&  ( dig++ == '9' )  )  {^[CLASS] DToA  [METHOD] JS_dtoa [RETURN_TYPE] int   double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [VARIABLES] byte[]  S_bytes  StringBuffer  buf  BigInteger[]  divResult  boolean  biasUp  denorm  fast_failed  k_check  leftright  spec_case  try_quick  double[]  bigtens  tens  double  d  d2  ds  eps  char  dig  lastCh  BigInteger  S  b  b1  delta  mhi  mlo  int[]  bbits  be  bits  dtoaModes  e  boolean[]  sign  int  Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  long  Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x  
[buglab_swap_variables]^j1 = S.compareTo ( b ) ;^1066^^^^^1051^1081^j1 = b.compareTo ( S ) ;^[CLASS] DToA  [METHOD] JS_dtoa [RETURN_TYPE] int   double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [VARIABLES] byte[]  S_bytes  StringBuffer  buf  BigInteger[]  divResult  boolean  biasUp  denorm  fast_failed  k_check  leftright  spec_case  try_quick  double[]  bigtens  tens  double  d  d2  ds  eps  char  dig  lastCh  BigInteger  S  b  b1  delta  mhi  mlo  int[]  bbits  be  bits  dtoaModes  e  boolean[]  sign  int  Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  long  Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x  
[buglab_swap_variables]^if  (  (  ( biasUp > 0 )  ||  ( j1 == 0 &&  (  (  ( dig & 1 )  == 1 )  || j1 )  )  ) &&  ( dig++ == '9' )  )  {^1067^1068^^^^1052^1082^if  (  (  ( j1 > 0 )  ||  ( j1 == 0 &&  (  (  ( dig & 1 )  == 1 )  || biasUp )  )  ) &&  ( dig++ == '9' )  )  {^[CLASS] DToA  [METHOD] JS_dtoa [RETURN_TYPE] int   double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [VARIABLES] byte[]  S_bytes  StringBuffer  buf  BigInteger[]  divResult  boolean  biasUp  denorm  fast_failed  k_check  leftright  spec_case  try_quick  double[]  bigtens  tens  double  d  d2  ds  eps  char  dig  lastCh  BigInteger  S  b  b1  delta  mhi  mlo  int[]  bbits  be  bits  dtoaModes  e  boolean[]  sign  int  Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  long  Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x  
[buglab_swap_variables]^if  ( ilim == i ) break;^1097^1098^^^^1082^1112^if  ( i == ilim ) break;^[CLASS] DToA  [METHOD] JS_dtoa [RETURN_TYPE] int   double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [VARIABLES] byte[]  S_bytes  StringBuffer  buf  BigInteger[]  divResult  boolean  biasUp  denorm  fast_failed  k_check  leftright  spec_case  try_quick  double[]  bigtens  tens  double  d  d2  ds  eps  char  dig  lastCh  BigInteger  S  b  b1  delta  mhi  mlo  int[]  bbits  be  bits  dtoaModes  e  boolean[]  sign  int  Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  long  Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x  
[buglab_swap_variables]^if  ( mhi == mlo ) mlo = mhi = mhi.multiply ( BigInteger.valueOf ( 10 )  ) ;^1100^1101^^^^1085^1115^if  ( mlo == mhi ) mlo = mhi = mhi.multiply ( BigInteger.valueOf ( 10 )  ) ;^[CLASS] DToA  [METHOD] JS_dtoa [RETURN_TYPE] int   double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [VARIABLES] byte[]  S_bytes  StringBuffer  buf  BigInteger[]  divResult  boolean  biasUp  denorm  fast_failed  k_check  leftright  spec_case  try_quick  double[]  bigtens  tens  double  d  d2  ds  eps  char  dig  lastCh  BigInteger  S  b  b1  delta  mhi  mlo  int[]  bbits  be  bits  dtoaModes  e  boolean[]  sign  int  Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  long  Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x  
[buglab_swap_variables]^if  (  ( d1 == 0 )  &&  ( mode == 0 )  &&  (  ( word1 ( j )  & 1 )  == 0 )  )  {^1042^^^^^1027^1057^if  (  ( j1 == 0 )  &&  ( mode == 0 )  &&  (  ( word1 ( d )  & 1 )  == 0 )  )  {^[CLASS] DToA  [METHOD] JS_dtoa [RETURN_TYPE] int   double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [VARIABLES] byte[]  S_bytes  StringBuffer  buf  BigInteger[]  divResult  boolean  biasUp  denorm  fast_failed  k_check  leftright  spec_case  try_quick  double[]  bigtens  tens  double  d  d2  ds  eps  char  dig  lastCh  BigInteger  S  b  b1  delta  mhi  mlo  int[]  bbits  be  bits  dtoaModes  e  boolean[]  sign  int  Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  long  Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x  
[buglab_swap_variables]^j = mlo.compareTo ( b ) ;^1037^^^^^1022^1052^j = b.compareTo ( mlo ) ;^[CLASS] DToA  [METHOD] JS_dtoa [RETURN_TYPE] int   double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [VARIABLES] byte[]  S_bytes  StringBuffer  buf  BigInteger[]  divResult  boolean  biasUp  denorm  fast_failed  k_check  leftright  spec_case  try_quick  double[]  bigtens  tens  double  d  d2  ds  eps  char  dig  lastCh  BigInteger  S  b  b1  delta  mhi  mlo  int[]  bbits  be  bits  dtoaModes  e  boolean[]  sign  int  Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  long  Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x  
[buglab_swap_variables]^delta = mhi.subtract ( S ) ;^1039^^^^^1024^1054^delta = S.subtract ( mhi ) ;^[CLASS] DToA  [METHOD] JS_dtoa [RETURN_TYPE] int   double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [VARIABLES] byte[]  S_bytes  StringBuffer  buf  BigInteger[]  divResult  boolean  biasUp  denorm  fast_failed  k_check  leftright  spec_case  try_quick  double[]  bigtens  tens  double  d  d2  ds  eps  char  dig  lastCh  BigInteger  S  b  b1  delta  mhi  mlo  int[]  bbits  be  bits  dtoaModes  e  boolean[]  sign  int  Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  long  Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x  
[buglab_swap_variables]^j1 =  ( b.signum (  )  <= 0 )  ? 1 : delta.compareTo ( delta ) ;^1040^^^^^1025^1055^j1 =  ( delta.signum (  )  <= 0 )  ? 1 : b.compareTo ( delta ) ;^[CLASS] DToA  [METHOD] JS_dtoa [RETURN_TYPE] int   double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [VARIABLES] byte[]  S_bytes  StringBuffer  buf  BigInteger[]  divResult  boolean  biasUp  denorm  fast_failed  k_check  leftright  spec_case  try_quick  double[]  bigtens  tens  double  d  d2  ds  eps  char  dig  lastCh  BigInteger  S  b  b1  delta  mhi  mlo  int[]  bbits  be  bits  dtoaModes  e  boolean[]  sign  int  Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  long  Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x  
[buglab_swap_variables]^BigInteger[] divResult = S.divideAndRemainder ( b ) ;^1031^^^^^1016^1046^BigInteger[] divResult = b.divideAndRemainder ( S ) ;^[CLASS] DToA  [METHOD] JS_dtoa [RETURN_TYPE] int   double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [VARIABLES] byte[]  S_bytes  StringBuffer  buf  BigInteger[]  divResult  boolean  biasUp  denorm  fast_failed  k_check  leftright  spec_case  try_quick  double[]  bigtens  tens  double  d  d2  ds  eps  char  dig  lastCh  BigInteger  S  b  b1  delta  mhi  mlo  int[]  bbits  be  bits  dtoaModes  e  boolean[]  sign  int  Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  long  Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x  
[buglab_swap_variables]^if  (  ( d == 0 )  &&  ( mode == 0 )  &&  (  ( word1 ( j1 )  & 1 )  == 0 )  )  {^1042^^^^^1027^1057^if  (  ( j1 == 0 )  &&  ( mode == 0 )  &&  (  ( word1 ( d )  & 1 )  == 0 )  )  {^[CLASS] DToA  [METHOD] JS_dtoa [RETURN_TYPE] int   double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [VARIABLES] byte[]  S_bytes  StringBuffer  buf  BigInteger[]  divResult  boolean  biasUp  denorm  fast_failed  k_check  leftright  spec_case  try_quick  double[]  bigtens  tens  double  d  d2  ds  eps  char  dig  lastCh  BigInteger  S  b  b1  delta  mhi  mlo  int[]  bbits  be  bits  dtoaModes  e  boolean[]  sign  int  Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  long  Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x  
[buglab_swap_variables]^if  (  ( j11 == 0 )  &&  ( mode == 0 )  &&  (  ( word1 ( d )  & 1 )  == 0 )  )  {^1042^^^^^1027^1057^if  (  ( j1 == 0 )  &&  ( mode == 0 )  &&  (  ( word1 ( d )  & 1 )  == 0 )  )  {^[CLASS] DToA  [METHOD] JS_dtoa [RETURN_TYPE] int   double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [VARIABLES] byte[]  S_bytes  StringBuffer  buf  BigInteger[]  divResult  boolean  biasUp  denorm  fast_failed  k_check  leftright  spec_case  try_quick  double[]  bigtens  tens  double  d  d2  ds  eps  char  dig  lastCh  BigInteger  S  b  b1  delta  mhi  mlo  int[]  bbits  be  bits  dtoaModes  e  boolean[]  sign  int  Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  long  Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x  
[buglab_swap_variables]^j = S.compareTo ( b ) ;^1123^^^^^1108^1138^j = b.compareTo ( S ) ;^[CLASS] DToA  [METHOD] JS_dtoa [RETURN_TYPE] int   double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [VARIABLES] byte[]  S_bytes  StringBuffer  buf  BigInteger[]  divResult  boolean  biasUp  denorm  fast_failed  k_check  leftright  spec_case  try_quick  double[]  bigtens  tens  double  d  d2  ds  eps  char  dig  lastCh  BigInteger  S  b  b1  delta  mhi  mlo  int[]  bbits  be  bits  dtoaModes  e  boolean[]  sign  int  Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  long  Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x  
[buglab_swap_variables]^if  (  ( j > 0 )  ||  ( j == 0 &&  (  (  ( biasUp & 1 )  == 1 )  || dig )  )  )  {^1124^^^^^1109^1139^if  (  ( j > 0 )  ||  ( j == 0 &&  (  (  ( dig & 1 )  == 1 )  || biasUp )  )  )  {^[CLASS] DToA  [METHOD] JS_dtoa [RETURN_TYPE] int   double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [VARIABLES] byte[]  S_bytes  StringBuffer  buf  BigInteger[]  divResult  boolean  biasUp  denorm  fast_failed  k_check  leftright  spec_case  try_quick  double[]  bigtens  tens  double  d  d2  ds  eps  char  dig  lastCh  BigInteger  S  b  b1  delta  mhi  mlo  int[]  bbits  be  bits  dtoaModes  e  boolean[]  sign  int  Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  long  Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x  
[buglab_swap_variables]^while ( buf-->0 && bl.charAt ( bl )  == '0' )  {}^1163^^^^^1158^1165^while ( bl-->0 && buf.charAt ( bl )  == '0' )  {}^[CLASS] DToA  [METHOD] stripTrailingZeroes [RETURN_TYPE] void   StringBuffer buf [VARIABLES] int[]  bbits  be  bits  dtoaModes  e  StringBuffer  buf  boolean  double[]  bigtens  tens  int  Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  bl  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  long  Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x  
[buglab_swap_variables]^if  ( mode == DTOSTR_FIXED &&  ( d >= 1e21 || d <= -1e21 )  ) m  decPt = JS_dtoa ( d, dtoaModes[mode] >= DTOSTR_FIXED, precision, sign, buffer ) ;^1186^1187^1188^1189^^1171^1201^if  ( mode == DTOSTR_FIXED &&  ( d >= 1e21 || d <= -1e21 )  ) m  decPt = JS_dtoa ( d, dtoaModes[mode], mode >= DTOSTR_FIXED, precision, sign, buffer ) ;^[CLASS] DToA  [METHOD] JS_dtostr [RETURN_TYPE] void   StringBuffer buffer int mode int precision double d [VARIABLES] StringBuffer  buffer  boolean  exponentialNotation  double[]  bigtens  tens  double  d  int[]  bbits  be  bits  dtoaModes  e  boolean[]  sign  int  Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  bl  d0  d1  de  decPt  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  minNDigits  mode  nDigits  n_bigtens  ndigits  offset  p  precision  q  s2  s5  val  word0  word1  x  y  z  long  Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x  
[buglab_swap_variables]^if  ( d == DTOSTR_FIXED &&  ( mode >= 1e21 || d <= -1e21 )  ) m  decPt = JS_dtoa ( d, dtoaModes[mode], mode >= DTOSTR_FIXED, precision, sign, buffer ) ;^1186^1187^1188^1189^^1171^1201^if  ( mode == DTOSTR_FIXED &&  ( d >= 1e21 || d <= -1e21 )  ) m  decPt = JS_dtoa ( d, dtoaModes[mode], mode >= DTOSTR_FIXED, precision, sign, buffer ) ;^[CLASS] DToA  [METHOD] JS_dtostr [RETURN_TYPE] void   StringBuffer buffer int mode int precision double d [VARIABLES] StringBuffer  buffer  boolean  exponentialNotation  double[]  bigtens  tens  double  d  int[]  bbits  be  bits  dtoaModes  e  boolean[]  sign  int  Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  bl  d0  d1  de  decPt  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  minNDigits  mode  nDigits  n_bigtens  ndigits  offset  p  precision  q  s2  s5  val  word0  word1  x  y  z  long  Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x  
[buglab_swap_variables]^if  ( mode == DTOSTR_FIXED &&  ( d >= 1e21 || d <= -1e21 )  ) m  decPt = JS_dtoa (  dtoaModes[mode], mode >= DTOSTR_FIXED, precision, sign, buffer ) ;^1186^1187^1188^1189^^1171^1201^if  ( mode == DTOSTR_FIXED &&  ( d >= 1e21 || d <= -1e21 )  ) m  decPt = JS_dtoa ( d, dtoaModes[mode], mode >= DTOSTR_FIXED, precision, sign, buffer ) ;^[CLASS] DToA  [METHOD] JS_dtostr [RETURN_TYPE] void   StringBuffer buffer int mode int precision double d [VARIABLES] StringBuffer  buffer  boolean  exponentialNotation  double[]  bigtens  tens  double  d  int[]  bbits  be  bits  dtoaModes  e  boolean[]  sign  int  Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  bl  d0  d1  de  decPt  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  minNDigits  mode  nDigits  n_bigtens  ndigits  offset  p  precision  q  s2  s5  val  word0  word1  x  y  z  long  Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x  
[buglab_swap_variables]^if  ( mode == DTOSTR_FIXED &&  ( d >= 1e21 || d <= -1e21 )  ) m  decPt = JS_dtoa ( d, dtoaModes[mode], mode >=  precision, sign, buffer ) ;^1186^1187^1188^1189^^1171^1201^if  ( mode == DTOSTR_FIXED &&  ( d >= 1e21 || d <= -1e21 )  ) m  decPt = JS_dtoa ( d, dtoaModes[mode], mode >= DTOSTR_FIXED, precision, sign, buffer ) ;^[CLASS] DToA  [METHOD] JS_dtostr [RETURN_TYPE] void   StringBuffer buffer int mode int precision double d [VARIABLES] StringBuffer  buffer  boolean  exponentialNotation  double[]  bigtens  tens  double  d  int[]  bbits  be  bits  dtoaModes  e  boolean[]  sign  int  Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  bl  d0  d1  de  decPt  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  minNDigits  mode  nDigits  n_bigtens  ndigits  offset  p  precision  q  s2  s5  val  word0  word1  x  y  z  long  Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x  
[buglab_swap_variables]^decPt = JS_dtoa ( DTOSTR_FIXED, dtoaModes[mode], mode >= d, precision, sign, buffer ) ;^1189^^^^^1174^1204^decPt = JS_dtoa ( d, dtoaModes[mode], mode >= DTOSTR_FIXED, precision, sign, buffer ) ;^[CLASS] DToA  [METHOD] JS_dtostr [RETURN_TYPE] void   StringBuffer buffer int mode int precision double d [VARIABLES] StringBuffer  buffer  boolean  exponentialNotation  double[]  bigtens  tens  double  d  int[]  bbits  be  bits  dtoaModes  e  boolean[]  sign  int  Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  bl  d0  d1  de  decPt  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  minNDigits  mode  nDigits  n_bigtens  ndigits  offset  p  precision  q  s2  s5  val  word0  word1  x  y  z  long  Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x  
[buglab_swap_variables]^decPt = JS_dtoa (  dtoaModes[mode], mode >= DTOSTR_FIXED, precision, sign, buffer ) ;^1189^^^^^1174^1204^decPt = JS_dtoa ( d, dtoaModes[mode], mode >= DTOSTR_FIXED, precision, sign, buffer ) ;^[CLASS] DToA  [METHOD] JS_dtostr [RETURN_TYPE] void   StringBuffer buffer int mode int precision double d [VARIABLES] StringBuffer  buffer  boolean  exponentialNotation  double[]  bigtens  tens  double  d  int[]  bbits  be  bits  dtoaModes  e  boolean[]  sign  int  Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  bl  d0  d1  de  decPt  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  minNDigits  mode  nDigits  n_bigtens  ndigits  offset  p  precision  q  s2  s5  val  word0  word1  x  y  z  long  Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x  
[buglab_swap_variables]^decPt = JS_dtoa ( d, dtoaModes[mode], precision >= DTOSTR_FIXED, mode, sign, buffer ) ;^1189^^^^^1174^1204^decPt = JS_dtoa ( d, dtoaModes[mode], mode >= DTOSTR_FIXED, precision, sign, buffer ) ;^[CLASS] DToA  [METHOD] JS_dtostr [RETURN_TYPE] void   StringBuffer buffer int mode int precision double d [VARIABLES] StringBuffer  buffer  boolean  exponentialNotation  double[]  bigtens  tens  double  d  int[]  bbits  be  bits  dtoaModes  e  boolean[]  sign  int  Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  bl  d0  d1  de  decPt  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  minNDigits  mode  nDigits  n_bigtens  ndigits  offset  p  precision  q  s2  s5  val  word0  word1  x  y  z  long  Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x  
[buglab_swap_variables]^decPt = JS_dtoa ( d, dtoaModes[mode] >= DTOSTR_FIXED, precision, sign, buffer ) ;^1189^^^^^1174^1204^decPt = JS_dtoa ( d, dtoaModes[mode], mode >= DTOSTR_FIXED, precision, sign, buffer ) ;^[CLASS] DToA  [METHOD] JS_dtostr [RETURN_TYPE] void   StringBuffer buffer int mode int precision double d [VARIABLES] StringBuffer  buffer  boolean  exponentialNotation  double[]  bigtens  tens  double  d  int[]  bbits  be  bits  dtoaModes  e  boolean[]  sign  int  Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  bl  d0  d1  de  decPt  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  minNDigits  mode  nDigits  n_bigtens  ndigits  offset  p  precision  q  s2  s5  val  word0  word1  x  y  z  long  Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x  
[buglab_swap_variables]^decPt = JS_dtoa ( d, dtoaModes[mode], mode >= DTOSTR_FIXED, buffer, sign, precision ) ;^1189^^^^^1174^1204^decPt = JS_dtoa ( d, dtoaModes[mode], mode >= DTOSTR_FIXED, precision, sign, buffer ) ;^[CLASS] DToA  [METHOD] JS_dtostr [RETURN_TYPE] void   StringBuffer buffer int mode int precision double d [VARIABLES] StringBuffer  buffer  boolean  exponentialNotation  double[]  bigtens  tens  double  d  int[]  bbits  be  bits  dtoaModes  e  boolean[]  sign  int  Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  bl  d0  d1  de  decPt  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  minNDigits  mode  nDigits  n_bigtens  ndigits  offset  p  precision  q  s2  s5  val  word0  word1  x  y  z  long  Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x  
[buglab_swap_variables]^decPt = JS_dtoa ( d, dtoaModes[mode], mode >= DTOSTR_FIXED,  sign, buffer ) ;^1189^^^^^1174^1204^decPt = JS_dtoa ( d, dtoaModes[mode], mode >= DTOSTR_FIXED, precision, sign, buffer ) ;^[CLASS] DToA  [METHOD] JS_dtostr [RETURN_TYPE] void   StringBuffer buffer int mode int precision double d [VARIABLES] StringBuffer  buffer  boolean  exponentialNotation  double[]  bigtens  tens  double  d  int[]  bbits  be  bits  dtoaModes  e  boolean[]  sign  int  Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  bl  d0  d1  de  decPt  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  minNDigits  mode  nDigits  n_bigtens  ndigits  offset  p  precision  q  s2  s5  val  word0  word1  x  y  z  long  Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x  
[buglab_swap_variables]^decPt = JS_dtoa ( d, sign[mode], mode >= DTOSTR_FIXED, precision, dtoaModes, buffer ) ;^1189^^^^^1174^1204^decPt = JS_dtoa ( d, dtoaModes[mode], mode >= DTOSTR_FIXED, precision, sign, buffer ) ;^[CLASS] DToA  [METHOD] JS_dtostr [RETURN_TYPE] void   StringBuffer buffer int mode int precision double d [VARIABLES] StringBuffer  buffer  boolean  exponentialNotation  double[]  bigtens  tens  double  d  int[]  bbits  be  bits  dtoaModes  e  boolean[]  sign  int  Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  bl  d0  d1  de  decPt  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  minNDigits  mode  nDigits  n_bigtens  ndigits  offset  p  precision  q  s2  s5  val  word0  word1  x  y  z  long  Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x  
[buglab_swap_variables]^decPt = JS_dtoa ( d, dtoaModes[mode], mode >= DTOSTR_FIXED, precision,  buffer ) ;^1189^^^^^1174^1204^decPt = JS_dtoa ( d, dtoaModes[mode], mode >= DTOSTR_FIXED, precision, sign, buffer ) ;^[CLASS] DToA  [METHOD] JS_dtostr [RETURN_TYPE] void   StringBuffer buffer int mode int precision double d [VARIABLES] StringBuffer  buffer  boolean  exponentialNotation  double[]  bigtens  tens  double  d  int[]  bbits  be  bits  dtoaModes  e  boolean[]  sign  int  Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  bl  d0  d1  de  decPt  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  minNDigits  mode  nDigits  n_bigtens  ndigits  offset  p  precision  q  s2  s5  val  word0  word1  x  y  z  long  Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x  
[buglab_swap_variables]^decPt = JS_dtoa ( d, dtoaModes[mode], mode >= DTOSTR_FIXED, precision, sign ) ;^1189^^^^^1174^1204^decPt = JS_dtoa ( d, dtoaModes[mode], mode >= DTOSTR_FIXED, precision, sign, buffer ) ;^[CLASS] DToA  [METHOD] JS_dtostr [RETURN_TYPE] void   StringBuffer buffer int mode int precision double d [VARIABLES] StringBuffer  buffer  boolean  exponentialNotation  double[]  bigtens  tens  double  d  int[]  bbits  be  bits  dtoaModes  e  boolean[]  sign  int  Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  bl  d0  d1  de  decPt  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  minNDigits  mode  nDigits  n_bigtens  ndigits  offset  p  precision  q  s2  s5  val  word0  word1  x  y  z  long  Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x  
[buglab_swap_variables]^decPt = JS_dtoa ( dtoaModes, d[mode], mode >= DTOSTR_FIXED, precision, sign, buffer ) ;^1189^^^^^1174^1204^decPt = JS_dtoa ( d, dtoaModes[mode], mode >= DTOSTR_FIXED, precision, sign, buffer ) ;^[CLASS] DToA  [METHOD] JS_dtostr [RETURN_TYPE] void   StringBuffer buffer int mode int precision double d [VARIABLES] StringBuffer  buffer  boolean  exponentialNotation  double[]  bigtens  tens  double  d  int[]  bbits  be  bits  dtoaModes  e  boolean[]  sign  int  Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  bl  d0  d1  de  decPt  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  minNDigits  mode  nDigits  n_bigtens  ndigits  offset  p  precision  q  s2  s5  val  word0  word1  x  y  z  long  Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x  
[buglab_swap_variables]^decPt = JS_dtoa ( d[mode], mode >= DTOSTR_FIXED, precision, sign, buffer ) ;^1189^^^^^1174^1204^decPt = JS_dtoa ( d, dtoaModes[mode], mode >= DTOSTR_FIXED, precision, sign, buffer ) ;^[CLASS] DToA  [METHOD] JS_dtostr [RETURN_TYPE] void   StringBuffer buffer int mode int precision double d [VARIABLES] StringBuffer  buffer  boolean  exponentialNotation  double[]  bigtens  tens  double  d  int[]  bbits  be  bits  dtoaModes  e  boolean[]  sign  int  Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  bl  d0  d1  de  decPt  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  minNDigits  mode  nDigits  n_bigtens  ndigits  offset  p  precision  q  s2  s5  val  word0  word1  x  y  z  long  Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x  
[buglab_swap_variables]^decPt = JS_dtoa ( d, DTOSTR_FIXED[mode], mode >= dtoaModes, precision, sign, buffer ) ;^1189^^^^^1174^1204^decPt = JS_dtoa ( d, dtoaModes[mode], mode >= DTOSTR_FIXED, precision, sign, buffer ) ;^[CLASS] DToA  [METHOD] JS_dtostr [RETURN_TYPE] void   StringBuffer buffer int mode int precision double d [VARIABLES] StringBuffer  buffer  boolean  exponentialNotation  double[]  bigtens  tens  double  d  int[]  bbits  be  bits  dtoaModes  e  boolean[]  sign  int  Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  bl  d0  d1  de  decPt  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  minNDigits  mode  nDigits  n_bigtens  ndigits  offset  p  precision  q  s2  s5  val  word0  word1  x  y  z  long  Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x  
[buglab_swap_variables]^decPt = JS_dtoa ( d, dtoaModes[mode], mode >=  precision, sign, buffer ) ;^1189^^^^^1174^1204^decPt = JS_dtoa ( d, dtoaModes[mode], mode >= DTOSTR_FIXED, precision, sign, buffer ) ;^[CLASS] DToA  [METHOD] JS_dtostr [RETURN_TYPE] void   StringBuffer buffer int mode int precision double d [VARIABLES] StringBuffer  buffer  boolean  exponentialNotation  double[]  bigtens  tens  double  d  int[]  bbits  be  bits  dtoaModes  e  boolean[]  sign  int  Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  bl  d0  d1  de  decPt  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  minNDigits  mode  nDigits  n_bigtens  ndigits  offset  p  precision  q  s2  s5  val  word0  word1  x  y  z  long  Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x  
[buglab_swap_variables]^decPt = JS_dtoa ( d, dtoaModes[mode], mode >= precision, DTOSTR_FIXED, sign, buffer ) ;^1189^^^^^1174^1204^decPt = JS_dtoa ( d, dtoaModes[mode], mode >= DTOSTR_FIXED, precision, sign, buffer ) ;^[CLASS] DToA  [METHOD] JS_dtostr [RETURN_TYPE] void   StringBuffer buffer int mode int precision double d [VARIABLES] StringBuffer  buffer  boolean  exponentialNotation  double[]  bigtens  tens  double  d  int[]  bbits  be  bits  dtoaModes  e  boolean[]  sign  int  Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  bl  d0  d1  de  decPt  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  minNDigits  mode  nDigits  n_bigtens  ndigits  offset  p  precision  q  s2  s5  val  word0  word1  x  y  z  long  Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x  
[buglab_swap_variables]^decPt = JS_dtoa ( d, dtoaModes[mode], buffer >= DTOSTR_FIXED, precision, sign, mode ) ;^1189^^^^^1174^1204^decPt = JS_dtoa ( d, dtoaModes[mode], mode >= DTOSTR_FIXED, precision, sign, buffer ) ;^[CLASS] DToA  [METHOD] JS_dtostr [RETURN_TYPE] void   StringBuffer buffer int mode int precision double d [VARIABLES] StringBuffer  buffer  boolean  exponentialNotation  double[]  bigtens  tens  double  d  int[]  bbits  be  bits  dtoaModes  e  boolean[]  sign  int  Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  bl  d0  d1  de  decPt  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  minNDigits  mode  nDigits  n_bigtens  ndigits  offset  p  precision  q  s2  s5  val  word0  word1  x  y  z  long  Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x  
[buglab_swap_variables]^decPt = JS_dtoa ( d, mode[mode], dtoaModes >= DTOSTR_FIXED, precision, sign, buffer ) ;^1189^^^^^1174^1204^decPt = JS_dtoa ( d, dtoaModes[mode], mode >= DTOSTR_FIXED, precision, sign, buffer ) ;^[CLASS] DToA  [METHOD] JS_dtostr [RETURN_TYPE] void   StringBuffer buffer int mode int precision double d [VARIABLES] StringBuffer  buffer  boolean  exponentialNotation  double[]  bigtens  tens  double  d  int[]  bbits  be  bits  dtoaModes  e  boolean[]  sign  int  Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  bl  d0  d1  de  decPt  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  minNDigits  mode  nDigits  n_bigtens  ndigits  offset  p  precision  q  s2  s5  val  word0  word1  x  y  z  long  Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x  
[buglab_swap_variables]^if  ( decPt >= 0 ) minNDigits = precision + precision;^1208^1209^^^^1193^1223^if  ( precision >= 0 ) minNDigits = decPt + precision;^[CLASS] DToA  [METHOD] JS_dtostr [RETURN_TYPE] void   StringBuffer buffer int mode int precision double d [VARIABLES] StringBuffer  buffer  boolean  exponentialNotation  double[]  bigtens  tens  double  d  int[]  bbits  be  bits  dtoaModes  e  boolean[]  sign  int  Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  bl  d0  d1  de  decPt  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  minNDigits  mode  nDigits  n_bigtens  ndigits  offset  p  precision  q  s2  s5  val  word0  word1  x  y  z  long  Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x  
[buglab_swap_variables]^minNDigits = precision + decPt;^1209^^^^^1194^1224^minNDigits = decPt + precision;^[CLASS] DToA  [METHOD] JS_dtostr [RETURN_TYPE] void   StringBuffer buffer int mode int precision double d [VARIABLES] StringBuffer  buffer  boolean  exponentialNotation  double[]  bigtens  tens  double  d  int[]  bbits  be  bits  dtoaModes  e  boolean[]  sign  int  Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  bl  d0  d1  de  decPt  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  minNDigits  mode  nDigits  n_bigtens  ndigits  offset  p  precision  q  s2  s5  val  word0  word1  x  y  z  long  Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x  
[buglab_swap_variables]^if  ( precision < -5 || decPt > decPt ) exponentialNotation = true;^1225^1226^^^^1210^1240^if  ( decPt < -5 || decPt > precision ) exponentialNotation = true;^[CLASS] DToA  [METHOD] JS_dtostr [RETURN_TYPE] void   StringBuffer buffer int mode int precision double d [VARIABLES] StringBuffer  buffer  boolean  exponentialNotation  double[]  bigtens  tens  double  d  int[]  bbits  be  bits  dtoaModes  e  boolean[]  sign  int  Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  bl  d0  d1  de  decPt  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  minNDigits  mode  nDigits  n_bigtens  ndigits  offset  p  precision  q  s2  s5  val  word0  word1  x  y  z  long  Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x  
[buglab_swap_variables]^} else if  ( nDigits != decPt )  {^1249^^^^^1234^1264^} else if  ( decPt != nDigits )  {^[CLASS] DToA  [METHOD] JS_dtostr [RETURN_TYPE] void   StringBuffer buffer int mode int precision double d [VARIABLES] StringBuffer  buffer  boolean  exponentialNotation  double[]  bigtens  tens  double  d  int[]  bbits  be  bits  dtoaModes  e  boolean[]  sign  int  Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  bl  d0  d1  de  decPt  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  minNDigits  mode  nDigits  n_bigtens  ndigits  offset  p  precision  q  s2  s5  val  word0  word1  x  y  z  long  Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x  
[buglab_swap_variables]^} else nDigitsf  ( decPt != i )  {^1249^^^^^1234^1264^} else if  ( decPt != nDigits )  {^[CLASS] DToA  [METHOD] JS_dtostr [RETURN_TYPE] void   StringBuffer buffer int mode int precision double d [VARIABLES] StringBuffer  buffer  boolean  exponentialNotation  double[]  bigtens  tens  double  d  int[]  bbits  be  bits  dtoaModes  e  boolean[]  sign  int  Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  bl  d0  d1  de  decPt  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  minNDigits  mode  nDigits  n_bigtens  ndigits  offset  p  precision  q  s2  s5  val  word0  word1  x  y  z  long  Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x  
[buglab_swap_variables]^for  ( decPtnt i = 0; i < 1 - i; i++ ) buffer.insert ( 0, '0' ) ;^1257^1258^^^^1252^1260^for  ( int i = 0; i < 1 - decPt; i++ ) buffer.insert ( 0, '0' ) ;^[CLASS] DToA  [METHOD] JS_dtostr [RETURN_TYPE] void   StringBuffer buffer int mode int precision double d [VARIABLES] StringBuffer  buffer  boolean  exponentialNotation  double[]  bigtens  tens  double  d  int[]  bbits  be  bits  dtoaModes  e  boolean[]  sign  int  Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  bl  d0  d1  de  decPt  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  minNDigits  mode  nDigits  n_bigtens  ndigits  offset  p  precision  q  s2  s5  val  word0  word1  x  y  z  long  Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x  
[buglab_swap_variables]^for  ( int i = 0; i < 1 - buffer; i++ ) decPt.insert ( 0, '0' ) ;^1257^1258^^^^1252^1260^for  ( int i = 0; i < 1 - decPt; i++ ) buffer.insert ( 0, '0' ) ;^[CLASS] DToA  [METHOD] JS_dtostr [RETURN_TYPE] void   StringBuffer buffer int mode int precision double d [VARIABLES] StringBuffer  buffer  boolean  exponentialNotation  double[]  bigtens  tens  double  d  int[]  bbits  be  bits  dtoaModes  e  boolean[]  sign  int  Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  bl  d0  d1  de  decPt  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  minNDigits  mode  nDigits  n_bigtens  ndigits  offset  p  precision  q  s2  s5  val  word0  word1  x  y  z  long  Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x  
[buglab_swap_variables]^buffer.insert (  '.' ) ;^1254^^^^^1239^1269^buffer.insert ( decPt, '.' ) ;^[CLASS] DToA  [METHOD] JS_dtostr [RETURN_TYPE] void   StringBuffer buffer int mode int precision double d [VARIABLES] StringBuffer  buffer  boolean  exponentialNotation  double[]  bigtens  tens  double  d  int[]  bbits  be  bits  dtoaModes  e  boolean[]  sign  int  Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  bl  d0  d1  de  decPt  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  minNDigits  mode  nDigits  n_bigtens  ndigits  offset  p  precision  q  s2  s5  val  word0  word1  x  y  z  long  Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x  
[buglab_swap_variables]^for  ( decPtnt i = 0; i < 1 - i; i++ ) buffer.insert ( 0, '0' ) ;^1257^1258^^^^1242^1272^for  ( int i = 0; i < 1 - decPt; i++ ) buffer.insert ( 0, '0' ) ;^[CLASS] DToA  [METHOD] JS_dtostr [RETURN_TYPE] void   StringBuffer buffer int mode int precision double d [VARIABLES] StringBuffer  buffer  boolean  exponentialNotation  double[]  bigtens  tens  double  d  int[]  bbits  be  bits  dtoaModes  e  boolean[]  sign  int  Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  bl  d0  d1  de  decPt  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  minNDigits  mode  nDigits  n_bigtens  ndigits  offset  p  precision  q  s2  s5  val  word0  word1  x  y  z  long  Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x  
[buglab_swap_variables]^for  ( int i = 0; i < 1 - buffer; i++ ) decPt.insert ( 0, '0' ) ;^1257^1258^^^^1242^1272^for  ( int i = 0; i < 1 - decPt; i++ ) buffer.insert ( 0, '0' ) ;^[CLASS] DToA  [METHOD] JS_dtostr [RETURN_TYPE] void   StringBuffer buffer int mode int precision double d [VARIABLES] StringBuffer  buffer  boolean  exponentialNotation  double[]  bigtens  tens  double  d  int[]  bbits  be  bits  dtoaModes  e  boolean[]  sign  int  Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  bl  d0  d1  de  decPt  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  minNDigits  mode  nDigits  n_bigtens  ndigits  offset  p  precision  q  s2  s5  val  word0  word1  x  y  z  long  Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x  
[buglab_swap_variables]^for  ( buffernt i = 0; i < 1 - decPt; i++ ) i.insert ( 0, '0' ) ;^1257^1258^^^^1252^1260^for  ( int i = 0; i < 1 - decPt; i++ ) buffer.insert ( 0, '0' ) ;^[CLASS] DToA  [METHOD] JS_dtostr [RETURN_TYPE] void   StringBuffer buffer int mode int precision double d [VARIABLES] StringBuffer  buffer  boolean  exponentialNotation  double[]  bigtens  tens  double  d  int[]  bbits  be  bits  dtoaModes  e  boolean[]  sign  int  Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  bl  d0  d1  de  decPt  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  minNDigits  mode  nDigits  n_bigtens  ndigits  offset  p  precision  q  s2  s5  val  word0  word1  x  y  z  long  Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x  
[buglab_swap_variables]^if  (  ( buffer - 1 )  >= 0 ) decPt.append ( '+' ) ;^1245^1246^^^^1230^1260^if  (  ( decPt - 1 )  >= 0 ) buffer.append ( '+' ) ;^[CLASS] DToA  [METHOD] JS_dtostr [RETURN_TYPE] void   StringBuffer buffer int mode int precision double d [VARIABLES] StringBuffer  buffer  boolean  exponentialNotation  double[]  bigtens  tens  double  d  int[]  bbits  be  bits  dtoaModes  e  boolean[]  sign  int  Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  bl  d0  d1  de  decPt  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  minNDigits  mode  nDigits  n_bigtens  ndigits  offset  p  precision  q  s2  s5  val  word0  word1  x  y  z  long  Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x  
[buglab_swap_variables]^} else decPtf  ( i != nDigits )  {^1249^^^^^1234^1264^} else if  ( decPt != nDigits )  {^[CLASS] DToA  [METHOD] JS_dtostr [RETURN_TYPE] void   StringBuffer buffer int mode int precision double d [VARIABLES] StringBuffer  buffer  boolean  exponentialNotation  double[]  bigtens  tens  double  d  int[]  bbits  be  bits  dtoaModes  e  boolean[]  sign  int  Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  bl  d0  d1  de  decPt  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  minNDigits  mode  nDigits  n_bigtens  ndigits  offset  p  precision  q  s2  s5  val  word0  word1  x  y  z  long  Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x  
[buglab_swap_variables]^for  ( buffernt i = 0; i < 1 - decPt; i++ ) i.insert ( 0, '0' ) ;^1257^1258^^^^1242^1272^for  ( int i = 0; i < 1 - decPt; i++ ) buffer.insert ( 0, '0' ) ;^[CLASS] DToA  [METHOD] JS_dtostr [RETURN_TYPE] void   StringBuffer buffer int mode int precision double d [VARIABLES] StringBuffer  buffer  boolean  exponentialNotation  double[]  bigtens  tens  double  d  int[]  bbits  be  bits  dtoaModes  e  boolean[]  sign  int  Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  bl  d0  d1  de  decPt  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  minNDigits  mode  nDigits  n_bigtens  ndigits  offset  p  precision  q  s2  s5  val  word0  word1  x  y  z  long  Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x  
[buglab_swap_variables]^if  ( Exp_mask[0] && ! ( word0 ( d )  == Sign_bit && word1 ( d )  == 0 )  && ! (  ( word0 ( d )  & sign )  == Exp_mask && (  ( word1 ( d )  != 0 )  ||  (  ( word0 ( d )  & Frac_mask )  != 0 )  )  )  )  {^1265^1266^1267^1268^^1250^1280^if  ( sign[0] && ! ( word0 ( d )  == Sign_bit && word1 ( d )  == 0 )  && ! (  ( word0 ( d )  & Exp_mask )  == Exp_mask && (  ( word1 ( d )  != 0 )  ||  (  ( word0 ( d )  & Frac_mask )  != 0 )  )  )  )  {^[CLASS] DToA  [METHOD] JS_dtostr [RETURN_TYPE] void   StringBuffer buffer int mode int precision double d [VARIABLES] StringBuffer  buffer  boolean  exponentialNotation  double[]  bigtens  tens  double  d  int[]  bbits  be  bits  dtoaModes  e  boolean[]  sign  int  Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  bl  d0  d1  de  decPt  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  minNDigits  mode  nDigits  n_bigtens  ndigits  offset  p  precision  q  s2  s5  val  word0  word1  x  y  z  long  Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x  
[buglab_swap_variables]^if  ( sign[0] && ! ( word0 ( Exp_mask )  == Sign_bit && word1 ( d )  == 0 )  && ! (  ( word0 ( d )  & d )  == Exp_mask && (  ( word1 ( d )  != 0 )  ||  (  ( word0 ( d )  & Frac_mask )  != 0 )  )  )  )  {^1265^1266^1267^1268^^1250^1280^if  ( sign[0] && ! ( word0 ( d )  == Sign_bit && word1 ( d )  == 0 )  && ! (  ( word0 ( d )  & Exp_mask )  == Exp_mask && (  ( word1 ( d )  != 0 )  ||  (  ( word0 ( d )  & Frac_mask )  != 0 )  )  )  )  {^[CLASS] DToA  [METHOD] JS_dtostr [RETURN_TYPE] void   StringBuffer buffer int mode int precision double d [VARIABLES] StringBuffer  buffer  boolean  exponentialNotation  double[]  bigtens  tens  double  d  int[]  bbits  be  bits  dtoaModes  e  boolean[]  sign  int  Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  bl  d0  d1  de  decPt  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  minNDigits  mode  nDigits  n_bigtens  ndigits  offset  p  precision  q  s2  s5  val  word0  word1  x  y  z  long  Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x  
[buglab_swap_variables]^if  ( sign[0] && ! ( word0 ( d )  == Frac_mask && word1 ( d )  == 0 )  && ! (  ( word0 ( d )  & Exp_mask )  == Exp_mask && (  ( word1 ( d )  != 0 )  ||  (  ( word0 ( d )  & Sign_bit )  != 0 )  )  )  )  {^1265^1266^1267^1268^^1250^1280^if  ( sign[0] && ! ( word0 ( d )  == Sign_bit && word1 ( d )  == 0 )  && ! (  ( word0 ( d )  & Exp_mask )  == Exp_mask && (  ( word1 ( d )  != 0 )  ||  (  ( word0 ( d )  & Frac_mask )  != 0 )  )  )  )  {^[CLASS] DToA  [METHOD] JS_dtostr [RETURN_TYPE] void   StringBuffer buffer int mode int precision double d [VARIABLES] StringBuffer  buffer  boolean  exponentialNotation  double[]  bigtens  tens  double  d  int[]  bbits  be  bits  dtoaModes  e  boolean[]  sign  int  Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  bl  d0  d1  de  decPt  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  minNDigits  mode  nDigits  n_bigtens  ndigits  offset  p  precision  q  s2  s5  val  word0  word1  x  y  z  long  Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x  
[buglab_swap_variables]^if  ( sign[0] && ! ( word0 ( d )  == Sign_bit && word1 ( d )  == 0 )  && ! (  ( word0 ( d )  & Frac_mask )  == Exp_mask && (  ( word1 ( d )  != 0 )  ||  (  ( word0 ( d )  & Exp_mask )  != 0 )  )  )  )  {^1265^1266^1267^1268^^1250^1280^if  ( sign[0] && ! ( word0 ( d )  == Sign_bit && word1 ( d )  == 0 )  && ! (  ( word0 ( d )  & Exp_mask )  == Exp_mask && (  ( word1 ( d )  != 0 )  ||  (  ( word0 ( d )  & Frac_mask )  != 0 )  )  )  )  {^[CLASS] DToA  [METHOD] JS_dtostr [RETURN_TYPE] void   StringBuffer buffer int mode int precision double d [VARIABLES] StringBuffer  buffer  boolean  exponentialNotation  double[]  bigtens  tens  double  d  int[]  bbits  be  bits  dtoaModes  e  boolean[]  sign  int  Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  bl  d0  d1  de  decPt  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  minNDigits  mode  nDigits  n_bigtens  ndigits  offset  p  precision  q  s2  s5  val  word0  word1  x  y  z  long  Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x  
