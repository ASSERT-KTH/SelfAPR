[BugLab_Wrong_Operator]^if  ( expr.isOptionalArg (  )  && expr.isVarArgs (  )  )  {^79^^^^^78^85^if  ( expr.isOptionalArg (  )  || expr.isVarArgs (  )  )  {^[CLASS] JSTypeExpression  [METHOD] makeOptionalArg [RETURN_TYPE] JSTypeExpression   JSTypeExpression expr [VARIABLES] JSTypeExpression  expr  JSTypeRegistry  registry  String  sourceName  boolean  long  serialVersionUID  Node  root  
[BugLab_Variable_Misuse]^return new JSTypeExpression ( new Node ( Token.EQUALS, root ) , expr.sourceName, expr.registry ) ;^82^83^^^^78^85^return new JSTypeExpression ( new Node ( Token.EQUALS, expr.root ) , expr.sourceName, expr.registry ) ;^[CLASS] JSTypeExpression  [METHOD] makeOptionalArg [RETURN_TYPE] JSTypeExpression   JSTypeExpression expr [VARIABLES] JSTypeExpression  expr  JSTypeRegistry  registry  String  sourceName  boolean  long  serialVersionUID  Node  root  
[BugLab_Variable_Misuse]^return new JSTypeExpression ( new Node ( Token.EQUALS, expr.root ) , sourceName, expr.registry ) ;^82^83^^^^78^85^return new JSTypeExpression ( new Node ( Token.EQUALS, expr.root ) , expr.sourceName, expr.registry ) ;^[CLASS] JSTypeExpression  [METHOD] makeOptionalArg [RETURN_TYPE] JSTypeExpression   JSTypeExpression expr [VARIABLES] JSTypeExpression  expr  JSTypeRegistry  registry  String  sourceName  boolean  long  serialVersionUID  Node  root  
[BugLab_Variable_Misuse]^return new JSTypeExpression ( new Node ( Token.EQUALS, expr.root ) , expr.sourceName, registry ) ;^82^83^^^^78^85^return new JSTypeExpression ( new Node ( Token.EQUALS, expr.root ) , expr.sourceName, expr.registry ) ;^[CLASS] JSTypeExpression  [METHOD] makeOptionalArg [RETURN_TYPE] JSTypeExpression   JSTypeExpression expr [VARIABLES] JSTypeExpression  expr  JSTypeRegistry  registry  String  sourceName  boolean  long  serialVersionUID  Node  root  
[BugLab_Argument_Swapping]^return new JSTypeExpression ( new Node ( expr, Token.EQUALS.root ) , expr.sourceName, expr.registry ) ;^82^83^^^^78^85^return new JSTypeExpression ( new Node ( Token.EQUALS, expr.root ) , expr.sourceName, expr.registry ) ;^[CLASS] JSTypeExpression  [METHOD] makeOptionalArg [RETURN_TYPE] JSTypeExpression   JSTypeExpression expr [VARIABLES] JSTypeExpression  expr  JSTypeRegistry  registry  String  sourceName  boolean  long  serialVersionUID  Node  root  
[BugLab_Argument_Swapping]^return new JSTypeExpression ( new Node ( expr.root, Token.EQUALS ) , expr.sourceName, expr.registry ) ;^82^83^^^^78^85^return new JSTypeExpression ( new Node ( Token.EQUALS, expr.root ) , expr.sourceName, expr.registry ) ;^[CLASS] JSTypeExpression  [METHOD] makeOptionalArg [RETURN_TYPE] JSTypeExpression   JSTypeExpression expr [VARIABLES] JSTypeExpression  expr  JSTypeRegistry  registry  String  sourceName  boolean  long  serialVersionUID  Node  root  
[BugLab_Argument_Swapping]^return new JSTypeExpression ( new Node ( Token.EQUALS, expr ) , expr.root.sourceName, expr.registry ) ;^82^83^^^^78^85^return new JSTypeExpression ( new Node ( Token.EQUALS, expr.root ) , expr.sourceName, expr.registry ) ;^[CLASS] JSTypeExpression  [METHOD] makeOptionalArg [RETURN_TYPE] JSTypeExpression   JSTypeExpression expr [VARIABLES] JSTypeExpression  expr  JSTypeRegistry  registry  String  sourceName  boolean  long  serialVersionUID  Node  root  
[BugLab_Argument_Swapping]^return new JSTypeExpression ( new Node ( Token.EQUALS, expr.root ) , expr.registry, expr.sourceName ) ;^82^83^^^^78^85^return new JSTypeExpression ( new Node ( Token.EQUALS, expr.root ) , expr.sourceName, expr.registry ) ;^[CLASS] JSTypeExpression  [METHOD] makeOptionalArg [RETURN_TYPE] JSTypeExpression   JSTypeExpression expr [VARIABLES] JSTypeExpression  expr  JSTypeRegistry  registry  String  sourceName  boolean  long  serialVersionUID  Node  root  
[BugLab_Argument_Swapping]^return new JSTypeExpression ( new Node ( Token.EQUALS, expr.sourceName ) , expr.root, expr.registry ) ;^82^83^^^^78^85^return new JSTypeExpression ( new Node ( Token.EQUALS, expr.root ) , expr.sourceName, expr.registry ) ;^[CLASS] JSTypeExpression  [METHOD] makeOptionalArg [RETURN_TYPE] JSTypeExpression   JSTypeExpression expr [VARIABLES] JSTypeExpression  expr  JSTypeRegistry  registry  String  sourceName  boolean  long  serialVersionUID  Node  root  
[BugLab_Variable_Misuse]^new Node ( expr, expr.root ) , expr.sourceName, expr.registry ) ;^83^^^^^78^85^new Node ( Token.EQUALS, expr.root ) , expr.sourceName, expr.registry ) ;^[CLASS] JSTypeExpression  [METHOD] makeOptionalArg [RETURN_TYPE] JSTypeExpression   JSTypeExpression expr [VARIABLES] JSTypeExpression  expr  JSTypeRegistry  registry  String  sourceName  boolean  long  serialVersionUID  Node  root  
[BugLab_Variable_Misuse]^new Node ( Token.EQUALS, root ) , expr.sourceName, expr.registry ) ;^83^^^^^78^85^new Node ( Token.EQUALS, expr.root ) , expr.sourceName, expr.registry ) ;^[CLASS] JSTypeExpression  [METHOD] makeOptionalArg [RETURN_TYPE] JSTypeExpression   JSTypeExpression expr [VARIABLES] JSTypeExpression  expr  JSTypeRegistry  registry  String  sourceName  boolean  long  serialVersionUID  Node  root  
[BugLab_Argument_Swapping]^new Node ( expr, Token.EQUALS.root ) , expr.sourceName, expr.registry ) ;^83^^^^^78^85^new Node ( Token.EQUALS, expr.root ) , expr.sourceName, expr.registry ) ;^[CLASS] JSTypeExpression  [METHOD] makeOptionalArg [RETURN_TYPE] JSTypeExpression   JSTypeExpression expr [VARIABLES] JSTypeExpression  expr  JSTypeRegistry  registry  String  sourceName  boolean  long  serialVersionUID  Node  root  
[BugLab_Argument_Swapping]^new Node ( expr.root, Token.EQUALS ) , expr.sourceName, expr.registry ) ;^83^^^^^78^85^new Node ( Token.EQUALS, expr.root ) , expr.sourceName, expr.registry ) ;^[CLASS] JSTypeExpression  [METHOD] makeOptionalArg [RETURN_TYPE] JSTypeExpression   JSTypeExpression expr [VARIABLES] JSTypeExpression  expr  JSTypeRegistry  registry  String  sourceName  boolean  long  serialVersionUID  Node  root  
[BugLab_Argument_Swapping]^return new JSTypeExpression ( new Node ( Token.EQUALS, expr.registry ) , expr.sourceName, expr.root ) ;^82^83^^^^78^85^return new JSTypeExpression ( new Node ( Token.EQUALS, expr.root ) , expr.sourceName, expr.registry ) ;^[CLASS] JSTypeExpression  [METHOD] makeOptionalArg [RETURN_TYPE] JSTypeExpression   JSTypeExpression expr [VARIABLES] JSTypeExpression  expr  JSTypeRegistry  registry  String  sourceName  boolean  long  serialVersionUID  Node  root  
[BugLab_Argument_Swapping]^return new JSTypeExpression ( new Node ( expr.registry, expr.root ) , expr.sourceName, Token.EQUALS ) ;^82^83^^^^78^85^return new JSTypeExpression ( new Node ( Token.EQUALS, expr.root ) , expr.sourceName, expr.registry ) ;^[CLASS] JSTypeExpression  [METHOD] makeOptionalArg [RETURN_TYPE] JSTypeExpression   JSTypeExpression expr [VARIABLES] JSTypeExpression  expr  JSTypeRegistry  registry  String  sourceName  boolean  long  serialVersionUID  Node  root  
[BugLab_Argument_Swapping]^return new JSTypeExpression ( new Node ( expr.sourceName, expr.root ) , Token.EQUALS, expr.registry ) ;^82^83^^^^78^85^return new JSTypeExpression ( new Node ( Token.EQUALS, expr.root ) , expr.sourceName, expr.registry ) ;^[CLASS] JSTypeExpression  [METHOD] makeOptionalArg [RETURN_TYPE] JSTypeExpression   JSTypeExpression expr [VARIABLES] JSTypeExpression  expr  JSTypeRegistry  registry  String  sourceName  boolean  long  serialVersionUID  Node  root  
[BugLab_Argument_Swapping]^return new JSTypeExpression ( new Node ( Token.EQUALS, expr.registry.root ) , expr.sourceName, expr ) ;^82^83^^^^78^85^return new JSTypeExpression ( new Node ( Token.EQUALS, expr.root ) , expr.sourceName, expr.registry ) ;^[CLASS] JSTypeExpression  [METHOD] makeOptionalArg [RETURN_TYPE] JSTypeExpression   JSTypeExpression expr [VARIABLES] JSTypeExpression  expr  JSTypeRegistry  registry  String  sourceName  boolean  long  serialVersionUID  Node  root  
[BugLab_Argument_Swapping]^new Node ( Token.EQUALS, expr ) , expr.root.sourceName, expr.registry ) ;^83^^^^^78^85^new Node ( Token.EQUALS, expr.root ) , expr.sourceName, expr.registry ) ;^[CLASS] JSTypeExpression  [METHOD] makeOptionalArg [RETURN_TYPE] JSTypeExpression   JSTypeExpression expr [VARIABLES] JSTypeExpression  expr  JSTypeRegistry  registry  String  sourceName  boolean  long  serialVersionUID  Node  root  
[BugLab_Argument_Swapping]^return Token.EQUALS.getType (  )  == root;^91^^^^^90^92^return root.getType (  )  == Token.EQUALS;^[CLASS] JSTypeExpression  [METHOD] isOptionalArg [RETURN_TYPE] boolean   [VARIABLES] JSTypeRegistry  registry  String  sourceName  boolean  long  serialVersionUID  Node  root  
[BugLab_Wrong_Operator]^return root.getType (  )  != Token.EQUALS;^91^^^^^90^92^return root.getType (  )  == Token.EQUALS;^[CLASS] JSTypeExpression  [METHOD] isOptionalArg [RETURN_TYPE] boolean   [VARIABLES] JSTypeRegistry  registry  String  sourceName  boolean  long  serialVersionUID  Node  root  
[BugLab_Argument_Swapping]^return Token.ELLIPSIS.getType (  )  == root;^98^^^^^97^99^return root.getType (  )  == Token.ELLIPSIS;^[CLASS] JSTypeExpression  [METHOD] isVarArgs [RETURN_TYPE] boolean   [VARIABLES] JSTypeRegistry  registry  String  sourceName  boolean  long  serialVersionUID  Node  root  
[BugLab_Wrong_Operator]^return root.getType (  )  <= Token.ELLIPSIS;^98^^^^^97^99^return root.getType (  )  == Token.ELLIPSIS;^[CLASS] JSTypeExpression  [METHOD] isVarArgs [RETURN_TYPE] boolean   [VARIABLES] JSTypeRegistry  registry  String  sourceName  boolean  long  serialVersionUID  Node  root  
[BugLab_Argument_Swapping]^JSType type = registry.createFromTypeNodes ( root, scope, sourceName ) ;^105^^^^^104^110^JSType type = registry.createFromTypeNodes ( root, sourceName, scope ) ;^[CLASS] JSTypeExpression  [METHOD] evaluate [RETURN_TYPE] JSType   JSType> scope [VARIABLES] JSTypeRegistry  registry  JSType  type  boolean  Node  root  StaticScope  scope  String  sourceName  long  serialVersionUID  
[BugLab_Argument_Swapping]^JSType type = root.createFromTypeNodes ( registry, sourceName, scope ) ;^105^^^^^104^110^JSType type = registry.createFromTypeNodes ( root, sourceName, scope ) ;^[CLASS] JSTypeExpression  [METHOD] evaluate [RETURN_TYPE] JSType   JSType> scope [VARIABLES] JSTypeRegistry  registry  JSType  type  boolean  Node  root  StaticScope  scope  String  sourceName  long  serialVersionUID  
[BugLab_Argument_Swapping]^JSType type = registry.createFromTypeNodes ( scope, sourceName, root ) ;^105^^^^^104^110^JSType type = registry.createFromTypeNodes ( root, sourceName, scope ) ;^[CLASS] JSTypeExpression  [METHOD] evaluate [RETURN_TYPE] JSType   JSType> scope [VARIABLES] JSTypeRegistry  registry  JSType  type  boolean  Node  root  StaticScope  scope  String  sourceName  long  serialVersionUID  
[BugLab_Argument_Swapping]^JSType type = sourceName.createFromTypeNodes ( root, registry, scope ) ;^105^^^^^104^110^JSType type = registry.createFromTypeNodes ( root, sourceName, scope ) ;^[CLASS] JSTypeExpression  [METHOD] evaluate [RETURN_TYPE] JSType   JSType> scope [VARIABLES] JSTypeRegistry  registry  JSType  type  boolean  Node  root  StaticScope  scope  String  sourceName  long  serialVersionUID  
[BugLab_Argument_Swapping]^JSType type = registry.createFromTypeNodes ( sourceName, root, scope ) ;^105^^^^^104^110^JSType type = registry.createFromTypeNodes ( root, sourceName, scope ) ;^[CLASS] JSTypeExpression  [METHOD] evaluate [RETURN_TYPE] JSType   JSType> scope [VARIABLES] JSTypeRegistry  registry  JSType  type  boolean  Node  root  StaticScope  scope  String  sourceName  long  serialVersionUID  
[BugLab_Argument_Swapping]^return root instanceof JSTypeExpression && (  ( JSTypeExpression )  other ) .root.checkTreeEqualsSilent ( other ) ;^114^115^^^^113^116^return other instanceof JSTypeExpression && (  ( JSTypeExpression )  other ) .root.checkTreeEqualsSilent ( root ) ;^[CLASS] JSTypeExpression  [METHOD] equals [RETURN_TYPE] boolean   Object other [VARIABLES] JSTypeRegistry  registry  Object  other  String  sourceName  boolean  long  serialVersionUID  Node  root  
[BugLab_Wrong_Operator]^return other instanceof JSTypeExpression || (  ( JSTypeExpression )  other ) .root.checkTreeEqualsSilent ( root ) ;^114^115^^^^113^116^return other instanceof JSTypeExpression && (  ( JSTypeExpression )  other ) .root.checkTreeEqualsSilent ( root ) ;^[CLASS] JSTypeExpression  [METHOD] equals [RETURN_TYPE] boolean   Object other [VARIABLES] JSTypeRegistry  registry  Object  other  String  sourceName  boolean  long  serialVersionUID  Node  root  
[BugLab_Wrong_Operator]^return other  >=  JSTypeExpression && (  ( JSTypeExpression )  other ) .root.checkTreeEqualsSilent ( root ) ;^114^115^^^^113^116^return other instanceof JSTypeExpression && (  ( JSTypeExpression )  other ) .root.checkTreeEqualsSilent ( root ) ;^[CLASS] JSTypeExpression  [METHOD] equals [RETURN_TYPE] boolean   Object other [VARIABLES] JSTypeRegistry  registry  Object  other  String  sourceName  boolean  long  serialVersionUID  Node  root  
