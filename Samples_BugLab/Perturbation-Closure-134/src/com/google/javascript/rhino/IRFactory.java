[BugLab_Variable_Misuse]^Node children = children.removeChildren (  ) ;^69^^^^^67^71^Node children = body.removeChildren (  ) ;^[CLASS] IRFactory  [METHOD] initScript [RETURN_TYPE] void   ScriptOrFnNode scriptNode Node body [VARIABLES] ScriptOrFnNode  scriptNode  boolean  Parser  parser  Node  body  children  
[BugLab_Variable_Misuse]^if  ( body != null )  { scriptNode.addChildrenToBack ( children ) ; }^70^^^^^67^71^if  ( children != null )  { scriptNode.addChildrenToBack ( children ) ; }^[CLASS] IRFactory  [METHOD] initScript [RETURN_TYPE] void   ScriptOrFnNode scriptNode Node body [VARIABLES] ScriptOrFnNode  scriptNode  boolean  Parser  parser  Node  body  children  
[BugLab_Argument_Swapping]^if  ( scriptNode != null )  { children.addChildrenToBack ( children ) ; }^70^^^^^67^71^if  ( children != null )  { scriptNode.addChildrenToBack ( children ) ; }^[CLASS] IRFactory  [METHOD] initScript [RETURN_TYPE] void   ScriptOrFnNode scriptNode Node body [VARIABLES] ScriptOrFnNode  scriptNode  boolean  Parser  parser  Node  body  children  
[BugLab_Wrong_Operator]^if  ( children == null )  { scriptNode.addChildrenToBack ( children ) ; }^70^^^^^67^71^if  ( children != null )  { scriptNode.addChildrenToBack ( children ) ; }^[CLASS] IRFactory  [METHOD] initScript [RETURN_TYPE] void   ScriptOrFnNode scriptNode Node body [VARIABLES] ScriptOrFnNode  scriptNode  boolean  Parser  parser  Node  body  children  
[BugLab_Variable_Misuse]^return new Node ( lineno, lineno, charno ) ;^86^^^^^84^87^return new Node ( nodeType, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createLeaf [RETURN_TYPE] Node   int nodeType int lineno int charno [VARIABLES] int  charno  lineno  nodeType  Parser  parser  boolean  
[BugLab_Variable_Misuse]^return new Node ( nodeType, nodeType, charno ) ;^86^^^^^84^87^return new Node ( nodeType, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createLeaf [RETURN_TYPE] Node   int nodeType int lineno int charno [VARIABLES] int  charno  lineno  nodeType  Parser  parser  boolean  
[BugLab_Variable_Misuse]^return new Node ( nodeType, lineno, lineno ) ;^86^^^^^84^87^return new Node ( nodeType, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createLeaf [RETURN_TYPE] Node   int nodeType int lineno int charno [VARIABLES] int  charno  lineno  nodeType  Parser  parser  boolean  
[BugLab_Argument_Swapping]^return new Node ( charno, lineno, nodeType ) ;^86^^^^^84^87^return new Node ( nodeType, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createLeaf [RETURN_TYPE] Node   int nodeType int lineno int charno [VARIABLES] int  charno  lineno  nodeType  Parser  parser  boolean  
[BugLab_Argument_Swapping]^return new Node ( lineno, nodeType, charno ) ;^86^^^^^84^87^return new Node ( nodeType, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createLeaf [RETURN_TYPE] Node   int nodeType int lineno int charno [VARIABLES] int  charno  lineno  nodeType  Parser  parser  boolean  
[BugLab_Argument_Swapping]^return new Node ( nodeType, charno, lineno ) ;^86^^^^^84^87^return new Node ( nodeType, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createLeaf [RETURN_TYPE] Node   int nodeType int lineno int charno [VARIABLES] int  charno  lineno  nodeType  Parser  parser  boolean  
[BugLab_Variable_Misuse]^return new Node ( charno, lineno, charno ) ;^86^^^^^84^87^return new Node ( nodeType, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createLeaf [RETURN_TYPE] Node   int nodeType int lineno int charno [VARIABLES] int  charno  lineno  nodeType  Parser  parser  boolean  
[BugLab_Variable_Misuse]^return new Node ( nodeType, charno, charno ) ;^86^^^^^84^87^return new Node ( nodeType, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createLeaf [RETURN_TYPE] Node   int nodeType int lineno int charno [VARIABLES] int  charno  lineno  nodeType  Parser  parser  boolean  
[BugLab_Variable_Misuse]^return new Node ( nodeType, lineno, nodeType ) ;^86^^^^^84^87^return new Node ( nodeType, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createLeaf [RETURN_TYPE] Node   int nodeType int lineno int charno [VARIABLES] int  charno  lineno  nodeType  Parser  parser  boolean  
[BugLab_Variable_Misuse]^return new Node ( Token.SWITCH, charno, charno ) ;^95^^^^^93^96^return new Node ( Token.SWITCH, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createSwitch [RETURN_TYPE] Node   int lineno int charno [VARIABLES] int  charno  lineno  Parser  parser  boolean  
[BugLab_Argument_Swapping]^return new Node ( Token.SWITCH, charno, lineno ) ;^95^^^^^93^96^return new Node ( Token.SWITCH, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createSwitch [RETURN_TYPE] Node   int lineno int charno [VARIABLES] int  charno  lineno  Parser  parser  boolean  
[BugLab_Argument_Swapping]^return new Node ( charno, lineno, Token.SWITCH ) ;^95^^^^^93^96^return new Node ( Token.SWITCH, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createSwitch [RETURN_TYPE] Node   int lineno int charno [VARIABLES] int  charno  lineno  Parser  parser  boolean  
[BugLab_Argument_Swapping]^return new Node ( lineno, Token.SWITCH, charno ) ;^95^^^^^93^96^return new Node ( Token.SWITCH, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createSwitch [RETURN_TYPE] Node   int lineno int charno [VARIABLES] int  charno  lineno  Parser  parser  boolean  
[BugLab_Variable_Misuse]^if  ( statements.getType (  )  != Token.SWITCH )  throw Kit.codeBug (  ) ;^104^^^^^101^115^if  ( switchNode.getType (  )  != Token.SWITCH )  throw Kit.codeBug (  ) ;^[CLASS] IRFactory  [METHOD] addSwitchCase [RETURN_TYPE] void   Node switchNode Node caseExpression Node statements int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  caseExpression  caseNode  statements  switchNode  
[BugLab_Argument_Swapping]^if  ( Token.SWITCH.getType (  )  != switchNode )  throw Kit.codeBug (  ) ;^104^^^^^101^115^if  ( switchNode.getType (  )  != Token.SWITCH )  throw Kit.codeBug (  ) ;^[CLASS] IRFactory  [METHOD] addSwitchCase [RETURN_TYPE] void   Node switchNode Node caseExpression Node statements int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  caseExpression  caseNode  statements  switchNode  
[BugLab_Wrong_Operator]^if  ( switchNode.getType (  )  < Token.SWITCH )  throw Kit.codeBug (  ) ;^104^^^^^101^115^if  ( switchNode.getType (  )  != Token.SWITCH )  throw Kit.codeBug (  ) ;^[CLASS] IRFactory  [METHOD] addSwitchCase [RETURN_TYPE] void   Node switchNode Node caseExpression Node statements int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  caseExpression  caseNode  statements  switchNode  
[BugLab_Variable_Misuse]^if  ( switchNode != null )  {^107^^^^^101^115^if  ( caseExpression != null )  {^[CLASS] IRFactory  [METHOD] addSwitchCase [RETURN_TYPE] void   Node switchNode Node caseExpression Node statements int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  caseExpression  caseNode  statements  switchNode  
[BugLab_Wrong_Operator]^if  ( caseExpression == null )  {^107^^^^^101^115^if  ( caseExpression != null )  {^[CLASS] IRFactory  [METHOD] addSwitchCase [RETURN_TYPE] void   Node switchNode Node caseExpression Node statements int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  caseExpression  caseNode  statements  switchNode  
[BugLab_Variable_Misuse]^caseNode = new Node ( Token.DEFAULT, charno, charno ) ;^111^^^^^101^115^caseNode = new Node ( Token.DEFAULT, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] addSwitchCase [RETURN_TYPE] void   Node switchNode Node caseExpression Node statements int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  caseExpression  caseNode  statements  switchNode  
[BugLab_Argument_Swapping]^caseNode = new Node ( Token.DEFAULT, charno, lineno ) ;^111^^^^^101^115^caseNode = new Node ( Token.DEFAULT, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] addSwitchCase [RETURN_TYPE] void   Node switchNode Node caseExpression Node statements int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  caseExpression  caseNode  statements  switchNode  
[BugLab_Argument_Swapping]^caseNode = new Node ( lineno, Token.DEFAULT, charno ) ;^111^^^^^101^115^caseNode = new Node ( Token.DEFAULT, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] addSwitchCase [RETURN_TYPE] void   Node switchNode Node caseExpression Node statements int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  caseExpression  caseNode  statements  switchNode  
[BugLab_Argument_Swapping]^caseNode = new Node ( charno, lineno, Token.DEFAULT ) ;^111^^^^^101^115^caseNode = new Node ( Token.DEFAULT, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] addSwitchCase [RETURN_TYPE] void   Node switchNode Node caseExpression Node statements int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  caseExpression  caseNode  statements  switchNode  
[BugLab_Variable_Misuse]^caseNode = new Node ( Token.CASE, switchNode, lineno, charno ) ;^108^109^^^^101^115^caseNode = new Node ( Token.CASE, caseExpression, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] addSwitchCase [RETURN_TYPE] void   Node switchNode Node caseExpression Node statements int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  caseExpression  caseNode  statements  switchNode  
[BugLab_Variable_Misuse]^caseNode = new Node ( this, caseExpression, lineno, charno ) ;^108^109^^^^101^115^caseNode = new Node ( Token.CASE, caseExpression, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] addSwitchCase [RETURN_TYPE] void   Node switchNode Node caseExpression Node statements int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  caseExpression  caseNode  statements  switchNode  
[BugLab_Argument_Swapping]^caseNode = new Node ( caseExpression, Token.CASE, lineno, charno ) ;^108^109^^^^101^115^caseNode = new Node ( Token.CASE, caseExpression, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] addSwitchCase [RETURN_TYPE] void   Node switchNode Node caseExpression Node statements int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  caseExpression  caseNode  statements  switchNode  
[BugLab_Argument_Swapping]^caseNode = new Node ( Token.CASE, caseExpression, charno, lineno ) ;^108^109^^^^101^115^caseNode = new Node ( Token.CASE, caseExpression, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] addSwitchCase [RETURN_TYPE] void   Node switchNode Node caseExpression Node statements int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  caseExpression  caseNode  statements  switchNode  
[BugLab_Argument_Swapping]^caseNode = new Node ( Token.CASE, charno, lineno, caseExpression ) ;^108^109^^^^101^115^caseNode = new Node ( Token.CASE, caseExpression, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] addSwitchCase [RETURN_TYPE] void   Node switchNode Node caseExpression Node statements int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  caseExpression  caseNode  statements  switchNode  
[BugLab_Argument_Swapping]^caseNode = new Node ( charno, caseExpression, lineno, Token.CASE ) ;^108^109^^^^101^115^caseNode = new Node ( Token.CASE, caseExpression, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] addSwitchCase [RETURN_TYPE] void   Node switchNode Node caseExpression Node statements int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  caseExpression  caseNode  statements  switchNode  
[BugLab_Argument_Swapping]^caseNode = new Node ( Token.CASE, lineno, caseExpression, charno ) ;^108^109^^^^101^115^caseNode = new Node ( Token.CASE, caseExpression, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] addSwitchCase [RETURN_TYPE] void   Node switchNode Node caseExpression Node statements int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  caseExpression  caseNode  statements  switchNode  
[BugLab_Argument_Swapping]^caseNode = new Node ( lineno, caseExpression, Token.CASE, charno ) ;^108^109^^^^101^115^caseNode = new Node ( Token.CASE, caseExpression, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] addSwitchCase [RETURN_TYPE] void   Node switchNode Node caseExpression Node statements int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  caseExpression  caseNode  statements  switchNode  
[BugLab_Variable_Misuse]^caseNode = new Node ( Token.CASE, caseExpression, lineno, lineno ) ;^108^109^^^^101^115^caseNode = new Node ( Token.CASE, caseExpression, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] addSwitchCase [RETURN_TYPE] void   Node switchNode Node caseExpression Node statements int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  caseExpression  caseNode  statements  switchNode  
[BugLab_Variable_Misuse]^caseNode.addChildToBack ( switchNode ) ;^113^^^^^101^115^caseNode.addChildToBack ( statements ) ;^[CLASS] IRFactory  [METHOD] addSwitchCase [RETURN_TYPE] void   Node switchNode Node caseExpression Node statements int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  caseExpression  caseNode  statements  switchNode  
[BugLab_Variable_Misuse]^switchNode.addChildToBack ( statements ) ;^114^^^^^101^115^switchNode.addChildToBack ( caseNode ) ;^[CLASS] IRFactory  [METHOD] addSwitchCase [RETURN_TYPE] void   Node switchNode Node caseExpression Node statements int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  caseExpression  caseNode  statements  switchNode  
[BugLab_Variable_Misuse]^return new Node ( charno, lineno, charno ) ;^123^^^^^121^124^return new Node ( token, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createVariables [RETURN_TYPE] Node   int token int lineno int charno [VARIABLES] int  charno  lineno  token  Parser  parser  boolean  
[BugLab_Variable_Misuse]^return new Node ( token, token, charno ) ;^123^^^^^121^124^return new Node ( token, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createVariables [RETURN_TYPE] Node   int token int lineno int charno [VARIABLES] int  charno  lineno  token  Parser  parser  boolean  
[BugLab_Argument_Swapping]^return new Node ( charno, lineno, token ) ;^123^^^^^121^124^return new Node ( token, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createVariables [RETURN_TYPE] Node   int token int lineno int charno [VARIABLES] int  charno  lineno  token  Parser  parser  boolean  
[BugLab_Argument_Swapping]^return new Node ( lineno, token, charno ) ;^123^^^^^121^124^return new Node ( token, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createVariables [RETURN_TYPE] Node   int token int lineno int charno [VARIABLES] int  charno  lineno  token  Parser  parser  boolean  
[BugLab_Argument_Swapping]^return new Node ( token, charno, lineno ) ;^123^^^^^121^124^return new Node ( token, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createVariables [RETURN_TYPE] Node   int token int lineno int charno [VARIABLES] int  charno  lineno  token  Parser  parser  boolean  
[BugLab_Variable_Misuse]^return new Node ( token, charno, charno ) ;^123^^^^^121^124^return new Node ( token, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createVariables [RETURN_TYPE] Node   int token int lineno int charno [VARIABLES] int  charno  lineno  token  Parser  parser  boolean  
[BugLab_Variable_Misuse]^return new Node ( token, lineno, token ) ;^123^^^^^121^124^return new Node ( token, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createVariables [RETURN_TYPE] Node   int token int lineno int charno [VARIABLES] int  charno  lineno  token  Parser  parser  boolean  
[BugLab_Variable_Misuse]^return new Node ( charno, expr, lineno, charno ) ;^134^^^^^126^135^return new Node ( type, expr, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createExprStatement [RETURN_TYPE] Node   Node expr int lineno int charno [VARIABLES] boolean  int  charno  lineno  type  Parser  parser  Node  expr  
[BugLab_Variable_Misuse]^return new Node ( type, expr, type, charno ) ;^134^^^^^126^135^return new Node ( type, expr, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createExprStatement [RETURN_TYPE] Node   Node expr int lineno int charno [VARIABLES] boolean  int  charno  lineno  type  Parser  parser  Node  expr  
[BugLab_Variable_Misuse]^return new Node ( type, expr, lineno, lineno ) ;^134^^^^^126^135^return new Node ( type, expr, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createExprStatement [RETURN_TYPE] Node   Node expr int lineno int charno [VARIABLES] boolean  int  charno  lineno  type  Parser  parser  Node  expr  
[BugLab_Argument_Swapping]^return new Node ( expr, type, lineno, charno ) ;^134^^^^^126^135^return new Node ( type, expr, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createExprStatement [RETURN_TYPE] Node   Node expr int lineno int charno [VARIABLES] boolean  int  charno  lineno  type  Parser  parser  Node  expr  
[BugLab_Argument_Swapping]^return new Node ( type, expr, charno, lineno ) ;^134^^^^^126^135^return new Node ( type, expr, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createExprStatement [RETURN_TYPE] Node   Node expr int lineno int charno [VARIABLES] boolean  int  charno  lineno  type  Parser  parser  Node  expr  
[BugLab_Variable_Misuse]^return new Node ( lineno, expr, lineno, charno ) ;^134^^^^^126^135^return new Node ( type, expr, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createExprStatement [RETURN_TYPE] Node   Node expr int lineno int charno [VARIABLES] boolean  int  charno  lineno  type  Parser  parser  Node  expr  
[BugLab_Argument_Swapping]^return new Node ( charno, expr, lineno, type ) ;^134^^^^^126^135^return new Node ( type, expr, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createExprStatement [RETURN_TYPE] Node   Node expr int lineno int charno [VARIABLES] boolean  int  charno  lineno  type  Parser  parser  Node  expr  
[BugLab_Argument_Swapping]^return new Node ( lineno, expr, type, charno ) ;^134^^^^^126^135^return new Node ( type, expr, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createExprStatement [RETURN_TYPE] Node   Node expr int lineno int charno [VARIABLES] boolean  int  charno  lineno  type  Parser  parser  Node  expr  
[BugLab_Argument_Swapping]^return new Node ( expr, Token.EXPR_VOID, lineno, charno ) ;^139^^^^^137^140^return new Node ( Token.EXPR_VOID, expr, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createExprStatementNoReturn [RETURN_TYPE] Node   Node expr int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  expr  
[BugLab_Argument_Swapping]^return new Node ( Token.EXPR_VOID, lineno, expr, charno ) ;^139^^^^^137^140^return new Node ( Token.EXPR_VOID, expr, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createExprStatementNoReturn [RETURN_TYPE] Node   Node expr int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  expr  
[BugLab_Argument_Swapping]^return new Node ( Token.EXPR_VOID, expr, charno, lineno ) ;^139^^^^^137^140^return new Node ( Token.EXPR_VOID, expr, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createExprStatementNoReturn [RETURN_TYPE] Node   Node expr int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  expr  
[BugLab_Argument_Swapping]^return new Node ( lineno, expr, Token.EXPR_VOID, charno ) ;^139^^^^^137^140^return new Node ( Token.EXPR_VOID, expr, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createExprStatementNoReturn [RETURN_TYPE] Node   Node expr int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  expr  
[BugLab_Variable_Misuse]^return new Node ( Token.EXPR_VOID, expr, charno, charno ) ;^139^^^^^137^140^return new Node ( Token.EXPR_VOID, expr, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createExprStatementNoReturn [RETURN_TYPE] Node   Node expr int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  expr  
[BugLab_Argument_Swapping]^return new Node ( Token.EXPR_VOID, charno, lineno, expr ) ;^139^^^^^137^140^return new Node ( Token.EXPR_VOID, expr, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createExprStatementNoReturn [RETURN_TYPE] Node   Node expr int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  expr  
[BugLab_Variable_Misuse]^Node n = createUnary ( Token.DEFAULTNAMESPACE, result, lineno, charno ) ;^146^^^^^142^149^Node n = createUnary ( Token.DEFAULTNAMESPACE, expr, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createDefaultNamespace [RETURN_TYPE] Node   Node expr int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  expr  n  result  
[BugLab_Variable_Misuse]^Node n = createUnary ( Token.DEFAULTNAMESPACE, expr, charno, charno ) ;^146^^^^^142^149^Node n = createUnary ( Token.DEFAULTNAMESPACE, expr, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createDefaultNamespace [RETURN_TYPE] Node   Node expr int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  expr  n  result  
[BugLab_Variable_Misuse]^Node n = createUnary ( Token.DEFAULTNAMESPACE, expr, lineno, lineno ) ;^146^^^^^142^149^Node n = createUnary ( Token.DEFAULTNAMESPACE, expr, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createDefaultNamespace [RETURN_TYPE] Node   Node expr int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  expr  n  result  
[BugLab_Argument_Swapping]^Node n = createUnary ( Token.DEFAULTNAMESPACE, charno, lineno, expr ) ;^146^^^^^142^149^Node n = createUnary ( Token.DEFAULTNAMESPACE, expr, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createDefaultNamespace [RETURN_TYPE] Node   Node expr int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  expr  n  result  
[BugLab_Argument_Swapping]^Node n = createUnary ( Token.DEFAULTNAMESPACE, lineno, expr, charno ) ;^146^^^^^142^149^Node n = createUnary ( Token.DEFAULTNAMESPACE, expr, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createDefaultNamespace [RETURN_TYPE] Node   Node expr int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  expr  n  result  
[BugLab_Argument_Swapping]^Node n = createUnary ( Token.DEFAULTNAMESPACE, expr, charno, lineno ) ;^146^^^^^142^149^Node n = createUnary ( Token.DEFAULTNAMESPACE, expr, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createDefaultNamespace [RETURN_TYPE] Node   Node expr int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  expr  n  result  
[BugLab_Variable_Misuse]^Node result = createExprStatement ( expr, lineno, charno ) ;^147^^^^^142^149^Node result = createExprStatement ( n, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createDefaultNamespace [RETURN_TYPE] Node   Node expr int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  expr  n  result  
[BugLab_Variable_Misuse]^Node result = createExprStatement ( n, charno, charno ) ;^147^^^^^142^149^Node result = createExprStatement ( n, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createDefaultNamespace [RETURN_TYPE] Node   Node expr int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  expr  n  result  
[BugLab_Variable_Misuse]^Node result = createExprStatement ( n, lineno, lineno ) ;^147^^^^^142^149^Node result = createExprStatement ( n, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createDefaultNamespace [RETURN_TYPE] Node   Node expr int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  expr  n  result  
[BugLab_Argument_Swapping]^Node result = createExprStatement ( charno, lineno, n ) ;^147^^^^^142^149^Node result = createExprStatement ( n, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createDefaultNamespace [RETURN_TYPE] Node   Node expr int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  expr  n  result  
[BugLab_Argument_Swapping]^Node result = createExprStatement ( n, charno, lineno ) ;^147^^^^^142^149^Node result = createExprStatement ( n, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createDefaultNamespace [RETURN_TYPE] Node   Node expr int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  expr  n  result  
[BugLab_Variable_Misuse]^Node result = createExprStatement ( result, lineno, charno ) ;^147^^^^^142^149^Node result = createExprStatement ( n, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createDefaultNamespace [RETURN_TYPE] Node   Node expr int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  expr  n  result  
[BugLab_Variable_Misuse]^return n;^148^^^^^142^149^return result;^[CLASS] IRFactory  [METHOD] createDefaultNamespace [RETURN_TYPE] Node   Node expr int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  expr  n  result  
[BugLab_Argument_Swapping]^return Node.newString ( Token.NAME, charno, lineno, name ) ;^161^^^^^158^162^return Node.newString ( Token.NAME, name, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createName [RETURN_TYPE] Node   String name int lineno int charno [VARIABLES] String  name  boolean  int  charno  lineno  Parser  parser  
[BugLab_Argument_Swapping]^return Node.newString ( Token.NAME, lineno, name, charno ) ;^161^^^^^158^162^return Node.newString ( Token.NAME, name, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createName [RETURN_TYPE] Node   String name int lineno int charno [VARIABLES] String  name  boolean  int  charno  lineno  Parser  parser  
[BugLab_Argument_Swapping]^return Node.newString ( Token.NAME, name, charno, lineno ) ;^161^^^^^158^162^return Node.newString ( Token.NAME, name, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createName [RETURN_TYPE] Node   String name int lineno int charno [VARIABLES] String  name  boolean  int  charno  lineno  Parser  parser  
[BugLab_Variable_Misuse]^Node n = createName ( name, charno, charno ) ;^166^^^^^164^171^Node n = createName ( name, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createTaggedName [RETURN_TYPE] Node   String name JSDocInfo info int lineno int charno [VARIABLES] String  name  boolean  JSDocInfo  info  int  charno  lineno  Parser  parser  Node  n  
[BugLab_Variable_Misuse]^Node n = createName ( name, lineno, lineno ) ;^166^^^^^164^171^Node n = createName ( name, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createTaggedName [RETURN_TYPE] Node   String name JSDocInfo info int lineno int charno [VARIABLES] String  name  boolean  JSDocInfo  info  int  charno  lineno  Parser  parser  Node  n  
[BugLab_Argument_Swapping]^Node n = createName ( lineno, name, charno ) ;^166^^^^^164^171^Node n = createName ( name, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createTaggedName [RETURN_TYPE] Node   String name JSDocInfo info int lineno int charno [VARIABLES] String  name  boolean  JSDocInfo  info  int  charno  lineno  Parser  parser  Node  n  
[BugLab_Argument_Swapping]^Node n = createName ( name, charno, lineno ) ;^166^^^^^164^171^Node n = createName ( name, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createTaggedName [RETURN_TYPE] Node   String name JSDocInfo info int lineno int charno [VARIABLES] String  name  boolean  JSDocInfo  info  int  charno  lineno  Parser  parser  Node  n  
[BugLab_Argument_Swapping]^Node n = createName ( charno, lineno, name ) ;^166^^^^^164^171^Node n = createName ( name, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createTaggedName [RETURN_TYPE] Node   String name JSDocInfo info int lineno int charno [VARIABLES] String  name  boolean  JSDocInfo  info  int  charno  lineno  Parser  parser  Node  n  
[BugLab_Argument_Swapping]^if  ( n != infoull )  {^167^^^^^164^171^if  ( info != null )  {^[CLASS] IRFactory  [METHOD] createTaggedName [RETURN_TYPE] Node   String name JSDocInfo info int lineno int charno [VARIABLES] String  name  boolean  JSDocInfo  info  int  charno  lineno  Parser  parser  Node  n  
[BugLab_Wrong_Operator]^if  ( info == null )  {^167^^^^^164^171^if  ( info != null )  {^[CLASS] IRFactory  [METHOD] createTaggedName [RETURN_TYPE] Node   String name JSDocInfo info int lineno int charno [VARIABLES] String  name  boolean  JSDocInfo  info  int  charno  lineno  Parser  parser  Node  n  
[BugLab_Variable_Misuse]^return Node.newString ( string, lineno, lineno ) ;^183^^^^^181^184^return Node.newString ( string, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createString [RETURN_TYPE] Node   String string int lineno int charno [VARIABLES] String  string  boolean  int  charno  lineno  Parser  parser  
[BugLab_Argument_Swapping]^return Node.newString ( lineno, string, charno ) ;^183^^^^^181^184^return Node.newString ( string, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createString [RETURN_TYPE] Node   String string int lineno int charno [VARIABLES] String  string  boolean  int  charno  lineno  Parser  parser  
[BugLab_Argument_Swapping]^return Node.newString ( string, charno, lineno ) ;^183^^^^^181^184^return Node.newString ( string, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createString [RETURN_TYPE] Node   String string int lineno int charno [VARIABLES] String  string  boolean  int  charno  lineno  Parser  parser  
[BugLab_Argument_Swapping]^return Node.newString ( charno, lineno, string ) ;^183^^^^^181^184^return Node.newString ( string, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createString [RETURN_TYPE] Node   String string int lineno int charno [VARIABLES] String  string  boolean  int  charno  lineno  Parser  parser  
[BugLab_Argument_Swapping]^return Node.newNumber ( lineno, number, charno ) ;^196^^^^^194^197^return Node.newNumber ( number, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createNumber [RETURN_TYPE] Node   double number int lineno int charno [VARIABLES] boolean  double  number  int  charno  lineno  Parser  parser  
[BugLab_Argument_Swapping]^return Node.newNumber ( number, charno, lineno ) ;^196^^^^^194^197^return Node.newNumber ( number, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createNumber [RETURN_TYPE] Node   double number int lineno int charno [VARIABLES] boolean  double  number  int  charno  lineno  Parser  parser  
[BugLab_Argument_Swapping]^return Node.newNumber ( charno, lineno, number ) ;^196^^^^^194^197^return Node.newNumber ( number, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createNumber [RETURN_TYPE] Node   double number int lineno int charno [VARIABLES] boolean  double  number  int  charno  lineno  Parser  parser  
[BugLab_Variable_Misuse]^if  ( stmts == null )  {^213^^^^^210^219^if  ( catchCond == null )  {^[CLASS] IRFactory  [METHOD] createCatch [RETURN_TYPE] Node   String varName int nameLineno int nameCharno Node catchCond Node stmts int catchLineno int catchCharno [VARIABLES] String  varName  boolean  int  catchCharno  catchLineno  nameCharno  nameLineno  Parser  parser  Node  catchCond  stmts  
[BugLab_Wrong_Operator]^if  ( catchCond != null )  {^213^^^^^210^219^if  ( catchCond == null )  {^[CLASS] IRFactory  [METHOD] createCatch [RETURN_TYPE] Node   String varName int nameLineno int nameCharno Node catchCond Node stmts int catchLineno int catchCharno [VARIABLES] String  varName  boolean  int  catchCharno  catchLineno  nameCharno  nameLineno  Parser  parser  Node  catchCond  stmts  
[BugLab_Variable_Misuse]^catchCond = new Node ( Token.EMPTY, catchLineno, nameCharno ) ;^214^^^^^210^219^catchCond = new Node ( Token.EMPTY, nameLineno, nameCharno ) ;^[CLASS] IRFactory  [METHOD] createCatch [RETURN_TYPE] Node   String varName int nameLineno int nameCharno Node catchCond Node stmts int catchLineno int catchCharno [VARIABLES] String  varName  boolean  int  catchCharno  catchLineno  nameCharno  nameLineno  Parser  parser  Node  catchCond  stmts  
[BugLab_Argument_Swapping]^catchCond = new Node ( Token.EMPTY, nameCharno, nameLineno ) ;^214^^^^^210^219^catchCond = new Node ( Token.EMPTY, nameLineno, nameCharno ) ;^[CLASS] IRFactory  [METHOD] createCatch [RETURN_TYPE] Node   String varName int nameLineno int nameCharno Node catchCond Node stmts int catchLineno int catchCharno [VARIABLES] String  varName  boolean  int  catchCharno  catchLineno  nameCharno  nameLineno  Parser  parser  Node  catchCond  stmts  
[BugLab_Argument_Swapping]^catchCond = new Node ( nameCharno, nameLineno, Token.EMPTY ) ;^214^^^^^210^219^catchCond = new Node ( Token.EMPTY, nameLineno, nameCharno ) ;^[CLASS] IRFactory  [METHOD] createCatch [RETURN_TYPE] Node   String varName int nameLineno int nameCharno Node catchCond Node stmts int catchLineno int catchCharno [VARIABLES] String  varName  boolean  int  catchCharno  catchLineno  nameCharno  nameLineno  Parser  parser  Node  catchCond  stmts  
[BugLab_Variable_Misuse]^catchCond = new Node ( Token.EMPTY, nameCharno, nameCharno ) ;^214^^^^^210^219^catchCond = new Node ( Token.EMPTY, nameLineno, nameCharno ) ;^[CLASS] IRFactory  [METHOD] createCatch [RETURN_TYPE] Node   String varName int nameLineno int nameCharno Node catchCond Node stmts int catchLineno int catchCharno [VARIABLES] String  varName  boolean  int  catchCharno  catchLineno  nameCharno  nameLineno  Parser  parser  Node  catchCond  stmts  
[BugLab_Variable_Misuse]^catchCond = new Node ( Token.EMPTY, nameLineno, catchLineno ) ;^214^^^^^210^219^catchCond = new Node ( Token.EMPTY, nameLineno, nameCharno ) ;^[CLASS] IRFactory  [METHOD] createCatch [RETURN_TYPE] Node   String varName int nameLineno int nameCharno Node catchCond Node stmts int catchLineno int catchCharno [VARIABLES] String  varName  boolean  int  catchCharno  catchLineno  nameCharno  nameLineno  Parser  parser  Node  catchCond  stmts  
[BugLab_Argument_Swapping]^catchCond = new Node ( nameLineno, Token.EMPTY, nameCharno ) ;^214^^^^^210^219^catchCond = new Node ( Token.EMPTY, nameLineno, nameCharno ) ;^[CLASS] IRFactory  [METHOD] createCatch [RETURN_TYPE] Node   String varName int nameLineno int nameCharno Node catchCond Node stmts int catchLineno int catchCharno [VARIABLES] String  varName  boolean  int  catchCharno  catchLineno  nameCharno  nameLineno  Parser  parser  Node  catchCond  stmts  
[BugLab_Variable_Misuse]^catchCond = new Node ( Token.EMPTY, nameLineno, nameLineno ) ;^214^^^^^210^219^catchCond = new Node ( Token.EMPTY, nameLineno, nameCharno ) ;^[CLASS] IRFactory  [METHOD] createCatch [RETURN_TYPE] Node   String varName int nameLineno int nameCharno Node catchCond Node stmts int catchLineno int catchCharno [VARIABLES] String  varName  boolean  int  catchCharno  catchLineno  nameCharno  nameLineno  Parser  parser  Node  catchCond  stmts  
[BugLab_Variable_Misuse]^return new Node ( Token.CATCH, createName ( varName, nameLineno, nameLineno ) , catchCond, stmts, catchLineno, catchCharno ) ;^216^217^218^^^210^219^return new Node ( Token.CATCH, createName ( varName, nameLineno, nameCharno ) , catchCond, stmts, catchLineno, catchCharno ) ;^[CLASS] IRFactory  [METHOD] createCatch [RETURN_TYPE] Node   String varName int nameLineno int nameCharno Node catchCond Node stmts int catchLineno int catchCharno [VARIABLES] String  varName  boolean  int  catchCharno  catchLineno  nameCharno  nameLineno  Parser  parser  Node  catchCond  stmts  
[BugLab_Variable_Misuse]^return new Node ( Token.CATCH, createName ( varName, nameLineno, nameCharno ) , catchCond, catchCond, catchLineno, catchCharno ) ;^216^217^218^^^210^219^return new Node ( Token.CATCH, createName ( varName, nameLineno, nameCharno ) , catchCond, stmts, catchLineno, catchCharno ) ;^[CLASS] IRFactory  [METHOD] createCatch [RETURN_TYPE] Node   String varName int nameLineno int nameCharno Node catchCond Node stmts int catchLineno int catchCharno [VARIABLES] String  varName  boolean  int  catchCharno  catchLineno  nameCharno  nameLineno  Parser  parser  Node  catchCond  stmts  
[BugLab_Variable_Misuse]^return new Node ( Token.CATCH, createName ( varName, nameLineno, nameCharno ) , catchCond, stmts, nameCharno, catchCharno ) ;^216^217^218^^^210^219^return new Node ( Token.CATCH, createName ( varName, nameLineno, nameCharno ) , catchCond, stmts, catchLineno, catchCharno ) ;^[CLASS] IRFactory  [METHOD] createCatch [RETURN_TYPE] Node   String varName int nameLineno int nameCharno Node catchCond Node stmts int catchLineno int catchCharno [VARIABLES] String  varName  boolean  int  catchCharno  catchLineno  nameCharno  nameLineno  Parser  parser  Node  catchCond  stmts  
[BugLab_Variable_Misuse]^return new Node ( Token.CATCH, createName ( varName, nameLineno, nameCharno ) , catchCond, stmts, catchLineno, nameLineno ) ;^216^217^218^^^210^219^return new Node ( Token.CATCH, createName ( varName, nameLineno, nameCharno ) , catchCond, stmts, catchLineno, catchCharno ) ;^[CLASS] IRFactory  [METHOD] createCatch [RETURN_TYPE] Node   String varName int nameLineno int nameCharno Node catchCond Node stmts int catchLineno int catchCharno [VARIABLES] String  varName  boolean  int  catchCharno  catchLineno  nameCharno  nameLineno  Parser  parser  Node  catchCond  stmts  
[BugLab_Argument_Swapping]^return new Node ( Token.CATCH, createName ( nameLineno, varName, nameCharno ) , catchCond, stmts, catchLineno, catchCharno ) ;^216^217^218^^^210^219^return new Node ( Token.CATCH, createName ( varName, nameLineno, nameCharno ) , catchCond, stmts, catchLineno, catchCharno ) ;^[CLASS] IRFactory  [METHOD] createCatch [RETURN_TYPE] Node   String varName int nameLineno int nameCharno Node catchCond Node stmts int catchLineno int catchCharno [VARIABLES] String  varName  boolean  int  catchCharno  catchLineno  nameCharno  nameLineno  Parser  parser  Node  catchCond  stmts  
[BugLab_Argument_Swapping]^return new Node ( Token.CATCH, createName ( varName, catchLineno, nameCharno ) , catchCond, stmts, nameLineno, catchCharno ) ;^216^217^218^^^210^219^return new Node ( Token.CATCH, createName ( varName, nameLineno, nameCharno ) , catchCond, stmts, catchLineno, catchCharno ) ;^[CLASS] IRFactory  [METHOD] createCatch [RETURN_TYPE] Node   String varName int nameLineno int nameCharno Node catchCond Node stmts int catchLineno int catchCharno [VARIABLES] String  varName  boolean  int  catchCharno  catchLineno  nameCharno  nameLineno  Parser  parser  Node  catchCond  stmts  
[BugLab_Argument_Swapping]^return new Node ( Token.CATCH, createName ( varName, nameCharno, nameLineno ) , catchCond, stmts, catchLineno, catchCharno ) ;^216^217^218^^^210^219^return new Node ( Token.CATCH, createName ( varName, nameLineno, nameCharno ) , catchCond, stmts, catchLineno, catchCharno ) ;^[CLASS] IRFactory  [METHOD] createCatch [RETURN_TYPE] Node   String varName int nameLineno int nameCharno Node catchCond Node stmts int catchLineno int catchCharno [VARIABLES] String  varName  boolean  int  catchCharno  catchLineno  nameCharno  nameLineno  Parser  parser  Node  catchCond  stmts  
[BugLab_Argument_Swapping]^return new Node ( Token.CATCH, createName ( varName, nameLineno, nameCharno ) , stmts, catchCond, catchLineno, catchCharno ) ;^216^217^218^^^210^219^return new Node ( Token.CATCH, createName ( varName, nameLineno, nameCharno ) , catchCond, stmts, catchLineno, catchCharno ) ;^[CLASS] IRFactory  [METHOD] createCatch [RETURN_TYPE] Node   String varName int nameLineno int nameCharno Node catchCond Node stmts int catchLineno int catchCharno [VARIABLES] String  varName  boolean  int  catchCharno  catchLineno  nameCharno  nameLineno  Parser  parser  Node  catchCond  stmts  
[BugLab_Argument_Swapping]^return new Node ( Token.CATCH, createName ( varName, stmts, nameCharno ) , catchCond, nameLineno, catchLineno, catchCharno ) ;^216^217^218^^^210^219^return new Node ( Token.CATCH, createName ( varName, nameLineno, nameCharno ) , catchCond, stmts, catchLineno, catchCharno ) ;^[CLASS] IRFactory  [METHOD] createCatch [RETURN_TYPE] Node   String varName int nameLineno int nameCharno Node catchCond Node stmts int catchLineno int catchCharno [VARIABLES] String  varName  boolean  int  catchCharno  catchLineno  nameCharno  nameLineno  Parser  parser  Node  catchCond  stmts  
[BugLab_Argument_Swapping]^return new Node ( Token.CATCH, createName ( varName, nameLineno, catchLineno ) , catchCond, stmts, nameCharno, catchCharno ) ;^216^217^218^^^210^219^return new Node ( Token.CATCH, createName ( varName, nameLineno, nameCharno ) , catchCond, stmts, catchLineno, catchCharno ) ;^[CLASS] IRFactory  [METHOD] createCatch [RETURN_TYPE] Node   String varName int nameLineno int nameCharno Node catchCond Node stmts int catchLineno int catchCharno [VARIABLES] String  varName  boolean  int  catchCharno  catchLineno  nameCharno  nameLineno  Parser  parser  Node  catchCond  stmts  
[BugLab_Argument_Swapping]^return new Node ( Token.CATCH, createName ( varName, nameLineno, catchCharno ) , catchCond, stmts, catchLineno, nameCharno ) ;^216^217^218^^^210^219^return new Node ( Token.CATCH, createName ( varName, nameLineno, nameCharno ) , catchCond, stmts, catchLineno, catchCharno ) ;^[CLASS] IRFactory  [METHOD] createCatch [RETURN_TYPE] Node   String varName int nameLineno int nameCharno Node catchCond Node stmts int catchLineno int catchCharno [VARIABLES] String  varName  boolean  int  catchCharno  catchLineno  nameCharno  nameLineno  Parser  parser  Node  catchCond  stmts  
[BugLab_Argument_Swapping]^return new Node ( stmts, createName ( varName, nameLineno, nameCharno ) , catchCond, Token.CATCH, catchLineno, catchCharno ) ;^216^217^218^^^210^219^return new Node ( Token.CATCH, createName ( varName, nameLineno, nameCharno ) , catchCond, stmts, catchLineno, catchCharno ) ;^[CLASS] IRFactory  [METHOD] createCatch [RETURN_TYPE] Node   String varName int nameLineno int nameCharno Node catchCond Node stmts int catchLineno int catchCharno [VARIABLES] String  varName  boolean  int  catchCharno  catchLineno  nameCharno  nameLineno  Parser  parser  Node  catchCond  stmts  
[BugLab_Variable_Misuse]^return new Node ( Token.CATCH, createName ( varName, nameCharno, nameCharno ) , catchCond, stmts, catchLineno, catchCharno ) ;^216^217^218^^^210^219^return new Node ( Token.CATCH, createName ( varName, nameLineno, nameCharno ) , catchCond, stmts, catchLineno, catchCharno ) ;^[CLASS] IRFactory  [METHOD] createCatch [RETURN_TYPE] Node   String varName int nameLineno int nameCharno Node catchCond Node stmts int catchLineno int catchCharno [VARIABLES] String  varName  boolean  int  catchCharno  catchLineno  nameCharno  nameLineno  Parser  parser  Node  catchCond  stmts  
[BugLab_Variable_Misuse]^return new Node ( Token.CATCH, createName ( varName, nameLineno, nameCharno ) , catchCond, stmts, nameLineno, catchCharno ) ;^216^217^218^^^210^219^return new Node ( Token.CATCH, createName ( varName, nameLineno, nameCharno ) , catchCond, stmts, catchLineno, catchCharno ) ;^[CLASS] IRFactory  [METHOD] createCatch [RETURN_TYPE] Node   String varName int nameLineno int nameCharno Node catchCond Node stmts int catchLineno int catchCharno [VARIABLES] String  varName  boolean  int  catchCharno  catchLineno  nameCharno  nameLineno  Parser  parser  Node  catchCond  stmts  
[BugLab_Variable_Misuse]^return new Node ( Token.CATCH, createName ( varName, nameLineno, nameCharno ) , catchCond, stmts, catchLineno, nameCharno ) ;^216^217^218^^^210^219^return new Node ( Token.CATCH, createName ( varName, nameLineno, nameCharno ) , catchCond, stmts, catchLineno, catchCharno ) ;^[CLASS] IRFactory  [METHOD] createCatch [RETURN_TYPE] Node   String varName int nameLineno int nameCharno Node catchCond Node stmts int catchLineno int catchCharno [VARIABLES] String  varName  boolean  int  catchCharno  catchLineno  nameCharno  nameLineno  Parser  parser  Node  catchCond  stmts  
[BugLab_Argument_Swapping]^return new Node ( Token.CATCH, createName ( stmts, nameLineno, nameCharno ) , catchCond, varName, catchLineno, catchCharno ) ;^216^217^218^^^210^219^return new Node ( Token.CATCH, createName ( varName, nameLineno, nameCharno ) , catchCond, stmts, catchLineno, catchCharno ) ;^[CLASS] IRFactory  [METHOD] createCatch [RETURN_TYPE] Node   String varName int nameLineno int nameCharno Node catchCond Node stmts int catchLineno int catchCharno [VARIABLES] String  varName  boolean  int  catchCharno  catchLineno  nameCharno  nameLineno  Parser  parser  Node  catchCond  stmts  
[BugLab_Argument_Swapping]^return new Node ( Token.CATCH, createName ( nameCharno, nameLineno, varName ) , catchCond, stmts, catchLineno, catchCharno ) ;^216^217^218^^^210^219^return new Node ( Token.CATCH, createName ( varName, nameLineno, nameCharno ) , catchCond, stmts, catchLineno, catchCharno ) ;^[CLASS] IRFactory  [METHOD] createCatch [RETURN_TYPE] Node   String varName int nameLineno int nameCharno Node catchCond Node stmts int catchLineno int catchCharno [VARIABLES] String  varName  boolean  int  catchCharno  catchLineno  nameCharno  nameLineno  Parser  parser  Node  catchCond  stmts  
[BugLab_Argument_Swapping]^return new Node ( catchLineno, createName ( varName, nameLineno, nameCharno ) , catchCond, stmts, Token.CATCH, catchCharno ) ;^216^217^218^^^210^219^return new Node ( Token.CATCH, createName ( varName, nameLineno, nameCharno ) , catchCond, stmts, catchLineno, catchCharno ) ;^[CLASS] IRFactory  [METHOD] createCatch [RETURN_TYPE] Node   String varName int nameLineno int nameCharno Node catchCond Node stmts int catchLineno int catchCharno [VARIABLES] String  varName  boolean  int  catchCharno  catchLineno  nameCharno  nameLineno  Parser  parser  Node  catchCond  stmts  
[BugLab_Variable_Misuse]^createName ( varName, nameLineno, catchLineno ) , catchCond, stmts, catchLineno, catchCharno ) ;^217^218^^^^210^219^createName ( varName, nameLineno, nameCharno ) , catchCond, stmts, catchLineno, catchCharno ) ;^[CLASS] IRFactory  [METHOD] createCatch [RETURN_TYPE] Node   String varName int nameLineno int nameCharno Node catchCond Node stmts int catchLineno int catchCharno [VARIABLES] String  varName  boolean  int  catchCharno  catchLineno  nameCharno  nameLineno  Parser  parser  Node  catchCond  stmts  
[BugLab_Argument_Swapping]^createName ( nameCharno, nameLineno, varName ) , catchCond, stmts, catchLineno, catchCharno ) ;^217^218^^^^210^219^createName ( varName, nameLineno, nameCharno ) , catchCond, stmts, catchLineno, catchCharno ) ;^[CLASS] IRFactory  [METHOD] createCatch [RETURN_TYPE] Node   String varName int nameLineno int nameCharno Node catchCond Node stmts int catchLineno int catchCharno [VARIABLES] String  varName  boolean  int  catchCharno  catchLineno  nameCharno  nameLineno  Parser  parser  Node  catchCond  stmts  
[BugLab_Argument_Swapping]^createName ( nameLineno, varName, nameCharno ) , catchCond, stmts, catchLineno, catchCharno ) ;^217^218^^^^210^219^createName ( varName, nameLineno, nameCharno ) , catchCond, stmts, catchLineno, catchCharno ) ;^[CLASS] IRFactory  [METHOD] createCatch [RETURN_TYPE] Node   String varName int nameLineno int nameCharno Node catchCond Node stmts int catchLineno int catchCharno [VARIABLES] String  varName  boolean  int  catchCharno  catchLineno  nameCharno  nameLineno  Parser  parser  Node  catchCond  stmts  
[BugLab_Argument_Swapping]^createName ( varName, nameCharno, nameLineno ) , catchCond, stmts, catchLineno, catchCharno ) ;^217^218^^^^210^219^createName ( varName, nameLineno, nameCharno ) , catchCond, stmts, catchLineno, catchCharno ) ;^[CLASS] IRFactory  [METHOD] createCatch [RETURN_TYPE] Node   String varName int nameLineno int nameCharno Node catchCond Node stmts int catchLineno int catchCharno [VARIABLES] String  varName  boolean  int  catchCharno  catchLineno  nameCharno  nameLineno  Parser  parser  Node  catchCond  stmts  
[BugLab_Argument_Swapping]^return new Node ( Token.THROW, lineno, expr, charno ) ;^226^^^^^224^227^return new Node ( Token.THROW, expr, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createThrow [RETURN_TYPE] Node   Node expr int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  expr  
[BugLab_Argument_Swapping]^return new Node ( Token.THROW, charno, lineno, expr ) ;^226^^^^^224^227^return new Node ( Token.THROW, expr, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createThrow [RETURN_TYPE] Node   Node expr int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  expr  
[BugLab_Argument_Swapping]^return new Node ( expr, Token.THROW, lineno, charno ) ;^226^^^^^224^227^return new Node ( Token.THROW, expr, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createThrow [RETURN_TYPE] Node   Node expr int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  expr  
[BugLab_Argument_Swapping]^return new Node ( Token.THROW, expr, charno, lineno ) ;^226^^^^^224^227^return new Node ( Token.THROW, expr, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createThrow [RETURN_TYPE] Node   Node expr int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  expr  
[BugLab_Argument_Swapping]^return new Node ( charno, expr, lineno, Token.THROW ) ;^226^^^^^224^227^return new Node ( Token.THROW, expr, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createThrow [RETURN_TYPE] Node   Node expr int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  expr  
[BugLab_Variable_Misuse]^return expr == null ? new Node ( Token.RETURN, charno, charno ) : new Node ( Token.RETURN, expr, lineno, charno ) ;^234^235^236^^^232^237^return expr == null ? new Node ( Token.RETURN, lineno, charno ) : new Node ( Token.RETURN, expr, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createReturn [RETURN_TYPE] Node   Node expr int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  expr  
[BugLab_Argument_Swapping]^return charno == null ? new Node ( Token.RETURN, lineno, expr ) : new Node ( Token.RETURN, expr, lineno, charno ) ;^234^235^236^^^232^237^return expr == null ? new Node ( Token.RETURN, lineno, charno ) : new Node ( Token.RETURN, expr, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createReturn [RETURN_TYPE] Node   Node expr int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  expr  
[BugLab_Argument_Swapping]^return lineno == null ? new Node ( Token.RETURN, expr, charno ) : new Node ( Token.RETURN, expr, lineno, charno ) ;^234^235^236^^^232^237^return expr == null ? new Node ( Token.RETURN, lineno, charno ) : new Node ( Token.RETURN, expr, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createReturn [RETURN_TYPE] Node   Node expr int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  expr  
[BugLab_Argument_Swapping]^return expr == null ? new Node ( Token.RETURN, charno, lineno ) : new Node ( Token.RETURN, expr, lineno, charno ) ;^234^235^236^^^232^237^return expr == null ? new Node ( Token.RETURN, lineno, charno ) : new Node ( Token.RETURN, expr, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createReturn [RETURN_TYPE] Node   Node expr int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  expr  
[BugLab_Argument_Swapping]^return Token.RETURN == null ? new Node ( expr, lineno, charno ) : new Node ( Token.RETURN, expr, lineno, charno ) ;^234^235^236^^^232^237^return expr == null ? new Node ( Token.RETURN, lineno, charno ) : new Node ( Token.RETURN, expr, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createReturn [RETURN_TYPE] Node   Node expr int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  expr  
[BugLab_Wrong_Operator]^return expr != null ? new Node ( Token.RETURN, lineno, charno ) : new Node ( Token.RETURN, expr, lineno, charno ) ;^234^235^236^^^232^237^return expr == null ? new Node ( Token.RETURN, lineno, charno ) : new Node ( Token.RETURN, expr, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createReturn [RETURN_TYPE] Node   Node expr int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  expr  
[BugLab_Argument_Swapping]^? new Node ( lineno, Token.RETURN, charno ) : new Node ( Token.RETURN, expr, lineno, charno ) ;^235^236^^^^232^237^? new Node ( Token.RETURN, lineno, charno ) : new Node ( Token.RETURN, expr, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createReturn [RETURN_TYPE] Node   Node expr int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  expr  
[BugLab_Argument_Swapping]^? new Node ( Token.RETURN, charno, lineno ) : new Node ( Token.RETURN, expr, lineno, charno ) ;^235^236^^^^232^237^? new Node ( Token.RETURN, lineno, charno ) : new Node ( Token.RETURN, expr, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createReturn [RETURN_TYPE] Node   Node expr int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  expr  
[BugLab_Argument_Swapping]^? new Node ( charno, lineno, Token.RETURN ) : new Node ( Token.RETURN, expr, lineno, charno ) ;^235^236^^^^232^237^? new Node ( Token.RETURN, lineno, charno ) : new Node ( Token.RETURN, expr, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createReturn [RETURN_TYPE] Node   Node expr int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  expr  
[BugLab_Variable_Misuse]^: new Node ( Token.RETURN, expr, charno, charno ) ;^236^^^^^232^237^: new Node ( Token.RETURN, expr, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createReturn [RETURN_TYPE] Node   Node expr int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  expr  
[BugLab_Variable_Misuse]^: new Node ( 1, expr, lineno, charno ) ;^236^^^^^232^237^: new Node ( Token.RETURN, expr, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createReturn [RETURN_TYPE] Node   Node expr int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  expr  
[BugLab_Argument_Swapping]^: new Node ( Token.RETURN, charno, lineno, expr ) ;^236^^^^^232^237^: new Node ( Token.RETURN, expr, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createReturn [RETURN_TYPE] Node   Node expr int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  expr  
[BugLab_Argument_Swapping]^: new Node ( lineno, expr, Token.RETURN, charno ) ;^236^^^^^232^237^: new Node ( Token.RETURN, expr, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createReturn [RETURN_TYPE] Node   Node expr int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  expr  
[BugLab_Argument_Swapping]^: new Node ( Token.RETURN, expr, charno, lineno ) ;^236^^^^^232^237^: new Node ( Token.RETURN, expr, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createReturn [RETURN_TYPE] Node   Node expr int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  expr  
[BugLab_Argument_Swapping]^: new Node ( charno, expr, lineno, Token.RETURN ) ;^236^^^^^232^237^: new Node ( Token.RETURN, expr, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createReturn [RETURN_TYPE] Node   Node expr int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  expr  
[BugLab_Argument_Swapping]^return new Node ( Token.LABEL, Node.newString ( Token.NAME, lineno, name, charno ) , lineno, charno ) ;^244^245^246^^^242^247^return new Node ( Token.LABEL, Node.newString ( Token.NAME, name, lineno, charno ) , lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createLabel [RETURN_TYPE] Node   String name int lineno int charno [VARIABLES] String  name  boolean  int  charno  lineno  Parser  parser  
[BugLab_Argument_Swapping]^return new Node ( Token.LABEL, Node.newString ( Token.NAME, name, charno, lineno ) , lineno, charno ) ;^244^245^246^^^242^247^return new Node ( Token.LABEL, Node.newString ( Token.NAME, name, lineno, charno ) , lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createLabel [RETURN_TYPE] Node   String name int lineno int charno [VARIABLES] String  name  boolean  int  charno  lineno  Parser  parser  
[BugLab_Argument_Swapping]^return new Node ( name, Node.newString ( Token.NAME, Token.LABEL, lineno, charno ) , lineno, charno ) ;^244^245^246^^^242^247^return new Node ( Token.LABEL, Node.newString ( Token.NAME, name, lineno, charno ) , lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createLabel [RETURN_TYPE] Node   String name int lineno int charno [VARIABLES] String  name  boolean  int  charno  lineno  Parser  parser  
[BugLab_Variable_Misuse]^return new Node ( Token.LABEL, Node.newString ( Token.NAME, name, lineno, lineno ) , lineno, charno ) ;^244^245^246^^^242^247^return new Node ( Token.LABEL, Node.newString ( Token.NAME, name, lineno, charno ) , lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createLabel [RETURN_TYPE] Node   String name int lineno int charno [VARIABLES] String  name  boolean  int  charno  lineno  Parser  parser  
[BugLab_Argument_Swapping]^return new Node ( Token.LABEL, Node.newString ( Token.NAME, charno, lineno, name ) , lineno, charno ) ;^244^245^246^^^242^247^return new Node ( Token.LABEL, Node.newString ( Token.NAME, name, lineno, charno ) , lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createLabel [RETURN_TYPE] Node   String name int lineno int charno [VARIABLES] String  name  boolean  int  charno  lineno  Parser  parser  
[BugLab_Argument_Swapping]^return new Node ( lineno, Node.newString ( Token.NAME, name, Token.LABEL, charno ) , lineno, charno ) ;^244^245^246^^^242^247^return new Node ( Token.LABEL, Node.newString ( Token.NAME, name, lineno, charno ) , lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createLabel [RETURN_TYPE] Node   String name int lineno int charno [VARIABLES] String  name  boolean  int  charno  lineno  Parser  parser  
[BugLab_Argument_Swapping]^Node.newString ( Token.NAME, lineno, name, charno ) , lineno, charno ) ;^245^246^^^^242^247^Node.newString ( Token.NAME, name, lineno, charno ) , lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createLabel [RETURN_TYPE] Node   String name int lineno int charno [VARIABLES] String  name  boolean  int  charno  lineno  Parser  parser  
[BugLab_Argument_Swapping]^Node.newString ( Token.NAME, name, charno, lineno ) , lineno, charno ) ;^245^246^^^^242^247^Node.newString ( Token.NAME, name, lineno, charno ) , lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createLabel [RETURN_TYPE] Node   String name int lineno int charno [VARIABLES] String  name  boolean  int  charno  lineno  Parser  parser  
[BugLab_Argument_Swapping]^Node result = new Node ( Token.BREAK, charno, lineno ) ;^254^^^^^252^262^Node result = new Node ( Token.BREAK, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createBreak [RETURN_TYPE] Node   String label int lineno int charno [VARIABLES] String  label  boolean  int  charno  lineno  Parser  parser  Node  name  result  
[BugLab_Argument_Swapping]^Node result = new Node ( charno, lineno, Token.BREAK ) ;^254^^^^^252^262^Node result = new Node ( Token.BREAK, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createBreak [RETURN_TYPE] Node   String label int lineno int charno [VARIABLES] String  label  boolean  int  charno  lineno  Parser  parser  Node  name  result  
[BugLab_Variable_Misuse]^Node result = new Node ( Token.BREAK, charno, charno ) ;^254^^^^^252^262^Node result = new Node ( Token.BREAK, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createBreak [RETURN_TYPE] Node   String label int lineno int charno [VARIABLES] String  label  boolean  int  charno  lineno  Parser  parser  Node  name  result  
[BugLab_Variable_Misuse]^Node result = new Node ( Token.BREAK, lineno, lineno ) ;^254^^^^^252^262^Node result = new Node ( Token.BREAK, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createBreak [RETURN_TYPE] Node   String label int lineno int charno [VARIABLES] String  label  boolean  int  charno  lineno  Parser  parser  Node  name  result  
[BugLab_Argument_Swapping]^Node result = new Node ( lineno, Token.BREAK, charno ) ;^254^^^^^252^262^Node result = new Node ( Token.BREAK, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createBreak [RETURN_TYPE] Node   String label int lineno int charno [VARIABLES] String  label  boolean  int  charno  lineno  Parser  parser  Node  name  result  
[BugLab_Wrong_Operator]^if  ( label != null )  {^255^^^^^252^262^if  ( label == null )  {^[CLASS] IRFactory  [METHOD] createBreak [RETURN_TYPE] Node   String label int lineno int charno [VARIABLES] String  label  boolean  int  charno  lineno  Parser  parser  Node  name  result  
[BugLab_Variable_Misuse]^return name;^260^^^^^252^262^return result;^[CLASS] IRFactory  [METHOD] createBreak [RETURN_TYPE] Node   String label int lineno int charno [VARIABLES] String  label  boolean  int  charno  lineno  Parser  parser  Node  name  result  
[BugLab_Variable_Misuse]^Node name = Node.newString ( Token.NAME, label, charno, charno ) ;^258^^^^^252^262^Node name = Node.newString ( Token.NAME, label, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createBreak [RETURN_TYPE] Node   String label int lineno int charno [VARIABLES] String  label  boolean  int  charno  lineno  Parser  parser  Node  name  result  
[BugLab_Variable_Misuse]^Node name = Node.newString ( Token.NAME, label, lineno, lineno ) ;^258^^^^^252^262^Node name = Node.newString ( Token.NAME, label, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createBreak [RETURN_TYPE] Node   String label int lineno int charno [VARIABLES] String  label  boolean  int  charno  lineno  Parser  parser  Node  name  result  
[BugLab_Argument_Swapping]^Node name = Node.newString ( Token.NAME, lineno, label, charno ) ;^258^^^^^252^262^Node name = Node.newString ( Token.NAME, label, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createBreak [RETURN_TYPE] Node   String label int lineno int charno [VARIABLES] String  label  boolean  int  charno  lineno  Parser  parser  Node  name  result  
[BugLab_Argument_Swapping]^Node name = Node.newString ( Token.NAME, label, charno, lineno ) ;^258^^^^^252^262^Node name = Node.newString ( Token.NAME, label, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createBreak [RETURN_TYPE] Node   String label int lineno int charno [VARIABLES] String  label  boolean  int  charno  lineno  Parser  parser  Node  name  result  
[BugLab_Argument_Swapping]^Node name = Node.newString ( Token.NAME, charno, lineno, label ) ;^258^^^^^252^262^Node name = Node.newString ( Token.NAME, label, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createBreak [RETURN_TYPE] Node   String label int lineno int charno [VARIABLES] String  label  boolean  int  charno  lineno  Parser  parser  Node  name  result  
[BugLab_Variable_Misuse]^return name;^256^^^^^252^262^return result;^[CLASS] IRFactory  [METHOD] createBreak [RETURN_TYPE] Node   String label int lineno int charno [VARIABLES] String  label  boolean  int  charno  lineno  Parser  parser  Node  name  result  
[BugLab_Variable_Misuse]^Node result = new Node ( Token.CONTINUE, lineno, lineno ) ;^269^^^^^267^277^Node result = new Node ( Token.CONTINUE, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createContinue [RETURN_TYPE] Node   String label int lineno int charno [VARIABLES] String  label  boolean  int  charno  lineno  Parser  parser  Node  name  result  
[BugLab_Argument_Swapping]^Node result = new Node ( lineno, Token.CONTINUE, charno ) ;^269^^^^^267^277^Node result = new Node ( Token.CONTINUE, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createContinue [RETURN_TYPE] Node   String label int lineno int charno [VARIABLES] String  label  boolean  int  charno  lineno  Parser  parser  Node  name  result  
[BugLab_Argument_Swapping]^Node result = new Node ( Token.CONTINUE, charno, lineno ) ;^269^^^^^267^277^Node result = new Node ( Token.CONTINUE, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createContinue [RETURN_TYPE] Node   String label int lineno int charno [VARIABLES] String  label  boolean  int  charno  lineno  Parser  parser  Node  name  result  
[BugLab_Argument_Swapping]^Node result = new Node ( charno, lineno, Token.CONTINUE ) ;^269^^^^^267^277^Node result = new Node ( Token.CONTINUE, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createContinue [RETURN_TYPE] Node   String label int lineno int charno [VARIABLES] String  label  boolean  int  charno  lineno  Parser  parser  Node  name  result  
[BugLab_Variable_Misuse]^Node result = new Node ( Token.CONTINUE, charno, charno ) ;^269^^^^^267^277^Node result = new Node ( Token.CONTINUE, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createContinue [RETURN_TYPE] Node   String label int lineno int charno [VARIABLES] String  label  boolean  int  charno  lineno  Parser  parser  Node  name  result  
[BugLab_Wrong_Operator]^if  ( label != null )  {^270^^^^^267^277^if  ( label == null )  {^[CLASS] IRFactory  [METHOD] createContinue [RETURN_TYPE] Node   String label int lineno int charno [VARIABLES] String  label  boolean  int  charno  lineno  Parser  parser  Node  name  result  
[BugLab_Variable_Misuse]^return name;^275^^^^^267^277^return result;^[CLASS] IRFactory  [METHOD] createContinue [RETURN_TYPE] Node   String label int lineno int charno [VARIABLES] String  label  boolean  int  charno  lineno  Parser  parser  Node  name  result  
[BugLab_Variable_Misuse]^Node name = Node.newString ( Token.NAME, label, lineno, lineno ) ;^273^^^^^267^277^Node name = Node.newString ( Token.NAME, label, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createContinue [RETURN_TYPE] Node   String label int lineno int charno [VARIABLES] String  label  boolean  int  charno  lineno  Parser  parser  Node  name  result  
[BugLab_Argument_Swapping]^Node name = Node.newString ( Token.NAME, lineno, label, charno ) ;^273^^^^^267^277^Node name = Node.newString ( Token.NAME, label, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createContinue [RETURN_TYPE] Node   String label int lineno int charno [VARIABLES] String  label  boolean  int  charno  lineno  Parser  parser  Node  name  result  
[BugLab_Argument_Swapping]^Node name = Node.newString ( Token.NAME, label, charno, lineno ) ;^273^^^^^267^277^Node name = Node.newString ( Token.NAME, label, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createContinue [RETURN_TYPE] Node   String label int lineno int charno [VARIABLES] String  label  boolean  int  charno  lineno  Parser  parser  Node  name  result  
[BugLab_Argument_Swapping]^Node name = Node.newString ( Token.NAME, charno, lineno, label ) ;^273^^^^^267^277^Node name = Node.newString ( Token.NAME, label, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createContinue [RETURN_TYPE] Node   String label int lineno int charno [VARIABLES] String  label  boolean  int  charno  lineno  Parser  parser  Node  name  result  
[BugLab_Variable_Misuse]^return name;^271^^^^^267^277^return result;^[CLASS] IRFactory  [METHOD] createContinue [RETURN_TYPE] Node   String label int lineno int charno [VARIABLES] String  label  boolean  int  charno  lineno  Parser  parser  Node  name  result  
[BugLab_Variable_Misuse]^Node name = Node.newString ( Token.NAME, label, charno, charno ) ;^273^^^^^267^277^Node name = Node.newString ( Token.NAME, label, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createContinue [RETURN_TYPE] Node   String label int lineno int charno [VARIABLES] String  label  boolean  int  charno  lineno  Parser  parser  Node  name  result  
[BugLab_Variable_Misuse]^return new Node ( Token.DEBUGGER, charno, charno ) ;^283^^^^^282^284^return new Node ( Token.DEBUGGER, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createDebugger [RETURN_TYPE] Node   int lineno int charno [VARIABLES] int  charno  lineno  Parser  parser  boolean  
[BugLab_Argument_Swapping]^return new Node ( Token.DEBUGGER, charno, lineno ) ;^283^^^^^282^284^return new Node ( Token.DEBUGGER, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createDebugger [RETURN_TYPE] Node   int lineno int charno [VARIABLES] int  charno  lineno  Parser  parser  boolean  
[BugLab_Argument_Swapping]^return new Node ( charno, lineno, Token.DEBUGGER ) ;^283^^^^^282^284^return new Node ( Token.DEBUGGER, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createDebugger [RETURN_TYPE] Node   int lineno int charno [VARIABLES] int  charno  lineno  Parser  parser  boolean  
[BugLab_Argument_Swapping]^return new Node ( lineno, Token.BLOCK, charno ) ;^293^^^^^291^294^return new Node ( Token.BLOCK, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createBlock [RETURN_TYPE] Node   int lineno int charno [VARIABLES] int  charno  lineno  Parser  parser  boolean  
[BugLab_Argument_Swapping]^return new Node ( Token.BLOCK, charno, lineno ) ;^293^^^^^291^294^return new Node ( Token.BLOCK, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createBlock [RETURN_TYPE] Node   int lineno int charno [VARIABLES] int  charno  lineno  Parser  parser  boolean  
[BugLab_Argument_Swapping]^return new Node ( charno, lineno, Token.BLOCK ) ;^293^^^^^291^294^return new Node ( Token.BLOCK, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createBlock [RETURN_TYPE] Node   int lineno int charno [VARIABLES] int  charno  lineno  Parser  parser  boolean  
[BugLab_Variable_Misuse]^return new Node ( Token.BLOCK, lineno, lineno ) ;^293^^^^^291^294^return new Node ( Token.BLOCK, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createBlock [RETURN_TYPE] Node   int lineno int charno [VARIABLES] int  charno  lineno  Parser  parser  boolean  
[BugLab_Argument_Swapping]^FunctionNode fnNode = new FunctionNode ( charno, lineno, name ) ;^298^^^^^296^304^FunctionNode fnNode = new FunctionNode ( name, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createFunction [RETURN_TYPE] FunctionNode   String name int lineno int charno [VARIABLES] FunctionNode  fnNode  String  name  boolean  int  charno  lineno  Parser  parser  
[BugLab_Argument_Swapping]^FunctionNode fnNode = new FunctionNode ( name, charno, lineno ) ;^298^^^^^296^304^FunctionNode fnNode = new FunctionNode ( name, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createFunction [RETURN_TYPE] FunctionNode   String name int lineno int charno [VARIABLES] FunctionNode  fnNode  String  name  boolean  int  charno  lineno  Parser  parser  
[BugLab_Variable_Misuse]^FunctionNode fnNode = new FunctionNode ( name, charno, charno ) ;^298^^^^^296^304^FunctionNode fnNode = new FunctionNode ( name, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createFunction [RETURN_TYPE] FunctionNode   String name int lineno int charno [VARIABLES] FunctionNode  fnNode  String  name  boolean  int  charno  lineno  Parser  parser  
[BugLab_Variable_Misuse]^FunctionNode fnNode = new FunctionNode ( name, lineno, lineno ) ;^298^^^^^296^304^FunctionNode fnNode = new FunctionNode ( name, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createFunction [RETURN_TYPE] FunctionNode   String name int lineno int charno [VARIABLES] FunctionNode  fnNode  String  name  boolean  int  charno  lineno  Parser  parser  
[BugLab_Argument_Swapping]^fnNode.addChildToBack ( createName ( lineno, name, charno )  ) ;^302^^^^^296^304^fnNode.addChildToBack ( createName ( name, lineno, charno )  ) ;^[CLASS] IRFactory  [METHOD] createFunction [RETURN_TYPE] FunctionNode   String name int lineno int charno [VARIABLES] FunctionNode  fnNode  String  name  boolean  int  charno  lineno  Parser  parser  
[BugLab_Argument_Swapping]^fnNode.addChildToBack ( createName ( name, charno, lineno )  ) ;^302^^^^^296^304^fnNode.addChildToBack ( createName ( name, lineno, charno )  ) ;^[CLASS] IRFactory  [METHOD] createFunction [RETURN_TYPE] FunctionNode   String name int lineno int charno [VARIABLES] FunctionNode  fnNode  String  name  boolean  int  charno  lineno  Parser  parser  
[BugLab_Variable_Misuse]^fnNode.itsFunctionType = i;^310^^^^^295^325^fnNode.itsFunctionType = functionType;^[CLASS] IRFactory  [METHOD] initFunction [RETURN_TYPE] Node   FunctionNode fnNode int functionIndex Node args JSDocInfo info Node statements int functionType [VARIABLES] boolean  Node  args  statements  FunctionNode  fn  fnNode  String  name  JSDocInfo  info  int  functionCount  functionIndex  functionType  i  Parser  parser  
[BugLab_Variable_Misuse]^fnNode.addChildToBack ( statements ) ;^311^^^^^296^326^fnNode.addChildToBack ( args ) ;^[CLASS] IRFactory  [METHOD] initFunction [RETURN_TYPE] Node   FunctionNode fnNode int functionIndex Node args JSDocInfo info Node statements int functionType [VARIABLES] boolean  Node  args  statements  FunctionNode  fn  fnNode  String  name  JSDocInfo  info  int  functionCount  functionIndex  functionType  i  Parser  parser  
[BugLab_Variable_Misuse]^fnNode.addChildToBack ( args ) ;^312^^^^^297^327^fnNode.addChildToBack ( statements ) ;^[CLASS] IRFactory  [METHOD] initFunction [RETURN_TYPE] Node   FunctionNode fnNode int functionIndex Node args JSDocInfo info Node statements int functionType [VARIABLES] boolean  Node  args  statements  FunctionNode  fn  fnNode  String  name  JSDocInfo  info  int  functionCount  functionIndex  functionType  i  Parser  parser  
[BugLab_Wrong_Operator]^if  ( parser.getSourceName (  )  == null )  {^313^^^^^298^328^if  ( parser.getSourceName (  )  != null )  {^[CLASS] IRFactory  [METHOD] initFunction [RETURN_TYPE] Node   FunctionNode fnNode int functionIndex Node args JSDocInfo info Node statements int functionType [VARIABLES] boolean  Node  args  statements  FunctionNode  fn  fnNode  String  name  JSDocInfo  info  int  functionCount  functionIndex  functionType  i  Parser  parser  
[BugLab_Wrong_Operator]^if  ( info == null )  {^316^^^^^301^331^if  ( info != null )  {^[CLASS] IRFactory  [METHOD] initFunction [RETURN_TYPE] Node   FunctionNode fnNode int functionIndex Node args JSDocInfo info Node statements int functionType [VARIABLES] boolean  Node  args  statements  FunctionNode  fn  fnNode  String  name  JSDocInfo  info  int  functionCount  functionIndex  functionType  i  Parser  parser  
[BugLab_Variable_Misuse]^int functionCount = fn.getFunctionCount (  ) ;^320^^^^^305^335^int functionCount = fnNode.getFunctionCount (  ) ;^[CLASS] IRFactory  [METHOD] initFunction [RETURN_TYPE] Node   FunctionNode fnNode int functionIndex Node args JSDocInfo info Node statements int functionType [VARIABLES] boolean  Node  args  statements  FunctionNode  fn  fnNode  String  name  JSDocInfo  info  int  functionCount  functionIndex  functionType  i  Parser  parser  
[BugLab_Variable_Misuse]^if  ( functionType != 0 )  {^321^^^^^306^336^if  ( functionCount != 0 )  {^[CLASS] IRFactory  [METHOD] initFunction [RETURN_TYPE] Node   FunctionNode fnNode int functionIndex Node args JSDocInfo info Node statements int functionType [VARIABLES] boolean  Node  args  statements  FunctionNode  fn  fnNode  String  name  JSDocInfo  info  int  functionCount  functionIndex  functionType  i  Parser  parser  
[BugLab_Wrong_Operator]^if  ( functionCount == 0 )  {^321^^^^^306^336^if  ( functionCount != 0 )  {^[CLASS] IRFactory  [METHOD] initFunction [RETURN_TYPE] Node   FunctionNode fnNode int functionIndex Node args JSDocInfo info Node statements int functionType [VARIABLES] boolean  Node  args  statements  FunctionNode  fn  fnNode  String  name  JSDocInfo  info  int  functionCount  functionIndex  functionType  i  Parser  parser  
[BugLab_Wrong_Literal]^if  ( functionCount != functionIndex )  {^321^^^^^306^336^if  ( functionCount != 0 )  {^[CLASS] IRFactory  [METHOD] initFunction [RETURN_TYPE] Node   FunctionNode fnNode int functionIndex Node args JSDocInfo info Node statements int functionType [VARIABLES] boolean  Node  args  statements  FunctionNode  fn  fnNode  String  name  JSDocInfo  info  int  functionCount  functionIndex  functionType  i  Parser  parser  
[BugLab_Wrong_Literal]^if  ( functionCount != functionType )  {^321^^^^^306^336^if  ( functionCount != 0 )  {^[CLASS] IRFactory  [METHOD] initFunction [RETURN_TYPE] Node   FunctionNode fnNode int functionIndex Node args JSDocInfo info Node statements int functionType [VARIABLES] boolean  Node  args  statements  FunctionNode  fn  fnNode  String  name  JSDocInfo  info  int  functionCount  functionIndex  functionType  i  Parser  parser  
[BugLab_Variable_Misuse]^if  ( fnNode.getFunctionType (  ) == FunctionNode.FUNCTION_EXPRESSION_STATEMENT ) {^327^328^329^^^312^342^if  ( fn.getFunctionType (  ) == FunctionNode.FUNCTION_EXPRESSION_STATEMENT ) {^[CLASS] IRFactory  [METHOD] initFunction [RETURN_TYPE] Node   FunctionNode fnNode int functionIndex Node args JSDocInfo info Node statements int functionType [VARIABLES] boolean  Node  args  statements  FunctionNode  fn  fnNode  String  name  JSDocInfo  info  int  functionCount  functionIndex  functionType  i  Parser  parser  
[BugLab_Argument_Swapping]^if  ( FunctionNode.FUNCTION_EXPRESSION_STATEMENT.getFunctionType (  ) == fn ) {^327^328^329^^^312^342^if  ( fn.getFunctionType (  ) == FunctionNode.FUNCTION_EXPRESSION_STATEMENT ) {^[CLASS] IRFactory  [METHOD] initFunction [RETURN_TYPE] Node   FunctionNode fnNode int functionIndex Node args JSDocInfo info Node statements int functionType [VARIABLES] boolean  Node  args  statements  FunctionNode  fn  fnNode  String  name  JSDocInfo  info  int  functionCount  functionIndex  functionType  i  Parser  parser  
[BugLab_Wrong_Operator]^if  ( fn.getFunctionType (  ) > FunctionNode.FUNCTION_EXPRESSION_STATEMENT ) {^327^328^329^^^312^342^if  ( fn.getFunctionType (  ) == FunctionNode.FUNCTION_EXPRESSION_STATEMENT ) {^[CLASS] IRFactory  [METHOD] initFunction [RETURN_TYPE] Node   FunctionNode fnNode int functionIndex Node args JSDocInfo info Node statements int functionType [VARIABLES] boolean  Node  args  statements  FunctionNode  fn  fnNode  String  name  JSDocInfo  info  int  functionCount  functionIndex  functionType  i  Parser  parser  
[BugLab_Wrong_Operator]^if  ( name != null || name.length (  )  != 0 )  {^331^^^^^327^334^if  ( name != null && name.length (  )  != 0 )  {^[CLASS] IRFactory  [METHOD] initFunction [RETURN_TYPE] Node   FunctionNode fnNode int functionIndex Node args JSDocInfo info Node statements int functionType [VARIABLES] boolean  Node  args  statements  FunctionNode  fn  fnNode  String  name  JSDocInfo  info  int  functionCount  functionIndex  functionType  i  Parser  parser  
[BugLab_Wrong_Operator]^if  ( name == null && name.length (  )  != 0 )  {^331^^^^^327^334^if  ( name != null && name.length (  )  != 0 )  {^[CLASS] IRFactory  [METHOD] initFunction [RETURN_TYPE] Node   FunctionNode fnNode int functionIndex Node args JSDocInfo info Node statements int functionType [VARIABLES] boolean  Node  args  statements  FunctionNode  fn  fnNode  String  name  JSDocInfo  info  int  functionCount  functionIndex  functionType  i  Parser  parser  
[BugLab_Wrong_Operator]^if  ( name != null && name.length (  )  == 0 )  {^331^^^^^327^334^if  ( name != null && name.length (  )  != 0 )  {^[CLASS] IRFactory  [METHOD] initFunction [RETURN_TYPE] Node   FunctionNode fnNode int functionIndex Node args JSDocInfo info Node statements int functionType [VARIABLES] boolean  Node  args  statements  FunctionNode  fn  fnNode  String  name  JSDocInfo  info  int  functionCount  functionIndex  functionType  i  Parser  parser  
[BugLab_Variable_Misuse]^String name = fnNode.getFunctionName (  ) ;^330^^^^^327^334^String name = fn.getFunctionName (  ) ;^[CLASS] IRFactory  [METHOD] initFunction [RETURN_TYPE] Node   FunctionNode fnNode int functionIndex Node args JSDocInfo info Node statements int functionType [VARIABLES] boolean  Node  args  statements  FunctionNode  fn  fnNode  String  name  JSDocInfo  info  int  functionCount  functionIndex  functionType  i  Parser  parser  
[BugLab_Wrong_Operator]^if  ( name != null || name.length (  )  != 0 )  {^331^^^^^316^346^if  ( name != null && name.length (  )  != 0 )  {^[CLASS] IRFactory  [METHOD] initFunction [RETURN_TYPE] Node   FunctionNode fnNode int functionIndex Node args JSDocInfo info Node statements int functionType [VARIABLES] boolean  Node  args  statements  FunctionNode  fn  fnNode  String  name  JSDocInfo  info  int  functionCount  functionIndex  functionType  i  Parser  parser  
[BugLab_Wrong_Operator]^if  ( name == null && name.length (  )  != 0 )  {^331^^^^^316^346^if  ( name != null && name.length (  )  != 0 )  {^[CLASS] IRFactory  [METHOD] initFunction [RETURN_TYPE] Node   FunctionNode fnNode int functionIndex Node args JSDocInfo info Node statements int functionType [VARIABLES] boolean  Node  args  statements  FunctionNode  fn  fnNode  String  name  JSDocInfo  info  int  functionCount  functionIndex  functionType  i  Parser  parser  
[BugLab_Wrong_Operator]^if  ( name != null && name.length (  )  == 0 )  {^331^^^^^316^346^if  ( name != null && name.length (  )  != 0 )  {^[CLASS] IRFactory  [METHOD] initFunction [RETURN_TYPE] Node   FunctionNode fnNode int functionIndex Node args JSDocInfo info Node statements int functionType [VARIABLES] boolean  Node  args  statements  FunctionNode  fn  fnNode  String  name  JSDocInfo  info  int  functionCount  functionIndex  functionType  i  Parser  parser  
[BugLab_Wrong_Literal]^if  ( name != null && name.length (  )  !=  )  {^331^^^^^316^346^if  ( name != null && name.length (  )  != 0 )  {^[CLASS] IRFactory  [METHOD] initFunction [RETURN_TYPE] Node   FunctionNode fnNode int functionIndex Node args JSDocInfo info Node statements int functionType [VARIABLES] boolean  Node  args  statements  FunctionNode  fn  fnNode  String  name  JSDocInfo  info  int  functionCount  functionIndex  functionType  i  Parser  parser  
[BugLab_Variable_Misuse]^for  ( functionTypent i = 0; i != functionCount; ++i )  {^324^^^^^309^339^for  ( int i = 0; i != functionCount; ++i )  {^[CLASS] IRFactory  [METHOD] initFunction [RETURN_TYPE] Node   FunctionNode fnNode int functionIndex Node args JSDocInfo info Node statements int functionType [VARIABLES] boolean  Node  args  statements  FunctionNode  fn  fnNode  String  name  JSDocInfo  info  int  functionCount  functionIndex  functionType  i  Parser  parser  
[BugLab_Argument_Swapping]^for  ( functionCountnt i = 0; i != i; ++i )  {^324^^^^^309^339^for  ( int i = 0; i != functionCount; ++i )  {^[CLASS] IRFactory  [METHOD] initFunction [RETURN_TYPE] Node   FunctionNode fnNode int functionIndex Node args JSDocInfo info Node statements int functionType [VARIABLES] boolean  Node  args  statements  FunctionNode  fn  fnNode  String  name  JSDocInfo  info  int  functionCount  functionIndex  functionType  i  Parser  parser  
[BugLab_Wrong_Operator]^for  ( int i = 0; i >= functionCount; ++i )  {^324^^^^^309^339^for  ( int i = 0; i != functionCount; ++i )  {^[CLASS] IRFactory  [METHOD] initFunction [RETURN_TYPE] Node   FunctionNode fnNode int functionIndex Node args JSDocInfo info Node statements int functionType [VARIABLES] boolean  Node  args  statements  FunctionNode  fn  fnNode  String  name  JSDocInfo  info  int  functionCount  functionIndex  functionType  i  Parser  parser  
[BugLab_Wrong_Operator]^for  ( int i = 0; i == functionCount; ++i )  {^324^^^^^309^339^for  ( int i = 0; i != functionCount; ++i )  {^[CLASS] IRFactory  [METHOD] initFunction [RETURN_TYPE] Node   FunctionNode fnNode int functionIndex Node args JSDocInfo info Node statements int functionType [VARIABLES] boolean  Node  args  statements  FunctionNode  fn  fnNode  String  name  JSDocInfo  info  int  functionCount  functionIndex  functionType  i  Parser  parser  
[BugLab_Wrong_Operator]^for  ( int i = 0; i > functionCount; ++i )  {^324^^^^^309^339^for  ( int i = 0; i != functionCount; ++i )  {^[CLASS] IRFactory  [METHOD] initFunction [RETURN_TYPE] Node   FunctionNode fnNode int functionIndex Node args JSDocInfo info Node statements int functionType [VARIABLES] boolean  Node  args  statements  FunctionNode  fn  fnNode  String  name  JSDocInfo  info  int  functionCount  functionIndex  functionType  i  Parser  parser  
[BugLab_Wrong_Literal]^for  ( int i = ; i != functionCount; ++i )  {^324^^^^^309^339^for  ( int i = 0; i != functionCount; ++i )  {^[CLASS] IRFactory  [METHOD] initFunction [RETURN_TYPE] Node   FunctionNode fnNode int functionIndex Node args JSDocInfo info Node statements int functionType [VARIABLES] boolean  Node  args  statements  FunctionNode  fn  fnNode  String  name  JSDocInfo  info  int  functionCount  functionIndex  functionType  i  Parser  parser  
[BugLab_Wrong_Operator]^if  ( fn.getFunctionType (  ) >= FunctionNode.FUNCTION_EXPRESSION_STATEMENT ) {^327^328^329^^^312^342^if  ( fn.getFunctionType (  ) == FunctionNode.FUNCTION_EXPRESSION_STATEMENT ) {^[CLASS] IRFactory  [METHOD] initFunction [RETURN_TYPE] Node   FunctionNode fnNode int functionIndex Node args JSDocInfo info Node statements int functionType [VARIABLES] boolean  Node  args  statements  FunctionNode  fn  fnNode  String  name  JSDocInfo  info  int  functionCount  functionIndex  functionType  i  Parser  parser  
[BugLab_Wrong_Literal]^if  ( name != null && name.length (  )  != functionCount )  {^331^^^^^316^346^if  ( name != null && name.length (  )  != 0 )  {^[CLASS] IRFactory  [METHOD] initFunction [RETURN_TYPE] Node   FunctionNode fnNode int functionIndex Node args JSDocInfo info Node statements int functionType [VARIABLES] boolean  Node  args  statements  FunctionNode  fn  fnNode  String  name  JSDocInfo  info  int  functionCount  functionIndex  functionType  i  Parser  parser  
[BugLab_Variable_Misuse]^FunctionNode fn = fnNode.getFunctionNode ( functionType ) ;^325^^^^^310^340^FunctionNode fn = fnNode.getFunctionNode ( i ) ;^[CLASS] IRFactory  [METHOD] initFunction [RETURN_TYPE] Node   FunctionNode fnNode int functionIndex Node args JSDocInfo info Node statements int functionType [VARIABLES] boolean  Node  args  statements  FunctionNode  fn  fnNode  String  name  JSDocInfo  info  int  functionCount  functionIndex  functionType  i  Parser  parser  
[BugLab_Argument_Swapping]^FunctionNode fn = i.getFunctionNode ( fnNode ) ;^325^^^^^310^340^FunctionNode fn = fnNode.getFunctionNode ( i ) ;^[CLASS] IRFactory  [METHOD] initFunction [RETURN_TYPE] Node   FunctionNode fnNode int functionIndex Node args JSDocInfo info Node statements int functionType [VARIABLES] boolean  Node  args  statements  FunctionNode  fn  fnNode  String  name  JSDocInfo  info  int  functionCount  functionIndex  functionType  i  Parser  parser  
[BugLab_Variable_Misuse]^String name = fnNode.getFunctionName (  ) ;^330^^^^^315^345^String name = fn.getFunctionName (  ) ;^[CLASS] IRFactory  [METHOD] initFunction [RETURN_TYPE] Node   FunctionNode fnNode int functionIndex Node args JSDocInfo info Node statements int functionType [VARIABLES] boolean  Node  args  statements  FunctionNode  fn  fnNode  String  name  JSDocInfo  info  int  functionCount  functionIndex  functionType  i  Parser  parser  
[BugLab_Variable_Misuse]^FunctionNode fn = fn.getFunctionNode ( i ) ;^325^^^^^310^340^FunctionNode fn = fnNode.getFunctionNode ( i ) ;^[CLASS] IRFactory  [METHOD] initFunction [RETURN_TYPE] Node   FunctionNode fnNode int functionIndex Node args JSDocInfo info Node statements int functionType [VARIABLES] boolean  Node  args  statements  FunctionNode  fn  fnNode  String  name  JSDocInfo  info  int  functionCount  functionIndex  functionType  i  Parser  parser  
[BugLab_Wrong_Literal]^fnNode.itsNeedsActivation = false;^323^^^^^308^338^fnNode.itsNeedsActivation = true;^[CLASS] IRFactory  [METHOD] initFunction [RETURN_TYPE] Node   FunctionNode fnNode int functionIndex Node args JSDocInfo info Node statements int functionType [VARIABLES] boolean  Node  args  statements  FunctionNode  fn  fnNode  String  name  JSDocInfo  info  int  functionCount  functionIndex  functionType  i  Parser  parser  
[BugLab_Wrong_Literal]^for  ( int i = -1; i != functionCount; ++i )  {^324^^^^^309^339^for  ( int i = 0; i != functionCount; ++i )  {^[CLASS] IRFactory  [METHOD] initFunction [RETURN_TYPE] Node   FunctionNode fnNode int functionIndex Node args JSDocInfo info Node statements int functionType [VARIABLES] boolean  Node  args  statements  FunctionNode  fn  fnNode  String  name  JSDocInfo  info  int  functionCount  functionIndex  functionType  i  Parser  parser  
[BugLab_Wrong_Operator]^if  ( fn.getFunctionType (  ) != FunctionNode.FUNCTION_EXPRESSION_STATEMENT ) {^327^328^329^^^312^342^if  ( fn.getFunctionType (  ) == FunctionNode.FUNCTION_EXPRESSION_STATEMENT ) {^[CLASS] IRFactory  [METHOD] initFunction [RETURN_TYPE] Node   FunctionNode fnNode int functionIndex Node args JSDocInfo info Node statements int functionType [VARIABLES] boolean  Node  args  statements  FunctionNode  fn  fnNode  String  name  JSDocInfo  info  int  functionCount  functionIndex  functionType  i  Parser  parser  
[BugLab_Wrong_Literal]^if  ( name != null && name.length (  )  != functionType )  {^331^^^^^327^334^if  ( name != null && name.length (  )  != 0 )  {^[CLASS] IRFactory  [METHOD] initFunction [RETURN_TYPE] Node   FunctionNode fnNode int functionIndex Node args JSDocInfo info Node statements int functionType [VARIABLES] boolean  Node  args  statements  FunctionNode  fn  fnNode  String  name  JSDocInfo  info  int  functionCount  functionIndex  functionType  i  Parser  parser  
[BugLab_Variable_Misuse]^for  ( int i = 0; i != functionType; ++i )  {^324^^^^^309^339^for  ( int i = 0; i != functionCount; ++i )  {^[CLASS] IRFactory  [METHOD] initFunction [RETURN_TYPE] Node   FunctionNode fnNode int functionIndex Node args JSDocInfo info Node statements int functionType [VARIABLES] boolean  Node  args  statements  FunctionNode  fn  fnNode  String  name  JSDocInfo  info  int  functionCount  functionIndex  functionType  i  Parser  parser  
[BugLab_Wrong_Literal]^if  ( name != null && name.length (  )  != 1 )  {^331^^^^^327^334^if  ( name != null && name.length (  )  != 0 )  {^[CLASS] IRFactory  [METHOD] initFunction [RETURN_TYPE] Node   FunctionNode fnNode int functionIndex Node args JSDocInfo info Node statements int functionType [VARIABLES] boolean  Node  args  statements  FunctionNode  fn  fnNode  String  name  JSDocInfo  info  int  functionCount  functionIndex  functionType  i  Parser  parser  
[BugLab_Wrong_Literal]^for  ( int i = functionCount; i != functionCount; ++i )  {^324^^^^^309^339^for  ( int i = 0; i != functionCount; ++i )  {^[CLASS] IRFactory  [METHOD] initFunction [RETURN_TYPE] Node   FunctionNode fnNode int functionIndex Node args JSDocInfo info Node statements int functionType [VARIABLES] boolean  Node  args  statements  FunctionNode  fn  fnNode  String  name  JSDocInfo  info  int  functionCount  functionIndex  functionType  i  Parser  parser  
[BugLab_Variable_Misuse]^fnNode.putIntProp ( Node.FUNCTION_PROP, i ) ;^338^^^^^323^353^fnNode.putIntProp ( Node.FUNCTION_PROP, functionIndex ) ;^[CLASS] IRFactory  [METHOD] initFunction [RETURN_TYPE] Node   FunctionNode fnNode int functionIndex Node args JSDocInfo info Node statements int functionType [VARIABLES] boolean  Node  args  statements  FunctionNode  fn  fnNode  String  name  JSDocInfo  info  int  functionCount  functionIndex  functionType  i  Parser  parser  
[BugLab_Variable_Misuse]^return fn;^339^^^^^324^354^return fnNode;^[CLASS] IRFactory  [METHOD] initFunction [RETURN_TYPE] Node   FunctionNode fnNode int functionIndex Node args JSDocInfo info Node statements int functionType [VARIABLES] boolean  Node  args  statements  FunctionNode  fn  fnNode  String  name  JSDocInfo  info  int  functionCount  functionIndex  functionType  i  Parser  parser  
[BugLab_Variable_Misuse]^return new Node ( Token.WHILE, body, body, lineno, charno ) ;^357^^^^^355^358^return new Node ( Token.WHILE, cond, body, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createWhile [RETURN_TYPE] Node   Node cond Node body int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  body  cond  
[BugLab_Variable_Misuse]^return new Node ( Token.WHILE, cond, cond, lineno, charno ) ;^357^^^^^355^358^return new Node ( Token.WHILE, cond, body, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createWhile [RETURN_TYPE] Node   Node cond Node body int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  body  cond  
[BugLab_Variable_Misuse]^return new Node ( Token.WHILE, cond, body, lineno, lineno ) ;^357^^^^^355^358^return new Node ( Token.WHILE, cond, body, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createWhile [RETURN_TYPE] Node   Node cond Node body int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  body  cond  
[BugLab_Argument_Swapping]^return new Node ( Token.WHILE, body, cond, lineno, charno ) ;^357^^^^^355^358^return new Node ( Token.WHILE, cond, body, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createWhile [RETURN_TYPE] Node   Node cond Node body int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  body  cond  
[BugLab_Argument_Swapping]^return new Node ( body, cond, Token.WHILE, lineno, charno ) ;^357^^^^^355^358^return new Node ( Token.WHILE, cond, body, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createWhile [RETURN_TYPE] Node   Node cond Node body int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  body  cond  
[BugLab_Argument_Swapping]^return new Node ( Token.WHILE, cond, body, charno, lineno ) ;^357^^^^^355^358^return new Node ( Token.WHILE, cond, body, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createWhile [RETURN_TYPE] Node   Node cond Node body int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  body  cond  
[BugLab_Argument_Swapping]^return new Node ( charno, cond, body, lineno, Token.WHILE ) ;^357^^^^^355^358^return new Node ( Token.WHILE, cond, body, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createWhile [RETURN_TYPE] Node   Node cond Node body int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  body  cond  
[BugLab_Argument_Swapping]^return new Node ( lineno, cond, body, Token.WHILE, charno ) ;^357^^^^^355^358^return new Node ( Token.WHILE, cond, body, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createWhile [RETURN_TYPE] Node   Node cond Node body int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  body  cond  
[BugLab_Argument_Swapping]^return new Node ( cond, Token.WHILE, body, lineno, charno ) ;^357^^^^^355^358^return new Node ( Token.WHILE, cond, body, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createWhile [RETURN_TYPE] Node   Node cond Node body int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  body  cond  
[BugLab_Variable_Misuse]^return new Node ( Token.DO, body, cond, charno, charno ) ;^365^^^^^363^366^return new Node ( Token.DO, body, cond, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createDoWhile [RETURN_TYPE] Node   Node body Node cond int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  body  cond  
[BugLab_Argument_Swapping]^return new Node ( Token.DO, charno, cond, lineno, body ) ;^365^^^^^363^366^return new Node ( Token.DO, body, cond, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createDoWhile [RETURN_TYPE] Node   Node body Node cond int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  body  cond  
[BugLab_Argument_Swapping]^return new Node ( cond, body, Token.DO, lineno, charno ) ;^365^^^^^363^366^return new Node ( Token.DO, body, cond, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createDoWhile [RETURN_TYPE] Node   Node body Node cond int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  body  cond  
[BugLab_Argument_Swapping]^return new Node ( lineno, body, cond, Token.DO, charno ) ;^365^^^^^363^366^return new Node ( Token.DO, body, cond, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createDoWhile [RETURN_TYPE] Node   Node body Node cond int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  body  cond  
[BugLab_Argument_Swapping]^return new Node ( Token.DO, body, cond, charno, lineno ) ;^365^^^^^363^366^return new Node ( Token.DO, body, cond, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createDoWhile [RETURN_TYPE] Node   Node body Node cond int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  body  cond  
[BugLab_Variable_Misuse]^return new Node ( Token.DO, body, cond, lineno, lineno ) ;^365^^^^^363^366^return new Node ( Token.DO, body, cond, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createDoWhile [RETURN_TYPE] Node   Node body Node cond int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  body  cond  
[BugLab_Argument_Swapping]^return new Node ( Token.DO, cond, body, lineno, charno ) ;^365^^^^^363^366^return new Node ( Token.DO, body, cond, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createDoWhile [RETURN_TYPE] Node   Node body Node cond int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  body  cond  
[BugLab_Variable_Misuse]^return new Node ( Token.FOR, test, test, incr, body, lineno, charno ) ;^374^^^^^371^375^return new Node ( Token.FOR, init, test, incr, body, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createFor [RETURN_TYPE] Node   Node init Node test Node incr Node body int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  body  incr  init  test  
[BugLab_Variable_Misuse]^return new Node ( Token.FOR, init, incr, incr, body, lineno, charno ) ;^374^^^^^371^375^return new Node ( Token.FOR, init, test, incr, body, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createFor [RETURN_TYPE] Node   Node init Node test Node incr Node body int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  body  incr  init  test  
[BugLab_Variable_Misuse]^return new Node ( Token.FOR, init, test, test, body, lineno, charno ) ;^374^^^^^371^375^return new Node ( Token.FOR, init, test, incr, body, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createFor [RETURN_TYPE] Node   Node init Node test Node incr Node body int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  body  incr  init  test  
[BugLab_Variable_Misuse]^return new Node ( Token.FOR, init, test, incr, test, lineno, charno ) ;^374^^^^^371^375^return new Node ( Token.FOR, init, test, incr, body, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createFor [RETURN_TYPE] Node   Node init Node test Node incr Node body int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  body  incr  init  test  
[BugLab_Argument_Swapping]^return new Node ( Token.FOR, incr, test, init, body, lineno, charno ) ;^374^^^^^371^375^return new Node ( Token.FOR, init, test, incr, body, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createFor [RETURN_TYPE] Node   Node init Node test Node incr Node body int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  body  incr  init  test  
[BugLab_Argument_Swapping]^return new Node ( Token.FOR, init, body, incr, test, lineno, charno ) ;^374^^^^^371^375^return new Node ( Token.FOR, init, test, incr, body, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createFor [RETURN_TYPE] Node   Node init Node test Node incr Node body int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  body  incr  init  test  
[BugLab_Argument_Swapping]^return new Node ( Token.FOR, body, test, incr, init, lineno, charno ) ;^374^^^^^371^375^return new Node ( Token.FOR, init, test, incr, body, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createFor [RETURN_TYPE] Node   Node init Node test Node incr Node body int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  body  incr  init  test  
[BugLab_Argument_Swapping]^return new Node ( Token.FOR, init, test, incr, body, charno, lineno ) ;^374^^^^^371^375^return new Node ( Token.FOR, init, test, incr, body, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createFor [RETURN_TYPE] Node   Node init Node test Node incr Node body int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  body  incr  init  test  
[BugLab_Argument_Swapping]^return new Node ( Token.FOR, init, test, charno, body, lineno, incr ) ;^374^^^^^371^375^return new Node ( Token.FOR, init, test, incr, body, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createFor [RETURN_TYPE] Node   Node init Node test Node incr Node body int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  body  incr  init  test  
[BugLab_Argument_Swapping]^return new Node ( test, init, Token.FOR, incr, body, lineno, charno ) ;^374^^^^^371^375^return new Node ( Token.FOR, init, test, incr, body, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createFor [RETURN_TYPE] Node   Node init Node test Node incr Node body int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  body  incr  init  test  
[BugLab_Variable_Misuse]^return new Node ( Token.FOR, init, test, init, body, lineno, charno ) ;^374^^^^^371^375^return new Node ( Token.FOR, init, test, incr, body, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createFor [RETURN_TYPE] Node   Node init Node test Node incr Node body int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  body  incr  init  test  
[BugLab_Argument_Swapping]^return new Node ( Token.FOR, init, incr, test, body, lineno, charno ) ;^374^^^^^371^375^return new Node ( Token.FOR, init, test, incr, body, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createFor [RETURN_TYPE] Node   Node init Node test Node incr Node body int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  body  incr  init  test  
[BugLab_Argument_Swapping]^return new Node ( Token.FOR, init, test, body, incr, lineno, charno ) ;^374^^^^^371^375^return new Node ( Token.FOR, init, test, incr, body, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createFor [RETURN_TYPE] Node   Node init Node test Node incr Node body int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  body  incr  init  test  
[BugLab_Argument_Swapping]^return new Node ( Token.FOR, init, test, lineno, body, incr, charno ) ;^374^^^^^371^375^return new Node ( Token.FOR, init, test, incr, body, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createFor [RETURN_TYPE] Node   Node init Node test Node incr Node body int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  body  incr  init  test  
[BugLab_Argument_Swapping]^return new Node ( incr, init, test, Token.FOR, body, lineno, charno ) ;^374^^^^^371^375^return new Node ( Token.FOR, init, test, incr, body, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createFor [RETURN_TYPE] Node   Node init Node test Node incr Node body int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  body  incr  init  test  
[BugLab_Variable_Misuse]^return new Node ( Token.FOR, lhs, body, body, lineno, charno ) ;^384^^^^^381^385^return new Node ( Token.FOR, lhs, obj, body, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createForIn [RETURN_TYPE] Node   Node lhs Node obj Node body int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  body  lhs  obj  
[BugLab_Variable_Misuse]^return new Node ( Token.FOR, lhs, obj, obj, lineno, charno ) ;^384^^^^^381^385^return new Node ( Token.FOR, lhs, obj, body, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createForIn [RETURN_TYPE] Node   Node lhs Node obj Node body int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  body  lhs  obj  
[BugLab_Variable_Misuse]^return new Node ( Token.FOR, lhs, obj, body, charno, charno ) ;^384^^^^^381^385^return new Node ( Token.FOR, lhs, obj, body, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createForIn [RETURN_TYPE] Node   Node lhs Node obj Node body int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  body  lhs  obj  
[BugLab_Argument_Swapping]^return new Node ( Token.FOR, obj, lhs, body, lineno, charno ) ;^384^^^^^381^385^return new Node ( Token.FOR, lhs, obj, body, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createForIn [RETURN_TYPE] Node   Node lhs Node obj Node body int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  body  lhs  obj  
[BugLab_Argument_Swapping]^return new Node ( Token.FOR, lhs, charno, body, lineno, obj ) ;^384^^^^^381^385^return new Node ( Token.FOR, lhs, obj, body, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createForIn [RETURN_TYPE] Node   Node lhs Node obj Node body int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  body  lhs  obj  
[BugLab_Argument_Swapping]^return new Node ( Token.FOR, lhs, body, obj, lineno, charno ) ;^384^^^^^381^385^return new Node ( Token.FOR, lhs, obj, body, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createForIn [RETURN_TYPE] Node   Node lhs Node obj Node body int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  body  lhs  obj  
[BugLab_Argument_Swapping]^return new Node ( Token.FOR, lhs, lineno, body, obj, charno ) ;^384^^^^^381^385^return new Node ( Token.FOR, lhs, obj, body, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createForIn [RETURN_TYPE] Node   Node lhs Node obj Node body int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  body  lhs  obj  
[BugLab_Argument_Swapping]^return new Node ( Token.FOR, lhs, obj, body, charno, lineno ) ;^384^^^^^381^385^return new Node ( Token.FOR, lhs, obj, body, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createForIn [RETURN_TYPE] Node   Node lhs Node obj Node body int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  body  lhs  obj  
[BugLab_Argument_Swapping]^return new Node ( body, lhs, obj, Token.FOR, lineno, charno ) ;^384^^^^^381^385^return new Node ( Token.FOR, lhs, obj, body, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createForIn [RETURN_TYPE] Node   Node lhs Node obj Node body int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  body  lhs  obj  
[BugLab_Variable_Misuse]^return new Node ( Token.FOR, obj, obj, body, lineno, charno ) ;^384^^^^^381^385^return new Node ( Token.FOR, lhs, obj, body, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createForIn [RETURN_TYPE] Node   Node lhs Node obj Node body int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  body  lhs  obj  
[BugLab_Variable_Misuse]^return new Node ( Token.FOR, lhs, lhs, body, lineno, charno ) ;^384^^^^^381^385^return new Node ( Token.FOR, lhs, obj, body, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createForIn [RETURN_TYPE] Node   Node lhs Node obj Node body int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  body  lhs  obj  
[BugLab_Variable_Misuse]^return new Node ( Token.FOR, lhs, obj, lhs, lineno, charno ) ;^384^^^^^381^385^return new Node ( Token.FOR, lhs, obj, body, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createForIn [RETURN_TYPE] Node   Node lhs Node obj Node body int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  body  lhs  obj  
[BugLab_Argument_Swapping]^return new Node ( Token.FOR, body, obj, lhs, lineno, charno ) ;^384^^^^^381^385^return new Node ( Token.FOR, lhs, obj, body, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createForIn [RETURN_TYPE] Node   Node lhs Node obj Node body int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  body  lhs  obj  
[BugLab_Argument_Swapping]^return new Node ( charno, lhs, obj, body, lineno, Token.FOR ) ;^384^^^^^381^385^return new Node ( Token.FOR, lhs, obj, body, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createForIn [RETURN_TYPE] Node   Node lhs Node obj Node body int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  body  lhs  obj  
[BugLab_Variable_Misuse]^if  ( tryBlock == null )  {^393^^^^^390^399^if  ( finallyBlock == null )  {^[CLASS] IRFactory  [METHOD] createTryCatchFinally [RETURN_TYPE] Node   Node tryBlock Node catchBlocks Node finallyBlock int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  catchBlocks  finallyBlock  tryBlock  
[BugLab_Wrong_Operator]^if  ( finallyBlock != null )  {^393^^^^^390^399^if  ( finallyBlock == null )  {^[CLASS] IRFactory  [METHOD] createTryCatchFinally [RETURN_TYPE] Node   Node tryBlock Node catchBlocks Node finallyBlock int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  catchBlocks  finallyBlock  tryBlock  
[BugLab_Variable_Misuse]^return new Node ( Token.TRY, finallyBlock, catchBlocks, lineno, charno ) ;^394^395^^^^390^399^return new Node ( Token.TRY, tryBlock, catchBlocks, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createTryCatchFinally [RETURN_TYPE] Node   Node tryBlock Node catchBlocks Node finallyBlock int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  catchBlocks  finallyBlock  tryBlock  
[BugLab_Variable_Misuse]^return new Node ( Token.TRY, tryBlock, finallyBlock, lineno, charno ) ;^394^395^^^^390^399^return new Node ( Token.TRY, tryBlock, catchBlocks, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createTryCatchFinally [RETURN_TYPE] Node   Node tryBlock Node catchBlocks Node finallyBlock int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  catchBlocks  finallyBlock  tryBlock  
[BugLab_Variable_Misuse]^return new Node ( Token.TRY, tryBlock, catchBlocks, charno, charno ) ;^394^395^^^^390^399^return new Node ( Token.TRY, tryBlock, catchBlocks, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createTryCatchFinally [RETURN_TYPE] Node   Node tryBlock Node catchBlocks Node finallyBlock int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  catchBlocks  finallyBlock  tryBlock  
[BugLab_Variable_Misuse]^return new Node ( null, tryBlock, catchBlocks, lineno, charno ) ;^394^395^^^^390^399^return new Node ( Token.TRY, tryBlock, catchBlocks, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createTryCatchFinally [RETURN_TYPE] Node   Node tryBlock Node catchBlocks Node finallyBlock int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  catchBlocks  finallyBlock  tryBlock  
[BugLab_Argument_Swapping]^return new Node ( Token.TRY, lineno, catchBlocks, tryBlock, charno ) ;^394^395^^^^390^399^return new Node ( Token.TRY, tryBlock, catchBlocks, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createTryCatchFinally [RETURN_TYPE] Node   Node tryBlock Node catchBlocks Node finallyBlock int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  catchBlocks  finallyBlock  tryBlock  
[BugLab_Argument_Swapping]^return new Node ( catchBlocks, tryBlock, Token.TRY, lineno, charno ) ;^394^395^^^^390^399^return new Node ( Token.TRY, tryBlock, catchBlocks, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createTryCatchFinally [RETURN_TYPE] Node   Node tryBlock Node catchBlocks Node finallyBlock int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  catchBlocks  finallyBlock  tryBlock  
[BugLab_Argument_Swapping]^return new Node ( Token.TRY, tryBlock, lineno, catchBlocks, charno ) ;^394^395^^^^390^399^return new Node ( Token.TRY, tryBlock, catchBlocks, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createTryCatchFinally [RETURN_TYPE] Node   Node tryBlock Node catchBlocks Node finallyBlock int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  catchBlocks  finallyBlock  tryBlock  
[BugLab_Argument_Swapping]^return new Node ( Token.TRY, tryBlock, catchBlocks, charno, lineno ) ;^394^395^^^^390^399^return new Node ( Token.TRY, tryBlock, catchBlocks, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createTryCatchFinally [RETURN_TYPE] Node   Node tryBlock Node catchBlocks Node finallyBlock int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  catchBlocks  finallyBlock  tryBlock  
[BugLab_Argument_Swapping]^return new Node ( lineno, tryBlock, catchBlocks, Token.TRY, charno ) ;^394^395^^^^390^399^return new Node ( Token.TRY, tryBlock, catchBlocks, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createTryCatchFinally [RETURN_TYPE] Node   Node tryBlock Node catchBlocks Node finallyBlock int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  catchBlocks  finallyBlock  tryBlock  
[BugLab_Variable_Misuse]^return new Node ( Token.TRY, tryBlock, catchBlocks, lineno, lineno ) ;^394^395^^^^390^399^return new Node ( Token.TRY, tryBlock, catchBlocks, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createTryCatchFinally [RETURN_TYPE] Node   Node tryBlock Node catchBlocks Node finallyBlock int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  catchBlocks  finallyBlock  tryBlock  
[BugLab_Argument_Swapping]^return new Node ( Token.TRY, catchBlocks, tryBlock, lineno, charno ) ;^394^395^^^^390^399^return new Node ( Token.TRY, tryBlock, catchBlocks, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createTryCatchFinally [RETURN_TYPE] Node   Node tryBlock Node catchBlocks Node finallyBlock int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  catchBlocks  finallyBlock  tryBlock  
[BugLab_Argument_Swapping]^return new Node ( charno, tryBlock, catchBlocks, lineno, Token.TRY ) ;^394^395^^^^390^399^return new Node ( Token.TRY, tryBlock, catchBlocks, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createTryCatchFinally [RETURN_TYPE] Node   Node tryBlock Node catchBlocks Node finallyBlock int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  catchBlocks  finallyBlock  tryBlock  
[BugLab_Argument_Swapping]^return new Node ( Token.TRY, tryBlock, charno, lineno, catchBlocks ) ;^394^395^^^^390^399^return new Node ( Token.TRY, tryBlock, catchBlocks, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createTryCatchFinally [RETURN_TYPE] Node   Node tryBlock Node catchBlocks Node finallyBlock int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  catchBlocks  finallyBlock  tryBlock  
[BugLab_Argument_Swapping]^return new Node ( Token.TRY, charno, catchBlocks, lineno, tryBlock ) ;^394^395^^^^390^399^return new Node ( Token.TRY, tryBlock, catchBlocks, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createTryCatchFinally [RETURN_TYPE] Node   Node tryBlock Node catchBlocks Node finallyBlock int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  catchBlocks  finallyBlock  tryBlock  
[BugLab_Argument_Swapping]^return new Node ( tryBlock, Token.TRY, catchBlocks, lineno, charno ) ;^394^395^^^^390^399^return new Node ( Token.TRY, tryBlock, catchBlocks, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createTryCatchFinally [RETURN_TYPE] Node   Node tryBlock Node catchBlocks Node finallyBlock int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  catchBlocks  finallyBlock  tryBlock  
[BugLab_Variable_Misuse]^return new Node ( Token.TRY, finallyBlock, catchBlocks, finallyBlock, lineno, charno ) ;^397^398^^^^390^399^return new Node ( Token.TRY, tryBlock, catchBlocks, finallyBlock, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createTryCatchFinally [RETURN_TYPE] Node   Node tryBlock Node catchBlocks Node finallyBlock int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  catchBlocks  finallyBlock  tryBlock  
[BugLab_Variable_Misuse]^return new Node ( Token.TRY, tryBlock, finallyBlock, finallyBlock, lineno, charno ) ;^397^398^^^^390^399^return new Node ( Token.TRY, tryBlock, catchBlocks, finallyBlock, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createTryCatchFinally [RETURN_TYPE] Node   Node tryBlock Node catchBlocks Node finallyBlock int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  catchBlocks  finallyBlock  tryBlock  
[BugLab_Variable_Misuse]^return new Node ( Token.TRY, tryBlock, catchBlocks, tryBlock, lineno, charno ) ;^397^398^^^^390^399^return new Node ( Token.TRY, tryBlock, catchBlocks, finallyBlock, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createTryCatchFinally [RETURN_TYPE] Node   Node tryBlock Node catchBlocks Node finallyBlock int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  catchBlocks  finallyBlock  tryBlock  
[BugLab_Variable_Misuse]^return new Node ( Token.TRY, tryBlock, catchBlocks, finallyBlock, charno, charno ) ;^397^398^^^^390^399^return new Node ( Token.TRY, tryBlock, catchBlocks, finallyBlock, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createTryCatchFinally [RETURN_TYPE] Node   Node tryBlock Node catchBlocks Node finallyBlock int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  catchBlocks  finallyBlock  tryBlock  
[BugLab_Argument_Swapping]^return new Node ( Token.TRY, finallyBlock, catchBlocks, tryBlock, lineno, charno ) ;^397^398^^^^390^399^return new Node ( Token.TRY, tryBlock, catchBlocks, finallyBlock, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createTryCatchFinally [RETURN_TYPE] Node   Node tryBlock Node catchBlocks Node finallyBlock int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  catchBlocks  finallyBlock  tryBlock  
[BugLab_Argument_Swapping]^return new Node ( Token.TRY, catchBlocks, tryBlock, finallyBlock, lineno, charno ) ;^397^398^^^^390^399^return new Node ( Token.TRY, tryBlock, catchBlocks, finallyBlock, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createTryCatchFinally [RETURN_TYPE] Node   Node tryBlock Node catchBlocks Node finallyBlock int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  catchBlocks  finallyBlock  tryBlock  
[BugLab_Argument_Swapping]^return new Node ( Token.TRY, tryBlock, catchBlocks, finallyBlock, charno, lineno ) ;^397^398^^^^390^399^return new Node ( Token.TRY, tryBlock, catchBlocks, finallyBlock, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createTryCatchFinally [RETURN_TYPE] Node   Node tryBlock Node catchBlocks Node finallyBlock int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  catchBlocks  finallyBlock  tryBlock  
[BugLab_Argument_Swapping]^return new Node ( Token.TRY, tryBlock, catchBlocks, charno, lineno, finallyBlock ) ;^397^398^^^^390^399^return new Node ( Token.TRY, tryBlock, catchBlocks, finallyBlock, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createTryCatchFinally [RETURN_TYPE] Node   Node tryBlock Node catchBlocks Node finallyBlock int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  catchBlocks  finallyBlock  tryBlock  
[BugLab_Argument_Swapping]^return new Node ( catchBlocks, tryBlock, Token.TRY, finallyBlock, lineno, charno ) ;^397^398^^^^390^399^return new Node ( Token.TRY, tryBlock, catchBlocks, finallyBlock, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createTryCatchFinally [RETURN_TYPE] Node   Node tryBlock Node catchBlocks Node finallyBlock int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  catchBlocks  finallyBlock  tryBlock  
[BugLab_Variable_Misuse]^return new Node ( Token.TRY, catchBlocks, catchBlocks, finallyBlock, lineno, charno ) ;^397^398^^^^390^399^return new Node ( Token.TRY, tryBlock, catchBlocks, finallyBlock, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createTryCatchFinally [RETURN_TYPE] Node   Node tryBlock Node catchBlocks Node finallyBlock int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  catchBlocks  finallyBlock  tryBlock  
[BugLab_Variable_Misuse]^return new Node ( Token.TRY, tryBlock, tryBlock, finallyBlock, lineno, charno ) ;^397^398^^^^390^399^return new Node ( Token.TRY, tryBlock, catchBlocks, finallyBlock, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createTryCatchFinally [RETURN_TYPE] Node   Node tryBlock Node catchBlocks Node finallyBlock int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  catchBlocks  finallyBlock  tryBlock  
[BugLab_Variable_Misuse]^return new Node ( Token.TRY, tryBlock, catchBlocks, catchBlocks, lineno, charno ) ;^397^398^^^^390^399^return new Node ( Token.TRY, tryBlock, catchBlocks, finallyBlock, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createTryCatchFinally [RETURN_TYPE] Node   Node tryBlock Node catchBlocks Node finallyBlock int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  catchBlocks  finallyBlock  tryBlock  
[BugLab_Variable_Misuse]^return new Node ( Token.TRY, tryBlock, catchBlocks, finallyBlock, lineno, lineno ) ;^397^398^^^^390^399^return new Node ( Token.TRY, tryBlock, catchBlocks, finallyBlock, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createTryCatchFinally [RETURN_TYPE] Node   Node tryBlock Node catchBlocks Node finallyBlock int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  catchBlocks  finallyBlock  tryBlock  
[BugLab_Argument_Swapping]^return new Node ( Token.TRY, tryBlock, finallyBlock, catchBlocks, lineno, charno ) ;^397^398^^^^390^399^return new Node ( Token.TRY, tryBlock, catchBlocks, finallyBlock, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createTryCatchFinally [RETURN_TYPE] Node   Node tryBlock Node catchBlocks Node finallyBlock int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  catchBlocks  finallyBlock  tryBlock  
[BugLab_Argument_Swapping]^return new Node ( charno, tryBlock, catchBlocks, finallyBlock, lineno, Token.TRY ) ;^397^398^^^^390^399^return new Node ( Token.TRY, tryBlock, catchBlocks, finallyBlock, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createTryCatchFinally [RETURN_TYPE] Node   Node tryBlock Node catchBlocks Node finallyBlock int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  catchBlocks  finallyBlock  tryBlock  
[BugLab_Variable_Misuse]^return new Node ( Token.WITH, obj, body, charno, charno ) ;^410^^^^^408^411^return new Node ( Token.WITH, obj, body, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createWith [RETURN_TYPE] Node   Node obj Node body int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  body  obj  
[BugLab_Variable_Misuse]^return new Node ( Token.WITH, obj, body, lineno, lineno ) ;^410^^^^^408^411^return new Node ( Token.WITH, obj, body, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createWith [RETURN_TYPE] Node   Node obj Node body int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  body  obj  
[BugLab_Argument_Swapping]^return new Node ( Token.WITH, charno, body, lineno, obj ) ;^410^^^^^408^411^return new Node ( Token.WITH, obj, body, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createWith [RETURN_TYPE] Node   Node obj Node body int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  body  obj  
[BugLab_Argument_Swapping]^return new Node ( Token.WITH, body, obj, lineno, charno ) ;^410^^^^^408^411^return new Node ( Token.WITH, obj, body, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createWith [RETURN_TYPE] Node   Node obj Node body int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  body  obj  
[BugLab_Argument_Swapping]^return new Node ( Token.WITH, obj, body, charno, lineno ) ;^410^^^^^408^411^return new Node ( Token.WITH, obj, body, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createWith [RETURN_TYPE] Node   Node obj Node body int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  body  obj  
[BugLab_Argument_Swapping]^return new Node ( lineno, obj, body, Token.WITH, charno ) ;^410^^^^^408^411^return new Node ( Token.WITH, obj, body, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createWith [RETURN_TYPE] Node   Node obj Node body int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  body  obj  
[BugLab_Variable_Misuse]^return new Node ( Token.WITH, body, body, lineno, charno ) ;^410^^^^^408^411^return new Node ( Token.WITH, obj, body, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createWith [RETURN_TYPE] Node   Node obj Node body int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  body  obj  
[BugLab_Variable_Misuse]^return new Node ( Token.WITH, obj, obj, lineno, charno ) ;^410^^^^^408^411^return new Node ( Token.WITH, obj, body, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createWith [RETURN_TYPE] Node   Node obj Node body int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  body  obj  
[BugLab_Argument_Swapping]^return new Node ( body, obj, Token.WITH, lineno, charno ) ;^410^^^^^408^411^return new Node ( Token.WITH, obj, body, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createWith [RETURN_TYPE] Node   Node obj Node body int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  body  obj  
[BugLab_Variable_Misuse]^Node result = new Node ( Token.DOTQUERY, result, body, lineno, charno ) ;^419^^^^^416^421^Node result = new Node ( Token.DOTQUERY, obj, body, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createDotQuery [RETURN_TYPE] Node   Node obj Node body int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  body  obj  result  
[BugLab_Variable_Misuse]^Node result = new Node ( Token.DOTQUERY, obj, result, lineno, charno ) ;^419^^^^^416^421^Node result = new Node ( Token.DOTQUERY, obj, body, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createDotQuery [RETURN_TYPE] Node   Node obj Node body int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  body  obj  result  
[BugLab_Variable_Misuse]^Node result = new Node ( Token.DOTQUERY, obj, body, lineno, lineno ) ;^419^^^^^416^421^Node result = new Node ( Token.DOTQUERY, obj, body, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createDotQuery [RETURN_TYPE] Node   Node obj Node body int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  body  obj  result  
[BugLab_Argument_Swapping]^Node result = new Node ( Token.DOTQUERY, body, obj, lineno, charno ) ;^419^^^^^416^421^Node result = new Node ( Token.DOTQUERY, obj, body, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createDotQuery [RETURN_TYPE] Node   Node obj Node body int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  body  obj  result  
[BugLab_Argument_Swapping]^Node result = new Node ( Token.DOTQUERY, obj, body, charno, lineno ) ;^419^^^^^416^421^Node result = new Node ( Token.DOTQUERY, obj, body, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createDotQuery [RETURN_TYPE] Node   Node obj Node body int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  body  obj  result  
[BugLab_Argument_Swapping]^Node result = new Node ( body, obj, Token.DOTQUERY, lineno, charno ) ;^419^^^^^416^421^Node result = new Node ( Token.DOTQUERY, obj, body, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createDotQuery [RETURN_TYPE] Node   Node obj Node body int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  body  obj  result  
[BugLab_Variable_Misuse]^Node result = new Node ( Token.DOTQUERY, body, body, lineno, charno ) ;^419^^^^^416^421^Node result = new Node ( Token.DOTQUERY, obj, body, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createDotQuery [RETURN_TYPE] Node   Node obj Node body int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  body  obj  result  
[BugLab_Variable_Misuse]^Node result = new Node ( Token.DOTQUERY, obj, obj, lineno, charno ) ;^419^^^^^416^421^Node result = new Node ( Token.DOTQUERY, obj, body, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createDotQuery [RETURN_TYPE] Node   Node obj Node body int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  body  obj  result  
[BugLab_Variable_Misuse]^Node result = new Node ( Token.DOTQUERY, obj, body, charno, charno ) ;^419^^^^^416^421^Node result = new Node ( Token.DOTQUERY, obj, body, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createDotQuery [RETURN_TYPE] Node   Node obj Node body int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  body  obj  result  
[BugLab_Argument_Swapping]^Node result = new Node ( Token.DOTQUERY, obj, lineno, body, charno ) ;^419^^^^^416^421^Node result = new Node ( Token.DOTQUERY, obj, body, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createDotQuery [RETURN_TYPE] Node   Node obj Node body int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  body  obj  result  
[BugLab_Variable_Misuse]^return obj;^420^^^^^416^421^return result;^[CLASS] IRFactory  [METHOD] createDotQuery [RETURN_TYPE] Node   Node obj Node body int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  body  obj  result  
[BugLab_Variable_Misuse]^if  ( lineno != 0 )  {^428^^^^^423^445^if  ( skipCount != 0 )  {^[CLASS] IRFactory  [METHOD] createArrayLiteral [RETURN_TYPE] Node   ObjArray elems int skipCount int lineno int charno [VARIABLES] ObjArray  elems  int[]  skipIndexes  boolean  int  charno  i  j  length  lineno  skipCount  Parser  parser  Node  array  elem  
[BugLab_Wrong_Operator]^if  ( skipCount <= 0 )  {^428^^^^^423^445^if  ( skipCount != 0 )  {^[CLASS] IRFactory  [METHOD] createArrayLiteral [RETURN_TYPE] Node   ObjArray elems int skipCount int lineno int charno [VARIABLES] ObjArray  elems  int[]  skipIndexes  boolean  int  charno  i  j  length  lineno  skipCount  Parser  parser  Node  array  elem  
[BugLab_Wrong_Literal]^if  ( skipCount != j )  {^428^^^^^423^445^if  ( skipCount != 0 )  {^[CLASS] IRFactory  [METHOD] createArrayLiteral [RETURN_TYPE] Node   ObjArray elems int skipCount int lineno int charno [VARIABLES] ObjArray  elems  int[]  skipIndexes  boolean  int  charno  i  j  length  lineno  skipCount  Parser  parser  Node  array  elem  
[BugLab_Variable_Misuse]^Node array = new Node ( Token.ARRAYLIT, skipCount, charno ) ;^431^^^^^423^445^Node array = new Node ( Token.ARRAYLIT, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createArrayLiteral [RETURN_TYPE] Node   ObjArray elems int skipCount int lineno int charno [VARIABLES] ObjArray  elems  int[]  skipIndexes  boolean  int  charno  i  j  length  lineno  skipCount  Parser  parser  Node  array  elem  
[BugLab_Variable_Misuse]^Node array = new Node ( Token.ARRAYLIT, lineno, skipCount ) ;^431^^^^^423^445^Node array = new Node ( Token.ARRAYLIT, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createArrayLiteral [RETURN_TYPE] Node   ObjArray elems int skipCount int lineno int charno [VARIABLES] ObjArray  elems  int[]  skipIndexes  boolean  int  charno  i  j  length  lineno  skipCount  Parser  parser  Node  array  elem  
[BugLab_Argument_Swapping]^Node array = new Node ( Token.ARRAYLIT, charno, lineno ) ;^431^^^^^423^445^Node array = new Node ( Token.ARRAYLIT, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createArrayLiteral [RETURN_TYPE] Node   ObjArray elems int skipCount int lineno int charno [VARIABLES] ObjArray  elems  int[]  skipIndexes  boolean  int  charno  i  j  length  lineno  skipCount  Parser  parser  Node  array  elem  
[BugLab_Argument_Swapping]^Node array = new Node ( lineno, Token.ARRAYLIT, charno ) ;^431^^^^^423^445^Node array = new Node ( Token.ARRAYLIT, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createArrayLiteral [RETURN_TYPE] Node   ObjArray elems int skipCount int lineno int charno [VARIABLES] ObjArray  elems  int[]  skipIndexes  boolean  int  charno  i  j  length  lineno  skipCount  Parser  parser  Node  array  elem  
[BugLab_Argument_Swapping]^Node array = new Node ( charno, lineno, Token.ARRAYLIT ) ;^431^^^^^423^445^Node array = new Node ( Token.ARRAYLIT, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createArrayLiteral [RETURN_TYPE] Node   ObjArray elems int skipCount int lineno int charno [VARIABLES] ObjArray  elems  int[]  skipIndexes  boolean  int  charno  i  j  length  lineno  skipCount  Parser  parser  Node  array  elem  
[BugLab_Wrong_Operator]^if  ( elem == null )  {^434^^^^^423^445^if  ( elem != null )  {^[CLASS] IRFactory  [METHOD] createArrayLiteral [RETURN_TYPE] Node   ObjArray elems int skipCount int lineno int charno [VARIABLES] ObjArray  elems  int[]  skipIndexes  boolean  int  charno  i  j  length  lineno  skipCount  Parser  parser  Node  array  elem  
[BugLab_Variable_Misuse]^skipIndexes[j] = skipCount;^437^^^^^423^445^skipIndexes[j] = i;^[CLASS] IRFactory  [METHOD] createArrayLiteral [RETURN_TYPE] Node   ObjArray elems int skipCount int lineno int charno [VARIABLES] ObjArray  elems  int[]  skipIndexes  boolean  int  charno  i  j  length  lineno  skipCount  Parser  parser  Node  array  elem  
[BugLab_Variable_Misuse]^for  ( skipCountnt i = 0, j = 0; i != length; ++i )  {^432^^^^^423^445^for  ( int i = 0, j = 0; i != length; ++i )  {^[CLASS] IRFactory  [METHOD] createArrayLiteral [RETURN_TYPE] Node   ObjArray elems int skipCount int lineno int charno [VARIABLES] ObjArray  elems  int[]  skipIndexes  boolean  int  charno  i  j  length  lineno  skipCount  Parser  parser  Node  array  elem  
[BugLab_Argument_Swapping]^for  ( jnt i = 0, i = 0; i != length; ++i )  {^432^^^^^423^445^for  ( int i = 0, j = 0; i != length; ++i )  {^[CLASS] IRFactory  [METHOD] createArrayLiteral [RETURN_TYPE] Node   ObjArray elems int skipCount int lineno int charno [VARIABLES] ObjArray  elems  int[]  skipIndexes  boolean  int  charno  i  j  length  lineno  skipCount  Parser  parser  Node  array  elem  
[BugLab_Argument_Swapping]^for  ( lengthnt i = 0, j = 0; i != i; ++i )  {^432^^^^^423^445^for  ( int i = 0, j = 0; i != length; ++i )  {^[CLASS] IRFactory  [METHOD] createArrayLiteral [RETURN_TYPE] Node   ObjArray elems int skipCount int lineno int charno [VARIABLES] ObjArray  elems  int[]  skipIndexes  boolean  int  charno  i  j  length  lineno  skipCount  Parser  parser  Node  array  elem  
[BugLab_Argument_Swapping]^for  ( int i = 0, length = 0; i != j; ++i )  {^432^^^^^423^445^for  ( int i = 0, j = 0; i != length; ++i )  {^[CLASS] IRFactory  [METHOD] createArrayLiteral [RETURN_TYPE] Node   ObjArray elems int skipCount int lineno int charno [VARIABLES] ObjArray  elems  int[]  skipIndexes  boolean  int  charno  i  j  length  lineno  skipCount  Parser  parser  Node  array  elem  
[BugLab_Wrong_Operator]^for  ( int i = 0, j = 0; i >= length; ++i )  {^432^^^^^423^445^for  ( int i = 0, j = 0; i != length; ++i )  {^[CLASS] IRFactory  [METHOD] createArrayLiteral [RETURN_TYPE] Node   ObjArray elems int skipCount int lineno int charno [VARIABLES] ObjArray  elems  int[]  skipIndexes  boolean  int  charno  i  j  length  lineno  skipCount  Parser  parser  Node  array  elem  
[BugLab_Wrong_Operator]^for  ( int i = 0, j = 0; i == length; ++i )  {^432^^^^^423^445^for  ( int i = 0, j = 0; i != length; ++i )  {^[CLASS] IRFactory  [METHOD] createArrayLiteral [RETURN_TYPE] Node   ObjArray elems int skipCount int lineno int charno [VARIABLES] ObjArray  elems  int[]  skipIndexes  boolean  int  charno  i  j  length  lineno  skipCount  Parser  parser  Node  array  elem  
[BugLab_Wrong_Literal]^for  ( int i = charno, j = charno; i != length; ++i )  {^432^^^^^423^445^for  ( int i = 0, j = 0; i != length; ++i )  {^[CLASS] IRFactory  [METHOD] createArrayLiteral [RETURN_TYPE] Node   ObjArray elems int skipCount int lineno int charno [VARIABLES] ObjArray  elems  int[]  skipIndexes  boolean  int  charno  i  j  length  lineno  skipCount  Parser  parser  Node  array  elem  
[BugLab_Wrong_Literal]^for  ( int i = lineno, j = lineno; i != length; ++i )  {^432^^^^^423^445^for  ( int i = 0, j = 0; i != length; ++i )  {^[CLASS] IRFactory  [METHOD] createArrayLiteral [RETURN_TYPE] Node   ObjArray elems int skipCount int lineno int charno [VARIABLES] ObjArray  elems  int[]  skipIndexes  boolean  int  charno  i  j  length  lineno  skipCount  Parser  parser  Node  array  elem  
[BugLab_Variable_Misuse]^if  ( array != null )  {^434^^^^^423^445^if  ( elem != null )  {^[CLASS] IRFactory  [METHOD] createArrayLiteral [RETURN_TYPE] Node   ObjArray elems int skipCount int lineno int charno [VARIABLES] ObjArray  elems  int[]  skipIndexes  boolean  int  charno  i  j  length  lineno  skipCount  Parser  parser  Node  array  elem  
[BugLab_Variable_Misuse]^Node elem =  ( Node ) elems.get ( skipCount ) ;^433^^^^^423^445^Node elem =  ( Node ) elems.get ( i ) ;^[CLASS] IRFactory  [METHOD] createArrayLiteral [RETURN_TYPE] Node   ObjArray elems int skipCount int lineno int charno [VARIABLES] ObjArray  elems  int[]  skipIndexes  boolean  int  charno  i  j  length  lineno  skipCount  Parser  parser  Node  array  elem  
[BugLab_Argument_Swapping]^Node elem =  ( Node ) i.get ( elems ) ;^433^^^^^423^445^Node elem =  ( Node ) elems.get ( i ) ;^[CLASS] IRFactory  [METHOD] createArrayLiteral [RETURN_TYPE] Node   ObjArray elems int skipCount int lineno int charno [VARIABLES] ObjArray  elems  int[]  skipIndexes  boolean  int  charno  i  j  length  lineno  skipCount  Parser  parser  Node  array  elem  
[BugLab_Variable_Misuse]^Node elem =  ( Node ) elems.get ( lineno ) ;^433^^^^^423^445^Node elem =  ( Node ) elems.get ( i ) ;^[CLASS] IRFactory  [METHOD] createArrayLiteral [RETURN_TYPE] Node   ObjArray elems int skipCount int lineno int charno [VARIABLES] ObjArray  elems  int[]  skipIndexes  boolean  int  charno  i  j  length  lineno  skipCount  Parser  parser  Node  array  elem  
[BugLab_Variable_Misuse]^skipIndexes[j] = lineno;^437^^^^^423^445^skipIndexes[j] = i;^[CLASS] IRFactory  [METHOD] createArrayLiteral [RETURN_TYPE] Node   ObjArray elems int skipCount int lineno int charno [VARIABLES] ObjArray  elems  int[]  skipIndexes  boolean  int  charno  i  j  length  lineno  skipCount  Parser  parser  Node  array  elem  
[BugLab_Wrong_Literal]^for  ( int i = j, j = j; i != length; ++i )  {^432^^^^^423^445^for  ( int i = 0, j = 0; i != length; ++i )  {^[CLASS] IRFactory  [METHOD] createArrayLiteral [RETURN_TYPE] Node   ObjArray elems int skipCount int lineno int charno [VARIABLES] ObjArray  elems  int[]  skipIndexes  boolean  int  charno  i  j  length  lineno  skipCount  Parser  parser  Node  array  elem  
[BugLab_Variable_Misuse]^if  ( lineno != 0 )  {^441^^^^^423^445^if  ( skipCount != 0 )  {^[CLASS] IRFactory  [METHOD] createArrayLiteral [RETURN_TYPE] Node   ObjArray elems int skipCount int lineno int charno [VARIABLES] ObjArray  elems  int[]  skipIndexes  boolean  int  charno  i  j  length  lineno  skipCount  Parser  parser  Node  array  elem  
[BugLab_Wrong_Operator]^if  ( skipCount <= 0 )  {^441^^^^^423^445^if  ( skipCount != 0 )  {^[CLASS] IRFactory  [METHOD] createArrayLiteral [RETURN_TYPE] Node   ObjArray elems int skipCount int lineno int charno [VARIABLES] ObjArray  elems  int[]  skipIndexes  boolean  int  charno  i  j  length  lineno  skipCount  Parser  parser  Node  array  elem  
[BugLab_Wrong_Literal]^if  ( skipCount != charno )  {^441^^^^^423^445^if  ( skipCount != 0 )  {^[CLASS] IRFactory  [METHOD] createArrayLiteral [RETURN_TYPE] Node   ObjArray elems int skipCount int lineno int charno [VARIABLES] ObjArray  elems  int[]  skipIndexes  boolean  int  charno  i  j  length  lineno  skipCount  Parser  parser  Node  array  elem  
[BugLab_Variable_Misuse]^return elem;^444^^^^^423^445^return array;^[CLASS] IRFactory  [METHOD] createArrayLiteral [RETURN_TYPE] Node   ObjArray elems int skipCount int lineno int charno [VARIABLES] ObjArray  elems  int[]  skipIndexes  boolean  int  charno  i  j  length  lineno  skipCount  Parser  parser  Node  array  elem  
[BugLab_Variable_Misuse]^Node object = new Node ( Token.OBJECTLIT, i, charno ) ;^452^^^^^450^461^Node object = new Node ( Token.OBJECTLIT, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createObjectLiteral [RETURN_TYPE] Node   ObjArray obj int lineno int charno [VARIABLES] ObjArray  obj  boolean  int  charno  i  lineno  Parser  parser  Node  n  object  
[BugLab_Variable_Misuse]^Node object = new Node ( Token.OBJECTLIT, lineno, lineno ) ;^452^^^^^450^461^Node object = new Node ( Token.OBJECTLIT, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createObjectLiteral [RETURN_TYPE] Node   ObjArray obj int lineno int charno [VARIABLES] ObjArray  obj  boolean  int  charno  i  lineno  Parser  parser  Node  n  object  
[BugLab_Argument_Swapping]^Node object = new Node ( Token.OBJECTLIT, charno, lineno ) ;^452^^^^^450^461^Node object = new Node ( Token.OBJECTLIT, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createObjectLiteral [RETURN_TYPE] Node   ObjArray obj int lineno int charno [VARIABLES] ObjArray  obj  boolean  int  charno  i  lineno  Parser  parser  Node  n  object  
[BugLab_Argument_Swapping]^Node object = new Node ( charno, lineno, Token.OBJECTLIT ) ;^452^^^^^450^461^Node object = new Node ( Token.OBJECTLIT, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createObjectLiteral [RETURN_TYPE] Node   ObjArray obj int lineno int charno [VARIABLES] ObjArray  obj  boolean  int  charno  i  lineno  Parser  parser  Node  n  object  
[BugLab_Argument_Swapping]^Node object = new Node ( lineno, Token.OBJECTLIT, charno ) ;^452^^^^^450^461^Node object = new Node ( Token.OBJECTLIT, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createObjectLiteral [RETURN_TYPE] Node   ObjArray obj int lineno int charno [VARIABLES] ObjArray  obj  boolean  int  charno  i  lineno  Parser  parser  Node  n  object  
[BugLab_Variable_Misuse]^for  ( linenont i = 0; i < obj.size (  ) ; i += 2 )  {^453^^^^^450^461^for  ( int i = 0; i < obj.size (  ) ; i += 2 )  {^[CLASS] IRFactory  [METHOD] createObjectLiteral [RETURN_TYPE] Node   ObjArray obj int lineno int charno [VARIABLES] ObjArray  obj  boolean  int  charno  i  lineno  Parser  parser  Node  n  object  
[BugLab_Wrong_Operator]^for  ( int i = 0; i <= obj.size (  ) ; i += 2 )  {^453^^^^^450^461^for  ( int i = 0; i < obj.size (  ) ; i += 2 )  {^[CLASS] IRFactory  [METHOD] createObjectLiteral [RETURN_TYPE] Node   ObjArray obj int lineno int charno [VARIABLES] ObjArray  obj  boolean  int  charno  i  lineno  Parser  parser  Node  n  object  
[BugLab_Wrong_Operator]^for  >>  ( int i = 0; i < obj.size (  ) ; i += 2 )  {^453^^^^^450^461^for  ( int i = 0; i < obj.size (  ) ; i += 2 )  {^[CLASS] IRFactory  [METHOD] createObjectLiteral [RETURN_TYPE] Node   ObjArray obj int lineno int charno [VARIABLES] ObjArray  obj  boolean  int  charno  i  lineno  Parser  parser  Node  n  object  
[BugLab_Wrong_Literal]^for  ( int i = lineno; i < obj.size (  ) ; i += 2 )  {^453^^^^^450^461^for  ( int i = 0; i < obj.size (  ) ; i += 2 )  {^[CLASS] IRFactory  [METHOD] createObjectLiteral [RETURN_TYPE] Node   ObjArray obj int lineno int charno [VARIABLES] ObjArray  obj  boolean  int  charno  i  lineno  Parser  parser  Node  n  object  
[BugLab_Wrong_Literal]^for  ( int i = 0; i < obj.size (  ) ; i += charno )  {^453^^^^^450^461^for  ( int i = 0; i < obj.size (  ) ; i += 2 )  {^[CLASS] IRFactory  [METHOD] createObjectLiteral [RETURN_TYPE] Node   ObjArray obj int lineno int charno [VARIABLES] ObjArray  obj  boolean  int  charno  i  lineno  Parser  parser  Node  n  object  
[BugLab_Variable_Misuse]^n =  ( Node ) obj.get ( lineno + 1 ) ;^456^^^^^450^461^n =  ( Node ) obj.get ( i + 1 ) ;^[CLASS] IRFactory  [METHOD] createObjectLiteral [RETURN_TYPE] Node   ObjArray obj int lineno int charno [VARIABLES] ObjArray  obj  boolean  int  charno  i  lineno  Parser  parser  Node  n  object  
[BugLab_Argument_Swapping]^n =  ( Node ) i.get ( obj + 1 ) ;^456^^^^^450^461^n =  ( Node ) obj.get ( i + 1 ) ;^[CLASS] IRFactory  [METHOD] createObjectLiteral [RETURN_TYPE] Node   ObjArray obj int lineno int charno [VARIABLES] ObjArray  obj  boolean  int  charno  i  lineno  Parser  parser  Node  n  object  
[BugLab_Wrong_Operator]^n =  ( Node ) obj.get ( i  <<  1 ) ;^456^^^^^450^461^n =  ( Node ) obj.get ( i + 1 ) ;^[CLASS] IRFactory  [METHOD] createObjectLiteral [RETURN_TYPE] Node   ObjArray obj int lineno int charno [VARIABLES] ObjArray  obj  boolean  int  charno  i  lineno  Parser  parser  Node  n  object  
[BugLab_Wrong_Literal]^n =  ( Node ) obj.get ( i  ) ;^456^^^^^450^461^n =  ( Node ) obj.get ( i + 1 ) ;^[CLASS] IRFactory  [METHOD] createObjectLiteral [RETURN_TYPE] Node   ObjArray obj int lineno int charno [VARIABLES] ObjArray  obj  boolean  int  charno  i  lineno  Parser  parser  Node  n  object  
[BugLab_Variable_Misuse]^Node n =  ( Node ) obj.get ( lineno ) ;^454^^^^^450^461^Node n =  ( Node ) obj.get ( i ) ;^[CLASS] IRFactory  [METHOD] createObjectLiteral [RETURN_TYPE] Node   ObjArray obj int lineno int charno [VARIABLES] ObjArray  obj  boolean  int  charno  i  lineno  Parser  parser  Node  n  object  
[BugLab_Argument_Swapping]^Node n =  ( Node ) i.get ( obj ) ;^454^^^^^450^461^Node n =  ( Node ) obj.get ( i ) ;^[CLASS] IRFactory  [METHOD] createObjectLiteral [RETURN_TYPE] Node   ObjArray obj int lineno int charno [VARIABLES] ObjArray  obj  boolean  int  charno  i  lineno  Parser  parser  Node  n  object  
[BugLab_Wrong_Operator]^n =  ( Node ) obj.get ( i  <  1 ) ;^456^^^^^450^461^n =  ( Node ) obj.get ( i + 1 ) ;^[CLASS] IRFactory  [METHOD] createObjectLiteral [RETURN_TYPE] Node   ObjArray obj int lineno int charno [VARIABLES] ObjArray  obj  boolean  int  charno  i  lineno  Parser  parser  Node  n  object  
[BugLab_Wrong_Operator]^for  ( int i -= 0; i < obj.size (  ) ; i += 2 )  {^453^^^^^450^461^for  ( int i = 0; i < obj.size (  ) ; i += 2 )  {^[CLASS] IRFactory  [METHOD] createObjectLiteral [RETURN_TYPE] Node   ObjArray obj int lineno int charno [VARIABLES] ObjArray  obj  boolean  int  charno  i  lineno  Parser  parser  Node  n  object  
[BugLab_Wrong_Operator]^n =  ( Node ) obj.get ( i  >  1 ) ;^456^^^^^450^461^n =  ( Node ) obj.get ( i + 1 ) ;^[CLASS] IRFactory  [METHOD] createObjectLiteral [RETURN_TYPE] Node   ObjArray obj int lineno int charno [VARIABLES] ObjArray  obj  boolean  int  charno  i  lineno  Parser  parser  Node  n  object  
[BugLab_Wrong_Literal]^n =  ( Node ) obj.get ( i + lineno ) ;^456^^^^^450^461^n =  ( Node ) obj.get ( i + 1 ) ;^[CLASS] IRFactory  [METHOD] createObjectLiteral [RETURN_TYPE] Node   ObjArray obj int lineno int charno [VARIABLES] ObjArray  obj  boolean  int  charno  i  lineno  Parser  parser  Node  n  object  
[BugLab_Wrong_Operator]^n =  ( Node ) obj.get ( i  ==  1 ) ;^456^^^^^450^461^n =  ( Node ) obj.get ( i + 1 ) ;^[CLASS] IRFactory  [METHOD] createObjectLiteral [RETURN_TYPE] Node   ObjArray obj int lineno int charno [VARIABLES] ObjArray  obj  boolean  int  charno  i  lineno  Parser  parser  Node  n  object  
[BugLab_Variable_Misuse]^return n;^460^^^^^450^461^return object;^[CLASS] IRFactory  [METHOD] createObjectLiteral [RETURN_TYPE] Node   ObjArray obj int lineno int charno [VARIABLES] ObjArray  obj  boolean  int  charno  i  lineno  Parser  parser  Node  n  object  
[BugLab_Variable_Misuse]^return string.length (  )  == 0 ? new Node ( Token.REGEXP, Node.newString ( string, lineno, charno ) , lineno, charno )^468^469^470^471^^466^476^return flags.length (  )  == 0 ? new Node ( Token.REGEXP, Node.newString ( string, lineno, charno ) , lineno, charno )^[CLASS] IRFactory  [METHOD] createRegExp [RETURN_TYPE] Node   String string String flags int lineno int charno [VARIABLES] String  flags  string  boolean  int  charno  lineno  Parser  parser  
[BugLab_Variable_Misuse]^return flags.length (  )  == 0 ? new Node ( Token.REGEXP, Node.newString ( flags, lineno, charno ) , lineno, charno )^468^469^470^471^^466^476^return flags.length (  )  == 0 ? new Node ( Token.REGEXP, Node.newString ( string, lineno, charno ) , lineno, charno )^[CLASS] IRFactory  [METHOD] createRegExp [RETURN_TYPE] Node   String string String flags int lineno int charno [VARIABLES] String  flags  string  boolean  int  charno  lineno  Parser  parser  
[BugLab_Variable_Misuse]^return flags.length (  )  == 0 ? new Node ( Token.REGEXP, Node.newString ( string, charno, charno ) , lineno, charno )^468^469^470^471^^466^476^return flags.length (  )  == 0 ? new Node ( Token.REGEXP, Node.newString ( string, lineno, charno ) , lineno, charno )^[CLASS] IRFactory  [METHOD] createRegExp [RETURN_TYPE] Node   String string String flags int lineno int charno [VARIABLES] String  flags  string  boolean  int  charno  lineno  Parser  parser  
[BugLab_Argument_Swapping]^return charno.length (  )  == 0 ? new Node ( Token.REGEXP, Node.newString ( string, lineno, flags ) , lineno, charno )^468^469^470^471^^466^476^return flags.length (  )  == 0 ? new Node ( Token.REGEXP, Node.newString ( string, lineno, charno ) , lineno, charno )^[CLASS] IRFactory  [METHOD] createRegExp [RETURN_TYPE] Node   String string String flags int lineno int charno [VARIABLES] String  flags  string  boolean  int  charno  lineno  Parser  parser  
[BugLab_Argument_Swapping]^return string.length (  )  == 0 ? new Node ( Token.REGEXP, Node.newString ( flags, lineno, charno ) , lineno, charno )^468^469^470^471^^466^476^return flags.length (  )  == 0 ? new Node ( Token.REGEXP, Node.newString ( string, lineno, charno ) , lineno, charno )^[CLASS] IRFactory  [METHOD] createRegExp [RETURN_TYPE] Node   String string String flags int lineno int charno [VARIABLES] String  flags  string  boolean  int  charno  lineno  Parser  parser  
[BugLab_Argument_Swapping]^return flags.length (  )  == 0 ? new Node ( Token.REGEXP, Node.newString ( string, charno, lineno ) , lineno, charno )^468^469^470^471^^466^476^return flags.length (  )  == 0 ? new Node ( Token.REGEXP, Node.newString ( string, lineno, charno ) , lineno, charno )^[CLASS] IRFactory  [METHOD] createRegExp [RETURN_TYPE] Node   String string String flags int lineno int charno [VARIABLES] String  flags  string  boolean  int  charno  lineno  Parser  parser  
[BugLab_Argument_Swapping]^return flags.length (  )  == 0 ? new Node ( charno, Node.newString ( string, lineno, Token.REGEXP ) , lineno, charno )^468^469^470^471^^466^476^return flags.length (  )  == 0 ? new Node ( Token.REGEXP, Node.newString ( string, lineno, charno ) , lineno, charno )^[CLASS] IRFactory  [METHOD] createRegExp [RETURN_TYPE] Node   String string String flags int lineno int charno [VARIABLES] String  flags  string  boolean  int  charno  lineno  Parser  parser  
[BugLab_Wrong_Operator]^return flags.length (  )  < 0 ? new Node ( Token.REGEXP, Node.newString ( string, lineno, charno ) , lineno, charno )^468^469^470^471^^466^476^return flags.length (  )  == 0 ? new Node ( Token.REGEXP, Node.newString ( string, lineno, charno ) , lineno, charno )^[CLASS] IRFactory  [METHOD] createRegExp [RETURN_TYPE] Node   String string String flags int lineno int charno [VARIABLES] String  flags  string  boolean  int  charno  lineno  Parser  parser  
[BugLab_Variable_Misuse]^? new Node ( Token.REGEXP, Node.newString ( flags, lineno, charno ) , lineno, charno ) : new Node ( Token.REGEXP,^469^470^471^472^^466^476^? new Node ( Token.REGEXP, Node.newString ( string, lineno, charno ) , lineno, charno ) : new Node ( Token.REGEXP,^[CLASS] IRFactory  [METHOD] createRegExp [RETURN_TYPE] Node   String string String flags int lineno int charno [VARIABLES] String  flags  string  boolean  int  charno  lineno  Parser  parser  
[BugLab_Variable_Misuse]^? new Node ( Token.REGEXP, Node.newString ( string, lineno, lineno ) , lineno, charno ) : new Node ( Token.REGEXP,^469^470^471^472^^466^476^? new Node ( Token.REGEXP, Node.newString ( string, lineno, charno ) , lineno, charno ) : new Node ( Token.REGEXP,^[CLASS] IRFactory  [METHOD] createRegExp [RETURN_TYPE] Node   String string String flags int lineno int charno [VARIABLES] String  flags  string  boolean  int  charno  lineno  Parser  parser  
[BugLab_Argument_Swapping]^? new Node ( string, Node.newString ( Token.REGEXP, lineno, charno ) , lineno, charno ) : new Node ( Token.REGEXP,^469^470^471^472^^466^476^? new Node ( Token.REGEXP, Node.newString ( string, lineno, charno ) , lineno, charno ) : new Node ( Token.REGEXP,^[CLASS] IRFactory  [METHOD] createRegExp [RETURN_TYPE] Node   String string String flags int lineno int charno [VARIABLES] String  flags  string  boolean  int  charno  lineno  Parser  parser  
[BugLab_Argument_Swapping]^? new Node ( lineno, Node.newString ( string, Token.REGEXP, charno ) , lineno, charno ) : new Node ( Token.REGEXP,^469^470^471^472^^466^476^? new Node ( Token.REGEXP, Node.newString ( string, lineno, charno ) , lineno, charno ) : new Node ( Token.REGEXP,^[CLASS] IRFactory  [METHOD] createRegExp [RETURN_TYPE] Node   String string String flags int lineno int charno [VARIABLES] String  flags  string  boolean  int  charno  lineno  Parser  parser  
[BugLab_Argument_Swapping]^? new Node ( Token.REGEXP, Node.newString ( string, charno, lineno ) , lineno, charno ) : new Node ( Token.REGEXP,^469^470^471^472^^466^476^? new Node ( Token.REGEXP, Node.newString ( string, lineno, charno ) , lineno, charno ) : new Node ( Token.REGEXP,^[CLASS] IRFactory  [METHOD] createRegExp [RETURN_TYPE] Node   String string String flags int lineno int charno [VARIABLES] String  flags  string  boolean  int  charno  lineno  Parser  parser  
[BugLab_Argument_Swapping]^? new Node ( charno, Node.newString ( string, lineno, Token.REGEXP ) , lineno, charno ) : new Node ( Token.REGEXP,^469^470^471^472^^466^476^? new Node ( Token.REGEXP, Node.newString ( string, lineno, charno ) , lineno, charno ) : new Node ( Token.REGEXP,^[CLASS] IRFactory  [METHOD] createRegExp [RETURN_TYPE] Node   String string String flags int lineno int charno [VARIABLES] String  flags  string  boolean  int  charno  lineno  Parser  parser  
[BugLab_Variable_Misuse]^: new Node ( Token.REGEXP, Node.newString ( flags, lineno, charno ) , Node.newString ( flags, lineno, charno ) , lineno, charno ) ;^472^473^474^475^^466^476^: new Node ( Token.REGEXP, Node.newString ( string, lineno, charno ) , Node.newString ( flags, lineno, charno ) , lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createRegExp [RETURN_TYPE] Node   String string String flags int lineno int charno [VARIABLES] String  flags  string  boolean  int  charno  lineno  Parser  parser  
[BugLab_Variable_Misuse]^: new Node ( Token.REGEXP, Node.newString ( string, lineno, lineno ) , Node.newString ( flags, lineno, charno ) , lineno, charno ) ;^472^473^474^475^^466^476^: new Node ( Token.REGEXP, Node.newString ( string, lineno, charno ) , Node.newString ( flags, lineno, charno ) , lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createRegExp [RETURN_TYPE] Node   String string String flags int lineno int charno [VARIABLES] String  flags  string  boolean  int  charno  lineno  Parser  parser  
[BugLab_Variable_Misuse]^: new Node ( Token.REGEXP, Node.newString ( string, lineno, charno ) , Node.newString ( string, lineno, charno ) , lineno, charno ) ;^472^473^474^475^^466^476^: new Node ( Token.REGEXP, Node.newString ( string, lineno, charno ) , Node.newString ( flags, lineno, charno ) , lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createRegExp [RETURN_TYPE] Node   String string String flags int lineno int charno [VARIABLES] String  flags  string  boolean  int  charno  lineno  Parser  parser  
[BugLab_Argument_Swapping]^: new Node ( string, Node.newString ( Token.REGEXP, lineno, charno ) , Node.newString ( flags, lineno, charno ) , lineno, charno ) ;^472^473^474^475^^466^476^: new Node ( Token.REGEXP, Node.newString ( string, lineno, charno ) , Node.newString ( flags, lineno, charno ) , lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createRegExp [RETURN_TYPE] Node   String string String flags int lineno int charno [VARIABLES] String  flags  string  boolean  int  charno  lineno  Parser  parser  
[BugLab_Argument_Swapping]^: new Node ( Token.REGEXP, Node.newString ( string, flags, charno ) , Node.newString ( lineno, lineno, charno ) , lineno, charno ) ;^472^473^474^475^^466^476^: new Node ( Token.REGEXP, Node.newString ( string, lineno, charno ) , Node.newString ( flags, lineno, charno ) , lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createRegExp [RETURN_TYPE] Node   String string String flags int lineno int charno [VARIABLES] String  flags  string  boolean  int  charno  lineno  Parser  parser  
[BugLab_Argument_Swapping]^: new Node ( Token.REGEXP, Node.newString ( string, lineno, flags ) , Node.newString ( charno, lineno, charno ) , lineno, charno ) ;^472^473^474^475^^466^476^: new Node ( Token.REGEXP, Node.newString ( string, lineno, charno ) , Node.newString ( flags, lineno, charno ) , lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createRegExp [RETURN_TYPE] Node   String string String flags int lineno int charno [VARIABLES] String  flags  string  boolean  int  charno  lineno  Parser  parser  
[BugLab_Argument_Swapping]^: new Node ( Token.REGEXP, Node.newString ( flags, lineno, charno ) , Node.newString ( string, lineno, charno ) , lineno, charno ) ;^472^473^474^475^^466^476^: new Node ( Token.REGEXP, Node.newString ( string, lineno, charno ) , Node.newString ( flags, lineno, charno ) , lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createRegExp [RETURN_TYPE] Node   String string String flags int lineno int charno [VARIABLES] String  flags  string  boolean  int  charno  lineno  Parser  parser  
[BugLab_Argument_Swapping]^: new Node ( flags, Node.newString ( string, lineno, charno ) , Node.newString ( Token.REGEXP, lineno, charno ) , lineno, charno ) ;^472^473^474^475^^466^476^: new Node ( Token.REGEXP, Node.newString ( string, lineno, charno ) , Node.newString ( flags, lineno, charno ) , lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createRegExp [RETURN_TYPE] Node   String string String flags int lineno int charno [VARIABLES] String  flags  string  boolean  int  charno  lineno  Parser  parser  
[BugLab_Variable_Misuse]^Node.newString ( flags, lineno, charno ) , lineno, charno ) : new Node ( Token.REGEXP, Node.newString ( string, lineno, charno ) ,^470^471^472^473^^466^476^Node.newString ( string, lineno, charno ) , lineno, charno ) : new Node ( Token.REGEXP, Node.newString ( string, lineno, charno ) ,^[CLASS] IRFactory  [METHOD] createRegExp [RETURN_TYPE] Node   String string String flags int lineno int charno [VARIABLES] String  flags  string  boolean  int  charno  lineno  Parser  parser  
[BugLab_Variable_Misuse]^Node.newString ( string, charno, charno ) , lineno, charno ) : new Node ( Token.REGEXP, Node.newString ( string, lineno, charno ) ,^470^471^472^473^^466^476^Node.newString ( string, lineno, charno ) , lineno, charno ) : new Node ( Token.REGEXP, Node.newString ( string, lineno, charno ) ,^[CLASS] IRFactory  [METHOD] createRegExp [RETURN_TYPE] Node   String string String flags int lineno int charno [VARIABLES] String  flags  string  boolean  int  charno  lineno  Parser  parser  
[BugLab_Argument_Swapping]^Node.newString ( charno, lineno, string ) , lineno, charno ) : new Node ( Token.REGEXP, Node.newString ( string, lineno, charno ) ,^470^471^472^473^^466^476^Node.newString ( string, lineno, charno ) , lineno, charno ) : new Node ( Token.REGEXP, Node.newString ( string, lineno, charno ) ,^[CLASS] IRFactory  [METHOD] createRegExp [RETURN_TYPE] Node   String string String flags int lineno int charno [VARIABLES] String  flags  string  boolean  int  charno  lineno  Parser  parser  
[BugLab_Argument_Swapping]^Node.newString ( string, charno, lineno ) , lineno, charno ) : new Node ( Token.REGEXP, Node.newString ( string, lineno, charno ) ,^470^471^472^473^^466^476^Node.newString ( string, lineno, charno ) , lineno, charno ) : new Node ( Token.REGEXP, Node.newString ( string, lineno, charno ) ,^[CLASS] IRFactory  [METHOD] createRegExp [RETURN_TYPE] Node   String string String flags int lineno int charno [VARIABLES] String  flags  string  boolean  int  charno  lineno  Parser  parser  
[BugLab_Variable_Misuse]^Node.newString ( flags, lineno, charno ) , Node.newString ( flags, lineno, charno ) , lineno, charno ) ;^473^474^475^^^466^476^Node.newString ( string, lineno, charno ) , Node.newString ( flags, lineno, charno ) , lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createRegExp [RETURN_TYPE] Node   String string String flags int lineno int charno [VARIABLES] String  flags  string  boolean  int  charno  lineno  Parser  parser  
[BugLab_Argument_Swapping]^Node.newString ( charno, lineno, string ) , Node.newString ( flags, lineno, charno ) , lineno, charno ) ;^473^474^475^^^466^476^Node.newString ( string, lineno, charno ) , Node.newString ( flags, lineno, charno ) , lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createRegExp [RETURN_TYPE] Node   String string String flags int lineno int charno [VARIABLES] String  flags  string  boolean  int  charno  lineno  Parser  parser  
[BugLab_Argument_Swapping]^Node.newString ( lineno, string, charno ) , Node.newString ( flags, lineno, charno ) , lineno, charno ) ;^473^474^475^^^466^476^Node.newString ( string, lineno, charno ) , Node.newString ( flags, lineno, charno ) , lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createRegExp [RETURN_TYPE] Node   String string String flags int lineno int charno [VARIABLES] String  flags  string  boolean  int  charno  lineno  Parser  parser  
[BugLab_Argument_Swapping]^Node.newString ( string, charno, lineno ) , Node.newString ( flags, lineno, charno ) , lineno, charno ) ;^473^474^475^^^466^476^Node.newString ( string, lineno, charno ) , Node.newString ( flags, lineno, charno ) , lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createRegExp [RETURN_TYPE] Node   String string String flags int lineno int charno [VARIABLES] String  flags  string  boolean  int  charno  lineno  Parser  parser  
[BugLab_Variable_Misuse]^Node.newString ( string, lineno, charno ) , lineno, charno ) ;^474^475^^^^466^476^Node.newString ( flags, lineno, charno ) , lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createRegExp [RETURN_TYPE] Node   String string String flags int lineno int charno [VARIABLES] String  flags  string  boolean  int  charno  lineno  Parser  parser  
[BugLab_Variable_Misuse]^Node.newString ( flags, lineno, lineno ) , lineno, charno ) ;^474^475^^^^466^476^Node.newString ( flags, lineno, charno ) , lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createRegExp [RETURN_TYPE] Node   String string String flags int lineno int charno [VARIABLES] String  flags  string  boolean  int  charno  lineno  Parser  parser  
[BugLab_Argument_Swapping]^Node.newString ( charno, lineno, flags ) , lineno, charno ) ;^474^475^^^^466^476^Node.newString ( flags, lineno, charno ) , lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createRegExp [RETURN_TYPE] Node   String string String flags int lineno int charno [VARIABLES] String  flags  string  boolean  int  charno  lineno  Parser  parser  
[BugLab_Argument_Swapping]^Node.newString ( flags, charno, lineno ) , lineno, charno ) ;^474^475^^^^466^476^Node.newString ( flags, lineno, charno ) , lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createRegExp [RETURN_TYPE] Node   String string String flags int lineno int charno [VARIABLES] String  flags  string  boolean  int  charno  lineno  Parser  parser  
[BugLab_Variable_Misuse]^if  ( ifTrue == null ) return new Node ( Token.IF, cond, ifTrue, lineno, charno ) ;^483^484^^^^481^486^if  ( ifFalse == null ) return new Node ( Token.IF, cond, ifTrue, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createIf [RETURN_TYPE] Node   Node cond Node ifTrue Node ifFalse int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  cond  ifFalse  ifTrue  
[BugLab_Variable_Misuse]^if  ( ifFalse == null ) return new Node ( Token.IF, cond, cond, lineno, charno ) ;^483^484^^^^481^486^if  ( ifFalse == null ) return new Node ( Token.IF, cond, ifTrue, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createIf [RETURN_TYPE] Node   Node cond Node ifTrue Node ifFalse int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  cond  ifFalse  ifTrue  
[BugLab_Variable_Misuse]^if  ( ifFalse == null ) return new Node ( Token.IF, cond, ifTrue, charno, charno ) ;^483^484^^^^481^486^if  ( ifFalse == null ) return new Node ( Token.IF, cond, ifTrue, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createIf [RETURN_TYPE] Node   Node cond Node ifTrue Node ifFalse int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  cond  ifFalse  ifTrue  
[BugLab_Variable_Misuse]^if  ( ifFalse == null ) return new Node ( Token.IF, cond, ifTrue, lineno, lineno ) ;^483^484^^^^481^486^if  ( ifFalse == null ) return new Node ( Token.IF, cond, ifTrue, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createIf [RETURN_TYPE] Node   Node cond Node ifTrue Node ifFalse int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  cond  ifFalse  ifTrue  
[BugLab_Argument_Swapping]^if  ( ifTrue == null ) return new Node ( Token.IF, cond, ifFalse, lineno, charno ) ;^483^484^^^^481^486^if  ( ifFalse == null ) return new Node ( Token.IF, cond, ifTrue, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createIf [RETURN_TYPE] Node   Node cond Node ifTrue Node ifFalse int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  cond  ifFalse  ifTrue  
[BugLab_Argument_Swapping]^if  ( ifFalse == null ) return new Node ( Token.IF, charno, ifTrue, lineno, cond ) ;^483^484^^^^481^486^if  ( ifFalse == null ) return new Node ( Token.IF, cond, ifTrue, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createIf [RETURN_TYPE] Node   Node cond Node ifTrue Node ifFalse int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  cond  ifFalse  ifTrue  
[BugLab_Argument_Swapping]^if  ( ifFalse == null ) return new Node ( Token.IF, ifTrue, cond, lineno, charno ) ;^483^484^^^^481^486^if  ( ifFalse == null ) return new Node ( Token.IF, cond, ifTrue, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createIf [RETURN_TYPE] Node   Node cond Node ifTrue Node ifFalse int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  cond  ifFalse  ifTrue  
[BugLab_Argument_Swapping]^if  ( ifFalse == null ) return new Node ( Token.IF, cond, ifTrue, charno, lineno ) ;^483^484^^^^481^486^if  ( ifFalse == null ) return new Node ( Token.IF, cond, ifTrue, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createIf [RETURN_TYPE] Node   Node cond Node ifTrue Node ifFalse int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  cond  ifFalse  ifTrue  
[BugLab_Argument_Swapping]^if  ( ifFalse == null ) return new Node ( ifTrue, cond, Token.IF, lineno, charno ) ;^483^484^^^^481^486^if  ( ifFalse == null ) return new Node ( Token.IF, cond, ifTrue, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createIf [RETURN_TYPE] Node   Node cond Node ifTrue Node ifFalse int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  cond  ifFalse  ifTrue  
[BugLab_Wrong_Operator]^if  ( ifFalse != null ) return new Node ( Token.IF, cond, ifTrue, lineno, charno ) ;^483^484^^^^481^486^if  ( ifFalse == null ) return new Node ( Token.IF, cond, ifTrue, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createIf [RETURN_TYPE] Node   Node cond Node ifTrue Node ifFalse int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  cond  ifFalse  ifTrue  
[BugLab_Variable_Misuse]^return new Node ( Token.IF, ifTrue, ifTrue, lineno, charno ) ;^484^^^^^481^486^return new Node ( Token.IF, cond, ifTrue, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createIf [RETURN_TYPE] Node   Node cond Node ifTrue Node ifFalse int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  cond  ifFalse  ifTrue  
[BugLab_Variable_Misuse]^return new Node ( Token.IF, cond, ifFalse, lineno, charno ) ;^484^^^^^481^486^return new Node ( Token.IF, cond, ifTrue, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createIf [RETURN_TYPE] Node   Node cond Node ifTrue Node ifFalse int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  cond  ifFalse  ifTrue  
[BugLab_Argument_Swapping]^return new Node ( Token.IF, ifTrue, cond, lineno, charno ) ;^484^^^^^481^486^return new Node ( Token.IF, cond, ifTrue, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createIf [RETURN_TYPE] Node   Node cond Node ifTrue Node ifFalse int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  cond  ifFalse  ifTrue  
[BugLab_Argument_Swapping]^return new Node ( Token.IF, cond, charno, lineno, ifTrue ) ;^484^^^^^481^486^return new Node ( Token.IF, cond, ifTrue, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createIf [RETURN_TYPE] Node   Node cond Node ifTrue Node ifFalse int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  cond  ifFalse  ifTrue  
[BugLab_Argument_Swapping]^return new Node ( Token.IF, lineno, ifTrue, cond, charno ) ;^484^^^^^481^486^return new Node ( Token.IF, cond, ifTrue, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createIf [RETURN_TYPE] Node   Node cond Node ifTrue Node ifFalse int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  cond  ifFalse  ifTrue  
[BugLab_Argument_Swapping]^return new Node ( Token.IF, charno, ifTrue, lineno, cond ) ;^484^^^^^481^486^return new Node ( Token.IF, cond, ifTrue, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createIf [RETURN_TYPE] Node   Node cond Node ifTrue Node ifFalse int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  cond  ifFalse  ifTrue  
[BugLab_Argument_Swapping]^return new Node ( cond, Token.IF, ifTrue, lineno, charno ) ;^484^^^^^481^486^return new Node ( Token.IF, cond, ifTrue, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createIf [RETURN_TYPE] Node   Node cond Node ifTrue Node ifFalse int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  cond  ifFalse  ifTrue  
[BugLab_Variable_Misuse]^return new Node ( Token.IF, ifFalse, ifTrue, lineno, charno ) ;^484^^^^^481^486^return new Node ( Token.IF, cond, ifTrue, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createIf [RETURN_TYPE] Node   Node cond Node ifTrue Node ifFalse int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  cond  ifFalse  ifTrue  
[BugLab_Argument_Swapping]^return new Node ( Token.IF, cond, ifTrue, charno, lineno ) ;^484^^^^^481^486^return new Node ( Token.IF, cond, ifTrue, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createIf [RETURN_TYPE] Node   Node cond Node ifTrue Node ifFalse int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  cond  ifFalse  ifTrue  
[BugLab_Argument_Swapping]^return new Node ( ifTrue, cond, Token.IF, lineno, charno ) ;^484^^^^^481^486^return new Node ( Token.IF, cond, ifTrue, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createIf [RETURN_TYPE] Node   Node cond Node ifTrue Node ifFalse int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  cond  ifFalse  ifTrue  
[BugLab_Variable_Misuse]^return new Node ( Token.IF, cond, ifTrue, charno, charno ) ;^484^^^^^481^486^return new Node ( Token.IF, cond, ifTrue, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createIf [RETURN_TYPE] Node   Node cond Node ifTrue Node ifFalse int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  cond  ifFalse  ifTrue  
[BugLab_Variable_Misuse]^return new Node ( Token.IF, cond, ifTrue, lineno, lineno ) ;^484^^^^^481^486^return new Node ( Token.IF, cond, ifTrue, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createIf [RETURN_TYPE] Node   Node cond Node ifTrue Node ifFalse int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  cond  ifFalse  ifTrue  
[BugLab_Argument_Swapping]^return new Node ( lineno, cond, ifTrue, Token.IF, charno ) ;^484^^^^^481^486^return new Node ( Token.IF, cond, ifTrue, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createIf [RETURN_TYPE] Node   Node cond Node ifTrue Node ifFalse int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  cond  ifFalse  ifTrue  
[BugLab_Variable_Misuse]^return new Node ( Token.IF, cond, ifFalse, ifFalse, lineno, charno ) ;^485^^^^^481^486^return new Node ( Token.IF, cond, ifTrue, ifFalse, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createIf [RETURN_TYPE] Node   Node cond Node ifTrue Node ifFalse int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  cond  ifFalse  ifTrue  
[BugLab_Argument_Swapping]^return new Node ( Token.IF, ifFalse, ifTrue, cond, lineno, charno ) ;^485^^^^^481^486^return new Node ( Token.IF, cond, ifTrue, ifFalse, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createIf [RETURN_TYPE] Node   Node cond Node ifTrue Node ifFalse int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  cond  ifFalse  ifTrue  
[BugLab_Argument_Swapping]^return new Node ( Token.IF, ifTrue, cond, ifFalse, lineno, charno ) ;^485^^^^^481^486^return new Node ( Token.IF, cond, ifTrue, ifFalse, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createIf [RETURN_TYPE] Node   Node cond Node ifTrue Node ifFalse int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  cond  ifFalse  ifTrue  
[BugLab_Argument_Swapping]^return new Node ( Token.IF, lineno, ifTrue, ifFalse, cond, charno ) ;^485^^^^^481^486^return new Node ( Token.IF, cond, ifTrue, ifFalse, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createIf [RETURN_TYPE] Node   Node cond Node ifTrue Node ifFalse int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  cond  ifFalse  ifTrue  
[BugLab_Argument_Swapping]^return new Node ( Token.IF, cond, ifTrue, ifFalse, charno, lineno ) ;^485^^^^^481^486^return new Node ( Token.IF, cond, ifTrue, ifFalse, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createIf [RETURN_TYPE] Node   Node cond Node ifTrue Node ifFalse int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  cond  ifFalse  ifTrue  
[BugLab_Argument_Swapping]^return new Node ( lineno, cond, ifTrue, ifFalse, Token.IF, charno ) ;^485^^^^^481^486^return new Node ( Token.IF, cond, ifTrue, ifFalse, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createIf [RETURN_TYPE] Node   Node cond Node ifTrue Node ifFalse int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  cond  ifFalse  ifTrue  
[BugLab_Variable_Misuse]^return new Node ( Token.IF, ifTrue, ifTrue, ifFalse, lineno, charno ) ;^485^^^^^481^486^return new Node ( Token.IF, cond, ifTrue, ifFalse, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createIf [RETURN_TYPE] Node   Node cond Node ifTrue Node ifFalse int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  cond  ifFalse  ifTrue  
[BugLab_Variable_Misuse]^return new Node ( Token.IF, cond, cond, ifFalse, lineno, charno ) ;^485^^^^^481^486^return new Node ( Token.IF, cond, ifTrue, ifFalse, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createIf [RETURN_TYPE] Node   Node cond Node ifTrue Node ifFalse int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  cond  ifFalse  ifTrue  
[BugLab_Variable_Misuse]^return new Node ( Token.IF, cond, ifTrue, cond, lineno, charno ) ;^485^^^^^481^486^return new Node ( Token.IF, cond, ifTrue, ifFalse, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createIf [RETURN_TYPE] Node   Node cond Node ifTrue Node ifFalse int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  cond  ifFalse  ifTrue  
[BugLab_Variable_Misuse]^return new Node ( Token.IF, cond, ifTrue, ifFalse, charno, charno ) ;^485^^^^^481^486^return new Node ( Token.IF, cond, ifTrue, ifFalse, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createIf [RETURN_TYPE] Node   Node cond Node ifTrue Node ifFalse int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  cond  ifFalse  ifTrue  
[BugLab_Variable_Misuse]^return new Node ( Token.IF, cond, ifTrue, ifFalse, lineno, lineno ) ;^485^^^^^481^486^return new Node ( Token.IF, cond, ifTrue, ifFalse, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createIf [RETURN_TYPE] Node   Node cond Node ifTrue Node ifFalse int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  cond  ifFalse  ifTrue  
[BugLab_Argument_Swapping]^return new Node ( charno, cond, ifTrue, ifFalse, lineno, Token.IF ) ;^485^^^^^481^486^return new Node ( Token.IF, cond, ifTrue, ifFalse, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createIf [RETURN_TYPE] Node   Node cond Node ifTrue Node ifFalse int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  cond  ifFalse  ifTrue  
[BugLab_Variable_Misuse]^return new Node ( Token.HOOK, ifFalse, ifTrue, ifFalse, lineno, charno ) ;^491^^^^^488^492^return new Node ( Token.HOOK, cond, ifTrue, ifFalse, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createCondExpr [RETURN_TYPE] Node   Node cond Node ifTrue Node ifFalse int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  cond  ifFalse  ifTrue  
[BugLab_Variable_Misuse]^return new Node ( Token.HOOK, cond, ifFalse, ifFalse, lineno, charno ) ;^491^^^^^488^492^return new Node ( Token.HOOK, cond, ifTrue, ifFalse, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createCondExpr [RETURN_TYPE] Node   Node cond Node ifTrue Node ifFalse int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  cond  ifFalse  ifTrue  
[BugLab_Argument_Swapping]^return new Node ( Token.HOOK, ifFalse, ifTrue, cond, lineno, charno ) ;^491^^^^^488^492^return new Node ( Token.HOOK, cond, ifTrue, ifFalse, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createCondExpr [RETURN_TYPE] Node   Node cond Node ifTrue Node ifFalse int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  cond  ifFalse  ifTrue  
[BugLab_Argument_Swapping]^return new Node ( Token.HOOK, cond, ifFalse, ifTrue, lineno, charno ) ;^491^^^^^488^492^return new Node ( Token.HOOK, cond, ifTrue, ifFalse, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createCondExpr [RETURN_TYPE] Node   Node cond Node ifTrue Node ifFalse int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  cond  ifFalse  ifTrue  
[BugLab_Argument_Swapping]^return new Node ( Token.HOOK, cond, ifTrue, lineno, ifFalse, charno ) ;^491^^^^^488^492^return new Node ( Token.HOOK, cond, ifTrue, ifFalse, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createCondExpr [RETURN_TYPE] Node   Node cond Node ifTrue Node ifFalse int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  cond  ifFalse  ifTrue  
[BugLab_Argument_Swapping]^return new Node ( Token.HOOK, cond, ifTrue, ifFalse, charno, lineno ) ;^491^^^^^488^492^return new Node ( Token.HOOK, cond, ifTrue, ifFalse, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createCondExpr [RETURN_TYPE] Node   Node cond Node ifTrue Node ifFalse int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  cond  ifFalse  ifTrue  
[BugLab_Argument_Swapping]^return new Node ( charno, cond, ifTrue, ifFalse, lineno, Token.HOOK ) ;^491^^^^^488^492^return new Node ( Token.HOOK, cond, ifTrue, ifFalse, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createCondExpr [RETURN_TYPE] Node   Node cond Node ifTrue Node ifFalse int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  cond  ifFalse  ifTrue  
[BugLab_Variable_Misuse]^return new Node ( Token.HOOK, ifTrue, ifTrue, ifFalse, lineno, charno ) ;^491^^^^^488^492^return new Node ( Token.HOOK, cond, ifTrue, ifFalse, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createCondExpr [RETURN_TYPE] Node   Node cond Node ifTrue Node ifFalse int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  cond  ifFalse  ifTrue  
[BugLab_Variable_Misuse]^return new Node ( Token.HOOK, cond, ifTrue, ifTrue, lineno, charno ) ;^491^^^^^488^492^return new Node ( Token.HOOK, cond, ifTrue, ifFalse, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createCondExpr [RETURN_TYPE] Node   Node cond Node ifTrue Node ifFalse int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  cond  ifFalse  ifTrue  
[BugLab_Variable_Misuse]^return new Node ( Token.HOOK, cond, ifTrue, ifFalse, charno, charno ) ;^491^^^^^488^492^return new Node ( Token.HOOK, cond, ifTrue, ifFalse, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createCondExpr [RETURN_TYPE] Node   Node cond Node ifTrue Node ifFalse int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  cond  ifFalse  ifTrue  
[BugLab_Argument_Swapping]^return new Node ( cond, Token.HOOK, ifTrue, ifFalse, lineno, charno ) ;^491^^^^^488^492^return new Node ( Token.HOOK, cond, ifTrue, ifFalse, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createCondExpr [RETURN_TYPE] Node   Node cond Node ifTrue Node ifFalse int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  cond  ifFalse  ifTrue  
[BugLab_Argument_Swapping]^return new Node ( lineno, cond, ifTrue, ifFalse, Token.HOOK, charno ) ;^491^^^^^488^492^return new Node ( Token.HOOK, cond, ifTrue, ifFalse, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createCondExpr [RETURN_TYPE] Node   Node cond Node ifTrue Node ifFalse int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  cond  ifFalse  ifTrue  
[BugLab_Argument_Swapping]^return new Node ( ifFalse, cond, ifTrue, Token.HOOK, lineno, charno ) ;^491^^^^^488^492^return new Node ( Token.HOOK, cond, ifTrue, ifFalse, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createCondExpr [RETURN_TYPE] Node   Node cond Node ifTrue Node ifFalse int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  cond  ifFalse  ifTrue  
[BugLab_Variable_Misuse]^return new Node ( charno, child, lineno, charno ) ;^499^^^^^497^500^return new Node ( nodeType, child, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createUnary [RETURN_TYPE] Node   int nodeType Node child int lineno int charno [VARIABLES] boolean  int  charno  lineno  nodeType  Parser  parser  Node  child  
[BugLab_Variable_Misuse]^return new Node ( nodeType, child, nodeType, charno ) ;^499^^^^^497^500^return new Node ( nodeType, child, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createUnary [RETURN_TYPE] Node   int nodeType Node child int lineno int charno [VARIABLES] boolean  int  charno  lineno  nodeType  Parser  parser  Node  child  
[BugLab_Variable_Misuse]^return new Node ( nodeType, child, lineno, nodeType ) ;^499^^^^^497^500^return new Node ( nodeType, child, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createUnary [RETURN_TYPE] Node   int nodeType Node child int lineno int charno [VARIABLES] boolean  int  charno  lineno  nodeType  Parser  parser  Node  child  
[BugLab_Argument_Swapping]^return new Node ( charno, child, lineno, nodeType ) ;^499^^^^^497^500^return new Node ( nodeType, child, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createUnary [RETURN_TYPE] Node   int nodeType Node child int lineno int charno [VARIABLES] boolean  int  charno  lineno  nodeType  Parser  parser  Node  child  
[BugLab_Argument_Swapping]^return new Node ( child, nodeType, lineno, charno ) ;^499^^^^^497^500^return new Node ( nodeType, child, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createUnary [RETURN_TYPE] Node   int nodeType Node child int lineno int charno [VARIABLES] boolean  int  charno  lineno  nodeType  Parser  parser  Node  child  
[BugLab_Argument_Swapping]^return new Node ( lineno, child, nodeType, charno ) ;^499^^^^^497^500^return new Node ( nodeType, child, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createUnary [RETURN_TYPE] Node   int nodeType Node child int lineno int charno [VARIABLES] boolean  int  charno  lineno  nodeType  Parser  parser  Node  child  
[BugLab_Variable_Misuse]^return new Node ( lineno, child, lineno, charno ) ;^499^^^^^497^500^return new Node ( nodeType, child, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createUnary [RETURN_TYPE] Node   int nodeType Node child int lineno int charno [VARIABLES] boolean  int  charno  lineno  nodeType  Parser  parser  Node  child  
[BugLab_Variable_Misuse]^return new Node ( nodeType, child, charno, charno ) ;^499^^^^^497^500^return new Node ( nodeType, child, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createUnary [RETURN_TYPE] Node   int nodeType Node child int lineno int charno [VARIABLES] boolean  int  charno  lineno  nodeType  Parser  parser  Node  child  
[BugLab_Variable_Misuse]^return new Node ( nodeType, child, lineno, lineno ) ;^499^^^^^497^500^return new Node ( nodeType, child, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createUnary [RETURN_TYPE] Node   int nodeType Node child int lineno int charno [VARIABLES] boolean  int  charno  lineno  nodeType  Parser  parser  Node  child  
[BugLab_Argument_Swapping]^return new Node ( nodeType, lineno, child, charno ) ;^499^^^^^497^500^return new Node ( nodeType, child, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createUnary [RETURN_TYPE] Node   int nodeType Node child int lineno int charno [VARIABLES] boolean  int  charno  lineno  nodeType  Parser  parser  Node  child  
[BugLab_Argument_Swapping]^return new Node ( nodeType, child, charno, lineno ) ;^499^^^^^497^500^return new Node ( nodeType, child, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createUnary [RETURN_TYPE] Node   int nodeType Node child int lineno int charno [VARIABLES] boolean  int  charno  lineno  nodeType  Parser  parser  Node  child  
[BugLab_Variable_Misuse]^if  ( node.getType (  )  == Token.NAME )  {^505^^^^^502^525^if  ( child.getType (  )  == Token.NAME )  {^[CLASS] IRFactory  [METHOD] createCallOrNew [RETURN_TYPE] Node   int nodeType Node child int lineno int charno [VARIABLES] String  name  boolean  int  charno  lineno  nodeType  type  Parser  parser  Node  child  node  
[BugLab_Argument_Swapping]^if  ( Token.NAME.getType (  )  == child )  {^505^^^^^502^525^if  ( child.getType (  )  == Token.NAME )  {^[CLASS] IRFactory  [METHOD] createCallOrNew [RETURN_TYPE] Node   int nodeType Node child int lineno int charno [VARIABLES] String  name  boolean  int  charno  lineno  nodeType  type  Parser  parser  Node  child  node  
[BugLab_Wrong_Operator]^if  ( child.getType (  )  <= Token.NAME )  {^505^^^^^502^525^if  ( child.getType (  )  == Token.NAME )  {^[CLASS] IRFactory  [METHOD] createCallOrNew [RETURN_TYPE] Node   int nodeType Node child int lineno int charno [VARIABLES] String  name  boolean  int  charno  lineno  nodeType  type  Parser  parser  Node  child  node  
[BugLab_Wrong_Operator]^if  ( child.getType (  )  != Token.NAME )  {^505^^^^^502^525^if  ( child.getType (  )  == Token.NAME )  {^[CLASS] IRFactory  [METHOD] createCallOrNew [RETURN_TYPE] Node   int nodeType Node child int lineno int charno [VARIABLES] String  name  boolean  int  charno  lineno  nodeType  type  Parser  parser  Node  child  node  
[BugLab_Variable_Misuse]^} else if  ( node.getType (  )  == Token.GETPROP )  {^512^^^^^502^525^} else if  ( child.getType (  )  == Token.GETPROP )  {^[CLASS] IRFactory  [METHOD] createCallOrNew [RETURN_TYPE] Node   int nodeType Node child int lineno int charno [VARIABLES] String  name  boolean  int  charno  lineno  nodeType  type  Parser  parser  Node  child  node  
[BugLab_Argument_Swapping]^} else if  ( Token.GETPROP.getType (  )  == child )  {^512^^^^^502^525^} else if  ( child.getType (  )  == Token.GETPROP )  {^[CLASS] IRFactory  [METHOD] createCallOrNew [RETURN_TYPE] Node   int nodeType Node child int lineno int charno [VARIABLES] String  name  boolean  int  charno  lineno  nodeType  type  Parser  parser  Node  child  node  
[BugLab_Wrong_Operator]^} else if  ( child.getType (  )  <= Token.GETPROP )  {^512^^^^^502^525^} else if  ( child.getType (  )  == Token.GETPROP )  {^[CLASS] IRFactory  [METHOD] createCallOrNew [RETURN_TYPE] Node   int nodeType Node child int lineno int charno [VARIABLES] String  name  boolean  int  charno  lineno  nodeType  type  Parser  parser  Node  child  node  
[BugLab_Variable_Misuse]^type = null;^515^^^^^502^525^type = Node.SPECIALCALL_EVAL;^[CLASS] IRFactory  [METHOD] createCallOrNew [RETURN_TYPE] Node   int nodeType Node child int lineno int charno [VARIABLES] String  name  boolean  int  charno  lineno  nodeType  type  Parser  parser  Node  child  node  
[BugLab_Variable_Misuse]^String name = node.getLastChild (  ) .getString (  ) ;^513^^^^^502^525^String name = child.getLastChild (  ) .getString (  ) ;^[CLASS] IRFactory  [METHOD] createCallOrNew [RETURN_TYPE] Node   int nodeType Node child int lineno int charno [VARIABLES] String  name  boolean  int  charno  lineno  nodeType  type  Parser  parser  Node  child  node  
[BugLab_Variable_Misuse]^String name = node.getString (  ) ;^506^^^^^502^525^String name = child.getString (  ) ;^[CLASS] IRFactory  [METHOD] createCallOrNew [RETURN_TYPE] Node   int nodeType Node child int lineno int charno [VARIABLES] String  name  boolean  int  charno  lineno  nodeType  type  Parser  parser  Node  child  node  
[BugLab_Wrong_Operator]^} else if  ( child.getType (  )  != Token.GETPROP )  {^512^^^^^502^525^} else if  ( child.getType (  )  == Token.GETPROP )  {^[CLASS] IRFactory  [METHOD] createCallOrNew [RETURN_TYPE] Node   int nodeType Node child int lineno int charno [VARIABLES] String  name  boolean  int  charno  lineno  nodeType  type  Parser  parser  Node  child  node  
[BugLab_Variable_Misuse]^Node node = new Node ( type, child, lineno, charno ) ;^518^^^^^502^525^Node node = new Node ( nodeType, child, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createCallOrNew [RETURN_TYPE] Node   int nodeType Node child int lineno int charno [VARIABLES] String  name  boolean  int  charno  lineno  nodeType  type  Parser  parser  Node  child  node  
[BugLab_Variable_Misuse]^Node node = new Node ( nodeType, node, lineno, charno ) ;^518^^^^^502^525^Node node = new Node ( nodeType, child, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createCallOrNew [RETURN_TYPE] Node   int nodeType Node child int lineno int charno [VARIABLES] String  name  boolean  int  charno  lineno  nodeType  type  Parser  parser  Node  child  node  
[BugLab_Variable_Misuse]^Node node = new Node ( nodeType, child, type, charno ) ;^518^^^^^502^525^Node node = new Node ( nodeType, child, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createCallOrNew [RETURN_TYPE] Node   int nodeType Node child int lineno int charno [VARIABLES] String  name  boolean  int  charno  lineno  nodeType  type  Parser  parser  Node  child  node  
[BugLab_Variable_Misuse]^Node node = new Node ( nodeType, child, lineno, type ) ;^518^^^^^502^525^Node node = new Node ( nodeType, child, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createCallOrNew [RETURN_TYPE] Node   int nodeType Node child int lineno int charno [VARIABLES] String  name  boolean  int  charno  lineno  nodeType  type  Parser  parser  Node  child  node  
[BugLab_Argument_Swapping]^Node node = new Node ( charno, child, lineno, nodeType ) ;^518^^^^^502^525^Node node = new Node ( nodeType, child, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createCallOrNew [RETURN_TYPE] Node   int nodeType Node child int lineno int charno [VARIABLES] String  name  boolean  int  charno  lineno  nodeType  type  Parser  parser  Node  child  node  
[BugLab_Argument_Swapping]^Node node = new Node ( child, nodeType, lineno, charno ) ;^518^^^^^502^525^Node node = new Node ( nodeType, child, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createCallOrNew [RETURN_TYPE] Node   int nodeType Node child int lineno int charno [VARIABLES] String  name  boolean  int  charno  lineno  nodeType  type  Parser  parser  Node  child  node  
[BugLab_Argument_Swapping]^Node node = new Node ( nodeType, child, charno, lineno ) ;^518^^^^^502^525^Node node = new Node ( nodeType, child, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createCallOrNew [RETURN_TYPE] Node   int nodeType Node child int lineno int charno [VARIABLES] String  name  boolean  int  charno  lineno  nodeType  type  Parser  parser  Node  child  node  
[BugLab_Argument_Swapping]^Node node = new Node ( nodeType, charno, lineno, child ) ;^518^^^^^502^525^Node node = new Node ( nodeType, child, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createCallOrNew [RETURN_TYPE] Node   int nodeType Node child int lineno int charno [VARIABLES] String  name  boolean  int  charno  lineno  nodeType  type  Parser  parser  Node  child  node  
[BugLab_Variable_Misuse]^if  ( nodeType != Node.NON_SPECIALCALL )  {^519^^^^^502^525^if  ( type != Node.NON_SPECIALCALL )  {^[CLASS] IRFactory  [METHOD] createCallOrNew [RETURN_TYPE] Node   int nodeType Node child int lineno int charno [VARIABLES] String  name  boolean  int  charno  lineno  nodeType  type  Parser  parser  Node  child  node  
[BugLab_Argument_Swapping]^if  ( Node.NON_SPECIALCALL != type )  {^519^^^^^502^525^if  ( type != Node.NON_SPECIALCALL )  {^[CLASS] IRFactory  [METHOD] createCallOrNew [RETURN_TYPE] Node   int nodeType Node child int lineno int charno [VARIABLES] String  name  boolean  int  charno  lineno  nodeType  type  Parser  parser  Node  child  node  
[BugLab_Wrong_Operator]^if  ( type == Node.NON_SPECIALCALL )  {^519^^^^^502^525^if  ( type != Node.NON_SPECIALCALL )  {^[CLASS] IRFactory  [METHOD] createCallOrNew [RETURN_TYPE] Node   int nodeType Node child int lineno int charno [VARIABLES] String  name  boolean  int  charno  lineno  nodeType  type  Parser  parser  Node  child  node  
[BugLab_Variable_Misuse]^node.putIntProp ( Node.SPECIALCALL_PROP, nodeType ) ;^522^^^^^502^525^node.putIntProp ( Node.SPECIALCALL_PROP, type ) ;^[CLASS] IRFactory  [METHOD] createCallOrNew [RETURN_TYPE] Node   int nodeType Node child int lineno int charno [VARIABLES] String  name  boolean  int  charno  lineno  nodeType  type  Parser  parser  Node  child  node  
[BugLab_Variable_Misuse]^child = makeReference ( n ) ;^530^^^^^529^556^child = makeReference ( child ) ;^[CLASS] IRFactory  [METHOD] createIncDec [RETURN_TYPE] Node   int nodeType boolean post Node child int lineno int charno [VARIABLES] boolean  post  String  msg  int  charno  childType  lineno  nodeType  Parser  parser  Node  child  n  
[BugLab_Variable_Misuse]^if  ( n == null )  {^531^^^^^529^556^if  ( child == null )  {^[CLASS] IRFactory  [METHOD] createIncDec [RETURN_TYPE] Node   int nodeType boolean post Node child int lineno int charno [VARIABLES] boolean  post  String  msg  int  charno  childType  lineno  nodeType  Parser  parser  Node  child  n  
[BugLab_Wrong_Operator]^if  ( child != null )  {^531^^^^^529^556^if  ( child == null )  {^[CLASS] IRFactory  [METHOD] createIncDec [RETURN_TYPE] Node   int nodeType boolean post Node child int lineno int charno [VARIABLES] boolean  post  String  msg  int  charno  childType  lineno  nodeType  Parser  parser  Node  child  n  
[BugLab_Variable_Misuse]^if  ( lineno == Token.DEC )  {^533^^^^^529^556^if  ( nodeType == Token.DEC )  {^[CLASS] IRFactory  [METHOD] createIncDec [RETURN_TYPE] Node   int nodeType boolean post Node child int lineno int charno [VARIABLES] boolean  post  String  msg  int  charno  childType  lineno  nodeType  Parser  parser  Node  child  n  
[BugLab_Argument_Swapping]^if  ( Token.DEC == nodeType )  {^533^^^^^529^556^if  ( nodeType == Token.DEC )  {^[CLASS] IRFactory  [METHOD] createIncDec [RETURN_TYPE] Node   int nodeType boolean post Node child int lineno int charno [VARIABLES] boolean  post  String  msg  int  charno  childType  lineno  nodeType  Parser  parser  Node  child  n  
[BugLab_Wrong_Operator]^if  ( nodeType != Token.DEC )  {^533^^^^^529^556^if  ( nodeType == Token.DEC )  {^[CLASS] IRFactory  [METHOD] createIncDec [RETURN_TYPE] Node   int nodeType boolean post Node child int lineno int charno [VARIABLES] boolean  post  String  msg  int  charno  childType  lineno  nodeType  Parser  parser  Node  child  n  
[BugLab_Wrong_Operator]^if  ( nodeType >= Token.DEC )  {^533^^^^^529^556^if  ( nodeType == Token.DEC )  {^[CLASS] IRFactory  [METHOD] createIncDec [RETURN_TYPE] Node   int nodeType boolean post Node child int lineno int charno [VARIABLES] boolean  post  String  msg  int  charno  childType  lineno  nodeType  Parser  parser  Node  child  n  
[BugLab_Variable_Misuse]^int nType = child.getType (  ) ;^542^^^^^529^556^int childType = child.getType (  ) ;^[CLASS] IRFactory  [METHOD] createIncDec [RETURN_TYPE] Node   int nodeType boolean post Node child int lineno int charno [VARIABLES] boolean  post  String  msg  int  charno  childType  lineno  nodeType  Parser  parser  Node  child  n  
[BugLab_Variable_Misuse]^return child;^552^^^^^529^556^return n;^[CLASS] IRFactory  [METHOD] createIncDec [RETURN_TYPE] Node   int nodeType boolean post Node child int lineno int charno [VARIABLES] boolean  post  String  msg  int  charno  childType  lineno  nodeType  Parser  parser  Node  child  n  
[BugLab_Variable_Misuse]^Node n = new Node ( lineno, child, lineno, charno ) ;^550^^^^^529^556^Node n = new Node ( nodeType, child, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createIncDec [RETURN_TYPE] Node   int nodeType boolean post Node child int lineno int charno [VARIABLES] boolean  post  String  msg  int  charno  childType  lineno  nodeType  Parser  parser  Node  child  n  
[BugLab_Variable_Misuse]^Node n = new Node ( nodeType, n, lineno, charno ) ;^550^^^^^529^556^Node n = new Node ( nodeType, child, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createIncDec [RETURN_TYPE] Node   int nodeType boolean post Node child int lineno int charno [VARIABLES] boolean  post  String  msg  int  charno  childType  lineno  nodeType  Parser  parser  Node  child  n  
[BugLab_Variable_Misuse]^Node n = new Node ( nodeType, child, lineno, lineno ) ;^550^^^^^529^556^Node n = new Node ( nodeType, child, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createIncDec [RETURN_TYPE] Node   int nodeType boolean post Node child int lineno int charno [VARIABLES] boolean  post  String  msg  int  charno  childType  lineno  nodeType  Parser  parser  Node  child  n  
[BugLab_Argument_Swapping]^Node n = new Node ( charno, child, lineno, nodeType ) ;^550^^^^^529^556^Node n = new Node ( nodeType, child, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createIncDec [RETURN_TYPE] Node   int nodeType boolean post Node child int lineno int charno [VARIABLES] boolean  post  String  msg  int  charno  childType  lineno  nodeType  Parser  parser  Node  child  n  
[BugLab_Argument_Swapping]^Node n = new Node ( nodeType, lineno, child, charno ) ;^550^^^^^529^556^Node n = new Node ( nodeType, child, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createIncDec [RETURN_TYPE] Node   int nodeType boolean post Node child int lineno int charno [VARIABLES] boolean  post  String  msg  int  charno  childType  lineno  nodeType  Parser  parser  Node  child  n  
[BugLab_Argument_Swapping]^Node n = new Node ( lineno, child, nodeType, charno ) ;^550^^^^^529^556^Node n = new Node ( nodeType, child, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createIncDec [RETURN_TYPE] Node   int nodeType boolean post Node child int lineno int charno [VARIABLES] boolean  post  String  msg  int  charno  childType  lineno  nodeType  Parser  parser  Node  child  n  
[BugLab_Argument_Swapping]^Node n = new Node ( nodeType, child, charno, lineno ) ;^550^^^^^529^556^Node n = new Node ( nodeType, child, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createIncDec [RETURN_TYPE] Node   int nodeType boolean post Node child int lineno int charno [VARIABLES] boolean  post  String  msg  int  charno  childType  lineno  nodeType  Parser  parser  Node  child  n  
[BugLab_Variable_Misuse]^Node n = new Node ( nodeType, child, nodeType, charno ) ;^550^^^^^529^556^Node n = new Node ( nodeType, child, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createIncDec [RETURN_TYPE] Node   int nodeType boolean post Node child int lineno int charno [VARIABLES] boolean  post  String  msg  int  charno  childType  lineno  nodeType  Parser  parser  Node  child  n  
[BugLab_Variable_Misuse]^Node n = new Node ( nodeType, child, lineno, nodeType ) ;^550^^^^^529^556^Node n = new Node ( nodeType, child, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createIncDec [RETURN_TYPE] Node   int nodeType boolean post Node child int lineno int charno [VARIABLES] boolean  post  String  msg  int  charno  childType  lineno  nodeType  Parser  parser  Node  child  n  
[BugLab_Wrong_Literal]^n.putIntProp ( Node.INCRDECR_PROP, post ? charno : 0 ) ;^551^^^^^529^556^n.putIntProp ( Node.INCRDECR_PROP, post ? 1 : 0 ) ;^[CLASS] IRFactory  [METHOD] createIncDec [RETURN_TYPE] Node   int nodeType boolean post Node child int lineno int charno [VARIABLES] boolean  post  String  msg  int  charno  childType  lineno  nodeType  Parser  parser  Node  child  n  
[BugLab_Wrong_Literal]^n.putIntProp ( Node.INCRDECR_PROP, post ? 1 : lineno ) ;^551^^^^^529^556^n.putIntProp ( Node.INCRDECR_PROP, post ? 1 : 0 ) ;^[CLASS] IRFactory  [METHOD] createIncDec [RETURN_TYPE] Node   int nodeType boolean post Node child int lineno int charno [VARIABLES] boolean  post  String  msg  int  charno  childType  lineno  nodeType  Parser  parser  Node  child  n  
[BugLab_Variable_Misuse]^if  ( name == null && memberTypeFlags == 0 )  {^562^^^^^558^581^if  ( namespace == null && memberTypeFlags == 0 )  {^[CLASS] IRFactory  [METHOD] createPropertyGet [RETURN_TYPE] Node   Node target String namespace String name int memberTypeFlags int dotLineno int dotCharno int nameLineno int nameCharno [VARIABLES] String  name  namespace  boolean  int  dotCharno  dotLineno  memberTypeFlags  nameCharno  nameLineno  Parser  parser  Node  elem  ref  target  
[BugLab_Variable_Misuse]^if  ( namespacespace == null && memberTypeFlags == 0 )  {^562^^^^^558^581^if  ( namespace == null && memberTypeFlags == 0 )  {^[CLASS] IRFactory  [METHOD] createPropertyGet [RETURN_TYPE] Node   Node target String namespace String name int memberTypeFlags int dotLineno int dotCharno int nameLineno int nameCharno [VARIABLES] String  name  namespace  boolean  int  dotCharno  dotLineno  memberTypeFlags  nameCharno  nameLineno  Parser  parser  Node  elem  ref  target  
[BugLab_Wrong_Operator]^if  ( namespace == null || memberTypeFlags == 0 )  {^562^^^^^558^581^if  ( namespace == null && memberTypeFlags == 0 )  {^[CLASS] IRFactory  [METHOD] createPropertyGet [RETURN_TYPE] Node   Node target String namespace String name int memberTypeFlags int dotLineno int dotCharno int nameLineno int nameCharno [VARIABLES] String  name  namespace  boolean  int  dotCharno  dotLineno  memberTypeFlags  nameCharno  nameLineno  Parser  parser  Node  elem  ref  target  
[BugLab_Wrong_Operator]^if  ( namespace != null && memberTypeFlags == 0 )  {^562^^^^^558^581^if  ( namespace == null && memberTypeFlags == 0 )  {^[CLASS] IRFactory  [METHOD] createPropertyGet [RETURN_TYPE] Node   Node target String namespace String name int memberTypeFlags int dotLineno int dotCharno int nameLineno int nameCharno [VARIABLES] String  name  namespace  boolean  int  dotCharno  dotLineno  memberTypeFlags  nameCharno  nameLineno  Parser  parser  Node  elem  ref  target  
[BugLab_Wrong_Operator]^if  ( namespace == null && memberTypeFlags != 0 )  {^562^^^^^558^581^if  ( namespace == null && memberTypeFlags == 0 )  {^[CLASS] IRFactory  [METHOD] createPropertyGet [RETURN_TYPE] Node   Node target String namespace String name int memberTypeFlags int dotLineno int dotCharno int nameLineno int nameCharno [VARIABLES] String  name  namespace  boolean  int  dotCharno  dotLineno  memberTypeFlags  nameCharno  nameLineno  Parser  parser  Node  elem  ref  target  
[BugLab_Wrong_Literal]^if  ( namespace == null && memberTypeFlags == -1 )  {^562^^^^^558^581^if  ( namespace == null && memberTypeFlags == 0 )  {^[CLASS] IRFactory  [METHOD] createPropertyGet [RETURN_TYPE] Node   Node target String namespace String name int memberTypeFlags int dotLineno int dotCharno int nameLineno int nameCharno [VARIABLES] String  name  namespace  boolean  int  dotCharno  dotLineno  memberTypeFlags  nameCharno  nameLineno  Parser  parser  Node  elem  ref  target  
[BugLab_Variable_Misuse]^if  ( ref == null )  {^563^^^^^558^581^if  ( target == null )  {^[CLASS] IRFactory  [METHOD] createPropertyGet [RETURN_TYPE] Node   Node target String namespace String name int memberTypeFlags int dotLineno int dotCharno int nameLineno int nameCharno [VARIABLES] String  name  namespace  boolean  int  dotCharno  dotLineno  memberTypeFlags  nameCharno  nameLineno  Parser  parser  Node  elem  ref  target  
[BugLab_Wrong_Operator]^if  ( target != null )  {^563^^^^^558^581^if  ( target == null )  {^[CLASS] IRFactory  [METHOD] createPropertyGet [RETURN_TYPE] Node   Node target String namespace String name int memberTypeFlags int dotLineno int dotCharno int nameLineno int nameCharno [VARIABLES] String  name  namespace  boolean  int  dotCharno  dotLineno  memberTypeFlags  nameCharno  nameLineno  Parser  parser  Node  elem  ref  target  
[BugLab_Variable_Misuse]^return createName ( namespace, nameLineno, nameCharno ) ;^564^^^^^558^581^return createName ( name, nameLineno, nameCharno ) ;^[CLASS] IRFactory  [METHOD] createPropertyGet [RETURN_TYPE] Node   Node target String namespace String name int memberTypeFlags int dotLineno int dotCharno int nameLineno int nameCharno [VARIABLES] String  name  namespace  boolean  int  dotCharno  dotLineno  memberTypeFlags  nameCharno  nameLineno  Parser  parser  Node  elem  ref  target  
[BugLab_Variable_Misuse]^return createName ( name, nameCharno, nameCharno ) ;^564^^^^^558^581^return createName ( name, nameLineno, nameCharno ) ;^[CLASS] IRFactory  [METHOD] createPropertyGet [RETURN_TYPE] Node   Node target String namespace String name int memberTypeFlags int dotLineno int dotCharno int nameLineno int nameCharno [VARIABLES] String  name  namespace  boolean  int  dotCharno  dotLineno  memberTypeFlags  nameCharno  nameLineno  Parser  parser  Node  elem  ref  target  
[BugLab_Variable_Misuse]^return createName ( name, nameLineno, memberTypeFlags ) ;^564^^^^^558^581^return createName ( name, nameLineno, nameCharno ) ;^[CLASS] IRFactory  [METHOD] createPropertyGet [RETURN_TYPE] Node   Node target String namespace String name int memberTypeFlags int dotLineno int dotCharno int nameLineno int nameCharno [VARIABLES] String  name  namespace  boolean  int  dotCharno  dotLineno  memberTypeFlags  nameCharno  nameLineno  Parser  parser  Node  elem  ref  target  
[BugLab_Argument_Swapping]^return createName ( nameLineno, name, nameCharno ) ;^564^^^^^558^581^return createName ( name, nameLineno, nameCharno ) ;^[CLASS] IRFactory  [METHOD] createPropertyGet [RETURN_TYPE] Node   Node target String namespace String name int memberTypeFlags int dotLineno int dotCharno int nameLineno int nameCharno [VARIABLES] String  name  namespace  boolean  int  dotCharno  dotLineno  memberTypeFlags  nameCharno  nameLineno  Parser  parser  Node  elem  ref  target  
[BugLab_Argument_Swapping]^return createName ( nameCharno, nameLineno, name ) ;^564^^^^^558^581^return createName ( name, nameLineno, nameCharno ) ;^[CLASS] IRFactory  [METHOD] createPropertyGet [RETURN_TYPE] Node   Node target String namespace String name int memberTypeFlags int dotLineno int dotCharno int nameLineno int nameCharno [VARIABLES] String  name  namespace  boolean  int  dotCharno  dotLineno  memberTypeFlags  nameCharno  nameLineno  Parser  parser  Node  elem  ref  target  
[BugLab_Argument_Swapping]^return createName ( name, nameCharno, nameLineno ) ;^564^^^^^558^581^return createName ( name, nameLineno, nameCharno ) ;^[CLASS] IRFactory  [METHOD] createPropertyGet [RETURN_TYPE] Node   Node target String namespace String name int memberTypeFlags int dotLineno int dotCharno int nameLineno int nameCharno [VARIABLES] String  name  namespace  boolean  int  dotCharno  dotLineno  memberTypeFlags  nameCharno  nameLineno  Parser  parser  Node  elem  ref  target  
[BugLab_Variable_Misuse]^return new Node ( Token.GET_REF, target, dotLineno, dotCharno ) ;^570^^^^^558^581^return new Node ( Token.GET_REF, ref, dotLineno, dotCharno ) ;^[CLASS] IRFactory  [METHOD] createPropertyGet [RETURN_TYPE] Node   Node target String namespace String name int memberTypeFlags int dotLineno int dotCharno int nameLineno int nameCharno [VARIABLES] String  name  namespace  boolean  int  dotCharno  dotLineno  memberTypeFlags  nameCharno  nameLineno  Parser  parser  Node  elem  ref  target  
[BugLab_Variable_Misuse]^return new Node ( Token.GET_REF, ref, nameLineno, dotCharno ) ;^570^^^^^558^581^return new Node ( Token.GET_REF, ref, dotLineno, dotCharno ) ;^[CLASS] IRFactory  [METHOD] createPropertyGet [RETURN_TYPE] Node   Node target String namespace String name int memberTypeFlags int dotLineno int dotCharno int nameLineno int nameCharno [VARIABLES] String  name  namespace  boolean  int  dotCharno  dotLineno  memberTypeFlags  nameCharno  nameLineno  Parser  parser  Node  elem  ref  target  
[BugLab_Argument_Swapping]^return new Node ( Token.GET_REF, dotCharno, dotLineno, ref ) ;^570^^^^^558^581^return new Node ( Token.GET_REF, ref, dotLineno, dotCharno ) ;^[CLASS] IRFactory  [METHOD] createPropertyGet [RETURN_TYPE] Node   Node target String namespace String name int memberTypeFlags int dotLineno int dotCharno int nameLineno int nameCharno [VARIABLES] String  name  namespace  boolean  int  dotCharno  dotLineno  memberTypeFlags  nameCharno  nameLineno  Parser  parser  Node  elem  ref  target  
[BugLab_Argument_Swapping]^return new Node ( Token.GET_REF, dotLineno, ref, dotCharno ) ;^570^^^^^558^581^return new Node ( Token.GET_REF, ref, dotLineno, dotCharno ) ;^[CLASS] IRFactory  [METHOD] createPropertyGet [RETURN_TYPE] Node   Node target String namespace String name int memberTypeFlags int dotLineno int dotCharno int nameLineno int nameCharno [VARIABLES] String  name  namespace  boolean  int  dotCharno  dotLineno  memberTypeFlags  nameCharno  nameLineno  Parser  parser  Node  elem  ref  target  
[BugLab_Argument_Swapping]^return new Node ( Token.GET_REF, ref, dotCharno, dotLineno ) ;^570^^^^^558^581^return new Node ( Token.GET_REF, ref, dotLineno, dotCharno ) ;^[CLASS] IRFactory  [METHOD] createPropertyGet [RETURN_TYPE] Node   Node target String namespace String name int memberTypeFlags int dotLineno int dotCharno int nameLineno int nameCharno [VARIABLES] String  name  namespace  boolean  int  dotCharno  dotLineno  memberTypeFlags  nameCharno  nameLineno  Parser  parser  Node  elem  ref  target  
[BugLab_Argument_Swapping]^return new Node ( ref, Token.GET_REF, dotLineno, dotCharno ) ;^570^^^^^558^581^return new Node ( Token.GET_REF, ref, dotLineno, dotCharno ) ;^[CLASS] IRFactory  [METHOD] createPropertyGet [RETURN_TYPE] Node   Node target String namespace String name int memberTypeFlags int dotLineno int dotCharno int nameLineno int nameCharno [VARIABLES] String  name  namespace  boolean  int  dotCharno  dotLineno  memberTypeFlags  nameCharno  nameLineno  Parser  parser  Node  elem  ref  target  
[BugLab_Variable_Misuse]^Node ref = new Node ( Token.REF_SPECIAL, ref ) ;^568^^^^^558^581^Node ref = new Node ( Token.REF_SPECIAL, target ) ;^[CLASS] IRFactory  [METHOD] createPropertyGet [RETURN_TYPE] Node   Node target String namespace String name int memberTypeFlags int dotLineno int dotCharno int nameLineno int nameCharno [VARIABLES] String  name  namespace  boolean  int  dotCharno  dotLineno  memberTypeFlags  nameCharno  nameLineno  Parser  parser  Node  elem  ref  target  
[BugLab_Variable_Misuse]^Node ref = new Node ( 0, target ) ;^568^^^^^558^581^Node ref = new Node ( Token.REF_SPECIAL, target ) ;^[CLASS] IRFactory  [METHOD] createPropertyGet [RETURN_TYPE] Node   Node target String namespace String name int memberTypeFlags int dotLineno int dotCharno int nameLineno int nameCharno [VARIABLES] String  name  namespace  boolean  int  dotCharno  dotLineno  memberTypeFlags  nameCharno  nameLineno  Parser  parser  Node  elem  ref  target  
[BugLab_Argument_Swapping]^Node ref = new Node ( target, Token.REF_SPECIAL ) ;^568^^^^^558^581^Node ref = new Node ( Token.REF_SPECIAL, target ) ;^[CLASS] IRFactory  [METHOD] createPropertyGet [RETURN_TYPE] Node   Node target String namespace String name int memberTypeFlags int dotLineno int dotCharno int nameLineno int nameCharno [VARIABLES] String  name  namespace  boolean  int  dotCharno  dotLineno  memberTypeFlags  nameCharno  nameLineno  Parser  parser  Node  elem  ref  target  
[BugLab_Variable_Misuse]^return new Node ( Token.GET_REF, ref, dotLineno, nameLineno ) ;^570^^^^^558^581^return new Node ( Token.GET_REF, ref, dotLineno, dotCharno ) ;^[CLASS] IRFactory  [METHOD] createPropertyGet [RETURN_TYPE] Node   Node target String namespace String name int memberTypeFlags int dotLineno int dotCharno int nameLineno int nameCharno [VARIABLES] String  name  namespace  boolean  int  dotCharno  dotLineno  memberTypeFlags  nameCharno  nameLineno  Parser  parser  Node  elem  ref  target  
[BugLab_Variable_Misuse]^Node ref = new Node ( Token.REF_SPECIAL, elem ) ;^568^^^^^558^581^Node ref = new Node ( Token.REF_SPECIAL, target ) ;^[CLASS] IRFactory  [METHOD] createPropertyGet [RETURN_TYPE] Node   Node target String namespace String name int memberTypeFlags int dotLineno int dotCharno int nameLineno int nameCharno [VARIABLES] String  name  namespace  boolean  int  dotCharno  dotLineno  memberTypeFlags  nameCharno  nameLineno  Parser  parser  Node  elem  ref  target  
[BugLab_Variable_Misuse]^ref.putProp ( Node.NAME_PROP, namespace ) ;^569^^^^^558^581^ref.putProp ( Node.NAME_PROP, name ) ;^[CLASS] IRFactory  [METHOD] createPropertyGet [RETURN_TYPE] Node   Node target String namespace String name int memberTypeFlags int dotLineno int dotCharno int nameLineno int nameCharno [VARIABLES] String  name  namespace  boolean  int  dotCharno  dotLineno  memberTypeFlags  nameCharno  nameLineno  Parser  parser  Node  elem  ref  target  
[BugLab_Variable_Misuse]^return createName ( name, memberTypeFlags, nameCharno ) ;^564^^^^^558^581^return createName ( name, nameLineno, nameCharno ) ;^[CLASS] IRFactory  [METHOD] createPropertyGet [RETURN_TYPE] Node   Node target String namespace String name int memberTypeFlags int dotLineno int dotCharno int nameLineno int nameCharno [VARIABLES] String  name  namespace  boolean  int  dotCharno  dotLineno  memberTypeFlags  nameCharno  nameLineno  Parser  parser  Node  elem  ref  target  
[BugLab_Argument_Swapping]^return new Node ( dotLineno, ref, Token.GET_REF, dotCharno ) ;^570^^^^^558^581^return new Node ( Token.GET_REF, ref, dotLineno, dotCharno ) ;^[CLASS] IRFactory  [METHOD] createPropertyGet [RETURN_TYPE] Node   Node target String namespace String name int memberTypeFlags int dotLineno int dotCharno int nameLineno int nameCharno [VARIABLES] String  name  namespace  boolean  int  dotCharno  dotLineno  memberTypeFlags  nameCharno  nameLineno  Parser  parser  Node  elem  ref  target  
[BugLab_Variable_Misuse]^return new Node ( Token.GETPROP, ref, createString ( name, nameLineno, nameCharno ) , dotLineno, dotCharno ) ;^572^573^574^575^^558^581^return new Node ( Token.GETPROP, target, createString ( name, nameLineno, nameCharno ) , dotLineno, dotCharno ) ;^[CLASS] IRFactory  [METHOD] createPropertyGet [RETURN_TYPE] Node   Node target String namespace String name int memberTypeFlags int dotLineno int dotCharno int nameLineno int nameCharno [VARIABLES] String  name  namespace  boolean  int  dotCharno  dotLineno  memberTypeFlags  nameCharno  nameLineno  Parser  parser  Node  elem  ref  target  
[BugLab_Variable_Misuse]^return new Node ( Token.GETPROP, target, createString ( namespace, nameLineno, nameCharno ) , dotLineno, dotCharno ) ;^572^573^574^575^^558^581^return new Node ( Token.GETPROP, target, createString ( name, nameLineno, nameCharno ) , dotLineno, dotCharno ) ;^[CLASS] IRFactory  [METHOD] createPropertyGet [RETURN_TYPE] Node   Node target String namespace String name int memberTypeFlags int dotLineno int dotCharno int nameLineno int nameCharno [VARIABLES] String  name  namespace  boolean  int  dotCharno  dotLineno  memberTypeFlags  nameCharno  nameLineno  Parser  parser  Node  elem  ref  target  
[BugLab_Variable_Misuse]^return new Node ( Token.GETPROP, target, createString ( name, nameCharno, nameCharno ) , dotLineno, dotCharno ) ;^572^573^574^575^^558^581^return new Node ( Token.GETPROP, target, createString ( name, nameLineno, nameCharno ) , dotLineno, dotCharno ) ;^[CLASS] IRFactory  [METHOD] createPropertyGet [RETURN_TYPE] Node   Node target String namespace String name int memberTypeFlags int dotLineno int dotCharno int nameLineno int nameCharno [VARIABLES] String  name  namespace  boolean  int  dotCharno  dotLineno  memberTypeFlags  nameCharno  nameLineno  Parser  parser  Node  elem  ref  target  
[BugLab_Variable_Misuse]^return new Node ( Token.GETPROP, target, createString ( name, nameLineno, memberTypeFlags ) , dotLineno, dotCharno ) ;^572^573^574^575^^558^581^return new Node ( Token.GETPROP, target, createString ( name, nameLineno, nameCharno ) , dotLineno, dotCharno ) ;^[CLASS] IRFactory  [METHOD] createPropertyGet [RETURN_TYPE] Node   Node target String namespace String name int memberTypeFlags int dotLineno int dotCharno int nameLineno int nameCharno [VARIABLES] String  name  namespace  boolean  int  dotCharno  dotLineno  memberTypeFlags  nameCharno  nameLineno  Parser  parser  Node  elem  ref  target  
[BugLab_Variable_Misuse]^return new Node ( Token.GETPROP, target, createString ( name, nameLineno, nameCharno ) , nameLineno, dotCharno ) ;^572^573^574^575^^558^581^return new Node ( Token.GETPROP, target, createString ( name, nameLineno, nameCharno ) , dotLineno, dotCharno ) ;^[CLASS] IRFactory  [METHOD] createPropertyGet [RETURN_TYPE] Node   Node target String namespace String name int memberTypeFlags int dotLineno int dotCharno int nameLineno int nameCharno [VARIABLES] String  name  namespace  boolean  int  dotCharno  dotLineno  memberTypeFlags  nameCharno  nameLineno  Parser  parser  Node  elem  ref  target  
[BugLab_Variable_Misuse]^return new Node ( Token.GETPROP, target, createString ( name, nameLineno, nameCharno ) , dotLineno, nameCharno ) ;^572^573^574^575^^558^581^return new Node ( Token.GETPROP, target, createString ( name, nameLineno, nameCharno ) , dotLineno, dotCharno ) ;^[CLASS] IRFactory  [METHOD] createPropertyGet [RETURN_TYPE] Node   Node target String namespace String name int memberTypeFlags int dotLineno int dotCharno int nameLineno int nameCharno [VARIABLES] String  name  namespace  boolean  int  dotCharno  dotLineno  memberTypeFlags  nameCharno  nameLineno  Parser  parser  Node  elem  ref  target  
[BugLab_Argument_Swapping]^return new Node ( Token.GETPROP, name, createString ( target, nameLineno, nameCharno ) , dotLineno, dotCharno ) ;^572^573^574^575^^558^581^return new Node ( Token.GETPROP, target, createString ( name, nameLineno, nameCharno ) , dotLineno, dotCharno ) ;^[CLASS] IRFactory  [METHOD] createPropertyGet [RETURN_TYPE] Node   Node target String namespace String name int memberTypeFlags int dotLineno int dotCharno int nameLineno int nameCharno [VARIABLES] String  name  namespace  boolean  int  dotCharno  dotLineno  memberTypeFlags  nameCharno  nameLineno  Parser  parser  Node  elem  ref  target  
[BugLab_Argument_Swapping]^return new Node ( Token.GETPROP, target, createString ( nameCharno, nameLineno, name ) , dotLineno, dotCharno ) ;^572^573^574^575^^558^581^return new Node ( Token.GETPROP, target, createString ( name, nameLineno, nameCharno ) , dotLineno, dotCharno ) ;^[CLASS] IRFactory  [METHOD] createPropertyGet [RETURN_TYPE] Node   Node target String namespace String name int memberTypeFlags int dotLineno int dotCharno int nameLineno int nameCharno [VARIABLES] String  name  namespace  boolean  int  dotCharno  dotLineno  memberTypeFlags  nameCharno  nameLineno  Parser  parser  Node  elem  ref  target  
[BugLab_Argument_Swapping]^return new Node ( Token.GETPROP, target, createString ( name, dotLineno, nameCharno ) , nameLineno, dotCharno ) ;^572^573^574^575^^558^581^return new Node ( Token.GETPROP, target, createString ( name, nameLineno, nameCharno ) , dotLineno, dotCharno ) ;^[CLASS] IRFactory  [METHOD] createPropertyGet [RETURN_TYPE] Node   Node target String namespace String name int memberTypeFlags int dotLineno int dotCharno int nameLineno int nameCharno [VARIABLES] String  name  namespace  boolean  int  dotCharno  dotLineno  memberTypeFlags  nameCharno  nameLineno  Parser  parser  Node  elem  ref  target  
[BugLab_Argument_Swapping]^return new Node ( Token.GETPROP, target, createString ( name, nameLineno, dotCharno ) , dotLineno, nameCharno ) ;^572^573^574^575^^558^581^return new Node ( Token.GETPROP, target, createString ( name, nameLineno, nameCharno ) , dotLineno, dotCharno ) ;^[CLASS] IRFactory  [METHOD] createPropertyGet [RETURN_TYPE] Node   Node target String namespace String name int memberTypeFlags int dotLineno int dotCharno int nameLineno int nameCharno [VARIABLES] String  name  namespace  boolean  int  dotCharno  dotLineno  memberTypeFlags  nameCharno  nameLineno  Parser  parser  Node  elem  ref  target  
[BugLab_Argument_Swapping]^return new Node ( Token.GETPROP, target, createString ( name, dotCharno, nameCharno ) , dotLineno, nameLineno ) ;^572^573^574^575^^558^581^return new Node ( Token.GETPROP, target, createString ( name, nameLineno, nameCharno ) , dotLineno, dotCharno ) ;^[CLASS] IRFactory  [METHOD] createPropertyGet [RETURN_TYPE] Node   Node target String namespace String name int memberTypeFlags int dotLineno int dotCharno int nameLineno int nameCharno [VARIABLES] String  name  namespace  boolean  int  dotCharno  dotLineno  memberTypeFlags  nameCharno  nameLineno  Parser  parser  Node  elem  ref  target  
[BugLab_Argument_Swapping]^return new Node ( nameCharno, target, createString ( name, nameLineno, Token.GETPROP ) , dotLineno, dotCharno ) ;^572^573^574^575^^558^581^return new Node ( Token.GETPROP, target, createString ( name, nameLineno, nameCharno ) , dotLineno, dotCharno ) ;^[CLASS] IRFactory  [METHOD] createPropertyGet [RETURN_TYPE] Node   Node target String namespace String name int memberTypeFlags int dotLineno int dotCharno int nameLineno int nameCharno [VARIABLES] String  name  namespace  boolean  int  dotCharno  dotLineno  memberTypeFlags  nameCharno  nameLineno  Parser  parser  Node  elem  ref  target  
[BugLab_Variable_Misuse]^return new Node ( Token.GETPROP, target, createString ( name, nameLineno, nameLineno ) , dotLineno, dotCharno ) ;^572^573^574^575^^558^581^return new Node ( Token.GETPROP, target, createString ( name, nameLineno, nameCharno ) , dotLineno, dotCharno ) ;^[CLASS] IRFactory  [METHOD] createPropertyGet [RETURN_TYPE] Node   Node target String namespace String name int memberTypeFlags int dotLineno int dotCharno int nameLineno int nameCharno [VARIABLES] String  name  namespace  boolean  int  dotCharno  dotLineno  memberTypeFlags  nameCharno  nameLineno  Parser  parser  Node  elem  ref  target  
[BugLab_Variable_Misuse]^return new Node ( Token.GETPROP, target, createString ( name, nameLineno, nameCharno ) , nameCharno, dotCharno ) ;^572^573^574^575^^558^581^return new Node ( Token.GETPROP, target, createString ( name, nameLineno, nameCharno ) , dotLineno, dotCharno ) ;^[CLASS] IRFactory  [METHOD] createPropertyGet [RETURN_TYPE] Node   Node target String namespace String name int memberTypeFlags int dotLineno int dotCharno int nameLineno int nameCharno [VARIABLES] String  name  namespace  boolean  int  dotCharno  dotLineno  memberTypeFlags  nameCharno  nameLineno  Parser  parser  Node  elem  ref  target  
[BugLab_Variable_Misuse]^return new Node ( Token.GETPROP, target, createString ( name, nameLineno, nameCharno ) , dotLineno, nameLineno ) ;^572^573^574^575^^558^581^return new Node ( Token.GETPROP, target, createString ( name, nameLineno, nameCharno ) , dotLineno, dotCharno ) ;^[CLASS] IRFactory  [METHOD] createPropertyGet [RETURN_TYPE] Node   Node target String namespace String name int memberTypeFlags int dotLineno int dotCharno int nameLineno int nameCharno [VARIABLES] String  name  namespace  boolean  int  dotCharno  dotLineno  memberTypeFlags  nameCharno  nameLineno  Parser  parser  Node  elem  ref  target  
[BugLab_Variable_Misuse]^return new Node ( null, target, createString ( name, nameLineno, nameCharno ) , dotLineno, dotCharno ) ;^572^573^574^575^^558^581^return new Node ( Token.GETPROP, target, createString ( name, nameLineno, nameCharno ) , dotLineno, dotCharno ) ;^[CLASS] IRFactory  [METHOD] createPropertyGet [RETURN_TYPE] Node   Node target String namespace String name int memberTypeFlags int dotLineno int dotCharno int nameLineno int nameCharno [VARIABLES] String  name  namespace  boolean  int  dotCharno  dotLineno  memberTypeFlags  nameCharno  nameLineno  Parser  parser  Node  elem  ref  target  
[BugLab_Argument_Swapping]^return new Node ( Token.GETPROP, nameLineno, createString ( name, target, nameCharno ) , dotLineno, dotCharno ) ;^572^573^574^575^^558^581^return new Node ( Token.GETPROP, target, createString ( name, nameLineno, nameCharno ) , dotLineno, dotCharno ) ;^[CLASS] IRFactory  [METHOD] createPropertyGet [RETURN_TYPE] Node   Node target String namespace String name int memberTypeFlags int dotLineno int dotCharno int nameLineno int nameCharno [VARIABLES] String  name  namespace  boolean  int  dotCharno  dotLineno  memberTypeFlags  nameCharno  nameLineno  Parser  parser  Node  elem  ref  target  
[BugLab_Argument_Swapping]^return new Node ( Token.GETPROP, target, createString ( name, nameCharno, nameLineno ) , dotLineno, dotCharno ) ;^572^573^574^575^^558^581^return new Node ( Token.GETPROP, target, createString ( name, nameLineno, nameCharno ) , dotLineno, dotCharno ) ;^[CLASS] IRFactory  [METHOD] createPropertyGet [RETURN_TYPE] Node   Node target String namespace String name int memberTypeFlags int dotLineno int dotCharno int nameLineno int nameCharno [VARIABLES] String  name  namespace  boolean  int  dotCharno  dotLineno  memberTypeFlags  nameCharno  nameLineno  Parser  parser  Node  elem  ref  target  
[BugLab_Argument_Swapping]^return new Node ( Token.GETPROP, target, createString ( name, nameLineno, nameCharno ) , dotCharno, dotLineno ) ;^572^573^574^575^^558^581^return new Node ( Token.GETPROP, target, createString ( name, nameLineno, nameCharno ) , dotLineno, dotCharno ) ;^[CLASS] IRFactory  [METHOD] createPropertyGet [RETURN_TYPE] Node   Node target String namespace String name int memberTypeFlags int dotLineno int dotCharno int nameLineno int nameCharno [VARIABLES] String  name  namespace  boolean  int  dotCharno  dotLineno  memberTypeFlags  nameCharno  nameLineno  Parser  parser  Node  elem  ref  target  
[BugLab_Argument_Swapping]^return new Node ( Token.GETPROP, dotCharno, createString ( name, nameLineno, nameCharno ) , dotLineno, target ) ;^572^573^574^575^^558^581^return new Node ( Token.GETPROP, target, createString ( name, nameLineno, nameCharno ) , dotLineno, dotCharno ) ;^[CLASS] IRFactory  [METHOD] createPropertyGet [RETURN_TYPE] Node   Node target String namespace String name int memberTypeFlags int dotLineno int dotCharno int nameLineno int nameCharno [VARIABLES] String  name  namespace  boolean  int  dotCharno  dotLineno  memberTypeFlags  nameCharno  nameLineno  Parser  parser  Node  elem  ref  target  
[BugLab_Argument_Swapping]^return new Node ( dotLineno, target, createString ( name, nameLineno, nameCharno ) , Token.GETPROP, dotCharno ) ;^572^573^574^575^^558^581^return new Node ( Token.GETPROP, target, createString ( name, nameLineno, nameCharno ) , dotLineno, dotCharno ) ;^[CLASS] IRFactory  [METHOD] createPropertyGet [RETURN_TYPE] Node   Node target String namespace String name int memberTypeFlags int dotLineno int dotCharno int nameLineno int nameCharno [VARIABLES] String  name  namespace  boolean  int  dotCharno  dotLineno  memberTypeFlags  nameCharno  nameLineno  Parser  parser  Node  elem  ref  target  
[BugLab_Variable_Misuse]^checkActivationName ( namespace, Token.GETPROP ) ;^566^^^^^558^581^checkActivationName ( name, Token.GETPROP ) ;^[CLASS] IRFactory  [METHOD] createPropertyGet [RETURN_TYPE] Node   Node target String namespace String name int memberTypeFlags int dotLineno int dotCharno int nameLineno int nameCharno [VARIABLES] String  name  namespace  boolean  int  dotCharno  dotLineno  memberTypeFlags  nameCharno  nameLineno  Parser  parser  Node  elem  ref  target  
[BugLab_Variable_Misuse]^if  ( ScriptRuntime.isSpecialProperty ( namespace )  )  {^567^^^^^558^581^if  ( ScriptRuntime.isSpecialProperty ( name )  )  {^[CLASS] IRFactory  [METHOD] createPropertyGet [RETURN_TYPE] Node   Node target String namespace String name int memberTypeFlags int dotLineno int dotCharno int nameLineno int nameCharno [VARIABLES] String  name  namespace  boolean  int  dotCharno  dotLineno  memberTypeFlags  nameCharno  nameLineno  Parser  parser  Node  elem  ref  target  
[BugLab_Variable_Misuse]^createString ( namespace, nameLineno, nameCharno ) , dotLineno, dotCharno ) ;^574^575^^^^558^581^createString ( name, nameLineno, nameCharno ) , dotLineno, dotCharno ) ;^[CLASS] IRFactory  [METHOD] createPropertyGet [RETURN_TYPE] Node   Node target String namespace String name int memberTypeFlags int dotLineno int dotCharno int nameLineno int nameCharno [VARIABLES] String  name  namespace  boolean  int  dotCharno  dotLineno  memberTypeFlags  nameCharno  nameLineno  Parser  parser  Node  elem  ref  target  
[BugLab_Variable_Misuse]^createString ( name, memberTypeFlags, nameCharno ) , dotLineno, dotCharno ) ;^574^575^^^^558^581^createString ( name, nameLineno, nameCharno ) , dotLineno, dotCharno ) ;^[CLASS] IRFactory  [METHOD] createPropertyGet [RETURN_TYPE] Node   Node target String namespace String name int memberTypeFlags int dotLineno int dotCharno int nameLineno int nameCharno [VARIABLES] String  name  namespace  boolean  int  dotCharno  dotLineno  memberTypeFlags  nameCharno  nameLineno  Parser  parser  Node  elem  ref  target  
[BugLab_Variable_Misuse]^createString ( name, nameLineno, memberTypeFlags ) , dotLineno, dotCharno ) ;^574^575^^^^558^581^createString ( name, nameLineno, nameCharno ) , dotLineno, dotCharno ) ;^[CLASS] IRFactory  [METHOD] createPropertyGet [RETURN_TYPE] Node   Node target String namespace String name int memberTypeFlags int dotLineno int dotCharno int nameLineno int nameCharno [VARIABLES] String  name  namespace  boolean  int  dotCharno  dotLineno  memberTypeFlags  nameCharno  nameLineno  Parser  parser  Node  elem  ref  target  
[BugLab_Argument_Swapping]^createString ( nameLineno, name, nameCharno ) , dotLineno, dotCharno ) ;^574^575^^^^558^581^createString ( name, nameLineno, nameCharno ) , dotLineno, dotCharno ) ;^[CLASS] IRFactory  [METHOD] createPropertyGet [RETURN_TYPE] Node   Node target String namespace String name int memberTypeFlags int dotLineno int dotCharno int nameLineno int nameCharno [VARIABLES] String  name  namespace  boolean  int  dotCharno  dotLineno  memberTypeFlags  nameCharno  nameLineno  Parser  parser  Node  elem  ref  target  
[BugLab_Argument_Swapping]^createString ( name, nameCharno, nameLineno ) , dotLineno, dotCharno ) ;^574^575^^^^558^581^createString ( name, nameLineno, nameCharno ) , dotLineno, dotCharno ) ;^[CLASS] IRFactory  [METHOD] createPropertyGet [RETURN_TYPE] Node   Node target String namespace String name int memberTypeFlags int dotLineno int dotCharno int nameLineno int nameCharno [VARIABLES] String  name  namespace  boolean  int  dotCharno  dotLineno  memberTypeFlags  nameCharno  nameLineno  Parser  parser  Node  elem  ref  target  
[BugLab_Variable_Misuse]^return createName ( name, nameLineno, nameLineno ) ;^564^^^^^558^581^return createName ( name, nameLineno, nameCharno ) ;^[CLASS] IRFactory  [METHOD] createPropertyGet [RETURN_TYPE] Node   Node target String namespace String name int memberTypeFlags int dotLineno int dotCharno int nameLineno int nameCharno [VARIABLES] String  name  namespace  boolean  int  dotCharno  dotLineno  memberTypeFlags  nameCharno  nameLineno  Parser  parser  Node  elem  ref  target  
[BugLab_Argument_Swapping]^return new Node ( Token.GETPROP, dotLineno, createString ( name, nameLineno, nameCharno ) , target, dotCharno ) ;^572^573^574^575^^558^581^return new Node ( Token.GETPROP, target, createString ( name, nameLineno, nameCharno ) , dotLineno, dotCharno ) ;^[CLASS] IRFactory  [METHOD] createPropertyGet [RETURN_TYPE] Node   Node target String namespace String name int memberTypeFlags int dotLineno int dotCharno int nameLineno int nameCharno [VARIABLES] String  name  namespace  boolean  int  dotCharno  dotLineno  memberTypeFlags  nameCharno  nameLineno  Parser  parser  Node  elem  ref  target  
[BugLab_Argument_Swapping]^return new Node ( Token.GETPROP, target, createString ( name, nameLineno, dotLineno ) , nameCharno, dotCharno ) ;^572^573^574^575^^558^581^return new Node ( Token.GETPROP, target, createString ( name, nameLineno, nameCharno ) , dotLineno, dotCharno ) ;^[CLASS] IRFactory  [METHOD] createPropertyGet [RETURN_TYPE] Node   Node target String namespace String name int memberTypeFlags int dotLineno int dotCharno int nameLineno int nameCharno [VARIABLES] String  name  namespace  boolean  int  dotCharno  dotLineno  memberTypeFlags  nameCharno  nameLineno  Parser  parser  Node  elem  ref  target  
[BugLab_Argument_Swapping]^return new Node ( dotCharno, ref, dotLineno, Token.GET_REF ) ;^570^^^^^558^581^return new Node ( Token.GET_REF, ref, dotLineno, dotCharno ) ;^[CLASS] IRFactory  [METHOD] createPropertyGet [RETURN_TYPE] Node   Node target String namespace String name int memberTypeFlags int dotLineno int dotCharno int nameLineno int nameCharno [VARIABLES] String  name  namespace  boolean  int  dotCharno  dotLineno  memberTypeFlags  nameCharno  nameLineno  Parser  parser  Node  elem  ref  target  
[BugLab_Argument_Swapping]^return new Node ( target, Token.GETPROP, createString ( name, nameLineno, nameCharno ) , dotLineno, dotCharno ) ;^572^573^574^575^^558^581^return new Node ( Token.GETPROP, target, createString ( name, nameLineno, nameCharno ) , dotLineno, dotCharno ) ;^[CLASS] IRFactory  [METHOD] createPropertyGet [RETURN_TYPE] Node   Node target String namespace String name int memberTypeFlags int dotLineno int dotCharno int nameLineno int nameCharno [VARIABLES] String  name  namespace  boolean  int  dotCharno  dotLineno  memberTypeFlags  nameCharno  nameLineno  Parser  parser  Node  elem  ref  target  
[BugLab_Argument_Swapping]^return new Node ( Token.GETPROP, target, createString ( nameLineno, name, nameCharno ) , dotLineno, dotCharno ) ;^572^573^574^575^^558^581^return new Node ( Token.GETPROP, target, createString ( name, nameLineno, nameCharno ) , dotLineno, dotCharno ) ;^[CLASS] IRFactory  [METHOD] createPropertyGet [RETURN_TYPE] Node   Node target String namespace String name int memberTypeFlags int dotLineno int dotCharno int nameLineno int nameCharno [VARIABLES] String  name  namespace  boolean  int  dotCharno  dotLineno  memberTypeFlags  nameCharno  nameLineno  Parser  parser  Node  elem  ref  target  
[BugLab_Argument_Swapping]^return new Node ( Token.GETPROP, target, createString ( dotCharno, nameLineno, nameCharno ) , dotLineno, name ) ;^572^573^574^575^^558^581^return new Node ( Token.GETPROP, target, createString ( name, nameLineno, nameCharno ) , dotLineno, dotCharno ) ;^[CLASS] IRFactory  [METHOD] createPropertyGet [RETURN_TYPE] Node   Node target String namespace String name int memberTypeFlags int dotLineno int dotCharno int nameLineno int nameCharno [VARIABLES] String  name  namespace  boolean  int  dotCharno  dotLineno  memberTypeFlags  nameCharno  nameLineno  Parser  parser  Node  elem  ref  target  
[BugLab_Argument_Swapping]^return new Node ( dotCharno, target, createString ( name, nameLineno, nameCharno ) , dotLineno, Token.GETPROP ) ;^572^573^574^575^^558^581^return new Node ( Token.GETPROP, target, createString ( name, nameLineno, nameCharno ) , dotLineno, dotCharno ) ;^[CLASS] IRFactory  [METHOD] createPropertyGet [RETURN_TYPE] Node   Node target String namespace String name int memberTypeFlags int dotLineno int dotCharno int nameLineno int nameCharno [VARIABLES] String  name  namespace  boolean  int  dotCharno  dotLineno  memberTypeFlags  nameCharno  nameLineno  Parser  parser  Node  elem  ref  target  
[BugLab_Argument_Swapping]^createString ( nameCharno, nameLineno, name ) , dotLineno, dotCharno ) ;^574^575^^^^558^581^createString ( name, nameLineno, nameCharno ) , dotLineno, dotCharno ) ;^[CLASS] IRFactory  [METHOD] createPropertyGet [RETURN_TYPE] Node   Node target String namespace String name int memberTypeFlags int dotLineno int dotCharno int nameLineno int nameCharno [VARIABLES] String  name  namespace  boolean  int  dotCharno  dotLineno  memberTypeFlags  nameCharno  nameLineno  Parser  parser  Node  elem  ref  target  
[BugLab_Variable_Misuse]^Node elem = createString ( namespace ) ;^577^^^^^558^581^Node elem = createString ( name ) ;^[CLASS] IRFactory  [METHOD] createPropertyGet [RETURN_TYPE] Node   Node target String namespace String name int memberTypeFlags int dotLineno int dotCharno int nameLineno int nameCharno [VARIABLES] String  name  namespace  boolean  int  dotCharno  dotLineno  memberTypeFlags  nameCharno  nameLineno  Parser  parser  Node  elem  ref  target  
[BugLab_Variable_Misuse]^return createMemberRefGet ( ref, namespace, elem, memberTypeFlags, dotLineno, dotCharno ) ;^579^580^^^^558^581^return createMemberRefGet ( target, namespace, elem, memberTypeFlags, dotLineno, dotCharno ) ;^[CLASS] IRFactory  [METHOD] createPropertyGet [RETURN_TYPE] Node   Node target String namespace String name int memberTypeFlags int dotLineno int dotCharno int nameLineno int nameCharno [VARIABLES] String  name  namespace  boolean  int  dotCharno  dotLineno  memberTypeFlags  nameCharno  nameLineno  Parser  parser  Node  elem  ref  target  
[BugLab_Variable_Misuse]^return createMemberRefGet ( target, name, elem, memberTypeFlags, dotLineno, dotCharno ) ;^579^580^^^^558^581^return createMemberRefGet ( target, namespace, elem, memberTypeFlags, dotLineno, dotCharno ) ;^[CLASS] IRFactory  [METHOD] createPropertyGet [RETURN_TYPE] Node   Node target String namespace String name int memberTypeFlags int dotLineno int dotCharno int nameLineno int nameCharno [VARIABLES] String  name  namespace  boolean  int  dotCharno  dotLineno  memberTypeFlags  nameCharno  nameLineno  Parser  parser  Node  elem  ref  target  
[BugLab_Variable_Misuse]^return createMemberRefGet ( target, namespace, target, memberTypeFlags, dotLineno, dotCharno ) ;^579^580^^^^558^581^return createMemberRefGet ( target, namespace, elem, memberTypeFlags, dotLineno, dotCharno ) ;^[CLASS] IRFactory  [METHOD] createPropertyGet [RETURN_TYPE] Node   Node target String namespace String name int memberTypeFlags int dotLineno int dotCharno int nameLineno int nameCharno [VARIABLES] String  name  namespace  boolean  int  dotCharno  dotLineno  memberTypeFlags  nameCharno  nameLineno  Parser  parser  Node  elem  ref  target  
[BugLab_Variable_Misuse]^return createMemberRefGet ( target, namespace, elem, nameLineno, dotLineno, dotCharno ) ;^579^580^^^^558^581^return createMemberRefGet ( target, namespace, elem, memberTypeFlags, dotLineno, dotCharno ) ;^[CLASS] IRFactory  [METHOD] createPropertyGet [RETURN_TYPE] Node   Node target String namespace String name int memberTypeFlags int dotLineno int dotCharno int nameLineno int nameCharno [VARIABLES] String  name  namespace  boolean  int  dotCharno  dotLineno  memberTypeFlags  nameCharno  nameLineno  Parser  parser  Node  elem  ref  target  
[BugLab_Variable_Misuse]^return createMemberRefGet ( target, namespace, elem, memberTypeFlags, nameLineno, dotCharno ) ;^579^580^^^^558^581^return createMemberRefGet ( target, namespace, elem, memberTypeFlags, dotLineno, dotCharno ) ;^[CLASS] IRFactory  [METHOD] createPropertyGet [RETURN_TYPE] Node   Node target String namespace String name int memberTypeFlags int dotLineno int dotCharno int nameLineno int nameCharno [VARIABLES] String  name  namespace  boolean  int  dotCharno  dotLineno  memberTypeFlags  nameCharno  nameLineno  Parser  parser  Node  elem  ref  target  
[BugLab_Variable_Misuse]^return createMemberRefGet ( target, namespace, elem, memberTypeFlags, dotLineno, nameLineno ) ;^579^580^^^^558^581^return createMemberRefGet ( target, namespace, elem, memberTypeFlags, dotLineno, dotCharno ) ;^[CLASS] IRFactory  [METHOD] createPropertyGet [RETURN_TYPE] Node   Node target String namespace String name int memberTypeFlags int dotLineno int dotCharno int nameLineno int nameCharno [VARIABLES] String  name  namespace  boolean  int  dotCharno  dotLineno  memberTypeFlags  nameCharno  nameLineno  Parser  parser  Node  elem  ref  target  
[BugLab_Argument_Swapping]^return createMemberRefGet ( elem, namespace, target, memberTypeFlags, dotLineno, dotCharno ) ;^579^580^^^^558^581^return createMemberRefGet ( target, namespace, elem, memberTypeFlags, dotLineno, dotCharno ) ;^[CLASS] IRFactory  [METHOD] createPropertyGet [RETURN_TYPE] Node   Node target String namespace String name int memberTypeFlags int dotLineno int dotCharno int nameLineno int nameCharno [VARIABLES] String  name  namespace  boolean  int  dotCharno  dotLineno  memberTypeFlags  nameCharno  nameLineno  Parser  parser  Node  elem  ref  target  
[BugLab_Argument_Swapping]^return createMemberRefGet ( namespace, target, elem, memberTypeFlags, dotLineno, dotCharno ) ;^579^580^^^^558^581^return createMemberRefGet ( target, namespace, elem, memberTypeFlags, dotLineno, dotCharno ) ;^[CLASS] IRFactory  [METHOD] createPropertyGet [RETURN_TYPE] Node   Node target String namespace String name int memberTypeFlags int dotLineno int dotCharno int nameLineno int nameCharno [VARIABLES] String  name  namespace  boolean  int  dotCharno  dotLineno  memberTypeFlags  nameCharno  nameLineno  Parser  parser  Node  elem  ref  target  
[BugLab_Argument_Swapping]^return createMemberRefGet ( target, namespace, elem, dotLineno, memberTypeFlags, dotCharno ) ;^579^580^^^^558^581^return createMemberRefGet ( target, namespace, elem, memberTypeFlags, dotLineno, dotCharno ) ;^[CLASS] IRFactory  [METHOD] createPropertyGet [RETURN_TYPE] Node   Node target String namespace String name int memberTypeFlags int dotLineno int dotCharno int nameLineno int nameCharno [VARIABLES] String  name  namespace  boolean  int  dotCharno  dotLineno  memberTypeFlags  nameCharno  nameLineno  Parser  parser  Node  elem  ref  target  
[BugLab_Argument_Swapping]^return createMemberRefGet ( target, namespace, elem, dotCharno, dotLineno, memberTypeFlags ) ;^579^580^^^^558^581^return createMemberRefGet ( target, namespace, elem, memberTypeFlags, dotLineno, dotCharno ) ;^[CLASS] IRFactory  [METHOD] createPropertyGet [RETURN_TYPE] Node   Node target String namespace String name int memberTypeFlags int dotLineno int dotCharno int nameLineno int nameCharno [VARIABLES] String  name  namespace  boolean  int  dotCharno  dotLineno  memberTypeFlags  nameCharno  nameLineno  Parser  parser  Node  elem  ref  target  
[BugLab_Argument_Swapping]^return createMemberRefGet ( target, namespace, elem, memberTypeFlags, dotCharno, dotLineno ) ;^579^580^^^^558^581^return createMemberRefGet ( target, namespace, elem, memberTypeFlags, dotLineno, dotCharno ) ;^[CLASS] IRFactory  [METHOD] createPropertyGet [RETURN_TYPE] Node   Node target String namespace String name int memberTypeFlags int dotLineno int dotCharno int nameLineno int nameCharno [VARIABLES] String  name  namespace  boolean  int  dotCharno  dotLineno  memberTypeFlags  nameCharno  nameLineno  Parser  parser  Node  elem  ref  target  
[BugLab_Variable_Misuse]^if  ( namespace == null && lineno == 0 )  {^588^^^^^583^596^if  ( namespace == null && memberTypeFlags == 0 )  {^[CLASS] IRFactory  [METHOD] createElementGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  target  
[BugLab_Wrong_Operator]^if  ( namespace == null || memberTypeFlags == 0 )  {^588^^^^^583^596^if  ( namespace == null && memberTypeFlags == 0 )  {^[CLASS] IRFactory  [METHOD] createElementGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  target  
[BugLab_Wrong_Operator]^if  ( namespace != null && memberTypeFlags == 0 )  {^588^^^^^583^596^if  ( namespace == null && memberTypeFlags == 0 )  {^[CLASS] IRFactory  [METHOD] createElementGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  target  
[BugLab_Wrong_Operator]^if  ( namespace == null && memberTypeFlags != 0 )  {^588^^^^^583^596^if  ( namespace == null && memberTypeFlags == 0 )  {^[CLASS] IRFactory  [METHOD] createElementGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  target  
[BugLab_Wrong_Literal]^if  ( namespace == null && memberTypeFlags == charno )  {^588^^^^^583^596^if  ( namespace == null && memberTypeFlags == 0 )  {^[CLASS] IRFactory  [METHOD] createElementGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  target  
[BugLab_Variable_Misuse]^if  ( elem == null )  throw Kit.codeBug (  ) ;^591^^^^^583^596^if  ( target == null )  throw Kit.codeBug (  ) ;^[CLASS] IRFactory  [METHOD] createElementGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  target  
[BugLab_Wrong_Operator]^if  ( target != null )  throw Kit.codeBug (  ) ;^591^^^^^583^596^if  ( target == null )  throw Kit.codeBug (  ) ;^[CLASS] IRFactory  [METHOD] createElementGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  target  
[BugLab_Variable_Misuse]^return new Node ( Token.GETELEM, target, elem, memberTypeFlags, charno ) ;^592^^^^^583^596^return new Node ( Token.GETELEM, target, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createElementGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  target  
[BugLab_Argument_Swapping]^return new Node ( Token.GETELEM, lineno, elem, target, charno ) ;^592^^^^^583^596^return new Node ( Token.GETELEM, target, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createElementGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  target  
[BugLab_Argument_Swapping]^return new Node ( Token.GETELEM, elem, target, lineno, charno ) ;^592^^^^^583^596^return new Node ( Token.GETELEM, target, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createElementGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  target  
[BugLab_Argument_Swapping]^return new Node ( Token.GETELEM, target, lineno, elem, charno ) ;^592^^^^^583^596^return new Node ( Token.GETELEM, target, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createElementGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  target  
[BugLab_Argument_Swapping]^return new Node ( Token.GETELEM, charno, elem, lineno, target ) ;^592^^^^^583^596^return new Node ( Token.GETELEM, target, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createElementGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  target  
[BugLab_Argument_Swapping]^return new Node ( elem, target, Token.GETELEM, lineno, charno ) ;^592^^^^^583^596^return new Node ( Token.GETELEM, target, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createElementGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  target  
[BugLab_Variable_Misuse]^return new Node ( Token.GETELEM, elem, elem, lineno, charno ) ;^592^^^^^583^596^return new Node ( Token.GETELEM, target, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createElementGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  target  
[BugLab_Variable_Misuse]^return new Node ( Token.GETELEM, target, target, lineno, charno ) ;^592^^^^^583^596^return new Node ( Token.GETELEM, target, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createElementGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  target  
[BugLab_Variable_Misuse]^return new Node ( Token.GETELEM, target, elem, lineno, memberTypeFlags ) ;^592^^^^^583^596^return new Node ( Token.GETELEM, target, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createElementGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  target  
[BugLab_Argument_Swapping]^return new Node ( Token.GETELEM, target, elem, charno, lineno ) ;^592^^^^^583^596^return new Node ( Token.GETELEM, target, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createElementGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  target  
[BugLab_Argument_Swapping]^return new Node ( charno, target, elem, lineno, Token.GETELEM ) ;^592^^^^^583^596^return new Node ( Token.GETELEM, target, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createElementGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  target  
[BugLab_Argument_Swapping]^return new Node ( lineno, target, elem, Token.GETELEM, charno ) ;^592^^^^^583^596^return new Node ( Token.GETELEM, target, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createElementGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  target  
[BugLab_Argument_Swapping]^return new Node ( Token.GETELEM, target, charno, lineno, elem ) ;^592^^^^^583^596^return new Node ( Token.GETELEM, target, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createElementGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  target  
[BugLab_Argument_Swapping]^return new Node ( target, Token.GETELEM, elem, lineno, charno ) ;^592^^^^^583^596^return new Node ( Token.GETELEM, target, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createElementGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  target  
[BugLab_Variable_Misuse]^return createMemberRefGet ( elem, namespace, elem, memberTypeFlags, lineno, charno ) ;^594^595^^^^583^596^return createMemberRefGet ( target, namespace, elem, memberTypeFlags, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createElementGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  target  
[BugLab_Variable_Misuse]^return createMemberRefGet ( target, namespace, elem, charno, lineno, charno ) ;^594^595^^^^583^596^return createMemberRefGet ( target, namespace, elem, memberTypeFlags, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createElementGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  target  
[BugLab_Variable_Misuse]^return createMemberRefGet ( target, namespace, elem, memberTypeFlags, memberTypeFlags, charno ) ;^594^595^^^^583^596^return createMemberRefGet ( target, namespace, elem, memberTypeFlags, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createElementGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  target  
[BugLab_Variable_Misuse]^return createMemberRefGet ( target, namespace, elem, memberTypeFlags, lineno, memberTypeFlags ) ;^594^595^^^^583^596^return createMemberRefGet ( target, namespace, elem, memberTypeFlags, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createElementGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  target  
[BugLab_Argument_Swapping]^return createMemberRefGet ( elem, namespace, target, memberTypeFlags, lineno, charno ) ;^594^595^^^^583^596^return createMemberRefGet ( target, namespace, elem, memberTypeFlags, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createElementGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  target  
[BugLab_Argument_Swapping]^return createMemberRefGet ( target, lineno, elem, memberTypeFlags, namespace, charno ) ;^594^595^^^^583^596^return createMemberRefGet ( target, namespace, elem, memberTypeFlags, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createElementGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  target  
[BugLab_Argument_Swapping]^return createMemberRefGet ( target, elem, namespace, memberTypeFlags, lineno, charno ) ;^594^595^^^^583^596^return createMemberRefGet ( target, namespace, elem, memberTypeFlags, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createElementGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  target  
[BugLab_Argument_Swapping]^return createMemberRefGet ( target, namespace, elem, charno, lineno, memberTypeFlags ) ;^594^595^^^^583^596^return createMemberRefGet ( target, namespace, elem, memberTypeFlags, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createElementGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  target  
[BugLab_Argument_Swapping]^return createMemberRefGet ( target, namespace, elem, lineno, memberTypeFlags, charno ) ;^594^595^^^^583^596^return createMemberRefGet ( target, namespace, elem, memberTypeFlags, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createElementGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  target  
[BugLab_Variable_Misuse]^return createMemberRefGet ( target, namespace, target, memberTypeFlags, lineno, charno ) ;^594^595^^^^583^596^return createMemberRefGet ( target, namespace, elem, memberTypeFlags, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createElementGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  target  
[BugLab_Variable_Misuse]^return createMemberRefGet ( target, namespace, elem, lineno, lineno, charno ) ;^594^595^^^^583^596^return createMemberRefGet ( target, namespace, elem, memberTypeFlags, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createElementGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  target  
[BugLab_Variable_Misuse]^return createMemberRefGet ( target, namespace, elem, memberTypeFlags, charno, charno ) ;^594^595^^^^583^596^return createMemberRefGet ( target, namespace, elem, memberTypeFlags, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createElementGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  target  
[BugLab_Argument_Swapping]^return createMemberRefGet ( lineno, namespace, elem, memberTypeFlags, target, charno ) ;^594^595^^^^583^596^return createMemberRefGet ( target, namespace, elem, memberTypeFlags, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createElementGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  target  
[BugLab_Argument_Swapping]^return createMemberRefGet ( target, memberTypeFlags, elem, namespace, lineno, charno ) ;^594^595^^^^583^596^return createMemberRefGet ( target, namespace, elem, memberTypeFlags, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createElementGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  target  
[BugLab_Argument_Swapping]^return createMemberRefGet ( target, namespace, lineno, memberTypeFlags, elem, charno ) ;^594^595^^^^583^596^return createMemberRefGet ( target, namespace, elem, memberTypeFlags, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createElementGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  target  
[BugLab_Argument_Swapping]^return createMemberRefGet ( target, namespace, elem, memberTypeFlags, charno, lineno ) ;^594^595^^^^583^596^return createMemberRefGet ( target, namespace, elem, memberTypeFlags, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createElementGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  target  
[BugLab_Wrong_Operator]^if  ( namespace == null )  {^602^^^^^600^629^if  ( namespace != null )  {^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[BugLab_Variable_Misuse]^nsNode = createName ( namespace, memberTypeFlags, charno ) ;^607^^^^^604^608^nsNode = createName ( namespace, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[BugLab_Variable_Misuse]^nsNode = createName ( namespace, lineno, memberTypeFlags ) ;^607^^^^^604^608^nsNode = createName ( namespace, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[BugLab_Argument_Swapping]^nsNode = createName ( lineno, namespace, charno ) ;^607^^^^^604^608^nsNode = createName ( namespace, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[BugLab_Argument_Swapping]^nsNode = createName ( namespace, charno, lineno ) ;^607^^^^^604^608^nsNode = createName ( namespace, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[BugLab_Argument_Swapping]^nsNode = new Node ( Token.NULL, charno, lineno ) ;^605^^^^^600^629^nsNode = new Node ( Token.NULL, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[BugLab_Argument_Swapping]^nsNode = new Node ( charno, lineno, Token.NULL ) ;^605^^^^^600^629^nsNode = new Node ( Token.NULL, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[BugLab_Variable_Misuse]^nsNode = new Node ( Token.NULL, memberTypeFlags, charno ) ;^605^^^^^600^629^nsNode = new Node ( Token.NULL, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[BugLab_Argument_Swapping]^nsNode = new Node ( lineno, Token.NULL, charno ) ;^605^^^^^600^629^nsNode = new Node ( Token.NULL, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[BugLab_Variable_Misuse]^nsNode = new Node ( Token.NULL, lineno, memberTypeFlags ) ;^605^^^^^600^629^nsNode = new Node ( Token.NULL, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[BugLab_Variable_Misuse]^nsNode = createName ( namespace, memberTypeFlags, charno ) ;^607^^^^^600^629^nsNode = createName ( namespace, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[BugLab_Variable_Misuse]^nsNode = createName ( namespace, lineno, memberTypeFlags ) ;^607^^^^^600^629^nsNode = createName ( namespace, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[BugLab_Argument_Swapping]^nsNode = createName ( charno, lineno, namespace ) ;^607^^^^^600^629^nsNode = createName ( namespace, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[BugLab_Argument_Swapping]^nsNode = createName ( lineno, namespace, charno ) ;^607^^^^^600^629^nsNode = createName ( namespace, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[BugLab_Argument_Swapping]^nsNode = createName ( namespace, charno, lineno ) ;^607^^^^^600^629^nsNode = createName ( namespace, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[BugLab_Argument_Swapping]^nsNode = createName ( charno, lineno, namespace ) ;^607^^^^^604^608^nsNode = createName ( namespace, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[BugLab_Variable_Misuse]^if  ( ref == null )  {^611^^^^^600^629^if  ( target == null )  {^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[BugLab_Wrong_Operator]^if  ( target != null )  {^611^^^^^600^629^if  ( target == null )  {^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[BugLab_Wrong_Operator]^if  ( namespace != null )  {^618^^^^^611^624^if  ( namespace == null )  {^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[BugLab_Variable_Misuse]^ref = new Node ( Token.REF_NS_MEMBER, ref, nsNode, elem, lineno, charno ) ;^621^622^^^^611^624^ref = new Node ( Token.REF_NS_MEMBER, target, nsNode, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[BugLab_Variable_Misuse]^ref = new Node ( Token.REF_NS_MEMBER, target, target, elem, lineno, charno ) ;^621^622^^^^611^624^ref = new Node ( Token.REF_NS_MEMBER, target, nsNode, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[BugLab_Variable_Misuse]^ref = new Node ( Token.REF_NS_MEMBER, target, nsNode, ref, lineno, charno ) ;^621^622^^^^611^624^ref = new Node ( Token.REF_NS_MEMBER, target, nsNode, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[BugLab_Variable_Misuse]^ref = new Node ( Token.REF_NS_MEMBER, target, nsNode, elem, memberTypeFlags, charno ) ;^621^622^^^^611^624^ref = new Node ( Token.REF_NS_MEMBER, target, nsNode, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[BugLab_Variable_Misuse]^ref = new Node ( Token.REF_NS_MEMBER, target, nsNode, elem, lineno, memberTypeFlags ) ;^621^622^^^^611^624^ref = new Node ( Token.REF_NS_MEMBER, target, nsNode, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[BugLab_Argument_Swapping]^ref = new Node ( Token.REF_NS_MEMBER, elem, nsNode, target, lineno, charno ) ;^621^622^^^^611^624^ref = new Node ( Token.REF_NS_MEMBER, target, nsNode, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[BugLab_Argument_Swapping]^ref = new Node ( Token.REF_NS_MEMBER, target, elem, nsNode, lineno, charno ) ;^621^622^^^^611^624^ref = new Node ( Token.REF_NS_MEMBER, target, nsNode, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[BugLab_Argument_Swapping]^ref = new Node ( lineno, target, nsNode, elem, Token.REF_NS_MEMBER, charno ) ;^621^622^^^^611^624^ref = new Node ( Token.REF_NS_MEMBER, target, nsNode, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[BugLab_Argument_Swapping]^ref = new Node ( Token.REF_NS_MEMBER, target, nsNode, charno, lineno, elem ) ;^621^622^^^^611^624^ref = new Node ( Token.REF_NS_MEMBER, target, nsNode, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[BugLab_Argument_Swapping]^ref = new Node ( charno, target, nsNode, elem, lineno, Token.REF_NS_MEMBER ) ;^621^622^^^^611^624^ref = new Node ( Token.REF_NS_MEMBER, target, nsNode, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[BugLab_Variable_Misuse]^ref = new Node ( Token.REF_NS_MEMBER, target, nsNode, target, lineno, charno ) ;^621^622^^^^611^624^ref = new Node ( Token.REF_NS_MEMBER, target, nsNode, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[BugLab_Variable_Misuse]^ref = new Node ( 2, target, nsNode, elem, lineno, charno ) ;^621^622^^^^611^624^ref = new Node ( Token.REF_NS_MEMBER, target, nsNode, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[BugLab_Argument_Swapping]^ref = new Node ( Token.REF_NS_MEMBER, nsNode, target, elem, lineno, charno ) ;^621^622^^^^611^624^ref = new Node ( Token.REF_NS_MEMBER, target, nsNode, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[BugLab_Argument_Swapping]^ref = new Node ( Token.REF_NS_MEMBER, target, nsNode, elem, charno, lineno ) ;^621^622^^^^611^624^ref = new Node ( Token.REF_NS_MEMBER, target, nsNode, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[BugLab_Argument_Swapping]^ref = new Node ( nsNode, target, Token.REF_NS_MEMBER, elem, lineno, charno ) ;^621^622^^^^611^624^ref = new Node ( Token.REF_NS_MEMBER, target, nsNode, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[BugLab_Variable_Misuse]^ref = new Node ( Token.REF_MEMBER, ref, elem, lineno, charno ) ;^619^^^^^611^624^ref = new Node ( Token.REF_MEMBER, target, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[BugLab_Variable_Misuse]^ref = new Node ( Token.REF_MEMBER, target, target, lineno, charno ) ;^619^^^^^611^624^ref = new Node ( Token.REF_MEMBER, target, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[BugLab_Variable_Misuse]^ref = new Node ( Token.REF_MEMBER, target, elem, memberTypeFlags, charno ) ;^619^^^^^611^624^ref = new Node ( Token.REF_MEMBER, target, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[BugLab_Variable_Misuse]^ref = new Node ( Token.REF_MEMBER, target, elem, lineno, memberTypeFlags ) ;^619^^^^^611^624^ref = new Node ( Token.REF_MEMBER, target, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[BugLab_Variable_Misuse]^ref = new Node ( 2, target, elem, lineno, charno ) ;^619^^^^^611^624^ref = new Node ( Token.REF_MEMBER, target, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[BugLab_Argument_Swapping]^ref = new Node ( Token.REF_MEMBER, elem, target, lineno, charno ) ;^619^^^^^611^624^ref = new Node ( Token.REF_MEMBER, target, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[BugLab_Argument_Swapping]^ref = new Node ( Token.REF_MEMBER, lineno, elem, target, charno ) ;^619^^^^^611^624^ref = new Node ( Token.REF_MEMBER, target, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[BugLab_Argument_Swapping]^ref = new Node ( Token.REF_MEMBER, charno, elem, lineno, target ) ;^619^^^^^611^624^ref = new Node ( Token.REF_MEMBER, target, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[BugLab_Argument_Swapping]^ref = new Node ( target, Token.REF_MEMBER, elem, lineno, charno ) ;^619^^^^^611^624^ref = new Node ( Token.REF_MEMBER, target, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[BugLab_Variable_Misuse]^ref = new Node ( Token.REF_MEMBER, target, ref, lineno, charno ) ;^619^^^^^611^624^ref = new Node ( Token.REF_MEMBER, target, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[BugLab_Argument_Swapping]^ref = new Node ( Token.REF_MEMBER, target, lineno, elem, charno ) ;^619^^^^^611^624^ref = new Node ( Token.REF_MEMBER, target, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[BugLab_Argument_Swapping]^ref = new Node ( Token.REF_MEMBER, target, elem, charno, lineno ) ;^619^^^^^611^624^ref = new Node ( Token.REF_MEMBER, target, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[BugLab_Argument_Swapping]^ref = new Node ( Token.REF_NS_MEMBER, target, charno, elem, lineno, nsNode ) ;^621^622^^^^611^624^ref = new Node ( Token.REF_NS_MEMBER, target, nsNode, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[BugLab_Argument_Swapping]^ref = new Node ( Token.REF_NS_MEMBER, lineno, nsNode, elem, target, charno ) ;^621^622^^^^611^624^ref = new Node ( Token.REF_NS_MEMBER, target, nsNode, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[BugLab_Argument_Swapping]^ref = new Node ( elem, target, nsNode, Token.REF_NS_MEMBER, lineno, charno ) ;^621^622^^^^611^624^ref = new Node ( Token.REF_NS_MEMBER, target, nsNode, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[BugLab_Argument_Swapping]^ref = new Node ( lineno, target, elem, Token.REF_MEMBER, charno ) ;^619^^^^^611^624^ref = new Node ( Token.REF_MEMBER, target, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[BugLab_Argument_Swapping]^ref = new Node ( Token.REF_NS_MEMBER, target, lineno, elem, nsNode, charno ) ;^621^622^^^^611^624^ref = new Node ( Token.REF_NS_MEMBER, target, nsNode, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[BugLab_Wrong_Operator]^if  ( namespace != null )  {^612^^^^^600^629^if  ( namespace == null )  {^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[BugLab_Variable_Misuse]^ref = new Node ( Token.REF_NS_NAME, target, elem, lineno, charno ) ;^615^^^^^612^616^ref = new Node ( Token.REF_NS_NAME, nsNode, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[BugLab_Variable_Misuse]^ref = new Node ( Token.REF_NS_NAME, nsNode, target, lineno, charno ) ;^615^^^^^612^616^ref = new Node ( Token.REF_NS_NAME, nsNode, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[BugLab_Variable_Misuse]^ref = new Node ( Token.REF_NS_NAME, nsNode, elem, memberTypeFlags, charno ) ;^615^^^^^612^616^ref = new Node ( Token.REF_NS_NAME, nsNode, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[BugLab_Variable_Misuse]^ref = new Node ( Token.REF_NS_NAME, nsNode, elem, lineno, memberTypeFlags ) ;^615^^^^^612^616^ref = new Node ( Token.REF_NS_NAME, nsNode, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[BugLab_Argument_Swapping]^ref = new Node ( nsNode, Token.REF_NS_NAME, elem, lineno, charno ) ;^615^^^^^612^616^ref = new Node ( Token.REF_NS_NAME, nsNode, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[BugLab_Argument_Swapping]^ref = new Node ( Token.REF_NS_NAME, nsNode, lineno, elem, charno ) ;^615^^^^^612^616^ref = new Node ( Token.REF_NS_NAME, nsNode, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[BugLab_Argument_Swapping]^ref = new Node ( lineno, nsNode, elem, Token.REF_NS_NAME, charno ) ;^615^^^^^612^616^ref = new Node ( Token.REF_NS_NAME, nsNode, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[BugLab_Argument_Swapping]^ref = new Node ( Token.REF_NS_NAME, nsNode, elem, charno, lineno ) ;^615^^^^^612^616^ref = new Node ( Token.REF_NS_NAME, nsNode, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[BugLab_Argument_Swapping]^ref = new Node ( charno, nsNode, elem, lineno, Token.REF_NS_NAME ) ;^615^^^^^612^616^ref = new Node ( Token.REF_NS_NAME, nsNode, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[BugLab_Argument_Swapping]^ref = new Node ( Token.REF_NS_NAME, elem, nsNode, lineno, charno ) ;^615^^^^^612^616^ref = new Node ( Token.REF_NS_NAME, nsNode, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[BugLab_Argument_Swapping]^ref = new Node ( Token.REF_NS_NAME, lineno, elem, nsNode, charno ) ;^615^^^^^612^616^ref = new Node ( Token.REF_NS_NAME, nsNode, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[BugLab_Variable_Misuse]^ref = new Node ( Token.REF_NAME, target, lineno, charno ) ;^613^^^^^600^629^ref = new Node ( Token.REF_NAME, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[BugLab_Variable_Misuse]^ref = new Node ( Token.REF_NAME, elem, memberTypeFlags, charno ) ;^613^^^^^600^629^ref = new Node ( Token.REF_NAME, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[BugLab_Variable_Misuse]^ref = new Node ( Token.REF_NAME, elem, lineno, memberTypeFlags ) ;^613^^^^^600^629^ref = new Node ( Token.REF_NAME, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[BugLab_Variable_Misuse]^ref = new Node ( 4, elem, lineno, charno ) ;^613^^^^^600^629^ref = new Node ( Token.REF_NAME, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[BugLab_Argument_Swapping]^ref = new Node ( Token.REF_NAME, charno, lineno, elem ) ;^613^^^^^600^629^ref = new Node ( Token.REF_NAME, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[BugLab_Argument_Swapping]^ref = new Node ( Token.REF_NAME, elem, charno, lineno ) ;^613^^^^^600^629^ref = new Node ( Token.REF_NAME, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[BugLab_Argument_Swapping]^ref = new Node ( charno, elem, lineno, Token.REF_NAME ) ;^613^^^^^600^629^ref = new Node ( Token.REF_NAME, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[BugLab_Argument_Swapping]^ref = new Node ( lineno, elem, Token.REF_NAME, charno ) ;^613^^^^^600^629^ref = new Node ( Token.REF_NAME, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[BugLab_Argument_Swapping]^ref = new Node ( Token.REF_NAME, lineno, elem, charno ) ;^613^^^^^600^629^ref = new Node ( Token.REF_NAME, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[BugLab_Argument_Swapping]^ref = new Node ( elem, Token.REF_NAME, lineno, charno ) ;^613^^^^^600^629^ref = new Node ( Token.REF_NAME, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[BugLab_Variable_Misuse]^ref = new Node ( Token.REF_NS_NAME, target, elem, lineno, charno ) ;^615^^^^^600^629^ref = new Node ( Token.REF_NS_NAME, nsNode, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[BugLab_Variable_Misuse]^ref = new Node ( Token.REF_NS_NAME, nsNode, target, lineno, charno ) ;^615^^^^^600^629^ref = new Node ( Token.REF_NS_NAME, nsNode, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[BugLab_Variable_Misuse]^ref = new Node ( Token.REF_NS_NAME, nsNode, elem, memberTypeFlags, charno ) ;^615^^^^^600^629^ref = new Node ( Token.REF_NS_NAME, nsNode, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[BugLab_Variable_Misuse]^ref = new Node ( Token.REF_NS_NAME, nsNode, elem, lineno, memberTypeFlags ) ;^615^^^^^600^629^ref = new Node ( Token.REF_NS_NAME, nsNode, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[BugLab_Variable_Misuse]^ref = new Node ( null, nsNode, elem, lineno, charno ) ;^615^^^^^600^629^ref = new Node ( Token.REF_NS_NAME, nsNode, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[BugLab_Argument_Swapping]^ref = new Node ( Token.REF_NS_NAME, lineno, elem, nsNode, charno ) ;^615^^^^^600^629^ref = new Node ( Token.REF_NS_NAME, nsNode, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[BugLab_Argument_Swapping]^ref = new Node ( Token.REF_NS_NAME, nsNode, lineno, elem, charno ) ;^615^^^^^600^629^ref = new Node ( Token.REF_NS_NAME, nsNode, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[BugLab_Argument_Swapping]^ref = new Node ( Token.REF_NS_NAME, nsNode, elem, charno, lineno ) ;^615^^^^^600^629^ref = new Node ( Token.REF_NS_NAME, nsNode, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[BugLab_Argument_Swapping]^ref = new Node ( lineno, nsNode, elem, Token.REF_NS_NAME, charno ) ;^615^^^^^600^629^ref = new Node ( Token.REF_NS_NAME, nsNode, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[BugLab_Argument_Swapping]^ref = new Node ( Token.REF_NS_NAME, elem, nsNode, lineno, charno ) ;^615^^^^^600^629^ref = new Node ( Token.REF_NS_NAME, nsNode, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[BugLab_Argument_Swapping]^ref = new Node ( Token.REF_NS_NAME, nsNode, charno, lineno, elem ) ;^615^^^^^600^629^ref = new Node ( Token.REF_NS_NAME, nsNode, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[BugLab_Argument_Swapping]^ref = new Node ( elem, nsNode, Token.REF_NS_NAME, lineno, charno ) ;^615^^^^^600^629^ref = new Node ( Token.REF_NS_NAME, nsNode, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[BugLab_Argument_Swapping]^ref = new Node ( elem, nsNode, Token.REF_NS_NAME, lineno, charno ) ;^615^^^^^612^616^ref = new Node ( Token.REF_NS_NAME, nsNode, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[BugLab_Wrong_Operator]^if  ( namespace != null )  {^618^^^^^600^629^if  ( namespace == null )  {^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[BugLab_Variable_Misuse]^ref = new Node ( Token.REF_NS_MEMBER, ref, nsNode, elem, lineno, charno ) ;^621^622^^^^618^623^ref = new Node ( Token.REF_NS_MEMBER, target, nsNode, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[BugLab_Variable_Misuse]^ref = new Node ( Token.REF_NS_MEMBER, target, target, elem, lineno, charno ) ;^621^622^^^^618^623^ref = new Node ( Token.REF_NS_MEMBER, target, nsNode, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[BugLab_Variable_Misuse]^ref = new Node ( Token.REF_NS_MEMBER, target, nsNode, target, lineno, charno ) ;^621^622^^^^618^623^ref = new Node ( Token.REF_NS_MEMBER, target, nsNode, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[BugLab_Variable_Misuse]^ref = new Node ( Token.REF_NS_MEMBER, target, nsNode, elem, memberTypeFlags, charno ) ;^621^622^^^^618^623^ref = new Node ( Token.REF_NS_MEMBER, target, nsNode, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[BugLab_Argument_Swapping]^ref = new Node ( Token.REF_NS_MEMBER, nsNode, target, elem, lineno, charno ) ;^621^622^^^^618^623^ref = new Node ( Token.REF_NS_MEMBER, target, nsNode, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[BugLab_Argument_Swapping]^ref = new Node ( Token.REF_NS_MEMBER, target, elem, nsNode, lineno, charno ) ;^621^622^^^^618^623^ref = new Node ( Token.REF_NS_MEMBER, target, nsNode, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[BugLab_Argument_Swapping]^ref = new Node ( Token.REF_NS_MEMBER, target, nsNode, elem, charno, lineno ) ;^621^622^^^^618^623^ref = new Node ( Token.REF_NS_MEMBER, target, nsNode, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[BugLab_Argument_Swapping]^ref = new Node ( nsNode, target, Token.REF_NS_MEMBER, elem, lineno, charno ) ;^621^622^^^^618^623^ref = new Node ( Token.REF_NS_MEMBER, target, nsNode, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[BugLab_Variable_Misuse]^ref = new Node ( Token.REF_NS_MEMBER, target, nsNode, elem, lineno, memberTypeFlags ) ;^621^622^^^^618^623^ref = new Node ( Token.REF_NS_MEMBER, target, nsNode, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[BugLab_Argument_Swapping]^ref = new Node ( Token.REF_NS_MEMBER, charno, nsNode, elem, lineno, target ) ;^621^622^^^^618^623^ref = new Node ( Token.REF_NS_MEMBER, target, nsNode, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[BugLab_Argument_Swapping]^ref = new Node ( Token.REF_NS_MEMBER, target, lineno, elem, nsNode, charno ) ;^621^622^^^^618^623^ref = new Node ( Token.REF_NS_MEMBER, target, nsNode, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[BugLab_Argument_Swapping]^ref = new Node ( elem, target, nsNode, Token.REF_NS_MEMBER, lineno, charno ) ;^621^622^^^^618^623^ref = new Node ( Token.REF_NS_MEMBER, target, nsNode, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[BugLab_Variable_Misuse]^ref = new Node ( Token.REF_MEMBER, ref, elem, lineno, charno ) ;^619^^^^^600^629^ref = new Node ( Token.REF_MEMBER, target, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[BugLab_Variable_Misuse]^ref = new Node ( Token.REF_MEMBER, target, target, lineno, charno ) ;^619^^^^^600^629^ref = new Node ( Token.REF_MEMBER, target, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[BugLab_Variable_Misuse]^ref = new Node ( Token.REF_MEMBER, target, elem, memberTypeFlags, charno ) ;^619^^^^^600^629^ref = new Node ( Token.REF_MEMBER, target, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[BugLab_Variable_Misuse]^ref = new Node ( Token.REF_MEMBER, target, elem, lineno, memberTypeFlags ) ;^619^^^^^600^629^ref = new Node ( Token.REF_MEMBER, target, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[BugLab_Argument_Swapping]^ref = new Node ( Token.REF_MEMBER, elem, target, lineno, charno ) ;^619^^^^^600^629^ref = new Node ( Token.REF_MEMBER, target, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[BugLab_Argument_Swapping]^ref = new Node ( lineno, target, elem, Token.REF_MEMBER, charno ) ;^619^^^^^600^629^ref = new Node ( Token.REF_MEMBER, target, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[BugLab_Argument_Swapping]^ref = new Node ( Token.REF_MEMBER, target, elem, charno, lineno ) ;^619^^^^^600^629^ref = new Node ( Token.REF_MEMBER, target, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[BugLab_Argument_Swapping]^ref = new Node ( target, Token.REF_MEMBER, elem, lineno, charno ) ;^619^^^^^600^629^ref = new Node ( Token.REF_MEMBER, target, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[BugLab_Argument_Swapping]^ref = new Node ( Token.REF_MEMBER, target, lineno, elem, charno ) ;^619^^^^^600^629^ref = new Node ( Token.REF_MEMBER, target, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[BugLab_Argument_Swapping]^ref = new Node ( charno, target, elem, lineno, Token.REF_MEMBER ) ;^619^^^^^600^629^ref = new Node ( Token.REF_MEMBER, target, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[BugLab_Argument_Swapping]^ref = new Node ( charno, nsNode, elem, lineno, Token.REF_NS_NAME ) ;^615^^^^^600^629^ref = new Node ( Token.REF_NS_NAME, nsNode, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[BugLab_Variable_Misuse]^ref = new Node ( Token.REF_MEMBER, target, ref, lineno, charno ) ;^619^^^^^600^629^ref = new Node ( Token.REF_MEMBER, target, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[BugLab_Argument_Swapping]^ref = new Node ( elem, target, Token.REF_MEMBER, lineno, charno ) ;^619^^^^^600^629^ref = new Node ( Token.REF_MEMBER, target, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[BugLab_Variable_Misuse]^ref = new Node ( Token.REF_NS_MEMBER, ref, nsNode, elem, lineno, charno ) ;^621^622^^^^600^629^ref = new Node ( Token.REF_NS_MEMBER, target, nsNode, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[BugLab_Variable_Misuse]^ref = new Node ( Token.REF_NS_MEMBER, target, target, elem, lineno, charno ) ;^621^622^^^^600^629^ref = new Node ( Token.REF_NS_MEMBER, target, nsNode, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[BugLab_Variable_Misuse]^ref = new Node ( Token.REF_NS_MEMBER, target, nsNode, elem, memberTypeFlags, charno ) ;^621^622^^^^600^629^ref = new Node ( Token.REF_NS_MEMBER, target, nsNode, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[BugLab_Variable_Misuse]^ref = new Node ( Token.REF_NS_MEMBER, target, nsNode, elem, lineno, memberTypeFlags ) ;^621^622^^^^600^629^ref = new Node ( Token.REF_NS_MEMBER, target, nsNode, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[BugLab_Argument_Swapping]^ref = new Node ( Token.REF_NS_MEMBER, elem, nsNode, target, lineno, charno ) ;^621^622^^^^600^629^ref = new Node ( Token.REF_NS_MEMBER, target, nsNode, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[BugLab_Argument_Swapping]^ref = new Node ( Token.REF_NS_MEMBER, nsNode, target, elem, lineno, charno ) ;^621^622^^^^600^629^ref = new Node ( Token.REF_NS_MEMBER, target, nsNode, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[BugLab_Argument_Swapping]^ref = new Node ( Token.REF_NS_MEMBER, target, elem, nsNode, lineno, charno ) ;^621^622^^^^600^629^ref = new Node ( Token.REF_NS_MEMBER, target, nsNode, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[BugLab_Argument_Swapping]^ref = new Node ( Token.REF_NS_MEMBER, target, nsNode, elem, charno, lineno ) ;^621^622^^^^600^629^ref = new Node ( Token.REF_NS_MEMBER, target, nsNode, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[BugLab_Argument_Swapping]^ref = new Node ( Token.REF_NS_MEMBER, target, nsNode, charno, lineno, elem ) ;^621^622^^^^600^629^ref = new Node ( Token.REF_NS_MEMBER, target, nsNode, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[BugLab_Argument_Swapping]^ref = new Node ( elem, target, nsNode, Token.REF_NS_MEMBER, lineno, charno ) ;^621^622^^^^600^629^ref = new Node ( Token.REF_NS_MEMBER, target, nsNode, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[BugLab_Argument_Swapping]^ref = new Node ( Token.REF_NS_NAME, charno, elem, lineno, nsNode ) ;^615^^^^^600^629^ref = new Node ( Token.REF_NS_NAME, nsNode, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[BugLab_Argument_Swapping]^ref = new Node ( nsNode, Token.REF_NS_NAME, elem, lineno, charno ) ;^615^^^^^600^629^ref = new Node ( Token.REF_NS_NAME, nsNode, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[BugLab_Argument_Swapping]^ref = new Node ( Token.REF_MEMBER, target, charno, lineno, elem ) ;^619^^^^^600^629^ref = new Node ( Token.REF_MEMBER, target, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[BugLab_Variable_Misuse]^ref = new Node ( Token.REF_NS_MEMBER, target, nsNode, target, lineno, charno ) ;^621^622^^^^600^629^ref = new Node ( Token.REF_NS_MEMBER, target, nsNode, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[BugLab_Argument_Swapping]^ref = new Node ( lineno, target, nsNode, elem, Token.REF_NS_MEMBER, charno ) ;^621^622^^^^600^629^ref = new Node ( Token.REF_NS_MEMBER, target, nsNode, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[BugLab_Variable_Misuse]^if  ( lineno != 0 )  {^625^^^^^600^629^if  ( memberTypeFlags != 0 )  {^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[BugLab_Wrong_Operator]^if  ( memberTypeFlags <= 0 )  {^625^^^^^600^629^if  ( memberTypeFlags != 0 )  {^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[BugLab_Wrong_Literal]^if  ( memberTypeFlags !=  )  {^625^^^^^600^629^if  ( memberTypeFlags != 0 )  {^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[BugLab_Variable_Misuse]^ref.putIntProp ( Node.MEMBER_TYPE_PROP, lineno ) ;^626^^^^^600^629^ref.putIntProp ( Node.MEMBER_TYPE_PROP, memberTypeFlags ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[BugLab_Variable_Misuse]^return new Node ( Token.GET_REF, target, lineno, charno ) ;^628^^^^^600^629^return new Node ( Token.GET_REF, ref, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[BugLab_Variable_Misuse]^return new Node ( Token.GET_REF, ref, memberTypeFlags, charno ) ;^628^^^^^600^629^return new Node ( Token.GET_REF, ref, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[BugLab_Variable_Misuse]^return new Node ( Token.GET_REF, ref, lineno, memberTypeFlags ) ;^628^^^^^600^629^return new Node ( Token.GET_REF, ref, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[BugLab_Argument_Swapping]^return new Node ( Token.GET_REF, lineno, ref, charno ) ;^628^^^^^600^629^return new Node ( Token.GET_REF, ref, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[BugLab_Argument_Swapping]^return new Node ( Token.GET_REF, ref, charno, lineno ) ;^628^^^^^600^629^return new Node ( Token.GET_REF, ref, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[BugLab_Argument_Swapping]^return new Node ( lineno, ref, Token.GET_REF, charno ) ;^628^^^^^600^629^return new Node ( Token.GET_REF, ref, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[BugLab_Argument_Swapping]^return new Node ( ref, Token.GET_REF, lineno, charno ) ;^628^^^^^600^629^return new Node ( Token.GET_REF, ref, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[BugLab_Argument_Swapping]^return new Node ( Token.GET_REF, charno, lineno, ref ) ;^628^^^^^600^629^return new Node ( Token.GET_REF, ref, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[BugLab_Argument_Swapping]^return new Node ( charno, ref, lineno, Token.GET_REF ) ;^628^^^^^600^629^return new Node ( Token.GET_REF, ref, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[BugLab_Variable_Misuse]^Node idNode = temp;^642^^^^^634^652^Node idNode = right;^[CLASS] IRFactory  [METHOD] createBinary [RETURN_TYPE] Node   int nodeType Node left Node right int lineno int charno [VARIABLES] boolean  int  charno  lineno  nodeType  Parser  parser  Node  idNode  left  right  temp  
[BugLab_Variable_Misuse]^return new Node ( charno, left, right, lineno, charno ) ;^651^^^^^634^652^return new Node ( nodeType, left, right, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createBinary [RETURN_TYPE] Node   int nodeType Node left Node right int lineno int charno [VARIABLES] boolean  int  charno  lineno  nodeType  Parser  parser  Node  idNode  left  right  temp  
[BugLab_Variable_Misuse]^return new Node ( nodeType, temp, right, lineno, charno ) ;^651^^^^^634^652^return new Node ( nodeType, left, right, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createBinary [RETURN_TYPE] Node   int nodeType Node left Node right int lineno int charno [VARIABLES] boolean  int  charno  lineno  nodeType  Parser  parser  Node  idNode  left  right  temp  
[BugLab_Variable_Misuse]^return new Node ( nodeType, left, temp, lineno, charno ) ;^651^^^^^634^652^return new Node ( nodeType, left, right, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createBinary [RETURN_TYPE] Node   int nodeType Node left Node right int lineno int charno [VARIABLES] boolean  int  charno  lineno  nodeType  Parser  parser  Node  idNode  left  right  temp  
[BugLab_Variable_Misuse]^return new Node ( nodeType, left, right, lineno, nodeType ) ;^651^^^^^634^652^return new Node ( nodeType, left, right, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createBinary [RETURN_TYPE] Node   int nodeType Node left Node right int lineno int charno [VARIABLES] boolean  int  charno  lineno  nodeType  Parser  parser  Node  idNode  left  right  temp  
[BugLab_Argument_Swapping]^return new Node ( right, left, nodeType, lineno, charno ) ;^651^^^^^634^652^return new Node ( nodeType, left, right, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createBinary [RETURN_TYPE] Node   int nodeType Node left Node right int lineno int charno [VARIABLES] boolean  int  charno  lineno  nodeType  Parser  parser  Node  idNode  left  right  temp  
[BugLab_Argument_Swapping]^return new Node ( nodeType, right, left, lineno, charno ) ;^651^^^^^634^652^return new Node ( nodeType, left, right, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createBinary [RETURN_TYPE] Node   int nodeType Node left Node right int lineno int charno [VARIABLES] boolean  int  charno  lineno  nodeType  Parser  parser  Node  idNode  left  right  temp  
[BugLab_Argument_Swapping]^return new Node ( nodeType, left, charno, lineno, right ) ;^651^^^^^634^652^return new Node ( nodeType, left, right, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createBinary [RETURN_TYPE] Node   int nodeType Node left Node right int lineno int charno [VARIABLES] boolean  int  charno  lineno  nodeType  Parser  parser  Node  idNode  left  right  temp  
[BugLab_Argument_Swapping]^return new Node ( nodeType, left, lineno, right, charno ) ;^651^^^^^634^652^return new Node ( nodeType, left, right, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createBinary [RETURN_TYPE] Node   int nodeType Node left Node right int lineno int charno [VARIABLES] boolean  int  charno  lineno  nodeType  Parser  parser  Node  idNode  left  right  temp  
[BugLab_Argument_Swapping]^return new Node ( nodeType, left, right, charno, lineno ) ;^651^^^^^634^652^return new Node ( nodeType, left, right, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createBinary [RETURN_TYPE] Node   int nodeType Node left Node right int lineno int charno [VARIABLES] boolean  int  charno  lineno  nodeType  Parser  parser  Node  idNode  left  right  temp  
[BugLab_Variable_Misuse]^return new Node ( lineno, left, right, lineno, charno ) ;^651^^^^^634^652^return new Node ( nodeType, left, right, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createBinary [RETURN_TYPE] Node   int nodeType Node left Node right int lineno int charno [VARIABLES] boolean  int  charno  lineno  nodeType  Parser  parser  Node  idNode  left  right  temp  
[BugLab_Variable_Misuse]^return new Node ( nodeType, left, right, nodeType, charno ) ;^651^^^^^634^652^return new Node ( nodeType, left, right, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createBinary [RETURN_TYPE] Node   int nodeType Node left Node right int lineno int charno [VARIABLES] boolean  int  charno  lineno  nodeType  Parser  parser  Node  idNode  left  right  temp  
[BugLab_Argument_Swapping]^return new Node ( left, nodeType, right, lineno, charno ) ;^651^^^^^634^652^return new Node ( nodeType, left, right, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createBinary [RETURN_TYPE] Node   int nodeType Node left Node right int lineno int charno [VARIABLES] boolean  int  charno  lineno  nodeType  Parser  parser  Node  idNode  left  right  temp  
[BugLab_Variable_Misuse]^int nodeType = right.getType (  ) ;^657^^^^^654^670^int nodeType = left.getType (  ) ;^[CLASS] IRFactory  [METHOD] createAssignment [RETURN_TYPE] Node   int nodeOp Node left Node right int lineno int charno [VARIABLES] boolean  int  charno  lineno  nodeOp  nodeType  Parser  parser  Node  left  right  
[BugLab_Variable_Misuse]^return new Node ( Token.ASSIGN, right, right, lineno, charno ) ;^669^^^^^654^670^return new Node ( Token.ASSIGN, left, right, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createAssignment [RETURN_TYPE] Node   int nodeOp Node left Node right int lineno int charno [VARIABLES] boolean  int  charno  lineno  nodeOp  nodeType  Parser  parser  Node  left  right  
[BugLab_Variable_Misuse]^return new Node ( Token.ASSIGN, left, left, lineno, charno ) ;^669^^^^^654^670^return new Node ( Token.ASSIGN, left, right, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createAssignment [RETURN_TYPE] Node   int nodeOp Node left Node right int lineno int charno [VARIABLES] boolean  int  charno  lineno  nodeOp  nodeType  Parser  parser  Node  left  right  
[BugLab_Variable_Misuse]^return new Node ( Token.ASSIGN, left, right, nodeType, charno ) ;^669^^^^^654^670^return new Node ( Token.ASSIGN, left, right, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createAssignment [RETURN_TYPE] Node   int nodeOp Node left Node right int lineno int charno [VARIABLES] boolean  int  charno  lineno  nodeOp  nodeType  Parser  parser  Node  left  right  
[BugLab_Variable_Misuse]^return new Node ( Token.ASSIGN, left, right, lineno, nodeType ) ;^669^^^^^654^670^return new Node ( Token.ASSIGN, left, right, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createAssignment [RETURN_TYPE] Node   int nodeOp Node left Node right int lineno int charno [VARIABLES] boolean  int  charno  lineno  nodeOp  nodeType  Parser  parser  Node  left  right  
[BugLab_Argument_Swapping]^return new Node ( Token.ASSIGN, lineno, right, left, charno ) ;^669^^^^^654^670^return new Node ( Token.ASSIGN, left, right, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createAssignment [RETURN_TYPE] Node   int nodeOp Node left Node right int lineno int charno [VARIABLES] boolean  int  charno  lineno  nodeOp  nodeType  Parser  parser  Node  left  right  
[BugLab_Argument_Swapping]^return new Node ( Token.ASSIGN, left, lineno, right, charno ) ;^669^^^^^654^670^return new Node ( Token.ASSIGN, left, right, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createAssignment [RETURN_TYPE] Node   int nodeOp Node left Node right int lineno int charno [VARIABLES] boolean  int  charno  lineno  nodeOp  nodeType  Parser  parser  Node  left  right  
[BugLab_Argument_Swapping]^return new Node ( Token.ASSIGN, left, right, charno, lineno ) ;^669^^^^^654^670^return new Node ( Token.ASSIGN, left, right, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createAssignment [RETURN_TYPE] Node   int nodeOp Node left Node right int lineno int charno [VARIABLES] boolean  int  charno  lineno  nodeOp  nodeType  Parser  parser  Node  left  right  
[BugLab_Argument_Swapping]^return new Node ( charno, left, right, lineno, Token.ASSIGN ) ;^669^^^^^654^670^return new Node ( Token.ASSIGN, left, right, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createAssignment [RETURN_TYPE] Node   int nodeOp Node left Node right int lineno int charno [VARIABLES] boolean  int  charno  lineno  nodeOp  nodeType  Parser  parser  Node  left  right  
[BugLab_Argument_Swapping]^return new Node ( left, Token.ASSIGN, right, lineno, charno ) ;^669^^^^^654^670^return new Node ( Token.ASSIGN, left, right, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createAssignment [RETURN_TYPE] Node   int nodeOp Node left Node right int lineno int charno [VARIABLES] boolean  int  charno  lineno  nodeOp  nodeType  Parser  parser  Node  left  right  
[BugLab_Argument_Swapping]^return new Node ( lineno, left, right, Token.ASSIGN, charno ) ;^669^^^^^654^670^return new Node ( Token.ASSIGN, left, right, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createAssignment [RETURN_TYPE] Node   int nodeOp Node left Node right int lineno int charno [VARIABLES] boolean  int  charno  lineno  nodeOp  nodeType  Parser  parser  Node  left  right  
[BugLab_Wrong_Operator]^if  ( "arguments".equals ( name ) &&  ( parser.compilerEnv.activationNames != null && parser.compilerEnv.activationNames.containsKey ( name )  )  ) {^715^716^717^718^^711^733^if  ( "arguments".equals ( name ) ||  ( parser.compilerEnv.activationNames != null && parser.compilerEnv.activationNames.containsKey ( name )  )  ) {^[CLASS] IRFactory  [METHOD] checkActivationName [RETURN_TYPE] void   String name int token [VARIABLES] String  name  boolean  activation  int  token  Parser  parser  
[BugLab_Wrong_Operator]^if  ( "arguments".equals ( name ) ||  ( parser.compilerEnv.activationNames != null || parser.compilerEnv.activationNames.containsKey ( name )  )  ) {^715^716^717^718^^711^733^if  ( "arguments".equals ( name ) ||  ( parser.compilerEnv.activationNames != null && parser.compilerEnv.activationNames.containsKey ( name )  )  ) {^[CLASS] IRFactory  [METHOD] checkActivationName [RETURN_TYPE] void   String name int token [VARIABLES] String  name  boolean  activation  int  token  Parser  parser  
[BugLab_Wrong_Operator]^if  ( "arguments".equals ( name ) ||  ( parser.compilerEnv.activationNames == null && parser.compilerEnv.activationNames.containsKey ( name )  )  ) {^715^716^717^718^^711^733^if  ( "arguments".equals ( name ) ||  ( parser.compilerEnv.activationNames != null && parser.compilerEnv.activationNames.containsKey ( name )  )  ) {^[CLASS] IRFactory  [METHOD] checkActivationName [RETURN_TYPE] void   String name int token [VARIABLES] String  name  boolean  activation  int  token  Parser  parser  
[BugLab_Wrong_Operator]^if  ( token == Token.GETPROP || parser.compilerEnv.getLanguageVersion (  ) == Context.VERSION_1_2 ) {^721^722^723^724^^711^733^if  ( token == Token.GETPROP && parser.compilerEnv.getLanguageVersion (  ) == Context.VERSION_1_2 ) {^[CLASS] IRFactory  [METHOD] checkActivationName [RETURN_TYPE] void   String name int token [VARIABLES] String  name  boolean  activation  int  token  Parser  parser  
[BugLab_Wrong_Operator]^if  ( token >= Token.GETPROP && parser.compilerEnv.getLanguageVersion (  ) == Context.VERSION_1_2 ) {^721^722^723^724^^711^733^if  ( token == Token.GETPROP && parser.compilerEnv.getLanguageVersion (  ) == Context.VERSION_1_2 ) {^[CLASS] IRFactory  [METHOD] checkActivationName [RETURN_TYPE] void   String name int token [VARIABLES] String  name  boolean  activation  int  token  Parser  parser  
[BugLab_Wrong_Operator]^if  ( token <= Token.GETPROP && parser.compilerEnv.getLanguageVersion (  ) == Context.VERSION_1_2 ) {^721^722^723^724^^711^733^if  ( token == Token.GETPROP && parser.compilerEnv.getLanguageVersion (  ) == Context.VERSION_1_2 ) {^[CLASS] IRFactory  [METHOD] checkActivationName [RETURN_TYPE] void   String name int token [VARIABLES] String  name  boolean  activation  int  token  Parser  parser  
[BugLab_Wrong_Literal]^activation = false;^726^^^^^711^733^activation = true;^[CLASS] IRFactory  [METHOD] checkActivationName [RETURN_TYPE] void   String name int token [VARIABLES] String  name  boolean  activation  int  token  Parser  parser  
[BugLab_Wrong_Operator]^if  ( token > Token.GETPROP && parser.compilerEnv.getLanguageVersion (  ) == Context.VERSION_1_2 ) {^721^722^723^724^^711^733^if  ( token == Token.GETPROP && parser.compilerEnv.getLanguageVersion (  ) == Context.VERSION_1_2 ) {^[CLASS] IRFactory  [METHOD] checkActivationName [RETURN_TYPE] void   String name int token [VARIABLES] String  name  boolean  activation  int  token  Parser  parser  
[BugLab_Wrong_Operator]^if  ( token != Token.GETPROP && parser.compilerEnv.getLanguageVersion (  ) == Context.VERSION_1_2 ) {^721^722^723^724^^711^733^if  ( token == Token.GETPROP && parser.compilerEnv.getLanguageVersion (  ) == Context.VERSION_1_2 ) {^[CLASS] IRFactory  [METHOD] checkActivationName [RETURN_TYPE] void   String name int token [VARIABLES] String  name  boolean  activation  int  token  Parser  parser  
[BugLab_Wrong_Literal]^activation = false;^719^^^^^711^733^activation = true;^[CLASS] IRFactory  [METHOD] checkActivationName [RETURN_TYPE] void   String name int token [VARIABLES] String  name  boolean  activation  int  token  Parser  parser  
[BugLab_Wrong_Literal]^boolean activation = true;^714^^^^^711^733^boolean activation = false;^[CLASS] IRFactory  [METHOD] checkActivationName [RETURN_TYPE] void   String name int token [VARIABLES] String  name  boolean  activation  int  token  Parser  parser  
[BugLab_Wrong_Operator]^if  ( token < Token.GETPROP && parser.compilerEnv.getLanguageVersion (  ) == Context.VERSION_1_2 ) {^721^722^723^724^^711^733^if  ( token == Token.GETPROP && parser.compilerEnv.getLanguageVersion (  ) == Context.VERSION_1_2 ) {^[CLASS] IRFactory  [METHOD] checkActivationName [RETURN_TYPE] void   String name int token [VARIABLES] String  name  boolean  activation  int  token  Parser  parser  
[BugLab_Wrong_Literal]^(  ( FunctionNode ) parser.currentScriptOrFn ) .itsNeedsActivation = false;^738^^^^^735^740^(  ( FunctionNode ) parser.currentScriptOrFn ) .itsNeedsActivation = true;^[CLASS] IRFactory  [METHOD] setRequiresActivation [RETURN_TYPE] void   [VARIABLES] Parser  parser  boolean  
