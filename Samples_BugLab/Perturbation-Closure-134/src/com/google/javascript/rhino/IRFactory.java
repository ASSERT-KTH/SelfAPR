[buglab_swap_variables]^if  ( scriptNode != null )  { children.addChildrenToBack ( children ) ; }^70^^^^^67^71^if  ( children != null )  { scriptNode.addChildrenToBack ( children ) ; }^[CLASS] IRFactory  [METHOD] initScript [RETURN_TYPE] void   ScriptOrFnNode scriptNode Node body [VARIABLES] ScriptOrFnNode  scriptNode  boolean  Parser  parser  Node  body  children  
[buglab_swap_variables]^return new Node ( charno, lineno, nodeType ) ;^86^^^^^84^87^return new Node ( nodeType, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createLeaf [RETURN_TYPE] Node   int nodeType int lineno int charno [VARIABLES] int  charno  lineno  nodeType  Parser  parser  boolean  
[buglab_swap_variables]^return new Node (  lineno, charno ) ;^86^^^^^84^87^return new Node ( nodeType, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createLeaf [RETURN_TYPE] Node   int nodeType int lineno int charno [VARIABLES] int  charno  lineno  nodeType  Parser  parser  boolean  
[buglab_swap_variables]^return new Node ( lineno, nodeType, charno ) ;^86^^^^^84^87^return new Node ( nodeType, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createLeaf [RETURN_TYPE] Node   int nodeType int lineno int charno [VARIABLES] int  charno  lineno  nodeType  Parser  parser  boolean  
[buglab_swap_variables]^return new Node ( nodeType,  charno ) ;^86^^^^^84^87^return new Node ( nodeType, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createLeaf [RETURN_TYPE] Node   int nodeType int lineno int charno [VARIABLES] int  charno  lineno  nodeType  Parser  parser  boolean  
[buglab_swap_variables]^return new Node ( nodeType, lineno ) ;^86^^^^^84^87^return new Node ( nodeType, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createLeaf [RETURN_TYPE] Node   int nodeType int lineno int charno [VARIABLES] int  charno  lineno  nodeType  Parser  parser  boolean  
[buglab_swap_variables]^return new Node ( nodeType, charno, lineno ) ;^86^^^^^84^87^return new Node ( nodeType, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createLeaf [RETURN_TYPE] Node   int nodeType int lineno int charno [VARIABLES] int  charno  lineno  nodeType  Parser  parser  boolean  
[buglab_swap_variables]^return new Node ( Token.SWITCH, charno, lineno ) ;^95^^^^^93^96^return new Node ( Token.SWITCH, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createSwitch [RETURN_TYPE] Node   int lineno int charno [VARIABLES] int  charno  lineno  Parser  parser  boolean  
[buglab_swap_variables]^return new Node ( Token.SWITCH,  charno ) ;^95^^^^^93^96^return new Node ( Token.SWITCH, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createSwitch [RETURN_TYPE] Node   int lineno int charno [VARIABLES] int  charno  lineno  Parser  parser  boolean  
[buglab_swap_variables]^return new Node ( Token.SWITCH, lineno ) ;^95^^^^^93^96^return new Node ( Token.SWITCH, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createSwitch [RETURN_TYPE] Node   int lineno int charno [VARIABLES] int  charno  lineno  Parser  parser  boolean  
[buglab_swap_variables]^return new Node ( lineno, Token.SWITCH, charno ) ;^95^^^^^93^96^return new Node ( Token.SWITCH, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createSwitch [RETURN_TYPE] Node   int lineno int charno [VARIABLES] int  charno  lineno  Parser  parser  boolean  
[buglab_swap_variables]^return new Node (  lineno, charno ) ;^95^^^^^93^96^return new Node ( Token.SWITCH, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createSwitch [RETURN_TYPE] Node   int lineno int charno [VARIABLES] int  charno  lineno  Parser  parser  boolean  
[buglab_swap_variables]^return new Node ( charno, lineno, Token.SWITCH ) ;^95^^^^^93^96^return new Node ( Token.SWITCH, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createSwitch [RETURN_TYPE] Node   int lineno int charno [VARIABLES] int  charno  lineno  Parser  parser  boolean  
[buglab_swap_variables]^if  ( Token.SWITCH.getType (  )  != switchNode )  throw Kit.codeBug (  ) ;^104^^^^^101^115^if  ( switchNode.getType (  )  != Token.SWITCH )  throw Kit.codeBug (  ) ;^[CLASS] IRFactory  [METHOD] addSwitchCase [RETURN_TYPE] void   Node switchNode Node caseExpression Node statements int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  caseExpression  caseNode  statements  switchNode  
[buglab_swap_variables]^caseNode = new Node ( lineno, Token.DEFAULT, charno ) ;^111^^^^^101^115^caseNode = new Node ( Token.DEFAULT, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] addSwitchCase [RETURN_TYPE] void   Node switchNode Node caseExpression Node statements int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  caseExpression  caseNode  statements  switchNode  
[buglab_swap_variables]^caseNode = new Node ( Token.DEFAULT,  charno ) ;^111^^^^^101^115^caseNode = new Node ( Token.DEFAULT, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] addSwitchCase [RETURN_TYPE] void   Node switchNode Node caseExpression Node statements int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  caseExpression  caseNode  statements  switchNode  
[buglab_swap_variables]^caseNode = new Node ( charno, lineno, Token.DEFAULT ) ;^111^^^^^101^115^caseNode = new Node ( Token.DEFAULT, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] addSwitchCase [RETURN_TYPE] void   Node switchNode Node caseExpression Node statements int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  caseExpression  caseNode  statements  switchNode  
[buglab_swap_variables]^caseNode = new Node ( Token.DEFAULT, lineno ) ;^111^^^^^101^115^caseNode = new Node ( Token.DEFAULT, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] addSwitchCase [RETURN_TYPE] void   Node switchNode Node caseExpression Node statements int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  caseExpression  caseNode  statements  switchNode  
[buglab_swap_variables]^caseNode = new Node (  lineno, charno ) ;^111^^^^^101^115^caseNode = new Node ( Token.DEFAULT, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] addSwitchCase [RETURN_TYPE] void   Node switchNode Node caseExpression Node statements int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  caseExpression  caseNode  statements  switchNode  
[buglab_swap_variables]^caseNode = new Node ( Token.DEFAULT, charno, lineno ) ;^111^^^^^101^115^caseNode = new Node ( Token.DEFAULT, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] addSwitchCase [RETURN_TYPE] void   Node switchNode Node caseExpression Node statements int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  caseExpression  caseNode  statements  switchNode  
[buglab_swap_variables]^caseNode = new Node ( Token.CASE, charno, lineno, caseExpression ) ;^108^109^^^^101^115^caseNode = new Node ( Token.CASE, caseExpression, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] addSwitchCase [RETURN_TYPE] void   Node switchNode Node caseExpression Node statements int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  caseExpression  caseNode  statements  switchNode  
[buglab_swap_variables]^caseNode = new Node ( Token.CASE,  lineno, charno ) ;^108^109^^^^101^115^caseNode = new Node ( Token.CASE, caseExpression, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] addSwitchCase [RETURN_TYPE] void   Node switchNode Node caseExpression Node statements int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  caseExpression  caseNode  statements  switchNode  
[buglab_swap_variables]^caseNode = new Node ( Token.CASE, caseExpression, charno, lineno ) ;^108^109^^^^101^115^caseNode = new Node ( Token.CASE, caseExpression, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] addSwitchCase [RETURN_TYPE] void   Node switchNode Node caseExpression Node statements int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  caseExpression  caseNode  statements  switchNode  
[buglab_swap_variables]^caseNode = new Node ( Token.CASE, caseExpression,  charno ) ;^108^109^^^^101^115^caseNode = new Node ( Token.CASE, caseExpression, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] addSwitchCase [RETURN_TYPE] void   Node switchNode Node caseExpression Node statements int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  caseExpression  caseNode  statements  switchNode  
[buglab_swap_variables]^caseNode = new Node ( Token.CASE, caseExpression, lineno ) ;^108^109^^^^101^115^caseNode = new Node ( Token.CASE, caseExpression, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] addSwitchCase [RETURN_TYPE] void   Node switchNode Node caseExpression Node statements int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  caseExpression  caseNode  statements  switchNode  
[buglab_swap_variables]^caseNode = new Node ( caseExpression, Token.CASE, lineno, charno ) ;^108^109^^^^101^115^caseNode = new Node ( Token.CASE, caseExpression, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] addSwitchCase [RETURN_TYPE] void   Node switchNode Node caseExpression Node statements int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  caseExpression  caseNode  statements  switchNode  
[buglab_swap_variables]^caseNode = new Node (  caseExpression, lineno, charno ) ;^108^109^^^^101^115^caseNode = new Node ( Token.CASE, caseExpression, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] addSwitchCase [RETURN_TYPE] void   Node switchNode Node caseExpression Node statements int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  caseExpression  caseNode  statements  switchNode  
[buglab_swap_variables]^caseNode = new Node ( Token.CASE, lineno, caseExpression, charno ) ;^108^109^^^^101^115^caseNode = new Node ( Token.CASE, caseExpression, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] addSwitchCase [RETURN_TYPE] void   Node switchNode Node caseExpression Node statements int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  caseExpression  caseNode  statements  switchNode  
[buglab_swap_variables]^caseNode = new Node ( charno, caseExpression, lineno, Token.CASE ) ;^108^109^^^^101^115^caseNode = new Node ( Token.CASE, caseExpression, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] addSwitchCase [RETURN_TYPE] void   Node switchNode Node caseExpression Node statements int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  caseExpression  caseNode  statements  switchNode  
[buglab_swap_variables]^return new Node ( charno, lineno, token ) ;^123^^^^^121^124^return new Node ( token, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createVariables [RETURN_TYPE] Node   int token int lineno int charno [VARIABLES] int  charno  lineno  token  Parser  parser  boolean  
[buglab_swap_variables]^return new Node (  lineno, charno ) ;^123^^^^^121^124^return new Node ( token, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createVariables [RETURN_TYPE] Node   int token int lineno int charno [VARIABLES] int  charno  lineno  token  Parser  parser  boolean  
[buglab_swap_variables]^return new Node ( lineno, token, charno ) ;^123^^^^^121^124^return new Node ( token, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createVariables [RETURN_TYPE] Node   int token int lineno int charno [VARIABLES] int  charno  lineno  token  Parser  parser  boolean  
[buglab_swap_variables]^return new Node ( token,  charno ) ;^123^^^^^121^124^return new Node ( token, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createVariables [RETURN_TYPE] Node   int token int lineno int charno [VARIABLES] int  charno  lineno  token  Parser  parser  boolean  
[buglab_swap_variables]^return new Node ( token, charno, lineno ) ;^123^^^^^121^124^return new Node ( token, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createVariables [RETURN_TYPE] Node   int token int lineno int charno [VARIABLES] int  charno  lineno  token  Parser  parser  boolean  
[buglab_swap_variables]^return new Node ( token, lineno ) ;^123^^^^^121^124^return new Node ( token, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createVariables [RETURN_TYPE] Node   int token int lineno int charno [VARIABLES] int  charno  lineno  token  Parser  parser  boolean  
[buglab_swap_variables]^return new Node ( charno, expr, lineno, type ) ;^134^^^^^126^135^return new Node ( type, expr, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createExprStatement [RETURN_TYPE] Node   Node expr int lineno int charno [VARIABLES] boolean  int  charno  lineno  type  Parser  parser  Node  expr  
[buglab_swap_variables]^return new Node (  expr, lineno, charno ) ;^134^^^^^126^135^return new Node ( type, expr, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createExprStatement [RETURN_TYPE] Node   Node expr int lineno int charno [VARIABLES] boolean  int  charno  lineno  type  Parser  parser  Node  expr  
[buglab_swap_variables]^return new Node ( expr, type, lineno, charno ) ;^134^^^^^126^135^return new Node ( type, expr, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createExprStatement [RETURN_TYPE] Node   Node expr int lineno int charno [VARIABLES] boolean  int  charno  lineno  type  Parser  parser  Node  expr  
[buglab_swap_variables]^return new Node ( type,  lineno, charno ) ;^134^^^^^126^135^return new Node ( type, expr, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createExprStatement [RETURN_TYPE] Node   Node expr int lineno int charno [VARIABLES] boolean  int  charno  lineno  type  Parser  parser  Node  expr  
[buglab_swap_variables]^return new Node ( lineno, expr, type, charno ) ;^134^^^^^126^135^return new Node ( type, expr, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createExprStatement [RETURN_TYPE] Node   Node expr int lineno int charno [VARIABLES] boolean  int  charno  lineno  type  Parser  parser  Node  expr  
[buglab_swap_variables]^return new Node ( type, expr,  charno ) ;^134^^^^^126^135^return new Node ( type, expr, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createExprStatement [RETURN_TYPE] Node   Node expr int lineno int charno [VARIABLES] boolean  int  charno  lineno  type  Parser  parser  Node  expr  
[buglab_swap_variables]^return new Node ( type, charno, lineno, expr ) ;^134^^^^^126^135^return new Node ( type, expr, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createExprStatement [RETURN_TYPE] Node   Node expr int lineno int charno [VARIABLES] boolean  int  charno  lineno  type  Parser  parser  Node  expr  
[buglab_swap_variables]^return new Node ( type, expr, lineno ) ;^134^^^^^126^135^return new Node ( type, expr, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createExprStatement [RETURN_TYPE] Node   Node expr int lineno int charno [VARIABLES] boolean  int  charno  lineno  type  Parser  parser  Node  expr  
[buglab_swap_variables]^return new Node ( Token.EXPR_VOID, lineno, expr, charno ) ;^139^^^^^137^140^return new Node ( Token.EXPR_VOID, expr, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createExprStatementNoReturn [RETURN_TYPE] Node   Node expr int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  expr  
[buglab_swap_variables]^return new Node ( Token.EXPR_VOID,  lineno, charno ) ;^139^^^^^137^140^return new Node ( Token.EXPR_VOID, expr, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createExprStatementNoReturn [RETURN_TYPE] Node   Node expr int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  expr  
[buglab_swap_variables]^return new Node ( Token.EXPR_VOID, expr, charno, lineno ) ;^139^^^^^137^140^return new Node ( Token.EXPR_VOID, expr, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createExprStatementNoReturn [RETURN_TYPE] Node   Node expr int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  expr  
[buglab_swap_variables]^return new Node ( Token.EXPR_VOID, expr,  charno ) ;^139^^^^^137^140^return new Node ( Token.EXPR_VOID, expr, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createExprStatementNoReturn [RETURN_TYPE] Node   Node expr int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  expr  
[buglab_swap_variables]^return new Node ( Token.EXPR_VOID, expr, lineno ) ;^139^^^^^137^140^return new Node ( Token.EXPR_VOID, expr, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createExprStatementNoReturn [RETURN_TYPE] Node   Node expr int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  expr  
[buglab_swap_variables]^return new Node ( expr, Token.EXPR_VOID, lineno, charno ) ;^139^^^^^137^140^return new Node ( Token.EXPR_VOID, expr, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createExprStatementNoReturn [RETURN_TYPE] Node   Node expr int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  expr  
[buglab_swap_variables]^return new Node (  expr, lineno, charno ) ;^139^^^^^137^140^return new Node ( Token.EXPR_VOID, expr, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createExprStatementNoReturn [RETURN_TYPE] Node   Node expr int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  expr  
[buglab_swap_variables]^return new Node ( Token.EXPR_VOID, charno, lineno, expr ) ;^139^^^^^137^140^return new Node ( Token.EXPR_VOID, expr, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createExprStatementNoReturn [RETURN_TYPE] Node   Node expr int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  expr  
[buglab_swap_variables]^return new Node ( charno, expr, lineno, Token.EXPR_VOID ) ;^139^^^^^137^140^return new Node ( Token.EXPR_VOID, expr, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createExprStatementNoReturn [RETURN_TYPE] Node   Node expr int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  expr  
[buglab_swap_variables]^Node n = createUnary ( Token.DEFAULTNAMESPACE, charno, lineno, expr ) ;^146^^^^^142^149^Node n = createUnary ( Token.DEFAULTNAMESPACE, expr, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createDefaultNamespace [RETURN_TYPE] Node   Node expr int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  expr  n  result  
[buglab_swap_variables]^Node n = createUnary ( Token.DEFAULTNAMESPACE,  lineno, charno ) ;^146^^^^^142^149^Node n = createUnary ( Token.DEFAULTNAMESPACE, expr, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createDefaultNamespace [RETURN_TYPE] Node   Node expr int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  expr  n  result  
[buglab_swap_variables]^Node n = createUnary ( Token.DEFAULTNAMESPACE, expr, charno, lineno ) ;^146^^^^^142^149^Node n = createUnary ( Token.DEFAULTNAMESPACE, expr, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createDefaultNamespace [RETURN_TYPE] Node   Node expr int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  expr  n  result  
[buglab_swap_variables]^Node n = createUnary ( Token.DEFAULTNAMESPACE, expr,  charno ) ;^146^^^^^142^149^Node n = createUnary ( Token.DEFAULTNAMESPACE, expr, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createDefaultNamespace [RETURN_TYPE] Node   Node expr int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  expr  n  result  
[buglab_swap_variables]^Node n = createUnary ( Token.DEFAULTNAMESPACE, expr, lineno ) ;^146^^^^^142^149^Node n = createUnary ( Token.DEFAULTNAMESPACE, expr, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createDefaultNamespace [RETURN_TYPE] Node   Node expr int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  expr  n  result  
[buglab_swap_variables]^Node result = createExprStatement ( lineno, n, charno ) ;^147^^^^^142^149^Node result = createExprStatement ( n, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createDefaultNamespace [RETURN_TYPE] Node   Node expr int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  expr  n  result  
[buglab_swap_variables]^Node result = createExprStatement (  lineno, charno ) ;^147^^^^^142^149^Node result = createExprStatement ( n, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createDefaultNamespace [RETURN_TYPE] Node   Node expr int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  expr  n  result  
[buglab_swap_variables]^Node result = createExprStatement ( n, charno, lineno ) ;^147^^^^^142^149^Node result = createExprStatement ( n, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createDefaultNamespace [RETURN_TYPE] Node   Node expr int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  expr  n  result  
[buglab_swap_variables]^Node result = createExprStatement ( n,  charno ) ;^147^^^^^142^149^Node result = createExprStatement ( n, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createDefaultNamespace [RETURN_TYPE] Node   Node expr int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  expr  n  result  
[buglab_swap_variables]^Node result = createExprStatement ( n, lineno ) ;^147^^^^^142^149^Node result = createExprStatement ( n, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createDefaultNamespace [RETURN_TYPE] Node   Node expr int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  expr  n  result  
[buglab_swap_variables]^return Node.newString ( Token.NAME, lineno, name, charno ) ;^161^^^^^158^162^return Node.newString ( Token.NAME, name, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createName [RETURN_TYPE] Node   String name int lineno int charno [VARIABLES] String  name  boolean  int  charno  lineno  Parser  parser  
[buglab_swap_variables]^return Node.newString ( Token.NAME,  lineno, charno ) ;^161^^^^^158^162^return Node.newString ( Token.NAME, name, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createName [RETURN_TYPE] Node   String name int lineno int charno [VARIABLES] String  name  boolean  int  charno  lineno  Parser  parser  
[buglab_swap_variables]^return Node.newString ( Token.NAME, name, charno, lineno ) ;^161^^^^^158^162^return Node.newString ( Token.NAME, name, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createName [RETURN_TYPE] Node   String name int lineno int charno [VARIABLES] String  name  boolean  int  charno  lineno  Parser  parser  
[buglab_swap_variables]^return Node.newString ( Token.NAME, name,  charno ) ;^161^^^^^158^162^return Node.newString ( Token.NAME, name, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createName [RETURN_TYPE] Node   String name int lineno int charno [VARIABLES] String  name  boolean  int  charno  lineno  Parser  parser  
[buglab_swap_variables]^return Node.newString ( Token.NAME, name, lineno ) ;^161^^^^^158^162^return Node.newString ( Token.NAME, name, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createName [RETURN_TYPE] Node   String name int lineno int charno [VARIABLES] String  name  boolean  int  charno  lineno  Parser  parser  
[buglab_swap_variables]^return Node.newString ( Token.NAME, charno, lineno, name ) ;^161^^^^^158^162^return Node.newString ( Token.NAME, name, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createName [RETURN_TYPE] Node   String name int lineno int charno [VARIABLES] String  name  boolean  int  charno  lineno  Parser  parser  
[buglab_swap_variables]^Node n = createName ( lineno, name, charno ) ;^166^^^^^164^171^Node n = createName ( name, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createTaggedName [RETURN_TYPE] Node   String name JSDocInfo info int lineno int charno [VARIABLES] String  name  boolean  JSDocInfo  info  int  charno  lineno  Parser  parser  Node  n  
[buglab_swap_variables]^Node n = createName (  lineno, charno ) ;^166^^^^^164^171^Node n = createName ( name, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createTaggedName [RETURN_TYPE] Node   String name JSDocInfo info int lineno int charno [VARIABLES] String  name  boolean  JSDocInfo  info  int  charno  lineno  Parser  parser  Node  n  
[buglab_swap_variables]^Node n = createName ( name, charno, lineno ) ;^166^^^^^164^171^Node n = createName ( name, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createTaggedName [RETURN_TYPE] Node   String name JSDocInfo info int lineno int charno [VARIABLES] String  name  boolean  JSDocInfo  info  int  charno  lineno  Parser  parser  Node  n  
[buglab_swap_variables]^Node n = createName ( name,  charno ) ;^166^^^^^164^171^Node n = createName ( name, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createTaggedName [RETURN_TYPE] Node   String name JSDocInfo info int lineno int charno [VARIABLES] String  name  boolean  JSDocInfo  info  int  charno  lineno  Parser  parser  Node  n  
[buglab_swap_variables]^Node n = createName ( name, lineno ) ;^166^^^^^164^171^Node n = createName ( name, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createTaggedName [RETURN_TYPE] Node   String name JSDocInfo info int lineno int charno [VARIABLES] String  name  boolean  JSDocInfo  info  int  charno  lineno  Parser  parser  Node  n  
[buglab_swap_variables]^Node n = createName ( charno, lineno, name ) ;^166^^^^^164^171^Node n = createName ( name, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createTaggedName [RETURN_TYPE] Node   String name JSDocInfo info int lineno int charno [VARIABLES] String  name  boolean  JSDocInfo  info  int  charno  lineno  Parser  parser  Node  n  
[buglab_swap_variables]^if  ( n != infoull )  {^167^^^^^164^171^if  ( info != null )  {^[CLASS] IRFactory  [METHOD] createTaggedName [RETURN_TYPE] Node   String name JSDocInfo info int lineno int charno [VARIABLES] String  name  boolean  JSDocInfo  info  int  charno  lineno  Parser  parser  Node  n  
[buglab_swap_variables]^return Node.newString ( charno, lineno, string ) ;^183^^^^^181^184^return Node.newString ( string, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createString [RETURN_TYPE] Node   String string int lineno int charno [VARIABLES] String  string  boolean  int  charno  lineno  Parser  parser  
[buglab_swap_variables]^return Node.newString (  lineno, charno ) ;^183^^^^^181^184^return Node.newString ( string, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createString [RETURN_TYPE] Node   String string int lineno int charno [VARIABLES] String  string  boolean  int  charno  lineno  Parser  parser  
[buglab_swap_variables]^return Node.newString ( string, charno, lineno ) ;^183^^^^^181^184^return Node.newString ( string, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createString [RETURN_TYPE] Node   String string int lineno int charno [VARIABLES] String  string  boolean  int  charno  lineno  Parser  parser  
[buglab_swap_variables]^return Node.newString ( string,  charno ) ;^183^^^^^181^184^return Node.newString ( string, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createString [RETURN_TYPE] Node   String string int lineno int charno [VARIABLES] String  string  boolean  int  charno  lineno  Parser  parser  
[buglab_swap_variables]^return Node.newString ( string, lineno ) ;^183^^^^^181^184^return Node.newString ( string, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createString [RETURN_TYPE] Node   String string int lineno int charno [VARIABLES] String  string  boolean  int  charno  lineno  Parser  parser  
[buglab_swap_variables]^return Node.newString ( lineno, string, charno ) ;^183^^^^^181^184^return Node.newString ( string, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createString [RETURN_TYPE] Node   String string int lineno int charno [VARIABLES] String  string  boolean  int  charno  lineno  Parser  parser  
[buglab_swap_variables]^return Node.newNumber ( lineno, number, charno ) ;^196^^^^^194^197^return Node.newNumber ( number, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createNumber [RETURN_TYPE] Node   double number int lineno int charno [VARIABLES] boolean  double  number  int  charno  lineno  Parser  parser  
[buglab_swap_variables]^return Node.newNumber (  lineno, charno ) ;^196^^^^^194^197^return Node.newNumber ( number, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createNumber [RETURN_TYPE] Node   double number int lineno int charno [VARIABLES] boolean  double  number  int  charno  lineno  Parser  parser  
[buglab_swap_variables]^return Node.newNumber ( number, charno, lineno ) ;^196^^^^^194^197^return Node.newNumber ( number, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createNumber [RETURN_TYPE] Node   double number int lineno int charno [VARIABLES] boolean  double  number  int  charno  lineno  Parser  parser  
[buglab_swap_variables]^return Node.newNumber ( number,  charno ) ;^196^^^^^194^197^return Node.newNumber ( number, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createNumber [RETURN_TYPE] Node   double number int lineno int charno [VARIABLES] boolean  double  number  int  charno  lineno  Parser  parser  
[buglab_swap_variables]^return Node.newNumber ( number, lineno ) ;^196^^^^^194^197^return Node.newNumber ( number, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createNumber [RETURN_TYPE] Node   double number int lineno int charno [VARIABLES] boolean  double  number  int  charno  lineno  Parser  parser  
[buglab_swap_variables]^return Node.newNumber ( charno, lineno, number ) ;^196^^^^^194^197^return Node.newNumber ( number, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createNumber [RETURN_TYPE] Node   double number int lineno int charno [VARIABLES] boolean  double  number  int  charno  lineno  Parser  parser  
[buglab_swap_variables]^catchCond = new Node ( nameLineno, Token.EMPTY, nameCharno ) ;^214^^^^^210^219^catchCond = new Node ( Token.EMPTY, nameLineno, nameCharno ) ;^[CLASS] IRFactory  [METHOD] createCatch [RETURN_TYPE] Node   String varName int nameLineno int nameCharno Node catchCond Node stmts int catchLineno int catchCharno [VARIABLES] String  varName  boolean  int  catchCharno  catchLineno  nameCharno  nameLineno  Parser  parser  Node  catchCond  stmts  
[buglab_swap_variables]^catchCond = new Node ( Token.EMPTY,  nameCharno ) ;^214^^^^^210^219^catchCond = new Node ( Token.EMPTY, nameLineno, nameCharno ) ;^[CLASS] IRFactory  [METHOD] createCatch [RETURN_TYPE] Node   String varName int nameLineno int nameCharno Node catchCond Node stmts int catchLineno int catchCharno [VARIABLES] String  varName  boolean  int  catchCharno  catchLineno  nameCharno  nameLineno  Parser  parser  Node  catchCond  stmts  
[buglab_swap_variables]^catchCond = new Node ( Token.EMPTY, nameCharno, nameLineno ) ;^214^^^^^210^219^catchCond = new Node ( Token.EMPTY, nameLineno, nameCharno ) ;^[CLASS] IRFactory  [METHOD] createCatch [RETURN_TYPE] Node   String varName int nameLineno int nameCharno Node catchCond Node stmts int catchLineno int catchCharno [VARIABLES] String  varName  boolean  int  catchCharno  catchLineno  nameCharno  nameLineno  Parser  parser  Node  catchCond  stmts  
[buglab_swap_variables]^catchCond = new Node ( Token.EMPTY, nameLineno ) ;^214^^^^^210^219^catchCond = new Node ( Token.EMPTY, nameLineno, nameCharno ) ;^[CLASS] IRFactory  [METHOD] createCatch [RETURN_TYPE] Node   String varName int nameLineno int nameCharno Node catchCond Node stmts int catchLineno int catchCharno [VARIABLES] String  varName  boolean  int  catchCharno  catchLineno  nameCharno  nameLineno  Parser  parser  Node  catchCond  stmts  
[buglab_swap_variables]^catchCond = new Node (  nameLineno, nameCharno ) ;^214^^^^^210^219^catchCond = new Node ( Token.EMPTY, nameLineno, nameCharno ) ;^[CLASS] IRFactory  [METHOD] createCatch [RETURN_TYPE] Node   String varName int nameLineno int nameCharno Node catchCond Node stmts int catchLineno int catchCharno [VARIABLES] String  varName  boolean  int  catchCharno  catchLineno  nameCharno  nameLineno  Parser  parser  Node  catchCond  stmts  
[buglab_swap_variables]^catchCond = new Node ( nameCharno, nameLineno, Token.EMPTY ) ;^214^^^^^210^219^catchCond = new Node ( Token.EMPTY, nameLineno, nameCharno ) ;^[CLASS] IRFactory  [METHOD] createCatch [RETURN_TYPE] Node   String varName int nameLineno int nameCharno Node catchCond Node stmts int catchLineno int catchCharno [VARIABLES] String  varName  boolean  int  catchCharno  catchLineno  nameCharno  nameLineno  Parser  parser  Node  catchCond  stmts  
[buglab_swap_variables]^return new Node ( Token.CATCH, createName ( catchCond, nameLineno, nameCharno ) , varName, stmts, catchLineno, catchCharno ) ;^216^217^218^^^210^219^return new Node ( Token.CATCH, createName ( varName, nameLineno, nameCharno ) , catchCond, stmts, catchLineno, catchCharno ) ;^[CLASS] IRFactory  [METHOD] createCatch [RETURN_TYPE] Node   String varName int nameLineno int nameCharno Node catchCond Node stmts int catchLineno int catchCharno [VARIABLES] String  varName  boolean  int  catchCharno  catchLineno  nameCharno  nameLineno  Parser  parser  Node  catchCond  stmts  
[buglab_swap_variables]^return new Node ( Token.CATCH, createName (  nameLineno, nameCharno ) , catchCond, stmts, catchLineno, catchCharno ) ;^216^217^218^^^210^219^return new Node ( Token.CATCH, createName ( varName, nameLineno, nameCharno ) , catchCond, stmts, catchLineno, catchCharno ) ;^[CLASS] IRFactory  [METHOD] createCatch [RETURN_TYPE] Node   String varName int nameLineno int nameCharno Node catchCond Node stmts int catchLineno int catchCharno [VARIABLES] String  varName  boolean  int  catchCharno  catchLineno  nameCharno  nameLineno  Parser  parser  Node  catchCond  stmts  
[buglab_swap_variables]^return new Node ( Token.CATCH, createName ( varName, catchLineno, nameCharno ) , catchCond, stmts, nameLineno, catchCharno ) ;^216^217^218^^^210^219^return new Node ( Token.CATCH, createName ( varName, nameLineno, nameCharno ) , catchCond, stmts, catchLineno, catchCharno ) ;^[CLASS] IRFactory  [METHOD] createCatch [RETURN_TYPE] Node   String varName int nameLineno int nameCharno Node catchCond Node stmts int catchLineno int catchCharno [VARIABLES] String  varName  boolean  int  catchCharno  catchLineno  nameCharno  nameLineno  Parser  parser  Node  catchCond  stmts  
[buglab_swap_variables]^return new Node ( Token.CATCH, createName ( varName,  nameCharno ) , catchCond, stmts, catchLineno, catchCharno ) ;^216^217^218^^^210^219^return new Node ( Token.CATCH, createName ( varName, nameLineno, nameCharno ) , catchCond, stmts, catchLineno, catchCharno ) ;^[CLASS] IRFactory  [METHOD] createCatch [RETURN_TYPE] Node   String varName int nameLineno int nameCharno Node catchCond Node stmts int catchLineno int catchCharno [VARIABLES] String  varName  boolean  int  catchCharno  catchLineno  nameCharno  nameLineno  Parser  parser  Node  catchCond  stmts  
[buglab_swap_variables]^return new Node ( Token.CATCH, createName ( varName, nameLineno, catchLineno ) , catchCond, stmts, nameCharno, catchCharno ) ;^216^217^218^^^210^219^return new Node ( Token.CATCH, createName ( varName, nameLineno, nameCharno ) , catchCond, stmts, catchLineno, catchCharno ) ;^[CLASS] IRFactory  [METHOD] createCatch [RETURN_TYPE] Node   String varName int nameLineno int nameCharno Node catchCond Node stmts int catchLineno int catchCharno [VARIABLES] String  varName  boolean  int  catchCharno  catchLineno  nameCharno  nameLineno  Parser  parser  Node  catchCond  stmts  
[buglab_swap_variables]^return new Node ( Token.CATCH, createName ( varName, nameLineno ) , catchCond, stmts, catchLineno, catchCharno ) ;^216^217^218^^^210^219^return new Node ( Token.CATCH, createName ( varName, nameLineno, nameCharno ) , catchCond, stmts, catchLineno, catchCharno ) ;^[CLASS] IRFactory  [METHOD] createCatch [RETURN_TYPE] Node   String varName int nameLineno int nameCharno Node catchCond Node stmts int catchLineno int catchCharno [VARIABLES] String  varName  boolean  int  catchCharno  catchLineno  nameCharno  nameLineno  Parser  parser  Node  catchCond  stmts  
[buglab_swap_variables]^return new Node ( Token.CATCH, createName ( varName, catchCond, nameCharno ) , nameLineno, stmts, catchLineno, catchCharno ) ;^216^217^218^^^210^219^return new Node ( Token.CATCH, createName ( varName, nameLineno, nameCharno ) , catchCond, stmts, catchLineno, catchCharno ) ;^[CLASS] IRFactory  [METHOD] createCatch [RETURN_TYPE] Node   String varName int nameLineno int nameCharno Node catchCond Node stmts int catchLineno int catchCharno [VARIABLES] String  varName  boolean  int  catchCharno  catchLineno  nameCharno  nameLineno  Parser  parser  Node  catchCond  stmts  
[buglab_swap_variables]^return new Node ( Token.CATCH, createName ( varName, nameLineno, nameCharno ) ,  stmts, catchLineno, catchCharno ) ;^216^217^218^^^210^219^return new Node ( Token.CATCH, createName ( varName, nameLineno, nameCharno ) , catchCond, stmts, catchLineno, catchCharno ) ;^[CLASS] IRFactory  [METHOD] createCatch [RETURN_TYPE] Node   String varName int nameLineno int nameCharno Node catchCond Node stmts int catchLineno int catchCharno [VARIABLES] String  varName  boolean  int  catchCharno  catchLineno  nameCharno  nameLineno  Parser  parser  Node  catchCond  stmts  
[buglab_swap_variables]^return new Node ( Token.CATCH, createName ( varName, nameLineno, nameCharno ) , stmts, catchCond, catchLineno, catchCharno ) ;^216^217^218^^^210^219^return new Node ( Token.CATCH, createName ( varName, nameLineno, nameCharno ) , catchCond, stmts, catchLineno, catchCharno ) ;^[CLASS] IRFactory  [METHOD] createCatch [RETURN_TYPE] Node   String varName int nameLineno int nameCharno Node catchCond Node stmts int catchLineno int catchCharno [VARIABLES] String  varName  boolean  int  catchCharno  catchLineno  nameCharno  nameLineno  Parser  parser  Node  catchCond  stmts  
[buglab_swap_variables]^return new Node ( Token.CATCH, createName ( varName, nameLineno, nameCharno ) , catchCond,  catchLineno, catchCharno ) ;^216^217^218^^^210^219^return new Node ( Token.CATCH, createName ( varName, nameLineno, nameCharno ) , catchCond, stmts, catchLineno, catchCharno ) ;^[CLASS] IRFactory  [METHOD] createCatch [RETURN_TYPE] Node   String varName int nameLineno int nameCharno Node catchCond Node stmts int catchLineno int catchCharno [VARIABLES] String  varName  boolean  int  catchCharno  catchLineno  nameCharno  nameLineno  Parser  parser  Node  catchCond  stmts  
[buglab_swap_variables]^return new Node ( Token.CATCH, createName ( varName, nameLineno, nameCharno ) , catchCond, stmts, catchCharno, catchLineno ) ;^216^217^218^^^210^219^return new Node ( Token.CATCH, createName ( varName, nameLineno, nameCharno ) , catchCond, stmts, catchLineno, catchCharno ) ;^[CLASS] IRFactory  [METHOD] createCatch [RETURN_TYPE] Node   String varName int nameLineno int nameCharno Node catchCond Node stmts int catchLineno int catchCharno [VARIABLES] String  varName  boolean  int  catchCharno  catchLineno  nameCharno  nameLineno  Parser  parser  Node  catchCond  stmts  
[buglab_swap_variables]^return new Node ( Token.CATCH, createName ( varName, nameLineno, nameCharno ) , catchCond, stmts,  catchCharno ) ;^216^217^218^^^210^219^return new Node ( Token.CATCH, createName ( varName, nameLineno, nameCharno ) , catchCond, stmts, catchLineno, catchCharno ) ;^[CLASS] IRFactory  [METHOD] createCatch [RETURN_TYPE] Node   String varName int nameLineno int nameCharno Node catchCond Node stmts int catchLineno int catchCharno [VARIABLES] String  varName  boolean  int  catchCharno  catchLineno  nameCharno  nameLineno  Parser  parser  Node  catchCond  stmts  
[buglab_swap_variables]^return new Node ( Token.CATCH, createName ( varName, nameLineno, nameCharno ) , catchCond, stmts, catchLineno ) ;^216^217^218^^^210^219^return new Node ( Token.CATCH, createName ( varName, nameLineno, nameCharno ) , catchCond, stmts, catchLineno, catchCharno ) ;^[CLASS] IRFactory  [METHOD] createCatch [RETURN_TYPE] Node   String varName int nameLineno int nameCharno Node catchCond Node stmts int catchLineno int catchCharno [VARIABLES] String  varName  boolean  int  catchCharno  catchLineno  nameCharno  nameLineno  Parser  parser  Node  catchCond  stmts  
[buglab_swap_variables]^return new Node ( nameCharno, createName ( varName, nameLineno, Token.CATCH ) , catchCond, stmts, catchLineno, catchCharno ) ;^216^217^218^^^210^219^return new Node ( Token.CATCH, createName ( varName, nameLineno, nameCharno ) , catchCond, stmts, catchLineno, catchCharno ) ;^[CLASS] IRFactory  [METHOD] createCatch [RETURN_TYPE] Node   String varName int nameLineno int nameCharno Node catchCond Node stmts int catchLineno int catchCharno [VARIABLES] String  varName  boolean  int  catchCharno  catchLineno  nameCharno  nameLineno  Parser  parser  Node  catchCond  stmts  
[buglab_swap_variables]^return new Node (  createName ( varName, nameLineno, nameCharno ) , catchCond, stmts, catchLineno, catchCharno ) ;^216^217^218^^^210^219^return new Node ( Token.CATCH, createName ( varName, nameLineno, nameCharno ) , catchCond, stmts, catchLineno, catchCharno ) ;^[CLASS] IRFactory  [METHOD] createCatch [RETURN_TYPE] Node   String varName int nameLineno int nameCharno Node catchCond Node stmts int catchLineno int catchCharno [VARIABLES] String  varName  boolean  int  catchCharno  catchLineno  nameCharno  nameLineno  Parser  parser  Node  catchCond  stmts  
[buglab_swap_variables]^return new Node ( Token.CATCH, createName ( varName, nameCharno, nameLineno ) , catchCond, stmts, catchLineno, catchCharno ) ;^216^217^218^^^210^219^return new Node ( Token.CATCH, createName ( varName, nameLineno, nameCharno ) , catchCond, stmts, catchLineno, catchCharno ) ;^[CLASS] IRFactory  [METHOD] createCatch [RETURN_TYPE] Node   String varName int nameLineno int nameCharno Node catchCond Node stmts int catchLineno int catchCharno [VARIABLES] String  varName  boolean  int  catchCharno  catchLineno  nameCharno  nameLineno  Parser  parser  Node  catchCond  stmts  
[buglab_swap_variables]^return new Node ( Token.CATCH, createName ( varName, nameLineno, nameCharno ) , catchCharno, stmts, catchLineno, catchCond ) ;^216^217^218^^^210^219^return new Node ( Token.CATCH, createName ( varName, nameLineno, nameCharno ) , catchCond, stmts, catchLineno, catchCharno ) ;^[CLASS] IRFactory  [METHOD] createCatch [RETURN_TYPE] Node   String varName int nameLineno int nameCharno Node catchCond Node stmts int catchLineno int catchCharno [VARIABLES] String  varName  boolean  int  catchCharno  catchLineno  nameCharno  nameLineno  Parser  parser  Node  catchCond  stmts  
[buglab_swap_variables]^return new Node ( Token.CATCH, createName ( catchLineno, nameLineno, nameCharno ) , catchCond, stmts, varName, catchCharno ) ;^216^217^218^^^210^219^return new Node ( Token.CATCH, createName ( varName, nameLineno, nameCharno ) , catchCond, stmts, catchLineno, catchCharno ) ;^[CLASS] IRFactory  [METHOD] createCatch [RETURN_TYPE] Node   String varName int nameLineno int nameCharno Node catchCond Node stmts int catchLineno int catchCharno [VARIABLES] String  varName  boolean  int  catchCharno  catchLineno  nameCharno  nameLineno  Parser  parser  Node  catchCond  stmts  
[buglab_swap_variables]^return new Node ( Token.CATCH, createName ( varName, nameLineno, catchCharno ) , catchCond, stmts, catchLineno, nameCharno ) ;^216^217^218^^^210^219^return new Node ( Token.CATCH, createName ( varName, nameLineno, nameCharno ) , catchCond, stmts, catchLineno, catchCharno ) ;^[CLASS] IRFactory  [METHOD] createCatch [RETURN_TYPE] Node   String varName int nameLineno int nameCharno Node catchCond Node stmts int catchLineno int catchCharno [VARIABLES] String  varName  boolean  int  catchCharno  catchLineno  nameCharno  nameLineno  Parser  parser  Node  catchCond  stmts  
[buglab_swap_variables]^return new Node ( catchCond, createName ( varName, nameLineno, nameCharno ) , Token.CATCH, stmts, catchLineno, catchCharno ) ;^216^217^218^^^210^219^return new Node ( Token.CATCH, createName ( varName, nameLineno, nameCharno ) , catchCond, stmts, catchLineno, catchCharno ) ;^[CLASS] IRFactory  [METHOD] createCatch [RETURN_TYPE] Node   String varName int nameLineno int nameCharno Node catchCond Node stmts int catchLineno int catchCharno [VARIABLES] String  varName  boolean  int  catchCharno  catchLineno  nameCharno  nameLineno  Parser  parser  Node  catchCond  stmts  
[buglab_swap_variables]^createName ( nameLineno, varName, nameCharno ) , catchCond, stmts, catchLineno, catchCharno ) ;^217^218^^^^210^219^createName ( varName, nameLineno, nameCharno ) , catchCond, stmts, catchLineno, catchCharno ) ;^[CLASS] IRFactory  [METHOD] createCatch [RETURN_TYPE] Node   String varName int nameLineno int nameCharno Node catchCond Node stmts int catchLineno int catchCharno [VARIABLES] String  varName  boolean  int  catchCharno  catchLineno  nameCharno  nameLineno  Parser  parser  Node  catchCond  stmts  
[buglab_swap_variables]^createName (  nameLineno, nameCharno ) , catchCond, stmts, catchLineno, catchCharno ) ;^217^218^^^^210^219^createName ( varName, nameLineno, nameCharno ) , catchCond, stmts, catchLineno, catchCharno ) ;^[CLASS] IRFactory  [METHOD] createCatch [RETURN_TYPE] Node   String varName int nameLineno int nameCharno Node catchCond Node stmts int catchLineno int catchCharno [VARIABLES] String  varName  boolean  int  catchCharno  catchLineno  nameCharno  nameLineno  Parser  parser  Node  catchCond  stmts  
[buglab_swap_variables]^createName ( varName, nameCharno, nameLineno ) , catchCond, stmts, catchLineno, catchCharno ) ;^217^218^^^^210^219^createName ( varName, nameLineno, nameCharno ) , catchCond, stmts, catchLineno, catchCharno ) ;^[CLASS] IRFactory  [METHOD] createCatch [RETURN_TYPE] Node   String varName int nameLineno int nameCharno Node catchCond Node stmts int catchLineno int catchCharno [VARIABLES] String  varName  boolean  int  catchCharno  catchLineno  nameCharno  nameLineno  Parser  parser  Node  catchCond  stmts  
[buglab_swap_variables]^createName ( varName,  nameCharno ) , catchCond, stmts, catchLineno, catchCharno ) ;^217^218^^^^210^219^createName ( varName, nameLineno, nameCharno ) , catchCond, stmts, catchLineno, catchCharno ) ;^[CLASS] IRFactory  [METHOD] createCatch [RETURN_TYPE] Node   String varName int nameLineno int nameCharno Node catchCond Node stmts int catchLineno int catchCharno [VARIABLES] String  varName  boolean  int  catchCharno  catchLineno  nameCharno  nameLineno  Parser  parser  Node  catchCond  stmts  
[buglab_swap_variables]^createName ( nameCharno, nameLineno, varName ) , catchCond, stmts, catchLineno, catchCharno ) ;^217^218^^^^210^219^createName ( varName, nameLineno, nameCharno ) , catchCond, stmts, catchLineno, catchCharno ) ;^[CLASS] IRFactory  [METHOD] createCatch [RETURN_TYPE] Node   String varName int nameLineno int nameCharno Node catchCond Node stmts int catchLineno int catchCharno [VARIABLES] String  varName  boolean  int  catchCharno  catchLineno  nameCharno  nameLineno  Parser  parser  Node  catchCond  stmts  
[buglab_swap_variables]^createName ( varName, nameLineno ) , catchCond, stmts, catchLineno, catchCharno ) ;^217^218^^^^210^219^createName ( varName, nameLineno, nameCharno ) , catchCond, stmts, catchLineno, catchCharno ) ;^[CLASS] IRFactory  [METHOD] createCatch [RETURN_TYPE] Node   String varName int nameLineno int nameCharno Node catchCond Node stmts int catchLineno int catchCharno [VARIABLES] String  varName  boolean  int  catchCharno  catchLineno  nameCharno  nameLineno  Parser  parser  Node  catchCond  stmts  
[buglab_swap_variables]^return new Node ( Token.THROW, lineno, expr, charno ) ;^226^^^^^224^227^return new Node ( Token.THROW, expr, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createThrow [RETURN_TYPE] Node   Node expr int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  expr  
[buglab_swap_variables]^return new Node ( Token.THROW,  lineno, charno ) ;^226^^^^^224^227^return new Node ( Token.THROW, expr, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createThrow [RETURN_TYPE] Node   Node expr int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  expr  
[buglab_swap_variables]^return new Node ( lineno, expr, Token.THROW, charno ) ;^226^^^^^224^227^return new Node ( Token.THROW, expr, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createThrow [RETURN_TYPE] Node   Node expr int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  expr  
[buglab_swap_variables]^return new Node ( Token.THROW, expr,  charno ) ;^226^^^^^224^227^return new Node ( Token.THROW, expr, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createThrow [RETURN_TYPE] Node   Node expr int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  expr  
[buglab_swap_variables]^return new Node ( Token.THROW, expr, charno, lineno ) ;^226^^^^^224^227^return new Node ( Token.THROW, expr, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createThrow [RETURN_TYPE] Node   Node expr int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  expr  
[buglab_swap_variables]^return new Node ( Token.THROW, expr, lineno ) ;^226^^^^^224^227^return new Node ( Token.THROW, expr, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createThrow [RETURN_TYPE] Node   Node expr int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  expr  
[buglab_swap_variables]^return new Node ( charno, expr, lineno, Token.THROW ) ;^226^^^^^224^227^return new Node ( Token.THROW, expr, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createThrow [RETURN_TYPE] Node   Node expr int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  expr  
[buglab_swap_variables]^return new Node (  expr, lineno, charno ) ;^226^^^^^224^227^return new Node ( Token.THROW, expr, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createThrow [RETURN_TYPE] Node   Node expr int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  expr  
[buglab_swap_variables]^return lineno == null ? new Node ( Token.RETURN, expr, charno ) : new Node ( Token.RETURN, expr, lineno, charno ) ;^234^235^236^^^232^237^return expr == null ? new Node ( Token.RETURN, lineno, charno ) : new Node ( Token.RETURN, expr, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createReturn [RETURN_TYPE] Node   Node expr int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  expr  
[buglab_swap_variables]^return expr == null ? new Node ( Token.RETURN, lineno, charno ) : new Node ( Token.RETURN,  lineno, charno ) ;^234^235^236^^^232^237^return expr == null ? new Node ( Token.RETURN, lineno, charno ) : new Node ( Token.RETURN, expr, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createReturn [RETURN_TYPE] Node   Node expr int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  expr  
[buglab_swap_variables]^return expr == null ? new Node ( lineno, Token.RETURN, charno ) : new Node ( Token.RETURN, expr, lineno, charno ) ;^234^235^236^^^232^237^return expr == null ? new Node ( Token.RETURN, lineno, charno ) : new Node ( Token.RETURN, expr, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createReturn [RETURN_TYPE] Node   Node expr int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  expr  
[buglab_swap_variables]^return expr == null ? new Node ( Token.RETURN,  charno ) : new Node ( Token.RETURN, expr, lineno, charno ) ;^234^235^236^^^232^237^return expr == null ? new Node ( Token.RETURN, lineno, charno ) : new Node ( Token.RETURN, expr, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createReturn [RETURN_TYPE] Node   Node expr int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  expr  
[buglab_swap_variables]^return expr == null ? new Node ( charno, lineno, Token.RETURN ) : new Node ( Token.RETURN, expr, lineno, charno ) ;^234^235^236^^^232^237^return expr == null ? new Node ( Token.RETURN, lineno, charno ) : new Node ( Token.RETURN, expr, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createReturn [RETURN_TYPE] Node   Node expr int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  expr  
[buglab_swap_variables]^return expr == null ? new Node ( Token.RETURN, lineno ) : new Node ( Token.RETURN, expr, lineno, charno ) ;^234^235^236^^^232^237^return expr == null ? new Node ( Token.RETURN, lineno, charno ) : new Node ( Token.RETURN, expr, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createReturn [RETURN_TYPE] Node   Node expr int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  expr  
[buglab_swap_variables]^return expr == null ? new Node (  lineno, charno ) : new Node ( Token.RETURN, expr, lineno, charno ) ;^234^235^236^^^232^237^return expr == null ? new Node ( Token.RETURN, lineno, charno ) : new Node ( Token.RETURN, expr, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createReturn [RETURN_TYPE] Node   Node expr int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  expr  
[buglab_swap_variables]^? new Node ( Token.RETURN, charno, lineno ) : new Node ( Token.RETURN, expr, lineno, charno ) ;^235^236^^^^232^237^? new Node ( Token.RETURN, lineno, charno ) : new Node ( Token.RETURN, expr, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createReturn [RETURN_TYPE] Node   Node expr int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  expr  
[buglab_swap_variables]^? new Node ( Token.RETURN,  charno ) : new Node ( Token.RETURN, expr, lineno, charno ) ;^235^236^^^^232^237^? new Node ( Token.RETURN, lineno, charno ) : new Node ( Token.RETURN, expr, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createReturn [RETURN_TYPE] Node   Node expr int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  expr  
[buglab_swap_variables]^? new Node ( charno, lineno, Token.RETURN ) : new Node ( Token.RETURN, expr, lineno, charno ) ;^235^236^^^^232^237^? new Node ( Token.RETURN, lineno, charno ) : new Node ( Token.RETURN, expr, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createReturn [RETURN_TYPE] Node   Node expr int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  expr  
[buglab_swap_variables]^? new Node ( Token.RETURN, lineno ) : new Node ( Token.RETURN, expr, lineno, charno ) ;^235^236^^^^232^237^? new Node ( Token.RETURN, lineno, charno ) : new Node ( Token.RETURN, expr, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createReturn [RETURN_TYPE] Node   Node expr int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  expr  
[buglab_swap_variables]^? new Node (  lineno, charno ) : new Node ( Token.RETURN, expr, lineno, charno ) ;^235^236^^^^232^237^? new Node ( Token.RETURN, lineno, charno ) : new Node ( Token.RETURN, expr, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createReturn [RETURN_TYPE] Node   Node expr int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  expr  
[buglab_swap_variables]^: new Node ( Token.RETURN, lineno, expr, charno ) ;^236^^^^^232^237^: new Node ( Token.RETURN, expr, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createReturn [RETURN_TYPE] Node   Node expr int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  expr  
[buglab_swap_variables]^: new Node ( Token.RETURN,  lineno, charno ) ;^236^^^^^232^237^: new Node ( Token.RETURN, expr, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createReturn [RETURN_TYPE] Node   Node expr int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  expr  
[buglab_swap_variables]^: new Node ( Token.RETURN, expr, charno, lineno ) ;^236^^^^^232^237^: new Node ( Token.RETURN, expr, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createReturn [RETURN_TYPE] Node   Node expr int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  expr  
[buglab_swap_variables]^: new Node ( Token.RETURN, expr,  charno ) ;^236^^^^^232^237^: new Node ( Token.RETURN, expr, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createReturn [RETURN_TYPE] Node   Node expr int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  expr  
[buglab_swap_variables]^: new Node ( Token.RETURN, charno, lineno, expr ) ;^236^^^^^232^237^: new Node ( Token.RETURN, expr, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createReturn [RETURN_TYPE] Node   Node expr int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  expr  
[buglab_swap_variables]^: new Node ( Token.RETURN, expr, lineno ) ;^236^^^^^232^237^: new Node ( Token.RETURN, expr, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createReturn [RETURN_TYPE] Node   Node expr int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  expr  
[buglab_swap_variables]^: new Node ( lineno, expr, Token.RETURN, charno ) ;^236^^^^^232^237^: new Node ( Token.RETURN, expr, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createReturn [RETURN_TYPE] Node   Node expr int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  expr  
[buglab_swap_variables]^: new Node (  expr, lineno, charno ) ;^236^^^^^232^237^: new Node ( Token.RETURN, expr, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createReturn [RETURN_TYPE] Node   Node expr int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  expr  
[buglab_swap_variables]^return new Node ( Token.LABEL, Node.newString ( Token.NAME, lineno, name, charno ) , lineno, charno ) ;^244^245^246^^^242^247^return new Node ( Token.LABEL, Node.newString ( Token.NAME, name, lineno, charno ) , lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createLabel [RETURN_TYPE] Node   String name int lineno int charno [VARIABLES] String  name  boolean  int  charno  lineno  Parser  parser  
[buglab_swap_variables]^return new Node ( Token.LABEL, Node.newString ( Token.NAME,  lineno, charno ) , lineno, charno ) ;^244^245^246^^^242^247^return new Node ( Token.LABEL, Node.newString ( Token.NAME, name, lineno, charno ) , lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createLabel [RETURN_TYPE] Node   String name int lineno int charno [VARIABLES] String  name  boolean  int  charno  lineno  Parser  parser  
[buglab_swap_variables]^return new Node ( Token.LABEL, Node.newString ( Token.NAME, name, charno, lineno ) , lineno, charno ) ;^244^245^246^^^242^247^return new Node ( Token.LABEL, Node.newString ( Token.NAME, name, lineno, charno ) , lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createLabel [RETURN_TYPE] Node   String name int lineno int charno [VARIABLES] String  name  boolean  int  charno  lineno  Parser  parser  
[buglab_swap_variables]^return new Node ( Token.LABEL, Node.newString ( Token.NAME, name,  charno ) , lineno, charno ) ;^244^245^246^^^242^247^return new Node ( Token.LABEL, Node.newString ( Token.NAME, name, lineno, charno ) , lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createLabel [RETURN_TYPE] Node   String name int lineno int charno [VARIABLES] String  name  boolean  int  charno  lineno  Parser  parser  
[buglab_swap_variables]^return new Node ( Token.LABEL, Node.newString ( Token.NAME, name, lineno ) , lineno, charno ) ;^244^245^246^^^242^247^return new Node ( Token.LABEL, Node.newString ( Token.NAME, name, lineno, charno ) , lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createLabel [RETURN_TYPE] Node   String name int lineno int charno [VARIABLES] String  name  boolean  int  charno  lineno  Parser  parser  
[buglab_swap_variables]^return new Node ( name, Node.newString ( Token.NAME, Token.LABEL, lineno, charno ) , lineno, charno ) ;^244^245^246^^^242^247^return new Node ( Token.LABEL, Node.newString ( Token.NAME, name, lineno, charno ) , lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createLabel [RETURN_TYPE] Node   String name int lineno int charno [VARIABLES] String  name  boolean  int  charno  lineno  Parser  parser  
[buglab_swap_variables]^return new Node (  Node.newString ( Token.NAME, name, lineno, charno ) , lineno, charno ) ;^244^245^246^^^242^247^return new Node ( Token.LABEL, Node.newString ( Token.NAME, name, lineno, charno ) , lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createLabel [RETURN_TYPE] Node   String name int lineno int charno [VARIABLES] String  name  boolean  int  charno  lineno  Parser  parser  
[buglab_swap_variables]^return new Node ( Token.LABEL, Node.newString ( Token.NAME, charno, lineno, name ) , lineno, charno ) ;^244^245^246^^^242^247^return new Node ( Token.LABEL, Node.newString ( Token.NAME, name, lineno, charno ) , lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createLabel [RETURN_TYPE] Node   String name int lineno int charno [VARIABLES] String  name  boolean  int  charno  lineno  Parser  parser  
[buglab_swap_variables]^return new Node ( lineno, Node.newString ( Token.NAME, name, Token.LABEL, charno ) , lineno, charno ) ;^244^245^246^^^242^247^return new Node ( Token.LABEL, Node.newString ( Token.NAME, name, lineno, charno ) , lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createLabel [RETURN_TYPE] Node   String name int lineno int charno [VARIABLES] String  name  boolean  int  charno  lineno  Parser  parser  
[buglab_swap_variables]^Node.newString ( Token.NAME, lineno, name, charno ) , lineno, charno ) ;^245^246^^^^242^247^Node.newString ( Token.NAME, name, lineno, charno ) , lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createLabel [RETURN_TYPE] Node   String name int lineno int charno [VARIABLES] String  name  boolean  int  charno  lineno  Parser  parser  
[buglab_swap_variables]^Node.newString ( Token.NAME,  lineno, charno ) , lineno, charno ) ;^245^246^^^^242^247^Node.newString ( Token.NAME, name, lineno, charno ) , lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createLabel [RETURN_TYPE] Node   String name int lineno int charno [VARIABLES] String  name  boolean  int  charno  lineno  Parser  parser  
[buglab_swap_variables]^Node.newString ( Token.NAME, name, charno, lineno ) , lineno, charno ) ;^245^246^^^^242^247^Node.newString ( Token.NAME, name, lineno, charno ) , lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createLabel [RETURN_TYPE] Node   String name int lineno int charno [VARIABLES] String  name  boolean  int  charno  lineno  Parser  parser  
[buglab_swap_variables]^Node.newString ( Token.NAME, name,  charno ) , lineno, charno ) ;^245^246^^^^242^247^Node.newString ( Token.NAME, name, lineno, charno ) , lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createLabel [RETURN_TYPE] Node   String name int lineno int charno [VARIABLES] String  name  boolean  int  charno  lineno  Parser  parser  
[buglab_swap_variables]^Node.newString ( Token.NAME, name, lineno ) , lineno, charno ) ;^245^246^^^^242^247^Node.newString ( Token.NAME, name, lineno, charno ) , lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createLabel [RETURN_TYPE] Node   String name int lineno int charno [VARIABLES] String  name  boolean  int  charno  lineno  Parser  parser  
[buglab_swap_variables]^Node result = new Node ( Token.BREAK, charno, lineno ) ;^254^^^^^252^262^Node result = new Node ( Token.BREAK, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createBreak [RETURN_TYPE] Node   String label int lineno int charno [VARIABLES] String  label  boolean  int  charno  lineno  Parser  parser  Node  name  result  
[buglab_swap_variables]^Node result = new Node ( Token.BREAK,  charno ) ;^254^^^^^252^262^Node result = new Node ( Token.BREAK, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createBreak [RETURN_TYPE] Node   String label int lineno int charno [VARIABLES] String  label  boolean  int  charno  lineno  Parser  parser  Node  name  result  
[buglab_swap_variables]^Node result = new Node ( charno, lineno, Token.BREAK ) ;^254^^^^^252^262^Node result = new Node ( Token.BREAK, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createBreak [RETURN_TYPE] Node   String label int lineno int charno [VARIABLES] String  label  boolean  int  charno  lineno  Parser  parser  Node  name  result  
[buglab_swap_variables]^Node result = new Node ( Token.BREAK, lineno ) ;^254^^^^^252^262^Node result = new Node ( Token.BREAK, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createBreak [RETURN_TYPE] Node   String label int lineno int charno [VARIABLES] String  label  boolean  int  charno  lineno  Parser  parser  Node  name  result  
[buglab_swap_variables]^Node result = new Node (  lineno, charno ) ;^254^^^^^252^262^Node result = new Node ( Token.BREAK, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createBreak [RETURN_TYPE] Node   String label int lineno int charno [VARIABLES] String  label  boolean  int  charno  lineno  Parser  parser  Node  name  result  
[buglab_swap_variables]^Node result = new Node ( lineno, Token.BREAK, charno ) ;^254^^^^^252^262^Node result = new Node ( Token.BREAK, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createBreak [RETURN_TYPE] Node   String label int lineno int charno [VARIABLES] String  label  boolean  int  charno  lineno  Parser  parser  Node  name  result  
[buglab_swap_variables]^Node name = Node.newString ( Token.NAME, charno, lineno, label ) ;^258^^^^^252^262^Node name = Node.newString ( Token.NAME, label, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createBreak [RETURN_TYPE] Node   String label int lineno int charno [VARIABLES] String  label  boolean  int  charno  lineno  Parser  parser  Node  name  result  
[buglab_swap_variables]^Node name = Node.newString ( Token.NAME,  lineno, charno ) ;^258^^^^^252^262^Node name = Node.newString ( Token.NAME, label, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createBreak [RETURN_TYPE] Node   String label int lineno int charno [VARIABLES] String  label  boolean  int  charno  lineno  Parser  parser  Node  name  result  
[buglab_swap_variables]^Node name = Node.newString ( Token.NAME, label, charno, lineno ) ;^258^^^^^252^262^Node name = Node.newString ( Token.NAME, label, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createBreak [RETURN_TYPE] Node   String label int lineno int charno [VARIABLES] String  label  boolean  int  charno  lineno  Parser  parser  Node  name  result  
[buglab_swap_variables]^Node name = Node.newString ( Token.NAME, label,  charno ) ;^258^^^^^252^262^Node name = Node.newString ( Token.NAME, label, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createBreak [RETURN_TYPE] Node   String label int lineno int charno [VARIABLES] String  label  boolean  int  charno  lineno  Parser  parser  Node  name  result  
[buglab_swap_variables]^Node name = Node.newString ( Token.NAME, label, lineno ) ;^258^^^^^252^262^Node name = Node.newString ( Token.NAME, label, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createBreak [RETURN_TYPE] Node   String label int lineno int charno [VARIABLES] String  label  boolean  int  charno  lineno  Parser  parser  Node  name  result  
[buglab_swap_variables]^Node name = Node.newString ( Token.NAME, lineno, label, charno ) ;^258^^^^^252^262^Node name = Node.newString ( Token.NAME, label, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createBreak [RETURN_TYPE] Node   String label int lineno int charno [VARIABLES] String  label  boolean  int  charno  lineno  Parser  parser  Node  name  result  
[buglab_swap_variables]^Node result = new Node ( lineno, Token.CONTINUE, charno ) ;^269^^^^^267^277^Node result = new Node ( Token.CONTINUE, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createContinue [RETURN_TYPE] Node   String label int lineno int charno [VARIABLES] String  label  boolean  int  charno  lineno  Parser  parser  Node  name  result  
[buglab_swap_variables]^Node result = new Node ( Token.CONTINUE,  charno ) ;^269^^^^^267^277^Node result = new Node ( Token.CONTINUE, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createContinue [RETURN_TYPE] Node   String label int lineno int charno [VARIABLES] String  label  boolean  int  charno  lineno  Parser  parser  Node  name  result  
[buglab_swap_variables]^Node result = new Node ( Token.CONTINUE, charno, lineno ) ;^269^^^^^267^277^Node result = new Node ( Token.CONTINUE, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createContinue [RETURN_TYPE] Node   String label int lineno int charno [VARIABLES] String  label  boolean  int  charno  lineno  Parser  parser  Node  name  result  
[buglab_swap_variables]^Node result = new Node ( Token.CONTINUE, lineno ) ;^269^^^^^267^277^Node result = new Node ( Token.CONTINUE, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createContinue [RETURN_TYPE] Node   String label int lineno int charno [VARIABLES] String  label  boolean  int  charno  lineno  Parser  parser  Node  name  result  
[buglab_swap_variables]^Node result = new Node ( charno, lineno, Token.CONTINUE ) ;^269^^^^^267^277^Node result = new Node ( Token.CONTINUE, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createContinue [RETURN_TYPE] Node   String label int lineno int charno [VARIABLES] String  label  boolean  int  charno  lineno  Parser  parser  Node  name  result  
[buglab_swap_variables]^Node result = new Node (  lineno, charno ) ;^269^^^^^267^277^Node result = new Node ( Token.CONTINUE, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createContinue [RETURN_TYPE] Node   String label int lineno int charno [VARIABLES] String  label  boolean  int  charno  lineno  Parser  parser  Node  name  result  
[buglab_swap_variables]^Node name = Node.newString ( Token.NAME, charno, lineno, label ) ;^273^^^^^267^277^Node name = Node.newString ( Token.NAME, label, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createContinue [RETURN_TYPE] Node   String label int lineno int charno [VARIABLES] String  label  boolean  int  charno  lineno  Parser  parser  Node  name  result  
[buglab_swap_variables]^Node name = Node.newString ( Token.NAME,  lineno, charno ) ;^273^^^^^267^277^Node name = Node.newString ( Token.NAME, label, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createContinue [RETURN_TYPE] Node   String label int lineno int charno [VARIABLES] String  label  boolean  int  charno  lineno  Parser  parser  Node  name  result  
[buglab_swap_variables]^Node name = Node.newString ( Token.NAME, label, charno, lineno ) ;^273^^^^^267^277^Node name = Node.newString ( Token.NAME, label, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createContinue [RETURN_TYPE] Node   String label int lineno int charno [VARIABLES] String  label  boolean  int  charno  lineno  Parser  parser  Node  name  result  
[buglab_swap_variables]^Node name = Node.newString ( Token.NAME, label,  charno ) ;^273^^^^^267^277^Node name = Node.newString ( Token.NAME, label, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createContinue [RETURN_TYPE] Node   String label int lineno int charno [VARIABLES] String  label  boolean  int  charno  lineno  Parser  parser  Node  name  result  
[buglab_swap_variables]^Node name = Node.newString ( Token.NAME, label, lineno ) ;^273^^^^^267^277^Node name = Node.newString ( Token.NAME, label, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createContinue [RETURN_TYPE] Node   String label int lineno int charno [VARIABLES] String  label  boolean  int  charno  lineno  Parser  parser  Node  name  result  
[buglab_swap_variables]^Node name = Node.newString ( Token.NAME, lineno, label, charno ) ;^273^^^^^267^277^Node name = Node.newString ( Token.NAME, label, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createContinue [RETURN_TYPE] Node   String label int lineno int charno [VARIABLES] String  label  boolean  int  charno  lineno  Parser  parser  Node  name  result  
[buglab_swap_variables]^return new Node ( Token.DEBUGGER, charno, lineno ) ;^283^^^^^282^284^return new Node ( Token.DEBUGGER, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createDebugger [RETURN_TYPE] Node   int lineno int charno [VARIABLES] int  charno  lineno  Parser  parser  boolean  
[buglab_swap_variables]^return new Node ( Token.DEBUGGER,  charno ) ;^283^^^^^282^284^return new Node ( Token.DEBUGGER, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createDebugger [RETURN_TYPE] Node   int lineno int charno [VARIABLES] int  charno  lineno  Parser  parser  boolean  
[buglab_swap_variables]^return new Node ( Token.DEBUGGER, lineno ) ;^283^^^^^282^284^return new Node ( Token.DEBUGGER, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createDebugger [RETURN_TYPE] Node   int lineno int charno [VARIABLES] int  charno  lineno  Parser  parser  boolean  
[buglab_swap_variables]^return new Node ( charno, lineno, Token.DEBUGGER ) ;^283^^^^^282^284^return new Node ( Token.DEBUGGER, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createDebugger [RETURN_TYPE] Node   int lineno int charno [VARIABLES] int  charno  lineno  Parser  parser  boolean  
[buglab_swap_variables]^return new Node (  lineno, charno ) ;^283^^^^^282^284^return new Node ( Token.DEBUGGER, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createDebugger [RETURN_TYPE] Node   int lineno int charno [VARIABLES] int  charno  lineno  Parser  parser  boolean  
[buglab_swap_variables]^return new Node ( lineno, Token.DEBUGGER, charno ) ;^283^^^^^282^284^return new Node ( Token.DEBUGGER, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createDebugger [RETURN_TYPE] Node   int lineno int charno [VARIABLES] int  charno  lineno  Parser  parser  boolean  
[buglab_swap_variables]^return new Node ( Token.BLOCK, charno, lineno ) ;^293^^^^^291^294^return new Node ( Token.BLOCK, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createBlock [RETURN_TYPE] Node   int lineno int charno [VARIABLES] int  charno  lineno  Parser  parser  boolean  
[buglab_swap_variables]^return new Node ( Token.BLOCK,  charno ) ;^293^^^^^291^294^return new Node ( Token.BLOCK, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createBlock [RETURN_TYPE] Node   int lineno int charno [VARIABLES] int  charno  lineno  Parser  parser  boolean  
[buglab_swap_variables]^return new Node ( Token.BLOCK, lineno ) ;^293^^^^^291^294^return new Node ( Token.BLOCK, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createBlock [RETURN_TYPE] Node   int lineno int charno [VARIABLES] int  charno  lineno  Parser  parser  boolean  
[buglab_swap_variables]^return new Node ( lineno, Token.BLOCK, charno ) ;^293^^^^^291^294^return new Node ( Token.BLOCK, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createBlock [RETURN_TYPE] Node   int lineno int charno [VARIABLES] int  charno  lineno  Parser  parser  boolean  
[buglab_swap_variables]^return new Node (  lineno, charno ) ;^293^^^^^291^294^return new Node ( Token.BLOCK, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createBlock [RETURN_TYPE] Node   int lineno int charno [VARIABLES] int  charno  lineno  Parser  parser  boolean  
[buglab_swap_variables]^return new Node ( charno, lineno, Token.BLOCK ) ;^293^^^^^291^294^return new Node ( Token.BLOCK, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createBlock [RETURN_TYPE] Node   int lineno int charno [VARIABLES] int  charno  lineno  Parser  parser  boolean  
[buglab_swap_variables]^FunctionNode fnNode = new FunctionNode ( charno, lineno, name ) ;^298^^^^^296^304^FunctionNode fnNode = new FunctionNode ( name, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createFunction [RETURN_TYPE] FunctionNode   String name int lineno int charno [VARIABLES] FunctionNode  fnNode  String  name  boolean  int  charno  lineno  Parser  parser  
[buglab_swap_variables]^FunctionNode fnNode = new FunctionNode (  lineno, charno ) ;^298^^^^^296^304^FunctionNode fnNode = new FunctionNode ( name, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createFunction [RETURN_TYPE] FunctionNode   String name int lineno int charno [VARIABLES] FunctionNode  fnNode  String  name  boolean  int  charno  lineno  Parser  parser  
[buglab_swap_variables]^FunctionNode fnNode = new FunctionNode ( name, charno, lineno ) ;^298^^^^^296^304^FunctionNode fnNode = new FunctionNode ( name, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createFunction [RETURN_TYPE] FunctionNode   String name int lineno int charno [VARIABLES] FunctionNode  fnNode  String  name  boolean  int  charno  lineno  Parser  parser  
[buglab_swap_variables]^FunctionNode fnNode = new FunctionNode ( name,  charno ) ;^298^^^^^296^304^FunctionNode fnNode = new FunctionNode ( name, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createFunction [RETURN_TYPE] FunctionNode   String name int lineno int charno [VARIABLES] FunctionNode  fnNode  String  name  boolean  int  charno  lineno  Parser  parser  
[buglab_swap_variables]^FunctionNode fnNode = new FunctionNode ( name, lineno ) ;^298^^^^^296^304^FunctionNode fnNode = new FunctionNode ( name, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createFunction [RETURN_TYPE] FunctionNode   String name int lineno int charno [VARIABLES] FunctionNode  fnNode  String  name  boolean  int  charno  lineno  Parser  parser  
[buglab_swap_variables]^fnNode.addChildToBack ( createName ( lineno, name, charno )  ) ;^302^^^^^296^304^fnNode.addChildToBack ( createName ( name, lineno, charno )  ) ;^[CLASS] IRFactory  [METHOD] createFunction [RETURN_TYPE] FunctionNode   String name int lineno int charno [VARIABLES] FunctionNode  fnNode  String  name  boolean  int  charno  lineno  Parser  parser  
[buglab_swap_variables]^fnNode.addChildToBack ( createName (  lineno, charno )  ) ;^302^^^^^296^304^fnNode.addChildToBack ( createName ( name, lineno, charno )  ) ;^[CLASS] IRFactory  [METHOD] createFunction [RETURN_TYPE] FunctionNode   String name int lineno int charno [VARIABLES] FunctionNode  fnNode  String  name  boolean  int  charno  lineno  Parser  parser  
[buglab_swap_variables]^fnNode.addChildToBack ( createName ( name, charno, lineno )  ) ;^302^^^^^296^304^fnNode.addChildToBack ( createName ( name, lineno, charno )  ) ;^[CLASS] IRFactory  [METHOD] createFunction [RETURN_TYPE] FunctionNode   String name int lineno int charno [VARIABLES] FunctionNode  fnNode  String  name  boolean  int  charno  lineno  Parser  parser  
[buglab_swap_variables]^fnNode.addChildToBack ( createName ( name,  charno )  ) ;^302^^^^^296^304^fnNode.addChildToBack ( createName ( name, lineno, charno )  ) ;^[CLASS] IRFactory  [METHOD] createFunction [RETURN_TYPE] FunctionNode   String name int lineno int charno [VARIABLES] FunctionNode  fnNode  String  name  boolean  int  charno  lineno  Parser  parser  
[buglab_swap_variables]^fnNode.addChildToBack ( createName ( name, lineno )  ) ;^302^^^^^296^304^fnNode.addChildToBack ( createName ( name, lineno, charno )  ) ;^[CLASS] IRFactory  [METHOD] createFunction [RETURN_TYPE] FunctionNode   String name int lineno int charno [VARIABLES] FunctionNode  fnNode  String  name  boolean  int  charno  lineno  Parser  parser  
[buglab_swap_variables]^fnNode.addChildToBack ( createName ( charno, lineno, name )  ) ;^302^^^^^296^304^fnNode.addChildToBack ( createName ( name, lineno, charno )  ) ;^[CLASS] IRFactory  [METHOD] createFunction [RETURN_TYPE] FunctionNode   String name int lineno int charno [VARIABLES] FunctionNode  fnNode  String  name  boolean  int  charno  lineno  Parser  parser  
[buglab_swap_variables]^fnNode.putProp ( Node.SOURCENAME_PROP.getSourceName (  )  ) ;^314^^^^^299^329^fnNode.putProp ( Node.SOURCENAME_PROP, parser.getSourceName (  )  ) ;^[CLASS] IRFactory  [METHOD] initFunction [RETURN_TYPE] Node   FunctionNode fnNode int functionIndex Node args JSDocInfo info Node statements int functionType [VARIABLES] boolean  Node  args  statements  FunctionNode  fn  fnNode  String  name  JSDocInfo  info  int  functionCount  functionIndex  functionType  i  Parser  parser  
[buglab_swap_variables]^for  ( functionCountnt i = 0; i != i; ++i )  {^324^^^^^309^339^for  ( int i = 0; i != functionCount; ++i )  {^[CLASS] IRFactory  [METHOD] initFunction [RETURN_TYPE] Node   FunctionNode fnNode int functionIndex Node args JSDocInfo info Node statements int functionType [VARIABLES] boolean  Node  args  statements  FunctionNode  fn  fnNode  String  name  JSDocInfo  info  int  functionCount  functionIndex  functionType  i  Parser  parser  
[buglab_swap_variables]^FunctionNode fn = i.getFunctionNode ( fnNode ) ;^325^^^^^310^340^FunctionNode fn = fnNode.getFunctionNode ( i ) ;^[CLASS] IRFactory  [METHOD] initFunction [RETURN_TYPE] Node   FunctionNode fnNode int functionIndex Node args JSDocInfo info Node statements int functionType [VARIABLES] boolean  Node  args  statements  FunctionNode  fn  fnNode  String  name  JSDocInfo  info  int  functionCount  functionIndex  functionType  i  Parser  parser  
[buglab_swap_variables]^fnNode.putIntProp ( Node.FUNCTION_PROP ) ;^338^^^^^323^353^fnNode.putIntProp ( Node.FUNCTION_PROP, functionIndex ) ;^[CLASS] IRFactory  [METHOD] initFunction [RETURN_TYPE] Node   FunctionNode fnNode int functionIndex Node args JSDocInfo info Node statements int functionType [VARIABLES] boolean  Node  args  statements  FunctionNode  fn  fnNode  String  name  JSDocInfo  info  int  functionCount  functionIndex  functionType  i  Parser  parser  
[buglab_swap_variables]^return new Node ( Token.WHILE, body, cond, lineno, charno ) ;^357^^^^^355^358^return new Node ( Token.WHILE, cond, body, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createWhile [RETURN_TYPE] Node   Node cond Node body int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  body  cond  
[buglab_swap_variables]^return new Node ( Token.WHILE,  body, lineno, charno ) ;^357^^^^^355^358^return new Node ( Token.WHILE, cond, body, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createWhile [RETURN_TYPE] Node   Node cond Node body int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  body  cond  
[buglab_swap_variables]^return new Node ( Token.WHILE, cond, charno, lineno, body ) ;^357^^^^^355^358^return new Node ( Token.WHILE, cond, body, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createWhile [RETURN_TYPE] Node   Node cond Node body int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  body  cond  
[buglab_swap_variables]^return new Node ( Token.WHILE, cond,  lineno, charno ) ;^357^^^^^355^358^return new Node ( Token.WHILE, cond, body, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createWhile [RETURN_TYPE] Node   Node cond Node body int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  body  cond  
[buglab_swap_variables]^return new Node ( Token.WHILE, cond, body, charno, lineno ) ;^357^^^^^355^358^return new Node ( Token.WHILE, cond, body, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createWhile [RETURN_TYPE] Node   Node cond Node body int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  body  cond  
[buglab_swap_variables]^return new Node ( Token.WHILE, cond, body,  charno ) ;^357^^^^^355^358^return new Node ( Token.WHILE, cond, body, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createWhile [RETURN_TYPE] Node   Node cond Node body int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  body  cond  
[buglab_swap_variables]^return new Node ( Token.WHILE, charno, body, lineno, cond ) ;^357^^^^^355^358^return new Node ( Token.WHILE, cond, body, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createWhile [RETURN_TYPE] Node   Node cond Node body int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  body  cond  
[buglab_swap_variables]^return new Node ( Token.WHILE, cond, body, lineno ) ;^357^^^^^355^358^return new Node ( Token.WHILE, cond, body, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createWhile [RETURN_TYPE] Node   Node cond Node body int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  body  cond  
[buglab_swap_variables]^return new Node ( charno, cond, body, lineno, Token.WHILE ) ;^357^^^^^355^358^return new Node ( Token.WHILE, cond, body, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createWhile [RETURN_TYPE] Node   Node cond Node body int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  body  cond  
[buglab_swap_variables]^return new Node (  cond, body, lineno, charno ) ;^357^^^^^355^358^return new Node ( Token.WHILE, cond, body, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createWhile [RETURN_TYPE] Node   Node cond Node body int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  body  cond  
[buglab_swap_variables]^return new Node ( cond, Token.WHILE, body, lineno, charno ) ;^357^^^^^355^358^return new Node ( Token.WHILE, cond, body, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createWhile [RETURN_TYPE] Node   Node cond Node body int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  body  cond  
[buglab_swap_variables]^return new Node ( Token.WHILE, cond, lineno, body, charno ) ;^357^^^^^355^358^return new Node ( Token.WHILE, cond, body, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createWhile [RETURN_TYPE] Node   Node cond Node body int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  body  cond  
[buglab_swap_variables]^return new Node ( lineno, cond, body, Token.WHILE, charno ) ;^357^^^^^355^358^return new Node ( Token.WHILE, cond, body, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createWhile [RETURN_TYPE] Node   Node cond Node body int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  body  cond  
[buglab_swap_variables]^return new Node ( Token.DO, cond, body, lineno, charno ) ;^365^^^^^363^366^return new Node ( Token.DO, body, cond, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createDoWhile [RETURN_TYPE] Node   Node body Node cond int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  body  cond  
[buglab_swap_variables]^return new Node ( Token.DO,  cond, lineno, charno ) ;^365^^^^^363^366^return new Node ( Token.DO, body, cond, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createDoWhile [RETURN_TYPE] Node   Node body Node cond int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  body  cond  
[buglab_swap_variables]^return new Node ( Token.DO, body,  lineno, charno ) ;^365^^^^^363^366^return new Node ( Token.DO, body, cond, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createDoWhile [RETURN_TYPE] Node   Node body Node cond int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  body  cond  
[buglab_swap_variables]^return new Node ( Token.DO, body, cond, charno, lineno ) ;^365^^^^^363^366^return new Node ( Token.DO, body, cond, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createDoWhile [RETURN_TYPE] Node   Node body Node cond int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  body  cond  
[buglab_swap_variables]^return new Node ( Token.DO, body, cond,  charno ) ;^365^^^^^363^366^return new Node ( Token.DO, body, cond, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createDoWhile [RETURN_TYPE] Node   Node body Node cond int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  body  cond  
[buglab_swap_variables]^return new Node ( Token.DO, body, cond, lineno ) ;^365^^^^^363^366^return new Node ( Token.DO, body, cond, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createDoWhile [RETURN_TYPE] Node   Node body Node cond int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  body  cond  
[buglab_swap_variables]^return new Node ( charno, body, cond, lineno, Token.DO ) ;^365^^^^^363^366^return new Node ( Token.DO, body, cond, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createDoWhile [RETURN_TYPE] Node   Node body Node cond int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  body  cond  
[buglab_swap_variables]^return new Node (  body, cond, lineno, charno ) ;^365^^^^^363^366^return new Node ( Token.DO, body, cond, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createDoWhile [RETURN_TYPE] Node   Node body Node cond int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  body  cond  
[buglab_swap_variables]^return new Node ( lineno, body, cond, Token.DO, charno ) ;^365^^^^^363^366^return new Node ( Token.DO, body, cond, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createDoWhile [RETURN_TYPE] Node   Node body Node cond int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  body  cond  
[buglab_swap_variables]^return new Node ( Token.FOR, test, init, incr, body, lineno, charno ) ;^374^^^^^371^375^return new Node ( Token.FOR, init, test, incr, body, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createFor [RETURN_TYPE] Node   Node init Node test Node incr Node body int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  body  incr  init  test  
[buglab_swap_variables]^return new Node ( Token.FOR,  test, incr, body, lineno, charno ) ;^374^^^^^371^375^return new Node ( Token.FOR, init, test, incr, body, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createFor [RETURN_TYPE] Node   Node init Node test Node incr Node body int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  body  incr  init  test  
[buglab_swap_variables]^return new Node ( Token.FOR, init, incr, test, body, lineno, charno ) ;^374^^^^^371^375^return new Node ( Token.FOR, init, test, incr, body, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createFor [RETURN_TYPE] Node   Node init Node test Node incr Node body int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  body  incr  init  test  
[buglab_swap_variables]^return new Node ( Token.FOR, init,  incr, body, lineno, charno ) ;^374^^^^^371^375^return new Node ( Token.FOR, init, test, incr, body, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createFor [RETURN_TYPE] Node   Node init Node test Node incr Node body int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  body  incr  init  test  
[buglab_swap_variables]^return new Node ( Token.FOR, incr, test, init, body, lineno, charno ) ;^374^^^^^371^375^return new Node ( Token.FOR, init, test, incr, body, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createFor [RETURN_TYPE] Node   Node init Node test Node incr Node body int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  body  incr  init  test  
[buglab_swap_variables]^return new Node ( Token.FOR, init, test,  body, lineno, charno ) ;^374^^^^^371^375^return new Node ( Token.FOR, init, test, incr, body, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createFor [RETURN_TYPE] Node   Node init Node test Node incr Node body int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  body  incr  init  test  
[buglab_swap_variables]^return new Node ( Token.FOR, init, body, incr, test, lineno, charno ) ;^374^^^^^371^375^return new Node ( Token.FOR, init, test, incr, body, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createFor [RETURN_TYPE] Node   Node init Node test Node incr Node body int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  body  incr  init  test  
[buglab_swap_variables]^return new Node ( Token.FOR, init, test, incr,  lineno, charno ) ;^374^^^^^371^375^return new Node ( Token.FOR, init, test, incr, body, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createFor [RETURN_TYPE] Node   Node init Node test Node incr Node body int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  body  incr  init  test  
[buglab_swap_variables]^return new Node ( lineno, init, test, incr, body, Token.FOR, charno ) ;^374^^^^^371^375^return new Node ( Token.FOR, init, test, incr, body, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createFor [RETURN_TYPE] Node   Node init Node test Node incr Node body int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  body  incr  init  test  
[buglab_swap_variables]^return new Node ( Token.FOR, init, test, incr, body,  charno ) ;^374^^^^^371^375^return new Node ( Token.FOR, init, test, incr, body, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createFor [RETURN_TYPE] Node   Node init Node test Node incr Node body int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  body  incr  init  test  
[buglab_swap_variables]^return new Node ( charno, init, test, incr, body, lineno, Token.FOR ) ;^374^^^^^371^375^return new Node ( Token.FOR, init, test, incr, body, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createFor [RETURN_TYPE] Node   Node init Node test Node incr Node body int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  body  incr  init  test  
[buglab_swap_variables]^return new Node ( Token.FOR, init, test, incr, body, lineno ) ;^374^^^^^371^375^return new Node ( Token.FOR, init, test, incr, body, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createFor [RETURN_TYPE] Node   Node init Node test Node incr Node body int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  body  incr  init  test  
[buglab_swap_variables]^return new Node (  init, test, incr, body, lineno, charno ) ;^374^^^^^371^375^return new Node ( Token.FOR, init, test, incr, body, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createFor [RETURN_TYPE] Node   Node init Node test Node incr Node body int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  body  incr  init  test  
[buglab_swap_variables]^return new Node ( Token.FOR, init, test, body, incr, lineno, charno ) ;^374^^^^^371^375^return new Node ( Token.FOR, init, test, incr, body, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createFor [RETURN_TYPE] Node   Node init Node test Node incr Node body int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  body  incr  init  test  
[buglab_swap_variables]^return new Node ( Token.FOR, init, test, lineno, body, incr, charno ) ;^374^^^^^371^375^return new Node ( Token.FOR, init, test, incr, body, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createFor [RETURN_TYPE] Node   Node init Node test Node incr Node body int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  body  incr  init  test  
[buglab_swap_variables]^return new Node ( Token.FOR, init, test, incr, body, charno, lineno ) ;^374^^^^^371^375^return new Node ( Token.FOR, init, test, incr, body, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createFor [RETURN_TYPE] Node   Node init Node test Node incr Node body int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  body  incr  init  test  
[buglab_swap_variables]^return new Node ( incr, init, test, Token.FOR, body, lineno, charno ) ;^374^^^^^371^375^return new Node ( Token.FOR, init, test, incr, body, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createFor [RETURN_TYPE] Node   Node init Node test Node incr Node body int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  body  incr  init  test  
[buglab_swap_variables]^return new Node ( Token.FOR, obj, lhs, body, lineno, charno ) ;^384^^^^^381^385^return new Node ( Token.FOR, lhs, obj, body, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createForIn [RETURN_TYPE] Node   Node lhs Node obj Node body int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  body  lhs  obj  
[buglab_swap_variables]^return new Node ( Token.FOR,  obj, body, lineno, charno ) ;^384^^^^^381^385^return new Node ( Token.FOR, lhs, obj, body, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createForIn [RETURN_TYPE] Node   Node lhs Node obj Node body int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  body  lhs  obj  
[buglab_swap_variables]^return new Node ( Token.FOR, lhs, body, obj, lineno, charno ) ;^384^^^^^381^385^return new Node ( Token.FOR, lhs, obj, body, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createForIn [RETURN_TYPE] Node   Node lhs Node obj Node body int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  body  lhs  obj  
[buglab_swap_variables]^return new Node ( Token.FOR, lhs,  body, lineno, charno ) ;^384^^^^^381^385^return new Node ( Token.FOR, lhs, obj, body, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createForIn [RETURN_TYPE] Node   Node lhs Node obj Node body int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  body  lhs  obj  
[buglab_swap_variables]^return new Node ( Token.FOR, lhs, obj,  lineno, charno ) ;^384^^^^^381^385^return new Node ( Token.FOR, lhs, obj, body, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createForIn [RETURN_TYPE] Node   Node lhs Node obj Node body int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  body  lhs  obj  
[buglab_swap_variables]^return new Node ( lineno, lhs, obj, body, Token.FOR, charno ) ;^384^^^^^381^385^return new Node ( Token.FOR, lhs, obj, body, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createForIn [RETURN_TYPE] Node   Node lhs Node obj Node body int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  body  lhs  obj  
[buglab_swap_variables]^return new Node ( Token.FOR, lhs, obj, body,  charno ) ;^384^^^^^381^385^return new Node ( Token.FOR, lhs, obj, body, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createForIn [RETURN_TYPE] Node   Node lhs Node obj Node body int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  body  lhs  obj  
[buglab_swap_variables]^return new Node ( Token.FOR, lhs, obj, body, charno, lineno ) ;^384^^^^^381^385^return new Node ( Token.FOR, lhs, obj, body, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createForIn [RETURN_TYPE] Node   Node lhs Node obj Node body int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  body  lhs  obj  
[buglab_swap_variables]^return new Node ( Token.FOR, lhs, obj, body, lineno ) ;^384^^^^^381^385^return new Node ( Token.FOR, lhs, obj, body, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createForIn [RETURN_TYPE] Node   Node lhs Node obj Node body int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  body  lhs  obj  
[buglab_swap_variables]^return new Node ( obj, lhs, Token.FOR, body, lineno, charno ) ;^384^^^^^381^385^return new Node ( Token.FOR, lhs, obj, body, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createForIn [RETURN_TYPE] Node   Node lhs Node obj Node body int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  body  lhs  obj  
[buglab_swap_variables]^return new Node (  lhs, obj, body, lineno, charno ) ;^384^^^^^381^385^return new Node ( Token.FOR, lhs, obj, body, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createForIn [RETURN_TYPE] Node   Node lhs Node obj Node body int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  body  lhs  obj  
[buglab_swap_variables]^return new Node ( Token.FOR, lhs, obj, lineno, body, charno ) ;^384^^^^^381^385^return new Node ( Token.FOR, lhs, obj, body, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createForIn [RETURN_TYPE] Node   Node lhs Node obj Node body int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  body  lhs  obj  
[buglab_swap_variables]^return new Node ( Token.FOR, lhs, obj, charno, lineno, body ) ;^384^^^^^381^385^return new Node ( Token.FOR, lhs, obj, body, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createForIn [RETURN_TYPE] Node   Node lhs Node obj Node body int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  body  lhs  obj  
[buglab_swap_variables]^return new Node ( lhs, Token.FOR, obj, body, lineno, charno ) ;^384^^^^^381^385^return new Node ( Token.FOR, lhs, obj, body, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createForIn [RETURN_TYPE] Node   Node lhs Node obj Node body int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  body  lhs  obj  
[buglab_swap_variables]^return new Node ( Token.TRY, catchBlocks, tryBlock, lineno, charno ) ;^394^395^^^^390^399^return new Node ( Token.TRY, tryBlock, catchBlocks, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createTryCatchFinally [RETURN_TYPE] Node   Node tryBlock Node catchBlocks Node finallyBlock int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  catchBlocks  finallyBlock  tryBlock  
[buglab_swap_variables]^return new Node ( Token.TRY,  catchBlocks, lineno, charno ) ;^394^395^^^^390^399^return new Node ( Token.TRY, tryBlock, catchBlocks, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createTryCatchFinally [RETURN_TYPE] Node   Node tryBlock Node catchBlocks Node finallyBlock int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  catchBlocks  finallyBlock  tryBlock  
[buglab_swap_variables]^return new Node ( Token.TRY, tryBlock,  lineno, charno ) ;^394^395^^^^390^399^return new Node ( Token.TRY, tryBlock, catchBlocks, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createTryCatchFinally [RETURN_TYPE] Node   Node tryBlock Node catchBlocks Node finallyBlock int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  catchBlocks  finallyBlock  tryBlock  
[buglab_swap_variables]^return new Node ( Token.TRY, tryBlock, lineno, catchBlocks, charno ) ;^394^395^^^^390^399^return new Node ( Token.TRY, tryBlock, catchBlocks, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createTryCatchFinally [RETURN_TYPE] Node   Node tryBlock Node catchBlocks Node finallyBlock int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  catchBlocks  finallyBlock  tryBlock  
[buglab_swap_variables]^return new Node ( Token.TRY, tryBlock, catchBlocks,  charno ) ;^394^395^^^^390^399^return new Node ( Token.TRY, tryBlock, catchBlocks, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createTryCatchFinally [RETURN_TYPE] Node   Node tryBlock Node catchBlocks Node finallyBlock int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  catchBlocks  finallyBlock  tryBlock  
[buglab_swap_variables]^return new Node ( Token.TRY, charno, catchBlocks, lineno, tryBlock ) ;^394^395^^^^390^399^return new Node ( Token.TRY, tryBlock, catchBlocks, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createTryCatchFinally [RETURN_TYPE] Node   Node tryBlock Node catchBlocks Node finallyBlock int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  catchBlocks  finallyBlock  tryBlock  
[buglab_swap_variables]^return new Node ( Token.TRY, tryBlock, catchBlocks, lineno ) ;^394^395^^^^390^399^return new Node ( Token.TRY, tryBlock, catchBlocks, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createTryCatchFinally [RETURN_TYPE] Node   Node tryBlock Node catchBlocks Node finallyBlock int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  catchBlocks  finallyBlock  tryBlock  
[buglab_swap_variables]^return new Node ( tryBlock, Token.TRY, catchBlocks, lineno, charno ) ;^394^395^^^^390^399^return new Node ( Token.TRY, tryBlock, catchBlocks, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createTryCatchFinally [RETURN_TYPE] Node   Node tryBlock Node catchBlocks Node finallyBlock int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  catchBlocks  finallyBlock  tryBlock  
[buglab_swap_variables]^return new Node (  tryBlock, catchBlocks, lineno, charno ) ;^394^395^^^^390^399^return new Node ( Token.TRY, tryBlock, catchBlocks, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createTryCatchFinally [RETURN_TYPE] Node   Node tryBlock Node catchBlocks Node finallyBlock int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  catchBlocks  finallyBlock  tryBlock  
[buglab_swap_variables]^return new Node ( Token.TRY, tryBlock, catchBlocks, charno, lineno ) ;^394^395^^^^390^399^return new Node ( Token.TRY, tryBlock, catchBlocks, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createTryCatchFinally [RETURN_TYPE] Node   Node tryBlock Node catchBlocks Node finallyBlock int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  catchBlocks  finallyBlock  tryBlock  
[buglab_swap_variables]^return new Node ( charno, tryBlock, catchBlocks, lineno, Token.TRY ) ;^394^395^^^^390^399^return new Node ( Token.TRY, tryBlock, catchBlocks, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createTryCatchFinally [RETURN_TYPE] Node   Node tryBlock Node catchBlocks Node finallyBlock int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  catchBlocks  finallyBlock  tryBlock  
[buglab_swap_variables]^return new Node ( catchBlocks, tryBlock, Token.TRY, lineno, charno ) ;^394^395^^^^390^399^return new Node ( Token.TRY, tryBlock, catchBlocks, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createTryCatchFinally [RETURN_TYPE] Node   Node tryBlock Node catchBlocks Node finallyBlock int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  catchBlocks  finallyBlock  tryBlock  
[buglab_swap_variables]^return new Node ( Token.TRY, lineno, catchBlocks, tryBlock, charno ) ;^394^395^^^^390^399^return new Node ( Token.TRY, tryBlock, catchBlocks, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createTryCatchFinally [RETURN_TYPE] Node   Node tryBlock Node catchBlocks Node finallyBlock int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  catchBlocks  finallyBlock  tryBlock  
[buglab_swap_variables]^return new Node ( Token.TRY, tryBlock, charno, lineno, catchBlocks ) ;^394^395^^^^390^399^return new Node ( Token.TRY, tryBlock, catchBlocks, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createTryCatchFinally [RETURN_TYPE] Node   Node tryBlock Node catchBlocks Node finallyBlock int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  catchBlocks  finallyBlock  tryBlock  
[buglab_swap_variables]^return new Node ( Token.TRY, catchBlocks, tryBlock, finallyBlock, lineno, charno ) ;^397^398^^^^390^399^return new Node ( Token.TRY, tryBlock, catchBlocks, finallyBlock, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createTryCatchFinally [RETURN_TYPE] Node   Node tryBlock Node catchBlocks Node finallyBlock int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  catchBlocks  finallyBlock  tryBlock  
[buglab_swap_variables]^return new Node ( Token.TRY,  catchBlocks, finallyBlock, lineno, charno ) ;^397^398^^^^390^399^return new Node ( Token.TRY, tryBlock, catchBlocks, finallyBlock, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createTryCatchFinally [RETURN_TYPE] Node   Node tryBlock Node catchBlocks Node finallyBlock int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  catchBlocks  finallyBlock  tryBlock  
[buglab_swap_variables]^return new Node ( Token.TRY, tryBlock,  finallyBlock, lineno, charno ) ;^397^398^^^^390^399^return new Node ( Token.TRY, tryBlock, catchBlocks, finallyBlock, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createTryCatchFinally [RETURN_TYPE] Node   Node tryBlock Node catchBlocks Node finallyBlock int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  catchBlocks  finallyBlock  tryBlock  
[buglab_swap_variables]^return new Node ( Token.TRY, finallyBlock, catchBlocks, tryBlock, lineno, charno ) ;^397^398^^^^390^399^return new Node ( Token.TRY, tryBlock, catchBlocks, finallyBlock, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createTryCatchFinally [RETURN_TYPE] Node   Node tryBlock Node catchBlocks Node finallyBlock int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  catchBlocks  finallyBlock  tryBlock  
[buglab_swap_variables]^return new Node ( Token.TRY, tryBlock, catchBlocks,  lineno, charno ) ;^397^398^^^^390^399^return new Node ( Token.TRY, tryBlock, catchBlocks, finallyBlock, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createTryCatchFinally [RETURN_TYPE] Node   Node tryBlock Node catchBlocks Node finallyBlock int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  catchBlocks  finallyBlock  tryBlock  
[buglab_swap_variables]^return new Node ( Token.TRY, tryBlock, catchBlocks, finallyBlock, charno, lineno ) ;^397^398^^^^390^399^return new Node ( Token.TRY, tryBlock, catchBlocks, finallyBlock, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createTryCatchFinally [RETURN_TYPE] Node   Node tryBlock Node catchBlocks Node finallyBlock int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  catchBlocks  finallyBlock  tryBlock  
[buglab_swap_variables]^return new Node ( Token.TRY, tryBlock, catchBlocks, finallyBlock,  charno ) ;^397^398^^^^390^399^return new Node ( Token.TRY, tryBlock, catchBlocks, finallyBlock, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createTryCatchFinally [RETURN_TYPE] Node   Node tryBlock Node catchBlocks Node finallyBlock int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  catchBlocks  finallyBlock  tryBlock  
[buglab_swap_variables]^return new Node ( Token.TRY, tryBlock, catchBlocks, charno, lineno, finallyBlock ) ;^397^398^^^^390^399^return new Node ( Token.TRY, tryBlock, catchBlocks, finallyBlock, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createTryCatchFinally [RETURN_TYPE] Node   Node tryBlock Node catchBlocks Node finallyBlock int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  catchBlocks  finallyBlock  tryBlock  
[buglab_swap_variables]^return new Node ( Token.TRY, tryBlock, catchBlocks, finallyBlock, lineno ) ;^397^398^^^^390^399^return new Node ( Token.TRY, tryBlock, catchBlocks, finallyBlock, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createTryCatchFinally [RETURN_TYPE] Node   Node tryBlock Node catchBlocks Node finallyBlock int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  catchBlocks  finallyBlock  tryBlock  
[buglab_swap_variables]^return new Node ( catchBlocks, tryBlock, Token.TRY, finallyBlock, lineno, charno ) ;^397^398^^^^390^399^return new Node ( Token.TRY, tryBlock, catchBlocks, finallyBlock, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createTryCatchFinally [RETURN_TYPE] Node   Node tryBlock Node catchBlocks Node finallyBlock int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  catchBlocks  finallyBlock  tryBlock  
[buglab_swap_variables]^return new Node (  tryBlock, catchBlocks, finallyBlock, lineno, charno ) ;^397^398^^^^390^399^return new Node ( Token.TRY, tryBlock, catchBlocks, finallyBlock, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createTryCatchFinally [RETURN_TYPE] Node   Node tryBlock Node catchBlocks Node finallyBlock int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  catchBlocks  finallyBlock  tryBlock  
[buglab_swap_variables]^return new Node ( Token.TRY, tryBlock, finallyBlock, catchBlocks, lineno, charno ) ;^397^398^^^^390^399^return new Node ( Token.TRY, tryBlock, catchBlocks, finallyBlock, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createTryCatchFinally [RETURN_TYPE] Node   Node tryBlock Node catchBlocks Node finallyBlock int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  catchBlocks  finallyBlock  tryBlock  
[buglab_swap_variables]^return new Node ( Token.WITH, body, obj, lineno, charno ) ;^410^^^^^408^411^return new Node ( Token.WITH, obj, body, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createWith [RETURN_TYPE] Node   Node obj Node body int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  body  obj  
[buglab_swap_variables]^return new Node ( Token.WITH,  body, lineno, charno ) ;^410^^^^^408^411^return new Node ( Token.WITH, obj, body, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createWith [RETURN_TYPE] Node   Node obj Node body int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  body  obj  
[buglab_swap_variables]^return new Node ( Token.WITH, obj,  lineno, charno ) ;^410^^^^^408^411^return new Node ( Token.WITH, obj, body, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createWith [RETURN_TYPE] Node   Node obj Node body int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  body  obj  
[buglab_swap_variables]^return new Node ( Token.WITH, lineno, body, obj, charno ) ;^410^^^^^408^411^return new Node ( Token.WITH, obj, body, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createWith [RETURN_TYPE] Node   Node obj Node body int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  body  obj  
[buglab_swap_variables]^return new Node ( Token.WITH, obj, body,  charno ) ;^410^^^^^408^411^return new Node ( Token.WITH, obj, body, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createWith [RETURN_TYPE] Node   Node obj Node body int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  body  obj  
[buglab_swap_variables]^return new Node ( Token.WITH, obj, body, charno, lineno ) ;^410^^^^^408^411^return new Node ( Token.WITH, obj, body, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createWith [RETURN_TYPE] Node   Node obj Node body int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  body  obj  
[buglab_swap_variables]^return new Node ( Token.WITH, obj, body, lineno ) ;^410^^^^^408^411^return new Node ( Token.WITH, obj, body, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createWith [RETURN_TYPE] Node   Node obj Node body int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  body  obj  
[buglab_swap_variables]^return new Node ( charno, obj, body, lineno, Token.WITH ) ;^410^^^^^408^411^return new Node ( Token.WITH, obj, body, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createWith [RETURN_TYPE] Node   Node obj Node body int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  body  obj  
[buglab_swap_variables]^return new Node (  obj, body, lineno, charno ) ;^410^^^^^408^411^return new Node ( Token.WITH, obj, body, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createWith [RETURN_TYPE] Node   Node obj Node body int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  body  obj  
[buglab_swap_variables]^return new Node ( Token.WITH, charno, body, lineno, obj ) ;^410^^^^^408^411^return new Node ( Token.WITH, obj, body, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createWith [RETURN_TYPE] Node   Node obj Node body int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  body  obj  
[buglab_swap_variables]^Node result = new Node ( Token.DOTQUERY, body, obj, lineno, charno ) ;^419^^^^^416^421^Node result = new Node ( Token.DOTQUERY, obj, body, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createDotQuery [RETURN_TYPE] Node   Node obj Node body int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  body  obj  result  
[buglab_swap_variables]^Node result = new Node ( Token.DOTQUERY,  body, lineno, charno ) ;^419^^^^^416^421^Node result = new Node ( Token.DOTQUERY, obj, body, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createDotQuery [RETURN_TYPE] Node   Node obj Node body int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  body  obj  result  
[buglab_swap_variables]^Node result = new Node ( Token.DOTQUERY, obj, lineno, body, charno ) ;^419^^^^^416^421^Node result = new Node ( Token.DOTQUERY, obj, body, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createDotQuery [RETURN_TYPE] Node   Node obj Node body int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  body  obj  result  
[buglab_swap_variables]^Node result = new Node ( Token.DOTQUERY, obj,  lineno, charno ) ;^419^^^^^416^421^Node result = new Node ( Token.DOTQUERY, obj, body, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createDotQuery [RETURN_TYPE] Node   Node obj Node body int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  body  obj  result  
[buglab_swap_variables]^Node result = new Node ( Token.DOTQUERY, obj, body, charno, lineno ) ;^419^^^^^416^421^Node result = new Node ( Token.DOTQUERY, obj, body, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createDotQuery [RETURN_TYPE] Node   Node obj Node body int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  body  obj  result  
[buglab_swap_variables]^Node result = new Node ( Token.DOTQUERY, obj, body,  charno ) ;^419^^^^^416^421^Node result = new Node ( Token.DOTQUERY, obj, body, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createDotQuery [RETURN_TYPE] Node   Node obj Node body int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  body  obj  result  
[buglab_swap_variables]^Node result = new Node ( Token.DOTQUERY, obj, body, lineno ) ;^419^^^^^416^421^Node result = new Node ( Token.DOTQUERY, obj, body, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createDotQuery [RETURN_TYPE] Node   Node obj Node body int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  body  obj  result  
[buglab_swap_variables]^Node result = new Node ( obj, Token.DOTQUERY, body, lineno, charno ) ;^419^^^^^416^421^Node result = new Node ( Token.DOTQUERY, obj, body, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createDotQuery [RETURN_TYPE] Node   Node obj Node body int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  body  obj  result  
[buglab_swap_variables]^Node result = new Node (  obj, body, lineno, charno ) ;^419^^^^^416^421^Node result = new Node ( Token.DOTQUERY, obj, body, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createDotQuery [RETURN_TYPE] Node   Node obj Node body int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  body  obj  result  
[buglab_swap_variables]^Node result = new Node ( Token.DOTQUERY, lineno, body, obj, charno ) ;^419^^^^^416^421^Node result = new Node ( Token.DOTQUERY, obj, body, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createDotQuery [RETURN_TYPE] Node   Node obj Node body int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  body  obj  result  
[buglab_swap_variables]^Node result = new Node ( body, obj, Token.DOTQUERY, lineno, charno ) ;^419^^^^^416^421^Node result = new Node ( Token.DOTQUERY, obj, body, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createDotQuery [RETURN_TYPE] Node   Node obj Node body int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  body  obj  result  
[buglab_swap_variables]^Node array = new Node ( Token.ARRAYLIT, charno, lineno ) ;^431^^^^^423^445^Node array = new Node ( Token.ARRAYLIT, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createArrayLiteral [RETURN_TYPE] Node   ObjArray elems int skipCount int lineno int charno [VARIABLES] ObjArray  elems  int[]  skipIndexes  boolean  int  charno  i  j  length  lineno  skipCount  Parser  parser  Node  array  elem  
[buglab_swap_variables]^Node array = new Node ( Token.ARRAYLIT,  charno ) ;^431^^^^^423^445^Node array = new Node ( Token.ARRAYLIT, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createArrayLiteral [RETURN_TYPE] Node   ObjArray elems int skipCount int lineno int charno [VARIABLES] ObjArray  elems  int[]  skipIndexes  boolean  int  charno  i  j  length  lineno  skipCount  Parser  parser  Node  array  elem  
[buglab_swap_variables]^Node array = new Node ( Token.ARRAYLIT, lineno ) ;^431^^^^^423^445^Node array = new Node ( Token.ARRAYLIT, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createArrayLiteral [RETURN_TYPE] Node   ObjArray elems int skipCount int lineno int charno [VARIABLES] ObjArray  elems  int[]  skipIndexes  boolean  int  charno  i  j  length  lineno  skipCount  Parser  parser  Node  array  elem  
[buglab_swap_variables]^Node array = new Node ( charno, lineno, Token.ARRAYLIT ) ;^431^^^^^423^445^Node array = new Node ( Token.ARRAYLIT, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createArrayLiteral [RETURN_TYPE] Node   ObjArray elems int skipCount int lineno int charno [VARIABLES] ObjArray  elems  int[]  skipIndexes  boolean  int  charno  i  j  length  lineno  skipCount  Parser  parser  Node  array  elem  
[buglab_swap_variables]^Node array = new Node (  lineno, charno ) ;^431^^^^^423^445^Node array = new Node ( Token.ARRAYLIT, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createArrayLiteral [RETURN_TYPE] Node   ObjArray elems int skipCount int lineno int charno [VARIABLES] ObjArray  elems  int[]  skipIndexes  boolean  int  charno  i  j  length  lineno  skipCount  Parser  parser  Node  array  elem  
[buglab_swap_variables]^for  ( jnt i = 0, i = 0; i != length; ++i )  {^432^^^^^423^445^for  ( int i = 0, j = 0; i != length; ++i )  {^[CLASS] IRFactory  [METHOD] createArrayLiteral [RETURN_TYPE] Node   ObjArray elems int skipCount int lineno int charno [VARIABLES] ObjArray  elems  int[]  skipIndexes  boolean  int  charno  i  j  length  lineno  skipCount  Parser  parser  Node  array  elem  
[buglab_swap_variables]^for  ( int i = 0, length = 0; i != j; ++i )  {^432^^^^^423^445^for  ( int i = 0, j = 0; i != length; ++i )  {^[CLASS] IRFactory  [METHOD] createArrayLiteral [RETURN_TYPE] Node   ObjArray elems int skipCount int lineno int charno [VARIABLES] ObjArray  elems  int[]  skipIndexes  boolean  int  charno  i  j  length  lineno  skipCount  Parser  parser  Node  array  elem  
[buglab_swap_variables]^for  ( int i = 0 = 0; i != length; ++i )  {^432^^^^^423^445^for  ( int i = 0, j = 0; i != length; ++i )  {^[CLASS] IRFactory  [METHOD] createArrayLiteral [RETURN_TYPE] Node   ObjArray elems int skipCount int lineno int charno [VARIABLES] ObjArray  elems  int[]  skipIndexes  boolean  int  charno  i  j  length  lineno  skipCount  Parser  parser  Node  array  elem  
[buglab_swap_variables]^Node elem =  ( Node ) i.get ( elems ) ;^433^^^^^423^445^Node elem =  ( Node ) elems.get ( i ) ;^[CLASS] IRFactory  [METHOD] createArrayLiteral [RETURN_TYPE] Node   ObjArray elems int skipCount int lineno int charno [VARIABLES] ObjArray  elems  int[]  skipIndexes  boolean  int  charno  i  j  length  lineno  skipCount  Parser  parser  Node  array  elem  
[buglab_swap_variables]^array.putProp ( Node.SKIP_INDEXES_PROP ) ;^442^^^^^423^445^array.putProp ( Node.SKIP_INDEXES_PROP, skipIndexes ) ;^[CLASS] IRFactory  [METHOD] createArrayLiteral [RETURN_TYPE] Node   ObjArray elems int skipCount int lineno int charno [VARIABLES] ObjArray  elems  int[]  skipIndexes  boolean  int  charno  i  j  length  lineno  skipCount  Parser  parser  Node  array  elem  
[buglab_swap_variables]^Node object = new Node ( lineno, Token.OBJECTLIT, charno ) ;^452^^^^^450^461^Node object = new Node ( Token.OBJECTLIT, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createObjectLiteral [RETURN_TYPE] Node   ObjArray obj int lineno int charno [VARIABLES] ObjArray  obj  boolean  int  charno  i  lineno  Parser  parser  Node  n  object  
[buglab_swap_variables]^Node object = new Node ( Token.OBJECTLIT,  charno ) ;^452^^^^^450^461^Node object = new Node ( Token.OBJECTLIT, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createObjectLiteral [RETURN_TYPE] Node   ObjArray obj int lineno int charno [VARIABLES] ObjArray  obj  boolean  int  charno  i  lineno  Parser  parser  Node  n  object  
[buglab_swap_variables]^Node object = new Node ( Token.OBJECTLIT, charno, lineno ) ;^452^^^^^450^461^Node object = new Node ( Token.OBJECTLIT, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createObjectLiteral [RETURN_TYPE] Node   ObjArray obj int lineno int charno [VARIABLES] ObjArray  obj  boolean  int  charno  i  lineno  Parser  parser  Node  n  object  
[buglab_swap_variables]^Node object = new Node ( Token.OBJECTLIT, lineno ) ;^452^^^^^450^461^Node object = new Node ( Token.OBJECTLIT, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createObjectLiteral [RETURN_TYPE] Node   ObjArray obj int lineno int charno [VARIABLES] ObjArray  obj  boolean  int  charno  i  lineno  Parser  parser  Node  n  object  
[buglab_swap_variables]^Node object = new Node (  lineno, charno ) ;^452^^^^^450^461^Node object = new Node ( Token.OBJECTLIT, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createObjectLiteral [RETURN_TYPE] Node   ObjArray obj int lineno int charno [VARIABLES] ObjArray  obj  boolean  int  charno  i  lineno  Parser  parser  Node  n  object  
[buglab_swap_variables]^Node object = new Node ( charno, lineno, Token.OBJECTLIT ) ;^452^^^^^450^461^Node object = new Node ( Token.OBJECTLIT, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createObjectLiteral [RETURN_TYPE] Node   ObjArray obj int lineno int charno [VARIABLES] ObjArray  obj  boolean  int  charno  i  lineno  Parser  parser  Node  n  object  
[buglab_swap_variables]^n =  ( Node ) i.get ( obj + 1 ) ;^456^^^^^450^461^n =  ( Node ) obj.get ( i + 1 ) ;^[CLASS] IRFactory  [METHOD] createObjectLiteral [RETURN_TYPE] Node   ObjArray obj int lineno int charno [VARIABLES] ObjArray  obj  boolean  int  charno  i  lineno  Parser  parser  Node  n  object  
[buglab_swap_variables]^Node n =  ( Node ) i.get ( obj ) ;^454^^^^^450^461^Node n =  ( Node ) obj.get ( i ) ;^[CLASS] IRFactory  [METHOD] createObjectLiteral [RETURN_TYPE] Node   ObjArray obj int lineno int charno [VARIABLES] ObjArray  obj  boolean  int  charno  i  lineno  Parser  parser  Node  n  object  
[buglab_swap_variables]^return charno.length (  )  == 0 ? new Node ( Token.REGEXP, Node.newString ( string, lineno, flags ) , lineno, charno )^468^469^470^471^^466^476^return flags.length (  )  == 0 ? new Node ( Token.REGEXP, Node.newString ( string, lineno, charno ) , lineno, charno )^[CLASS] IRFactory  [METHOD] createRegExp [RETURN_TYPE] Node   String string String flags int lineno int charno [VARIABLES] String  flags  string  boolean  int  charno  lineno  Parser  parser  
[buglab_swap_variables]^return flags.length (  )  == 0 ? new Node ( Token.REGEXP, Node.newString ( charno, lineno, string ) , lineno, charno )^468^469^470^471^^466^476^return flags.length (  )  == 0 ? new Node ( Token.REGEXP, Node.newString ( string, lineno, charno ) , lineno, charno )^[CLASS] IRFactory  [METHOD] createRegExp [RETURN_TYPE] Node   String string String flags int lineno int charno [VARIABLES] String  flags  string  boolean  int  charno  lineno  Parser  parser  
[buglab_swap_variables]^return flags.length (  )  == 0 ? new Node ( Token.REGEXP, Node.newString (  lineno, charno ) , lineno, charno )^468^469^470^471^^466^476^return flags.length (  )  == 0 ? new Node ( Token.REGEXP, Node.newString ( string, lineno, charno ) , lineno, charno )^[CLASS] IRFactory  [METHOD] createRegExp [RETURN_TYPE] Node   String string String flags int lineno int charno [VARIABLES] String  flags  string  boolean  int  charno  lineno  Parser  parser  
[buglab_swap_variables]^return flags.length (  )  == 0 ? new Node ( Token.REGEXP, Node.newString ( string, charno, lineno ) , lineno, charno )^468^469^470^471^^466^476^return flags.length (  )  == 0 ? new Node ( Token.REGEXP, Node.newString ( string, lineno, charno ) , lineno, charno )^[CLASS] IRFactory  [METHOD] createRegExp [RETURN_TYPE] Node   String string String flags int lineno int charno [VARIABLES] String  flags  string  boolean  int  charno  lineno  Parser  parser  
[buglab_swap_variables]^return flags.length (  )  == 0 ? new Node ( Token.REGEXP, Node.newString ( string,  charno ) , lineno, charno )^468^469^470^471^^466^476^return flags.length (  )  == 0 ? new Node ( Token.REGEXP, Node.newString ( string, lineno, charno ) , lineno, charno )^[CLASS] IRFactory  [METHOD] createRegExp [RETURN_TYPE] Node   String string String flags int lineno int charno [VARIABLES] String  flags  string  boolean  int  charno  lineno  Parser  parser  
[buglab_swap_variables]^return flags.length (  )  == 0 ? new Node ( Token.REGEXP, Node.newString ( string, lineno ) , lineno, charno )^468^469^470^471^^466^476^return flags.length (  )  == 0 ? new Node ( Token.REGEXP, Node.newString ( string, lineno, charno ) , lineno, charno )^[CLASS] IRFactory  [METHOD] createRegExp [RETURN_TYPE] Node   String string String flags int lineno int charno [VARIABLES] String  flags  string  boolean  int  charno  lineno  Parser  parser  
[buglab_swap_variables]^return flags.length (  )  == 0 ? new Node ( string, Node.newString ( Token.REGEXP, lineno, charno ) , lineno, charno )^468^469^470^471^^466^476^return flags.length (  )  == 0 ? new Node ( Token.REGEXP, Node.newString ( string, lineno, charno ) , lineno, charno )^[CLASS] IRFactory  [METHOD] createRegExp [RETURN_TYPE] Node   String string String flags int lineno int charno [VARIABLES] String  flags  string  boolean  int  charno  lineno  Parser  parser  
[buglab_swap_variables]^return flags.length (  )  == 0 ? new Node (  Node.newString ( string, lineno, charno ) , lineno, charno )^468^469^470^471^^466^476^return flags.length (  )  == 0 ? new Node ( Token.REGEXP, Node.newString ( string, lineno, charno ) , lineno, charno )^[CLASS] IRFactory  [METHOD] createRegExp [RETURN_TYPE] Node   String string String flags int lineno int charno [VARIABLES] String  flags  string  boolean  int  charno  lineno  Parser  parser  
[buglab_swap_variables]^? new Node ( Token.REGEXP, Node.newString ( lineno, string, charno ) , lineno, charno ) : new Node ( Token.REGEXP,^469^470^471^472^^466^476^? new Node ( Token.REGEXP, Node.newString ( string, lineno, charno ) , lineno, charno ) : new Node ( Token.REGEXP,^[CLASS] IRFactory  [METHOD] createRegExp [RETURN_TYPE] Node   String string String flags int lineno int charno [VARIABLES] String  flags  string  boolean  int  charno  lineno  Parser  parser  
[buglab_swap_variables]^? new Node ( Token.REGEXP, Node.newString (  lineno, charno ) , lineno, charno ) : new Node ( Token.REGEXP,^469^470^471^472^^466^476^? new Node ( Token.REGEXP, Node.newString ( string, lineno, charno ) , lineno, charno ) : new Node ( Token.REGEXP,^[CLASS] IRFactory  [METHOD] createRegExp [RETURN_TYPE] Node   String string String flags int lineno int charno [VARIABLES] String  flags  string  boolean  int  charno  lineno  Parser  parser  
[buglab_swap_variables]^? new Node ( Token.REGEXP, Node.newString ( string, charno, lineno ) , lineno, charno ) : new Node ( Token.REGEXP,^469^470^471^472^^466^476^? new Node ( Token.REGEXP, Node.newString ( string, lineno, charno ) , lineno, charno ) : new Node ( Token.REGEXP,^[CLASS] IRFactory  [METHOD] createRegExp [RETURN_TYPE] Node   String string String flags int lineno int charno [VARIABLES] String  flags  string  boolean  int  charno  lineno  Parser  parser  
[buglab_swap_variables]^? new Node ( Token.REGEXP, Node.newString ( string,  charno ) , lineno, charno ) : new Node ( Token.REGEXP,^469^470^471^472^^466^476^? new Node ( Token.REGEXP, Node.newString ( string, lineno, charno ) , lineno, charno ) : new Node ( Token.REGEXP,^[CLASS] IRFactory  [METHOD] createRegExp [RETURN_TYPE] Node   String string String flags int lineno int charno [VARIABLES] String  flags  string  boolean  int  charno  lineno  Parser  parser  
[buglab_swap_variables]^? new Node ( Token.REGEXP, Node.newString ( charno, lineno, string ) , lineno, charno ) : new Node ( Token.REGEXP,^469^470^471^472^^466^476^? new Node ( Token.REGEXP, Node.newString ( string, lineno, charno ) , lineno, charno ) : new Node ( Token.REGEXP,^[CLASS] IRFactory  [METHOD] createRegExp [RETURN_TYPE] Node   String string String flags int lineno int charno [VARIABLES] String  flags  string  boolean  int  charno  lineno  Parser  parser  
[buglab_swap_variables]^? new Node ( Token.REGEXP, Node.newString ( string, lineno ) , lineno, charno ) : new Node ( Token.REGEXP,^469^470^471^472^^466^476^? new Node ( Token.REGEXP, Node.newString ( string, lineno, charno ) , lineno, charno ) : new Node ( Token.REGEXP,^[CLASS] IRFactory  [METHOD] createRegExp [RETURN_TYPE] Node   String string String flags int lineno int charno [VARIABLES] String  flags  string  boolean  int  charno  lineno  Parser  parser  
[buglab_swap_variables]^? new Node ( string, Node.newString ( Token.REGEXP, lineno, charno ) , lineno, charno ) : new Node ( Token.REGEXP,^469^470^471^472^^466^476^? new Node ( Token.REGEXP, Node.newString ( string, lineno, charno ) , lineno, charno ) : new Node ( Token.REGEXP,^[CLASS] IRFactory  [METHOD] createRegExp [RETURN_TYPE] Node   String string String flags int lineno int charno [VARIABLES] String  flags  string  boolean  int  charno  lineno  Parser  parser  
[buglab_swap_variables]^? new Node (  Node.newString ( string, lineno, charno ) , lineno, charno ) : new Node ( Token.REGEXP,^469^470^471^472^^466^476^? new Node ( Token.REGEXP, Node.newString ( string, lineno, charno ) , lineno, charno ) : new Node ( Token.REGEXP,^[CLASS] IRFactory  [METHOD] createRegExp [RETURN_TYPE] Node   String string String flags int lineno int charno [VARIABLES] String  flags  string  boolean  int  charno  lineno  Parser  parser  
[buglab_swap_variables]^: new Node ( Token.REGEXP, Node.newString ( lineno, string, charno ) , Node.newString ( flags, lineno, charno ) , lineno, charno ) ;^472^473^474^475^^466^476^: new Node ( Token.REGEXP, Node.newString ( string, lineno, charno ) , Node.newString ( flags, lineno, charno ) , lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createRegExp [RETURN_TYPE] Node   String string String flags int lineno int charno [VARIABLES] String  flags  string  boolean  int  charno  lineno  Parser  parser  
[buglab_swap_variables]^: new Node ( Token.REGEXP, Node.newString (  lineno, charno ) , Node.newString ( flags, lineno, charno ) , lineno, charno ) ;^472^473^474^475^^466^476^: new Node ( Token.REGEXP, Node.newString ( string, lineno, charno ) , Node.newString ( flags, lineno, charno ) , lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createRegExp [RETURN_TYPE] Node   String string String flags int lineno int charno [VARIABLES] String  flags  string  boolean  int  charno  lineno  Parser  parser  
[buglab_swap_variables]^: new Node ( Token.REGEXP, Node.newString ( string, flags, charno ) , Node.newString ( lineno, lineno, charno ) , lineno, charno ) ;^472^473^474^475^^466^476^: new Node ( Token.REGEXP, Node.newString ( string, lineno, charno ) , Node.newString ( flags, lineno, charno ) , lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createRegExp [RETURN_TYPE] Node   String string String flags int lineno int charno [VARIABLES] String  flags  string  boolean  int  charno  lineno  Parser  parser  
[buglab_swap_variables]^: new Node ( Token.REGEXP, Node.newString ( string,  charno ) , Node.newString ( flags, lineno, charno ) , lineno, charno ) ;^472^473^474^475^^466^476^: new Node ( Token.REGEXP, Node.newString ( string, lineno, charno ) , Node.newString ( flags, lineno, charno ) , lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createRegExp [RETURN_TYPE] Node   String string String flags int lineno int charno [VARIABLES] String  flags  string  boolean  int  charno  lineno  Parser  parser  
[buglab_swap_variables]^: new Node ( Token.REGEXP, Node.newString ( string, charno, lineno ) , Node.newString ( flags, lineno, charno ) , lineno, charno ) ;^472^473^474^475^^466^476^: new Node ( Token.REGEXP, Node.newString ( string, lineno, charno ) , Node.newString ( flags, lineno, charno ) , lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createRegExp [RETURN_TYPE] Node   String string String flags int lineno int charno [VARIABLES] String  flags  string  boolean  int  charno  lineno  Parser  parser  
[buglab_swap_variables]^: new Node ( Token.REGEXP, Node.newString ( string, lineno ) , Node.newString ( flags, lineno, charno ) , lineno, charno ) ;^472^473^474^475^^466^476^: new Node ( Token.REGEXP, Node.newString ( string, lineno, charno ) , Node.newString ( flags, lineno, charno ) , lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createRegExp [RETURN_TYPE] Node   String string String flags int lineno int charno [VARIABLES] String  flags  string  boolean  int  charno  lineno  Parser  parser  
[buglab_swap_variables]^: new Node ( flags, Node.newString ( string, lineno, charno ) , Node.newString ( Token.REGEXP, lineno, charno ) , lineno, charno ) ;^472^473^474^475^^466^476^: new Node ( Token.REGEXP, Node.newString ( string, lineno, charno ) , Node.newString ( flags, lineno, charno ) , lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createRegExp [RETURN_TYPE] Node   String string String flags int lineno int charno [VARIABLES] String  flags  string  boolean  int  charno  lineno  Parser  parser  
[buglab_swap_variables]^: new Node ( Token.REGEXP, Node.newString ( string, lineno, charno ) , Node.newString (  lineno, charno ) , lineno, charno ) ;^472^473^474^475^^466^476^: new Node ( Token.REGEXP, Node.newString ( string, lineno, charno ) , Node.newString ( flags, lineno, charno ) , lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createRegExp [RETURN_TYPE] Node   String string String flags int lineno int charno [VARIABLES] String  flags  string  boolean  int  charno  lineno  Parser  parser  
[buglab_swap_variables]^: new Node (  Node.newString ( string, lineno, charno ) , Node.newString ( flags, lineno, charno ) , lineno, charno ) ;^472^473^474^475^^466^476^: new Node ( Token.REGEXP, Node.newString ( string, lineno, charno ) , Node.newString ( flags, lineno, charno ) , lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createRegExp [RETURN_TYPE] Node   String string String flags int lineno int charno [VARIABLES] String  flags  string  boolean  int  charno  lineno  Parser  parser  
[buglab_swap_variables]^Node.newString ( charno, lineno, string ) , lineno, charno ) : new Node ( Token.REGEXP, Node.newString ( string, lineno, charno ) ,^470^471^472^473^^466^476^Node.newString ( string, lineno, charno ) , lineno, charno ) : new Node ( Token.REGEXP, Node.newString ( string, lineno, charno ) ,^[CLASS] IRFactory  [METHOD] createRegExp [RETURN_TYPE] Node   String string String flags int lineno int charno [VARIABLES] String  flags  string  boolean  int  charno  lineno  Parser  parser  
[buglab_swap_variables]^Node.newString (  lineno, charno ) , lineno, charno ) : new Node ( Token.REGEXP, Node.newString ( string, lineno, charno ) ,^470^471^472^473^^466^476^Node.newString ( string, lineno, charno ) , lineno, charno ) : new Node ( Token.REGEXP, Node.newString ( string, lineno, charno ) ,^[CLASS] IRFactory  [METHOD] createRegExp [RETURN_TYPE] Node   String string String flags int lineno int charno [VARIABLES] String  flags  string  boolean  int  charno  lineno  Parser  parser  
[buglab_swap_variables]^Node.newString ( string, charno, lineno ) , lineno, charno ) : new Node ( Token.REGEXP, Node.newString ( string, lineno, charno ) ,^470^471^472^473^^466^476^Node.newString ( string, lineno, charno ) , lineno, charno ) : new Node ( Token.REGEXP, Node.newString ( string, lineno, charno ) ,^[CLASS] IRFactory  [METHOD] createRegExp [RETURN_TYPE] Node   String string String flags int lineno int charno [VARIABLES] String  flags  string  boolean  int  charno  lineno  Parser  parser  
[buglab_swap_variables]^Node.newString ( string,  charno ) , lineno, charno ) : new Node ( Token.REGEXP, Node.newString ( string, lineno, charno ) ,^470^471^472^473^^466^476^Node.newString ( string, lineno, charno ) , lineno, charno ) : new Node ( Token.REGEXP, Node.newString ( string, lineno, charno ) ,^[CLASS] IRFactory  [METHOD] createRegExp [RETURN_TYPE] Node   String string String flags int lineno int charno [VARIABLES] String  flags  string  boolean  int  charno  lineno  Parser  parser  
[buglab_swap_variables]^Node.newString ( string, lineno ) , lineno, charno ) : new Node ( Token.REGEXP, Node.newString ( string, lineno, charno ) ,^470^471^472^473^^466^476^Node.newString ( string, lineno, charno ) , lineno, charno ) : new Node ( Token.REGEXP, Node.newString ( string, lineno, charno ) ,^[CLASS] IRFactory  [METHOD] createRegExp [RETURN_TYPE] Node   String string String flags int lineno int charno [VARIABLES] String  flags  string  boolean  int  charno  lineno  Parser  parser  
[buglab_swap_variables]^Node.newString ( lineno, string, charno ) , Node.newString ( flags, lineno, charno ) , lineno, charno ) ;^473^474^475^^^466^476^Node.newString ( string, lineno, charno ) , Node.newString ( flags, lineno, charno ) , lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createRegExp [RETURN_TYPE] Node   String string String flags int lineno int charno [VARIABLES] String  flags  string  boolean  int  charno  lineno  Parser  parser  
[buglab_swap_variables]^Node.newString (  lineno, charno ) , Node.newString ( flags, lineno, charno ) , lineno, charno ) ;^473^474^475^^^466^476^Node.newString ( string, lineno, charno ) , Node.newString ( flags, lineno, charno ) , lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createRegExp [RETURN_TYPE] Node   String string String flags int lineno int charno [VARIABLES] String  flags  string  boolean  int  charno  lineno  Parser  parser  
[buglab_swap_variables]^Node.newString ( string, charno, lineno ) , Node.newString ( flags, lineno, charno ) , lineno, charno ) ;^473^474^475^^^466^476^Node.newString ( string, lineno, charno ) , Node.newString ( flags, lineno, charno ) , lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createRegExp [RETURN_TYPE] Node   String string String flags int lineno int charno [VARIABLES] String  flags  string  boolean  int  charno  lineno  Parser  parser  
[buglab_swap_variables]^Node.newString ( string,  charno ) , Node.newString ( flags, lineno, charno ) , lineno, charno ) ;^473^474^475^^^466^476^Node.newString ( string, lineno, charno ) , Node.newString ( flags, lineno, charno ) , lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createRegExp [RETURN_TYPE] Node   String string String flags int lineno int charno [VARIABLES] String  flags  string  boolean  int  charno  lineno  Parser  parser  
[buglab_swap_variables]^Node.newString ( charno, lineno, string ) , Node.newString ( flags, lineno, charno ) , lineno, charno ) ;^473^474^475^^^466^476^Node.newString ( string, lineno, charno ) , Node.newString ( flags, lineno, charno ) , lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createRegExp [RETURN_TYPE] Node   String string String flags int lineno int charno [VARIABLES] String  flags  string  boolean  int  charno  lineno  Parser  parser  
[buglab_swap_variables]^Node.newString ( string, lineno ) , Node.newString ( flags, lineno, charno ) , lineno, charno ) ;^473^474^475^^^466^476^Node.newString ( string, lineno, charno ) , Node.newString ( flags, lineno, charno ) , lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createRegExp [RETURN_TYPE] Node   String string String flags int lineno int charno [VARIABLES] String  flags  string  boolean  int  charno  lineno  Parser  parser  
[buglab_swap_variables]^Node.newString ( lineno, flags, charno ) , lineno, charno ) ;^474^475^^^^466^476^Node.newString ( flags, lineno, charno ) , lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createRegExp [RETURN_TYPE] Node   String string String flags int lineno int charno [VARIABLES] String  flags  string  boolean  int  charno  lineno  Parser  parser  
[buglab_swap_variables]^Node.newString (  lineno, charno ) , lineno, charno ) ;^474^475^^^^466^476^Node.newString ( flags, lineno, charno ) , lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createRegExp [RETURN_TYPE] Node   String string String flags int lineno int charno [VARIABLES] String  flags  string  boolean  int  charno  lineno  Parser  parser  
[buglab_swap_variables]^Node.newString ( flags, charno, lineno ) , lineno, charno ) ;^474^475^^^^466^476^Node.newString ( flags, lineno, charno ) , lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createRegExp [RETURN_TYPE] Node   String string String flags int lineno int charno [VARIABLES] String  flags  string  boolean  int  charno  lineno  Parser  parser  
[buglab_swap_variables]^Node.newString ( flags,  charno ) , lineno, charno ) ;^474^475^^^^466^476^Node.newString ( flags, lineno, charno ) , lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createRegExp [RETURN_TYPE] Node   String string String flags int lineno int charno [VARIABLES] String  flags  string  boolean  int  charno  lineno  Parser  parser  
[buglab_swap_variables]^Node.newString ( charno, lineno, flags ) , lineno, charno ) ;^474^475^^^^466^476^Node.newString ( flags, lineno, charno ) , lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createRegExp [RETURN_TYPE] Node   String string String flags int lineno int charno [VARIABLES] String  flags  string  boolean  int  charno  lineno  Parser  parser  
[buglab_swap_variables]^Node.newString ( flags, lineno ) , lineno, charno ) ;^474^475^^^^466^476^Node.newString ( flags, lineno, charno ) , lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createRegExp [RETURN_TYPE] Node   String string String flags int lineno int charno [VARIABLES] String  flags  string  boolean  int  charno  lineno  Parser  parser  
[buglab_swap_variables]^if  ( ifTrue == null ) return new Node ( Token.IF, cond, ifFalse, lineno, charno ) ;^483^484^^^^481^486^if  ( ifFalse == null ) return new Node ( Token.IF, cond, ifTrue, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createIf [RETURN_TYPE] Node   Node cond Node ifTrue Node ifFalse int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  cond  ifFalse  ifTrue  
[buglab_swap_variables]^if  ( ifFalse == null ) return new Node ( Token.IF, ifTrue, cond, lineno, charno ) ;^483^484^^^^481^486^if  ( ifFalse == null ) return new Node ( Token.IF, cond, ifTrue, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createIf [RETURN_TYPE] Node   Node cond Node ifTrue Node ifFalse int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  cond  ifFalse  ifTrue  
[buglab_swap_variables]^if  ( ifFalse == null ) return new Node ( Token.IF,  ifTrue, lineno, charno ) ;^483^484^^^^481^486^if  ( ifFalse == null ) return new Node ( Token.IF, cond, ifTrue, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createIf [RETURN_TYPE] Node   Node cond Node ifTrue Node ifFalse int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  cond  ifFalse  ifTrue  
[buglab_swap_variables]^if  ( ifFalse == null ) return new Node ( Token.IF, cond,  lineno, charno ) ;^483^484^^^^481^486^if  ( ifFalse == null ) return new Node ( Token.IF, cond, ifTrue, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createIf [RETURN_TYPE] Node   Node cond Node ifTrue Node ifFalse int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  cond  ifFalse  ifTrue  
[buglab_swap_variables]^if  ( ifFalse == null ) return new Node ( Token.IF, cond, ifTrue, charno, lineno ) ;^483^484^^^^481^486^if  ( ifFalse == null ) return new Node ( Token.IF, cond, ifTrue, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createIf [RETURN_TYPE] Node   Node cond Node ifTrue Node ifFalse int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  cond  ifFalse  ifTrue  
[buglab_swap_variables]^if  ( ifFalse == null ) return new Node ( Token.IF, cond, ifTrue,  charno ) ;^483^484^^^^481^486^if  ( ifFalse == null ) return new Node ( Token.IF, cond, ifTrue, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createIf [RETURN_TYPE] Node   Node cond Node ifTrue Node ifFalse int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  cond  ifFalse  ifTrue  
[buglab_swap_variables]^if  ( ifFalse == null ) return new Node ( Token.IF, cond, ifTrue, lineno ) ;^483^484^^^^481^486^if  ( ifFalse == null ) return new Node ( Token.IF, cond, ifTrue, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createIf [RETURN_TYPE] Node   Node cond Node ifTrue Node ifFalse int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  cond  ifFalse  ifTrue  
[buglab_swap_variables]^if  ( ifFalse == null ) return new Node ( charno, cond, ifTrue, lineno, Token.IF ) ;^483^484^^^^481^486^if  ( ifFalse == null ) return new Node ( Token.IF, cond, ifTrue, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createIf [RETURN_TYPE] Node   Node cond Node ifTrue Node ifFalse int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  cond  ifFalse  ifTrue  
[buglab_swap_variables]^if  ( ifFalse == null ) return new Node (  cond, ifTrue, lineno, charno ) ;^483^484^^^^481^486^if  ( ifFalse == null ) return new Node ( Token.IF, cond, ifTrue, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createIf [RETURN_TYPE] Node   Node cond Node ifTrue Node ifFalse int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  cond  ifFalse  ifTrue  
[buglab_swap_variables]^return new Node ( Token.IF, ifTrue, cond, lineno, charno ) ;^484^^^^^481^486^return new Node ( Token.IF, cond, ifTrue, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createIf [RETURN_TYPE] Node   Node cond Node ifTrue Node ifFalse int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  cond  ifFalse  ifTrue  
[buglab_swap_variables]^return new Node ( Token.IF,  ifTrue, lineno, charno ) ;^484^^^^^481^486^return new Node ( Token.IF, cond, ifTrue, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createIf [RETURN_TYPE] Node   Node cond Node ifTrue Node ifFalse int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  cond  ifFalse  ifTrue  
[buglab_swap_variables]^return new Node ( Token.IF, cond,  lineno, charno ) ;^484^^^^^481^486^return new Node ( Token.IF, cond, ifTrue, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createIf [RETURN_TYPE] Node   Node cond Node ifTrue Node ifFalse int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  cond  ifFalse  ifTrue  
[buglab_swap_variables]^return new Node ( Token.IF, cond, ifTrue, charno, lineno ) ;^484^^^^^481^486^return new Node ( Token.IF, cond, ifTrue, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createIf [RETURN_TYPE] Node   Node cond Node ifTrue Node ifFalse int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  cond  ifFalse  ifTrue  
[buglab_swap_variables]^return new Node ( Token.IF, cond, ifTrue,  charno ) ;^484^^^^^481^486^return new Node ( Token.IF, cond, ifTrue, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createIf [RETURN_TYPE] Node   Node cond Node ifTrue Node ifFalse int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  cond  ifFalse  ifTrue  
[buglab_swap_variables]^return new Node ( Token.IF, cond, charno, lineno, ifTrue ) ;^484^^^^^481^486^return new Node ( Token.IF, cond, ifTrue, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createIf [RETURN_TYPE] Node   Node cond Node ifTrue Node ifFalse int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  cond  ifFalse  ifTrue  
[buglab_swap_variables]^return new Node ( Token.IF, cond, ifTrue, lineno ) ;^484^^^^^481^486^return new Node ( Token.IF, cond, ifTrue, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createIf [RETURN_TYPE] Node   Node cond Node ifTrue Node ifFalse int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  cond  ifFalse  ifTrue  
[buglab_swap_variables]^return new Node ( lineno, cond, ifTrue, Token.IF, charno ) ;^484^^^^^481^486^return new Node ( Token.IF, cond, ifTrue, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createIf [RETURN_TYPE] Node   Node cond Node ifTrue Node ifFalse int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  cond  ifFalse  ifTrue  
[buglab_swap_variables]^return new Node (  cond, ifTrue, lineno, charno ) ;^484^^^^^481^486^return new Node ( Token.IF, cond, ifTrue, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createIf [RETURN_TYPE] Node   Node cond Node ifTrue Node ifFalse int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  cond  ifFalse  ifTrue  
[buglab_swap_variables]^return new Node ( charno, cond, ifTrue, lineno, Token.IF ) ;^484^^^^^481^486^return new Node ( Token.IF, cond, ifTrue, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createIf [RETURN_TYPE] Node   Node cond Node ifTrue Node ifFalse int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  cond  ifFalse  ifTrue  
[buglab_swap_variables]^return new Node ( cond, Token.IF, ifTrue, lineno, charno ) ;^484^^^^^481^486^return new Node ( Token.IF, cond, ifTrue, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createIf [RETURN_TYPE] Node   Node cond Node ifTrue Node ifFalse int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  cond  ifFalse  ifTrue  
[buglab_swap_variables]^return new Node ( Token.IF, charno, ifTrue, lineno, cond ) ;^484^^^^^481^486^return new Node ( Token.IF, cond, ifTrue, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createIf [RETURN_TYPE] Node   Node cond Node ifTrue Node ifFalse int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  cond  ifFalse  ifTrue  
[buglab_swap_variables]^return new Node ( ifTrue, cond, Token.IF, lineno, charno ) ;^484^^^^^481^486^return new Node ( Token.IF, cond, ifTrue, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createIf [RETURN_TYPE] Node   Node cond Node ifTrue Node ifFalse int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  cond  ifFalse  ifTrue  
[buglab_swap_variables]^return new Node ( Token.IF, ifTrue, cond, ifFalse, lineno, charno ) ;^485^^^^^481^486^return new Node ( Token.IF, cond, ifTrue, ifFalse, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createIf [RETURN_TYPE] Node   Node cond Node ifTrue Node ifFalse int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  cond  ifFalse  ifTrue  
[buglab_swap_variables]^return new Node ( Token.IF,  ifTrue, ifFalse, lineno, charno ) ;^485^^^^^481^486^return new Node ( Token.IF, cond, ifTrue, ifFalse, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createIf [RETURN_TYPE] Node   Node cond Node ifTrue Node ifFalse int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  cond  ifFalse  ifTrue  
[buglab_swap_variables]^return new Node ( Token.IF, cond, ifFalse, ifTrue, lineno, charno ) ;^485^^^^^481^486^return new Node ( Token.IF, cond, ifTrue, ifFalse, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createIf [RETURN_TYPE] Node   Node cond Node ifTrue Node ifFalse int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  cond  ifFalse  ifTrue  
[buglab_swap_variables]^return new Node ( Token.IF, cond,  ifFalse, lineno, charno ) ;^485^^^^^481^486^return new Node ( Token.IF, cond, ifTrue, ifFalse, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createIf [RETURN_TYPE] Node   Node cond Node ifTrue Node ifFalse int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  cond  ifFalse  ifTrue  
[buglab_swap_variables]^return new Node ( Token.IF, cond, ifTrue,  lineno, charno ) ;^485^^^^^481^486^return new Node ( Token.IF, cond, ifTrue, ifFalse, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createIf [RETURN_TYPE] Node   Node cond Node ifTrue Node ifFalse int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  cond  ifFalse  ifTrue  
[buglab_swap_variables]^return new Node ( Token.IF, cond, ifTrue, ifFalse, charno, lineno ) ;^485^^^^^481^486^return new Node ( Token.IF, cond, ifTrue, ifFalse, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createIf [RETURN_TYPE] Node   Node cond Node ifTrue Node ifFalse int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  cond  ifFalse  ifTrue  
[buglab_swap_variables]^return new Node ( Token.IF, cond, ifTrue, ifFalse,  charno ) ;^485^^^^^481^486^return new Node ( Token.IF, cond, ifTrue, ifFalse, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createIf [RETURN_TYPE] Node   Node cond Node ifTrue Node ifFalse int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  cond  ifFalse  ifTrue  
[buglab_swap_variables]^return new Node ( Token.IF, cond, ifTrue, ifFalse, lineno ) ;^485^^^^^481^486^return new Node ( Token.IF, cond, ifTrue, ifFalse, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createIf [RETURN_TYPE] Node   Node cond Node ifTrue Node ifFalse int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  cond  ifFalse  ifTrue  
[buglab_swap_variables]^return new Node ( lineno, cond, ifTrue, ifFalse, Token.IF, charno ) ;^485^^^^^481^486^return new Node ( Token.IF, cond, ifTrue, ifFalse, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createIf [RETURN_TYPE] Node   Node cond Node ifTrue Node ifFalse int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  cond  ifFalse  ifTrue  
[buglab_swap_variables]^return new Node (  cond, ifTrue, ifFalse, lineno, charno ) ;^485^^^^^481^486^return new Node ( Token.IF, cond, ifTrue, ifFalse, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createIf [RETURN_TYPE] Node   Node cond Node ifTrue Node ifFalse int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  cond  ifFalse  ifTrue  
[buglab_swap_variables]^return new Node ( Token.IF, ifFalse, ifTrue, cond, lineno, charno ) ;^485^^^^^481^486^return new Node ( Token.IF, cond, ifTrue, ifFalse, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createIf [RETURN_TYPE] Node   Node cond Node ifTrue Node ifFalse int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  cond  ifFalse  ifTrue  
[buglab_swap_variables]^return new Node ( Token.IF, lineno, ifTrue, ifFalse, cond, charno ) ;^485^^^^^481^486^return new Node ( Token.IF, cond, ifTrue, ifFalse, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createIf [RETURN_TYPE] Node   Node cond Node ifTrue Node ifFalse int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  cond  ifFalse  ifTrue  
[buglab_swap_variables]^return new Node ( Token.IF, charno, ifTrue, ifFalse, lineno, cond ) ;^485^^^^^481^486^return new Node ( Token.IF, cond, ifTrue, ifFalse, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createIf [RETURN_TYPE] Node   Node cond Node ifTrue Node ifFalse int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  cond  ifFalse  ifTrue  
[buglab_swap_variables]^return new Node ( ifTrue, cond, Token.IF, ifFalse, lineno, charno ) ;^485^^^^^481^486^return new Node ( Token.IF, cond, ifTrue, ifFalse, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createIf [RETURN_TYPE] Node   Node cond Node ifTrue Node ifFalse int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  cond  ifFalse  ifTrue  
[buglab_swap_variables]^return new Node ( Token.HOOK, ifFalse, ifTrue, cond, lineno, charno ) ;^491^^^^^488^492^return new Node ( Token.HOOK, cond, ifTrue, ifFalse, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createCondExpr [RETURN_TYPE] Node   Node cond Node ifTrue Node ifFalse int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  cond  ifFalse  ifTrue  
[buglab_swap_variables]^return new Node ( Token.HOOK,  ifTrue, ifFalse, lineno, charno ) ;^491^^^^^488^492^return new Node ( Token.HOOK, cond, ifTrue, ifFalse, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createCondExpr [RETURN_TYPE] Node   Node cond Node ifTrue Node ifFalse int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  cond  ifFalse  ifTrue  
[buglab_swap_variables]^return new Node ( Token.HOOK, ifTrue, cond, ifFalse, lineno, charno ) ;^491^^^^^488^492^return new Node ( Token.HOOK, cond, ifTrue, ifFalse, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createCondExpr [RETURN_TYPE] Node   Node cond Node ifTrue Node ifFalse int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  cond  ifFalse  ifTrue  
[buglab_swap_variables]^return new Node ( Token.HOOK, cond,  ifFalse, lineno, charno ) ;^491^^^^^488^492^return new Node ( Token.HOOK, cond, ifTrue, ifFalse, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createCondExpr [RETURN_TYPE] Node   Node cond Node ifTrue Node ifFalse int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  cond  ifFalse  ifTrue  
[buglab_swap_variables]^return new Node ( Token.HOOK, cond, ifTrue,  lineno, charno ) ;^491^^^^^488^492^return new Node ( Token.HOOK, cond, ifTrue, ifFalse, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createCondExpr [RETURN_TYPE] Node   Node cond Node ifTrue Node ifFalse int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  cond  ifFalse  ifTrue  
[buglab_swap_variables]^return new Node ( Token.HOOK, cond, ifTrue, ifFalse, charno, lineno ) ;^491^^^^^488^492^return new Node ( Token.HOOK, cond, ifTrue, ifFalse, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createCondExpr [RETURN_TYPE] Node   Node cond Node ifTrue Node ifFalse int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  cond  ifFalse  ifTrue  
[buglab_swap_variables]^return new Node ( Token.HOOK, cond, ifTrue, ifFalse,  charno ) ;^491^^^^^488^492^return new Node ( Token.HOOK, cond, ifTrue, ifFalse, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createCondExpr [RETURN_TYPE] Node   Node cond Node ifTrue Node ifFalse int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  cond  ifFalse  ifTrue  
[buglab_swap_variables]^return new Node ( Token.HOOK, charno, ifTrue, ifFalse, lineno, cond ) ;^491^^^^^488^492^return new Node ( Token.HOOK, cond, ifTrue, ifFalse, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createCondExpr [RETURN_TYPE] Node   Node cond Node ifTrue Node ifFalse int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  cond  ifFalse  ifTrue  
[buglab_swap_variables]^return new Node ( Token.HOOK, cond, ifTrue, ifFalse, lineno ) ;^491^^^^^488^492^return new Node ( Token.HOOK, cond, ifTrue, ifFalse, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createCondExpr [RETURN_TYPE] Node   Node cond Node ifTrue Node ifFalse int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  cond  ifFalse  ifTrue  
[buglab_swap_variables]^return new Node ( ifFalse, cond, ifTrue, Token.HOOK, lineno, charno ) ;^491^^^^^488^492^return new Node ( Token.HOOK, cond, ifTrue, ifFalse, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createCondExpr [RETURN_TYPE] Node   Node cond Node ifTrue Node ifFalse int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  cond  ifFalse  ifTrue  
[buglab_swap_variables]^return new Node (  cond, ifTrue, ifFalse, lineno, charno ) ;^491^^^^^488^492^return new Node ( Token.HOOK, cond, ifTrue, ifFalse, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createCondExpr [RETURN_TYPE] Node   Node cond Node ifTrue Node ifFalse int lineno int charno [VARIABLES] boolean  int  charno  lineno  Parser  parser  Node  cond  ifFalse  ifTrue  
[buglab_swap_variables]^return new Node ( lineno, child, nodeType, charno ) ;^499^^^^^497^500^return new Node ( nodeType, child, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createUnary [RETURN_TYPE] Node   int nodeType Node child int lineno int charno [VARIABLES] boolean  int  charno  lineno  nodeType  Parser  parser  Node  child  
[buglab_swap_variables]^return new Node (  child, lineno, charno ) ;^499^^^^^497^500^return new Node ( nodeType, child, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createUnary [RETURN_TYPE] Node   int nodeType Node child int lineno int charno [VARIABLES] boolean  int  charno  lineno  nodeType  Parser  parser  Node  child  
[buglab_swap_variables]^return new Node ( nodeType, charno, lineno, child ) ;^499^^^^^497^500^return new Node ( nodeType, child, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createUnary [RETURN_TYPE] Node   int nodeType Node child int lineno int charno [VARIABLES] boolean  int  charno  lineno  nodeType  Parser  parser  Node  child  
[buglab_swap_variables]^return new Node ( nodeType,  lineno, charno ) ;^499^^^^^497^500^return new Node ( nodeType, child, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createUnary [RETURN_TYPE] Node   int nodeType Node child int lineno int charno [VARIABLES] boolean  int  charno  lineno  nodeType  Parser  parser  Node  child  
[buglab_swap_variables]^return new Node ( nodeType, child,  charno ) ;^499^^^^^497^500^return new Node ( nodeType, child, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createUnary [RETURN_TYPE] Node   int nodeType Node child int lineno int charno [VARIABLES] boolean  int  charno  lineno  nodeType  Parser  parser  Node  child  
[buglab_swap_variables]^return new Node ( nodeType, child, charno, lineno ) ;^499^^^^^497^500^return new Node ( nodeType, child, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createUnary [RETURN_TYPE] Node   int nodeType Node child int lineno int charno [VARIABLES] boolean  int  charno  lineno  nodeType  Parser  parser  Node  child  
[buglab_swap_variables]^return new Node ( nodeType, child, lineno ) ;^499^^^^^497^500^return new Node ( nodeType, child, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createUnary [RETURN_TYPE] Node   int nodeType Node child int lineno int charno [VARIABLES] boolean  int  charno  lineno  nodeType  Parser  parser  Node  child  
[buglab_swap_variables]^return new Node ( charno, child, lineno, nodeType ) ;^499^^^^^497^500^return new Node ( nodeType, child, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createUnary [RETURN_TYPE] Node   int nodeType Node child int lineno int charno [VARIABLES] boolean  int  charno  lineno  nodeType  Parser  parser  Node  child  
[buglab_swap_variables]^return new Node ( nodeType, lineno, child, charno ) ;^499^^^^^497^500^return new Node ( nodeType, child, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createUnary [RETURN_TYPE] Node   int nodeType Node child int lineno int charno [VARIABLES] boolean  int  charno  lineno  nodeType  Parser  parser  Node  child  
[buglab_swap_variables]^} else if  ( Token.GETPROP.getType (  )  == child )  {^512^^^^^502^525^} else if  ( child.getType (  )  == Token.GETPROP )  {^[CLASS] IRFactory  [METHOD] createCallOrNew [RETURN_TYPE] Node   int nodeType Node child int lineno int charno [VARIABLES] String  name  boolean  int  charno  lineno  nodeType  type  Parser  parser  Node  child  node  
[buglab_swap_variables]^Node node = new Node ( charno, child, lineno, nodeType ) ;^518^^^^^502^525^Node node = new Node ( nodeType, child, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createCallOrNew [RETURN_TYPE] Node   int nodeType Node child int lineno int charno [VARIABLES] String  name  boolean  int  charno  lineno  nodeType  type  Parser  parser  Node  child  node  
[buglab_swap_variables]^Node node = new Node (  child, lineno, charno ) ;^518^^^^^502^525^Node node = new Node ( nodeType, child, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createCallOrNew [RETURN_TYPE] Node   int nodeType Node child int lineno int charno [VARIABLES] String  name  boolean  int  charno  lineno  nodeType  type  Parser  parser  Node  child  node  
[buglab_swap_variables]^Node node = new Node ( child, nodeType, lineno, charno ) ;^518^^^^^502^525^Node node = new Node ( nodeType, child, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createCallOrNew [RETURN_TYPE] Node   int nodeType Node child int lineno int charno [VARIABLES] String  name  boolean  int  charno  lineno  nodeType  type  Parser  parser  Node  child  node  
[buglab_swap_variables]^Node node = new Node ( nodeType,  lineno, charno ) ;^518^^^^^502^525^Node node = new Node ( nodeType, child, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createCallOrNew [RETURN_TYPE] Node   int nodeType Node child int lineno int charno [VARIABLES] String  name  boolean  int  charno  lineno  nodeType  type  Parser  parser  Node  child  node  
[buglab_swap_variables]^Node node = new Node ( nodeType, child, charno, lineno ) ;^518^^^^^502^525^Node node = new Node ( nodeType, child, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createCallOrNew [RETURN_TYPE] Node   int nodeType Node child int lineno int charno [VARIABLES] String  name  boolean  int  charno  lineno  nodeType  type  Parser  parser  Node  child  node  
[buglab_swap_variables]^Node node = new Node ( nodeType, child,  charno ) ;^518^^^^^502^525^Node node = new Node ( nodeType, child, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createCallOrNew [RETURN_TYPE] Node   int nodeType Node child int lineno int charno [VARIABLES] String  name  boolean  int  charno  lineno  nodeType  type  Parser  parser  Node  child  node  
[buglab_swap_variables]^Node node = new Node ( nodeType, child, lineno ) ;^518^^^^^502^525^Node node = new Node ( nodeType, child, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createCallOrNew [RETURN_TYPE] Node   int nodeType Node child int lineno int charno [VARIABLES] String  name  boolean  int  charno  lineno  nodeType  type  Parser  parser  Node  child  node  
[buglab_swap_variables]^node.putIntProp ( Node.SPECIALCALL_PROP ) ;^522^^^^^502^525^node.putIntProp ( Node.SPECIALCALL_PROP, type ) ;^[CLASS] IRFactory  [METHOD] createCallOrNew [RETURN_TYPE] Node   int nodeType Node child int lineno int charno [VARIABLES] String  name  boolean  int  charno  lineno  nodeType  type  Parser  parser  Node  child  node  
[buglab_swap_variables]^if  ( Token.DEC == nodeType )  {^533^^^^^529^556^if  ( nodeType == Token.DEC )  {^[CLASS] IRFactory  [METHOD] createIncDec [RETURN_TYPE] Node   int nodeType boolean post Node child int lineno int charno [VARIABLES] boolean  post  String  msg  int  charno  childType  lineno  nodeType  Parser  parser  Node  child  n  
[buglab_swap_variables]^Node n = new Node ( charno, child, lineno, nodeType ) ;^550^^^^^529^556^Node n = new Node ( nodeType, child, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createIncDec [RETURN_TYPE] Node   int nodeType boolean post Node child int lineno int charno [VARIABLES] boolean  post  String  msg  int  charno  childType  lineno  nodeType  Parser  parser  Node  child  n  
[buglab_swap_variables]^Node n = new Node (  child, lineno, charno ) ;^550^^^^^529^556^Node n = new Node ( nodeType, child, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createIncDec [RETURN_TYPE] Node   int nodeType boolean post Node child int lineno int charno [VARIABLES] boolean  post  String  msg  int  charno  childType  lineno  nodeType  Parser  parser  Node  child  n  
[buglab_swap_variables]^Node n = new Node ( nodeType, charno, lineno, child ) ;^550^^^^^529^556^Node n = new Node ( nodeType, child, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createIncDec [RETURN_TYPE] Node   int nodeType boolean post Node child int lineno int charno [VARIABLES] boolean  post  String  msg  int  charno  childType  lineno  nodeType  Parser  parser  Node  child  n  
[buglab_swap_variables]^Node n = new Node ( nodeType,  lineno, charno ) ;^550^^^^^529^556^Node n = new Node ( nodeType, child, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createIncDec [RETURN_TYPE] Node   int nodeType boolean post Node child int lineno int charno [VARIABLES] boolean  post  String  msg  int  charno  childType  lineno  nodeType  Parser  parser  Node  child  n  
[buglab_swap_variables]^Node n = new Node ( nodeType, child, charno, lineno ) ;^550^^^^^529^556^Node n = new Node ( nodeType, child, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createIncDec [RETURN_TYPE] Node   int nodeType boolean post Node child int lineno int charno [VARIABLES] boolean  post  String  msg  int  charno  childType  lineno  nodeType  Parser  parser  Node  child  n  
[buglab_swap_variables]^Node n = new Node ( nodeType, child,  charno ) ;^550^^^^^529^556^Node n = new Node ( nodeType, child, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createIncDec [RETURN_TYPE] Node   int nodeType boolean post Node child int lineno int charno [VARIABLES] boolean  post  String  msg  int  charno  childType  lineno  nodeType  Parser  parser  Node  child  n  
[buglab_swap_variables]^Node n = new Node ( nodeType, child, lineno ) ;^550^^^^^529^556^Node n = new Node ( nodeType, child, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createIncDec [RETURN_TYPE] Node   int nodeType boolean post Node child int lineno int charno [VARIABLES] boolean  post  String  msg  int  charno  childType  lineno  nodeType  Parser  parser  Node  child  n  
[buglab_swap_variables]^Node n = new Node ( child, nodeType, lineno, charno ) ;^550^^^^^529^556^Node n = new Node ( nodeType, child, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createIncDec [RETURN_TYPE] Node   int nodeType boolean post Node child int lineno int charno [VARIABLES] boolean  post  String  msg  int  charno  childType  lineno  nodeType  Parser  parser  Node  child  n  
[buglab_swap_variables]^Node n = new Node ( lineno, child, nodeType, charno ) ;^550^^^^^529^556^Node n = new Node ( nodeType, child, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createIncDec [RETURN_TYPE] Node   int nodeType boolean post Node child int lineno int charno [VARIABLES] boolean  post  String  msg  int  charno  childType  lineno  nodeType  Parser  parser  Node  child  n  
[buglab_swap_variables]^n.putIntProp ( Node.INCRDECR_PROP ? 1 : 0 ) ;^551^^^^^529^556^n.putIntProp ( Node.INCRDECR_PROP, post ? 1 : 0 ) ;^[CLASS] IRFactory  [METHOD] createIncDec [RETURN_TYPE] Node   int nodeType boolean post Node child int lineno int charno [VARIABLES] boolean  post  String  msg  int  charno  childType  lineno  nodeType  Parser  parser  Node  child  n  
[buglab_swap_variables]^if  ( name == null && memberTypeFlags == 0 )  {^562^^^^^558^581^if  ( namespace == null && memberTypeFlags == 0 )  {^[CLASS] IRFactory  [METHOD] createPropertyGet [RETURN_TYPE] Node   Node target String namespace String name int memberTypeFlags int dotLineno int dotCharno int nameLineno int nameCharno [VARIABLES] String  name  namespace  boolean  int  dotCharno  dotLineno  memberTypeFlags  nameCharno  nameLineno  Parser  parser  Node  elem  ref  target  
[buglab_swap_variables]^return createName ( nameCharno, nameLineno, name ) ;^564^^^^^558^581^return createName ( name, nameLineno, nameCharno ) ;^[CLASS] IRFactory  [METHOD] createPropertyGet [RETURN_TYPE] Node   Node target String namespace String name int memberTypeFlags int dotLineno int dotCharno int nameLineno int nameCharno [VARIABLES] String  name  namespace  boolean  int  dotCharno  dotLineno  memberTypeFlags  nameCharno  nameLineno  Parser  parser  Node  elem  ref  target  
[buglab_swap_variables]^return createName (  nameLineno, nameCharno ) ;^564^^^^^558^581^return createName ( name, nameLineno, nameCharno ) ;^[CLASS] IRFactory  [METHOD] createPropertyGet [RETURN_TYPE] Node   Node target String namespace String name int memberTypeFlags int dotLineno int dotCharno int nameLineno int nameCharno [VARIABLES] String  name  namespace  boolean  int  dotCharno  dotLineno  memberTypeFlags  nameCharno  nameLineno  Parser  parser  Node  elem  ref  target  
[buglab_swap_variables]^return createName ( name, nameCharno, nameLineno ) ;^564^^^^^558^581^return createName ( name, nameLineno, nameCharno ) ;^[CLASS] IRFactory  [METHOD] createPropertyGet [RETURN_TYPE] Node   Node target String namespace String name int memberTypeFlags int dotLineno int dotCharno int nameLineno int nameCharno [VARIABLES] String  name  namespace  boolean  int  dotCharno  dotLineno  memberTypeFlags  nameCharno  nameLineno  Parser  parser  Node  elem  ref  target  
[buglab_swap_variables]^return createName ( name,  nameCharno ) ;^564^^^^^558^581^return createName ( name, nameLineno, nameCharno ) ;^[CLASS] IRFactory  [METHOD] createPropertyGet [RETURN_TYPE] Node   Node target String namespace String name int memberTypeFlags int dotLineno int dotCharno int nameLineno int nameCharno [VARIABLES] String  name  namespace  boolean  int  dotCharno  dotLineno  memberTypeFlags  nameCharno  nameLineno  Parser  parser  Node  elem  ref  target  
[buglab_swap_variables]^return createName ( name, nameLineno ) ;^564^^^^^558^581^return createName ( name, nameLineno, nameCharno ) ;^[CLASS] IRFactory  [METHOD] createPropertyGet [RETURN_TYPE] Node   Node target String namespace String name int memberTypeFlags int dotLineno int dotCharno int nameLineno int nameCharno [VARIABLES] String  name  namespace  boolean  int  dotCharno  dotLineno  memberTypeFlags  nameCharno  nameLineno  Parser  parser  Node  elem  ref  target  
[buglab_swap_variables]^return createName ( nameLineno, name, nameCharno ) ;^564^^^^^558^581^return createName ( name, nameLineno, nameCharno ) ;^[CLASS] IRFactory  [METHOD] createPropertyGet [RETURN_TYPE] Node   Node target String namespace String name int memberTypeFlags int dotLineno int dotCharno int nameLineno int nameCharno [VARIABLES] String  name  namespace  boolean  int  dotCharno  dotLineno  memberTypeFlags  nameCharno  nameLineno  Parser  parser  Node  elem  ref  target  
[buglab_swap_variables]^return new Node ( Token.GET_REF, dotCharno, dotLineno, ref ) ;^570^^^^^558^581^return new Node ( Token.GET_REF, ref, dotLineno, dotCharno ) ;^[CLASS] IRFactory  [METHOD] createPropertyGet [RETURN_TYPE] Node   Node target String namespace String name int memberTypeFlags int dotLineno int dotCharno int nameLineno int nameCharno [VARIABLES] String  name  namespace  boolean  int  dotCharno  dotLineno  memberTypeFlags  nameCharno  nameLineno  Parser  parser  Node  elem  ref  target  
[buglab_swap_variables]^return new Node ( Token.GET_REF,  dotLineno, dotCharno ) ;^570^^^^^558^581^return new Node ( Token.GET_REF, ref, dotLineno, dotCharno ) ;^[CLASS] IRFactory  [METHOD] createPropertyGet [RETURN_TYPE] Node   Node target String namespace String name int memberTypeFlags int dotLineno int dotCharno int nameLineno int nameCharno [VARIABLES] String  name  namespace  boolean  int  dotCharno  dotLineno  memberTypeFlags  nameCharno  nameLineno  Parser  parser  Node  elem  ref  target  
[buglab_swap_variables]^return new Node ( Token.GET_REF, dotLineno, ref, dotCharno ) ;^570^^^^^558^581^return new Node ( Token.GET_REF, ref, dotLineno, dotCharno ) ;^[CLASS] IRFactory  [METHOD] createPropertyGet [RETURN_TYPE] Node   Node target String namespace String name int memberTypeFlags int dotLineno int dotCharno int nameLineno int nameCharno [VARIABLES] String  name  namespace  boolean  int  dotCharno  dotLineno  memberTypeFlags  nameCharno  nameLineno  Parser  parser  Node  elem  ref  target  
[buglab_swap_variables]^return new Node ( Token.GET_REF, ref,  dotCharno ) ;^570^^^^^558^581^return new Node ( Token.GET_REF, ref, dotLineno, dotCharno ) ;^[CLASS] IRFactory  [METHOD] createPropertyGet [RETURN_TYPE] Node   Node target String namespace String name int memberTypeFlags int dotLineno int dotCharno int nameLineno int nameCharno [VARIABLES] String  name  namespace  boolean  int  dotCharno  dotLineno  memberTypeFlags  nameCharno  nameLineno  Parser  parser  Node  elem  ref  target  
[buglab_swap_variables]^return new Node ( Token.GET_REF, ref, dotCharno, dotLineno ) ;^570^^^^^558^581^return new Node ( Token.GET_REF, ref, dotLineno, dotCharno ) ;^[CLASS] IRFactory  [METHOD] createPropertyGet [RETURN_TYPE] Node   Node target String namespace String name int memberTypeFlags int dotLineno int dotCharno int nameLineno int nameCharno [VARIABLES] String  name  namespace  boolean  int  dotCharno  dotLineno  memberTypeFlags  nameCharno  nameLineno  Parser  parser  Node  elem  ref  target  
[buglab_swap_variables]^return new Node ( Token.GET_REF, ref, dotLineno ) ;^570^^^^^558^581^return new Node ( Token.GET_REF, ref, dotLineno, dotCharno ) ;^[CLASS] IRFactory  [METHOD] createPropertyGet [RETURN_TYPE] Node   Node target String namespace String name int memberTypeFlags int dotLineno int dotCharno int nameLineno int nameCharno [VARIABLES] String  name  namespace  boolean  int  dotCharno  dotLineno  memberTypeFlags  nameCharno  nameLineno  Parser  parser  Node  elem  ref  target  
[buglab_swap_variables]^return new Node ( dotLineno, ref, Token.GET_REF, dotCharno ) ;^570^^^^^558^581^return new Node ( Token.GET_REF, ref, dotLineno, dotCharno ) ;^[CLASS] IRFactory  [METHOD] createPropertyGet [RETURN_TYPE] Node   Node target String namespace String name int memberTypeFlags int dotLineno int dotCharno int nameLineno int nameCharno [VARIABLES] String  name  namespace  boolean  int  dotCharno  dotLineno  memberTypeFlags  nameCharno  nameLineno  Parser  parser  Node  elem  ref  target  
[buglab_swap_variables]^return new Node (  ref, dotLineno, dotCharno ) ;^570^^^^^558^581^return new Node ( Token.GET_REF, ref, dotLineno, dotCharno ) ;^[CLASS] IRFactory  [METHOD] createPropertyGet [RETURN_TYPE] Node   Node target String namespace String name int memberTypeFlags int dotLineno int dotCharno int nameLineno int nameCharno [VARIABLES] String  name  namespace  boolean  int  dotCharno  dotLineno  memberTypeFlags  nameCharno  nameLineno  Parser  parser  Node  elem  ref  target  
[buglab_swap_variables]^Node ref = new Node ( target, Token.REF_SPECIAL ) ;^568^^^^^558^581^Node ref = new Node ( Token.REF_SPECIAL, target ) ;^[CLASS] IRFactory  [METHOD] createPropertyGet [RETURN_TYPE] Node   Node target String namespace String name int memberTypeFlags int dotLineno int dotCharno int nameLineno int nameCharno [VARIABLES] String  name  namespace  boolean  int  dotCharno  dotLineno  memberTypeFlags  nameCharno  nameLineno  Parser  parser  Node  elem  ref  target  
[buglab_swap_variables]^Node ref = new Node ( Token.REF_SPECIAL ) ;^568^^^^^558^581^Node ref = new Node ( Token.REF_SPECIAL, target ) ;^[CLASS] IRFactory  [METHOD] createPropertyGet [RETURN_TYPE] Node   Node target String namespace String name int memberTypeFlags int dotLineno int dotCharno int nameLineno int nameCharno [VARIABLES] String  name  namespace  boolean  int  dotCharno  dotLineno  memberTypeFlags  nameCharno  nameLineno  Parser  parser  Node  elem  ref  target  
[buglab_swap_variables]^Node ref = new Node (  target ) ;^568^^^^^558^581^Node ref = new Node ( Token.REF_SPECIAL, target ) ;^[CLASS] IRFactory  [METHOD] createPropertyGet [RETURN_TYPE] Node   Node target String namespace String name int memberTypeFlags int dotLineno int dotCharno int nameLineno int nameCharno [VARIABLES] String  name  namespace  boolean  int  dotCharno  dotLineno  memberTypeFlags  nameCharno  nameLineno  Parser  parser  Node  elem  ref  target  
[buglab_swap_variables]^return new Node ( ref, Token.GET_REF, dotLineno, dotCharno ) ;^570^^^^^558^581^return new Node ( Token.GET_REF, ref, dotLineno, dotCharno ) ;^[CLASS] IRFactory  [METHOD] createPropertyGet [RETURN_TYPE] Node   Node target String namespace String name int memberTypeFlags int dotLineno int dotCharno int nameLineno int nameCharno [VARIABLES] String  name  namespace  boolean  int  dotCharno  dotLineno  memberTypeFlags  nameCharno  nameLineno  Parser  parser  Node  elem  ref  target  
[buglab_swap_variables]^return new Node ( dotCharno, ref, dotLineno, Token.GET_REF ) ;^570^^^^^558^581^return new Node ( Token.GET_REF, ref, dotLineno, dotCharno ) ;^[CLASS] IRFactory  [METHOD] createPropertyGet [RETURN_TYPE] Node   Node target String namespace String name int memberTypeFlags int dotLineno int dotCharno int nameLineno int nameCharno [VARIABLES] String  name  namespace  boolean  int  dotCharno  dotLineno  memberTypeFlags  nameCharno  nameLineno  Parser  parser  Node  elem  ref  target  
[buglab_swap_variables]^ref.putProp ( Node.NAME_PROP ) ;^569^^^^^558^581^ref.putProp ( Node.NAME_PROP, name ) ;^[CLASS] IRFactory  [METHOD] createPropertyGet [RETURN_TYPE] Node   Node target String namespace String name int memberTypeFlags int dotLineno int dotCharno int nameLineno int nameCharno [VARIABLES] String  name  namespace  boolean  int  dotCharno  dotLineno  memberTypeFlags  nameCharno  nameLineno  Parser  parser  Node  elem  ref  target  
[buglab_swap_variables]^return new Node ( target, Token.GETPROP, createString ( name, nameLineno, nameCharno ) , dotLineno, dotCharno ) ;^572^573^574^575^^558^581^return new Node ( Token.GETPROP, target, createString ( name, nameLineno, nameCharno ) , dotLineno, dotCharno ) ;^[CLASS] IRFactory  [METHOD] createPropertyGet [RETURN_TYPE] Node   Node target String namespace String name int memberTypeFlags int dotLineno int dotCharno int nameLineno int nameCharno [VARIABLES] String  name  namespace  boolean  int  dotCharno  dotLineno  memberTypeFlags  nameCharno  nameLineno  Parser  parser  Node  elem  ref  target  
[buglab_swap_variables]^return new Node ( Token.GETPROP,  createString ( name, nameLineno, nameCharno ) , dotLineno, dotCharno ) ;^572^573^574^575^^558^581^return new Node ( Token.GETPROP, target, createString ( name, nameLineno, nameCharno ) , dotLineno, dotCharno ) ;^[CLASS] IRFactory  [METHOD] createPropertyGet [RETURN_TYPE] Node   Node target String namespace String name int memberTypeFlags int dotLineno int dotCharno int nameLineno int nameCharno [VARIABLES] String  name  namespace  boolean  int  dotCharno  dotLineno  memberTypeFlags  nameCharno  nameLineno  Parser  parser  Node  elem  ref  target  
[buglab_swap_variables]^return new Node ( name, target, createString ( Token.GETPROP, nameLineno, nameCharno ) , dotLineno, dotCharno ) ;^572^573^574^575^^558^581^return new Node ( Token.GETPROP, target, createString ( name, nameLineno, nameCharno ) , dotLineno, dotCharno ) ;^[CLASS] IRFactory  [METHOD] createPropertyGet [RETURN_TYPE] Node   Node target String namespace String name int memberTypeFlags int dotLineno int dotCharno int nameLineno int nameCharno [VARIABLES] String  name  namespace  boolean  int  dotCharno  dotLineno  memberTypeFlags  nameCharno  nameLineno  Parser  parser  Node  elem  ref  target  
[buglab_swap_variables]^return new Node ( Token.GETPROP, target, createString (  nameLineno, nameCharno ) , dotLineno, dotCharno ) ;^572^573^574^575^^558^581^return new Node ( Token.GETPROP, target, createString ( name, nameLineno, nameCharno ) , dotLineno, dotCharno ) ;^[CLASS] IRFactory  [METHOD] createPropertyGet [RETURN_TYPE] Node   Node target String namespace String name int memberTypeFlags int dotLineno int dotCharno int nameLineno int nameCharno [VARIABLES] String  name  namespace  boolean  int  dotCharno  dotLineno  memberTypeFlags  nameCharno  nameLineno  Parser  parser  Node  elem  ref  target  
[buglab_swap_variables]^return new Node ( Token.GETPROP, target, createString ( name, nameCharno, nameLineno ) , dotLineno, dotCharno ) ;^572^573^574^575^^558^581^return new Node ( Token.GETPROP, target, createString ( name, nameLineno, nameCharno ) , dotLineno, dotCharno ) ;^[CLASS] IRFactory  [METHOD] createPropertyGet [RETURN_TYPE] Node   Node target String namespace String name int memberTypeFlags int dotLineno int dotCharno int nameLineno int nameCharno [VARIABLES] String  name  namespace  boolean  int  dotCharno  dotLineno  memberTypeFlags  nameCharno  nameLineno  Parser  parser  Node  elem  ref  target  
[buglab_swap_variables]^return new Node ( Token.GETPROP, target, createString ( name,  nameCharno ) , dotLineno, dotCharno ) ;^572^573^574^575^^558^581^return new Node ( Token.GETPROP, target, createString ( name, nameLineno, nameCharno ) , dotLineno, dotCharno ) ;^[CLASS] IRFactory  [METHOD] createPropertyGet [RETURN_TYPE] Node   Node target String namespace String name int memberTypeFlags int dotLineno int dotCharno int nameLineno int nameCharno [VARIABLES] String  name  namespace  boolean  int  dotCharno  dotLineno  memberTypeFlags  nameCharno  nameLineno  Parser  parser  Node  elem  ref  target  
[buglab_swap_variables]^return new Node ( Token.GETPROP, target, createString ( nameCharno, nameLineno, name ) , dotLineno, dotCharno ) ;^572^573^574^575^^558^581^return new Node ( Token.GETPROP, target, createString ( name, nameLineno, nameCharno ) , dotLineno, dotCharno ) ;^[CLASS] IRFactory  [METHOD] createPropertyGet [RETURN_TYPE] Node   Node target String namespace String name int memberTypeFlags int dotLineno int dotCharno int nameLineno int nameCharno [VARIABLES] String  name  namespace  boolean  int  dotCharno  dotLineno  memberTypeFlags  nameCharno  nameLineno  Parser  parser  Node  elem  ref  target  
[buglab_swap_variables]^return new Node ( Token.GETPROP, target, createString ( name, nameLineno ) , dotLineno, dotCharno ) ;^572^573^574^575^^558^581^return new Node ( Token.GETPROP, target, createString ( name, nameLineno, nameCharno ) , dotLineno, dotCharno ) ;^[CLASS] IRFactory  [METHOD] createPropertyGet [RETURN_TYPE] Node   Node target String namespace String name int memberTypeFlags int dotLineno int dotCharno int nameLineno int nameCharno [VARIABLES] String  name  namespace  boolean  int  dotCharno  dotLineno  memberTypeFlags  nameCharno  nameLineno  Parser  parser  Node  elem  ref  target  
[buglab_swap_variables]^return new Node ( Token.GETPROP, target, createString ( name, nameLineno, dotLineno ) , nameCharno, dotCharno ) ;^572^573^574^575^^558^581^return new Node ( Token.GETPROP, target, createString ( name, nameLineno, nameCharno ) , dotLineno, dotCharno ) ;^[CLASS] IRFactory  [METHOD] createPropertyGet [RETURN_TYPE] Node   Node target String namespace String name int memberTypeFlags int dotLineno int dotCharno int nameLineno int nameCharno [VARIABLES] String  name  namespace  boolean  int  dotCharno  dotLineno  memberTypeFlags  nameCharno  nameLineno  Parser  parser  Node  elem  ref  target  
[buglab_swap_variables]^return new Node ( Token.GETPROP, target, createString ( name, nameLineno, nameCharno ) ,  dotCharno ) ;^572^573^574^575^^558^581^return new Node ( Token.GETPROP, target, createString ( name, nameLineno, nameCharno ) , dotLineno, dotCharno ) ;^[CLASS] IRFactory  [METHOD] createPropertyGet [RETURN_TYPE] Node   Node target String namespace String name int memberTypeFlags int dotLineno int dotCharno int nameLineno int nameCharno [VARIABLES] String  name  namespace  boolean  int  dotCharno  dotLineno  memberTypeFlags  nameCharno  nameLineno  Parser  parser  Node  elem  ref  target  
[buglab_swap_variables]^return new Node ( Token.GETPROP, target, createString ( name, dotCharno, nameCharno ) , dotLineno, nameLineno ) ;^572^573^574^575^^558^581^return new Node ( Token.GETPROP, target, createString ( name, nameLineno, nameCharno ) , dotLineno, dotCharno ) ;^[CLASS] IRFactory  [METHOD] createPropertyGet [RETURN_TYPE] Node   Node target String namespace String name int memberTypeFlags int dotLineno int dotCharno int nameLineno int nameCharno [VARIABLES] String  name  namespace  boolean  int  dotCharno  dotLineno  memberTypeFlags  nameCharno  nameLineno  Parser  parser  Node  elem  ref  target  
[buglab_swap_variables]^return new Node ( Token.GETPROP, target, createString ( name, nameLineno, nameCharno ) , dotLineno ) ;^572^573^574^575^^558^581^return new Node ( Token.GETPROP, target, createString ( name, nameLineno, nameCharno ) , dotLineno, dotCharno ) ;^[CLASS] IRFactory  [METHOD] createPropertyGet [RETURN_TYPE] Node   Node target String namespace String name int memberTypeFlags int dotLineno int dotCharno int nameLineno int nameCharno [VARIABLES] String  name  namespace  boolean  int  dotCharno  dotLineno  memberTypeFlags  nameCharno  nameLineno  Parser  parser  Node  elem  ref  target  
[buglab_swap_variables]^return new Node ( dotLineno, target, createString ( name, nameLineno, nameCharno ) , Token.GETPROP, dotCharno ) ;^572^573^574^575^^558^581^return new Node ( Token.GETPROP, target, createString ( name, nameLineno, nameCharno ) , dotLineno, dotCharno ) ;^[CLASS] IRFactory  [METHOD] createPropertyGet [RETURN_TYPE] Node   Node target String namespace String name int memberTypeFlags int dotLineno int dotCharno int nameLineno int nameCharno [VARIABLES] String  name  namespace  boolean  int  dotCharno  dotLineno  memberTypeFlags  nameCharno  nameLineno  Parser  parser  Node  elem  ref  target  
[buglab_swap_variables]^return new Node (  target, createString ( name, nameLineno, nameCharno ) , dotLineno, dotCharno ) ;^572^573^574^575^^558^581^return new Node ( Token.GETPROP, target, createString ( name, nameLineno, nameCharno ) , dotLineno, dotCharno ) ;^[CLASS] IRFactory  [METHOD] createPropertyGet [RETURN_TYPE] Node   Node target String namespace String name int memberTypeFlags int dotLineno int dotCharno int nameLineno int nameCharno [VARIABLES] String  name  namespace  boolean  int  dotCharno  dotLineno  memberTypeFlags  nameCharno  nameLineno  Parser  parser  Node  elem  ref  target  
[buglab_swap_variables]^return new Node ( Token.GETPROP, name, createString ( target, nameLineno, nameCharno ) , dotLineno, dotCharno ) ;^572^573^574^575^^558^581^return new Node ( Token.GETPROP, target, createString ( name, nameLineno, nameCharno ) , dotLineno, dotCharno ) ;^[CLASS] IRFactory  [METHOD] createPropertyGet [RETURN_TYPE] Node   Node target String namespace String name int memberTypeFlags int dotLineno int dotCharno int nameLineno int nameCharno [VARIABLES] String  name  namespace  boolean  int  dotCharno  dotLineno  memberTypeFlags  nameCharno  nameLineno  Parser  parser  Node  elem  ref  target  
[buglab_swap_variables]^return new Node ( Token.GETPROP, target, createString ( name, nameLineno, dotCharno ) , dotLineno, nameCharno ) ;^572^573^574^575^^558^581^return new Node ( Token.GETPROP, target, createString ( name, nameLineno, nameCharno ) , dotLineno, dotCharno ) ;^[CLASS] IRFactory  [METHOD] createPropertyGet [RETURN_TYPE] Node   Node target String namespace String name int memberTypeFlags int dotLineno int dotCharno int nameLineno int nameCharno [VARIABLES] String  name  namespace  boolean  int  dotCharno  dotLineno  memberTypeFlags  nameCharno  nameLineno  Parser  parser  Node  elem  ref  target  
[buglab_swap_variables]^return new Node ( dotCharno, target, createString ( name, nameLineno, nameCharno ) , dotLineno, Token.GETPROP ) ;^572^573^574^575^^558^581^return new Node ( Token.GETPROP, target, createString ( name, nameLineno, nameCharno ) , dotLineno, dotCharno ) ;^[CLASS] IRFactory  [METHOD] createPropertyGet [RETURN_TYPE] Node   Node target String namespace String name int memberTypeFlags int dotLineno int dotCharno int nameLineno int nameCharno [VARIABLES] String  name  namespace  boolean  int  dotCharno  dotLineno  memberTypeFlags  nameCharno  nameLineno  Parser  parser  Node  elem  ref  target  
[buglab_swap_variables]^createString ( nameCharno, nameLineno, name ) , dotLineno, dotCharno ) ;^574^575^^^^558^581^createString ( name, nameLineno, nameCharno ) , dotLineno, dotCharno ) ;^[CLASS] IRFactory  [METHOD] createPropertyGet [RETURN_TYPE] Node   Node target String namespace String name int memberTypeFlags int dotLineno int dotCharno int nameLineno int nameCharno [VARIABLES] String  name  namespace  boolean  int  dotCharno  dotLineno  memberTypeFlags  nameCharno  nameLineno  Parser  parser  Node  elem  ref  target  
[buglab_swap_variables]^createString (  nameLineno, nameCharno ) , dotLineno, dotCharno ) ;^574^575^^^^558^581^createString ( name, nameLineno, nameCharno ) , dotLineno, dotCharno ) ;^[CLASS] IRFactory  [METHOD] createPropertyGet [RETURN_TYPE] Node   Node target String namespace String name int memberTypeFlags int dotLineno int dotCharno int nameLineno int nameCharno [VARIABLES] String  name  namespace  boolean  int  dotCharno  dotLineno  memberTypeFlags  nameCharno  nameLineno  Parser  parser  Node  elem  ref  target  
[buglab_swap_variables]^createString ( name, nameCharno, nameLineno ) , dotLineno, dotCharno ) ;^574^575^^^^558^581^createString ( name, nameLineno, nameCharno ) , dotLineno, dotCharno ) ;^[CLASS] IRFactory  [METHOD] createPropertyGet [RETURN_TYPE] Node   Node target String namespace String name int memberTypeFlags int dotLineno int dotCharno int nameLineno int nameCharno [VARIABLES] String  name  namespace  boolean  int  dotCharno  dotLineno  memberTypeFlags  nameCharno  nameLineno  Parser  parser  Node  elem  ref  target  
[buglab_swap_variables]^createString ( name,  nameCharno ) , dotLineno, dotCharno ) ;^574^575^^^^558^581^createString ( name, nameLineno, nameCharno ) , dotLineno, dotCharno ) ;^[CLASS] IRFactory  [METHOD] createPropertyGet [RETURN_TYPE] Node   Node target String namespace String name int memberTypeFlags int dotLineno int dotCharno int nameLineno int nameCharno [VARIABLES] String  name  namespace  boolean  int  dotCharno  dotLineno  memberTypeFlags  nameCharno  nameLineno  Parser  parser  Node  elem  ref  target  
[buglab_swap_variables]^createString ( name, nameLineno ) , dotLineno, dotCharno ) ;^574^575^^^^558^581^createString ( name, nameLineno, nameCharno ) , dotLineno, dotCharno ) ;^[CLASS] IRFactory  [METHOD] createPropertyGet [RETURN_TYPE] Node   Node target String namespace String name int memberTypeFlags int dotLineno int dotCharno int nameLineno int nameCharno [VARIABLES] String  name  namespace  boolean  int  dotCharno  dotLineno  memberTypeFlags  nameCharno  nameLineno  Parser  parser  Node  elem  ref  target  
[buglab_swap_variables]^return new Node ( Token.GETPROP, target, createString ( dotCharno, nameLineno, nameCharno ) , dotLineno, name ) ;^572^573^574^575^^558^581^return new Node ( Token.GETPROP, target, createString ( name, nameLineno, nameCharno ) , dotLineno, dotCharno ) ;^[CLASS] IRFactory  [METHOD] createPropertyGet [RETURN_TYPE] Node   Node target String namespace String name int memberTypeFlags int dotLineno int dotCharno int nameLineno int nameCharno [VARIABLES] String  name  namespace  boolean  int  dotCharno  dotLineno  memberTypeFlags  nameCharno  nameLineno  Parser  parser  Node  elem  ref  target  
[buglab_swap_variables]^return new Node ( Token.GETPROP, target, createString ( name, dotLineno, nameCharno ) , nameLineno, dotCharno ) ;^572^573^574^575^^558^581^return new Node ( Token.GETPROP, target, createString ( name, nameLineno, nameCharno ) , dotLineno, dotCharno ) ;^[CLASS] IRFactory  [METHOD] createPropertyGet [RETURN_TYPE] Node   Node target String namespace String name int memberTypeFlags int dotLineno int dotCharno int nameLineno int nameCharno [VARIABLES] String  name  namespace  boolean  int  dotCharno  dotLineno  memberTypeFlags  nameCharno  nameLineno  Parser  parser  Node  elem  ref  target  
[buglab_swap_variables]^return new Node ( Token.GETPROP, target, createString ( dotLineno, nameLineno, nameCharno ) , name, dotCharno ) ;^572^573^574^575^^558^581^return new Node ( Token.GETPROP, target, createString ( name, nameLineno, nameCharno ) , dotLineno, dotCharno ) ;^[CLASS] IRFactory  [METHOD] createPropertyGet [RETURN_TYPE] Node   Node target String namespace String name int memberTypeFlags int dotLineno int dotCharno int nameLineno int nameCharno [VARIABLES] String  name  namespace  boolean  int  dotCharno  dotLineno  memberTypeFlags  nameCharno  nameLineno  Parser  parser  Node  elem  ref  target  
[buglab_swap_variables]^return createMemberRefGet ( elem, namespace, target, memberTypeFlags, dotLineno, dotCharno ) ;^579^580^^^^558^581^return createMemberRefGet ( target, namespace, elem, memberTypeFlags, dotLineno, dotCharno ) ;^[CLASS] IRFactory  [METHOD] createPropertyGet [RETURN_TYPE] Node   Node target String namespace String name int memberTypeFlags int dotLineno int dotCharno int nameLineno int nameCharno [VARIABLES] String  name  namespace  boolean  int  dotCharno  dotLineno  memberTypeFlags  nameCharno  nameLineno  Parser  parser  Node  elem  ref  target  
[buglab_swap_variables]^return createMemberRefGet (  namespace, elem, memberTypeFlags, dotLineno, dotCharno ) ;^579^580^^^^558^581^return createMemberRefGet ( target, namespace, elem, memberTypeFlags, dotLineno, dotCharno ) ;^[CLASS] IRFactory  [METHOD] createPropertyGet [RETURN_TYPE] Node   Node target String namespace String name int memberTypeFlags int dotLineno int dotCharno int nameLineno int nameCharno [VARIABLES] String  name  namespace  boolean  int  dotCharno  dotLineno  memberTypeFlags  nameCharno  nameLineno  Parser  parser  Node  elem  ref  target  
[buglab_swap_variables]^return createMemberRefGet ( namespace, target, elem, memberTypeFlags, dotLineno, dotCharno ) ;^579^580^^^^558^581^return createMemberRefGet ( target, namespace, elem, memberTypeFlags, dotLineno, dotCharno ) ;^[CLASS] IRFactory  [METHOD] createPropertyGet [RETURN_TYPE] Node   Node target String namespace String name int memberTypeFlags int dotLineno int dotCharno int nameLineno int nameCharno [VARIABLES] String  name  namespace  boolean  int  dotCharno  dotLineno  memberTypeFlags  nameCharno  nameLineno  Parser  parser  Node  elem  ref  target  
[buglab_swap_variables]^return createMemberRefGet ( target,  elem, memberTypeFlags, dotLineno, dotCharno ) ;^579^580^^^^558^581^return createMemberRefGet ( target, namespace, elem, memberTypeFlags, dotLineno, dotCharno ) ;^[CLASS] IRFactory  [METHOD] createPropertyGet [RETURN_TYPE] Node   Node target String namespace String name int memberTypeFlags int dotLineno int dotCharno int nameLineno int nameCharno [VARIABLES] String  name  namespace  boolean  int  dotCharno  dotLineno  memberTypeFlags  nameCharno  nameLineno  Parser  parser  Node  elem  ref  target  
[buglab_swap_variables]^return createMemberRefGet ( target, namespace,  memberTypeFlags, dotLineno, dotCharno ) ;^579^580^^^^558^581^return createMemberRefGet ( target, namespace, elem, memberTypeFlags, dotLineno, dotCharno ) ;^[CLASS] IRFactory  [METHOD] createPropertyGet [RETURN_TYPE] Node   Node target String namespace String name int memberTypeFlags int dotLineno int dotCharno int nameLineno int nameCharno [VARIABLES] String  name  namespace  boolean  int  dotCharno  dotLineno  memberTypeFlags  nameCharno  nameLineno  Parser  parser  Node  elem  ref  target  
[buglab_swap_variables]^return createMemberRefGet ( target, namespace, elem, dotLineno, memberTypeFlags, dotCharno ) ;^579^580^^^^558^581^return createMemberRefGet ( target, namespace, elem, memberTypeFlags, dotLineno, dotCharno ) ;^[CLASS] IRFactory  [METHOD] createPropertyGet [RETURN_TYPE] Node   Node target String namespace String name int memberTypeFlags int dotLineno int dotCharno int nameLineno int nameCharno [VARIABLES] String  name  namespace  boolean  int  dotCharno  dotLineno  memberTypeFlags  nameCharno  nameLineno  Parser  parser  Node  elem  ref  target  
[buglab_swap_variables]^return createMemberRefGet ( target, namespace, elem,  dotLineno, dotCharno ) ;^579^580^^^^558^581^return createMemberRefGet ( target, namespace, elem, memberTypeFlags, dotLineno, dotCharno ) ;^[CLASS] IRFactory  [METHOD] createPropertyGet [RETURN_TYPE] Node   Node target String namespace String name int memberTypeFlags int dotLineno int dotCharno int nameLineno int nameCharno [VARIABLES] String  name  namespace  boolean  int  dotCharno  dotLineno  memberTypeFlags  nameCharno  nameLineno  Parser  parser  Node  elem  ref  target  
[buglab_swap_variables]^return createMemberRefGet ( target, namespace, dotLineno, memberTypeFlags, elem, dotCharno ) ;^579^580^^^^558^581^return createMemberRefGet ( target, namespace, elem, memberTypeFlags, dotLineno, dotCharno ) ;^[CLASS] IRFactory  [METHOD] createPropertyGet [RETURN_TYPE] Node   Node target String namespace String name int memberTypeFlags int dotLineno int dotCharno int nameLineno int nameCharno [VARIABLES] String  name  namespace  boolean  int  dotCharno  dotLineno  memberTypeFlags  nameCharno  nameLineno  Parser  parser  Node  elem  ref  target  
[buglab_swap_variables]^return createMemberRefGet ( target, namespace, elem, memberTypeFlags,  dotCharno ) ;^579^580^^^^558^581^return createMemberRefGet ( target, namespace, elem, memberTypeFlags, dotLineno, dotCharno ) ;^[CLASS] IRFactory  [METHOD] createPropertyGet [RETURN_TYPE] Node   Node target String namespace String name int memberTypeFlags int dotLineno int dotCharno int nameLineno int nameCharno [VARIABLES] String  name  namespace  boolean  int  dotCharno  dotLineno  memberTypeFlags  nameCharno  nameLineno  Parser  parser  Node  elem  ref  target  
[buglab_swap_variables]^return createMemberRefGet ( target, namespace, dotCharno, memberTypeFlags, dotLineno, elem ) ;^579^580^^^^558^581^return createMemberRefGet ( target, namespace, elem, memberTypeFlags, dotLineno, dotCharno ) ;^[CLASS] IRFactory  [METHOD] createPropertyGet [RETURN_TYPE] Node   Node target String namespace String name int memberTypeFlags int dotLineno int dotCharno int nameLineno int nameCharno [VARIABLES] String  name  namespace  boolean  int  dotCharno  dotLineno  memberTypeFlags  nameCharno  nameLineno  Parser  parser  Node  elem  ref  target  
[buglab_swap_variables]^return createMemberRefGet ( target, namespace, elem, memberTypeFlags, dotLineno ) ;^579^580^^^^558^581^return createMemberRefGet ( target, namespace, elem, memberTypeFlags, dotLineno, dotCharno ) ;^[CLASS] IRFactory  [METHOD] createPropertyGet [RETURN_TYPE] Node   Node target String namespace String name int memberTypeFlags int dotLineno int dotCharno int nameLineno int nameCharno [VARIABLES] String  name  namespace  boolean  int  dotCharno  dotLineno  memberTypeFlags  nameCharno  nameLineno  Parser  parser  Node  elem  ref  target  
[buglab_swap_variables]^return createMemberRefGet ( dotCharno, namespace, elem, memberTypeFlags, dotLineno, target ) ;^579^580^^^^558^581^return createMemberRefGet ( target, namespace, elem, memberTypeFlags, dotLineno, dotCharno ) ;^[CLASS] IRFactory  [METHOD] createPropertyGet [RETURN_TYPE] Node   Node target String namespace String name int memberTypeFlags int dotLineno int dotCharno int nameLineno int nameCharno [VARIABLES] String  name  namespace  boolean  int  dotCharno  dotLineno  memberTypeFlags  nameCharno  nameLineno  Parser  parser  Node  elem  ref  target  
[buglab_swap_variables]^return createMemberRefGet ( target, dotLineno, elem, memberTypeFlags, namespace, dotCharno ) ;^579^580^^^^558^581^return createMemberRefGet ( target, namespace, elem, memberTypeFlags, dotLineno, dotCharno ) ;^[CLASS] IRFactory  [METHOD] createPropertyGet [RETURN_TYPE] Node   Node target String namespace String name int memberTypeFlags int dotLineno int dotCharno int nameLineno int nameCharno [VARIABLES] String  name  namespace  boolean  int  dotCharno  dotLineno  memberTypeFlags  nameCharno  nameLineno  Parser  parser  Node  elem  ref  target  
[buglab_swap_variables]^return createMemberRefGet ( target, namespace, elem, memberTypeFlags, dotCharno, dotLineno ) ;^579^580^^^^558^581^return createMemberRefGet ( target, namespace, elem, memberTypeFlags, dotLineno, dotCharno ) ;^[CLASS] IRFactory  [METHOD] createPropertyGet [RETURN_TYPE] Node   Node target String namespace String name int memberTypeFlags int dotLineno int dotCharno int nameLineno int nameCharno [VARIABLES] String  name  namespace  boolean  int  dotCharno  dotLineno  memberTypeFlags  nameCharno  nameLineno  Parser  parser  Node  elem  ref  target  
[buglab_swap_variables]^return new Node ( Token.GETELEM, elem, target, lineno, charno ) ;^592^^^^^583^596^return new Node ( Token.GETELEM, target, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createElementGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  target  
[buglab_swap_variables]^return new Node ( Token.GETELEM,  elem, lineno, charno ) ;^592^^^^^583^596^return new Node ( Token.GETELEM, target, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createElementGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  target  
[buglab_swap_variables]^return new Node ( elem, target, Token.GETELEM, lineno, charno ) ;^592^^^^^583^596^return new Node ( Token.GETELEM, target, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createElementGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  target  
[buglab_swap_variables]^return new Node ( Token.GETELEM, target,  lineno, charno ) ;^592^^^^^583^596^return new Node ( Token.GETELEM, target, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createElementGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  target  
[buglab_swap_variables]^return new Node ( Token.GETELEM, target, elem, charno, lineno ) ;^592^^^^^583^596^return new Node ( Token.GETELEM, target, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createElementGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  target  
[buglab_swap_variables]^return new Node ( Token.GETELEM, target, elem,  charno ) ;^592^^^^^583^596^return new Node ( Token.GETELEM, target, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createElementGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  target  
[buglab_swap_variables]^return new Node ( Token.GETELEM, target, elem, lineno ) ;^592^^^^^583^596^return new Node ( Token.GETELEM, target, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createElementGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  target  
[buglab_swap_variables]^return new Node ( lineno, target, elem, Token.GETELEM, charno ) ;^592^^^^^583^596^return new Node ( Token.GETELEM, target, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createElementGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  target  
[buglab_swap_variables]^return new Node (  target, elem, lineno, charno ) ;^592^^^^^583^596^return new Node ( Token.GETELEM, target, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createElementGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  target  
[buglab_swap_variables]^return new Node ( Token.GETELEM, target, charno, lineno, elem ) ;^592^^^^^583^596^return new Node ( Token.GETELEM, target, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createElementGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  target  
[buglab_swap_variables]^return new Node ( charno, target, elem, lineno, Token.GETELEM ) ;^592^^^^^583^596^return new Node ( Token.GETELEM, target, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createElementGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  target  
[buglab_swap_variables]^return new Node ( target, Token.GETELEM, elem, lineno, charno ) ;^592^^^^^583^596^return new Node ( Token.GETELEM, target, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createElementGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  target  
[buglab_swap_variables]^return new Node ( Token.GETELEM, lineno, elem, target, charno ) ;^592^^^^^583^596^return new Node ( Token.GETELEM, target, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createElementGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  target  
[buglab_swap_variables]^return createMemberRefGet ( elem, namespace, target, memberTypeFlags, lineno, charno ) ;^594^595^^^^583^596^return createMemberRefGet ( target, namespace, elem, memberTypeFlags, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createElementGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  target  
[buglab_swap_variables]^return createMemberRefGet (  namespace, elem, memberTypeFlags, lineno, charno ) ;^594^595^^^^583^596^return createMemberRefGet ( target, namespace, elem, memberTypeFlags, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createElementGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  target  
[buglab_swap_variables]^return createMemberRefGet ( target, charno, elem, memberTypeFlags, lineno, namespace ) ;^594^595^^^^583^596^return createMemberRefGet ( target, namespace, elem, memberTypeFlags, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createElementGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  target  
[buglab_swap_variables]^return createMemberRefGet ( target,  elem, memberTypeFlags, lineno, charno ) ;^594^595^^^^583^596^return createMemberRefGet ( target, namespace, elem, memberTypeFlags, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createElementGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  target  
[buglab_swap_variables]^return createMemberRefGet ( target, namespace, memberTypeFlags, elem, lineno, charno ) ;^594^595^^^^583^596^return createMemberRefGet ( target, namespace, elem, memberTypeFlags, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createElementGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  target  
[buglab_swap_variables]^return createMemberRefGet ( target, namespace,  memberTypeFlags, lineno, charno ) ;^594^595^^^^583^596^return createMemberRefGet ( target, namespace, elem, memberTypeFlags, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createElementGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  target  
[buglab_swap_variables]^return createMemberRefGet ( target, memberTypeFlags, elem, namespace, lineno, charno ) ;^594^595^^^^583^596^return createMemberRefGet ( target, namespace, elem, memberTypeFlags, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createElementGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  target  
[buglab_swap_variables]^return createMemberRefGet ( target, namespace, elem,  lineno, charno ) ;^594^595^^^^583^596^return createMemberRefGet ( target, namespace, elem, memberTypeFlags, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createElementGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  target  
[buglab_swap_variables]^return createMemberRefGet ( target, namespace, elem, memberTypeFlags, charno, lineno ) ;^594^595^^^^583^596^return createMemberRefGet ( target, namespace, elem, memberTypeFlags, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createElementGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  target  
[buglab_swap_variables]^return createMemberRefGet ( target, namespace, elem, memberTypeFlags,  charno ) ;^594^595^^^^583^596^return createMemberRefGet ( target, namespace, elem, memberTypeFlags, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createElementGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  target  
[buglab_swap_variables]^return createMemberRefGet ( target, namespace, elem, charno, lineno, memberTypeFlags ) ;^594^595^^^^583^596^return createMemberRefGet ( target, namespace, elem, memberTypeFlags, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createElementGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  target  
[buglab_swap_variables]^return createMemberRefGet ( target, namespace, elem, memberTypeFlags, lineno ) ;^594^595^^^^583^596^return createMemberRefGet ( target, namespace, elem, memberTypeFlags, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createElementGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  target  
[buglab_swap_variables]^return createMemberRefGet ( namespace, target, elem, memberTypeFlags, lineno, charno ) ;^594^595^^^^583^596^return createMemberRefGet ( target, namespace, elem, memberTypeFlags, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createElementGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  target  
[buglab_swap_variables]^return createMemberRefGet ( target, namespace, elem, lineno, memberTypeFlags, charno ) ;^594^595^^^^583^596^return createMemberRefGet ( target, namespace, elem, memberTypeFlags, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createElementGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  target  
[buglab_swap_variables]^nsNode = createName ( charno, lineno, namespace ) ;^607^^^^^604^608^nsNode = createName ( namespace, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[buglab_swap_variables]^nsNode = createName (  lineno, charno ) ;^607^^^^^604^608^nsNode = createName ( namespace, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[buglab_swap_variables]^nsNode = createName ( lineno, namespace, charno ) ;^607^^^^^604^608^nsNode = createName ( namespace, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[buglab_swap_variables]^nsNode = createName ( namespace,  charno ) ;^607^^^^^604^608^nsNode = createName ( namespace, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[buglab_swap_variables]^nsNode = createName ( namespace, charno, lineno ) ;^607^^^^^604^608^nsNode = createName ( namespace, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[buglab_swap_variables]^nsNode = createName ( namespace, lineno ) ;^607^^^^^604^608^nsNode = createName ( namespace, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[buglab_swap_variables]^nsNode = new Node ( Token.NULL, charno, lineno ) ;^605^^^^^600^629^nsNode = new Node ( Token.NULL, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[buglab_swap_variables]^nsNode = new Node ( Token.NULL,  charno ) ;^605^^^^^600^629^nsNode = new Node ( Token.NULL, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[buglab_swap_variables]^nsNode = new Node ( Token.NULL, lineno ) ;^605^^^^^600^629^nsNode = new Node ( Token.NULL, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[buglab_swap_variables]^nsNode = new Node ( lineno, Token.NULL, charno ) ;^605^^^^^600^629^nsNode = new Node ( Token.NULL, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[buglab_swap_variables]^nsNode = new Node (  lineno, charno ) ;^605^^^^^600^629^nsNode = new Node ( Token.NULL, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[buglab_swap_variables]^nsNode = new Node ( charno, lineno, Token.NULL ) ;^605^^^^^600^629^nsNode = new Node ( Token.NULL, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[buglab_swap_variables]^nsNode = createName ( charno, lineno, namespace ) ;^607^^^^^600^629^nsNode = createName ( namespace, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[buglab_swap_variables]^nsNode = createName (  lineno, charno ) ;^607^^^^^600^629^nsNode = createName ( namespace, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[buglab_swap_variables]^nsNode = createName ( lineno, namespace, charno ) ;^607^^^^^600^629^nsNode = createName ( namespace, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[buglab_swap_variables]^nsNode = createName ( namespace,  charno ) ;^607^^^^^600^629^nsNode = createName ( namespace, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[buglab_swap_variables]^nsNode = createName ( namespace, charno, lineno ) ;^607^^^^^600^629^nsNode = createName ( namespace, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[buglab_swap_variables]^nsNode = createName ( namespace, lineno ) ;^607^^^^^600^629^nsNode = createName ( namespace, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[buglab_swap_variables]^ref = new Node ( Token.REF_NS_MEMBER, elem, nsNode, target, lineno, charno ) ;^621^622^^^^611^624^ref = new Node ( Token.REF_NS_MEMBER, target, nsNode, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[buglab_swap_variables]^ref = new Node ( Token.REF_NS_MEMBER,  nsNode, elem, lineno, charno ) ;^621^622^^^^611^624^ref = new Node ( Token.REF_NS_MEMBER, target, nsNode, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[buglab_swap_variables]^ref = new Node ( Token.REF_NS_MEMBER, nsNode, target, elem, lineno, charno ) ;^621^622^^^^611^624^ref = new Node ( Token.REF_NS_MEMBER, target, nsNode, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[buglab_swap_variables]^ref = new Node ( Token.REF_NS_MEMBER, target,  elem, lineno, charno ) ;^621^622^^^^611^624^ref = new Node ( Token.REF_NS_MEMBER, target, nsNode, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[buglab_swap_variables]^ref = new Node ( Token.REF_NS_MEMBER, target, elem, nsNode, lineno, charno ) ;^621^622^^^^611^624^ref = new Node ( Token.REF_NS_MEMBER, target, nsNode, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[buglab_swap_variables]^ref = new Node ( Token.REF_NS_MEMBER, target, nsNode,  lineno, charno ) ;^621^622^^^^611^624^ref = new Node ( Token.REF_NS_MEMBER, target, nsNode, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[buglab_swap_variables]^ref = new Node ( Token.REF_NS_MEMBER, target, lineno, elem, nsNode, charno ) ;^621^622^^^^611^624^ref = new Node ( Token.REF_NS_MEMBER, target, nsNode, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[buglab_swap_variables]^ref = new Node ( Token.REF_NS_MEMBER, target, nsNode, elem,  charno ) ;^621^622^^^^611^624^ref = new Node ( Token.REF_NS_MEMBER, target, nsNode, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[buglab_swap_variables]^ref = new Node ( Token.REF_NS_MEMBER, target, nsNode, elem, charno, lineno ) ;^621^622^^^^611^624^ref = new Node ( Token.REF_NS_MEMBER, target, nsNode, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[buglab_swap_variables]^ref = new Node ( Token.REF_NS_MEMBER, target, nsNode, elem, lineno ) ;^621^622^^^^611^624^ref = new Node ( Token.REF_NS_MEMBER, target, nsNode, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[buglab_swap_variables]^ref = new Node ( nsNode, target, Token.REF_NS_MEMBER, elem, lineno, charno ) ;^621^622^^^^611^624^ref = new Node ( Token.REF_NS_MEMBER, target, nsNode, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[buglab_swap_variables]^ref = new Node (  target, nsNode, elem, lineno, charno ) ;^621^622^^^^611^624^ref = new Node ( Token.REF_NS_MEMBER, target, nsNode, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[buglab_swap_variables]^ref = new Node ( Token.REF_NS_MEMBER, lineno, nsNode, elem, target, charno ) ;^621^622^^^^611^624^ref = new Node ( Token.REF_NS_MEMBER, target, nsNode, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[buglab_swap_variables]^ref = new Node ( charno, target, nsNode, elem, lineno, Token.REF_NS_MEMBER ) ;^621^622^^^^611^624^ref = new Node ( Token.REF_NS_MEMBER, target, nsNode, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[buglab_swap_variables]^ref = new Node ( Token.REF_MEMBER, elem, target, lineno, charno ) ;^619^^^^^611^624^ref = new Node ( Token.REF_MEMBER, target, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[buglab_swap_variables]^ref = new Node ( Token.REF_MEMBER,  elem, lineno, charno ) ;^619^^^^^611^624^ref = new Node ( Token.REF_MEMBER, target, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[buglab_swap_variables]^ref = new Node ( Token.REF_MEMBER, target,  lineno, charno ) ;^619^^^^^611^624^ref = new Node ( Token.REF_MEMBER, target, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[buglab_swap_variables]^ref = new Node ( Token.REF_MEMBER, lineno, elem, target, charno ) ;^619^^^^^611^624^ref = new Node ( Token.REF_MEMBER, target, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[buglab_swap_variables]^ref = new Node ( Token.REF_MEMBER, target, elem,  charno ) ;^619^^^^^611^624^ref = new Node ( Token.REF_MEMBER, target, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[buglab_swap_variables]^ref = new Node ( Token.REF_MEMBER, target, elem, charno, lineno ) ;^619^^^^^611^624^ref = new Node ( Token.REF_MEMBER, target, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[buglab_swap_variables]^ref = new Node ( Token.REF_MEMBER, target, elem, lineno ) ;^619^^^^^611^624^ref = new Node ( Token.REF_MEMBER, target, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[buglab_swap_variables]^ref = new Node ( lineno, target, elem, Token.REF_MEMBER, charno ) ;^619^^^^^611^624^ref = new Node ( Token.REF_MEMBER, target, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[buglab_swap_variables]^ref = new Node (  target, elem, lineno, charno ) ;^619^^^^^611^624^ref = new Node ( Token.REF_MEMBER, target, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[buglab_swap_variables]^ref = new Node ( Token.REF_MEMBER, target, lineno, elem, charno ) ;^619^^^^^611^624^ref = new Node ( Token.REF_MEMBER, target, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[buglab_swap_variables]^ref = new Node ( target, Token.REF_MEMBER, elem, lineno, charno ) ;^619^^^^^611^624^ref = new Node ( Token.REF_MEMBER, target, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[buglab_swap_variables]^ref = new Node ( Token.REF_MEMBER, target, charno, lineno, elem ) ;^619^^^^^611^624^ref = new Node ( Token.REF_MEMBER, target, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[buglab_swap_variables]^ref = new Node ( target, Token.REF_NS_MEMBER, nsNode, elem, lineno, charno ) ;^621^622^^^^611^624^ref = new Node ( Token.REF_NS_MEMBER, target, nsNode, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[buglab_swap_variables]^ref = new Node ( Token.REF_MEMBER, charno, elem, lineno, target ) ;^619^^^^^611^624^ref = new Node ( Token.REF_MEMBER, target, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[buglab_swap_variables]^ref = new Node ( Token.REF_NS_MEMBER, target, nsNode, lineno, elem, charno ) ;^621^622^^^^611^624^ref = new Node ( Token.REF_NS_MEMBER, target, nsNode, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[buglab_swap_variables]^ref = new Node ( lineno, target, nsNode, elem, Token.REF_NS_MEMBER, charno ) ;^621^622^^^^611^624^ref = new Node ( Token.REF_NS_MEMBER, target, nsNode, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[buglab_swap_variables]^ref = new Node ( Token.REF_NS_NAME, elem, nsNode, lineno, charno ) ;^615^^^^^612^616^ref = new Node ( Token.REF_NS_NAME, nsNode, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[buglab_swap_variables]^ref = new Node ( Token.REF_NS_NAME,  elem, lineno, charno ) ;^615^^^^^612^616^ref = new Node ( Token.REF_NS_NAME, nsNode, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[buglab_swap_variables]^ref = new Node ( Token.REF_NS_NAME, nsNode,  lineno, charno ) ;^615^^^^^612^616^ref = new Node ( Token.REF_NS_NAME, nsNode, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[buglab_swap_variables]^ref = new Node ( Token.REF_NS_NAME, nsNode, elem, charno, lineno ) ;^615^^^^^612^616^ref = new Node ( Token.REF_NS_NAME, nsNode, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[buglab_swap_variables]^ref = new Node ( Token.REF_NS_NAME, nsNode, elem,  charno ) ;^615^^^^^612^616^ref = new Node ( Token.REF_NS_NAME, nsNode, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[buglab_swap_variables]^ref = new Node ( Token.REF_NS_NAME, nsNode, elem, lineno ) ;^615^^^^^612^616^ref = new Node ( Token.REF_NS_NAME, nsNode, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[buglab_swap_variables]^ref = new Node ( nsNode, Token.REF_NS_NAME, elem, lineno, charno ) ;^615^^^^^612^616^ref = new Node ( Token.REF_NS_NAME, nsNode, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[buglab_swap_variables]^ref = new Node (  nsNode, elem, lineno, charno ) ;^615^^^^^612^616^ref = new Node ( Token.REF_NS_NAME, nsNode, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[buglab_swap_variables]^ref = new Node ( Token.REF_NS_NAME, nsNode, charno, lineno, elem ) ;^615^^^^^612^616^ref = new Node ( Token.REF_NS_NAME, nsNode, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[buglab_swap_variables]^ref = new Node ( lineno, nsNode, elem, Token.REF_NS_NAME, charno ) ;^615^^^^^612^616^ref = new Node ( Token.REF_NS_NAME, nsNode, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[buglab_swap_variables]^ref = new Node ( Token.REF_NAME, lineno, elem, charno ) ;^613^^^^^600^629^ref = new Node ( Token.REF_NAME, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[buglab_swap_variables]^ref = new Node ( Token.REF_NAME,  lineno, charno ) ;^613^^^^^600^629^ref = new Node ( Token.REF_NAME, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[buglab_swap_variables]^ref = new Node ( Token.REF_NAME, elem, charno, lineno ) ;^613^^^^^600^629^ref = new Node ( Token.REF_NAME, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[buglab_swap_variables]^ref = new Node ( Token.REF_NAME, elem,  charno ) ;^613^^^^^600^629^ref = new Node ( Token.REF_NAME, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[buglab_swap_variables]^ref = new Node ( Token.REF_NAME, elem, lineno ) ;^613^^^^^600^629^ref = new Node ( Token.REF_NAME, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[buglab_swap_variables]^ref = new Node ( elem, Token.REF_NAME, lineno, charno ) ;^613^^^^^600^629^ref = new Node ( Token.REF_NAME, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[buglab_swap_variables]^ref = new Node (  elem, lineno, charno ) ;^613^^^^^600^629^ref = new Node ( Token.REF_NAME, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[buglab_swap_variables]^ref = new Node ( Token.REF_NAME, charno, lineno, elem ) ;^613^^^^^600^629^ref = new Node ( Token.REF_NAME, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[buglab_swap_variables]^ref = new Node ( lineno, elem, Token.REF_NAME, charno ) ;^613^^^^^600^629^ref = new Node ( Token.REF_NAME, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[buglab_swap_variables]^ref = new Node ( charno, elem, lineno, Token.REF_NAME ) ;^613^^^^^600^629^ref = new Node ( Token.REF_NAME, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[buglab_swap_variables]^ref = new Node ( nsNode, Token.REF_NS_NAME, elem, lineno, charno ) ;^615^^^^^600^629^ref = new Node ( Token.REF_NS_NAME, nsNode, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[buglab_swap_variables]^ref = new Node ( Token.REF_NS_NAME,  elem, lineno, charno ) ;^615^^^^^600^629^ref = new Node ( Token.REF_NS_NAME, nsNode, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[buglab_swap_variables]^ref = new Node ( Token.REF_NS_NAME, elem, nsNode, lineno, charno ) ;^615^^^^^600^629^ref = new Node ( Token.REF_NS_NAME, nsNode, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[buglab_swap_variables]^ref = new Node ( Token.REF_NS_NAME, nsNode,  lineno, charno ) ;^615^^^^^600^629^ref = new Node ( Token.REF_NS_NAME, nsNode, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[buglab_swap_variables]^ref = new Node ( Token.REF_NS_NAME, lineno, elem, nsNode, charno ) ;^615^^^^^600^629^ref = new Node ( Token.REF_NS_NAME, nsNode, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[buglab_swap_variables]^ref = new Node ( Token.REF_NS_NAME, nsNode, elem,  charno ) ;^615^^^^^600^629^ref = new Node ( Token.REF_NS_NAME, nsNode, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[buglab_swap_variables]^ref = new Node ( Token.REF_NS_NAME, nsNode, elem, charno, lineno ) ;^615^^^^^600^629^ref = new Node ( Token.REF_NS_NAME, nsNode, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[buglab_swap_variables]^ref = new Node ( Token.REF_NS_NAME, nsNode, elem, lineno ) ;^615^^^^^600^629^ref = new Node ( Token.REF_NS_NAME, nsNode, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[buglab_swap_variables]^ref = new Node ( elem, nsNode, Token.REF_NS_NAME, lineno, charno ) ;^615^^^^^600^629^ref = new Node ( Token.REF_NS_NAME, nsNode, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[buglab_swap_variables]^ref = new Node (  nsNode, elem, lineno, charno ) ;^615^^^^^600^629^ref = new Node ( Token.REF_NS_NAME, nsNode, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[buglab_swap_variables]^ref = new Node ( Token.REF_NS_NAME, charno, elem, lineno, nsNode ) ;^615^^^^^600^629^ref = new Node ( Token.REF_NS_NAME, nsNode, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[buglab_swap_variables]^ref = new Node ( charno, nsNode, elem, lineno, Token.REF_NS_NAME ) ;^615^^^^^600^629^ref = new Node ( Token.REF_NS_NAME, nsNode, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[buglab_swap_variables]^ref = new Node ( Token.REF_NS_MEMBER, elem, nsNode, target, lineno, charno ) ;^621^622^^^^618^623^ref = new Node ( Token.REF_NS_MEMBER, target, nsNode, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[buglab_swap_variables]^ref = new Node ( Token.REF_NS_MEMBER,  nsNode, elem, lineno, charno ) ;^621^622^^^^618^623^ref = new Node ( Token.REF_NS_MEMBER, target, nsNode, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[buglab_swap_variables]^ref = new Node ( Token.REF_NS_MEMBER, target, lineno, elem, nsNode, charno ) ;^621^622^^^^618^623^ref = new Node ( Token.REF_NS_MEMBER, target, nsNode, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[buglab_swap_variables]^ref = new Node ( Token.REF_NS_MEMBER, target,  elem, lineno, charno ) ;^621^622^^^^618^623^ref = new Node ( Token.REF_NS_MEMBER, target, nsNode, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[buglab_swap_variables]^ref = new Node ( Token.REF_NS_MEMBER, target, nsNode,  lineno, charno ) ;^621^622^^^^618^623^ref = new Node ( Token.REF_NS_MEMBER, target, nsNode, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[buglab_swap_variables]^ref = new Node ( Token.REF_NS_MEMBER, target, nsNode, lineno, elem, charno ) ;^621^622^^^^618^623^ref = new Node ( Token.REF_NS_MEMBER, target, nsNode, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[buglab_swap_variables]^ref = new Node ( Token.REF_NS_MEMBER, target, nsNode, elem,  charno ) ;^621^622^^^^618^623^ref = new Node ( Token.REF_NS_MEMBER, target, nsNode, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[buglab_swap_variables]^ref = new Node ( Token.REF_NS_MEMBER, target, charno, elem, lineno, nsNode ) ;^621^622^^^^618^623^ref = new Node ( Token.REF_NS_MEMBER, target, nsNode, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[buglab_swap_variables]^ref = new Node ( Token.REF_NS_MEMBER, target, nsNode, elem, lineno ) ;^621^622^^^^618^623^ref = new Node ( Token.REF_NS_MEMBER, target, nsNode, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[buglab_swap_variables]^ref = new Node ( lineno, target, nsNode, elem, Token.REF_NS_MEMBER, charno ) ;^621^622^^^^618^623^ref = new Node ( Token.REF_NS_MEMBER, target, nsNode, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[buglab_swap_variables]^ref = new Node (  target, nsNode, elem, lineno, charno ) ;^621^622^^^^618^623^ref = new Node ( Token.REF_NS_MEMBER, target, nsNode, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[buglab_swap_variables]^ref = new Node ( Token.REF_NS_MEMBER, nsNode, target, elem, lineno, charno ) ;^621^622^^^^618^623^ref = new Node ( Token.REF_NS_MEMBER, target, nsNode, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[buglab_swap_variables]^ref = new Node ( Token.REF_NS_MEMBER, target, elem, nsNode, lineno, charno ) ;^621^622^^^^618^623^ref = new Node ( Token.REF_NS_MEMBER, target, nsNode, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[buglab_swap_variables]^ref = new Node ( Token.REF_NS_MEMBER, target, nsNode, elem, charno, lineno ) ;^621^622^^^^618^623^ref = new Node ( Token.REF_NS_MEMBER, target, nsNode, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[buglab_swap_variables]^ref = new Node ( charno, target, nsNode, elem, lineno, Token.REF_NS_MEMBER ) ;^621^622^^^^618^623^ref = new Node ( Token.REF_NS_MEMBER, target, nsNode, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[buglab_swap_variables]^ref = new Node ( Token.REF_MEMBER, charno, elem, lineno, target ) ;^619^^^^^600^629^ref = new Node ( Token.REF_MEMBER, target, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[buglab_swap_variables]^ref = new Node ( Token.REF_MEMBER,  elem, lineno, charno ) ;^619^^^^^600^629^ref = new Node ( Token.REF_MEMBER, target, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[buglab_swap_variables]^ref = new Node ( Token.REF_MEMBER, target, lineno, elem, charno ) ;^619^^^^^600^629^ref = new Node ( Token.REF_MEMBER, target, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[buglab_swap_variables]^ref = new Node ( Token.REF_MEMBER, target,  lineno, charno ) ;^619^^^^^600^629^ref = new Node ( Token.REF_MEMBER, target, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[buglab_swap_variables]^ref = new Node ( Token.REF_MEMBER, lineno, elem, target, charno ) ;^619^^^^^600^629^ref = new Node ( Token.REF_MEMBER, target, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[buglab_swap_variables]^ref = new Node ( Token.REF_MEMBER, target, elem,  charno ) ;^619^^^^^600^629^ref = new Node ( Token.REF_MEMBER, target, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[buglab_swap_variables]^ref = new Node ( Token.REF_MEMBER, target, elem, charno, lineno ) ;^619^^^^^600^629^ref = new Node ( Token.REF_MEMBER, target, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[buglab_swap_variables]^ref = new Node ( Token.REF_MEMBER, target, elem, lineno ) ;^619^^^^^600^629^ref = new Node ( Token.REF_MEMBER, target, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[buglab_swap_variables]^ref = new Node ( elem, target, Token.REF_MEMBER, lineno, charno ) ;^619^^^^^600^629^ref = new Node ( Token.REF_MEMBER, target, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[buglab_swap_variables]^ref = new Node (  target, elem, lineno, charno ) ;^619^^^^^600^629^ref = new Node ( Token.REF_MEMBER, target, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[buglab_swap_variables]^ref = new Node ( target, Token.REF_MEMBER, elem, lineno, charno ) ;^619^^^^^600^629^ref = new Node ( Token.REF_MEMBER, target, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[buglab_swap_variables]^ref = new Node ( Token.REF_MEMBER, target, charno, lineno, elem ) ;^619^^^^^600^629^ref = new Node ( Token.REF_MEMBER, target, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[buglab_swap_variables]^ref = new Node ( charno, target, elem, lineno, Token.REF_MEMBER ) ;^619^^^^^600^629^ref = new Node ( Token.REF_MEMBER, target, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[buglab_swap_variables]^ref = new Node ( Token.REF_MEMBER, elem, target, lineno, charno ) ;^619^^^^^600^629^ref = new Node ( Token.REF_MEMBER, target, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[buglab_swap_variables]^ref = new Node ( Token.REF_NS_MEMBER, nsNode, target, elem, lineno, charno ) ;^621^622^^^^600^629^ref = new Node ( Token.REF_NS_MEMBER, target, nsNode, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[buglab_swap_variables]^ref = new Node ( Token.REF_NS_MEMBER,  nsNode, elem, lineno, charno ) ;^621^622^^^^600^629^ref = new Node ( Token.REF_NS_MEMBER, target, nsNode, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[buglab_swap_variables]^ref = new Node ( Token.REF_NS_MEMBER, target, lineno, elem, nsNode, charno ) ;^621^622^^^^600^629^ref = new Node ( Token.REF_NS_MEMBER, target, nsNode, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[buglab_swap_variables]^ref = new Node ( Token.REF_NS_MEMBER, target,  elem, lineno, charno ) ;^621^622^^^^600^629^ref = new Node ( Token.REF_NS_MEMBER, target, nsNode, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[buglab_swap_variables]^ref = new Node ( Token.REF_NS_MEMBER, elem, nsNode, target, lineno, charno ) ;^621^622^^^^600^629^ref = new Node ( Token.REF_NS_MEMBER, target, nsNode, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[buglab_swap_variables]^ref = new Node ( Token.REF_NS_MEMBER, target, nsNode,  lineno, charno ) ;^621^622^^^^600^629^ref = new Node ( Token.REF_NS_MEMBER, target, nsNode, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[buglab_swap_variables]^ref = new Node ( Token.REF_NS_MEMBER, target, nsNode, elem, charno, lineno ) ;^621^622^^^^600^629^ref = new Node ( Token.REF_NS_MEMBER, target, nsNode, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[buglab_swap_variables]^ref = new Node ( Token.REF_NS_MEMBER, target, nsNode, elem,  charno ) ;^621^622^^^^600^629^ref = new Node ( Token.REF_NS_MEMBER, target, nsNode, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[buglab_swap_variables]^ref = new Node ( Token.REF_NS_MEMBER, target, nsNode, elem, lineno ) ;^621^622^^^^600^629^ref = new Node ( Token.REF_NS_MEMBER, target, nsNode, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[buglab_swap_variables]^ref = new Node ( charno, target, nsNode, elem, lineno, Token.REF_NS_MEMBER ) ;^621^622^^^^600^629^ref = new Node ( Token.REF_NS_MEMBER, target, nsNode, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[buglab_swap_variables]^ref = new Node (  target, nsNode, elem, lineno, charno ) ;^621^622^^^^600^629^ref = new Node ( Token.REF_NS_MEMBER, target, nsNode, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[buglab_swap_variables]^ref = new Node ( Token.REF_NS_NAME, nsNode, charno, lineno, elem ) ;^615^^^^^600^629^ref = new Node ( Token.REF_NS_NAME, nsNode, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[buglab_swap_variables]^ref = new Node ( target, Token.REF_NS_MEMBER, nsNode, elem, lineno, charno ) ;^621^622^^^^600^629^ref = new Node ( Token.REF_NS_MEMBER, target, nsNode, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[buglab_swap_variables]^ref = new Node ( Token.REF_NS_MEMBER, target, elem, nsNode, lineno, charno ) ;^621^622^^^^600^629^ref = new Node ( Token.REF_NS_MEMBER, target, nsNode, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[buglab_swap_variables]^ref = new Node ( elem, target, nsNode, Token.REF_NS_MEMBER, lineno, charno ) ;^621^622^^^^600^629^ref = new Node ( Token.REF_NS_MEMBER, target, nsNode, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[buglab_swap_variables]^ref = new Node ( Token.REF_NS_MEMBER, lineno, nsNode, elem, target, charno ) ;^621^622^^^^600^629^ref = new Node ( Token.REF_NS_MEMBER, target, nsNode, elem, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[buglab_swap_variables]^ref.putIntProp ( Node.MEMBER_TYPE_PROP ) ;^626^^^^^600^629^ref.putIntProp ( Node.MEMBER_TYPE_PROP, memberTypeFlags ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[buglab_swap_variables]^return new Node ( Token.GET_REF, charno, lineno, ref ) ;^628^^^^^600^629^return new Node ( Token.GET_REF, ref, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[buglab_swap_variables]^return new Node ( Token.GET_REF,  lineno, charno ) ;^628^^^^^600^629^return new Node ( Token.GET_REF, ref, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[buglab_swap_variables]^return new Node ( Token.GET_REF, ref, charno, lineno ) ;^628^^^^^600^629^return new Node ( Token.GET_REF, ref, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[buglab_swap_variables]^return new Node ( Token.GET_REF, ref,  charno ) ;^628^^^^^600^629^return new Node ( Token.GET_REF, ref, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[buglab_swap_variables]^return new Node ( Token.GET_REF, ref, lineno ) ;^628^^^^^600^629^return new Node ( Token.GET_REF, ref, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[buglab_swap_variables]^return new Node ( lineno, ref, Token.GET_REF, charno ) ;^628^^^^^600^629^return new Node ( Token.GET_REF, ref, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[buglab_swap_variables]^return new Node (  ref, lineno, charno ) ;^628^^^^^600^629^return new Node ( Token.GET_REF, ref, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[buglab_swap_variables]^return new Node ( ref, Token.GET_REF, lineno, charno ) ;^628^^^^^600^629^return new Node ( Token.GET_REF, ref, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createMemberRefGet [RETURN_TYPE] Node   Node target String namespace Node elem int memberTypeFlags int lineno int charno [VARIABLES] String  namespace  boolean  int  charno  lineno  memberTypeFlags  Parser  parser  Node  elem  nsNode  ref  target  
[buglab_swap_variables]^return new Node ( right, left, nodeType, lineno, charno ) ;^651^^^^^634^652^return new Node ( nodeType, left, right, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createBinary [RETURN_TYPE] Node   int nodeType Node left Node right int lineno int charno [VARIABLES] boolean  int  charno  lineno  nodeType  Parser  parser  Node  idNode  left  right  temp  
[buglab_swap_variables]^return new Node (  left, right, lineno, charno ) ;^651^^^^^634^652^return new Node ( nodeType, left, right, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createBinary [RETURN_TYPE] Node   int nodeType Node left Node right int lineno int charno [VARIABLES] boolean  int  charno  lineno  nodeType  Parser  parser  Node  idNode  left  right  temp  
[buglab_swap_variables]^return new Node ( left, nodeType, right, lineno, charno ) ;^651^^^^^634^652^return new Node ( nodeType, left, right, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createBinary [RETURN_TYPE] Node   int nodeType Node left Node right int lineno int charno [VARIABLES] boolean  int  charno  lineno  nodeType  Parser  parser  Node  idNode  left  right  temp  
[buglab_swap_variables]^return new Node ( nodeType,  right, lineno, charno ) ;^651^^^^^634^652^return new Node ( nodeType, left, right, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createBinary [RETURN_TYPE] Node   int nodeType Node left Node right int lineno int charno [VARIABLES] boolean  int  charno  lineno  nodeType  Parser  parser  Node  idNode  left  right  temp  
[buglab_swap_variables]^return new Node ( nodeType, left, charno, lineno, right ) ;^651^^^^^634^652^return new Node ( nodeType, left, right, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createBinary [RETURN_TYPE] Node   int nodeType Node left Node right int lineno int charno [VARIABLES] boolean  int  charno  lineno  nodeType  Parser  parser  Node  idNode  left  right  temp  
[buglab_swap_variables]^return new Node ( nodeType, left,  lineno, charno ) ;^651^^^^^634^652^return new Node ( nodeType, left, right, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createBinary [RETURN_TYPE] Node   int nodeType Node left Node right int lineno int charno [VARIABLES] boolean  int  charno  lineno  nodeType  Parser  parser  Node  idNode  left  right  temp  
[buglab_swap_variables]^return new Node ( lineno, left, right, nodeType, charno ) ;^651^^^^^634^652^return new Node ( nodeType, left, right, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createBinary [RETURN_TYPE] Node   int nodeType Node left Node right int lineno int charno [VARIABLES] boolean  int  charno  lineno  nodeType  Parser  parser  Node  idNode  left  right  temp  
[buglab_swap_variables]^return new Node ( nodeType, left, right,  charno ) ;^651^^^^^634^652^return new Node ( nodeType, left, right, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createBinary [RETURN_TYPE] Node   int nodeType Node left Node right int lineno int charno [VARIABLES] boolean  int  charno  lineno  nodeType  Parser  parser  Node  idNode  left  right  temp  
[buglab_swap_variables]^return new Node ( nodeType, left, right, charno, lineno ) ;^651^^^^^634^652^return new Node ( nodeType, left, right, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createBinary [RETURN_TYPE] Node   int nodeType Node left Node right int lineno int charno [VARIABLES] boolean  int  charno  lineno  nodeType  Parser  parser  Node  idNode  left  right  temp  
[buglab_swap_variables]^return new Node ( nodeType, left, right, lineno ) ;^651^^^^^634^652^return new Node ( nodeType, left, right, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createBinary [RETURN_TYPE] Node   int nodeType Node left Node right int lineno int charno [VARIABLES] boolean  int  charno  lineno  nodeType  Parser  parser  Node  idNode  left  right  temp  
[buglab_swap_variables]^return new Node ( charno, left, right, lineno, nodeType ) ;^651^^^^^634^652^return new Node ( nodeType, left, right, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createBinary [RETURN_TYPE] Node   int nodeType Node left Node right int lineno int charno [VARIABLES] boolean  int  charno  lineno  nodeType  Parser  parser  Node  idNode  left  right  temp  
[buglab_swap_variables]^return new Node ( nodeType, charno, right, lineno, left ) ;^651^^^^^634^652^return new Node ( nodeType, left, right, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createBinary [RETURN_TYPE] Node   int nodeType Node left Node right int lineno int charno [VARIABLES] boolean  int  charno  lineno  nodeType  Parser  parser  Node  idNode  left  right  temp  
[buglab_swap_variables]^return new Node ( nodeType, left, lineno, right, charno ) ;^651^^^^^634^652^return new Node ( nodeType, left, right, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createBinary [RETURN_TYPE] Node   int nodeType Node left Node right int lineno int charno [VARIABLES] boolean  int  charno  lineno  nodeType  Parser  parser  Node  idNode  left  right  temp  
[buglab_swap_variables]^return new Node ( Token.ASSIGN, right, left, lineno, charno ) ;^669^^^^^654^670^return new Node ( Token.ASSIGN, left, right, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createAssignment [RETURN_TYPE] Node   int nodeOp Node left Node right int lineno int charno [VARIABLES] boolean  int  charno  lineno  nodeOp  nodeType  Parser  parser  Node  left  right  
[buglab_swap_variables]^return new Node ( Token.ASSIGN,  right, lineno, charno ) ;^669^^^^^654^670^return new Node ( Token.ASSIGN, left, right, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createAssignment [RETURN_TYPE] Node   int nodeOp Node left Node right int lineno int charno [VARIABLES] boolean  int  charno  lineno  nodeOp  nodeType  Parser  parser  Node  left  right  
[buglab_swap_variables]^return new Node ( Token.ASSIGN, left, lineno, right, charno ) ;^669^^^^^654^670^return new Node ( Token.ASSIGN, left, right, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createAssignment [RETURN_TYPE] Node   int nodeOp Node left Node right int lineno int charno [VARIABLES] boolean  int  charno  lineno  nodeOp  nodeType  Parser  parser  Node  left  right  
[buglab_swap_variables]^return new Node ( Token.ASSIGN, left,  lineno, charno ) ;^669^^^^^654^670^return new Node ( Token.ASSIGN, left, right, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createAssignment [RETURN_TYPE] Node   int nodeOp Node left Node right int lineno int charno [VARIABLES] boolean  int  charno  lineno  nodeOp  nodeType  Parser  parser  Node  left  right  
[buglab_swap_variables]^return new Node ( Token.ASSIGN, lineno, right, left, charno ) ;^669^^^^^654^670^return new Node ( Token.ASSIGN, left, right, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createAssignment [RETURN_TYPE] Node   int nodeOp Node left Node right int lineno int charno [VARIABLES] boolean  int  charno  lineno  nodeOp  nodeType  Parser  parser  Node  left  right  
[buglab_swap_variables]^return new Node ( Token.ASSIGN, left, right,  charno ) ;^669^^^^^654^670^return new Node ( Token.ASSIGN, left, right, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createAssignment [RETURN_TYPE] Node   int nodeOp Node left Node right int lineno int charno [VARIABLES] boolean  int  charno  lineno  nodeOp  nodeType  Parser  parser  Node  left  right  
[buglab_swap_variables]^return new Node ( Token.ASSIGN, left, right, charno, lineno ) ;^669^^^^^654^670^return new Node ( Token.ASSIGN, left, right, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createAssignment [RETURN_TYPE] Node   int nodeOp Node left Node right int lineno int charno [VARIABLES] boolean  int  charno  lineno  nodeOp  nodeType  Parser  parser  Node  left  right  
[buglab_swap_variables]^return new Node ( Token.ASSIGN, left, right, lineno ) ;^669^^^^^654^670^return new Node ( Token.ASSIGN, left, right, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createAssignment [RETURN_TYPE] Node   int nodeOp Node left Node right int lineno int charno [VARIABLES] boolean  int  charno  lineno  nodeOp  nodeType  Parser  parser  Node  left  right  
[buglab_swap_variables]^return new Node ( charno, left, right, lineno, Token.ASSIGN ) ;^669^^^^^654^670^return new Node ( Token.ASSIGN, left, right, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createAssignment [RETURN_TYPE] Node   int nodeOp Node left Node right int lineno int charno [VARIABLES] boolean  int  charno  lineno  nodeOp  nodeType  Parser  parser  Node  left  right  
[buglab_swap_variables]^return new Node (  left, right, lineno, charno ) ;^669^^^^^654^670^return new Node ( Token.ASSIGN, left, right, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createAssignment [RETURN_TYPE] Node   int nodeOp Node left Node right int lineno int charno [VARIABLES] boolean  int  charno  lineno  nodeOp  nodeType  Parser  parser  Node  left  right  
[buglab_swap_variables]^return new Node ( Token.ASSIGN, charno, right, lineno, left ) ;^669^^^^^654^670^return new Node ( Token.ASSIGN, left, right, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createAssignment [RETURN_TYPE] Node   int nodeOp Node left Node right int lineno int charno [VARIABLES] boolean  int  charno  lineno  nodeOp  nodeType  Parser  parser  Node  left  right  
[buglab_swap_variables]^return new Node ( Token.ASSIGN, left, charno, lineno, right ) ;^669^^^^^654^670^return new Node ( Token.ASSIGN, left, right, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createAssignment [RETURN_TYPE] Node   int nodeOp Node left Node right int lineno int charno [VARIABLES] boolean  int  charno  lineno  nodeOp  nodeType  Parser  parser  Node  left  right  
[buglab_swap_variables]^return new Node ( lineno, left, right, Token.ASSIGN, charno ) ;^669^^^^^654^670^return new Node ( Token.ASSIGN, left, right, lineno, charno ) ;^[CLASS] IRFactory  [METHOD] createAssignment [RETURN_TYPE] Node   int nodeOp Node left Node right int lineno int charno [VARIABLES] boolean  int  charno  lineno  nodeOp  nodeType  Parser  parser  Node  left  right  
