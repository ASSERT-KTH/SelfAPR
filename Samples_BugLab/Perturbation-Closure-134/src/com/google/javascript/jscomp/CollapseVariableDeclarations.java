[BugLab_Variable_Misuse]^this.firstVarNode = parent;^80^^^^^79^82^this.firstVarNode = firstVarNode;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] <init> [RETURN_TYPE] Node)   Node firstVarNode Node parent [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  Node  firstVarNode  parent  
[BugLab_Variable_Misuse]^this.parent = firstVarNode;^81^^^^^79^82^this.parent = parent;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] <init> [RETURN_TYPE] Node)   Node firstVarNode Node parent [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  Node  firstVarNode  parent  
[BugLab_Variable_Misuse]^NodeTraversal.traverse ( compiler, parent, new CombinedCompilerPass ( compiler, new ExploitAssigns (  ) , new GatherCollapses (  )  )  ) ;^105^106^107^^^101^112^NodeTraversal.traverse ( compiler, root, new CombinedCompilerPass ( compiler, new ExploitAssigns (  ) , new GatherCollapses (  )  )  ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  Node  externs  firstVarNode  parent  root  
[BugLab_Argument_Swapping]^NodeTraversal.traverse ( root, compiler, new CombinedCompilerPass ( compiler, new ExploitAssigns (  ) , new GatherCollapses (  )  )  ) ;^105^106^107^^^101^112^NodeTraversal.traverse ( compiler, root, new CombinedCompilerPass ( compiler, new ExploitAssigns (  ) , new GatherCollapses (  )  )  ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  Node  externs  firstVarNode  parent  root  
[BugLab_Variable_Misuse]^if  ( !NodeUtil.isExprAssign ( parent )  )  {^117^^^^^116^122^if  ( !NodeUtil.isExprAssign ( expr )  )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node expr Node exprParent [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  NodeTraversal  t  Node  expr  exprParent  externs  firstVarNode  parent  root  
[BugLab_Variable_Misuse]^if  ( !NodeUtil.isExprAssign ( root )  )  {^117^^^^^116^122^if  ( !NodeUtil.isExprAssign ( expr )  )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node expr Node exprParent [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  NodeTraversal  t  Node  expr  exprParent  externs  firstVarNode  parent  root  
[BugLab_Variable_Misuse]^collapseAssign ( t, root.getFirstChild (  ) , expr, exprParent ) ;^121^^^^^116^122^collapseAssign ( t, expr.getFirstChild (  ) , expr, exprParent ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node expr Node exprParent [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  NodeTraversal  t  Node  expr  exprParent  externs  firstVarNode  parent  root  
[BugLab_Variable_Misuse]^collapseAssign ( t, expr.getFirstChild (  ) , expr, root ) ;^121^^^^^116^122^collapseAssign ( t, expr.getFirstChild (  ) , expr, exprParent ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node expr Node exprParent [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  NodeTraversal  t  Node  expr  exprParent  externs  firstVarNode  parent  root  
[BugLab_Argument_Swapping]^collapseAssign ( exprParent, expr.getFirstChild (  ) , expr, t ) ;^121^^^^^116^122^collapseAssign ( t, expr.getFirstChild (  ) , expr, exprParent ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node expr Node exprParent [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  NodeTraversal  t  Node  expr  exprParent  externs  firstVarNode  parent  root  
[BugLab_Argument_Swapping]^collapseAssign ( t, exprParent.getFirstChild (  ) , expr, expr ) ;^121^^^^^116^122^collapseAssign ( t, expr.getFirstChild (  ) , expr, exprParent ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node expr Node exprParent [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  NodeTraversal  t  Node  expr  exprParent  externs  firstVarNode  parent  root  
[BugLab_Variable_Misuse]^Node leftValue = rightValue.getFirstChild (  ) ;^129^^^^^127^141^Node leftValue = assign.getFirstChild (  ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssign [RETURN_TYPE] void   NodeTraversal t Node assign Node expr Node exprParent [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  NodeTraversal  t  Node  assign  expr  exprParent  externs  firstVarNode  leftValue  parent  rightValue  root  
[BugLab_Variable_Misuse]^Node rightValue = root.getNext (  ) ;^130^^^^^127^141^Node rightValue = leftValue.getNext (  ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssign [RETURN_TYPE] void   NodeTraversal t Node assign Node expr Node exprParent [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  NodeTraversal  t  Node  assign  expr  exprParent  externs  firstVarNode  leftValue  parent  rightValue  root  
[BugLab_Variable_Misuse]^Node rightValue = firstVarNode.getNext (  ) ;^130^^^^^127^141^Node rightValue = leftValue.getNext (  ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssign [RETURN_TYPE] void   NodeTraversal t Node assign Node expr Node exprParent [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  NodeTraversal  t  Node  assign  expr  exprParent  externs  firstVarNode  leftValue  parent  rightValue  root  
[BugLab_Variable_Misuse]^if  ( isCollapsibleValue ( rightValue, true )  && collapseAssignEqualTo ( expr, exprParent, leftValue )  )  {^131^132^^^^127^141^if  ( isCollapsibleValue ( leftValue, true )  && collapseAssignEqualTo ( expr, exprParent, leftValue )  )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssign [RETURN_TYPE] void   NodeTraversal t Node assign Node expr Node exprParent [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  NodeTraversal  t  Node  assign  expr  exprParent  externs  firstVarNode  leftValue  parent  rightValue  root  
[BugLab_Variable_Misuse]^if  ( isCollapsibleValue ( leftValue, true )  && collapseAssignEqualTo ( parent, exprParent, leftValue )  )  {^131^132^^^^127^141^if  ( isCollapsibleValue ( leftValue, true )  && collapseAssignEqualTo ( expr, exprParent, leftValue )  )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssign [RETURN_TYPE] void   NodeTraversal t Node assign Node expr Node exprParent [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  NodeTraversal  t  Node  assign  expr  exprParent  externs  firstVarNode  leftValue  parent  rightValue  root  
[BugLab_Variable_Misuse]^if  ( isCollapsibleValue ( leftValue, true )  && collapseAssignEqualTo ( expr, root, leftValue )  )  {^131^132^^^^127^141^if  ( isCollapsibleValue ( leftValue, true )  && collapseAssignEqualTo ( expr, exprParent, leftValue )  )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssign [RETURN_TYPE] void   NodeTraversal t Node assign Node expr Node exprParent [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  NodeTraversal  t  Node  assign  expr  exprParent  externs  firstVarNode  leftValue  parent  rightValue  root  
[BugLab_Argument_Swapping]^if  ( isCollapsibleValue ( leftValue, true )  && collapseAssignEqualTo ( exprParent, expr, leftValue )  )  {^131^132^^^^127^141^if  ( isCollapsibleValue ( leftValue, true )  && collapseAssignEqualTo ( expr, exprParent, leftValue )  )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssign [RETURN_TYPE] void   NodeTraversal t Node assign Node expr Node exprParent [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  NodeTraversal  t  Node  assign  expr  exprParent  externs  firstVarNode  leftValue  parent  rightValue  root  
[BugLab_Argument_Swapping]^if  ( isCollapsibleValue ( leftValue, exprrue )  && collapseAssignEqualTo ( t, exprParent, leftValue )  )  {^131^132^^^^127^141^if  ( isCollapsibleValue ( leftValue, true )  && collapseAssignEqualTo ( expr, exprParent, leftValue )  )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssign [RETURN_TYPE] void   NodeTraversal t Node assign Node expr Node exprParent [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  NodeTraversal  t  Node  assign  expr  exprParent  externs  firstVarNode  leftValue  parent  rightValue  root  
[BugLab_Wrong_Operator]^if  ( isCollapsibleValue ( leftValue, true )  || collapseAssignEqualTo ( expr, exprParent, leftValue )  )  {^131^132^^^^127^141^if  ( isCollapsibleValue ( leftValue, true )  && collapseAssignEqualTo ( expr, exprParent, leftValue )  )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssign [RETURN_TYPE] void   NodeTraversal t Node assign Node expr Node exprParent [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  NodeTraversal  t  Node  assign  expr  exprParent  externs  firstVarNode  leftValue  parent  rightValue  root  
[BugLab_Wrong_Literal]^if  ( isCollapsibleValue ( leftValue, false )  && collapseAssignEqualTo ( expr, exprParent, leftValue )  )  {^131^132^^^^127^141^if  ( isCollapsibleValue ( leftValue, true )  && collapseAssignEqualTo ( expr, exprParent, leftValue )  )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssign [RETURN_TYPE] void   NodeTraversal t Node assign Node expr Node exprParent [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  NodeTraversal  t  Node  assign  expr  exprParent  externs  firstVarNode  leftValue  parent  rightValue  root  
[BugLab_Variable_Misuse]^} else if  ( isCollapsibleValue ( rightValue, false )  && collapseAssignEqualTo ( parent, exprParent, rightValue )  )  {^134^135^^^^127^141^} else if  ( isCollapsibleValue ( rightValue, false )  && collapseAssignEqualTo ( expr, exprParent, rightValue )  )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssign [RETURN_TYPE] void   NodeTraversal t Node assign Node expr Node exprParent [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  NodeTraversal  t  Node  assign  expr  exprParent  externs  firstVarNode  leftValue  parent  rightValue  root  
[BugLab_Variable_Misuse]^} else if  ( isCollapsibleValue ( rightValue, false )  && collapseAssignEqualTo ( expr, root, rightValue )  )  {^134^135^^^^127^141^} else if  ( isCollapsibleValue ( rightValue, false )  && collapseAssignEqualTo ( expr, exprParent, rightValue )  )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssign [RETURN_TYPE] void   NodeTraversal t Node assign Node expr Node exprParent [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  NodeTraversal  t  Node  assign  expr  exprParent  externs  firstVarNode  leftValue  parent  rightValue  root  
[BugLab_Argument_Swapping]^} else if  ( isCollapsibleValue ( exprParent, false )  && collapseAssignEqualTo ( expr, rightValue, rightValue )  )  {^134^135^^^^127^141^} else if  ( isCollapsibleValue ( rightValue, false )  && collapseAssignEqualTo ( expr, exprParent, rightValue )  )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssign [RETURN_TYPE] void   NodeTraversal t Node assign Node expr Node exprParent [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  NodeTraversal  t  Node  assign  expr  exprParent  externs  firstVarNode  leftValue  parent  rightValue  root  
[BugLab_Argument_Swapping]^} else if  ( isCollapsibleValue ( rightValue, false )  && collapseAssignEqualTo ( exprParent, expr, rightValue )  )  {^134^135^^^^127^141^} else if  ( isCollapsibleValue ( rightValue, false )  && collapseAssignEqualTo ( expr, exprParent, rightValue )  )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssign [RETURN_TYPE] void   NodeTraversal t Node assign Node expr Node exprParent [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  NodeTraversal  t  Node  assign  expr  exprParent  externs  firstVarNode  leftValue  parent  rightValue  root  
[BugLab_Wrong_Operator]^} else if  ( isCollapsibleValue ( rightValue, false )  || collapseAssignEqualTo ( expr, exprParent, rightValue )  )  {^134^135^^^^127^141^} else if  ( isCollapsibleValue ( rightValue, false )  && collapseAssignEqualTo ( expr, exprParent, rightValue )  )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssign [RETURN_TYPE] void   NodeTraversal t Node assign Node expr Node exprParent [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  NodeTraversal  t  Node  assign  expr  exprParent  externs  firstVarNode  leftValue  parent  rightValue  root  
[BugLab_Wrong_Literal]^} else if  ( isCollapsibleValue ( rightValue, true )  && collapseAssignEqualTo ( expr, exprParent, rightValue )  )  {^134^135^^^^127^141^} else if  ( isCollapsibleValue ( rightValue, false )  && collapseAssignEqualTo ( expr, exprParent, rightValue )  )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssign [RETURN_TYPE] void   NodeTraversal t Node assign Node expr Node exprParent [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  NodeTraversal  t  Node  assign  expr  exprParent  externs  firstVarNode  leftValue  parent  rightValue  root  
[BugLab_Variable_Misuse]^} else if  ( root.getType (  )  == Token.ASSIGN )  {^137^^^^^127^141^} else if  ( rightValue.getType (  )  == Token.ASSIGN )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssign [RETURN_TYPE] void   NodeTraversal t Node assign Node expr Node exprParent [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  NodeTraversal  t  Node  assign  expr  exprParent  externs  firstVarNode  leftValue  parent  rightValue  root  
[BugLab_Wrong_Operator]^} else if  ( rightValue.getType (  )  != Token.ASSIGN )  {^137^^^^^127^141^} else if  ( rightValue.getType (  )  == Token.ASSIGN )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssign [RETURN_TYPE] void   NodeTraversal t Node assign Node expr Node exprParent [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  NodeTraversal  t  Node  assign  expr  exprParent  externs  firstVarNode  leftValue  parent  rightValue  root  
[BugLab_Variable_Misuse]^collapseAssign ( t, firstVarNode, expr, exprParent ) ;^139^^^^^127^141^collapseAssign ( t, rightValue, expr, exprParent ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssign [RETURN_TYPE] void   NodeTraversal t Node assign Node expr Node exprParent [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  NodeTraversal  t  Node  assign  expr  exprParent  externs  firstVarNode  leftValue  parent  rightValue  root  
[BugLab_Variable_Misuse]^collapseAssign ( t, rightValue, rightValue, exprParent ) ;^139^^^^^127^141^collapseAssign ( t, rightValue, expr, exprParent ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssign [RETURN_TYPE] void   NodeTraversal t Node assign Node expr Node exprParent [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  NodeTraversal  t  Node  assign  expr  exprParent  externs  firstVarNode  leftValue  parent  rightValue  root  
[BugLab_Variable_Misuse]^collapseAssign ( t, rightValue, expr, root ) ;^139^^^^^127^141^collapseAssign ( t, rightValue, expr, exprParent ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssign [RETURN_TYPE] void   NodeTraversal t Node assign Node expr Node exprParent [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  NodeTraversal  t  Node  assign  expr  exprParent  externs  firstVarNode  leftValue  parent  rightValue  root  
[BugLab_Argument_Swapping]^collapseAssign ( exprParent, rightValue, expr, t ) ;^139^^^^^127^141^collapseAssign ( t, rightValue, expr, exprParent ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssign [RETURN_TYPE] void   NodeTraversal t Node assign Node expr Node exprParent [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  NodeTraversal  t  Node  assign  expr  exprParent  externs  firstVarNode  leftValue  parent  rightValue  root  
[BugLab_Argument_Swapping]^collapseAssign ( t, exprParent, expr, rightValue ) ;^139^^^^^127^141^collapseAssign ( t, rightValue, expr, exprParent ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssign [RETURN_TYPE] void   NodeTraversal t Node assign Node expr Node exprParent [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  NodeTraversal  t  Node  assign  expr  exprParent  externs  firstVarNode  leftValue  parent  rightValue  root  
[BugLab_Argument_Swapping]^collapseAssign ( t, rightValue, exprParent, expr ) ;^139^^^^^127^141^collapseAssign ( t, rightValue, expr, exprParent ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssign [RETURN_TYPE] void   NodeTraversal t Node assign Node expr Node exprParent [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  NodeTraversal  t  Node  assign  expr  exprParent  externs  firstVarNode  leftValue  parent  rightValue  root  
[BugLab_Variable_Misuse]^collapseAssign ( t, root, expr, exprParent ) ;^139^^^^^127^141^collapseAssign ( t, rightValue, expr, exprParent ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssign [RETURN_TYPE] void   NodeTraversal t Node assign Node expr Node exprParent [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  NodeTraversal  t  Node  assign  expr  exprParent  externs  firstVarNode  leftValue  parent  rightValue  root  
[BugLab_Variable_Misuse]^collapseAssign ( t, rightValue, parent, exprParent ) ;^139^^^^^127^141^collapseAssign ( t, rightValue, expr, exprParent ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssign [RETURN_TYPE] void   NodeTraversal t Node assign Node expr Node exprParent [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  NodeTraversal  t  Node  assign  expr  exprParent  externs  firstVarNode  leftValue  parent  rightValue  root  
[BugLab_Argument_Swapping]^collapseAssign ( rightValue, t, expr, exprParent ) ;^139^^^^^127^141^collapseAssign ( t, rightValue, expr, exprParent ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssign [RETURN_TYPE] void   NodeTraversal t Node assign Node expr Node exprParent [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  NodeTraversal  t  Node  assign  expr  exprParent  externs  firstVarNode  leftValue  parent  rightValue  root  
[BugLab_Argument_Swapping]^collapseAssign ( t, expr, rightValue, exprParent ) ;^139^^^^^127^141^collapseAssign ( t, rightValue, expr, exprParent ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssign [RETURN_TYPE] void   NodeTraversal t Node assign Node expr Node exprParent [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  NodeTraversal  t  Node  assign  expr  exprParent  externs  firstVarNode  leftValue  parent  rightValue  root  
[BugLab_Variable_Misuse]^} else if  ( leftValue.getType (  )  == Token.ASSIGN )  {^137^^^^^127^141^} else if  ( rightValue.getType (  )  == Token.ASSIGN )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssign [RETURN_TYPE] void   NodeTraversal t Node assign Node expr Node exprParent [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  NodeTraversal  t  Node  assign  expr  exprParent  externs  firstVarNode  leftValue  parent  rightValue  root  
[BugLab_Wrong_Operator]^} else if  ( rightValue.getType (  )  <= Token.ASSIGN )  {^137^^^^^127^141^} else if  ( rightValue.getType (  )  == Token.ASSIGN )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssign [RETURN_TYPE] void   NodeTraversal t Node assign Node expr Node exprParent [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  NodeTraversal  t  Node  assign  expr  exprParent  externs  firstVarNode  leftValue  parent  rightValue  root  
[BugLab_Variable_Misuse]^collapseAssign ( t, parent, expr, exprParent ) ;^139^^^^^127^141^collapseAssign ( t, rightValue, expr, exprParent ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssign [RETURN_TYPE] void   NodeTraversal t Node assign Node expr Node exprParent [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  NodeTraversal  t  Node  assign  expr  exprParent  externs  firstVarNode  leftValue  parent  rightValue  root  
[BugLab_Variable_Misuse]^collapseAssign ( t, rightValue, expr, leftValue ) ;^139^^^^^127^141^collapseAssign ( t, rightValue, expr, exprParent ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssign [RETURN_TYPE] void   NodeTraversal t Node assign Node expr Node exprParent [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  NodeTraversal  t  Node  assign  expr  exprParent  externs  firstVarNode  leftValue  parent  rightValue  root  
[BugLab_Argument_Swapping]^collapseAssign ( expr, rightValue, t, exprParent ) ;^139^^^^^127^141^collapseAssign ( t, rightValue, expr, exprParent ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssign [RETURN_TYPE] void   NodeTraversal t Node assign Node expr Node exprParent [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  NodeTraversal  t  Node  assign  expr  exprParent  externs  firstVarNode  leftValue  parent  rightValue  root  
[BugLab_Variable_Misuse]^} else if  ( isCollapsibleValue ( root, false )  && collapseAssignEqualTo ( expr, exprParent, rightValue )  )  {^134^135^^^^127^141^} else if  ( isCollapsibleValue ( rightValue, false )  && collapseAssignEqualTo ( expr, exprParent, rightValue )  )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssign [RETURN_TYPE] void   NodeTraversal t Node assign Node expr Node exprParent [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  NodeTraversal  t  Node  assign  expr  exprParent  externs  firstVarNode  leftValue  parent  rightValue  root  
[BugLab_Variable_Misuse]^collapseAssignEqualTo ( parent, exprParent, rightValue )  )  {^135^^^^^127^141^collapseAssignEqualTo ( expr, exprParent, rightValue )  )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssign [RETURN_TYPE] void   NodeTraversal t Node assign Node expr Node exprParent [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  NodeTraversal  t  Node  assign  expr  exprParent  externs  firstVarNode  leftValue  parent  rightValue  root  
[BugLab_Variable_Misuse]^collapseAssignEqualTo ( expr, root, rightValue )  )  {^135^^^^^127^141^collapseAssignEqualTo ( expr, exprParent, rightValue )  )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssign [RETURN_TYPE] void   NodeTraversal t Node assign Node expr Node exprParent [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  NodeTraversal  t  Node  assign  expr  exprParent  externs  firstVarNode  leftValue  parent  rightValue  root  
[BugLab_Variable_Misuse]^collapseAssignEqualTo ( expr, exprParent, leftValue )  )  {^135^^^^^127^141^collapseAssignEqualTo ( expr, exprParent, rightValue )  )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssign [RETURN_TYPE] void   NodeTraversal t Node assign Node expr Node exprParent [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  NodeTraversal  t  Node  assign  expr  exprParent  externs  firstVarNode  leftValue  parent  rightValue  root  
[BugLab_Argument_Swapping]^collapseAssignEqualTo ( exprParent, expr, rightValue )  )  {^135^^^^^127^141^collapseAssignEqualTo ( expr, exprParent, rightValue )  )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssign [RETURN_TYPE] void   NodeTraversal t Node assign Node expr Node exprParent [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  NodeTraversal  t  Node  assign  expr  exprParent  externs  firstVarNode  leftValue  parent  rightValue  root  
[BugLab_Argument_Swapping]^collapseAssignEqualTo ( rightValue, exprParent, expr )  )  {^135^^^^^127^141^collapseAssignEqualTo ( expr, exprParent, rightValue )  )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssign [RETURN_TYPE] void   NodeTraversal t Node assign Node expr Node exprParent [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  NodeTraversal  t  Node  assign  expr  exprParent  externs  firstVarNode  leftValue  parent  rightValue  root  
[BugLab_Variable_Misuse]^} else if  ( firstVarNode.getType (  )  == Token.ASSIGN )  {^137^^^^^127^141^} else if  ( rightValue.getType (  )  == Token.ASSIGN )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssign [RETURN_TYPE] void   NodeTraversal t Node assign Node expr Node exprParent [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  NodeTraversal  t  Node  assign  expr  exprParent  externs  firstVarNode  leftValue  parent  rightValue  root  
[BugLab_Variable_Misuse]^collapseAssign ( t, rightValue, expr, parent ) ;^139^^^^^127^141^collapseAssign ( t, rightValue, expr, exprParent ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssign [RETURN_TYPE] void   NodeTraversal t Node assign Node expr Node exprParent [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  NodeTraversal  t  Node  assign  expr  exprParent  externs  firstVarNode  leftValue  parent  rightValue  root  
[BugLab_Variable_Misuse]^} else if  ( isCollapsibleValue ( rightValue, false )  && collapseAssignEqualTo ( expr, parent, rightValue )  )  {^134^135^^^^127^141^} else if  ( isCollapsibleValue ( rightValue, false )  && collapseAssignEqualTo ( expr, exprParent, rightValue )  )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssign [RETURN_TYPE] void   NodeTraversal t Node assign Node expr Node exprParent [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  NodeTraversal  t  Node  assign  expr  exprParent  externs  firstVarNode  leftValue  parent  rightValue  root  
[BugLab_Variable_Misuse]^} else if  ( rightValue.getType (  )  == Token.null )  {^137^^^^^127^141^} else if  ( rightValue.getType (  )  == Token.ASSIGN )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssign [RETURN_TYPE] void   NodeTraversal t Node assign Node expr Node exprParent [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  NodeTraversal  t  Node  assign  expr  exprParent  externs  firstVarNode  leftValue  parent  rightValue  root  
[BugLab_Variable_Misuse]^collapseAssign ( t, rightValue, leftValue, exprParent ) ;^139^^^^^127^141^collapseAssign ( t, rightValue, expr, exprParent ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssign [RETURN_TYPE] void   NodeTraversal t Node assign Node expr Node exprParent [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  NodeTraversal  t  Node  assign  expr  exprParent  externs  firstVarNode  leftValue  parent  rightValue  root  
[BugLab_Variable_Misuse]^collapseAssign ( t, leftValue, expr, exprParent ) ;^139^^^^^127^141^collapseAssign ( t, rightValue, expr, exprParent ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssign [RETURN_TYPE] void   NodeTraversal t Node assign Node expr Node exprParent [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  NodeTraversal  t  Node  assign  expr  exprParent  externs  firstVarNode  leftValue  parent  rightValue  root  
[BugLab_Variable_Misuse]^collapseAssign ( t, rightValue, root, exprParent ) ;^139^^^^^127^141^collapseAssign ( t, rightValue, expr, exprParent ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssign [RETURN_TYPE] void   NodeTraversal t Node assign Node expr Node exprParent [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  NodeTraversal  t  Node  assign  expr  exprParent  externs  firstVarNode  leftValue  parent  rightValue  root  
[BugLab_Variable_Misuse]^if  ( isCollapsibleValue ( root, true )  && collapseAssignEqualTo ( expr, exprParent, leftValue )  )  {^131^132^^^^127^141^if  ( isCollapsibleValue ( leftValue, true )  && collapseAssignEqualTo ( expr, exprParent, leftValue )  )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssign [RETURN_TYPE] void   NodeTraversal t Node assign Node expr Node exprParent [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  NodeTraversal  t  Node  assign  expr  exprParent  externs  firstVarNode  leftValue  parent  rightValue  root  
[BugLab_Variable_Misuse]^collapseAssignEqualTo ( parent, exprParent, leftValue )  )  {^132^^^^^127^141^collapseAssignEqualTo ( expr, exprParent, leftValue )  )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssign [RETURN_TYPE] void   NodeTraversal t Node assign Node expr Node exprParent [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  NodeTraversal  t  Node  assign  expr  exprParent  externs  firstVarNode  leftValue  parent  rightValue  root  
[BugLab_Variable_Misuse]^collapseAssignEqualTo ( expr, parent, leftValue )  )  {^132^^^^^127^141^collapseAssignEqualTo ( expr, exprParent, leftValue )  )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssign [RETURN_TYPE] void   NodeTraversal t Node assign Node expr Node exprParent [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  NodeTraversal  t  Node  assign  expr  exprParent  externs  firstVarNode  leftValue  parent  rightValue  root  
[BugLab_Variable_Misuse]^collapseAssignEqualTo ( expr, exprParent, parent )  )  {^132^^^^^127^141^collapseAssignEqualTo ( expr, exprParent, leftValue )  )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssign [RETURN_TYPE] void   NodeTraversal t Node assign Node expr Node exprParent [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  NodeTraversal  t  Node  assign  expr  exprParent  externs  firstVarNode  leftValue  parent  rightValue  root  
[BugLab_Argument_Swapping]^collapseAssignEqualTo ( leftValue, exprParent, expr )  )  {^132^^^^^127^141^collapseAssignEqualTo ( expr, exprParent, leftValue )  )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssign [RETURN_TYPE] void   NodeTraversal t Node assign Node expr Node exprParent [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  NodeTraversal  t  Node  assign  expr  exprParent  externs  firstVarNode  leftValue  parent  rightValue  root  
[BugLab_Argument_Swapping]^collapseAssignEqualTo ( expr, leftValue, exprParent )  )  {^132^^^^^127^141^collapseAssignEqualTo ( expr, exprParent, leftValue )  )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssign [RETURN_TYPE] void   NodeTraversal t Node assign Node expr Node exprParent [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  NodeTraversal  t  Node  assign  expr  exprParent  externs  firstVarNode  leftValue  parent  rightValue  root  
[BugLab_Variable_Misuse]^collapseAssignEqualTo ( root, exprParent, rightValue )  )  {^135^^^^^127^141^collapseAssignEqualTo ( expr, exprParent, rightValue )  )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssign [RETURN_TYPE] void   NodeTraversal t Node assign Node expr Node exprParent [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  NodeTraversal  t  Node  assign  expr  exprParent  externs  firstVarNode  leftValue  parent  rightValue  root  
[BugLab_Variable_Misuse]^collapseAssignEqualTo ( expr, rightValue, rightValue )  )  {^135^^^^^127^141^collapseAssignEqualTo ( expr, exprParent, rightValue )  )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssign [RETURN_TYPE] void   NodeTraversal t Node assign Node expr Node exprParent [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  NodeTraversal  t  Node  assign  expr  exprParent  externs  firstVarNode  leftValue  parent  rightValue  root  
[BugLab_Variable_Misuse]^collapseAssignEqualTo ( expr, exprParent, root )  )  {^135^^^^^127^141^collapseAssignEqualTo ( expr, exprParent, rightValue )  )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssign [RETURN_TYPE] void   NodeTraversal t Node assign Node expr Node exprParent [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  NodeTraversal  t  Node  assign  expr  exprParent  externs  firstVarNode  leftValue  parent  rightValue  root  
[BugLab_Argument_Swapping]^collapseAssignEqualTo ( expr, rightValue, exprParent )  )  {^135^^^^^127^141^collapseAssignEqualTo ( expr, exprParent, rightValue )  )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssign [RETURN_TYPE] void   NodeTraversal t Node assign Node expr Node exprParent [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  NodeTraversal  t  Node  assign  expr  exprParent  externs  firstVarNode  leftValue  parent  rightValue  root  
[BugLab_Variable_Misuse]^return !isLValue || leftValue.getFirstChild (  ) .getType (  )  == Token.THIS;^164^^^^^157^176^return !isLValue || value.getFirstChild (  ) .getType (  )  == Token.THIS;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] isCollapsibleValue [RETURN_TYPE] boolean   Node value boolean isLValue [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  isLValue  Node  assign  expr  exprParent  externs  firstVarNode  leftValue  parent  rightValue  root  value  
[BugLab_Wrong_Operator]^return !isLValue && value.getFirstChild (  ) .getType (  )  == Token.THIS;^164^^^^^157^176^return !isLValue || value.getFirstChild (  ) .getType (  )  == Token.THIS;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] isCollapsibleValue [RETURN_TYPE] boolean   Node value boolean isLValue [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  isLValue  Node  assign  expr  exprParent  externs  firstVarNode  leftValue  parent  rightValue  root  value  
[BugLab_Wrong_Operator]^return !isLValue || value.getFirstChild (  ) .getType (  )  != Token.THIS;^164^^^^^157^176^return !isLValue || value.getFirstChild (  ) .getType (  )  == Token.THIS;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] isCollapsibleValue [RETURN_TYPE] boolean   Node value boolean isLValue [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  isLValue  Node  assign  expr  exprParent  externs  firstVarNode  leftValue  parent  rightValue  root  value  
[BugLab_Wrong_Literal]^return false;^172^^^^^157^176^return true;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] isCollapsibleValue [RETURN_TYPE] boolean   Node value boolean isLValue [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  isLValue  Node  assign  expr  exprParent  externs  firstVarNode  leftValue  parent  rightValue  root  value  
[BugLab_Variable_Misuse]^switch  ( root.getType (  )  )  {^158^^^^^157^176^switch  ( value.getType (  )  )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] isCollapsibleValue [RETURN_TYPE] boolean   Node value boolean isLValue [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  isLValue  Node  assign  expr  exprParent  externs  firstVarNode  leftValue  parent  rightValue  root  value  
[BugLab_Wrong_Literal]^return true;^175^^^^^157^176^return false;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] isCollapsibleValue [RETURN_TYPE] boolean   Node value boolean isLValue [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  isLValue  Node  assign  expr  exprParent  externs  firstVarNode  leftValue  parent  rightValue  root  value  
[BugLab_Variable_Misuse]^Node assign = value.getFirstChild (  ) ;^195^^^^^180^210^Node assign = expr.getFirstChild (  ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[BugLab_Variable_Misuse]^Node parent = root;^196^^^^^181^211^Node parent = exprParent;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[BugLab_Variable_Misuse]^Node next = rightValue.getNext (  ) ;^197^^^^^182^212^Node next = expr.getNext (  ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[BugLab_Variable_Misuse]^Node next = parent.getNext (  ) ;^197^^^^^182^212^Node next = expr.getNext (  ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[BugLab_Variable_Misuse]^while  ( parent != null )  {^198^^^^^183^213^while  ( next != null )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[BugLab_Wrong_Operator]^while  ( next == null )  {^198^^^^^183^213^while  ( next != null )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[BugLab_Variable_Misuse]^if  ( leftValue.getFirstChild (  ) .hasChildren (  )  )  {^212^^^^^197^227^if  ( next.getFirstChild (  ) .hasChildren (  )  )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[BugLab_Variable_Misuse]^parent = value.getFirstChild (  ) ;^213^^^^^198^228^parent = next.getFirstChild (  ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[BugLab_Variable_Misuse]^next = leftValue.getFirstChild (  ) ;^214^^^^^199^229^next = parent.getFirstChild (  ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[BugLab_Variable_Misuse]^parent = root.getFirstChild (  ) ;^213^^^^^198^228^parent = next.getFirstChild (  ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[BugLab_Variable_Misuse]^next = root.getFirstChild (  ) ;^214^^^^^199^229^next = parent.getFirstChild (  ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[BugLab_Variable_Misuse]^if  ( leftValue.isQualifiedName (  )  )  {^221^^^^^206^236^if  ( next.isQualifiedName (  )  )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[BugLab_Variable_Misuse]^if  ( rightValue.isQualifiedName (  )  && nextName.equals ( value.getQualifiedName (  )  )  )  {^223^224^^^^208^238^if  ( value.isQualifiedName (  )  && nextName.equals ( value.getQualifiedName (  )  )  )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[BugLab_Variable_Misuse]^if  ( value.isQualifiedName (  )  && parentName.equals ( value.getQualifiedName (  )  )  )  {^223^224^^^^208^238^if  ( value.isQualifiedName (  )  && nextName.equals ( value.getQualifiedName (  )  )  )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[BugLab_Argument_Swapping]^if  ( next.isQualifiedName (  )  && valueName.equals ( value.getQualifiedName (  )  )  )  {^223^224^^^^208^238^if  ( value.isQualifiedName (  )  && nextName.equals ( value.getQualifiedName (  )  )  )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[BugLab_Wrong_Operator]^if  ( value.isQualifiedName (  )  || nextName.equals ( value.getQualifiedName (  )  )  )  {^223^224^^^^208^238^if  ( value.isQualifiedName (  )  && nextName.equals ( value.getQualifiedName (  )  )  )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[BugLab_Variable_Misuse]^if  ( !isSafeReplacement ( parent, assign )  )  {^230^^^^^223^238^if  ( !isSafeReplacement ( next, assign )  )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[BugLab_Variable_Misuse]^if  ( !isSafeReplacement ( next, root )  )  {^230^^^^^223^238^if  ( !isSafeReplacement ( next, assign )  )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[BugLab_Argument_Swapping]^if  ( !isSafeReplacement ( assign, next )  )  {^230^^^^^223^238^if  ( !isSafeReplacement ( next, assign )  )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[BugLab_Wrong_Literal]^return true;^231^^^^^223^238^return false;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[BugLab_Wrong_Literal]^return false;^237^^^^^223^238^return true;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[BugLab_Variable_Misuse]^if  ( !isSafeReplacement ( rightValue, assign )  )  {^230^^^^^223^238^if  ( !isSafeReplacement ( next, assign )  )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[BugLab_Variable_Misuse]^if  ( !isSafeReplacement ( next, parent )  )  {^230^^^^^223^238^if  ( !isSafeReplacement ( next, assign )  )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[BugLab_Variable_Misuse]^exprParent.removeChild ( parent ) ;^234^^^^^223^238^exprParent.removeChild ( expr ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[BugLab_Variable_Misuse]^expr.removeChild ( value ) ;^235^^^^^223^238^expr.removeChild ( assign ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[BugLab_Variable_Misuse]^parent.replaceChild ( value, assign ) ;^236^^^^^223^238^parent.replaceChild ( next, assign ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[BugLab_Variable_Misuse]^parent.replaceChild ( next, value ) ;^236^^^^^223^238^parent.replaceChild ( next, assign ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[BugLab_Argument_Swapping]^parent.replaceChild ( assign, next ) ;^236^^^^^223^238^parent.replaceChild ( next, assign ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[BugLab_Variable_Misuse]^if  ( !isSafeReplacement ( value, assign )  )  {^230^^^^^215^245^if  ( !isSafeReplacement ( next, assign )  )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[BugLab_Variable_Misuse]^if  ( !isSafeReplacement ( next, value )  )  {^230^^^^^215^245^if  ( !isSafeReplacement ( next, assign )  )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[BugLab_Argument_Swapping]^if  ( !isSafeReplacement ( assign, next )  )  {^230^^^^^215^245^if  ( !isSafeReplacement ( next, assign )  )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[BugLab_Wrong_Literal]^return true;^231^^^^^216^246^return false;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[BugLab_Wrong_Literal]^return false;^237^^^^^222^252^return true;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[BugLab_Variable_Misuse]^String parentName = next.getQualifiedName (  ) ;^222^^^^^207^237^String nextName = next.getQualifiedName (  ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[BugLab_Variable_Misuse]^if  ( root.isQualifiedName (  )  && nextName.equals ( value.getQualifiedName (  )  )  )  {^223^224^^^^208^238^if  ( value.isQualifiedName (  )  && nextName.equals ( value.getQualifiedName (  )  )  )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[BugLab_Variable_Misuse]^nextName.equals ( parent.getQualifiedName (  )  )  )  {^224^^^^^209^239^nextName.equals ( value.getQualifiedName (  )  )  )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[BugLab_Variable_Misuse]^if  ( !isSafeReplacement ( root, assign )  )  {^230^^^^^215^245^if  ( !isSafeReplacement ( next, assign )  )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[BugLab_Variable_Misuse]^if  ( !isSafeReplacement ( next, parent )  )  {^230^^^^^215^245^if  ( !isSafeReplacement ( next, assign )  )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[BugLab_Variable_Misuse]^exprParent.removeChild ( root ) ;^234^^^^^219^249^exprParent.removeChild ( expr ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[BugLab_Variable_Misuse]^expr.removeChild ( root ) ;^235^^^^^220^250^expr.removeChild ( assign ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[BugLab_Variable_Misuse]^parent.replaceChild ( value, assign ) ;^236^^^^^221^251^parent.replaceChild ( next, assign ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[BugLab_Variable_Misuse]^parent.replaceChild ( next, parent ) ;^236^^^^^221^251^parent.replaceChild ( next, assign ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[BugLab_Argument_Swapping]^parent.replaceChild ( assign, next ) ;^236^^^^^221^251^parent.replaceChild ( next, assign ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[BugLab_Variable_Misuse]^if  ( next.isQualifiedName (  )  && nextName.equals ( value.getQualifiedName (  )  )  )  {^223^224^^^^208^238^if  ( value.isQualifiedName (  )  && nextName.equals ( value.getQualifiedName (  )  )  )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[BugLab_Variable_Misuse]^if  ( value.isQualifiedName (  )  && leftValueName.equals ( value.getQualifiedName (  )  )  )  {^223^224^^^^208^238^if  ( value.isQualifiedName (  )  && nextName.equals ( value.getQualifiedName (  )  )  )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[BugLab_Variable_Misuse]^if  ( !isSafeReplacement ( next, rightValue )  )  {^230^^^^^223^238^if  ( !isSafeReplacement ( next, assign )  )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[BugLab_Variable_Misuse]^if  ( !isSafeReplacement ( next, value )  )  {^230^^^^^223^238^if  ( !isSafeReplacement ( next, assign )  )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[BugLab_Variable_Misuse]^exprParent.removeChild ( value ) ;^234^^^^^223^238^exprParent.removeChild ( expr ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[BugLab_Variable_Misuse]^expr.removeChild ( parent ) ;^235^^^^^223^238^expr.removeChild ( assign ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[BugLab_Variable_Misuse]^parent.replaceChild ( rightValue, assign ) ;^236^^^^^223^238^parent.replaceChild ( next, assign ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[BugLab_Variable_Misuse]^parent.replaceChild ( next, rightValue ) ;^236^^^^^223^238^parent.replaceChild ( next, assign ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[BugLab_Variable_Misuse]^if  ( !isSafeReplacement ( parent, assign )  )  {^230^^^^^215^245^if  ( !isSafeReplacement ( next, assign )  )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[BugLab_Variable_Misuse]^if  ( rightValue.getType (  )  == next.getType (  )  )  {^247^^^^^232^262^if  ( value.getType (  )  == next.getType (  )  )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[BugLab_Variable_Misuse]^if  ( value.getType (  )  == parent.getType (  )  )  {^247^^^^^232^262^if  ( value.getType (  )  == next.getType (  )  )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[BugLab_Wrong_Operator]^if  ( value.getType (  )  != next.getType (  )  )  {^247^^^^^232^262^if  ( value.getType (  )  == next.getType (  )  )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[BugLab_Wrong_Operator]^if  ( value.getType (  )  >= next.getType (  )  )  {^247^^^^^232^262^if  ( value.getType (  )  == next.getType (  )  )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[BugLab_Wrong_Operator]^if  ( value.getType (  )  <= next.getType (  )  )  {^247^^^^^232^262^if  ( value.getType (  )  == next.getType (  )  )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[BugLab_Variable_Misuse]^if  (  ( next.getType (  )  == Token.STRING || next.getType (  )  == Token.NUMBER )  && !next.isEquivalentTo ( leftValue )  )  {^248^249^250^^^233^263^if  (  ( next.getType (  )  == Token.STRING || next.getType (  )  == Token.NUMBER )  && !next.isEquivalentTo ( value )  )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[BugLab_Argument_Swapping]^if  (  ( value.getType (  )  == Token.STRING || next.getType (  )  == Token.NUMBER )  && !next.isEquivalentTo ( next )  )  {^248^249^250^^^233^263^if  (  ( next.getType (  )  == Token.STRING || next.getType (  )  == Token.NUMBER )  && !next.isEquivalentTo ( value )  )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[BugLab_Wrong_Operator]^if  (  ( next.getType (  )  == Token.STRING || next.getType (  )  == Token.NUMBER )  || !next.isEquivalentTo ( value )  )  {^248^249^250^^^233^263^if  (  ( next.getType (  )  == Token.STRING || next.getType (  )  == Token.NUMBER )  && !next.isEquivalentTo ( value )  )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[BugLab_Wrong_Operator]^if  (  ( next.getType (  )  == Token.STRING && next.getType (  )  == Token.NUMBER )  && !next.isEquivalentTo ( value )  )  {^248^249^250^^^233^263^if  (  ( next.getType (  )  == Token.STRING || next.getType (  )  == Token.NUMBER )  && !next.isEquivalentTo ( value )  )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[BugLab_Wrong_Operator]^if  (  ( next.getType (  )  < Token.STRING || next.getType (  )  == Token.NUMBER )  && !next.isEquivalentTo ( value )  )  {^248^249^250^^^233^263^if  (  ( next.getType (  )  == Token.STRING || next.getType (  )  == Token.NUMBER )  && !next.isEquivalentTo ( value )  )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[BugLab_Wrong_Operator]^if  (  ( next.getType (  )  <= Token.STRING || next.getType (  )  == Token.NUMBER )  && !next.isEquivalentTo ( value )  )  {^248^249^250^^^233^263^if  (  ( next.getType (  )  == Token.STRING || next.getType (  )  == Token.NUMBER )  && !next.isEquivalentTo ( value )  )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[BugLab_Wrong_Literal]^return true;^251^^^^^248^252^return false;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[BugLab_Wrong_Literal]^return true;^251^^^^^236^266^return false;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[BugLab_Wrong_Literal]^return false;^260^^^^^245^275^return true;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[BugLab_Variable_Misuse]^if  (  ( leftValue.getType (  )  == Token.STRING || next.getType (  )  == Token.NUMBER )  && !next.isEquivalentTo ( value )  )  {^248^249^250^^^233^263^if  (  ( next.getType (  )  == Token.STRING || next.getType (  )  == Token.NUMBER )  && !next.isEquivalentTo ( value )  )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[BugLab_Variable_Misuse]^!next.isEquivalentTo ( leftValue )  )  {^250^^^^^235^265^!next.isEquivalentTo ( value )  )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[BugLab_Variable_Misuse]^exprParent.removeChild ( root ) ;^257^^^^^242^272^exprParent.removeChild ( expr ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[BugLab_Variable_Misuse]^parent.replaceChild ( root, assign ) ;^259^^^^^244^274^parent.replaceChild ( next, assign ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[BugLab_Variable_Misuse]^parent.replaceChild ( next, rightValue ) ;^259^^^^^244^274^parent.replaceChild ( next, assign ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[BugLab_Argument_Swapping]^parent.replaceChild ( assign, next ) ;^259^^^^^244^274^parent.replaceChild ( next, assign ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[BugLab_Variable_Misuse]^if  (  ( rightValue.getType (  )  == Token.STRING || next.getType (  )  == Token.NUMBER )  && !next.isEquivalentTo ( value )  )  {^248^249^250^^^233^263^if  (  ( next.getType (  )  == Token.STRING || next.getType (  )  == Token.NUMBER )  && !next.isEquivalentTo ( value )  )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[BugLab_Variable_Misuse]^if  (  ( next.getType (  )  == Token.STRING || next.getType (  )  == Token.NUMBER )  && !next.isEquivalentTo ( rightValue )  )  {^248^249^250^^^233^263^if  (  ( next.getType (  )  == Token.STRING || next.getType (  )  == Token.NUMBER )  && !next.isEquivalentTo ( value )  )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[BugLab_Wrong_Operator]^if  (  ( next.getType (  )  >= Token.STRING || next.getType (  )  == Token.NUMBER )  && !next.isEquivalentTo ( value )  )  {^248^249^250^^^233^263^if  (  ( next.getType (  )  == Token.STRING || next.getType (  )  == Token.NUMBER )  && !next.isEquivalentTo ( value )  )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[BugLab_Wrong_Operator]^if  (  ( next.getType (  )  != Token.STRING || next.getType (  )  == Token.NUMBER )  && !next.isEquivalentTo ( value )  )  {^248^249^250^^^233^263^if  (  ( next.getType (  )  == Token.STRING || next.getType (  )  == Token.NUMBER )  && !next.isEquivalentTo ( value )  )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[BugLab_Variable_Misuse]^if  ( parent.getType (  )  == Token.NAME || leftSide.getType (  )  == Token.GETPROP && leftSide.getFirstChild (  ) .getType (  )  == Token.THIS )  {^278^279^280^^^263^293^if  ( leftSide.getType (  )  == Token.NAME || leftSide.getType (  )  == Token.GETPROP && leftSide.getFirstChild (  ) .getType (  )  == Token.THIS )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[BugLab_Wrong_Operator]^if  ( leftSide.getType (  )  == Token.NAME && leftSide.getType (  )  == Token.GETPROP && leftSide.getFirstChild (  ) .getType (  )  == Token.THIS )  {^278^279^280^^^263^293^if  ( leftSide.getType (  )  == Token.NAME || leftSide.getType (  )  == Token.GETPROP && leftSide.getFirstChild (  ) .getType (  )  == Token.THIS )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[BugLab_Wrong_Operator]^if  ( leftSide.getType (  )  != Token.NAME || leftSide.getType (  )  == Token.GETPROP && leftSide.getFirstChild (  ) .getType (  )  == Token.THIS )  {^278^279^280^^^263^293^if  ( leftSide.getType (  )  == Token.NAME || leftSide.getType (  )  == Token.GETPROP && leftSide.getFirstChild (  ) .getType (  )  == Token.THIS )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[BugLab_Wrong_Operator]^if  ( leftSide.getType (  )  == Token.NAME || leftSide.getType (  )  == Token.GETPROP || leftSide.getFirstChild (  ) .getType (  )  == Token.THIS )  {^278^279^280^^^263^293^if  ( leftSide.getType (  )  == Token.NAME || leftSide.getType (  )  == Token.GETPROP && leftSide.getFirstChild (  ) .getType (  )  == Token.THIS )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[BugLab_Wrong_Operator]^if  ( leftSide.getType (  )  <= Token.NAME || leftSide.getType (  )  == Token.GETPROP && leftSide.getFirstChild (  ) .getType (  )  == Token.THIS )  {^278^279^280^^^263^293^if  ( leftSide.getType (  )  == Token.NAME || leftSide.getType (  )  == Token.GETPROP && leftSide.getFirstChild (  ) .getType (  )  == Token.THIS )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[BugLab_Wrong_Literal]^return true;^286^^^^^278^287^return false;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[BugLab_Variable_Misuse]^next = next.getNext (  ) ;^283^^^^^278^287^next = leftSide.getNext (  ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[BugLab_Variable_Misuse]^next = parent.getNext (  ) ;^283^^^^^278^287^next = leftSide.getNext (  ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[BugLab_Variable_Misuse]^parent = leftValue;^207^^^^^192^222^parent = next;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[BugLab_Variable_Misuse]^next = leftValue.getFirstChild (  ) ;^208^^^^^193^223^next = next.getFirstChild (  ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[BugLab_Variable_Misuse]^parent = leftValue.getFirstChild (  ) ;^213^^^^^198^228^parent = next.getFirstChild (  ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[BugLab_Variable_Misuse]^parent = leftValue;^282^^^^^267^297^parent = next;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[BugLab_Variable_Misuse]^next = value.getNext (  ) ;^283^^^^^268^298^next = leftSide.getNext (  ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[BugLab_Wrong_Literal]^return true;^217^^^^^202^232^return false;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[BugLab_Wrong_Literal]^return true;^240^^^^^225^255^return false;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[BugLab_Wrong_Literal]^return true;^262^^^^^247^277^return false;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[BugLab_Wrong_Literal]^return true;^286^^^^^271^301^return false;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[BugLab_Wrong_Literal]^return true;^291^^^^^276^306^return false;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[BugLab_Variable_Misuse]^Node leftSide = parent.getFirstChild (  ) ;^277^^^^^262^292^Node leftSide = next.getFirstChild (  ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[BugLab_Variable_Misuse]^switch  ( parent.getType (  )  )  {^199^^^^^184^214^switch  ( next.getType (  )  )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[BugLab_Variable_Misuse]^if  ( root.getFirstChild (  ) .hasChildren (  )  )  {^212^^^^^197^227^if  ( next.getFirstChild (  ) .hasChildren (  )  )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[BugLab_Variable_Misuse]^if  ( value.getFirstChild (  ) .hasChildren (  )  )  {^212^^^^^197^227^if  ( next.getFirstChild (  ) .hasChildren (  )  )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[BugLab_Variable_Misuse]^parent = parent.getFirstChild (  ) ;^213^^^^^198^228^parent = next.getFirstChild (  ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[BugLab_Variable_Misuse]^if  ( value.isQualifiedName (  )  )  {^221^^^^^206^236^if  ( next.isQualifiedName (  )  )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[BugLab_Variable_Misuse]^String valueName = next.getQualifiedName (  ) ;^222^^^^^207^237^String nextName = next.getQualifiedName (  ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[BugLab_Variable_Misuse]^nextName.equals ( root.getQualifiedName (  )  )  )  {^224^^^^^209^239^nextName.equals ( value.getQualifiedName (  )  )  )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[BugLab_Variable_Misuse]^exprParent.removeChild ( value ) ;^234^^^^^219^249^exprParent.removeChild ( expr ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[BugLab_Variable_Misuse]^expr.removeChild ( value ) ;^235^^^^^220^250^expr.removeChild ( assign ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[BugLab_Variable_Misuse]^parent.replaceChild ( parent, assign ) ;^236^^^^^221^251^parent.replaceChild ( next, assign ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[BugLab_Variable_Misuse]^parent.replaceChild ( next, root ) ;^236^^^^^221^251^parent.replaceChild ( next, assign ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[BugLab_Variable_Misuse]^if  ( leftValue.getType (  )  == next.getType (  )  )  {^247^^^^^232^262^if  ( value.getType (  )  == next.getType (  )  )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[BugLab_Variable_Misuse]^if  (  ( root.getType (  )  == Token.STRING || next.getType (  )  == Token.NUMBER )  && !next.isEquivalentTo ( value )  )  {^248^249^250^^^233^263^if  (  ( next.getType (  )  == Token.STRING || next.getType (  )  == Token.NUMBER )  && !next.isEquivalentTo ( value )  )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[BugLab_Variable_Misuse]^!next.isEquivalentTo ( root )  )  {^250^^^^^235^265^!next.isEquivalentTo ( value )  )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[BugLab_Variable_Misuse]^expr.removeChild ( value ) ;^258^^^^^243^273^expr.removeChild ( assign ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[BugLab_Variable_Misuse]^parent.replaceChild ( parent, assign ) ;^259^^^^^244^274^parent.replaceChild ( next, assign ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[BugLab_Variable_Misuse]^parent.replaceChild ( next, value ) ;^259^^^^^244^274^parent.replaceChild ( next, assign ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[BugLab_Variable_Misuse]^next = rightValue.getNext (  ) ;^283^^^^^268^298^next = leftSide.getNext (  ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[BugLab_Variable_Misuse]^next = rightValue.getFirstChild (  ) ;^214^^^^^199^229^next = parent.getFirstChild (  ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[BugLab_Variable_Misuse]^exprParent.removeChild ( rightValue ) ;^234^^^^^223^238^exprParent.removeChild ( expr ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[BugLab_Variable_Misuse]^expr.removeChild ( rightValue ) ;^235^^^^^223^238^expr.removeChild ( assign ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[BugLab_Variable_Misuse]^parent.replaceChild ( leftValue, assign ) ;^236^^^^^223^238^parent.replaceChild ( next, assign ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[BugLab_Variable_Misuse]^parent.replaceChild ( next, parent ) ;^236^^^^^223^238^parent.replaceChild ( next, assign ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[BugLab_Variable_Misuse]^if  ( !isSafeReplacement ( next, root )  )  {^230^^^^^215^245^if  ( !isSafeReplacement ( next, assign )  )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[BugLab_Variable_Misuse]^String rightValueName = next.getQualifiedName (  ) ;^222^^^^^207^237^String nextName = next.getQualifiedName (  ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[BugLab_Variable_Misuse]^exprParent.removeChild ( rightValue ) ;^234^^^^^219^249^exprParent.removeChild ( expr ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[BugLab_Variable_Misuse]^parent.replaceChild ( next, value ) ;^236^^^^^221^251^parent.replaceChild ( next, assign ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[BugLab_Variable_Misuse]^if  ( parent.isQualifiedName (  )  && nextName.equals ( value.getQualifiedName (  )  )  )  {^223^224^^^^208^238^if  ( value.isQualifiedName (  )  && nextName.equals ( value.getQualifiedName (  )  )  )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[BugLab_Variable_Misuse]^if  ( !isSafeReplacement ( value, assign )  )  {^230^^^^^223^238^if  ( !isSafeReplacement ( next, assign )  )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[BugLab_Variable_Misuse]^if  ( parent.getType (  )  == next.getType (  )  )  {^247^^^^^232^262^if  ( value.getType (  )  == next.getType (  )  )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[BugLab_Argument_Swapping]^if  ( next.getType (  )  == value.getType (  )  )  {^247^^^^^232^262^if  ( value.getType (  )  == next.getType (  )  )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[BugLab_Wrong_Operator]^if  ( value.getType (  )  < next.getType (  )  )  {^247^^^^^232^262^if  ( value.getType (  )  == next.getType (  )  )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[BugLab_Variable_Misuse]^if  (  ( next.getType (  )  == Token.STRING || next.getType (  )  == Token.NUMBER )  && !next.isEquivalentTo ( parent )  )  {^248^249^250^^^233^263^if  (  ( next.getType (  )  == Token.STRING || next.getType (  )  == Token.NUMBER )  && !next.isEquivalentTo ( value )  )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[BugLab_Variable_Misuse]^!next.isEquivalentTo ( parent )  )  {^250^^^^^235^265^!next.isEquivalentTo ( value )  )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[BugLab_Variable_Misuse]^exprParent.removeChild ( parent ) ;^257^^^^^242^272^exprParent.removeChild ( expr ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[BugLab_Variable_Misuse]^parent.replaceChild ( rightValue, assign ) ;^259^^^^^244^274^parent.replaceChild ( next, assign ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[BugLab_Variable_Misuse]^if  ( value.getType (  )  == Token.NAME || leftSide.getType (  )  == Token.GETPROP && leftSide.getFirstChild (  ) .getType (  )  == Token.THIS )  {^278^279^280^^^263^293^if  ( leftSide.getType (  )  == Token.NAME || leftSide.getType (  )  == Token.GETPROP && leftSide.getFirstChild (  ) .getType (  )  == Token.THIS )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[BugLab_Variable_Misuse]^parent = leftValue;^282^^^^^278^287^parent = next;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[BugLab_Variable_Misuse]^next = root.getNext (  ) ;^283^^^^^278^287^next = leftSide.getNext (  ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[BugLab_Variable_Misuse]^next = parent.getFirstChild (  ) ;^208^^^^^193^223^next = next.getFirstChild (  ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[BugLab_Variable_Misuse]^Node leftSide = value.getFirstChild (  ) ;^277^^^^^262^292^Node leftSide = next.getFirstChild (  ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[BugLab_Variable_Misuse]^if  ( root.isQualifiedName (  )  )  {^221^^^^^206^236^if  ( next.isQualifiedName (  )  )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[BugLab_Variable_Misuse]^String rootName = next.getQualifiedName (  ) ;^222^^^^^207^237^String nextName = next.getQualifiedName (  ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[BugLab_Variable_Misuse]^if  ( leftValue.isQualifiedName (  )  && nextName.equals ( value.getQualifiedName (  )  )  )  {^223^224^^^^208^238^if  ( value.isQualifiedName (  )  && nextName.equals ( value.getQualifiedName (  )  )  )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[BugLab_Variable_Misuse]^nextName.equals ( leftValue.getQualifiedName (  )  )  )  {^224^^^^^209^239^nextName.equals ( value.getQualifiedName (  )  )  )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[BugLab_Variable_Misuse]^exprParent.removeChild ( value ) ;^257^^^^^242^272^exprParent.removeChild ( expr ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[BugLab_Variable_Misuse]^expr.removeChild ( parent ) ;^258^^^^^243^273^expr.removeChild ( assign ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[BugLab_Variable_Misuse]^parent.replaceChild ( next, next ) ;^259^^^^^244^274^parent.replaceChild ( next, assign ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[BugLab_Variable_Misuse]^leftSide.getType (  )  == Token.GETPROP && rightValue.getFirstChild (  ) .getType (  )  == Token.THIS )  {^279^280^^^^264^294^leftSide.getType (  )  == Token.GETPROP && leftSide.getFirstChild (  ) .getType (  )  == Token.THIS )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[BugLab_Variable_Misuse]^next = root.getNext (  ) ;^283^^^^^268^298^next = leftSide.getNext (  ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[BugLab_Wrong_Literal]^return true;^295^^^^^280^310^return false;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[BugLab_Variable_Misuse]^if  ( next.getType (  )  == Token.NAME )  {^306^^^^^304^318^if  ( node.getType (  )  == Token.NAME )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] isSafeReplacement [RETURN_TYPE] boolean   Node node Node replacement [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  name  next  node  parent  replacement  rightValue  root  value  
[BugLab_Wrong_Operator]^if  ( node.getType (  )  >= Token.NAME )  {^306^^^^^304^318^if  ( node.getType (  )  == Token.NAME )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] isSafeReplacement [RETURN_TYPE] boolean   Node node Node replacement [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  name  next  node  parent  replacement  rightValue  root  value  
[BugLab_Wrong_Literal]^return false;^307^^^^^304^318^return true;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] isSafeReplacement [RETURN_TYPE] boolean   Node node Node replacement [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  name  next  node  parent  replacement  rightValue  root  value  
[BugLab_Variable_Misuse]^if  ( name.getType (  )  == Token.NAME )  {^306^^^^^304^318^if  ( node.getType (  )  == Token.NAME )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] isSafeReplacement [RETURN_TYPE] boolean   Node node Node replacement [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  name  next  node  parent  replacement  rightValue  root  value  
[BugLab_Variable_Misuse]^Preconditions.checkArgument ( replacement.getType (  )  == Token.GETPROP ) ;^309^^^^^304^318^Preconditions.checkArgument ( node.getType (  )  == Token.GETPROP ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] isSafeReplacement [RETURN_TYPE] boolean   Node node Node replacement [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  name  next  node  parent  replacement  rightValue  root  value  
[BugLab_Wrong_Operator]^Preconditions.checkArgument ( node.getType (  )  != Token.GETPROP ) ;^309^^^^^304^318^Preconditions.checkArgument ( node.getType (  )  == Token.GETPROP ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] isSafeReplacement [RETURN_TYPE] boolean   Node node Node replacement [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  name  next  node  parent  replacement  rightValue  root  value  
[BugLab_Variable_Misuse]^Node name = replacement.getFirstChild (  ) ;^311^^^^^304^318^Node name = node.getFirstChild (  ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] isSafeReplacement [RETURN_TYPE] boolean   Node node Node replacement [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  name  next  node  parent  replacement  rightValue  root  value  
[BugLab_Variable_Misuse]^Node name = value.getFirstChild (  ) ;^311^^^^^304^318^Node name = node.getFirstChild (  ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] isSafeReplacement [RETURN_TYPE] boolean   Node node Node replacement [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  name  next  node  parent  replacement  rightValue  root  value  
[BugLab_Variable_Misuse]^if  ( node.getType (  )  == Token.NAME && isNameAssignedTo ( name.getString (  ) , replacement )  )  {^312^313^^^^304^318^if  ( name.getType (  )  == Token.NAME && isNameAssignedTo ( name.getString (  ) , replacement )  )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] isSafeReplacement [RETURN_TYPE] boolean   Node node Node replacement [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  name  next  node  parent  replacement  rightValue  root  value  
[BugLab_Argument_Swapping]^if  ( replacement.getType (  )  == Token.NAME && isNameAssignedTo ( name.getString (  ) , name )  )  {^312^313^^^^304^318^if  ( name.getType (  )  == Token.NAME && isNameAssignedTo ( name.getString (  ) , replacement )  )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] isSafeReplacement [RETURN_TYPE] boolean   Node node Node replacement [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  name  next  node  parent  replacement  rightValue  root  value  
[BugLab_Wrong_Operator]^if  ( name.getType (  )  == Token.NAME || isNameAssignedTo ( name.getString (  ) , replacement )  )  {^312^313^^^^304^318^if  ( name.getType (  )  == Token.NAME && isNameAssignedTo ( name.getString (  ) , replacement )  )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] isSafeReplacement [RETURN_TYPE] boolean   Node node Node replacement [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  name  next  node  parent  replacement  rightValue  root  value  
[BugLab_Wrong_Operator]^if  ( name.getType (  )  >= Token.NAME && isNameAssignedTo ( name.getString (  ) , replacement )  )  {^312^313^^^^304^318^if  ( name.getType (  )  == Token.NAME && isNameAssignedTo ( name.getString (  ) , replacement )  )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] isSafeReplacement [RETURN_TYPE] boolean   Node node Node replacement [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  name  next  node  parent  replacement  rightValue  root  value  
[BugLab_Wrong_Literal]^return true;^314^^^^^304^318^return false;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] isSafeReplacement [RETURN_TYPE] boolean   Node node Node replacement [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  name  next  node  parent  replacement  rightValue  root  value  
[BugLab_Variable_Misuse]^&& isNameAssignedTo ( next.getString (  ) , replacement )  )  {^313^^^^^304^318^&& isNameAssignedTo ( name.getString (  ) , replacement )  )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] isSafeReplacement [RETURN_TYPE] boolean   Node node Node replacement [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  name  next  node  parent  replacement  rightValue  root  value  
[BugLab_Variable_Misuse]^&& isNameAssignedTo ( name.getString (  ) , next )  )  {^313^^^^^304^318^&& isNameAssignedTo ( name.getString (  ) , replacement )  )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] isSafeReplacement [RETURN_TYPE] boolean   Node node Node replacement [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  name  next  node  parent  replacement  rightValue  root  value  
[BugLab_Argument_Swapping]^&& isNameAssignedTo ( replacement.getString (  ) , name )  )  {^313^^^^^304^318^&& isNameAssignedTo ( name.getString (  ) , replacement )  )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] isSafeReplacement [RETURN_TYPE] boolean   Node node Node replacement [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  name  next  node  parent  replacement  rightValue  root  value  
[BugLab_Variable_Misuse]^&& isNameAssignedTo ( node.getString (  ) , replacement )  )  {^313^^^^^304^318^&& isNameAssignedTo ( name.getString (  ) , replacement )  )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] isSafeReplacement [RETURN_TYPE] boolean   Node node Node replacement [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  name  next  node  parent  replacement  rightValue  root  value  
[BugLab_Wrong_Literal]^return false;^317^^^^^304^318^return true;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] isSafeReplacement [RETURN_TYPE] boolean   Node node Node replacement [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  name  next  node  parent  replacement  rightValue  root  value  
[BugLab_Argument_Swapping]^if  ( isNameAssignedTo ( c, name )  )  {^325^^^^^323^340^if  ( isNameAssignedTo ( name, c )  )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] isNameAssignedTo [RETURN_TYPE] boolean   String name Node node [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  name  boolean  Node  assign  c  expr  exprParent  externs  firstVarNode  leftSide  leftValue  name  next  node  parent  replacement  rightValue  root  value  
[BugLab_Wrong_Literal]^return false;^326^^^^^323^340^return true;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] isNameAssignedTo [RETURN_TYPE] boolean   String name Node node [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  name  boolean  Node  assign  c  expr  exprParent  externs  firstVarNode  leftSide  leftValue  name  next  node  parent  replacement  rightValue  root  value  
[BugLab_Variable_Misuse]^for  ( Node c = next.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  {^324^^^^^323^340^for  ( Node c = node.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] isNameAssignedTo [RETURN_TYPE] boolean   String name Node node [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  name  boolean  Node  assign  c  expr  exprParent  externs  firstVarNode  leftSide  leftValue  name  next  node  parent  replacement  rightValue  root  value  
[BugLab_Variable_Misuse]^for  ( Node parent = node.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  {^324^^^^^323^340^for  ( Node c = node.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] isNameAssignedTo [RETURN_TYPE] boolean   String name Node node [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  name  boolean  Node  assign  c  expr  exprParent  externs  firstVarNode  leftSide  leftValue  name  next  node  parent  replacement  rightValue  root  value  
[BugLab_Argument_Swapping]^for  ( Node node = c.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  {^324^^^^^323^340^for  ( Node c = node.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] isNameAssignedTo [RETURN_TYPE] boolean   String name Node node [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  name  boolean  Node  assign  c  expr  exprParent  externs  firstVarNode  leftSide  leftValue  name  next  node  parent  replacement  rightValue  root  value  
[BugLab_Wrong_Operator]^for  ( Node c = node.getFirstChild (  ) ; c == null; c = c.getNext (  )  )  {^324^^^^^323^340^for  ( Node c = node.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] isNameAssignedTo [RETURN_TYPE] boolean   String name Node node [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  name  boolean  Node  assign  c  expr  exprParent  externs  firstVarNode  leftSide  leftValue  name  next  node  parent  replacement  rightValue  root  value  
[BugLab_Variable_Misuse]^if  ( isNameAssignedTo ( name, value )  )  {^325^^^^^323^340^if  ( isNameAssignedTo ( name, c )  )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] isNameAssignedTo [RETURN_TYPE] boolean   String name Node node [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  name  boolean  Node  assign  c  expr  exprParent  externs  firstVarNode  leftSide  leftValue  name  next  node  parent  replacement  rightValue  root  value  
[BugLab_Variable_Misuse]^if  ( isNameAssignedTo ( name, rightValue )  )  {^325^^^^^323^340^if  ( isNameAssignedTo ( name, c )  )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] isNameAssignedTo [RETURN_TYPE] boolean   String name Node node [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  name  boolean  Node  assign  c  expr  exprParent  externs  firstVarNode  leftSide  leftValue  name  next  node  parent  replacement  rightValue  root  value  
[BugLab_Variable_Misuse]^for  ( Node next = node.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  {^324^^^^^323^340^for  ( Node c = node.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] isNameAssignedTo [RETURN_TYPE] boolean   String name Node node [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  name  boolean  Node  assign  c  expr  exprParent  externs  firstVarNode  leftSide  leftValue  name  next  node  parent  replacement  rightValue  root  value  
[BugLab_Variable_Misuse]^for  ( Node c = name.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  {^324^^^^^323^340^for  ( Node c = node.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] isNameAssignedTo [RETURN_TYPE] boolean   String name Node node [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  name  boolean  Node  assign  c  expr  exprParent  externs  firstVarNode  leftSide  leftValue  name  next  node  parent  replacement  rightValue  root  value  
[BugLab_Variable_Misuse]^for  ( Node node = node.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  {^324^^^^^323^340^for  ( Node c = node.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] isNameAssignedTo [RETURN_TYPE] boolean   String name Node node [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  name  boolean  Node  assign  c  expr  exprParent  externs  firstVarNode  leftSide  leftValue  name  next  node  parent  replacement  rightValue  root  value  
[BugLab_Variable_Misuse]^if  ( root.getType (  )  == Token.NAME )  {^330^^^^^323^340^if  ( node.getType (  )  == Token.NAME )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] isNameAssignedTo [RETURN_TYPE] boolean   String name Node node [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  name  boolean  Node  assign  c  expr  exprParent  externs  firstVarNode  leftSide  leftValue  name  next  node  parent  replacement  rightValue  root  value  
[BugLab_Wrong_Operator]^if  ( node.getType (  )  <= Token.NAME )  {^330^^^^^323^340^if  ( node.getType (  )  == Token.NAME )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] isNameAssignedTo [RETURN_TYPE] boolean   String name Node node [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  name  boolean  Node  assign  c  expr  exprParent  externs  firstVarNode  leftSide  leftValue  name  next  node  parent  replacement  rightValue  root  value  
[BugLab_Wrong_Operator]^if  ( node.getType (  )  != Token.NAME )  {^330^^^^^323^340^if  ( node.getType (  )  == Token.NAME )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] isNameAssignedTo [RETURN_TYPE] boolean   String name Node node [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  name  boolean  Node  assign  c  expr  exprParent  externs  firstVarNode  leftSide  leftValue  name  next  node  parent  replacement  rightValue  root  value  
[BugLab_Wrong_Operator]^if  ( node.getType (  )  >= Token.NAME )  {^330^^^^^323^340^if  ( node.getType (  )  == Token.NAME )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] isNameAssignedTo [RETURN_TYPE] boolean   String name Node node [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  name  boolean  Node  assign  c  expr  exprParent  externs  firstVarNode  leftSide  leftValue  name  next  node  parent  replacement  rightValue  root  value  
[BugLab_Variable_Misuse]^if  ( replacement.getType (  )  == Token.ASSIGN && parent.getFirstChild (  )  == node )  {^332^^^^^323^340^if  ( parent.getType (  )  == Token.ASSIGN && parent.getFirstChild (  )  == node )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] isNameAssignedTo [RETURN_TYPE] boolean   String name Node node [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  name  boolean  Node  assign  c  expr  exprParent  externs  firstVarNode  leftSide  leftValue  name  next  node  parent  replacement  rightValue  root  value  
[BugLab_Variable_Misuse]^if  ( parent.getType (  )  == Token.ASSIGN && parent.getFirstChild (  )  == name )  {^332^^^^^323^340^if  ( parent.getType (  )  == Token.ASSIGN && parent.getFirstChild (  )  == node )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] isNameAssignedTo [RETURN_TYPE] boolean   String name Node node [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  name  boolean  Node  assign  c  expr  exprParent  externs  firstVarNode  leftSide  leftValue  name  next  node  parent  replacement  rightValue  root  value  
[BugLab_Argument_Swapping]^if  ( node.getType (  )  == Token.ASSIGN && parent.getFirstChild (  )  == parent )  {^332^^^^^323^340^if  ( parent.getType (  )  == Token.ASSIGN && parent.getFirstChild (  )  == node )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] isNameAssignedTo [RETURN_TYPE] boolean   String name Node node [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  name  boolean  Node  assign  c  expr  exprParent  externs  firstVarNode  leftSide  leftValue  name  next  node  parent  replacement  rightValue  root  value  
[BugLab_Wrong_Operator]^if  ( parent.getType (  )  == Token.ASSIGN || parent.getFirstChild (  )  == node )  {^332^^^^^323^340^if  ( parent.getType (  )  == Token.ASSIGN && parent.getFirstChild (  )  == node )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] isNameAssignedTo [RETURN_TYPE] boolean   String name Node node [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  name  boolean  Node  assign  c  expr  exprParent  externs  firstVarNode  leftSide  leftValue  name  next  node  parent  replacement  rightValue  root  value  
[BugLab_Wrong_Operator]^if  ( parent.getType (  )  <= Token.ASSIGN && parent.getFirstChild (  )  == node )  {^332^^^^^323^340^if  ( parent.getType (  )  == Token.ASSIGN && parent.getFirstChild (  )  == node )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] isNameAssignedTo [RETURN_TYPE] boolean   String name Node node [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  name  boolean  Node  assign  c  expr  exprParent  externs  firstVarNode  leftSide  leftValue  name  next  node  parent  replacement  rightValue  root  value  
[BugLab_Wrong_Operator]^if  ( parent.getType (  )  == Token.ASSIGN && parent.getFirstChild (  )  != node )  {^332^^^^^323^340^if  ( parent.getType (  )  == Token.ASSIGN && parent.getFirstChild (  )  == node )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] isNameAssignedTo [RETURN_TYPE] boolean   String name Node node [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  name  boolean  Node  assign  c  expr  exprParent  externs  firstVarNode  leftSide  leftValue  name  next  node  parent  replacement  rightValue  root  value  
[BugLab_Variable_Misuse]^if  ( name.equals ( replacement.getString (  )  )  )  {^333^^^^^323^340^if  ( name.equals ( node.getString (  )  )  )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] isNameAssignedTo [RETURN_TYPE] boolean   String name Node node [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  name  boolean  Node  assign  c  expr  exprParent  externs  firstVarNode  leftSide  leftValue  name  next  node  parent  replacement  rightValue  root  value  
[BugLab_Argument_Swapping]^if  ( node.equals ( name.getString (  )  )  )  {^333^^^^^323^340^if  ( name.equals ( node.getString (  )  )  )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] isNameAssignedTo [RETURN_TYPE] boolean   String name Node node [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  name  boolean  Node  assign  c  expr  exprParent  externs  firstVarNode  leftSide  leftValue  name  next  node  parent  replacement  rightValue  root  value  
[BugLab_Wrong_Literal]^return false;^334^^^^^323^340^return true;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] isNameAssignedTo [RETURN_TYPE] boolean   String name Node node [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  name  boolean  Node  assign  c  expr  exprParent  externs  firstVarNode  leftSide  leftValue  name  next  node  parent  replacement  rightValue  root  value  
[BugLab_Variable_Misuse]^if  ( name.equals ( rightValue.getString (  )  )  )  {^333^^^^^323^340^if  ( name.equals ( node.getString (  )  )  )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] isNameAssignedTo [RETURN_TYPE] boolean   String name Node node [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  name  boolean  Node  assign  c  expr  exprParent  externs  firstVarNode  leftSide  leftValue  name  next  node  parent  replacement  rightValue  root  value  
[BugLab_Variable_Misuse]^if  ( name.equals ( next.getString (  )  )  )  {^333^^^^^323^340^if  ( name.equals ( node.getString (  )  )  )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] isNameAssignedTo [RETURN_TYPE] boolean   String name Node node [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  name  boolean  Node  assign  c  expr  exprParent  externs  firstVarNode  leftSide  leftValue  name  next  node  parent  replacement  rightValue  root  value  
[BugLab_Variable_Misuse]^Node parent = name.getParent (  ) ;^331^^^^^323^340^Node parent = node.getParent (  ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] isNameAssignedTo [RETURN_TYPE] boolean   String name Node node [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  name  boolean  Node  assign  c  expr  exprParent  externs  firstVarNode  leftSide  leftValue  name  next  node  parent  replacement  rightValue  root  value  
[BugLab_Variable_Misuse]^if  ( next.getType (  )  == Token.ASSIGN && parent.getFirstChild (  )  == node )  {^332^^^^^323^340^if  ( parent.getType (  )  == Token.ASSIGN && parent.getFirstChild (  )  == node )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] isNameAssignedTo [RETURN_TYPE] boolean   String name Node node [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  name  boolean  Node  assign  c  expr  exprParent  externs  firstVarNode  leftSide  leftValue  name  next  node  parent  replacement  rightValue  root  value  
[BugLab_Variable_Misuse]^if  ( node.getType (  )  == Token.ASSIGN && parent.getFirstChild (  )  == node )  {^332^^^^^323^340^if  ( parent.getType (  )  == Token.ASSIGN && parent.getFirstChild (  )  == node )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] isNameAssignedTo [RETURN_TYPE] boolean   String name Node node [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  name  boolean  Node  assign  c  expr  exprParent  externs  firstVarNode  leftSide  leftValue  name  next  node  parent  replacement  rightValue  root  value  
[BugLab_Variable_Misuse]^if  ( root.getType (  )  == Token.ASSIGN && parent.getFirstChild (  )  == node )  {^332^^^^^323^340^if  ( parent.getType (  )  == Token.ASSIGN && parent.getFirstChild (  )  == node )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] isNameAssignedTo [RETURN_TYPE] boolean   String name Node node [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  name  boolean  Node  assign  c  expr  exprParent  externs  firstVarNode  leftSide  leftValue  name  next  node  parent  replacement  rightValue  root  value  
[BugLab_Wrong_Operator]^if  ( parent.getType (  )  != Token.ASSIGN && parent.getFirstChild (  )  == node )  {^332^^^^^323^340^if  ( parent.getType (  )  == Token.ASSIGN && parent.getFirstChild (  )  == node )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] isNameAssignedTo [RETURN_TYPE] boolean   String name Node node [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  name  boolean  Node  assign  c  expr  exprParent  externs  firstVarNode  leftSide  leftValue  name  next  node  parent  replacement  rightValue  root  value  
[BugLab_Variable_Misuse]^if  ( name.equals ( root.getString (  )  )  )  {^333^^^^^323^340^if  ( name.equals ( node.getString (  )  )  )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] isNameAssignedTo [RETURN_TYPE] boolean   String name Node node [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  name  boolean  Node  assign  c  expr  exprParent  externs  firstVarNode  leftSide  leftValue  name  next  node  parent  replacement  rightValue  root  value  
[BugLab_Variable_Misuse]^if  ( name.equals ( parent.getString (  )  )  )  {^333^^^^^323^340^if  ( name.equals ( node.getString (  )  )  )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] isNameAssignedTo [RETURN_TYPE] boolean   String name Node node [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  name  boolean  Node  assign  c  expr  exprParent  externs  firstVarNode  leftSide  leftValue  name  next  node  parent  replacement  rightValue  root  value  
[BugLab_Variable_Misuse]^if  ( parent.getType (  )  == Token.NAME )  {^330^^^^^323^340^if  ( node.getType (  )  == Token.NAME )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] isNameAssignedTo [RETURN_TYPE] boolean   String name Node node [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  name  boolean  Node  assign  c  expr  exprParent  externs  firstVarNode  leftSide  leftValue  name  next  node  parent  replacement  rightValue  root  value  
[BugLab_Variable_Misuse]^if  ( name.getType (  )  == Token.ASSIGN && parent.getFirstChild (  )  == node )  {^332^^^^^323^340^if  ( parent.getType (  )  == Token.ASSIGN && parent.getFirstChild (  )  == node )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] isNameAssignedTo [RETURN_TYPE] boolean   String name Node node [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  name  boolean  Node  assign  c  expr  exprParent  externs  firstVarNode  leftSide  leftValue  name  next  node  parent  replacement  rightValue  root  value  
[BugLab_Wrong_Literal]^return true;^339^^^^^323^340^return false;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] isNameAssignedTo [RETURN_TYPE] boolean   String name Node node [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  name  boolean  Node  assign  c  expr  exprParent  externs  firstVarNode  leftSide  leftValue  name  next  node  parent  replacement  rightValue  root  value  
[BugLab_Variable_Misuse]^if  ( next.getType (  )  != Token.VAR )  return;^351^^^^^349^378^if  ( n.getType (  )  != Token.VAR )  return;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  hasNodesToCollapse  NodeTraversal  t  Node  assign  c  expr  exprParent  externs  firstVarNode  leftSide  leftValue  n  name  next  node  parent  replacement  rightValue  root  value  varNode  
[BugLab_Wrong_Operator]^if  ( n.getType (  )  == Token.VAR )  return;^351^^^^^349^378^if  ( n.getType (  )  != Token.VAR )  return;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  hasNodesToCollapse  NodeTraversal  t  Node  assign  c  expr  exprParent  externs  firstVarNode  leftSide  leftValue  n  name  next  node  parent  replacement  rightValue  root  value  varNode  
[BugLab_Variable_Misuse]^if  ( varNode.getType (  )  != Token.VAR )  return;^351^^^^^349^378^if  ( n.getType (  )  != Token.VAR )  return;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  hasNodesToCollapse  NodeTraversal  t  Node  assign  c  expr  exprParent  externs  firstVarNode  leftSide  leftValue  n  name  next  node  parent  replacement  rightValue  root  value  varNode  
[BugLab_Variable_Misuse]^if  ( nextodesToCollapse.contains ( n )  )  return;^354^^^^^349^378^if  ( nodesToCollapse.contains ( n )  )  return;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  hasNodesToCollapse  NodeTraversal  t  Node  assign  c  expr  exprParent  externs  firstVarNode  leftSide  leftValue  n  name  next  node  parent  replacement  rightValue  root  value  varNode  
[BugLab_Argument_Swapping]^if  ( nodesToCollapseodesToCollapse.contains ( n )  )  return;^354^^^^^349^378^if  ( nodesToCollapse.contains ( n )  )  return;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  hasNodesToCollapse  NodeTraversal  t  Node  assign  c  expr  exprParent  externs  firstVarNode  leftSide  leftValue  n  name  next  node  parent  replacement  rightValue  root  value  varNode  
[BugLab_Argument_Swapping]^if  ( n.contains ( nodesToCollapse )  )  return;^354^^^^^349^378^if  ( nodesToCollapse.contains ( n )  )  return;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  hasNodesToCollapse  NodeTraversal  t  Node  assign  c  expr  exprParent  externs  firstVarNode  leftSide  leftValue  n  name  next  node  parent  replacement  rightValue  root  value  varNode  
[BugLab_Variable_Misuse]^if  ( nodeodesToCollapse.contains ( n )  )  return;^354^^^^^349^378^if  ( nodesToCollapse.contains ( n )  )  return;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  hasNodesToCollapse  NodeTraversal  t  Node  assign  c  expr  exprParent  externs  firstVarNode  leftSide  leftValue  n  name  next  node  parent  replacement  rightValue  root  value  varNode  
[BugLab_Variable_Misuse]^if  ( replacement.getType (  )  == Token.IF )  return;^358^^^^^349^378^if  ( parent.getType (  )  == Token.IF )  return;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  hasNodesToCollapse  NodeTraversal  t  Node  assign  c  expr  exprParent  externs  firstVarNode  leftSide  leftValue  n  name  next  node  parent  replacement  rightValue  root  value  varNode  
[BugLab_Wrong_Operator]^if  ( parent.getType (  )  != Token.IF )  return;^358^^^^^349^378^if  ( parent.getType (  )  == Token.IF )  return;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  hasNodesToCollapse  NodeTraversal  t  Node  assign  c  expr  exprParent  externs  firstVarNode  leftSide  leftValue  n  name  next  node  parent  replacement  rightValue  root  value  varNode  
[BugLab_Variable_Misuse]^if  ( varNode.getType (  )  == Token.IF )  return;^358^^^^^349^378^if  ( parent.getType (  )  == Token.IF )  return;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  hasNodesToCollapse  NodeTraversal  t  Node  assign  c  expr  exprParent  externs  firstVarNode  leftSide  leftValue  n  name  next  node  parent  replacement  rightValue  root  value  varNode  
[BugLab_Variable_Misuse]^Node varNode = parent;^360^^^^^349^378^Node varNode = n;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  hasNodesToCollapse  NodeTraversal  t  Node  assign  c  expr  exprParent  externs  firstVarNode  leftSide  leftValue  n  name  next  node  parent  replacement  rightValue  root  value  varNode  
[BugLab_Variable_Misuse]^n = parent.getNext (  ) ;^363^^^^^349^378^n = n.getNext (  ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  hasNodesToCollapse  NodeTraversal  t  Node  assign  c  expr  exprParent  externs  firstVarNode  leftSide  leftValue  n  name  next  node  parent  replacement  rightValue  root  value  varNode  
[BugLab_Variable_Misuse]^n = root.getNext (  ) ;^363^^^^^349^378^n = n.getNext (  ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  hasNodesToCollapse  NodeTraversal  t  Node  assign  c  expr  exprParent  externs  firstVarNode  leftSide  leftValue  n  name  next  node  parent  replacement  rightValue  root  value  varNode  
[BugLab_Wrong_Literal]^boolean hasNodesToCollapse = true;^365^^^^^349^378^boolean hasNodesToCollapse = false;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  hasNodesToCollapse  NodeTraversal  t  Node  assign  c  expr  exprParent  externs  firstVarNode  leftSide  leftValue  n  name  next  node  parent  replacement  rightValue  root  value  varNode  
[BugLab_Wrong_Operator]^while  ( n != null || n.getType (  )  == Token.VAR )  {^366^^^^^349^378^while  ( n != null && n.getType (  )  == Token.VAR )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  hasNodesToCollapse  NodeTraversal  t  Node  assign  c  expr  exprParent  externs  firstVarNode  leftSide  leftValue  n  name  next  node  parent  replacement  rightValue  root  value  varNode  
[BugLab_Wrong_Operator]^while  ( n == null && n.getType (  )  == Token.VAR )  {^366^^^^^349^378^while  ( n != null && n.getType (  )  == Token.VAR )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  hasNodesToCollapse  NodeTraversal  t  Node  assign  c  expr  exprParent  externs  firstVarNode  leftSide  leftValue  n  name  next  node  parent  replacement  rightValue  root  value  varNode  
[BugLab_Wrong_Operator]^while  ( n != null && n.getType (  )  != Token.VAR )  {^366^^^^^349^378^while  ( n != null && n.getType (  )  == Token.VAR )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  hasNodesToCollapse  NodeTraversal  t  Node  assign  c  expr  exprParent  externs  firstVarNode  leftSide  leftValue  n  name  next  node  parent  replacement  rightValue  root  value  varNode  
[BugLab_Wrong_Literal]^hasNodesToCollapse = false;^368^^^^^349^378^hasNodesToCollapse = true;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  hasNodesToCollapse  NodeTraversal  t  Node  assign  c  expr  exprParent  externs  firstVarNode  leftSide  leftValue  n  name  next  node  parent  replacement  rightValue  root  value  varNode  
[BugLab_Variable_Misuse]^n = next.getNext (  ) ;^370^^^^^349^378^n = n.getNext (  ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  hasNodesToCollapse  NodeTraversal  t  Node  assign  c  expr  exprParent  externs  firstVarNode  leftSide  leftValue  n  name  next  node  parent  replacement  rightValue  root  value  varNode  
[BugLab_Variable_Misuse]^nodesToCollapse.add ( varNode ) ;^367^^^^^349^378^nodesToCollapse.add ( n ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  hasNodesToCollapse  NodeTraversal  t  Node  assign  c  expr  exprParent  externs  firstVarNode  leftSide  leftValue  n  name  next  node  parent  replacement  rightValue  root  value  varNode  
[BugLab_Variable_Misuse]^n = parent.getNext (  ) ;^370^^^^^349^378^n = n.getNext (  ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  hasNodesToCollapse  NodeTraversal  t  Node  assign  c  expr  exprParent  externs  firstVarNode  leftSide  leftValue  n  name  next  node  parent  replacement  rightValue  root  value  varNode  
[BugLab_Variable_Misuse]^while  ( parent != null && n.getType (  )  == Token.VAR )  {^366^^^^^349^378^while  ( n != null && n.getType (  )  == Token.VAR )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  hasNodesToCollapse  NodeTraversal  t  Node  assign  c  expr  exprParent  externs  firstVarNode  leftSide  leftValue  n  name  next  node  parent  replacement  rightValue  root  value  varNode  
[BugLab_Variable_Misuse]^nodesToCollapse.add ( next ) ;^367^^^^^349^378^nodesToCollapse.add ( n ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  hasNodesToCollapse  NodeTraversal  t  Node  assign  c  expr  exprParent  externs  firstVarNode  leftSide  leftValue  n  name  next  node  parent  replacement  rightValue  root  value  varNode  
[BugLab_Variable_Misuse]^collapses.add ( new Collapse ( replacement, parent )  ) ;^375^^^^^349^378^collapses.add ( new Collapse ( varNode, parent )  ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  hasNodesToCollapse  NodeTraversal  t  Node  assign  c  expr  exprParent  externs  firstVarNode  leftSide  leftValue  n  name  next  node  parent  replacement  rightValue  root  value  varNode  
[BugLab_Variable_Misuse]^collapses.add ( new Collapse ( varNode, name )  ) ;^375^^^^^349^378^collapses.add ( new Collapse ( varNode, parent )  ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  hasNodesToCollapse  NodeTraversal  t  Node  assign  c  expr  exprParent  externs  firstVarNode  leftSide  leftValue  n  name  next  node  parent  replacement  rightValue  root  value  varNode  
[BugLab_Argument_Swapping]^collapses.add ( new Collapse ( parent, varNode )  ) ;^375^^^^^349^378^collapses.add ( new Collapse ( varNode, parent )  ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  hasNodesToCollapse  NodeTraversal  t  Node  assign  c  expr  exprParent  externs  firstVarNode  leftSide  leftValue  n  name  next  node  parent  replacement  rightValue  root  value  varNode  
[BugLab_Variable_Misuse]^nodesToCollapse.add ( name ) ;^374^^^^^349^378^nodesToCollapse.add ( varNode ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  hasNodesToCollapse  NodeTraversal  t  Node  assign  c  expr  exprParent  externs  firstVarNode  leftSide  leftValue  n  name  next  node  parent  replacement  rightValue  root  value  varNode  
[BugLab_Variable_Misuse]^collapses.add ( new Collapse ( varNode, value )  ) ;^375^^^^^349^378^collapses.add ( new Collapse ( varNode, parent )  ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  hasNodesToCollapse  NodeTraversal  t  Node  assign  c  expr  exprParent  externs  firstVarNode  leftSide  leftValue  n  name  next  node  parent  replacement  rightValue  root  value  varNode  
[BugLab_Variable_Misuse]^collapses.add ( new Collapse ( next, parent )  ) ;^375^^^^^349^378^collapses.add ( new Collapse ( varNode, parent )  ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  hasNodesToCollapse  NodeTraversal  t  Node  assign  c  expr  exprParent  externs  firstVarNode  leftSide  leftValue  n  name  next  node  parent  replacement  rightValue  root  value  varNode  
[BugLab_Variable_Misuse]^collapses.add ( new Collapse ( varNode, next )  ) ;^375^^^^^349^378^collapses.add ( new Collapse ( varNode, parent )  ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  hasNodesToCollapse  NodeTraversal  t  Node  assign  c  expr  exprParent  externs  firstVarNode  leftSide  leftValue  n  name  next  node  parent  replacement  rightValue  root  value  varNode  
[BugLab_Variable_Misuse]^collapses.add ( new Collapse ( varNode, node )  ) ;^375^^^^^349^378^collapses.add ( new Collapse ( varNode, parent )  ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  hasNodesToCollapse  NodeTraversal  t  Node  assign  c  expr  exprParent  externs  firstVarNode  leftSide  leftValue  n  name  next  node  parent  replacement  rightValue  root  value  varNode  
[BugLab_Variable_Misuse]^while  ( node.getNext (  )  != null && first.getNext (  ) .getType (  )  == Token.VAR )  {^384^385^^^^381^392^while  ( first.getNext (  )  != null && first.getNext (  ) .getType (  )  == Token.VAR )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] applyCollapses [RETURN_TYPE] void   [VARIABLES] Collapse  collapse  AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  Node  assign  c  expr  exprParent  externs  first  firstVarNode  leftSide  leftValue  n  name  next  node  parent  replacement  rightValue  root  value  varNode  
[BugLab_Wrong_Operator]^while  ( first.getNext (  )  != null || first.getNext (  ) .getType (  )  == Token.VAR )  {^384^385^^^^381^392^while  ( first.getNext (  )  != null && first.getNext (  ) .getType (  )  == Token.VAR )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] applyCollapses [RETURN_TYPE] void   [VARIABLES] Collapse  collapse  AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  Node  assign  c  expr  exprParent  externs  first  firstVarNode  leftSide  leftValue  n  name  next  node  parent  replacement  rightValue  root  value  varNode  
[BugLab_Wrong_Operator]^while  ( first.getNext (  )  == null && first.getNext (  ) .getType (  )  == Token.VAR )  {^384^385^^^^381^392^while  ( first.getNext (  )  != null && first.getNext (  ) .getType (  )  == Token.VAR )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] applyCollapses [RETURN_TYPE] void   [VARIABLES] Collapse  collapse  AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  Node  assign  c  expr  exprParent  externs  first  firstVarNode  leftSide  leftValue  n  name  next  node  parent  replacement  rightValue  root  value  varNode  
[BugLab_Wrong_Operator]^while  ( first.getNext (  )  != null && first.getNext (  ) .getType (  )  != Token.VAR )  {^384^385^^^^381^392^while  ( first.getNext (  )  != null && first.getNext (  ) .getType (  )  == Token.VAR )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] applyCollapses [RETURN_TYPE] void   [VARIABLES] Collapse  collapse  AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  Node  assign  c  expr  exprParent  externs  first  firstVarNode  leftSide  leftValue  n  name  next  node  parent  replacement  rightValue  root  value  varNode  
[BugLab_Variable_Misuse]^Node next = collapse.parent.removeChildAfter ( parent ) ;^386^^^^^381^392^Node next = collapse.parent.removeChildAfter ( first ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] applyCollapses [RETURN_TYPE] void   [VARIABLES] Collapse  collapse  AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  Node  assign  c  expr  exprParent  externs  first  firstVarNode  leftSide  leftValue  n  name  next  node  parent  replacement  rightValue  root  value  varNode  
[BugLab_Variable_Misuse]^Node next = name.removeChildAfter ( first ) ;^386^^^^^381^392^Node next = collapse.parent.removeChildAfter ( first ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] applyCollapses [RETURN_TYPE] void   [VARIABLES] Collapse  collapse  AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  Node  assign  c  expr  exprParent  externs  first  firstVarNode  leftSide  leftValue  n  name  next  node  parent  replacement  rightValue  root  value  varNode  
[BugLab_Argument_Swapping]^Node next = collapse.parent.parent.removeChildAfter ( first ) ;^386^^^^^381^392^Node next = collapse.parent.removeChildAfter ( first ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] applyCollapses [RETURN_TYPE] void   [VARIABLES] Collapse  collapse  AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  Node  assign  c  expr  exprParent  externs  first  firstVarNode  leftSide  leftValue  n  name  next  node  parent  replacement  rightValue  root  value  varNode  
[BugLab_Argument_Swapping]^Node next = first.removeChildAfter ( collapse.parent ) ;^386^^^^^381^392^Node next = collapse.parent.removeChildAfter ( first ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] applyCollapses [RETURN_TYPE] void   [VARIABLES] Collapse  collapse  AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  Node  assign  c  expr  exprParent  externs  first  firstVarNode  leftSide  leftValue  n  name  next  node  parent  replacement  rightValue  root  value  varNode  
[BugLab_Variable_Misuse]^Node next = collapse.parent.removeChildAfter ( replacement ) ;^386^^^^^381^392^Node next = collapse.parent.removeChildAfter ( first ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] applyCollapses [RETURN_TYPE] void   [VARIABLES] Collapse  collapse  AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  Node  assign  c  expr  exprParent  externs  first  firstVarNode  leftSide  leftValue  n  name  next  node  parent  replacement  rightValue  root  value  varNode  
[BugLab_Variable_Misuse]^Node next = replacement.removeChildAfter ( first ) ;^386^^^^^381^392^Node next = collapse.parent.removeChildAfter ( first ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] applyCollapses [RETURN_TYPE] void   [VARIABLES] Collapse  collapse  AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  Node  assign  c  expr  exprParent  externs  first  firstVarNode  leftSide  leftValue  n  name  next  node  parent  replacement  rightValue  root  value  varNode  
[BugLab_Argument_Swapping]^Node next = first.parent.removeChildAfter ( collapse ) ;^386^^^^^381^392^Node next = collapse.parent.removeChildAfter ( first ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] applyCollapses [RETURN_TYPE] void   [VARIABLES] Collapse  collapse  AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  Node  assign  c  expr  exprParent  externs  first  firstVarNode  leftSide  leftValue  n  name  next  node  parent  replacement  rightValue  root  value  varNode  
[BugLab_Variable_Misuse]^first.addChildrenToBack ( replacement.removeChildren (  )  ) ;^389^^^^^381^392^first.addChildrenToBack ( next.removeChildren (  )  ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] applyCollapses [RETURN_TYPE] void   [VARIABLES] Collapse  collapse  AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  Node  assign  c  expr  exprParent  externs  first  firstVarNode  leftSide  leftValue  n  name  next  node  parent  replacement  rightValue  root  value  varNode  
[BugLab_Variable_Misuse]^first.addChildrenToBack ( parent.removeChildren (  )  ) ;^389^^^^^381^392^first.addChildrenToBack ( next.removeChildren (  )  ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] applyCollapses [RETURN_TYPE] void   [VARIABLES] Collapse  collapse  AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  Node  assign  c  expr  exprParent  externs  first  firstVarNode  leftSide  leftValue  n  name  next  node  parent  replacement  rightValue  root  value  varNode  
[BugLab_Variable_Misuse]^Node first = replacement;^383^^^^^381^392^Node first = collapse.firstVarNode;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] applyCollapses [RETURN_TYPE] void   [VARIABLES] Collapse  collapse  AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  Node  assign  c  expr  exprParent  externs  first  firstVarNode  leftSide  leftValue  n  name  next  node  parent  replacement  rightValue  root  value  varNode  
[BugLab_Argument_Swapping]^Node first = collapse.firstVarNode.firstVarNode;^383^^^^^381^392^Node first = collapse.firstVarNode;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] applyCollapses [RETURN_TYPE] void   [VARIABLES] Collapse  collapse  AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  Node  assign  c  expr  exprParent  externs  first  firstVarNode  leftSide  leftValue  n  name  next  node  parent  replacement  rightValue  root  value  varNode  
[BugLab_Argument_Swapping]^Node first = collapse;^383^^^^^381^392^Node first = collapse.firstVarNode;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] applyCollapses [RETURN_TYPE] void   [VARIABLES] Collapse  collapse  AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  Node  assign  c  expr  exprParent  externs  first  firstVarNode  leftSide  leftValue  n  name  next  node  parent  replacement  rightValue  root  value  varNode  
[BugLab_Variable_Misuse]^Node next = collapse.parent.removeChildAfter ( root ) ;^386^^^^^381^392^Node next = collapse.parent.removeChildAfter ( first ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] applyCollapses [RETURN_TYPE] void   [VARIABLES] Collapse  collapse  AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  Node  assign  c  expr  exprParent  externs  first  firstVarNode  leftSide  leftValue  n  name  next  node  parent  replacement  rightValue  root  value  varNode  
[BugLab_Variable_Misuse]^while  ( parent.getNext (  )  != null && first.getNext (  ) .getType (  )  == Token.VAR )  {^384^385^^^^381^392^while  ( first.getNext (  )  != null && first.getNext (  ) .getType (  )  == Token.VAR )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] applyCollapses [RETURN_TYPE] void   [VARIABLES] Collapse  collapse  AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  Node  assign  c  expr  exprParent  externs  first  firstVarNode  leftSide  leftValue  n  name  next  node  parent  replacement  rightValue  root  value  varNode  
[BugLab_Variable_Misuse]^Node next = collapse.parent.removeChildAfter ( varNode ) ;^386^^^^^381^392^Node next = collapse.parent.removeChildAfter ( first ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] applyCollapses [RETURN_TYPE] void   [VARIABLES] Collapse  collapse  AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  Node  assign  c  expr  exprParent  externs  first  firstVarNode  leftSide  leftValue  n  name  next  node  parent  replacement  rightValue  root  value  varNode  
[BugLab_Variable_Misuse]^Node next = node.removeChildAfter ( first ) ;^386^^^^^381^392^Node next = collapse.parent.removeChildAfter ( first ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] applyCollapses [RETURN_TYPE] void   [VARIABLES] Collapse  collapse  AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  Node  assign  c  expr  exprParent  externs  first  firstVarNode  leftSide  leftValue  n  name  next  node  parent  replacement  rightValue  root  value  varNode  
[BugLab_Variable_Misuse]^first.addChildrenToBack ( node.removeChildren (  )  ) ;^389^^^^^381^392^first.addChildrenToBack ( next.removeChildren (  )  ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] applyCollapses [RETURN_TYPE] void   [VARIABLES] Collapse  collapse  AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  Node  assign  c  expr  exprParent  externs  first  firstVarNode  leftSide  leftValue  n  name  next  node  parent  replacement  rightValue  root  value  varNode  
[BugLab_Variable_Misuse]^this.firstVarNode = parent;^80^^^^^79^82^this.firstVarNode = firstVarNode;^[CLASS] Collapse  [METHOD] <init> [RETURN_TYPE] Node)   Node firstVarNode Node parent [VARIABLES] Node  firstVarNode  parent  boolean  
[BugLab_Variable_Misuse]^this.parent = firstVarNode;^81^^^^^79^82^this.parent = parent;^[CLASS] Collapse  [METHOD] <init> [RETURN_TYPE] Node)   Node firstVarNode Node parent [VARIABLES] Node  firstVarNode  parent  boolean  
[BugLab_Variable_Misuse]^if  ( !NodeUtil.isExprAssign ( exprParent )  )  {^117^^^^^116^122^if  ( !NodeUtil.isExprAssign ( expr )  )  {^[CLASS] ExploitAssigns  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node expr Node exprParent [VARIABLES] boolean  NodeTraversal  t  Node  expr  exprParent  
[BugLab_Variable_Misuse]^collapseAssign ( t, exprParent.getFirstChild (  ) , expr, exprParent ) ;^121^^^^^116^122^collapseAssign ( t, expr.getFirstChild (  ) , expr, exprParent ) ;^[CLASS] ExploitAssigns  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node expr Node exprParent [VARIABLES] boolean  NodeTraversal  t  Node  expr  exprParent  
[BugLab_Argument_Swapping]^collapseAssign ( expr, t.getFirstChild (  ) , expr, exprParent ) ;^121^^^^^116^122^collapseAssign ( t, expr.getFirstChild (  ) , expr, exprParent ) ;^[CLASS] ExploitAssigns  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node expr Node exprParent [VARIABLES] boolean  NodeTraversal  t  Node  expr  exprParent  
[BugLab_Argument_Swapping]^collapseAssign ( t, exprParent.getFirstChild (  ) , expr, expr ) ;^121^^^^^116^122^collapseAssign ( t, expr.getFirstChild (  ) , expr, exprParent ) ;^[CLASS] ExploitAssigns  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node expr Node exprParent [VARIABLES] boolean  NodeTraversal  t  Node  expr  exprParent  
[BugLab_Variable_Misuse]^Node leftValue = rightValue.getFirstChild (  ) ;^129^^^^^127^141^Node leftValue = assign.getFirstChild (  ) ;^[CLASS] ExploitAssigns  [METHOD] collapseAssign [RETURN_TYPE] void   NodeTraversal t Node assign Node expr Node exprParent [VARIABLES] boolean  NodeTraversal  t  Node  assign  expr  exprParent  leftValue  rightValue  
[BugLab_Variable_Misuse]^Node leftValue = leftValue.getFirstChild (  ) ;^129^^^^^127^141^Node leftValue = assign.getFirstChild (  ) ;^[CLASS] ExploitAssigns  [METHOD] collapseAssign [RETURN_TYPE] void   NodeTraversal t Node assign Node expr Node exprParent [VARIABLES] boolean  NodeTraversal  t  Node  assign  expr  exprParent  leftValue  rightValue  
[BugLab_Variable_Misuse]^Node rightValue = exprParent.getNext (  ) ;^130^^^^^127^141^Node rightValue = leftValue.getNext (  ) ;^[CLASS] ExploitAssigns  [METHOD] collapseAssign [RETURN_TYPE] void   NodeTraversal t Node assign Node expr Node exprParent [VARIABLES] boolean  NodeTraversal  t  Node  assign  expr  exprParent  leftValue  rightValue  
[BugLab_Variable_Misuse]^if  ( isCollapsibleValue ( exprParent, true )  && collapseAssignEqualTo ( expr, exprParent, leftValue )  )  {^131^132^^^^127^141^if  ( isCollapsibleValue ( leftValue, true )  && collapseAssignEqualTo ( expr, exprParent, leftValue )  )  {^[CLASS] ExploitAssigns  [METHOD] collapseAssign [RETURN_TYPE] void   NodeTraversal t Node assign Node expr Node exprParent [VARIABLES] boolean  NodeTraversal  t  Node  assign  expr  exprParent  leftValue  rightValue  
[BugLab_Variable_Misuse]^if  ( isCollapsibleValue ( leftValue, true )  && collapseAssignEqualTo ( rightValue, exprParent, leftValue )  )  {^131^132^^^^127^141^if  ( isCollapsibleValue ( leftValue, true )  && collapseAssignEqualTo ( expr, exprParent, leftValue )  )  {^[CLASS] ExploitAssigns  [METHOD] collapseAssign [RETURN_TYPE] void   NodeTraversal t Node assign Node expr Node exprParent [VARIABLES] boolean  NodeTraversal  t  Node  assign  expr  exprParent  leftValue  rightValue  
[BugLab_Argument_Swapping]^if  ( isCollapsibleValue ( expr, true )  && collapseAssignEqualTo ( leftValue, exprParent, leftValue )  )  {^131^132^^^^127^141^if  ( isCollapsibleValue ( leftValue, true )  && collapseAssignEqualTo ( expr, exprParent, leftValue )  )  {^[CLASS] ExploitAssigns  [METHOD] collapseAssign [RETURN_TYPE] void   NodeTraversal t Node assign Node expr Node exprParent [VARIABLES] boolean  NodeTraversal  t  Node  assign  expr  exprParent  leftValue  rightValue  
[BugLab_Argument_Swapping]^if  ( isCollapsibleValue ( exprParent, true )  && collapseAssignEqualTo ( expr, leftValue, leftValue )  )  {^131^132^^^^127^141^if  ( isCollapsibleValue ( leftValue, true )  && collapseAssignEqualTo ( expr, exprParent, leftValue )  )  {^[CLASS] ExploitAssigns  [METHOD] collapseAssign [RETURN_TYPE] void   NodeTraversal t Node assign Node expr Node exprParent [VARIABLES] boolean  NodeTraversal  t  Node  assign  expr  exprParent  leftValue  rightValue  
[BugLab_Argument_Swapping]^if  ( isCollapsibleValue ( leftValue, exprParentrue )  && collapseAssignEqualTo ( expr, t, leftValue )  )  {^131^132^^^^127^141^if  ( isCollapsibleValue ( leftValue, true )  && collapseAssignEqualTo ( expr, exprParent, leftValue )  )  {^[CLASS] ExploitAssigns  [METHOD] collapseAssign [RETURN_TYPE] void   NodeTraversal t Node assign Node expr Node exprParent [VARIABLES] boolean  NodeTraversal  t  Node  assign  expr  exprParent  leftValue  rightValue  
[BugLab_Wrong_Operator]^if  ( isCollapsibleValue ( leftValue, true )  || collapseAssignEqualTo ( expr, exprParent, leftValue )  )  {^131^132^^^^127^141^if  ( isCollapsibleValue ( leftValue, true )  && collapseAssignEqualTo ( expr, exprParent, leftValue )  )  {^[CLASS] ExploitAssigns  [METHOD] collapseAssign [RETURN_TYPE] void   NodeTraversal t Node assign Node expr Node exprParent [VARIABLES] boolean  NodeTraversal  t  Node  assign  expr  exprParent  leftValue  rightValue  
[BugLab_Wrong_Literal]^if  ( isCollapsibleValue ( leftValue, false )  && collapseAssignEqualTo ( expr, exprParent, leftValue )  )  {^131^132^^^^127^141^if  ( isCollapsibleValue ( leftValue, true )  && collapseAssignEqualTo ( expr, exprParent, leftValue )  )  {^[CLASS] ExploitAssigns  [METHOD] collapseAssign [RETURN_TYPE] void   NodeTraversal t Node assign Node expr Node exprParent [VARIABLES] boolean  NodeTraversal  t  Node  assign  expr  exprParent  leftValue  rightValue  
[BugLab_Variable_Misuse]^} else if  ( isCollapsibleValue ( leftValue, false )  && collapseAssignEqualTo ( expr, exprParent, rightValue )  )  {^134^135^^^^127^141^} else if  ( isCollapsibleValue ( rightValue, false )  && collapseAssignEqualTo ( expr, exprParent, rightValue )  )  {^[CLASS] ExploitAssigns  [METHOD] collapseAssign [RETURN_TYPE] void   NodeTraversal t Node assign Node expr Node exprParent [VARIABLES] boolean  NodeTraversal  t  Node  assign  expr  exprParent  leftValue  rightValue  
[BugLab_Variable_Misuse]^} else if  ( isCollapsibleValue ( rightValue, false )  && collapseAssignEqualTo ( rightValue, exprParent, rightValue )  )  {^134^135^^^^127^141^} else if  ( isCollapsibleValue ( rightValue, false )  && collapseAssignEqualTo ( expr, exprParent, rightValue )  )  {^[CLASS] ExploitAssigns  [METHOD] collapseAssign [RETURN_TYPE] void   NodeTraversal t Node assign Node expr Node exprParent [VARIABLES] boolean  NodeTraversal  t  Node  assign  expr  exprParent  leftValue  rightValue  
[BugLab_Variable_Misuse]^} else if  ( isCollapsibleValue ( rightValue, false )  && collapseAssignEqualTo ( expr, rightValue, rightValue )  )  {^134^135^^^^127^141^} else if  ( isCollapsibleValue ( rightValue, false )  && collapseAssignEqualTo ( expr, exprParent, rightValue )  )  {^[CLASS] ExploitAssigns  [METHOD] collapseAssign [RETURN_TYPE] void   NodeTraversal t Node assign Node expr Node exprParent [VARIABLES] boolean  NodeTraversal  t  Node  assign  expr  exprParent  leftValue  rightValue  
[BugLab_Argument_Swapping]^} else if  ( isCollapsibleValue ( expr, false )  && collapseAssignEqualTo ( rightValue, exprParent, rightValue )  )  {^134^135^^^^127^141^} else if  ( isCollapsibleValue ( rightValue, false )  && collapseAssignEqualTo ( expr, exprParent, rightValue )  )  {^[CLASS] ExploitAssigns  [METHOD] collapseAssign [RETURN_TYPE] void   NodeTraversal t Node assign Node expr Node exprParent [VARIABLES] boolean  NodeTraversal  t  Node  assign  expr  exprParent  leftValue  rightValue  
[BugLab_Argument_Swapping]^} else if  ( isCollapsibleValue ( rightValue, false )  && collapseAssignEqualTo ( exprParent, expr, rightValue )  )  {^134^135^^^^127^141^} else if  ( isCollapsibleValue ( rightValue, false )  && collapseAssignEqualTo ( expr, exprParent, rightValue )  )  {^[CLASS] ExploitAssigns  [METHOD] collapseAssign [RETURN_TYPE] void   NodeTraversal t Node assign Node expr Node exprParent [VARIABLES] boolean  NodeTraversal  t  Node  assign  expr  exprParent  leftValue  rightValue  
[BugLab_Argument_Swapping]^} else if  ( isCollapsibleValue ( exprParent, false )  && collapseAssignEqualTo ( expr, rightValue, rightValue )  )  {^134^135^^^^127^141^} else if  ( isCollapsibleValue ( rightValue, false )  && collapseAssignEqualTo ( expr, exprParent, rightValue )  )  {^[CLASS] ExploitAssigns  [METHOD] collapseAssign [RETURN_TYPE] void   NodeTraversal t Node assign Node expr Node exprParent [VARIABLES] boolean  NodeTraversal  t  Node  assign  expr  exprParent  leftValue  rightValue  
[BugLab_Wrong_Operator]^} else if  ( isCollapsibleValue ( rightValue, false )  || collapseAssignEqualTo ( expr, exprParent, rightValue )  )  {^134^135^^^^127^141^} else if  ( isCollapsibleValue ( rightValue, false )  && collapseAssignEqualTo ( expr, exprParent, rightValue )  )  {^[CLASS] ExploitAssigns  [METHOD] collapseAssign [RETURN_TYPE] void   NodeTraversal t Node assign Node expr Node exprParent [VARIABLES] boolean  NodeTraversal  t  Node  assign  expr  exprParent  leftValue  rightValue  
[BugLab_Wrong_Literal]^} else if  ( isCollapsibleValue ( rightValue, true )  && collapseAssignEqualTo ( expr, exprParent, rightValue )  )  {^134^135^^^^127^141^} else if  ( isCollapsibleValue ( rightValue, false )  && collapseAssignEqualTo ( expr, exprParent, rightValue )  )  {^[CLASS] ExploitAssigns  [METHOD] collapseAssign [RETURN_TYPE] void   NodeTraversal t Node assign Node expr Node exprParent [VARIABLES] boolean  NodeTraversal  t  Node  assign  expr  exprParent  leftValue  rightValue  
[BugLab_Variable_Misuse]^} else if  ( leftValue.getType (  )  == Token.ASSIGN )  {^137^^^^^127^141^} else if  ( rightValue.getType (  )  == Token.ASSIGN )  {^[CLASS] ExploitAssigns  [METHOD] collapseAssign [RETURN_TYPE] void   NodeTraversal t Node assign Node expr Node exprParent [VARIABLES] boolean  NodeTraversal  t  Node  assign  expr  exprParent  leftValue  rightValue  
[BugLab_Wrong_Operator]^} else if  ( rightValue.getType (  )  != Token.ASSIGN )  {^137^^^^^127^141^} else if  ( rightValue.getType (  )  == Token.ASSIGN )  {^[CLASS] ExploitAssigns  [METHOD] collapseAssign [RETURN_TYPE] void   NodeTraversal t Node assign Node expr Node exprParent [VARIABLES] boolean  NodeTraversal  t  Node  assign  expr  exprParent  leftValue  rightValue  
[BugLab_Variable_Misuse]^collapseAssign ( t, rightValue, rightValue, exprParent ) ;^139^^^^^127^141^collapseAssign ( t, rightValue, expr, exprParent ) ;^[CLASS] ExploitAssigns  [METHOD] collapseAssign [RETURN_TYPE] void   NodeTraversal t Node assign Node expr Node exprParent [VARIABLES] boolean  NodeTraversal  t  Node  assign  expr  exprParent  leftValue  rightValue  
[BugLab_Argument_Swapping]^collapseAssign ( exprParent, rightValue, expr, t ) ;^139^^^^^127^141^collapseAssign ( t, rightValue, expr, exprParent ) ;^[CLASS] ExploitAssigns  [METHOD] collapseAssign [RETURN_TYPE] void   NodeTraversal t Node assign Node expr Node exprParent [VARIABLES] boolean  NodeTraversal  t  Node  assign  expr  exprParent  leftValue  rightValue  
[BugLab_Argument_Swapping]^collapseAssign ( t, exprParent, expr, rightValue ) ;^139^^^^^127^141^collapseAssign ( t, rightValue, expr, exprParent ) ;^[CLASS] ExploitAssigns  [METHOD] collapseAssign [RETURN_TYPE] void   NodeTraversal t Node assign Node expr Node exprParent [VARIABLES] boolean  NodeTraversal  t  Node  assign  expr  exprParent  leftValue  rightValue  
[BugLab_Argument_Swapping]^collapseAssign ( t, rightValue, exprParent, expr ) ;^139^^^^^127^141^collapseAssign ( t, rightValue, expr, exprParent ) ;^[CLASS] ExploitAssigns  [METHOD] collapseAssign [RETURN_TYPE] void   NodeTraversal t Node assign Node expr Node exprParent [VARIABLES] boolean  NodeTraversal  t  Node  assign  expr  exprParent  leftValue  rightValue  
[BugLab_Variable_Misuse]^collapseAssign ( t, leftValue, expr, exprParent ) ;^139^^^^^127^141^collapseAssign ( t, rightValue, expr, exprParent ) ;^[CLASS] ExploitAssigns  [METHOD] collapseAssign [RETURN_TYPE] void   NodeTraversal t Node assign Node expr Node exprParent [VARIABLES] boolean  NodeTraversal  t  Node  assign  expr  exprParent  leftValue  rightValue  
[BugLab_Variable_Misuse]^collapseAssign ( t, rightValue, leftValue, exprParent ) ;^139^^^^^127^141^collapseAssign ( t, rightValue, expr, exprParent ) ;^[CLASS] ExploitAssigns  [METHOD] collapseAssign [RETURN_TYPE] void   NodeTraversal t Node assign Node expr Node exprParent [VARIABLES] boolean  NodeTraversal  t  Node  assign  expr  exprParent  leftValue  rightValue  
[BugLab_Variable_Misuse]^collapseAssign ( t, rightValue, expr, leftValue ) ;^139^^^^^127^141^collapseAssign ( t, rightValue, expr, exprParent ) ;^[CLASS] ExploitAssigns  [METHOD] collapseAssign [RETURN_TYPE] void   NodeTraversal t Node assign Node expr Node exprParent [VARIABLES] boolean  NodeTraversal  t  Node  assign  expr  exprParent  leftValue  rightValue  
[BugLab_Argument_Swapping]^collapseAssign ( rightValue, t, expr, exprParent ) ;^139^^^^^127^141^collapseAssign ( t, rightValue, expr, exprParent ) ;^[CLASS] ExploitAssigns  [METHOD] collapseAssign [RETURN_TYPE] void   NodeTraversal t Node assign Node expr Node exprParent [VARIABLES] boolean  NodeTraversal  t  Node  assign  expr  exprParent  leftValue  rightValue  
[BugLab_Wrong_Operator]^} else if  ( rightValue.getType (  )  >= Token.ASSIGN )  {^137^^^^^127^141^} else if  ( rightValue.getType (  )  == Token.ASSIGN )  {^[CLASS] ExploitAssigns  [METHOD] collapseAssign [RETURN_TYPE] void   NodeTraversal t Node assign Node expr Node exprParent [VARIABLES] boolean  NodeTraversal  t  Node  assign  expr  exprParent  leftValue  rightValue  
[BugLab_Variable_Misuse]^collapseAssign ( t, rightValue, expr, rightValue ) ;^139^^^^^127^141^collapseAssign ( t, rightValue, expr, exprParent ) ;^[CLASS] ExploitAssigns  [METHOD] collapseAssign [RETURN_TYPE] void   NodeTraversal t Node assign Node expr Node exprParent [VARIABLES] boolean  NodeTraversal  t  Node  assign  expr  exprParent  leftValue  rightValue  
[BugLab_Argument_Swapping]^collapseAssign ( t, expr, rightValue, exprParent ) ;^139^^^^^127^141^collapseAssign ( t, rightValue, expr, exprParent ) ;^[CLASS] ExploitAssigns  [METHOD] collapseAssign [RETURN_TYPE] void   NodeTraversal t Node assign Node expr Node exprParent [VARIABLES] boolean  NodeTraversal  t  Node  assign  expr  exprParent  leftValue  rightValue  
[BugLab_Variable_Misuse]^collapseAssignEqualTo ( leftValue, exprParent, rightValue )  )  {^135^^^^^127^141^collapseAssignEqualTo ( expr, exprParent, rightValue )  )  {^[CLASS] ExploitAssigns  [METHOD] collapseAssign [RETURN_TYPE] void   NodeTraversal t Node assign Node expr Node exprParent [VARIABLES] boolean  NodeTraversal  t  Node  assign  expr  exprParent  leftValue  rightValue  
[BugLab_Variable_Misuse]^collapseAssignEqualTo ( expr, exprParent, leftValue )  )  {^135^^^^^127^141^collapseAssignEqualTo ( expr, exprParent, rightValue )  )  {^[CLASS] ExploitAssigns  [METHOD] collapseAssign [RETURN_TYPE] void   NodeTraversal t Node assign Node expr Node exprParent [VARIABLES] boolean  NodeTraversal  t  Node  assign  expr  exprParent  leftValue  rightValue  
[BugLab_Argument_Swapping]^collapseAssignEqualTo ( exprParent, expr, rightValue )  )  {^135^^^^^127^141^collapseAssignEqualTo ( expr, exprParent, rightValue )  )  {^[CLASS] ExploitAssigns  [METHOD] collapseAssign [RETURN_TYPE] void   NodeTraversal t Node assign Node expr Node exprParent [VARIABLES] boolean  NodeTraversal  t  Node  assign  expr  exprParent  leftValue  rightValue  
[BugLab_Argument_Swapping]^collapseAssignEqualTo ( expr, rightValue, exprParent )  )  {^135^^^^^127^141^collapseAssignEqualTo ( expr, exprParent, rightValue )  )  {^[CLASS] ExploitAssigns  [METHOD] collapseAssign [RETURN_TYPE] void   NodeTraversal t Node assign Node expr Node exprParent [VARIABLES] boolean  NodeTraversal  t  Node  assign  expr  exprParent  leftValue  rightValue  
[BugLab_Variable_Misuse]^} else if  ( exprParent.getType (  )  == Token.ASSIGN )  {^137^^^^^127^141^} else if  ( rightValue.getType (  )  == Token.ASSIGN )  {^[CLASS] ExploitAssigns  [METHOD] collapseAssign [RETURN_TYPE] void   NodeTraversal t Node assign Node expr Node exprParent [VARIABLES] boolean  NodeTraversal  t  Node  assign  expr  exprParent  leftValue  rightValue  
[BugLab_Argument_Swapping]^collapseAssign ( expr, rightValue, t, exprParent ) ;^139^^^^^127^141^collapseAssign ( t, rightValue, expr, exprParent ) ;^[CLASS] ExploitAssigns  [METHOD] collapseAssign [RETURN_TYPE] void   NodeTraversal t Node assign Node expr Node exprParent [VARIABLES] boolean  NodeTraversal  t  Node  assign  expr  exprParent  leftValue  rightValue  
[BugLab_Variable_Misuse]^} else if  ( isCollapsibleValue ( rightValue, false )  && collapseAssignEqualTo ( expr, leftValue, rightValue )  )  {^134^135^^^^127^141^} else if  ( isCollapsibleValue ( rightValue, false )  && collapseAssignEqualTo ( expr, exprParent, rightValue )  )  {^[CLASS] ExploitAssigns  [METHOD] collapseAssign [RETURN_TYPE] void   NodeTraversal t Node assign Node expr Node exprParent [VARIABLES] boolean  NodeTraversal  t  Node  assign  expr  exprParent  leftValue  rightValue  
[BugLab_Variable_Misuse]^if  ( isCollapsibleValue ( rightValue, true )  && collapseAssignEqualTo ( expr, exprParent, leftValue )  )  {^131^132^^^^127^141^if  ( isCollapsibleValue ( leftValue, true )  && collapseAssignEqualTo ( expr, exprParent, leftValue )  )  {^[CLASS] ExploitAssigns  [METHOD] collapseAssign [RETURN_TYPE] void   NodeTraversal t Node assign Node expr Node exprParent [VARIABLES] boolean  NodeTraversal  t  Node  assign  expr  exprParent  leftValue  rightValue  
[BugLab_Variable_Misuse]^collapseAssignEqualTo ( rightValue, exprParent, leftValue )  )  {^132^^^^^127^141^collapseAssignEqualTo ( expr, exprParent, leftValue )  )  {^[CLASS] ExploitAssigns  [METHOD] collapseAssign [RETURN_TYPE] void   NodeTraversal t Node assign Node expr Node exprParent [VARIABLES] boolean  NodeTraversal  t  Node  assign  expr  exprParent  leftValue  rightValue  
[BugLab_Variable_Misuse]^collapseAssignEqualTo ( expr, rightValue, leftValue )  )  {^132^^^^^127^141^collapseAssignEqualTo ( expr, exprParent, leftValue )  )  {^[CLASS] ExploitAssigns  [METHOD] collapseAssign [RETURN_TYPE] void   NodeTraversal t Node assign Node expr Node exprParent [VARIABLES] boolean  NodeTraversal  t  Node  assign  expr  exprParent  leftValue  rightValue  
[BugLab_Argument_Swapping]^collapseAssignEqualTo ( exprParent, expr, leftValue )  )  {^132^^^^^127^141^collapseAssignEqualTo ( expr, exprParent, leftValue )  )  {^[CLASS] ExploitAssigns  [METHOD] collapseAssign [RETURN_TYPE] void   NodeTraversal t Node assign Node expr Node exprParent [VARIABLES] boolean  NodeTraversal  t  Node  assign  expr  exprParent  leftValue  rightValue  
[BugLab_Argument_Swapping]^collapseAssignEqualTo ( expr, leftValue, exprParent )  )  {^132^^^^^127^141^collapseAssignEqualTo ( expr, exprParent, leftValue )  )  {^[CLASS] ExploitAssigns  [METHOD] collapseAssign [RETURN_TYPE] void   NodeTraversal t Node assign Node expr Node exprParent [VARIABLES] boolean  NodeTraversal  t  Node  assign  expr  exprParent  leftValue  rightValue  
[BugLab_Argument_Swapping]^collapseAssignEqualTo ( leftValue, exprParent, expr )  )  {^132^^^^^127^141^collapseAssignEqualTo ( expr, exprParent, leftValue )  )  {^[CLASS] ExploitAssigns  [METHOD] collapseAssign [RETURN_TYPE] void   NodeTraversal t Node assign Node expr Node exprParent [VARIABLES] boolean  NodeTraversal  t  Node  assign  expr  exprParent  leftValue  rightValue  
[BugLab_Argument_Swapping]^collapseAssignEqualTo ( rightValue, exprParent, expr )  )  {^135^^^^^127^141^collapseAssignEqualTo ( expr, exprParent, rightValue )  )  {^[CLASS] ExploitAssigns  [METHOD] collapseAssign [RETURN_TYPE] void   NodeTraversal t Node assign Node expr Node exprParent [VARIABLES] boolean  NodeTraversal  t  Node  assign  expr  exprParent  leftValue  rightValue  
[BugLab_Wrong_Operator]^return !isLValue && value.getFirstChild (  ) .getType (  )  == Token.THIS;^164^^^^^157^176^return !isLValue || value.getFirstChild (  ) .getType (  )  == Token.THIS;^[CLASS] ExploitAssigns  [METHOD] isCollapsibleValue [RETURN_TYPE] boolean   Node value boolean isLValue [VARIABLES] boolean  isLValue  Node  value  
[BugLab_Wrong_Operator]^return !isLValue || value.getFirstChild (  ) .getType (  )  < Token.THIS;^164^^^^^157^176^return !isLValue || value.getFirstChild (  ) .getType (  )  == Token.THIS;^[CLASS] ExploitAssigns  [METHOD] isCollapsibleValue [RETURN_TYPE] boolean   Node value boolean isLValue [VARIABLES] boolean  isLValue  Node  value  
[BugLab_Wrong_Literal]^return false;^172^^^^^157^176^return true;^[CLASS] ExploitAssigns  [METHOD] isCollapsibleValue [RETURN_TYPE] boolean   Node value boolean isLValue [VARIABLES] boolean  isLValue  Node  value  
[BugLab_Wrong_Literal]^return true;^175^^^^^157^176^return false;^[CLASS] ExploitAssigns  [METHOD] isCollapsibleValue [RETURN_TYPE] boolean   Node value boolean isLValue [VARIABLES] boolean  isLValue  Node  value  
[BugLab_Variable_Misuse]^Node assign = value.getFirstChild (  ) ;^195^^^^^180^210^Node assign = expr.getFirstChild (  ) ;^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[BugLab_Variable_Misuse]^Node parent = value;^196^^^^^181^211^Node parent = exprParent;^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[BugLab_Variable_Misuse]^Node next = parent.getNext (  ) ;^197^^^^^182^212^Node next = expr.getNext (  ) ;^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[BugLab_Variable_Misuse]^Node next = next.getNext (  ) ;^197^^^^^182^212^Node next = expr.getNext (  ) ;^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[BugLab_Variable_Misuse]^while  ( leftSide != null )  {^198^^^^^183^213^while  ( next != null )  {^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[BugLab_Wrong_Operator]^while  ( next == null )  {^198^^^^^183^213^while  ( next != null )  {^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[BugLab_Variable_Misuse]^if  ( value.getFirstChild (  ) .hasChildren (  )  )  {^212^^^^^197^227^if  ( next.getFirstChild (  ) .hasChildren (  )  )  {^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[BugLab_Variable_Misuse]^parent = leftSide.getFirstChild (  ) ;^213^^^^^198^228^parent = next.getFirstChild (  ) ;^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[BugLab_Variable_Misuse]^next = value.getFirstChild (  ) ;^214^^^^^199^229^next = parent.getFirstChild (  ) ;^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[BugLab_Variable_Misuse]^if  ( leftSide.isQualifiedName (  )  )  {^221^^^^^206^236^if  ( next.isQualifiedName (  )  )  {^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[BugLab_Variable_Misuse]^if  ( next.isQualifiedName (  )  && nextName.equals ( value.getQualifiedName (  )  )  )  {^223^224^^^^208^238^if  ( value.isQualifiedName (  )  && nextName.equals ( value.getQualifiedName (  )  )  )  {^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[BugLab_Variable_Misuse]^if  ( value.isQualifiedName (  )  && parentName.equals ( value.getQualifiedName (  )  )  )  {^223^224^^^^208^238^if  ( value.isQualifiedName (  )  && nextName.equals ( value.getQualifiedName (  )  )  )  {^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[BugLab_Argument_Swapping]^if  ( next.isQualifiedName (  )  && valueName.equals ( value.getQualifiedName (  )  )  )  {^223^224^^^^208^238^if  ( value.isQualifiedName (  )  && nextName.equals ( value.getQualifiedName (  )  )  )  {^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[BugLab_Wrong_Operator]^if  ( value.isQualifiedName (  )  || nextName.equals ( value.getQualifiedName (  )  )  )  {^223^224^^^^208^238^if  ( value.isQualifiedName (  )  && nextName.equals ( value.getQualifiedName (  )  )  )  {^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[BugLab_Variable_Misuse]^if  ( !isSafeReplacement ( parent, assign )  )  {^230^^^^^223^238^if  ( !isSafeReplacement ( next, assign )  )  {^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[BugLab_Argument_Swapping]^if  ( !isSafeReplacement ( assign, next )  )  {^230^^^^^223^238^if  ( !isSafeReplacement ( next, assign )  )  {^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[BugLab_Wrong_Literal]^return true;^231^^^^^223^238^return false;^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[BugLab_Wrong_Literal]^return false;^237^^^^^223^238^return true;^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[BugLab_Variable_Misuse]^if  ( !isSafeReplacement ( value, assign )  )  {^230^^^^^223^238^if  ( !isSafeReplacement ( next, assign )  )  {^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[BugLab_Variable_Misuse]^if  ( !isSafeReplacement ( next, value )  )  {^230^^^^^223^238^if  ( !isSafeReplacement ( next, assign )  )  {^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[BugLab_Variable_Misuse]^exprParent.removeChild ( parent ) ;^234^^^^^223^238^exprParent.removeChild ( expr ) ;^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[BugLab_Variable_Misuse]^expr.removeChild ( value ) ;^235^^^^^223^238^expr.removeChild ( assign ) ;^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[BugLab_Variable_Misuse]^parent.replaceChild ( value, assign ) ;^236^^^^^223^238^parent.replaceChild ( next, assign ) ;^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[BugLab_Variable_Misuse]^parent.replaceChild ( next, next ) ;^236^^^^^223^238^parent.replaceChild ( next, assign ) ;^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[BugLab_Argument_Swapping]^parent.replaceChild ( assign, next ) ;^236^^^^^223^238^parent.replaceChild ( next, assign ) ;^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[BugLab_Variable_Misuse]^if  ( !isSafeReplacement ( value, assign )  )  {^230^^^^^215^245^if  ( !isSafeReplacement ( next, assign )  )  {^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[BugLab_Variable_Misuse]^if  ( !isSafeReplacement ( next, parent )  )  {^230^^^^^215^245^if  ( !isSafeReplacement ( next, assign )  )  {^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[BugLab_Argument_Swapping]^if  ( !isSafeReplacement ( assign, next )  )  {^230^^^^^215^245^if  ( !isSafeReplacement ( next, assign )  )  {^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[BugLab_Wrong_Literal]^return true;^231^^^^^216^246^return false;^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[BugLab_Wrong_Literal]^return false;^237^^^^^222^252^return true;^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[BugLab_Variable_Misuse]^String valueName = next.getQualifiedName (  ) ;^222^^^^^207^237^String nextName = next.getQualifiedName (  ) ;^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[BugLab_Variable_Misuse]^nextName.equals ( leftSide.getQualifiedName (  )  )  )  {^224^^^^^209^239^nextName.equals ( value.getQualifiedName (  )  )  )  {^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[BugLab_Variable_Misuse]^if  ( !isSafeReplacement ( next, value )  )  {^230^^^^^215^245^if  ( !isSafeReplacement ( next, assign )  )  {^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[BugLab_Variable_Misuse]^exprParent.removeChild ( parent ) ;^234^^^^^219^249^exprParent.removeChild ( expr ) ;^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[BugLab_Variable_Misuse]^parent.replaceChild ( leftSide, assign ) ;^236^^^^^221^251^parent.replaceChild ( next, assign ) ;^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[BugLab_Variable_Misuse]^parent.replaceChild ( next, parent ) ;^236^^^^^221^251^parent.replaceChild ( next, assign ) ;^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[BugLab_Variable_Misuse]^if  ( parent.isQualifiedName (  )  && nextName.equals ( value.getQualifiedName (  )  )  )  {^223^224^^^^208^238^if  ( value.isQualifiedName (  )  && nextName.equals ( value.getQualifiedName (  )  )  )  {^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[BugLab_Variable_Misuse]^if  ( value.isQualifiedName (  )  && valueName.equals ( value.getQualifiedName (  )  )  )  {^223^224^^^^208^238^if  ( value.isQualifiedName (  )  && nextName.equals ( value.getQualifiedName (  )  )  )  {^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[BugLab_Variable_Misuse]^parent.replaceChild ( leftSide, assign ) ;^236^^^^^223^238^parent.replaceChild ( next, assign ) ;^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[BugLab_Variable_Misuse]^if  ( !isSafeReplacement ( parent, assign )  )  {^230^^^^^215^245^if  ( !isSafeReplacement ( next, assign )  )  {^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[BugLab_Variable_Misuse]^if  ( parent.getType (  )  == next.getType (  )  )  {^247^^^^^232^262^if  ( value.getType (  )  == next.getType (  )  )  {^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[BugLab_Variable_Misuse]^if  ( value.getType (  )  == parent.getType (  )  )  {^247^^^^^232^262^if  ( value.getType (  )  == next.getType (  )  )  {^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[BugLab_Wrong_Operator]^if  ( value.getType (  )  <= next.getType (  )  )  {^247^^^^^232^262^if  ( value.getType (  )  == next.getType (  )  )  {^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[BugLab_Wrong_Operator]^if  ( value.getType (  )  != next.getType (  )  )  {^247^^^^^232^262^if  ( value.getType (  )  == next.getType (  )  )  {^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[BugLab_Variable_Misuse]^if  (  ( leftSide.getType (  )  == Token.STRING || next.getType (  )  == Token.NUMBER )  && !next.isEquivalentTo ( value )  )  {^248^249^250^^^233^263^if  (  ( next.getType (  )  == Token.STRING || next.getType (  )  == Token.NUMBER )  && !next.isEquivalentTo ( value )  )  {^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[BugLab_Variable_Misuse]^if  (  ( next.getType (  )  == Token.STRING || next.getType (  )  == Token.NUMBER )  && !next.isEquivalentTo ( parent )  )  {^248^249^250^^^233^263^if  (  ( next.getType (  )  == Token.STRING || next.getType (  )  == Token.NUMBER )  && !next.isEquivalentTo ( value )  )  {^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[BugLab_Argument_Swapping]^if  (  ( value.getType (  )  == Token.STRING || next.getType (  )  == Token.NUMBER )  && !next.isEquivalentTo ( next )  )  {^248^249^250^^^233^263^if  (  ( next.getType (  )  == Token.STRING || next.getType (  )  == Token.NUMBER )  && !next.isEquivalentTo ( value )  )  {^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[BugLab_Wrong_Operator]^if  (  ( next.getType (  )  == Token.STRING || next.getType (  )  == Token.NUMBER )  || !next.isEquivalentTo ( value )  )  {^248^249^250^^^233^263^if  (  ( next.getType (  )  == Token.STRING || next.getType (  )  == Token.NUMBER )  && !next.isEquivalentTo ( value )  )  {^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[BugLab_Wrong_Operator]^if  (  ( next.getType (  )  == Token.STRING && next.getType (  )  == Token.NUMBER )  && !next.isEquivalentTo ( value )  )  {^248^249^250^^^233^263^if  (  ( next.getType (  )  == Token.STRING || next.getType (  )  == Token.NUMBER )  && !next.isEquivalentTo ( value )  )  {^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[BugLab_Wrong_Operator]^if  (  ( next.getType (  )  <= Token.STRING || next.getType (  )  == Token.NUMBER )  && !next.isEquivalentTo ( value )  )  {^248^249^250^^^233^263^if  (  ( next.getType (  )  == Token.STRING || next.getType (  )  == Token.NUMBER )  && !next.isEquivalentTo ( value )  )  {^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[BugLab_Wrong_Operator]^if  (  ( next.getType (  )  >= Token.STRING || next.getType (  )  == Token.NUMBER )  && !next.isEquivalentTo ( value )  )  {^248^249^250^^^233^263^if  (  ( next.getType (  )  == Token.STRING || next.getType (  )  == Token.NUMBER )  && !next.isEquivalentTo ( value )  )  {^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[BugLab_Wrong_Literal]^return true;^251^^^^^248^252^return false;^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[BugLab_Wrong_Literal]^return true;^251^^^^^236^266^return false;^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[BugLab_Wrong_Literal]^return false;^260^^^^^245^275^return true;^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[BugLab_Variable_Misuse]^if  (  ( parent.getType (  )  == Token.STRING || next.getType (  )  == Token.NUMBER )  && !next.isEquivalentTo ( value )  )  {^248^249^250^^^233^263^if  (  ( next.getType (  )  == Token.STRING || next.getType (  )  == Token.NUMBER )  && !next.isEquivalentTo ( value )  )  {^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[BugLab_Variable_Misuse]^!next.isEquivalentTo ( leftSide )  )  {^250^^^^^235^265^!next.isEquivalentTo ( value )  )  {^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[BugLab_Variable_Misuse]^exprParent.removeChild ( value ) ;^257^^^^^242^272^exprParent.removeChild ( expr ) ;^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[BugLab_Variable_Misuse]^expr.removeChild ( value ) ;^258^^^^^243^273^expr.removeChild ( assign ) ;^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[BugLab_Variable_Misuse]^parent.replaceChild ( value, assign ) ;^259^^^^^244^274^parent.replaceChild ( next, assign ) ;^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[BugLab_Variable_Misuse]^parent.replaceChild ( next, parent ) ;^259^^^^^244^274^parent.replaceChild ( next, assign ) ;^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[BugLab_Argument_Swapping]^parent.replaceChild ( assign, next ) ;^259^^^^^244^274^parent.replaceChild ( next, assign ) ;^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[BugLab_Variable_Misuse]^if  (  ( next.getType (  )  == Token.STRING || next.getType (  )  == Token.NUMBER )  && !next.isEquivalentTo ( leftSide )  )  {^248^249^250^^^233^263^if  (  ( next.getType (  )  == Token.STRING || next.getType (  )  == Token.NUMBER )  && !next.isEquivalentTo ( value )  )  {^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[BugLab_Wrong_Operator]^if  (  ( next.getType (  )  != Token.STRING || next.getType (  )  == Token.NUMBER )  && !next.isEquivalentTo ( value )  )  {^248^249^250^^^233^263^if  (  ( next.getType (  )  == Token.STRING || next.getType (  )  == Token.NUMBER )  && !next.isEquivalentTo ( value )  )  {^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[BugLab_Variable_Misuse]^if  ( parent.getType (  )  == Token.NAME || leftSide.getType (  )  == Token.GETPROP && leftSide.getFirstChild (  ) .getType (  )  == Token.THIS )  {^278^279^280^^^263^293^if  ( leftSide.getType (  )  == Token.NAME || leftSide.getType (  )  == Token.GETPROP && leftSide.getFirstChild (  ) .getType (  )  == Token.THIS )  {^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[BugLab_Wrong_Operator]^if  ( leftSide.getType (  )  == Token.NAME && leftSide.getType (  )  == Token.GETPROP && leftSide.getFirstChild (  ) .getType (  )  == Token.THIS )  {^278^279^280^^^263^293^if  ( leftSide.getType (  )  == Token.NAME || leftSide.getType (  )  == Token.GETPROP && leftSide.getFirstChild (  ) .getType (  )  == Token.THIS )  {^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[BugLab_Wrong_Operator]^if  ( leftSide.getType (  )  <= Token.NAME || leftSide.getType (  )  == Token.GETPROP && leftSide.getFirstChild (  ) .getType (  )  == Token.THIS )  {^278^279^280^^^263^293^if  ( leftSide.getType (  )  == Token.NAME || leftSide.getType (  )  == Token.GETPROP && leftSide.getFirstChild (  ) .getType (  )  == Token.THIS )  {^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[BugLab_Wrong_Operator]^if  ( leftSide.getType (  )  == Token.NAME || leftSide.getType (  )  == Token.GETPROP || leftSide.getFirstChild (  ) .getType (  )  == Token.THIS )  {^278^279^280^^^263^293^if  ( leftSide.getType (  )  == Token.NAME || leftSide.getType (  )  == Token.GETPROP && leftSide.getFirstChild (  ) .getType (  )  == Token.THIS )  {^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[BugLab_Wrong_Operator]^if  ( leftSide.getType (  )  != Token.NAME || leftSide.getType (  )  == Token.GETPROP && leftSide.getFirstChild (  ) .getType (  )  == Token.THIS )  {^278^279^280^^^263^293^if  ( leftSide.getType (  )  == Token.NAME || leftSide.getType (  )  == Token.GETPROP && leftSide.getFirstChild (  ) .getType (  )  == Token.THIS )  {^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[BugLab_Wrong_Literal]^return true;^286^^^^^278^287^return false;^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[BugLab_Variable_Misuse]^parent = parent;^282^^^^^278^287^parent = next;^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[BugLab_Variable_Misuse]^next = value.getNext (  ) ;^283^^^^^278^287^next = leftSide.getNext (  ) ;^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[BugLab_Variable_Misuse]^next = parent.getFirstChild (  ) ;^208^^^^^193^223^next = next.getFirstChild (  ) ;^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[BugLab_Variable_Misuse]^parent = value.getFirstChild (  ) ;^213^^^^^198^228^parent = next.getFirstChild (  ) ;^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[BugLab_Variable_Misuse]^parent = parent;^282^^^^^267^297^parent = next;^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[BugLab_Variable_Misuse]^next = value.getNext (  ) ;^283^^^^^268^298^next = leftSide.getNext (  ) ;^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[BugLab_Wrong_Literal]^return true;^217^^^^^202^232^return false;^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[BugLab_Wrong_Literal]^return true;^240^^^^^225^255^return false;^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[BugLab_Wrong_Literal]^return true;^262^^^^^247^277^return false;^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[BugLab_Wrong_Literal]^return true;^286^^^^^271^301^return false;^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[BugLab_Wrong_Literal]^return true;^291^^^^^276^306^return false;^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[BugLab_Variable_Misuse]^next = value.getFirstChild (  ) ;^208^^^^^193^223^next = next.getFirstChild (  ) ;^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[BugLab_Variable_Misuse]^if  ( leftSide.getFirstChild (  ) .hasChildren (  )  )  {^212^^^^^197^227^if  ( next.getFirstChild (  ) .hasChildren (  )  )  {^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[BugLab_Variable_Misuse]^if  ( parent.isQualifiedName (  )  )  {^221^^^^^206^236^if  ( next.isQualifiedName (  )  )  {^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[BugLab_Variable_Misuse]^String parentName = next.getQualifiedName (  ) ;^222^^^^^207^237^String nextName = next.getQualifiedName (  ) ;^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[BugLab_Variable_Misuse]^nextName.equals ( parent.getQualifiedName (  )  )  )  {^224^^^^^209^239^nextName.equals ( value.getQualifiedName (  )  )  )  {^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[BugLab_Variable_Misuse]^expr.removeChild ( value ) ;^235^^^^^220^250^expr.removeChild ( assign ) ;^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[BugLab_Variable_Misuse]^parent.replaceChild ( value, assign ) ;^236^^^^^221^251^parent.replaceChild ( next, assign ) ;^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[BugLab_Argument_Swapping]^parent.replaceChild ( assign, next ) ;^236^^^^^221^251^parent.replaceChild ( next, assign ) ;^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[BugLab_Variable_Misuse]^if  ( leftSide.getType (  )  == next.getType (  )  )  {^247^^^^^232^262^if  ( value.getType (  )  == next.getType (  )  )  {^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[BugLab_Variable_Misuse]^if  ( value.getType (  )  == value.getType (  )  )  {^247^^^^^232^262^if  ( value.getType (  )  == next.getType (  )  )  {^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[BugLab_Variable_Misuse]^if  (  ( value.getType (  )  == Token.STRING || next.getType (  )  == Token.NUMBER )  && !next.isEquivalentTo ( value )  )  {^248^249^250^^^233^263^if  (  ( next.getType (  )  == Token.STRING || next.getType (  )  == Token.NUMBER )  && !next.isEquivalentTo ( value )  )  {^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[BugLab_Variable_Misuse]^!next.isEquivalentTo ( parent )  )  {^250^^^^^235^265^!next.isEquivalentTo ( value )  )  {^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[BugLab_Variable_Misuse]^exprParent.removeChild ( parent ) ;^257^^^^^242^272^exprParent.removeChild ( expr ) ;^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[BugLab_Variable_Misuse]^parent.replaceChild ( next, value ) ;^259^^^^^244^274^parent.replaceChild ( next, assign ) ;^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[BugLab_Variable_Misuse]^Node leftSide = value.getFirstChild (  ) ;^277^^^^^262^292^Node leftSide = next.getFirstChild (  ) ;^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[BugLab_Variable_Misuse]^if  ( value.getType (  )  == Token.NAME || leftSide.getType (  )  == Token.GETPROP && leftSide.getFirstChild (  ) .getType (  )  == Token.THIS )  {^278^279^280^^^263^293^if  ( leftSide.getType (  )  == Token.NAME || leftSide.getType (  )  == Token.GETPROP && leftSide.getFirstChild (  ) .getType (  )  == Token.THIS )  {^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[BugLab_Variable_Misuse]^leftSide.getType (  )  == Token.GETPROP && value.getFirstChild (  ) .getType (  )  == Token.THIS )  {^279^280^^^^264^294^leftSide.getType (  )  == Token.GETPROP && leftSide.getFirstChild (  ) .getType (  )  == Token.THIS )  {^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[BugLab_Variable_Misuse]^next = next.getNext (  ) ;^283^^^^^268^298^next = leftSide.getNext (  ) ;^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[BugLab_Variable_Misuse]^if  ( value.isQualifiedName (  )  )  {^221^^^^^206^236^if  ( next.isQualifiedName (  )  )  {^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[BugLab_Argument_Swapping]^if  ( nextName.isQualifiedName (  )  && value.equals ( value.getQualifiedName (  )  )  )  {^223^224^^^^208^238^if  ( value.isQualifiedName (  )  && nextName.equals ( value.getQualifiedName (  )  )  )  {^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[BugLab_Argument_Swapping]^if  ( value.isQualifiedName (  )  && nextNameName.equals ( value.getQualifiedName (  )  )  )  {^223^224^^^^208^238^if  ( value.isQualifiedName (  )  && nextName.equals ( value.getQualifiedName (  )  )  )  {^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[BugLab_Variable_Misuse]^exprParent.removeChild ( value ) ;^234^^^^^223^238^exprParent.removeChild ( expr ) ;^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[BugLab_Variable_Misuse]^parent.replaceChild ( next, value ) ;^236^^^^^223^238^parent.replaceChild ( next, assign ) ;^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[BugLab_Variable_Misuse]^if  ( leftSide.isQualifiedName (  )  && nextName.equals ( value.getQualifiedName (  )  )  )  {^223^224^^^^208^238^if  ( value.isQualifiedName (  )  && nextName.equals ( value.getQualifiedName (  )  )  )  {^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[BugLab_Variable_Misuse]^nextName.equals ( next.getQualifiedName (  )  )  )  {^224^^^^^209^239^nextName.equals ( value.getQualifiedName (  )  )  )  {^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[BugLab_Variable_Misuse]^expr.removeChild ( parent ) ;^235^^^^^220^250^expr.removeChild ( assign ) ;^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[BugLab_Variable_Misuse]^parent.replaceChild ( next, value ) ;^236^^^^^221^251^parent.replaceChild ( next, assign ) ;^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[BugLab_Variable_Misuse]^parent.replaceChild ( parent, assign ) ;^236^^^^^223^238^parent.replaceChild ( next, assign ) ;^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[BugLab_Wrong_Operator]^if  ( value.getType (  )  < next.getType (  )  )  {^247^^^^^232^262^if  ( value.getType (  )  == next.getType (  )  )  {^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[BugLab_Wrong_Operator]^if  ( value.getType (  )  >= next.getType (  )  )  {^247^^^^^232^262^if  ( value.getType (  )  == next.getType (  )  )  {^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[BugLab_Variable_Misuse]^parent = leftSide;^282^^^^^278^287^parent = next;^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[BugLab_Variable_Misuse]^next = next.getNext (  ) ;^283^^^^^278^287^next = leftSide.getNext (  ) ;^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[BugLab_Variable_Misuse]^parent = value;^207^^^^^192^222^parent = next;^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[BugLab_Variable_Misuse]^parent = parent.getFirstChild (  ) ;^213^^^^^198^228^parent = next.getFirstChild (  ) ;^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[BugLab_Variable_Misuse]^next = next.getFirstChild (  ) ;^214^^^^^199^229^next = parent.getFirstChild (  ) ;^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[BugLab_Variable_Misuse]^parent = value;^282^^^^^267^297^parent = next;^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[BugLab_Variable_Misuse]^next = leftSide.getFirstChild (  ) ;^214^^^^^199^229^next = parent.getFirstChild (  ) ;^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[BugLab_Variable_Misuse]^String leftSideName = next.getQualifiedName (  ) ;^222^^^^^207^237^String nextName = next.getQualifiedName (  ) ;^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[BugLab_Variable_Misuse]^exprParent.removeChild ( value ) ;^234^^^^^219^249^exprParent.removeChild ( expr ) ;^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[BugLab_Variable_Misuse]^expr.removeChild ( parent ) ;^258^^^^^243^273^expr.removeChild ( assign ) ;^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[BugLab_Variable_Misuse]^leftSide.getType (  )  == Token.GETPROP && next.getFirstChild (  ) .getType (  )  == Token.THIS )  {^279^280^^^^264^294^leftSide.getType (  )  == Token.GETPROP && leftSide.getFirstChild (  ) .getType (  )  == Token.THIS )  {^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[BugLab_Wrong_Literal]^return true;^295^^^^^280^310^return false;^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[BugLab_Variable_Misuse]^if  ( varNode.getType (  )  != Token.VAR )  return;^351^^^^^349^378^if  ( n.getType (  )  != Token.VAR )  return;^[CLASS] GatherCollapses  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  hasNodesToCollapse  NodeTraversal  t  Node  n  parent  varNode  
[BugLab_Wrong_Operator]^if  ( n.getType (  )  == Token.VAR )  return;^351^^^^^349^378^if  ( n.getType (  )  != Token.VAR )  return;^[CLASS] GatherCollapses  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  hasNodesToCollapse  NodeTraversal  t  Node  n  parent  varNode  
[BugLab_Variable_Misuse]^if  ( varNodeodesToCollapse.contains ( n )  )  return;^354^^^^^349^378^if  ( nodesToCollapse.contains ( n )  )  return;^[CLASS] GatherCollapses  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  hasNodesToCollapse  NodeTraversal  t  Node  n  parent  varNode  
[BugLab_Argument_Swapping]^if  ( nodesToCollapseodesToCollapse.contains ( n )  )  return;^354^^^^^349^378^if  ( nodesToCollapse.contains ( n )  )  return;^[CLASS] GatherCollapses  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  hasNodesToCollapse  NodeTraversal  t  Node  n  parent  varNode  
[BugLab_Argument_Swapping]^if  ( n.contains ( nodesToCollapse )  )  return;^354^^^^^349^378^if  ( nodesToCollapse.contains ( n )  )  return;^[CLASS] GatherCollapses  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  hasNodesToCollapse  NodeTraversal  t  Node  n  parent  varNode  
[BugLab_Variable_Misuse]^if  ( varNode.getType (  )  == Token.IF )  return;^358^^^^^349^378^if  ( parent.getType (  )  == Token.IF )  return;^[CLASS] GatherCollapses  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  hasNodesToCollapse  NodeTraversal  t  Node  n  parent  varNode  
[BugLab_Wrong_Operator]^if  ( parent.getType (  )  >= Token.IF )  return;^358^^^^^349^378^if  ( parent.getType (  )  == Token.IF )  return;^[CLASS] GatherCollapses  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  hasNodesToCollapse  NodeTraversal  t  Node  n  parent  varNode  
[BugLab_Variable_Misuse]^Node varNode = parent;^360^^^^^349^378^Node varNode = n;^[CLASS] GatherCollapses  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  hasNodesToCollapse  NodeTraversal  t  Node  n  parent  varNode  
[BugLab_Variable_Misuse]^n = varNode.getNext (  ) ;^363^^^^^349^378^n = n.getNext (  ) ;^[CLASS] GatherCollapses  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  hasNodesToCollapse  NodeTraversal  t  Node  n  parent  varNode  
[BugLab_Wrong_Literal]^boolean hasNodesToCollapse = true;^365^^^^^349^378^boolean hasNodesToCollapse = false;^[CLASS] GatherCollapses  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  hasNodesToCollapse  NodeTraversal  t  Node  n  parent  varNode  
[BugLab_Variable_Misuse]^while  ( varNode != null && n.getType (  )  == Token.VAR )  {^366^^^^^349^378^while  ( n != null && n.getType (  )  == Token.VAR )  {^[CLASS] GatherCollapses  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  hasNodesToCollapse  NodeTraversal  t  Node  n  parent  varNode  
[BugLab_Wrong_Operator]^while  ( n != null || n.getType (  )  == Token.VAR )  {^366^^^^^349^378^while  ( n != null && n.getType (  )  == Token.VAR )  {^[CLASS] GatherCollapses  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  hasNodesToCollapse  NodeTraversal  t  Node  n  parent  varNode  
[BugLab_Wrong_Operator]^while  ( n == null && n.getType (  )  == Token.VAR )  {^366^^^^^349^378^while  ( n != null && n.getType (  )  == Token.VAR )  {^[CLASS] GatherCollapses  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  hasNodesToCollapse  NodeTraversal  t  Node  n  parent  varNode  
[BugLab_Wrong_Operator]^while  ( n != null && n.getType (  )  != Token.VAR )  {^366^^^^^349^378^while  ( n != null && n.getType (  )  == Token.VAR )  {^[CLASS] GatherCollapses  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  hasNodesToCollapse  NodeTraversal  t  Node  n  parent  varNode  
[BugLab_Wrong_Literal]^hasNodesToCollapse = false;^368^^^^^349^378^hasNodesToCollapse = true;^[CLASS] GatherCollapses  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  hasNodesToCollapse  NodeTraversal  t  Node  n  parent  varNode  
[BugLab_Variable_Misuse]^n = varNode.getNext (  ) ;^370^^^^^349^378^n = n.getNext (  ) ;^[CLASS] GatherCollapses  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  hasNodesToCollapse  NodeTraversal  t  Node  n  parent  varNode  
[BugLab_Variable_Misuse]^nodesToCollapse.add ( varNode ) ;^367^^^^^349^378^nodesToCollapse.add ( n ) ;^[CLASS] GatherCollapses  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  hasNodesToCollapse  NodeTraversal  t  Node  n  parent  varNode  
[BugLab_Variable_Misuse]^collapses.add ( new Collapse ( n, parent )  ) ;^375^^^^^349^378^collapses.add ( new Collapse ( varNode, parent )  ) ;^[CLASS] GatherCollapses  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  hasNodesToCollapse  NodeTraversal  t  Node  n  parent  varNode  
[BugLab_Variable_Misuse]^collapses.add ( new Collapse ( varNode, n )  ) ;^375^^^^^349^378^collapses.add ( new Collapse ( varNode, parent )  ) ;^[CLASS] GatherCollapses  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  hasNodesToCollapse  NodeTraversal  t  Node  n  parent  varNode  
[BugLab_Argument_Swapping]^collapses.add ( new Collapse ( parent, varNode )  ) ;^375^^^^^349^378^collapses.add ( new Collapse ( varNode, parent )  ) ;^[CLASS] GatherCollapses  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  hasNodesToCollapse  NodeTraversal  t  Node  n  parent  varNode  
[BugLab_Variable_Misuse]^nodesToCollapse.add ( parent ) ;^374^^^^^349^378^nodesToCollapse.add ( varNode ) ;^[CLASS] GatherCollapses  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  hasNodesToCollapse  NodeTraversal  t  Node  n  parent  varNode  
[BugLab_Variable_Misuse]^collapses.add ( new Collapse ( parent, parent )  ) ;^375^^^^^349^378^collapses.add ( new Collapse ( varNode, parent )  ) ;^[CLASS] GatherCollapses  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  hasNodesToCollapse  NodeTraversal  t  Node  n  parent  varNode  
