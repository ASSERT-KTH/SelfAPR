[buglab_swap_variables]^NodeTraversal.traverse ( root, compiler, new CombinedCompilerPass ( compiler, new ExploitAssigns (  ) , new GatherCollapses (  )  )  ) ;^105^106^107^^^101^112^NodeTraversal.traverse ( compiler, root, new CombinedCompilerPass ( compiler, new ExploitAssigns (  ) , new GatherCollapses (  )  )  ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  Node  externs  firstVarNode  parent  root  
[buglab_swap_variables]^NodeTraversal.traverse ( compiler,  new CombinedCompilerPass ( compiler, new ExploitAssigns (  ) , new GatherCollapses (  )  )  ) ;^105^106^107^^^101^112^NodeTraversal.traverse ( compiler, root, new CombinedCompilerPass ( compiler, new ExploitAssigns (  ) , new GatherCollapses (  )  )  ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  Node  externs  firstVarNode  parent  root  
[buglab_swap_variables]^NodeTraversal.traverse (  root, new CombinedCompilerPass ( compiler, new ExploitAssigns (  ) , new GatherCollapses (  )  )  ) ;^105^106^107^^^101^112^NodeTraversal.traverse ( compiler, root, new CombinedCompilerPass ( compiler, new ExploitAssigns (  ) , new GatherCollapses (  )  )  ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  Node  externs  firstVarNode  parent  root  
[buglab_swap_variables]^collapseAssign ( expr, t.getFirstChild (  ) , expr, exprParent ) ;^121^^^^^116^122^collapseAssign ( t, expr.getFirstChild (  ) , expr, exprParent ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node expr Node exprParent [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  NodeTraversal  t  Node  expr  exprParent  externs  firstVarNode  parent  root  
[buglab_swap_variables]^collapseAssign (  expr.getFirstChild (  ) , expr, exprParent ) ;^121^^^^^116^122^collapseAssign ( t, expr.getFirstChild (  ) , expr, exprParent ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node expr Node exprParent [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  NodeTraversal  t  Node  expr  exprParent  externs  firstVarNode  parent  root  
[buglab_swap_variables]^collapseAssign ( t, expr.getFirstChild (  ) ,  exprParent ) ;^121^^^^^116^122^collapseAssign ( t, expr.getFirstChild (  ) , expr, exprParent ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node expr Node exprParent [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  NodeTraversal  t  Node  expr  exprParent  externs  firstVarNode  parent  root  
[buglab_swap_variables]^collapseAssign ( t, exprParent.getFirstChild (  ) , expr, expr ) ;^121^^^^^116^122^collapseAssign ( t, expr.getFirstChild (  ) , expr, exprParent ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node expr Node exprParent [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  NodeTraversal  t  Node  expr  exprParent  externs  firstVarNode  parent  root  
[buglab_swap_variables]^collapseAssign ( t, expr.getFirstChild (  ) , expr ) ;^121^^^^^116^122^collapseAssign ( t, expr.getFirstChild (  ) , expr, exprParent ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node expr Node exprParent [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  NodeTraversal  t  Node  expr  exprParent  externs  firstVarNode  parent  root  
[buglab_swap_variables]^if  ( isCollapsibleValue ( exprParent, true )  && collapseAssignEqualTo ( expr, leftValue, leftValue )  )  {^131^132^^^^127^141^if  ( isCollapsibleValue ( leftValue, true )  && collapseAssignEqualTo ( expr, exprParent, leftValue )  )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssign [RETURN_TYPE] void   NodeTraversal t Node assign Node expr Node exprParent [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  NodeTraversal  t  Node  assign  expr  exprParent  externs  firstVarNode  leftValue  parent  rightValue  root  
[buglab_swap_variables]^if  ( isCollapsibleValue (  true )  && collapseAssignEqualTo ( expr, exprParent, leftValue )  )  {^131^132^^^^127^141^if  ( isCollapsibleValue ( leftValue, true )  && collapseAssignEqualTo ( expr, exprParent, leftValue )  )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssign [RETURN_TYPE] void   NodeTraversal t Node assign Node expr Node exprParent [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  NodeTraversal  t  Node  assign  expr  exprParent  externs  firstVarNode  leftValue  parent  rightValue  root  
[buglab_swap_variables]^if  ( isCollapsibleValue ( leftValue, true )  && collapseAssignEqualTo ( exprParent, expr, leftValue )  )  {^131^132^^^^127^141^if  ( isCollapsibleValue ( leftValue, true )  && collapseAssignEqualTo ( expr, exprParent, leftValue )  )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssign [RETURN_TYPE] void   NodeTraversal t Node assign Node expr Node exprParent [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  NodeTraversal  t  Node  assign  expr  exprParent  externs  firstVarNode  leftValue  parent  rightValue  root  
[buglab_swap_variables]^if  ( isCollapsibleValue ( leftValue, true )  && collapseAssignEqualTo (  exprParent, leftValue )  )  {^131^132^^^^127^141^if  ( isCollapsibleValue ( leftValue, true )  && collapseAssignEqualTo ( expr, exprParent, leftValue )  )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssign [RETURN_TYPE] void   NodeTraversal t Node assign Node expr Node exprParent [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  NodeTraversal  t  Node  assign  expr  exprParent  externs  firstVarNode  leftValue  parent  rightValue  root  
[buglab_swap_variables]^if  ( isCollapsibleValue ( leftValue, true )  && collapseAssignEqualTo ( expr,  leftValue )  )  {^131^132^^^^127^141^if  ( isCollapsibleValue ( leftValue, true )  && collapseAssignEqualTo ( expr, exprParent, leftValue )  )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssign [RETURN_TYPE] void   NodeTraversal t Node assign Node expr Node exprParent [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  NodeTraversal  t  Node  assign  expr  exprParent  externs  firstVarNode  leftValue  parent  rightValue  root  
[buglab_swap_variables]^if  ( isCollapsibleValue ( leftValue, exprrue )  && collapseAssignEqualTo ( t, exprParent, leftValue )  )  {^131^132^^^^127^141^if  ( isCollapsibleValue ( leftValue, true )  && collapseAssignEqualTo ( expr, exprParent, leftValue )  )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssign [RETURN_TYPE] void   NodeTraversal t Node assign Node expr Node exprParent [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  NodeTraversal  t  Node  assign  expr  exprParent  externs  firstVarNode  leftValue  parent  rightValue  root  
[buglab_swap_variables]^if  ( isCollapsibleValue ( leftValue, true )  && collapseAssignEqualTo ( expr, exprParen leftValue )  )  {^131^132^^^^127^141^if  ( isCollapsibleValue ( leftValue, true )  && collapseAssignEqualTo ( expr, exprParent, leftValue )  )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssign [RETURN_TYPE] void   NodeTraversal t Node assign Node expr Node exprParent [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  NodeTraversal  t  Node  assign  expr  exprParent  externs  firstVarNode  leftValue  parent  rightValue  root  
[buglab_swap_variables]^} else if  ( isCollapsibleValue ( exprParent, false )  && collapseAssignEqualTo ( expr, rightValue, rightValue )  )  {^134^135^^^^127^141^} else if  ( isCollapsibleValue ( rightValue, false )  && collapseAssignEqualTo ( expr, exprParent, rightValue )  )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssign [RETURN_TYPE] void   NodeTraversal t Node assign Node expr Node exprParent [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  NodeTraversal  t  Node  assign  expr  exprParent  externs  firstVarNode  leftValue  parent  rightValue  root  
[buglab_swap_variables]^} else if  ( isCollapsibleValue (  false )  && collapseAssignEqualTo ( expr, exprParent, rightValue )  )  {^134^135^^^^127^141^} else if  ( isCollapsibleValue ( rightValue, false )  && collapseAssignEqualTo ( expr, exprParent, rightValue )  )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssign [RETURN_TYPE] void   NodeTraversal t Node assign Node expr Node exprParent [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  NodeTraversal  t  Node  assign  expr  exprParent  externs  firstVarNode  leftValue  parent  rightValue  root  
[buglab_swap_variables]^} else if  ( isCollapsibleValue ( rightValue, false )  && collapseAssignEqualTo ( exprParent, expr, rightValue )  )  {^134^135^^^^127^141^} else if  ( isCollapsibleValue ( rightValue, false )  && collapseAssignEqualTo ( expr, exprParent, rightValue )  )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssign [RETURN_TYPE] void   NodeTraversal t Node assign Node expr Node exprParent [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  NodeTraversal  t  Node  assign  expr  exprParent  externs  firstVarNode  leftValue  parent  rightValue  root  
[buglab_swap_variables]^} else if  ( isCollapsibleValue ( rightValue, false )  && collapseAssignEqualTo (  exprParent, rightValue )  )  {^134^135^^^^127^141^} else if  ( isCollapsibleValue ( rightValue, false )  && collapseAssignEqualTo ( expr, exprParent, rightValue )  )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssign [RETURN_TYPE] void   NodeTraversal t Node assign Node expr Node exprParent [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  NodeTraversal  t  Node  assign  expr  exprParent  externs  firstVarNode  leftValue  parent  rightValue  root  
[buglab_swap_variables]^} else if  ( isCollapsibleValue ( rightValue, false )  && collapseAssignEqualTo ( expr,  rightValue )  )  {^134^135^^^^127^141^} else if  ( isCollapsibleValue ( rightValue, false )  && collapseAssignEqualTo ( expr, exprParent, rightValue )  )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssign [RETURN_TYPE] void   NodeTraversal t Node assign Node expr Node exprParent [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  NodeTraversal  t  Node  assign  expr  exprParent  externs  firstVarNode  leftValue  parent  rightValue  root  
[buglab_swap_variables]^} else if  ( isCollapsibleValue ( rightValue, false )  && collapseAssignEqualTo ( expr, exprParen rightValue )  )  {^134^135^^^^127^141^} else if  ( isCollapsibleValue ( rightValue, false )  && collapseAssignEqualTo ( expr, exprParent, rightValue )  )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssign [RETURN_TYPE] void   NodeTraversal t Node assign Node expr Node exprParent [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  NodeTraversal  t  Node  assign  expr  exprParent  externs  firstVarNode  leftValue  parent  rightValue  root  
[buglab_swap_variables]^collapseAssign ( expr, rightValue, t, exprParent ) ;^139^^^^^127^141^collapseAssign ( t, rightValue, expr, exprParent ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssign [RETURN_TYPE] void   NodeTraversal t Node assign Node expr Node exprParent [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  NodeTraversal  t  Node  assign  expr  exprParent  externs  firstVarNode  leftValue  parent  rightValue  root  
[buglab_swap_variables]^collapseAssign (  rightValue, expr, exprParent ) ;^139^^^^^127^141^collapseAssign ( t, rightValue, expr, exprParent ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssign [RETURN_TYPE] void   NodeTraversal t Node assign Node expr Node exprParent [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  NodeTraversal  t  Node  assign  expr  exprParent  externs  firstVarNode  leftValue  parent  rightValue  root  
[buglab_swap_variables]^collapseAssign ( t, exprParent, expr, rightValue ) ;^139^^^^^127^141^collapseAssign ( t, rightValue, expr, exprParent ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssign [RETURN_TYPE] void   NodeTraversal t Node assign Node expr Node exprParent [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  NodeTraversal  t  Node  assign  expr  exprParent  externs  firstVarNode  leftValue  parent  rightValue  root  
[buglab_swap_variables]^collapseAssign ( t,  expr, exprParent ) ;^139^^^^^127^141^collapseAssign ( t, rightValue, expr, exprParent ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssign [RETURN_TYPE] void   NodeTraversal t Node assign Node expr Node exprParent [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  NodeTraversal  t  Node  assign  expr  exprParent  externs  firstVarNode  leftValue  parent  rightValue  root  
[buglab_swap_variables]^collapseAssign ( t, rightValue, exprParent, expr ) ;^139^^^^^127^141^collapseAssign ( t, rightValue, expr, exprParent ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssign [RETURN_TYPE] void   NodeTraversal t Node assign Node expr Node exprParent [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  NodeTraversal  t  Node  assign  expr  exprParent  externs  firstVarNode  leftValue  parent  rightValue  root  
[buglab_swap_variables]^collapseAssign ( t, rightValue,  exprParent ) ;^139^^^^^127^141^collapseAssign ( t, rightValue, expr, exprParent ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssign [RETURN_TYPE] void   NodeTraversal t Node assign Node expr Node exprParent [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  NodeTraversal  t  Node  assign  expr  exprParent  externs  firstVarNode  leftValue  parent  rightValue  root  
[buglab_swap_variables]^collapseAssign ( t, rightValue, expr ) ;^139^^^^^127^141^collapseAssign ( t, rightValue, expr, exprParent ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssign [RETURN_TYPE] void   NodeTraversal t Node assign Node expr Node exprParent [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  NodeTraversal  t  Node  assign  expr  exprParent  externs  firstVarNode  leftValue  parent  rightValue  root  
[buglab_swap_variables]^collapseAssign ( rightValue, t, expr, exprParent ) ;^139^^^^^127^141^collapseAssign ( t, rightValue, expr, exprParent ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssign [RETURN_TYPE] void   NodeTraversal t Node assign Node expr Node exprParent [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  NodeTraversal  t  Node  assign  expr  exprParent  externs  firstVarNode  leftValue  parent  rightValue  root  
[buglab_swap_variables]^collapseAssignEqualTo ( rightValue, exprParent, expr )  )  {^135^^^^^127^141^collapseAssignEqualTo ( expr, exprParent, rightValue )  )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssign [RETURN_TYPE] void   NodeTraversal t Node assign Node expr Node exprParent [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  NodeTraversal  t  Node  assign  expr  exprParent  externs  firstVarNode  leftValue  parent  rightValue  root  
[buglab_swap_variables]^collapseAssignEqualTo (  exprParent, rightValue )  )  {^135^^^^^127^141^collapseAssignEqualTo ( expr, exprParent, rightValue )  )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssign [RETURN_TYPE] void   NodeTraversal t Node assign Node expr Node exprParent [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  NodeTraversal  t  Node  assign  expr  exprParent  externs  firstVarNode  leftValue  parent  rightValue  root  
[buglab_swap_variables]^collapseAssignEqualTo ( exprParent, expr, rightValue )  )  {^135^^^^^127^141^collapseAssignEqualTo ( expr, exprParent, rightValue )  )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssign [RETURN_TYPE] void   NodeTraversal t Node assign Node expr Node exprParent [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  NodeTraversal  t  Node  assign  expr  exprParent  externs  firstVarNode  leftValue  parent  rightValue  root  
[buglab_swap_variables]^collapseAssignEqualTo ( expr,  rightValue )  )  {^135^^^^^127^141^collapseAssignEqualTo ( expr, exprParent, rightValue )  )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssign [RETURN_TYPE] void   NodeTraversal t Node assign Node expr Node exprParent [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  NodeTraversal  t  Node  assign  expr  exprParent  externs  firstVarNode  leftValue  parent  rightValue  root  
[buglab_swap_variables]^collapseAssignEqualTo ( expr, exprParent )  )  {^135^^^^^127^141^collapseAssignEqualTo ( expr, exprParent, rightValue )  )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssign [RETURN_TYPE] void   NodeTraversal t Node assign Node expr Node exprParent [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  NodeTraversal  t  Node  assign  expr  exprParent  externs  firstVarNode  leftValue  parent  rightValue  root  
[buglab_swap_variables]^collapseAssign ( exprParent, rightValue, expr, t ) ;^139^^^^^127^141^collapseAssign ( t, rightValue, expr, exprParent ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssign [RETURN_TYPE] void   NodeTraversal t Node assign Node expr Node exprParent [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  NodeTraversal  t  Node  assign  expr  exprParent  externs  firstVarNode  leftValue  parent  rightValue  root  
[buglab_swap_variables]^collapseAssign ( t, expr, rightValue, exprParent ) ;^139^^^^^127^141^collapseAssign ( t, rightValue, expr, exprParent ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssign [RETURN_TYPE] void   NodeTraversal t Node assign Node expr Node exprParent [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  NodeTraversal  t  Node  assign  expr  exprParent  externs  firstVarNode  leftValue  parent  rightValue  root  
[buglab_swap_variables]^} else if  ( isCollapsibleValue ( expr, false )  && collapseAssignEqualTo ( rightValue, exprParent, rightValue )  )  {^134^135^^^^127^141^} else if  ( isCollapsibleValue ( rightValue, false )  && collapseAssignEqualTo ( expr, exprParent, rightValue )  )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssign [RETURN_TYPE] void   NodeTraversal t Node assign Node expr Node exprParent [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  NodeTraversal  t  Node  assign  expr  exprParent  externs  firstVarNode  leftValue  parent  rightValue  root  
[buglab_swap_variables]^collapseAssignEqualTo ( exprParent, expr, leftValue )  )  {^132^^^^^127^141^collapseAssignEqualTo ( expr, exprParent, leftValue )  )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssign [RETURN_TYPE] void   NodeTraversal t Node assign Node expr Node exprParent [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  NodeTraversal  t  Node  assign  expr  exprParent  externs  firstVarNode  leftValue  parent  rightValue  root  
[buglab_swap_variables]^collapseAssignEqualTo (  exprParent, leftValue )  )  {^132^^^^^127^141^collapseAssignEqualTo ( expr, exprParent, leftValue )  )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssign [RETURN_TYPE] void   NodeTraversal t Node assign Node expr Node exprParent [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  NodeTraversal  t  Node  assign  expr  exprParent  externs  firstVarNode  leftValue  parent  rightValue  root  
[buglab_swap_variables]^collapseAssignEqualTo ( expr, leftValue, exprParent )  )  {^132^^^^^127^141^collapseAssignEqualTo ( expr, exprParent, leftValue )  )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssign [RETURN_TYPE] void   NodeTraversal t Node assign Node expr Node exprParent [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  NodeTraversal  t  Node  assign  expr  exprParent  externs  firstVarNode  leftValue  parent  rightValue  root  
[buglab_swap_variables]^collapseAssignEqualTo ( expr,  leftValue )  )  {^132^^^^^127^141^collapseAssignEqualTo ( expr, exprParent, leftValue )  )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssign [RETURN_TYPE] void   NodeTraversal t Node assign Node expr Node exprParent [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  NodeTraversal  t  Node  assign  expr  exprParent  externs  firstVarNode  leftValue  parent  rightValue  root  
[buglab_swap_variables]^collapseAssignEqualTo ( leftValue, exprParent, expr )  )  {^132^^^^^127^141^collapseAssignEqualTo ( expr, exprParent, leftValue )  )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssign [RETURN_TYPE] void   NodeTraversal t Node assign Node expr Node exprParent [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  NodeTraversal  t  Node  assign  expr  exprParent  externs  firstVarNode  leftValue  parent  rightValue  root  
[buglab_swap_variables]^collapseAssignEqualTo ( expr, exprParent )  )  {^132^^^^^127^141^collapseAssignEqualTo ( expr, exprParent, leftValue )  )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssign [RETURN_TYPE] void   NodeTraversal t Node assign Node expr Node exprParent [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  NodeTraversal  t  Node  assign  expr  exprParent  externs  firstVarNode  leftValue  parent  rightValue  root  
[buglab_swap_variables]^collapseAssignEqualTo ( expr, rightValue, exprParent )  )  {^135^^^^^127^141^collapseAssignEqualTo ( expr, exprParent, rightValue )  )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssign [RETURN_TYPE] void   NodeTraversal t Node assign Node expr Node exprParent [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  NodeTraversal  t  Node  assign  expr  exprParent  externs  firstVarNode  leftValue  parent  rightValue  root  
[buglab_swap_variables]^if  ( next.isQualifiedName (  )  && valueName.equals ( value.getQualifiedName (  )  )  )  {^223^224^^^^208^238^if  ( value.isQualifiedName (  )  && nextName.equals ( value.getQualifiedName (  )  )  )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[buglab_swap_variables]^if  ( !isSafeReplacement ( assign, next )  )  {^230^^^^^223^238^if  ( !isSafeReplacement ( next, assign )  )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[buglab_swap_variables]^if  ( !isSafeReplacement (  assign )  )  {^230^^^^^223^238^if  ( !isSafeReplacement ( next, assign )  )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[buglab_swap_variables]^if  ( !isSafeReplacement ( next )  )  {^230^^^^^223^238^if  ( !isSafeReplacement ( next, assign )  )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[buglab_swap_variables]^parent.replaceChild ( assign, next ) ;^236^^^^^223^238^parent.replaceChild ( next, assign ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[buglab_swap_variables]^parent.replaceChild (  assign ) ;^236^^^^^223^238^parent.replaceChild ( next, assign ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[buglab_swap_variables]^parent.replaceChild ( next ) ;^236^^^^^223^238^parent.replaceChild ( next, assign ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[buglab_swap_variables]^if  ( !isSafeReplacement ( assign, next )  )  {^230^^^^^215^245^if  ( !isSafeReplacement ( next, assign )  )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[buglab_swap_variables]^if  ( !isSafeReplacement (  assign )  )  {^230^^^^^215^245^if  ( !isSafeReplacement ( next, assign )  )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[buglab_swap_variables]^if  ( !isSafeReplacement ( next )  )  {^230^^^^^215^245^if  ( !isSafeReplacement ( next, assign )  )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[buglab_swap_variables]^parent.replaceChild (  assign ) ;^236^^^^^221^251^parent.replaceChild ( next, assign ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[buglab_swap_variables]^parent.replaceChild ( next ) ;^236^^^^^221^251^parent.replaceChild ( next, assign ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[buglab_swap_variables]^if  (  ( value.getType (  )  == Token.STRING || next.getType (  )  == Token.NUMBER )  && !next.isEquivalentTo ( next )  )  {^248^249^250^^^233^263^if  (  ( next.getType (  )  == Token.STRING || next.getType (  )  == Token.NUMBER )  && !next.isEquivalentTo ( value )  )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[buglab_swap_variables]^parent.replaceChild (  assign ) ;^259^^^^^244^274^parent.replaceChild ( next, assign ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[buglab_swap_variables]^parent.replaceChild ( assign, next ) ;^259^^^^^244^274^parent.replaceChild ( next, assign ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[buglab_swap_variables]^parent.replaceChild ( next ) ;^259^^^^^244^274^parent.replaceChild ( next, assign ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[buglab_swap_variables]^parent.replaceChild ( assign, next ) ;^236^^^^^221^251^parent.replaceChild ( next, assign ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[buglab_swap_variables]^if  ( nextName.isQualifiedName (  )  && value.equals ( value.getQualifiedName (  )  )  )  {^223^224^^^^208^238^if  ( value.isQualifiedName (  )  && nextName.equals ( value.getQualifiedName (  )  )  )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[buglab_swap_variables]^if  ( replacement.getType (  )  == Token.NAME && isNameAssignedTo ( name.getString (  ) , name )  )  {^312^313^^^^304^318^if  ( name.getType (  )  == Token.NAME && isNameAssignedTo ( name.getString (  ) , replacement )  )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] isSafeReplacement [RETURN_TYPE] boolean   Node node Node replacement [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  name  next  node  parent  replacement  rightValue  root  value  
[buglab_swap_variables]^if  ( name.getType (  )  == Token.NAME && isNameAssignedTo ( name.getString (  )  )  )  {^312^313^^^^304^318^if  ( name.getType (  )  == Token.NAME && isNameAssignedTo ( name.getString (  ) , replacement )  )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] isSafeReplacement [RETURN_TYPE] boolean   Node node Node replacement [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  name  next  node  parent  replacement  rightValue  root  value  
[buglab_swap_variables]^&& isNameAssignedTo ( replacement.getString (  ) , name )  )  {^313^^^^^304^318^&& isNameAssignedTo ( name.getString (  ) , replacement )  )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] isSafeReplacement [RETURN_TYPE] boolean   Node node Node replacement [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  name  next  node  parent  replacement  rightValue  root  value  
[buglab_swap_variables]^&& isNameAssignedTo ( name.getString (  )  )  )  {^313^^^^^304^318^&& isNameAssignedTo ( name.getString (  ) , replacement )  )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] isSafeReplacement [RETURN_TYPE] boolean   Node node Node replacement [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  name  next  node  parent  replacement  rightValue  root  value  
[buglab_swap_variables]^if  ( isNameAssignedTo ( c, name )  )  {^325^^^^^323^340^if  ( isNameAssignedTo ( name, c )  )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] isNameAssignedTo [RETURN_TYPE] boolean   String name Node node [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  name  boolean  Node  assign  c  expr  exprParent  externs  firstVarNode  leftSide  leftValue  name  next  node  parent  replacement  rightValue  root  value  
[buglab_swap_variables]^if  ( isNameAssignedTo (  c )  )  {^325^^^^^323^340^if  ( isNameAssignedTo ( name, c )  )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] isNameAssignedTo [RETURN_TYPE] boolean   String name Node node [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  name  boolean  Node  assign  c  expr  exprParent  externs  firstVarNode  leftSide  leftValue  name  next  node  parent  replacement  rightValue  root  value  
[buglab_swap_variables]^if  ( isNameAssignedTo ( name )  )  {^325^^^^^323^340^if  ( isNameAssignedTo ( name, c )  )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] isNameAssignedTo [RETURN_TYPE] boolean   String name Node node [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  name  boolean  Node  assign  c  expr  exprParent  externs  firstVarNode  leftSide  leftValue  name  next  node  parent  replacement  rightValue  root  value  
[buglab_swap_variables]^for  ( Node node = c.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  {^324^^^^^323^340^for  ( Node c = node.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] isNameAssignedTo [RETURN_TYPE] boolean   String name Node node [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  name  boolean  Node  assign  c  expr  exprParent  externs  firstVarNode  leftSide  leftValue  name  next  node  parent  replacement  rightValue  root  value  
[buglab_swap_variables]^if  ( node.getType (  )  == Token.ASSIGN && parent.getFirstChild (  )  == parent )  {^332^^^^^323^340^if  ( parent.getType (  )  == Token.ASSIGN && parent.getFirstChild (  )  == node )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] isNameAssignedTo [RETURN_TYPE] boolean   String name Node node [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  name  boolean  Node  assign  c  expr  exprParent  externs  firstVarNode  leftSide  leftValue  name  next  node  parent  replacement  rightValue  root  value  
[buglab_swap_variables]^if  ( node.equals ( name.getString (  )  )  )  {^333^^^^^323^340^if  ( name.equals ( node.getString (  )  )  )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] isNameAssignedTo [RETURN_TYPE] boolean   String name Node node [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  name  boolean  Node  assign  c  expr  exprParent  externs  firstVarNode  leftSide  leftValue  name  next  node  parent  replacement  rightValue  root  value  
[buglab_swap_variables]^if  ( nodesToCollapseodesToCollapse.contains ( n )  )  return;^354^^^^^349^378^if  ( nodesToCollapse.contains ( n )  )  return;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  hasNodesToCollapse  NodeTraversal  t  Node  assign  c  expr  exprParent  externs  firstVarNode  leftSide  leftValue  n  name  next  node  parent  replacement  rightValue  root  value  varNode  
[buglab_swap_variables]^if  ( n.contains ( nodesToCollapse )  )  return;^354^^^^^349^378^if  ( nodesToCollapse.contains ( n )  )  return;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  hasNodesToCollapse  NodeTraversal  t  Node  assign  c  expr  exprParent  externs  firstVarNode  leftSide  leftValue  n  name  next  node  parent  replacement  rightValue  root  value  varNode  
[buglab_swap_variables]^collapses.add ( new Collapse ( parent, varNode )  ) ;^375^^^^^349^378^collapses.add ( new Collapse ( varNode, parent )  ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  hasNodesToCollapse  NodeTraversal  t  Node  assign  c  expr  exprParent  externs  firstVarNode  leftSide  leftValue  n  name  next  node  parent  replacement  rightValue  root  value  varNode  
[buglab_swap_variables]^collapses.add ( new Collapse (  parent )  ) ;^375^^^^^349^378^collapses.add ( new Collapse ( varNode, parent )  ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  hasNodesToCollapse  NodeTraversal  t  Node  assign  c  expr  exprParent  externs  firstVarNode  leftSide  leftValue  n  name  next  node  parent  replacement  rightValue  root  value  varNode  
[buglab_swap_variables]^collapses.add ( new Collapse ( varNode )  ) ;^375^^^^^349^378^collapses.add ( new Collapse ( varNode, parent )  ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  hasNodesToCollapse  NodeTraversal  t  Node  assign  c  expr  exprParent  externs  firstVarNode  leftSide  leftValue  n  name  next  node  parent  replacement  rightValue  root  value  varNode  
[buglab_swap_variables]^Node next = first.parent.removeChildAfter ( collapse ) ;^386^^^^^381^392^Node next = collapse.parent.removeChildAfter ( first ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] applyCollapses [RETURN_TYPE] void   [VARIABLES] Collapse  collapse  AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  Node  assign  c  expr  exprParent  externs  first  firstVarNode  leftSide  leftValue  n  name  next  node  parent  replacement  rightValue  root  value  varNode  
[buglab_swap_variables]^Node next = first.removeChildAfter ( collapse.parent ) ;^386^^^^^381^392^Node next = collapse.parent.removeChildAfter ( first ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] applyCollapses [RETURN_TYPE] void   [VARIABLES] Collapse  collapse  AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  Node  assign  c  expr  exprParent  externs  first  firstVarNode  leftSide  leftValue  n  name  next  node  parent  replacement  rightValue  root  value  varNode  
[buglab_swap_variables]^Node next = collapse.parent.parent.removeChildAfter ( first ) ;^386^^^^^381^392^Node next = collapse.parent.removeChildAfter ( first ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] applyCollapses [RETURN_TYPE] void   [VARIABLES] Collapse  collapse  AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  Node  assign  c  expr  exprParent  externs  first  firstVarNode  leftSide  leftValue  n  name  next  node  parent  replacement  rightValue  root  value  varNode  
[buglab_swap_variables]^Node first = collapse.firstVarNode.firstVarNode;^383^^^^^381^392^Node first = collapse.firstVarNode;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] applyCollapses [RETURN_TYPE] void   [VARIABLES] Collapse  collapse  AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  Node  assign  c  expr  exprParent  externs  first  firstVarNode  leftSide  leftValue  n  name  next  node  parent  replacement  rightValue  root  value  varNode  
[buglab_swap_variables]^Node first = collapse;^383^^^^^381^392^Node first = collapse.firstVarNode;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] applyCollapses [RETURN_TYPE] void   [VARIABLES] Collapse  collapse  AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  Node  assign  c  expr  exprParent  externs  first  firstVarNode  leftSide  leftValue  n  name  next  node  parent  replacement  rightValue  root  value  varNode  
[buglab_swap_variables]^Node next = collapse.removeChildAfter ( first ) ;^386^^^^^381^392^Node next = collapse.parent.removeChildAfter ( first ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] applyCollapses [RETURN_TYPE] void   [VARIABLES] Collapse  collapse  AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  Node  assign  c  expr  exprParent  externs  first  firstVarNode  leftSide  leftValue  n  name  next  node  parent  replacement  rightValue  root  value  varNode  
[buglab_swap_variables]^collapseAssign ( expr, t.getFirstChild (  ) , expr, exprParent ) ;^121^^^^^116^122^collapseAssign ( t, expr.getFirstChild (  ) , expr, exprParent ) ;^[CLASS] ExploitAssigns  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node expr Node exprParent [VARIABLES] boolean  NodeTraversal  t  Node  expr  exprParent  
[buglab_swap_variables]^collapseAssign (  expr.getFirstChild (  ) , expr, exprParent ) ;^121^^^^^116^122^collapseAssign ( t, expr.getFirstChild (  ) , expr, exprParent ) ;^[CLASS] ExploitAssigns  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node expr Node exprParent [VARIABLES] boolean  NodeTraversal  t  Node  expr  exprParent  
[buglab_swap_variables]^collapseAssign ( t, expr.getFirstChild (  ) ,  exprParent ) ;^121^^^^^116^122^collapseAssign ( t, expr.getFirstChild (  ) , expr, exprParent ) ;^[CLASS] ExploitAssigns  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node expr Node exprParent [VARIABLES] boolean  NodeTraversal  t  Node  expr  exprParent  
[buglab_swap_variables]^collapseAssign ( t, exprParent.getFirstChild (  ) , expr, expr ) ;^121^^^^^116^122^collapseAssign ( t, expr.getFirstChild (  ) , expr, exprParent ) ;^[CLASS] ExploitAssigns  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node expr Node exprParent [VARIABLES] boolean  NodeTraversal  t  Node  expr  exprParent  
[buglab_swap_variables]^collapseAssign ( t, expr.getFirstChild (  ) , expr ) ;^121^^^^^116^122^collapseAssign ( t, expr.getFirstChild (  ) , expr, exprParent ) ;^[CLASS] ExploitAssigns  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node expr Node exprParent [VARIABLES] boolean  NodeTraversal  t  Node  expr  exprParent  
[buglab_swap_variables]^if  ( isCollapsibleValue (  true )  && collapseAssignEqualTo ( expr, exprParent, leftValue )  )  {^131^132^^^^127^141^if  ( isCollapsibleValue ( leftValue, true )  && collapseAssignEqualTo ( expr, exprParent, leftValue )  )  {^[CLASS] ExploitAssigns  [METHOD] collapseAssign [RETURN_TYPE] void   NodeTraversal t Node assign Node expr Node exprParent [VARIABLES] boolean  NodeTraversal  t  Node  assign  expr  exprParent  leftValue  rightValue  
[buglab_swap_variables]^if  ( isCollapsibleValue ( leftValue, true )  && collapseAssignEqualTo (  exprParent, leftValue )  )  {^131^132^^^^127^141^if  ( isCollapsibleValue ( leftValue, true )  && collapseAssignEqualTo ( expr, exprParent, leftValue )  )  {^[CLASS] ExploitAssigns  [METHOD] collapseAssign [RETURN_TYPE] void   NodeTraversal t Node assign Node expr Node exprParent [VARIABLES] boolean  NodeTraversal  t  Node  assign  expr  exprParent  leftValue  rightValue  
[buglab_swap_variables]^if  ( isCollapsibleValue ( exprParent, true )  && collapseAssignEqualTo ( expr, leftValue, leftValue )  )  {^131^132^^^^127^141^if  ( isCollapsibleValue ( leftValue, true )  && collapseAssignEqualTo ( expr, exprParent, leftValue )  )  {^[CLASS] ExploitAssigns  [METHOD] collapseAssign [RETURN_TYPE] void   NodeTraversal t Node assign Node expr Node exprParent [VARIABLES] boolean  NodeTraversal  t  Node  assign  expr  exprParent  leftValue  rightValue  
[buglab_swap_variables]^if  ( isCollapsibleValue ( leftValue, true )  && collapseAssignEqualTo ( expr,  leftValue )  )  {^131^132^^^^127^141^if  ( isCollapsibleValue ( leftValue, true )  && collapseAssignEqualTo ( expr, exprParent, leftValue )  )  {^[CLASS] ExploitAssigns  [METHOD] collapseAssign [RETURN_TYPE] void   NodeTraversal t Node assign Node expr Node exprParent [VARIABLES] boolean  NodeTraversal  t  Node  assign  expr  exprParent  leftValue  rightValue  
[buglab_swap_variables]^if  ( isCollapsibleValue ( leftValue, exprParentrue )  && collapseAssignEqualTo ( expr, t, leftValue )  )  {^131^132^^^^127^141^if  ( isCollapsibleValue ( leftValue, true )  && collapseAssignEqualTo ( expr, exprParent, leftValue )  )  {^[CLASS] ExploitAssigns  [METHOD] collapseAssign [RETURN_TYPE] void   NodeTraversal t Node assign Node expr Node exprParent [VARIABLES] boolean  NodeTraversal  t  Node  assign  expr  exprParent  leftValue  rightValue  
[buglab_swap_variables]^if  ( isCollapsibleValue ( leftValue, true )  && collapseAssignEqualTo ( expr, exprParen leftValue )  )  {^131^132^^^^127^141^if  ( isCollapsibleValue ( leftValue, true )  && collapseAssignEqualTo ( expr, exprParent, leftValue )  )  {^[CLASS] ExploitAssigns  [METHOD] collapseAssign [RETURN_TYPE] void   NodeTraversal t Node assign Node expr Node exprParent [VARIABLES] boolean  NodeTraversal  t  Node  assign  expr  exprParent  leftValue  rightValue  
[buglab_swap_variables]^} else if  ( isCollapsibleValue (  false )  && collapseAssignEqualTo ( expr, exprParent, rightValue )  )  {^134^135^^^^127^141^} else if  ( isCollapsibleValue ( rightValue, false )  && collapseAssignEqualTo ( expr, exprParent, rightValue )  )  {^[CLASS] ExploitAssigns  [METHOD] collapseAssign [RETURN_TYPE] void   NodeTraversal t Node assign Node expr Node exprParent [VARIABLES] boolean  NodeTraversal  t  Node  assign  expr  exprParent  leftValue  rightValue  
[buglab_swap_variables]^} else if  ( isCollapsibleValue ( expr, false )  && collapseAssignEqualTo ( rightValue, exprParent, rightValue )  )  {^134^135^^^^127^141^} else if  ( isCollapsibleValue ( rightValue, false )  && collapseAssignEqualTo ( expr, exprParent, rightValue )  )  {^[CLASS] ExploitAssigns  [METHOD] collapseAssign [RETURN_TYPE] void   NodeTraversal t Node assign Node expr Node exprParent [VARIABLES] boolean  NodeTraversal  t  Node  assign  expr  exprParent  leftValue  rightValue  
[buglab_swap_variables]^} else if  ( isCollapsibleValue ( rightValue, false )  && collapseAssignEqualTo (  exprParent, rightValue )  )  {^134^135^^^^127^141^} else if  ( isCollapsibleValue ( rightValue, false )  && collapseAssignEqualTo ( expr, exprParent, rightValue )  )  {^[CLASS] ExploitAssigns  [METHOD] collapseAssign [RETURN_TYPE] void   NodeTraversal t Node assign Node expr Node exprParent [VARIABLES] boolean  NodeTraversal  t  Node  assign  expr  exprParent  leftValue  rightValue  
[buglab_swap_variables]^} else if  ( isCollapsibleValue ( rightValue, false )  && collapseAssignEqualTo ( expr,  rightValue )  )  {^134^135^^^^127^141^} else if  ( isCollapsibleValue ( rightValue, false )  && collapseAssignEqualTo ( expr, exprParent, rightValue )  )  {^[CLASS] ExploitAssigns  [METHOD] collapseAssign [RETURN_TYPE] void   NodeTraversal t Node assign Node expr Node exprParent [VARIABLES] boolean  NodeTraversal  t  Node  assign  expr  exprParent  leftValue  rightValue  
[buglab_swap_variables]^} else if  ( isCollapsibleValue ( rightValue, false )  && collapseAssignEqualTo ( expr, exprParen rightValue )  )  {^134^135^^^^127^141^} else if  ( isCollapsibleValue ( rightValue, false )  && collapseAssignEqualTo ( expr, exprParent, rightValue )  )  {^[CLASS] ExploitAssigns  [METHOD] collapseAssign [RETURN_TYPE] void   NodeTraversal t Node assign Node expr Node exprParent [VARIABLES] boolean  NodeTraversal  t  Node  assign  expr  exprParent  leftValue  rightValue  
[buglab_swap_variables]^collapseAssign ( rightValue, t, expr, exprParent ) ;^139^^^^^127^141^collapseAssign ( t, rightValue, expr, exprParent ) ;^[CLASS] ExploitAssigns  [METHOD] collapseAssign [RETURN_TYPE] void   NodeTraversal t Node assign Node expr Node exprParent [VARIABLES] boolean  NodeTraversal  t  Node  assign  expr  exprParent  leftValue  rightValue  
[buglab_swap_variables]^collapseAssign (  rightValue, expr, exprParent ) ;^139^^^^^127^141^collapseAssign ( t, rightValue, expr, exprParent ) ;^[CLASS] ExploitAssigns  [METHOD] collapseAssign [RETURN_TYPE] void   NodeTraversal t Node assign Node expr Node exprParent [VARIABLES] boolean  NodeTraversal  t  Node  assign  expr  exprParent  leftValue  rightValue  
[buglab_swap_variables]^collapseAssign ( t, expr, rightValue, exprParent ) ;^139^^^^^127^141^collapseAssign ( t, rightValue, expr, exprParent ) ;^[CLASS] ExploitAssigns  [METHOD] collapseAssign [RETURN_TYPE] void   NodeTraversal t Node assign Node expr Node exprParent [VARIABLES] boolean  NodeTraversal  t  Node  assign  expr  exprParent  leftValue  rightValue  
[buglab_swap_variables]^collapseAssign ( t,  expr, exprParent ) ;^139^^^^^127^141^collapseAssign ( t, rightValue, expr, exprParent ) ;^[CLASS] ExploitAssigns  [METHOD] collapseAssign [RETURN_TYPE] void   NodeTraversal t Node assign Node expr Node exprParent [VARIABLES] boolean  NodeTraversal  t  Node  assign  expr  exprParent  leftValue  rightValue  
[buglab_swap_variables]^collapseAssign ( expr, rightValue, t, exprParent ) ;^139^^^^^127^141^collapseAssign ( t, rightValue, expr, exprParent ) ;^[CLASS] ExploitAssigns  [METHOD] collapseAssign [RETURN_TYPE] void   NodeTraversal t Node assign Node expr Node exprParent [VARIABLES] boolean  NodeTraversal  t  Node  assign  expr  exprParent  leftValue  rightValue  
[buglab_swap_variables]^collapseAssign ( t, rightValue,  exprParent ) ;^139^^^^^127^141^collapseAssign ( t, rightValue, expr, exprParent ) ;^[CLASS] ExploitAssigns  [METHOD] collapseAssign [RETURN_TYPE] void   NodeTraversal t Node assign Node expr Node exprParent [VARIABLES] boolean  NodeTraversal  t  Node  assign  expr  exprParent  leftValue  rightValue  
[buglab_swap_variables]^collapseAssign ( t, exprParent, expr, rightValue ) ;^139^^^^^127^141^collapseAssign ( t, rightValue, expr, exprParent ) ;^[CLASS] ExploitAssigns  [METHOD] collapseAssign [RETURN_TYPE] void   NodeTraversal t Node assign Node expr Node exprParent [VARIABLES] boolean  NodeTraversal  t  Node  assign  expr  exprParent  leftValue  rightValue  
[buglab_swap_variables]^collapseAssign ( t, rightValue, expr ) ;^139^^^^^127^141^collapseAssign ( t, rightValue, expr, exprParent ) ;^[CLASS] ExploitAssigns  [METHOD] collapseAssign [RETURN_TYPE] void   NodeTraversal t Node assign Node expr Node exprParent [VARIABLES] boolean  NodeTraversal  t  Node  assign  expr  exprParent  leftValue  rightValue  
[buglab_swap_variables]^collapseAssign ( exprParent, rightValue, expr, t ) ;^139^^^^^127^141^collapseAssign ( t, rightValue, expr, exprParent ) ;^[CLASS] ExploitAssigns  [METHOD] collapseAssign [RETURN_TYPE] void   NodeTraversal t Node assign Node expr Node exprParent [VARIABLES] boolean  NodeTraversal  t  Node  assign  expr  exprParent  leftValue  rightValue  
[buglab_swap_variables]^collapseAssign ( t, rightValue, exprParent, expr ) ;^139^^^^^127^141^collapseAssign ( t, rightValue, expr, exprParent ) ;^[CLASS] ExploitAssigns  [METHOD] collapseAssign [RETURN_TYPE] void   NodeTraversal t Node assign Node expr Node exprParent [VARIABLES] boolean  NodeTraversal  t  Node  assign  expr  exprParent  leftValue  rightValue  
[buglab_swap_variables]^collapseAssignEqualTo ( exprParent, expr, rightValue )  )  {^135^^^^^127^141^collapseAssignEqualTo ( expr, exprParent, rightValue )  )  {^[CLASS] ExploitAssigns  [METHOD] collapseAssign [RETURN_TYPE] void   NodeTraversal t Node assign Node expr Node exprParent [VARIABLES] boolean  NodeTraversal  t  Node  assign  expr  exprParent  leftValue  rightValue  
[buglab_swap_variables]^collapseAssignEqualTo (  exprParent, rightValue )  )  {^135^^^^^127^141^collapseAssignEqualTo ( expr, exprParent, rightValue )  )  {^[CLASS] ExploitAssigns  [METHOD] collapseAssign [RETURN_TYPE] void   NodeTraversal t Node assign Node expr Node exprParent [VARIABLES] boolean  NodeTraversal  t  Node  assign  expr  exprParent  leftValue  rightValue  
[buglab_swap_variables]^collapseAssignEqualTo ( expr,  rightValue )  )  {^135^^^^^127^141^collapseAssignEqualTo ( expr, exprParent, rightValue )  )  {^[CLASS] ExploitAssigns  [METHOD] collapseAssign [RETURN_TYPE] void   NodeTraversal t Node assign Node expr Node exprParent [VARIABLES] boolean  NodeTraversal  t  Node  assign  expr  exprParent  leftValue  rightValue  
[buglab_swap_variables]^collapseAssignEqualTo ( expr, rightValue, exprParent )  )  {^135^^^^^127^141^collapseAssignEqualTo ( expr, exprParent, rightValue )  )  {^[CLASS] ExploitAssigns  [METHOD] collapseAssign [RETURN_TYPE] void   NodeTraversal t Node assign Node expr Node exprParent [VARIABLES] boolean  NodeTraversal  t  Node  assign  expr  exprParent  leftValue  rightValue  
[buglab_swap_variables]^collapseAssignEqualTo ( expr, exprParent )  )  {^135^^^^^127^141^collapseAssignEqualTo ( expr, exprParent, rightValue )  )  {^[CLASS] ExploitAssigns  [METHOD] collapseAssign [RETURN_TYPE] void   NodeTraversal t Node assign Node expr Node exprParent [VARIABLES] boolean  NodeTraversal  t  Node  assign  expr  exprParent  leftValue  rightValue  
[buglab_swap_variables]^} else if  ( isCollapsibleValue ( rightValue, false )  && collapseAssignEqualTo ( exprParent, expr, rightValue )  )  {^134^135^^^^127^141^} else if  ( isCollapsibleValue ( rightValue, false )  && collapseAssignEqualTo ( expr, exprParent, rightValue )  )  {^[CLASS] ExploitAssigns  [METHOD] collapseAssign [RETURN_TYPE] void   NodeTraversal t Node assign Node expr Node exprParent [VARIABLES] boolean  NodeTraversal  t  Node  assign  expr  exprParent  leftValue  rightValue  
[buglab_swap_variables]^collapseAssignEqualTo ( exprParent, expr, leftValue )  )  {^132^^^^^127^141^collapseAssignEqualTo ( expr, exprParent, leftValue )  )  {^[CLASS] ExploitAssigns  [METHOD] collapseAssign [RETURN_TYPE] void   NodeTraversal t Node assign Node expr Node exprParent [VARIABLES] boolean  NodeTraversal  t  Node  assign  expr  exprParent  leftValue  rightValue  
[buglab_swap_variables]^collapseAssignEqualTo (  exprParent, leftValue )  )  {^132^^^^^127^141^collapseAssignEqualTo ( expr, exprParent, leftValue )  )  {^[CLASS] ExploitAssigns  [METHOD] collapseAssign [RETURN_TYPE] void   NodeTraversal t Node assign Node expr Node exprParent [VARIABLES] boolean  NodeTraversal  t  Node  assign  expr  exprParent  leftValue  rightValue  
[buglab_swap_variables]^collapseAssignEqualTo ( expr, leftValue, exprParent )  )  {^132^^^^^127^141^collapseAssignEqualTo ( expr, exprParent, leftValue )  )  {^[CLASS] ExploitAssigns  [METHOD] collapseAssign [RETURN_TYPE] void   NodeTraversal t Node assign Node expr Node exprParent [VARIABLES] boolean  NodeTraversal  t  Node  assign  expr  exprParent  leftValue  rightValue  
[buglab_swap_variables]^collapseAssignEqualTo ( expr,  leftValue )  )  {^132^^^^^127^141^collapseAssignEqualTo ( expr, exprParent, leftValue )  )  {^[CLASS] ExploitAssigns  [METHOD] collapseAssign [RETURN_TYPE] void   NodeTraversal t Node assign Node expr Node exprParent [VARIABLES] boolean  NodeTraversal  t  Node  assign  expr  exprParent  leftValue  rightValue  
[buglab_swap_variables]^collapseAssignEqualTo ( leftValue, exprParent, expr )  )  {^132^^^^^127^141^collapseAssignEqualTo ( expr, exprParent, leftValue )  )  {^[CLASS] ExploitAssigns  [METHOD] collapseAssign [RETURN_TYPE] void   NodeTraversal t Node assign Node expr Node exprParent [VARIABLES] boolean  NodeTraversal  t  Node  assign  expr  exprParent  leftValue  rightValue  
[buglab_swap_variables]^collapseAssignEqualTo ( expr, exprParent )  )  {^132^^^^^127^141^collapseAssignEqualTo ( expr, exprParent, leftValue )  )  {^[CLASS] ExploitAssigns  [METHOD] collapseAssign [RETURN_TYPE] void   NodeTraversal t Node assign Node expr Node exprParent [VARIABLES] boolean  NodeTraversal  t  Node  assign  expr  exprParent  leftValue  rightValue  
[buglab_swap_variables]^collapseAssignEqualTo ( rightValue, exprParent, expr )  )  {^135^^^^^127^141^collapseAssignEqualTo ( expr, exprParent, rightValue )  )  {^[CLASS] ExploitAssigns  [METHOD] collapseAssign [RETURN_TYPE] void   NodeTraversal t Node assign Node expr Node exprParent [VARIABLES] boolean  NodeTraversal  t  Node  assign  expr  exprParent  leftValue  rightValue  
[buglab_swap_variables]^if  ( next.isQualifiedName (  )  && valueName.equals ( value.getQualifiedName (  )  )  )  {^223^224^^^^208^238^if  ( value.isQualifiedName (  )  && nextName.equals ( value.getQualifiedName (  )  )  )  {^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[buglab_swap_variables]^if  ( !isSafeReplacement ( assign, next )  )  {^230^^^^^223^238^if  ( !isSafeReplacement ( next, assign )  )  {^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[buglab_swap_variables]^if  ( !isSafeReplacement (  assign )  )  {^230^^^^^223^238^if  ( !isSafeReplacement ( next, assign )  )  {^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[buglab_swap_variables]^if  ( !isSafeReplacement ( next )  )  {^230^^^^^223^238^if  ( !isSafeReplacement ( next, assign )  )  {^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[buglab_swap_variables]^parent.replaceChild ( assign, next ) ;^236^^^^^223^238^parent.replaceChild ( next, assign ) ;^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[buglab_swap_variables]^parent.replaceChild (  assign ) ;^236^^^^^223^238^parent.replaceChild ( next, assign ) ;^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[buglab_swap_variables]^parent.replaceChild ( next ) ;^236^^^^^223^238^parent.replaceChild ( next, assign ) ;^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[buglab_swap_variables]^if  ( !isSafeReplacement ( assign, next )  )  {^230^^^^^215^245^if  ( !isSafeReplacement ( next, assign )  )  {^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[buglab_swap_variables]^if  ( !isSafeReplacement (  assign )  )  {^230^^^^^215^245^if  ( !isSafeReplacement ( next, assign )  )  {^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[buglab_swap_variables]^if  ( !isSafeReplacement ( next )  )  {^230^^^^^215^245^if  ( !isSafeReplacement ( next, assign )  )  {^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[buglab_swap_variables]^parent.replaceChild ( assign, next ) ;^236^^^^^221^251^parent.replaceChild ( next, assign ) ;^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[buglab_swap_variables]^parent.replaceChild (  assign ) ;^236^^^^^221^251^parent.replaceChild ( next, assign ) ;^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[buglab_swap_variables]^parent.replaceChild ( next ) ;^236^^^^^221^251^parent.replaceChild ( next, assign ) ;^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[buglab_swap_variables]^if  (  ( value.getType (  )  == Token.STRING || next.getType (  )  == Token.NUMBER )  && !next.isEquivalentTo ( next )  )  {^248^249^250^^^233^263^if  (  ( next.getType (  )  == Token.STRING || next.getType (  )  == Token.NUMBER )  && !next.isEquivalentTo ( value )  )  {^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[buglab_swap_variables]^parent.replaceChild (  assign ) ;^259^^^^^244^274^parent.replaceChild ( next, assign ) ;^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[buglab_swap_variables]^parent.replaceChild ( next ) ;^259^^^^^244^274^parent.replaceChild ( next, assign ) ;^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[buglab_swap_variables]^if  ( next.getType (  )  == value.getType (  )  )  {^247^^^^^232^262^if  ( value.getType (  )  == next.getType (  )  )  {^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[buglab_swap_variables]^parent.replaceChild ( assign, next ) ;^259^^^^^244^274^parent.replaceChild ( next, assign ) ;^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[buglab_swap_variables]^if  ( nodesToCollapseodesToCollapse.contains ( n )  )  return;^354^^^^^349^378^if  ( nodesToCollapse.contains ( n )  )  return;^[CLASS] GatherCollapses  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  hasNodesToCollapse  NodeTraversal  t  Node  n  parent  varNode  
[buglab_swap_variables]^if  ( n.contains ( nodesToCollapse )  )  return;^354^^^^^349^378^if  ( nodesToCollapse.contains ( n )  )  return;^[CLASS] GatherCollapses  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  hasNodesToCollapse  NodeTraversal  t  Node  n  parent  varNode  
[buglab_swap_variables]^collapses.add ( new Collapse ( parent, varNode )  ) ;^375^^^^^349^378^collapses.add ( new Collapse ( varNode, parent )  ) ;^[CLASS] GatherCollapses  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  hasNodesToCollapse  NodeTraversal  t  Node  n  parent  varNode  
[buglab_swap_variables]^collapses.add ( new Collapse (  parent )  ) ;^375^^^^^349^378^collapses.add ( new Collapse ( varNode, parent )  ) ;^[CLASS] GatherCollapses  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  hasNodesToCollapse  NodeTraversal  t  Node  n  parent  varNode  
[buglab_swap_variables]^collapses.add ( new Collapse ( varNode )  ) ;^375^^^^^349^378^collapses.add ( new Collapse ( varNode, parent )  ) ;^[CLASS] GatherCollapses  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  hasNodesToCollapse  NodeTraversal  t  Node  n  parent  varNode  
