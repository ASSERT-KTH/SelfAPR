[buglab_swap_variables]^this.injector = new FunctionInjector ( enableExpressionDecomposition, safeNameIdSupplier, compiler ) ;^93^94^^^^76^95^this.injector = new FunctionInjector ( compiler, safeNameIdSupplier, enableExpressionDecomposition ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] <init> [RETURN_TYPE] Supplier,boolean,boolean,boolean,boolean,boolean)   AbstractCompiler compiler String> safeNameIdSupplier boolean inlineGlobalFunctions boolean inlineLocalFunctions boolean inlineAnonymousFunctionExpressions boolean blockFunctionInliningEnabled boolean enableExpressionDecomposition [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  namesToAlias  CallVisitorCallback  callback  Node  fn  safeFnNode  var  JSModule  module  Supplier  safeNameIdSupplier  String  fakeName  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  
[buglab_swap_variables]^this.injector = new FunctionInjector (  safeNameIdSupplier, enableExpressionDecomposition ) ;^93^94^^^^76^95^this.injector = new FunctionInjector ( compiler, safeNameIdSupplier, enableExpressionDecomposition ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] <init> [RETURN_TYPE] Supplier,boolean,boolean,boolean,boolean,boolean)   AbstractCompiler compiler String> safeNameIdSupplier boolean inlineGlobalFunctions boolean inlineLocalFunctions boolean inlineAnonymousFunctionExpressions boolean blockFunctionInliningEnabled boolean enableExpressionDecomposition [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  namesToAlias  CallVisitorCallback  callback  Node  fn  safeFnNode  var  JSModule  module  Supplier  safeNameIdSupplier  String  fakeName  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  
[buglab_swap_variables]^this.injector = new FunctionInjector ( safeNameIdSupplier, compiler, enableExpressionDecomposition ) ;^93^94^^^^76^95^this.injector = new FunctionInjector ( compiler, safeNameIdSupplier, enableExpressionDecomposition ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] <init> [RETURN_TYPE] Supplier,boolean,boolean,boolean,boolean,boolean)   AbstractCompiler compiler String> safeNameIdSupplier boolean inlineGlobalFunctions boolean inlineLocalFunctions boolean inlineAnonymousFunctionExpressions boolean blockFunctionInliningEnabled boolean enableExpressionDecomposition [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  namesToAlias  CallVisitorCallback  callback  Node  fn  safeFnNode  var  JSModule  module  Supplier  safeNameIdSupplier  String  fakeName  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  
[buglab_swap_variables]^this.injector = new FunctionInjector ( compiler,  enableExpressionDecomposition ) ;^93^94^^^^76^95^this.injector = new FunctionInjector ( compiler, safeNameIdSupplier, enableExpressionDecomposition ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] <init> [RETURN_TYPE] Supplier,boolean,boolean,boolean,boolean,boolean)   AbstractCompiler compiler String> safeNameIdSupplier boolean inlineGlobalFunctions boolean inlineLocalFunctions boolean inlineAnonymousFunctionExpressions boolean blockFunctionInliningEnabled boolean enableExpressionDecomposition [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  namesToAlias  CallVisitorCallback  callback  Node  fn  safeFnNode  var  JSModule  module  Supplier  safeNameIdSupplier  String  fakeName  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  
[buglab_swap_variables]^this.injector = new FunctionInjector ( compiler, enableExpressionDecomposition, safeNameIdSupplier ) ;^93^94^^^^76^95^this.injector = new FunctionInjector ( compiler, safeNameIdSupplier, enableExpressionDecomposition ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] <init> [RETURN_TYPE] Supplier,boolean,boolean,boolean,boolean,boolean)   AbstractCompiler compiler String> safeNameIdSupplier boolean inlineGlobalFunctions boolean inlineLocalFunctions boolean inlineAnonymousFunctionExpressions boolean blockFunctionInliningEnabled boolean enableExpressionDecomposition [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  namesToAlias  CallVisitorCallback  callback  Node  fn  safeFnNode  var  JSModule  module  Supplier  safeNameIdSupplier  String  fakeName  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  
[buglab_swap_variables]^this.injector = new FunctionInjector ( compiler, safeNameIdSupplier ) ;^93^94^^^^76^95^this.injector = new FunctionInjector ( compiler, safeNameIdSupplier, enableExpressionDecomposition ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] <init> [RETURN_TYPE] Supplier,boolean,boolean,boolean,boolean,boolean)   AbstractCompiler compiler String> safeNameIdSupplier boolean inlineGlobalFunctions boolean inlineLocalFunctions boolean inlineAnonymousFunctionExpressions boolean blockFunctionInliningEnabled boolean enableExpressionDecomposition [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  namesToAlias  CallVisitorCallback  callback  Node  fn  safeFnNode  var  JSModule  module  Supplier  safeNameIdSupplier  String  fakeName  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  
[buglab_swap_variables]^super ( anonFns, fns, null ) ;^391^^^^^388^393^super ( fns, anonFns, null ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] <init> [RETURN_TYPE] Map)   FunctionState> fns String> anonFns [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  namesToAlias  CallVisitorCallback  callback  Node  fn  safeFnNode  var  JSModule  module  String  fakeName  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  
[buglab_swap_variables]^super (  anonFns, null ) ;^391^^^^^388^393^super ( fns, anonFns, null ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] <init> [RETURN_TYPE] Map)   FunctionState> fns String> anonFns [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  namesToAlias  CallVisitorCallback  callback  Node  fn  safeFnNode  var  JSModule  module  String  fakeName  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  
[buglab_swap_variables]^super ( fns,  null ) ;^391^^^^^388^393^super ( fns, anonFns, null ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] <init> [RETURN_TYPE] Map)   FunctionState> fns String> anonFns [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  namesToAlias  CallVisitorCallback  callback  Node  fn  safeFnNode  var  JSModule  module  String  fakeName  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  
[buglab_swap_variables]^super ( module, callNode, mode ) ;^976^^^^^974^978^super ( callNode, module, mode ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] <init> [RETURN_TYPE] InliningMode,boolean)   Node callNode JSModule module InliningMode mode boolean decompose [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  namesToAlias  CallVisitorCallback  callback  InliningMode  mode  Node  callNode  fn  safeFnNode  var  JSModule  module  String  fakeName  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[buglab_swap_variables]^super (  module, mode ) ;^976^^^^^974^978^super ( callNode, module, mode ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] <init> [RETURN_TYPE] InliningMode,boolean)   Node callNode JSModule module InliningMode mode boolean decompose [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  namesToAlias  CallVisitorCallback  callback  InliningMode  mode  Node  callNode  fn  safeFnNode  var  JSModule  module  String  fakeName  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[buglab_swap_variables]^super ( callNode, mode, module ) ;^976^^^^^974^978^super ( callNode, module, mode ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] <init> [RETURN_TYPE] InliningMode,boolean)   Node callNode JSModule module InliningMode mode boolean decompose [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  namesToAlias  CallVisitorCallback  callback  InliningMode  mode  Node  callNode  fn  safeFnNode  var  JSModule  module  String  fakeName  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[buglab_swap_variables]^super ( callNode,  mode ) ;^976^^^^^974^978^super ( callNode, module, mode ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] <init> [RETURN_TYPE] InliningMode,boolean)   Node callNode JSModule module InliningMode mode boolean decompose [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  namesToAlias  CallVisitorCallback  callback  InliningMode  mode  Node  callNode  fn  safeFnNode  var  JSModule  module  String  fakeName  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[buglab_swap_variables]^super ( callNode, module ) ;^976^^^^^974^978^super ( callNode, module, mode ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] <init> [RETURN_TYPE] InliningMode,boolean)   Node callNode JSModule module InliningMode mode boolean decompose [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  namesToAlias  CallVisitorCallback  callback  InliningMode  mode  Node  callNode  fn  safeFnNode  var  JSModule  module  String  fakeName  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[buglab_swap_variables]^FunctionState fs = fnName.get ( fns ) ;^98^^^^^97^104^FunctionState fs = fns.get ( fnName ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] getOrCreateFunctionState [RETURN_TYPE] InlineFunctions$FunctionState   String fnName [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  namesToAlias  CallVisitorCallback  callback  Node  callNode  fn  safeFnNode  var  FunctionState  fs  JSModule  module  String  fakeName  fnName  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[buglab_swap_variables]^fns.put ( fs, fnName ) ;^101^^^^^97^104^fns.put ( fnName, fs ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] getOrCreateFunctionState [RETURN_TYPE] InlineFunctions$FunctionState   String fnName [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  namesToAlias  CallVisitorCallback  callback  Node  callNode  fn  safeFnNode  var  FunctionState  fs  JSModule  module  String  fakeName  fnName  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[buglab_swap_variables]^fns.put (  fs ) ;^101^^^^^97^104^fns.put ( fnName, fs ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] getOrCreateFunctionState [RETURN_TYPE] InlineFunctions$FunctionState   String fnName [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  namesToAlias  CallVisitorCallback  callback  Node  callNode  fn  safeFnNode  var  FunctionState  fs  JSModule  module  String  fakeName  fnName  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[buglab_swap_variables]^fns.put ( fnName ) ;^101^^^^^97^104^fns.put ( fnName, fs ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] getOrCreateFunctionState [RETURN_TYPE] InlineFunctions$FunctionState   String fnName [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  namesToAlias  CallVisitorCallback  callback  Node  callNode  fn  safeFnNode  var  FunctionState  fs  JSModule  module  String  fakeName  fnName  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[buglab_swap_variables]^NodeTraversal.traverse ( root, compiler, new FindCandidateFunctions (  )  ) ;^112^^^^^97^127^NodeTraversal.traverse ( compiler, root, new FindCandidateFunctions (  )  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  callNode  externs  fn  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[buglab_swap_variables]^NodeTraversal.traverse ( compiler,  new FindCandidateFunctions (  )  ) ;^112^^^^^97^127^NodeTraversal.traverse ( compiler, root, new FindCandidateFunctions (  )  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  callNode  externs  fn  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[buglab_swap_variables]^NodeTraversal.traverse (  root, new FindCandidateFunctions (  )  ) ;^112^^^^^97^127^NodeTraversal.traverse ( compiler, root, new FindCandidateFunctions (  )  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  callNode  externs  fn  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[buglab_swap_variables]^new FindCandidatesReferences ( anonFns, fns )  ) ;^117^^^^^102^132^new FindCandidatesReferences ( fns, anonFns )  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  callNode  externs  fn  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[buglab_swap_variables]^new FindCandidatesReferences (  anonFns )  ) ;^117^^^^^102^132^new FindCandidatesReferences ( fns, anonFns )  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  callNode  externs  fn  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[buglab_swap_variables]^new FindCandidatesReferences ( fns )  ) ;^117^^^^^102^132^new FindCandidatesReferences ( fns, anonFns )  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  callNode  externs  fn  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[buglab_swap_variables]^NodeTraversal.traverse ( root, compiler, new FindCandidatesReferences ( fns, anonFns )  ) ;^116^117^^^^101^131^NodeTraversal.traverse ( compiler, root, new FindCandidatesReferences ( fns, anonFns )  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  callNode  externs  fn  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[buglab_swap_variables]^NodeTraversal.traverse ( compiler,  new FindCandidatesReferences ( fns, anonFns )  ) ;^116^117^^^^101^131^NodeTraversal.traverse ( compiler, root, new FindCandidatesReferences ( fns, anonFns )  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  callNode  externs  fn  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[buglab_swap_variables]^NodeTraversal.traverse ( anonFns, root, new FindCandidatesReferences ( fns, compiler )  ) ;^116^117^^^^101^131^NodeTraversal.traverse ( compiler, root, new FindCandidatesReferences ( fns, anonFns )  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  callNode  externs  fn  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[buglab_swap_variables]^NodeTraversal.traverse (  root, new FindCandidatesReferences ( fns, anonFns )  ) ;^116^117^^^^101^131^NodeTraversal.traverse ( compiler, root, new FindCandidatesReferences ( fns, anonFns )  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  callNode  externs  fn  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[buglab_swap_variables]^NodeTraversal.traverse ( compiler, root, new FindCandidatesReferences ( anonFns, fns )  ) ;^116^117^^^^101^131^NodeTraversal.traverse ( compiler, root, new FindCandidatesReferences ( fns, anonFns )  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  callNode  externs  fn  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[buglab_swap_variables]^NodeTraversal.traverse ( compiler, root, new FindCandidatesReferences (  anonFns )  ) ;^116^117^^^^101^131^NodeTraversal.traverse ( compiler, root, new FindCandidatesReferences ( fns, anonFns )  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  callNode  externs  fn  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[buglab_swap_variables]^NodeTraversal.traverse ( compiler, anonFns, new FindCandidatesReferences ( fns, root )  ) ;^116^117^^^^101^131^NodeTraversal.traverse ( compiler, root, new FindCandidatesReferences ( fns, anonFns )  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  callNode  externs  fn  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[buglab_swap_variables]^NodeTraversal.traverse ( compiler, root, new FindCandidatesReferences ( fns )  ) ;^116^117^^^^101^131^NodeTraversal.traverse ( compiler, root, new FindCandidatesReferences ( fns, anonFns )  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  callNode  externs  fn  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[buglab_swap_variables]^new CallVisitor ( anonFns, fns, new Inline ( injector )  )  ) ;^141^^^^^126^156^new CallVisitor ( fns, anonFns, new Inline ( injector )  )  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  callNode  externs  fn  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[buglab_swap_variables]^new CallVisitor (  anonFns, new Inline ( injector )  )  ) ;^141^^^^^126^156^new CallVisitor ( fns, anonFns, new Inline ( injector )  )  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  callNode  externs  fn  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[buglab_swap_variables]^new CallVisitor ( fns,  new Inline ( injector )  )  ) ;^141^^^^^126^156^new CallVisitor ( fns, anonFns, new Inline ( injector )  )  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  callNode  externs  fn  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[buglab_swap_variables]^new CallVisitor ( injector, anonFns, new Inline ( fns )  )  ) ;^141^^^^^126^156^new CallVisitor ( fns, anonFns, new Inline ( injector )  )  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  callNode  externs  fn  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[buglab_swap_variables]^NodeTraversal.traverse ( compiler, fns, new CallVisitor ( root, anonFns, new Inline ( injector )  )  ) ;^140^141^^^^125^155^NodeTraversal.traverse ( compiler, root, new CallVisitor ( fns, anonFns, new Inline ( injector )  )  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  callNode  externs  fn  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[buglab_swap_variables]^NodeTraversal.traverse ( compiler,  new CallVisitor ( fns, anonFns, new Inline ( injector )  )  ) ;^140^141^^^^125^155^NodeTraversal.traverse ( compiler, root, new CallVisitor ( fns, anonFns, new Inline ( injector )  )  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  callNode  externs  fn  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[buglab_swap_variables]^NodeTraversal.traverse ( root, compiler, new CallVisitor ( fns, anonFns, new Inline ( injector )  )  ) ;^140^141^^^^125^155^NodeTraversal.traverse ( compiler, root, new CallVisitor ( fns, anonFns, new Inline ( injector )  )  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  callNode  externs  fn  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[buglab_swap_variables]^NodeTraversal.traverse (  root, new CallVisitor ( fns, anonFns, new Inline ( injector )  )  ) ;^140^141^^^^125^155^NodeTraversal.traverse ( compiler, root, new CallVisitor ( fns, anonFns, new Inline ( injector )  )  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  callNode  externs  fn  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[buglab_swap_variables]^NodeTraversal.traverse ( compiler, root, new CallVisitor ( injector, anonFns, new Inline ( fns )  )  ) ;^140^141^^^^125^155^NodeTraversal.traverse ( compiler, root, new CallVisitor ( fns, anonFns, new Inline ( injector )  )  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  callNode  externs  fn  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[buglab_swap_variables]^NodeTraversal.traverse ( compiler, root, new CallVisitor (  anonFns, new Inline ( injector )  )  ) ;^140^141^^^^125^155^NodeTraversal.traverse ( compiler, root, new CallVisitor ( fns, anonFns, new Inline ( injector )  )  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  callNode  externs  fn  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[buglab_swap_variables]^NodeTraversal.traverse ( compiler, root, new CallVisitor ( anonFns, fns, new Inline ( injector )  )  ) ;^140^141^^^^125^155^NodeTraversal.traverse ( compiler, root, new CallVisitor ( fns, anonFns, new Inline ( injector )  )  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  callNode  externs  fn  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[buglab_swap_variables]^NodeTraversal.traverse ( compiler, root, new CallVisitor ( fns,  new Inline ( injector )  )  ) ;^140^141^^^^125^155^NodeTraversal.traverse ( compiler, root, new CallVisitor ( fns, anonFns, new Inline ( injector )  )  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  callNode  externs  fn  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[buglab_swap_variables]^NodeTraversal.traverse ( compiler, root, new CallVisitor ( fns, injector, new Inline ( anonFns )  )  ) ;^140^141^^^^125^155^NodeTraversal.traverse ( compiler, root, new CallVisitor ( fns, anonFns, new Inline ( injector )  )  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  callNode  externs  fn  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[buglab_swap_variables]^return parent || inlineAnonymousFunctionExpressions || inlineLocalFunctions == null || NodeUtil.isControlStructure ( parent ) || NodeUtil.isStatementBlock ( parent ) ;^157^158^159^^^153^160^return inlineLocalFunctions || inlineAnonymousFunctionExpressions || parent == null || NodeUtil.isControlStructure ( parent ) || NodeUtil.isStatementBlock ( parent ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node n Node parent [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  NodeTraversal  nodeTraversal  Node  callNode  externs  fn  n  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[buglab_swap_variables]^return inlineAnonymousFunctionExpressions || inlineLocalFunctions || parent == null || NodeUtil.isControlStructure ( parent ) || NodeUtil.isStatementBlock ( parent ) ;^157^158^159^^^153^160^return inlineLocalFunctions || inlineAnonymousFunctionExpressions || parent == null || NodeUtil.isControlStructure ( parent ) || NodeUtil.isStatementBlock ( parent ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node n Node parent [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  NodeTraversal  nodeTraversal  Node  callNode  externs  fn  n  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[buglab_swap_variables]^return inlineLocalFunctions || parent || inlineAnonymousFunctionExpressions == null || NodeUtil.isControlStructure ( parent ) || NodeUtil.isStatementBlock ( parent ) ;^157^158^159^^^153^160^return inlineLocalFunctions || inlineAnonymousFunctionExpressions || parent == null || NodeUtil.isControlStructure ( parent ) || NodeUtil.isStatementBlock ( parent ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node n Node parent [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  NodeTraversal  nodeTraversal  Node  callNode  externs  fn  n  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[buglab_swap_variables]^if  (  ( inlineLocalFunctions.inGlobalScope (  )  && inlineGlobalFunctions ) ||  ( !t.inGlobalScope (  )  && t )  )  {^163^164^^^^162^171^if  (  ( t.inGlobalScope (  )  && inlineGlobalFunctions ) ||  ( !t.inGlobalScope (  )  && inlineLocalFunctions )  )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  NodeTraversal  t  Node  callNode  externs  fn  n  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[buglab_swap_variables]^if  (  ( t.inGlobalScope (  )  && inlineLocalFunctions ) ||  ( !t.inGlobalScope (  )  && inlineGlobalFunctions )  )  {^163^164^^^^162^171^if  (  ( t.inGlobalScope (  )  && inlineGlobalFunctions ) ||  ( !t.inGlobalScope (  )  && inlineLocalFunctions )  )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  NodeTraversal  t  Node  callNode  externs  fn  n  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[buglab_swap_variables]^findNamedFunctions ( parent, n, t ) ;^165^^^^^162^171^findNamedFunctions ( t, n, parent ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  NodeTraversal  t  Node  callNode  externs  fn  n  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[buglab_swap_variables]^findNamedFunctions (  n, parent ) ;^165^^^^^162^171^findNamedFunctions ( t, n, parent ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  NodeTraversal  t  Node  callNode  externs  fn  n  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[buglab_swap_variables]^findNamedFunctions ( t, parent, n ) ;^165^^^^^162^171^findNamedFunctions ( t, n, parent ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  NodeTraversal  t  Node  callNode  externs  fn  n  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[buglab_swap_variables]^findNamedFunctions ( t,  parent ) ;^165^^^^^162^171^findNamedFunctions ( t, n, parent ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  NodeTraversal  t  Node  callNode  externs  fn  n  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[buglab_swap_variables]^findNamedFunctions ( t, n ) ;^165^^^^^162^171^findNamedFunctions ( t, n, parent ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  NodeTraversal  t  Node  callNode  externs  fn  n  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[buglab_swap_variables]^findNamedFunctions ( n, t, parent ) ;^165^^^^^162^171^findNamedFunctions ( t, n, parent ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  NodeTraversal  t  Node  callNode  externs  fn  n  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[buglab_swap_variables]^findAnonymousFunctionExpressions ( n, t ) ;^169^^^^^162^171^findAnonymousFunctionExpressions ( t, n ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  NodeTraversal  t  Node  callNode  externs  fn  n  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[buglab_swap_variables]^findAnonymousFunctionExpressions (  n ) ;^169^^^^^162^171^findAnonymousFunctionExpressions ( t, n ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  NodeTraversal  t  Node  callNode  externs  fn  n  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[buglab_swap_variables]^findAnonymousFunctionExpressions ( t ) ;^169^^^^^162^171^findAnonymousFunctionExpressions ( t, n ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  NodeTraversal  t  Node  callNode  externs  fn  n  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[buglab_swap_variables]^if  ( n.getType (  )  == Token.NAME && nameNodeameNode.hasChildren (  ) && nameNode.getFirstChild (  ) .getType (  )  == Token.FUNCTION )  {^188^189^^^^173^203^if  ( nameNode.getType (  )  == Token.NAME && nameNode.hasChildren (  ) && nameNode.getFirstChild (  ) .getType (  )  == Token.FUNCTION )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] findNamedFunctions [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  NodeTraversal  t  Node  callNode  externs  fn  n  nameNode  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[buglab_swap_variables]^maybeAddFunction ( tew FunctionVar ( n ) , n.getModule (  )  ) ;^190^^^^^188^191^maybeAddFunction ( new FunctionVar ( n ) , t.getModule (  )  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] findNamedFunctions [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  NodeTraversal  t  Node  callNode  externs  fn  n  nameNode  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[buglab_swap_variables]^maybeAddFunction ( new FunctionVar ( n ) .getModule (  )  ) ;^190^^^^^188^191^maybeAddFunction ( new FunctionVar ( n ) , t.getModule (  )  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] findNamedFunctions [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  NodeTraversal  t  Node  callNode  externs  fn  n  nameNode  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[buglab_swap_variables]^maybeAddFunction ( tew FunctionVar ( n ) , n.getModule (  )  ) ;^190^^^^^175^205^maybeAddFunction ( new FunctionVar ( n ) , t.getModule (  )  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] findNamedFunctions [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  NodeTraversal  t  Node  callNode  externs  fn  n  nameNode  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[buglab_swap_variables]^maybeAddFunction ( new FunctionVar ( n ) .getModule (  )  ) ;^190^^^^^175^205^maybeAddFunction ( new FunctionVar ( n ) , t.getModule (  )  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] findNamedFunctions [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  NodeTraversal  t  Node  callNode  externs  fn  n  nameNode  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[buglab_swap_variables]^if  ( nameNodeameNode.getType (  )  == Token.NAME && n.hasChildren (  ) && nameNode.getFirstChild (  ) .getType (  )  == Token.FUNCTION )  {^188^189^^^^173^203^if  ( nameNode.getType (  )  == Token.NAME && nameNode.hasChildren (  ) && nameNode.getFirstChild (  ) .getType (  )  == Token.FUNCTION )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] findNamedFunctions [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  NodeTraversal  t  Node  callNode  externs  fn  n  nameNode  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[buglab_swap_variables]^maybeAddFunction ( t, fn.getModule (  )  ) ;^203^^^^^188^218^maybeAddFunction ( fn, t.getModule (  )  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] findNamedFunctions [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  NodeTraversal  t  Node  callNode  externs  fn  n  nameNode  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[buglab_swap_variables]^maybeAddFunction (  t.getModule (  )  ) ;^203^^^^^188^218^maybeAddFunction ( fn, t.getModule (  )  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] findNamedFunctions [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  NodeTraversal  t  Node  callNode  externs  fn  n  nameNode  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[buglab_swap_variables]^maybeAddFunction ( fn.getModule (  )  ) ;^203^^^^^188^218^maybeAddFunction ( fn, t.getModule (  )  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] findNamedFunctions [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  NodeTraversal  t  Node  callNode  externs  fn  n  nameNode  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[buglab_swap_variables]^maybeAddFunction ( t, fn.getModule (  )  ) ;^233^^^^^215^238^maybeAddFunction ( fn, t.getModule (  )  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] findAnonymousFunctionExpressions [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  NodeTraversal  t  Node  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[buglab_swap_variables]^maybeAddFunction (  t.getModule (  )  ) ;^233^^^^^215^238^maybeAddFunction ( fn, t.getModule (  )  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] findAnonymousFunctionExpressions [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  NodeTraversal  t  Node  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[buglab_swap_variables]^maybeAddFunction ( fn.getModule (  )  ) ;^233^^^^^215^238^maybeAddFunction ( fn, t.getModule (  )  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] findAnonymousFunctionExpressions [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  NodeTraversal  t  Node  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[buglab_swap_variables]^anonFns.put (  fn.getName (  )  ) ;^234^^^^^215^238^anonFns.put ( fnNode, fn.getName (  )  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] findAnonymousFunctionExpressions [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  NodeTraversal  t  Node  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[buglab_swap_variables]^anonFns.put ( fnNodeNode, fn.getName (  )  ) ;^234^^^^^215^238^anonFns.put ( fnNode, fn.getName (  )  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] findAnonymousFunctionExpressions [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  NodeTraversal  t  Node  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[buglab_swap_variables]^anonFns.put ( fnNode.getName (  )  ) ;^234^^^^^215^238^anonFns.put ( fnNode, fn.getName (  )  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] findAnonymousFunctionExpressions [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  NodeTraversal  t  Node  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[buglab_swap_variables]^if  ( fn.isDirectCallNodeReplacementPossible ( injector.getFunctionNode (  )  )  )  {^260^261^^^^245^275^if  ( injector.isDirectCallNodeReplacementPossible ( fn.getFunctionNode (  )  )  )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] maybeAddFunction [RETURN_TYPE] void   Function fn JSModule module [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[buglab_swap_variables]^if  ( fnName.getCodingConvention (  ) .isExported ( compiler )  )  {^308^^^^^305^320^if  ( compiler.getCodingConvention (  ) .isExported ( fnName )  )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] isCandidateFunction [RETURN_TYPE] boolean   Function fn [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[buglab_swap_variables]^return fnName.doesFunctionMeetMinimumRequirements ( injector, fnNode ) ;^319^^^^^305^320^return injector.doesFunctionMeetMinimumRequirements ( fnName, fnNode ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] isCandidateFunction [RETURN_TYPE] boolean   Function fn [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[buglab_swap_variables]^return injector.doesFunctionMeetMinimumRequirements (  fnNode ) ;^319^^^^^305^320^return injector.doesFunctionMeetMinimumRequirements ( fnName, fnNode ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] isCandidateFunction [RETURN_TYPE] boolean   Function fn [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[buglab_swap_variables]^return injector.doesFunctionMeetMinimumRequirements ( fnNode, fnName ) ;^319^^^^^305^320^return injector.doesFunctionMeetMinimumRequirements ( fnName, fnNode ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] isCandidateFunction [RETURN_TYPE] boolean   Function fn [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[buglab_swap_variables]^return injector.doesFunctionMeetMinimumRequirements ( fnName ) ;^319^^^^^305^320^return injector.doesFunctionMeetMinimumRequirements ( fnName, fnNode ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] isCandidateFunction [RETURN_TYPE] boolean   Function fn [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[buglab_swap_variables]^return fnNode.doesFunctionMeetMinimumRequirements ( fnName, injector ) ;^319^^^^^305^320^return injector.doesFunctionMeetMinimumRequirements ( fnName, fnNode ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] isCandidateFunction [RETURN_TYPE] boolean   Function fn [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[buglab_swap_variables]^name = fnIdentifingNode.get ( anonFunctionMap ) ;^365^^^^^350^380^name = anonFunctionMap.get ( fnIdentifingNode ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[buglab_swap_variables]^name = child.get ( anonFunctionMap ) ;^358^^^^^343^373^name = anonFunctionMap.get ( child ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[buglab_swap_variables]^callback.visitCallSite ( fs, n, parent, t ) ;^373^^^^^358^388^callback.visitCallSite ( t, n, parent, fs ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[buglab_swap_variables]^callback.visitCallSite (  n, parent, fs ) ;^373^^^^^358^388^callback.visitCallSite ( t, n, parent, fs ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[buglab_swap_variables]^callback.visitCallSite ( n, t, parent, fs ) ;^373^^^^^358^388^callback.visitCallSite ( t, n, parent, fs ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[buglab_swap_variables]^callback.visitCallSite ( t,  parent, fs ) ;^373^^^^^358^388^callback.visitCallSite ( t, n, parent, fs ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[buglab_swap_variables]^callback.visitCallSite ( t, parent, n, fs ) ;^373^^^^^358^388^callback.visitCallSite ( t, n, parent, fs ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[buglab_swap_variables]^callback.visitCallSite ( t, n,  fs ) ;^373^^^^^358^388^callback.visitCallSite ( t, n, parent, fs ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[buglab_swap_variables]^callback.visitCallSite ( t, n, parent ) ;^373^^^^^358^388^callback.visitCallSite ( t, n, parent, fs ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[buglab_swap_variables]^FunctionState fs = name.get ( functionMap ) ;^370^^^^^355^385^FunctionState fs = functionMap.get ( name ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[buglab_swap_variables]^callback.visitCallSite ( parent, n, t, fs ) ;^373^^^^^358^388^callback.visitCallSite ( t, n, parent, fs ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[buglab_swap_variables]^callback.visitCallSite ( t, fs, parent, n ) ;^373^^^^^358^388^callback.visitCallSite ( t, n, parent, fs ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[buglab_swap_variables]^checkNameUsage ( n, t, parent ) ;^399^^^^^396^401^checkNameUsage ( t, n, parent ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[buglab_swap_variables]^checkNameUsage (  n, parent ) ;^399^^^^^396^401^checkNameUsage ( t, n, parent ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[buglab_swap_variables]^checkNameUsage ( t, parent, n ) ;^399^^^^^396^401^checkNameUsage ( t, n, parent ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[buglab_swap_variables]^checkNameUsage ( t,  parent ) ;^399^^^^^396^401^checkNameUsage ( t, n, parent ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[buglab_swap_variables]^checkNameUsage ( parent, n, t ) ;^399^^^^^396^401^checkNameUsage ( t, n, parent ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[buglab_swap_variables]^checkNameUsage ( t, n ) ;^399^^^^^396^401^checkNameUsage ( t, n, parent ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[buglab_swap_variables]^maybeAddReference ( callNode, fs, t, t.getModule (  )  ) ;^405^^^^^403^406^maybeAddReference ( t, fs, callNode, t.getModule (  )  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] visitCallSite [RETURN_TYPE] void   NodeTraversal t Node callNode Node parent FunctionState fs [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[buglab_swap_variables]^maybeAddReference (  fs, callNode, t.getModule (  )  ) ;^405^^^^^403^406^maybeAddReference ( t, fs, callNode, t.getModule (  )  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] visitCallSite [RETURN_TYPE] void   NodeTraversal t Node callNode Node parent FunctionState fs [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[buglab_swap_variables]^maybeAddReference ( fs, t, callNode, t.getModule (  )  ) ;^405^^^^^403^406^maybeAddReference ( t, fs, callNode, t.getModule (  )  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] visitCallSite [RETURN_TYPE] void   NodeTraversal t Node callNode Node parent FunctionState fs [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[buglab_swap_variables]^maybeAddReference ( t,  callNode, t.getModule (  )  ) ;^405^^^^^403^406^maybeAddReference ( t, fs, callNode, t.getModule (  )  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] visitCallSite [RETURN_TYPE] void   NodeTraversal t Node callNode Node parent FunctionState fs [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[buglab_swap_variables]^maybeAddReference ( t, fs,  t.getModule (  )  ) ;^405^^^^^403^406^maybeAddReference ( t, fs, callNode, t.getModule (  )  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] visitCallSite [RETURN_TYPE] void   NodeTraversal t Node callNode Node parent FunctionState fs [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[buglab_swap_variables]^referenceAdded = maybeAddReferenceUsingMode ( fs, t, callNode, module, mode ) ;^417^418^^^^408^433^referenceAdded = maybeAddReferenceUsingMode ( t, fs, callNode, module, mode ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] maybeAddReference [RETURN_TYPE] void   NodeTraversal t FunctionState fs Node callNode JSModule module [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  InliningMode  mode  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[buglab_swap_variables]^referenceAdded = maybeAddReferenceUsingMode (  fs, callNode, module, mode ) ;^417^418^^^^408^433^referenceAdded = maybeAddReferenceUsingMode ( t, fs, callNode, module, mode ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] maybeAddReference [RETURN_TYPE] void   NodeTraversal t FunctionState fs Node callNode JSModule module [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  InliningMode  mode  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[buglab_swap_variables]^referenceAdded = maybeAddReferenceUsingMode ( t,  callNode, module, mode ) ;^417^418^^^^408^433^referenceAdded = maybeAddReferenceUsingMode ( t, fs, callNode, module, mode ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] maybeAddReference [RETURN_TYPE] void   NodeTraversal t FunctionState fs Node callNode JSModule module [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  InliningMode  mode  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[buglab_swap_variables]^referenceAdded = maybeAddReferenceUsingMode ( t, callNode, fs, module, mode ) ;^417^418^^^^408^433^referenceAdded = maybeAddReferenceUsingMode ( t, fs, callNode, module, mode ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] maybeAddReference [RETURN_TYPE] void   NodeTraversal t FunctionState fs Node callNode JSModule module [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  InliningMode  mode  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[buglab_swap_variables]^referenceAdded = maybeAddReferenceUsingMode ( t, fs,  module, mode ) ;^417^418^^^^408^433^referenceAdded = maybeAddReferenceUsingMode ( t, fs, callNode, module, mode ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] maybeAddReference [RETURN_TYPE] void   NodeTraversal t FunctionState fs Node callNode JSModule module [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  InliningMode  mode  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[buglab_swap_variables]^referenceAdded = maybeAddReferenceUsingMode ( t, module, callNode, fs, mode ) ;^417^418^^^^408^433^referenceAdded = maybeAddReferenceUsingMode ( t, fs, callNode, module, mode ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] maybeAddReference [RETURN_TYPE] void   NodeTraversal t FunctionState fs Node callNode JSModule module [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  InliningMode  mode  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[buglab_swap_variables]^referenceAdded = maybeAddReferenceUsingMode ( t, fs, callNode,  mode ) ;^417^418^^^^408^433^referenceAdded = maybeAddReferenceUsingMode ( t, fs, callNode, module, mode ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] maybeAddReference [RETURN_TYPE] void   NodeTraversal t FunctionState fs Node callNode JSModule module [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  InliningMode  mode  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[buglab_swap_variables]^referenceAdded = maybeAddReferenceUsingMode ( mode, fs, callNode, module, t ) ;^417^418^^^^408^433^referenceAdded = maybeAddReferenceUsingMode ( t, fs, callNode, module, mode ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] maybeAddReference [RETURN_TYPE] void   NodeTraversal t FunctionState fs Node callNode JSModule module [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  InliningMode  mode  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[buglab_swap_variables]^referenceAdded = maybeAddReferenceUsingMode ( t, fs, callNode, module ) ;^417^418^^^^408^433^referenceAdded = maybeAddReferenceUsingMode ( t, fs, callNode, module, mode ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] maybeAddReference [RETURN_TYPE] void   NodeTraversal t FunctionState fs Node callNode JSModule module [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  InliningMode  mode  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[buglab_swap_variables]^referenceAdded = maybeAddReferenceUsingMode ( callNode, fs, t, module, mode ) ;^417^418^^^^408^433^referenceAdded = maybeAddReferenceUsingMode ( t, fs, callNode, module, mode ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] maybeAddReference [RETURN_TYPE] void   NodeTraversal t FunctionState fs Node callNode JSModule module [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  InliningMode  mode  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[buglab_swap_variables]^referenceAdded = maybeAddReferenceUsingMode ( t, mode, callNode, module, fs ) ;^417^418^^^^408^433^referenceAdded = maybeAddReferenceUsingMode ( t, fs, callNode, module, mode ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] maybeAddReference [RETURN_TYPE] void   NodeTraversal t FunctionState fs Node callNode JSModule module [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  InliningMode  mode  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[buglab_swap_variables]^referenceAdded = maybeAddReferenceUsingMode ( mode, fs, callNode, module, t ) ;^424^425^^^^408^433^referenceAdded = maybeAddReferenceUsingMode ( t, fs, callNode, module, mode ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] maybeAddReference [RETURN_TYPE] void   NodeTraversal t FunctionState fs Node callNode JSModule module [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  InliningMode  mode  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[buglab_swap_variables]^referenceAdded = maybeAddReferenceUsingMode (  fs, callNode, module, mode ) ;^424^425^^^^408^433^referenceAdded = maybeAddReferenceUsingMode ( t, fs, callNode, module, mode ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] maybeAddReference [RETURN_TYPE] void   NodeTraversal t FunctionState fs Node callNode JSModule module [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  InliningMode  mode  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[buglab_swap_variables]^referenceAdded = maybeAddReferenceUsingMode ( t, callNode, fs, module, mode ) ;^424^425^^^^408^433^referenceAdded = maybeAddReferenceUsingMode ( t, fs, callNode, module, mode ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] maybeAddReference [RETURN_TYPE] void   NodeTraversal t FunctionState fs Node callNode JSModule module [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  InliningMode  mode  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[buglab_swap_variables]^referenceAdded = maybeAddReferenceUsingMode ( t,  callNode, module, mode ) ;^424^425^^^^408^433^referenceAdded = maybeAddReferenceUsingMode ( t, fs, callNode, module, mode ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] maybeAddReference [RETURN_TYPE] void   NodeTraversal t FunctionState fs Node callNode JSModule module [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  InliningMode  mode  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[buglab_swap_variables]^referenceAdded = maybeAddReferenceUsingMode ( t, fs, module, callNode, mode ) ;^424^425^^^^408^433^referenceAdded = maybeAddReferenceUsingMode ( t, fs, callNode, module, mode ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] maybeAddReference [RETURN_TYPE] void   NodeTraversal t FunctionState fs Node callNode JSModule module [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  InliningMode  mode  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[buglab_swap_variables]^referenceAdded = maybeAddReferenceUsingMode ( t, fs,  module, mode ) ;^424^425^^^^408^433^referenceAdded = maybeAddReferenceUsingMode ( t, fs, callNode, module, mode ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] maybeAddReference [RETURN_TYPE] void   NodeTraversal t FunctionState fs Node callNode JSModule module [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  InliningMode  mode  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[buglab_swap_variables]^referenceAdded = maybeAddReferenceUsingMode ( module, fs, callNode, t, mode ) ;^424^425^^^^408^433^referenceAdded = maybeAddReferenceUsingMode ( t, fs, callNode, module, mode ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] maybeAddReference [RETURN_TYPE] void   NodeTraversal t FunctionState fs Node callNode JSModule module [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  InliningMode  mode  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[buglab_swap_variables]^referenceAdded = maybeAddReferenceUsingMode ( t, fs, callNode,  mode ) ;^424^425^^^^408^433^referenceAdded = maybeAddReferenceUsingMode ( t, fs, callNode, module, mode ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] maybeAddReference [RETURN_TYPE] void   NodeTraversal t FunctionState fs Node callNode JSModule module [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  InliningMode  mode  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[buglab_swap_variables]^referenceAdded = maybeAddReferenceUsingMode ( t, fs, mode, module, callNode ) ;^424^425^^^^408^433^referenceAdded = maybeAddReferenceUsingMode ( t, fs, callNode, module, mode ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] maybeAddReference [RETURN_TYPE] void   NodeTraversal t FunctionState fs Node callNode JSModule module [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  InliningMode  mode  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[buglab_swap_variables]^referenceAdded = maybeAddReferenceUsingMode ( t, fs, callNode, module ) ;^424^425^^^^408^433^referenceAdded = maybeAddReferenceUsingMode ( t, fs, callNode, module, mode ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] maybeAddReference [RETURN_TYPE] void   NodeTraversal t FunctionState fs Node callNode JSModule module [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  InliningMode  mode  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[buglab_swap_variables]^referenceAdded = maybeAddReferenceUsingMode ( callNode, fs, t, module, mode ) ;^424^425^^^^408^433^referenceAdded = maybeAddReferenceUsingMode ( t, fs, callNode, module, mode ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] maybeAddReference [RETURN_TYPE] void   NodeTraversal t FunctionState fs Node callNode JSModule module [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  InliningMode  mode  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[buglab_swap_variables]^referenceAdded = maybeAddReferenceUsingMode ( fs, t, callNode, module, mode ) ;^424^425^^^^408^433^referenceAdded = maybeAddReferenceUsingMode ( t, fs, callNode, module, mode ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] maybeAddReference [RETURN_TYPE] void   NodeTraversal t FunctionState fs Node callNode JSModule module [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  InliningMode  mode  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[buglab_swap_variables]^referenceAdded = maybeAddReferenceUsingMode ( t, fs, callNode, mode, module ) ;^424^425^^^^408^433^referenceAdded = maybeAddReferenceUsingMode ( t, fs, callNode, module, mode ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] maybeAddReference [RETURN_TYPE] void   NodeTraversal t FunctionState fs Node callNode JSModule module [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  InliningMode  mode  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[buglab_swap_variables]^referenceAdded = maybeAddReferenceUsingMode ( t, module, callNode, fs, mode ) ;^424^425^^^^408^433^referenceAdded = maybeAddReferenceUsingMode ( t, fs, callNode, module, mode ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] maybeAddReference [RETURN_TYPE] void   NodeTraversal t FunctionState fs Node callNode JSModule module [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  InliningMode  mode  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[buglab_swap_variables]^CanInlineResult result = injector.canInlineReferenceToFunction ( mode, callNode, fs.getFn (  ) .getFunctionNode (  ) , fs.getNamesToAlias (  ) , t, fs.getReferencesThis (  )  ) ;^438^439^440^^^435^450^CanInlineResult result = injector.canInlineReferenceToFunction ( t, callNode, fs.getFn (  ) .getFunctionNode (  ) , fs.getNamesToAlias (  ) , mode, fs.getReferencesThis (  )  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] maybeAddReferenceUsingMode [RETURN_TYPE] boolean   NodeTraversal t FunctionState fs Node callNode JSModule module InliningMode mode [VARIABLES] CanInlineResult  result  Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  InliningMode  mode  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[buglab_swap_variables]^CanInlineResult result = injector.canInlineReferenceToFunction (  callNode, fs.getFn (  ) .getFunctionNode (  ) , fs.getNamesToAlias (  ) , mode, fs.getReferencesThis (  )  ) ;^438^439^440^^^435^450^CanInlineResult result = injector.canInlineReferenceToFunction ( t, callNode, fs.getFn (  ) .getFunctionNode (  ) , fs.getNamesToAlias (  ) , mode, fs.getReferencesThis (  )  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] maybeAddReferenceUsingMode [RETURN_TYPE] boolean   NodeTraversal t FunctionState fs Node callNode JSModule module InliningMode mode [VARIABLES] CanInlineResult  result  Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  InliningMode  mode  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[buglab_swap_variables]^CanInlineResult result = injector.canInlineReferenceToFunction ( callNode, t, fs.getFn (  ) .getFunctionNode (  ) , fs.getNamesToAlias (  ) , mode, fs.getReferencesThis (  )  ) ;^438^439^440^^^435^450^CanInlineResult result = injector.canInlineReferenceToFunction ( t, callNode, fs.getFn (  ) .getFunctionNode (  ) , fs.getNamesToAlias (  ) , mode, fs.getReferencesThis (  )  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] maybeAddReferenceUsingMode [RETURN_TYPE] boolean   NodeTraversal t FunctionState fs Node callNode JSModule module InliningMode mode [VARIABLES] CanInlineResult  result  Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  InliningMode  mode  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[buglab_swap_variables]^CanInlineResult result = injector.canInlineReferenceToFunction ( t,  fs.getFn (  ) .getFunctionNode (  ) , fs.getNamesToAlias (  ) , mode, fs.getReferencesThis (  )  ) ;^438^439^440^^^435^450^CanInlineResult result = injector.canInlineReferenceToFunction ( t, callNode, fs.getFn (  ) .getFunctionNode (  ) , fs.getNamesToAlias (  ) , mode, fs.getReferencesThis (  )  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] maybeAddReferenceUsingMode [RETURN_TYPE] boolean   NodeTraversal t FunctionState fs Node callNode JSModule module InliningMode mode [VARIABLES] CanInlineResult  result  Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  InliningMode  mode  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[buglab_swap_variables]^CanInlineResult result = injector.canInlineReferenceToFunction ( t, callNode, mode.getFn (  ) .getFunctionNode (  ) , fs.getNamesToAlias (  ) , fs, fs.getReferencesThis (  )  ) ;^438^439^440^^^435^450^CanInlineResult result = injector.canInlineReferenceToFunction ( t, callNode, fs.getFn (  ) .getFunctionNode (  ) , fs.getNamesToAlias (  ) , mode, fs.getReferencesThis (  )  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] maybeAddReferenceUsingMode [RETURN_TYPE] boolean   NodeTraversal t FunctionState fs Node callNode JSModule module InliningMode mode [VARIABLES] CanInlineResult  result  Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  InliningMode  mode  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[buglab_swap_variables]^CanInlineResult result = injector.canInlineReferenceToFunction ( t, callNode.getFn (  ) .getFunctionNode (  ) , fs.getNamesToAlias (  ) , mode, fs.getReferencesThis (  )  ) ;^438^439^440^^^435^450^CanInlineResult result = injector.canInlineReferenceToFunction ( t, callNode, fs.getFn (  ) .getFunctionNode (  ) , fs.getNamesToAlias (  ) , mode, fs.getReferencesThis (  )  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] maybeAddReferenceUsingMode [RETURN_TYPE] boolean   NodeTraversal t FunctionState fs Node callNode JSModule module InliningMode mode [VARIABLES] CanInlineResult  result  Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  InliningMode  mode  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[buglab_swap_variables]^CanInlineResult result = mode.canInlineReferenceToFunction ( t, callNode, fs.getFn (  ) .getFunctionNode (  ) , fs.getNamesToAlias (  ) , injector, fs.getReferencesThis (  )  ) ;^438^439^440^^^435^450^CanInlineResult result = injector.canInlineReferenceToFunction ( t, callNode, fs.getFn (  ) .getFunctionNode (  ) , fs.getNamesToAlias (  ) , mode, fs.getReferencesThis (  )  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] maybeAddReferenceUsingMode [RETURN_TYPE] boolean   NodeTraversal t FunctionState fs Node callNode JSModule module InliningMode mode [VARIABLES] CanInlineResult  result  Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  InliningMode  mode  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[buglab_swap_variables]^CanInlineResult result = injector.canInlineReferenceToFunction ( t, callNode, fs.getFn (  ) .getFunctionNode (  ) , fs.getNamesToAlias (  ) ,  fs.getReferencesThis (  )  ) ;^438^439^440^^^435^450^CanInlineResult result = injector.canInlineReferenceToFunction ( t, callNode, fs.getFn (  ) .getFunctionNode (  ) , fs.getNamesToAlias (  ) , mode, fs.getReferencesThis (  )  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] maybeAddReferenceUsingMode [RETURN_TYPE] boolean   NodeTraversal t FunctionState fs Node callNode JSModule module InliningMode mode [VARIABLES] CanInlineResult  result  Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  InliningMode  mode  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[buglab_swap_variables]^CanInlineResult result = injector.canInlineReferenceToFunction ( t, fs, callNode.getFn (  ) .getFunctionNode (  ) , fs.getNamesToAlias (  ) , mode, fs.getReferencesThis (  )  ) ;^438^439^440^^^435^450^CanInlineResult result = injector.canInlineReferenceToFunction ( t, callNode, fs.getFn (  ) .getFunctionNode (  ) , fs.getNamesToAlias (  ) , mode, fs.getReferencesThis (  )  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] maybeAddReferenceUsingMode [RETURN_TYPE] boolean   NodeTraversal t FunctionState fs Node callNode JSModule module InliningMode mode [VARIABLES] CanInlineResult  result  Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  InliningMode  mode  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[buglab_swap_variables]^CanInlineResult result = injector.canInlineReferenceToFunction ( t, mode, fs.getFn (  ) .getFunctionNode (  ) , fs.getNamesToAlias (  ) , callNode, fs.getReferencesThis (  )  ) ;^438^439^440^^^435^450^CanInlineResult result = injector.canInlineReferenceToFunction ( t, callNode, fs.getFn (  ) .getFunctionNode (  ) , fs.getNamesToAlias (  ) , mode, fs.getReferencesThis (  )  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] maybeAddReferenceUsingMode [RETURN_TYPE] boolean   NodeTraversal t FunctionState fs Node callNode JSModule module InliningMode mode [VARIABLES] CanInlineResult  result  Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  InliningMode  mode  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[buglab_swap_variables]^CanInlineResult result = callNode.canInlineReferenceToFunction ( t, injector, fs.getFn (  ) .getFunctionNode (  ) , fs.getNamesToAlias (  ) , mode, fs.getReferencesThis (  )  ) ;^438^439^440^^^435^450^CanInlineResult result = injector.canInlineReferenceToFunction ( t, callNode, fs.getFn (  ) .getFunctionNode (  ) , fs.getNamesToAlias (  ) , mode, fs.getReferencesThis (  )  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] maybeAddReferenceUsingMode [RETURN_TYPE] boolean   NodeTraversal t FunctionState fs Node callNode JSModule module InliningMode mode [VARIABLES] CanInlineResult  result  Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  InliningMode  mode  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[buglab_swap_variables]^fs.addReference ( new Reference ( decompose, module, mode, callNode )  ) ;^445^^^^^435^450^fs.addReference ( new Reference ( callNode, module, mode, decompose )  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] maybeAddReferenceUsingMode [RETURN_TYPE] boolean   NodeTraversal t FunctionState fs Node callNode JSModule module InliningMode mode [VARIABLES] CanInlineResult  result  Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  InliningMode  mode  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[buglab_swap_variables]^fs.addReference ( new Reference (  module, mode, decompose )  ) ;^445^^^^^435^450^fs.addReference ( new Reference ( callNode, module, mode, decompose )  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] maybeAddReferenceUsingMode [RETURN_TYPE] boolean   NodeTraversal t FunctionState fs Node callNode JSModule module InliningMode mode [VARIABLES] CanInlineResult  result  Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  InliningMode  mode  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[buglab_swap_variables]^fs.addReference ( new Reference ( callNode, mode, module, decompose )  ) ;^445^^^^^435^450^fs.addReference ( new Reference ( callNode, module, mode, decompose )  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] maybeAddReferenceUsingMode [RETURN_TYPE] boolean   NodeTraversal t FunctionState fs Node callNode JSModule module InliningMode mode [VARIABLES] CanInlineResult  result  Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  InliningMode  mode  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[buglab_swap_variables]^fs.addReference ( new Reference ( callNode,  mode, decompose )  ) ;^445^^^^^435^450^fs.addReference ( new Reference ( callNode, module, mode, decompose )  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] maybeAddReferenceUsingMode [RETURN_TYPE] boolean   NodeTraversal t FunctionState fs Node callNode JSModule module InliningMode mode [VARIABLES] CanInlineResult  result  Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  InliningMode  mode  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[buglab_swap_variables]^fs.addReference ( new Reference ( callNode, module,  decompose )  ) ;^445^^^^^435^450^fs.addReference ( new Reference ( callNode, module, mode, decompose )  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] maybeAddReferenceUsingMode [RETURN_TYPE] boolean   NodeTraversal t FunctionState fs Node callNode JSModule module InliningMode mode [VARIABLES] CanInlineResult  result  Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  InliningMode  mode  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[buglab_swap_variables]^fs.addReference ( new Reference ( callNode, decompose, mode, module )  ) ;^445^^^^^435^450^fs.addReference ( new Reference ( callNode, module, mode, decompose )  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] maybeAddReferenceUsingMode [RETURN_TYPE] boolean   NodeTraversal t FunctionState fs Node callNode JSModule module InliningMode mode [VARIABLES] CanInlineResult  result  Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  InliningMode  mode  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[buglab_swap_variables]^fs.addReference ( new Reference ( callNode, module, mode )  ) ;^445^^^^^435^450^fs.addReference ( new Reference ( callNode, module, mode, decompose )  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] maybeAddReferenceUsingMode [RETURN_TYPE] boolean   NodeTraversal t FunctionState fs Node callNode JSModule module InliningMode mode [VARIABLES] CanInlineResult  result  Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  InliningMode  mode  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[buglab_swap_variables]^fs.addReference ( new Reference ( mode, module, callNode, decompose )  ) ;^445^^^^^435^450^fs.addReference ( new Reference ( callNode, module, mode, decompose )  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] maybeAddReferenceUsingMode [RETURN_TYPE] boolean   NodeTraversal t FunctionState fs Node callNode JSModule module InliningMode mode [VARIABLES] CanInlineResult  result  Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  InliningMode  mode  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[buglab_swap_variables]^if  ( n.getType (  )  == Token.CALL && parent.getFirstChild (  )  == parent )  {^464^^^^^449^479^if  ( parent.getType (  )  == Token.CALL && parent.getFirstChild (  )  == n )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[buglab_swap_variables]^if  ( NodeUtil.isGet ( n ) && parent == parent.getFirstChild (  ) && n.getNext (  ) .getType (  )  == Token.STRING && n.getNext (  ) .getString (  ) .equals ( "call" )  )  {^477^478^479^480^^462^492^if  ( NodeUtil.isGet ( parent ) && n == parent.getFirstChild (  ) && n.getNext (  ) .getType (  )  == Token.STRING && n.getNext (  ) .getString (  ) .equals ( "call" )  )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[buglab_swap_variables]^if  ( parent.getType (  )  == Token.CALL && gramps.getFirstChild (  )  == gramps )  {^482^483^^^^477^487^if  ( gramps.getType (  )  == Token.CALL && gramps.getFirstChild (  )  == parent )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[buglab_swap_variables]^if  ( parent.getType (  )  == Token.CALL && gramps.getFirstChild (  )  == gramps )  {^482^483^^^^467^497^if  ( gramps.getType (  )  == Token.CALL && gramps.getFirstChild (  )  == parent )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[buglab_swap_variables]^FunctionState fs = name.get ( fns ) ;^491^^^^^476^506^FunctionState fs = fns.get ( name ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[buglab_swap_variables]^if  ( n.getType (  )  == Token.ASSIGN && parent.getFirstChild (  )  == parent )  {^497^^^^^482^512^if  ( parent.getType (  )  == Token.ASSIGN && parent.getFirstChild (  )  == n )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[buglab_swap_variables]^Reference ref = callNode.getReference ( fs ) ;^525^^^^^521^537^Reference ref = fs.getReference ( callNode ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] visitCallSite [RETURN_TYPE] void   NodeTraversal t Node callNode Node parent FunctionState fs [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Reference  ref  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[buglab_swap_variables]^Node newCode = injector.inline ( fnNode, callNode, fnName, t, mode ) ;^548^^^^^542^551^Node newCode = injector.inline ( t, callNode, fnName, fnNode, mode ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] inlineFunction [RETURN_TYPE] void   NodeTraversal t Node callNode FunctionState fs InliningMode mode [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  InliningMode  mode  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[buglab_swap_variables]^Node newCode = injector.inline (  callNode, fnName, fnNode, mode ) ;^548^^^^^542^551^Node newCode = injector.inline ( t, callNode, fnName, fnNode, mode ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] inlineFunction [RETURN_TYPE] void   NodeTraversal t Node callNode FunctionState fs InliningMode mode [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  InliningMode  mode  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[buglab_swap_variables]^Node newCode = injector.inline ( t, fnName, callNode, fnNode, mode ) ;^548^^^^^542^551^Node newCode = injector.inline ( t, callNode, fnName, fnNode, mode ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] inlineFunction [RETURN_TYPE] void   NodeTraversal t Node callNode FunctionState fs InliningMode mode [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  InliningMode  mode  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[buglab_swap_variables]^Node newCode = injector.inline ( t,  fnName, fnNode, mode ) ;^548^^^^^542^551^Node newCode = injector.inline ( t, callNode, fnName, fnNode, mode ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] inlineFunction [RETURN_TYPE] void   NodeTraversal t Node callNode FunctionState fs InliningMode mode [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  InliningMode  mode  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[buglab_swap_variables]^Node newCode = injector.inline ( t, callNode,  fnNode, mode ) ;^548^^^^^542^551^Node newCode = injector.inline ( t, callNode, fnName, fnNode, mode ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] inlineFunction [RETURN_TYPE] void   NodeTraversal t Node callNode FunctionState fs InliningMode mode [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  InliningMode  mode  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[buglab_swap_variables]^Node newCode = injector.inline ( t, fnNode, fnName, callNode, mode ) ;^548^^^^^542^551^Node newCode = injector.inline ( t, callNode, fnName, fnNode, mode ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] inlineFunction [RETURN_TYPE] void   NodeTraversal t Node callNode FunctionState fs InliningMode mode [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  InliningMode  mode  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[buglab_swap_variables]^Node newCode = injector.inline ( t, callNode, fnName,  mode ) ;^548^^^^^542^551^Node newCode = injector.inline ( t, callNode, fnName, fnNode, mode ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] inlineFunction [RETURN_TYPE] void   NodeTraversal t Node callNode FunctionState fs InliningMode mode [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  InliningMode  mode  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[buglab_swap_variables]^Node newCode = mode.inline ( t, callNode, fnName, fnNode, injector ) ;^548^^^^^542^551^Node newCode = injector.inline ( t, callNode, fnName, fnNode, mode ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] inlineFunction [RETURN_TYPE] void   NodeTraversal t Node callNode FunctionState fs InliningMode mode [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  InliningMode  mode  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[buglab_swap_variables]^Node newCode = injector.inline ( t, callNode, fnName, fnNode ) ;^548^^^^^542^551^Node newCode = injector.inline ( t, callNode, fnName, fnNode, mode ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] inlineFunction [RETURN_TYPE] void   NodeTraversal t Node callNode FunctionState fs InliningMode mode [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  InliningMode  mode  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[buglab_swap_variables]^Node newCode = fnName.inline ( t, callNode, injector, fnNode, mode ) ;^548^^^^^542^551^Node newCode = injector.inline ( t, callNode, fnName, fnNode, mode ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] inlineFunction [RETURN_TYPE] void   NodeTraversal t Node callNode FunctionState fs InliningMode mode [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  InliningMode  mode  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[buglab_swap_variables]^Node newCode = injector.inline ( callNode, t, fnName, fnNode, mode ) ;^548^^^^^542^551^Node newCode = injector.inline ( t, callNode, fnName, fnNode, mode ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] inlineFunction [RETURN_TYPE] void   NodeTraversal t Node callNode FunctionState fs InliningMode mode [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  InliningMode  mode  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[buglab_swap_variables]^Node newCode = injector.inline ( t, callNode, fnNode, fnName, mode ) ;^548^^^^^542^551^Node newCode = injector.inline ( t, callNode, fnName, fnNode, mode ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] inlineFunction [RETURN_TYPE] void   NodeTraversal t Node callNode FunctionState fs InliningMode mode [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  InliningMode  mode  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[buglab_swap_variables]^Node newCode = injector.inline ( t, callNode, fnName, mode, fnNode ) ;^548^^^^^542^551^Node newCode = injector.inline ( t, callNode, fnName, fnNode, mode ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] inlineFunction [RETURN_TYPE] void   NodeTraversal t Node callNode FunctionState fs InliningMode mode [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  InliningMode  mode  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[buglab_swap_variables]^Node newCode = fnNode.inline ( t, callNode, fnName, injector, mode ) ;^548^^^^^542^551^Node newCode = injector.inline ( t, callNode, fnName, fnNode, mode ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] inlineFunction [RETURN_TYPE] void   NodeTraversal t Node callNode FunctionState fs InliningMode mode [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  InliningMode  mode  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[buglab_swap_variables]^for  ( fns = i.entrySet (  ) .iterator (  ) ; i.hasNext (  ) ; )  {^560^^^^^558^566^for  ( i = fns.entrySet (  ) .iterator (  ) ; i.hasNext (  ) ; )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] trimCanidatesNotMeetingMinimumRequirements [RETURN_TYPE] void   [VARIABLES] Set  fnNames  namesToAlias  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  Iterator  i  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[buglab_swap_variables]^return fs.inliningLowersCost ( injector.getModule (  ) , fs.getFn (  ) .getFunctionNode (  ) , fs.getReferences (  ) ,^615^616^617^618^^614^622^return injector.inliningLowersCost ( fs.getModule (  ) , fs.getFn (  ) .getFunctionNode (  ) , fs.getReferences (  ) ,^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] inliningLowersCost [RETURN_TYPE] boolean   FunctionState fs [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  FunctionState  fs  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[buglab_swap_variables]^return injector.inliningLowersCost ( fs.getModule (  ) .getFn (  ) .getFunctionNode (  ) , fs.getReferences (  ) ,^615^616^617^618^^614^622^return injector.inliningLowersCost ( fs.getModule (  ) , fs.getFn (  ) .getFunctionNode (  ) , fs.getReferences (  ) ,^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] inliningLowersCost [RETURN_TYPE] boolean   FunctionState fs [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  FunctionState  fs  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[buglab_swap_variables]^FunctionState fsCalled = name.get ( fns ) ;^661^^^^^650^676^FunctionState fsCalled = fns.get ( name ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] resolveInlineConflictsForFunction [RETURN_TYPE] void   FunctionState fs [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  fnNames  names  namesToAlias  CallVisitorCallback  callback  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  FunctionState  fs  fsCalled  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[buglab_swap_variables]^findCalledFunctions ( changed, node ) ;^683^^^^^681^685^findCalledFunctions ( node, changed ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] findCalledFunctions [RETURN_TYPE] Set   Node node [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  changed  fnNames  names  namesToAlias  CallVisitorCallback  callback  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[buglab_swap_variables]^findCalledFunctions (  changed ) ;^683^^^^^681^685^findCalledFunctions ( node, changed ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] findCalledFunctions [RETURN_TYPE] Set   Node node [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  changed  fnNames  names  namesToAlias  CallVisitorCallback  callback  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[buglab_swap_variables]^findCalledFunctions ( node ) ;^683^^^^^681^685^findCalledFunctions ( node, changed ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] findCalledFunctions [RETURN_TYPE] Set   Node node [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  changed  fnNames  names  namesToAlias  CallVisitorCallback  callback  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[buglab_swap_variables]^for  ( Node node = c.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  {^702^^^^^690^705^for  ( Node c = node.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] findCalledFunctions [RETURN_TYPE] void   Node node String> changed [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  changed  fnNames  names  namesToAlias  CallVisitorCallback  callback  Node  block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[buglab_swap_variables]^findCalledFunctions ( changed, c ) ;^703^^^^^690^705^findCalledFunctions ( c, changed ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] findCalledFunctions [RETURN_TYPE] void   Node node String> changed [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  changed  fnNames  names  namesToAlias  CallVisitorCallback  callback  Node  block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[buglab_swap_variables]^findCalledFunctions (  changed ) ;^703^^^^^690^705^findCalledFunctions ( c, changed ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] findCalledFunctions [RETURN_TYPE] void   Node node String> changed [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  changed  fnNames  names  namesToAlias  CallVisitorCallback  callback  Node  block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[buglab_swap_variables]^findCalledFunctions ( c ) ;^703^^^^^690^705^findCalledFunctions ( c, changed ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] findCalledFunctions [RETURN_TYPE] void   Node node String> changed [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  changed  fnNames  names  namesToAlias  CallVisitorCallback  callback  Node  block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[buglab_swap_variables]^ExpressionDecomposer decomposer = new ExpressionDecomposer ( fnNames, compiler.getUniqueNameIdSupplier (  ) , compiler ) ;^712^713^^^^711^724^ExpressionDecomposer decomposer = new ExpressionDecomposer ( compiler, compiler.getUniqueNameIdSupplier (  ) , fnNames ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] decomposeExpressions [RETURN_TYPE] void   String> fnNames [VARIABLES] Set  changed  fnNames  names  namesToAlias  Reference  ref  Node  block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  ExpressionDecomposer  decomposer  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[buglab_swap_variables]^ExpressionDecomposer decomposer = new ExpressionDecomposer ( compiler, compiler.getUniqueNameIdSupplier (  )  ) ;^712^713^^^^711^724^ExpressionDecomposer decomposer = new ExpressionDecomposer ( compiler, compiler.getUniqueNameIdSupplier (  ) , fnNames ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] decomposeExpressions [RETURN_TYPE] void   String> fnNames [VARIABLES] Set  changed  fnNames  names  namesToAlias  Reference  ref  Node  block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  ExpressionDecomposer  decomposer  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[buglab_swap_variables]^ExpressionDecomposer decomposer = new ExpressionDecomposer (  compiler.getUniqueNameIdSupplier (  ) , fnNames ) ;^712^713^^^^711^724^ExpressionDecomposer decomposer = new ExpressionDecomposer ( compiler, compiler.getUniqueNameIdSupplier (  ) , fnNames ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] decomposeExpressions [RETURN_TYPE] void   String> fnNames [VARIABLES] Set  changed  fnNames  names  namesToAlias  Reference  ref  Node  block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  ExpressionDecomposer  decomposer  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[buglab_swap_variables]^return  ( fn != null )  ? safeFnNode : safeFnNode.getFunctionNode (  ) ;^809^^^^^808^810^return  ( safeFnNode != null )  ? safeFnNode : fn.getFunctionNode (  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] getSafeFnNode [RETURN_TYPE] Node   [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  changed  fnNames  names  namesToAlias  CallVisitorCallback  callback  Node  block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[buglab_swap_variables]^return inlineLocalFunctions || parent || inlineAnonymousFunctionExpressions == null || NodeUtil.isControlStructure ( parent ) || NodeUtil.isStatementBlock ( parent ) ;^157^158^159^^^153^160^return inlineLocalFunctions || inlineAnonymousFunctionExpressions || parent == null || NodeUtil.isControlStructure ( parent ) || NodeUtil.isStatementBlock ( parent ) ;^[CLASS] FindCandidateFunctions  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node n Node parent [VARIABLES] boolean  NodeTraversal  nodeTraversal  int  callsSeen  Node  n  parent  
[buglab_swap_variables]^return inlineAnonymousFunctionExpressions || inlineLocalFunctions || parent == null || NodeUtil.isControlStructure ( parent ) || NodeUtil.isStatementBlock ( parent ) ;^157^158^159^^^153^160^return inlineLocalFunctions || inlineAnonymousFunctionExpressions || parent == null || NodeUtil.isControlStructure ( parent ) || NodeUtil.isStatementBlock ( parent ) ;^[CLASS] FindCandidateFunctions  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node n Node parent [VARIABLES] boolean  NodeTraversal  nodeTraversal  int  callsSeen  Node  n  parent  
[buglab_swap_variables]^if  (  ( inlineLocalFunctions.inGlobalScope (  )  && inlineGlobalFunctions ) ||  ( !t.inGlobalScope (  )  && t )  )  {^163^164^^^^162^171^if  (  ( t.inGlobalScope (  )  && inlineGlobalFunctions ) ||  ( !t.inGlobalScope (  )  && inlineLocalFunctions )  )  {^[CLASS] FindCandidateFunctions  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  int  callsSeen  Node  n  parent  
[buglab_swap_variables]^findNamedFunctions ( parent, n, t ) ;^165^^^^^162^171^findNamedFunctions ( t, n, parent ) ;^[CLASS] FindCandidateFunctions  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  int  callsSeen  Node  n  parent  
[buglab_swap_variables]^findNamedFunctions (  n, parent ) ;^165^^^^^162^171^findNamedFunctions ( t, n, parent ) ;^[CLASS] FindCandidateFunctions  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  int  callsSeen  Node  n  parent  
[buglab_swap_variables]^findNamedFunctions ( t, parent, n ) ;^165^^^^^162^171^findNamedFunctions ( t, n, parent ) ;^[CLASS] FindCandidateFunctions  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  int  callsSeen  Node  n  parent  
[buglab_swap_variables]^findNamedFunctions ( t,  parent ) ;^165^^^^^162^171^findNamedFunctions ( t, n, parent ) ;^[CLASS] FindCandidateFunctions  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  int  callsSeen  Node  n  parent  
[buglab_swap_variables]^findNamedFunctions ( t, n ) ;^165^^^^^162^171^findNamedFunctions ( t, n, parent ) ;^[CLASS] FindCandidateFunctions  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  int  callsSeen  Node  n  parent  
[buglab_swap_variables]^findAnonymousFunctionExpressions ( n, t ) ;^169^^^^^162^171^findAnonymousFunctionExpressions ( t, n ) ;^[CLASS] FindCandidateFunctions  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  int  callsSeen  Node  n  parent  
[buglab_swap_variables]^findAnonymousFunctionExpressions (  n ) ;^169^^^^^162^171^findAnonymousFunctionExpressions ( t, n ) ;^[CLASS] FindCandidateFunctions  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  int  callsSeen  Node  n  parent  
[buglab_swap_variables]^findAnonymousFunctionExpressions ( t ) ;^169^^^^^162^171^findAnonymousFunctionExpressions ( t, n ) ;^[CLASS] FindCandidateFunctions  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  int  callsSeen  Node  n  parent  
[buglab_swap_variables]^if  ( n.getType (  )  == Token.NAME && nameNodeameNode.hasChildren (  ) && nameNode.getFirstChild (  ) .getType (  )  == Token.FUNCTION )  {^188^189^^^^173^203^if  ( nameNode.getType (  )  == Token.NAME && nameNode.hasChildren (  ) && nameNode.getFirstChild (  ) .getType (  )  == Token.FUNCTION )  {^[CLASS] FindCandidateFunctions  [METHOD] findNamedFunctions [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Function  fn  String  name  boolean  NodeTraversal  t  int  callsSeen  Node  n  nameNode  parent  
[buglab_swap_variables]^if  ( nameNodeameNode.getType (  )  == Token.NAME && n.hasChildren (  ) && nameNode.getFirstChild (  ) .getType (  )  == Token.FUNCTION )  {^188^189^^^^173^203^if  ( nameNode.getType (  )  == Token.NAME && nameNode.hasChildren (  ) && nameNode.getFirstChild (  ) .getType (  )  == Token.FUNCTION )  {^[CLASS] FindCandidateFunctions  [METHOD] findNamedFunctions [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Function  fn  String  name  boolean  NodeTraversal  t  int  callsSeen  Node  n  nameNode  parent  
[buglab_swap_variables]^maybeAddFunction ( tew FunctionVar ( n ) , n.getModule (  )  ) ;^190^^^^^188^191^maybeAddFunction ( new FunctionVar ( n ) , t.getModule (  )  ) ;^[CLASS] FindCandidateFunctions  [METHOD] findNamedFunctions [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Function  fn  String  name  boolean  NodeTraversal  t  int  callsSeen  Node  n  nameNode  parent  
[buglab_swap_variables]^maybeAddFunction ( new FunctionVar ( n ) .getModule (  )  ) ;^190^^^^^188^191^maybeAddFunction ( new FunctionVar ( n ) , t.getModule (  )  ) ;^[CLASS] FindCandidateFunctions  [METHOD] findNamedFunctions [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Function  fn  String  name  boolean  NodeTraversal  t  int  callsSeen  Node  n  nameNode  parent  
[buglab_swap_variables]^maybeAddFunction ( tew FunctionVar ( n ) , n.getModule (  )  ) ;^190^^^^^175^205^maybeAddFunction ( new FunctionVar ( n ) , t.getModule (  )  ) ;^[CLASS] FindCandidateFunctions  [METHOD] findNamedFunctions [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Function  fn  String  name  boolean  NodeTraversal  t  int  callsSeen  Node  n  nameNode  parent  
[buglab_swap_variables]^maybeAddFunction ( new FunctionVar ( n ) .getModule (  )  ) ;^190^^^^^175^205^maybeAddFunction ( new FunctionVar ( n ) , t.getModule (  )  ) ;^[CLASS] FindCandidateFunctions  [METHOD] findNamedFunctions [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Function  fn  String  name  boolean  NodeTraversal  t  int  callsSeen  Node  n  nameNode  parent  
[buglab_swap_variables]^maybeAddFunction ( t, fn.getModule (  )  ) ;^203^^^^^188^218^maybeAddFunction ( fn, t.getModule (  )  ) ;^[CLASS] FindCandidateFunctions  [METHOD] findNamedFunctions [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Function  fn  String  name  boolean  NodeTraversal  t  int  callsSeen  Node  n  nameNode  parent  
[buglab_swap_variables]^maybeAddFunction (  t.getModule (  )  ) ;^203^^^^^188^218^maybeAddFunction ( fn, t.getModule (  )  ) ;^[CLASS] FindCandidateFunctions  [METHOD] findNamedFunctions [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Function  fn  String  name  boolean  NodeTraversal  t  int  callsSeen  Node  n  nameNode  parent  
[buglab_swap_variables]^maybeAddFunction ( fn.getModule (  )  ) ;^203^^^^^188^218^maybeAddFunction ( fn, t.getModule (  )  ) ;^[CLASS] FindCandidateFunctions  [METHOD] findNamedFunctions [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Function  fn  String  name  boolean  NodeTraversal  t  int  callsSeen  Node  n  nameNode  parent  
[buglab_swap_variables]^if  ( fn != null )  {^231^^^^^215^238^if  ( fnNode != null )  {^[CLASS] FindCandidateFunctions  [METHOD] findAnonymousFunctionExpressions [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Function  fn  boolean  NodeTraversal  t  int  callsSeen  Node  fnIdentifingNode  fnNode  n  
[buglab_swap_variables]^maybeAddFunction ( t, fn.getModule (  )  ) ;^233^^^^^215^238^maybeAddFunction ( fn, t.getModule (  )  ) ;^[CLASS] FindCandidateFunctions  [METHOD] findAnonymousFunctionExpressions [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Function  fn  boolean  NodeTraversal  t  int  callsSeen  Node  fnIdentifingNode  fnNode  n  
[buglab_swap_variables]^maybeAddFunction (  t.getModule (  )  ) ;^233^^^^^215^238^maybeAddFunction ( fn, t.getModule (  )  ) ;^[CLASS] FindCandidateFunctions  [METHOD] findAnonymousFunctionExpressions [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Function  fn  boolean  NodeTraversal  t  int  callsSeen  Node  fnIdentifingNode  fnNode  n  
[buglab_swap_variables]^maybeAddFunction ( fn.getModule (  )  ) ;^233^^^^^215^238^maybeAddFunction ( fn, t.getModule (  )  ) ;^[CLASS] FindCandidateFunctions  [METHOD] findAnonymousFunctionExpressions [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Function  fn  boolean  NodeTraversal  t  int  callsSeen  Node  fnIdentifingNode  fnNode  n  
[buglab_swap_variables]^anonFns.put (  fn.getName (  )  ) ;^234^^^^^215^238^anonFns.put ( fnNode, fn.getName (  )  ) ;^[CLASS] FindCandidateFunctions  [METHOD] findAnonymousFunctionExpressions [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Function  fn  boolean  NodeTraversal  t  int  callsSeen  Node  fnIdentifingNode  fnNode  n  
[buglab_swap_variables]^anonFns.put ( fnNode.getName (  )  ) ;^234^^^^^215^238^anonFns.put ( fnNode, fn.getName (  )  ) ;^[CLASS] FindCandidateFunctions  [METHOD] findAnonymousFunctionExpressions [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Function  fn  boolean  NodeTraversal  t  int  callsSeen  Node  fnIdentifingNode  fnNode  n  
[buglab_swap_variables]^name = fnIdentifingNode.get ( anonFunctionMap ) ;^365^^^^^350^380^name = anonFunctionMap.get ( fnIdentifingNode ) ;^[CLASS] CallVisitor  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  CallVisitorCallback  callback  NodeTraversal  t  Node  child  fnIdentifingNode  n  parent  FunctionState  fs  String  name  Map  anonFns  anonFunctionMap  fns  functionMap  
[buglab_swap_variables]^name = child.get ( anonFunctionMap ) ;^358^^^^^343^373^name = anonFunctionMap.get ( child ) ;^[CLASS] CallVisitor  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  CallVisitorCallback  callback  NodeTraversal  t  Node  child  fnIdentifingNode  n  parent  FunctionState  fs  String  name  Map  anonFns  anonFunctionMap  fns  functionMap  
[buglab_swap_variables]^callback.visitCallSite ( fs, n, parent, t ) ;^373^^^^^358^388^callback.visitCallSite ( t, n, parent, fs ) ;^[CLASS] CallVisitor  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  CallVisitorCallback  callback  NodeTraversal  t  Node  child  fnIdentifingNode  n  parent  FunctionState  fs  String  name  Map  anonFns  anonFunctionMap  fns  functionMap  
[buglab_swap_variables]^callback.visitCallSite (  n, parent, fs ) ;^373^^^^^358^388^callback.visitCallSite ( t, n, parent, fs ) ;^[CLASS] CallVisitor  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  CallVisitorCallback  callback  NodeTraversal  t  Node  child  fnIdentifingNode  n  parent  FunctionState  fs  String  name  Map  anonFns  anonFunctionMap  fns  functionMap  
[buglab_swap_variables]^callback.visitCallSite ( t, parent, n, fs ) ;^373^^^^^358^388^callback.visitCallSite ( t, n, parent, fs ) ;^[CLASS] CallVisitor  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  CallVisitorCallback  callback  NodeTraversal  t  Node  child  fnIdentifingNode  n  parent  FunctionState  fs  String  name  Map  anonFns  anonFunctionMap  fns  functionMap  
[buglab_swap_variables]^callback.visitCallSite ( t,  parent, fs ) ;^373^^^^^358^388^callback.visitCallSite ( t, n, parent, fs ) ;^[CLASS] CallVisitor  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  CallVisitorCallback  callback  NodeTraversal  t  Node  child  fnIdentifingNode  n  parent  FunctionState  fs  String  name  Map  anonFns  anonFunctionMap  fns  functionMap  
[buglab_swap_variables]^callback.visitCallSite ( t, n, fs, parent ) ;^373^^^^^358^388^callback.visitCallSite ( t, n, parent, fs ) ;^[CLASS] CallVisitor  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  CallVisitorCallback  callback  NodeTraversal  t  Node  child  fnIdentifingNode  n  parent  FunctionState  fs  String  name  Map  anonFns  anonFunctionMap  fns  functionMap  
[buglab_swap_variables]^callback.visitCallSite ( t, n,  fs ) ;^373^^^^^358^388^callback.visitCallSite ( t, n, parent, fs ) ;^[CLASS] CallVisitor  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  CallVisitorCallback  callback  NodeTraversal  t  Node  child  fnIdentifingNode  n  parent  FunctionState  fs  String  name  Map  anonFns  anonFunctionMap  fns  functionMap  
[buglab_swap_variables]^callback.visitCallSite ( t, fs, parent, n ) ;^373^^^^^358^388^callback.visitCallSite ( t, n, parent, fs ) ;^[CLASS] CallVisitor  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  CallVisitorCallback  callback  NodeTraversal  t  Node  child  fnIdentifingNode  n  parent  FunctionState  fs  String  name  Map  anonFns  anonFunctionMap  fns  functionMap  
[buglab_swap_variables]^callback.visitCallSite ( t, n, parent ) ;^373^^^^^358^388^callback.visitCallSite ( t, n, parent, fs ) ;^[CLASS] CallVisitor  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  CallVisitorCallback  callback  NodeTraversal  t  Node  child  fnIdentifingNode  n  parent  FunctionState  fs  String  name  Map  anonFns  anonFunctionMap  fns  functionMap  
[buglab_swap_variables]^FunctionState fs = name.get ( functionMap ) ;^370^^^^^355^385^FunctionState fs = functionMap.get ( name ) ;^[CLASS] CallVisitor  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  CallVisitorCallback  callback  NodeTraversal  t  Node  child  fnIdentifingNode  n  parent  FunctionState  fs  String  name  Map  anonFns  anonFunctionMap  fns  functionMap  
[buglab_swap_variables]^callback.visitCallSite ( n, t, parent, fs ) ;^373^^^^^358^388^callback.visitCallSite ( t, n, parent, fs ) ;^[CLASS] CallVisitor  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  CallVisitorCallback  callback  NodeTraversal  t  Node  child  fnIdentifingNode  n  parent  FunctionState  fs  String  name  Map  anonFns  anonFunctionMap  fns  functionMap  
[buglab_swap_variables]^super ( anonFns, fns, null ) ;^391^^^^^388^393^super ( fns, anonFns, null ) ;^[CLASS] FindCandidatesReferences  [METHOD] <init> [RETURN_TYPE] Map)   FunctionState> fns String> anonFns [VARIABLES] boolean  Map  anonFns  fns  
[buglab_swap_variables]^super (  anonFns, null ) ;^391^^^^^388^393^super ( fns, anonFns, null ) ;^[CLASS] FindCandidatesReferences  [METHOD] <init> [RETURN_TYPE] Map)   FunctionState> fns String> anonFns [VARIABLES] boolean  Map  anonFns  fns  
[buglab_swap_variables]^super ( fns,  null ) ;^391^^^^^388^393^super ( fns, anonFns, null ) ;^[CLASS] FindCandidatesReferences  [METHOD] <init> [RETURN_TYPE] Map)   FunctionState> fns String> anonFns [VARIABLES] boolean  Map  anonFns  fns  
[buglab_swap_variables]^checkNameUsage ( parent, n, t ) ;^399^^^^^396^401^checkNameUsage ( t, n, parent ) ;^[CLASS] FindCandidatesReferences  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  n  parent  
[buglab_swap_variables]^checkNameUsage (  n, parent ) ;^399^^^^^396^401^checkNameUsage ( t, n, parent ) ;^[CLASS] FindCandidatesReferences  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  n  parent  
[buglab_swap_variables]^checkNameUsage ( n, t, parent ) ;^399^^^^^396^401^checkNameUsage ( t, n, parent ) ;^[CLASS] FindCandidatesReferences  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  n  parent  
[buglab_swap_variables]^checkNameUsage ( t,  parent ) ;^399^^^^^396^401^checkNameUsage ( t, n, parent ) ;^[CLASS] FindCandidatesReferences  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  n  parent  
[buglab_swap_variables]^checkNameUsage ( t, parent, n ) ;^399^^^^^396^401^checkNameUsage ( t, n, parent ) ;^[CLASS] FindCandidatesReferences  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  n  parent  
[buglab_swap_variables]^checkNameUsage ( t, n ) ;^399^^^^^396^401^checkNameUsage ( t, n, parent ) ;^[CLASS] FindCandidatesReferences  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  n  parent  
[buglab_swap_variables]^maybeAddReference ( callNode, fs, t, t.getModule (  )  ) ;^405^^^^^403^406^maybeAddReference ( t, fs, callNode, t.getModule (  )  ) ;^[CLASS] FindCandidatesReferences  [METHOD] visitCallSite [RETURN_TYPE] void   NodeTraversal t Node callNode Node parent FunctionState fs [VARIABLES] boolean  NodeTraversal  t  Node  callNode  parent  FunctionState  fs  
[buglab_swap_variables]^maybeAddReference (  fs, callNode, t.getModule (  )  ) ;^405^^^^^403^406^maybeAddReference ( t, fs, callNode, t.getModule (  )  ) ;^[CLASS] FindCandidatesReferences  [METHOD] visitCallSite [RETURN_TYPE] void   NodeTraversal t Node callNode Node parent FunctionState fs [VARIABLES] boolean  NodeTraversal  t  Node  callNode  parent  FunctionState  fs  
[buglab_swap_variables]^maybeAddReference ( t, callNode, fs, t.getModule (  )  ) ;^405^^^^^403^406^maybeAddReference ( t, fs, callNode, t.getModule (  )  ) ;^[CLASS] FindCandidatesReferences  [METHOD] visitCallSite [RETURN_TYPE] void   NodeTraversal t Node callNode Node parent FunctionState fs [VARIABLES] boolean  NodeTraversal  t  Node  callNode  parent  FunctionState  fs  
[buglab_swap_variables]^maybeAddReference ( t,  callNode, t.getModule (  )  ) ;^405^^^^^403^406^maybeAddReference ( t, fs, callNode, t.getModule (  )  ) ;^[CLASS] FindCandidatesReferences  [METHOD] visitCallSite [RETURN_TYPE] void   NodeTraversal t Node callNode Node parent FunctionState fs [VARIABLES] boolean  NodeTraversal  t  Node  callNode  parent  FunctionState  fs  
[buglab_swap_variables]^maybeAddReference ( t, fs,  t.getModule (  )  ) ;^405^^^^^403^406^maybeAddReference ( t, fs, callNode, t.getModule (  )  ) ;^[CLASS] FindCandidatesReferences  [METHOD] visitCallSite [RETURN_TYPE] void   NodeTraversal t Node callNode Node parent FunctionState fs [VARIABLES] boolean  NodeTraversal  t  Node  callNode  parent  FunctionState  fs  
[buglab_swap_variables]^referenceAdded = maybeAddReferenceUsingMode ( fs, t, callNode, module, mode ) ;^417^418^^^^408^433^referenceAdded = maybeAddReferenceUsingMode ( t, fs, callNode, module, mode ) ;^[CLASS] FindCandidatesReferences  [METHOD] maybeAddReference [RETURN_TYPE] void   NodeTraversal t FunctionState fs Node callNode JSModule module [VARIABLES] boolean  referenceAdded  NodeTraversal  t  InliningMode  mode  FunctionState  fs  Node  callNode  JSModule  module  
[buglab_swap_variables]^referenceAdded = maybeAddReferenceUsingMode (  fs, callNode, module, mode ) ;^417^418^^^^408^433^referenceAdded = maybeAddReferenceUsingMode ( t, fs, callNode, module, mode ) ;^[CLASS] FindCandidatesReferences  [METHOD] maybeAddReference [RETURN_TYPE] void   NodeTraversal t FunctionState fs Node callNode JSModule module [VARIABLES] boolean  referenceAdded  NodeTraversal  t  InliningMode  mode  FunctionState  fs  Node  callNode  JSModule  module  
[buglab_swap_variables]^referenceAdded = maybeAddReferenceUsingMode ( t, module, callNode, fs, mode ) ;^417^418^^^^408^433^referenceAdded = maybeAddReferenceUsingMode ( t, fs, callNode, module, mode ) ;^[CLASS] FindCandidatesReferences  [METHOD] maybeAddReference [RETURN_TYPE] void   NodeTraversal t FunctionState fs Node callNode JSModule module [VARIABLES] boolean  referenceAdded  NodeTraversal  t  InliningMode  mode  FunctionState  fs  Node  callNode  JSModule  module  
[buglab_swap_variables]^referenceAdded = maybeAddReferenceUsingMode ( t,  callNode, module, mode ) ;^417^418^^^^408^433^referenceAdded = maybeAddReferenceUsingMode ( t, fs, callNode, module, mode ) ;^[CLASS] FindCandidatesReferences  [METHOD] maybeAddReference [RETURN_TYPE] void   NodeTraversal t FunctionState fs Node callNode JSModule module [VARIABLES] boolean  referenceAdded  NodeTraversal  t  InliningMode  mode  FunctionState  fs  Node  callNode  JSModule  module  
[buglab_swap_variables]^referenceAdded = maybeAddReferenceUsingMode ( t, fs, module, callNode, mode ) ;^417^418^^^^408^433^referenceAdded = maybeAddReferenceUsingMode ( t, fs, callNode, module, mode ) ;^[CLASS] FindCandidatesReferences  [METHOD] maybeAddReference [RETURN_TYPE] void   NodeTraversal t FunctionState fs Node callNode JSModule module [VARIABLES] boolean  referenceAdded  NodeTraversal  t  InliningMode  mode  FunctionState  fs  Node  callNode  JSModule  module  
[buglab_swap_variables]^referenceAdded = maybeAddReferenceUsingMode ( t, fs,  module, mode ) ;^417^418^^^^408^433^referenceAdded = maybeAddReferenceUsingMode ( t, fs, callNode, module, mode ) ;^[CLASS] FindCandidatesReferences  [METHOD] maybeAddReference [RETURN_TYPE] void   NodeTraversal t FunctionState fs Node callNode JSModule module [VARIABLES] boolean  referenceAdded  NodeTraversal  t  InliningMode  mode  FunctionState  fs  Node  callNode  JSModule  module  
[buglab_swap_variables]^referenceAdded = maybeAddReferenceUsingMode ( t, fs, callNode, mode, module ) ;^417^418^^^^408^433^referenceAdded = maybeAddReferenceUsingMode ( t, fs, callNode, module, mode ) ;^[CLASS] FindCandidatesReferences  [METHOD] maybeAddReference [RETURN_TYPE] void   NodeTraversal t FunctionState fs Node callNode JSModule module [VARIABLES] boolean  referenceAdded  NodeTraversal  t  InliningMode  mode  FunctionState  fs  Node  callNode  JSModule  module  
[buglab_swap_variables]^referenceAdded = maybeAddReferenceUsingMode ( t, fs, callNode,  mode ) ;^417^418^^^^408^433^referenceAdded = maybeAddReferenceUsingMode ( t, fs, callNode, module, mode ) ;^[CLASS] FindCandidatesReferences  [METHOD] maybeAddReference [RETURN_TYPE] void   NodeTraversal t FunctionState fs Node callNode JSModule module [VARIABLES] boolean  referenceAdded  NodeTraversal  t  InliningMode  mode  FunctionState  fs  Node  callNode  JSModule  module  
[buglab_swap_variables]^referenceAdded = maybeAddReferenceUsingMode ( t, fs, callNode, module ) ;^417^418^^^^408^433^referenceAdded = maybeAddReferenceUsingMode ( t, fs, callNode, module, mode ) ;^[CLASS] FindCandidatesReferences  [METHOD] maybeAddReference [RETURN_TYPE] void   NodeTraversal t FunctionState fs Node callNode JSModule module [VARIABLES] boolean  referenceAdded  NodeTraversal  t  InliningMode  mode  FunctionState  fs  Node  callNode  JSModule  module  
[buglab_swap_variables]^referenceAdded = maybeAddReferenceUsingMode ( mode, fs, callNode, module, t ) ;^417^418^^^^408^433^referenceAdded = maybeAddReferenceUsingMode ( t, fs, callNode, module, mode ) ;^[CLASS] FindCandidatesReferences  [METHOD] maybeAddReference [RETURN_TYPE] void   NodeTraversal t FunctionState fs Node callNode JSModule module [VARIABLES] boolean  referenceAdded  NodeTraversal  t  InliningMode  mode  FunctionState  fs  Node  callNode  JSModule  module  
[buglab_swap_variables]^referenceAdded = maybeAddReferenceUsingMode ( module, fs, callNode, t, mode ) ;^424^425^^^^408^433^referenceAdded = maybeAddReferenceUsingMode ( t, fs, callNode, module, mode ) ;^[CLASS] FindCandidatesReferences  [METHOD] maybeAddReference [RETURN_TYPE] void   NodeTraversal t FunctionState fs Node callNode JSModule module [VARIABLES] boolean  referenceAdded  NodeTraversal  t  InliningMode  mode  FunctionState  fs  Node  callNode  JSModule  module  
[buglab_swap_variables]^referenceAdded = maybeAddReferenceUsingMode (  fs, callNode, module, mode ) ;^424^425^^^^408^433^referenceAdded = maybeAddReferenceUsingMode ( t, fs, callNode, module, mode ) ;^[CLASS] FindCandidatesReferences  [METHOD] maybeAddReference [RETURN_TYPE] void   NodeTraversal t FunctionState fs Node callNode JSModule module [VARIABLES] boolean  referenceAdded  NodeTraversal  t  InliningMode  mode  FunctionState  fs  Node  callNode  JSModule  module  
[buglab_swap_variables]^referenceAdded = maybeAddReferenceUsingMode ( t, callNode, fs, module, mode ) ;^424^425^^^^408^433^referenceAdded = maybeAddReferenceUsingMode ( t, fs, callNode, module, mode ) ;^[CLASS] FindCandidatesReferences  [METHOD] maybeAddReference [RETURN_TYPE] void   NodeTraversal t FunctionState fs Node callNode JSModule module [VARIABLES] boolean  referenceAdded  NodeTraversal  t  InliningMode  mode  FunctionState  fs  Node  callNode  JSModule  module  
[buglab_swap_variables]^referenceAdded = maybeAddReferenceUsingMode ( t,  callNode, module, mode ) ;^424^425^^^^408^433^referenceAdded = maybeAddReferenceUsingMode ( t, fs, callNode, module, mode ) ;^[CLASS] FindCandidatesReferences  [METHOD] maybeAddReference [RETURN_TYPE] void   NodeTraversal t FunctionState fs Node callNode JSModule module [VARIABLES] boolean  referenceAdded  NodeTraversal  t  InliningMode  mode  FunctionState  fs  Node  callNode  JSModule  module  
[buglab_swap_variables]^referenceAdded = maybeAddReferenceUsingMode ( callNode, fs, t, module, mode ) ;^424^425^^^^408^433^referenceAdded = maybeAddReferenceUsingMode ( t, fs, callNode, module, mode ) ;^[CLASS] FindCandidatesReferences  [METHOD] maybeAddReference [RETURN_TYPE] void   NodeTraversal t FunctionState fs Node callNode JSModule module [VARIABLES] boolean  referenceAdded  NodeTraversal  t  InliningMode  mode  FunctionState  fs  Node  callNode  JSModule  module  
[buglab_swap_variables]^referenceAdded = maybeAddReferenceUsingMode ( t, fs,  module, mode ) ;^424^425^^^^408^433^referenceAdded = maybeAddReferenceUsingMode ( t, fs, callNode, module, mode ) ;^[CLASS] FindCandidatesReferences  [METHOD] maybeAddReference [RETURN_TYPE] void   NodeTraversal t FunctionState fs Node callNode JSModule module [VARIABLES] boolean  referenceAdded  NodeTraversal  t  InliningMode  mode  FunctionState  fs  Node  callNode  JSModule  module  
[buglab_swap_variables]^referenceAdded = maybeAddReferenceUsingMode ( t, module, callNode, fs, mode ) ;^424^425^^^^408^433^referenceAdded = maybeAddReferenceUsingMode ( t, fs, callNode, module, mode ) ;^[CLASS] FindCandidatesReferences  [METHOD] maybeAddReference [RETURN_TYPE] void   NodeTraversal t FunctionState fs Node callNode JSModule module [VARIABLES] boolean  referenceAdded  NodeTraversal  t  InliningMode  mode  FunctionState  fs  Node  callNode  JSModule  module  
[buglab_swap_variables]^referenceAdded = maybeAddReferenceUsingMode ( t, fs, callNode,  mode ) ;^424^425^^^^408^433^referenceAdded = maybeAddReferenceUsingMode ( t, fs, callNode, module, mode ) ;^[CLASS] FindCandidatesReferences  [METHOD] maybeAddReference [RETURN_TYPE] void   NodeTraversal t FunctionState fs Node callNode JSModule module [VARIABLES] boolean  referenceAdded  NodeTraversal  t  InliningMode  mode  FunctionState  fs  Node  callNode  JSModule  module  
[buglab_swap_variables]^referenceAdded = maybeAddReferenceUsingMode ( t, fs, mode, module, callNode ) ;^424^425^^^^408^433^referenceAdded = maybeAddReferenceUsingMode ( t, fs, callNode, module, mode ) ;^[CLASS] FindCandidatesReferences  [METHOD] maybeAddReference [RETURN_TYPE] void   NodeTraversal t FunctionState fs Node callNode JSModule module [VARIABLES] boolean  referenceAdded  NodeTraversal  t  InliningMode  mode  FunctionState  fs  Node  callNode  JSModule  module  
[buglab_swap_variables]^referenceAdded = maybeAddReferenceUsingMode ( t, fs, callNode, module ) ;^424^425^^^^408^433^referenceAdded = maybeAddReferenceUsingMode ( t, fs, callNode, module, mode ) ;^[CLASS] FindCandidatesReferences  [METHOD] maybeAddReference [RETURN_TYPE] void   NodeTraversal t FunctionState fs Node callNode JSModule module [VARIABLES] boolean  referenceAdded  NodeTraversal  t  InliningMode  mode  FunctionState  fs  Node  callNode  JSModule  module  
[buglab_swap_variables]^referenceAdded = maybeAddReferenceUsingMode ( fs, t, callNode, module, mode ) ;^424^425^^^^408^433^referenceAdded = maybeAddReferenceUsingMode ( t, fs, callNode, module, mode ) ;^[CLASS] FindCandidatesReferences  [METHOD] maybeAddReference [RETURN_TYPE] void   NodeTraversal t FunctionState fs Node callNode JSModule module [VARIABLES] boolean  referenceAdded  NodeTraversal  t  InliningMode  mode  FunctionState  fs  Node  callNode  JSModule  module  
[buglab_swap_variables]^referenceAdded = maybeAddReferenceUsingMode ( t, fs, callNode, mode, module ) ;^424^425^^^^408^433^referenceAdded = maybeAddReferenceUsingMode ( t, fs, callNode, module, mode ) ;^[CLASS] FindCandidatesReferences  [METHOD] maybeAddReference [RETURN_TYPE] void   NodeTraversal t FunctionState fs Node callNode JSModule module [VARIABLES] boolean  referenceAdded  NodeTraversal  t  InliningMode  mode  FunctionState  fs  Node  callNode  JSModule  module  
[buglab_swap_variables]^referenceAdded = maybeAddReferenceUsingMode ( t, mode, callNode, module, fs ) ;^424^425^^^^408^433^referenceAdded = maybeAddReferenceUsingMode ( t, fs, callNode, module, mode ) ;^[CLASS] FindCandidatesReferences  [METHOD] maybeAddReference [RETURN_TYPE] void   NodeTraversal t FunctionState fs Node callNode JSModule module [VARIABLES] boolean  referenceAdded  NodeTraversal  t  InliningMode  mode  FunctionState  fs  Node  callNode  JSModule  module  
[buglab_swap_variables]^referenceAdded = maybeAddReferenceUsingMode ( t, fs, module, callNode, mode ) ;^424^425^^^^408^433^referenceAdded = maybeAddReferenceUsingMode ( t, fs, callNode, module, mode ) ;^[CLASS] FindCandidatesReferences  [METHOD] maybeAddReference [RETURN_TYPE] void   NodeTraversal t FunctionState fs Node callNode JSModule module [VARIABLES] boolean  referenceAdded  NodeTraversal  t  InliningMode  mode  FunctionState  fs  Node  callNode  JSModule  module  
[buglab_swap_variables]^referenceAdded = maybeAddReferenceUsingMode ( mode, fs, callNode, module, t ) ;^424^425^^^^408^433^referenceAdded = maybeAddReferenceUsingMode ( t, fs, callNode, module, mode ) ;^[CLASS] FindCandidatesReferences  [METHOD] maybeAddReference [RETURN_TYPE] void   NodeTraversal t FunctionState fs Node callNode JSModule module [VARIABLES] boolean  referenceAdded  NodeTraversal  t  InliningMode  mode  FunctionState  fs  Node  callNode  JSModule  module  
[buglab_swap_variables]^CanInlineResult result = injector.canInlineReferenceToFunction ( callNode, t, fs.getFn (  ) .getFunctionNode (  ) , fs.getNamesToAlias (  ) , mode, fs.getReferencesThis (  )  ) ;^438^439^440^^^435^450^CanInlineResult result = injector.canInlineReferenceToFunction ( t, callNode, fs.getFn (  ) .getFunctionNode (  ) , fs.getNamesToAlias (  ) , mode, fs.getReferencesThis (  )  ) ;^[CLASS] FindCandidatesReferences  [METHOD] maybeAddReferenceUsingMode [RETURN_TYPE] boolean   NodeTraversal t FunctionState fs Node callNode JSModule module InliningMode mode [VARIABLES] CanInlineResult  result  boolean  decompose  NodeTraversal  t  InliningMode  mode  FunctionState  fs  Node  callNode  JSModule  module  
[buglab_swap_variables]^CanInlineResult result = injector.canInlineReferenceToFunction (  callNode, fs.getFn (  ) .getFunctionNode (  ) , fs.getNamesToAlias (  ) , mode, fs.getReferencesThis (  )  ) ;^438^439^440^^^435^450^CanInlineResult result = injector.canInlineReferenceToFunction ( t, callNode, fs.getFn (  ) .getFunctionNode (  ) , fs.getNamesToAlias (  ) , mode, fs.getReferencesThis (  )  ) ;^[CLASS] FindCandidatesReferences  [METHOD] maybeAddReferenceUsingMode [RETURN_TYPE] boolean   NodeTraversal t FunctionState fs Node callNode JSModule module InliningMode mode [VARIABLES] CanInlineResult  result  boolean  decompose  NodeTraversal  t  InliningMode  mode  FunctionState  fs  Node  callNode  JSModule  module  
[buglab_swap_variables]^CanInlineResult result = injector.canInlineReferenceToFunction ( t, mode, fs.getFn (  ) .getFunctionNode (  ) , fs.getNamesToAlias (  ) , callNode, fs.getReferencesThis (  )  ) ;^438^439^440^^^435^450^CanInlineResult result = injector.canInlineReferenceToFunction ( t, callNode, fs.getFn (  ) .getFunctionNode (  ) , fs.getNamesToAlias (  ) , mode, fs.getReferencesThis (  )  ) ;^[CLASS] FindCandidatesReferences  [METHOD] maybeAddReferenceUsingMode [RETURN_TYPE] boolean   NodeTraversal t FunctionState fs Node callNode JSModule module InliningMode mode [VARIABLES] CanInlineResult  result  boolean  decompose  NodeTraversal  t  InliningMode  mode  FunctionState  fs  Node  callNode  JSModule  module  
[buglab_swap_variables]^CanInlineResult result = injector.canInlineReferenceToFunction ( t,  fs.getFn (  ) .getFunctionNode (  ) , fs.getNamesToAlias (  ) , mode, fs.getReferencesThis (  )  ) ;^438^439^440^^^435^450^CanInlineResult result = injector.canInlineReferenceToFunction ( t, callNode, fs.getFn (  ) .getFunctionNode (  ) , fs.getNamesToAlias (  ) , mode, fs.getReferencesThis (  )  ) ;^[CLASS] FindCandidatesReferences  [METHOD] maybeAddReferenceUsingMode [RETURN_TYPE] boolean   NodeTraversal t FunctionState fs Node callNode JSModule module InliningMode mode [VARIABLES] CanInlineResult  result  boolean  decompose  NodeTraversal  t  InliningMode  mode  FunctionState  fs  Node  callNode  JSModule  module  
[buglab_swap_variables]^CanInlineResult result = fs.canInlineReferenceToFunction ( t, callNode, injector.getFn (  ) .getFunctionNode (  ) , fs.getNamesToAlias (  ) , mode, fs.getReferencesThis (  )  ) ;^438^439^440^^^435^450^CanInlineResult result = injector.canInlineReferenceToFunction ( t, callNode, fs.getFn (  ) .getFunctionNode (  ) , fs.getNamesToAlias (  ) , mode, fs.getReferencesThis (  )  ) ;^[CLASS] FindCandidatesReferences  [METHOD] maybeAddReferenceUsingMode [RETURN_TYPE] boolean   NodeTraversal t FunctionState fs Node callNode JSModule module InliningMode mode [VARIABLES] CanInlineResult  result  boolean  decompose  NodeTraversal  t  InliningMode  mode  FunctionState  fs  Node  callNode  JSModule  module  
[buglab_swap_variables]^CanInlineResult result = injector.canInlineReferenceToFunction ( t, callNode.getFn (  ) .getFunctionNode (  ) , fs.getNamesToAlias (  ) , mode, fs.getReferencesThis (  )  ) ;^438^439^440^^^435^450^CanInlineResult result = injector.canInlineReferenceToFunction ( t, callNode, fs.getFn (  ) .getFunctionNode (  ) , fs.getNamesToAlias (  ) , mode, fs.getReferencesThis (  )  ) ;^[CLASS] FindCandidatesReferences  [METHOD] maybeAddReferenceUsingMode [RETURN_TYPE] boolean   NodeTraversal t FunctionState fs Node callNode JSModule module InliningMode mode [VARIABLES] CanInlineResult  result  boolean  decompose  NodeTraversal  t  InliningMode  mode  FunctionState  fs  Node  callNode  JSModule  module  
[buglab_swap_variables]^CanInlineResult result = injector.canInlineReferenceToFunction ( t, callNode, mode.getFn (  ) .getFunctionNode (  ) , fs.getNamesToAlias (  ) , fs, fs.getReferencesThis (  )  ) ;^438^439^440^^^435^450^CanInlineResult result = injector.canInlineReferenceToFunction ( t, callNode, fs.getFn (  ) .getFunctionNode (  ) , fs.getNamesToAlias (  ) , mode, fs.getReferencesThis (  )  ) ;^[CLASS] FindCandidatesReferences  [METHOD] maybeAddReferenceUsingMode [RETURN_TYPE] boolean   NodeTraversal t FunctionState fs Node callNode JSModule module InliningMode mode [VARIABLES] CanInlineResult  result  boolean  decompose  NodeTraversal  t  InliningMode  mode  FunctionState  fs  Node  callNode  JSModule  module  
[buglab_swap_variables]^CanInlineResult result = injector.canInlineReferenceToFunction ( t, callNode, fs.getFn (  ) .getFunctionNode (  ) , fs.getNamesToAlias (  ) ,  fs.getReferencesThis (  )  ) ;^438^439^440^^^435^450^CanInlineResult result = injector.canInlineReferenceToFunction ( t, callNode, fs.getFn (  ) .getFunctionNode (  ) , fs.getNamesToAlias (  ) , mode, fs.getReferencesThis (  )  ) ;^[CLASS] FindCandidatesReferences  [METHOD] maybeAddReferenceUsingMode [RETURN_TYPE] boolean   NodeTraversal t FunctionState fs Node callNode JSModule module InliningMode mode [VARIABLES] CanInlineResult  result  boolean  decompose  NodeTraversal  t  InliningMode  mode  FunctionState  fs  Node  callNode  JSModule  module  
[buglab_swap_variables]^CanInlineResult result = injector.canInlineReferenceToFunction ( fs, callNode, t.getFn (  ) .getFunctionNode (  ) , fs.getNamesToAlias (  ) , mode, fs.getReferencesThis (  )  ) ;^438^439^440^^^435^450^CanInlineResult result = injector.canInlineReferenceToFunction ( t, callNode, fs.getFn (  ) .getFunctionNode (  ) , fs.getNamesToAlias (  ) , mode, fs.getReferencesThis (  )  ) ;^[CLASS] FindCandidatesReferences  [METHOD] maybeAddReferenceUsingMode [RETURN_TYPE] boolean   NodeTraversal t FunctionState fs Node callNode JSModule module InliningMode mode [VARIABLES] CanInlineResult  result  boolean  decompose  NodeTraversal  t  InliningMode  mode  FunctionState  fs  Node  callNode  JSModule  module  
[buglab_swap_variables]^CanInlineResult result = mode.canInlineReferenceToFunction ( t, callNode, fs.getFn (  ) .getFunctionNode (  ) , fs.getNamesToAlias (  ) , injector, fs.getReferencesThis (  )  ) ;^438^439^440^^^435^450^CanInlineResult result = injector.canInlineReferenceToFunction ( t, callNode, fs.getFn (  ) .getFunctionNode (  ) , fs.getNamesToAlias (  ) , mode, fs.getReferencesThis (  )  ) ;^[CLASS] FindCandidatesReferences  [METHOD] maybeAddReferenceUsingMode [RETURN_TYPE] boolean   NodeTraversal t FunctionState fs Node callNode JSModule module InliningMode mode [VARIABLES] CanInlineResult  result  boolean  decompose  NodeTraversal  t  InliningMode  mode  FunctionState  fs  Node  callNode  JSModule  module  
[buglab_swap_variables]^fs.addReference ( new Reference ( mode, module, callNode, decompose )  ) ;^445^^^^^435^450^fs.addReference ( new Reference ( callNode, module, mode, decompose )  ) ;^[CLASS] FindCandidatesReferences  [METHOD] maybeAddReferenceUsingMode [RETURN_TYPE] boolean   NodeTraversal t FunctionState fs Node callNode JSModule module InliningMode mode [VARIABLES] CanInlineResult  result  boolean  decompose  NodeTraversal  t  InliningMode  mode  FunctionState  fs  Node  callNode  JSModule  module  
[buglab_swap_variables]^fs.addReference ( new Reference (  module, mode, decompose )  ) ;^445^^^^^435^450^fs.addReference ( new Reference ( callNode, module, mode, decompose )  ) ;^[CLASS] FindCandidatesReferences  [METHOD] maybeAddReferenceUsingMode [RETURN_TYPE] boolean   NodeTraversal t FunctionState fs Node callNode JSModule module InliningMode mode [VARIABLES] CanInlineResult  result  boolean  decompose  NodeTraversal  t  InliningMode  mode  FunctionState  fs  Node  callNode  JSModule  module  
[buglab_swap_variables]^fs.addReference ( new Reference ( callNode, decompose, mode, module )  ) ;^445^^^^^435^450^fs.addReference ( new Reference ( callNode, module, mode, decompose )  ) ;^[CLASS] FindCandidatesReferences  [METHOD] maybeAddReferenceUsingMode [RETURN_TYPE] boolean   NodeTraversal t FunctionState fs Node callNode JSModule module InliningMode mode [VARIABLES] CanInlineResult  result  boolean  decompose  NodeTraversal  t  InliningMode  mode  FunctionState  fs  Node  callNode  JSModule  module  
[buglab_swap_variables]^fs.addReference ( new Reference ( callNode,  mode, decompose )  ) ;^445^^^^^435^450^fs.addReference ( new Reference ( callNode, module, mode, decompose )  ) ;^[CLASS] FindCandidatesReferences  [METHOD] maybeAddReferenceUsingMode [RETURN_TYPE] boolean   NodeTraversal t FunctionState fs Node callNode JSModule module InliningMode mode [VARIABLES] CanInlineResult  result  boolean  decompose  NodeTraversal  t  InliningMode  mode  FunctionState  fs  Node  callNode  JSModule  module  
[buglab_swap_variables]^fs.addReference ( new Reference ( callNode, mode, module, decompose )  ) ;^445^^^^^435^450^fs.addReference ( new Reference ( callNode, module, mode, decompose )  ) ;^[CLASS] FindCandidatesReferences  [METHOD] maybeAddReferenceUsingMode [RETURN_TYPE] boolean   NodeTraversal t FunctionState fs Node callNode JSModule module InliningMode mode [VARIABLES] CanInlineResult  result  boolean  decompose  NodeTraversal  t  InliningMode  mode  FunctionState  fs  Node  callNode  JSModule  module  
[buglab_swap_variables]^fs.addReference ( new Reference ( callNode, module,  decompose )  ) ;^445^^^^^435^450^fs.addReference ( new Reference ( callNode, module, mode, decompose )  ) ;^[CLASS] FindCandidatesReferences  [METHOD] maybeAddReferenceUsingMode [RETURN_TYPE] boolean   NodeTraversal t FunctionState fs Node callNode JSModule module InliningMode mode [VARIABLES] CanInlineResult  result  boolean  decompose  NodeTraversal  t  InliningMode  mode  FunctionState  fs  Node  callNode  JSModule  module  
[buglab_swap_variables]^fs.addReference ( new Reference ( decompose, module, mode, callNode )  ) ;^445^^^^^435^450^fs.addReference ( new Reference ( callNode, module, mode, decompose )  ) ;^[CLASS] FindCandidatesReferences  [METHOD] maybeAddReferenceUsingMode [RETURN_TYPE] boolean   NodeTraversal t FunctionState fs Node callNode JSModule module InliningMode mode [VARIABLES] CanInlineResult  result  boolean  decompose  NodeTraversal  t  InliningMode  mode  FunctionState  fs  Node  callNode  JSModule  module  
[buglab_swap_variables]^fs.addReference ( new Reference ( callNode, module, mode )  ) ;^445^^^^^435^450^fs.addReference ( new Reference ( callNode, module, mode, decompose )  ) ;^[CLASS] FindCandidatesReferences  [METHOD] maybeAddReferenceUsingMode [RETURN_TYPE] boolean   NodeTraversal t FunctionState fs Node callNode JSModule module InliningMode mode [VARIABLES] CanInlineResult  result  boolean  decompose  NodeTraversal  t  InliningMode  mode  FunctionState  fs  Node  callNode  JSModule  module  
[buglab_swap_variables]^fs.addReference ( new Reference ( module, callNode, mode, decompose )  ) ;^445^^^^^435^450^fs.addReference ( new Reference ( callNode, module, mode, decompose )  ) ;^[CLASS] FindCandidatesReferences  [METHOD] maybeAddReferenceUsingMode [RETURN_TYPE] boolean   NodeTraversal t FunctionState fs Node callNode JSModule module InliningMode mode [VARIABLES] CanInlineResult  result  boolean  decompose  NodeTraversal  t  InliningMode  mode  FunctionState  fs  Node  callNode  JSModule  module  
[buglab_swap_variables]^fs.addReference ( new Reference ( callNode, module, decompose, mode )  ) ;^445^^^^^435^450^fs.addReference ( new Reference ( callNode, module, mode, decompose )  ) ;^[CLASS] FindCandidatesReferences  [METHOD] maybeAddReferenceUsingMode [RETURN_TYPE] boolean   NodeTraversal t FunctionState fs Node callNode JSModule module InliningMode mode [VARIABLES] CanInlineResult  result  boolean  decompose  NodeTraversal  t  InliningMode  mode  FunctionState  fs  Node  callNode  JSModule  module  
[buglab_swap_variables]^if  ( n.getType (  )  == Token.CALL && parent.getFirstChild (  )  == parent )  {^464^^^^^449^479^if  ( parent.getType (  )  == Token.CALL && parent.getFirstChild (  )  == n )  {^[CLASS] FindCandidatesReferences  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  gramps  n  parent  FunctionState  fs  String  name  
[buglab_swap_variables]^if  ( NodeUtil.isGet ( n ) && parent == parent.getFirstChild (  ) && n.getNext (  ) .getType (  )  == Token.STRING && n.getNext (  ) .getString (  ) .equals ( "call" )  )  {^477^478^479^480^^462^492^if  ( NodeUtil.isGet ( parent ) && n == parent.getFirstChild (  ) && n.getNext (  ) .getType (  )  == Token.STRING && n.getNext (  ) .getString (  ) .equals ( "call" )  )  {^[CLASS] FindCandidatesReferences  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  gramps  n  parent  FunctionState  fs  String  name  
[buglab_swap_variables]^if  ( parent.getType (  )  == Token.CALL && gramps.getFirstChild (  )  == gramps )  {^482^483^^^^477^487^if  ( gramps.getType (  )  == Token.CALL && gramps.getFirstChild (  )  == parent )  {^[CLASS] FindCandidatesReferences  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  gramps  n  parent  FunctionState  fs  String  name  
[buglab_swap_variables]^FunctionState fs = name.get ( fns ) ;^491^^^^^476^506^FunctionState fs = fns.get ( name ) ;^[CLASS] FindCandidatesReferences  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  gramps  n  parent  FunctionState  fs  String  name  
[buglab_swap_variables]^if  ( n.getType (  )  == Token.ASSIGN && parent.getFirstChild (  )  == parent )  {^497^^^^^482^512^if  ( parent.getType (  )  == Token.ASSIGN && parent.getFirstChild (  )  == n )  {^[CLASS] FindCandidatesReferences  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  gramps  n  parent  FunctionState  fs  String  name  
[buglab_swap_variables]^Reference ref = callNode.getReference ( fs ) ;^525^^^^^521^537^Reference ref = fs.getReference ( callNode ) ;^[CLASS] Inline  [METHOD] visitCallSite [RETURN_TYPE] void   NodeTraversal t Node callNode Node parent FunctionState fs [VARIABLES] boolean  FunctionInjector  injector  NodeTraversal  t  Reference  ref  Node  callNode  parent  FunctionState  fs  
[buglab_swap_variables]^Node newCode = injector.inline ( mode, callNode, fnName, fnNode, t ) ;^548^^^^^542^551^Node newCode = injector.inline ( t, callNode, fnName, fnNode, mode ) ;^[CLASS] Inline  [METHOD] inlineFunction [RETURN_TYPE] void   NodeTraversal t Node callNode FunctionState fs InliningMode mode [VARIABLES] Function  fn  boolean  NodeTraversal  t  InliningMode  mode  Node  callNode  fnNode  newCode  FunctionState  fs  String  fnName  FunctionInjector  injector  
[buglab_swap_variables]^Node newCode = injector.inline (  callNode, fnName, fnNode, mode ) ;^548^^^^^542^551^Node newCode = injector.inline ( t, callNode, fnName, fnNode, mode ) ;^[CLASS] Inline  [METHOD] inlineFunction [RETURN_TYPE] void   NodeTraversal t Node callNode FunctionState fs InliningMode mode [VARIABLES] Function  fn  boolean  NodeTraversal  t  InliningMode  mode  Node  callNode  fnNode  newCode  FunctionState  fs  String  fnName  FunctionInjector  injector  
[buglab_swap_variables]^Node newCode = injector.inline ( t, fnNode, fnName, callNode, mode ) ;^548^^^^^542^551^Node newCode = injector.inline ( t, callNode, fnName, fnNode, mode ) ;^[CLASS] Inline  [METHOD] inlineFunction [RETURN_TYPE] void   NodeTraversal t Node callNode FunctionState fs InliningMode mode [VARIABLES] Function  fn  boolean  NodeTraversal  t  InliningMode  mode  Node  callNode  fnNode  newCode  FunctionState  fs  String  fnName  FunctionInjector  injector  
[buglab_swap_variables]^Node newCode = injector.inline ( t,  fnName, fnNode, mode ) ;^548^^^^^542^551^Node newCode = injector.inline ( t, callNode, fnName, fnNode, mode ) ;^[CLASS] Inline  [METHOD] inlineFunction [RETURN_TYPE] void   NodeTraversal t Node callNode FunctionState fs InliningMode mode [VARIABLES] Function  fn  boolean  NodeTraversal  t  InliningMode  mode  Node  callNode  fnNode  newCode  FunctionState  fs  String  fnName  FunctionInjector  injector  
[buglab_swap_variables]^Node newCode = injector.inline ( t, callNode, mode, fnNode, fnName ) ;^548^^^^^542^551^Node newCode = injector.inline ( t, callNode, fnName, fnNode, mode ) ;^[CLASS] Inline  [METHOD] inlineFunction [RETURN_TYPE] void   NodeTraversal t Node callNode FunctionState fs InliningMode mode [VARIABLES] Function  fn  boolean  NodeTraversal  t  InliningMode  mode  Node  callNode  fnNode  newCode  FunctionState  fs  String  fnName  FunctionInjector  injector  
[buglab_swap_variables]^Node newCode = injector.inline ( t, callNode,  fnNode, mode ) ;^548^^^^^542^551^Node newCode = injector.inline ( t, callNode, fnName, fnNode, mode ) ;^[CLASS] Inline  [METHOD] inlineFunction [RETURN_TYPE] void   NodeTraversal t Node callNode FunctionState fs InliningMode mode [VARIABLES] Function  fn  boolean  NodeTraversal  t  InliningMode  mode  Node  callNode  fnNode  newCode  FunctionState  fs  String  fnName  FunctionInjector  injector  
[buglab_swap_variables]^Node newCode = injector.inline ( t, callNode, fnName,  mode ) ;^548^^^^^542^551^Node newCode = injector.inline ( t, callNode, fnName, fnNode, mode ) ;^[CLASS] Inline  [METHOD] inlineFunction [RETURN_TYPE] void   NodeTraversal t Node callNode FunctionState fs InliningMode mode [VARIABLES] Function  fn  boolean  NodeTraversal  t  InliningMode  mode  Node  callNode  fnNode  newCode  FunctionState  fs  String  fnName  FunctionInjector  injector  
[buglab_swap_variables]^Node newCode = injector.inline ( t, callNode, fnName, mode, fnNode ) ;^548^^^^^542^551^Node newCode = injector.inline ( t, callNode, fnName, fnNode, mode ) ;^[CLASS] Inline  [METHOD] inlineFunction [RETURN_TYPE] void   NodeTraversal t Node callNode FunctionState fs InliningMode mode [VARIABLES] Function  fn  boolean  NodeTraversal  t  InliningMode  mode  Node  callNode  fnNode  newCode  FunctionState  fs  String  fnName  FunctionInjector  injector  
[buglab_swap_variables]^Node newCode = injector.inline ( t, callNode, fnName, fnNode ) ;^548^^^^^542^551^Node newCode = injector.inline ( t, callNode, fnName, fnNode, mode ) ;^[CLASS] Inline  [METHOD] inlineFunction [RETURN_TYPE] void   NodeTraversal t Node callNode FunctionState fs InliningMode mode [VARIABLES] Function  fn  boolean  NodeTraversal  t  InliningMode  mode  Node  callNode  fnNode  newCode  FunctionState  fs  String  fnName  FunctionInjector  injector  
[buglab_swap_variables]^Node newCode = mode.inline ( t, callNode, fnName, fnNode, injector ) ;^548^^^^^542^551^Node newCode = injector.inline ( t, callNode, fnName, fnNode, mode ) ;^[CLASS] Inline  [METHOD] inlineFunction [RETURN_TYPE] void   NodeTraversal t Node callNode FunctionState fs InliningMode mode [VARIABLES] Function  fn  boolean  NodeTraversal  t  InliningMode  mode  Node  callNode  fnNode  newCode  FunctionState  fs  String  fnName  FunctionInjector  injector  
[buglab_swap_variables]^Node newCode = injector.inline ( fnNode, callNode, fnName, t, mode ) ;^548^^^^^542^551^Node newCode = injector.inline ( t, callNode, fnName, fnNode, mode ) ;^[CLASS] Inline  [METHOD] inlineFunction [RETURN_TYPE] void   NodeTraversal t Node callNode FunctionState fs InliningMode mode [VARIABLES] Function  fn  boolean  NodeTraversal  t  InliningMode  mode  Node  callNode  fnNode  newCode  FunctionState  fs  String  fnName  FunctionInjector  injector  
[buglab_swap_variables]^Node newCode = injector.inline ( t, fnName, callNode, fnNode, mode ) ;^548^^^^^542^551^Node newCode = injector.inline ( t, callNode, fnName, fnNode, mode ) ;^[CLASS] Inline  [METHOD] inlineFunction [RETURN_TYPE] void   NodeTraversal t Node callNode FunctionState fs InliningMode mode [VARIABLES] Function  fn  boolean  NodeTraversal  t  InliningMode  mode  Node  callNode  fnNode  newCode  FunctionState  fs  String  fnName  FunctionInjector  injector  
[buglab_swap_variables]^Node newCode = callNode.inline ( t, injector, fnName, fnNode, mode ) ;^548^^^^^542^551^Node newCode = injector.inline ( t, callNode, fnName, fnNode, mode ) ;^[CLASS] Inline  [METHOD] inlineFunction [RETURN_TYPE] void   NodeTraversal t Node callNode FunctionState fs InliningMode mode [VARIABLES] Function  fn  boolean  NodeTraversal  t  InliningMode  mode  Node  callNode  fnNode  newCode  FunctionState  fs  String  fnName  FunctionInjector  injector  
[buglab_swap_variables]^return  ( fn != null )  ? safeFnNode : safeFnNode.getFunctionNode (  ) ;^809^^^^^808^810^return  ( safeFnNode != null )  ? safeFnNode : fn.getFunctionNode (  ) ;^[CLASS] FunctionState  [METHOD] getSafeFnNode [RETURN_TYPE] Node   [VARIABLES] Function  fn  boolean  inline  inlineDirectly  referencesThis  remove  Set  namesToAlias  Node  safeFnNode  JSModule  module  Map  references  
[buglab_swap_variables]^super ( module, callNode, mode ) ;^976^^^^^974^978^super ( callNode, module, mode ) ;^[CLASS] Reference  [METHOD] <init> [RETURN_TYPE] InliningMode,boolean)   Node callNode JSModule module InliningMode mode boolean decompose [VARIABLES] JSModule  module  boolean  decompose  inlined  requiresDecomposition  InliningMode  mode  Node  callNode  
[buglab_swap_variables]^super (  module, mode ) ;^976^^^^^974^978^super ( callNode, module, mode ) ;^[CLASS] Reference  [METHOD] <init> [RETURN_TYPE] InliningMode,boolean)   Node callNode JSModule module InliningMode mode boolean decompose [VARIABLES] JSModule  module  boolean  decompose  inlined  requiresDecomposition  InliningMode  mode  Node  callNode  
[buglab_swap_variables]^super ( callNode, mode, module ) ;^976^^^^^974^978^super ( callNode, module, mode ) ;^[CLASS] Reference  [METHOD] <init> [RETURN_TYPE] InliningMode,boolean)   Node callNode JSModule module InliningMode mode boolean decompose [VARIABLES] JSModule  module  boolean  decompose  inlined  requiresDecomposition  InliningMode  mode  Node  callNode  
[buglab_swap_variables]^super ( callNode,  mode ) ;^976^^^^^974^978^super ( callNode, module, mode ) ;^[CLASS] Reference  [METHOD] <init> [RETURN_TYPE] InliningMode,boolean)   Node callNode JSModule module InliningMode mode boolean decompose [VARIABLES] JSModule  module  boolean  decompose  inlined  requiresDecomposition  InliningMode  mode  Node  callNode  
[buglab_swap_variables]^super ( mode, module, callNode ) ;^976^^^^^974^978^super ( callNode, module, mode ) ;^[CLASS] Reference  [METHOD] <init> [RETURN_TYPE] InliningMode,boolean)   Node callNode JSModule module InliningMode mode boolean decompose [VARIABLES] JSModule  module  boolean  decompose  inlined  requiresDecomposition  InliningMode  mode  Node  callNode  
[buglab_swap_variables]^super ( callNode, module ) ;^976^^^^^974^978^super ( callNode, module, mode ) ;^[CLASS] Reference  [METHOD] <init> [RETURN_TYPE] InliningMode,boolean)   Node callNode JSModule module InliningMode mode boolean decompose [VARIABLES] JSModule  module  boolean  decompose  inlined  requiresDecomposition  InliningMode  mode  Node  callNode  
