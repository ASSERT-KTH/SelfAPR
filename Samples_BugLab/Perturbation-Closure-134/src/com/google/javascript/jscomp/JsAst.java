[BugLab_Wrong_Operator]^if  ( root != null )  {^50^^^^^49^54^if  ( root == null )  {^[CLASS] JsAst  [METHOD] getAstRoot [RETURN_TYPE] Node   AbstractCompiler compiler [VARIABLES] AbstractCompiler  compiler  boolean  Node  root  SourceFile  sourceFile  String  fileName  Logger  logger_  long  serialVersionUID  
[BugLab_Variable_Misuse]^Preconditions.checkState ( sourceFileName.equals ( file.getName (  )  )  ) ;^72^^^^^71^74^Preconditions.checkState ( fileName.equals ( file.getName (  )  )  ) ;^[CLASS] JsAst  [METHOD] setSourceFile [RETURN_TYPE] void   SourceFile file [VARIABLES] SourceFile  file  sourceFile  String  fileName  boolean  Logger  logger_  long  serialVersionUID  Node  root  
[BugLab_Argument_Swapping]^Preconditions.checkState ( fileNameName.equals ( file.getName (  )  )  ) ;^72^^^^^71^74^Preconditions.checkState ( fileName.equals ( file.getName (  )  )  ) ;^[CLASS] JsAst  [METHOD] setSourceFile [RETURN_TYPE] void   SourceFile file [VARIABLES] SourceFile  file  sourceFile  String  fileName  boolean  Logger  logger_  long  serialVersionUID  Node  root  
[BugLab_Argument_Swapping]^Preconditions.checkState ( file.equals ( fileName.getName (  )  )  ) ;^72^^^^^71^74^Preconditions.checkState ( fileName.equals ( file.getName (  )  )  ) ;^[CLASS] JsAst  [METHOD] setSourceFile [RETURN_TYPE] void   SourceFile file [VARIABLES] SourceFile  file  sourceFile  String  fileName  boolean  Logger  logger_  long  serialVersionUID  Node  root  
[BugLab_Variable_Misuse]^sourceFile = sourceFile;^73^^^^^71^74^sourceFile = file;^[CLASS] JsAst  [METHOD] setSourceFile [RETURN_TYPE] void   SourceFile file [VARIABLES] SourceFile  file  sourceFile  String  fileName  boolean  Logger  logger_  long  serialVersionUID  Node  root  
[BugLab_Variable_Misuse]^parse ( compiler, file.getName (  ) , sourceFile.getCode (  )  ) ;^78^^^^^76^83^parse ( compiler, sourceFile.getName (  ) , sourceFile.getCode (  )  ) ;^[CLASS] JsAst  [METHOD] createAst [RETURN_TYPE] void   AbstractCompiler compiler [VARIABLES] AbstractCompiler  compiler  boolean  Node  root  SourceFile  file  sourceFile  String  fileName  IOException  e  Logger  logger_  long  serialVersionUID  
[BugLab_Argument_Swapping]^parse ( sourceFile, compiler.getName (  ) , sourceFile.getCode (  )  ) ;^78^^^^^76^83^parse ( compiler, sourceFile.getName (  ) , sourceFile.getCode (  )  ) ;^[CLASS] JsAst  [METHOD] createAst [RETURN_TYPE] void   AbstractCompiler compiler [VARIABLES] AbstractCompiler  compiler  boolean  Node  root  SourceFile  file  sourceFile  String  fileName  IOException  e  Logger  logger_  long  serialVersionUID  
[BugLab_Variable_Misuse]^compiler.report ( JSError.make ( AbstractCompiler.READ_ERROR, file.getName (  )  )  ) ;^80^81^^^^76^83^compiler.report ( JSError.make ( AbstractCompiler.READ_ERROR, sourceFile.getName (  )  )  ) ;^[CLASS] JsAst  [METHOD] createAst [RETURN_TYPE] void   AbstractCompiler compiler [VARIABLES] AbstractCompiler  compiler  boolean  Node  root  SourceFile  file  sourceFile  String  fileName  IOException  e  Logger  logger_  long  serialVersionUID  
[BugLab_Variable_Misuse]^JSError.make ( AbstractCompiler.READ_ERROR, file.getName (  )  )  ) ;^81^^^^^76^83^JSError.make ( AbstractCompiler.READ_ERROR, sourceFile.getName (  )  )  ) ;^[CLASS] JsAst  [METHOD] createAst [RETURN_TYPE] void   AbstractCompiler compiler [VARIABLES] AbstractCompiler  compiler  boolean  Node  root  SourceFile  file  sourceFile  String  fileName  IOException  e  Logger  logger_  long  serialVersionUID  
[BugLab_Variable_Misuse]^root = ParserRunner.parse ( sourceName, fileName, compiler.isIdeMode (  ) , compiler.getTypeRegistry (  ) , compiler.getDefaultErrorReporter (  ) , logger_ ) ;^89^90^91^92^^85^108^root = ParserRunner.parse ( sourceName, sourceStr, compiler.isIdeMode (  ) , compiler.getTypeRegistry (  ) , compiler.getDefaultErrorReporter (  ) , logger_ ) ;^[CLASS] JsAst  [METHOD] parse [RETURN_TYPE] void   AbstractCompiler compiler String sourceName String sourceStr [VARIABLES] AbstractCompiler  compiler  boolean  Node  root  SourceFile  file  sourceFile  String  fileName  sourceName  sourceStr  IOException  e  Logger  logger_  long  serialVersionUID  
[BugLab_Argument_Swapping]^root = ParserRunner.parse ( sourceStr, sourceName, compiler.isIdeMode (  ) , compiler.getTypeRegistry (  ) , compiler.getDefaultErrorReporter (  ) , logger_ ) ;^89^90^91^92^^85^108^root = ParserRunner.parse ( sourceName, sourceStr, compiler.isIdeMode (  ) , compiler.getTypeRegistry (  ) , compiler.getDefaultErrorReporter (  ) , logger_ ) ;^[CLASS] JsAst  [METHOD] parse [RETURN_TYPE] void   AbstractCompiler compiler String sourceName String sourceStr [VARIABLES] AbstractCompiler  compiler  boolean  Node  root  SourceFile  file  sourceFile  String  fileName  sourceName  sourceStr  IOException  e  Logger  logger_  long  serialVersionUID  
[BugLab_Argument_Swapping]^root = ParserRunner.parse ( sourceName, logger_, compiler.isIdeMode (  ) , compiler.getTypeRegistry (  ) , compiler.getDefaultErrorReporter (  ) , sourceStr ) ;^89^90^91^92^^85^108^root = ParserRunner.parse ( sourceName, sourceStr, compiler.isIdeMode (  ) , compiler.getTypeRegistry (  ) , compiler.getDefaultErrorReporter (  ) , logger_ ) ;^[CLASS] JsAst  [METHOD] parse [RETURN_TYPE] void   AbstractCompiler compiler String sourceName String sourceStr [VARIABLES] AbstractCompiler  compiler  boolean  Node  root  SourceFile  file  sourceFile  String  fileName  sourceName  sourceStr  IOException  e  Logger  logger_  long  serialVersionUID  
[BugLab_Argument_Swapping]^root = ParserRunner.parse ( compiler, sourceStr, sourceName.isIdeMode (  ) , compiler.getTypeRegistry (  ) , compiler.getDefaultErrorReporter (  ) , logger_ ) ;^89^90^91^92^^85^108^root = ParserRunner.parse ( sourceName, sourceStr, compiler.isIdeMode (  ) , compiler.getTypeRegistry (  ) , compiler.getDefaultErrorReporter (  ) , logger_ ) ;^[CLASS] JsAst  [METHOD] parse [RETURN_TYPE] void   AbstractCompiler compiler String sourceName String sourceStr [VARIABLES] AbstractCompiler  compiler  boolean  Node  root  SourceFile  file  sourceFile  String  fileName  sourceName  sourceStr  IOException  e  Logger  logger_  long  serialVersionUID  
[BugLab_Argument_Swapping]^root = ParserRunner.parse ( sourceName, sourceStr, logger_.isIdeMode (  ) , compiler.getTypeRegistry (  ) , compiler.getDefaultErrorReporter (  ) , compiler ) ;^89^90^91^92^^85^108^root = ParserRunner.parse ( sourceName, sourceStr, compiler.isIdeMode (  ) , compiler.getTypeRegistry (  ) , compiler.getDefaultErrorReporter (  ) , logger_ ) ;^[CLASS] JsAst  [METHOD] parse [RETURN_TYPE] void   AbstractCompiler compiler String sourceName String sourceStr [VARIABLES] AbstractCompiler  compiler  boolean  Node  root  SourceFile  file  sourceFile  String  fileName  sourceName  sourceStr  IOException  e  Logger  logger_  long  serialVersionUID  
[BugLab_Variable_Misuse]^logger_.fine ( "Parsing: " + sourceStr ) ;^88^^^^^85^108^logger_.fine ( "Parsing: " + sourceName ) ;^[CLASS] JsAst  [METHOD] parse [RETURN_TYPE] void   AbstractCompiler compiler String sourceName String sourceStr [VARIABLES] AbstractCompiler  compiler  boolean  Node  root  SourceFile  file  sourceFile  String  fileName  sourceName  sourceStr  IOException  e  Logger  logger_  long  serialVersionUID  
[BugLab_Wrong_Operator]^logger_.fine ( "Parsing: "  <=  sourceName ) ;^88^^^^^85^108^logger_.fine ( "Parsing: " + sourceName ) ;^[CLASS] JsAst  [METHOD] parse [RETURN_TYPE] void   AbstractCompiler compiler String sourceName String sourceStr [VARIABLES] AbstractCompiler  compiler  boolean  Node  root  SourceFile  file  sourceFile  String  fileName  sourceName  sourceStr  IOException  e  Logger  logger_  long  serialVersionUID  
[BugLab_Variable_Misuse]^root = ParserRunner.parse ( fileName, sourceStr, compiler.isIdeMode (  ) , compiler.getTypeRegistry (  ) , compiler.getDefaultErrorReporter (  ) , logger_ ) ;^89^90^91^92^^85^108^root = ParserRunner.parse ( sourceName, sourceStr, compiler.isIdeMode (  ) , compiler.getTypeRegistry (  ) , compiler.getDefaultErrorReporter (  ) , logger_ ) ;^[CLASS] JsAst  [METHOD] parse [RETURN_TYPE] void   AbstractCompiler compiler String sourceName String sourceStr [VARIABLES] AbstractCompiler  compiler  boolean  Node  root  SourceFile  file  sourceFile  String  fileName  sourceName  sourceStr  IOException  e  Logger  logger_  long  serialVersionUID  
[BugLab_Argument_Swapping]^root = ParserRunner.parse ( sourceName, compiler, sourceStr.isIdeMode (  ) , compiler.getTypeRegistry (  ) , compiler.getDefaultErrorReporter (  ) , logger_ ) ;^89^90^91^92^^85^108^root = ParserRunner.parse ( sourceName, sourceStr, compiler.isIdeMode (  ) , compiler.getTypeRegistry (  ) , compiler.getDefaultErrorReporter (  ) , logger_ ) ;^[CLASS] JsAst  [METHOD] parse [RETURN_TYPE] void   AbstractCompiler compiler String sourceName String sourceStr [VARIABLES] AbstractCompiler  compiler  boolean  Node  root  SourceFile  file  sourceFile  String  fileName  sourceName  sourceStr  IOException  e  Logger  logger_  long  serialVersionUID  
[BugLab_Argument_Swapping]^root = ParserRunner.parse ( logger_, sourceStr, compiler.isIdeMode (  ) , compiler.getTypeRegistry (  ) , compiler.getDefaultErrorReporter (  ) , sourceName ) ;^89^90^91^92^^85^108^root = ParserRunner.parse ( sourceName, sourceStr, compiler.isIdeMode (  ) , compiler.getTypeRegistry (  ) , compiler.getDefaultErrorReporter (  ) , logger_ ) ;^[CLASS] JsAst  [METHOD] parse [RETURN_TYPE] void   AbstractCompiler compiler String sourceName String sourceStr [VARIABLES] AbstractCompiler  compiler  boolean  Node  root  SourceFile  file  sourceFile  String  fileName  sourceName  sourceStr  IOException  e  Logger  logger_  long  serialVersionUID  
[BugLab_Wrong_Operator]^logger_.fine ( "Parsing: "  !=  sourceName ) ;^88^^^^^85^108^logger_.fine ( "Parsing: " + sourceName ) ;^[CLASS] JsAst  [METHOD] parse [RETURN_TYPE] void   AbstractCompiler compiler String sourceName String sourceStr [VARIABLES] AbstractCompiler  compiler  boolean  Node  root  SourceFile  file  sourceFile  String  fileName  sourceName  sourceStr  IOException  e  Logger  logger_  long  serialVersionUID  
[BugLab_Variable_Misuse]^root = ParserRunner.parse ( sourceName, sourceName, compiler.isIdeMode (  ) , compiler.getTypeRegistry (  ) , compiler.getDefaultErrorReporter (  ) , logger_ ) ;^89^90^91^92^^85^108^root = ParserRunner.parse ( sourceName, sourceStr, compiler.isIdeMode (  ) , compiler.getTypeRegistry (  ) , compiler.getDefaultErrorReporter (  ) , logger_ ) ;^[CLASS] JsAst  [METHOD] parse [RETURN_TYPE] void   AbstractCompiler compiler String sourceName String sourceStr [VARIABLES] AbstractCompiler  compiler  boolean  Node  root  SourceFile  file  sourceFile  String  fileName  sourceName  sourceStr  IOException  e  Logger  logger_  long  serialVersionUID  
[BugLab_Variable_Misuse]^compiler.report ( JSError.make ( AbstractCompiler.READ_ERROR, sourceStr )  ) ;^94^^^^^85^108^compiler.report ( JSError.make ( AbstractCompiler.READ_ERROR, sourceName )  ) ;^[CLASS] JsAst  [METHOD] parse [RETURN_TYPE] void   AbstractCompiler compiler String sourceName String sourceStr [VARIABLES] AbstractCompiler  compiler  boolean  Node  root  SourceFile  file  sourceFile  String  fileName  sourceName  sourceStr  IOException  e  Logger  logger_  long  serialVersionUID  
[BugLab_Argument_Swapping]^if  ( compiler == null || root.hasHaltingErrors (  )  )  {^97^^^^^85^108^if  ( root == null || compiler.hasHaltingErrors (  )  )  {^[CLASS] JsAst  [METHOD] parse [RETURN_TYPE] void   AbstractCompiler compiler String sourceName String sourceStr [VARIABLES] AbstractCompiler  compiler  boolean  Node  root  SourceFile  file  sourceFile  String  fileName  sourceName  sourceStr  IOException  e  Logger  logger_  long  serialVersionUID  
[BugLab_Wrong_Operator]^if  ( root == null && compiler.hasHaltingErrors (  )  )  {^97^^^^^85^108^if  ( root == null || compiler.hasHaltingErrors (  )  )  {^[CLASS] JsAst  [METHOD] parse [RETURN_TYPE] void   AbstractCompiler compiler String sourceName String sourceStr [VARIABLES] AbstractCompiler  compiler  boolean  Node  root  SourceFile  file  sourceFile  String  fileName  sourceName  sourceStr  IOException  e  Logger  logger_  long  serialVersionUID  
[BugLab_Wrong_Operator]^if  ( root != null || compiler.hasHaltingErrors (  )  )  {^97^^^^^85^108^if  ( root == null || compiler.hasHaltingErrors (  )  )  {^[CLASS] JsAst  [METHOD] parse [RETURN_TYPE] void   AbstractCompiler compiler String sourceName String sourceStr [VARIABLES] AbstractCompiler  compiler  boolean  Node  root  SourceFile  file  sourceFile  String  fileName  sourceName  sourceStr  IOException  e  Logger  logger_  long  serialVersionUID  
[BugLab_Variable_Misuse]^root.putProp ( Node.SOURCENAME_PROP, sourceStr ) ;^107^^^^^85^108^root.putProp ( Node.SOURCENAME_PROP, sourceName ) ;^[CLASS] JsAst  [METHOD] parse [RETURN_TYPE] void   AbstractCompiler compiler String sourceName String sourceStr [VARIABLES] AbstractCompiler  compiler  boolean  Node  root  SourceFile  file  sourceFile  String  fileName  sourceName  sourceStr  IOException  e  Logger  logger_  long  serialVersionUID  
