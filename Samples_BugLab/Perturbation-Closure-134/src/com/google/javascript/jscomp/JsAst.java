[buglab_swap_variables]^Preconditions.checkState ( fileNameName.equals ( file.getName (  )  )  ) ;^72^^^^^71^74^Preconditions.checkState ( fileName.equals ( file.getName (  )  )  ) ;^[CLASS] JsAst  [METHOD] setSourceFile [RETURN_TYPE] void   SourceFile file [VARIABLES] SourceFile  file  sourceFile  String  fileName  boolean  Logger  logger_  long  serialVersionUID  Node  root  
[buglab_swap_variables]^Preconditions.checkState ( file.equals ( fileName.getName (  )  )  ) ;^72^^^^^71^74^Preconditions.checkState ( fileName.equals ( file.getName (  )  )  ) ;^[CLASS] JsAst  [METHOD] setSourceFile [RETURN_TYPE] void   SourceFile file [VARIABLES] SourceFile  file  sourceFile  String  fileName  boolean  Logger  logger_  long  serialVersionUID  Node  root  
[buglab_swap_variables]^parse ( sourceFile, compiler.getName (  ) , sourceFile.getCode (  )  ) ;^78^^^^^76^83^parse ( compiler, sourceFile.getName (  ) , sourceFile.getCode (  )  ) ;^[CLASS] JsAst  [METHOD] createAst [RETURN_TYPE] void   AbstractCompiler compiler [VARIABLES] AbstractCompiler  compiler  boolean  Node  root  SourceFile  file  sourceFile  String  fileName  IOException  e  Logger  logger_  long  serialVersionUID  
[buglab_swap_variables]^parse (  sourceFile.getName (  ) , sourceFile.getCode (  )  ) ;^78^^^^^76^83^parse ( compiler, sourceFile.getName (  ) , sourceFile.getCode (  )  ) ;^[CLASS] JsAst  [METHOD] createAst [RETURN_TYPE] void   AbstractCompiler compiler [VARIABLES] AbstractCompiler  compiler  boolean  Node  root  SourceFile  file  sourceFile  String  fileName  IOException  e  Logger  logger_  long  serialVersionUID  
[buglab_swap_variables]^parse ( compiler.getName (  ) , sourceFile.getCode (  )  ) ;^78^^^^^76^83^parse ( compiler, sourceFile.getName (  ) , sourceFile.getCode (  )  ) ;^[CLASS] JsAst  [METHOD] createAst [RETURN_TYPE] void   AbstractCompiler compiler [VARIABLES] AbstractCompiler  compiler  boolean  Node  root  SourceFile  file  sourceFile  String  fileName  IOException  e  Logger  logger_  long  serialVersionUID  
[buglab_swap_variables]^compiler.report ( JSError.make ( AbstractCompiler.READ_ERROR.getName (  )  )  ) ;^80^81^^^^76^83^compiler.report ( JSError.make ( AbstractCompiler.READ_ERROR, sourceFile.getName (  )  )  ) ;^[CLASS] JsAst  [METHOD] createAst [RETURN_TYPE] void   AbstractCompiler compiler [VARIABLES] AbstractCompiler  compiler  boolean  Node  root  SourceFile  file  sourceFile  String  fileName  IOException  e  Logger  logger_  long  serialVersionUID  
[buglab_swap_variables]^root = ParserRunner.parse ( sourceStr, sourceName, compiler.isIdeMode (  ) , compiler.getTypeRegistry (  ) , compiler.getDefaultErrorReporter (  ) , logger_ ) ;^89^90^91^92^^85^108^root = ParserRunner.parse ( sourceName, sourceStr, compiler.isIdeMode (  ) , compiler.getTypeRegistry (  ) , compiler.getDefaultErrorReporter (  ) , logger_ ) ;^[CLASS] JsAst  [METHOD] parse [RETURN_TYPE] void   AbstractCompiler compiler String sourceName String sourceStr [VARIABLES] AbstractCompiler  compiler  boolean  Node  root  SourceFile  file  sourceFile  String  fileName  sourceName  sourceStr  IOException  e  Logger  logger_  long  serialVersionUID  
[buglab_swap_variables]^root = ParserRunner.parse (  sourceStr, compiler.isIdeMode (  ) , compiler.getTypeRegistry (  ) , compiler.getDefaultErrorReporter (  ) , logger_ ) ;^89^90^91^92^^85^108^root = ParserRunner.parse ( sourceName, sourceStr, compiler.isIdeMode (  ) , compiler.getTypeRegistry (  ) , compiler.getDefaultErrorReporter (  ) , logger_ ) ;^[CLASS] JsAst  [METHOD] parse [RETURN_TYPE] void   AbstractCompiler compiler String sourceName String sourceStr [VARIABLES] AbstractCompiler  compiler  boolean  Node  root  SourceFile  file  sourceFile  String  fileName  sourceName  sourceStr  IOException  e  Logger  logger_  long  serialVersionUID  
[buglab_swap_variables]^root = ParserRunner.parse ( sourceName, logger_, compiler.isIdeMode (  ) , compiler.getTypeRegistry (  ) , compiler.getDefaultErrorReporter (  ) , sourceStr ) ;^89^90^91^92^^85^108^root = ParserRunner.parse ( sourceName, sourceStr, compiler.isIdeMode (  ) , compiler.getTypeRegistry (  ) , compiler.getDefaultErrorReporter (  ) , logger_ ) ;^[CLASS] JsAst  [METHOD] parse [RETURN_TYPE] void   AbstractCompiler compiler String sourceName String sourceStr [VARIABLES] AbstractCompiler  compiler  boolean  Node  root  SourceFile  file  sourceFile  String  fileName  sourceName  sourceStr  IOException  e  Logger  logger_  long  serialVersionUID  
[buglab_swap_variables]^root = ParserRunner.parse ( sourceName,  compiler.isIdeMode (  ) , compiler.getTypeRegistry (  ) , compiler.getDefaultErrorReporter (  ) , logger_ ) ;^89^90^91^92^^85^108^root = ParserRunner.parse ( sourceName, sourceStr, compiler.isIdeMode (  ) , compiler.getTypeRegistry (  ) , compiler.getDefaultErrorReporter (  ) , logger_ ) ;^[CLASS] JsAst  [METHOD] parse [RETURN_TYPE] void   AbstractCompiler compiler String sourceName String sourceStr [VARIABLES] AbstractCompiler  compiler  boolean  Node  root  SourceFile  file  sourceFile  String  fileName  sourceName  sourceStr  IOException  e  Logger  logger_  long  serialVersionUID  
[buglab_swap_variables]^root = ParserRunner.parse ( sourceName, compiler, sourceStr.isIdeMode (  ) , compiler.getTypeRegistry (  ) , compiler.getDefaultErrorReporter (  ) , logger_ ) ;^89^90^91^92^^85^108^root = ParserRunner.parse ( sourceName, sourceStr, compiler.isIdeMode (  ) , compiler.getTypeRegistry (  ) , compiler.getDefaultErrorReporter (  ) , logger_ ) ;^[CLASS] JsAst  [METHOD] parse [RETURN_TYPE] void   AbstractCompiler compiler String sourceName String sourceStr [VARIABLES] AbstractCompiler  compiler  boolean  Node  root  SourceFile  file  sourceFile  String  fileName  sourceName  sourceStr  IOException  e  Logger  logger_  long  serialVersionUID  
[buglab_swap_variables]^root = ParserRunner.parse ( sourceName, sourceStr.isIdeMode (  ) , compiler.getTypeRegistry (  ) , compiler.getDefaultErrorReporter (  ) , logger_ ) ;^89^90^91^92^^85^108^root = ParserRunner.parse ( sourceName, sourceStr, compiler.isIdeMode (  ) , compiler.getTypeRegistry (  ) , compiler.getDefaultErrorReporter (  ) , logger_ ) ;^[CLASS] JsAst  [METHOD] parse [RETURN_TYPE] void   AbstractCompiler compiler String sourceName String sourceStr [VARIABLES] AbstractCompiler  compiler  boolean  Node  root  SourceFile  file  sourceFile  String  fileName  sourceName  sourceStr  IOException  e  Logger  logger_  long  serialVersionUID  
[buglab_swap_variables]^root = ParserRunner.parse ( sourceName, sourceStr, compiler.isIdeMode (  ) , compiler.getTypeRegistry (  ) , compiler.getDefaultErrorReporter (  )  ) ;^89^90^91^92^^85^108^root = ParserRunner.parse ( sourceName, sourceStr, compiler.isIdeMode (  ) , compiler.getTypeRegistry (  ) , compiler.getDefaultErrorReporter (  ) , logger_ ) ;^[CLASS] JsAst  [METHOD] parse [RETURN_TYPE] void   AbstractCompiler compiler String sourceName String sourceStr [VARIABLES] AbstractCompiler  compiler  boolean  Node  root  SourceFile  file  sourceFile  String  fileName  sourceName  sourceStr  IOException  e  Logger  logger_  long  serialVersionUID  
[buglab_swap_variables]^root = ParserRunner.parse ( logger_, sourceStr, compiler.isIdeMode (  ) , compiler.getTypeRegistry (  ) , compiler.getDefaultErrorReporter (  ) , sourceName ) ;^89^90^91^92^^85^108^root = ParserRunner.parse ( sourceName, sourceStr, compiler.isIdeMode (  ) , compiler.getTypeRegistry (  ) , compiler.getDefaultErrorReporter (  ) , logger_ ) ;^[CLASS] JsAst  [METHOD] parse [RETURN_TYPE] void   AbstractCompiler compiler String sourceName String sourceStr [VARIABLES] AbstractCompiler  compiler  boolean  Node  root  SourceFile  file  sourceFile  String  fileName  sourceName  sourceStr  IOException  e  Logger  logger_  long  serialVersionUID  
[buglab_swap_variables]^root = ParserRunner.parse ( compiler, sourceStr, sourceName.isIdeMode (  ) , compiler.getTypeRegistry (  ) , compiler.getDefaultErrorReporter (  ) , logger_ ) ;^89^90^91^92^^85^108^root = ParserRunner.parse ( sourceName, sourceStr, compiler.isIdeMode (  ) , compiler.getTypeRegistry (  ) , compiler.getDefaultErrorReporter (  ) , logger_ ) ;^[CLASS] JsAst  [METHOD] parse [RETURN_TYPE] void   AbstractCompiler compiler String sourceName String sourceStr [VARIABLES] AbstractCompiler  compiler  boolean  Node  root  SourceFile  file  sourceFile  String  fileName  sourceName  sourceStr  IOException  e  Logger  logger_  long  serialVersionUID  
[buglab_swap_variables]^root = ParserRunner.parse ( sourceName, sourceStr, logger_.isIdeMode (  ) , compiler.getTypeRegistry (  ) , compiler.getDefaultErrorReporter (  ) , compiler ) ;^89^90^91^92^^85^108^root = ParserRunner.parse ( sourceName, sourceStr, compiler.isIdeMode (  ) , compiler.getTypeRegistry (  ) , compiler.getDefaultErrorReporter (  ) , logger_ ) ;^[CLASS] JsAst  [METHOD] parse [RETURN_TYPE] void   AbstractCompiler compiler String sourceName String sourceStr [VARIABLES] AbstractCompiler  compiler  boolean  Node  root  SourceFile  file  sourceFile  String  fileName  sourceName  sourceStr  IOException  e  Logger  logger_  long  serialVersionUID  
[buglab_swap_variables]^compiler.report ( JSError.make ( AbstractCompiler.READ_ERROR )  ) ;^94^^^^^85^108^compiler.report ( JSError.make ( AbstractCompiler.READ_ERROR, sourceName )  ) ;^[CLASS] JsAst  [METHOD] parse [RETURN_TYPE] void   AbstractCompiler compiler String sourceName String sourceStr [VARIABLES] AbstractCompiler  compiler  boolean  Node  root  SourceFile  file  sourceFile  String  fileName  sourceName  sourceStr  IOException  e  Logger  logger_  long  serialVersionUID  
[buglab_swap_variables]^if  ( compiler == null || root.hasHaltingErrors (  )  )  {^97^^^^^85^108^if  ( root == null || compiler.hasHaltingErrors (  )  )  {^[CLASS] JsAst  [METHOD] parse [RETURN_TYPE] void   AbstractCompiler compiler String sourceName String sourceStr [VARIABLES] AbstractCompiler  compiler  boolean  Node  root  SourceFile  file  sourceFile  String  fileName  sourceName  sourceStr  IOException  e  Logger  logger_  long  serialVersionUID  
[buglab_swap_variables]^root.putProp ( Node.SOURCENAME_PROP ) ;^107^^^^^85^108^root.putProp ( Node.SOURCENAME_PROP, sourceName ) ;^[CLASS] JsAst  [METHOD] parse [RETURN_TYPE] void   AbstractCompiler compiler String sourceName String sourceStr [VARIABLES] AbstractCompiler  compiler  boolean  Node  root  SourceFile  file  sourceFile  String  fileName  sourceName  sourceStr  IOException  e  Logger  logger_  long  serialVersionUID  
