[BugLab_Wrong_Literal]^private int bytesUsed = -1;^46^^^^^41^51^private int bytesUsed = 0;^[CLASS] NameAnonymousFunctions AnonymousFunctionNamer   [VARIABLES] 
[BugLab_Variable_Misuse]^NodeTraversal.traverse ( compiler, externs, namingCallback ) ;^56^^^^^53^59^NodeTraversal.traverse ( compiler, root, namingCallback ) ;^[CLASS] NameAnonymousFunctions AnonymousFunctionNamer  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  AnonymousFunctionNamingCallback  namingCallback  Node  externs  root  char  DELIMITER  NodeNameExtractor  nameExtractor  Logger  logger  int  bytesUsed  namedCount  
[BugLab_Argument_Swapping]^NodeTraversal.traverse ( compiler, namingCallback, root ) ;^56^^^^^53^59^NodeTraversal.traverse ( compiler, root, namingCallback ) ;^[CLASS] NameAnonymousFunctions AnonymousFunctionNamer  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  AnonymousFunctionNamingCallback  namingCallback  Node  externs  root  char  DELIMITER  NodeNameExtractor  nameExtractor  Logger  logger  int  bytesUsed  namedCount  
[BugLab_Argument_Swapping]^NodeTraversal.traverse ( namingCallback, root, compiler ) ;^56^^^^^53^59^NodeTraversal.traverse ( compiler, root, namingCallback ) ;^[CLASS] NameAnonymousFunctions AnonymousFunctionNamer  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  AnonymousFunctionNamingCallback  namingCallback  Node  externs  root  char  DELIMITER  NodeNameExtractor  nameExtractor  Logger  logger  int  bytesUsed  namedCount  
[BugLab_Variable_Misuse]^logger.info ( "Named " + bytesUsed + " anon functions using " + bytesUsed + " bytes" ) ;^57^58^^^^53^59^logger.info ( "Named " + namedCount + " anon functions using " + bytesUsed + " bytes" ) ;^[CLASS] NameAnonymousFunctions AnonymousFunctionNamer  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  AnonymousFunctionNamingCallback  namingCallback  Node  externs  root  char  DELIMITER  NodeNameExtractor  nameExtractor  Logger  logger  int  bytesUsed  namedCount  
[BugLab_Wrong_Operator]^logger.info ( "Named "  ==  namedCount + " anon functions using " + bytesUsed + " bytes" ) ;^57^58^^^^53^59^logger.info ( "Named " + namedCount + " anon functions using " + bytesUsed + " bytes" ) ;^[CLASS] NameAnonymousFunctions AnonymousFunctionNamer  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  AnonymousFunctionNamingCallback  namingCallback  Node  externs  root  char  DELIMITER  NodeNameExtractor  nameExtractor  Logger  logger  int  bytesUsed  namedCount  
[BugLab_Argument_Swapping]^return name + DELIMITER + DELIMITER;^80^^^^^79^81^return DELIMITER + name + DELIMITER;^[CLASS] NameAnonymousFunctions AnonymousFunctionNamer  [METHOD] getLikelyNonConflictingName [RETURN_TYPE] String   String name [VARIABLES] AbstractCompiler  compiler  boolean  char  DELIMITER  NodeNameExtractor  nameExtractor  String  name  Logger  logger  int  bytesUsed  namedCount  
[BugLab_Wrong_Operator]^return DELIMITER   instanceof   name + DELIMITER;^80^^^^^79^81^return DELIMITER + name + DELIMITER;^[CLASS] NameAnonymousFunctions AnonymousFunctionNamer  [METHOD] getLikelyNonConflictingName [RETURN_TYPE] String   String name [VARIABLES] AbstractCompiler  compiler  boolean  char  DELIMITER  NodeNameExtractor  nameExtractor  String  name  Logger  logger  int  bytesUsed  namedCount  
[BugLab_Argument_Swapping]^return node.getName ( nameExtractor ) ;^85^^^^^84^86^return nameExtractor.getName ( node ) ;^[CLASS] NameAnonymousFunctions AnonymousFunctionNamer  [METHOD] getName [RETURN_TYPE] String   Node node [VARIABLES] AbstractCompiler  compiler  boolean  Node  node  char  DELIMITER  NodeNameExtractor  nameExtractor  Logger  logger  int  bytesUsed  namedCount  
[BugLab_Variable_Misuse]^Node fnNameNode = fnNameNode.getFirstChild (  ) ;^90^^^^^89^96^Node fnNameNode = fnNode.getFirstChild (  ) ;^[CLASS] NameAnonymousFunctions AnonymousFunctionNamer  [METHOD] setFunctionName [RETURN_TYPE] void   String name Node fnNode [VARIABLES] AbstractCompiler  compiler  boolean  Node  fnNameNode  fnNode  char  DELIMITER  NodeNameExtractor  nameExtractor  String  name  uniqueName  Logger  logger  int  bytesUsed  namedCount  
[BugLab_Variable_Misuse]^String uniqueName = getLikelyNonConflictingName ( uniqueName ) ;^91^^^^^89^96^String uniqueName = getLikelyNonConflictingName ( name ) ;^[CLASS] NameAnonymousFunctions AnonymousFunctionNamer  [METHOD] setFunctionName [RETURN_TYPE] void   String name Node fnNode [VARIABLES] AbstractCompiler  compiler  boolean  Node  fnNameNode  fnNode  char  DELIMITER  NodeNameExtractor  nameExtractor  String  name  uniqueName  Logger  logger  int  bytesUsed  namedCount  
[BugLab_Variable_Misuse]^fnNameNode.setString ( name ) ;^92^^^^^89^96^fnNameNode.setString ( uniqueName ) ;^[CLASS] NameAnonymousFunctions AnonymousFunctionNamer  [METHOD] setFunctionName [RETURN_TYPE] void   String name Node fnNode [VARIABLES] AbstractCompiler  compiler  boolean  Node  fnNameNode  fnNode  char  DELIMITER  NodeNameExtractor  nameExtractor  String  name  uniqueName  Logger  logger  int  bytesUsed  namedCount  
[BugLab_Variable_Misuse]^bytesUsed += name.length (  ) ;^95^^^^^89^96^bytesUsed += uniqueName.length (  ) ;^[CLASS] NameAnonymousFunctions AnonymousFunctionNamer  [METHOD] setFunctionName [RETURN_TYPE] void   String name Node fnNode [VARIABLES] AbstractCompiler  compiler  boolean  Node  fnNameNode  fnNode  char  DELIMITER  NodeNameExtractor  nameExtractor  String  name  uniqueName  Logger  logger  int  bytesUsed  namedCount  
[BugLab_Argument_Swapping]^return rhs + DELIMITER + lhs;^99^^^^^98^100^return lhs + DELIMITER + rhs;^[CLASS] NameAnonymousFunctions AnonymousFunctionNamer  [METHOD] getCombinedName [RETURN_TYPE] String   String lhs String rhs [VARIABLES] AbstractCompiler  compiler  boolean  char  DELIMITER  NodeNameExtractor  nameExtractor  String  lhs  rhs  Logger  logger  int  bytesUsed  namedCount  
[BugLab_Argument_Swapping]^return DELIMITER + lhs + rhs;^99^^^^^98^100^return lhs + DELIMITER + rhs;^[CLASS] NameAnonymousFunctions AnonymousFunctionNamer  [METHOD] getCombinedName [RETURN_TYPE] String   String lhs String rhs [VARIABLES] AbstractCompiler  compiler  boolean  char  DELIMITER  NodeNameExtractor  nameExtractor  String  lhs  rhs  Logger  logger  int  bytesUsed  namedCount  
[BugLab_Wrong_Operator]^return lhs  <  DELIMITER + rhs;^99^^^^^98^100^return lhs + DELIMITER + rhs;^[CLASS] NameAnonymousFunctions AnonymousFunctionNamer  [METHOD] getCombinedName [RETURN_TYPE] String   String lhs String rhs [VARIABLES] AbstractCompiler  compiler  boolean  char  DELIMITER  NodeNameExtractor  nameExtractor  String  lhs  rhs  Logger  logger  int  bytesUsed  namedCount  
[BugLab_Argument_Swapping]^return name + DELIMITER + DELIMITER;^80^^^^^79^81^return DELIMITER + name + DELIMITER;^[CLASS] AnonymousFunctionNamer  [METHOD] getLikelyNonConflictingName [RETURN_TYPE] String   String name [VARIABLES] NodeNameExtractor  nameExtractor  String  name  boolean  
[BugLab_Wrong_Operator]^return DELIMITER  >  name + DELIMITER;^80^^^^^79^81^return DELIMITER + name + DELIMITER;^[CLASS] AnonymousFunctionNamer  [METHOD] getLikelyNonConflictingName [RETURN_TYPE] String   String name [VARIABLES] NodeNameExtractor  nameExtractor  String  name  boolean  
[BugLab_Argument_Swapping]^return node.getName ( nameExtractor ) ;^85^^^^^84^86^return nameExtractor.getName ( node ) ;^[CLASS] AnonymousFunctionNamer  [METHOD] getName [RETURN_TYPE] String   Node node [VARIABLES] NodeNameExtractor  nameExtractor  Node  node  boolean  
[BugLab_Variable_Misuse]^String uniqueName = getLikelyNonConflictingName ( uniqueName ) ;^91^^^^^89^96^String uniqueName = getLikelyNonConflictingName ( name ) ;^[CLASS] AnonymousFunctionNamer  [METHOD] setFunctionName [RETURN_TYPE] void   String name Node fnNode [VARIABLES] NodeNameExtractor  nameExtractor  String  name  uniqueName  boolean  Node  fnNameNode  fnNode  
[BugLab_Variable_Misuse]^fnNameNode.setString ( name ) ;^92^^^^^89^96^fnNameNode.setString ( uniqueName ) ;^[CLASS] AnonymousFunctionNamer  [METHOD] setFunctionName [RETURN_TYPE] void   String name Node fnNode [VARIABLES] NodeNameExtractor  nameExtractor  String  name  uniqueName  boolean  Node  fnNameNode  fnNode  
[BugLab_Variable_Misuse]^bytesUsed += name.length (  ) ;^95^^^^^89^96^bytesUsed += uniqueName.length (  ) ;^[CLASS] AnonymousFunctionNamer  [METHOD] setFunctionName [RETURN_TYPE] void   String name Node fnNode [VARIABLES] NodeNameExtractor  nameExtractor  String  name  uniqueName  boolean  Node  fnNameNode  fnNode  
[BugLab_Argument_Swapping]^return DELIMITER + lhs + rhs;^99^^^^^98^100^return lhs + DELIMITER + rhs;^[CLASS] AnonymousFunctionNamer  [METHOD] getCombinedName [RETURN_TYPE] String   String lhs String rhs [VARIABLES] NodeNameExtractor  nameExtractor  String  lhs  rhs  boolean  
[BugLab_Argument_Swapping]^return rhs + DELIMITER + lhs;^99^^^^^98^100^return lhs + DELIMITER + rhs;^[CLASS] AnonymousFunctionNamer  [METHOD] getCombinedName [RETURN_TYPE] String   String lhs String rhs [VARIABLES] NodeNameExtractor  nameExtractor  String  lhs  rhs  boolean  
[BugLab_Argument_Swapping]^return lhs + rhs + DELIMITER;^99^^^^^98^100^return lhs + DELIMITER + rhs;^[CLASS] AnonymousFunctionNamer  [METHOD] getCombinedName [RETURN_TYPE] String   String lhs String rhs [VARIABLES] NodeNameExtractor  nameExtractor  String  lhs  rhs  boolean  
[BugLab_Wrong_Operator]^return lhs  !=  DELIMITER + rhs;^99^^^^^98^100^return lhs + DELIMITER + rhs;^[CLASS] AnonymousFunctionNamer  [METHOD] getCombinedName [RETURN_TYPE] String   String lhs String rhs [VARIABLES] NodeNameExtractor  nameExtractor  String  lhs  rhs  boolean  
