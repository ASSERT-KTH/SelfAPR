[buglab_swap_variables]^NodeTraversal.traverse ( externs, compiler, new NoShadowAnnotationGatheringCallback (  )  ) ;^59^60^^^^58^63^NodeTraversal.traverse ( compiler, externs, new NoShadowAnnotationGatheringCallback (  )  ) ;^[CLASS] VariableShadowDeclarationCheck NoShadowAnnotationGatheringCallback ShadowDeclarationCheckingCallback  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Set  externalNoShadowVariableNames  boolean  DiagnosticType  SHADOW_VAR_ERROR  CheckLevel  checkLevel  Node  externs  root  
[buglab_swap_variables]^NodeTraversal.traverse ( compiler,  new NoShadowAnnotationGatheringCallback (  )  ) ;^59^60^^^^58^63^NodeTraversal.traverse ( compiler, externs, new NoShadowAnnotationGatheringCallback (  )  ) ;^[CLASS] VariableShadowDeclarationCheck NoShadowAnnotationGatheringCallback ShadowDeclarationCheckingCallback  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Set  externalNoShadowVariableNames  boolean  DiagnosticType  SHADOW_VAR_ERROR  CheckLevel  checkLevel  Node  externs  root  
[buglab_swap_variables]^NodeTraversal.traverse (  externs, new NoShadowAnnotationGatheringCallback (  )  ) ;^59^60^^^^58^63^NodeTraversal.traverse ( compiler, externs, new NoShadowAnnotationGatheringCallback (  )  ) ;^[CLASS] VariableShadowDeclarationCheck NoShadowAnnotationGatheringCallback ShadowDeclarationCheckingCallback  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Set  externalNoShadowVariableNames  boolean  DiagnosticType  SHADOW_VAR_ERROR  CheckLevel  checkLevel  Node  externs  root  
[buglab_swap_variables]^NodeTraversal.traverse ( root, compiler, new ShadowDeclarationCheckingCallback (  )  ) ;^61^62^^^^58^63^NodeTraversal.traverse ( compiler, root, new ShadowDeclarationCheckingCallback (  )  ) ;^[CLASS] VariableShadowDeclarationCheck NoShadowAnnotationGatheringCallback ShadowDeclarationCheckingCallback  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Set  externalNoShadowVariableNames  boolean  DiagnosticType  SHADOW_VAR_ERROR  CheckLevel  checkLevel  Node  externs  root  
[buglab_swap_variables]^NodeTraversal.traverse ( compiler,  new ShadowDeclarationCheckingCallback (  )  ) ;^61^62^^^^58^63^NodeTraversal.traverse ( compiler, root, new ShadowDeclarationCheckingCallback (  )  ) ;^[CLASS] VariableShadowDeclarationCheck NoShadowAnnotationGatheringCallback ShadowDeclarationCheckingCallback  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Set  externalNoShadowVariableNames  boolean  DiagnosticType  SHADOW_VAR_ERROR  CheckLevel  checkLevel  Node  externs  root  
[buglab_swap_variables]^NodeTraversal.traverse (  root, new ShadowDeclarationCheckingCallback (  )  ) ;^61^62^^^^58^63^NodeTraversal.traverse ( compiler, root, new ShadowDeclarationCheckingCallback (  )  ) ;^[CLASS] VariableShadowDeclarationCheck NoShadowAnnotationGatheringCallback ShadowDeclarationCheckingCallback  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Set  externalNoShadowVariableNames  boolean  DiagnosticType  SHADOW_VAR_ERROR  CheckLevel  checkLevel  Node  externs  root  
[buglab_swap_variables]^for  ( Iterator<Var> scopes = var.getVars (  ) ; vars.hasNext (  ) ; )  {^73^^^^^71^79^for  ( Iterator<Var> vars = scope.getVars (  ) ; vars.hasNext (  ) ; )  {^[CLASS] VariableShadowDeclarationCheck NoShadowAnnotationGatheringCallback ShadowDeclarationCheckingCallback  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] AbstractCompiler  compiler  Set  externalNoShadowVariableNames  boolean  Scope  scope  NodeTraversal  t  DiagnosticType  SHADOW_VAR_ERROR  CheckLevel  checkLevel  Var  var  Iterator  vars  
[buglab_swap_variables]^Var shadowedVar = var.getVar ( parentScope.getName (  )  ) ;^119^^^^^102^128^Var shadowedVar = parentScope.getVar ( var.getName (  )  ) ;^[CLASS] VariableShadowDeclarationCheck NoShadowAnnotationGatheringCallback ShadowDeclarationCheckingCallback  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] AbstractCompiler  compiler  Set  externalNoShadowVariableNames  boolean  Scope  parentScope  scope  NodeTraversal  t  DiagnosticType  SHADOW_VAR_ERROR  CheckLevel  checkLevel  Var  shadowedVar  var  Iterator  vars  
[buglab_swap_variables]^if  ( var.contains ( externalNoShadowVariableNames.getName (  )  )  )  {^112^^^^^102^128^if  ( externalNoShadowVariableNames.contains ( var.getName (  )  )  )  {^[CLASS] VariableShadowDeclarationCheck NoShadowAnnotationGatheringCallback ShadowDeclarationCheckingCallback  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] AbstractCompiler  compiler  Set  externalNoShadowVariableNames  boolean  Scope  parentScope  scope  NodeTraversal  t  DiagnosticType  SHADOW_VAR_ERROR  CheckLevel  checkLevel  Var  shadowedVar  var  Iterator  vars  
[buglab_swap_variables]^for  ( Iterator<Var> scope = vars.getVars (  ) ; vars.hasNext (  ) ; )  {^73^^^^^71^79^for  ( Iterator<Var> vars = scope.getVars (  ) ; vars.hasNext (  ) ; )  {^[CLASS] NoShadowAnnotationGatheringCallback  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  Scope  scope  NodeTraversal  t  Var  var  Iterator  vars  
[buglab_swap_variables]^for  ( Iterator<Var> var = scope.getVars (  ) ; varss.hasNext (  ) ; )  {^73^^^^^71^79^for  ( Iterator<Var> vars = scope.getVars (  ) ; vars.hasNext (  ) ; )  {^[CLASS] NoShadowAnnotationGatheringCallback  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  Scope  scope  NodeTraversal  t  Var  var  Iterator  vars  
[buglab_swap_variables]^Var shadowedVar = var.getVar ( parentScope.getName (  )  ) ;^119^^^^^102^128^Var shadowedVar = parentScope.getVar ( var.getName (  )  ) ;^[CLASS] ShadowDeclarationCheckingCallback  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  Scope  parentScope  scope  NodeTraversal  t  Var  shadowedVar  var  Iterator  vars  
[buglab_swap_variables]^if  ( var.contains ( externalNoShadowVariableNames.getName (  )  )  )  {^112^^^^^102^128^if  ( externalNoShadowVariableNames.contains ( var.getName (  )  )  )  {^[CLASS] ShadowDeclarationCheckingCallback  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  Scope  parentScope  scope  NodeTraversal  t  Var  shadowedVar  var  Iterator  vars  
