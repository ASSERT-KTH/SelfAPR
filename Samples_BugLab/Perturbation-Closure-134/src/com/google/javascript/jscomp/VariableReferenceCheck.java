[buglab_swap_variables]^callback.process ( root, externs ) ;^75^^^^^72^76^callback.process ( externs, root ) ;^[CLASS] VariableReferenceCheck ReferenceCheckingBehavior  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] ReferenceCollectingCallback  callback  AbstractCompiler  compiler  boolean  CHECK_UNHOISTED_NAMED_FUNCTIONS  Set  blocksWithDeclarations  DiagnosticType  AMBIGUOUS_FUNCTION_DECL  REDECLARED_VARIABLE  UNDECLARED_REFERENCE  CheckLevel  checkLevel  Node  externs  root  
[buglab_swap_variables]^callback.process (  root ) ;^75^^^^^72^76^callback.process ( externs, root ) ;^[CLASS] VariableReferenceCheck ReferenceCheckingBehavior  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] ReferenceCollectingCallback  callback  AbstractCompiler  compiler  boolean  CHECK_UNHOISTED_NAMED_FUNCTIONS  Set  blocksWithDeclarations  DiagnosticType  AMBIGUOUS_FUNCTION_DECL  REDECLARED_VARIABLE  UNDECLARED_REFERENCE  CheckLevel  checkLevel  Node  externs  root  
[buglab_swap_variables]^callback.process ( externs ) ;^75^^^^^72^76^callback.process ( externs, root ) ;^[CLASS] VariableReferenceCheck ReferenceCheckingBehavior  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] ReferenceCollectingCallback  callback  AbstractCompiler  compiler  boolean  CHECK_UNHOISTED_NAMED_FUNCTIONS  Set  blocksWithDeclarations  DiagnosticType  AMBIGUOUS_FUNCTION_DECL  REDECLARED_VARIABLE  UNDECLARED_REFERENCE  CheckLevel  checkLevel  Node  externs  root  
[buglab_swap_variables]^checkVar ( t, referenceMap, v.get ( v ) .references ) ;^91^^^^^85^93^checkVar ( t, v, referenceMap.get ( v ) .references ) ;^[CLASS] VariableReferenceCheck ReferenceCheckingBehavior  [METHOD] afterExitScope [RETURN_TYPE] void   NodeTraversal t ReferenceCollection> referenceMap [VARIABLES] AbstractCompiler  compiler  boolean  CHECK_UNHOISTED_NAMED_FUNCTIONS  Set  blocksWithDeclarations  NodeTraversal  t  DiagnosticType  AMBIGUOUS_FUNCTION_DECL  REDECLARED_VARIABLE  UNDECLARED_REFERENCE  CheckLevel  checkLevel  Var  v  Iterator  it  Map  referenceMap  
[buglab_swap_variables]^checkVar ( t, v.get ( v ) .references ) ;^91^^^^^85^93^checkVar ( t, v, referenceMap.get ( v ) .references ) ;^[CLASS] VariableReferenceCheck ReferenceCheckingBehavior  [METHOD] afterExitScope [RETURN_TYPE] void   NodeTraversal t ReferenceCollection> referenceMap [VARIABLES] AbstractCompiler  compiler  boolean  CHECK_UNHOISTED_NAMED_FUNCTIONS  Set  blocksWithDeclarations  NodeTraversal  t  DiagnosticType  AMBIGUOUS_FUNCTION_DECL  REDECLARED_VARIABLE  UNDECLARED_REFERENCE  CheckLevel  checkLevel  Var  v  Iterator  it  Map  referenceMap  
[buglab_swap_variables]^checkVar ( t,  referenceMap.get ( v ) .references ) ;^91^^^^^85^93^checkVar ( t, v, referenceMap.get ( v ) .references ) ;^[CLASS] VariableReferenceCheck ReferenceCheckingBehavior  [METHOD] afterExitScope [RETURN_TYPE] void   NodeTraversal t ReferenceCollection> referenceMap [VARIABLES] AbstractCompiler  compiler  boolean  CHECK_UNHOISTED_NAMED_FUNCTIONS  Set  blocksWithDeclarations  NodeTraversal  t  DiagnosticType  AMBIGUOUS_FUNCTION_DECL  REDECLARED_VARIABLE  UNDECLARED_REFERENCE  CheckLevel  checkLevel  Var  v  Iterator  it  Map  referenceMap  
[buglab_swap_variables]^if  ( hoistedFn == reference )  {^121^^^^^106^136^if  ( reference == hoistedFn )  {^[CLASS] VariableReferenceCheck ReferenceCheckingBehavior  [METHOD] checkVar [RETURN_TYPE] void   NodeTraversal t Var v Reference> references [VARIABLES] AbstractCompiler  compiler  boolean  CHECK_UNHOISTED_NAMED_FUNCTIONS  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  Set  blocksWithDeclarations  NodeTraversal  t  DiagnosticType  AMBIGUOUS_FUNCTION_DECL  REDECLARED_VARIABLE  UNDECLARED_REFERENCE  CheckLevel  checkLevel  Var  v  Reference  hoistedFn  reference  Node  grandparent  BasicBlock  basicBlock  declaredBlock  List  references  
[buglab_swap_variables]^if  ( basicBlock.provablyExecutesBefore ( declaredBlock )  )  {^132^^^^^117^147^if  ( declaredBlock.provablyExecutesBefore ( basicBlock )  )  {^[CLASS] VariableReferenceCheck ReferenceCheckingBehavior  [METHOD] checkVar [RETURN_TYPE] void   NodeTraversal t Var v Reference> references [VARIABLES] AbstractCompiler  compiler  boolean  CHECK_UNHOISTED_NAMED_FUNCTIONS  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  Set  blocksWithDeclarations  NodeTraversal  t  DiagnosticType  AMBIGUOUS_FUNCTION_DECL  REDECLARED_VARIABLE  UNDECLARED_REFERENCE  CheckLevel  checkLevel  Var  v  Reference  hoistedFn  reference  Node  grandparent  BasicBlock  basicBlock  declaredBlock  List  references  
[buglab_swap_variables]^checkVar ( t, referenceMap, v.get ( v ) .references ) ;^91^^^^^85^93^checkVar ( t, v, referenceMap.get ( v ) .references ) ;^[CLASS] ReferenceCheckingBehavior  [METHOD] afterExitScope [RETURN_TYPE] void   NodeTraversal t ReferenceCollection> referenceMap [VARIABLES] boolean  NodeTraversal  t  Var  v  Iterator  it  Map  referenceMap  
[buglab_swap_variables]^checkVar ( t, v.get ( v ) .references ) ;^91^^^^^85^93^checkVar ( t, v, referenceMap.get ( v ) .references ) ;^[CLASS] ReferenceCheckingBehavior  [METHOD] afterExitScope [RETURN_TYPE] void   NodeTraversal t ReferenceCollection> referenceMap [VARIABLES] boolean  NodeTraversal  t  Var  v  Iterator  it  Map  referenceMap  
[buglab_swap_variables]^checkVar ( t,  referenceMap.get ( v ) .references ) ;^91^^^^^85^93^checkVar ( t, v, referenceMap.get ( v ) .references ) ;^[CLASS] ReferenceCheckingBehavior  [METHOD] afterExitScope [RETURN_TYPE] void   NodeTraversal t ReferenceCollection> referenceMap [VARIABLES] boolean  NodeTraversal  t  Var  v  Iterator  it  Map  referenceMap  
[buglab_swap_variables]^if  ( hoistedFn == reference )  {^121^^^^^106^136^if  ( reference == hoistedFn )  {^[CLASS] ReferenceCheckingBehavior  [METHOD] checkVar [RETURN_TYPE] void   NodeTraversal t Var v Reference> references [VARIABLES] boolean  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  NodeTraversal  t  Var  v  Reference  hoistedFn  reference  Node  grandparent  BasicBlock  basicBlock  declaredBlock  List  references  
[buglab_swap_variables]^if  ( basicBlock.provablyExecutesBefore ( declaredBlock )  )  {^132^^^^^117^147^if  ( declaredBlock.provablyExecutesBefore ( basicBlock )  )  {^[CLASS] ReferenceCheckingBehavior  [METHOD] checkVar [RETURN_TYPE] void   NodeTraversal t Var v Reference> references [VARIABLES] boolean  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  NodeTraversal  t  Var  v  Reference  hoistedFn  reference  Node  grandparent  BasicBlock  basicBlock  declaredBlock  List  references  
