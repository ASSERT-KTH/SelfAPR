[BugLab_Wrong_Literal]^static final boolean CHECK_UNHOISTED_NAMED_FUNCTIONS = true;^52^^^^^47^57^static final boolean CHECK_UNHOISTED_NAMED_FUNCTIONS = false;^[CLASS] VariableReferenceCheck ReferenceCheckingBehavior   [VARIABLES] 
[BugLab_Variable_Misuse]^callback.process ( root, root ) ;^75^^^^^72^76^callback.process ( externs, root ) ;^[CLASS] VariableReferenceCheck ReferenceCheckingBehavior  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] ReferenceCollectingCallback  callback  AbstractCompiler  compiler  boolean  CHECK_UNHOISTED_NAMED_FUNCTIONS  Set  blocksWithDeclarations  DiagnosticType  AMBIGUOUS_FUNCTION_DECL  REDECLARED_VARIABLE  UNDECLARED_REFERENCE  CheckLevel  checkLevel  Node  externs  root  
[BugLab_Argument_Swapping]^callback.process ( root, externs ) ;^75^^^^^72^76^callback.process ( externs, root ) ;^[CLASS] VariableReferenceCheck ReferenceCheckingBehavior  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] ReferenceCollectingCallback  callback  AbstractCompiler  compiler  boolean  CHECK_UNHOISTED_NAMED_FUNCTIONS  Set  blocksWithDeclarations  DiagnosticType  AMBIGUOUS_FUNCTION_DECL  REDECLARED_VARIABLE  UNDECLARED_REFERENCE  CheckLevel  checkLevel  Node  externs  root  
[BugLab_Argument_Swapping]^checkVar ( t, referenceMap, v.get ( v ) .references ) ;^91^^^^^85^93^checkVar ( t, v, referenceMap.get ( v ) .references ) ;^[CLASS] VariableReferenceCheck ReferenceCheckingBehavior  [METHOD] afterExitScope [RETURN_TYPE] void   NodeTraversal t ReferenceCollection> referenceMap [VARIABLES] AbstractCompiler  compiler  boolean  CHECK_UNHOISTED_NAMED_FUNCTIONS  Set  blocksWithDeclarations  NodeTraversal  t  DiagnosticType  AMBIGUOUS_FUNCTION_DECL  REDECLARED_VARIABLE  UNDECLARED_REFERENCE  CheckLevel  checkLevel  Var  v  Iterator  it  Map  referenceMap  
[BugLab_Wrong_Literal]^boolean isDeclaredInScope = true;^103^^^^^88^118^boolean isDeclaredInScope = false;^[CLASS] VariableReferenceCheck ReferenceCheckingBehavior  [METHOD] checkVar [RETURN_TYPE] void   NodeTraversal t Var v Reference> references [VARIABLES] AbstractCompiler  compiler  boolean  CHECK_UNHOISTED_NAMED_FUNCTIONS  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  Set  blocksWithDeclarations  NodeTraversal  t  DiagnosticType  AMBIGUOUS_FUNCTION_DECL  REDECLARED_VARIABLE  UNDECLARED_REFERENCE  CheckLevel  checkLevel  Var  v  Reference  hoistedFn  reference  Node  grandparent  BasicBlock  basicBlock  declaredBlock  List  references  
[BugLab_Wrong_Literal]^boolean isUnhoistedNamedFunction = true;^104^^^^^89^119^boolean isUnhoistedNamedFunction = false;^[CLASS] VariableReferenceCheck ReferenceCheckingBehavior  [METHOD] checkVar [RETURN_TYPE] void   NodeTraversal t Var v Reference> references [VARIABLES] AbstractCompiler  compiler  boolean  CHECK_UNHOISTED_NAMED_FUNCTIONS  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  Set  blocksWithDeclarations  NodeTraversal  t  DiagnosticType  AMBIGUOUS_FUNCTION_DECL  REDECLARED_VARIABLE  UNDECLARED_REFERENCE  CheckLevel  checkLevel  Var  v  Reference  hoistedFn  reference  Node  grandparent  BasicBlock  basicBlock  declaredBlock  List  references  
[BugLab_Variable_Misuse]^if  ( hoistedFn.isHoistedFunction (  )  )  {^109^^^^^94^124^if  ( reference.isHoistedFunction (  )  )  {^[CLASS] VariableReferenceCheck ReferenceCheckingBehavior  [METHOD] checkVar [RETURN_TYPE] void   NodeTraversal t Var v Reference> references [VARIABLES] AbstractCompiler  compiler  boolean  CHECK_UNHOISTED_NAMED_FUNCTIONS  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  Set  blocksWithDeclarations  NodeTraversal  t  DiagnosticType  AMBIGUOUS_FUNCTION_DECL  REDECLARED_VARIABLE  UNDECLARED_REFERENCE  CheckLevel  checkLevel  Var  v  Reference  hoistedFn  reference  Node  grandparent  BasicBlock  basicBlock  declaredBlock  List  references  
[BugLab_Variable_Misuse]^} else if  ( NodeUtil.isFunctionDeclaration ( hoistedFn.getNameNode (  ) .getParent (  )  )  )  {^114^115^^^^99^129^} else if  ( NodeUtil.isFunctionDeclaration ( reference.getNameNode (  ) .getParent (  )  )  )  {^[CLASS] VariableReferenceCheck ReferenceCheckingBehavior  [METHOD] checkVar [RETURN_TYPE] void   NodeTraversal t Var v Reference> references [VARIABLES] AbstractCompiler  compiler  boolean  CHECK_UNHOISTED_NAMED_FUNCTIONS  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  Set  blocksWithDeclarations  NodeTraversal  t  DiagnosticType  AMBIGUOUS_FUNCTION_DECL  REDECLARED_VARIABLE  UNDECLARED_REFERENCE  CheckLevel  checkLevel  Var  v  Reference  hoistedFn  reference  Node  grandparent  BasicBlock  basicBlock  declaredBlock  List  references  
[BugLab_Wrong_Literal]^isUnhoistedNamedFunction = false;^116^^^^^114^117^isUnhoistedNamedFunction = true;^[CLASS] VariableReferenceCheck ReferenceCheckingBehavior  [METHOD] checkVar [RETURN_TYPE] void   NodeTraversal t Var v Reference> references [VARIABLES] AbstractCompiler  compiler  boolean  CHECK_UNHOISTED_NAMED_FUNCTIONS  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  Set  blocksWithDeclarations  NodeTraversal  t  DiagnosticType  AMBIGUOUS_FUNCTION_DECL  REDECLARED_VARIABLE  UNDECLARED_REFERENCE  CheckLevel  checkLevel  Var  v  Reference  hoistedFn  reference  Node  grandparent  BasicBlock  basicBlock  declaredBlock  List  references  
[BugLab_Wrong_Literal]^isUnhoistedNamedFunction = false;^116^^^^^101^131^isUnhoistedNamedFunction = true;^[CLASS] VariableReferenceCheck ReferenceCheckingBehavior  [METHOD] checkVar [RETURN_TYPE] void   NodeTraversal t Var v Reference> references [VARIABLES] AbstractCompiler  compiler  boolean  CHECK_UNHOISTED_NAMED_FUNCTIONS  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  Set  blocksWithDeclarations  NodeTraversal  t  DiagnosticType  AMBIGUOUS_FUNCTION_DECL  REDECLARED_VARIABLE  UNDECLARED_REFERENCE  CheckLevel  checkLevel  Var  v  Reference  hoistedFn  reference  Node  grandparent  BasicBlock  basicBlock  declaredBlock  List  references  
[BugLab_Wrong_Literal]^isDeclaredInScope = false;^111^^^^^96^126^isDeclaredInScope = true;^[CLASS] VariableReferenceCheck ReferenceCheckingBehavior  [METHOD] checkVar [RETURN_TYPE] void   NodeTraversal t Var v Reference> references [VARIABLES] AbstractCompiler  compiler  boolean  CHECK_UNHOISTED_NAMED_FUNCTIONS  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  Set  blocksWithDeclarations  NodeTraversal  t  DiagnosticType  AMBIGUOUS_FUNCTION_DECL  REDECLARED_VARIABLE  UNDECLARED_REFERENCE  CheckLevel  checkLevel  Var  v  Reference  hoistedFn  reference  Node  grandparent  BasicBlock  basicBlock  declaredBlock  List  references  
[BugLab_Variable_Misuse]^hoistedFn = hoistedFn;^112^^^^^97^127^hoistedFn = reference;^[CLASS] VariableReferenceCheck ReferenceCheckingBehavior  [METHOD] checkVar [RETURN_TYPE] void   NodeTraversal t Var v Reference> references [VARIABLES] AbstractCompiler  compiler  boolean  CHECK_UNHOISTED_NAMED_FUNCTIONS  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  Set  blocksWithDeclarations  NodeTraversal  t  DiagnosticType  AMBIGUOUS_FUNCTION_DECL  REDECLARED_VARIABLE  UNDECLARED_REFERENCE  CheckLevel  checkLevel  Var  v  Reference  hoistedFn  reference  Node  grandparent  BasicBlock  basicBlock  declaredBlock  List  references  
[BugLab_Variable_Misuse]^blocksWithDeclarations.add ( hoistedFn.getBasicBlock (  )  ) ;^110^^^^^95^125^blocksWithDeclarations.add ( reference.getBasicBlock (  )  ) ;^[CLASS] VariableReferenceCheck ReferenceCheckingBehavior  [METHOD] checkVar [RETURN_TYPE] void   NodeTraversal t Var v Reference> references [VARIABLES] AbstractCompiler  compiler  boolean  CHECK_UNHOISTED_NAMED_FUNCTIONS  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  Set  blocksWithDeclarations  NodeTraversal  t  DiagnosticType  AMBIGUOUS_FUNCTION_DECL  REDECLARED_VARIABLE  UNDECLARED_REFERENCE  CheckLevel  checkLevel  Var  v  Reference  hoistedFn  reference  Node  grandparent  BasicBlock  basicBlock  declaredBlock  List  references  
[BugLab_Argument_Swapping]^if  ( hoistedFn == reference )  {^121^^^^^106^136^if  ( reference == hoistedFn )  {^[CLASS] VariableReferenceCheck ReferenceCheckingBehavior  [METHOD] checkVar [RETURN_TYPE] void   NodeTraversal t Var v Reference> references [VARIABLES] AbstractCompiler  compiler  boolean  CHECK_UNHOISTED_NAMED_FUNCTIONS  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  Set  blocksWithDeclarations  NodeTraversal  t  DiagnosticType  AMBIGUOUS_FUNCTION_DECL  REDECLARED_VARIABLE  UNDECLARED_REFERENCE  CheckLevel  checkLevel  Var  v  Reference  hoistedFn  reference  Node  grandparent  BasicBlock  basicBlock  declaredBlock  List  references  
[BugLab_Wrong_Operator]^if  ( reference < hoistedFn )  {^121^^^^^106^136^if  ( reference == hoistedFn )  {^[CLASS] VariableReferenceCheck ReferenceCheckingBehavior  [METHOD] checkVar [RETURN_TYPE] void   NodeTraversal t Var v Reference> references [VARIABLES] AbstractCompiler  compiler  boolean  CHECK_UNHOISTED_NAMED_FUNCTIONS  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  Set  blocksWithDeclarations  NodeTraversal  t  DiagnosticType  AMBIGUOUS_FUNCTION_DECL  REDECLARED_VARIABLE  UNDECLARED_REFERENCE  CheckLevel  checkLevel  Var  v  Reference  hoistedFn  reference  Node  grandparent  BasicBlock  basicBlock  declaredBlock  List  references  
[BugLab_Variable_Misuse]^JSError.make ( hoistedFn.getSourceName (  ) , reference.getNameNode (  ) , checkLevel, REDECLARED_VARIABLE, v.name )  ) ;^134^135^136^137^^119^149^JSError.make ( reference.getSourceName (  ) , reference.getNameNode (  ) , checkLevel, REDECLARED_VARIABLE, v.name )  ) ;^[CLASS] VariableReferenceCheck ReferenceCheckingBehavior  [METHOD] checkVar [RETURN_TYPE] void   NodeTraversal t Var v Reference> references [VARIABLES] AbstractCompiler  compiler  boolean  CHECK_UNHOISTED_NAMED_FUNCTIONS  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  Set  blocksWithDeclarations  NodeTraversal  t  DiagnosticType  AMBIGUOUS_FUNCTION_DECL  REDECLARED_VARIABLE  UNDECLARED_REFERENCE  CheckLevel  checkLevel  Var  v  Reference  hoistedFn  reference  Node  grandparent  BasicBlock  basicBlock  declaredBlock  List  references  
[BugLab_Argument_Swapping]^if  ( basicBlock.provablyExecutesBefore ( declaredBlock )  )  {^132^^^^^117^147^if  ( declaredBlock.provablyExecutesBefore ( basicBlock )  )  {^[CLASS] VariableReferenceCheck ReferenceCheckingBehavior  [METHOD] checkVar [RETURN_TYPE] void   NodeTraversal t Var v Reference> references [VARIABLES] AbstractCompiler  compiler  boolean  CHECK_UNHOISTED_NAMED_FUNCTIONS  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  Set  blocksWithDeclarations  NodeTraversal  t  DiagnosticType  AMBIGUOUS_FUNCTION_DECL  REDECLARED_VARIABLE  UNDECLARED_REFERENCE  CheckLevel  checkLevel  Var  v  Reference  hoistedFn  reference  Node  grandparent  BasicBlock  basicBlock  declaredBlock  List  references  
[BugLab_Wrong_Operator]^if  ( CHECK_UNHOISTED_NAMED_FUNCTIONS || isUnhoistedNamedFunction && !isDeclaration && isDeclaredInScope )  {^143^144^^^^128^158^if  ( CHECK_UNHOISTED_NAMED_FUNCTIONS && isUnhoistedNamedFunction && !isDeclaration && isDeclaredInScope )  {^[CLASS] VariableReferenceCheck ReferenceCheckingBehavior  [METHOD] checkVar [RETURN_TYPE] void   NodeTraversal t Var v Reference> references [VARIABLES] AbstractCompiler  compiler  boolean  CHECK_UNHOISTED_NAMED_FUNCTIONS  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  Set  blocksWithDeclarations  NodeTraversal  t  DiagnosticType  AMBIGUOUS_FUNCTION_DECL  REDECLARED_VARIABLE  UNDECLARED_REFERENCE  CheckLevel  checkLevel  Var  v  Reference  hoistedFn  reference  Node  grandparent  BasicBlock  basicBlock  declaredBlock  List  references  
[BugLab_Variable_Misuse]^JSError.make ( hoistedFn.getSourceName (  ) , reference.getNameNode (  ) , checkLevel, AMBIGUOUS_FUNCTION_DECL, v.name )  ) ;^150^151^152^153^^143^157^JSError.make ( reference.getSourceName (  ) , reference.getNameNode (  ) , checkLevel, AMBIGUOUS_FUNCTION_DECL, v.name )  ) ;^[CLASS] VariableReferenceCheck ReferenceCheckingBehavior  [METHOD] checkVar [RETURN_TYPE] void   NodeTraversal t Var v Reference> references [VARIABLES] AbstractCompiler  compiler  boolean  CHECK_UNHOISTED_NAMED_FUNCTIONS  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  Set  blocksWithDeclarations  NodeTraversal  t  DiagnosticType  AMBIGUOUS_FUNCTION_DECL  REDECLARED_VARIABLE  UNDECLARED_REFERENCE  CheckLevel  checkLevel  Var  v  Reference  hoistedFn  reference  Node  grandparent  BasicBlock  basicBlock  declaredBlock  List  references  
[BugLab_Variable_Misuse]^JSError.make ( hoistedFn.getSourceName (  ) , reference.getNameNode (  ) , checkLevel, AMBIGUOUS_FUNCTION_DECL, v.name )  ) ;^150^151^152^153^^135^165^JSError.make ( reference.getSourceName (  ) , reference.getNameNode (  ) , checkLevel, AMBIGUOUS_FUNCTION_DECL, v.name )  ) ;^[CLASS] VariableReferenceCheck ReferenceCheckingBehavior  [METHOD] checkVar [RETURN_TYPE] void   NodeTraversal t Var v Reference> references [VARIABLES] AbstractCompiler  compiler  boolean  CHECK_UNHOISTED_NAMED_FUNCTIONS  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  Set  blocksWithDeclarations  NodeTraversal  t  DiagnosticType  AMBIGUOUS_FUNCTION_DECL  REDECLARED_VARIABLE  UNDECLARED_REFERENCE  CheckLevel  checkLevel  Var  v  Reference  hoistedFn  reference  Node  grandparent  BasicBlock  basicBlock  declaredBlock  List  references  
[BugLab_Wrong_Operator]^if  ( !isDeclaration || !isDeclaredInScope )  {^159^^^^^144^174^if  ( !isDeclaration && !isDeclaredInScope )  {^[CLASS] VariableReferenceCheck ReferenceCheckingBehavior  [METHOD] checkVar [RETURN_TYPE] void   NodeTraversal t Var v Reference> references [VARIABLES] AbstractCompiler  compiler  boolean  CHECK_UNHOISTED_NAMED_FUNCTIONS  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  Set  blocksWithDeclarations  NodeTraversal  t  DiagnosticType  AMBIGUOUS_FUNCTION_DECL  REDECLARED_VARIABLE  UNDECLARED_REFERENCE  CheckLevel  checkLevel  Var  v  Reference  hoistedFn  reference  Node  grandparent  BasicBlock  basicBlock  declaredBlock  List  references  
[BugLab_Wrong_Operator]^if  ( grandparent.getType (  )  == Token.NAME || grandparent.getString (  )  == v.name )  {^162^163^^^^147^177^if  ( grandparent.getType (  )  == Token.NAME && grandparent.getString (  )  == v.name )  {^[CLASS] VariableReferenceCheck ReferenceCheckingBehavior  [METHOD] checkVar [RETURN_TYPE] void   NodeTraversal t Var v Reference> references [VARIABLES] AbstractCompiler  compiler  boolean  CHECK_UNHOISTED_NAMED_FUNCTIONS  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  Set  blocksWithDeclarations  NodeTraversal  t  DiagnosticType  AMBIGUOUS_FUNCTION_DECL  REDECLARED_VARIABLE  UNDECLARED_REFERENCE  CheckLevel  checkLevel  Var  v  Reference  hoistedFn  reference  Node  grandparent  BasicBlock  basicBlock  declaredBlock  List  references  
[BugLab_Wrong_Operator]^if  ( grandparent.getType (  )  <= Token.NAME && grandparent.getString (  )  == v.name )  {^162^163^^^^147^177^if  ( grandparent.getType (  )  == Token.NAME && grandparent.getString (  )  == v.name )  {^[CLASS] VariableReferenceCheck ReferenceCheckingBehavior  [METHOD] checkVar [RETURN_TYPE] void   NodeTraversal t Var v Reference> references [VARIABLES] AbstractCompiler  compiler  boolean  CHECK_UNHOISTED_NAMED_FUNCTIONS  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  Set  blocksWithDeclarations  NodeTraversal  t  DiagnosticType  AMBIGUOUS_FUNCTION_DECL  REDECLARED_VARIABLE  UNDECLARED_REFERENCE  CheckLevel  checkLevel  Var  v  Reference  hoistedFn  reference  Node  grandparent  BasicBlock  basicBlock  declaredBlock  List  references  
[BugLab_Wrong_Operator]^if  ( grandparent.getType (  )  == Token.NAME && grandparent.getString (  )  <= v.name )  {^162^163^^^^147^177^if  ( grandparent.getType (  )  == Token.NAME && grandparent.getString (  )  == v.name )  {^[CLASS] VariableReferenceCheck ReferenceCheckingBehavior  [METHOD] checkVar [RETURN_TYPE] void   NodeTraversal t Var v Reference> references [VARIABLES] AbstractCompiler  compiler  boolean  CHECK_UNHOISTED_NAMED_FUNCTIONS  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  Set  blocksWithDeclarations  NodeTraversal  t  DiagnosticType  AMBIGUOUS_FUNCTION_DECL  REDECLARED_VARIABLE  UNDECLARED_REFERENCE  CheckLevel  checkLevel  Var  v  Reference  hoistedFn  reference  Node  grandparent  BasicBlock  basicBlock  declaredBlock  List  references  
[BugLab_Wrong_Operator]^if  ( reference.getScope (  )  != v.scope )  {^169^^^^^154^184^if  ( reference.getScope (  )  == v.scope )  {^[CLASS] VariableReferenceCheck ReferenceCheckingBehavior  [METHOD] checkVar [RETURN_TYPE] void   NodeTraversal t Var v Reference> references [VARIABLES] AbstractCompiler  compiler  boolean  CHECK_UNHOISTED_NAMED_FUNCTIONS  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  Set  blocksWithDeclarations  NodeTraversal  t  DiagnosticType  AMBIGUOUS_FUNCTION_DECL  REDECLARED_VARIABLE  UNDECLARED_REFERENCE  CheckLevel  checkLevel  Var  v  Reference  hoistedFn  reference  Node  grandparent  BasicBlock  basicBlock  declaredBlock  List  references  
[BugLab_Variable_Misuse]^JSError.make ( hoistedFn.getSourceName (  ) , reference.getNameNode (  ) , checkLevel, UNDECLARED_REFERENCE, v.name )  ) ;^171^172^173^174^^156^186^JSError.make ( reference.getSourceName (  ) , reference.getNameNode (  ) , checkLevel, UNDECLARED_REFERENCE, v.name )  ) ;^[CLASS] VariableReferenceCheck ReferenceCheckingBehavior  [METHOD] checkVar [RETURN_TYPE] void   NodeTraversal t Var v Reference> references [VARIABLES] AbstractCompiler  compiler  boolean  CHECK_UNHOISTED_NAMED_FUNCTIONS  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  Set  blocksWithDeclarations  NodeTraversal  t  DiagnosticType  AMBIGUOUS_FUNCTION_DECL  REDECLARED_VARIABLE  UNDECLARED_REFERENCE  CheckLevel  checkLevel  Var  v  Reference  hoistedFn  reference  Node  grandparent  BasicBlock  basicBlock  declaredBlock  List  references  
[BugLab_Variable_Misuse]^Node grandparent = hoistedFn.getGrandparent (  ) ;^161^^^^^146^176^Node grandparent = reference.getGrandparent (  ) ;^[CLASS] VariableReferenceCheck ReferenceCheckingBehavior  [METHOD] checkVar [RETURN_TYPE] void   NodeTraversal t Var v Reference> references [VARIABLES] AbstractCompiler  compiler  boolean  CHECK_UNHOISTED_NAMED_FUNCTIONS  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  Set  blocksWithDeclarations  NodeTraversal  t  DiagnosticType  AMBIGUOUS_FUNCTION_DECL  REDECLARED_VARIABLE  UNDECLARED_REFERENCE  CheckLevel  checkLevel  Var  v  Reference  hoistedFn  reference  Node  grandparent  BasicBlock  basicBlock  declaredBlock  List  references  
[BugLab_Variable_Misuse]^if  ( hoistedFn.getScope (  )  == v.scope )  {^169^^^^^154^184^if  ( reference.getScope (  )  == v.scope )  {^[CLASS] VariableReferenceCheck ReferenceCheckingBehavior  [METHOD] checkVar [RETURN_TYPE] void   NodeTraversal t Var v Reference> references [VARIABLES] AbstractCompiler  compiler  boolean  CHECK_UNHOISTED_NAMED_FUNCTIONS  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  Set  blocksWithDeclarations  NodeTraversal  t  DiagnosticType  AMBIGUOUS_FUNCTION_DECL  REDECLARED_VARIABLE  UNDECLARED_REFERENCE  CheckLevel  checkLevel  Var  v  Reference  hoistedFn  reference  Node  grandparent  BasicBlock  basicBlock  declaredBlock  List  references  
[BugLab_Wrong_Operator]^if  ( grandparent.getType (  )  == Token.NAME && grandparent.getString (  )  >= v.name )  {^162^163^^^^147^177^if  ( grandparent.getType (  )  == Token.NAME && grandparent.getString (  )  == v.name )  {^[CLASS] VariableReferenceCheck ReferenceCheckingBehavior  [METHOD] checkVar [RETURN_TYPE] void   NodeTraversal t Var v Reference> references [VARIABLES] AbstractCompiler  compiler  boolean  CHECK_UNHOISTED_NAMED_FUNCTIONS  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  Set  blocksWithDeclarations  NodeTraversal  t  DiagnosticType  AMBIGUOUS_FUNCTION_DECL  REDECLARED_VARIABLE  UNDECLARED_REFERENCE  CheckLevel  checkLevel  Var  v  Reference  hoistedFn  reference  Node  grandparent  BasicBlock  basicBlock  declaredBlock  List  references  
[BugLab_Wrong_Operator]^if  ( reference.getScope (  )  <= v.scope )  {^169^^^^^154^184^if  ( reference.getScope (  )  == v.scope )  {^[CLASS] VariableReferenceCheck ReferenceCheckingBehavior  [METHOD] checkVar [RETURN_TYPE] void   NodeTraversal t Var v Reference> references [VARIABLES] AbstractCompiler  compiler  boolean  CHECK_UNHOISTED_NAMED_FUNCTIONS  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  Set  blocksWithDeclarations  NodeTraversal  t  DiagnosticType  AMBIGUOUS_FUNCTION_DECL  REDECLARED_VARIABLE  UNDECLARED_REFERENCE  CheckLevel  checkLevel  Var  v  Reference  hoistedFn  reference  Node  grandparent  BasicBlock  basicBlock  declaredBlock  List  references  
[BugLab_Variable_Misuse]^if  ( isUnhoistedNamedFunction )  {^178^^^^^163^193^if  ( isDeclaration )  {^[CLASS] VariableReferenceCheck ReferenceCheckingBehavior  [METHOD] checkVar [RETURN_TYPE] void   NodeTraversal t Var v Reference> references [VARIABLES] AbstractCompiler  compiler  boolean  CHECK_UNHOISTED_NAMED_FUNCTIONS  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  Set  blocksWithDeclarations  NodeTraversal  t  DiagnosticType  AMBIGUOUS_FUNCTION_DECL  REDECLARED_VARIABLE  UNDECLARED_REFERENCE  CheckLevel  checkLevel  Var  v  Reference  hoistedFn  reference  Node  grandparent  BasicBlock  basicBlock  declaredBlock  List  references  
[BugLab_Wrong_Literal]^isDeclaredInScope = false;^180^^^^^165^195^isDeclaredInScope = true;^[CLASS] VariableReferenceCheck ReferenceCheckingBehavior  [METHOD] checkVar [RETURN_TYPE] void   NodeTraversal t Var v Reference> references [VARIABLES] AbstractCompiler  compiler  boolean  CHECK_UNHOISTED_NAMED_FUNCTIONS  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  Set  blocksWithDeclarations  NodeTraversal  t  DiagnosticType  AMBIGUOUS_FUNCTION_DECL  REDECLARED_VARIABLE  UNDECLARED_REFERENCE  CheckLevel  checkLevel  Var  v  Reference  hoistedFn  reference  Node  grandparent  BasicBlock  basicBlock  declaredBlock  List  references  
[BugLab_Variable_Misuse]^blocksWithDeclarations.add ( declaredBlock ) ;^179^^^^^164^194^blocksWithDeclarations.add ( basicBlock ) ;^[CLASS] VariableReferenceCheck ReferenceCheckingBehavior  [METHOD] checkVar [RETURN_TYPE] void   NodeTraversal t Var v Reference> references [VARIABLES] AbstractCompiler  compiler  boolean  CHECK_UNHOISTED_NAMED_FUNCTIONS  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  Set  blocksWithDeclarations  NodeTraversal  t  DiagnosticType  AMBIGUOUS_FUNCTION_DECL  REDECLARED_VARIABLE  UNDECLARED_REFERENCE  CheckLevel  checkLevel  Var  v  Reference  hoistedFn  reference  Node  grandparent  BasicBlock  basicBlock  declaredBlock  List  references  
[BugLab_Variable_Misuse]^BasicBlock basicBlock = hoistedFn.getBasicBlock (  ) ;^125^^^^^110^140^BasicBlock basicBlock = reference.getBasicBlock (  ) ;^[CLASS] VariableReferenceCheck ReferenceCheckingBehavior  [METHOD] checkVar [RETURN_TYPE] void   NodeTraversal t Var v Reference> references [VARIABLES] AbstractCompiler  compiler  boolean  CHECK_UNHOISTED_NAMED_FUNCTIONS  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  Set  blocksWithDeclarations  NodeTraversal  t  DiagnosticType  AMBIGUOUS_FUNCTION_DECL  REDECLARED_VARIABLE  UNDECLARED_REFERENCE  CheckLevel  checkLevel  Var  v  Reference  hoistedFn  reference  Node  grandparent  BasicBlock  basicBlock  declaredBlock  List  references  
[BugLab_Variable_Misuse]^boolean isDeclaration = hoistedFn.isDeclaration (  ) ;^126^^^^^111^141^boolean isDeclaration = reference.isDeclaration (  ) ;^[CLASS] VariableReferenceCheck ReferenceCheckingBehavior  [METHOD] checkVar [RETURN_TYPE] void   NodeTraversal t Var v Reference> references [VARIABLES] AbstractCompiler  compiler  boolean  CHECK_UNHOISTED_NAMED_FUNCTIONS  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  Set  blocksWithDeclarations  NodeTraversal  t  DiagnosticType  AMBIGUOUS_FUNCTION_DECL  REDECLARED_VARIABLE  UNDECLARED_REFERENCE  CheckLevel  checkLevel  Var  v  Reference  hoistedFn  reference  Node  grandparent  BasicBlock  basicBlock  declaredBlock  List  references  
[BugLab_Variable_Misuse]^Var v = 1.next (  ) ;^90^^^^^85^93^Var v = it.next (  ) ;^[CLASS] ReferenceCheckingBehavior  [METHOD] afterExitScope [RETURN_TYPE] void   NodeTraversal t ReferenceCollection> referenceMap [VARIABLES] boolean  NodeTraversal  t  Var  v  Iterator  it  Map  referenceMap  
[BugLab_Argument_Swapping]^checkVar ( t, referenceMap, v.get ( v ) .references ) ;^91^^^^^85^93^checkVar ( t, v, referenceMap.get ( v ) .references ) ;^[CLASS] ReferenceCheckingBehavior  [METHOD] afterExitScope [RETURN_TYPE] void   NodeTraversal t ReferenceCollection> referenceMap [VARIABLES] boolean  NodeTraversal  t  Var  v  Iterator  it  Map  referenceMap  
[BugLab_Wrong_Literal]^boolean isDeclaredInScope = true;^103^^^^^88^118^boolean isDeclaredInScope = false;^[CLASS] ReferenceCheckingBehavior  [METHOD] checkVar [RETURN_TYPE] void   NodeTraversal t Var v Reference> references [VARIABLES] boolean  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  NodeTraversal  t  Var  v  Reference  hoistedFn  reference  Node  grandparent  BasicBlock  basicBlock  declaredBlock  List  references  
[BugLab_Wrong_Literal]^boolean isUnhoistedNamedFunction = true;^104^^^^^89^119^boolean isUnhoistedNamedFunction = false;^[CLASS] ReferenceCheckingBehavior  [METHOD] checkVar [RETURN_TYPE] void   NodeTraversal t Var v Reference> references [VARIABLES] boolean  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  NodeTraversal  t  Var  v  Reference  hoistedFn  reference  Node  grandparent  BasicBlock  basicBlock  declaredBlock  List  references  
[BugLab_Variable_Misuse]^if  ( hoistedFn.isHoistedFunction (  )  )  {^109^^^^^94^124^if  ( reference.isHoistedFunction (  )  )  {^[CLASS] ReferenceCheckingBehavior  [METHOD] checkVar [RETURN_TYPE] void   NodeTraversal t Var v Reference> references [VARIABLES] boolean  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  NodeTraversal  t  Var  v  Reference  hoistedFn  reference  Node  grandparent  BasicBlock  basicBlock  declaredBlock  List  references  
[BugLab_Variable_Misuse]^} else if  ( NodeUtil.isFunctionDeclaration ( hoistedFn.getNameNode (  ) .getParent (  )  )  )  {^114^115^^^^99^129^} else if  ( NodeUtil.isFunctionDeclaration ( reference.getNameNode (  ) .getParent (  )  )  )  {^[CLASS] ReferenceCheckingBehavior  [METHOD] checkVar [RETURN_TYPE] void   NodeTraversal t Var v Reference> references [VARIABLES] boolean  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  NodeTraversal  t  Var  v  Reference  hoistedFn  reference  Node  grandparent  BasicBlock  basicBlock  declaredBlock  List  references  
[BugLab_Wrong_Literal]^isUnhoistedNamedFunction = false;^116^^^^^114^117^isUnhoistedNamedFunction = true;^[CLASS] ReferenceCheckingBehavior  [METHOD] checkVar [RETURN_TYPE] void   NodeTraversal t Var v Reference> references [VARIABLES] boolean  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  NodeTraversal  t  Var  v  Reference  hoistedFn  reference  Node  grandparent  BasicBlock  basicBlock  declaredBlock  List  references  
[BugLab_Wrong_Literal]^isUnhoistedNamedFunction = false;^116^^^^^101^131^isUnhoistedNamedFunction = true;^[CLASS] ReferenceCheckingBehavior  [METHOD] checkVar [RETURN_TYPE] void   NodeTraversal t Var v Reference> references [VARIABLES] boolean  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  NodeTraversal  t  Var  v  Reference  hoistedFn  reference  Node  grandparent  BasicBlock  basicBlock  declaredBlock  List  references  
[BugLab_Wrong_Literal]^isDeclaredInScope = false;^111^^^^^96^126^isDeclaredInScope = true;^[CLASS] ReferenceCheckingBehavior  [METHOD] checkVar [RETURN_TYPE] void   NodeTraversal t Var v Reference> references [VARIABLES] boolean  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  NodeTraversal  t  Var  v  Reference  hoistedFn  reference  Node  grandparent  BasicBlock  basicBlock  declaredBlock  List  references  
[BugLab_Variable_Misuse]^hoistedFn = hoistedFn;^112^^^^^97^127^hoistedFn = reference;^[CLASS] ReferenceCheckingBehavior  [METHOD] checkVar [RETURN_TYPE] void   NodeTraversal t Var v Reference> references [VARIABLES] boolean  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  NodeTraversal  t  Var  v  Reference  hoistedFn  reference  Node  grandparent  BasicBlock  basicBlock  declaredBlock  List  references  
[BugLab_Variable_Misuse]^blocksWithDeclarations.add ( hoistedFn.getBasicBlock (  )  ) ;^110^^^^^95^125^blocksWithDeclarations.add ( reference.getBasicBlock (  )  ) ;^[CLASS] ReferenceCheckingBehavior  [METHOD] checkVar [RETURN_TYPE] void   NodeTraversal t Var v Reference> references [VARIABLES] boolean  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  NodeTraversal  t  Var  v  Reference  hoistedFn  reference  Node  grandparent  BasicBlock  basicBlock  declaredBlock  List  references  
[BugLab_Argument_Swapping]^if  ( hoistedFn == reference )  {^121^^^^^106^136^if  ( reference == hoistedFn )  {^[CLASS] ReferenceCheckingBehavior  [METHOD] checkVar [RETURN_TYPE] void   NodeTraversal t Var v Reference> references [VARIABLES] boolean  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  NodeTraversal  t  Var  v  Reference  hoistedFn  reference  Node  grandparent  BasicBlock  basicBlock  declaredBlock  List  references  
[BugLab_Wrong_Operator]^if  ( reference < hoistedFn )  {^121^^^^^106^136^if  ( reference == hoistedFn )  {^[CLASS] ReferenceCheckingBehavior  [METHOD] checkVar [RETURN_TYPE] void   NodeTraversal t Var v Reference> references [VARIABLES] boolean  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  NodeTraversal  t  Var  v  Reference  hoistedFn  reference  Node  grandparent  BasicBlock  basicBlock  declaredBlock  List  references  
[BugLab_Variable_Misuse]^JSError.make ( hoistedFn.getSourceName (  ) , reference.getNameNode (  ) , checkLevel, REDECLARED_VARIABLE, v.name )  ) ;^134^135^136^137^^119^149^JSError.make ( reference.getSourceName (  ) , reference.getNameNode (  ) , checkLevel, REDECLARED_VARIABLE, v.name )  ) ;^[CLASS] ReferenceCheckingBehavior  [METHOD] checkVar [RETURN_TYPE] void   NodeTraversal t Var v Reference> references [VARIABLES] boolean  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  NodeTraversal  t  Var  v  Reference  hoistedFn  reference  Node  grandparent  BasicBlock  basicBlock  declaredBlock  List  references  
[BugLab_Argument_Swapping]^if  ( basicBlock.provablyExecutesBefore ( declaredBlock )  )  {^132^^^^^117^147^if  ( declaredBlock.provablyExecutesBefore ( basicBlock )  )  {^[CLASS] ReferenceCheckingBehavior  [METHOD] checkVar [RETURN_TYPE] void   NodeTraversal t Var v Reference> references [VARIABLES] boolean  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  NodeTraversal  t  Var  v  Reference  hoistedFn  reference  Node  grandparent  BasicBlock  basicBlock  declaredBlock  List  references  
[BugLab_Wrong_Operator]^if  ( CHECK_UNHOISTED_NAMED_FUNCTIONS || isUnhoistedNamedFunction && !isDeclaration && isDeclaredInScope )  {^143^144^^^^128^158^if  ( CHECK_UNHOISTED_NAMED_FUNCTIONS && isUnhoistedNamedFunction && !isDeclaration && isDeclaredInScope )  {^[CLASS] ReferenceCheckingBehavior  [METHOD] checkVar [RETURN_TYPE] void   NodeTraversal t Var v Reference> references [VARIABLES] boolean  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  NodeTraversal  t  Var  v  Reference  hoistedFn  reference  Node  grandparent  BasicBlock  basicBlock  declaredBlock  List  references  
[BugLab_Variable_Misuse]^JSError.make ( hoistedFn.getSourceName (  ) , reference.getNameNode (  ) , checkLevel, AMBIGUOUS_FUNCTION_DECL, v.name )  ) ;^150^151^152^153^^143^157^JSError.make ( reference.getSourceName (  ) , reference.getNameNode (  ) , checkLevel, AMBIGUOUS_FUNCTION_DECL, v.name )  ) ;^[CLASS] ReferenceCheckingBehavior  [METHOD] checkVar [RETURN_TYPE] void   NodeTraversal t Var v Reference> references [VARIABLES] boolean  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  NodeTraversal  t  Var  v  Reference  hoistedFn  reference  Node  grandparent  BasicBlock  basicBlock  declaredBlock  List  references  
[BugLab_Variable_Misuse]^JSError.make ( hoistedFn.getSourceName (  ) , reference.getNameNode (  ) , checkLevel, AMBIGUOUS_FUNCTION_DECL, v.name )  ) ;^150^151^152^153^^135^165^JSError.make ( reference.getSourceName (  ) , reference.getNameNode (  ) , checkLevel, AMBIGUOUS_FUNCTION_DECL, v.name )  ) ;^[CLASS] ReferenceCheckingBehavior  [METHOD] checkVar [RETURN_TYPE] void   NodeTraversal t Var v Reference> references [VARIABLES] boolean  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  NodeTraversal  t  Var  v  Reference  hoistedFn  reference  Node  grandparent  BasicBlock  basicBlock  declaredBlock  List  references  
[BugLab_Wrong_Operator]^if  ( !isDeclaration || !isDeclaredInScope )  {^159^^^^^144^174^if  ( !isDeclaration && !isDeclaredInScope )  {^[CLASS] ReferenceCheckingBehavior  [METHOD] checkVar [RETURN_TYPE] void   NodeTraversal t Var v Reference> references [VARIABLES] boolean  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  NodeTraversal  t  Var  v  Reference  hoistedFn  reference  Node  grandparent  BasicBlock  basicBlock  declaredBlock  List  references  
[BugLab_Wrong_Operator]^if  ( grandparent.getType (  )  == Token.NAME || grandparent.getString (  )  == v.name )  {^162^163^^^^147^177^if  ( grandparent.getType (  )  == Token.NAME && grandparent.getString (  )  == v.name )  {^[CLASS] ReferenceCheckingBehavior  [METHOD] checkVar [RETURN_TYPE] void   NodeTraversal t Var v Reference> references [VARIABLES] boolean  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  NodeTraversal  t  Var  v  Reference  hoistedFn  reference  Node  grandparent  BasicBlock  basicBlock  declaredBlock  List  references  
[BugLab_Wrong_Operator]^if  ( grandparent.getType (  )  < Token.NAME && grandparent.getString (  )  == v.name )  {^162^163^^^^147^177^if  ( grandparent.getType (  )  == Token.NAME && grandparent.getString (  )  == v.name )  {^[CLASS] ReferenceCheckingBehavior  [METHOD] checkVar [RETURN_TYPE] void   NodeTraversal t Var v Reference> references [VARIABLES] boolean  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  NodeTraversal  t  Var  v  Reference  hoistedFn  reference  Node  grandparent  BasicBlock  basicBlock  declaredBlock  List  references  
[BugLab_Wrong_Operator]^if  ( grandparent.getType (  )  == Token.NAME && grandparent.getString (  )  < v.name )  {^162^163^^^^147^177^if  ( grandparent.getType (  )  == Token.NAME && grandparent.getString (  )  == v.name )  {^[CLASS] ReferenceCheckingBehavior  [METHOD] checkVar [RETURN_TYPE] void   NodeTraversal t Var v Reference> references [VARIABLES] boolean  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  NodeTraversal  t  Var  v  Reference  hoistedFn  reference  Node  grandparent  BasicBlock  basicBlock  declaredBlock  List  references  
[BugLab_Wrong_Operator]^if  ( reference.getScope (  )  <= v.scope )  {^169^^^^^154^184^if  ( reference.getScope (  )  == v.scope )  {^[CLASS] ReferenceCheckingBehavior  [METHOD] checkVar [RETURN_TYPE] void   NodeTraversal t Var v Reference> references [VARIABLES] boolean  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  NodeTraversal  t  Var  v  Reference  hoistedFn  reference  Node  grandparent  BasicBlock  basicBlock  declaredBlock  List  references  
[BugLab_Variable_Misuse]^JSError.make ( hoistedFn.getSourceName (  ) , reference.getNameNode (  ) , checkLevel, UNDECLARED_REFERENCE, v.name )  ) ;^171^172^173^174^^156^186^JSError.make ( reference.getSourceName (  ) , reference.getNameNode (  ) , checkLevel, UNDECLARED_REFERENCE, v.name )  ) ;^[CLASS] ReferenceCheckingBehavior  [METHOD] checkVar [RETURN_TYPE] void   NodeTraversal t Var v Reference> references [VARIABLES] boolean  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  NodeTraversal  t  Var  v  Reference  hoistedFn  reference  Node  grandparent  BasicBlock  basicBlock  declaredBlock  List  references  
[BugLab_Variable_Misuse]^Node grandparent = hoistedFn.getGrandparent (  ) ;^161^^^^^146^176^Node grandparent = reference.getGrandparent (  ) ;^[CLASS] ReferenceCheckingBehavior  [METHOD] checkVar [RETURN_TYPE] void   NodeTraversal t Var v Reference> references [VARIABLES] boolean  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  NodeTraversal  t  Var  v  Reference  hoistedFn  reference  Node  grandparent  BasicBlock  basicBlock  declaredBlock  List  references  
[BugLab_Wrong_Operator]^if  ( grandparent.getType (  )  > Token.NAME && grandparent.getString (  )  == v.name )  {^162^163^^^^147^177^if  ( grandparent.getType (  )  == Token.NAME && grandparent.getString (  )  == v.name )  {^[CLASS] ReferenceCheckingBehavior  [METHOD] checkVar [RETURN_TYPE] void   NodeTraversal t Var v Reference> references [VARIABLES] boolean  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  NodeTraversal  t  Var  v  Reference  hoistedFn  reference  Node  grandparent  BasicBlock  basicBlock  declaredBlock  List  references  
[BugLab_Wrong_Operator]^if  ( grandparent.getType (  )  == Token.NAME && grandparent.getString (  )  <= v.name )  {^162^163^^^^147^177^if  ( grandparent.getType (  )  == Token.NAME && grandparent.getString (  )  == v.name )  {^[CLASS] ReferenceCheckingBehavior  [METHOD] checkVar [RETURN_TYPE] void   NodeTraversal t Var v Reference> references [VARIABLES] boolean  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  NodeTraversal  t  Var  v  Reference  hoistedFn  reference  Node  grandparent  BasicBlock  basicBlock  declaredBlock  List  references  
[BugLab_Wrong_Operator]^if  ( reference.getScope (  )  < v.scope )  {^169^^^^^154^184^if  ( reference.getScope (  )  == v.scope )  {^[CLASS] ReferenceCheckingBehavior  [METHOD] checkVar [RETURN_TYPE] void   NodeTraversal t Var v Reference> references [VARIABLES] boolean  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  NodeTraversal  t  Var  v  Reference  hoistedFn  reference  Node  grandparent  BasicBlock  basicBlock  declaredBlock  List  references  
[BugLab_Variable_Misuse]^if  ( isUnhoistedNamedFunction )  {^178^^^^^163^193^if  ( isDeclaration )  {^[CLASS] ReferenceCheckingBehavior  [METHOD] checkVar [RETURN_TYPE] void   NodeTraversal t Var v Reference> references [VARIABLES] boolean  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  NodeTraversal  t  Var  v  Reference  hoistedFn  reference  Node  grandparent  BasicBlock  basicBlock  declaredBlock  List  references  
[BugLab_Wrong_Literal]^isDeclaredInScope = false;^180^^^^^165^195^isDeclaredInScope = true;^[CLASS] ReferenceCheckingBehavior  [METHOD] checkVar [RETURN_TYPE] void   NodeTraversal t Var v Reference> references [VARIABLES] boolean  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  NodeTraversal  t  Var  v  Reference  hoistedFn  reference  Node  grandparent  BasicBlock  basicBlock  declaredBlock  List  references  
[BugLab_Variable_Misuse]^blocksWithDeclarations.add ( declaredBlock ) ;^179^^^^^164^194^blocksWithDeclarations.add ( basicBlock ) ;^[CLASS] ReferenceCheckingBehavior  [METHOD] checkVar [RETURN_TYPE] void   NodeTraversal t Var v Reference> references [VARIABLES] boolean  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  NodeTraversal  t  Var  v  Reference  hoistedFn  reference  Node  grandparent  BasicBlock  basicBlock  declaredBlock  List  references  
[BugLab_Variable_Misuse]^BasicBlock basicBlock = hoistedFn.getBasicBlock (  ) ;^125^^^^^110^140^BasicBlock basicBlock = reference.getBasicBlock (  ) ;^[CLASS] ReferenceCheckingBehavior  [METHOD] checkVar [RETURN_TYPE] void   NodeTraversal t Var v Reference> references [VARIABLES] boolean  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  NodeTraversal  t  Var  v  Reference  hoistedFn  reference  Node  grandparent  BasicBlock  basicBlock  declaredBlock  List  references  
[BugLab_Variable_Misuse]^boolean isDeclaration = hoistedFn.isDeclaration (  ) ;^126^^^^^111^141^boolean isDeclaration = reference.isDeclaration (  ) ;^[CLASS] ReferenceCheckingBehavior  [METHOD] checkVar [RETURN_TYPE] void   NodeTraversal t Var v Reference> references [VARIABLES] boolean  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  NodeTraversal  t  Var  v  Reference  hoistedFn  reference  Node  grandparent  BasicBlock  basicBlock  declaredBlock  List  references  
[BugLab_Variable_Misuse]^if  ( hoistedFn.getScope (  )  == v.scope )  {^169^^^^^154^184^if  ( reference.getScope (  )  == v.scope )  {^[CLASS] ReferenceCheckingBehavior  [METHOD] checkVar [RETURN_TYPE] void   NodeTraversal t Var v Reference> references [VARIABLES] boolean  isDeclaration  isDeclaredInScope  isUnhoistedNamedFunction  NodeTraversal  t  Var  v  Reference  hoistedFn  reference  Node  grandparent  BasicBlock  basicBlock  declaredBlock  List  references  
