[BugLab_Argument_Swapping]^result = checkAllPathsWithoutBackEdges ( b, a ) ;^89^^^^^79^93^result = checkAllPathsWithoutBackEdges ( a, b ) ;^[CLASS] CheckPathsBetweenNodes 1 2 3  [METHOD] <init> [RETURN_TYPE] Predicate)   DiGraph<N, E> graph DiGraphNode<N, E> a DiGraphNode<N, E> b Predicate<N> nodePredicate DiGraphEdge<N, E>> edgePredicate [VARIABLES] DiGraphNode  a  b  boolean  result  DiGraph  graph  Annotation  BACK_EDGE  BLACK  GRAY  WHITE  Predicate  edgePredicate  nodePredicate  
[BugLab_Variable_Misuse]^u.setAnnotation ( WHITE ) ;^104^^^^^103^117^u.setAnnotation ( GRAY ) ;^[CLASS] CheckPathsBetweenNodes 1 2 3  [METHOD] discoverBackEdges [RETURN_TYPE] void   DiGraphNode<N, E> u [VARIABLES] DiGraphNode  u  v  boolean  result  DiGraphEdge  e  Annotation  BACK_EDGE  BLACK  GRAY  WHITE  Predicate  edgePredicate  nodePredicate  
[BugLab_Variable_Misuse]^if  ( v.getAnnotation (  )  == GRAY )  {^110^^^^^103^117^if  ( v.getAnnotation (  )  == WHITE )  {^[CLASS] CheckPathsBetweenNodes 1 2 3  [METHOD] discoverBackEdges [RETURN_TYPE] void   DiGraphNode<N, E> u [VARIABLES] DiGraphNode  u  v  boolean  result  DiGraphEdge  e  Annotation  BACK_EDGE  BLACK  GRAY  WHITE  Predicate  edgePredicate  nodePredicate  
[BugLab_Wrong_Operator]^if  ( v.getAnnotation (  )  != WHITE )  {^110^^^^^103^117^if  ( v.getAnnotation (  )  == WHITE )  {^[CLASS] CheckPathsBetweenNodes 1 2 3  [METHOD] discoverBackEdges [RETURN_TYPE] void   DiGraphNode<N, E> u [VARIABLES] DiGraphNode  u  v  boolean  result  DiGraphEdge  e  Annotation  BACK_EDGE  BLACK  GRAY  WHITE  Predicate  edgePredicate  nodePredicate  
[BugLab_Wrong_Operator]^if  ( v.getAnnotation (  )  < WHITE )  {^110^^^^^103^117^if  ( v.getAnnotation (  )  == WHITE )  {^[CLASS] CheckPathsBetweenNodes 1 2 3  [METHOD] discoverBackEdges [RETURN_TYPE] void   DiGraphNode<N, E> u [VARIABLES] DiGraphNode  u  v  boolean  result  DiGraphEdge  e  Annotation  BACK_EDGE  BLACK  GRAY  WHITE  Predicate  edgePredicate  nodePredicate  
[BugLab_Argument_Swapping]^} vlse if  ( e.getAnnotation (  )  == GRAY )  {^112^^^^^103^117^} else if  ( v.getAnnotation (  )  == GRAY )  {^[CLASS] CheckPathsBetweenNodes 1 2 3  [METHOD] discoverBackEdges [RETURN_TYPE] void   DiGraphNode<N, E> u [VARIABLES] DiGraphNode  u  v  boolean  result  DiGraphEdge  e  Annotation  BACK_EDGE  BLACK  GRAY  WHITE  Predicate  edgePredicate  nodePredicate  
[BugLab_Argument_Swapping]^} GRAYlse if  ( v.getAnnotation (  )  == e )  {^112^^^^^103^117^} else if  ( v.getAnnotation (  )  == GRAY )  {^[CLASS] CheckPathsBetweenNodes 1 2 3  [METHOD] discoverBackEdges [RETURN_TYPE] void   DiGraphNode<N, E> u [VARIABLES] DiGraphNode  u  v  boolean  result  DiGraphEdge  e  Annotation  BACK_EDGE  BLACK  GRAY  WHITE  Predicate  edgePredicate  nodePredicate  
[BugLab_Wrong_Operator]^} else if  ( v.getAnnotation (  )  != GRAY )  {^112^^^^^103^117^} else if  ( v.getAnnotation (  )  == GRAY )  {^[CLASS] CheckPathsBetweenNodes 1 2 3  [METHOD] discoverBackEdges [RETURN_TYPE] void   DiGraphNode<N, E> u [VARIABLES] DiGraphNode  u  v  boolean  result  DiGraphEdge  e  Annotation  BACK_EDGE  BLACK  GRAY  WHITE  Predicate  edgePredicate  nodePredicate  
[BugLab_Variable_Misuse]^e.setAnnotation ( WHITE ) ;^113^^^^^103^117^e.setAnnotation ( BACK_EDGE ) ;^[CLASS] CheckPathsBetweenNodes 1 2 3  [METHOD] discoverBackEdges [RETURN_TYPE] void   DiGraphNode<N, E> u [VARIABLES] DiGraphNode  u  v  boolean  result  DiGraphEdge  e  Annotation  BACK_EDGE  BLACK  GRAY  WHITE  Predicate  edgePredicate  nodePredicate  
[BugLab_Variable_Misuse]^} else if  ( v.getAnnotation (  )  == WHITE )  {^112^^^^^103^117^} else if  ( v.getAnnotation (  )  == GRAY )  {^[CLASS] CheckPathsBetweenNodes 1 2 3  [METHOD] discoverBackEdges [RETURN_TYPE] void   DiGraphNode<N, E> u [VARIABLES] DiGraphNode  u  v  boolean  result  DiGraphEdge  e  Annotation  BACK_EDGE  BLACK  GRAY  WHITE  Predicate  edgePredicate  nodePredicate  
[BugLab_Argument_Swapping]^} else if  ( GRAY.getAnnotation (  )  == v )  {^112^^^^^103^117^} else if  ( v.getAnnotation (  )  == GRAY )  {^[CLASS] CheckPathsBetweenNodes 1 2 3  [METHOD] discoverBackEdges [RETURN_TYPE] void   DiGraphNode<N, E> u [VARIABLES] DiGraphNode  u  v  boolean  result  DiGraphEdge  e  Annotation  BACK_EDGE  BLACK  GRAY  WHITE  Predicate  edgePredicate  nodePredicate  
[BugLab_Wrong_Operator]^} else if  ( v.getAnnotation (  )  >= GRAY )  {^112^^^^^103^117^} else if  ( v.getAnnotation (  )  == GRAY )  {^[CLASS] CheckPathsBetweenNodes 1 2 3  [METHOD] discoverBackEdges [RETURN_TYPE] void   DiGraphNode<N, E> u [VARIABLES] DiGraphNode  u  v  boolean  result  DiGraphEdge  e  Annotation  BACK_EDGE  BLACK  GRAY  WHITE  Predicate  edgePredicate  nodePredicate  
[BugLab_Variable_Misuse]^DiGraphNode<N, E> v = 3.getDestination (  ) ;^109^^^^^103^117^DiGraphNode<N, E> v = e.getDestination (  ) ;^[CLASS] CheckPathsBetweenNodes 1 2 3  [METHOD] discoverBackEdges [RETURN_TYPE] void   DiGraphNode<N, E> u [VARIABLES] DiGraphNode  u  v  boolean  result  DiGraphEdge  e  Annotation  BACK_EDGE  BLACK  GRAY  WHITE  Predicate  edgePredicate  nodePredicate  
[BugLab_Variable_Misuse]^for  ( DiGraphEdge<N, E> e : 3.getOutEdges (  )  )  {^105^^^^^103^117^for  ( DiGraphEdge<N, E> e : u.getOutEdges (  )  )  {^[CLASS] CheckPathsBetweenNodes 1 2 3  [METHOD] discoverBackEdges [RETURN_TYPE] void   DiGraphNode<N, E> u [VARIABLES] DiGraphNode  u  v  boolean  result  DiGraphEdge  e  Annotation  BACK_EDGE  BLACK  GRAY  WHITE  Predicate  edgePredicate  nodePredicate  
[BugLab_Variable_Misuse]^u.setAnnotation ( WHITE ) ;^116^^^^^103^117^u.setAnnotation ( BLACK ) ;^[CLASS] CheckPathsBetweenNodes 1 2 3  [METHOD] discoverBackEdges [RETURN_TYPE] void   DiGraphNode<N, E> u [VARIABLES] DiGraphNode  u  v  boolean  result  DiGraphEdge  e  Annotation  BACK_EDGE  BLACK  GRAY  WHITE  Predicate  edgePredicate  nodePredicate  
[BugLab_Argument_Swapping]^if  ( a.apply ( nodePredicate.getValue (  )  )  )  {^129^^^^^127^148^if  ( nodePredicate.apply ( a.getValue (  )  )  )  {^[CLASS] CheckPathsBetweenNodes 1 2 3  [METHOD] checkAllPathsWithoutBackEdges [RETURN_TYPE] boolean   DiGraphNode<N, E> a DiGraphNode<N, E> b [VARIABLES] DiGraphNode  a  b  next  boolean  result  DiGraphEdge  e  Annotation  BACK_EDGE  BLACK  GRAY  WHITE  Predicate  edgePredicate  nodePredicate  
[BugLab_Wrong_Literal]^return false;^130^^^^^127^148^return true;^[CLASS] CheckPathsBetweenNodes 1 2 3  [METHOD] checkAllPathsWithoutBackEdges [RETURN_TYPE] boolean   DiGraphNode<N, E> a DiGraphNode<N, E> b [VARIABLES] DiGraphNode  a  b  next  boolean  result  DiGraphEdge  e  Annotation  BACK_EDGE  BLACK  GRAY  WHITE  Predicate  edgePredicate  nodePredicate  
[BugLab_Argument_Swapping]^if  ( b == a )  {^132^^^^^127^148^if  ( a == b )  {^[CLASS] CheckPathsBetweenNodes 1 2 3  [METHOD] checkAllPathsWithoutBackEdges [RETURN_TYPE] boolean   DiGraphNode<N, E> a DiGraphNode<N, E> b [VARIABLES] DiGraphNode  a  b  next  boolean  result  DiGraphEdge  e  Annotation  BACK_EDGE  BLACK  GRAY  WHITE  Predicate  edgePredicate  nodePredicate  
[BugLab_Wrong_Operator]^if  ( a != b )  {^132^^^^^127^148^if  ( a == b )  {^[CLASS] CheckPathsBetweenNodes 1 2 3  [METHOD] checkAllPathsWithoutBackEdges [RETURN_TYPE] boolean   DiGraphNode<N, E> a DiGraphNode<N, E> b [VARIABLES] DiGraphNode  a  b  next  boolean  result  DiGraphEdge  e  Annotation  BACK_EDGE  BLACK  GRAY  WHITE  Predicate  edgePredicate  nodePredicate  
[BugLab_Wrong_Literal]^return true;^133^^^^^127^148^return false;^[CLASS] CheckPathsBetweenNodes 1 2 3  [METHOD] checkAllPathsWithoutBackEdges [RETURN_TYPE] boolean   DiGraphNode<N, E> a DiGraphNode<N, E> b [VARIABLES] DiGraphNode  a  b  next  boolean  result  DiGraphEdge  e  Annotation  BACK_EDGE  BLACK  GRAY  WHITE  Predicate  edgePredicate  nodePredicate  
[BugLab_Variable_Misuse]^if  ( e.getAnnotation (  )  == WHITE )  {^139^^^^^127^148^if  ( e.getAnnotation (  )  == BACK_EDGE )  {^[CLASS] CheckPathsBetweenNodes 1 2 3  [METHOD] checkAllPathsWithoutBackEdges [RETURN_TYPE] boolean   DiGraphNode<N, E> a DiGraphNode<N, E> b [VARIABLES] DiGraphNode  a  b  next  boolean  result  DiGraphEdge  e  Annotation  BACK_EDGE  BLACK  GRAY  WHITE  Predicate  edgePredicate  nodePredicate  
[BugLab_Argument_Swapping]^if  ( BACK_EDGE.getAnnotation (  )  == e )  {^139^^^^^127^148^if  ( e.getAnnotation (  )  == BACK_EDGE )  {^[CLASS] CheckPathsBetweenNodes 1 2 3  [METHOD] checkAllPathsWithoutBackEdges [RETURN_TYPE] boolean   DiGraphNode<N, E> a DiGraphNode<N, E> b [VARIABLES] DiGraphNode  a  b  next  boolean  result  DiGraphEdge  e  Annotation  BACK_EDGE  BLACK  GRAY  WHITE  Predicate  edgePredicate  nodePredicate  
[BugLab_Wrong_Operator]^if  ( e.getAnnotation (  )  > BACK_EDGE )  {^139^^^^^127^148^if  ( e.getAnnotation (  )  == BACK_EDGE )  {^[CLASS] CheckPathsBetweenNodes 1 2 3  [METHOD] checkAllPathsWithoutBackEdges [RETURN_TYPE] boolean   DiGraphNode<N, E> a DiGraphNode<N, E> b [VARIABLES] DiGraphNode  a  b  next  boolean  result  DiGraphEdge  e  Annotation  BACK_EDGE  BLACK  GRAY  WHITE  Predicate  edgePredicate  nodePredicate  
[BugLab_Argument_Swapping]^if  ( !checkAllPathsWithoutBackEdges ( b, next )  )  {^143^^^^^127^148^if  ( !checkAllPathsWithoutBackEdges ( next, b )  )  {^[CLASS] CheckPathsBetweenNodes 1 2 3  [METHOD] checkAllPathsWithoutBackEdges [RETURN_TYPE] boolean   DiGraphNode<N, E> a DiGraphNode<N, E> b [VARIABLES] DiGraphNode  a  b  next  boolean  result  DiGraphEdge  e  Annotation  BACK_EDGE  BLACK  GRAY  WHITE  Predicate  edgePredicate  nodePredicate  
[BugLab_Wrong_Literal]^return true;^144^^^^^127^148^return false;^[CLASS] CheckPathsBetweenNodes 1 2 3  [METHOD] checkAllPathsWithoutBackEdges [RETURN_TYPE] boolean   DiGraphNode<N, E> a DiGraphNode<N, E> b [VARIABLES] DiGraphNode  a  b  next  boolean  result  DiGraphEdge  e  Annotation  BACK_EDGE  BLACK  GRAY  WHITE  Predicate  edgePredicate  nodePredicate  
[BugLab_Wrong_Literal]^return false;^147^^^^^127^148^return true;^[CLASS] CheckPathsBetweenNodes 1 2 3  [METHOD] checkAllPathsWithoutBackEdges [RETURN_TYPE] boolean   DiGraphNode<N, E> a DiGraphNode<N, E> b [VARIABLES] DiGraphNode  a  b  next  boolean  result  DiGraphEdge  e  Annotation  BACK_EDGE  BLACK  GRAY  WHITE  Predicate  edgePredicate  nodePredicate  
