[buglab_swap_variables]^result = checkAllPathsWithoutBackEdges ( b, a ) ;^89^^^^^79^93^result = checkAllPathsWithoutBackEdges ( a, b ) ;^[CLASS] CheckPathsBetweenNodes 1 2 3  [METHOD] <init> [RETURN_TYPE] Predicate)   DiGraph<N, E> graph DiGraphNode<N, E> a DiGraphNode<N, E> b Predicate<N> nodePredicate DiGraphEdge<N, E>> edgePredicate [VARIABLES] DiGraphNode  a  b  boolean  result  DiGraph  graph  Annotation  BACK_EDGE  BLACK  GRAY  WHITE  Predicate  edgePredicate  nodePredicate  
[buglab_swap_variables]^result = checkAllPathsWithoutBackEdges (  b ) ;^89^^^^^79^93^result = checkAllPathsWithoutBackEdges ( a, b ) ;^[CLASS] CheckPathsBetweenNodes 1 2 3  [METHOD] <init> [RETURN_TYPE] Predicate)   DiGraph<N, E> graph DiGraphNode<N, E> a DiGraphNode<N, E> b Predicate<N> nodePredicate DiGraphEdge<N, E>> edgePredicate [VARIABLES] DiGraphNode  a  b  boolean  result  DiGraph  graph  Annotation  BACK_EDGE  BLACK  GRAY  WHITE  Predicate  edgePredicate  nodePredicate  
[buglab_swap_variables]^result = checkAllPathsWithoutBackEdges ( a ) ;^89^^^^^79^93^result = checkAllPathsWithoutBackEdges ( a, b ) ;^[CLASS] CheckPathsBetweenNodes 1 2 3  [METHOD] <init> [RETURN_TYPE] Predicate)   DiGraph<N, E> graph DiGraphNode<N, E> a DiGraphNode<N, E> b Predicate<N> nodePredicate DiGraphEdge<N, E>> edgePredicate [VARIABLES] DiGraphNode  a  b  boolean  result  DiGraph  graph  Annotation  BACK_EDGE  BLACK  GRAY  WHITE  Predicate  edgePredicate  nodePredicate  
[buglab_swap_variables]^} vlse if  ( e.getAnnotation (  )  == GRAY )  {^112^^^^^103^117^} else if  ( v.getAnnotation (  )  == GRAY )  {^[CLASS] CheckPathsBetweenNodes 1 2 3  [METHOD] discoverBackEdges [RETURN_TYPE] void   DiGraphNode<N, E> u [VARIABLES] DiGraphNode  u  v  boolean  result  DiGraphEdge  e  Annotation  BACK_EDGE  BLACK  GRAY  WHITE  Predicate  edgePredicate  nodePredicate  
[buglab_swap_variables]^if  ( a.apply ( nodePredicate.getValue (  )  )  )  {^129^^^^^127^148^if  ( nodePredicate.apply ( a.getValue (  )  )  )  {^[CLASS] CheckPathsBetweenNodes 1 2 3  [METHOD] checkAllPathsWithoutBackEdges [RETURN_TYPE] boolean   DiGraphNode<N, E> a DiGraphNode<N, E> b [VARIABLES] DiGraphNode  a  b  next  boolean  result  DiGraphEdge  e  Annotation  BACK_EDGE  BLACK  GRAY  WHITE  Predicate  edgePredicate  nodePredicate  
[buglab_swap_variables]^if  ( b == a )  {^132^^^^^127^148^if  ( a == b )  {^[CLASS] CheckPathsBetweenNodes 1 2 3  [METHOD] checkAllPathsWithoutBackEdges [RETURN_TYPE] boolean   DiGraphNode<N, E> a DiGraphNode<N, E> b [VARIABLES] DiGraphNode  a  b  next  boolean  result  DiGraphEdge  e  Annotation  BACK_EDGE  BLACK  GRAY  WHITE  Predicate  edgePredicate  nodePredicate  
[buglab_swap_variables]^if  ( BACK_EDGE.getAnnotation (  )  == e )  {^139^^^^^127^148^if  ( e.getAnnotation (  )  == BACK_EDGE )  {^[CLASS] CheckPathsBetweenNodes 1 2 3  [METHOD] checkAllPathsWithoutBackEdges [RETURN_TYPE] boolean   DiGraphNode<N, E> a DiGraphNode<N, E> b [VARIABLES] DiGraphNode  a  b  next  boolean  result  DiGraphEdge  e  Annotation  BACK_EDGE  BLACK  GRAY  WHITE  Predicate  edgePredicate  nodePredicate  
[buglab_swap_variables]^if  ( !checkAllPathsWithoutBackEdges ( b, next )  )  {^143^^^^^127^148^if  ( !checkAllPathsWithoutBackEdges ( next, b )  )  {^[CLASS] CheckPathsBetweenNodes 1 2 3  [METHOD] checkAllPathsWithoutBackEdges [RETURN_TYPE] boolean   DiGraphNode<N, E> a DiGraphNode<N, E> b [VARIABLES] DiGraphNode  a  b  next  boolean  result  DiGraphEdge  e  Annotation  BACK_EDGE  BLACK  GRAY  WHITE  Predicate  edgePredicate  nodePredicate  
[buglab_swap_variables]^if  ( !checkAllPathsWithoutBackEdges (  b )  )  {^143^^^^^127^148^if  ( !checkAllPathsWithoutBackEdges ( next, b )  )  {^[CLASS] CheckPathsBetweenNodes 1 2 3  [METHOD] checkAllPathsWithoutBackEdges [RETURN_TYPE] boolean   DiGraphNode<N, E> a DiGraphNode<N, E> b [VARIABLES] DiGraphNode  a  b  next  boolean  result  DiGraphEdge  e  Annotation  BACK_EDGE  BLACK  GRAY  WHITE  Predicate  edgePredicate  nodePredicate  
[buglab_swap_variables]^if  ( !checkAllPathsWithoutBackEdges ( next )  )  {^143^^^^^127^148^if  ( !checkAllPathsWithoutBackEdges ( next, b )  )  {^[CLASS] CheckPathsBetweenNodes 1 2 3  [METHOD] checkAllPathsWithoutBackEdges [RETURN_TYPE] boolean   DiGraphNode<N, E> a DiGraphNode<N, E> b [VARIABLES] DiGraphNode  a  b  next  boolean  result  DiGraphEdge  e  Annotation  BACK_EDGE  BLACK  GRAY  WHITE  Predicate  edgePredicate  nodePredicate  
