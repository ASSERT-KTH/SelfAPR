[BugLab_Variable_Misuse]^this.syntacticScope = syntacticScope;^87^^^^^82^106^this.syntacticScope = functionScope;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] <init> [RETURN_TYPE] Scope)   AbstractCompiler compiler Node> cfg ReverseAbstractInterpreter reverseInterpreter Scope functionScope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Var  var  ControlFlowGraph  cfg  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Iterator  varIt  FlowScope  bottomScope  functionScope  joinedScope  leftScope  rightScope  
[BugLab_Variable_Misuse]^this.functionScope = LinkedFlowScope.createEntryLattice ( syntacticScope ) ;^88^^^^^82^106^this.functionScope = LinkedFlowScope.createEntryLattice ( functionScope ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] <init> [RETURN_TYPE] Scope)   AbstractCompiler compiler Node> cfg ReverseAbstractInterpreter reverseInterpreter Scope functionScope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Var  var  ControlFlowGraph  cfg  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Iterator  varIt  FlowScope  bottomScope  functionScope  joinedScope  leftScope  rightScope  
[BugLab_Variable_Misuse]^Iterator<Var> varIt = syntacticScope.getVars (  ) ;^89^^^^^82^106^Iterator<Var> varIt = functionScope.getVars (  ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] <init> [RETURN_TYPE] Scope)   AbstractCompiler compiler Node> cfg ReverseAbstractInterpreter reverseInterpreter Scope functionScope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Var  var  ControlFlowGraph  cfg  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Iterator  varIt  FlowScope  bottomScope  functionScope  joinedScope  leftScope  rightScope  
[BugLab_Variable_Misuse]^while  ( null.hasNext (  )  )  {^90^^^^^82^106^while  ( varIt.hasNext (  )  )  {^[CLASS] TypeInference BooleanOutcomePair  [METHOD] <init> [RETURN_TYPE] Scope)   AbstractCompiler compiler Node> cfg ReverseAbstractInterpreter reverseInterpreter Scope functionScope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Var  var  ControlFlowGraph  cfg  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Iterator  varIt  FlowScope  bottomScope  functionScope  joinedScope  leftScope  rightScope  
[BugLab_Wrong_Operator]^if  ( var.getParentNode (  )  != null || var.getType (  )  == null && var.getParentNode (  ) .getType (  )  == Token.VAR && !var.isExtern (  )  )  {^95^96^97^98^^82^106^if  ( var.getParentNode (  )  != null && var.getType (  )  == null && var.getParentNode (  ) .getType (  )  == Token.VAR && !var.isExtern (  )  )  {^[CLASS] TypeInference BooleanOutcomePair  [METHOD] <init> [RETURN_TYPE] Scope)   AbstractCompiler compiler Node> cfg ReverseAbstractInterpreter reverseInterpreter Scope functionScope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Var  var  ControlFlowGraph  cfg  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Iterator  varIt  FlowScope  bottomScope  functionScope  joinedScope  leftScope  rightScope  
[BugLab_Wrong_Operator]^if  ( var.getParentNode (  )  == null && var.getType (  )  == null && var.getParentNode (  ) .getType (  )  == Token.VAR && !var.isExtern (  )  )  {^95^96^97^98^^82^106^if  ( var.getParentNode (  )  != null && var.getType (  )  == null && var.getParentNode (  ) .getType (  )  == Token.VAR && !var.isExtern (  )  )  {^[CLASS] TypeInference BooleanOutcomePair  [METHOD] <init> [RETURN_TYPE] Scope)   AbstractCompiler compiler Node> cfg ReverseAbstractInterpreter reverseInterpreter Scope functionScope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Var  var  ControlFlowGraph  cfg  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Iterator  varIt  FlowScope  bottomScope  functionScope  joinedScope  leftScope  rightScope  
[BugLab_Wrong_Operator]^if  ( var.getParentNode (  )  != null && var.getType (  )  != null && var.getParentNode (  ) .getType (  )  == Token.VAR && !var.isExtern (  )  )  {^95^96^97^98^^82^106^if  ( var.getParentNode (  )  != null && var.getType (  )  == null && var.getParentNode (  ) .getType (  )  == Token.VAR && !var.isExtern (  )  )  {^[CLASS] TypeInference BooleanOutcomePair  [METHOD] <init> [RETURN_TYPE] Scope)   AbstractCompiler compiler Node> cfg ReverseAbstractInterpreter reverseInterpreter Scope functionScope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Var  var  ControlFlowGraph  cfg  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Iterator  varIt  FlowScope  bottomScope  functionScope  joinedScope  leftScope  rightScope  
[BugLab_Variable_Misuse]^this.bottomScope = LinkedFlowScope.createEntryLattice ( new Scope ( syntacticScope.getRootNode (  ) , functionScope.getTypeOfThis (  )  )  ) ;^104^105^^^^82^106^this.bottomScope = LinkedFlowScope.createEntryLattice ( new Scope ( functionScope.getRootNode (  ) , functionScope.getTypeOfThis (  )  )  ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] <init> [RETURN_TYPE] Scope)   AbstractCompiler compiler Node> cfg ReverseAbstractInterpreter reverseInterpreter Scope functionScope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Var  var  ControlFlowGraph  cfg  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Iterator  varIt  FlowScope  bottomScope  functionScope  joinedScope  leftScope  rightScope  
[BugLab_Variable_Misuse]^new Scope ( syntacticScope.getRootNode (  ) , functionScope.getTypeOfThis (  )  )  ) ;^105^^^^^82^106^new Scope ( functionScope.getRootNode (  ) , functionScope.getTypeOfThis (  )  )  ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] <init> [RETURN_TYPE] Scope)   AbstractCompiler compiler Node> cfg ReverseAbstractInterpreter reverseInterpreter Scope functionScope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Var  var  ControlFlowGraph  cfg  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Iterator  varIt  FlowScope  bottomScope  functionScope  joinedScope  leftScope  rightScope  
[BugLab_Variable_Misuse]^this.toBooleanOutcomes = booleanValues;^1092^^^^^1089^1096^this.toBooleanOutcomes = toBooleanOutcomes;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] <init> [RETURN_TYPE] FlowScope)   BooleanLiteralSet toBooleanOutcomes BooleanLiteralSet booleanValues FlowScope leftScope FlowScope rightScope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  functionScope  joinedScope  leftScope  rightScope  
[BugLab_Variable_Misuse]^this.booleanValues = toBooleanOutcomes;^1093^^^^^1089^1096^this.booleanValues = booleanValues;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] <init> [RETURN_TYPE] FlowScope)   BooleanLiteralSet toBooleanOutcomes BooleanLiteralSet booleanValues FlowScope leftScope FlowScope rightScope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  functionScope  joinedScope  leftScope  rightScope  
[BugLab_Variable_Misuse]^this.leftScope = rightScope;^1094^^^^^1089^1096^this.leftScope = leftScope;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] <init> [RETURN_TYPE] FlowScope)   BooleanLiteralSet toBooleanOutcomes BooleanLiteralSet booleanValues FlowScope leftScope FlowScope rightScope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  functionScope  joinedScope  leftScope  rightScope  
[BugLab_Variable_Misuse]^this.rightScope = leftScope;^1095^^^^^1089^1096^this.rightScope = rightScope;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] <init> [RETURN_TYPE] FlowScope)   BooleanLiteralSet toBooleanOutcomes BooleanLiteralSet booleanValues FlowScope leftScope FlowScope rightScope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  functionScope  joinedScope  leftScope  rightScope  
[BugLab_Variable_Misuse]^return rightScope;^110^^^^^109^111^return bottomScope;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] createInitialEstimateLattice [RETURN_TYPE] FlowScope   [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  functionScope  joinedScope  leftScope  rightScope  
[BugLab_Variable_Misuse]^if  ( input == rightScope )  {^122^^^^^119^129^if  ( input == bottomScope )  {^[CLASS] TypeInference BooleanOutcomePair  [METHOD] flowThrough [RETURN_TYPE] FlowScope   Node n FlowScope input [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  functionScope  input  joinedScope  leftScope  output  rightScope  
[BugLab_Argument_Swapping]^if  ( bottomScope == input )  {^122^^^^^119^129^if  ( input == bottomScope )  {^[CLASS] TypeInference BooleanOutcomePair  [METHOD] flowThrough [RETURN_TYPE] FlowScope   Node n FlowScope input [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  functionScope  input  joinedScope  leftScope  output  rightScope  
[BugLab_Wrong_Operator]^if  ( input != bottomScope )  {^122^^^^^119^129^if  ( input == bottomScope )  {^[CLASS] TypeInference BooleanOutcomePair  [METHOD] flowThrough [RETURN_TYPE] FlowScope   Node n FlowScope input [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  functionScope  input  joinedScope  leftScope  output  rightScope  
[BugLab_Variable_Misuse]^return rightScope;^123^^^^^119^129^return input;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] flowThrough [RETURN_TYPE] FlowScope   Node n FlowScope input [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  functionScope  input  joinedScope  leftScope  output  rightScope  
[BugLab_Variable_Misuse]^FlowScope output = leftScope.createChildFlowScope (  ) ;^126^^^^^119^129^FlowScope output = input.createChildFlowScope (  ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] flowThrough [RETURN_TYPE] FlowScope   Node n FlowScope input [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  functionScope  input  joinedScope  leftScope  output  rightScope  
[BugLab_Variable_Misuse]^output = traverse ( n, leftScope ) ;^127^^^^^119^129^output = traverse ( n, output ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] flowThrough [RETURN_TYPE] FlowScope   Node n FlowScope input [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  functionScope  input  joinedScope  leftScope  output  rightScope  
[BugLab_Argument_Swapping]^output = traverse ( output, n ) ;^127^^^^^119^129^output = traverse ( n, output ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] flowThrough [RETURN_TYPE] FlowScope   Node n FlowScope input [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  functionScope  input  joinedScope  leftScope  output  rightScope  
[BugLab_Variable_Misuse]^output = traverse ( n, joinedScope ) ;^127^^^^^119^129^output = traverse ( n, output ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] flowThrough [RETURN_TYPE] FlowScope   Node n FlowScope input [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  functionScope  input  joinedScope  leftScope  output  rightScope  
[BugLab_Variable_Misuse]^return leftScope;^128^^^^^119^129^return output;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] flowThrough [RETURN_TYPE] FlowScope   Node n FlowScope input [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  functionScope  input  joinedScope  leftScope  output  rightScope  
[BugLab_Variable_Misuse]^FlowScope output = flowThrough ( item, input ) ;^139^^^^^124^154^FlowScope output = flowThrough ( source, input ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] branchedFlowThrough [RETURN_TYPE] List   Node source FlowScope input [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  Node  condition  item  source  BooleanLiteralSet  booleanValues  toBooleanOutcomes  AbstractCompiler  compiler  JSTypeRegistry  registry  DiGraphEdge  branchEdge  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanOutcomePair  conditionOutcomes  Branch  branch  List  branchEdges  result  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  
[BugLab_Variable_Misuse]^FlowScope output = flowThrough ( source, leftScope ) ;^139^^^^^124^154^FlowScope output = flowThrough ( source, input ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] branchedFlowThrough [RETURN_TYPE] List   Node source FlowScope input [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  Node  condition  item  source  BooleanLiteralSet  booleanValues  toBooleanOutcomes  AbstractCompiler  compiler  JSTypeRegistry  registry  DiGraphEdge  branchEdge  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanOutcomePair  conditionOutcomes  Branch  branch  List  branchEdges  result  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  
[BugLab_Argument_Swapping]^FlowScope output = flowThrough ( input, source ) ;^139^^^^^124^154^FlowScope output = flowThrough ( source, input ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] branchedFlowThrough [RETURN_TYPE] List   Node source FlowScope input [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  Node  condition  item  source  BooleanLiteralSet  booleanValues  toBooleanOutcomes  AbstractCompiler  compiler  JSTypeRegistry  registry  DiGraphEdge  branchEdge  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanOutcomePair  conditionOutcomes  Branch  branch  List  branchEdges  result  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  
[BugLab_Variable_Misuse]^FlowScope output = flowThrough ( source, rightScope ) ;^139^^^^^124^154^FlowScope output = flowThrough ( source, input ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] branchedFlowThrough [RETURN_TYPE] List   Node source FlowScope input [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  Node  condition  item  source  BooleanLiteralSet  booleanValues  toBooleanOutcomes  AbstractCompiler  compiler  JSTypeRegistry  registry  DiGraphEdge  branchEdge  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanOutcomePair  conditionOutcomes  Branch  branch  List  branchEdges  result  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  
[BugLab_Variable_Misuse]^List<DiGraphEdge<Node, Branch>> branchEdges = getCfg (  ) .getOutEdges ( item ) ;^144^^^^^129^159^List<DiGraphEdge<Node, Branch>> branchEdges = getCfg (  ) .getOutEdges ( source ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] branchedFlowThrough [RETURN_TYPE] List   Node source FlowScope input [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  Node  condition  item  source  BooleanLiteralSet  booleanValues  toBooleanOutcomes  AbstractCompiler  compiler  JSTypeRegistry  registry  DiGraphEdge  branchEdge  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanOutcomePair  conditionOutcomes  Branch  branch  List  branchEdges  result  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  
[BugLab_Variable_Misuse]^if  ( NodeUtil.isForIn ( condition )  )  {^152^^^^^137^167^if  ( NodeUtil.isForIn ( source )  )  {^[CLASS] TypeInference BooleanOutcomePair  [METHOD] branchedFlowThrough [RETURN_TYPE] List   Node source FlowScope input [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  Node  condition  item  source  BooleanLiteralSet  booleanValues  toBooleanOutcomes  AbstractCompiler  compiler  JSTypeRegistry  registry  DiGraphEdge  branchEdge  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanOutcomePair  conditionOutcomes  Branch  branch  List  branchEdges  result  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  
[BugLab_Variable_Misuse]^if  ( source.getType (  )  == Token.VAR )  {^155^^^^^140^170^if  ( item.getType (  )  == Token.VAR )  {^[CLASS] TypeInference BooleanOutcomePair  [METHOD] branchedFlowThrough [RETURN_TYPE] List   Node source FlowScope input [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  Node  condition  item  source  BooleanLiteralSet  booleanValues  toBooleanOutcomes  AbstractCompiler  compiler  JSTypeRegistry  registry  DiGraphEdge  branchEdge  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanOutcomePair  conditionOutcomes  Branch  branch  List  branchEdges  result  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  
[BugLab_Variable_Misuse]^if  ( item.getType (  )  == Token.4 )  {^155^^^^^140^170^if  ( item.getType (  )  == Token.VAR )  {^[CLASS] TypeInference BooleanOutcomePair  [METHOD] branchedFlowThrough [RETURN_TYPE] List   Node source FlowScope input [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  Node  condition  item  source  BooleanLiteralSet  booleanValues  toBooleanOutcomes  AbstractCompiler  compiler  JSTypeRegistry  registry  DiGraphEdge  branchEdge  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanOutcomePair  conditionOutcomes  Branch  branch  List  branchEdges  result  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  
[BugLab_Wrong_Operator]^if  ( item.getType (  )  != Token.VAR )  {^155^^^^^140^170^if  ( item.getType (  )  == Token.VAR )  {^[CLASS] TypeInference BooleanOutcomePair  [METHOD] branchedFlowThrough [RETURN_TYPE] List   Node source FlowScope input [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  Node  condition  item  source  BooleanLiteralSet  booleanValues  toBooleanOutcomes  AbstractCompiler  compiler  JSTypeRegistry  registry  DiGraphEdge  branchEdge  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanOutcomePair  conditionOutcomes  Branch  branch  List  branchEdges  result  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  
[BugLab_Variable_Misuse]^item = source.getFirstChild (  ) ;^156^^^^^141^171^item = item.getFirstChild (  ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] branchedFlowThrough [RETURN_TYPE] List   Node source FlowScope input [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  Node  condition  item  source  BooleanLiteralSet  booleanValues  toBooleanOutcomes  AbstractCompiler  compiler  JSTypeRegistry  registry  DiGraphEdge  branchEdge  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanOutcomePair  conditionOutcomes  Branch  branch  List  branchEdges  result  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  
[BugLab_Variable_Misuse]^if  ( source.getType (  )  == Token.NAME )  {^158^^^^^143^173^if  ( item.getType (  )  == Token.NAME )  {^[CLASS] TypeInference BooleanOutcomePair  [METHOD] branchedFlowThrough [RETURN_TYPE] List   Node source FlowScope input [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  Node  condition  item  source  BooleanLiteralSet  booleanValues  toBooleanOutcomes  AbstractCompiler  compiler  JSTypeRegistry  registry  DiGraphEdge  branchEdge  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanOutcomePair  conditionOutcomes  Branch  branch  List  branchEdges  result  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  
[BugLab_Wrong_Operator]^if  ( item.getType (  )  != Token.NAME )  {^158^^^^^143^173^if  ( item.getType (  )  == Token.NAME )  {^[CLASS] TypeInference BooleanOutcomePair  [METHOD] branchedFlowThrough [RETURN_TYPE] List   Node source FlowScope input [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  Node  condition  item  source  BooleanLiteralSet  booleanValues  toBooleanOutcomes  AbstractCompiler  compiler  JSTypeRegistry  registry  DiGraphEdge  branchEdge  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanOutcomePair  conditionOutcomes  Branch  branch  List  branchEdges  result  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  
[BugLab_Variable_Misuse]^newScope = leftScope;^162^^^^^147^177^newScope = informed;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] branchedFlowThrough [RETURN_TYPE] List   Node source FlowScope input [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  Node  condition  item  source  BooleanLiteralSet  booleanValues  toBooleanOutcomes  AbstractCompiler  compiler  JSTypeRegistry  registry  DiGraphEdge  branchEdge  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanOutcomePair  conditionOutcomes  Branch  branch  List  branchEdges  result  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  
[BugLab_Variable_Misuse]^FlowScope informed = rightScope.createChildFlowScope (  ) ;^159^^^^^144^174^FlowScope informed = output.createChildFlowScope (  ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] branchedFlowThrough [RETURN_TYPE] List   Node source FlowScope input [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  Node  condition  item  source  BooleanLiteralSet  booleanValues  toBooleanOutcomes  AbstractCompiler  compiler  JSTypeRegistry  registry  DiGraphEdge  branchEdge  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanOutcomePair  conditionOutcomes  Branch  branch  List  branchEdges  result  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  
[BugLab_Variable_Misuse]^redeclare ( informed, source.getString (  ) , getNativeType ( STRING_TYPE )  ) ;^160^161^^^^145^175^redeclare ( informed, item.getString (  ) , getNativeType ( STRING_TYPE )  ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] branchedFlowThrough [RETURN_TYPE] List   Node source FlowScope input [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  Node  condition  item  source  BooleanLiteralSet  booleanValues  toBooleanOutcomes  AbstractCompiler  compiler  JSTypeRegistry  registry  DiGraphEdge  branchEdge  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanOutcomePair  conditionOutcomes  Branch  branch  List  branchEdges  result  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  
[BugLab_Argument_Swapping]^redeclare ( item, informed.getString (  ) , getNativeType ( STRING_TYPE )  ) ;^160^161^^^^145^175^redeclare ( informed, item.getString (  ) , getNativeType ( STRING_TYPE )  ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] branchedFlowThrough [RETURN_TYPE] List   Node source FlowScope input [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  Node  condition  item  source  BooleanLiteralSet  booleanValues  toBooleanOutcomes  AbstractCompiler  compiler  JSTypeRegistry  registry  DiGraphEdge  branchEdge  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanOutcomePair  conditionOutcomes  Branch  branch  List  branchEdges  result  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  
[BugLab_Variable_Misuse]^newScope = rightScope;^162^^^^^147^177^newScope = informed;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] branchedFlowThrough [RETURN_TYPE] List   Node source FlowScope input [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  Node  condition  item  source  BooleanLiteralSet  booleanValues  toBooleanOutcomes  AbstractCompiler  compiler  JSTypeRegistry  registry  DiGraphEdge  branchEdge  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanOutcomePair  conditionOutcomes  Branch  branch  List  branchEdges  result  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  
[BugLab_Variable_Misuse]^Node item = condition.getFirstChild (  ) ;^154^^^^^139^169^Node item = source.getFirstChild (  ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] branchedFlowThrough [RETURN_TYPE] List   Node source FlowScope input [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  Node  condition  item  source  BooleanLiteralSet  booleanValues  toBooleanOutcomes  AbstractCompiler  compiler  JSTypeRegistry  registry  DiGraphEdge  branchEdge  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanOutcomePair  conditionOutcomes  Branch  branch  List  branchEdges  result  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  
[BugLab_Variable_Misuse]^Node item = item.getFirstChild (  ) ;^154^^^^^139^169^Node item = source.getFirstChild (  ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] branchedFlowThrough [RETURN_TYPE] List   Node source FlowScope input [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  Node  condition  item  source  BooleanLiteralSet  booleanValues  toBooleanOutcomes  AbstractCompiler  compiler  JSTypeRegistry  registry  DiGraphEdge  branchEdge  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanOutcomePair  conditionOutcomes  Branch  branch  List  branchEdges  result  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  
[BugLab_Variable_Misuse]^redeclare ( rightScope, item.getString (  ) , getNativeType ( STRING_TYPE )  ) ;^160^161^^^^145^175^redeclare ( informed, item.getString (  ) , getNativeType ( STRING_TYPE )  ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] branchedFlowThrough [RETURN_TYPE] List   Node source FlowScope input [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  Node  condition  item  source  BooleanLiteralSet  booleanValues  toBooleanOutcomes  AbstractCompiler  compiler  JSTypeRegistry  registry  DiGraphEdge  branchEdge  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanOutcomePair  conditionOutcomes  Branch  branch  List  branchEdges  result  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  
[BugLab_Wrong_Operator]^if  ( item.getType (  )  <= Token.NAME )  {^158^^^^^143^173^if  ( item.getType (  )  == Token.NAME )  {^[CLASS] TypeInference BooleanOutcomePair  [METHOD] branchedFlowThrough [RETURN_TYPE] List   Node source FlowScope input [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  Node  condition  item  source  BooleanLiteralSet  booleanValues  toBooleanOutcomes  AbstractCompiler  compiler  JSTypeRegistry  registry  DiGraphEdge  branchEdge  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanOutcomePair  conditionOutcomes  Branch  branch  List  branchEdges  result  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  
[BugLab_Variable_Misuse]^FlowScope informed = leftScope.createChildFlowScope (  ) ;^159^^^^^144^174^FlowScope informed = output.createChildFlowScope (  ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] branchedFlowThrough [RETURN_TYPE] List   Node source FlowScope input [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  Node  condition  item  source  BooleanLiteralSet  booleanValues  toBooleanOutcomes  AbstractCompiler  compiler  JSTypeRegistry  registry  DiGraphEdge  branchEdge  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanOutcomePair  conditionOutcomes  Branch  branch  List  branchEdges  result  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  
[BugLab_Variable_Misuse]^redeclare ( leftScope, item.getString (  ) , getNativeType ( STRING_TYPE )  ) ;^160^161^^^^145^175^redeclare ( informed, item.getString (  ) , getNativeType ( STRING_TYPE )  ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] branchedFlowThrough [RETURN_TYPE] List   Node source FlowScope input [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  Node  condition  item  source  BooleanLiteralSet  booleanValues  toBooleanOutcomes  AbstractCompiler  compiler  JSTypeRegistry  registry  DiGraphEdge  branchEdge  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanOutcomePair  conditionOutcomes  Branch  branch  List  branchEdges  result  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  
[BugLab_Variable_Misuse]^if  ( source == null )  {^170^^^^^155^185^if  ( condition == null )  {^[CLASS] TypeInference BooleanOutcomePair  [METHOD] branchedFlowThrough [RETURN_TYPE] List   Node source FlowScope input [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  Node  condition  item  source  BooleanLiteralSet  booleanValues  toBooleanOutcomes  AbstractCompiler  compiler  JSTypeRegistry  registry  DiGraphEdge  branchEdge  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanOutcomePair  conditionOutcomes  Branch  branch  List  branchEdges  result  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  
[BugLab_Wrong_Operator]^if  ( condition != null )  {^170^^^^^155^185^if  ( condition == null )  {^[CLASS] TypeInference BooleanOutcomePair  [METHOD] branchedFlowThrough [RETURN_TYPE] List   Node source FlowScope input [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  Node  condition  item  source  BooleanLiteralSet  booleanValues  toBooleanOutcomes  AbstractCompiler  compiler  JSTypeRegistry  registry  DiGraphEdge  branchEdge  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanOutcomePair  conditionOutcomes  Branch  branch  List  branchEdges  result  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  
[BugLab_Variable_Misuse]^if  ( item == null && source.getType (  )  == Token.CASE )  {^172^^^^^157^187^if  ( condition == null && source.getType (  )  == Token.CASE )  {^[CLASS] TypeInference BooleanOutcomePair  [METHOD] branchedFlowThrough [RETURN_TYPE] List   Node source FlowScope input [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  Node  condition  item  source  BooleanLiteralSet  booleanValues  toBooleanOutcomes  AbstractCompiler  compiler  JSTypeRegistry  registry  DiGraphEdge  branchEdge  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanOutcomePair  conditionOutcomes  Branch  branch  List  branchEdges  result  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  
[BugLab_Variable_Misuse]^if  ( condition == null && item.getType (  )  == Token.CASE )  {^172^^^^^157^187^if  ( condition == null && source.getType (  )  == Token.CASE )  {^[CLASS] TypeInference BooleanOutcomePair  [METHOD] branchedFlowThrough [RETURN_TYPE] List   Node source FlowScope input [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  Node  condition  item  source  BooleanLiteralSet  booleanValues  toBooleanOutcomes  AbstractCompiler  compiler  JSTypeRegistry  registry  DiGraphEdge  branchEdge  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanOutcomePair  conditionOutcomes  Branch  branch  List  branchEdges  result  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  
[BugLab_Wrong_Operator]^if  ( condition == null || source.getType (  )  == Token.CASE )  {^172^^^^^157^187^if  ( condition == null && source.getType (  )  == Token.CASE )  {^[CLASS] TypeInference BooleanOutcomePair  [METHOD] branchedFlowThrough [RETURN_TYPE] List   Node source FlowScope input [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  Node  condition  item  source  BooleanLiteralSet  booleanValues  toBooleanOutcomes  AbstractCompiler  compiler  JSTypeRegistry  registry  DiGraphEdge  branchEdge  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanOutcomePair  conditionOutcomes  Branch  branch  List  branchEdges  result  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  
[BugLab_Wrong_Operator]^if  ( condition != null && source.getType (  )  == Token.CASE )  {^172^^^^^157^187^if  ( condition == null && source.getType (  )  == Token.CASE )  {^[CLASS] TypeInference BooleanOutcomePair  [METHOD] branchedFlowThrough [RETURN_TYPE] List   Node source FlowScope input [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  Node  condition  item  source  BooleanLiteralSet  booleanValues  toBooleanOutcomes  AbstractCompiler  compiler  JSTypeRegistry  registry  DiGraphEdge  branchEdge  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanOutcomePair  conditionOutcomes  Branch  branch  List  branchEdges  result  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  
[BugLab_Variable_Misuse]^condition = createSwitchCaseConditionExpression ( item ) ;^173^^^^^158^188^condition = createSwitchCaseConditionExpression ( source ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] branchedFlowThrough [RETURN_TYPE] List   Node source FlowScope input [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  Node  condition  item  source  BooleanLiteralSet  booleanValues  toBooleanOutcomes  AbstractCompiler  compiler  JSTypeRegistry  registry  DiGraphEdge  branchEdge  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanOutcomePair  conditionOutcomes  Branch  branch  List  branchEdges  result  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  
[BugLab_Variable_Misuse]^condition = NodeUtil.getConditionExpression ( item ) ;^171^^^^^156^186^condition = NodeUtil.getConditionExpression ( source ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] branchedFlowThrough [RETURN_TYPE] List   Node source FlowScope input [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  Node  condition  item  source  BooleanLiteralSet  booleanValues  toBooleanOutcomes  AbstractCompiler  compiler  JSTypeRegistry  registry  DiGraphEdge  branchEdge  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanOutcomePair  conditionOutcomes  Branch  branch  List  branchEdges  result  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  
[BugLab_Variable_Misuse]^if  ( source == null && source.getType (  )  == Token.CASE )  {^172^^^^^157^187^if  ( condition == null && source.getType (  )  == Token.CASE )  {^[CLASS] TypeInference BooleanOutcomePair  [METHOD] branchedFlowThrough [RETURN_TYPE] List   Node source FlowScope input [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  Node  condition  item  source  BooleanLiteralSet  booleanValues  toBooleanOutcomes  AbstractCompiler  compiler  JSTypeRegistry  registry  DiGraphEdge  branchEdge  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanOutcomePair  conditionOutcomes  Branch  branch  List  branchEdges  result  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  
[BugLab_Argument_Swapping]^if  ( source == null && condition.getType (  )  == Token.CASE )  {^172^^^^^157^187^if  ( condition == null && source.getType (  )  == Token.CASE )  {^[CLASS] TypeInference BooleanOutcomePair  [METHOD] branchedFlowThrough [RETURN_TYPE] List   Node source FlowScope input [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  Node  condition  item  source  BooleanLiteralSet  booleanValues  toBooleanOutcomes  AbstractCompiler  compiler  JSTypeRegistry  registry  DiGraphEdge  branchEdge  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanOutcomePair  conditionOutcomes  Branch  branch  List  branchEdges  result  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  
[BugLab_Wrong_Operator]^if  ( condition == null )  {^177^^^^^162^192^if  ( condition != null )  {^[CLASS] TypeInference BooleanOutcomePair  [METHOD] branchedFlowThrough [RETURN_TYPE] List   Node source FlowScope input [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  Node  condition  item  source  BooleanLiteralSet  booleanValues  toBooleanOutcomes  AbstractCompiler  compiler  JSTypeRegistry  registry  DiGraphEdge  branchEdge  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanOutcomePair  conditionOutcomes  Branch  branch  List  branchEdges  result  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  
[BugLab_Variable_Misuse]^if  ( source.getType (  )  == Token.AND || condition.getType (  )  == Token.OR )  {^178^179^^^^163^193^if  ( condition.getType (  )  == Token.AND || condition.getType (  )  == Token.OR )  {^[CLASS] TypeInference BooleanOutcomePair  [METHOD] branchedFlowThrough [RETURN_TYPE] List   Node source FlowScope input [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  Node  condition  item  source  BooleanLiteralSet  booleanValues  toBooleanOutcomes  AbstractCompiler  compiler  JSTypeRegistry  registry  DiGraphEdge  branchEdge  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanOutcomePair  conditionOutcomes  Branch  branch  List  branchEdges  result  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  
[BugLab_Wrong_Operator]^if  ( condition.getType (  )  == Token.AND && condition.getType (  )  == Token.OR )  {^178^179^^^^163^193^if  ( condition.getType (  )  == Token.AND || condition.getType (  )  == Token.OR )  {^[CLASS] TypeInference BooleanOutcomePair  [METHOD] branchedFlowThrough [RETURN_TYPE] List   Node source FlowScope input [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  Node  condition  item  source  BooleanLiteralSet  booleanValues  toBooleanOutcomes  AbstractCompiler  compiler  JSTypeRegistry  registry  DiGraphEdge  branchEdge  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanOutcomePair  conditionOutcomes  Branch  branch  List  branchEdges  result  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  
[BugLab_Wrong_Operator]^if  ( condition.getType (  )  >= Token.AND || condition.getType (  )  == Token.OR )  {^178^179^^^^163^193^if  ( condition.getType (  )  == Token.AND || condition.getType (  )  == Token.OR )  {^[CLASS] TypeInference BooleanOutcomePair  [METHOD] branchedFlowThrough [RETURN_TYPE] List   Node source FlowScope input [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  Node  condition  item  source  BooleanLiteralSet  booleanValues  toBooleanOutcomes  AbstractCompiler  compiler  JSTypeRegistry  registry  DiGraphEdge  branchEdge  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanOutcomePair  conditionOutcomes  Branch  branch  List  branchEdges  result  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  
[BugLab_Wrong_Operator]^if  ( condition.getType (  )  <= Token.AND || condition.getType (  )  == Token.OR )  {^178^179^^^^163^193^if  ( condition.getType (  )  == Token.AND || condition.getType (  )  == Token.OR )  {^[CLASS] TypeInference BooleanOutcomePair  [METHOD] branchedFlowThrough [RETURN_TYPE] List   Node source FlowScope input [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  Node  condition  item  source  BooleanLiteralSet  booleanValues  toBooleanOutcomes  AbstractCompiler  compiler  JSTypeRegistry  registry  DiGraphEdge  branchEdge  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanOutcomePair  conditionOutcomes  Branch  branch  List  branchEdges  result  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  
[BugLab_Wrong_Operator]^if  ( condition.getType (  )  < Token.AND || condition.getType (  )  == Token.OR )  {^178^179^^^^163^193^if  ( condition.getType (  )  == Token.AND || condition.getType (  )  == Token.OR )  {^[CLASS] TypeInference BooleanOutcomePair  [METHOD] branchedFlowThrough [RETURN_TYPE] List   Node source FlowScope input [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  Node  condition  item  source  BooleanLiteralSet  booleanValues  toBooleanOutcomes  AbstractCompiler  compiler  JSTypeRegistry  registry  DiGraphEdge  branchEdge  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanOutcomePair  conditionOutcomes  Branch  branch  List  branchEdges  result  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  
[BugLab_Wrong_Operator]^if  ( condition.getType (  )  != Token.AND || condition.getType (  )  == Token.OR )  {^178^179^^^^163^193^if  ( condition.getType (  )  == Token.AND || condition.getType (  )  == Token.OR )  {^[CLASS] TypeInference BooleanOutcomePair  [METHOD] branchedFlowThrough [RETURN_TYPE] List   Node source FlowScope input [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  Node  condition  item  source  BooleanLiteralSet  booleanValues  toBooleanOutcomes  AbstractCompiler  compiler  JSTypeRegistry  registry  DiGraphEdge  branchEdge  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanOutcomePair  conditionOutcomes  Branch  branch  List  branchEdges  result  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  
[BugLab_Variable_Misuse]^if  ( newScope == null )  {^208^^^^^193^223^if  ( conditionFlowScope == null )  {^[CLASS] TypeInference BooleanOutcomePair  [METHOD] branchedFlowThrough [RETURN_TYPE] List   Node source FlowScope input [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  Node  condition  item  source  BooleanLiteralSet  booleanValues  toBooleanOutcomes  AbstractCompiler  compiler  JSTypeRegistry  registry  DiGraphEdge  branchEdge  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanOutcomePair  conditionOutcomes  Branch  branch  List  branchEdges  result  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  
[BugLab_Variable_Misuse]^if  ( sourceFlowScope == null )  {^208^^^^^193^223^if  ( conditionFlowScope == null )  {^[CLASS] TypeInference BooleanOutcomePair  [METHOD] branchedFlowThrough [RETURN_TYPE] List   Node source FlowScope input [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  Node  condition  item  source  BooleanLiteralSet  booleanValues  toBooleanOutcomes  AbstractCompiler  compiler  JSTypeRegistry  registry  DiGraphEdge  branchEdge  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanOutcomePair  conditionOutcomes  Branch  branch  List  branchEdges  result  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  
[BugLab_Wrong_Operator]^if  ( conditionFlowScope != null )  {^208^^^^^193^223^if  ( conditionFlowScope == null )  {^[CLASS] TypeInference BooleanOutcomePair  [METHOD] branchedFlowThrough [RETURN_TYPE] List   Node source FlowScope input [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  Node  condition  item  source  BooleanLiteralSet  booleanValues  toBooleanOutcomes  AbstractCompiler  compiler  JSTypeRegistry  registry  DiGraphEdge  branchEdge  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanOutcomePair  conditionOutcomes  Branch  branch  List  branchEdges  result  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  
[BugLab_Variable_Misuse]^conditionFlowScope = traverse ( source, output.createChildFlowScope (  )  ) ;^209^210^^^^194^224^conditionFlowScope = traverse ( condition, output.createChildFlowScope (  )  ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] branchedFlowThrough [RETURN_TYPE] List   Node source FlowScope input [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  Node  condition  item  source  BooleanLiteralSet  booleanValues  toBooleanOutcomes  AbstractCompiler  compiler  JSTypeRegistry  registry  DiGraphEdge  branchEdge  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanOutcomePair  conditionOutcomes  Branch  branch  List  branchEdges  result  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  
[BugLab_Variable_Misuse]^conditionFlowScope = traverse ( condition, rightScope.createChildFlowScope (  )  ) ;^209^210^^^^194^224^conditionFlowScope = traverse ( condition, output.createChildFlowScope (  )  ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] branchedFlowThrough [RETURN_TYPE] List   Node source FlowScope input [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  Node  condition  item  source  BooleanLiteralSet  booleanValues  toBooleanOutcomes  AbstractCompiler  compiler  JSTypeRegistry  registry  DiGraphEdge  branchEdge  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanOutcomePair  conditionOutcomes  Branch  branch  List  branchEdges  result  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  
[BugLab_Argument_Swapping]^conditionFlowScope = traverse ( output, condition.createChildFlowScope (  )  ) ;^209^210^^^^194^224^conditionFlowScope = traverse ( condition, output.createChildFlowScope (  )  ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] branchedFlowThrough [RETURN_TYPE] List   Node source FlowScope input [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  Node  condition  item  source  BooleanLiteralSet  booleanValues  toBooleanOutcomes  AbstractCompiler  compiler  JSTypeRegistry  registry  DiGraphEdge  branchEdge  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanOutcomePair  conditionOutcomes  Branch  branch  List  branchEdges  result  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  
[BugLab_Variable_Misuse]^traverse ( source, output.createChildFlowScope (  )  ) ;^210^^^^^195^225^traverse ( condition, output.createChildFlowScope (  )  ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] branchedFlowThrough [RETURN_TYPE] List   Node source FlowScope input [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  Node  condition  item  source  BooleanLiteralSet  booleanValues  toBooleanOutcomes  AbstractCompiler  compiler  JSTypeRegistry  registry  DiGraphEdge  branchEdge  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanOutcomePair  conditionOutcomes  Branch  branch  List  branchEdges  result  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  
[BugLab_Variable_Misuse]^traverse ( condition, rightScope.createChildFlowScope (  )  ) ;^210^^^^^195^225^traverse ( condition, output.createChildFlowScope (  )  ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] branchedFlowThrough [RETURN_TYPE] List   Node source FlowScope input [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  Node  condition  item  source  BooleanLiteralSet  booleanValues  toBooleanOutcomes  AbstractCompiler  compiler  JSTypeRegistry  registry  DiGraphEdge  branchEdge  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanOutcomePair  conditionOutcomes  Branch  branch  List  branchEdges  result  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  
[BugLab_Argument_Swapping]^traverse ( output, condition.createChildFlowScope (  )  ) ;^210^^^^^195^225^traverse ( condition, output.createChildFlowScope (  )  ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] branchedFlowThrough [RETURN_TYPE] List   Node source FlowScope input [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  Node  condition  item  source  BooleanLiteralSet  booleanValues  toBooleanOutcomes  AbstractCompiler  compiler  JSTypeRegistry  registry  DiGraphEdge  branchEdge  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanOutcomePair  conditionOutcomes  Branch  branch  List  branchEdges  result  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  
[BugLab_Variable_Misuse]^traverse ( condition, joinedScope.createChildFlowScope (  )  ) ;^210^^^^^195^225^traverse ( condition, output.createChildFlowScope (  )  ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] branchedFlowThrough [RETURN_TYPE] List   Node source FlowScope input [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  Node  condition  item  source  BooleanLiteralSet  booleanValues  toBooleanOutcomes  AbstractCompiler  compiler  JSTypeRegistry  registry  DiGraphEdge  branchEdge  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanOutcomePair  conditionOutcomes  Branch  branch  List  branchEdges  result  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  
[BugLab_Variable_Misuse]^newScope = reverseInterpreter.getPreciserScopeKnowingConditionOutcome ( source, conditionFlowScope, branch == Branch.ON_TRUE ) ;^212^213^214^^^197^227^newScope = reverseInterpreter.getPreciserScopeKnowingConditionOutcome ( condition, conditionFlowScope, branch == Branch.ON_TRUE ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] branchedFlowThrough [RETURN_TYPE] List   Node source FlowScope input [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  Node  condition  item  source  BooleanLiteralSet  booleanValues  toBooleanOutcomes  AbstractCompiler  compiler  JSTypeRegistry  registry  DiGraphEdge  branchEdge  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanOutcomePair  conditionOutcomes  Branch  branch  List  branchEdges  result  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  
[BugLab_Variable_Misuse]^newScope = reverseInterpreter.getPreciserScopeKnowingConditionOutcome ( condition, conditionFlowScope, branch == Branch.3 ) ;^212^213^214^^^197^227^newScope = reverseInterpreter.getPreciserScopeKnowingConditionOutcome ( condition, conditionFlowScope, branch == Branch.ON_TRUE ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] branchedFlowThrough [RETURN_TYPE] List   Node source FlowScope input [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  Node  condition  item  source  BooleanLiteralSet  booleanValues  toBooleanOutcomes  AbstractCompiler  compiler  JSTypeRegistry  registry  DiGraphEdge  branchEdge  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanOutcomePair  conditionOutcomes  Branch  branch  List  branchEdges  result  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  
[BugLab_Argument_Swapping]^newScope = reverseInterpreter.getPreciserScopeKnowingConditionOutcome ( branch, conditionFlowScope, condition == Branch.ON_TRUE ) ;^212^213^214^^^197^227^newScope = reverseInterpreter.getPreciserScopeKnowingConditionOutcome ( condition, conditionFlowScope, branch == Branch.ON_TRUE ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] branchedFlowThrough [RETURN_TYPE] List   Node source FlowScope input [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  Node  condition  item  source  BooleanLiteralSet  booleanValues  toBooleanOutcomes  AbstractCompiler  compiler  JSTypeRegistry  registry  DiGraphEdge  branchEdge  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanOutcomePair  conditionOutcomes  Branch  branch  List  branchEdges  result  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  
[BugLab_Argument_Swapping]^newScope = reverseInterpreter.getPreciserScopeKnowingConditionOutcome ( conditionFlowScope, condition, branch == Branch.ON_TRUE ) ;^212^213^214^^^197^227^newScope = reverseInterpreter.getPreciserScopeKnowingConditionOutcome ( condition, conditionFlowScope, branch == Branch.ON_TRUE ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] branchedFlowThrough [RETURN_TYPE] List   Node source FlowScope input [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  Node  condition  item  source  BooleanLiteralSet  booleanValues  toBooleanOutcomes  AbstractCompiler  compiler  JSTypeRegistry  registry  DiGraphEdge  branchEdge  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanOutcomePair  conditionOutcomes  Branch  branch  List  branchEdges  result  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  
[BugLab_Argument_Swapping]^newScope = branch.getPreciserScopeKnowingConditionOutcome ( condition, conditionFlowScope, reverseInterpreter == Branch.ON_TRUE ) ;^212^213^214^^^197^227^newScope = reverseInterpreter.getPreciserScopeKnowingConditionOutcome ( condition, conditionFlowScope, branch == Branch.ON_TRUE ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] branchedFlowThrough [RETURN_TYPE] List   Node source FlowScope input [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  Node  condition  item  source  BooleanLiteralSet  booleanValues  toBooleanOutcomes  AbstractCompiler  compiler  JSTypeRegistry  registry  DiGraphEdge  branchEdge  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanOutcomePair  conditionOutcomes  Branch  branch  List  branchEdges  result  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  
[BugLab_Wrong_Operator]^newScope = reverseInterpreter.getPreciserScopeKnowingConditionOutcome ( condition, conditionFlowScope, branch != Branch.ON_TRUE ) ;^212^213^214^^^197^227^newScope = reverseInterpreter.getPreciserScopeKnowingConditionOutcome ( condition, conditionFlowScope, branch == Branch.ON_TRUE ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] branchedFlowThrough [RETURN_TYPE] List   Node source FlowScope input [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  Node  condition  item  source  BooleanLiteralSet  booleanValues  toBooleanOutcomes  AbstractCompiler  compiler  JSTypeRegistry  registry  DiGraphEdge  branchEdge  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanOutcomePair  conditionOutcomes  Branch  branch  List  branchEdges  result  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  
[BugLab_Variable_Misuse]^reverseInterpreter.getPreciserScopeKnowingConditionOutcome ( source, conditionFlowScope, branch == Branch.ON_TRUE ) ;^213^214^^^^198^228^reverseInterpreter.getPreciserScopeKnowingConditionOutcome ( condition, conditionFlowScope, branch == Branch.ON_TRUE ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] branchedFlowThrough [RETURN_TYPE] List   Node source FlowScope input [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  Node  condition  item  source  BooleanLiteralSet  booleanValues  toBooleanOutcomes  AbstractCompiler  compiler  JSTypeRegistry  registry  DiGraphEdge  branchEdge  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanOutcomePair  conditionOutcomes  Branch  branch  List  branchEdges  result  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  
[BugLab_Variable_Misuse]^reverseInterpreter.getPreciserScopeKnowingConditionOutcome ( condition, newScope, branch == Branch.ON_TRUE ) ;^213^214^^^^198^228^reverseInterpreter.getPreciserScopeKnowingConditionOutcome ( condition, conditionFlowScope, branch == Branch.ON_TRUE ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] branchedFlowThrough [RETURN_TYPE] List   Node source FlowScope input [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  Node  condition  item  source  BooleanLiteralSet  booleanValues  toBooleanOutcomes  AbstractCompiler  compiler  JSTypeRegistry  registry  DiGraphEdge  branchEdge  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanOutcomePair  conditionOutcomes  Branch  branch  List  branchEdges  result  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  
[BugLab_Variable_Misuse]^reverseInterpreter.getPreciserScopeKnowingConditionOutcome ( condition, conditionFlowScope, branch == Branch.this ) ;^213^214^^^^198^228^reverseInterpreter.getPreciserScopeKnowingConditionOutcome ( condition, conditionFlowScope, branch == Branch.ON_TRUE ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] branchedFlowThrough [RETURN_TYPE] List   Node source FlowScope input [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  Node  condition  item  source  BooleanLiteralSet  booleanValues  toBooleanOutcomes  AbstractCompiler  compiler  JSTypeRegistry  registry  DiGraphEdge  branchEdge  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanOutcomePair  conditionOutcomes  Branch  branch  List  branchEdges  result  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  
[BugLab_Argument_Swapping]^reverseInterpreter.getPreciserScopeKnowingConditionOutcome ( branch, conditionFlowScope, condition == Branch.ON_TRUE ) ;^213^214^^^^198^228^reverseInterpreter.getPreciserScopeKnowingConditionOutcome ( condition, conditionFlowScope, branch == Branch.ON_TRUE ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] branchedFlowThrough [RETURN_TYPE] List   Node source FlowScope input [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  Node  condition  item  source  BooleanLiteralSet  booleanValues  toBooleanOutcomes  AbstractCompiler  compiler  JSTypeRegistry  registry  DiGraphEdge  branchEdge  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanOutcomePair  conditionOutcomes  Branch  branch  List  branchEdges  result  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  
[BugLab_Wrong_Operator]^reverseInterpreter.getPreciserScopeKnowingConditionOutcome ( condition, conditionFlowScope, branch != Branch.ON_TRUE ) ;^213^214^^^^198^228^reverseInterpreter.getPreciserScopeKnowingConditionOutcome ( condition, conditionFlowScope, branch == Branch.ON_TRUE ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] branchedFlowThrough [RETURN_TYPE] List   Node source FlowScope input [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  Node  condition  item  source  BooleanLiteralSet  booleanValues  toBooleanOutcomes  AbstractCompiler  compiler  JSTypeRegistry  registry  DiGraphEdge  branchEdge  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanOutcomePair  conditionOutcomes  Branch  branch  List  branchEdges  result  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  
[BugLab_Variable_Misuse]^if  ( sourceOutcomes == null )  {^194^^^^^179^209^if  ( conditionOutcomes == null )  {^[CLASS] TypeInference BooleanOutcomePair  [METHOD] branchedFlowThrough [RETURN_TYPE] List   Node source FlowScope input [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  Node  condition  item  source  BooleanLiteralSet  booleanValues  toBooleanOutcomes  AbstractCompiler  compiler  JSTypeRegistry  registry  DiGraphEdge  branchEdge  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanOutcomePair  conditionOutcomes  Branch  branch  List  branchEdges  result  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  
[BugLab_Wrong_Operator]^if  ( conditionOutcomes != null )  {^194^^^^^179^209^if  ( conditionOutcomes == null )  {^[CLASS] TypeInference BooleanOutcomePair  [METHOD] branchedFlowThrough [RETURN_TYPE] List   Node source FlowScope input [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  Node  condition  item  source  BooleanLiteralSet  booleanValues  toBooleanOutcomes  AbstractCompiler  compiler  JSTypeRegistry  registry  DiGraphEdge  branchEdge  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanOutcomePair  conditionOutcomes  Branch  branch  List  branchEdges  result  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  
[BugLab_Variable_Misuse]^conditionOutcomes = condition.getType (  )  == Token.AND ? traverseAnd ( condition, leftScope.createChildFlowScope (  )  )  : traverseOr ( condition, output.createChildFlowScope (  )  ) ;^195^196^197^^^180^210^conditionOutcomes = condition.getType (  )  == Token.AND ? traverseAnd ( condition, output.createChildFlowScope (  )  )  : traverseOr ( condition, output.createChildFlowScope (  )  ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] branchedFlowThrough [RETURN_TYPE] List   Node source FlowScope input [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  Node  condition  item  source  BooleanLiteralSet  booleanValues  toBooleanOutcomes  AbstractCompiler  compiler  JSTypeRegistry  registry  DiGraphEdge  branchEdge  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanOutcomePair  conditionOutcomes  Branch  branch  List  branchEdges  result  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  
[BugLab_Argument_Swapping]^conditionOutcomes = output.getType (  )  == Token.AND ? traverseAnd ( condition, condition.createChildFlowScope (  )  )  : traverseOr ( condition, output.createChildFlowScope (  )  ) ;^195^196^197^^^180^210^conditionOutcomes = condition.getType (  )  == Token.AND ? traverseAnd ( condition, output.createChildFlowScope (  )  )  : traverseOr ( condition, output.createChildFlowScope (  )  ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] branchedFlowThrough [RETURN_TYPE] List   Node source FlowScope input [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  Node  condition  item  source  BooleanLiteralSet  booleanValues  toBooleanOutcomes  AbstractCompiler  compiler  JSTypeRegistry  registry  DiGraphEdge  branchEdge  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanOutcomePair  conditionOutcomes  Branch  branch  List  branchEdges  result  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  
[BugLab_Wrong_Operator]^conditionOutcomes = condition.getType (  )  != Token.AND ? traverseAnd ( condition, output.createChildFlowScope (  )  )  : traverseOr ( condition, output.createChildFlowScope (  )  ) ;^195^196^197^^^180^210^conditionOutcomes = condition.getType (  )  == Token.AND ? traverseAnd ( condition, output.createChildFlowScope (  )  )  : traverseOr ( condition, output.createChildFlowScope (  )  ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] branchedFlowThrough [RETURN_TYPE] List   Node source FlowScope input [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  Node  condition  item  source  BooleanLiteralSet  booleanValues  toBooleanOutcomes  AbstractCompiler  compiler  JSTypeRegistry  registry  DiGraphEdge  branchEdge  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanOutcomePair  conditionOutcomes  Branch  branch  List  branchEdges  result  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  
[BugLab_Variable_Misuse]^conditionOutcomes = source.getType (  )  == Token.AND ? traverseAnd ( condition, output.createChildFlowScope (  )  )  : traverseOr ( condition, output.createChildFlowScope (  )  ) ;^195^196^197^^^180^210^conditionOutcomes = condition.getType (  )  == Token.AND ? traverseAnd ( condition, output.createChildFlowScope (  )  )  : traverseOr ( condition, output.createChildFlowScope (  )  ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] branchedFlowThrough [RETURN_TYPE] List   Node source FlowScope input [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  Node  condition  item  source  BooleanLiteralSet  booleanValues  toBooleanOutcomes  AbstractCompiler  compiler  JSTypeRegistry  registry  DiGraphEdge  branchEdge  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanOutcomePair  conditionOutcomes  Branch  branch  List  branchEdges  result  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  
[BugLab_Variable_Misuse]^traverseAnd ( source, output.createChildFlowScope (  )  )  : traverseOr ( condition, output.createChildFlowScope (  )  ) ;^196^197^^^^181^211^traverseAnd ( condition, output.createChildFlowScope (  )  )  : traverseOr ( condition, output.createChildFlowScope (  )  ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] branchedFlowThrough [RETURN_TYPE] List   Node source FlowScope input [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  Node  condition  item  source  BooleanLiteralSet  booleanValues  toBooleanOutcomes  AbstractCompiler  compiler  JSTypeRegistry  registry  DiGraphEdge  branchEdge  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanOutcomePair  conditionOutcomes  Branch  branch  List  branchEdges  result  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  
[BugLab_Variable_Misuse]^traverseAnd ( condition, joinedScope.createChildFlowScope (  )  )  : traverseOr ( condition, output.createChildFlowScope (  )  ) ;^196^197^^^^181^211^traverseAnd ( condition, output.createChildFlowScope (  )  )  : traverseOr ( condition, output.createChildFlowScope (  )  ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] branchedFlowThrough [RETURN_TYPE] List   Node source FlowScope input [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  Node  condition  item  source  BooleanLiteralSet  booleanValues  toBooleanOutcomes  AbstractCompiler  compiler  JSTypeRegistry  registry  DiGraphEdge  branchEdge  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanOutcomePair  conditionOutcomes  Branch  branch  List  branchEdges  result  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  
[BugLab_Argument_Swapping]^traverseAnd ( output, condition.createChildFlowScope (  )  )  : traverseOr ( condition, output.createChildFlowScope (  )  ) ;^196^197^^^^181^211^traverseAnd ( condition, output.createChildFlowScope (  )  )  : traverseOr ( condition, output.createChildFlowScope (  )  ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] branchedFlowThrough [RETURN_TYPE] List   Node source FlowScope input [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  Node  condition  item  source  BooleanLiteralSet  booleanValues  toBooleanOutcomes  AbstractCompiler  compiler  JSTypeRegistry  registry  DiGraphEdge  branchEdge  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanOutcomePair  conditionOutcomes  Branch  branch  List  branchEdges  result  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  
[BugLab_Variable_Misuse]^traverseAnd ( condition, leftScope.createChildFlowScope (  )  )  : traverseOr ( condition, output.createChildFlowScope (  )  ) ;^196^197^^^^181^211^traverseAnd ( condition, output.createChildFlowScope (  )  )  : traverseOr ( condition, output.createChildFlowScope (  )  ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] branchedFlowThrough [RETURN_TYPE] List   Node source FlowScope input [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  Node  condition  item  source  BooleanLiteralSet  booleanValues  toBooleanOutcomes  AbstractCompiler  compiler  JSTypeRegistry  registry  DiGraphEdge  branchEdge  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanOutcomePair  conditionOutcomes  Branch  branch  List  branchEdges  result  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  
[BugLab_Variable_Misuse]^traverseOr ( source, output.createChildFlowScope (  )  ) ;^197^^^^^182^212^traverseOr ( condition, output.createChildFlowScope (  )  ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] branchedFlowThrough [RETURN_TYPE] List   Node source FlowScope input [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  Node  condition  item  source  BooleanLiteralSet  booleanValues  toBooleanOutcomes  AbstractCompiler  compiler  JSTypeRegistry  registry  DiGraphEdge  branchEdge  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanOutcomePair  conditionOutcomes  Branch  branch  List  branchEdges  result  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  
[BugLab_Variable_Misuse]^traverseOr ( condition, rightScope.createChildFlowScope (  )  ) ;^197^^^^^182^212^traverseOr ( condition, output.createChildFlowScope (  )  ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] branchedFlowThrough [RETURN_TYPE] List   Node source FlowScope input [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  Node  condition  item  source  BooleanLiteralSet  booleanValues  toBooleanOutcomes  AbstractCompiler  compiler  JSTypeRegistry  registry  DiGraphEdge  branchEdge  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanOutcomePair  conditionOutcomes  Branch  branch  List  branchEdges  result  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  
[BugLab_Argument_Swapping]^traverseOr ( output, condition.createChildFlowScope (  )  ) ;^197^^^^^182^212^traverseOr ( condition, output.createChildFlowScope (  )  ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] branchedFlowThrough [RETURN_TYPE] List   Node source FlowScope input [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  Node  condition  item  source  BooleanLiteralSet  booleanValues  toBooleanOutcomes  AbstractCompiler  compiler  JSTypeRegistry  registry  DiGraphEdge  branchEdge  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanOutcomePair  conditionOutcomes  Branch  branch  List  branchEdges  result  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  
[BugLab_Variable_Misuse]^conditionOutcomes = condition.getType (  )  == Token.AND ? traverseAnd ( condition, joinedScope.createChildFlowScope (  )  )  : traverseOr ( condition, output.createChildFlowScope (  )  ) ;^195^196^197^^^180^210^conditionOutcomes = condition.getType (  )  == Token.AND ? traverseAnd ( condition, output.createChildFlowScope (  )  )  : traverseOr ( condition, output.createChildFlowScope (  )  ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] branchedFlowThrough [RETURN_TYPE] List   Node source FlowScope input [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  Node  condition  item  source  BooleanLiteralSet  booleanValues  toBooleanOutcomes  AbstractCompiler  compiler  JSTypeRegistry  registry  DiGraphEdge  branchEdge  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanOutcomePair  conditionOutcomes  Branch  branch  List  branchEdges  result  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  
[BugLab_Variable_Misuse]^newScope = reverseInterpreter.getPreciserScopeKnowingConditionOutcome ( source, conditionOutcomes.getOutcomeFlowScope (^199^200^201^202^^184^214^newScope = reverseInterpreter.getPreciserScopeKnowingConditionOutcome ( condition, conditionOutcomes.getOutcomeFlowScope (^[CLASS] TypeInference BooleanOutcomePair  [METHOD] branchedFlowThrough [RETURN_TYPE] List   Node source FlowScope input [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  Node  condition  item  source  BooleanLiteralSet  booleanValues  toBooleanOutcomes  AbstractCompiler  compiler  JSTypeRegistry  registry  DiGraphEdge  branchEdge  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanOutcomePair  conditionOutcomes  Branch  branch  List  branchEdges  result  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  
[BugLab_Argument_Swapping]^newScope = condition.getPreciserScopeKnowingConditionOutcome ( reverseInterpreter, conditionOutcomes.getOutcomeFlowScope (^199^200^201^202^^184^214^newScope = reverseInterpreter.getPreciserScopeKnowingConditionOutcome ( condition, conditionOutcomes.getOutcomeFlowScope (^[CLASS] TypeInference BooleanOutcomePair  [METHOD] branchedFlowThrough [RETURN_TYPE] List   Node source FlowScope input [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  Node  condition  item  source  BooleanLiteralSet  booleanValues  toBooleanOutcomes  AbstractCompiler  compiler  JSTypeRegistry  registry  DiGraphEdge  branchEdge  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanOutcomePair  conditionOutcomes  Branch  branch  List  branchEdges  result  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  
[BugLab_Variable_Misuse]^reverseInterpreter.getPreciserScopeKnowingConditionOutcome ( source, conditionOutcomes.getOutcomeFlowScope ( condition.getType (  ) , branch == Branch.ON_TRUE ) ,^200^201^202^203^^185^215^reverseInterpreter.getPreciserScopeKnowingConditionOutcome ( condition, conditionOutcomes.getOutcomeFlowScope ( condition.getType (  ) , branch == Branch.ON_TRUE ) ,^[CLASS] TypeInference BooleanOutcomePair  [METHOD] branchedFlowThrough [RETURN_TYPE] List   Node source FlowScope input [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  Node  condition  item  source  BooleanLiteralSet  booleanValues  toBooleanOutcomes  AbstractCompiler  compiler  JSTypeRegistry  registry  DiGraphEdge  branchEdge  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanOutcomePair  conditionOutcomes  Branch  branch  List  branchEdges  result  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  
[BugLab_Argument_Swapping]^reverseInterpreter.getPreciserScopeKnowingConditionOutcome ( conditionOutcomes, condition.getOutcomeFlowScope ( condition.getType (  ) , branch == Branch.ON_TRUE ) ,^200^201^202^203^^185^215^reverseInterpreter.getPreciserScopeKnowingConditionOutcome ( condition, conditionOutcomes.getOutcomeFlowScope ( condition.getType (  ) , branch == Branch.ON_TRUE ) ,^[CLASS] TypeInference BooleanOutcomePair  [METHOD] branchedFlowThrough [RETURN_TYPE] List   Node source FlowScope input [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  Node  condition  item  source  BooleanLiteralSet  booleanValues  toBooleanOutcomes  AbstractCompiler  compiler  JSTypeRegistry  registry  DiGraphEdge  branchEdge  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanOutcomePair  conditionOutcomes  Branch  branch  List  branchEdges  result  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  
[BugLab_Argument_Swapping]^reverseInterpreter.getPreciserScopeKnowingConditionOutcome ( branch, conditionOutcomes.getOutcomeFlowScope ( condition.getType (  ) , condition == Branch.ON_TRUE ) ,^200^201^202^203^^185^215^reverseInterpreter.getPreciserScopeKnowingConditionOutcome ( condition, conditionOutcomes.getOutcomeFlowScope ( condition.getType (  ) , branch == Branch.ON_TRUE ) ,^[CLASS] TypeInference BooleanOutcomePair  [METHOD] branchedFlowThrough [RETURN_TYPE] List   Node source FlowScope input [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  Node  condition  item  source  BooleanLiteralSet  booleanValues  toBooleanOutcomes  AbstractCompiler  compiler  JSTypeRegistry  registry  DiGraphEdge  branchEdge  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanOutcomePair  conditionOutcomes  Branch  branch  List  branchEdges  result  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  
[BugLab_Wrong_Operator]^reverseInterpreter.getPreciserScopeKnowingConditionOutcome ( condition, conditionOutcomes.getOutcomeFlowScope ( condition.getType (  ) , branch <= Branch.ON_TRUE ) ,^200^201^202^203^^185^215^reverseInterpreter.getPreciserScopeKnowingConditionOutcome ( condition, conditionOutcomes.getOutcomeFlowScope ( condition.getType (  ) , branch == Branch.ON_TRUE ) ,^[CLASS] TypeInference BooleanOutcomePair  [METHOD] branchedFlowThrough [RETURN_TYPE] List   Node source FlowScope input [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  Node  condition  item  source  BooleanLiteralSet  booleanValues  toBooleanOutcomes  AbstractCompiler  compiler  JSTypeRegistry  registry  DiGraphEdge  branchEdge  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanOutcomePair  conditionOutcomes  Branch  branch  List  branchEdges  result  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  
[BugLab_Wrong_Operator]^reverseInterpreter.getPreciserScopeKnowingConditionOutcome ( condition, conditionOutcomes.getOutcomeFlowScope ( condition.getType (  ) , branch != Branch.ON_TRUE ) ,^200^201^202^203^^185^215^reverseInterpreter.getPreciserScopeKnowingConditionOutcome ( condition, conditionOutcomes.getOutcomeFlowScope ( condition.getType (  ) , branch == Branch.ON_TRUE ) ,^[CLASS] TypeInference BooleanOutcomePair  [METHOD] branchedFlowThrough [RETURN_TYPE] List   Node source FlowScope input [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  Node  condition  item  source  BooleanLiteralSet  booleanValues  toBooleanOutcomes  AbstractCompiler  compiler  JSTypeRegistry  registry  DiGraphEdge  branchEdge  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanOutcomePair  conditionOutcomes  Branch  branch  List  branchEdges  result  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  
[BugLab_Variable_Misuse]^conditionOutcomes.getOutcomeFlowScope ( source.getType (  ) , branch == Branch.ON_TRUE ) , branch == Branch.ON_TRUE ) ;^202^203^204^^^187^217^conditionOutcomes.getOutcomeFlowScope ( condition.getType (  ) , branch == Branch.ON_TRUE ) , branch == Branch.ON_TRUE ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] branchedFlowThrough [RETURN_TYPE] List   Node source FlowScope input [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  Node  condition  item  source  BooleanLiteralSet  booleanValues  toBooleanOutcomes  AbstractCompiler  compiler  JSTypeRegistry  registry  DiGraphEdge  branchEdge  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanOutcomePair  conditionOutcomes  Branch  branch  List  branchEdges  result  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  
[BugLab_Wrong_Operator]^conditionOutcomes.getOutcomeFlowScope ( condition.getType (  ) , branch != Branch.ON_TRUE ) , branch == Branch.ON_TRUE ) ;^202^203^204^^^187^217^conditionOutcomes.getOutcomeFlowScope ( condition.getType (  ) , branch == Branch.ON_TRUE ) , branch == Branch.ON_TRUE ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] branchedFlowThrough [RETURN_TYPE] List   Node source FlowScope input [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  Node  condition  item  source  BooleanLiteralSet  booleanValues  toBooleanOutcomes  AbstractCompiler  compiler  JSTypeRegistry  registry  DiGraphEdge  branchEdge  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanOutcomePair  conditionOutcomes  Branch  branch  List  branchEdges  result  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  
[BugLab_Variable_Misuse]^traverseAnd ( condition, rightScope.createChildFlowScope (  )  )  : traverseOr ( condition, output.createChildFlowScope (  )  ) ;^196^197^^^^181^211^traverseAnd ( condition, output.createChildFlowScope (  )  )  : traverseOr ( condition, output.createChildFlowScope (  )  ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] branchedFlowThrough [RETURN_TYPE] List   Node source FlowScope input [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  Node  condition  item  source  BooleanLiteralSet  booleanValues  toBooleanOutcomes  AbstractCompiler  compiler  JSTypeRegistry  registry  DiGraphEdge  branchEdge  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanOutcomePair  conditionOutcomes  Branch  branch  List  branchEdges  result  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  
[BugLab_Variable_Misuse]^traverseOr ( condition, joinedScope.createChildFlowScope (  )  ) ;^197^^^^^182^212^traverseOr ( condition, output.createChildFlowScope (  )  ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] branchedFlowThrough [RETURN_TYPE] List   Node source FlowScope input [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  Node  condition  item  source  BooleanLiteralSet  booleanValues  toBooleanOutcomes  AbstractCompiler  compiler  JSTypeRegistry  registry  DiGraphEdge  branchEdge  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanOutcomePair  conditionOutcomes  Branch  branch  List  branchEdges  result  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  
[BugLab_Variable_Misuse]^if  ( leftScope == null )  {^208^^^^^193^223^if  ( conditionFlowScope == null )  {^[CLASS] TypeInference BooleanOutcomePair  [METHOD] branchedFlowThrough [RETURN_TYPE] List   Node source FlowScope input [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  Node  condition  item  source  BooleanLiteralSet  booleanValues  toBooleanOutcomes  AbstractCompiler  compiler  JSTypeRegistry  registry  DiGraphEdge  branchEdge  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanOutcomePair  conditionOutcomes  Branch  branch  List  branchEdges  result  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  
[BugLab_Argument_Swapping]^if  ( condition == null )  {^208^^^^^193^223^if  ( conditionFlowScope == null )  {^[CLASS] TypeInference BooleanOutcomePair  [METHOD] branchedFlowThrough [RETURN_TYPE] List   Node source FlowScope input [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  Node  condition  item  source  BooleanLiteralSet  booleanValues  toBooleanOutcomes  AbstractCompiler  compiler  JSTypeRegistry  registry  DiGraphEdge  branchEdge  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanOutcomePair  conditionOutcomes  Branch  branch  List  branchEdges  result  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  
[BugLab_Argument_Swapping]^if  ( conditionFlowScopeFlowScope == null )  {^208^^^^^193^223^if  ( conditionFlowScope == null )  {^[CLASS] TypeInference BooleanOutcomePair  [METHOD] branchedFlowThrough [RETURN_TYPE] List   Node source FlowScope input [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  Node  condition  item  source  BooleanLiteralSet  booleanValues  toBooleanOutcomes  AbstractCompiler  compiler  JSTypeRegistry  registry  DiGraphEdge  branchEdge  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanOutcomePair  conditionOutcomes  Branch  branch  List  branchEdges  result  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  
[BugLab_Wrong_Operator]^conditionOutcomes = condition.getType (  )  > Token.AND ? traverseAnd ( condition, output.createChildFlowScope (  )  )  : traverseOr ( condition, output.createChildFlowScope (  )  ) ;^195^196^197^^^180^210^conditionOutcomes = condition.getType (  )  == Token.AND ? traverseAnd ( condition, output.createChildFlowScope (  )  )  : traverseOr ( condition, output.createChildFlowScope (  )  ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] branchedFlowThrough [RETURN_TYPE] List   Node source FlowScope input [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  Node  condition  item  source  BooleanLiteralSet  booleanValues  toBooleanOutcomes  AbstractCompiler  compiler  JSTypeRegistry  registry  DiGraphEdge  branchEdge  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanOutcomePair  conditionOutcomes  Branch  branch  List  branchEdges  result  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  
[BugLab_Argument_Swapping]^newScope = conditionOutcomes.getPreciserScopeKnowingConditionOutcome ( condition, reverseInterpreter.getOutcomeFlowScope (^199^200^201^202^^184^214^newScope = reverseInterpreter.getPreciserScopeKnowingConditionOutcome ( condition, conditionOutcomes.getOutcomeFlowScope (^[CLASS] TypeInference BooleanOutcomePair  [METHOD] branchedFlowThrough [RETURN_TYPE] List   Node source FlowScope input [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  Node  condition  item  source  BooleanLiteralSet  booleanValues  toBooleanOutcomes  AbstractCompiler  compiler  JSTypeRegistry  registry  DiGraphEdge  branchEdge  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanOutcomePair  conditionOutcomes  Branch  branch  List  branchEdges  result  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  
[BugLab_Variable_Misuse]^newScope = reverseInterpreter.getPreciserScopeKnowingConditionOutcome ( condition, rightScope, branch == Branch.ON_TRUE ) ;^212^213^214^^^197^227^newScope = reverseInterpreter.getPreciserScopeKnowingConditionOutcome ( condition, conditionFlowScope, branch == Branch.ON_TRUE ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] branchedFlowThrough [RETURN_TYPE] List   Node source FlowScope input [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  Node  condition  item  source  BooleanLiteralSet  booleanValues  toBooleanOutcomes  AbstractCompiler  compiler  JSTypeRegistry  registry  DiGraphEdge  branchEdge  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanOutcomePair  conditionOutcomes  Branch  branch  List  branchEdges  result  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  
[BugLab_Argument_Swapping]^newScope = conditionFlowScope.getPreciserScopeKnowingConditionOutcome ( condition, reverseInterpreter, branch == Branch.ON_TRUE ) ;^212^213^214^^^197^227^newScope = reverseInterpreter.getPreciserScopeKnowingConditionOutcome ( condition, conditionFlowScope, branch == Branch.ON_TRUE ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] branchedFlowThrough [RETURN_TYPE] List   Node source FlowScope input [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  Node  condition  item  source  BooleanLiteralSet  booleanValues  toBooleanOutcomes  AbstractCompiler  compiler  JSTypeRegistry  registry  DiGraphEdge  branchEdge  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanOutcomePair  conditionOutcomes  Branch  branch  List  branchEdges  result  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  
[BugLab_Variable_Misuse]^traverseAnd ( condition, newScope.createChildFlowScope (  )  )  : traverseOr ( condition, output.createChildFlowScope (  )  ) ;^196^197^^^^181^211^traverseAnd ( condition, output.createChildFlowScope (  )  )  : traverseOr ( condition, output.createChildFlowScope (  )  ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] branchedFlowThrough [RETURN_TYPE] List   Node source FlowScope input [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  Node  condition  item  source  BooleanLiteralSet  booleanValues  toBooleanOutcomes  AbstractCompiler  compiler  JSTypeRegistry  registry  DiGraphEdge  branchEdge  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanOutcomePair  conditionOutcomes  Branch  branch  List  branchEdges  result  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  
[BugLab_Wrong_Operator]^reverseInterpreter.getPreciserScopeKnowingConditionOutcome ( condition, conditionOutcomes.getOutcomeFlowScope ( condition.getType (  ) , branch >= Branch.ON_TRUE ) ,^200^201^202^203^^185^215^reverseInterpreter.getPreciserScopeKnowingConditionOutcome ( condition, conditionOutcomes.getOutcomeFlowScope ( condition.getType (  ) , branch == Branch.ON_TRUE ) ,^[CLASS] TypeInference BooleanOutcomePair  [METHOD] branchedFlowThrough [RETURN_TYPE] List   Node source FlowScope input [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  Node  condition  item  source  BooleanLiteralSet  booleanValues  toBooleanOutcomes  AbstractCompiler  compiler  JSTypeRegistry  registry  DiGraphEdge  branchEdge  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanOutcomePair  conditionOutcomes  Branch  branch  List  branchEdges  result  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  
[BugLab_Wrong_Operator]^conditionOutcomes.getOutcomeFlowScope ( condition.getType (  ) , branch <= Branch.ON_TRUE ) , branch == Branch.ON_TRUE ) ;^202^203^204^^^187^217^conditionOutcomes.getOutcomeFlowScope ( condition.getType (  ) , branch == Branch.ON_TRUE ) , branch == Branch.ON_TRUE ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] branchedFlowThrough [RETURN_TYPE] List   Node source FlowScope input [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  Node  condition  item  source  BooleanLiteralSet  booleanValues  toBooleanOutcomes  AbstractCompiler  compiler  JSTypeRegistry  registry  DiGraphEdge  branchEdge  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanOutcomePair  conditionOutcomes  Branch  branch  List  branchEdges  result  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  
[BugLab_Variable_Misuse]^reverseInterpreter.getPreciserScopeKnowingConditionOutcome ( condition, output, branch == Branch.ON_TRUE ) ;^213^214^^^^198^228^reverseInterpreter.getPreciserScopeKnowingConditionOutcome ( condition, conditionFlowScope, branch == Branch.ON_TRUE ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] branchedFlowThrough [RETURN_TYPE] List   Node source FlowScope input [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  Node  condition  item  source  BooleanLiteralSet  booleanValues  toBooleanOutcomes  AbstractCompiler  compiler  JSTypeRegistry  registry  DiGraphEdge  branchEdge  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanOutcomePair  conditionOutcomes  Branch  branch  List  branchEdges  result  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  
[BugLab_Variable_Misuse]^traverse ( condition, newScope.createChildFlowScope (  )  ) ;^210^^^^^195^225^traverse ( condition, output.createChildFlowScope (  )  ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] branchedFlowThrough [RETURN_TYPE] List   Node source FlowScope input [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  Node  condition  item  source  BooleanLiteralSet  booleanValues  toBooleanOutcomes  AbstractCompiler  compiler  JSTypeRegistry  registry  DiGraphEdge  branchEdge  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanOutcomePair  conditionOutcomes  Branch  branch  List  branchEdges  result  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  
[BugLab_Variable_Misuse]^conditionFlowScope = traverse ( condition, joinedScope.createChildFlowScope (  )  ) ;^209^210^^^^194^224^conditionFlowScope = traverse ( condition, output.createChildFlowScope (  )  ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] branchedFlowThrough [RETURN_TYPE] List   Node source FlowScope input [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  Node  condition  item  source  BooleanLiteralSet  booleanValues  toBooleanOutcomes  AbstractCompiler  compiler  JSTypeRegistry  registry  DiGraphEdge  branchEdge  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanOutcomePair  conditionOutcomes  Branch  branch  List  branchEdges  result  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  
[BugLab_Variable_Misuse]^newScope = reverseInterpreter.getPreciserScopeKnowingConditionOutcome ( condition, newScope, branch == Branch.ON_TRUE ) ;^212^213^214^^^197^227^newScope = reverseInterpreter.getPreciserScopeKnowingConditionOutcome ( condition, conditionFlowScope, branch == Branch.ON_TRUE ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] branchedFlowThrough [RETURN_TYPE] List   Node source FlowScope input [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  Node  condition  item  source  BooleanLiteralSet  booleanValues  toBooleanOutcomes  AbstractCompiler  compiler  JSTypeRegistry  registry  DiGraphEdge  branchEdge  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanOutcomePair  conditionOutcomes  Branch  branch  List  branchEdges  result  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  
[BugLab_Wrong_Operator]^newScope = reverseInterpreter.getPreciserScopeKnowingConditionOutcome ( condition, conditionFlowScope, branch >= Branch.ON_TRUE ) ;^212^213^214^^^197^227^newScope = reverseInterpreter.getPreciserScopeKnowingConditionOutcome ( condition, conditionFlowScope, branch == Branch.ON_TRUE ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] branchedFlowThrough [RETURN_TYPE] List   Node source FlowScope input [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  Node  condition  item  source  BooleanLiteralSet  booleanValues  toBooleanOutcomes  AbstractCompiler  compiler  JSTypeRegistry  registry  DiGraphEdge  branchEdge  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanOutcomePair  conditionOutcomes  Branch  branch  List  branchEdges  result  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  
[BugLab_Variable_Misuse]^traverse ( condition, leftScope.createChildFlowScope (  )  ) ;^210^^^^^195^225^traverse ( condition, output.createChildFlowScope (  )  ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] branchedFlowThrough [RETURN_TYPE] List   Node source FlowScope input [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  Node  condition  item  source  BooleanLiteralSet  booleanValues  toBooleanOutcomes  AbstractCompiler  compiler  JSTypeRegistry  registry  DiGraphEdge  branchEdge  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanOutcomePair  conditionOutcomes  Branch  branch  List  branchEdges  result  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  
[BugLab_Argument_Swapping]^reverseInterpreter.getPreciserScopeKnowingConditionOutcome ( condition, branch, conditionFlowScope == Branch.ON_TRUE ) ;^213^214^^^^198^228^reverseInterpreter.getPreciserScopeKnowingConditionOutcome ( condition, conditionFlowScope, branch == Branch.ON_TRUE ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] branchedFlowThrough [RETURN_TYPE] List   Node source FlowScope input [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  Node  condition  item  source  BooleanLiteralSet  booleanValues  toBooleanOutcomes  AbstractCompiler  compiler  JSTypeRegistry  registry  DiGraphEdge  branchEdge  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanOutcomePair  conditionOutcomes  Branch  branch  List  branchEdges  result  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  
[BugLab_Argument_Swapping]^if  ( condition == null )  {^194^^^^^179^209^if  ( conditionOutcomes == null )  {^[CLASS] TypeInference BooleanOutcomePair  [METHOD] branchedFlowThrough [RETURN_TYPE] List   Node source FlowScope input [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  Node  condition  item  source  BooleanLiteralSet  booleanValues  toBooleanOutcomes  AbstractCompiler  compiler  JSTypeRegistry  registry  DiGraphEdge  branchEdge  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanOutcomePair  conditionOutcomes  Branch  branch  List  branchEdges  result  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  
[BugLab_Variable_Misuse]^traverseOr ( condition, leftScope.createChildFlowScope (  )  ) ;^197^^^^^182^212^traverseOr ( condition, output.createChildFlowScope (  )  ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] branchedFlowThrough [RETURN_TYPE] List   Node source FlowScope input [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  Node  condition  item  source  BooleanLiteralSet  booleanValues  toBooleanOutcomes  AbstractCompiler  compiler  JSTypeRegistry  registry  DiGraphEdge  branchEdge  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanOutcomePair  conditionOutcomes  Branch  branch  List  branchEdges  result  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  
[BugLab_Wrong_Operator]^conditionOutcomes = condition.getType (  )  < Token.AND ? traverseAnd ( condition, output.createChildFlowScope (  )  )  : traverseOr ( condition, output.createChildFlowScope (  )  ) ;^195^196^197^^^180^210^conditionOutcomes = condition.getType (  )  == Token.AND ? traverseAnd ( condition, output.createChildFlowScope (  )  )  : traverseOr ( condition, output.createChildFlowScope (  )  ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] branchedFlowThrough [RETURN_TYPE] List   Node source FlowScope input [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  Node  condition  item  source  BooleanLiteralSet  booleanValues  toBooleanOutcomes  AbstractCompiler  compiler  JSTypeRegistry  registry  DiGraphEdge  branchEdge  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanOutcomePair  conditionOutcomes  Branch  branch  List  branchEdges  result  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  
[BugLab_Argument_Swapping]^newScope = reverseInterpreter.getPreciserScopeKnowingConditionOutcome ( conditionOutcomes, condition.getOutcomeFlowScope (^199^200^201^202^^184^214^newScope = reverseInterpreter.getPreciserScopeKnowingConditionOutcome ( condition, conditionOutcomes.getOutcomeFlowScope (^[CLASS] TypeInference BooleanOutcomePair  [METHOD] branchedFlowThrough [RETURN_TYPE] List   Node source FlowScope input [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  Node  condition  item  source  BooleanLiteralSet  booleanValues  toBooleanOutcomes  AbstractCompiler  compiler  JSTypeRegistry  registry  DiGraphEdge  branchEdge  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanOutcomePair  conditionOutcomes  Branch  branch  List  branchEdges  result  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  
[BugLab_Argument_Swapping]^reverseInterpreter.getPreciserScopeKnowingConditionOutcome ( condition, branch.getOutcomeFlowScope ( condition.getType (  ) , conditionOutcomes == Branch.ON_TRUE ) ,^200^201^202^203^^185^215^reverseInterpreter.getPreciserScopeKnowingConditionOutcome ( condition, conditionOutcomes.getOutcomeFlowScope ( condition.getType (  ) , branch == Branch.ON_TRUE ) ,^[CLASS] TypeInference BooleanOutcomePair  [METHOD] branchedFlowThrough [RETURN_TYPE] List   Node source FlowScope input [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  Node  condition  item  source  BooleanLiteralSet  booleanValues  toBooleanOutcomes  AbstractCompiler  compiler  JSTypeRegistry  registry  DiGraphEdge  branchEdge  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanOutcomePair  conditionOutcomes  Branch  branch  List  branchEdges  result  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  
[BugLab_Wrong_Operator]^conditionOutcomes.getOutcomeFlowScope ( condition.getType (  ) , branch < Branch.ON_TRUE ) , branch == Branch.ON_TRUE ) ;^202^203^204^^^187^217^conditionOutcomes.getOutcomeFlowScope ( condition.getType (  ) , branch == Branch.ON_TRUE ) , branch == Branch.ON_TRUE ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] branchedFlowThrough [RETURN_TYPE] List   Node source FlowScope input [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  Node  condition  item  source  BooleanLiteralSet  booleanValues  toBooleanOutcomes  AbstractCompiler  compiler  JSTypeRegistry  registry  DiGraphEdge  branchEdge  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanOutcomePair  conditionOutcomes  Branch  branch  List  branchEdges  result  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  
[BugLab_Variable_Misuse]^conditionFlowScope = traverse ( condition, leftScope.createChildFlowScope (  )  ) ;^209^210^^^^194^224^conditionFlowScope = traverse ( condition, output.createChildFlowScope (  )  ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] branchedFlowThrough [RETURN_TYPE] List   Node source FlowScope input [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  Node  condition  item  source  BooleanLiteralSet  booleanValues  toBooleanOutcomes  AbstractCompiler  compiler  JSTypeRegistry  registry  DiGraphEdge  branchEdge  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanOutcomePair  conditionOutcomes  Branch  branch  List  branchEdges  result  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  
[BugLab_Variable_Misuse]^conditionOutcomes = condition.getType (  )  == Token.null ? traverseAnd ( condition, output.createChildFlowScope (  )  )  : traverseOr ( condition, output.createChildFlowScope (  )  ) ;^195^196^197^^^180^210^conditionOutcomes = condition.getType (  )  == Token.AND ? traverseAnd ( condition, output.createChildFlowScope (  )  )  : traverseOr ( condition, output.createChildFlowScope (  )  ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] branchedFlowThrough [RETURN_TYPE] List   Node source FlowScope input [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  Node  condition  item  source  BooleanLiteralSet  booleanValues  toBooleanOutcomes  AbstractCompiler  compiler  JSTypeRegistry  registry  DiGraphEdge  branchEdge  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanOutcomePair  conditionOutcomes  Branch  branch  List  branchEdges  result  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  
[BugLab_Wrong_Operator]^conditionOutcomes = condition.getType (  )  >= Token.AND ? traverseAnd ( condition, output.createChildFlowScope (  )  )  : traverseOr ( condition, output.createChildFlowScope (  )  ) ;^195^196^197^^^180^210^conditionOutcomes = condition.getType (  )  == Token.AND ? traverseAnd ( condition, output.createChildFlowScope (  )  )  : traverseOr ( condition, output.createChildFlowScope (  )  ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] branchedFlowThrough [RETURN_TYPE] List   Node source FlowScope input [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  Node  condition  item  source  BooleanLiteralSet  booleanValues  toBooleanOutcomes  AbstractCompiler  compiler  JSTypeRegistry  registry  DiGraphEdge  branchEdge  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanOutcomePair  conditionOutcomes  Branch  branch  List  branchEdges  result  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  
[BugLab_Variable_Misuse]^FlowScope newScope = leftScope;^148^^^^^133^163^FlowScope newScope = output;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] branchedFlowThrough [RETURN_TYPE] List   Node source FlowScope input [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  Node  condition  item  source  BooleanLiteralSet  booleanValues  toBooleanOutcomes  AbstractCompiler  compiler  JSTypeRegistry  registry  DiGraphEdge  branchEdge  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanOutcomePair  conditionOutcomes  Branch  branch  List  branchEdges  result  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  
[BugLab_Variable_Misuse]^if  ( NodeUtil.isForIn ( item )  )  {^152^^^^^137^167^if  ( NodeUtil.isForIn ( source )  )  {^[CLASS] TypeInference BooleanOutcomePair  [METHOD] branchedFlowThrough [RETURN_TYPE] List   Node source FlowScope input [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  Node  condition  item  source  BooleanLiteralSet  booleanValues  toBooleanOutcomes  AbstractCompiler  compiler  JSTypeRegistry  registry  DiGraphEdge  branchEdge  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanOutcomePair  conditionOutcomes  Branch  branch  List  branchEdges  result  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  
[BugLab_Argument_Swapping]^conditionOutcomes.getOutcomeFlowScope ( branch.getType (  ) , condition == Branch.ON_TRUE ) , branch == Branch.ON_TRUE ) ;^202^203^204^^^187^217^conditionOutcomes.getOutcomeFlowScope ( condition.getType (  ) , branch == Branch.ON_TRUE ) , branch == Branch.ON_TRUE ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] branchedFlowThrough [RETURN_TYPE] List   Node source FlowScope input [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  Node  condition  item  source  BooleanLiteralSet  booleanValues  toBooleanOutcomes  AbstractCompiler  compiler  JSTypeRegistry  registry  DiGraphEdge  branchEdge  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanOutcomePair  conditionOutcomes  Branch  branch  List  branchEdges  result  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  
[BugLab_Variable_Misuse]^reverseInterpreter.getPreciserScopeKnowingConditionOutcome ( condition, leftScope, branch == Branch.ON_TRUE ) ;^213^214^^^^198^228^reverseInterpreter.getPreciserScopeKnowingConditionOutcome ( condition, conditionFlowScope, branch == Branch.ON_TRUE ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] branchedFlowThrough [RETURN_TYPE] List   Node source FlowScope input [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  Node  condition  item  source  BooleanLiteralSet  booleanValues  toBooleanOutcomes  AbstractCompiler  compiler  JSTypeRegistry  registry  DiGraphEdge  branchEdge  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanOutcomePair  conditionOutcomes  Branch  branch  List  branchEdges  result  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  
[BugLab_Wrong_Operator]^reverseInterpreter.getPreciserScopeKnowingConditionOutcome ( condition, conditionFlowScope, branch > Branch.ON_TRUE ) ;^213^214^^^^198^228^reverseInterpreter.getPreciserScopeKnowingConditionOutcome ( condition, conditionFlowScope, branch == Branch.ON_TRUE ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] branchedFlowThrough [RETURN_TYPE] List   Node source FlowScope input [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  Node  condition  item  source  BooleanLiteralSet  booleanValues  toBooleanOutcomes  AbstractCompiler  compiler  JSTypeRegistry  registry  DiGraphEdge  branchEdge  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanOutcomePair  conditionOutcomes  Branch  branch  List  branchEdges  result  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  
[BugLab_Variable_Misuse]^result.add ( joinedScope.optimize (  )  ) ;^220^^^^^205^235^result.add ( newScope.optimize (  )  ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] branchedFlowThrough [RETURN_TYPE] List   Node source FlowScope input [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  Node  condition  item  source  BooleanLiteralSet  booleanValues  toBooleanOutcomes  AbstractCompiler  compiler  JSTypeRegistry  registry  DiGraphEdge  branchEdge  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanOutcomePair  conditionOutcomes  Branch  branch  List  branchEdges  result  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  
[BugLab_Variable_Misuse]^Node switchNode = findSwitchFromCase ( switchExpressionNode ) ;^230^^^^^229^235^Node switchNode = findSwitchFromCase ( caseNode ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] createSwitchCaseConditionExpression [RETURN_TYPE] Node   Node caseNode [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  caseExpressionNode  caseNode  switchExpressionNode  switchNode  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  
[BugLab_Variable_Misuse]^Node switchNode = findSwitchFromCase ( switchNode ) ;^230^^^^^229^235^Node switchNode = findSwitchFromCase ( caseNode ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] createSwitchCaseConditionExpression [RETURN_TYPE] Node   Node caseNode [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  caseExpressionNode  caseNode  switchExpressionNode  switchNode  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  
[BugLab_Variable_Misuse]^Node switchExpressionNode = caseNode.getFirstChild (  ) ;^231^^^^^229^235^Node switchExpressionNode = switchNode.getFirstChild (  ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] createSwitchCaseConditionExpression [RETURN_TYPE] Node   Node caseNode [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  caseExpressionNode  caseNode  switchExpressionNode  switchNode  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  
[BugLab_Variable_Misuse]^Node switchExpressionNode = switchExpressionNode.getFirstChild (  ) ;^231^^^^^229^235^Node switchExpressionNode = switchNode.getFirstChild (  ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] createSwitchCaseConditionExpression [RETURN_TYPE] Node   Node caseNode [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  caseExpressionNode  caseNode  switchExpressionNode  switchNode  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  
[BugLab_Variable_Misuse]^Node caseExpressionNode = switchNode.getFirstChild (  ) ;^232^^^^^229^235^Node caseExpressionNode = caseNode.getFirstChild (  ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] createSwitchCaseConditionExpression [RETURN_TYPE] Node   Node caseNode [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  caseExpressionNode  caseNode  switchExpressionNode  switchNode  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  
[BugLab_Variable_Misuse]^return new Node ( Token.SHEQ, switchNode.cloneTree (  ) , caseExpressionNode.cloneTree (  )  ) ;^233^234^^^^229^235^return new Node ( Token.SHEQ, switchExpressionNode.cloneTree (  ) , caseExpressionNode.cloneTree (  )  ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] createSwitchCaseConditionExpression [RETURN_TYPE] Node   Node caseNode [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  caseExpressionNode  caseNode  switchExpressionNode  switchNode  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  
[BugLab_Variable_Misuse]^return new Node ( Token.SHEQ, switchExpressionNode.cloneTree (  ) , switchNode.cloneTree (  )  ) ;^233^234^^^^229^235^return new Node ( Token.SHEQ, switchExpressionNode.cloneTree (  ) , caseExpressionNode.cloneTree (  )  ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] createSwitchCaseConditionExpression [RETURN_TYPE] Node   Node caseNode [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  caseExpressionNode  caseNode  switchExpressionNode  switchNode  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  
[BugLab_Argument_Swapping]^return new Node ( Token.SHEQ, caseExpressionNode.cloneTree (  ) , switchExpressionNode.cloneTree (  )  ) ;^233^234^^^^229^235^return new Node ( Token.SHEQ, switchExpressionNode.cloneTree (  ) , caseExpressionNode.cloneTree (  )  ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] createSwitchCaseConditionExpression [RETURN_TYPE] Node   Node caseNode [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  caseExpressionNode  caseNode  switchExpressionNode  switchNode  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  
[BugLab_Variable_Misuse]^return caseNode;^246^^^^^240^252^return n;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] findSwitchFromCase [RETURN_TYPE] Node   Node caseNode [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  DiGraphNode  gn  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  caseNode  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  
[BugLab_Variable_Misuse]^return findSwitchFromCase ( caseNode ) ;^248^^^^^240^252^return findSwitchFromCase ( n ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] findSwitchFromCase [RETURN_TYPE] Node   Node caseNode [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  DiGraphNode  gn  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  caseNode  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  
[BugLab_Variable_Misuse]^getCfg (  ) .getDirectedPredNodes ( n )  )  {^242^^^^^240^252^getCfg (  ) .getDirectedPredNodes ( caseNode )  )  {^[CLASS] TypeInference BooleanOutcomePair  [METHOD] findSwitchFromCase [RETURN_TYPE] Node   Node caseNode [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  DiGraphNode  gn  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  caseNode  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  
[BugLab_Variable_Misuse]^switch  ( caseNode.getType (  )  )  {^244^^^^^240^252^switch  ( n.getType (  )  )  {^[CLASS] TypeInference BooleanOutcomePair  [METHOD] findSwitchFromCase [RETURN_TYPE] Node   Node caseNode [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  DiGraphNode  gn  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  caseNode  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  
[BugLab_Wrong_Operator]^if  ( n.getFirstChild (  ) .getType (  )  <= Token.GETPROP )  {^396^^^^^381^411^if  ( n.getFirstChild (  ) .getType (  )  == Token.GETPROP )  {^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverse [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[BugLab_Variable_Misuse]^scope = traverseAssign ( n, leftScope ) ;^257^^^^^242^272^scope = traverseAssign ( n, scope ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverse [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[BugLab_Argument_Swapping]^scope = traverseAssign ( scope, n ) ;^257^^^^^242^272^scope = traverseAssign ( n, scope ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverse [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[BugLab_Variable_Misuse]^scope = traverseName ( n, rightScope ) ;^261^^^^^246^276^scope = traverseName ( n, scope ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverse [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[BugLab_Argument_Swapping]^scope = traverseName ( scope, n ) ;^261^^^^^246^276^scope = traverseName ( n, scope ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverse [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[BugLab_Variable_Misuse]^scope = traverseGetProp ( n, joinedScope ) ;^265^^^^^250^280^scope = traverseGetProp ( n, scope ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverse [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[BugLab_Argument_Swapping]^scope = traverseGetProp ( scope, n ) ;^265^^^^^250^280^scope = traverseGetProp ( n, scope ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverse [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[BugLab_Variable_Misuse]^scope = traverseAnd ( n, newScope ) .getJoinedFlowScope (  ) .createChildFlowScope (  ) ;^269^270^^^^254^284^scope = traverseAnd ( n, scope ) .getJoinedFlowScope (  ) .createChildFlowScope (  ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverse [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[BugLab_Argument_Swapping]^scope = traverseAnd ( scope, n ) .getJoinedFlowScope (  ) .createChildFlowScope (  ) ;^269^270^^^^254^284^scope = traverseAnd ( n, scope ) .getJoinedFlowScope (  ) .createChildFlowScope (  ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverse [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[BugLab_Variable_Misuse]^scope = traverseOr ( n, rightScope ) .getJoinedFlowScope (  ) .createChildFlowScope (  ) ;^274^275^^^^259^289^scope = traverseOr ( n, scope ) .getJoinedFlowScope (  ) .createChildFlowScope (  ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverse [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[BugLab_Argument_Swapping]^scope = traverseOr ( scope, n ) .getJoinedFlowScope (  ) .createChildFlowScope (  ) ;^274^275^^^^259^289^scope = traverseOr ( n, scope ) .getJoinedFlowScope (  ) .createChildFlowScope (  ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverse [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[BugLab_Variable_Misuse]^scope = traverseHook ( n, joinedScope ) ;^279^^^^^264^294^scope = traverseHook ( n, scope ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverse [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[BugLab_Argument_Swapping]^scope = traverseHook ( scope, n ) ;^279^^^^^264^294^scope = traverseHook ( n, scope ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverse [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[BugLab_Variable_Misuse]^scope = traverseObjectLiteral ( n, joinedScope ) ;^283^^^^^268^298^scope = traverseObjectLiteral ( n, scope ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverse [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[BugLab_Argument_Swapping]^scope = traverseObjectLiteral ( scope, n ) ;^283^^^^^268^298^scope = traverseObjectLiteral ( n, scope ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverse [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[BugLab_Variable_Misuse]^scope = traverseCall ( n, output ) ;^287^^^^^272^302^scope = traverseCall ( n, scope ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverse [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[BugLab_Argument_Swapping]^scope = traverseCall ( scope, n ) ;^287^^^^^272^302^scope = traverseCall ( n, scope ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverse [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[BugLab_Variable_Misuse]^scope = traverseNew ( n, rightScope ) ;^291^^^^^276^306^scope = traverseNew ( n, scope ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverse [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[BugLab_Argument_Swapping]^scope = traverseNew ( scope, n ) ;^291^^^^^276^306^scope = traverseNew ( n, scope ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverse [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[BugLab_Variable_Misuse]^scope = traverseAdd ( n, joinedScope ) ;^296^^^^^281^311^scope = traverseAdd ( n, scope ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverse [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[BugLab_Argument_Swapping]^scope = traverseAdd ( scope, n ) ;^296^^^^^281^311^scope = traverseAdd ( n, scope ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverse [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[BugLab_Variable_Misuse]^scope = traverse ( n.getFirstChild (  ) , newScope ) ;^301^^^^^286^316^scope = traverse ( n.getFirstChild (  ) , scope ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverse [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[BugLab_Argument_Swapping]^scope = traverse ( scope.getFirstChild (  ) , n ) ;^301^^^^^286^316^scope = traverse ( n.getFirstChild (  ) , scope ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverse [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[BugLab_Argument_Swapping]^scope = traverseArrayLiteral ( scope, n ) ;^314^^^^^299^329^scope = traverseArrayLiteral ( n, scope ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverse [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[BugLab_Argument_Swapping]^scope = traverseChildren ( scope, n ) ;^353^^^^^338^368^scope = traverseChildren ( n, scope ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverse [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[BugLab_Variable_Misuse]^scope = traverse ( n.getFirstChild (  ) , leftScope ) ;^359^^^^^344^374^scope = traverse ( n.getFirstChild (  ) , scope ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverse [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[BugLab_Argument_Swapping]^scope = traverse ( scope.getFirstChild (  ) , n ) ;^359^^^^^344^374^scope = traverse ( n.getFirstChild (  ) , scope ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverse [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[BugLab_Variable_Misuse]^scope = traverseChildren ( n, leftScope ) ;^364^^^^^349^379^scope = traverseChildren ( n, scope ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverse [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[BugLab_Argument_Swapping]^scope = traverseChildren ( scope, n ) ;^364^^^^^349^379^scope = traverseChildren ( n, scope ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverse [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[BugLab_Variable_Misuse]^scope = traverseChildren ( n, output ) ;^370^^^^^355^385^scope = traverseChildren ( n, scope ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverse [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[BugLab_Argument_Swapping]^scope = traverseChildren ( scope, n ) ;^370^^^^^355^385^scope = traverseChildren ( n, scope ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverse [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[BugLab_Variable_Misuse]^scope = traverseChildren ( n, newScope ) ;^386^^^^^371^401^scope = traverseChildren ( n, scope ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverse [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[BugLab_Argument_Swapping]^scope = traverseChildren ( scope, n ) ;^386^^^^^371^401^scope = traverseChildren ( n, scope ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverse [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[BugLab_Variable_Misuse]^scope = traverseGetElem ( n, output ) ;^391^^^^^376^406^scope = traverseGetElem ( n, scope ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverse [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[BugLab_Argument_Swapping]^scope = traverseGetElem ( scope, n ) ;^391^^^^^376^406^scope = traverseGetElem ( n, scope ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverse [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[BugLab_Variable_Misuse]^scope = traverseChildren ( n, rightScope ) ;^395^^^^^380^410^scope = traverseChildren ( n, scope ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverse [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[BugLab_Argument_Swapping]^scope = traverseChildren ( scope, n ) ;^395^^^^^380^410^scope = traverseChildren ( n, scope ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverse [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[BugLab_Variable_Misuse]^scope = traverseChildren ( n, rightScope ) ;^404^^^^^389^419^scope = traverseChildren ( n, scope ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverse [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[BugLab_Argument_Swapping]^scope = traverseChildren ( scope, n ) ;^404^^^^^389^419^scope = traverseChildren ( n, scope ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverse [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[BugLab_Variable_Misuse]^scope = traverseCatch ( n, newScope ) ;^408^^^^^393^423^scope = traverseCatch ( n, scope ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverse [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[BugLab_Argument_Swapping]^scope = traverseCatch ( scope, n ) ;^408^^^^^393^423^scope = traverseCatch ( n, scope ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverse [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[BugLab_Variable_Misuse]^scope = traverseAssign ( n, rightScope ) ;^257^^^^^242^272^scope = traverseAssign ( n, scope ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverse [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[BugLab_Variable_Misuse]^scope = traverseGetProp ( n, newScope ) ;^265^^^^^250^280^scope = traverseGetProp ( n, scope ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverse [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[BugLab_Variable_Misuse]^scope = traverseAnd ( n, joinedScope ) .getJoinedFlowScope (  ) .createChildFlowScope (  ) ;^269^270^^^^254^284^scope = traverseAnd ( n, scope ) .getJoinedFlowScope (  ) .createChildFlowScope (  ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverse [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[BugLab_Variable_Misuse]^scope = traverseOr ( n, leftScope ) .getJoinedFlowScope (  ) .createChildFlowScope (  ) ;^274^275^^^^259^289^scope = traverseOr ( n, scope ) .getJoinedFlowScope (  ) .createChildFlowScope (  ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverse [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[BugLab_Variable_Misuse]^scope = traverseOr ( n, joinedScope ) .getJoinedFlowScope (  ) .createChildFlowScope (  ) ;^274^275^^^^259^289^scope = traverseOr ( n, scope ) .getJoinedFlowScope (  ) .createChildFlowScope (  ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverse [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[BugLab_Variable_Misuse]^scope = traverseHook ( n, leftScope ) ;^279^^^^^264^294^scope = traverseHook ( n, scope ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverse [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[BugLab_Variable_Misuse]^scope = traverseCall ( n, leftScope ) ;^287^^^^^272^302^scope = traverseCall ( n, scope ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverse [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[BugLab_Variable_Misuse]^scope = traverseNew ( n, newScope ) ;^291^^^^^276^306^scope = traverseNew ( n, scope ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverse [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[BugLab_Variable_Misuse]^scope = traverse ( n.getFirstChild (  ) , joinedScope ) ;^301^^^^^286^316^scope = traverse ( n.getFirstChild (  ) , scope ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverse [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[BugLab_Variable_Misuse]^scope = traverseArrayLiteral ( n, joinedScope ) ;^314^^^^^299^329^scope = traverseArrayLiteral ( n, scope ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverse [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[BugLab_Variable_Misuse]^n.setJSType ( rightScope.getTypeOfThis (  )  ) ;^326^^^^^311^341^n.setJSType ( scope.getTypeOfThis (  )  ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverse [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[BugLab_Variable_Misuse]^n.setJSType ( newScope.getTypeOfThis (  )  ) ;^326^^^^^311^341^n.setJSType ( scope.getTypeOfThis (  )  ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverse [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[BugLab_Variable_Misuse]^scope = traverseChildren ( n, rightScope ) ;^353^^^^^338^368^scope = traverseChildren ( n, scope ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverse [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[BugLab_Variable_Misuse]^scope = traverse ( n.getFirstChild (  ) , newScope ) ;^359^^^^^344^374^scope = traverse ( n.getFirstChild (  ) , scope ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverse [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[BugLab_Variable_Misuse]^scope = traverseChildren ( n, rightScope ) ;^364^^^^^349^379^scope = traverseChildren ( n, scope ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverse [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[BugLab_Variable_Misuse]^scope = traverseChildren ( n, joinedScope ) ;^386^^^^^371^401^scope = traverseChildren ( n, scope ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverse [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[BugLab_Variable_Misuse]^scope = traverseChildren ( n, joinedScope ) ;^395^^^^^380^410^scope = traverseChildren ( n, scope ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverse [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[BugLab_Variable_Misuse]^scope = traverseChildren ( n, leftScope ) ;^404^^^^^389^419^scope = traverseChildren ( n, scope ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverse [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[BugLab_Variable_Misuse]^scope = traverseCatch ( n, leftScope ) ;^408^^^^^393^423^scope = traverseCatch ( n, scope ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverse [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[BugLab_Wrong_Operator]^if  ( n.getType (  )  <= Token.FUNCTION )  {^411^^^^^396^426^if  ( n.getType (  )  != Token.FUNCTION )  {^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverse [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[BugLab_Wrong_Operator]^if  ( n.getType (  )  >= Token.FUNCTION )  {^411^^^^^396^426^if  ( n.getType (  )  != Token.FUNCTION )  {^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverse [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[BugLab_Argument_Swapping]^if  ( n != infoull && info.hasType (  )  )  {^413^^^^^398^428^if  ( info != null && info.hasType (  )  )  {^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverse [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[BugLab_Wrong_Operator]^if  ( info != null || info.hasType (  )  )  {^413^^^^^398^428^if  ( info != null && info.hasType (  )  )  {^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverse [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[BugLab_Wrong_Operator]^if  ( info == null && info.hasType (  )  )  {^413^^^^^398^428^if  ( info != null && info.hasType (  )  )  {^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverse [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[BugLab_Wrong_Operator]^if  ( n.isQualifiedName (  )  || n.getParent (  ) .getType (  )  == Token.EXPR_RESULT )  {^419^420^^^^404^434^if  ( n.isQualifiedName (  )  && n.getParent (  ) .getType (  )  == Token.EXPR_RESULT )  {^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverse [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[BugLab_Wrong_Operator]^if  ( n.isQualifiedName (  )  && n.getParent (  ) .getType (  )  != Token.EXPR_RESULT )  {^419^420^^^^404^434^if  ( n.isQualifiedName (  )  && n.getParent (  ) .getType (  )  == Token.EXPR_RESULT )  {^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverse [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[BugLab_Variable_Misuse]^updateScopeForTypeChange ( leftScope, n, n.getJSType (  ) , castType ) ;^421^^^^^419^422^updateScopeForTypeChange ( scope, n, n.getJSType (  ) , castType ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverse [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[BugLab_Argument_Swapping]^updateScopeForTypeChange ( castType, n, n.getJSType (  ) , scope ) ;^421^^^^^419^422^updateScopeForTypeChange ( scope, n, n.getJSType (  ) , castType ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverse [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[BugLab_Argument_Swapping]^updateScopeForTypeChange ( n, scope, n.getJSType (  ) , castType ) ;^421^^^^^419^422^updateScopeForTypeChange ( scope, n, n.getJSType (  ) , castType ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverse [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[BugLab_Variable_Misuse]^JSType castType = info.getType (  ) .evaluate ( functionScope ) ;^414^^^^^399^429^JSType castType = info.getType (  ) .evaluate ( syntacticScope ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverse [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[BugLab_Argument_Swapping]^JSType castType = syntacticScope.getType (  ) .evaluate ( info ) ;^414^^^^^399^429^JSType castType = info.getType (  ) .evaluate ( syntacticScope ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverse [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[BugLab_Variable_Misuse]^updateScopeForTypeChange ( leftScope, n, n.getJSType (  ) , castType ) ;^421^^^^^406^436^updateScopeForTypeChange ( scope, n, n.getJSType (  ) , castType ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverse [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[BugLab_Argument_Swapping]^updateScopeForTypeChange ( n, scope, n.getJSType (  ) , castType ) ;^421^^^^^406^436^updateScopeForTypeChange ( scope, n, n.getJSType (  ) , castType ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverse [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[BugLab_Argument_Swapping]^updateScopeForTypeChange ( scope, castType, n.getJSType (  ) , n ) ;^421^^^^^406^436^updateScopeForTypeChange ( scope, n, n.getJSType (  ) , castType ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverse [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[BugLab_Variable_Misuse]^updateScopeForTypeChange ( joinedScope, n, n.getJSType (  ) , castType ) ;^421^^^^^419^422^updateScopeForTypeChange ( scope, n, n.getJSType (  ) , castType ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverse [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[BugLab_Argument_Swapping]^updateScopeForTypeChange ( scope, castType, n.getJSType (  ) , n ) ;^421^^^^^419^422^updateScopeForTypeChange ( scope, n, n.getJSType (  ) , castType ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverse [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[BugLab_Variable_Misuse]^updateScopeForTypeChange ( joinedScope, n, n.getJSType (  ) , castType ) ;^421^^^^^406^436^updateScopeForTypeChange ( scope, n, n.getJSType (  ) , castType ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverse [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[BugLab_Argument_Swapping]^updateScopeForTypeChange ( castType, n, n.getJSType (  ) , scope ) ;^421^^^^^406^436^updateScopeForTypeChange ( scope, n, n.getJSType (  ) , castType ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverse [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[BugLab_Variable_Misuse]^if  ( n.isQualifiedName (  )  && n.getParent (  ) .getType (  )  == Token.2 )  {^419^420^^^^404^434^if  ( n.isQualifiedName (  )  && n.getParent (  ) .getType (  )  == Token.EXPR_RESULT )  {^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverse [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[BugLab_Wrong_Operator]^if  ( n.isQualifiedName (  )  && n.getParent (  ) .getType (  )  <= Token.EXPR_RESULT )  {^419^420^^^^404^434^if  ( n.isQualifiedName (  )  && n.getParent (  ) .getType (  )  == Token.EXPR_RESULT )  {^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverse [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[BugLab_Variable_Misuse]^updateScopeForTypeChange ( output, n, n.getJSType (  ) , castType ) ;^421^^^^^406^436^updateScopeForTypeChange ( scope, n, n.getJSType (  ) , castType ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverse [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[BugLab_Variable_Misuse]^Node nameame = n.getFirstChild (  ) ;^436^^^^^435^441^Node name = n.getFirstChild (  ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseCatch [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  name  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[BugLab_Argument_Swapping]^redeclare ( type, name.getString (  ) , scope ) ;^439^^^^^435^441^redeclare ( scope, name.getString (  ) , type ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseCatch [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  name  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[BugLab_Argument_Swapping]^redeclare ( name, scope.getString (  ) , type ) ;^439^^^^^435^441^redeclare ( scope, name.getString (  ) , type ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseCatch [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  name  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[BugLab_Argument_Swapping]^redeclare ( scope, type.getString (  ) , name ) ;^439^^^^^435^441^redeclare ( scope, name.getString (  ) , type ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseCatch [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  name  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[BugLab_Variable_Misuse]^redeclare ( scope, n.getString (  ) , type ) ;^439^^^^^435^441^redeclare ( scope, name.getString (  ) , type ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseCatch [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  name  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[BugLab_Variable_Misuse]^return rightScope;^440^^^^^435^441^return scope;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseCatch [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  name  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[BugLab_Variable_Misuse]^Node left = right.getFirstChild (  ) ;^444^^^^^443^454^Node left = n.getFirstChild (  ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseAssign [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  leftType  rightType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  left  n  right  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[BugLab_Variable_Misuse]^Node right = left.getLastChild (  ) ;^445^^^^^443^454^Node right = n.getLastChild (  ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseAssign [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  leftType  rightType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  left  n  right  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[BugLab_Variable_Misuse]^Node right = right.getLastChild (  ) ;^445^^^^^443^454^Node right = n.getLastChild (  ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseAssign [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  leftType  rightType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  left  n  right  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[BugLab_Variable_Misuse]^scope = traverseChildren ( right, scope ) ;^446^^^^^443^454^scope = traverseChildren ( n, scope ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseAssign [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  leftType  rightType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  left  n  right  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[BugLab_Variable_Misuse]^scope = traverseChildren ( n, joinedScope ) ;^446^^^^^443^454^scope = traverseChildren ( n, scope ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseAssign [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  leftType  rightType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  left  n  right  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[BugLab_Argument_Swapping]^scope = traverseChildren ( scope, n ) ;^446^^^^^443^454^scope = traverseChildren ( n, scope ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseAssign [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  leftType  rightType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  left  n  right  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[BugLab_Variable_Misuse]^JSType rightType = left.getJSType (  ) ;^448^^^^^443^454^JSType leftType = left.getJSType (  ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseAssign [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  leftType  rightType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  left  n  right  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[BugLab_Variable_Misuse]^JSType nType = getJSType ( right ) ;^449^^^^^443^454^JSType rightType = getJSType ( right ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseAssign [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  leftType  rightType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  left  n  right  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[BugLab_Variable_Misuse]^n.setJSType ( leftType ) ;^450^^^^^443^454^n.setJSType ( rightType ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseAssign [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  leftType  rightType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  left  n  right  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[BugLab_Variable_Misuse]^updateScopeForTypeChange ( newScope, left, leftType, rightType ) ;^452^^^^^443^454^updateScopeForTypeChange ( scope, left, leftType, rightType ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseAssign [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  leftType  rightType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  left  n  right  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[BugLab_Variable_Misuse]^updateScopeForTypeChange ( scope, right, leftType, rightType ) ;^452^^^^^443^454^updateScopeForTypeChange ( scope, left, leftType, rightType ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseAssign [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  leftType  rightType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  left  n  right  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[BugLab_Argument_Swapping]^updateScopeForTypeChange ( rightType, left, leftType, scope ) ;^452^^^^^443^454^updateScopeForTypeChange ( scope, left, leftType, rightType ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseAssign [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  leftType  rightType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  left  n  right  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[BugLab_Argument_Swapping]^updateScopeForTypeChange ( left, scope, leftType, rightType ) ;^452^^^^^443^454^updateScopeForTypeChange ( scope, left, leftType, rightType ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseAssign [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  leftType  rightType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  left  n  right  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[BugLab_Argument_Swapping]^updateScopeForTypeChange ( leftType, left, scope, rightType ) ;^452^^^^^443^454^updateScopeForTypeChange ( scope, left, leftType, rightType ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseAssign [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  leftType  rightType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  left  n  right  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[BugLab_Variable_Misuse]^return rightScope;^453^^^^^443^454^return scope;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseAssign [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  leftType  rightType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  left  n  right  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[BugLab_Variable_Misuse]^Preconditions.checkNotNull ( oldType ) ;^462^^^^^447^477^Preconditions.checkNotNull ( resultType ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] updateScopeForTypeChange [RETURN_TYPE] void   FlowScope scope Node left JSType leftType JSType resultType [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  leftType  oldType  resultType  boolean  isVarDeclaration  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Var  var  Node  left  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  qualifiedName  varName  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[BugLab_Wrong_Operator]^if  ( !isVarDeclaration && var == null || var.isTypeInferred (  )  )  {^479^^^^^464^494^if  ( !isVarDeclaration || var == null || var.isTypeInferred (  )  )  {^[CLASS] TypeInference BooleanOutcomePair  [METHOD] updateScopeForTypeChange [RETURN_TYPE] void   FlowScope scope Node left JSType leftType JSType resultType [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  leftType  oldType  resultType  boolean  isVarDeclaration  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Var  var  Node  left  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  qualifiedName  varName  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[BugLab_Wrong_Operator]^if  ( !isVarDeclaration || var != null || var.isTypeInferred (  )  )  {^479^^^^^464^494^if  ( !isVarDeclaration || var == null || var.isTypeInferred (  )  )  {^[CLASS] TypeInference BooleanOutcomePair  [METHOD] updateScopeForTypeChange [RETURN_TYPE] void   FlowScope scope Node left JSType leftType JSType resultType [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  leftType  oldType  resultType  boolean  isVarDeclaration  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Var  var  Node  left  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  qualifiedName  varName  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[BugLab_Variable_Misuse]^redeclare ( rightScope, varName, resultType ) ;^480^^^^^465^495^redeclare ( scope, varName, resultType ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] updateScopeForTypeChange [RETURN_TYPE] void   FlowScope scope Node left JSType leftType JSType resultType [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  leftType  oldType  resultType  boolean  isVarDeclaration  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Var  var  Node  left  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  qualifiedName  varName  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[BugLab_Variable_Misuse]^redeclare ( scope, qualifiedName, resultType ) ;^480^^^^^465^495^redeclare ( scope, varName, resultType ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] updateScopeForTypeChange [RETURN_TYPE] void   FlowScope scope Node left JSType leftType JSType resultType [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  leftType  oldType  resultType  boolean  isVarDeclaration  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Var  var  Node  left  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  qualifiedName  varName  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[BugLab_Variable_Misuse]^redeclare ( scope, varName, oldType ) ;^480^^^^^465^495^redeclare ( scope, varName, resultType ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] updateScopeForTypeChange [RETURN_TYPE] void   FlowScope scope Node left JSType leftType JSType resultType [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  leftType  oldType  resultType  boolean  isVarDeclaration  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Var  var  Node  left  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  qualifiedName  varName  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[BugLab_Argument_Swapping]^redeclare ( resultType, varName, scope ) ;^480^^^^^465^495^redeclare ( scope, varName, resultType ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] updateScopeForTypeChange [RETURN_TYPE] void   FlowScope scope Node left JSType leftType JSType resultType [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  leftType  oldType  resultType  boolean  isVarDeclaration  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Var  var  Node  left  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  qualifiedName  varName  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[BugLab_Argument_Swapping]^redeclare ( varName, scope, resultType ) ;^480^^^^^465^495^redeclare ( scope, varName, resultType ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] updateScopeForTypeChange [RETURN_TYPE] void   FlowScope scope Node left JSType leftType JSType resultType [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  leftType  oldType  resultType  boolean  isVarDeclaration  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Var  var  Node  left  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  qualifiedName  varName  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[BugLab_Argument_Swapping]^redeclare ( scope, resultType, varName ) ;^480^^^^^465^495^redeclare ( scope, varName, resultType ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] updateScopeForTypeChange [RETURN_TYPE] void   FlowScope scope Node left JSType leftType JSType resultType [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  leftType  oldType  resultType  boolean  isVarDeclaration  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Var  var  Node  left  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  qualifiedName  varName  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[BugLab_Wrong_Operator]^if  ( var != null || var.isTypeInferred (  )  )  {^485^^^^^470^500^if  ( var != null && var.isTypeInferred (  )  )  {^[CLASS] TypeInference BooleanOutcomePair  [METHOD] updateScopeForTypeChange [RETURN_TYPE] void   FlowScope scope Node left JSType leftType JSType resultType [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  leftType  oldType  resultType  boolean  isVarDeclaration  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Var  var  Node  left  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  qualifiedName  varName  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[BugLab_Wrong_Operator]^if  ( var == null && var.isTypeInferred (  )  )  {^485^^^^^470^500^if  ( var != null && var.isTypeInferred (  )  )  {^[CLASS] TypeInference BooleanOutcomePair  [METHOD] updateScopeForTypeChange [RETURN_TYPE] void   FlowScope scope Node left JSType leftType JSType resultType [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  leftType  oldType  resultType  boolean  isVarDeclaration  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Var  var  Node  left  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  qualifiedName  varName  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[BugLab_Variable_Misuse]^var.setType ( leftType == null ? resultType : oldType.getLeastSupertype ( resultType )  ) ;^487^488^^^^472^502^var.setType ( oldType == null ? resultType : oldType.getLeastSupertype ( resultType )  ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] updateScopeForTypeChange [RETURN_TYPE] void   FlowScope scope Node left JSType leftType JSType resultType [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  leftType  oldType  resultType  boolean  isVarDeclaration  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Var  var  Node  left  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  qualifiedName  varName  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[BugLab_Variable_Misuse]^var.setType ( oldType == null ? leftType : oldType.getLeastSupertype ( resultType )  ) ;^487^488^^^^472^502^var.setType ( oldType == null ? resultType : oldType.getLeastSupertype ( resultType )  ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] updateScopeForTypeChange [RETURN_TYPE] void   FlowScope scope Node left JSType leftType JSType resultType [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  leftType  oldType  resultType  boolean  isVarDeclaration  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Var  var  Node  left  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  qualifiedName  varName  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[BugLab_Argument_Swapping]^var.setType ( resultType == null ? oldType : oldType.getLeastSupertype ( resultType )  ) ;^487^488^^^^472^502^var.setType ( oldType == null ? resultType : oldType.getLeastSupertype ( resultType )  ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] updateScopeForTypeChange [RETURN_TYPE] void   FlowScope scope Node left JSType leftType JSType resultType [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  leftType  oldType  resultType  boolean  isVarDeclaration  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Var  var  Node  left  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  qualifiedName  varName  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[BugLab_Wrong_Operator]^var.setType ( oldType != null ? resultType : oldType.getLeastSupertype ( resultType )  ) ;^487^488^^^^472^502^var.setType ( oldType == null ? resultType : oldType.getLeastSupertype ( resultType )  ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] updateScopeForTypeChange [RETURN_TYPE] void   FlowScope scope Node left JSType leftType JSType resultType [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  leftType  oldType  resultType  boolean  isVarDeclaration  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Var  var  Node  left  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  qualifiedName  varName  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[BugLab_Variable_Misuse]^resultType : leftType.getLeastSupertype ( resultType )  ) ;^488^^^^^473^503^resultType : oldType.getLeastSupertype ( resultType )  ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] updateScopeForTypeChange [RETURN_TYPE] void   FlowScope scope Node left JSType leftType JSType resultType [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  leftType  oldType  resultType  boolean  isVarDeclaration  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Var  var  Node  left  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  qualifiedName  varName  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[BugLab_Variable_Misuse]^resultType : oldType.getLeastSupertype ( leftType )  ) ;^488^^^^^473^503^resultType : oldType.getLeastSupertype ( resultType )  ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] updateScopeForTypeChange [RETURN_TYPE] void   FlowScope scope Node left JSType leftType JSType resultType [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  leftType  oldType  resultType  boolean  isVarDeclaration  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Var  var  Node  left  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  qualifiedName  varName  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[BugLab_Argument_Swapping]^resultType : resultType.getLeastSupertype ( oldType )  ) ;^488^^^^^473^503^resultType : oldType.getLeastSupertype ( resultType )  ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] updateScopeForTypeChange [RETURN_TYPE] void   FlowScope scope Node left JSType leftType JSType resultType [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  leftType  oldType  resultType  boolean  isVarDeclaration  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Var  var  Node  left  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  qualifiedName  varName  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[BugLab_Wrong_Operator]^if  ( qualifiedName == null )  {^493^^^^^478^508^if  ( qualifiedName != null )  {^[CLASS] TypeInference BooleanOutcomePair  [METHOD] updateScopeForTypeChange [RETURN_TYPE] void   FlowScope scope Node left JSType leftType JSType resultType [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  leftType  oldType  resultType  boolean  isVarDeclaration  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Var  var  Node  left  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  qualifiedName  varName  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[BugLab_Variable_Misuse]^scope.inferQualifiedSlot ( varName, leftType == null ? getNativeType ( UNKNOWN_TYPE )  : leftType, resultType ) ;^494^495^496^^^479^509^scope.inferQualifiedSlot ( qualifiedName, leftType == null ? getNativeType ( UNKNOWN_TYPE )  : leftType, resultType ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] updateScopeForTypeChange [RETURN_TYPE] void   FlowScope scope Node left JSType leftType JSType resultType [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  leftType  oldType  resultType  boolean  isVarDeclaration  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Var  var  Node  left  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  qualifiedName  varName  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[BugLab_Variable_Misuse]^scope.inferQualifiedSlot ( qualifiedName, oldType == null ? getNativeType ( UNKNOWN_TYPE )  : leftType, resultType ) ;^494^495^496^^^479^509^scope.inferQualifiedSlot ( qualifiedName, leftType == null ? getNativeType ( UNKNOWN_TYPE )  : leftType, resultType ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] updateScopeForTypeChange [RETURN_TYPE] void   FlowScope scope Node left JSType leftType JSType resultType [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  leftType  oldType  resultType  boolean  isVarDeclaration  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Var  var  Node  left  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  qualifiedName  varName  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[BugLab_Variable_Misuse]^scope.inferQualifiedSlot ( qualifiedName, leftType == null ? getNativeType ( UNKNOWN_TYPE )  : leftType, oldType ) ;^494^495^496^^^479^509^scope.inferQualifiedSlot ( qualifiedName, leftType == null ? getNativeType ( UNKNOWN_TYPE )  : leftType, resultType ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] updateScopeForTypeChange [RETURN_TYPE] void   FlowScope scope Node left JSType leftType JSType resultType [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  leftType  oldType  resultType  boolean  isVarDeclaration  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Var  var  Node  left  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  qualifiedName  varName  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[BugLab_Argument_Swapping]^scope.inferQualifiedSlot ( resultType, leftType == null ? getNativeType ( UNKNOWN_TYPE )  : leftType, qualifiedName ) ;^494^495^496^^^479^509^scope.inferQualifiedSlot ( qualifiedName, leftType == null ? getNativeType ( UNKNOWN_TYPE )  : leftType, resultType ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] updateScopeForTypeChange [RETURN_TYPE] void   FlowScope scope Node left JSType leftType JSType resultType [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  leftType  oldType  resultType  boolean  isVarDeclaration  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Var  var  Node  left  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  qualifiedName  varName  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[BugLab_Argument_Swapping]^scope.inferQualifiedSlot ( qualifiedName, resultType == null ? getNativeType ( UNKNOWN_TYPE )  : leftType, leftType ) ;^494^495^496^^^479^509^scope.inferQualifiedSlot ( qualifiedName, leftType == null ? getNativeType ( UNKNOWN_TYPE )  : leftType, resultType ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] updateScopeForTypeChange [RETURN_TYPE] void   FlowScope scope Node left JSType leftType JSType resultType [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  leftType  oldType  resultType  boolean  isVarDeclaration  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Var  var  Node  left  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  qualifiedName  varName  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[BugLab_Wrong_Operator]^scope.inferQualifiedSlot ( qualifiedName, leftType != null ? getNativeType ( UNKNOWN_TYPE )  : leftType, resultType ) ;^494^495^496^^^479^509^scope.inferQualifiedSlot ( qualifiedName, leftType == null ? getNativeType ( UNKNOWN_TYPE )  : leftType, resultType ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] updateScopeForTypeChange [RETURN_TYPE] void   FlowScope scope Node left JSType leftType JSType resultType [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  leftType  oldType  resultType  boolean  isVarDeclaration  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Var  var  Node  left  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  qualifiedName  varName  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[BugLab_Variable_Misuse]^Var var = functionScope.getVar ( varName ) ;^466^^^^^451^481^Var var = syntacticScope.getVar ( varName ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] updateScopeForTypeChange [RETURN_TYPE] void   FlowScope scope Node left JSType leftType JSType resultType [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  leftType  oldType  resultType  boolean  isVarDeclaration  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Var  var  Node  left  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  qualifiedName  varName  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[BugLab_Argument_Swapping]^Var var = varName.getVar ( syntacticScope ) ;^466^^^^^451^481^Var var = syntacticScope.getVar ( varName ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] updateScopeForTypeChange [RETURN_TYPE] void   FlowScope scope Node left JSType leftType JSType resultType [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  leftType  oldType  resultType  boolean  isVarDeclaration  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Var  var  Node  left  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  qualifiedName  varName  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[BugLab_Variable_Misuse]^Var var = syntacticScope.getVar ( qualifiedName ) ;^466^^^^^451^481^Var var = syntacticScope.getVar ( varName ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] updateScopeForTypeChange [RETURN_TYPE] void   FlowScope scope Node left JSType leftType JSType resultType [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  leftType  oldType  resultType  boolean  isVarDeclaration  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Var  var  Node  left  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  qualifiedName  varName  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[BugLab_Variable_Misuse]^left.setJSType ( isVarDeclaration || resultType == null ? resultType : null ) ;^482^483^^^^467^497^left.setJSType ( isVarDeclaration || leftType == null ? resultType : null ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] updateScopeForTypeChange [RETURN_TYPE] void   FlowScope scope Node left JSType leftType JSType resultType [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  leftType  oldType  resultType  boolean  isVarDeclaration  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Var  var  Node  left  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  qualifiedName  varName  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[BugLab_Variable_Misuse]^left.setJSType ( isVarDeclaration || leftType == null ? oldType : null ) ;^482^483^^^^467^497^left.setJSType ( isVarDeclaration || leftType == null ? resultType : null ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] updateScopeForTypeChange [RETURN_TYPE] void   FlowScope scope Node left JSType leftType JSType resultType [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  leftType  oldType  resultType  boolean  isVarDeclaration  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Var  var  Node  left  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  qualifiedName  varName  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[BugLab_Argument_Swapping]^left.setJSType ( isVarDeclaration || leftTypeType == null ? resultType : null ) ;^482^483^^^^467^497^left.setJSType ( isVarDeclaration || leftType == null ? resultType : null ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] updateScopeForTypeChange [RETURN_TYPE] void   FlowScope scope Node left JSType leftType JSType resultType [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  leftType  oldType  resultType  boolean  isVarDeclaration  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Var  var  Node  left  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  qualifiedName  varName  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[BugLab_Argument_Swapping]^left.setJSType ( leftType || isVarDeclaration == null ? resultType : null ) ;^482^483^^^^467^497^left.setJSType ( isVarDeclaration || leftType == null ? resultType : null ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] updateScopeForTypeChange [RETURN_TYPE] void   FlowScope scope Node left JSType leftType JSType resultType [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  leftType  oldType  resultType  boolean  isVarDeclaration  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Var  var  Node  left  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  qualifiedName  varName  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[BugLab_Argument_Swapping]^left.setJSType ( isVarDeclaration || resultType == null ? leftType : null ) ;^482^483^^^^467^497^left.setJSType ( isVarDeclaration || leftType == null ? resultType : null ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] updateScopeForTypeChange [RETURN_TYPE] void   FlowScope scope Node left JSType leftType JSType resultType [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  leftType  oldType  resultType  boolean  isVarDeclaration  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Var  var  Node  left  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  qualifiedName  varName  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[BugLab_Wrong_Operator]^left.setJSType ( isVarDeclaration && leftType == null ? resultType : null ) ;^482^483^^^^467^497^left.setJSType ( isVarDeclaration || leftType == null ? resultType : null ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] updateScopeForTypeChange [RETURN_TYPE] void   FlowScope scope Node left JSType leftType JSType resultType [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  leftType  oldType  resultType  boolean  isVarDeclaration  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Var  var  Node  left  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  qualifiedName  varName  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[BugLab_Wrong_Operator]^left.setJSType ( isVarDeclaration || leftType != null ? resultType : null ) ;^482^483^^^^467^497^left.setJSType ( isVarDeclaration || leftType == null ? resultType : null ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] updateScopeForTypeChange [RETURN_TYPE] void   FlowScope scope Node left JSType leftType JSType resultType [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  leftType  oldType  resultType  boolean  isVarDeclaration  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Var  var  Node  left  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  qualifiedName  varName  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[BugLab_Variable_Misuse]^var.setType ( resultType == null ? resultType : oldType.getLeastSupertype ( resultType )  ) ;^487^488^^^^472^502^var.setType ( oldType == null ? resultType : oldType.getLeastSupertype ( resultType )  ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] updateScopeForTypeChange [RETURN_TYPE] void   FlowScope scope Node left JSType leftType JSType resultType [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  leftType  oldType  resultType  boolean  isVarDeclaration  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Var  var  Node  left  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  qualifiedName  varName  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[BugLab_Variable_Misuse]^scope.inferQualifiedSlot ( qualifiedName, resultType == null ? getNativeType ( UNKNOWN_TYPE )  : leftType, resultType ) ;^494^495^496^^^479^509^scope.inferQualifiedSlot ( qualifiedName, leftType == null ? getNativeType ( UNKNOWN_TYPE )  : leftType, resultType ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] updateScopeForTypeChange [RETURN_TYPE] void   FlowScope scope Node left JSType leftType JSType resultType [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  leftType  oldType  resultType  boolean  isVarDeclaration  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Var  var  Node  left  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  qualifiedName  varName  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[BugLab_Variable_Misuse]^left.setJSType ( oldType ) ;^499^^^^^484^514^left.setJSType ( resultType ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] updateScopeForTypeChange [RETURN_TYPE] void   FlowScope scope Node left JSType leftType JSType resultType [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  leftType  oldType  resultType  boolean  isVarDeclaration  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Var  var  Node  left  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  qualifiedName  varName  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[BugLab_Variable_Misuse]^ensurePropertyDefined ( left, oldType ) ;^500^^^^^485^515^ensurePropertyDefined ( left, resultType ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] updateScopeForTypeChange [RETURN_TYPE] void   FlowScope scope Node left JSType leftType JSType resultType [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  leftType  oldType  resultType  boolean  isVarDeclaration  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Var  var  Node  left  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  qualifiedName  varName  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[BugLab_Argument_Swapping]^ensurePropertyDefined ( resultType, left ) ;^500^^^^^485^515^ensurePropertyDefined ( left, resultType ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] updateScopeForTypeChange [RETURN_TYPE] void   FlowScope scope Node left JSType leftType JSType resultType [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  leftType  oldType  resultType  boolean  isVarDeclaration  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Var  var  Node  left  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  qualifiedName  varName  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[BugLab_Wrong_Operator]^if  ( objectType == null )  {^511^^^^^496^526^if  ( objectType != null )  {^[CLASS] TypeInference BooleanOutcomePair  [METHOD] ensurePropertyDefined [RETURN_TYPE] void   Node getprop JSType rightType [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  rightType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  getprop  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  propName  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[BugLab_Argument_Swapping]^if  ( ensurePropertyDeclaredHelper ( objectType, getprop )  )  {^512^^^^^497^527^if  ( ensurePropertyDeclaredHelper ( getprop, objectType )  )  {^[CLASS] TypeInference BooleanOutcomePair  [METHOD] ensurePropertyDefined [RETURN_TYPE] void   Node getprop JSType rightType [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  rightType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  getprop  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  propName  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[BugLab_Argument_Swapping]^if  ( propName.hasProperty ( objectType )  || !objectType.isInstanceType (  )  )  {^530^531^^^^515^545^if  ( objectType.hasProperty ( propName )  || !objectType.isInstanceType (  )  )  {^[CLASS] TypeInference BooleanOutcomePair  [METHOD] ensurePropertyDefined [RETURN_TYPE] void   Node getprop JSType rightType [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  rightType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  getprop  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  propName  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[BugLab_Wrong_Operator]^if  ( objectType.hasProperty ( propName )  && !objectType.isInstanceType (  )  )  {^530^531^^^^515^545^if  ( objectType.hasProperty ( propName )  || !objectType.isInstanceType (  )  )  {^[CLASS] TypeInference BooleanOutcomePair  [METHOD] ensurePropertyDefined [RETURN_TYPE] void   Node getprop JSType rightType [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  rightType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  getprop  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  propName  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[BugLab_Variable_Misuse]^if  ( getprop.getFirstChild (  ) .getType (  )  == Token.THIS && getJSType ( functionScope.getRootNode (  )  ) .isConstructor (  )  )  {^538^539^^^^530^544^if  ( getprop.getFirstChild (  ) .getType (  )  == Token.THIS && getJSType ( syntacticScope.getRootNode (  )  ) .isConstructor (  )  )  {^[CLASS] TypeInference BooleanOutcomePair  [METHOD] ensurePropertyDefined [RETURN_TYPE] void   Node getprop JSType rightType [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  rightType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  getprop  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  propName  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[BugLab_Wrong_Operator]^if  ( getprop.getFirstChild (  ) .getType (  )  == Token.THIS || getJSType ( syntacticScope.getRootNode (  )  ) .isConstructor (  )  )  {^538^539^^^^530^544^if  ( getprop.getFirstChild (  ) .getType (  )  == Token.THIS && getJSType ( syntacticScope.getRootNode (  )  ) .isConstructor (  )  )  {^[CLASS] TypeInference BooleanOutcomePair  [METHOD] ensurePropertyDefined [RETURN_TYPE] void   Node getprop JSType rightType [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  rightType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  getprop  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  propName  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[BugLab_Wrong_Operator]^if  ( getprop.getFirstChild (  ) .getType (  )  <= Token.THIS && getJSType ( syntacticScope.getRootNode (  )  ) .isConstructor (  )  )  {^538^539^^^^530^544^if  ( getprop.getFirstChild (  ) .getType (  )  == Token.THIS && getJSType ( syntacticScope.getRootNode (  )  ) .isConstructor (  )  )  {^[CLASS] TypeInference BooleanOutcomePair  [METHOD] ensurePropertyDefined [RETURN_TYPE] void   Node getprop JSType rightType [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  rightType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  getprop  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  propName  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[BugLab_Argument_Swapping]^registry.registerPropertyOnType ( objectType, propName ) ;^542^^^^^530^544^registry.registerPropertyOnType ( propName, objectType ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] ensurePropertyDefined [RETURN_TYPE] void   Node getprop JSType rightType [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  rightType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  getprop  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  propName  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[BugLab_Argument_Swapping]^objectType.defineInferredProperty ( rightType, propName, false ) ;^540^^^^^530^544^objectType.defineInferredProperty ( propName, rightType, false ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] ensurePropertyDefined [RETURN_TYPE] void   Node getprop JSType rightType [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  rightType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  getprop  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  propName  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[BugLab_Wrong_Literal]^objectType.defineInferredProperty ( propName, rightType, true ) ;^540^^^^^530^544^objectType.defineInferredProperty ( propName, rightType, false ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] ensurePropertyDefined [RETURN_TYPE] void   Node getprop JSType rightType [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  rightType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  getprop  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  propName  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[BugLab_Variable_Misuse]^getJSType ( functionScope.getRootNode (  )  ) .isConstructor (  )  )  {^539^^^^^530^544^getJSType ( syntacticScope.getRootNode (  )  ) .isConstructor (  )  )  {^[CLASS] TypeInference BooleanOutcomePair  [METHOD] ensurePropertyDefined [RETURN_TYPE] void   Node getprop JSType rightType [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  rightType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  getprop  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  propName  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[BugLab_Wrong_Literal]^objectType.defineInferredProperty ( propName, rightType, true ) ;^535^^^^^530^544^objectType.defineInferredProperty ( propName, rightType, false ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] ensurePropertyDefined [RETURN_TYPE] void   Node getprop JSType rightType [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  rightType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  getprop  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  propName  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[BugLab_Argument_Swapping]^objectType.defineDeclaredProperty ( rightType, propName, false ) ;^533^^^^^530^544^objectType.defineDeclaredProperty ( propName, rightType, false ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] ensurePropertyDefined [RETURN_TYPE] void   Node getprop JSType rightType [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  rightType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  getprop  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  propName  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[BugLab_Wrong_Literal]^objectType.defineDeclaredProperty ( propName, rightType, true ) ;^533^^^^^530^544^objectType.defineDeclaredProperty ( propName, rightType, false ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] ensurePropertyDefined [RETURN_TYPE] void   Node getprop JSType rightType [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  rightType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  getprop  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  propName  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[BugLab_Argument_Swapping]^objectType.defineInferredProperty ( rightType, propName, false ) ;^535^^^^^530^544^objectType.defineInferredProperty ( propName, rightType, false ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] ensurePropertyDefined [RETURN_TYPE] void   Node getprop JSType rightType [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  rightType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  getprop  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  propName  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[BugLab_Wrong_Literal]^objectType.defineInferredProperty ( propName, rightType, true ) ;^535^^^^^532^536^objectType.defineInferredProperty ( propName, rightType, false ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] ensurePropertyDefined [RETURN_TYPE] void   Node getprop JSType rightType [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  rightType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  getprop  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  propName  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[BugLab_Argument_Swapping]^objectType.defineDeclaredProperty ( rightType, propName, false ) ;^533^^^^^518^548^objectType.defineDeclaredProperty ( propName, rightType, false ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] ensurePropertyDefined [RETURN_TYPE] void   Node getprop JSType rightType [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  rightType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  getprop  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  propName  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[BugLab_Wrong_Literal]^objectType.defineDeclaredProperty ( propName, rightType, true ) ;^533^^^^^518^548^objectType.defineDeclaredProperty ( propName, rightType, false ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] ensurePropertyDefined [RETURN_TYPE] void   Node getprop JSType rightType [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  rightType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  getprop  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  propName  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[BugLab_Variable_Misuse]^if  ( getprop.getFirstChild (  ) .getType (  )  == Token.THIS && getJSType ( functionScope.getRootNode (  )  ) .isConstructor (  )  )  {^538^539^^^^523^553^if  ( getprop.getFirstChild (  ) .getType (  )  == Token.THIS && getJSType ( syntacticScope.getRootNode (  )  ) .isConstructor (  )  )  {^[CLASS] TypeInference BooleanOutcomePair  [METHOD] ensurePropertyDefined [RETURN_TYPE] void   Node getprop JSType rightType [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  rightType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  getprop  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  propName  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[BugLab_Wrong_Operator]^if  ( getprop.getFirstChild (  ) .getType (  )  == Token.THIS || getJSType ( syntacticScope.getRootNode (  )  ) .isConstructor (  )  )  {^538^539^^^^523^553^if  ( getprop.getFirstChild (  ) .getType (  )  == Token.THIS && getJSType ( syntacticScope.getRootNode (  )  ) .isConstructor (  )  )  {^[CLASS] TypeInference BooleanOutcomePair  [METHOD] ensurePropertyDefined [RETURN_TYPE] void   Node getprop JSType rightType [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  rightType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  getprop  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  propName  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[BugLab_Wrong_Operator]^if  ( getprop.getFirstChild (  ) .getType (  )  != Token.THIS && getJSType ( syntacticScope.getRootNode (  )  ) .isConstructor (  )  )  {^538^539^^^^523^553^if  ( getprop.getFirstChild (  ) .getType (  )  == Token.THIS && getJSType ( syntacticScope.getRootNode (  )  ) .isConstructor (  )  )  {^[CLASS] TypeInference BooleanOutcomePair  [METHOD] ensurePropertyDefined [RETURN_TYPE] void   Node getprop JSType rightType [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  rightType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  getprop  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  propName  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[BugLab_Argument_Swapping]^registry.registerPropertyOnType ( objectType, propName ) ;^542^^^^^538^543^registry.registerPropertyOnType ( propName, objectType ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] ensurePropertyDefined [RETURN_TYPE] void   Node getprop JSType rightType [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  rightType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  getprop  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  propName  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[BugLab_Wrong_Literal]^objectType.defineInferredProperty ( propName, rightType, true ) ;^540^^^^^538^543^objectType.defineInferredProperty ( propName, rightType, false ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] ensurePropertyDefined [RETURN_TYPE] void   Node getprop JSType rightType [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  rightType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  getprop  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  propName  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[BugLab_Argument_Swapping]^objectType.defineInferredProperty ( rightType, propName, false ) ;^535^^^^^520^550^objectType.defineInferredProperty ( propName, rightType, false ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] ensurePropertyDefined [RETURN_TYPE] void   Node getprop JSType rightType [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  rightType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  getprop  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  propName  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[BugLab_Wrong_Literal]^objectType.defineInferredProperty ( propName, rightType, true ) ;^535^^^^^520^550^objectType.defineInferredProperty ( propName, rightType, false ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] ensurePropertyDefined [RETURN_TYPE] void   Node getprop JSType rightType [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  rightType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  getprop  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  propName  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[BugLab_Variable_Misuse]^getJSType ( functionScope.getRootNode (  )  ) .isConstructor (  )  )  {^539^^^^^524^554^getJSType ( syntacticScope.getRootNode (  )  ) .isConstructor (  )  )  {^[CLASS] TypeInference BooleanOutcomePair  [METHOD] ensurePropertyDefined [RETURN_TYPE] void   Node getprop JSType rightType [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  rightType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  getprop  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  propName  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[BugLab_Argument_Swapping]^objectType.defineInferredProperty ( rightType, propName, false ) ;^540^^^^^525^555^objectType.defineInferredProperty ( propName, rightType, false ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] ensurePropertyDefined [RETURN_TYPE] void   Node getprop JSType rightType [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  rightType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  getprop  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  propName  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[BugLab_Wrong_Literal]^objectType.defineInferredProperty ( propName, rightType, true ) ;^540^^^^^525^555^objectType.defineInferredProperty ( propName, rightType, false ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] ensurePropertyDefined [RETURN_TYPE] void   Node getprop JSType rightType [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  rightType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  getprop  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  propName  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[BugLab_Argument_Swapping]^if  ( syntacticScope.getFirstChild (  ) .getType (  )  == Token.THIS && getJSType ( getprop.getRootNode (  )  ) .isConstructor (  )  )  {^538^539^^^^530^544^if  ( getprop.getFirstChild (  ) .getType (  )  == Token.THIS && getJSType ( syntacticScope.getRootNode (  )  ) .isConstructor (  )  )  {^[CLASS] TypeInference BooleanOutcomePair  [METHOD] ensurePropertyDefined [RETURN_TYPE] void   Node getprop JSType rightType [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  rightType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  getprop  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  propName  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[BugLab_Wrong_Operator]^if  ( getprop.getFirstChild (  ) .getType (  )  != Token.THIS && getJSType ( syntacticScope.getRootNode (  )  ) .isConstructor (  )  )  {^538^539^^^^530^544^if  ( getprop.getFirstChild (  ) .getType (  )  == Token.THIS && getJSType ( syntacticScope.getRootNode (  )  ) .isConstructor (  )  )  {^[CLASS] TypeInference BooleanOutcomePair  [METHOD] ensurePropertyDefined [RETURN_TYPE] void   Node getprop JSType rightType [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  rightType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  getprop  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  propName  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[BugLab_Argument_Swapping]^objectType.defineInferredProperty ( rightType, propName, false ) ;^535^^^^^532^536^objectType.defineInferredProperty ( propName, rightType, false ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] ensurePropertyDefined [RETURN_TYPE] void   Node getprop JSType rightType [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  rightType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  getprop  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  propName  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[BugLab_Argument_Swapping]^objectType.defineInferredProperty ( rightType, propName, false ) ;^540^^^^^538^543^objectType.defineInferredProperty ( propName, rightType, false ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] ensurePropertyDefined [RETURN_TYPE] void   Node getprop JSType rightType [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  rightType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  getprop  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  propName  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[BugLab_Argument_Swapping]^registry.registerPropertyOnType ( objectType, propName ) ;^542^^^^^527^557^registry.registerPropertyOnType ( propName, objectType ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] ensurePropertyDefined [RETURN_TYPE] void   Node getprop JSType rightType [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  rightType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  getprop  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  propName  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[BugLab_Wrong_Operator]^if  ( getprop.getFirstChild (  ) .getType (  )  >= Token.THIS && getJSType ( syntacticScope.getRootNode (  )  ) .isConstructor (  )  )  {^538^539^^^^530^544^if  ( getprop.getFirstChild (  ) .getType (  )  == Token.THIS && getJSType ( syntacticScope.getRootNode (  )  ) .isConstructor (  )  )  {^[CLASS] TypeInference BooleanOutcomePair  [METHOD] ensurePropertyDefined [RETURN_TYPE] void   Node getprop JSType rightType [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  rightType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  getprop  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  propName  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[BugLab_Wrong_Operator]^if  ( ownerType == null )  {^559^^^^^556^562^if  ( ownerType != null )  {^[CLASS] TypeInference BooleanOutcomePair  [METHOD] ensurePropertyDeclared [RETURN_TYPE] void   Node getprop [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  ObjectType  ownerType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  getprop  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[BugLab_Argument_Swapping]^ensurePropertyDeclaredHelper ( ownerType, getprop ) ;^560^^^^^556^562^ensurePropertyDeclaredHelper ( getprop, ownerType ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] ensurePropertyDeclared [RETURN_TYPE] void   Node getprop [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  ObjectType  ownerType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  getprop  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[BugLab_Variable_Misuse]^if  ( propName != null )  {^572^^^^^568^585^if  ( qName != null )  {^[CLASS] TypeInference BooleanOutcomePair  [METHOD] ensurePropertyDeclaredHelper [RETURN_TYPE] boolean   Node getprop ObjectType objectType [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Var  var  Node  getprop  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  propName  qName  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[BugLab_Wrong_Operator]^if  ( qName == null )  {^572^^^^^568^585^if  ( qName != null )  {^[CLASS] TypeInference BooleanOutcomePair  [METHOD] ensurePropertyDeclaredHelper [RETURN_TYPE] boolean   Node getprop ObjectType objectType [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Var  var  Node  getprop  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  propName  qName  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[BugLab_Variable_Misuse]^if  ( var != null && !var.isTypeInferred (  )  && !objectType.hasOwnProperty ( qName )  && ( !objectType.isInstanceType (  )  ||^574^575^576^577^^568^585^if  ( var != null && !var.isTypeInferred (  )  && !objectType.hasOwnProperty ( propName )  && ( !objectType.isInstanceType (  )  ||^[CLASS] TypeInference BooleanOutcomePair  [METHOD] ensurePropertyDeclaredHelper [RETURN_TYPE] boolean   Node getprop ObjectType objectType [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Var  var  Node  getprop  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  propName  qName  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[BugLab_Wrong_Operator]^if  ( var != null || !var.isTypeInferred (  )  && !objectType.hasOwnProperty ( propName )  && ( !objectType.isInstanceType (  )  ||^574^575^576^577^^568^585^if  ( var != null && !var.isTypeInferred (  )  && !objectType.hasOwnProperty ( propName )  && ( !objectType.isInstanceType (  )  ||^[CLASS] TypeInference BooleanOutcomePair  [METHOD] ensurePropertyDeclaredHelper [RETURN_TYPE] boolean   Node getprop ObjectType objectType [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Var  var  Node  getprop  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  propName  qName  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[BugLab_Wrong_Operator]^if  ( var == null && !var.isTypeInferred (  )  && !objectType.hasOwnProperty ( propName )  && ( !objectType.isInstanceType (  )  ||^574^575^576^577^^568^585^if  ( var != null && !var.isTypeInferred (  )  && !objectType.hasOwnProperty ( propName )  && ( !objectType.isInstanceType (  )  ||^[CLASS] TypeInference BooleanOutcomePair  [METHOD] ensurePropertyDeclaredHelper [RETURN_TYPE] boolean   Node getprop ObjectType objectType [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Var  var  Node  getprop  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  propName  qName  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[BugLab_Wrong_Operator]^if  ( var != null && !var.isTypeInferred (  )  && !objectType.hasOwnProperty ( propName )  && ( !objectType.isInstanceType (  )  &&^574^575^576^577^^568^585^if  ( var != null && !var.isTypeInferred (  )  && !objectType.hasOwnProperty ( propName )  && ( !objectType.isInstanceType (  )  ||^[CLASS] TypeInference BooleanOutcomePair  [METHOD] ensurePropertyDeclaredHelper [RETURN_TYPE] boolean   Node getprop ObjectType objectType [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Var  var  Node  getprop  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  propName  qName  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[BugLab_Wrong_Literal]^return false;^581^^^^^568^585^return true;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] ensurePropertyDeclaredHelper [RETURN_TYPE] boolean   Node getprop ObjectType objectType [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Var  var  Node  getprop  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  propName  qName  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[BugLab_Variable_Misuse]^objectType.defineDeclaredProperty ( qName, var.getType (  ) , var.isExtern (  )  ) ;^579^580^^^^568^585^objectType.defineDeclaredProperty ( propName, var.getType (  ) , var.isExtern (  )  ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] ensurePropertyDeclaredHelper [RETURN_TYPE] boolean   Node getprop ObjectType objectType [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Var  var  Node  getprop  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  propName  qName  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[BugLab_Argument_Swapping]^objectType.defineDeclaredProperty ( var, propName.getType (  ) , var.isExtern (  )  ) ;^579^580^^^^568^585^objectType.defineDeclaredProperty ( propName, var.getType (  ) , var.isExtern (  )  ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] ensurePropertyDeclaredHelper [RETURN_TYPE] boolean   Node getprop ObjectType objectType [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Var  var  Node  getprop  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  propName  qName  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[BugLab_Variable_Misuse]^Var var = syntacticScope.getVar ( propName ) ;^573^^^^^568^585^Var var = syntacticScope.getVar ( qName ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] ensurePropertyDeclaredHelper [RETURN_TYPE] boolean   Node getprop ObjectType objectType [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Var  var  Node  getprop  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  propName  qName  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[BugLab_Variable_Misuse]^Var var = functionScope.getVar ( qName ) ;^573^^^^^568^585^Var var = syntacticScope.getVar ( qName ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] ensurePropertyDeclaredHelper [RETURN_TYPE] boolean   Node getprop ObjectType objectType [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Var  var  Node  getprop  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  propName  qName  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[BugLab_Argument_Swapping]^Var var = qName.getVar ( syntacticScope ) ;^573^^^^^568^585^Var var = syntacticScope.getVar ( qName ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] ensurePropertyDeclaredHelper [RETURN_TYPE] boolean   Node getprop ObjectType objectType [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Var  var  Node  getprop  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  propName  qName  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[BugLab_Variable_Misuse]^!objectType.hasOwnProperty ( qName )  && ( !objectType.isInstanceType (  )  || ( var.isExtern (  )  && !objectType.isNativeObjectType (  )  )  )  )  {^576^577^578^^^568^585^!objectType.hasOwnProperty ( propName )  && ( !objectType.isInstanceType (  )  || ( var.isExtern (  )  && !objectType.isNativeObjectType (  )  )  )  )  {^[CLASS] TypeInference BooleanOutcomePair  [METHOD] ensurePropertyDeclaredHelper [RETURN_TYPE] boolean   Node getprop ObjectType objectType [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Var  var  Node  getprop  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  propName  qName  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[BugLab_Argument_Swapping]^if  ( propName != null && !var.isTypeInferred (  )  && !objectType.hasOwnProperty ( var )  && ( !objectType.isInstanceType (  )  ||^574^575^576^577^^568^585^if  ( var != null && !var.isTypeInferred (  )  && !objectType.hasOwnProperty ( propName )  && ( !objectType.isInstanceType (  )  ||^[CLASS] TypeInference BooleanOutcomePair  [METHOD] ensurePropertyDeclaredHelper [RETURN_TYPE] boolean   Node getprop ObjectType objectType [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Var  var  Node  getprop  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  propName  qName  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[BugLab_Wrong_Literal]^return true;^584^^^^^568^585^return false;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] ensurePropertyDeclaredHelper [RETURN_TYPE] boolean   Node getprop ObjectType objectType [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Var  var  Node  getprop  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  propName  qName  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[BugLab_Variable_Misuse]^String varName = value.getString (  ) ;^588^^^^^587^604^String varName = n.getString (  ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseName [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  StaticSlot  var  JSType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  varName  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[BugLab_Variable_Misuse]^Node value = value.getFirstChild (  ) ;^589^^^^^587^604^Node value = n.getFirstChild (  ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseName [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  StaticSlot  var  JSType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  varName  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[BugLab_Variable_Misuse]^JSType type = value.getJSType (  ) ;^590^^^^^587^604^JSType type = n.getJSType (  ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseName [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  StaticSlot  var  JSType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  varName  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[BugLab_Variable_Misuse]^if  ( n != null )  {^591^^^^^587^604^if  ( value != null )  {^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseName [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  StaticSlot  var  JSType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  varName  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[BugLab_Variable_Misuse]^if  ( value != valueull )  {^591^^^^^587^604^if  ( value != null )  {^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseName [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  StaticSlot  var  JSType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  varName  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[BugLab_Argument_Swapping]^if  ( n != valueull )  {^591^^^^^587^604^if  ( value != null )  {^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseName [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  StaticSlot  var  JSType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  varName  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[BugLab_Wrong_Operator]^if  ( value == null )  {^591^^^^^587^604^if  ( value != null )  {^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseName [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  StaticSlot  var  JSType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  varName  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[BugLab_Wrong_Operator]^if  ( var == null )  {^598^^^^^587^604^if  ( var != null )  {^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseName [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  StaticSlot  var  JSType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  varName  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[BugLab_Variable_Misuse]^StaticSlot<JSType> var = joinedScope.getSlot ( varName ) ;^597^^^^^587^604^StaticSlot<JSType> var = scope.getSlot ( varName ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseName [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  StaticSlot  var  JSType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  varName  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[BugLab_Argument_Swapping]^StaticSlot<JSType> var = varName.getSlot ( scope ) ;^597^^^^^587^604^StaticSlot<JSType> var = scope.getSlot ( varName ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseName [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  StaticSlot  var  JSType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  varName  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[BugLab_Variable_Misuse]^StaticSlot<JSType> var = rightScope.getSlot ( varName ) ;^597^^^^^587^604^StaticSlot<JSType> var = scope.getSlot ( varName ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseName [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  StaticSlot  var  JSType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  varName  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[BugLab_Variable_Misuse]^scope = traverse ( n, scope ) ;^592^^^^^587^604^scope = traverse ( value, scope ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseName [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  StaticSlot  var  JSType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  varName  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[BugLab_Variable_Misuse]^scope = traverse ( value, joinedScope ) ;^592^^^^^587^604^scope = traverse ( value, scope ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseName [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  StaticSlot  var  JSType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  varName  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[BugLab_Argument_Swapping]^scope = traverse ( scope, value ) ;^592^^^^^587^604^scope = traverse ( value, scope ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseName [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  StaticSlot  var  JSType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  varName  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[BugLab_Variable_Misuse]^return joinedScope;^595^^^^^587^604^return scope;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseName [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  StaticSlot  var  JSType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  varName  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[BugLab_Variable_Misuse]^getJSType ( n )  ) ;^594^^^^^587^604^getJSType ( value )  ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseName [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  StaticSlot  var  JSType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  varName  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[BugLab_Variable_Misuse]^scope = traverse ( value, newScope ) ;^592^^^^^587^604^scope = traverse ( value, scope ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseName [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  StaticSlot  var  JSType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  varName  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[BugLab_Variable_Misuse]^scope = traverse ( value, output ) ;^592^^^^^587^604^scope = traverse ( value, scope ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseName [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  StaticSlot  var  JSType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  varName  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[BugLab_Variable_Misuse]^return joinedScope;^603^^^^^587^604^return scope;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseName [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  StaticSlot  var  JSType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  varName  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[BugLab_Variable_Misuse]^scope = traverseChildren ( n, joinedScope ) ;^608^^^^^607^611^scope = traverseChildren ( n, scope ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseArrayLiteral [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[BugLab_Argument_Swapping]^scope = traverseChildren ( scope, n ) ;^608^^^^^607^611^scope = traverseChildren ( n, scope ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseArrayLiteral [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[BugLab_Variable_Misuse]^scope = traverseChildren ( n, leftScope ) ;^608^^^^^607^611^scope = traverseChildren ( n, scope ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseArrayLiteral [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[BugLab_Variable_Misuse]^return joinedScope;^610^^^^^607^611^return scope;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseArrayLiteral [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[BugLab_Variable_Misuse]^if  ( value.getJSType (  )  != null )  {^614^^^^^613^639^if  ( n.getJSType (  )  != null )  {^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseObjectLiteral [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[BugLab_Wrong_Operator]^if  ( n.getJSType (  )  == null )  {^614^^^^^613^639^if  ( n.getJSType (  )  != null )  {^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseObjectLiteral [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[BugLab_Variable_Misuse]^return leftScope;^618^^^^^613^639^return scope;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseObjectLiteral [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[BugLab_Variable_Misuse]^return joinedScope;^618^^^^^613^639^return scope;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseObjectLiteral [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[BugLab_Variable_Misuse]^if  ( memberName != nameull )  {^627^^^^^613^639^if  ( memberName != null )  {^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseObjectLiteral [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[BugLab_Wrong_Operator]^if  ( memberName == null )  {^627^^^^^613^639^if  ( memberName != null )  {^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseObjectLiteral [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[BugLab_Variable_Misuse]^return rightScope;^634^^^^^627^635^return scope;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseObjectLiteral [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[BugLab_Variable_Misuse]^objectType.defineInferredProperty ( memberName, getJSType ( name ) , false ) ;^631^^^^^613^639^objectType.defineInferredProperty ( memberName, getJSType ( value ) , false ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseObjectLiteral [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[BugLab_Wrong_Literal]^objectType.defineInferredProperty ( memberName, getJSType ( value ) , true ) ;^631^^^^^613^639^objectType.defineInferredProperty ( memberName, getJSType ( value ) , false ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseObjectLiteral [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[BugLab_Variable_Misuse]^for  ( Node valueame = n.getFirstChild (  ) ; name != null;^621^^^^^613^639^for  ( Node name = n.getFirstChild (  ) ; name != null;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseObjectLiteral [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[BugLab_Variable_Misuse]^for  ( Node value = n.getFirstChild (  ) ; name != null;^621^^^^^613^639^for  ( Node name = n.getFirstChild (  ) ; name != null;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseObjectLiteral [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[BugLab_Argument_Swapping]^for  ( Node n = name.getFirstChild (  ) ; name != null;^621^^^^^613^639^for  ( Node name = n.getFirstChild (  ) ; name != null;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseObjectLiteral [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[BugLab_Wrong_Operator]^for  ( Node name = n.getFirstChild (  ) ; name == null;^621^^^^^613^639^for  ( Node name = n.getFirstChild (  ) ; name != null;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseObjectLiteral [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[BugLab_Variable_Misuse]^if  ( memberName != nameull )  {^627^^^^^621^636^if  ( memberName != null )  {^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseObjectLiteral [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[BugLab_Wrong_Operator]^if  ( memberName == null )  {^627^^^^^621^636^if  ( memberName != null )  {^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseObjectLiteral [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[BugLab_Variable_Misuse]^return rightScope;^634^^^^^621^636^return scope;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseObjectLiteral [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[BugLab_Argument_Swapping]^objectType.defineInferredProperty ( value, getJSType ( memberName ) , false ) ;^631^^^^^621^636^objectType.defineInferredProperty ( memberName, getJSType ( value ) , false ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseObjectLiteral [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[BugLab_Wrong_Literal]^objectType.defineInferredProperty ( memberName, getJSType ( value ) , true ) ;^631^^^^^621^636^objectType.defineInferredProperty ( memberName, getJSType ( value ) , false ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseObjectLiteral [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[BugLab_Variable_Misuse]^objectType.defineInferredProperty ( memberName, getJSType ( name ) , false ) ;^631^^^^^621^636^objectType.defineInferredProperty ( memberName, getJSType ( value ) , false ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseObjectLiteral [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[BugLab_Variable_Misuse]^scope = traverse ( value, scope ) ;^624^^^^^621^636^scope = traverse ( name, scope ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseObjectLiteral [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[BugLab_Variable_Misuse]^scope = traverse ( name, joinedScope ) ;^624^^^^^621^636^scope = traverse ( name, scope ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseObjectLiteral [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[BugLab_Argument_Swapping]^scope = traverse ( scope, name ) ;^624^^^^^621^636^scope = traverse ( name, scope ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseObjectLiteral [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[BugLab_Variable_Misuse]^scope = traverse ( name, scope ) ;^625^^^^^621^636^scope = traverse ( value, scope ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseObjectLiteral [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[BugLab_Argument_Swapping]^scope = traverse ( scope, value ) ;^625^^^^^621^636^scope = traverse ( value, scope ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseObjectLiteral [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[BugLab_Variable_Misuse]^return output;^634^^^^^621^636^return scope;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseObjectLiteral [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[BugLab_Variable_Misuse]^Node value = n.getNext (  ) ;^623^^^^^621^636^Node value = name.getNext (  ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseObjectLiteral [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[BugLab_Variable_Misuse]^String memberName = NodeUtil.getStringValue ( value ) ;^626^^^^^621^636^String memberName = NodeUtil.getStringValue ( name ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseObjectLiteral [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[BugLab_Variable_Misuse]^scope = traverse ( name, output ) ;^624^^^^^621^636^scope = traverse ( name, scope ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseObjectLiteral [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[BugLab_Variable_Misuse]^scope = traverse ( value, rightScope ) ;^625^^^^^621^636^scope = traverse ( value, scope ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseObjectLiteral [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[BugLab_Variable_Misuse]^name = value.getNext (  ) .getNext (  )  )  {^622^^^^^613^639^name = name.getNext (  ) .getNext (  )  )  {^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseObjectLiteral [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[BugLab_Variable_Misuse]^scope = traverse ( value, scope ) ;^624^^^^^613^639^scope = traverse ( name, scope ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseObjectLiteral [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[BugLab_Variable_Misuse]^scope = traverse ( name, output ) ;^624^^^^^613^639^scope = traverse ( name, scope ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseObjectLiteral [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[BugLab_Argument_Swapping]^scope = traverse ( scope, name ) ;^624^^^^^613^639^scope = traverse ( name, scope ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseObjectLiteral [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[BugLab_Variable_Misuse]^scope = traverse ( name, scope ) ;^625^^^^^613^639^scope = traverse ( value, scope ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseObjectLiteral [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[BugLab_Variable_Misuse]^scope = traverse ( value, newScope ) ;^625^^^^^613^639^scope = traverse ( value, scope ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseObjectLiteral [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[BugLab_Argument_Swapping]^scope = traverse ( scope, value ) ;^625^^^^^613^639^scope = traverse ( value, scope ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseObjectLiteral [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[BugLab_Variable_Misuse]^return output;^634^^^^^613^639^return scope;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseObjectLiteral [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[BugLab_Variable_Misuse]^Node value = n.getNext (  ) ;^623^^^^^613^639^Node value = name.getNext (  ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseObjectLiteral [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[BugLab_Variable_Misuse]^String memberName = NodeUtil.getStringValue ( value ) ;^626^^^^^613^639^String memberName = NodeUtil.getStringValue ( name ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseObjectLiteral [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[BugLab_Variable_Misuse]^scope = traverse ( name, joinedScope ) ;^624^^^^^613^639^scope = traverse ( name, scope ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseObjectLiteral [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[BugLab_Variable_Misuse]^scope = traverse ( value, rightScope ) ;^625^^^^^613^639^scope = traverse ( value, scope ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseObjectLiteral [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[BugLab_Argument_Swapping]^objectType.defineInferredProperty ( value, getJSType ( memberName ) , false ) ;^631^^^^^613^639^objectType.defineInferredProperty ( memberName, getJSType ( value ) , false ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseObjectLiteral [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[BugLab_Variable_Misuse]^return joinedScope;^638^^^^^613^639^return scope;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseObjectLiteral [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[BugLab_Variable_Misuse]^Node left = right.getFirstChild (  ) ;^642^^^^^627^657^Node left = n.getFirstChild (  ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseAdd [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  leftType  rightType  type  boolean  leftIsUnknown  rightIsUnknown  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  left  n  right  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[BugLab_Variable_Misuse]^Node right = n.getNext (  ) ;^643^^^^^628^658^Node right = left.getNext (  ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseAdd [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  leftType  rightType  type  boolean  leftIsUnknown  rightIsUnknown  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  left  n  right  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[BugLab_Variable_Misuse]^Node right = right.getNext (  ) ;^643^^^^^628^658^Node right = left.getNext (  ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseAdd [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  leftType  rightType  type  boolean  leftIsUnknown  rightIsUnknown  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  left  n  right  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[BugLab_Variable_Misuse]^scope = traverseChildren ( right, scope ) ;^644^^^^^629^659^scope = traverseChildren ( n, scope ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseAdd [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  leftType  rightType  type  boolean  leftIsUnknown  rightIsUnknown  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  left  n  right  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[BugLab_Variable_Misuse]^scope = traverseChildren ( n, leftScope ) ;^644^^^^^629^659^scope = traverseChildren ( n, scope ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseAdd [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  leftType  rightType  type  boolean  leftIsUnknown  rightIsUnknown  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  left  n  right  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[BugLab_Argument_Swapping]^scope = traverseChildren ( scope, n ) ;^644^^^^^629^659^scope = traverseChildren ( n, scope ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseAdd [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  leftType  rightType  type  boolean  leftIsUnknown  rightIsUnknown  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  left  n  right  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[BugLab_Variable_Misuse]^scope = traverseChildren ( n, newScope ) ;^644^^^^^629^659^scope = traverseChildren ( n, scope ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseAdd [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  leftType  rightType  type  boolean  leftIsUnknown  rightIsUnknown  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  left  n  right  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[BugLab_Variable_Misuse]^JSType rightType = left.getJSType (  ) ;^646^^^^^631^661^JSType leftType = left.getJSType (  ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseAdd [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  leftType  rightType  type  boolean  leftIsUnknown  rightIsUnknown  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  left  n  right  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[BugLab_Variable_Misuse]^JSType nType = right.getJSType (  ) ;^647^^^^^632^662^JSType rightType = right.getJSType (  ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseAdd [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  leftType  rightType  type  boolean  leftIsUnknown  rightIsUnknown  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  left  n  right  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[BugLab_Variable_Misuse]^if  ( leftType != null && type != null )  {^650^^^^^635^665^if  ( leftType != null && rightType != null )  {^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseAdd [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  leftType  rightType  type  boolean  leftIsUnknown  rightIsUnknown  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  left  n  right  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[BugLab_Wrong_Operator]^if  ( leftType != null || rightType != null )  {^650^^^^^635^665^if  ( leftType != null && rightType != null )  {^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseAdd [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  leftType  rightType  type  boolean  leftIsUnknown  rightIsUnknown  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  left  n  right  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[BugLab_Wrong_Operator]^if  ( leftType == null && rightType != null )  {^650^^^^^635^665^if  ( leftType != null && rightType != null )  {^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseAdd [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  leftType  rightType  type  boolean  leftIsUnknown  rightIsUnknown  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  left  n  right  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[BugLab_Wrong_Operator]^if  ( leftType != null && rightType == null )  {^650^^^^^635^665^if  ( leftType != null && rightType != null )  {^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseAdd [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  leftType  rightType  type  boolean  leftIsUnknown  rightIsUnknown  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  left  n  right  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[BugLab_Variable_Misuse]^if  ( rightIsUnknown && rightIsUnknown )  {^653^^^^^638^668^if  ( leftIsUnknown && rightIsUnknown )  {^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseAdd [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  leftType  rightType  type  boolean  leftIsUnknown  rightIsUnknown  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  left  n  right  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[BugLab_Argument_Swapping]^if  ( rightIsUnknown && leftIsUnknown )  {^653^^^^^638^668^if  ( leftIsUnknown && rightIsUnknown )  {^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseAdd [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  leftType  rightType  type  boolean  leftIsUnknown  rightIsUnknown  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  left  n  right  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[BugLab_Wrong_Operator]^if  ( leftIsUnknown || rightIsUnknown )  {^653^^^^^638^668^if  ( leftIsUnknown && rightIsUnknown )  {^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseAdd [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  leftType  rightType  type  boolean  leftIsUnknown  rightIsUnknown  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  left  n  right  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[BugLab_Variable_Misuse]^} else if  (  ( !leftIsUnknown && type.isString (  )  )  || ( !rightIsUnknown && rightType.isString (  )  )  )  {^655^656^^^^640^670^} else if  (  ( !leftIsUnknown && leftType.isString (  )  )  || ( !rightIsUnknown && rightType.isString (  )  )  )  {^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseAdd [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  leftType  rightType  type  boolean  leftIsUnknown  rightIsUnknown  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  left  n  right  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[BugLab_Variable_Misuse]^} else if  (  ( !leftIsUnknown && leftType.isString (  )  )  || ( !rightIsUnknown && type.isString (  )  )  )  {^655^656^^^^640^670^} else if  (  ( !leftIsUnknown && leftType.isString (  )  )  || ( !rightIsUnknown && rightType.isString (  )  )  )  {^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseAdd [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  leftType  rightType  type  boolean  leftIsUnknown  rightIsUnknown  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  left  n  right  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[BugLab_Argument_Swapping]^} else if  (  ( !leftIsUnknown && rightType.isString (  )  )  || ( !rightIsUnknown && leftType.isString (  )  )  )  {^655^656^^^^640^670^} else if  (  ( !leftIsUnknown && leftType.isString (  )  )  || ( !rightIsUnknown && rightType.isString (  )  )  )  {^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseAdd [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  leftType  rightType  type  boolean  leftIsUnknown  rightIsUnknown  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  left  n  right  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[BugLab_Wrong_Operator]^} else if  (  ( !leftIsUnknown && leftType.isString (  )  )  && ( !rightIsUnknown && rightType.isString (  )  )  )  {^655^656^^^^640^670^} else if  (  ( !leftIsUnknown && leftType.isString (  )  )  || ( !rightIsUnknown && rightType.isString (  )  )  )  {^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseAdd [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  leftType  rightType  type  boolean  leftIsUnknown  rightIsUnknown  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  left  n  right  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[BugLab_Wrong_Operator]^} else if  (  ( !leftIsUnknown || leftType.isString (  )  )  || ( !rightIsUnknown && rightType.isString (  )  )  )  {^655^656^^^^640^670^} else if  (  ( !leftIsUnknown && leftType.isString (  )  )  || ( !rightIsUnknown && rightType.isString (  )  )  )  {^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseAdd [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  leftType  rightType  type  boolean  leftIsUnknown  rightIsUnknown  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  left  n  right  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[BugLab_Variable_Misuse]^} else if  ( rightIsUnknown || rightIsUnknown )  {^658^^^^^643^673^} else if  ( leftIsUnknown || rightIsUnknown )  {^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseAdd [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  leftType  rightType  type  boolean  leftIsUnknown  rightIsUnknown  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  left  n  right  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[BugLab_Argument_Swapping]^} else if  ( rightIsUnknown || leftIsUnknown )  {^658^^^^^643^673^} else if  ( leftIsUnknown || rightIsUnknown )  {^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseAdd [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  leftType  rightType  type  boolean  leftIsUnknown  rightIsUnknown  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  left  n  right  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[BugLab_Wrong_Operator]^} else if  ( leftIsUnknown && rightIsUnknown )  {^658^^^^^643^673^} else if  ( leftIsUnknown || rightIsUnknown )  {^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseAdd [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  leftType  rightType  type  boolean  leftIsUnknown  rightIsUnknown  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  left  n  right  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[BugLab_Variable_Misuse]^} else if  ( isAddedAsNumber ( leftType )  && isAddedAsNumber ( type )  )  {^660^^^^^645^675^} else if  ( isAddedAsNumber ( leftType )  && isAddedAsNumber ( rightType )  )  {^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseAdd [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  leftType  rightType  type  boolean  leftIsUnknown  rightIsUnknown  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  left  n  right  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[BugLab_Argument_Swapping]^} else if  ( isAddedAsNumber ( rightType )  && isAddedAsNumber ( leftType )  )  {^660^^^^^645^675^} else if  ( isAddedAsNumber ( leftType )  && isAddedAsNumber ( rightType )  )  {^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseAdd [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  leftType  rightType  type  boolean  leftIsUnknown  rightIsUnknown  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  left  n  right  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[BugLab_Wrong_Operator]^} else if  ( isAddedAsNumber ( leftType )  || isAddedAsNumber ( rightType )  )  {^660^^^^^645^675^} else if  ( isAddedAsNumber ( leftType )  && isAddedAsNumber ( rightType )  )  {^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseAdd [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  leftType  rightType  type  boolean  leftIsUnknown  rightIsUnknown  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  left  n  right  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[BugLab_Variable_Misuse]^} else if  ( isAddedAsNumber ( type )  && isAddedAsNumber ( rightType )  )  {^660^^^^^645^675^} else if  ( isAddedAsNumber ( leftType )  && isAddedAsNumber ( rightType )  )  {^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseAdd [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  leftType  rightType  type  boolean  leftIsUnknown  rightIsUnknown  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  left  n  right  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[BugLab_Variable_Misuse]^( !rightIsUnknown && type.isString (  )  )  )  {^656^^^^^641^671^( !rightIsUnknown && rightType.isString (  )  )  )  {^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseAdd [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  leftType  rightType  type  boolean  leftIsUnknown  rightIsUnknown  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  left  n  right  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[BugLab_Variable_Misuse]^} else if  (  ( !rightIsUnknown && leftType.isString (  )  )  || ( !rightIsUnknown && rightType.isString (  )  )  )  {^655^656^^^^640^670^} else if  (  ( !leftIsUnknown && leftType.isString (  )  )  || ( !rightIsUnknown && rightType.isString (  )  )  )  {^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseAdd [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  leftType  rightType  type  boolean  leftIsUnknown  rightIsUnknown  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  left  n  right  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[BugLab_Variable_Misuse]^} else if  ( leftIsUnknown || leftIsUnknown )  {^658^^^^^643^673^} else if  ( leftIsUnknown || rightIsUnknown )  {^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseAdd [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  leftType  rightType  type  boolean  leftIsUnknown  rightIsUnknown  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  left  n  right  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[BugLab_Variable_Misuse]^boolean leftIsUnknown = type.isUnknownType (  ) ;^651^^^^^636^666^boolean leftIsUnknown = leftType.isUnknownType (  ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseAdd [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  leftType  rightType  type  boolean  leftIsUnknown  rightIsUnknown  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  left  n  right  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[BugLab_Variable_Misuse]^boolean rightIsUnknown = type.isUnknownType (  ) ;^652^^^^^637^667^boolean rightIsUnknown = rightType.isUnknownType (  ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseAdd [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  leftType  rightType  type  boolean  leftIsUnknown  rightIsUnknown  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  left  n  right  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[BugLab_Variable_Misuse]^n.setJSType ( rightType ) ;^666^^^^^651^681^n.setJSType ( type ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseAdd [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  leftType  rightType  type  boolean  leftIsUnknown  rightIsUnknown  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  left  n  right  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[BugLab_Variable_Misuse]^if  ( right.getType (  )  == Token.ASSIGN_ADD )  {^668^^^^^653^683^if  ( n.getType (  )  == Token.ASSIGN_ADD )  {^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseAdd [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  leftType  rightType  type  boolean  leftIsUnknown  rightIsUnknown  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  left  n  right  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[BugLab_Wrong_Operator]^if  ( n.getType (  )  != Token.ASSIGN_ADD )  {^668^^^^^653^683^if  ( n.getType (  )  == Token.ASSIGN_ADD )  {^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseAdd [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  leftType  rightType  type  boolean  leftIsUnknown  rightIsUnknown  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  left  n  right  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[BugLab_Variable_Misuse]^updateScopeForTypeChange ( joinedScope, left, leftType, type ) ;^669^^^^^654^684^updateScopeForTypeChange ( scope, left, leftType, type ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseAdd [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  leftType  rightType  type  boolean  leftIsUnknown  rightIsUnknown  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  left  n  right  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[BugLab_Variable_Misuse]^updateScopeForTypeChange ( scope, right, leftType, type ) ;^669^^^^^654^684^updateScopeForTypeChange ( scope, left, leftType, type ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseAdd [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  leftType  rightType  type  boolean  leftIsUnknown  rightIsUnknown  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  left  n  right  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[BugLab_Variable_Misuse]^updateScopeForTypeChange ( scope, left, type, type ) ;^669^^^^^654^684^updateScopeForTypeChange ( scope, left, leftType, type ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseAdd [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  leftType  rightType  type  boolean  leftIsUnknown  rightIsUnknown  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  left  n  right  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[BugLab_Variable_Misuse]^updateScopeForTypeChange ( scope, left, leftType, rightType ) ;^669^^^^^654^684^updateScopeForTypeChange ( scope, left, leftType, type ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseAdd [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  leftType  rightType  type  boolean  leftIsUnknown  rightIsUnknown  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  left  n  right  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[BugLab_Argument_Swapping]^updateScopeForTypeChange ( leftType, left, scope, type ) ;^669^^^^^654^684^updateScopeForTypeChange ( scope, left, leftType, type ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseAdd [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  leftType  rightType  type  boolean  leftIsUnknown  rightIsUnknown  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  left  n  right  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[BugLab_Argument_Swapping]^updateScopeForTypeChange ( left, scope, leftType, type ) ;^669^^^^^654^684^updateScopeForTypeChange ( scope, left, leftType, type ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseAdd [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  leftType  rightType  type  boolean  leftIsUnknown  rightIsUnknown  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  left  n  right  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[BugLab_Argument_Swapping]^updateScopeForTypeChange ( scope, left, type, leftType ) ;^669^^^^^654^684^updateScopeForTypeChange ( scope, left, leftType, type ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseAdd [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  leftType  rightType  type  boolean  leftIsUnknown  rightIsUnknown  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  left  n  right  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[BugLab_Argument_Swapping]^updateScopeForTypeChange ( scope, type, leftType, left ) ;^669^^^^^654^684^updateScopeForTypeChange ( scope, left, leftType, type ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseAdd [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  leftType  rightType  type  boolean  leftIsUnknown  rightIsUnknown  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  left  n  right  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[BugLab_Variable_Misuse]^updateScopeForTypeChange ( leftScope, left, leftType, type ) ;^669^^^^^654^684^updateScopeForTypeChange ( scope, left, leftType, type ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseAdd [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  leftType  rightType  type  boolean  leftIsUnknown  rightIsUnknown  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  left  n  right  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[BugLab_Variable_Misuse]^updateScopeForTypeChange ( scope, left, rightType, type ) ;^669^^^^^654^684^updateScopeForTypeChange ( scope, left, leftType, type ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseAdd [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  leftType  rightType  type  boolean  leftIsUnknown  rightIsUnknown  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  left  n  right  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[BugLab_Argument_Swapping]^updateScopeForTypeChange ( scope, leftType, left, type ) ;^669^^^^^654^684^updateScopeForTypeChange ( scope, left, leftType, type ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseAdd [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  leftType  rightType  type  boolean  leftIsUnknown  rightIsUnknown  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  left  n  right  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[BugLab_Variable_Misuse]^return joinedScope;^672^^^^^657^687^return scope;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseAdd [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  leftType  rightType  type  boolean  leftIsUnknown  rightIsUnknown  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  left  n  right  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[BugLab_Argument_Swapping]^return registry.isSubtype ( type.createUnionType ( VOID_TYPE, NULL_TYPE, NUMBER_VALUE_OR_OBJECT_TYPE, BOOLEAN_TYPE, BOOLEAN_OBJECT_TYPE )  ) ;^676^677^^^^675^678^return type.isSubtype ( registry.createUnionType ( VOID_TYPE, NULL_TYPE, NUMBER_VALUE_OR_OBJECT_TYPE, BOOLEAN_TYPE, BOOLEAN_OBJECT_TYPE )  ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] isAddedAsNumber [RETURN_TYPE] boolean   JSType type [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[BugLab_Variable_Misuse]^Node condition = trueNode.getFirstChild (  ) ;^681^^^^^666^696^Node condition = n.getFirstChild (  ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseHook [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  falseType  trueType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  condition  falseNode  n  trueNode  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Variable_Misuse]^Node trueNode = n.getNext (  ) ;^682^^^^^667^697^Node trueNode = condition.getNext (  ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseHook [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  falseType  trueType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  condition  falseNode  n  trueNode  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Variable_Misuse]^Node trueNode = trueNode.getNext (  ) ;^682^^^^^667^697^Node trueNode = condition.getNext (  ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseHook [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  falseType  trueType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  condition  falseNode  n  trueNode  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Variable_Misuse]^Node falseNode = trueNode.getLastChild (  ) ;^683^^^^^668^698^Node falseNode = n.getLastChild (  ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseHook [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  falseType  trueType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  condition  falseNode  n  trueNode  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Variable_Misuse]^scope = traverse ( condition, trueScope ) ;^686^^^^^671^701^scope = traverse ( condition, scope ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseHook [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  falseType  trueType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  condition  falseNode  n  trueNode  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Argument_Swapping]^scope = traverse ( scope, condition ) ;^686^^^^^671^701^scope = traverse ( condition, scope ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseHook [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  falseType  trueType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  condition  falseNode  n  trueNode  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Variable_Misuse]^scope = traverse ( trueNode, scope ) ;^686^^^^^671^701^scope = traverse ( condition, scope ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseHook [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  falseType  trueType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  condition  falseNode  n  trueNode  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Variable_Misuse]^scope = traverse ( condition, joinedScope ) ;^686^^^^^671^701^scope = traverse ( condition, scope ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseHook [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  falseType  trueType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  condition  falseNode  n  trueNode  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Variable_Misuse]^FlowScope trueScope = reverseInterpreter. getPreciserScopeKnowingConditionOutcome ( trueNode, scope, true ) ;^689^690^691^^^674^704^FlowScope trueScope = reverseInterpreter. getPreciserScopeKnowingConditionOutcome ( condition, scope, true ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseHook [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  falseType  trueType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  condition  falseNode  n  trueNode  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Variable_Misuse]^FlowScope trueScope = reverseInterpreter. getPreciserScopeKnowingConditionOutcome ( condition, joinedScope, true ) ;^689^690^691^^^674^704^FlowScope trueScope = reverseInterpreter. getPreciserScopeKnowingConditionOutcome ( condition, scope, true ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseHook [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  falseType  trueType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  condition  falseNode  n  trueNode  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Argument_Swapping]^FlowScope trueScope = condition. getPreciserScopeKnowingConditionOutcome ( reverseInterpreter, scope, true ) ;^689^690^691^^^674^704^FlowScope trueScope = reverseInterpreter. getPreciserScopeKnowingConditionOutcome ( condition, scope, true ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseHook [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  falseType  trueType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  condition  falseNode  n  trueNode  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Argument_Swapping]^FlowScope trueScope = reverseInterpreter. getPreciserScopeKnowingConditionOutcome ( scope, condition, true ) ;^689^690^691^^^674^704^FlowScope trueScope = reverseInterpreter. getPreciserScopeKnowingConditionOutcome ( condition, scope, true ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseHook [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  falseType  trueType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  condition  falseNode  n  trueNode  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Wrong_Literal]^FlowScope falseScope = reverseInterpreter. getPreciserScopeKnowingConditionOutcome ( condition, scope, false ) ;^689^690^691^^^674^704^FlowScope trueScope = reverseInterpreter. getPreciserScopeKnowingConditionOutcome ( condition, scope, true ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseHook [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  falseType  trueType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  condition  falseNode  n  trueNode  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Variable_Misuse]^FlowScope trueScope = reverseInterpreter. getPreciserScopeKnowingConditionOutcome ( condition, leftScope, true ) ;^689^690^691^^^674^704^FlowScope trueScope = reverseInterpreter. getPreciserScopeKnowingConditionOutcome ( condition, scope, true ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseHook [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  falseType  trueType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  condition  falseNode  n  trueNode  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Variable_Misuse]^FlowScope falseScope = reverseInterpreter. getPreciserScopeKnowingConditionOutcome ( trueNode, scope, false ) ;^692^693^694^^^677^707^FlowScope falseScope = reverseInterpreter. getPreciserScopeKnowingConditionOutcome ( condition, scope, false ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseHook [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  falseType  trueType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  condition  falseNode  n  trueNode  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Variable_Misuse]^FlowScope falseScope = reverseInterpreter. getPreciserScopeKnowingConditionOutcome ( condition, leftScope, false ) ;^692^693^694^^^677^707^FlowScope falseScope = reverseInterpreter. getPreciserScopeKnowingConditionOutcome ( condition, scope, false ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseHook [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  falseType  trueType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  condition  falseNode  n  trueNode  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Argument_Swapping]^FlowScope falseScope = reverseInterpreter. getPreciserScopeKnowingConditionOutcome ( scope, condition, false ) ;^692^693^694^^^677^707^FlowScope falseScope = reverseInterpreter. getPreciserScopeKnowingConditionOutcome ( condition, scope, false ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseHook [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  falseType  trueType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  condition  falseNode  n  trueNode  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Argument_Swapping]^FlowScope falseScope = scope. getPreciserScopeKnowingConditionOutcome ( condition, reverseInterpreter, false ) ;^692^693^694^^^677^707^FlowScope falseScope = reverseInterpreter. getPreciserScopeKnowingConditionOutcome ( condition, scope, false ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseHook [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  falseType  trueType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  condition  falseNode  n  trueNode  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Argument_Swapping]^FlowScope falseScope = condition. getPreciserScopeKnowingConditionOutcome ( reverseInterpreter, scope, false ) ;^692^693^694^^^677^707^FlowScope falseScope = reverseInterpreter. getPreciserScopeKnowingConditionOutcome ( condition, scope, false ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseHook [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  falseType  trueType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  condition  falseNode  n  trueNode  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Wrong_Literal]^FlowScope trueScope = reverseInterpreter. getPreciserScopeKnowingConditionOutcome ( condition, scope, true ) ;^692^693^694^^^677^707^FlowScope falseScope = reverseInterpreter. getPreciserScopeKnowingConditionOutcome ( condition, scope, false ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseHook [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  falseType  trueType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  condition  falseNode  n  trueNode  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Variable_Misuse]^FlowScope falseScope = reverseInterpreter. getPreciserScopeKnowingConditionOutcome ( condition, newScope, false ) ;^692^693^694^^^677^707^FlowScope falseScope = reverseInterpreter. getPreciserScopeKnowingConditionOutcome ( condition, scope, false ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseHook [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  falseType  trueType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  condition  falseNode  n  trueNode  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Variable_Misuse]^traverse ( n, trueScope.createChildFlowScope (  )  ) ;^697^^^^^682^712^traverse ( trueNode, trueScope.createChildFlowScope (  )  ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseHook [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  falseType  trueType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  condition  falseNode  n  trueNode  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Variable_Misuse]^traverse ( trueNode, leftScope.createChildFlowScope (  )  ) ;^697^^^^^682^712^traverse ( trueNode, trueScope.createChildFlowScope (  )  ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseHook [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  falseType  trueType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  condition  falseNode  n  trueNode  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Argument_Swapping]^traverse ( trueScope, trueNode.createChildFlowScope (  )  ) ;^697^^^^^682^712^traverse ( trueNode, trueScope.createChildFlowScope (  )  ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseHook [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  falseType  trueType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  condition  falseNode  n  trueNode  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Variable_Misuse]^traverse ( trueNode, output.createChildFlowScope (  )  ) ;^697^^^^^682^712^traverse ( trueNode, trueScope.createChildFlowScope (  )  ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseHook [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  falseType  trueType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  condition  falseNode  n  trueNode  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Variable_Misuse]^traverse ( trueNode, falseScope.createChildFlowScope (  )  ) ;^700^^^^^685^715^traverse ( falseNode, falseScope.createChildFlowScope (  )  ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseHook [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  falseType  trueType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  condition  falseNode  n  trueNode  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Variable_Misuse]^traverse ( falseNode, newScope.createChildFlowScope (  )  ) ;^700^^^^^685^715^traverse ( falseNode, falseScope.createChildFlowScope (  )  ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseHook [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  falseType  trueType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  condition  falseNode  n  trueNode  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Argument_Swapping]^traverse ( falseScope, falseNode.createChildFlowScope (  )  ) ;^700^^^^^685^715^traverse ( falseNode, falseScope.createChildFlowScope (  )  ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseHook [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  falseType  trueType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  condition  falseNode  n  trueNode  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Variable_Misuse]^traverse ( falseNode, trueScope.createChildFlowScope (  )  ) ;^700^^^^^685^715^traverse ( falseNode, falseScope.createChildFlowScope (  )  ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseHook [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  falseType  trueType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  condition  falseNode  n  trueNode  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Variable_Misuse]^JSType trueType = n.getJSType (  ) ;^703^^^^^688^718^JSType trueType = trueNode.getJSType (  ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseHook [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  falseType  trueType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  condition  falseNode  n  trueNode  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Variable_Misuse]^JSType falseType = trueNode.getJSType (  ) ;^704^^^^^689^719^JSType falseType = falseNode.getJSType (  ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseHook [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  falseType  trueType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  condition  falseNode  n  trueNode  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Variable_Misuse]^if  ( trueType != trueNodeull && falseType != null )  {^705^^^^^690^720^if  ( trueType != null && falseType != null )  {^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseHook [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  falseType  trueType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  condition  falseNode  n  trueNode  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Argument_Swapping]^if  ( n != trueTypeull && falseType != null )  {^705^^^^^690^720^if  ( trueType != null && falseType != null )  {^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseHook [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  falseType  trueType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  condition  falseNode  n  trueNode  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Argument_Swapping]^if  ( trueType != falseTypeull && n != null )  {^705^^^^^690^720^if  ( trueType != null && falseType != null )  {^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseHook [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  falseType  trueType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  condition  falseNode  n  trueNode  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Wrong_Operator]^if  ( trueType != null || falseType != null )  {^705^^^^^690^720^if  ( trueType != null && falseType != null )  {^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseHook [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  falseType  trueType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  condition  falseNode  n  trueNode  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Wrong_Operator]^if  ( trueType == null && falseType != null )  {^705^^^^^690^720^if  ( trueType != null && falseType != null )  {^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseHook [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  falseType  trueType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  condition  falseNode  n  trueNode  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Wrong_Operator]^if  ( trueType != null && falseType == null )  {^705^^^^^690^720^if  ( trueType != null && falseType != null )  {^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseHook [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  falseType  trueType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  condition  falseNode  n  trueNode  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Variable_Misuse]^n.setJSType ( trueNodeull ) ;^708^^^^^705^709^n.setJSType ( null ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseHook [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  falseType  trueType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  condition  falseNode  n  trueNode  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Argument_Swapping]^n.setJSType ( falseType.getLeastSupertype ( trueType )  ) ;^706^^^^^691^721^n.setJSType ( trueType.getLeastSupertype ( falseType )  ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseHook [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  falseType  trueType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  condition  falseNode  n  trueNode  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Variable_Misuse]^n.setJSType ( trueNodeull ) ;^708^^^^^693^723^n.setJSType ( null ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseHook [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  falseType  trueType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  condition  falseNode  n  trueNode  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Variable_Misuse]^return joinedScope.createChildFlowScope (  ) ;^711^^^^^696^726^return scope.createChildFlowScope (  ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseHook [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  falseType  trueType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  condition  falseNode  n  trueNode  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Variable_Misuse]^scope = traverseChildren ( left, scope ) ;^715^^^^^714^730^scope = traverseChildren ( n, scope ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseCall [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  functionType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  left  n  FunctionType  fnType  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Variable_Misuse]^scope = traverseChildren ( n, joinedScope ) ;^715^^^^^714^730^scope = traverseChildren ( n, scope ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseCall [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  functionType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  left  n  FunctionType  fnType  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Argument_Swapping]^scope = traverseChildren ( scope, n ) ;^715^^^^^714^730^scope = traverseChildren ( n, scope ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseCall [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  functionType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  left  n  FunctionType  fnType  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Variable_Misuse]^scope = traverseChildren ( n, leftScope ) ;^715^^^^^714^730^scope = traverseChildren ( n, scope ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseCall [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  functionType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  left  n  FunctionType  fnType  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Variable_Misuse]^Node left = left.getFirstChild (  ) ;^717^^^^^714^730^Node left = n.getFirstChild (  ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseCall [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  functionType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  left  n  FunctionType  fnType  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Variable_Misuse]^JSType functionType = getJSType ( n ) .restrictByNotNullOrUndefined (  ) ;^718^^^^^714^730^JSType functionType = getJSType ( left ) .restrictByNotNullOrUndefined (  ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseCall [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  functionType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  left  n  FunctionType  fnType  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Variable_Misuse]^if  ( functionType != leftull )  {^719^^^^^714^730^if  ( functionType != null )  {^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseCall [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  functionType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  left  n  FunctionType  fnType  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Argument_Swapping]^if  ( n != functionTypeull )  {^719^^^^^714^730^if  ( functionType != null )  {^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseCall [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  functionType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  left  n  FunctionType  fnType  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Wrong_Operator]^if  ( functionType == null )  {^719^^^^^714^730^if  ( functionType != null )  {^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseCall [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  functionType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  left  n  FunctionType  fnType  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Wrong_Operator]^if  ( functionType  |  FunctionType )  {^720^^^^^714^730^if  ( functionType instanceof FunctionType )  {^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseCall [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  functionType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  left  n  FunctionType  fnType  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Variable_Misuse]^updateTypeOfParametersOnClosure ( left, fnType ) ;^723^^^^^714^730^updateTypeOfParametersOnClosure ( n, fnType ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseCall [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  functionType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  left  n  FunctionType  fnType  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Argument_Swapping]^updateTypeOfParametersOnClosure ( fnType, n ) ;^723^^^^^714^730^updateTypeOfParametersOnClosure ( n, fnType ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseCall [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  functionType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  left  n  FunctionType  fnType  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Argument_Swapping]^updateTypeOfThisOnClosure ( fnType, n ) ;^724^^^^^714^730^updateTypeOfThisOnClosure ( n, fnType ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseCall [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  functionType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  left  n  FunctionType  fnType  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Variable_Misuse]^updateTypeOfThisOnClosure ( left, fnType ) ;^724^^^^^714^730^updateTypeOfThisOnClosure ( n, fnType ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseCall [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  functionType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  left  n  FunctionType  fnType  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Wrong_Operator]^if  ( functionType  ||  FunctionType )  {^720^^^^^714^730^if  ( functionType instanceof FunctionType )  {^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseCall [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  functionType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  left  n  FunctionType  fnType  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Variable_Misuse]^return newScope;^729^^^^^714^730^return scope;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseCall [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  functionType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  left  n  FunctionType  fnType  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Wrong_Literal]^int i = 1;^737^^^^^736^757^int i = 0;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] updateTypeOfParametersOnClosure [RETURN_TYPE] void   Node n FunctionType fnType [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  iArgumentType  iParameterType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  iArgument  iParameter  n  FunctionType  fnType  iParameterFnType  BooleanLiteralSet  booleanValues  toBooleanOutcomes  int  i  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Variable_Misuse]^if  ( iArgumentType instanceof FunctionType )  {^740^^^^^736^757^if  ( iParameterType instanceof FunctionType )  {^[CLASS] TypeInference BooleanOutcomePair  [METHOD] updateTypeOfParametersOnClosure [RETURN_TYPE] void   Node n FunctionType fnType [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  iArgumentType  iParameterType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  iArgument  iParameter  n  FunctionType  fnType  iParameterFnType  BooleanLiteralSet  booleanValues  toBooleanOutcomes  int  i  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Wrong_Operator]^if  ( iParameterType  ||  FunctionType )  {^740^^^^^736^757^if  ( iParameterType instanceof FunctionType )  {^[CLASS] TypeInference BooleanOutcomePair  [METHOD] updateTypeOfParametersOnClosure [RETURN_TYPE] void   Node n FunctionType fnType [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  iArgumentType  iParameterType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  iArgument  iParameter  n  FunctionType  fnType  iParameterFnType  BooleanLiteralSet  booleanValues  toBooleanOutcomes  int  i  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Wrong_Operator]^if  ( iParameterType  &  FunctionType )  {^740^^^^^736^757^if  ( iParameterType instanceof FunctionType )  {^[CLASS] TypeInference BooleanOutcomePair  [METHOD] updateTypeOfParametersOnClosure [RETURN_TYPE] void   Node n FunctionType fnType [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  iArgumentType  iParameterType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  iArgument  iParameter  n  FunctionType  fnType  iParameterFnType  BooleanLiteralSet  booleanValues  toBooleanOutcomes  int  i  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Variable_Misuse]^if  ( i + 1 >= iParameter.getChildCount (  )  )  {^743^^^^^736^757^if  ( i + 1 >= n.getChildCount (  )  )  {^[CLASS] TypeInference BooleanOutcomePair  [METHOD] updateTypeOfParametersOnClosure [RETURN_TYPE] void   Node n FunctionType fnType [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  iArgumentType  iParameterType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  iArgument  iParameter  n  FunctionType  fnType  iParameterFnType  BooleanLiteralSet  booleanValues  toBooleanOutcomes  int  i  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Argument_Swapping]^if  ( n + 1 >= i.getChildCount (  )  )  {^743^^^^^736^757^if  ( i + 1 >= n.getChildCount (  )  )  {^[CLASS] TypeInference BooleanOutcomePair  [METHOD] updateTypeOfParametersOnClosure [RETURN_TYPE] void   Node n FunctionType fnType [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  iArgumentType  iParameterType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  iArgument  iParameter  n  FunctionType  fnType  iParameterFnType  BooleanLiteralSet  booleanValues  toBooleanOutcomes  int  i  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Wrong_Operator]^if  ( i + 1 < n.getChildCount (  )  )  {^743^^^^^736^757^if  ( i + 1 >= n.getChildCount (  )  )  {^[CLASS] TypeInference BooleanOutcomePair  [METHOD] updateTypeOfParametersOnClosure [RETURN_TYPE] void   Node n FunctionType fnType [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  iArgumentType  iParameterType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  iArgument  iParameter  n  FunctionType  fnType  iParameterFnType  BooleanLiteralSet  booleanValues  toBooleanOutcomes  int  i  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Wrong_Operator]^if  ( i   instanceof   1 >= n.getChildCount (  )  )  {^743^^^^^736^757^if  ( i + 1 >= n.getChildCount (  )  )  {^[CLASS] TypeInference BooleanOutcomePair  [METHOD] updateTypeOfParametersOnClosure [RETURN_TYPE] void   Node n FunctionType fnType [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  iArgumentType  iParameterType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  iArgument  iParameter  n  FunctionType  fnType  iParameterFnType  BooleanLiteralSet  booleanValues  toBooleanOutcomes  int  i  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Wrong_Literal]^if  ( i  >= n.getChildCount (  )  )  {^743^^^^^736^757^if  ( i + 1 >= n.getChildCount (  )  )  {^[CLASS] TypeInference BooleanOutcomePair  [METHOD] updateTypeOfParametersOnClosure [RETURN_TYPE] void   Node n FunctionType fnType [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  iArgumentType  iParameterType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  iArgument  iParameter  n  FunctionType  fnType  iParameterFnType  BooleanLiteralSet  booleanValues  toBooleanOutcomes  int  i  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Variable_Misuse]^if  ( n.getType (  )  == Token.FUNCTION && iArgumentType instanceof FunctionType && iArgumentType.getJSDocInfo (  )  == null )  {^749^750^751^^^736^757^if  ( iArgument.getType (  )  == Token.FUNCTION && iArgumentType instanceof FunctionType && iArgumentType.getJSDocInfo (  )  == null )  {^[CLASS] TypeInference BooleanOutcomePair  [METHOD] updateTypeOfParametersOnClosure [RETURN_TYPE] void   Node n FunctionType fnType [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  iArgumentType  iParameterType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  iArgument  iParameter  n  FunctionType  fnType  iParameterFnType  BooleanLiteralSet  booleanValues  toBooleanOutcomes  int  i  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Wrong_Operator]^if  ( iArgument.getType (  )  == Token.FUNCTION || iArgumentType instanceof FunctionType && iArgumentType.getJSDocInfo (  )  == null )  {^749^750^751^^^736^757^if  ( iArgument.getType (  )  == Token.FUNCTION && iArgumentType instanceof FunctionType && iArgumentType.getJSDocInfo (  )  == null )  {^[CLASS] TypeInference BooleanOutcomePair  [METHOD] updateTypeOfParametersOnClosure [RETURN_TYPE] void   Node n FunctionType fnType [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  iArgumentType  iParameterType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  iArgument  iParameter  n  FunctionType  fnType  iParameterFnType  BooleanLiteralSet  booleanValues  toBooleanOutcomes  int  i  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Wrong_Operator]^if  ( iArgument.getType (  )  != Token.FUNCTION && iArgumentType instanceof FunctionType && iArgumentType.getJSDocInfo (  )  == null )  {^749^750^751^^^736^757^if  ( iArgument.getType (  )  == Token.FUNCTION && iArgumentType instanceof FunctionType && iArgumentType.getJSDocInfo (  )  == null )  {^[CLASS] TypeInference BooleanOutcomePair  [METHOD] updateTypeOfParametersOnClosure [RETURN_TYPE] void   Node n FunctionType fnType [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  iArgumentType  iParameterType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  iArgument  iParameter  n  FunctionType  fnType  iParameterFnType  BooleanLiteralSet  booleanValues  toBooleanOutcomes  int  i  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Wrong_Operator]^if  ( iArgument.getType (  )  == Token.FUNCTION && iArgumentType  >  FunctionType && iArgumentType.getJSDocInfo (  )  == null )  {^749^750^751^^^736^757^if  ( iArgument.getType (  )  == Token.FUNCTION && iArgumentType instanceof FunctionType && iArgumentType.getJSDocInfo (  )  == null )  {^[CLASS] TypeInference BooleanOutcomePair  [METHOD] updateTypeOfParametersOnClosure [RETURN_TYPE] void   Node n FunctionType fnType [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  iArgumentType  iParameterType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  iArgument  iParameter  n  FunctionType  fnType  iParameterFnType  BooleanLiteralSet  booleanValues  toBooleanOutcomes  int  i  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Wrong_Operator]^if  ( iArgument.getType (  )  == Token.FUNCTION && iArgumentType instanceof FunctionType && iArgumentType.getJSDocInfo (  )  != null )  {^749^750^751^^^736^757^if  ( iArgument.getType (  )  == Token.FUNCTION && iArgumentType instanceof FunctionType && iArgumentType.getJSDocInfo (  )  == null )  {^[CLASS] TypeInference BooleanOutcomePair  [METHOD] updateTypeOfParametersOnClosure [RETURN_TYPE] void   Node n FunctionType fnType [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  iArgumentType  iParameterType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  iArgument  iParameter  n  FunctionType  fnType  iParameterFnType  BooleanLiteralSet  booleanValues  toBooleanOutcomes  int  i  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Variable_Misuse]^iArgument.setJSType ( fnType ) ;^752^^^^^736^757^iArgument.setJSType ( iParameterFnType ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] updateTypeOfParametersOnClosure [RETURN_TYPE] void   Node n FunctionType fnType [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  iArgumentType  iParameterType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  iArgument  iParameter  n  FunctionType  fnType  iParameterFnType  BooleanLiteralSet  booleanValues  toBooleanOutcomes  int  i  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Variable_Misuse]^Node iArgument = iParameter.getChildAtIndex ( i + 1 ) ;^747^^^^^736^757^Node iArgument = n.getChildAtIndex ( i + 1 ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] updateTypeOfParametersOnClosure [RETURN_TYPE] void   Node n FunctionType fnType [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  iArgumentType  iParameterType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  iArgument  iParameter  n  FunctionType  fnType  iParameterFnType  BooleanLiteralSet  booleanValues  toBooleanOutcomes  int  i  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Argument_Swapping]^Node nArgument = i.getChildAtIndex ( i + 1 ) ;^747^^^^^736^757^Node iArgument = n.getChildAtIndex ( i + 1 ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] updateTypeOfParametersOnClosure [RETURN_TYPE] void   Node n FunctionType fnType [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  iArgumentType  iParameterType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  iArgument  iParameter  n  FunctionType  fnType  iParameterFnType  BooleanLiteralSet  booleanValues  toBooleanOutcomes  int  i  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Wrong_Operator]^Node iArgument = n.getChildAtIndex ( i   instanceof   1 ) ;^747^^^^^736^757^Node iArgument = n.getChildAtIndex ( i + 1 ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] updateTypeOfParametersOnClosure [RETURN_TYPE] void   Node n FunctionType fnType [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  iArgumentType  iParameterType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  iArgument  iParameter  n  FunctionType  fnType  iParameterFnType  BooleanLiteralSet  booleanValues  toBooleanOutcomes  int  i  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Wrong_Literal]^Node iArgument = n.getChildAtIndex ( i  ) ;^747^^^^^736^757^Node iArgument = n.getChildAtIndex ( i + 1 ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] updateTypeOfParametersOnClosure [RETURN_TYPE] void   Node n FunctionType fnType [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  iArgumentType  iParameterType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  iArgument  iParameter  n  FunctionType  fnType  iParameterFnType  BooleanLiteralSet  booleanValues  toBooleanOutcomes  int  i  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Variable_Misuse]^JSType nType = getJSType ( iArgument ) ;^748^^^^^736^757^JSType iArgumentType = getJSType ( iArgument ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] updateTypeOfParametersOnClosure [RETURN_TYPE] void   Node n FunctionType fnType [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  iArgumentType  iParameterType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  iArgument  iParameter  n  FunctionType  fnType  iParameterFnType  BooleanLiteralSet  booleanValues  toBooleanOutcomes  int  i  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Wrong_Operator]^Node iArgument = n.getChildAtIndex ( i  >=  1 ) ;^747^^^^^736^757^Node iArgument = n.getChildAtIndex ( i + 1 ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] updateTypeOfParametersOnClosure [RETURN_TYPE] void   Node n FunctionType fnType [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  iArgumentType  iParameterType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  iArgument  iParameter  n  FunctionType  fnType  iParameterFnType  BooleanLiteralSet  booleanValues  toBooleanOutcomes  int  i  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Wrong_Operator]^if  ( i + 1 > n.getChildCount (  )  )  {^743^^^^^736^757^if  ( i + 1 >= n.getChildCount (  )  )  {^[CLASS] TypeInference BooleanOutcomePair  [METHOD] updateTypeOfParametersOnClosure [RETURN_TYPE] void   Node n FunctionType fnType [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  iArgumentType  iParameterType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  iArgument  iParameter  n  FunctionType  fnType  iParameterFnType  BooleanLiteralSet  booleanValues  toBooleanOutcomes  int  i  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Wrong_Literal]^if  ( i + i >= n.getChildCount (  )  )  {^743^^^^^736^757^if  ( i + 1 >= n.getChildCount (  )  )  {^[CLASS] TypeInference BooleanOutcomePair  [METHOD] updateTypeOfParametersOnClosure [RETURN_TYPE] void   Node n FunctionType fnType [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  iArgumentType  iParameterType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  iArgument  iParameter  n  FunctionType  fnType  iParameterFnType  BooleanLiteralSet  booleanValues  toBooleanOutcomes  int  i  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Variable_Misuse]^if  ( iArgument.getType (  )  == Token.FUNCTION && iParameterType instanceof FunctionType && iArgumentType.getJSDocInfo (  )  == null )  {^749^750^751^^^736^757^if  ( iArgument.getType (  )  == Token.FUNCTION && iArgumentType instanceof FunctionType && iArgumentType.getJSDocInfo (  )  == null )  {^[CLASS] TypeInference BooleanOutcomePair  [METHOD] updateTypeOfParametersOnClosure [RETURN_TYPE] void   Node n FunctionType fnType [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  iArgumentType  iParameterType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  iArgument  iParameter  n  FunctionType  fnType  iParameterFnType  BooleanLiteralSet  booleanValues  toBooleanOutcomes  int  i  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Wrong_Literal]^Node iArgument = n.getChildAtIndex ( i + i ) ;^747^^^^^736^757^Node iArgument = n.getChildAtIndex ( i + 1 ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] updateTypeOfParametersOnClosure [RETURN_TYPE] void   Node n FunctionType fnType [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  iArgumentType  iParameterType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  iArgument  iParameter  n  FunctionType  fnType  iParameterFnType  BooleanLiteralSet  booleanValues  toBooleanOutcomes  int  i  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Variable_Misuse]^JSType nType = iParameter.getJSType (  ) ;^739^^^^^736^757^JSType iParameterType = iParameter.getJSType (  ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] updateTypeOfParametersOnClosure [RETURN_TYPE] void   Node n FunctionType fnType [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  iArgumentType  iParameterType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  iArgument  iParameter  n  FunctionType  fnType  iParameterFnType  BooleanLiteralSet  booleanValues  toBooleanOutcomes  int  i  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Wrong_Operator]^Node iArgument = n.getChildAtIndex ( i  <  1 ) ;^747^^^^^736^757^Node iArgument = n.getChildAtIndex ( i + 1 ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] updateTypeOfParametersOnClosure [RETURN_TYPE] void   Node n FunctionType fnType [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  iArgumentType  iParameterType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  iArgument  iParameter  n  FunctionType  fnType  iParameterFnType  BooleanLiteralSet  booleanValues  toBooleanOutcomes  int  i  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Variable_Misuse]^if  ( jParameterFnType.getTemplateTypeName (  )  == null )  {^767^^^^^752^782^if  ( fnType.getTemplateTypeName (  )  == null )  {^[CLASS] TypeInference BooleanOutcomePair  [METHOD] updateTypeOfThisOnClosure [RETURN_TYPE] void   Node n FunctionType fnType [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  iArgumentType  iParameterType  jArgumentType  jParameterType  boolean  foundTemplateTypeOfThisParameter  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  iArgument  iParameter  jArgument  jParameter  n  source  FunctionType  fnType  jArgumentFnType  jParameterFnType  BooleanLiteralSet  booleanValues  toBooleanOutcomes  int  i  j  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Wrong_Operator]^if  ( fnType.getTemplateTypeName (  )  != null )  {^767^^^^^752^782^if  ( fnType.getTemplateTypeName (  )  == null )  {^[CLASS] TypeInference BooleanOutcomePair  [METHOD] updateTypeOfThisOnClosure [RETURN_TYPE] void   Node n FunctionType fnType [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  iArgumentType  iParameterType  jArgumentType  jParameterType  boolean  foundTemplateTypeOfThisParameter  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  iArgument  iParameter  jArgument  jParameter  n  source  FunctionType  fnType  jArgumentFnType  jParameterFnType  BooleanLiteralSet  booleanValues  toBooleanOutcomes  int  i  j  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Variable_Misuse]^if  ( jParameterType.isTemplateType (  )  )  {^776^^^^^761^791^if  ( iParameterType.isTemplateType (  )  )  {^[CLASS] TypeInference BooleanOutcomePair  [METHOD] updateTypeOfThisOnClosure [RETURN_TYPE] void   Node n FunctionType fnType [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  iArgumentType  iParameterType  jArgumentType  jParameterType  boolean  foundTemplateTypeOfThisParameter  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  iArgument  iParameter  jArgument  jParameter  n  source  FunctionType  fnType  jArgumentFnType  jParameterFnType  BooleanLiteralSet  booleanValues  toBooleanOutcomes  int  i  j  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Variable_Misuse]^if  ( i + 1 >= source.getChildCount (  )  )  {^778^^^^^763^793^if  ( i + 1 >= n.getChildCount (  )  )  {^[CLASS] TypeInference BooleanOutcomePair  [METHOD] updateTypeOfThisOnClosure [RETURN_TYPE] void   Node n FunctionType fnType [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  iArgumentType  iParameterType  jArgumentType  jParameterType  boolean  foundTemplateTypeOfThisParameter  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  iArgument  iParameter  jArgument  jParameter  n  source  FunctionType  fnType  jArgumentFnType  jParameterFnType  BooleanLiteralSet  booleanValues  toBooleanOutcomes  int  i  j  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Argument_Swapping]^if  ( n + 1 >= i.getChildCount (  )  )  {^778^^^^^763^793^if  ( i + 1 >= n.getChildCount (  )  )  {^[CLASS] TypeInference BooleanOutcomePair  [METHOD] updateTypeOfThisOnClosure [RETURN_TYPE] void   Node n FunctionType fnType [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  iArgumentType  iParameterType  jArgumentType  jParameterType  boolean  foundTemplateTypeOfThisParameter  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  iArgument  iParameter  jArgument  jParameter  n  source  FunctionType  fnType  jArgumentFnType  jParameterFnType  BooleanLiteralSet  booleanValues  toBooleanOutcomes  int  i  j  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Wrong_Operator]^if  ( i + 1 > n.getChildCount (  )  )  {^778^^^^^763^793^if  ( i + 1 >= n.getChildCount (  )  )  {^[CLASS] TypeInference BooleanOutcomePair  [METHOD] updateTypeOfThisOnClosure [RETURN_TYPE] void   Node n FunctionType fnType [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  iArgumentType  iParameterType  jArgumentType  jParameterType  boolean  foundTemplateTypeOfThisParameter  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  iArgument  iParameter  jArgument  jParameter  n  source  FunctionType  fnType  jArgumentFnType  jParameterFnType  BooleanLiteralSet  booleanValues  toBooleanOutcomes  int  i  j  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Wrong_Operator]^if  ( i  ^  1 >= n.getChildCount (  )  )  {^778^^^^^763^793^if  ( i + 1 >= n.getChildCount (  )  )  {^[CLASS] TypeInference BooleanOutcomePair  [METHOD] updateTypeOfThisOnClosure [RETURN_TYPE] void   Node n FunctionType fnType [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  iArgumentType  iParameterType  jArgumentType  jParameterType  boolean  foundTemplateTypeOfThisParameter  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  iArgument  iParameter  jArgument  jParameter  n  source  FunctionType  fnType  jArgumentFnType  jParameterFnType  BooleanLiteralSet  booleanValues  toBooleanOutcomes  int  i  j  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Wrong_Literal]^if  ( i  >= n.getChildCount (  )  )  {^778^^^^^763^793^if  ( i + 1 >= n.getChildCount (  )  )  {^[CLASS] TypeInference BooleanOutcomePair  [METHOD] updateTypeOfThisOnClosure [RETURN_TYPE] void   Node n FunctionType fnType [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  iArgumentType  iParameterType  jArgumentType  jParameterType  boolean  foundTemplateTypeOfThisParameter  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  iArgument  iParameter  jArgument  jParameter  n  source  FunctionType  fnType  jArgumentFnType  jParameterFnType  BooleanLiteralSet  booleanValues  toBooleanOutcomes  int  i  j  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Variable_Misuse]^if  ( jParameterType != null )  {^784^^^^^769^799^if  ( iArgumentType != null )  {^[CLASS] TypeInference BooleanOutcomePair  [METHOD] updateTypeOfThisOnClosure [RETURN_TYPE] void   Node n FunctionType fnType [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  iArgumentType  iParameterType  jArgumentType  jParameterType  boolean  foundTemplateTypeOfThisParameter  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  iArgument  iParameter  jArgument  jParameter  n  source  FunctionType  fnType  jArgumentFnType  jParameterFnType  BooleanLiteralSet  booleanValues  toBooleanOutcomes  int  i  j  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Variable_Misuse]^if  ( sourceType != null )  {^784^^^^^769^799^if  ( iArgumentType != null )  {^[CLASS] TypeInference BooleanOutcomePair  [METHOD] updateTypeOfThisOnClosure [RETURN_TYPE] void   Node n FunctionType fnType [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  iArgumentType  iParameterType  jArgumentType  jParameterType  boolean  foundTemplateTypeOfThisParameter  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  iArgument  iParameter  jArgument  jParameter  n  source  FunctionType  fnType  jArgumentFnType  jParameterFnType  BooleanLiteralSet  booleanValues  toBooleanOutcomes  int  i  j  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Variable_Misuse]^if  ( iArgumentType != sourceull )  {^784^^^^^769^799^if  ( iArgumentType != null )  {^[CLASS] TypeInference BooleanOutcomePair  [METHOD] updateTypeOfThisOnClosure [RETURN_TYPE] void   Node n FunctionType fnType [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  iArgumentType  iParameterType  jArgumentType  jParameterType  boolean  foundTemplateTypeOfThisParameter  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  iArgument  iParameter  jArgument  jParameter  n  source  FunctionType  fnType  jArgumentFnType  jParameterFnType  BooleanLiteralSet  booleanValues  toBooleanOutcomes  int  i  j  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Argument_Swapping]^if  ( nType != iArgumentull )  {^784^^^^^769^799^if  ( iArgumentType != null )  {^[CLASS] TypeInference BooleanOutcomePair  [METHOD] updateTypeOfThisOnClosure [RETURN_TYPE] void   Node n FunctionType fnType [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  iArgumentType  iParameterType  jArgumentType  jParameterType  boolean  foundTemplateTypeOfThisParameter  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  iArgument  iParameter  jArgument  jParameter  n  source  FunctionType  fnType  jArgumentFnType  jParameterFnType  BooleanLiteralSet  booleanValues  toBooleanOutcomes  int  i  j  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Wrong_Operator]^if  ( iArgumentType == null )  {^784^^^^^769^799^if  ( iArgumentType != null )  {^[CLASS] TypeInference BooleanOutcomePair  [METHOD] updateTypeOfThisOnClosure [RETURN_TYPE] void   Node n FunctionType fnType [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  iArgumentType  iParameterType  jArgumentType  jParameterType  boolean  foundTemplateTypeOfThisParameter  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  iArgument  iParameter  jArgument  jParameter  n  source  FunctionType  fnType  jArgumentFnType  jParameterFnType  BooleanLiteralSet  booleanValues  toBooleanOutcomes  int  i  j  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Variable_Misuse]^if  ( ! ( jParameterType instanceof ObjectType )  )  {^786^^^^^771^801^if  ( ! ( iArgumentType instanceof ObjectType )  )  {^[CLASS] TypeInference BooleanOutcomePair  [METHOD] updateTypeOfThisOnClosure [RETURN_TYPE] void   Node n FunctionType fnType [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  iArgumentType  iParameterType  jArgumentType  jParameterType  boolean  foundTemplateTypeOfThisParameter  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  iArgument  iParameter  jArgument  jParameter  n  source  FunctionType  fnType  jArgumentFnType  jParameterFnType  BooleanLiteralSet  booleanValues  toBooleanOutcomes  int  i  j  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Variable_Misuse]^if  ( ! ( sourceType instanceof ObjectType )  )  {^786^^^^^771^801^if  ( ! ( iArgumentType instanceof ObjectType )  )  {^[CLASS] TypeInference BooleanOutcomePair  [METHOD] updateTypeOfThisOnClosure [RETURN_TYPE] void   Node n FunctionType fnType [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  iArgumentType  iParameterType  jArgumentType  jParameterType  boolean  foundTemplateTypeOfThisParameter  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  iArgument  iParameter  jArgument  jParameter  n  source  FunctionType  fnType  jArgumentFnType  jParameterFnType  BooleanLiteralSet  booleanValues  toBooleanOutcomes  int  i  j  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Argument_Swapping]^if  ( ! ( iArgument instanceof ObjectType )  )  {^786^^^^^771^801^if  ( ! ( iArgumentType instanceof ObjectType )  )  {^[CLASS] TypeInference BooleanOutcomePair  [METHOD] updateTypeOfThisOnClosure [RETURN_TYPE] void   Node n FunctionType fnType [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  iArgumentType  iParameterType  jArgumentType  jParameterType  boolean  foundTemplateTypeOfThisParameter  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  iArgument  iParameter  jArgument  jParameter  n  source  FunctionType  fnType  jArgumentFnType  jParameterFnType  BooleanLiteralSet  booleanValues  toBooleanOutcomes  int  i  j  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Wrong_Operator]^if  ( ! ( iArgumentType  ==  ObjectType )  )  {^786^^^^^771^801^if  ( ! ( iArgumentType instanceof ObjectType )  )  {^[CLASS] TypeInference BooleanOutcomePair  [METHOD] updateTypeOfThisOnClosure [RETURN_TYPE] void   Node n FunctionType fnType [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  iArgumentType  iParameterType  jArgumentType  jParameterType  boolean  foundTemplateTypeOfThisParameter  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  iArgument  iParameter  jArgument  jParameter  n  source  FunctionType  fnType  jArgumentFnType  jParameterFnType  BooleanLiteralSet  booleanValues  toBooleanOutcomes  int  i  j  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Variable_Misuse]^compiler.report ( JSError.make ( NodeUtil.getSourceName ( source ) , iArgument, TEMPLATE_TYPE_NOT_OBJECT_TYPE )  ) ;^787^788^789^^^772^802^compiler.report ( JSError.make ( NodeUtil.getSourceName ( iArgument ) , iArgument, TEMPLATE_TYPE_NOT_OBJECT_TYPE )  ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] updateTypeOfThisOnClosure [RETURN_TYPE] void   Node n FunctionType fnType [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  iArgumentType  iParameterType  jArgumentType  jParameterType  boolean  foundTemplateTypeOfThisParameter  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  iArgument  iParameter  jArgument  jParameter  n  source  FunctionType  fnType  jArgumentFnType  jParameterFnType  BooleanLiteralSet  booleanValues  toBooleanOutcomes  int  i  j  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Variable_Misuse]^compiler.report ( JSError.make ( NodeUtil.getSourceName ( iArgument ) , iArgument, TEMPLATE_TYPE_OF_THIS_EXPECTED )  ) ;^787^788^789^^^772^802^compiler.report ( JSError.make ( NodeUtil.getSourceName ( iArgument ) , iArgument, TEMPLATE_TYPE_NOT_OBJECT_TYPE )  ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] updateTypeOfThisOnClosure [RETURN_TYPE] void   Node n FunctionType fnType [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  iArgumentType  iParameterType  jArgumentType  jParameterType  boolean  foundTemplateTypeOfThisParameter  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  iArgument  iParameter  jArgument  jParameter  n  source  FunctionType  fnType  jArgumentFnType  jParameterFnType  BooleanLiteralSet  booleanValues  toBooleanOutcomes  int  i  j  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Argument_Swapping]^compiler.report ( JSError.make ( NodeUtil.getSourceName ( TEMPLATE_TYPE_NOT_OBJECT_TYPE ) , iArgument, iArgument )  ) ;^787^788^789^^^772^802^compiler.report ( JSError.make ( NodeUtil.getSourceName ( iArgument ) , iArgument, TEMPLATE_TYPE_NOT_OBJECT_TYPE )  ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] updateTypeOfThisOnClosure [RETURN_TYPE] void   Node n FunctionType fnType [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  iArgumentType  iParameterType  jArgumentType  jParameterType  boolean  foundTemplateTypeOfThisParameter  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  iArgument  iParameter  jArgument  jParameter  n  source  FunctionType  fnType  jArgumentFnType  jParameterFnType  BooleanLiteralSet  booleanValues  toBooleanOutcomes  int  i  j  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Variable_Misuse]^JSError.make ( NodeUtil.getSourceName ( source ) , iArgument, TEMPLATE_TYPE_NOT_OBJECT_TYPE )  ) ;^788^789^^^^773^803^JSError.make ( NodeUtil.getSourceName ( iArgument ) , iArgument, TEMPLATE_TYPE_NOT_OBJECT_TYPE )  ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] updateTypeOfThisOnClosure [RETURN_TYPE] void   Node n FunctionType fnType [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  iArgumentType  iParameterType  jArgumentType  jParameterType  boolean  foundTemplateTypeOfThisParameter  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  iArgument  iParameter  jArgument  jParameter  n  source  FunctionType  fnType  jArgumentFnType  jParameterFnType  BooleanLiteralSet  booleanValues  toBooleanOutcomes  int  i  j  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Variable_Misuse]^JSError.make ( NodeUtil.getSourceName ( iArgument ) , iArgument, TEMPLATE_TYPE_OF_THIS_EXPECTED )  ) ;^788^789^^^^773^803^JSError.make ( NodeUtil.getSourceName ( iArgument ) , iArgument, TEMPLATE_TYPE_NOT_OBJECT_TYPE )  ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] updateTypeOfThisOnClosure [RETURN_TYPE] void   Node n FunctionType fnType [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  iArgumentType  iParameterType  jArgumentType  jParameterType  boolean  foundTemplateTypeOfThisParameter  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  iArgument  iParameter  jArgument  jParameter  n  source  FunctionType  fnType  jArgumentFnType  jParameterFnType  BooleanLiteralSet  booleanValues  toBooleanOutcomes  int  i  j  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Argument_Swapping]^JSError.make ( NodeUtil.getSourceName ( TEMPLATE_TYPE_NOT_OBJECT_TYPE ) , iArgument, iArgument )  ) ;^788^789^^^^773^803^JSError.make ( NodeUtil.getSourceName ( iArgument ) , iArgument, TEMPLATE_TYPE_NOT_OBJECT_TYPE )  ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] updateTypeOfThisOnClosure [RETURN_TYPE] void   Node n FunctionType fnType [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  iArgumentType  iParameterType  jArgumentType  jParameterType  boolean  foundTemplateTypeOfThisParameter  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  iArgument  iParameter  jArgument  jParameter  n  source  FunctionType  fnType  jArgumentFnType  jParameterFnType  BooleanLiteralSet  booleanValues  toBooleanOutcomes  int  i  j  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Variable_Misuse]^if  ( jArgumentType instanceof FunctionType )  {^798^^^^^783^813^if  ( jParameterType instanceof FunctionType )  {^[CLASS] TypeInference BooleanOutcomePair  [METHOD] updateTypeOfThisOnClosure [RETURN_TYPE] void   Node n FunctionType fnType [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  iArgumentType  iParameterType  jArgumentType  jParameterType  boolean  foundTemplateTypeOfThisParameter  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  iArgument  iParameter  jArgument  jParameter  n  source  FunctionType  fnType  jArgumentFnType  jParameterFnType  BooleanLiteralSet  booleanValues  toBooleanOutcomes  int  i  j  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Variable_Misuse]^if  ( iParameterType instanceof FunctionType )  {^798^^^^^783^813^if  ( jParameterType instanceof FunctionType )  {^[CLASS] TypeInference BooleanOutcomePair  [METHOD] updateTypeOfThisOnClosure [RETURN_TYPE] void   Node n FunctionType fnType [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  iArgumentType  iParameterType  jArgumentType  jParameterType  boolean  foundTemplateTypeOfThisParameter  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  iArgument  iParameter  jArgument  jParameter  n  source  FunctionType  fnType  jArgumentFnType  jParameterFnType  BooleanLiteralSet  booleanValues  toBooleanOutcomes  int  i  j  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Wrong_Operator]^if  ( jParameterType  >=  FunctionType )  {^798^^^^^783^813^if  ( jParameterType instanceof FunctionType )  {^[CLASS] TypeInference BooleanOutcomePair  [METHOD] updateTypeOfThisOnClosure [RETURN_TYPE] void   Node n FunctionType fnType [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  iArgumentType  iParameterType  jArgumentType  jParameterType  boolean  foundTemplateTypeOfThisParameter  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  iArgument  iParameter  jArgument  jParameter  n  source  FunctionType  fnType  jArgumentFnType  jParameterFnType  BooleanLiteralSet  booleanValues  toBooleanOutcomes  int  i  j  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Wrong_Operator]^if  ( jParameterType  <=  FunctionType )  {^798^^^^^783^813^if  ( jParameterType instanceof FunctionType )  {^[CLASS] TypeInference BooleanOutcomePair  [METHOD] updateTypeOfThisOnClosure [RETURN_TYPE] void   Node n FunctionType fnType [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  iArgumentType  iParameterType  jArgumentType  jParameterType  boolean  foundTemplateTypeOfThisParameter  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  iArgument  iParameter  jArgument  jParameter  n  source  FunctionType  fnType  jArgumentFnType  jParameterFnType  BooleanLiteralSet  booleanValues  toBooleanOutcomes  int  i  j  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Variable_Misuse]^if  ( jArgumentFnType.getTypeOfThis (  ) .equals ( iParameterType )  )  {^800^^^^^785^815^if  ( jParameterFnType.getTypeOfThis (  ) .equals ( iParameterType )  )  {^[CLASS] TypeInference BooleanOutcomePair  [METHOD] updateTypeOfThisOnClosure [RETURN_TYPE] void   Node n FunctionType fnType [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  iArgumentType  iParameterType  jArgumentType  jParameterType  boolean  foundTemplateTypeOfThisParameter  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  iArgument  iParameter  jArgument  jParameter  n  source  FunctionType  fnType  jArgumentFnType  jParameterFnType  BooleanLiteralSet  booleanValues  toBooleanOutcomes  int  i  j  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Variable_Misuse]^if  ( jParameterFnType.getTypeOfThis (  ) .equals ( jParameterType )  )  {^800^^^^^785^815^if  ( jParameterFnType.getTypeOfThis (  ) .equals ( iParameterType )  )  {^[CLASS] TypeInference BooleanOutcomePair  [METHOD] updateTypeOfThisOnClosure [RETURN_TYPE] void   Node n FunctionType fnType [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  iArgumentType  iParameterType  jArgumentType  jParameterType  boolean  foundTemplateTypeOfThisParameter  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  iArgument  iParameter  jArgument  jParameter  n  source  FunctionType  fnType  jArgumentFnType  jParameterFnType  BooleanLiteralSet  booleanValues  toBooleanOutcomes  int  i  j  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Variable_Misuse]^if  ( iParameterFnType.getTypeOfThis (  ) .equals ( iParameterType )  )  {^800^^^^^785^815^if  ( jParameterFnType.getTypeOfThis (  ) .equals ( iParameterType )  )  {^[CLASS] TypeInference BooleanOutcomePair  [METHOD] updateTypeOfThisOnClosure [RETURN_TYPE] void   Node n FunctionType fnType [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  iArgumentType  iParameterType  jArgumentType  jParameterType  boolean  foundTemplateTypeOfThisParameter  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  iArgument  iParameter  jArgument  jParameter  n  source  FunctionType  fnType  jArgumentFnType  jParameterFnType  BooleanLiteralSet  booleanValues  toBooleanOutcomes  int  i  j  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Argument_Swapping]^if  ( iParameterTypeParameterFnType.getTypeOfThis (  ) .equals ( j )  )  {^800^^^^^785^815^if  ( jParameterFnType.getTypeOfThis (  ) .equals ( iParameterType )  )  {^[CLASS] TypeInference BooleanOutcomePair  [METHOD] updateTypeOfThisOnClosure [RETURN_TYPE] void   Node n FunctionType fnType [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  iArgumentType  iParameterType  jArgumentType  jParameterType  boolean  foundTemplateTypeOfThisParameter  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  iArgument  iParameter  jArgument  jParameter  n  source  FunctionType  fnType  jArgumentFnType  jParameterFnType  BooleanLiteralSet  booleanValues  toBooleanOutcomes  int  i  j  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Variable_Misuse]^if  ( i + 1 >= n.getChildCount (  )  )  {^803^^^^^788^818^if  ( j + 1 >= n.getChildCount (  )  )  {^[CLASS] TypeInference BooleanOutcomePair  [METHOD] updateTypeOfThisOnClosure [RETURN_TYPE] void   Node n FunctionType fnType [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  iArgumentType  iParameterType  jArgumentType  jParameterType  boolean  foundTemplateTypeOfThisParameter  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  iArgument  iParameter  jArgument  jParameter  n  source  FunctionType  fnType  jArgumentFnType  jParameterFnType  BooleanLiteralSet  booleanValues  toBooleanOutcomes  int  i  j  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Variable_Misuse]^if  ( j + 1 >= source.getChildCount (  )  )  {^803^^^^^788^818^if  ( j + 1 >= n.getChildCount (  )  )  {^[CLASS] TypeInference BooleanOutcomePair  [METHOD] updateTypeOfThisOnClosure [RETURN_TYPE] void   Node n FunctionType fnType [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  iArgumentType  iParameterType  jArgumentType  jParameterType  boolean  foundTemplateTypeOfThisParameter  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  iArgument  iParameter  jArgument  jParameter  n  source  FunctionType  fnType  jArgumentFnType  jParameterFnType  BooleanLiteralSet  booleanValues  toBooleanOutcomes  int  i  j  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Argument_Swapping]^if  ( n + 1 >= j.getChildCount (  )  )  {^803^^^^^788^818^if  ( j + 1 >= n.getChildCount (  )  )  {^[CLASS] TypeInference BooleanOutcomePair  [METHOD] updateTypeOfThisOnClosure [RETURN_TYPE] void   Node n FunctionType fnType [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  iArgumentType  iParameterType  jArgumentType  jParameterType  boolean  foundTemplateTypeOfThisParameter  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  iArgument  iParameter  jArgument  jParameter  n  source  FunctionType  fnType  jArgumentFnType  jParameterFnType  BooleanLiteralSet  booleanValues  toBooleanOutcomes  int  i  j  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Wrong_Operator]^if  ( j + 1 > n.getChildCount (  )  )  {^803^^^^^788^818^if  ( j + 1 >= n.getChildCount (  )  )  {^[CLASS] TypeInference BooleanOutcomePair  [METHOD] updateTypeOfThisOnClosure [RETURN_TYPE] void   Node n FunctionType fnType [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  iArgumentType  iParameterType  jArgumentType  jParameterType  boolean  foundTemplateTypeOfThisParameter  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  iArgument  iParameter  jArgument  jParameter  n  source  FunctionType  fnType  jArgumentFnType  jParameterFnType  BooleanLiteralSet  booleanValues  toBooleanOutcomes  int  i  j  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Wrong_Operator]^if  ( j  !=  1 >= n.getChildCount (  )  )  {^803^^^^^788^818^if  ( j + 1 >= n.getChildCount (  )  )  {^[CLASS] TypeInference BooleanOutcomePair  [METHOD] updateTypeOfThisOnClosure [RETURN_TYPE] void   Node n FunctionType fnType [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  iArgumentType  iParameterType  jArgumentType  jParameterType  boolean  foundTemplateTypeOfThisParameter  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  iArgument  iParameter  jArgument  jParameter  n  source  FunctionType  fnType  jArgumentFnType  jParameterFnType  BooleanLiteralSet  booleanValues  toBooleanOutcomes  int  i  j  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Wrong_Literal]^if  ( j  >= n.getChildCount (  )  )  {^803^^^^^788^818^if  ( j + 1 >= n.getChildCount (  )  )  {^[CLASS] TypeInference BooleanOutcomePair  [METHOD] updateTypeOfThisOnClosure [RETURN_TYPE] void   Node n FunctionType fnType [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  iArgumentType  iParameterType  jArgumentType  jParameterType  boolean  foundTemplateTypeOfThisParameter  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  iArgument  iParameter  jArgument  jParameter  n  source  FunctionType  fnType  jArgumentFnType  jParameterFnType  BooleanLiteralSet  booleanValues  toBooleanOutcomes  int  i  j  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Variable_Misuse]^if  ( n.getType (  )  == Token.FUNCTION && jArgumentType instanceof FunctionType )  {^809^810^^^^794^824^if  ( jArgument.getType (  )  == Token.FUNCTION && jArgumentType instanceof FunctionType )  {^[CLASS] TypeInference BooleanOutcomePair  [METHOD] updateTypeOfThisOnClosure [RETURN_TYPE] void   Node n FunctionType fnType [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  iArgumentType  iParameterType  jArgumentType  jParameterType  boolean  foundTemplateTypeOfThisParameter  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  iArgument  iParameter  jArgument  jParameter  n  source  FunctionType  fnType  jArgumentFnType  jParameterFnType  BooleanLiteralSet  booleanValues  toBooleanOutcomes  int  i  j  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Variable_Misuse]^if  ( jArgument.getType (  )  == Token.FUNCTION && jParameterType instanceof FunctionType )  {^809^810^^^^794^824^if  ( jArgument.getType (  )  == Token.FUNCTION && jArgumentType instanceof FunctionType )  {^[CLASS] TypeInference BooleanOutcomePair  [METHOD] updateTypeOfThisOnClosure [RETURN_TYPE] void   Node n FunctionType fnType [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  iArgumentType  iParameterType  jArgumentType  jParameterType  boolean  foundTemplateTypeOfThisParameter  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  iArgument  iParameter  jArgument  jParameter  n  source  FunctionType  fnType  jArgumentFnType  jParameterFnType  BooleanLiteralSet  booleanValues  toBooleanOutcomes  int  i  j  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Wrong_Operator]^if  ( jArgument.getType (  )  == Token.FUNCTION || jArgumentType instanceof FunctionType )  {^809^810^^^^794^824^if  ( jArgument.getType (  )  == Token.FUNCTION && jArgumentType instanceof FunctionType )  {^[CLASS] TypeInference BooleanOutcomePair  [METHOD] updateTypeOfThisOnClosure [RETURN_TYPE] void   Node n FunctionType fnType [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  iArgumentType  iParameterType  jArgumentType  jParameterType  boolean  foundTemplateTypeOfThisParameter  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  iArgument  iParameter  jArgument  jParameter  n  source  FunctionType  fnType  jArgumentFnType  jParameterFnType  BooleanLiteralSet  booleanValues  toBooleanOutcomes  int  i  j  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Wrong_Operator]^if  ( jArgument.getType (  )  >= Token.FUNCTION && jArgumentType instanceof FunctionType )  {^809^810^^^^794^824^if  ( jArgument.getType (  )  == Token.FUNCTION && jArgumentType instanceof FunctionType )  {^[CLASS] TypeInference BooleanOutcomePair  [METHOD] updateTypeOfThisOnClosure [RETURN_TYPE] void   Node n FunctionType fnType [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  iArgumentType  iParameterType  jArgumentType  jParameterType  boolean  foundTemplateTypeOfThisParameter  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  iArgument  iParameter  jArgument  jParameter  n  source  FunctionType  fnType  jArgumentFnType  jParameterFnType  BooleanLiteralSet  booleanValues  toBooleanOutcomes  int  i  j  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Wrong_Operator]^if  ( jArgument.getType (  )  == Token.FUNCTION && jArgumentType  >  FunctionType )  {^809^810^^^^794^824^if  ( jArgument.getType (  )  == Token.FUNCTION && jArgumentType instanceof FunctionType )  {^[CLASS] TypeInference BooleanOutcomePair  [METHOD] updateTypeOfThisOnClosure [RETURN_TYPE] void   Node n FunctionType fnType [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  iArgumentType  iParameterType  jArgumentType  jParameterType  boolean  foundTemplateTypeOfThisParameter  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  iArgument  iParameter  jArgument  jParameter  n  source  FunctionType  fnType  jArgumentFnType  jParameterFnType  BooleanLiteralSet  booleanValues  toBooleanOutcomes  int  i  j  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Variable_Misuse]^if  ( sourceFnType.getTypeOfThis (  ) .isUnknownType (  )  )  {^814^^^^^809^825^if  ( jArgumentFnType.getTypeOfThis (  ) .isUnknownType (  )  )  {^[CLASS] TypeInference BooleanOutcomePair  [METHOD] updateTypeOfThisOnClosure [RETURN_TYPE] void   Node n FunctionType fnType [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  iArgumentType  iParameterType  jArgumentType  jParameterType  boolean  foundTemplateTypeOfThisParameter  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  iArgument  iParameter  jArgument  jParameter  n  source  FunctionType  fnType  jArgumentFnType  jParameterFnType  BooleanLiteralSet  booleanValues  toBooleanOutcomes  int  i  j  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Argument_Swapping]^new FunctionType ( jArgumentFnType, registry.getReferenceName (  ) , jArgumentFnType.getSource (  ) , jArgumentFnType.getParametersNode (  ) ,^818^819^820^821^^809^825^new FunctionType ( registry, jArgumentFnType.getReferenceName (  ) , jArgumentFnType.getSource (  ) , jArgumentFnType.getParametersNode (  ) ,^[CLASS] TypeInference BooleanOutcomePair  [METHOD] updateTypeOfThisOnClosure [RETURN_TYPE] void   Node n FunctionType fnType [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  iArgumentType  iParameterType  jArgumentType  jParameterType  boolean  foundTemplateTypeOfThisParameter  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  iArgument  iParameter  jArgument  jParameter  n  source  FunctionType  fnType  jArgumentFnType  jParameterFnType  BooleanLiteralSet  booleanValues  toBooleanOutcomes  int  i  j  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Variable_Misuse]^jArgument.setJSType ( new FunctionType ( registry, sourceFnType.getReferenceName (  ) , jArgumentFnType.getSource (  ) ,^817^818^819^820^^809^825^jArgument.setJSType ( new FunctionType ( registry, jArgumentFnType.getReferenceName (  ) , jArgumentFnType.getSource (  ) ,^[CLASS] TypeInference BooleanOutcomePair  [METHOD] updateTypeOfThisOnClosure [RETURN_TYPE] void   Node n FunctionType fnType [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  iArgumentType  iParameterType  jArgumentType  jParameterType  boolean  foundTemplateTypeOfThisParameter  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  iArgument  iParameter  jArgument  jParameter  n  source  FunctionType  fnType  jArgumentFnType  jParameterFnType  BooleanLiteralSet  booleanValues  toBooleanOutcomes  int  i  j  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Variable_Misuse]^jArgument.setJSType ( new FunctionType ( registry, jParameterFnType.getReferenceName (  ) , jArgumentFnType.getSource (  ) ,^817^818^819^820^^809^825^jArgument.setJSType ( new FunctionType ( registry, jArgumentFnType.getReferenceName (  ) , jArgumentFnType.getSource (  ) ,^[CLASS] TypeInference BooleanOutcomePair  [METHOD] updateTypeOfThisOnClosure [RETURN_TYPE] void   Node n FunctionType fnType [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  iArgumentType  iParameterType  jArgumentType  jParameterType  boolean  foundTemplateTypeOfThisParameter  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  iArgument  iParameter  jArgument  jParameter  n  source  FunctionType  fnType  jArgumentFnType  jParameterFnType  BooleanLiteralSet  booleanValues  toBooleanOutcomes  int  i  j  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Argument_Swapping]^jArgument.setJSType ( new FunctionType ( jArgumentFnType, registry.getReferenceName (  ) , jArgumentFnType.getSource (  ) ,^817^818^819^820^^809^825^jArgument.setJSType ( new FunctionType ( registry, jArgumentFnType.getReferenceName (  ) , jArgumentFnType.getSource (  ) ,^[CLASS] TypeInference BooleanOutcomePair  [METHOD] updateTypeOfThisOnClosure [RETURN_TYPE] void   Node n FunctionType fnType [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  iArgumentType  iParameterType  jArgumentType  jParameterType  boolean  foundTemplateTypeOfThisParameter  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  iArgument  iParameter  jArgument  jParameter  n  source  FunctionType  fnType  jArgumentFnType  jParameterFnType  BooleanLiteralSet  booleanValues  toBooleanOutcomes  int  i  j  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Variable_Misuse]^registry, jParameterFnType.getReferenceName (  ) , jArgumentFnType.getSource (  ) , jArgumentFnType.getParametersNode (  ) , jArgumentFnType.getReturnType (  ) ,^819^820^821^822^^809^825^registry, jArgumentFnType.getReferenceName (  ) , jArgumentFnType.getSource (  ) , jArgumentFnType.getParametersNode (  ) , jArgumentFnType.getReturnType (  ) ,^[CLASS] TypeInference BooleanOutcomePair  [METHOD] updateTypeOfThisOnClosure [RETURN_TYPE] void   Node n FunctionType fnType [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  iArgumentType  iParameterType  jArgumentType  jParameterType  boolean  foundTemplateTypeOfThisParameter  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  iArgument  iParameter  jArgument  jParameter  n  source  FunctionType  fnType  jArgumentFnType  jParameterFnType  BooleanLiteralSet  booleanValues  toBooleanOutcomes  int  i  j  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Variable_Misuse]^jArgumentFnType.getSource (  ) , jParameterFnType.getParametersNode (  ) , jArgumentFnType.getReturnType (  ) , ( ObjectType )  iArgumentType )  ) ;^820^821^822^823^^809^825^jArgumentFnType.getSource (  ) , jArgumentFnType.getParametersNode (  ) , jArgumentFnType.getReturnType (  ) , ( ObjectType )  iArgumentType )  ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] updateTypeOfThisOnClosure [RETURN_TYPE] void   Node n FunctionType fnType [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  iArgumentType  iParameterType  jArgumentType  jParameterType  boolean  foundTemplateTypeOfThisParameter  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  iArgument  iParameter  jArgument  jParameter  n  source  FunctionType  fnType  jArgumentFnType  jParameterFnType  BooleanLiteralSet  booleanValues  toBooleanOutcomes  int  i  j  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Variable_Misuse]^jArgumentFnType.getParametersNode (  ) , jParameterFnType.getReturnType (  ) , ( ObjectType )  iArgumentType )  ) ;^821^822^823^^^809^825^jArgumentFnType.getParametersNode (  ) , jArgumentFnType.getReturnType (  ) , ( ObjectType )  iArgumentType )  ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] updateTypeOfThisOnClosure [RETURN_TYPE] void   Node n FunctionType fnType [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  iArgumentType  iParameterType  jArgumentType  jParameterType  boolean  foundTemplateTypeOfThisParameter  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  iArgument  iParameter  jArgument  jParameter  n  source  FunctionType  fnType  jArgumentFnType  jParameterFnType  BooleanLiteralSet  booleanValues  toBooleanOutcomes  int  i  j  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Variable_Misuse]^new FunctionType ( registry, jParameterFnType.getReferenceName (  ) , jArgumentFnType.getSource (  ) , jArgumentFnType.getParametersNode (  ) ,^818^819^820^821^^809^825^new FunctionType ( registry, jArgumentFnType.getReferenceName (  ) , jArgumentFnType.getSource (  ) , jArgumentFnType.getParametersNode (  ) ,^[CLASS] TypeInference BooleanOutcomePair  [METHOD] updateTypeOfThisOnClosure [RETURN_TYPE] void   Node n FunctionType fnType [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  iArgumentType  iParameterType  jArgumentType  jParameterType  boolean  foundTemplateTypeOfThisParameter  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  iArgument  iParameter  jArgument  jParameter  n  source  FunctionType  fnType  jArgumentFnType  jParameterFnType  BooleanLiteralSet  booleanValues  toBooleanOutcomes  int  i  j  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Variable_Misuse]^if  ( jParameterFnType.getTypeOfThis (  ) .isUnknownType (  )  )  {^814^^^^^809^825^if  ( jArgumentFnType.getTypeOfThis (  ) .isUnknownType (  )  )  {^[CLASS] TypeInference BooleanOutcomePair  [METHOD] updateTypeOfThisOnClosure [RETURN_TYPE] void   Node n FunctionType fnType [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  iArgumentType  iParameterType  jArgumentType  jParameterType  boolean  foundTemplateTypeOfThisParameter  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  iArgument  iParameter  jArgument  jParameter  n  source  FunctionType  fnType  jArgumentFnType  jParameterFnType  BooleanLiteralSet  booleanValues  toBooleanOutcomes  int  i  j  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Argument_Swapping]^jArgument.setJSType ( new FunctionType ( registry, jArgument.getReferenceName (  ) , jArgumentFnTypeFnType.getSource (  ) ,^817^818^819^820^^809^825^jArgument.setJSType ( new FunctionType ( registry, jArgumentFnType.getReferenceName (  ) , jArgumentFnType.getSource (  ) ,^[CLASS] TypeInference BooleanOutcomePair  [METHOD] updateTypeOfThisOnClosure [RETURN_TYPE] void   Node n FunctionType fnType [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  iArgumentType  iParameterType  jArgumentType  jParameterType  boolean  foundTemplateTypeOfThisParameter  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  iArgument  iParameter  jArgument  jParameter  n  source  FunctionType  fnType  jArgumentFnType  jParameterFnType  BooleanLiteralSet  booleanValues  toBooleanOutcomes  int  i  j  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Variable_Misuse]^if  ( jParameterFnType.getTypeOfThis (  ) .isUnknownType (  )  )  {^814^^^^^799^829^if  ( jArgumentFnType.getTypeOfThis (  ) .isUnknownType (  )  )  {^[CLASS] TypeInference BooleanOutcomePair  [METHOD] updateTypeOfThisOnClosure [RETURN_TYPE] void   Node n FunctionType fnType [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  iArgumentType  iParameterType  jArgumentType  jParameterType  boolean  foundTemplateTypeOfThisParameter  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  iArgument  iParameter  jArgument  jParameter  n  source  FunctionType  fnType  jArgumentFnType  jParameterFnType  BooleanLiteralSet  booleanValues  toBooleanOutcomes  int  i  j  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Variable_Misuse]^new FunctionType ( registry, jParameterFnType.getReferenceName (  ) , jArgumentFnType.getSource (  ) , jArgumentFnType.getParametersNode (  ) ,^818^819^820^821^^803^833^new FunctionType ( registry, jArgumentFnType.getReferenceName (  ) , jArgumentFnType.getSource (  ) , jArgumentFnType.getParametersNode (  ) ,^[CLASS] TypeInference BooleanOutcomePair  [METHOD] updateTypeOfThisOnClosure [RETURN_TYPE] void   Node n FunctionType fnType [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  iArgumentType  iParameterType  jArgumentType  jParameterType  boolean  foundTemplateTypeOfThisParameter  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  iArgument  iParameter  jArgument  jParameter  n  source  FunctionType  fnType  jArgumentFnType  jParameterFnType  BooleanLiteralSet  booleanValues  toBooleanOutcomes  int  i  j  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Argument_Swapping]^new FunctionType ( jArgumentFnType, registry.getReferenceName (  ) , jArgumentFnType.getSource (  ) , jArgumentFnType.getParametersNode (  ) ,^818^819^820^821^^803^833^new FunctionType ( registry, jArgumentFnType.getReferenceName (  ) , jArgumentFnType.getSource (  ) , jArgumentFnType.getParametersNode (  ) ,^[CLASS] TypeInference BooleanOutcomePair  [METHOD] updateTypeOfThisOnClosure [RETURN_TYPE] void   Node n FunctionType fnType [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  iArgumentType  iParameterType  jArgumentType  jParameterType  boolean  foundTemplateTypeOfThisParameter  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  iArgument  iParameter  jArgument  jParameter  n  source  FunctionType  fnType  jArgumentFnType  jParameterFnType  BooleanLiteralSet  booleanValues  toBooleanOutcomes  int  i  j  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Variable_Misuse]^jArgument.setJSType ( new FunctionType ( registry, nFnType.getReferenceName (  ) , jArgumentFnType.getSource (  ) ,^817^818^819^820^^802^832^jArgument.setJSType ( new FunctionType ( registry, jArgumentFnType.getReferenceName (  ) , jArgumentFnType.getSource (  ) ,^[CLASS] TypeInference BooleanOutcomePair  [METHOD] updateTypeOfThisOnClosure [RETURN_TYPE] void   Node n FunctionType fnType [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  iArgumentType  iParameterType  jArgumentType  jParameterType  boolean  foundTemplateTypeOfThisParameter  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  iArgument  iParameter  jArgument  jParameter  n  source  FunctionType  fnType  jArgumentFnType  jParameterFnType  BooleanLiteralSet  booleanValues  toBooleanOutcomes  int  i  j  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Variable_Misuse]^jArgument.setJSType ( new FunctionType ( registry, jParameterFnType.getReferenceName (  ) , jArgumentFnType.getSource (  ) ,^817^818^819^820^^802^832^jArgument.setJSType ( new FunctionType ( registry, jArgumentFnType.getReferenceName (  ) , jArgumentFnType.getSource (  ) ,^[CLASS] TypeInference BooleanOutcomePair  [METHOD] updateTypeOfThisOnClosure [RETURN_TYPE] void   Node n FunctionType fnType [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  iArgumentType  iParameterType  jArgumentType  jParameterType  boolean  foundTemplateTypeOfThisParameter  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  iArgument  iParameter  jArgument  jParameter  n  source  FunctionType  fnType  jArgumentFnType  jParameterFnType  BooleanLiteralSet  booleanValues  toBooleanOutcomes  int  i  j  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Argument_Swapping]^jArgument.setJSType ( new FunctionType ( jArgumentFnType, registry.getReferenceName (  ) , jArgumentFnType.getSource (  ) ,^817^818^819^820^^802^832^jArgument.setJSType ( new FunctionType ( registry, jArgumentFnType.getReferenceName (  ) , jArgumentFnType.getSource (  ) ,^[CLASS] TypeInference BooleanOutcomePair  [METHOD] updateTypeOfThisOnClosure [RETURN_TYPE] void   Node n FunctionType fnType [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  iArgumentType  iParameterType  jArgumentType  jParameterType  boolean  foundTemplateTypeOfThisParameter  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  iArgument  iParameter  jArgument  jParameter  n  source  FunctionType  fnType  jArgumentFnType  jParameterFnType  BooleanLiteralSet  booleanValues  toBooleanOutcomes  int  i  j  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Variable_Misuse]^registry, jParameterFnType.getReferenceName (  ) , jArgumentFnType.getSource (  ) , jArgumentFnType.getParametersNode (  ) , jArgumentFnType.getReturnType (  ) ,^819^820^821^822^^804^834^registry, jArgumentFnType.getReferenceName (  ) , jArgumentFnType.getSource (  ) , jArgumentFnType.getParametersNode (  ) , jArgumentFnType.getReturnType (  ) ,^[CLASS] TypeInference BooleanOutcomePair  [METHOD] updateTypeOfThisOnClosure [RETURN_TYPE] void   Node n FunctionType fnType [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  iArgumentType  iParameterType  jArgumentType  jParameterType  boolean  foundTemplateTypeOfThisParameter  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  iArgument  iParameter  jArgument  jParameter  n  source  FunctionType  fnType  jArgumentFnType  jParameterFnType  BooleanLiteralSet  booleanValues  toBooleanOutcomes  int  i  j  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Variable_Misuse]^jArgumentFnType.getSource (  ) , jParameterFnType.getParametersNode (  ) , jArgumentFnType.getReturnType (  ) , ( ObjectType )  iArgumentType )  ) ;^820^821^822^823^^805^835^jArgumentFnType.getSource (  ) , jArgumentFnType.getParametersNode (  ) , jArgumentFnType.getReturnType (  ) , ( ObjectType )  iArgumentType )  ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] updateTypeOfThisOnClosure [RETURN_TYPE] void   Node n FunctionType fnType [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  iArgumentType  iParameterType  jArgumentType  jParameterType  boolean  foundTemplateTypeOfThisParameter  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  iArgument  iParameter  jArgument  jParameter  n  source  FunctionType  fnType  jArgumentFnType  jParameterFnType  BooleanLiteralSet  booleanValues  toBooleanOutcomes  int  i  j  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Variable_Misuse]^jArgumentFnType.getParametersNode (  ) , jParameterFnType.getReturnType (  ) , ( ObjectType )  iArgumentType )  ) ;^821^822^823^^^806^836^jArgumentFnType.getParametersNode (  ) , jArgumentFnType.getReturnType (  ) , ( ObjectType )  iArgumentType )  ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] updateTypeOfThisOnClosure [RETURN_TYPE] void   Node n FunctionType fnType [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  iArgumentType  iParameterType  jArgumentType  jParameterType  boolean  foundTemplateTypeOfThisParameter  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  iArgument  iParameter  jArgument  jParameter  n  source  FunctionType  fnType  jArgumentFnType  jParameterFnType  BooleanLiteralSet  booleanValues  toBooleanOutcomes  int  i  j  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Wrong_Literal]^foundTemplateTypeOfThisParameter = false;^801^^^^^786^816^foundTemplateTypeOfThisParameter = true;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] updateTypeOfThisOnClosure [RETURN_TYPE] void   Node n FunctionType fnType [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  iArgumentType  iParameterType  jArgumentType  jParameterType  boolean  foundTemplateTypeOfThisParameter  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  iArgument  iParameter  jArgument  jParameter  n  source  FunctionType  fnType  jArgumentFnType  jParameterFnType  BooleanLiteralSet  booleanValues  toBooleanOutcomes  int  i  j  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Variable_Misuse]^Node jArgument = source.getChildAtIndex ( j + 1 ) ;^807^^^^^792^822^Node jArgument = n.getChildAtIndex ( j + 1 ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] updateTypeOfThisOnClosure [RETURN_TYPE] void   Node n FunctionType fnType [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  iArgumentType  iParameterType  jArgumentType  jParameterType  boolean  foundTemplateTypeOfThisParameter  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  iArgument  iParameter  jArgument  jParameter  n  source  FunctionType  fnType  jArgumentFnType  jParameterFnType  BooleanLiteralSet  booleanValues  toBooleanOutcomes  int  i  j  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Variable_Misuse]^Node iArgument = n.getChildAtIndex ( j + 1 ) ;^807^^^^^792^822^Node jArgument = n.getChildAtIndex ( j + 1 ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] updateTypeOfThisOnClosure [RETURN_TYPE] void   Node n FunctionType fnType [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  iArgumentType  iParameterType  jArgumentType  jParameterType  boolean  foundTemplateTypeOfThisParameter  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  iArgument  iParameter  jArgument  jParameter  n  source  FunctionType  fnType  jArgumentFnType  jParameterFnType  BooleanLiteralSet  booleanValues  toBooleanOutcomes  int  i  j  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Argument_Swapping]^Node nArgument = j.getChildAtIndex ( j + 1 ) ;^807^^^^^792^822^Node jArgument = n.getChildAtIndex ( j + 1 ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] updateTypeOfThisOnClosure [RETURN_TYPE] void   Node n FunctionType fnType [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  iArgumentType  iParameterType  jArgumentType  jParameterType  boolean  foundTemplateTypeOfThisParameter  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  iArgument  iParameter  jArgument  jParameter  n  source  FunctionType  fnType  jArgumentFnType  jParameterFnType  BooleanLiteralSet  booleanValues  toBooleanOutcomes  int  i  j  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Wrong_Operator]^Node jArgument = n.getChildAtIndex ( j  <<  1 ) ;^807^^^^^792^822^Node jArgument = n.getChildAtIndex ( j + 1 ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] updateTypeOfThisOnClosure [RETURN_TYPE] void   Node n FunctionType fnType [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  iArgumentType  iParameterType  jArgumentType  jParameterType  boolean  foundTemplateTypeOfThisParameter  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  iArgument  iParameter  jArgument  jParameter  n  source  FunctionType  fnType  jArgumentFnType  jParameterFnType  BooleanLiteralSet  booleanValues  toBooleanOutcomes  int  i  j  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Wrong_Literal]^Node jArgument = n.getChildAtIndex ( j + i ) ;^807^^^^^792^822^Node jArgument = n.getChildAtIndex ( j + 1 ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] updateTypeOfThisOnClosure [RETURN_TYPE] void   Node n FunctionType fnType [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  iArgumentType  iParameterType  jArgumentType  jParameterType  boolean  foundTemplateTypeOfThisParameter  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  iArgument  iParameter  jArgument  jParameter  n  source  FunctionType  fnType  jArgumentFnType  jParameterFnType  BooleanLiteralSet  booleanValues  toBooleanOutcomes  int  i  j  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Variable_Misuse]^JSType nType = getJSType ( jArgument ) ;^808^^^^^793^823^JSType jArgumentType = getJSType ( jArgument ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] updateTypeOfThisOnClosure [RETURN_TYPE] void   Node n FunctionType fnType [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  iArgumentType  iParameterType  jArgumentType  jParameterType  boolean  foundTemplateTypeOfThisParameter  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  iArgument  iParameter  jArgument  jParameter  n  source  FunctionType  fnType  jArgumentFnType  jParameterFnType  BooleanLiteralSet  booleanValues  toBooleanOutcomes  int  i  j  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Wrong_Operator]^Node jArgument = n.getChildAtIndex ( j  >>  1 ) ;^807^^^^^792^822^Node jArgument = n.getChildAtIndex ( j + 1 ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] updateTypeOfThisOnClosure [RETURN_TYPE] void   Node n FunctionType fnType [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  iArgumentType  iParameterType  jArgumentType  jParameterType  boolean  foundTemplateTypeOfThisParameter  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  iArgument  iParameter  jArgument  jParameter  n  source  FunctionType  fnType  jArgumentFnType  jParameterFnType  BooleanLiteralSet  booleanValues  toBooleanOutcomes  int  i  j  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Wrong_Literal]^Node jArgument = n.getChildAtIndex ( j +  ) ;^807^^^^^792^822^Node jArgument = n.getChildAtIndex ( j + 1 ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] updateTypeOfThisOnClosure [RETURN_TYPE] void   Node n FunctionType fnType [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  iArgumentType  iParameterType  jArgumentType  jParameterType  boolean  foundTemplateTypeOfThisParameter  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  iArgument  iParameter  jArgument  jParameter  n  source  FunctionType  fnType  jArgumentFnType  jParameterFnType  BooleanLiteralSet  booleanValues  toBooleanOutcomes  int  i  j  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Variable_Misuse]^if  ( source.getType (  )  == Token.FUNCTION && jArgumentType instanceof FunctionType )  {^809^810^^^^794^824^if  ( jArgument.getType (  )  == Token.FUNCTION && jArgumentType instanceof FunctionType )  {^[CLASS] TypeInference BooleanOutcomePair  [METHOD] updateTypeOfThisOnClosure [RETURN_TYPE] void   Node n FunctionType fnType [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  iArgumentType  iParameterType  jArgumentType  jParameterType  boolean  foundTemplateTypeOfThisParameter  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  iArgument  iParameter  jArgument  jParameter  n  source  FunctionType  fnType  jArgumentFnType  jParameterFnType  BooleanLiteralSet  booleanValues  toBooleanOutcomes  int  i  j  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Variable_Misuse]^jArgument.setJSType ( new FunctionType ( registry, sourceFnType.getReferenceName (  ) , jArgumentFnType.getSource (  ) ,^817^818^819^820^^802^832^jArgument.setJSType ( new FunctionType ( registry, jArgumentFnType.getReferenceName (  ) , jArgumentFnType.getSource (  ) ,^[CLASS] TypeInference BooleanOutcomePair  [METHOD] updateTypeOfThisOnClosure [RETURN_TYPE] void   Node n FunctionType fnType [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  iArgumentType  iParameterType  jArgumentType  jParameterType  boolean  foundTemplateTypeOfThisParameter  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  iArgument  iParameter  jArgument  jParameter  n  source  FunctionType  fnType  jArgumentFnType  jParameterFnType  BooleanLiteralSet  booleanValues  toBooleanOutcomes  int  i  j  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Wrong_Operator]^if  ( j  >=  1 >= n.getChildCount (  )  )  {^803^^^^^788^818^if  ( j + 1 >= n.getChildCount (  )  )  {^[CLASS] TypeInference BooleanOutcomePair  [METHOD] updateTypeOfThisOnClosure [RETURN_TYPE] void   Node n FunctionType fnType [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  iArgumentType  iParameterType  jArgumentType  jParameterType  boolean  foundTemplateTypeOfThisParameter  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  iArgument  iParameter  jArgument  jParameter  n  source  FunctionType  fnType  jArgumentFnType  jParameterFnType  BooleanLiteralSet  booleanValues  toBooleanOutcomes  int  i  j  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Wrong_Literal]^if  ( j + i >= n.getChildCount (  )  )  {^803^^^^^788^818^if  ( j + 1 >= n.getChildCount (  )  )  {^[CLASS] TypeInference BooleanOutcomePair  [METHOD] updateTypeOfThisOnClosure [RETURN_TYPE] void   Node n FunctionType fnType [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  iArgumentType  iParameterType  jArgumentType  jParameterType  boolean  foundTemplateTypeOfThisParameter  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  iArgument  iParameter  jArgument  jParameter  n  source  FunctionType  fnType  jArgumentFnType  jParameterFnType  BooleanLiteralSet  booleanValues  toBooleanOutcomes  int  i  j  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Argument_Swapping]^if  ( jArgumentType.getType (  )  == Token.FUNCTION && jArgument instanceof FunctionType )  {^809^810^^^^794^824^if  ( jArgument.getType (  )  == Token.FUNCTION && jArgumentType instanceof FunctionType )  {^[CLASS] TypeInference BooleanOutcomePair  [METHOD] updateTypeOfThisOnClosure [RETURN_TYPE] void   Node n FunctionType fnType [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  iArgumentType  iParameterType  jArgumentType  jParameterType  boolean  foundTemplateTypeOfThisParameter  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  iArgument  iParameter  jArgument  jParameter  n  source  FunctionType  fnType  jArgumentFnType  jParameterFnType  BooleanLiteralSet  booleanValues  toBooleanOutcomes  int  i  j  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Wrong_Operator]^if  ( jArgument.getType (  )  != Token.FUNCTION && jArgumentType instanceof FunctionType )  {^809^810^^^^794^824^if  ( jArgument.getType (  )  == Token.FUNCTION && jArgumentType instanceof FunctionType )  {^[CLASS] TypeInference BooleanOutcomePair  [METHOD] updateTypeOfThisOnClosure [RETURN_TYPE] void   Node n FunctionType fnType [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  iArgumentType  iParameterType  jArgumentType  jParameterType  boolean  foundTemplateTypeOfThisParameter  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  iArgument  iParameter  jArgument  jParameter  n  source  FunctionType  fnType  jArgumentFnType  jParameterFnType  BooleanLiteralSet  booleanValues  toBooleanOutcomes  int  i  j  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Wrong_Operator]^if  ( jArgument.getType (  )  == Token.FUNCTION && jArgumentType  <<  FunctionType )  {^809^810^^^^794^824^if  ( jArgument.getType (  )  == Token.FUNCTION && jArgumentType instanceof FunctionType )  {^[CLASS] TypeInference BooleanOutcomePair  [METHOD] updateTypeOfThisOnClosure [RETURN_TYPE] void   Node n FunctionType fnType [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  iArgumentType  iParameterType  jArgumentType  jParameterType  boolean  foundTemplateTypeOfThisParameter  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  iArgument  iParameter  jArgument  jParameter  n  source  FunctionType  fnType  jArgumentFnType  jParameterFnType  BooleanLiteralSet  booleanValues  toBooleanOutcomes  int  i  j  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Argument_Swapping]^jArgument.setJSType ( new FunctionType ( jArgument, registryFnType.getReferenceName (  ) , jArgumentFnType.getSource (  ) ,^817^818^819^820^^809^825^jArgument.setJSType ( new FunctionType ( registry, jArgumentFnType.getReferenceName (  ) , jArgumentFnType.getSource (  ) ,^[CLASS] TypeInference BooleanOutcomePair  [METHOD] updateTypeOfThisOnClosure [RETURN_TYPE] void   Node n FunctionType fnType [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  iArgumentType  iParameterType  jArgumentType  jParameterType  boolean  foundTemplateTypeOfThisParameter  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  iArgument  iParameter  jArgument  jParameter  n  source  FunctionType  fnType  jArgumentFnType  jParameterFnType  BooleanLiteralSet  booleanValues  toBooleanOutcomes  int  i  j  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Variable_Misuse]^if  ( sourceFnType.getTypeOfThis (  ) .isUnknownType (  )  )  {^814^^^^^799^829^if  ( jArgumentFnType.getTypeOfThis (  ) .isUnknownType (  )  )  {^[CLASS] TypeInference BooleanOutcomePair  [METHOD] updateTypeOfThisOnClosure [RETURN_TYPE] void   Node n FunctionType fnType [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  iArgumentType  iParameterType  jArgumentType  jParameterType  boolean  foundTemplateTypeOfThisParameter  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  iArgument  iParameter  jArgument  jParameter  n  source  FunctionType  fnType  jArgumentFnType  jParameterFnType  BooleanLiteralSet  booleanValues  toBooleanOutcomes  int  i  j  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Wrong_Operator]^Node jArgument = n.getChildAtIndex ( j  <  1 ) ;^807^^^^^792^822^Node jArgument = n.getChildAtIndex ( j + 1 ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] updateTypeOfThisOnClosure [RETURN_TYPE] void   Node n FunctionType fnType [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  iArgumentType  iParameterType  jArgumentType  jParameterType  boolean  foundTemplateTypeOfThisParameter  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  iArgument  iParameter  jArgument  jParameter  n  source  FunctionType  fnType  jArgumentFnType  jParameterFnType  BooleanLiteralSet  booleanValues  toBooleanOutcomes  int  i  j  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Wrong_Literal]^Node jArgument = n.getChildAtIndex ( j  ) ;^807^^^^^792^822^Node jArgument = n.getChildAtIndex ( j + 1 ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] updateTypeOfThisOnClosure [RETURN_TYPE] void   Node n FunctionType fnType [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  iArgumentType  iParameterType  jArgumentType  jParameterType  boolean  foundTemplateTypeOfThisParameter  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  iArgument  iParameter  jArgument  jParameter  n  source  FunctionType  fnType  jArgumentFnType  jParameterFnType  BooleanLiteralSet  booleanValues  toBooleanOutcomes  int  i  j  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Variable_Misuse]^JSType sourceType = getJSType ( jArgument ) ;^808^^^^^793^823^JSType jArgumentType = getJSType ( jArgument ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] updateTypeOfThisOnClosure [RETURN_TYPE] void   Node n FunctionType fnType [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  iArgumentType  iParameterType  jArgumentType  jParameterType  boolean  foundTemplateTypeOfThisParameter  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  iArgument  iParameter  jArgument  jParameter  n  source  FunctionType  fnType  jArgumentFnType  jParameterFnType  BooleanLiteralSet  booleanValues  toBooleanOutcomes  int  i  j  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Argument_Swapping]^if  ( iParameterType.getTypeOfThis (  ) .equals ( jParameterFnType )  )  {^800^^^^^785^815^if  ( jParameterFnType.getTypeOfThis (  ) .equals ( iParameterType )  )  {^[CLASS] TypeInference BooleanOutcomePair  [METHOD] updateTypeOfThisOnClosure [RETURN_TYPE] void   Node n FunctionType fnType [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  iArgumentType  iParameterType  jArgumentType  jParameterType  boolean  foundTemplateTypeOfThisParameter  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  iArgument  iParameter  jArgument  jParameter  n  source  FunctionType  fnType  jArgumentFnType  jParameterFnType  BooleanLiteralSet  booleanValues  toBooleanOutcomes  int  i  j  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Wrong_Operator]^Node jArgument = n.getChildAtIndex ( j  ||  1 ) ;^807^^^^^792^822^Node jArgument = n.getChildAtIndex ( j + 1 ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] updateTypeOfThisOnClosure [RETURN_TYPE] void   Node n FunctionType fnType [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  iArgumentType  iParameterType  jArgumentType  jParameterType  boolean  foundTemplateTypeOfThisParameter  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  iArgument  iParameter  jArgument  jParameter  n  source  FunctionType  fnType  jArgumentFnType  jParameterFnType  BooleanLiteralSet  booleanValues  toBooleanOutcomes  int  i  j  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Wrong_Literal]^Node jArgument = n.getChildAtIndex ( j + j ) ;^807^^^^^792^822^Node jArgument = n.getChildAtIndex ( j + 1 ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] updateTypeOfThisOnClosure [RETURN_TYPE] void   Node n FunctionType fnType [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  iArgumentType  iParameterType  jArgumentType  jParameterType  boolean  foundTemplateTypeOfThisParameter  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  iArgument  iParameter  jArgument  jParameter  n  source  FunctionType  fnType  jArgumentFnType  jParameterFnType  BooleanLiteralSet  booleanValues  toBooleanOutcomes  int  i  j  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Argument_Swapping]^jArgument.setJSType ( new FunctionType ( jArgument, registryFnType.getReferenceName (  ) , jArgumentFnType.getSource (  ) ,^817^818^819^820^^802^832^jArgument.setJSType ( new FunctionType ( registry, jArgumentFnType.getReferenceName (  ) , jArgumentFnType.getSource (  ) ,^[CLASS] TypeInference BooleanOutcomePair  [METHOD] updateTypeOfThisOnClosure [RETURN_TYPE] void   Node n FunctionType fnType [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  iArgumentType  iParameterType  jArgumentType  jParameterType  boolean  foundTemplateTypeOfThisParameter  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  iArgument  iParameter  jArgument  jParameter  n  source  FunctionType  fnType  jArgumentFnType  jParameterFnType  BooleanLiteralSet  booleanValues  toBooleanOutcomes  int  i  j  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Argument_Swapping]^jArgument.setJSType ( new FunctionType ( registry, jArgument.getReferenceName (  ) , jArgumentFnTypeFnType.getSource (  ) ,^817^818^819^820^^802^832^jArgument.setJSType ( new FunctionType ( registry, jArgumentFnType.getReferenceName (  ) , jArgumentFnType.getSource (  ) ,^[CLASS] TypeInference BooleanOutcomePair  [METHOD] updateTypeOfThisOnClosure [RETURN_TYPE] void   Node n FunctionType fnType [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  iArgumentType  iParameterType  jArgumentType  jParameterType  boolean  foundTemplateTypeOfThisParameter  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  iArgument  iParameter  jArgument  jParameter  n  source  FunctionType  fnType  jArgumentFnType  jParameterFnType  BooleanLiteralSet  booleanValues  toBooleanOutcomes  int  i  j  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Variable_Misuse]^if  ( j + 1 >= jParameter.getChildCount (  )  )  {^803^^^^^788^818^if  ( j + 1 >= n.getChildCount (  )  )  {^[CLASS] TypeInference BooleanOutcomePair  [METHOD] updateTypeOfThisOnClosure [RETURN_TYPE] void   Node n FunctionType fnType [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  iArgumentType  iParameterType  jArgumentType  jParameterType  boolean  foundTemplateTypeOfThisParameter  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  iArgument  iParameter  jArgument  jParameter  n  source  FunctionType  fnType  jArgumentFnType  jParameterFnType  BooleanLiteralSet  booleanValues  toBooleanOutcomes  int  i  j  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Wrong_Operator]^if  ( jArgument.getType (  )  <= Token.FUNCTION && jArgumentType instanceof FunctionType )  {^809^810^^^^794^824^if  ( jArgument.getType (  )  == Token.FUNCTION && jArgumentType instanceof FunctionType )  {^[CLASS] TypeInference BooleanOutcomePair  [METHOD] updateTypeOfThisOnClosure [RETURN_TYPE] void   Node n FunctionType fnType [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  iArgumentType  iParameterType  jArgumentType  jParameterType  boolean  foundTemplateTypeOfThisParameter  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  iArgument  iParameter  jArgument  jParameter  n  source  FunctionType  fnType  jArgumentFnType  jParameterFnType  BooleanLiteralSet  booleanValues  toBooleanOutcomes  int  i  j  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Wrong_Operator]^if  ( jArgument.getType (  )  == Token.FUNCTION && jArgumentType  !=  FunctionType )  {^809^810^^^^794^824^if  ( jArgument.getType (  )  == Token.FUNCTION && jArgumentType instanceof FunctionType )  {^[CLASS] TypeInference BooleanOutcomePair  [METHOD] updateTypeOfThisOnClosure [RETURN_TYPE] void   Node n FunctionType fnType [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  iArgumentType  iParameterType  jArgumentType  jParameterType  boolean  foundTemplateTypeOfThisParameter  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  iArgument  iParameter  jArgument  jParameter  n  source  FunctionType  fnType  jArgumentFnType  jParameterFnType  BooleanLiteralSet  booleanValues  toBooleanOutcomes  int  i  j  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Argument_Swapping]^if  ( jArgument.getTypeOfThis (  ) .isUnknownType (  )  )  {^814^^^^^809^825^if  ( jArgumentFnType.getTypeOfThis (  ) .isUnknownType (  )  )  {^[CLASS] TypeInference BooleanOutcomePair  [METHOD] updateTypeOfThisOnClosure [RETURN_TYPE] void   Node n FunctionType fnType [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  iArgumentType  iParameterType  jArgumentType  jParameterType  boolean  foundTemplateTypeOfThisParameter  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  iArgument  iParameter  jArgument  jParameter  n  source  FunctionType  fnType  jArgumentFnType  jParameterFnType  BooleanLiteralSet  booleanValues  toBooleanOutcomes  int  i  j  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Variable_Misuse]^if  ( nFnType.getTypeOfThis (  ) .isUnknownType (  )  )  {^814^^^^^799^829^if  ( jArgumentFnType.getTypeOfThis (  ) .isUnknownType (  )  )  {^[CLASS] TypeInference BooleanOutcomePair  [METHOD] updateTypeOfThisOnClosure [RETURN_TYPE] void   Node n FunctionType fnType [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  iArgumentType  iParameterType  jArgumentType  jParameterType  boolean  foundTemplateTypeOfThisParameter  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  iArgument  iParameter  jArgument  jParameter  n  source  FunctionType  fnType  jArgumentFnType  jParameterFnType  BooleanLiteralSet  booleanValues  toBooleanOutcomes  int  i  j  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Wrong_Operator]^if  ( j  <  1 >= n.getChildCount (  )  )  {^803^^^^^788^818^if  ( j + 1 >= n.getChildCount (  )  )  {^[CLASS] TypeInference BooleanOutcomePair  [METHOD] updateTypeOfThisOnClosure [RETURN_TYPE] void   Node n FunctionType fnType [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  iArgumentType  iParameterType  jArgumentType  jParameterType  boolean  foundTemplateTypeOfThisParameter  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  iArgument  iParameter  jArgument  jParameter  n  source  FunctionType  fnType  jArgumentFnType  jParameterFnType  BooleanLiteralSet  booleanValues  toBooleanOutcomes  int  i  j  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Variable_Misuse]^if  ( jArgument.getType (  )  == Token.1 && jArgumentType instanceof FunctionType )  {^809^810^^^^794^824^if  ( jArgument.getType (  )  == Token.FUNCTION && jArgumentType instanceof FunctionType )  {^[CLASS] TypeInference BooleanOutcomePair  [METHOD] updateTypeOfThisOnClosure [RETURN_TYPE] void   Node n FunctionType fnType [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  iArgumentType  iParameterType  jArgumentType  jParameterType  boolean  foundTemplateTypeOfThisParameter  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  iArgument  iParameter  jArgument  jParameter  n  source  FunctionType  fnType  jArgumentFnType  jParameterFnType  BooleanLiteralSet  booleanValues  toBooleanOutcomes  int  i  j  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Wrong_Operator]^if  ( jArgument.getType (  )  == Token.FUNCTION && jArgumentType  ==  FunctionType )  {^809^810^^^^794^824^if  ( jArgument.getType (  )  == Token.FUNCTION && jArgumentType instanceof FunctionType )  {^[CLASS] TypeInference BooleanOutcomePair  [METHOD] updateTypeOfThisOnClosure [RETURN_TYPE] void   Node n FunctionType fnType [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  iArgumentType  iParameterType  jArgumentType  jParameterType  boolean  foundTemplateTypeOfThisParameter  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  iArgument  iParameter  jArgument  jParameter  n  source  FunctionType  fnType  jArgumentFnType  jParameterFnType  BooleanLiteralSet  booleanValues  toBooleanOutcomes  int  i  j  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Variable_Misuse]^if  ( nFnType.getTypeOfThis (  ) .isUnknownType (  )  )  {^814^^^^^809^825^if  ( jArgumentFnType.getTypeOfThis (  ) .isUnknownType (  )  )  {^[CLASS] TypeInference BooleanOutcomePair  [METHOD] updateTypeOfThisOnClosure [RETURN_TYPE] void   Node n FunctionType fnType [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  iArgumentType  iParameterType  jArgumentType  jParameterType  boolean  foundTemplateTypeOfThisParameter  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  iArgument  iParameter  jArgument  jParameter  n  source  FunctionType  fnType  jArgumentFnType  jParameterFnType  BooleanLiteralSet  booleanValues  toBooleanOutcomes  int  i  j  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Argument_Swapping]^jArgument.setJSType ( new FunctionType ( registry, jArgumentFnTypeFnType.getReferenceName (  ) , jArgument.getSource (  ) ,^817^818^819^820^^809^825^jArgument.setJSType ( new FunctionType ( registry, jArgumentFnType.getReferenceName (  ) , jArgumentFnType.getSource (  ) ,^[CLASS] TypeInference BooleanOutcomePair  [METHOD] updateTypeOfThisOnClosure [RETURN_TYPE] void   Node n FunctionType fnType [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  iArgumentType  iParameterType  jArgumentType  jParameterType  boolean  foundTemplateTypeOfThisParameter  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  iArgument  iParameter  jArgument  jParameter  n  source  FunctionType  fnType  jArgumentFnType  jParameterFnType  BooleanLiteralSet  booleanValues  toBooleanOutcomes  int  i  j  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Argument_Swapping]^jArgument.setJSType ( new FunctionType ( registry, jArgumentFnTypeFnType.getReferenceName (  ) , jArgument.getSource (  ) ,^817^818^819^820^^802^832^jArgument.setJSType ( new FunctionType ( registry, jArgumentFnType.getReferenceName (  ) , jArgumentFnType.getSource (  ) ,^[CLASS] TypeInference BooleanOutcomePair  [METHOD] updateTypeOfThisOnClosure [RETURN_TYPE] void   Node n FunctionType fnType [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  iArgumentType  iParameterType  jArgumentType  jParameterType  boolean  foundTemplateTypeOfThisParameter  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  iArgument  iParameter  jArgument  jParameter  n  source  FunctionType  fnType  jArgumentFnType  jParameterFnType  BooleanLiteralSet  booleanValues  toBooleanOutcomes  int  i  j  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Variable_Misuse]^Node source = jParameterFnType.getSource (  ) ;^834^^^^^819^849^Node source = fnType.getSource (  ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] updateTypeOfThisOnClosure [RETURN_TYPE] void   Node n FunctionType fnType [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  iArgumentType  iParameterType  jArgumentType  jParameterType  boolean  foundTemplateTypeOfThisParameter  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  iArgument  iParameter  jArgument  jParameter  n  source  FunctionType  fnType  jArgumentFnType  jParameterFnType  BooleanLiteralSet  booleanValues  toBooleanOutcomes  int  i  j  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Variable_Misuse]^compiler.report ( JSError.make ( NodeUtil.getSourceName ( n ) , source, TEMPLATE_TYPE_OF_THIS_EXPECTED )  ) ;^835^836^^^^820^850^compiler.report ( JSError.make ( NodeUtil.getSourceName ( source ) , source, TEMPLATE_TYPE_OF_THIS_EXPECTED )  ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] updateTypeOfThisOnClosure [RETURN_TYPE] void   Node n FunctionType fnType [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  iArgumentType  iParameterType  jArgumentType  jParameterType  boolean  foundTemplateTypeOfThisParameter  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  iArgument  iParameter  jArgument  jParameter  n  source  FunctionType  fnType  jArgumentFnType  jParameterFnType  BooleanLiteralSet  booleanValues  toBooleanOutcomes  int  i  j  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Variable_Misuse]^compiler.report ( JSError.make ( NodeUtil.getSourceName ( source ) , source, TEMPLATE_TYPE_NOT_OBJECT_TYPE )  ) ;^835^836^^^^820^850^compiler.report ( JSError.make ( NodeUtil.getSourceName ( source ) , source, TEMPLATE_TYPE_OF_THIS_EXPECTED )  ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] updateTypeOfThisOnClosure [RETURN_TYPE] void   Node n FunctionType fnType [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  iArgumentType  iParameterType  jArgumentType  jParameterType  boolean  foundTemplateTypeOfThisParameter  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  iArgument  iParameter  jArgument  jParameter  n  source  FunctionType  fnType  jArgumentFnType  jParameterFnType  BooleanLiteralSet  booleanValues  toBooleanOutcomes  int  i  j  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Argument_Swapping]^compiler.report ( JSError.make ( NodeUtil.getSourceName ( TEMPLATE_TYPE_OF_THIS_EXPECTED ) , source, source )  ) ;^835^836^^^^820^850^compiler.report ( JSError.make ( NodeUtil.getSourceName ( source ) , source, TEMPLATE_TYPE_OF_THIS_EXPECTED )  ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] updateTypeOfThisOnClosure [RETURN_TYPE] void   Node n FunctionType fnType [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  iArgumentType  iParameterType  jArgumentType  jParameterType  boolean  foundTemplateTypeOfThisParameter  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  iArgument  iParameter  jArgument  jParameter  n  source  FunctionType  fnType  jArgumentFnType  jParameterFnType  BooleanLiteralSet  booleanValues  toBooleanOutcomes  int  i  j  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Variable_Misuse]^iArgumentType = jParameterType.restrictByNotNullOrUndefined (  ) ;^785^^^^^770^800^iArgumentType = iArgumentType.restrictByNotNullOrUndefined (  ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] updateTypeOfThisOnClosure [RETURN_TYPE] void   Node n FunctionType fnType [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  iArgumentType  iParameterType  jArgumentType  jParameterType  boolean  foundTemplateTypeOfThisParameter  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  iArgument  iParameter  jArgument  jParameter  n  source  FunctionType  fnType  jArgumentFnType  jParameterFnType  BooleanLiteralSet  booleanValues  toBooleanOutcomes  int  i  j  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Wrong_Literal]^boolean foundTemplateTypeOfThisParameter = true;^794^^^^^779^809^boolean foundTemplateTypeOfThisParameter = false;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] updateTypeOfThisOnClosure [RETURN_TYPE] void   Node n FunctionType fnType [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  iArgumentType  iParameterType  jArgumentType  jParameterType  boolean  foundTemplateTypeOfThisParameter  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  iArgument  iParameter  jArgument  jParameter  n  source  FunctionType  fnType  jArgumentFnType  jParameterFnType  BooleanLiteralSet  booleanValues  toBooleanOutcomes  int  i  j  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Wrong_Literal]^int j = j;^795^^^^^780^810^int j = 0;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] updateTypeOfThisOnClosure [RETURN_TYPE] void   Node n FunctionType fnType [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  iArgumentType  iParameterType  jArgumentType  jParameterType  boolean  foundTemplateTypeOfThisParameter  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  iArgument  iParameter  jArgument  jParameter  n  source  FunctionType  fnType  jArgumentFnType  jParameterFnType  BooleanLiteralSet  booleanValues  toBooleanOutcomes  int  i  j  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Variable_Misuse]^JSType nType = getJSType ( jParameter ) ;^797^^^^^782^812^JSType jParameterType = getJSType ( jParameter ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] updateTypeOfThisOnClosure [RETURN_TYPE] void   Node n FunctionType fnType [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  iArgumentType  iParameterType  jArgumentType  jParameterType  boolean  foundTemplateTypeOfThisParameter  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  iArgument  iParameter  jArgument  jParameter  n  source  FunctionType  fnType  jArgumentFnType  jParameterFnType  BooleanLiteralSet  booleanValues  toBooleanOutcomes  int  i  j  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Wrong_Operator]^Node jArgument = n.getChildAtIndex ( j  >  1 ) ;^807^^^^^792^822^Node jArgument = n.getChildAtIndex ( j + 1 ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] updateTypeOfThisOnClosure [RETURN_TYPE] void   Node n FunctionType fnType [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  iArgumentType  iParameterType  jArgumentType  jParameterType  boolean  foundTemplateTypeOfThisParameter  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  iArgument  iParameter  jArgument  jParameter  n  source  FunctionType  fnType  jArgumentFnType  jParameterFnType  BooleanLiteralSet  booleanValues  toBooleanOutcomes  int  i  j  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Variable_Misuse]^compiler.report ( JSError.make ( NodeUtil.getSourceName ( n ) , iArgument, TEMPLATE_TYPE_NOT_OBJECT_TYPE )  ) ;^787^788^789^^^772^802^compiler.report ( JSError.make ( NodeUtil.getSourceName ( iArgument ) , iArgument, TEMPLATE_TYPE_NOT_OBJECT_TYPE )  ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] updateTypeOfThisOnClosure [RETURN_TYPE] void   Node n FunctionType fnType [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  iArgumentType  iParameterType  jArgumentType  jParameterType  boolean  foundTemplateTypeOfThisParameter  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  iArgument  iParameter  jArgument  jParameter  n  source  FunctionType  fnType  jArgumentFnType  jParameterFnType  BooleanLiteralSet  booleanValues  toBooleanOutcomes  int  i  j  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Variable_Misuse]^JSError.make ( NodeUtil.getSourceName ( n ) , iArgument, TEMPLATE_TYPE_NOT_OBJECT_TYPE )  ) ;^788^789^^^^773^803^JSError.make ( NodeUtil.getSourceName ( iArgument ) , iArgument, TEMPLATE_TYPE_NOT_OBJECT_TYPE )  ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] updateTypeOfThisOnClosure [RETURN_TYPE] void   Node n FunctionType fnType [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  iArgumentType  iParameterType  jArgumentType  jParameterType  boolean  foundTemplateTypeOfThisParameter  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  iArgument  iParameter  jArgument  jParameter  n  source  FunctionType  fnType  jArgumentFnType  jParameterFnType  BooleanLiteralSet  booleanValues  toBooleanOutcomes  int  i  j  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Variable_Misuse]^for  ( Node jParameter : jParameterFnType.getParameters (  )  )  {^796^^^^^781^811^for  ( Node jParameter : fnType.getParameters (  )  )  {^[CLASS] TypeInference BooleanOutcomePair  [METHOD] updateTypeOfThisOnClosure [RETURN_TYPE] void   Node n FunctionType fnType [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  iArgumentType  iParameterType  jArgumentType  jParameterType  boolean  foundTemplateTypeOfThisParameter  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  iArgument  iParameter  jArgument  jParameter  n  source  FunctionType  fnType  jArgumentFnType  jParameterFnType  BooleanLiteralSet  booleanValues  toBooleanOutcomes  int  i  j  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Variable_Misuse]^JSType sourceType = getJSType ( jParameter ) ;^797^^^^^782^812^JSType jParameterType = getJSType ( jParameter ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] updateTypeOfThisOnClosure [RETURN_TYPE] void   Node n FunctionType fnType [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  iArgumentType  iParameterType  jArgumentType  jParameterType  boolean  foundTemplateTypeOfThisParameter  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  iArgument  iParameter  jArgument  jParameter  n  source  FunctionType  fnType  jArgumentFnType  jParameterFnType  BooleanLiteralSet  booleanValues  toBooleanOutcomes  int  i  j  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Wrong_Operator]^Node jArgument = n.getChildAtIndex ( j  <=  1 ) ;^807^^^^^792^822^Node jArgument = n.getChildAtIndex ( j + 1 ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] updateTypeOfThisOnClosure [RETURN_TYPE] void   Node n FunctionType fnType [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  iArgumentType  iParameterType  jArgumentType  jParameterType  boolean  foundTemplateTypeOfThisParameter  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  iArgument  iParameter  jArgument  jParameter  n  source  FunctionType  fnType  jArgumentFnType  jParameterFnType  BooleanLiteralSet  booleanValues  toBooleanOutcomes  int  i  j  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Argument_Swapping]^if  ( jParameterTypeParameterType instanceof FunctionType )  {^798^^^^^783^813^if  ( jParameterType instanceof FunctionType )  {^[CLASS] TypeInference BooleanOutcomePair  [METHOD] updateTypeOfThisOnClosure [RETURN_TYPE] void   Node n FunctionType fnType [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  iArgumentType  iParameterType  jArgumentType  jParameterType  boolean  foundTemplateTypeOfThisParameter  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  iArgument  iParameter  jArgument  jParameter  n  source  FunctionType  fnType  jArgumentFnType  jParameterFnType  BooleanLiteralSet  booleanValues  toBooleanOutcomes  int  i  j  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Wrong_Operator]^if  ( jParameterType  &  FunctionType )  {^798^^^^^783^813^if  ( jParameterType instanceof FunctionType )  {^[CLASS] TypeInference BooleanOutcomePair  [METHOD] updateTypeOfThisOnClosure [RETURN_TYPE] void   Node n FunctionType fnType [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  iArgumentType  iParameterType  jArgumentType  jParameterType  boolean  foundTemplateTypeOfThisParameter  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  iArgument  iParameter  jArgument  jParameter  n  source  FunctionType  fnType  jArgumentFnType  jParameterFnType  BooleanLiteralSet  booleanValues  toBooleanOutcomes  int  i  j  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Wrong_Operator]^if  ( j + 1 < n.getChildCount (  )  )  {^803^^^^^788^818^if  ( j + 1 >= n.getChildCount (  )  )  {^[CLASS] TypeInference BooleanOutcomePair  [METHOD] updateTypeOfThisOnClosure [RETURN_TYPE] void   Node n FunctionType fnType [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  iArgumentType  iParameterType  jArgumentType  jParameterType  boolean  foundTemplateTypeOfThisParameter  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  iArgument  iParameter  jArgument  jParameter  n  source  FunctionType  fnType  jArgumentFnType  jParameterFnType  BooleanLiteralSet  booleanValues  toBooleanOutcomes  int  i  j  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Wrong_Operator]^if  ( j  ||  1 >= n.getChildCount (  )  )  {^803^^^^^788^818^if  ( j + 1 >= n.getChildCount (  )  )  {^[CLASS] TypeInference BooleanOutcomePair  [METHOD] updateTypeOfThisOnClosure [RETURN_TYPE] void   Node n FunctionType fnType [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  iArgumentType  iParameterType  jArgumentType  jParameterType  boolean  foundTemplateTypeOfThisParameter  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  iArgument  iParameter  jArgument  jParameter  n  source  FunctionType  fnType  jArgumentFnType  jParameterFnType  BooleanLiteralSet  booleanValues  toBooleanOutcomes  int  i  j  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Wrong_Literal]^if  ( j + j >= n.getChildCount (  )  )  {^803^^^^^788^818^if  ( j + 1 >= n.getChildCount (  )  )  {^[CLASS] TypeInference BooleanOutcomePair  [METHOD] updateTypeOfThisOnClosure [RETURN_TYPE] void   Node n FunctionType fnType [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  iArgumentType  iParameterType  jArgumentType  jParameterType  boolean  foundTemplateTypeOfThisParameter  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  iArgument  iParameter  jArgument  jParameter  n  source  FunctionType  fnType  jArgumentFnType  jParameterFnType  BooleanLiteralSet  booleanValues  toBooleanOutcomes  int  i  j  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Wrong_Operator]^if  ( jArgument.getType (  )  == Token.FUNCTION && jArgumentType  >>  FunctionType )  {^809^810^^^^794^824^if  ( jArgument.getType (  )  == Token.FUNCTION && jArgumentType instanceof FunctionType )  {^[CLASS] TypeInference BooleanOutcomePair  [METHOD] updateTypeOfThisOnClosure [RETURN_TYPE] void   Node n FunctionType fnType [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  iArgumentType  iParameterType  jArgumentType  jParameterType  boolean  foundTemplateTypeOfThisParameter  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  iArgument  iParameter  jArgument  jParameter  n  source  FunctionType  fnType  jArgumentFnType  jParameterFnType  BooleanLiteralSet  booleanValues  toBooleanOutcomes  int  i  j  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Variable_Misuse]^jArgument.setJSType ( new FunctionType ( registry, nFnType.getReferenceName (  ) , jArgumentFnType.getSource (  ) ,^817^818^819^820^^809^825^jArgument.setJSType ( new FunctionType ( registry, jArgumentFnType.getReferenceName (  ) , jArgumentFnType.getSource (  ) ,^[CLASS] TypeInference BooleanOutcomePair  [METHOD] updateTypeOfThisOnClosure [RETURN_TYPE] void   Node n FunctionType fnType [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  iArgumentType  iParameterType  jArgumentType  jParameterType  boolean  foundTemplateTypeOfThisParameter  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  iArgument  iParameter  jArgument  jParameter  n  source  FunctionType  fnType  jArgumentFnType  jParameterFnType  BooleanLiteralSet  booleanValues  toBooleanOutcomes  int  i  j  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Wrong_Operator]^Node jArgument = n.getChildAtIndex ( j   instanceof   1 ) ;^807^^^^^792^822^Node jArgument = n.getChildAtIndex ( j + 1 ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] updateTypeOfThisOnClosure [RETURN_TYPE] void   Node n FunctionType fnType [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  iArgumentType  iParameterType  jArgumentType  jParameterType  boolean  foundTemplateTypeOfThisParameter  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  iArgument  iParameter  jArgument  jParameter  n  source  FunctionType  fnType  jArgumentFnType  jParameterFnType  BooleanLiteralSet  booleanValues  toBooleanOutcomes  int  i  j  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Wrong_Operator]^Node jArgument = n.getChildAtIndex ( j  &&  1 ) ;^807^^^^^792^822^Node jArgument = n.getChildAtIndex ( j + 1 ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] updateTypeOfThisOnClosure [RETURN_TYPE] void   Node n FunctionType fnType [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  iArgumentType  iParameterType  jArgumentType  jParameterType  boolean  foundTemplateTypeOfThisParameter  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  iArgument  iParameter  jArgument  jParameter  n  source  FunctionType  fnType  jArgumentFnType  jParameterFnType  BooleanLiteralSet  booleanValues  toBooleanOutcomes  int  i  j  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Wrong_Operator]^if  ( j + 1 == n.getChildCount (  )  )  {^803^^^^^788^818^if  ( j + 1 >= n.getChildCount (  )  )  {^[CLASS] TypeInference BooleanOutcomePair  [METHOD] updateTypeOfThisOnClosure [RETURN_TYPE] void   Node n FunctionType fnType [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  iArgumentType  iParameterType  jArgumentType  jParameterType  boolean  foundTemplateTypeOfThisParameter  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  iArgument  iParameter  jArgument  jParameter  n  source  FunctionType  fnType  jArgumentFnType  jParameterFnType  BooleanLiteralSet  booleanValues  toBooleanOutcomes  int  i  j  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Wrong_Operator]^if  ( j  >>  1 >= n.getChildCount (  )  )  {^803^^^^^788^818^if  ( j + 1 >= n.getChildCount (  )  )  {^[CLASS] TypeInference BooleanOutcomePair  [METHOD] updateTypeOfThisOnClosure [RETURN_TYPE] void   Node n FunctionType fnType [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  iArgumentType  iParameterType  jArgumentType  jParameterType  boolean  foundTemplateTypeOfThisParameter  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  iArgument  iParameter  jArgument  jParameter  n  source  FunctionType  fnType  jArgumentFnType  jParameterFnType  BooleanLiteralSet  booleanValues  toBooleanOutcomes  int  i  j  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Wrong_Operator]^if  ( jArgument.getType (  )  == Token.FUNCTION && jArgumentType  |  FunctionType )  {^809^810^^^^794^824^if  ( jArgument.getType (  )  == Token.FUNCTION && jArgumentType instanceof FunctionType )  {^[CLASS] TypeInference BooleanOutcomePair  [METHOD] updateTypeOfThisOnClosure [RETURN_TYPE] void   Node n FunctionType fnType [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  iArgumentType  iParameterType  jArgumentType  jParameterType  boolean  foundTemplateTypeOfThisParameter  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  iArgument  iParameter  jArgument  jParameter  n  source  FunctionType  fnType  jArgumentFnType  jParameterFnType  BooleanLiteralSet  booleanValues  toBooleanOutcomes  int  i  j  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Argument_Swapping]^if  ( jArgumentFnTypeFnType.getTypeOfThis (  ) .isUnknownType (  )  )  {^814^^^^^809^825^if  ( jArgumentFnType.getTypeOfThis (  ) .isUnknownType (  )  )  {^[CLASS] TypeInference BooleanOutcomePair  [METHOD] updateTypeOfThisOnClosure [RETURN_TYPE] void   Node n FunctionType fnType [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  iArgumentType  iParameterType  jArgumentType  jParameterType  boolean  foundTemplateTypeOfThisParameter  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  iArgument  iParameter  jArgument  jParameter  n  source  FunctionType  fnType  jArgumentFnType  jParameterFnType  BooleanLiteralSet  booleanValues  toBooleanOutcomes  int  i  j  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Wrong_Operator]^if  ( j  <=  1 >= n.getChildCount (  )  )  {^803^^^^^788^818^if  ( j + 1 >= n.getChildCount (  )  )  {^[CLASS] TypeInference BooleanOutcomePair  [METHOD] updateTypeOfThisOnClosure [RETURN_TYPE] void   Node n FunctionType fnType [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  iArgumentType  iParameterType  jArgumentType  jParameterType  boolean  foundTemplateTypeOfThisParameter  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  iArgument  iParameter  jArgument  jParameter  n  source  FunctionType  fnType  jArgumentFnType  jParameterFnType  BooleanLiteralSet  booleanValues  toBooleanOutcomes  int  i  j  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Wrong_Operator]^if  ( jArgument.getType (  )  == Token.FUNCTION && jArgumentType  ^  FunctionType )  {^809^810^^^^794^824^if  ( jArgument.getType (  )  == Token.FUNCTION && jArgumentType instanceof FunctionType )  {^[CLASS] TypeInference BooleanOutcomePair  [METHOD] updateTypeOfThisOnClosure [RETURN_TYPE] void   Node n FunctionType fnType [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  iArgumentType  iParameterType  jArgumentType  jParameterType  boolean  foundTemplateTypeOfThisParameter  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  iArgument  iParameter  jArgument  jParameter  n  source  FunctionType  fnType  jArgumentFnType  jParameterFnType  BooleanLiteralSet  booleanValues  toBooleanOutcomes  int  i  j  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Argument_Swapping]^if  ( jArgument.getTypeOfThis (  ) .isUnknownType (  )  )  {^814^^^^^799^829^if  ( jArgumentFnType.getTypeOfThis (  ) .isUnknownType (  )  )  {^[CLASS] TypeInference BooleanOutcomePair  [METHOD] updateTypeOfThisOnClosure [RETURN_TYPE] void   Node n FunctionType fnType [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  iArgumentType  iParameterType  jArgumentType  jParameterType  boolean  foundTemplateTypeOfThisParameter  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  iArgument  iParameter  jArgument  jParameter  n  source  FunctionType  fnType  jArgumentFnType  jParameterFnType  BooleanLiteralSet  booleanValues  toBooleanOutcomes  int  i  j  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Wrong_Operator]^Node jArgument = n.getChildAtIndex ( j  !=  1 ) ;^807^^^^^792^822^Node jArgument = n.getChildAtIndex ( j + 1 ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] updateTypeOfThisOnClosure [RETURN_TYPE] void   Node n FunctionType fnType [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  iArgumentType  iParameterType  jArgumentType  jParameterType  boolean  foundTemplateTypeOfThisParameter  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  iArgument  iParameter  jArgument  jParameter  n  source  FunctionType  fnType  jArgumentFnType  jParameterFnType  BooleanLiteralSet  booleanValues  toBooleanOutcomes  int  i  j  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Variable_Misuse]^Node jArgument = n.getChildAtIndex ( i + 1 ) ;^782^^^^^767^797^Node iArgument = n.getChildAtIndex ( i + 1 ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] updateTypeOfThisOnClosure [RETURN_TYPE] void   Node n FunctionType fnType [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  iArgumentType  iParameterType  jArgumentType  jParameterType  boolean  foundTemplateTypeOfThisParameter  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  iArgument  iParameter  jArgument  jParameter  n  source  FunctionType  fnType  jArgumentFnType  jParameterFnType  BooleanLiteralSet  booleanValues  toBooleanOutcomes  int  i  j  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Argument_Swapping]^Node nArgument = i.getChildAtIndex ( i + 1 ) ;^782^^^^^767^797^Node iArgument = n.getChildAtIndex ( i + 1 ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] updateTypeOfThisOnClosure [RETURN_TYPE] void   Node n FunctionType fnType [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  iArgumentType  iParameterType  jArgumentType  jParameterType  boolean  foundTemplateTypeOfThisParameter  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  iArgument  iParameter  jArgument  jParameter  n  source  FunctionType  fnType  jArgumentFnType  jParameterFnType  BooleanLiteralSet  booleanValues  toBooleanOutcomes  int  i  j  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Wrong_Operator]^Node iArgument = n.getChildAtIndex ( i  ==  1 ) ;^782^^^^^767^797^Node iArgument = n.getChildAtIndex ( i + 1 ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] updateTypeOfThisOnClosure [RETURN_TYPE] void   Node n FunctionType fnType [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  iArgumentType  iParameterType  jArgumentType  jParameterType  boolean  foundTemplateTypeOfThisParameter  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  iArgument  iParameter  jArgument  jParameter  n  source  FunctionType  fnType  jArgumentFnType  jParameterFnType  BooleanLiteralSet  booleanValues  toBooleanOutcomes  int  i  j  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Wrong_Literal]^Node iArgument = n.getChildAtIndex ( i +  ) ;^782^^^^^767^797^Node iArgument = n.getChildAtIndex ( i + 1 ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] updateTypeOfThisOnClosure [RETURN_TYPE] void   Node n FunctionType fnType [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  iArgumentType  iParameterType  jArgumentType  jParameterType  boolean  foundTemplateTypeOfThisParameter  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  iArgument  iParameter  jArgument  jParameter  n  source  FunctionType  fnType  jArgumentFnType  jParameterFnType  BooleanLiteralSet  booleanValues  toBooleanOutcomes  int  i  j  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Variable_Misuse]^JSType sourceType = getJSType ( iArgument ) ;^783^^^^^768^798^JSType iArgumentType = getJSType ( iArgument ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] updateTypeOfThisOnClosure [RETURN_TYPE] void   Node n FunctionType fnType [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  iArgumentType  iParameterType  jArgumentType  jParameterType  boolean  foundTemplateTypeOfThisParameter  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  iArgument  iParameter  jArgument  jParameter  n  source  FunctionType  fnType  jArgumentFnType  jParameterFnType  BooleanLiteralSet  booleanValues  toBooleanOutcomes  int  i  j  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Variable_Misuse]^Node iArgument = source.getChildAtIndex ( i + 1 ) ;^782^^^^^767^797^Node iArgument = n.getChildAtIndex ( i + 1 ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] updateTypeOfThisOnClosure [RETURN_TYPE] void   Node n FunctionType fnType [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  iArgumentType  iParameterType  jArgumentType  jParameterType  boolean  foundTemplateTypeOfThisParameter  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  iArgument  iParameter  jArgument  jParameter  n  source  FunctionType  fnType  jArgumentFnType  jParameterFnType  BooleanLiteralSet  booleanValues  toBooleanOutcomes  int  i  j  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Wrong_Operator]^Node iArgument = n.getChildAtIndex ( i  ||  1 ) ;^782^^^^^767^797^Node iArgument = n.getChildAtIndex ( i + 1 ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] updateTypeOfThisOnClosure [RETURN_TYPE] void   Node n FunctionType fnType [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  iArgumentType  iParameterType  jArgumentType  jParameterType  boolean  foundTemplateTypeOfThisParameter  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  iArgument  iParameter  jArgument  jParameter  n  source  FunctionType  fnType  jArgumentFnType  jParameterFnType  BooleanLiteralSet  booleanValues  toBooleanOutcomes  int  i  j  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Wrong_Literal]^Node iArgument = n.getChildAtIndex ( i  ) ;^782^^^^^767^797^Node iArgument = n.getChildAtIndex ( i + 1 ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] updateTypeOfThisOnClosure [RETURN_TYPE] void   Node n FunctionType fnType [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  iArgumentType  iParameterType  jArgumentType  jParameterType  boolean  foundTemplateTypeOfThisParameter  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  iArgument  iParameter  jArgument  jParameter  n  source  FunctionType  fnType  jArgumentFnType  jParameterFnType  BooleanLiteralSet  booleanValues  toBooleanOutcomes  int  i  j  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Wrong_Operator]^Node jArgument = n.getChildAtIndex ( j  ==  1 ) ;^807^^^^^792^822^Node jArgument = n.getChildAtIndex ( j + 1 ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] updateTypeOfThisOnClosure [RETURN_TYPE] void   Node n FunctionType fnType [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  iArgumentType  iParameterType  jArgumentType  jParameterType  boolean  foundTemplateTypeOfThisParameter  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  iArgument  iParameter  jArgument  jParameter  n  source  FunctionType  fnType  jArgumentFnType  jParameterFnType  BooleanLiteralSet  booleanValues  toBooleanOutcomes  int  i  j  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Variable_Misuse]^compiler.report ( JSError.make ( NodeUtil.getSourceName ( jParameter ) , source, TEMPLATE_TYPE_OF_THIS_EXPECTED )  ) ;^835^836^^^^820^850^compiler.report ( JSError.make ( NodeUtil.getSourceName ( source ) , source, TEMPLATE_TYPE_OF_THIS_EXPECTED )  ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] updateTypeOfThisOnClosure [RETURN_TYPE] void   Node n FunctionType fnType [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  iArgumentType  iParameterType  jArgumentType  jParameterType  boolean  foundTemplateTypeOfThisParameter  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  iArgument  iParameter  jArgument  jParameter  n  source  FunctionType  fnType  jArgumentFnType  jParameterFnType  BooleanLiteralSet  booleanValues  toBooleanOutcomes  int  i  j  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Wrong_Operator]^if  ( i  ||  1 >= n.getChildCount (  )  )  {^778^^^^^763^793^if  ( i + 1 >= n.getChildCount (  )  )  {^[CLASS] TypeInference BooleanOutcomePair  [METHOD] updateTypeOfThisOnClosure [RETURN_TYPE] void   Node n FunctionType fnType [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  iArgumentType  iParameterType  jArgumentType  jParameterType  boolean  foundTemplateTypeOfThisParameter  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  iArgument  iParameter  jArgument  jParameter  n  source  FunctionType  fnType  jArgumentFnType  jParameterFnType  BooleanLiteralSet  booleanValues  toBooleanOutcomes  int  i  j  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Wrong_Operator]^if  ( ! ( iArgumentType  ^  ObjectType )  )  {^786^^^^^771^801^if  ( ! ( iArgumentType instanceof ObjectType )  )  {^[CLASS] TypeInference BooleanOutcomePair  [METHOD] updateTypeOfThisOnClosure [RETURN_TYPE] void   Node n FunctionType fnType [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  iArgumentType  iParameterType  jArgumentType  jParameterType  boolean  foundTemplateTypeOfThisParameter  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  iArgument  iParameter  jArgument  jParameter  n  source  FunctionType  fnType  jArgumentFnType  jParameterFnType  BooleanLiteralSet  booleanValues  toBooleanOutcomes  int  i  j  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Wrong_Operator]^if  ( jParameterType  ^  FunctionType )  {^798^^^^^783^813^if  ( jParameterType instanceof FunctionType )  {^[CLASS] TypeInference BooleanOutcomePair  [METHOD] updateTypeOfThisOnClosure [RETURN_TYPE] void   Node n FunctionType fnType [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  iArgumentType  iParameterType  jArgumentType  jParameterType  boolean  foundTemplateTypeOfThisParameter  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  iArgument  iParameter  jArgument  jParameter  n  source  FunctionType  fnType  jArgumentFnType  jParameterFnType  BooleanLiteralSet  booleanValues  toBooleanOutcomes  int  i  j  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Wrong_Operator]^if  ( jParameterType  >  FunctionType )  {^798^^^^^783^813^if  ( jParameterType instanceof FunctionType )  {^[CLASS] TypeInference BooleanOutcomePair  [METHOD] updateTypeOfThisOnClosure [RETURN_TYPE] void   Node n FunctionType fnType [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  iArgumentType  iParameterType  jArgumentType  jParameterType  boolean  foundTemplateTypeOfThisParameter  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  iArgument  iParameter  jArgument  jParameter  n  source  FunctionType  fnType  jArgumentFnType  jParameterFnType  BooleanLiteralSet  booleanValues  toBooleanOutcomes  int  i  j  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Wrong_Operator]^if  ( jArgument.getType (  )  == Token.FUNCTION && jArgumentType  &&  FunctionType )  {^809^810^^^^794^824^if  ( jArgument.getType (  )  == Token.FUNCTION && jArgumentType instanceof FunctionType )  {^[CLASS] TypeInference BooleanOutcomePair  [METHOD] updateTypeOfThisOnClosure [RETURN_TYPE] void   Node n FunctionType fnType [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  iArgumentType  iParameterType  jArgumentType  jParameterType  boolean  foundTemplateTypeOfThisParameter  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  iArgument  iParameter  jArgument  jParameter  n  source  FunctionType  fnType  jArgumentFnType  jParameterFnType  BooleanLiteralSet  booleanValues  toBooleanOutcomes  int  i  j  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Wrong_Operator]^Node jArgument = n.getChildAtIndex ( j  >=  1 ) ;^807^^^^^792^822^Node jArgument = n.getChildAtIndex ( j + 1 ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] updateTypeOfThisOnClosure [RETURN_TYPE] void   Node n FunctionType fnType [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  iArgumentType  iParameterType  jArgumentType  jParameterType  boolean  foundTemplateTypeOfThisParameter  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  iArgument  iParameter  jArgument  jParameter  n  source  FunctionType  fnType  jArgumentFnType  jParameterFnType  BooleanLiteralSet  booleanValues  toBooleanOutcomes  int  i  j  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Wrong_Operator]^if  ( j  |  1 >= n.getChildCount (  )  )  {^803^^^^^788^818^if  ( j + 1 >= n.getChildCount (  )  )  {^[CLASS] TypeInference BooleanOutcomePair  [METHOD] updateTypeOfThisOnClosure [RETURN_TYPE] void   Node n FunctionType fnType [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  iArgumentType  iParameterType  jArgumentType  jParameterType  boolean  foundTemplateTypeOfThisParameter  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  iArgument  iParameter  jArgument  jParameter  n  source  FunctionType  fnType  jArgumentFnType  jParameterFnType  BooleanLiteralSet  booleanValues  toBooleanOutcomes  int  i  j  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Argument_Swapping]^if  ( jArgumentFnTypeFnType.getTypeOfThis (  ) .isUnknownType (  )  )  {^814^^^^^799^829^if  ( jArgumentFnType.getTypeOfThis (  ) .isUnknownType (  )  )  {^[CLASS] TypeInference BooleanOutcomePair  [METHOD] updateTypeOfThisOnClosure [RETURN_TYPE] void   Node n FunctionType fnType [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  iArgumentType  iParameterType  jArgumentType  jParameterType  boolean  foundTemplateTypeOfThisParameter  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  iArgument  iParameter  jArgument  jParameter  n  source  FunctionType  fnType  jArgumentFnType  jParameterFnType  BooleanLiteralSet  booleanValues  toBooleanOutcomes  int  i  j  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Wrong_Operator]^Node jArgument = n.getChildAtIndex ( j  |  1 ) ;^807^^^^^792^822^Node jArgument = n.getChildAtIndex ( j + 1 ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] updateTypeOfThisOnClosure [RETURN_TYPE] void   Node n FunctionType fnType [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  iArgumentType  iParameterType  jArgumentType  jParameterType  boolean  foundTemplateTypeOfThisParameter  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  iArgument  iParameter  jArgument  jParameter  n  source  FunctionType  fnType  jArgumentFnType  jParameterFnType  BooleanLiteralSet  booleanValues  toBooleanOutcomes  int  i  j  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Wrong_Operator]^Node jArgument = n.getChildAtIndex ( j  ^  1 ) ;^807^^^^^792^822^Node jArgument = n.getChildAtIndex ( j + 1 ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] updateTypeOfThisOnClosure [RETURN_TYPE] void   Node n FunctionType fnType [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  iArgumentType  iParameterType  jArgumentType  jParameterType  boolean  foundTemplateTypeOfThisParameter  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  iArgument  iParameter  jArgument  jParameter  n  source  FunctionType  fnType  jArgumentFnType  jParameterFnType  BooleanLiteralSet  booleanValues  toBooleanOutcomes  int  i  j  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Wrong_Operator]^if  ( j  &  1 >= n.getChildCount (  )  )  {^803^^^^^788^818^if  ( j + 1 >= n.getChildCount (  )  )  {^[CLASS] TypeInference BooleanOutcomePair  [METHOD] updateTypeOfThisOnClosure [RETURN_TYPE] void   Node n FunctionType fnType [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  iArgumentType  iParameterType  jArgumentType  jParameterType  boolean  foundTemplateTypeOfThisParameter  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  iArgument  iParameter  jArgument  jParameter  n  source  FunctionType  fnType  jArgumentFnType  jParameterFnType  BooleanLiteralSet  booleanValues  toBooleanOutcomes  int  i  j  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Variable_Misuse]^if  ( jArgument.getType (  )  == Token.3 && jArgumentType instanceof FunctionType )  {^809^810^^^^794^824^if  ( jArgument.getType (  )  == Token.FUNCTION && jArgumentType instanceof FunctionType )  {^[CLASS] TypeInference BooleanOutcomePair  [METHOD] updateTypeOfThisOnClosure [RETURN_TYPE] void   Node n FunctionType fnType [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  iArgumentType  iParameterType  jArgumentType  jParameterType  boolean  foundTemplateTypeOfThisParameter  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  iArgument  iParameter  jArgument  jParameter  n  source  FunctionType  fnType  jArgumentFnType  jParameterFnType  BooleanLiteralSet  booleanValues  toBooleanOutcomes  int  i  j  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Wrong_Operator]^if  ( jArgument.getType (  )  < Token.FUNCTION && jArgumentType instanceof FunctionType )  {^809^810^^^^794^824^if  ( jArgument.getType (  )  == Token.FUNCTION && jArgumentType instanceof FunctionType )  {^[CLASS] TypeInference BooleanOutcomePair  [METHOD] updateTypeOfThisOnClosure [RETURN_TYPE] void   Node n FunctionType fnType [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  iArgumentType  iParameterType  jArgumentType  jParameterType  boolean  foundTemplateTypeOfThisParameter  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  iArgument  iParameter  jArgument  jParameter  n  source  FunctionType  fnType  jArgumentFnType  jParameterFnType  BooleanLiteralSet  booleanValues  toBooleanOutcomes  int  i  j  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Wrong_Operator]^if  ( jArgument.getType (  )  == Token.FUNCTION && jArgumentType  <  FunctionType )  {^809^810^^^^794^824^if  ( jArgument.getType (  )  == Token.FUNCTION && jArgumentType instanceof FunctionType )  {^[CLASS] TypeInference BooleanOutcomePair  [METHOD] updateTypeOfThisOnClosure [RETURN_TYPE] void   Node n FunctionType fnType [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  iArgumentType  iParameterType  jArgumentType  jParameterType  boolean  foundTemplateTypeOfThisParameter  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  iArgument  iParameter  jArgument  jParameter  n  source  FunctionType  fnType  jArgumentFnType  jParameterFnType  BooleanLiteralSet  booleanValues  toBooleanOutcomes  int  i  j  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Wrong_Literal]^int j = i;^795^^^^^780^810^int j = 0;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] updateTypeOfThisOnClosure [RETURN_TYPE] void   Node n FunctionType fnType [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  iArgumentType  iParameterType  jArgumentType  jParameterType  boolean  foundTemplateTypeOfThisParameter  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  iArgument  iParameter  jArgument  jParameter  n  source  FunctionType  fnType  jArgumentFnType  jParameterFnType  BooleanLiteralSet  booleanValues  toBooleanOutcomes  int  i  j  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Variable_Misuse]^Node jArgument = jParameter.getChildAtIndex ( j + 1 ) ;^807^^^^^792^822^Node jArgument = n.getChildAtIndex ( j + 1 ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] updateTypeOfThisOnClosure [RETURN_TYPE] void   Node n FunctionType fnType [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  iArgumentType  iParameterType  jArgumentType  jParameterType  boolean  foundTemplateTypeOfThisParameter  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  iArgument  iParameter  jArgument  jParameter  n  source  FunctionType  fnType  jArgumentFnType  jParameterFnType  BooleanLiteralSet  booleanValues  toBooleanOutcomes  int  i  j  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Wrong_Operator]^if  ( ! ( iArgumentType  !=  ObjectType )  )  {^786^^^^^771^801^if  ( ! ( iArgumentType instanceof ObjectType )  )  {^[CLASS] TypeInference BooleanOutcomePair  [METHOD] updateTypeOfThisOnClosure [RETURN_TYPE] void   Node n FunctionType fnType [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  iArgumentType  iParameterType  jArgumentType  jParameterType  boolean  foundTemplateTypeOfThisParameter  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  iArgument  iParameter  jArgument  jParameter  n  source  FunctionType  fnType  jArgumentFnType  jParameterFnType  BooleanLiteralSet  booleanValues  toBooleanOutcomes  int  i  j  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Wrong_Operator]^if  ( jParameterType  ==  FunctionType )  {^798^^^^^783^813^if  ( jParameterType instanceof FunctionType )  {^[CLASS] TypeInference BooleanOutcomePair  [METHOD] updateTypeOfThisOnClosure [RETURN_TYPE] void   Node n FunctionType fnType [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  iArgumentType  iParameterType  jArgumentType  jParameterType  boolean  foundTemplateTypeOfThisParameter  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  iArgument  iParameter  jArgument  jParameter  n  source  FunctionType  fnType  jArgumentFnType  jParameterFnType  BooleanLiteralSet  booleanValues  toBooleanOutcomes  int  i  j  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Wrong_Operator]^if  ( j  <<  1 >= n.getChildCount (  )  )  {^803^^^^^788^818^if  ( j + 1 >= n.getChildCount (  )  )  {^[CLASS] TypeInference BooleanOutcomePair  [METHOD] updateTypeOfThisOnClosure [RETURN_TYPE] void   Node n FunctionType fnType [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  iArgumentType  iParameterType  jArgumentType  jParameterType  boolean  foundTemplateTypeOfThisParameter  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  iArgument  iParameter  jArgument  jParameter  n  source  FunctionType  fnType  jArgumentFnType  jParameterFnType  BooleanLiteralSet  booleanValues  toBooleanOutcomes  int  i  j  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Wrong_Operator]^if  ( jArgument.getType (  )  > Token.FUNCTION && jArgumentType instanceof FunctionType )  {^809^810^^^^794^824^if  ( jArgument.getType (  )  == Token.FUNCTION && jArgumentType instanceof FunctionType )  {^[CLASS] TypeInference BooleanOutcomePair  [METHOD] updateTypeOfThisOnClosure [RETURN_TYPE] void   Node n FunctionType fnType [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  iArgumentType  iParameterType  jArgumentType  jParameterType  boolean  foundTemplateTypeOfThisParameter  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  iArgument  iParameter  jArgument  jParameter  n  source  FunctionType  fnType  jArgumentFnType  jParameterFnType  BooleanLiteralSet  booleanValues  toBooleanOutcomes  int  i  j  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Wrong_Operator]^if  ( jArgument.getType (  )  == Token.FUNCTION && jArgumentType  <=  FunctionType )  {^809^810^^^^794^824^if  ( jArgument.getType (  )  == Token.FUNCTION && jArgumentType instanceof FunctionType )  {^[CLASS] TypeInference BooleanOutcomePair  [METHOD] updateTypeOfThisOnClosure [RETURN_TYPE] void   Node n FunctionType fnType [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  iArgumentType  iParameterType  jArgumentType  jParameterType  boolean  foundTemplateTypeOfThisParameter  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  iArgument  iParameter  jArgument  jParameter  n  source  FunctionType  fnType  jArgumentFnType  jParameterFnType  BooleanLiteralSet  booleanValues  toBooleanOutcomes  int  i  j  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Variable_Misuse]^iParameterType = jParameterType.restrictByNotNullOrUndefined (  ) ;^775^^^^^760^790^iParameterType = iParameterType.restrictByNotNullOrUndefined (  ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] updateTypeOfThisOnClosure [RETURN_TYPE] void   Node n FunctionType fnType [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  iArgumentType  iParameterType  jArgumentType  jParameterType  boolean  foundTemplateTypeOfThisParameter  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  iArgument  iParameter  jArgument  jParameter  n  source  FunctionType  fnType  jArgumentFnType  jParameterFnType  BooleanLiteralSet  booleanValues  toBooleanOutcomes  int  i  j  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Variable_Misuse]^JSType nType = getJSType ( iParameter ) ;^774^^^^^759^789^JSType iParameterType = getJSType ( iParameter ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] updateTypeOfThisOnClosure [RETURN_TYPE] void   Node n FunctionType fnType [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  iArgumentType  iParameterType  jArgumentType  jParameterType  boolean  foundTemplateTypeOfThisParameter  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  iArgument  iParameter  jArgument  jParameter  n  source  FunctionType  fnType  jArgumentFnType  jParameterFnType  BooleanLiteralSet  booleanValues  toBooleanOutcomes  int  i  j  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Wrong_Operator]^Node iArgument = n.getChildAtIndex ( i   instanceof   1 ) ;^782^^^^^767^797^Node iArgument = n.getChildAtIndex ( i + 1 ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] updateTypeOfThisOnClosure [RETURN_TYPE] void   Node n FunctionType fnType [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  iArgumentType  iParameterType  jArgumentType  jParameterType  boolean  foundTemplateTypeOfThisParameter  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  iArgument  iParameter  jArgument  jParameter  n  source  FunctionType  fnType  jArgumentFnType  jParameterFnType  BooleanLiteralSet  booleanValues  toBooleanOutcomes  int  i  j  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Wrong_Literal]^Node iArgument = n.getChildAtIndex ( i + i ) ;^782^^^^^767^797^Node iArgument = n.getChildAtIndex ( i + 1 ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] updateTypeOfThisOnClosure [RETURN_TYPE] void   Node n FunctionType fnType [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  iArgumentType  iParameterType  jArgumentType  jParameterType  boolean  foundTemplateTypeOfThisParameter  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  iArgument  iParameter  jArgument  jParameter  n  source  FunctionType  fnType  jArgumentFnType  jParameterFnType  BooleanLiteralSet  booleanValues  toBooleanOutcomes  int  i  j  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Variable_Misuse]^JSType nType = getJSType ( iArgument ) ;^783^^^^^768^798^JSType iArgumentType = getJSType ( iArgument ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] updateTypeOfThisOnClosure [RETURN_TYPE] void   Node n FunctionType fnType [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  iArgumentType  iParameterType  jArgumentType  jParameterType  boolean  foundTemplateTypeOfThisParameter  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  iArgument  iParameter  jArgument  jParameter  n  source  FunctionType  fnType  jArgumentFnType  jParameterFnType  BooleanLiteralSet  booleanValues  toBooleanOutcomes  int  i  j  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Wrong_Literal]^int j = 1;^795^^^^^780^810^int j = 0;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] updateTypeOfThisOnClosure [RETURN_TYPE] void   Node n FunctionType fnType [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  iArgumentType  iParameterType  jArgumentType  jParameterType  boolean  foundTemplateTypeOfThisParameter  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  iArgument  iParameter  jArgument  jParameter  n  source  FunctionType  fnType  jArgumentFnType  jParameterFnType  BooleanLiteralSet  booleanValues  toBooleanOutcomes  int  i  j  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Variable_Misuse]^for  ( Node iParameter : jParameterFnType.getParameters (  )  )  {^773^^^^^758^788^for  ( Node iParameter : fnType.getParameters (  )  )  {^[CLASS] TypeInference BooleanOutcomePair  [METHOD] updateTypeOfThisOnClosure [RETURN_TYPE] void   Node n FunctionType fnType [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  iArgumentType  iParameterType  jArgumentType  jParameterType  boolean  foundTemplateTypeOfThisParameter  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  iArgument  iParameter  jArgument  jParameter  n  source  FunctionType  fnType  jArgumentFnType  jParameterFnType  BooleanLiteralSet  booleanValues  toBooleanOutcomes  int  i  j  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Variable_Misuse]^JSType sourceType = getJSType ( iParameter ) ;^774^^^^^759^789^JSType iParameterType = getJSType ( iParameter ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] updateTypeOfThisOnClosure [RETURN_TYPE] void   Node n FunctionType fnType [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  iArgumentType  iParameterType  jArgumentType  jParameterType  boolean  foundTemplateTypeOfThisParameter  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  iArgument  iParameter  jArgument  jParameter  n  source  FunctionType  fnType  jArgumentFnType  jParameterFnType  BooleanLiteralSet  booleanValues  toBooleanOutcomes  int  i  j  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Wrong_Operator]^Node iArgument = n.getChildAtIndex ( i  &&  1 ) ;^782^^^^^767^797^Node iArgument = n.getChildAtIndex ( i + 1 ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] updateTypeOfThisOnClosure [RETURN_TYPE] void   Node n FunctionType fnType [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  iArgumentType  iParameterType  jArgumentType  jParameterType  boolean  foundTemplateTypeOfThisParameter  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  iArgument  iParameter  jArgument  jParameter  n  source  FunctionType  fnType  jArgumentFnType  jParameterFnType  BooleanLiteralSet  booleanValues  toBooleanOutcomes  int  i  j  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Wrong_Literal]^Node iArgument = n.getChildAtIndex ( i + j ) ;^782^^^^^767^797^Node iArgument = n.getChildAtIndex ( i + 1 ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] updateTypeOfThisOnClosure [RETURN_TYPE] void   Node n FunctionType fnType [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  iArgumentType  iParameterType  jArgumentType  jParameterType  boolean  foundTemplateTypeOfThisParameter  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  iArgument  iParameter  jArgument  jParameter  n  source  FunctionType  fnType  jArgumentFnType  jParameterFnType  BooleanLiteralSet  booleanValues  toBooleanOutcomes  int  i  j  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Variable_Misuse]^Node constructor = arg.getFirstChild (  ) ;^846^^^^^845^868^Node constructor = n.getFirstChild (  ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseNew [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Variable_Misuse]^Node constructor = constructor.getFirstChild (  ) ;^846^^^^^845^868^Node constructor = n.getFirstChild (  ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseNew [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Variable_Misuse]^scope = traverse ( constructor, newScope ) ;^847^^^^^845^868^scope = traverse ( constructor, scope ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseNew [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Argument_Swapping]^scope = traverse ( scope, constructor ) ;^847^^^^^845^868^scope = traverse ( constructor, scope ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseNew [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Variable_Misuse]^scope = traverse ( n, scope ) ;^847^^^^^845^868^scope = traverse ( constructor, scope ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseNew [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Variable_Misuse]^scope = traverse ( constructor, joinedScope ) ;^847^^^^^845^868^scope = traverse ( constructor, scope ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseNew [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Variable_Misuse]^JSType nType = constructor.getJSType (  ) ;^849^^^^^845^868^JSType constructorType = constructor.getJSType (  ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseNew [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Variable_Misuse]^if  ( type != null )  {^851^^^^^845^868^if  ( constructorType != null )  {^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseNew [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Wrong_Operator]^if  ( constructorType == null )  {^851^^^^^845^868^if  ( constructorType != null )  {^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseNew [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Variable_Misuse]^if  ( type.isUnknownType (  )  )  {^853^^^^^845^868^if  ( constructorType.isUnknownType (  )  )  {^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseNew [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Variable_Misuse]^} else if  ( type instanceof FunctionType )  {^855^^^^^845^868^} else if  ( constructorType instanceof FunctionType )  {^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseNew [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Wrong_Operator]^} else if  ( constructorType  |  FunctionType )  {^855^^^^^845^868^} else if  ( constructorType instanceof FunctionType )  {^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseNew [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Wrong_Operator]^} else if  ( constructorType  ||  FunctionType )  {^855^^^^^845^868^} else if  ( constructorType instanceof FunctionType )  {^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseNew [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Variable_Misuse]^constructorType = type.restrictByNotNullOrUndefined (  ) ;^852^^^^^845^868^constructorType = constructorType.restrictByNotNullOrUndefined (  ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseNew [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Wrong_Operator]^} else if  ( constructorType  ==  FunctionType )  {^855^^^^^845^868^} else if  ( constructorType instanceof FunctionType )  {^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseNew [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Wrong_Operator]^} else if  ( constructorType  >  FunctionType )  {^855^^^^^845^868^} else if  ( constructorType instanceof FunctionType )  {^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseNew [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Variable_Misuse]^n.setJSType ( constructorType ) ;^862^^^^^845^868^n.setJSType ( type ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseNew [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Argument_Swapping]^for  ( Node constructor = arg.getNext (  ) ; arg != null; arg = arg.getNext (  )  )  {^864^^^^^845^868^for  ( Node arg = constructor.getNext (  ) ; arg != null; arg = arg.getNext (  )  )  {^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseNew [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Wrong_Operator]^for  ( Node arg = constructor.getNext (  ) ; arg == null; arg = arg.getNext (  )  )  {^864^^^^^845^868^for  ( Node arg = constructor.getNext (  ) ; arg != null; arg = arg.getNext (  )  )  {^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseNew [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Variable_Misuse]^scope = traverse ( n, scope ) ;^865^^^^^845^868^scope = traverse ( arg, scope ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseNew [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Argument_Swapping]^scope = traverse ( scope, arg ) ;^865^^^^^845^868^scope = traverse ( arg, scope ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseNew [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Variable_Misuse]^scope = traverse ( arg, newScope ) ;^865^^^^^845^868^scope = traverse ( arg, scope ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseNew [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Variable_Misuse]^scope = traverse ( arg, joinedScope ) ;^865^^^^^845^868^scope = traverse ( arg, scope ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseNew [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Variable_Misuse]^for  ( Node arg = n.getNext (  ) ; arg != null; arg = arg.getNext (  )  )  {^864^^^^^845^868^for  ( Node arg = constructor.getNext (  ) ; arg != null; arg = arg.getNext (  )  )  {^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseNew [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Variable_Misuse]^for  ( Node n = constructor.getNext (  ) ; arg != null; arg = arg.getNext (  )  )  {^864^^^^^845^868^for  ( Node arg = constructor.getNext (  ) ; arg != null; arg = arg.getNext (  )  )  {^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseNew [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Variable_Misuse]^scope = traverse ( arg, output ) ;^865^^^^^845^868^scope = traverse ( arg, scope ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseNew [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Variable_Misuse]^return joinedScope;^867^^^^^845^868^return scope;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseNew [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Variable_Misuse]^return traverseShortCircuitingBinOp ( n, newScope, true ) ;^871^^^^^870^872^return traverseShortCircuitingBinOp ( n, scope, true ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseAnd [RETURN_TYPE] TypeInference$BooleanOutcomePair   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Argument_Swapping]^return traverseShortCircuitingBinOp ( scope, n, true ) ;^871^^^^^870^872^return traverseShortCircuitingBinOp ( n, scope, true ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseAnd [RETURN_TYPE] TypeInference$BooleanOutcomePair   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Wrong_Literal]^return traverseShortCircuitingBinOp ( n, scope, false ) ;^871^^^^^870^872^return traverseShortCircuitingBinOp ( n, scope, true ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseAnd [RETURN_TYPE] TypeInference$BooleanOutcomePair   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Variable_Misuse]^return traverseShortCircuitingBinOp ( n, joinedScope, true ) ;^871^^^^^870^872^return traverseShortCircuitingBinOp ( n, scope, true ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseAnd [RETURN_TYPE] TypeInference$BooleanOutcomePair   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Variable_Misuse]^for  ( Node n = n.getFirstChild (  ) ; el != null; el = el.getNext (  )  )  {^875^^^^^874^879^for  ( Node el = n.getFirstChild (  ) ; el != null; el = el.getNext (  )  )  {^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseChildren [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  el  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Argument_Swapping]^for  ( Node n = el.getFirstChild (  ) ; el != null; el = el.getNext (  )  )  {^875^^^^^874^879^for  ( Node el = n.getFirstChild (  ) ; el != null; el = el.getNext (  )  )  {^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseChildren [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  el  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Wrong_Operator]^for  ( Node el = n.getFirstChild (  ) ; el == null; el = el.getNext (  )  )  {^875^^^^^874^879^for  ( Node el = n.getFirstChild (  ) ; el != null; el = el.getNext (  )  )  {^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseChildren [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  el  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Variable_Misuse]^scope = traverse ( el, leftScope ) ;^876^^^^^874^879^scope = traverse ( el, scope ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseChildren [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  el  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Argument_Swapping]^scope = traverse ( scope, el ) ;^876^^^^^874^879^scope = traverse ( el, scope ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseChildren [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  el  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Variable_Misuse]^scope = traverse ( n, scope ) ;^876^^^^^874^879^scope = traverse ( el, scope ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseChildren [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  el  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Variable_Misuse]^scope = traverse ( el, joinedScope ) ;^876^^^^^874^879^scope = traverse ( el, scope ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseChildren [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  el  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Variable_Misuse]^return newScope;^878^^^^^874^879^return scope;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseChildren [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  el  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Variable_Misuse]^scope = traverseChildren ( n, joinedScope ) ;^882^^^^^881^892^scope = traverseChildren ( n, scope ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseGetElem [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  ObjectType  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Argument_Swapping]^scope = traverseChildren ( scope, n ) ;^882^^^^^881^892^scope = traverseChildren ( n, scope ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseGetElem [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  ObjectType  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Variable_Misuse]^scope = traverseChildren ( n, leftScope ) ;^882^^^^^881^892^scope = traverseChildren ( n, scope ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseGetElem [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  ObjectType  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Wrong_Operator]^if  ( objType == null )  {^885^^^^^881^892^if  ( objType != null )  {^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseGetElem [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  ObjectType  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Argument_Swapping]^if  ( n != typeull )  {^887^^^^^881^892^if  ( type != null )  {^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseGetElem [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  ObjectType  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Wrong_Operator]^if  ( type == null )  {^887^^^^^881^892^if  ( type != null )  {^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseGetElem [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  ObjectType  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Variable_Misuse]^return dereferencePointer ( n.getFirstChild (  ) , joinedScope ) ;^891^^^^^881^892^return dereferencePointer ( n.getFirstChild (  ) , scope ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseGetElem [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  ObjectType  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Argument_Swapping]^return dereferencePointer ( scope.getFirstChild (  ) , n ) ;^891^^^^^881^892^return dereferencePointer ( n.getFirstChild (  ) , scope ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseGetElem [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  ObjectType  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Variable_Misuse]^return dereferencePointer ( n.getFirstChild (  ) , leftScope ) ;^891^^^^^881^892^return dereferencePointer ( n.getFirstChild (  ) , scope ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseGetElem [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  ObjectType  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Variable_Misuse]^Node objNode = property.getFirstChild (  ) ;^895^^^^^894^902^Node objNode = n.getFirstChild (  ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseGetProp [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  objNode  property  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Variable_Misuse]^Node property = objNode.getLastChild (  ) ;^896^^^^^894^902^Node property = n.getLastChild (  ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseGetProp [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  objNode  property  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Variable_Misuse]^scope = traverseChildren ( property, scope ) ;^897^^^^^894^902^scope = traverseChildren ( n, scope ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseGetProp [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  objNode  property  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Variable_Misuse]^scope = traverseChildren ( n, leftScope ) ;^897^^^^^894^902^scope = traverseChildren ( n, scope ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseGetProp [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  objNode  property  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Argument_Swapping]^scope = traverseChildren ( scope, n ) ;^897^^^^^894^902^scope = traverseChildren ( n, scope ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseGetProp [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  objNode  property  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Variable_Misuse]^n.setJSType ( getPropertyType ( objNode.getJSType (  ) , property.getString (  ) , objNode, scope )  ) ;^898^899^900^^^894^902^n.setJSType ( getPropertyType ( objNode.getJSType (  ) , property.getString (  ) , n, scope )  ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseGetProp [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  objNode  property  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Variable_Misuse]^n.setJSType ( getPropertyType ( objNode.getJSType (  ) , n.getString (  ) , n, scope )  ) ;^898^899^900^^^894^902^n.setJSType ( getPropertyType ( objNode.getJSType (  ) , property.getString (  ) , n, scope )  ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseGetProp [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  objNode  property  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Variable_Misuse]^n.setJSType ( getPropertyType ( objNode.getJSType (  ) , property.getString (  ) , n, output )  ) ;^898^899^900^^^894^902^n.setJSType ( getPropertyType ( objNode.getJSType (  ) , property.getString (  ) , n, scope )  ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseGetProp [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  objNode  property  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Argument_Swapping]^n.setJSType ( getPropertyType ( objNode.getJSType (  ) , n.getString (  ) , property, scope )  ) ;^898^899^900^^^894^902^n.setJSType ( getPropertyType ( objNode.getJSType (  ) , property.getString (  ) , n, scope )  ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseGetProp [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  objNode  property  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Argument_Swapping]^n.setJSType ( getPropertyType ( property.getJSType (  ) , objNode.getString (  ) , n, scope )  ) ;^898^899^900^^^894^902^n.setJSType ( getPropertyType ( objNode.getJSType (  ) , property.getString (  ) , n, scope )  ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseGetProp [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  objNode  property  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Argument_Swapping]^n.setJSType ( getPropertyType ( objNode.getJSType (  ) , property.getString (  ) , scope, n )  ) ;^898^899^900^^^894^902^n.setJSType ( getPropertyType ( objNode.getJSType (  ) , property.getString (  ) , n, scope )  ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseGetProp [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  objNode  property  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Variable_Misuse]^getPropertyType ( property.getJSType (  ) , property.getString (  ) , n, scope )  ) ;^899^900^^^^894^902^getPropertyType ( objNode.getJSType (  ) , property.getString (  ) , n, scope )  ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseGetProp [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  objNode  property  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Variable_Misuse]^getPropertyType ( objNode.getJSType (  ) , n.getString (  ) , n, scope )  ) ;^899^900^^^^894^902^getPropertyType ( objNode.getJSType (  ) , property.getString (  ) , n, scope )  ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseGetProp [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  objNode  property  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Variable_Misuse]^getPropertyType ( objNode.getJSType (  ) , property.getString (  ) , objNode, scope )  ) ;^899^900^^^^894^902^getPropertyType ( objNode.getJSType (  ) , property.getString (  ) , n, scope )  ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseGetProp [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  objNode  property  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Argument_Swapping]^getPropertyType ( property.getJSType (  ) , objNode.getString (  ) , n, scope )  ) ;^899^900^^^^894^902^getPropertyType ( objNode.getJSType (  ) , property.getString (  ) , n, scope )  ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseGetProp [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  objNode  property  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Argument_Swapping]^getPropertyType ( objNode.getJSType (  ) , scope.getString (  ) , n, property )  ) ;^899^900^^^^894^902^getPropertyType ( objNode.getJSType (  ) , property.getString (  ) , n, scope )  ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseGetProp [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  objNode  property  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Argument_Swapping]^getPropertyType ( objNode.getJSType (  ) , n.getString (  ) , property, scope )  ) ;^899^900^^^^894^902^getPropertyType ( objNode.getJSType (  ) , property.getString (  ) , n, scope )  ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseGetProp [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  objNode  property  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Variable_Misuse]^objNode.getJSType (  ) , objNode.getString (  ) , n, scope )  ) ;^900^^^^^894^902^objNode.getJSType (  ) , property.getString (  ) , n, scope )  ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseGetProp [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  objNode  property  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Variable_Misuse]^return dereferencePointer ( property.getFirstChild (  ) , scope ) ;^901^^^^^894^902^return dereferencePointer ( n.getFirstChild (  ) , scope ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseGetProp [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  objNode  property  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Variable_Misuse]^return dereferencePointer ( n.getFirstChild (  ) , leftScope ) ;^901^^^^^894^902^return dereferencePointer ( n.getFirstChild (  ) , scope ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseGetProp [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  objNode  property  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Argument_Swapping]^return dereferencePointer ( scope.getFirstChild (  ) , n ) ;^901^^^^^894^902^return dereferencePointer ( n.getFirstChild (  ) , scope ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseGetProp [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  objNode  property  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Wrong_Operator]^if  ( n.getType (  )  > Token.NAME )  {^909^^^^^908^918^if  ( n.getType (  )  == Token.NAME )  {^[CLASS] TypeInference BooleanOutcomePair  [METHOD] dereferencePointer [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  narrowed  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Variable_Misuse]^if  ( type != type )  {^912^^^^^908^918^if  ( type != narrowed )  {^[CLASS] TypeInference BooleanOutcomePair  [METHOD] dereferencePointer [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  narrowed  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Argument_Swapping]^if  ( narrowed != type )  {^912^^^^^908^918^if  ( type != narrowed )  {^[CLASS] TypeInference BooleanOutcomePair  [METHOD] dereferencePointer [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  narrowed  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Argument_Swapping]^if  ( n != typearrowed )  {^912^^^^^908^918^if  ( type != narrowed )  {^[CLASS] TypeInference BooleanOutcomePair  [METHOD] dereferencePointer [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  narrowed  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Wrong_Operator]^if  ( type <= narrowed )  {^912^^^^^908^918^if  ( type != narrowed )  {^[CLASS] TypeInference BooleanOutcomePair  [METHOD] dereferencePointer [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  narrowed  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Variable_Misuse]^scope = trueScope.createChildFlowScope (  ) ;^913^^^^^908^918^scope = scope.createChildFlowScope (  ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] dereferencePointer [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  narrowed  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Variable_Misuse]^scope = rightScope.createChildFlowScope (  ) ;^913^^^^^908^918^scope = scope.createChildFlowScope (  ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] dereferencePointer [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  narrowed  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Variable_Misuse]^redeclare ( trueScope, n.getString (  ) , narrowed ) ;^914^^^^^908^918^redeclare ( scope, n.getString (  ) , narrowed ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] dereferencePointer [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  narrowed  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Variable_Misuse]^redeclare ( scope, n.getString (  ) , type ) ;^914^^^^^908^918^redeclare ( scope, n.getString (  ) , narrowed ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] dereferencePointer [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  narrowed  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Argument_Swapping]^redeclare ( narrowed, n.getString (  ) , scope ) ;^914^^^^^908^918^redeclare ( scope, n.getString (  ) , narrowed ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] dereferencePointer [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  narrowed  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Argument_Swapping]^redeclare ( n, scope.getString (  ) , narrowed ) ;^914^^^^^908^918^redeclare ( scope, n.getString (  ) , narrowed ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] dereferencePointer [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  narrowed  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Variable_Misuse]^JSType narrowed = narrowed.restrictByNotNullOrUndefined (  ) ;^911^^^^^908^918^JSType narrowed = type.restrictByNotNullOrUndefined (  ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] dereferencePointer [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  narrowed  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Variable_Misuse]^scope = leftScope.createChildFlowScope (  ) ;^913^^^^^908^918^scope = scope.createChildFlowScope (  ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] dereferencePointer [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  narrowed  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Wrong_Operator]^if  ( type == narrowed )  {^912^^^^^908^918^if  ( type != narrowed )  {^[CLASS] TypeInference BooleanOutcomePair  [METHOD] dereferencePointer [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  narrowed  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Variable_Misuse]^scope = newScope.createChildFlowScope (  ) ;^913^^^^^908^918^scope = scope.createChildFlowScope (  ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] dereferencePointer [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  narrowed  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Argument_Swapping]^redeclare ( scope, narrowed.getString (  ) , n ) ;^914^^^^^908^918^redeclare ( scope, n.getString (  ) , narrowed ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] dereferencePointer [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  narrowed  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Variable_Misuse]^scope = joinedScope.createChildFlowScope (  ) ;^913^^^^^908^918^scope = scope.createChildFlowScope (  ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] dereferencePointer [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  narrowed  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Variable_Misuse]^return newScope;^917^^^^^908^918^return scope;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] dereferencePointer [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  narrowed  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Variable_Misuse]^StaticSlot<JSType> var = leftScope.getSlot ( qualifiedName ) ;^924^^^^^909^939^StaticSlot<JSType> var = scope.getSlot ( qualifiedName ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] getPropertyType [RETURN_TYPE] JSType   JSType objType String propName Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  JSType  objType  propertyType  varType  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  propName  qualifiedName  ObjectType  regType  AbstractCompiler  compiler  JSTypeRegistry  registry  StaticSlot  var  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Variable_Misuse]^StaticSlot<JSType> var = scope.getSlot ( propName ) ;^924^^^^^909^939^StaticSlot<JSType> var = scope.getSlot ( qualifiedName ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] getPropertyType [RETURN_TYPE] JSType   JSType objType String propName Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  JSType  objType  propertyType  varType  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  propName  qualifiedName  ObjectType  regType  AbstractCompiler  compiler  JSTypeRegistry  registry  StaticSlot  var  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Argument_Swapping]^StaticSlot<JSType> var = qualifiedName.getSlot ( scope ) ;^924^^^^^909^939^StaticSlot<JSType> var = scope.getSlot ( qualifiedName ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] getPropertyType [RETURN_TYPE] JSType   JSType objType String propName Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  JSType  objType  propertyType  varType  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  propName  qualifiedName  ObjectType  regType  AbstractCompiler  compiler  JSTypeRegistry  registry  StaticSlot  var  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Variable_Misuse]^StaticSlot<JSType> var = joinedScope.getSlot ( qualifiedName ) ;^924^^^^^909^939^StaticSlot<JSType> var = scope.getSlot ( qualifiedName ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] getPropertyType [RETURN_TYPE] JSType   JSType objType String propName Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  JSType  objType  propertyType  varType  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  propName  qualifiedName  ObjectType  regType  AbstractCompiler  compiler  JSTypeRegistry  registry  StaticSlot  var  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Wrong_Operator]^if  ( var == null )  {^925^^^^^910^940^if  ( var != null )  {^[CLASS] TypeInference BooleanOutcomePair  [METHOD] getPropertyType [RETURN_TYPE] JSType   JSType objType String propName Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  JSType  objType  propertyType  varType  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  propName  qualifiedName  ObjectType  regType  AbstractCompiler  compiler  JSTypeRegistry  registry  StaticSlot  var  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Variable_Misuse]^if  ( propertyType != null )  {^927^^^^^912^942^if  ( varType != null )  {^[CLASS] TypeInference BooleanOutcomePair  [METHOD] getPropertyType [RETURN_TYPE] JSType   JSType objType String propName Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  JSType  objType  propertyType  varType  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  propName  qualifiedName  ObjectType  regType  AbstractCompiler  compiler  JSTypeRegistry  registry  StaticSlot  var  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Argument_Swapping]^if  ( varTypeType != null )  {^927^^^^^912^942^if  ( varType != null )  {^[CLASS] TypeInference BooleanOutcomePair  [METHOD] getPropertyType [RETURN_TYPE] JSType   JSType objType String propName Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  JSType  objType  propertyType  varType  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  propName  qualifiedName  ObjectType  regType  AbstractCompiler  compiler  JSTypeRegistry  registry  StaticSlot  var  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Wrong_Operator]^if  ( varType == null )  {^927^^^^^912^942^if  ( varType != null )  {^[CLASS] TypeInference BooleanOutcomePair  [METHOD] getPropertyType [RETURN_TYPE] JSType   JSType objType String propName Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  JSType  objType  propertyType  varType  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  propName  qualifiedName  ObjectType  regType  AbstractCompiler  compiler  JSTypeRegistry  registry  StaticSlot  var  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Variable_Misuse]^if  ( propertyType.equals ( getNativeType ( UNKNOWN_TYPE )  )  && var != syntacticScope.getSlot ( qualifiedName )  )  {^928^929^^^^913^943^if  ( varType.equals ( getNativeType ( UNKNOWN_TYPE )  )  && var != syntacticScope.getSlot ( qualifiedName )  )  {^[CLASS] TypeInference BooleanOutcomePair  [METHOD] getPropertyType [RETURN_TYPE] JSType   JSType objType String propName Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  JSType  objType  propertyType  varType  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  propName  qualifiedName  ObjectType  regType  AbstractCompiler  compiler  JSTypeRegistry  registry  StaticSlot  var  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Variable_Misuse]^if  ( varType.equals ( getNativeType ( UNKNOWN_TYPE )  )  && var != syntacticScope.getSlot ( propName )  )  {^928^929^^^^913^943^if  ( varType.equals ( getNativeType ( UNKNOWN_TYPE )  )  && var != syntacticScope.getSlot ( qualifiedName )  )  {^[CLASS] TypeInference BooleanOutcomePair  [METHOD] getPropertyType [RETURN_TYPE] JSType   JSType objType String propName Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  JSType  objType  propertyType  varType  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  propName  qualifiedName  ObjectType  regType  AbstractCompiler  compiler  JSTypeRegistry  registry  StaticSlot  var  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Variable_Misuse]^if  ( varType.equals ( getNativeType ( UNKNOWN_TYPE )  )  && var != functionScope.getSlot ( qualifiedName )  )  {^928^929^^^^913^943^if  ( varType.equals ( getNativeType ( UNKNOWN_TYPE )  )  && var != syntacticScope.getSlot ( qualifiedName )  )  {^[CLASS] TypeInference BooleanOutcomePair  [METHOD] getPropertyType [RETURN_TYPE] JSType   JSType objType String propName Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  JSType  objType  propertyType  varType  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  propName  qualifiedName  ObjectType  regType  AbstractCompiler  compiler  JSTypeRegistry  registry  StaticSlot  var  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Argument_Swapping]^if  ( syntacticScope.equals ( getNativeType ( UNKNOWN_TYPE )  )  && var != varType.getSlot ( qualifiedName )  )  {^928^929^^^^913^943^if  ( varType.equals ( getNativeType ( UNKNOWN_TYPE )  )  && var != syntacticScope.getSlot ( qualifiedName )  )  {^[CLASS] TypeInference BooleanOutcomePair  [METHOD] getPropertyType [RETURN_TYPE] JSType   JSType objType String propName Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  JSType  objType  propertyType  varType  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  propName  qualifiedName  ObjectType  regType  AbstractCompiler  compiler  JSTypeRegistry  registry  StaticSlot  var  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Argument_Swapping]^if  ( syntacticScopeType.equals ( getNativeType ( UNKNOWN_TYPE )  )  && var != var.getSlot ( qualifiedName )  )  {^928^929^^^^913^943^if  ( varType.equals ( getNativeType ( UNKNOWN_TYPE )  )  && var != syntacticScope.getSlot ( qualifiedName )  )  {^[CLASS] TypeInference BooleanOutcomePair  [METHOD] getPropertyType [RETURN_TYPE] JSType   JSType objType String propName Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  JSType  objType  propertyType  varType  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  propName  qualifiedName  ObjectType  regType  AbstractCompiler  compiler  JSTypeRegistry  registry  StaticSlot  var  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Argument_Swapping]^if  ( qualifiedName.equals ( getNativeType ( UNKNOWN_TYPE )  )  && var != syntacticScope.getSlot ( varType )  )  {^928^929^^^^913^943^if  ( varType.equals ( getNativeType ( UNKNOWN_TYPE )  )  && var != syntacticScope.getSlot ( qualifiedName )  )  {^[CLASS] TypeInference BooleanOutcomePair  [METHOD] getPropertyType [RETURN_TYPE] JSType   JSType objType String propName Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  JSType  objType  propertyType  varType  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  propName  qualifiedName  ObjectType  regType  AbstractCompiler  compiler  JSTypeRegistry  registry  StaticSlot  var  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Argument_Swapping]^if  ( varType.equals ( getNativeType ( UNKNOWN_TYPE )  )  && var != qualifiedName.getSlot ( syntacticScope )  )  {^928^929^^^^913^943^if  ( varType.equals ( getNativeType ( UNKNOWN_TYPE )  )  && var != syntacticScope.getSlot ( qualifiedName )  )  {^[CLASS] TypeInference BooleanOutcomePair  [METHOD] getPropertyType [RETURN_TYPE] JSType   JSType objType String propName Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  JSType  objType  propertyType  varType  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  propName  qualifiedName  ObjectType  regType  AbstractCompiler  compiler  JSTypeRegistry  registry  StaticSlot  var  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Wrong_Operator]^if  ( varType.equals ( getNativeType ( UNKNOWN_TYPE )  )  || var != syntacticScope.getSlot ( qualifiedName )  )  {^928^929^^^^913^943^if  ( varType.equals ( getNativeType ( UNKNOWN_TYPE )  )  && var != syntacticScope.getSlot ( qualifiedName )  )  {^[CLASS] TypeInference BooleanOutcomePair  [METHOD] getPropertyType [RETURN_TYPE] JSType   JSType objType String propName Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  JSType  objType  propertyType  varType  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  propName  qualifiedName  ObjectType  regType  AbstractCompiler  compiler  JSTypeRegistry  registry  StaticSlot  var  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Wrong_Operator]^if  ( varType.equals ( getNativeType ( UNKNOWN_TYPE )  )  && var == syntacticScope.getSlot ( qualifiedName )  )  {^928^929^^^^913^943^if  ( varType.equals ( getNativeType ( UNKNOWN_TYPE )  )  && var != syntacticScope.getSlot ( qualifiedName )  )  {^[CLASS] TypeInference BooleanOutcomePair  [METHOD] getPropertyType [RETURN_TYPE] JSType   JSType objType String propName Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  JSType  objType  propertyType  varType  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  propName  qualifiedName  ObjectType  regType  AbstractCompiler  compiler  JSTypeRegistry  registry  StaticSlot  var  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Variable_Misuse]^return propertyType;^934^^^^^928^935^return varType;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] getPropertyType [RETURN_TYPE] JSType   JSType objType String propName Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  JSType  objType  propertyType  varType  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  propName  qualifiedName  ObjectType  regType  AbstractCompiler  compiler  JSTypeRegistry  registry  StaticSlot  var  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Variable_Misuse]^return propertyType;^934^^^^^919^949^return varType;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] getPropertyType [RETURN_TYPE] JSType   JSType objType String propName Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  JSType  objType  propertyType  varType  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  propName  qualifiedName  ObjectType  regType  AbstractCompiler  compiler  JSTypeRegistry  registry  StaticSlot  var  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Variable_Misuse]^var != syntacticScope.getSlot ( propName )  )  {^929^^^^^914^944^var != syntacticScope.getSlot ( qualifiedName )  )  {^[CLASS] TypeInference BooleanOutcomePair  [METHOD] getPropertyType [RETURN_TYPE] JSType   JSType objType String propName Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  JSType  objType  propertyType  varType  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  propName  qualifiedName  ObjectType  regType  AbstractCompiler  compiler  JSTypeRegistry  registry  StaticSlot  var  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Variable_Misuse]^var != functionScope.getSlot ( qualifiedName )  )  {^929^^^^^914^944^var != syntacticScope.getSlot ( qualifiedName )  )  {^[CLASS] TypeInference BooleanOutcomePair  [METHOD] getPropertyType [RETURN_TYPE] JSType   JSType objType String propName Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  JSType  objType  propertyType  varType  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  propName  qualifiedName  ObjectType  regType  AbstractCompiler  compiler  JSTypeRegistry  registry  StaticSlot  var  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Argument_Swapping]^var != qualifiedName.getSlot ( syntacticScope )  )  {^929^^^^^914^944^var != syntacticScope.getSlot ( qualifiedName )  )  {^[CLASS] TypeInference BooleanOutcomePair  [METHOD] getPropertyType [RETURN_TYPE] JSType   JSType objType String propName Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  JSType  objType  propertyType  varType  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  propName  qualifiedName  ObjectType  regType  AbstractCompiler  compiler  JSTypeRegistry  registry  StaticSlot  var  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Argument_Swapping]^if  ( qualifiedNameType.equals ( getNativeType ( UNKNOWN_TYPE )  )  && var != syntacticScope.getSlot ( var )  )  {^928^929^^^^913^943^if  ( varType.equals ( getNativeType ( UNKNOWN_TYPE )  )  && var != syntacticScope.getSlot ( qualifiedName )  )  {^[CLASS] TypeInference BooleanOutcomePair  [METHOD] getPropertyType [RETURN_TYPE] JSType   JSType objType String propName Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  JSType  objType  propertyType  varType  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  propName  qualifiedName  ObjectType  regType  AbstractCompiler  compiler  JSTypeRegistry  registry  StaticSlot  var  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Wrong_Operator]^if  ( varType.equals ( getNativeType ( UNKNOWN_TYPE )  )  && var >= syntacticScope.getSlot ( qualifiedName )  )  {^928^929^^^^913^943^if  ( varType.equals ( getNativeType ( UNKNOWN_TYPE )  )  && var != syntacticScope.getSlot ( qualifiedName )  )  {^[CLASS] TypeInference BooleanOutcomePair  [METHOD] getPropertyType [RETURN_TYPE] JSType   JSType objType String propName Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  JSType  objType  propertyType  varType  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  propName  qualifiedName  ObjectType  regType  AbstractCompiler  compiler  JSTypeRegistry  registry  StaticSlot  var  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Argument_Swapping]^if  ( var != null )  {^927^^^^^912^942^if  ( varType != null )  {^[CLASS] TypeInference BooleanOutcomePair  [METHOD] getPropertyType [RETURN_TYPE] JSType   JSType objType String propName Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  JSType  objType  propertyType  varType  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  propName  qualifiedName  ObjectType  regType  AbstractCompiler  compiler  JSTypeRegistry  registry  StaticSlot  var  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Argument_Swapping]^if  ( var.equals ( getNativeType ( UNKNOWN_TYPE )  )  && varType != syntacticScope.getSlot ( qualifiedName )  )  {^928^929^^^^913^943^if  ( varType.equals ( getNativeType ( UNKNOWN_TYPE )  )  && var != syntacticScope.getSlot ( qualifiedName )  )  {^[CLASS] TypeInference BooleanOutcomePair  [METHOD] getPropertyType [RETURN_TYPE] JSType   JSType objType String propName Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  JSType  objType  propertyType  varType  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  propName  qualifiedName  ObjectType  regType  AbstractCompiler  compiler  JSTypeRegistry  registry  StaticSlot  var  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Argument_Swapping]^if  ( varTypeType.equals ( getNativeType ( UNKNOWN_TYPE )  )  && var != syntacticScope.getSlot ( qualifiedName )  )  {^928^929^^^^913^943^if  ( varType.equals ( getNativeType ( UNKNOWN_TYPE )  )  && var != syntacticScope.getSlot ( qualifiedName )  )  {^[CLASS] TypeInference BooleanOutcomePair  [METHOD] getPropertyType [RETURN_TYPE] JSType   JSType objType String propName Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  JSType  objType  propertyType  varType  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  propName  qualifiedName  ObjectType  regType  AbstractCompiler  compiler  JSTypeRegistry  registry  StaticSlot  var  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Variable_Misuse]^JSType nullType = var.getType (  ) ;^926^^^^^911^941^JSType varType = var.getType (  ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] getPropertyType [RETURN_TYPE] JSType   JSType objType String propName Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  JSType  objType  propertyType  varType  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  propName  qualifiedName  ObjectType  regType  AbstractCompiler  compiler  JSTypeRegistry  registry  StaticSlot  var  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Variable_Misuse]^if  ( varType != null )  {^940^^^^^925^955^if  ( objType != null )  {^[CLASS] TypeInference BooleanOutcomePair  [METHOD] getPropertyType [RETURN_TYPE] JSType   JSType objType String propName Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  JSType  objType  propertyType  varType  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  propName  qualifiedName  ObjectType  regType  AbstractCompiler  compiler  JSTypeRegistry  registry  StaticSlot  var  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Wrong_Operator]^if  ( objType == null )  {^940^^^^^925^955^if  ( objType != null )  {^[CLASS] TypeInference BooleanOutcomePair  [METHOD] getPropertyType [RETURN_TYPE] JSType   JSType objType String propName Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  JSType  objType  propertyType  varType  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  propName  qualifiedName  ObjectType  regType  AbstractCompiler  compiler  JSTypeRegistry  registry  StaticSlot  var  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Variable_Misuse]^propertyType = varType.findPropertyType ( propName ) ;^941^^^^^926^956^propertyType = objType.findPropertyType ( propName ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] getPropertyType [RETURN_TYPE] JSType   JSType objType String propName Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  JSType  objType  propertyType  varType  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  propName  qualifiedName  ObjectType  regType  AbstractCompiler  compiler  JSTypeRegistry  registry  StaticSlot  var  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Argument_Swapping]^propertyType = propName.findPropertyType ( objType ) ;^941^^^^^926^956^propertyType = objType.findPropertyType ( propName ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] getPropertyType [RETURN_TYPE] JSType   JSType objType String propName Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  JSType  objType  propertyType  varType  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  propName  qualifiedName  ObjectType  regType  AbstractCompiler  compiler  JSTypeRegistry  registry  StaticSlot  var  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Variable_Misuse]^propertyType = objType.findPropertyType ( qualifiedName ) ;^941^^^^^926^956^propertyType = objType.findPropertyType ( propName ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] getPropertyType [RETURN_TYPE] JSType   JSType objType String propName Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  JSType  objType  propertyType  varType  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  propName  qualifiedName  ObjectType  regType  AbstractCompiler  compiler  JSTypeRegistry  registry  StaticSlot  var  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Variable_Misuse]^if  (  ( varType == null || propertyType.isUnknownType (  )  )  && qualifiedName != null )  {^944^945^^^^929^959^if  (  ( propertyType == null || propertyType.isUnknownType (  )  )  && qualifiedName != null )  {^[CLASS] TypeInference BooleanOutcomePair  [METHOD] getPropertyType [RETURN_TYPE] JSType   JSType objType String propName Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  JSType  objType  propertyType  varType  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  propName  qualifiedName  ObjectType  regType  AbstractCompiler  compiler  JSTypeRegistry  registry  StaticSlot  var  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Variable_Misuse]^if  (  ( propertyType == null || propertyType.isUnknownType (  )  )  && propName != null )  {^944^945^^^^929^959^if  (  ( propertyType == null || propertyType.isUnknownType (  )  )  && qualifiedName != null )  {^[CLASS] TypeInference BooleanOutcomePair  [METHOD] getPropertyType [RETURN_TYPE] JSType   JSType objType String propName Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  JSType  objType  propertyType  varType  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  propName  qualifiedName  ObjectType  regType  AbstractCompiler  compiler  JSTypeRegistry  registry  StaticSlot  var  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Wrong_Operator]^if  (  ( propertyType == null || propertyType.isUnknownType (  )  )  || qualifiedName != null )  {^944^945^^^^929^959^if  (  ( propertyType == null || propertyType.isUnknownType (  )  )  && qualifiedName != null )  {^[CLASS] TypeInference BooleanOutcomePair  [METHOD] getPropertyType [RETURN_TYPE] JSType   JSType objType String propName Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  JSType  objType  propertyType  varType  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  propName  qualifiedName  ObjectType  regType  AbstractCompiler  compiler  JSTypeRegistry  registry  StaticSlot  var  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Wrong_Operator]^if  (  ( propertyType == null && propertyType.isUnknownType (  )  )  && qualifiedName != null )  {^944^945^^^^929^959^if  (  ( propertyType == null || propertyType.isUnknownType (  )  )  && qualifiedName != null )  {^[CLASS] TypeInference BooleanOutcomePair  [METHOD] getPropertyType [RETURN_TYPE] JSType   JSType objType String propName Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  JSType  objType  propertyType  varType  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  propName  qualifiedName  ObjectType  regType  AbstractCompiler  compiler  JSTypeRegistry  registry  StaticSlot  var  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Wrong_Operator]^if  (  ( propertyType != null || propertyType.isUnknownType (  )  )  && qualifiedName != null )  {^944^945^^^^929^959^if  (  ( propertyType == null || propertyType.isUnknownType (  )  )  && qualifiedName != null )  {^[CLASS] TypeInference BooleanOutcomePair  [METHOD] getPropertyType [RETURN_TYPE] JSType   JSType objType String propName Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  JSType  objType  propertyType  varType  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  propName  qualifiedName  ObjectType  regType  AbstractCompiler  compiler  JSTypeRegistry  registry  StaticSlot  var  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Wrong_Operator]^if  (  ( propertyType == null || propertyType.isUnknownType (  )  )  && qualifiedName == null )  {^944^945^^^^929^959^if  (  ( propertyType == null || propertyType.isUnknownType (  )  )  && qualifiedName != null )  {^[CLASS] TypeInference BooleanOutcomePair  [METHOD] getPropertyType [RETURN_TYPE] JSType   JSType objType String propName Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  JSType  objType  propertyType  varType  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  propName  qualifiedName  ObjectType  regType  AbstractCompiler  compiler  JSTypeRegistry  registry  StaticSlot  var  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Wrong_Operator]^if  ( regType == null )  {^948^^^^^944^951^if  ( regType != null )  {^[CLASS] TypeInference BooleanOutcomePair  [METHOD] getPropertyType [RETURN_TYPE] JSType   JSType objType String propName Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  JSType  objType  propertyType  varType  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  propName  qualifiedName  ObjectType  regType  AbstractCompiler  compiler  JSTypeRegistry  registry  StaticSlot  var  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Variable_Misuse]^ObjectType regType = ObjectType.cast ( registry.getType ( propName )  ) ;^947^^^^^944^951^ObjectType regType = ObjectType.cast ( registry.getType ( qualifiedName )  ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] getPropertyType [RETURN_TYPE] JSType   JSType objType String propName Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  JSType  objType  propertyType  varType  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  propName  qualifiedName  ObjectType  regType  AbstractCompiler  compiler  JSTypeRegistry  registry  StaticSlot  var  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Argument_Swapping]^ObjectType regType = ObjectType.cast ( qualifiedName.getType ( registry )  ) ;^947^^^^^944^951^ObjectType regType = ObjectType.cast ( registry.getType ( qualifiedName )  ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] getPropertyType [RETURN_TYPE] JSType   JSType objType String propName Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  JSType  objType  propertyType  varType  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  propName  qualifiedName  ObjectType  regType  AbstractCompiler  compiler  JSTypeRegistry  registry  StaticSlot  var  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Wrong_Operator]^if  ( regType == null )  {^948^^^^^933^963^if  ( regType != null )  {^[CLASS] TypeInference BooleanOutcomePair  [METHOD] getPropertyType [RETURN_TYPE] JSType   JSType objType String propName Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  JSType  objType  propertyType  varType  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  propName  qualifiedName  ObjectType  regType  AbstractCompiler  compiler  JSTypeRegistry  registry  StaticSlot  var  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Variable_Misuse]^ObjectType regType = ObjectType.cast ( registry.getType ( propName )  ) ;^947^^^^^932^962^ObjectType regType = ObjectType.cast ( registry.getType ( qualifiedName )  ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] getPropertyType [RETURN_TYPE] JSType   JSType objType String propName Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  JSType  objType  propertyType  varType  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  propName  qualifiedName  ObjectType  regType  AbstractCompiler  compiler  JSTypeRegistry  registry  StaticSlot  var  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Argument_Swapping]^ObjectType regType = ObjectType.cast ( qualifiedName.getType ( registry )  ) ;^947^^^^^932^962^ObjectType regType = ObjectType.cast ( registry.getType ( qualifiedName )  ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] getPropertyType [RETURN_TYPE] JSType   JSType objType String propName Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  JSType  objType  propertyType  varType  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  propName  qualifiedName  ObjectType  regType  AbstractCompiler  compiler  JSTypeRegistry  registry  StaticSlot  var  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Variable_Misuse]^return varType;^953^^^^^938^968^return propertyType;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] getPropertyType [RETURN_TYPE] JSType   JSType objType String propName Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  JSType  objType  propertyType  varType  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  propName  qualifiedName  ObjectType  regType  AbstractCompiler  compiler  JSTypeRegistry  registry  StaticSlot  var  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Variable_Misuse]^return traverseShortCircuitingBinOp ( n, trueScope, false ) ;^957^^^^^956^958^return traverseShortCircuitingBinOp ( n, scope, false ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseOr [RETURN_TYPE] TypeInference$BooleanOutcomePair   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Argument_Swapping]^return traverseShortCircuitingBinOp ( scope, n, false ) ;^957^^^^^956^958^return traverseShortCircuitingBinOp ( n, scope, false ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseOr [RETURN_TYPE] TypeInference$BooleanOutcomePair   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Wrong_Literal]^return traverseShortCircuitingBinOp ( n, scope, true ) ;^957^^^^^956^958^return traverseShortCircuitingBinOp ( n, scope, false ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseOr [RETURN_TYPE] TypeInference$BooleanOutcomePair   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Variable_Misuse]^Node left = right.getFirstChild (  ) ;^962^^^^^947^977^Node left = n.getFirstChild (  ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseShortCircuitingBinOp [RETURN_TYPE] TypeInference$BooleanOutcomePair   Node n FlowScope scope boolean condition [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  condition  JSType  leftType  rightType  type  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanOutcomePair  leftLiterals  literals  rightLiterals  Node  left  n  right  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Variable_Misuse]^Node right = left.getLastChild (  ) ;^963^^^^^948^978^Node right = n.getLastChild (  ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseShortCircuitingBinOp [RETURN_TYPE] TypeInference$BooleanOutcomePair   Node n FlowScope scope boolean condition [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  condition  JSType  leftType  rightType  type  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanOutcomePair  leftLiterals  literals  rightLiterals  Node  left  n  right  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Variable_Misuse]^Node right = right.getLastChild (  ) ;^963^^^^^948^978^Node right = n.getLastChild (  ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseShortCircuitingBinOp [RETURN_TYPE] TypeInference$BooleanOutcomePair   Node n FlowScope scope boolean condition [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  condition  JSType  leftType  rightType  type  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanOutcomePair  leftLiterals  literals  rightLiterals  Node  left  n  right  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Variable_Misuse]^BooleanOutcomePair rightLiterals = traverseWithinShortCircuitingBinOp ( left, scope.createChildFlowScope (  )  ) ;^966^967^968^^^951^981^BooleanOutcomePair leftLiterals = traverseWithinShortCircuitingBinOp ( left, scope.createChildFlowScope (  )  ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseShortCircuitingBinOp [RETURN_TYPE] TypeInference$BooleanOutcomePair   Node n FlowScope scope boolean condition [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  condition  JSType  leftType  rightType  type  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanOutcomePair  leftLiterals  literals  rightLiterals  Node  left  n  right  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Variable_Misuse]^BooleanOutcomePair leftLiterals = traverseWithinShortCircuitingBinOp ( left, leftScope.createChildFlowScope (  )  ) ;^966^967^968^^^951^981^BooleanOutcomePair leftLiterals = traverseWithinShortCircuitingBinOp ( left, scope.createChildFlowScope (  )  ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseShortCircuitingBinOp [RETURN_TYPE] TypeInference$BooleanOutcomePair   Node n FlowScope scope boolean condition [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  condition  JSType  leftType  rightType  type  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanOutcomePair  leftLiterals  literals  rightLiterals  Node  left  n  right  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Argument_Swapping]^BooleanOutcomePair scopeLiterals = traverseWithinShortCircuitingBinOp ( left, left.createChildFlowScope (  )  ) ;^966^967^968^^^951^981^BooleanOutcomePair leftLiterals = traverseWithinShortCircuitingBinOp ( left, scope.createChildFlowScope (  )  ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseShortCircuitingBinOp [RETURN_TYPE] TypeInference$BooleanOutcomePair   Node n FlowScope scope boolean condition [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  condition  JSType  leftType  rightType  type  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanOutcomePair  leftLiterals  literals  rightLiterals  Node  left  n  right  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Variable_Misuse]^traverseWithinShortCircuitingBinOp ( right, scope.createChildFlowScope (  )  ) ;^967^968^^^^952^982^traverseWithinShortCircuitingBinOp ( left, scope.createChildFlowScope (  )  ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseShortCircuitingBinOp [RETURN_TYPE] TypeInference$BooleanOutcomePair   Node n FlowScope scope boolean condition [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  condition  JSType  leftType  rightType  type  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanOutcomePair  leftLiterals  literals  rightLiterals  Node  left  n  right  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Argument_Swapping]^traverseWithinShortCircuitingBinOp ( scope, left.createChildFlowScope (  )  ) ;^967^968^^^^952^982^traverseWithinShortCircuitingBinOp ( left, scope.createChildFlowScope (  )  ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseShortCircuitingBinOp [RETURN_TYPE] TypeInference$BooleanOutcomePair   Node n FlowScope scope boolean condition [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  condition  JSType  leftType  rightType  type  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanOutcomePair  leftLiterals  literals  rightLiterals  Node  left  n  right  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Variable_Misuse]^JSType rightType = left.getJSType (  ) ;^969^^^^^954^984^JSType leftType = left.getJSType (  ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseShortCircuitingBinOp [RETURN_TYPE] TypeInference$BooleanOutcomePair   Node n FlowScope scope boolean condition [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  condition  JSType  leftType  rightType  type  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanOutcomePair  leftLiterals  literals  rightLiterals  Node  left  n  right  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Variable_Misuse]^FlowScope rightScope = reverseInterpreter. getPreciserScopeKnowingConditionOutcome ( right, leftLiterals.getOutcomeFlowScope ( left.getType (  ) , condition ) , condition ) ;^973^974^975^976^^958^988^FlowScope rightScope = reverseInterpreter. getPreciserScopeKnowingConditionOutcome ( left, leftLiterals.getOutcomeFlowScope ( left.getType (  ) , condition ) , condition ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseShortCircuitingBinOp [RETURN_TYPE] TypeInference$BooleanOutcomePair   Node n FlowScope scope boolean condition [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  condition  JSType  leftType  rightType  type  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanOutcomePair  leftLiterals  literals  rightLiterals  Node  left  n  right  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Variable_Misuse]^FlowScope rightScope = reverseInterpreter. getPreciserScopeKnowingConditionOutcome ( left, rightLiterals.getOutcomeFlowScope ( left.getType (  ) , condition ) , condition ) ;^973^974^975^976^^958^988^FlowScope rightScope = reverseInterpreter. getPreciserScopeKnowingConditionOutcome ( left, leftLiterals.getOutcomeFlowScope ( left.getType (  ) , condition ) , condition ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseShortCircuitingBinOp [RETURN_TYPE] TypeInference$BooleanOutcomePair   Node n FlowScope scope boolean condition [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  condition  JSType  leftType  rightType  type  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanOutcomePair  leftLiterals  literals  rightLiterals  Node  left  n  right  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Argument_Swapping]^FlowScope rightScope = reverseInterpreter. getPreciserScopeKnowingConditionOutcome ( condition, leftLiterals.getOutcomeFlowScope ( left.getType (  ) , left ) , condition ) ;^973^974^975^976^^958^988^FlowScope rightScope = reverseInterpreter. getPreciserScopeKnowingConditionOutcome ( left, leftLiterals.getOutcomeFlowScope ( left.getType (  ) , condition ) , condition ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseShortCircuitingBinOp [RETURN_TYPE] TypeInference$BooleanOutcomePair   Node n FlowScope scope boolean condition [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  condition  JSType  leftType  rightType  type  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanOutcomePair  leftLiterals  literals  rightLiterals  Node  left  n  right  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Argument_Swapping]^FlowScope rightScope = reverseInterpreter. getPreciserScopeKnowingConditionOutcome ( left, condition.getOutcomeFlowScope ( left.getType (  ) , leftLiterals ) , condition ) ;^973^974^975^976^^958^988^FlowScope rightScope = reverseInterpreter. getPreciserScopeKnowingConditionOutcome ( left, leftLiterals.getOutcomeFlowScope ( left.getType (  ) , condition ) , condition ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseShortCircuitingBinOp [RETURN_TYPE] TypeInference$BooleanOutcomePair   Node n FlowScope scope boolean condition [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  condition  JSType  leftType  rightType  type  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanOutcomePair  leftLiterals  literals  rightLiterals  Node  left  n  right  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Argument_Swapping]^FlowScope rightScope = left. getPreciserScopeKnowingConditionOutcome ( reverseInterpreter, leftLiterals.getOutcomeFlowScope ( left.getType (  ) , condition ) , condition ) ;^973^974^975^976^^958^988^FlowScope rightScope = reverseInterpreter. getPreciserScopeKnowingConditionOutcome ( left, leftLiterals.getOutcomeFlowScope ( left.getType (  ) , condition ) , condition ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseShortCircuitingBinOp [RETURN_TYPE] TypeInference$BooleanOutcomePair   Node n FlowScope scope boolean condition [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  condition  JSType  leftType  rightType  type  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanOutcomePair  leftLiterals  literals  rightLiterals  Node  left  n  right  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Argument_Swapping]^FlowScope rightScope = leftLiterals. getPreciserScopeKnowingConditionOutcome ( left, reverseInterpreter.getOutcomeFlowScope ( left.getType (  ) , condition ) , condition ) ;^973^974^975^976^^958^988^FlowScope rightScope = reverseInterpreter. getPreciserScopeKnowingConditionOutcome ( left, leftLiterals.getOutcomeFlowScope ( left.getType (  ) , condition ) , condition ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseShortCircuitingBinOp [RETURN_TYPE] TypeInference$BooleanOutcomePair   Node n FlowScope scope boolean condition [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  condition  JSType  leftType  rightType  type  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanOutcomePair  leftLiterals  literals  rightLiterals  Node  left  n  right  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Variable_Misuse]^left, rightLiterals.getOutcomeFlowScope ( left.getType (  ) , condition ) , condition ) ;^975^976^^^^960^990^left, leftLiterals.getOutcomeFlowScope ( left.getType (  ) , condition ) , condition ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseShortCircuitingBinOp [RETURN_TYPE] TypeInference$BooleanOutcomePair   Node n FlowScope scope boolean condition [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  condition  JSType  leftType  rightType  type  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanOutcomePair  leftLiterals  literals  rightLiterals  Node  left  n  right  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Argument_Swapping]^left, condition.getOutcomeFlowScope ( left.getType (  ) , leftLiterals ) , condition ) ;^975^976^^^^960^990^left, leftLiterals.getOutcomeFlowScope ( left.getType (  ) , condition ) , condition ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseShortCircuitingBinOp [RETURN_TYPE] TypeInference$BooleanOutcomePair   Node n FlowScope scope boolean condition [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  condition  JSType  leftType  rightType  type  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanOutcomePair  leftLiterals  literals  rightLiterals  Node  left  n  right  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Argument_Swapping]^left, leftLiteralsLiterals.getOutcomeFlowScope ( left.getType (  ) , condition ) , condition ) ;^975^976^^^^960^990^left, leftLiterals.getOutcomeFlowScope ( left.getType (  ) , condition ) , condition ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseShortCircuitingBinOp [RETURN_TYPE] TypeInference$BooleanOutcomePair   Node n FlowScope scope boolean condition [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  condition  JSType  leftType  rightType  type  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanOutcomePair  leftLiterals  literals  rightLiterals  Node  left  n  right  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Argument_Swapping]^left, conditionLiterals.getOutcomeFlowScope ( left.getType (  ) , left ) , condition ) ;^975^976^^^^960^990^left, leftLiterals.getOutcomeFlowScope ( left.getType (  ) , condition ) , condition ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseShortCircuitingBinOp [RETURN_TYPE] TypeInference$BooleanOutcomePair   Node n FlowScope scope boolean condition [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  condition  JSType  leftType  rightType  type  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanOutcomePair  leftLiterals  literals  rightLiterals  Node  left  n  right  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Variable_Misuse]^BooleanOutcomePair nLiterals = traverseWithinShortCircuitingBinOp ( right, rightScope.createChildFlowScope (  )  ) ;^979^980^981^^^964^994^BooleanOutcomePair rightLiterals = traverseWithinShortCircuitingBinOp ( right, rightScope.createChildFlowScope (  )  ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseShortCircuitingBinOp [RETURN_TYPE] TypeInference$BooleanOutcomePair   Node n FlowScope scope boolean condition [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  condition  JSType  leftType  rightType  type  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanOutcomePair  leftLiterals  literals  rightLiterals  Node  left  n  right  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Variable_Misuse]^BooleanOutcomePair rightLiterals = traverseWithinShortCircuitingBinOp ( right, output.createChildFlowScope (  )  ) ;^979^980^981^^^964^994^BooleanOutcomePair rightLiterals = traverseWithinShortCircuitingBinOp ( right, rightScope.createChildFlowScope (  )  ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseShortCircuitingBinOp [RETURN_TYPE] TypeInference$BooleanOutcomePair   Node n FlowScope scope boolean condition [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  condition  JSType  leftType  rightType  type  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanOutcomePair  leftLiterals  literals  rightLiterals  Node  left  n  right  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Argument_Swapping]^BooleanOutcomePair rightScopeLiterals = traverseWithinShortCircuitingBinOp ( right, right.createChildFlowScope (  )  ) ;^979^980^981^^^964^994^BooleanOutcomePair rightLiterals = traverseWithinShortCircuitingBinOp ( right, rightScope.createChildFlowScope (  )  ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseShortCircuitingBinOp [RETURN_TYPE] TypeInference$BooleanOutcomePair   Node n FlowScope scope boolean condition [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  condition  JSType  leftType  rightType  type  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanOutcomePair  leftLiterals  literals  rightLiterals  Node  left  n  right  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Variable_Misuse]^traverseWithinShortCircuitingBinOp ( n, rightScope.createChildFlowScope (  )  ) ;^980^981^^^^965^995^traverseWithinShortCircuitingBinOp ( right, rightScope.createChildFlowScope (  )  ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseShortCircuitingBinOp [RETURN_TYPE] TypeInference$BooleanOutcomePair   Node n FlowScope scope boolean condition [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  condition  JSType  leftType  rightType  type  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanOutcomePair  leftLiterals  literals  rightLiterals  Node  left  n  right  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Variable_Misuse]^traverseWithinShortCircuitingBinOp ( right, output.createChildFlowScope (  )  ) ;^980^981^^^^965^995^traverseWithinShortCircuitingBinOp ( right, rightScope.createChildFlowScope (  )  ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseShortCircuitingBinOp [RETURN_TYPE] TypeInference$BooleanOutcomePair   Node n FlowScope scope boolean condition [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  condition  JSType  leftType  rightType  type  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanOutcomePair  leftLiterals  literals  rightLiterals  Node  left  n  right  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Argument_Swapping]^traverseWithinShortCircuitingBinOp ( rightScope, right.createChildFlowScope (  )  ) ;^980^981^^^^965^995^traverseWithinShortCircuitingBinOp ( right, rightScope.createChildFlowScope (  )  ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseShortCircuitingBinOp [RETURN_TYPE] TypeInference$BooleanOutcomePair   Node n FlowScope scope boolean condition [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  condition  JSType  leftType  rightType  type  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanOutcomePair  leftLiterals  literals  rightLiterals  Node  left  n  right  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Variable_Misuse]^right, scope.createChildFlowScope (  )  ) ;^981^^^^^966^996^right, rightScope.createChildFlowScope (  )  ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseShortCircuitingBinOp [RETURN_TYPE] TypeInference$BooleanOutcomePair   Node n FlowScope scope boolean condition [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  condition  JSType  leftType  rightType  type  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanOutcomePair  leftLiterals  literals  rightLiterals  Node  left  n  right  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Variable_Misuse]^JSType nType = right.getJSType (  ) ;^982^^^^^967^997^JSType rightType = right.getJSType (  ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseShortCircuitingBinOp [RETURN_TYPE] TypeInference$BooleanOutcomePair   Node n FlowScope scope boolean condition [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  condition  JSType  leftType  rightType  type  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanOutcomePair  leftLiterals  literals  rightLiterals  Node  left  n  right  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Variable_Misuse]^if  ( type != null && rightType != null )  {^986^^^^^971^1001^if  ( leftType != null && rightType != null )  {^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseShortCircuitingBinOp [RETURN_TYPE] TypeInference$BooleanOutcomePair   Node n FlowScope scope boolean condition [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  condition  JSType  leftType  rightType  type  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanOutcomePair  leftLiterals  literals  rightLiterals  Node  left  n  right  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Variable_Misuse]^if  ( leftType != null && leftType != null )  {^986^^^^^971^1001^if  ( leftType != null && rightType != null )  {^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseShortCircuitingBinOp [RETURN_TYPE] TypeInference$BooleanOutcomePair   Node n FlowScope scope boolean condition [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  condition  JSType  leftType  rightType  type  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanOutcomePair  leftLiterals  literals  rightLiterals  Node  left  n  right  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Wrong_Operator]^if  ( leftType != null || rightType != null )  {^986^^^^^971^1001^if  ( leftType != null && rightType != null )  {^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseShortCircuitingBinOp [RETURN_TYPE] TypeInference$BooleanOutcomePair   Node n FlowScope scope boolean condition [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  condition  JSType  leftType  rightType  type  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanOutcomePair  leftLiterals  literals  rightLiterals  Node  left  n  right  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Wrong_Operator]^if  ( leftType == null && rightType != null )  {^986^^^^^971^1001^if  ( leftType != null && rightType != null )  {^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseShortCircuitingBinOp [RETURN_TYPE] TypeInference$BooleanOutcomePair   Node n FlowScope scope boolean condition [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  condition  JSType  leftType  rightType  type  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanOutcomePair  leftLiterals  literals  rightLiterals  Node  left  n  right  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Wrong_Operator]^if  ( leftType != null && rightType == null )  {^986^^^^^971^1001^if  ( leftType != null && rightType != null )  {^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseShortCircuitingBinOp [RETURN_TYPE] TypeInference$BooleanOutcomePair   Node n FlowScope scope boolean condition [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  condition  JSType  leftType  rightType  type  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanOutcomePair  leftLiterals  literals  rightLiterals  Node  left  n  right  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Variable_Misuse]^literals = new BooleanOutcomePair ( BooleanLiteralSet.BOTH, BooleanLiteralSet.BOTH, literals.getJoinedFlowScope (  ) , rightLiterals.getJoinedFlowScope (  )  ) ;^1014^1015^1016^1017^^999^1029^literals = new BooleanOutcomePair ( BooleanLiteralSet.BOTH, BooleanLiteralSet.BOTH, leftLiterals.getJoinedFlowScope (  ) , rightLiterals.getJoinedFlowScope (  )  ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseShortCircuitingBinOp [RETURN_TYPE] TypeInference$BooleanOutcomePair   Node n FlowScope scope boolean condition [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  condition  JSType  leftType  rightType  type  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanOutcomePair  leftLiterals  literals  rightLiterals  Node  left  n  right  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Variable_Misuse]^literals = new BooleanOutcomePair ( BooleanLiteralSet.BOTH, BooleanLiteralSet.BOTH, leftLiterals.getJoinedFlowScope (  ) , literals.getJoinedFlowScope (  )  ) ;^1014^1015^1016^1017^^999^1029^literals = new BooleanOutcomePair ( BooleanLiteralSet.BOTH, BooleanLiteralSet.BOTH, leftLiterals.getJoinedFlowScope (  ) , rightLiterals.getJoinedFlowScope (  )  ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseShortCircuitingBinOp [RETURN_TYPE] TypeInference$BooleanOutcomePair   Node n FlowScope scope boolean condition [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  condition  JSType  leftType  rightType  type  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanOutcomePair  leftLiterals  literals  rightLiterals  Node  left  n  right  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Argument_Swapping]^literals = new BooleanOutcomePair ( BooleanLiteralSet.BOTH, BooleanLiteralSet.BOTH, rightLiterals.getJoinedFlowScope (  ) , leftLiterals.getJoinedFlowScope (  )  ) ;^1014^1015^1016^1017^^999^1029^literals = new BooleanOutcomePair ( BooleanLiteralSet.BOTH, BooleanLiteralSet.BOTH, leftLiterals.getJoinedFlowScope (  ) , rightLiterals.getJoinedFlowScope (  )  ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseShortCircuitingBinOp [RETURN_TYPE] TypeInference$BooleanOutcomePair   Node n FlowScope scope boolean condition [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  condition  JSType  leftType  rightType  type  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanOutcomePair  leftLiterals  literals  rightLiterals  Node  left  n  right  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Variable_Misuse]^if  ( rightLiterals.toBooleanOutcomes == BooleanLiteralSet.get ( !condition )  )  {^988^989^^^^973^1003^if  ( leftLiterals.toBooleanOutcomes == BooleanLiteralSet.get ( !condition )  )  {^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseShortCircuitingBinOp [RETURN_TYPE] TypeInference$BooleanOutcomePair   Node n FlowScope scope boolean condition [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  condition  JSType  leftType  rightType  type  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanOutcomePair  leftLiterals  literals  rightLiterals  Node  left  n  right  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Variable_Misuse]^if  ( toBooleanOutcomes == BooleanLiteralSet.get ( !condition )  )  {^988^989^^^^973^1003^if  ( leftLiterals.toBooleanOutcomes == BooleanLiteralSet.get ( !condition )  )  {^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseShortCircuitingBinOp [RETURN_TYPE] TypeInference$BooleanOutcomePair   Node n FlowScope scope boolean condition [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  condition  JSType  leftType  rightType  type  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanOutcomePair  leftLiterals  literals  rightLiterals  Node  left  n  right  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Wrong_Operator]^if  ( leftLiterals.toBooleanOutcomes >= BooleanLiteralSet.get ( !condition )  )  {^988^989^^^^973^1003^if  ( leftLiterals.toBooleanOutcomes == BooleanLiteralSet.get ( !condition )  )  {^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseShortCircuitingBinOp [RETURN_TYPE] TypeInference$BooleanOutcomePair   Node n FlowScope scope boolean condition [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  condition  JSType  leftType  rightType  type  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanOutcomePair  leftLiterals  literals  rightLiterals  Node  left  n  right  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Variable_Misuse]^type = leftType.getLeastSupertype ( type ) ;^997^^^^^988^1000^type = leftType.getLeastSupertype ( rightType ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseShortCircuitingBinOp [RETURN_TYPE] TypeInference$BooleanOutcomePair   Node n FlowScope scope boolean condition [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  condition  JSType  leftType  rightType  type  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanOutcomePair  leftLiterals  literals  rightLiterals  Node  left  n  right  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Argument_Swapping]^type = rightType.getLeastSupertype ( leftType ) ;^997^^^^^988^1000^type = leftType.getLeastSupertype ( rightType ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseShortCircuitingBinOp [RETURN_TYPE] TypeInference$BooleanOutcomePair   Node n FlowScope scope boolean condition [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  condition  JSType  leftType  rightType  type  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanOutcomePair  leftLiterals  literals  rightLiterals  Node  left  n  right  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Variable_Misuse]^literals = getBooleanOutcomePair ( literals, rightLiterals, condition ) ;^998^999^^^^988^1000^literals = getBooleanOutcomePair ( leftLiterals, rightLiterals, condition ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseShortCircuitingBinOp [RETURN_TYPE] TypeInference$BooleanOutcomePair   Node n FlowScope scope boolean condition [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  condition  JSType  leftType  rightType  type  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanOutcomePair  leftLiterals  literals  rightLiterals  Node  left  n  right  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Variable_Misuse]^literals = getBooleanOutcomePair ( leftLiterals, literals, condition ) ;^998^999^^^^988^1000^literals = getBooleanOutcomePair ( leftLiterals, rightLiterals, condition ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseShortCircuitingBinOp [RETURN_TYPE] TypeInference$BooleanOutcomePair   Node n FlowScope scope boolean condition [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  condition  JSType  leftType  rightType  type  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanOutcomePair  leftLiterals  literals  rightLiterals  Node  left  n  right  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Argument_Swapping]^literals = getBooleanOutcomePair ( rightLiterals, leftLiterals, condition ) ;^998^999^^^^988^1000^literals = getBooleanOutcomePair ( leftLiterals, rightLiterals, condition ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseShortCircuitingBinOp [RETURN_TYPE] TypeInference$BooleanOutcomePair   Node n FlowScope scope boolean condition [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  condition  JSType  leftType  rightType  type  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanOutcomePair  leftLiterals  literals  rightLiterals  Node  left  n  right  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Argument_Swapping]^literals = getBooleanOutcomePair ( condition, rightLiterals, leftLiterals ) ;^998^999^^^^988^1000^literals = getBooleanOutcomePair ( leftLiterals, rightLiterals, condition ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseShortCircuitingBinOp [RETURN_TYPE] TypeInference$BooleanOutcomePair   Node n FlowScope scope boolean condition [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  condition  JSType  leftType  rightType  type  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanOutcomePair  leftLiterals  literals  rightLiterals  Node  left  n  right  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Variable_Misuse]^type = type.getLeastSupertype ( rightType ) ;^997^^^^^988^1000^type = leftType.getLeastSupertype ( rightType ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseShortCircuitingBinOp [RETURN_TYPE] TypeInference$BooleanOutcomePair   Node n FlowScope scope boolean condition [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  condition  JSType  leftType  rightType  type  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanOutcomePair  leftLiterals  literals  rightLiterals  Node  left  n  right  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Variable_Misuse]^getBooleanOutcomePair ( rightLiterals, rightLiterals, condition ) ;^999^^^^^988^1000^getBooleanOutcomePair ( leftLiterals, rightLiterals, condition ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseShortCircuitingBinOp [RETURN_TYPE] TypeInference$BooleanOutcomePair   Node n FlowScope scope boolean condition [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  condition  JSType  leftType  rightType  type  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanOutcomePair  leftLiterals  literals  rightLiterals  Node  left  n  right  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Variable_Misuse]^getBooleanOutcomePair ( leftLiterals, literals, condition ) ;^999^^^^^988^1000^getBooleanOutcomePair ( leftLiterals, rightLiterals, condition ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseShortCircuitingBinOp [RETURN_TYPE] TypeInference$BooleanOutcomePair   Node n FlowScope scope boolean condition [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  condition  JSType  leftType  rightType  type  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanOutcomePair  leftLiterals  literals  rightLiterals  Node  left  n  right  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Argument_Swapping]^getBooleanOutcomePair ( condition, rightLiterals, leftLiterals ) ;^999^^^^^988^1000^getBooleanOutcomePair ( leftLiterals, rightLiterals, condition ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseShortCircuitingBinOp [RETURN_TYPE] TypeInference$BooleanOutcomePair   Node n FlowScope scope boolean condition [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  condition  JSType  leftType  rightType  type  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanOutcomePair  leftLiterals  literals  rightLiterals  Node  left  n  right  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Argument_Swapping]^getBooleanOutcomePair ( leftLiterals, condition, rightLiterals ) ;^999^^^^^988^1000^getBooleanOutcomePair ( leftLiterals, rightLiterals, condition ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseShortCircuitingBinOp [RETURN_TYPE] TypeInference$BooleanOutcomePair   Node n FlowScope scope boolean condition [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  condition  JSType  leftType  rightType  type  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanOutcomePair  leftLiterals  literals  rightLiterals  Node  left  n  right  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Variable_Misuse]^type = type;^992^^^^^988^1000^type = leftType;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseShortCircuitingBinOp [RETURN_TYPE] TypeInference$BooleanOutcomePair   Node n FlowScope scope boolean condition [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  condition  JSType  leftType  rightType  type  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanOutcomePair  leftLiterals  literals  rightLiterals  Node  left  n  right  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Variable_Misuse]^literals = rightLiterals;^993^^^^^988^1000^literals = leftLiterals;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseShortCircuitingBinOp [RETURN_TYPE] TypeInference$BooleanOutcomePair   Node n FlowScope scope boolean condition [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  condition  JSType  leftType  rightType  type  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanOutcomePair  leftLiterals  literals  rightLiterals  Node  left  n  right  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Variable_Misuse]^if  ( literals.booleanValues == BooleanLiteralSet.EMPTY && getNativeType ( BOOLEAN_TYPE ) .isSubtype ( rightType )  )  {^1004^1005^^^^989^1019^if  ( literals.booleanValues == BooleanLiteralSet.EMPTY && getNativeType ( BOOLEAN_TYPE ) .isSubtype ( type )  )  {^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseShortCircuitingBinOp [RETURN_TYPE] TypeInference$BooleanOutcomePair   Node n FlowScope scope boolean condition [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  condition  JSType  leftType  rightType  type  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanOutcomePair  leftLiterals  literals  rightLiterals  Node  left  n  right  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Variable_Misuse]^if  ( toBooleanOutcomes == BooleanLiteralSet.EMPTY && getNativeType ( BOOLEAN_TYPE ) .isSubtype ( type )  )  {^1004^1005^^^^989^1019^if  ( literals.booleanValues == BooleanLiteralSet.EMPTY && getNativeType ( BOOLEAN_TYPE ) .isSubtype ( type )  )  {^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseShortCircuitingBinOp [RETURN_TYPE] TypeInference$BooleanOutcomePair   Node n FlowScope scope boolean condition [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  condition  JSType  leftType  rightType  type  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanOutcomePair  leftLiterals  literals  rightLiterals  Node  left  n  right  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Wrong_Operator]^if  ( literals.booleanValues == BooleanLiteralSet.EMPTY || getNativeType ( BOOLEAN_TYPE ) .isSubtype ( type )  )  {^1004^1005^^^^989^1019^if  ( literals.booleanValues == BooleanLiteralSet.EMPTY && getNativeType ( BOOLEAN_TYPE ) .isSubtype ( type )  )  {^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseShortCircuitingBinOp [RETURN_TYPE] TypeInference$BooleanOutcomePair   Node n FlowScope scope boolean condition [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  condition  JSType  leftType  rightType  type  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanOutcomePair  leftLiterals  literals  rightLiterals  Node  left  n  right  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Wrong_Operator]^if  ( literals.booleanValues != BooleanLiteralSet.EMPTY && getNativeType ( BOOLEAN_TYPE ) .isSubtype ( type )  )  {^1004^1005^^^^989^1019^if  ( literals.booleanValues == BooleanLiteralSet.EMPTY && getNativeType ( BOOLEAN_TYPE ) .isSubtype ( type )  )  {^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseShortCircuitingBinOp [RETURN_TYPE] TypeInference$BooleanOutcomePair   Node n FlowScope scope boolean condition [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  condition  JSType  leftType  rightType  type  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanOutcomePair  leftLiterals  literals  rightLiterals  Node  left  n  right  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Variable_Misuse]^if  ( rightType instanceof UnionType )  {^1007^^^^^1004^1011^if  ( type instanceof UnionType )  {^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseShortCircuitingBinOp [RETURN_TYPE] TypeInference$BooleanOutcomePair   Node n FlowScope scope boolean condition [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  condition  JSType  leftType  rightType  type  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanOutcomePair  leftLiterals  literals  rightLiterals  Node  left  n  right  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Wrong_Operator]^if  ( type  ||  UnionType )  {^1007^^^^^1004^1011^if  ( type instanceof UnionType )  {^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseShortCircuitingBinOp [RETURN_TYPE] TypeInference$BooleanOutcomePair   Node n FlowScope scope boolean condition [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  condition  JSType  leftType  rightType  type  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanOutcomePair  leftLiterals  literals  rightLiterals  Node  left  n  right  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Variable_Misuse]^if  ( rightType instanceof UnionType )  {^1007^^^^^992^1022^if  ( type instanceof UnionType )  {^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseShortCircuitingBinOp [RETURN_TYPE] TypeInference$BooleanOutcomePair   Node n FlowScope scope boolean condition [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  condition  JSType  leftType  rightType  type  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanOutcomePair  leftLiterals  literals  rightLiterals  Node  left  n  right  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Wrong_Operator]^if  ( type  <<  UnionType )  {^1007^^^^^992^1022^if  ( type instanceof UnionType )  {^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseShortCircuitingBinOp [RETURN_TYPE] TypeInference$BooleanOutcomePair   Node n FlowScope scope boolean condition [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  condition  JSType  leftType  rightType  type  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanOutcomePair  leftLiterals  literals  rightLiterals  Node  left  n  right  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Variable_Misuse]^leftType = type.getRestrictedTypeGivenToBooleanOutcome ( !condition ) ;^987^^^^^972^1002^leftType = leftType.getRestrictedTypeGivenToBooleanOutcome ( !condition ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseShortCircuitingBinOp [RETURN_TYPE] TypeInference$BooleanOutcomePair   Node n FlowScope scope boolean condition [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  condition  JSType  leftType  rightType  type  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanOutcomePair  leftLiterals  literals  rightLiterals  Node  left  n  right  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Variable_Misuse]^type = type;^992^^^^^977^1007^type = leftType;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseShortCircuitingBinOp [RETURN_TYPE] TypeInference$BooleanOutcomePair   Node n FlowScope scope boolean condition [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  condition  JSType  leftType  rightType  type  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanOutcomePair  leftLiterals  literals  rightLiterals  Node  left  n  right  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Variable_Misuse]^literals = rightLiterals;^993^^^^^978^1008^literals = leftLiterals;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseShortCircuitingBinOp [RETURN_TYPE] TypeInference$BooleanOutcomePair   Node n FlowScope scope boolean condition [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  condition  JSType  leftType  rightType  type  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanOutcomePair  leftLiterals  literals  rightLiterals  Node  left  n  right  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Variable_Misuse]^type = type.getLeastSupertype ( rightType ) ;^997^^^^^982^1012^type = leftType.getLeastSupertype ( rightType ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseShortCircuitingBinOp [RETURN_TYPE] TypeInference$BooleanOutcomePair   Node n FlowScope scope boolean condition [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  condition  JSType  leftType  rightType  type  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanOutcomePair  leftLiterals  literals  rightLiterals  Node  left  n  right  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Variable_Misuse]^type = leftType.getLeastSupertype ( type ) ;^997^^^^^982^1012^type = leftType.getLeastSupertype ( rightType ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseShortCircuitingBinOp [RETURN_TYPE] TypeInference$BooleanOutcomePair   Node n FlowScope scope boolean condition [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  condition  JSType  leftType  rightType  type  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanOutcomePair  leftLiterals  literals  rightLiterals  Node  left  n  right  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Argument_Swapping]^type = rightType.getLeastSupertype ( leftType ) ;^997^^^^^982^1012^type = leftType.getLeastSupertype ( rightType ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseShortCircuitingBinOp [RETURN_TYPE] TypeInference$BooleanOutcomePair   Node n FlowScope scope boolean condition [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  condition  JSType  leftType  rightType  type  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanOutcomePair  leftLiterals  literals  rightLiterals  Node  left  n  right  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Variable_Misuse]^literals = getBooleanOutcomePair ( rightLiterals, rightLiterals, condition ) ;^998^999^^^^983^1013^literals = getBooleanOutcomePair ( leftLiterals, rightLiterals, condition ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseShortCircuitingBinOp [RETURN_TYPE] TypeInference$BooleanOutcomePair   Node n FlowScope scope boolean condition [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  condition  JSType  leftType  rightType  type  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanOutcomePair  leftLiterals  literals  rightLiterals  Node  left  n  right  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Argument_Swapping]^literals = getBooleanOutcomePair ( rightLiterals, leftLiterals, condition ) ;^998^999^^^^983^1013^literals = getBooleanOutcomePair ( leftLiterals, rightLiterals, condition ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseShortCircuitingBinOp [RETURN_TYPE] TypeInference$BooleanOutcomePair   Node n FlowScope scope boolean condition [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  condition  JSType  leftType  rightType  type  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanOutcomePair  leftLiterals  literals  rightLiterals  Node  left  n  right  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Argument_Swapping]^literals = getBooleanOutcomePair ( leftLiterals, condition, rightLiterals ) ;^998^999^^^^983^1013^literals = getBooleanOutcomePair ( leftLiterals, rightLiterals, condition ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseShortCircuitingBinOp [RETURN_TYPE] TypeInference$BooleanOutcomePair   Node n FlowScope scope boolean condition [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  condition  JSType  leftType  rightType  type  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanOutcomePair  leftLiterals  literals  rightLiterals  Node  left  n  right  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Variable_Misuse]^getBooleanOutcomePair ( literals, rightLiterals, condition ) ;^999^^^^^984^1014^getBooleanOutcomePair ( leftLiterals, rightLiterals, condition ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseShortCircuitingBinOp [RETURN_TYPE] TypeInference$BooleanOutcomePair   Node n FlowScope scope boolean condition [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  condition  JSType  leftType  rightType  type  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanOutcomePair  leftLiterals  literals  rightLiterals  Node  left  n  right  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Variable_Misuse]^getBooleanOutcomePair ( leftLiterals, literals, condition ) ;^999^^^^^984^1014^getBooleanOutcomePair ( leftLiterals, rightLiterals, condition ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseShortCircuitingBinOp [RETURN_TYPE] TypeInference$BooleanOutcomePair   Node n FlowScope scope boolean condition [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  condition  JSType  leftType  rightType  type  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanOutcomePair  leftLiterals  literals  rightLiterals  Node  left  n  right  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Argument_Swapping]^getBooleanOutcomePair ( rightLiterals, leftLiterals, condition ) ;^999^^^^^984^1014^getBooleanOutcomePair ( leftLiterals, rightLiterals, condition ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseShortCircuitingBinOp [RETURN_TYPE] TypeInference$BooleanOutcomePair   Node n FlowScope scope boolean condition [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  condition  JSType  leftType  rightType  type  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanOutcomePair  leftLiterals  literals  rightLiterals  Node  left  n  right  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Argument_Swapping]^getBooleanOutcomePair ( leftLiterals, condition, rightLiterals ) ;^999^^^^^984^1014^getBooleanOutcomePair ( leftLiterals, rightLiterals, condition ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseShortCircuitingBinOp [RETURN_TYPE] TypeInference$BooleanOutcomePair   Node n FlowScope scope boolean condition [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  condition  JSType  leftType  rightType  type  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanOutcomePair  leftLiterals  literals  rightLiterals  Node  left  n  right  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Variable_Misuse]^getNativeType ( BOOLEAN_TYPE ) .isSubtype ( rightType )  )  {^1005^^^^^990^1020^getNativeType ( BOOLEAN_TYPE ) .isSubtype ( type )  )  {^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseShortCircuitingBinOp [RETURN_TYPE] TypeInference$BooleanOutcomePair   Node n FlowScope scope boolean condition [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  condition  JSType  leftType  rightType  type  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanOutcomePair  leftLiterals  literals  rightLiterals  Node  left  n  right  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Wrong_Operator]^if  ( leftLiterals.toBooleanOutcomes <= BooleanLiteralSet.get ( !condition )  )  {^988^989^^^^973^1003^if  ( leftLiterals.toBooleanOutcomes == BooleanLiteralSet.get ( !condition )  )  {^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseShortCircuitingBinOp [RETURN_TYPE] TypeInference$BooleanOutcomePair   Node n FlowScope scope boolean condition [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  condition  JSType  leftType  rightType  type  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanOutcomePair  leftLiterals  literals  rightLiterals  Node  left  n  right  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Argument_Swapping]^literals = getBooleanOutcomePair ( leftLiterals, condition, rightLiterals ) ;^998^999^^^^988^1000^literals = getBooleanOutcomePair ( leftLiterals, rightLiterals, condition ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseShortCircuitingBinOp [RETURN_TYPE] TypeInference$BooleanOutcomePair   Node n FlowScope scope boolean condition [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  condition  JSType  leftType  rightType  type  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanOutcomePair  leftLiterals  literals  rightLiterals  Node  left  n  right  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Variable_Misuse]^getBooleanOutcomePair ( literals, rightLiterals, condition ) ;^999^^^^^988^1000^getBooleanOutcomePair ( leftLiterals, rightLiterals, condition ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseShortCircuitingBinOp [RETURN_TYPE] TypeInference$BooleanOutcomePair   Node n FlowScope scope boolean condition [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  condition  JSType  leftType  rightType  type  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanOutcomePair  leftLiterals  literals  rightLiterals  Node  left  n  right  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Argument_Swapping]^getBooleanOutcomePair ( rightLiterals, leftLiterals, condition ) ;^999^^^^^988^1000^getBooleanOutcomePair ( leftLiterals, rightLiterals, condition ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseShortCircuitingBinOp [RETURN_TYPE] TypeInference$BooleanOutcomePair   Node n FlowScope scope boolean condition [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  condition  JSType  leftType  rightType  type  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanOutcomePair  leftLiterals  literals  rightLiterals  Node  left  n  right  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Variable_Misuse]^if  ( rightLiterals.booleanValues == BooleanLiteralSet.EMPTY && getNativeType ( BOOLEAN_TYPE ) .isSubtype ( type )  )  {^1004^1005^^^^989^1019^if  ( literals.booleanValues == BooleanLiteralSet.EMPTY && getNativeType ( BOOLEAN_TYPE ) .isSubtype ( type )  )  {^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseShortCircuitingBinOp [RETURN_TYPE] TypeInference$BooleanOutcomePair   Node n FlowScope scope boolean condition [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  condition  JSType  leftType  rightType  type  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanOutcomePair  leftLiterals  literals  rightLiterals  Node  left  n  right  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Argument_Swapping]^if  ( type.booleanValues == BooleanLiteralSet.EMPTY && getNativeType ( BOOLEAN_TYPE ) .isSubtype ( literals )  )  {^1004^1005^^^^989^1019^if  ( literals.booleanValues == BooleanLiteralSet.EMPTY && getNativeType ( BOOLEAN_TYPE ) .isSubtype ( type )  )  {^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseShortCircuitingBinOp [RETURN_TYPE] TypeInference$BooleanOutcomePair   Node n FlowScope scope boolean condition [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  condition  JSType  leftType  rightType  type  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanOutcomePair  leftLiterals  literals  rightLiterals  Node  left  n  right  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Argument_Swapping]^if  ( type == BooleanLiteralSet.EMPTY && getNativeType ( BOOLEAN_TYPE ) .isSubtype ( literals.booleanValues )  )  {^1004^1005^^^^989^1019^if  ( literals.booleanValues == BooleanLiteralSet.EMPTY && getNativeType ( BOOLEAN_TYPE ) .isSubtype ( type )  )  {^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseShortCircuitingBinOp [RETURN_TYPE] TypeInference$BooleanOutcomePair   Node n FlowScope scope boolean condition [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  condition  JSType  leftType  rightType  type  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanOutcomePair  leftLiterals  literals  rightLiterals  Node  left  n  right  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Wrong_Operator]^if  ( type  ==  UnionType )  {^1007^^^^^1004^1011^if  ( type instanceof UnionType )  {^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseShortCircuitingBinOp [RETURN_TYPE] TypeInference$BooleanOutcomePair   Node n FlowScope scope boolean condition [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  condition  JSType  leftType  rightType  type  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanOutcomePair  leftLiterals  literals  rightLiterals  Node  left  n  right  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Wrong_Operator]^if  ( type  |  UnionType )  {^1007^^^^^992^1022^if  ( type instanceof UnionType )  {^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseShortCircuitingBinOp [RETURN_TYPE] TypeInference$BooleanOutcomePair   Node n FlowScope scope boolean condition [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  condition  JSType  leftType  rightType  type  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanOutcomePair  leftLiterals  literals  rightLiterals  Node  left  n  right  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Variable_Misuse]^literals = getBooleanOutcomePair ( literals, rightLiterals, condition ) ;^998^999^^^^983^1013^literals = getBooleanOutcomePair ( leftLiterals, rightLiterals, condition ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseShortCircuitingBinOp [RETURN_TYPE] TypeInference$BooleanOutcomePair   Node n FlowScope scope boolean condition [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  condition  JSType  leftType  rightType  type  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanOutcomePair  leftLiterals  literals  rightLiterals  Node  left  n  right  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Variable_Misuse]^literals = getBooleanOutcomePair ( leftLiterals, literals, condition ) ;^998^999^^^^983^1013^literals = getBooleanOutcomePair ( leftLiterals, rightLiterals, condition ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseShortCircuitingBinOp [RETURN_TYPE] TypeInference$BooleanOutcomePair   Node n FlowScope scope boolean condition [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  condition  JSType  leftType  rightType  type  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanOutcomePair  leftLiterals  literals  rightLiterals  Node  left  n  right  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Variable_Misuse]^n.setJSType ( rightType ) ;^1019^^^^^1004^1034^n.setJSType ( type ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseShortCircuitingBinOp [RETURN_TYPE] TypeInference$BooleanOutcomePair   Node n FlowScope scope boolean condition [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  condition  JSType  leftType  rightType  type  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanOutcomePair  leftLiterals  literals  rightLiterals  Node  left  n  right  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Variable_Misuse]^return rightLiterals;^1021^^^^^1006^1036^return literals;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseShortCircuitingBinOp [RETURN_TYPE] TypeInference$BooleanOutcomePair   Node n FlowScope scope boolean condition [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  condition  JSType  leftType  rightType  type  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanOutcomePair  leftLiterals  literals  rightLiterals  Node  left  n  right  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Variable_Misuse]^scope = traverse ( n, joinedScope ) ;^1034^^^^^1024^1037^scope = traverse ( n, scope ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseWithinShortCircuitingBinOp [RETURN_TYPE] TypeInference$BooleanOutcomePair   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Argument_Swapping]^scope = traverse ( scope, n ) ;^1034^^^^^1024^1037^scope = traverse ( n, scope ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseWithinShortCircuitingBinOp [RETURN_TYPE] TypeInference$BooleanOutcomePair   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Variable_Misuse]^return traverseAnd ( n, leftScope ) ;^1028^^^^^1024^1037^return traverseAnd ( n, scope ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseWithinShortCircuitingBinOp [RETURN_TYPE] TypeInference$BooleanOutcomePair   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Argument_Swapping]^return traverseAnd ( scope, n ) ;^1028^^^^^1024^1037^return traverseAnd ( n, scope ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseWithinShortCircuitingBinOp [RETURN_TYPE] TypeInference$BooleanOutcomePair   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Variable_Misuse]^return traverseOr ( n, output ) ;^1031^^^^^1024^1037^return traverseOr ( n, scope ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseWithinShortCircuitingBinOp [RETURN_TYPE] TypeInference$BooleanOutcomePair   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Argument_Swapping]^return traverseOr ( scope, n ) ;^1031^^^^^1024^1037^return traverseOr ( n, scope ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseWithinShortCircuitingBinOp [RETURN_TYPE] TypeInference$BooleanOutcomePair   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Variable_Misuse]^return newBooleanOutcomePair ( n.getJSType (  ) , trueScope ) ;^1035^^^^^1024^1037^return newBooleanOutcomePair ( n.getJSType (  ) , scope ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseWithinShortCircuitingBinOp [RETURN_TYPE] TypeInference$BooleanOutcomePair   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Argument_Swapping]^return scopeewBooleanOutcomePair ( n.getJSType (  ) , n ) ;^1035^^^^^1024^1037^return newBooleanOutcomePair ( n.getJSType (  ) , scope ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseWithinShortCircuitingBinOp [RETURN_TYPE] TypeInference$BooleanOutcomePair   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Variable_Misuse]^return traverseOr ( n, trueScope ) ;^1031^^^^^1024^1037^return traverseOr ( n, scope ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseWithinShortCircuitingBinOp [RETURN_TYPE] TypeInference$BooleanOutcomePair   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Variable_Misuse]^scope = traverse ( n, output ) ;^1034^^^^^1024^1037^scope = traverse ( n, scope ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseWithinShortCircuitingBinOp [RETURN_TYPE] TypeInference$BooleanOutcomePair   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Variable_Misuse]^return newBooleanOutcomePair ( n.getJSType (  ) , newScope ) ;^1035^^^^^1024^1037^return newBooleanOutcomePair ( n.getJSType (  ) , scope ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseWithinShortCircuitingBinOp [RETURN_TYPE] TypeInference$BooleanOutcomePair   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Variable_Misuse]^return new BooleanOutcomePair ( getBooleanOutcomes ( left.toBooleanOutcomes, left.toBooleanOutcomes, condition ) , getBooleanOutcomes ( left.booleanValues, right.booleanValues, condition ) ,^1046^1047^1048^1049^^1044^1051^return new BooleanOutcomePair ( getBooleanOutcomes ( left.toBooleanOutcomes, right.toBooleanOutcomes, condition ) , getBooleanOutcomes ( left.booleanValues, right.booleanValues, condition ) ,^[CLASS] TypeInference BooleanOutcomePair  [METHOD] getBooleanOutcomePair [RETURN_TYPE] TypeInference$BooleanOutcomePair   BooleanOutcomePair left BooleanOutcomePair right boolean condition [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  condition  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanOutcomePair  left  right  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Variable_Misuse]^return new BooleanOutcomePair ( getBooleanOutcomes ( toBooleanOutcomes, right.toBooleanOutcomes, condition ) , getBooleanOutcomes ( left.booleanValues, right.booleanValues, condition ) ,^1046^1047^1048^1049^^1044^1051^return new BooleanOutcomePair ( getBooleanOutcomes ( left.toBooleanOutcomes, right.toBooleanOutcomes, condition ) , getBooleanOutcomes ( left.booleanValues, right.booleanValues, condition ) ,^[CLASS] TypeInference BooleanOutcomePair  [METHOD] getBooleanOutcomePair [RETURN_TYPE] TypeInference$BooleanOutcomePair   BooleanOutcomePair left BooleanOutcomePair right boolean condition [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  condition  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanOutcomePair  left  right  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Variable_Misuse]^return new BooleanOutcomePair ( getBooleanOutcomes ( left.toBooleanOutcomes, right.toBooleanOutcomes, condition ) , getBooleanOutcomes ( toBooleanOutcomes, right.booleanValues, condition ) ,^1046^1047^1048^1049^^1044^1051^return new BooleanOutcomePair ( getBooleanOutcomes ( left.toBooleanOutcomes, right.toBooleanOutcomes, condition ) , getBooleanOutcomes ( left.booleanValues, right.booleanValues, condition ) ,^[CLASS] TypeInference BooleanOutcomePair  [METHOD] getBooleanOutcomePair [RETURN_TYPE] TypeInference$BooleanOutcomePair   BooleanOutcomePair left BooleanOutcomePair right boolean condition [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  condition  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanOutcomePair  left  right  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Variable_Misuse]^return new BooleanOutcomePair ( getBooleanOutcomes ( left.toBooleanOutcomes, right.toBooleanOutcomes, condition ) , getBooleanOutcomes ( left.booleanValues, toBooleanOutcomes, condition ) ,^1046^1047^1048^1049^^1044^1051^return new BooleanOutcomePair ( getBooleanOutcomes ( left.toBooleanOutcomes, right.toBooleanOutcomes, condition ) , getBooleanOutcomes ( left.booleanValues, right.booleanValues, condition ) ,^[CLASS] TypeInference BooleanOutcomePair  [METHOD] getBooleanOutcomePair [RETURN_TYPE] TypeInference$BooleanOutcomePair   BooleanOutcomePair left BooleanOutcomePair right boolean condition [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  condition  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanOutcomePair  left  right  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Argument_Swapping]^return new BooleanOutcomePair ( getBooleanOutcomes ( right.booleanValues.toBooleanOutcomes, right.toBooleanOutcomes, condition ) , getBooleanOutcomes ( left.booleanValues, left, condition ) ,^1046^1047^1048^1049^^1044^1051^return new BooleanOutcomePair ( getBooleanOutcomes ( left.toBooleanOutcomes, right.toBooleanOutcomes, condition ) , getBooleanOutcomes ( left.booleanValues, right.booleanValues, condition ) ,^[CLASS] TypeInference BooleanOutcomePair  [METHOD] getBooleanOutcomePair [RETURN_TYPE] TypeInference$BooleanOutcomePair   BooleanOutcomePair left BooleanOutcomePair right boolean condition [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  condition  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanOutcomePair  left  right  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Argument_Swapping]^return new BooleanOutcomePair ( getBooleanOutcomes ( right.toBooleanOutcomes, left.toBooleanOutcomes, condition ) , getBooleanOutcomes ( left.booleanValues, right.booleanValues, condition ) ,^1046^1047^1048^1049^^1044^1051^return new BooleanOutcomePair ( getBooleanOutcomes ( left.toBooleanOutcomes, right.toBooleanOutcomes, condition ) , getBooleanOutcomes ( left.booleanValues, right.booleanValues, condition ) ,^[CLASS] TypeInference BooleanOutcomePair  [METHOD] getBooleanOutcomePair [RETURN_TYPE] TypeInference$BooleanOutcomePair   BooleanOutcomePair left BooleanOutcomePair right boolean condition [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  condition  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanOutcomePair  left  right  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Argument_Swapping]^return new BooleanOutcomePair ( getBooleanOutcomes ( left.toBooleanOutcomes, right.toBooleanOutcomes, left.booleanValues ) , getBooleanOutcomes ( condition, right.booleanValues, condition ) ,^1046^1047^1048^1049^^1044^1051^return new BooleanOutcomePair ( getBooleanOutcomes ( left.toBooleanOutcomes, right.toBooleanOutcomes, condition ) , getBooleanOutcomes ( left.booleanValues, right.booleanValues, condition ) ,^[CLASS] TypeInference BooleanOutcomePair  [METHOD] getBooleanOutcomePair [RETURN_TYPE] TypeInference$BooleanOutcomePair   BooleanOutcomePair left BooleanOutcomePair right boolean condition [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  condition  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanOutcomePair  left  right  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Argument_Swapping]^return new BooleanOutcomePair ( getBooleanOutcomes ( left, right.toBooleanOutcomes, condition ) , getBooleanOutcomes ( left.toBooleanOutcomes.booleanValues, right.booleanValues, condition ) ,^1046^1047^1048^1049^^1044^1051^return new BooleanOutcomePair ( getBooleanOutcomes ( left.toBooleanOutcomes, right.toBooleanOutcomes, condition ) , getBooleanOutcomes ( left.booleanValues, right.booleanValues, condition ) ,^[CLASS] TypeInference BooleanOutcomePair  [METHOD] getBooleanOutcomePair [RETURN_TYPE] TypeInference$BooleanOutcomePair   BooleanOutcomePair left BooleanOutcomePair right boolean condition [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  condition  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanOutcomePair  left  right  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Argument_Swapping]^return new BooleanOutcomePair ( getBooleanOutcomes ( left.toBooleanOutcomes, right.booleanValues, condition ) , getBooleanOutcomes ( left.booleanValues, right.toBooleanOutcomes, condition ) ,^1046^1047^1048^1049^^1044^1051^return new BooleanOutcomePair ( getBooleanOutcomes ( left.toBooleanOutcomes, right.toBooleanOutcomes, condition ) , getBooleanOutcomes ( left.booleanValues, right.booleanValues, condition ) ,^[CLASS] TypeInference BooleanOutcomePair  [METHOD] getBooleanOutcomePair [RETURN_TYPE] TypeInference$BooleanOutcomePair   BooleanOutcomePair left BooleanOutcomePair right boolean condition [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  condition  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanOutcomePair  left  right  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Argument_Swapping]^return new BooleanOutcomePair ( getBooleanOutcomes ( left.toBooleanOutcomes, left.booleanValues, condition ) , getBooleanOutcomes ( right.toBooleanOutcomes, right.booleanValues, condition ) ,^1046^1047^1048^1049^^1044^1051^return new BooleanOutcomePair ( getBooleanOutcomes ( left.toBooleanOutcomes, right.toBooleanOutcomes, condition ) , getBooleanOutcomes ( left.booleanValues, right.booleanValues, condition ) ,^[CLASS] TypeInference BooleanOutcomePair  [METHOD] getBooleanOutcomePair [RETURN_TYPE] TypeInference$BooleanOutcomePair   BooleanOutcomePair left BooleanOutcomePair right boolean condition [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  condition  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanOutcomePair  left  right  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Argument_Swapping]^return new BooleanOutcomePair ( getBooleanOutcomes ( right.booleanValues, right.toBooleanOutcomes, condition ) , getBooleanOutcomes ( left.booleanValues, left.toBooleanOutcomes, condition ) ,^1046^1047^1048^1049^^1044^1051^return new BooleanOutcomePair ( getBooleanOutcomes ( left.toBooleanOutcomes, right.toBooleanOutcomes, condition ) , getBooleanOutcomes ( left.booleanValues, right.booleanValues, condition ) ,^[CLASS] TypeInference BooleanOutcomePair  [METHOD] getBooleanOutcomePair [RETURN_TYPE] TypeInference$BooleanOutcomePair   BooleanOutcomePair left BooleanOutcomePair right boolean condition [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  condition  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanOutcomePair  left  right  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Variable_Misuse]^return new BooleanOutcomePair ( getBooleanOutcomes ( left.toBooleanOutcomes, toBooleanOutcomes, condition ) , getBooleanOutcomes ( left.booleanValues, right.booleanValues, condition ) ,^1046^1047^1048^1049^^1044^1051^return new BooleanOutcomePair ( getBooleanOutcomes ( left.toBooleanOutcomes, right.toBooleanOutcomes, condition ) , getBooleanOutcomes ( left.booleanValues, right.booleanValues, condition ) ,^[CLASS] TypeInference BooleanOutcomePair  [METHOD] getBooleanOutcomePair [RETURN_TYPE] TypeInference$BooleanOutcomePair   BooleanOutcomePair left BooleanOutcomePair right boolean condition [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  condition  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanOutcomePair  left  right  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Argument_Swapping]^return new BooleanOutcomePair ( getBooleanOutcomes ( left.booleanValues.toBooleanOutcomes, right.toBooleanOutcomes, condition ) , getBooleanOutcomes ( left, right.booleanValues, condition ) ,^1046^1047^1048^1049^^1044^1051^return new BooleanOutcomePair ( getBooleanOutcomes ( left.toBooleanOutcomes, right.toBooleanOutcomes, condition ) , getBooleanOutcomes ( left.booleanValues, right.booleanValues, condition ) ,^[CLASS] TypeInference BooleanOutcomePair  [METHOD] getBooleanOutcomePair [RETURN_TYPE] TypeInference$BooleanOutcomePair   BooleanOutcomePair left BooleanOutcomePair right boolean condition [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  condition  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanOutcomePair  left  right  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Argument_Swapping]^return new BooleanOutcomePair ( getBooleanOutcomes ( left.toBooleanOutcomes, right.toBooleanOutcomes.toBooleanOutcomes, condition ) , getBooleanOutcomes ( left.booleanValues, right.booleanValues, condition ) ,^1046^1047^1048^1049^^1044^1051^return new BooleanOutcomePair ( getBooleanOutcomes ( left.toBooleanOutcomes, right.toBooleanOutcomes, condition ) , getBooleanOutcomes ( left.booleanValues, right.booleanValues, condition ) ,^[CLASS] TypeInference BooleanOutcomePair  [METHOD] getBooleanOutcomePair [RETURN_TYPE] TypeInference$BooleanOutcomePair   BooleanOutcomePair left BooleanOutcomePair right boolean condition [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  condition  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanOutcomePair  left  right  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Argument_Swapping]^return new BooleanOutcomePair ( getBooleanOutcomes ( left.toBooleanOutcomes, right.toBooleanOutcomes, right.booleanValues ) , getBooleanOutcomes ( left.booleanValues, condition, condition ) ,^1046^1047^1048^1049^^1044^1051^return new BooleanOutcomePair ( getBooleanOutcomes ( left.toBooleanOutcomes, right.toBooleanOutcomes, condition ) , getBooleanOutcomes ( left.booleanValues, right.booleanValues, condition ) ,^[CLASS] TypeInference BooleanOutcomePair  [METHOD] getBooleanOutcomePair [RETURN_TYPE] TypeInference$BooleanOutcomePair   BooleanOutcomePair left BooleanOutcomePair right boolean condition [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  condition  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanOutcomePair  left  right  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Argument_Swapping]^return new BooleanOutcomePair ( getBooleanOutcomes ( left.toBooleanOutcomes, condition, right.toBooleanOutcomes ) , getBooleanOutcomes ( left.booleanValues, right.booleanValues, condition ) ,^1046^1047^1048^1049^^1044^1051^return new BooleanOutcomePair ( getBooleanOutcomes ( left.toBooleanOutcomes, right.toBooleanOutcomes, condition ) , getBooleanOutcomes ( left.booleanValues, right.booleanValues, condition ) ,^[CLASS] TypeInference BooleanOutcomePair  [METHOD] getBooleanOutcomePair [RETURN_TYPE] TypeInference$BooleanOutcomePair   BooleanOutcomePair left BooleanOutcomePair right boolean condition [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  condition  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanOutcomePair  left  right  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Argument_Swapping]^return new BooleanOutcomePair ( getBooleanOutcomes ( left.booleanValues, right.toBooleanOutcomes, condition ) , getBooleanOutcomes ( left.toBooleanOutcomes, right.booleanValues, condition ) ,^1046^1047^1048^1049^^1044^1051^return new BooleanOutcomePair ( getBooleanOutcomes ( left.toBooleanOutcomes, right.toBooleanOutcomes, condition ) , getBooleanOutcomes ( left.booleanValues, right.booleanValues, condition ) ,^[CLASS] TypeInference BooleanOutcomePair  [METHOD] getBooleanOutcomePair [RETURN_TYPE] TypeInference$BooleanOutcomePair   BooleanOutcomePair left BooleanOutcomePair right boolean condition [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  condition  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanOutcomePair  left  right  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Argument_Swapping]^return new BooleanOutcomePair ( getBooleanOutcomes ( left.toBooleanOutcomes, right.toBooleanOutcomes, condition ) , getBooleanOutcomes ( right.booleanValues, left.booleanValues, condition ) ,^1046^1047^1048^1049^^1044^1051^return new BooleanOutcomePair ( getBooleanOutcomes ( left.toBooleanOutcomes, right.toBooleanOutcomes, condition ) , getBooleanOutcomes ( left.booleanValues, right.booleanValues, condition ) ,^[CLASS] TypeInference BooleanOutcomePair  [METHOD] getBooleanOutcomePair [RETURN_TYPE] TypeInference$BooleanOutcomePair   BooleanOutcomePair left BooleanOutcomePair right boolean condition [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  condition  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanOutcomePair  left  right  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Variable_Misuse]^getBooleanOutcomes ( left.toBooleanOutcomes, left.toBooleanOutcomes, condition ) , getBooleanOutcomes ( left.booleanValues, right.booleanValues, condition ) , left.getJoinedFlowScope (  ) , right.getJoinedFlowScope (  )  ) ;^1047^1048^1049^1050^^1044^1051^getBooleanOutcomes ( left.toBooleanOutcomes, right.toBooleanOutcomes, condition ) , getBooleanOutcomes ( left.booleanValues, right.booleanValues, condition ) , left.getJoinedFlowScope (  ) , right.getJoinedFlowScope (  )  ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] getBooleanOutcomePair [RETURN_TYPE] TypeInference$BooleanOutcomePair   BooleanOutcomePair left BooleanOutcomePair right boolean condition [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  condition  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanOutcomePair  left  right  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Variable_Misuse]^getBooleanOutcomes ( toBooleanOutcomes, right.toBooleanOutcomes, condition ) , getBooleanOutcomes ( left.booleanValues, right.booleanValues, condition ) , left.getJoinedFlowScope (  ) , right.getJoinedFlowScope (  )  ) ;^1047^1048^1049^1050^^1044^1051^getBooleanOutcomes ( left.toBooleanOutcomes, right.toBooleanOutcomes, condition ) , getBooleanOutcomes ( left.booleanValues, right.booleanValues, condition ) , left.getJoinedFlowScope (  ) , right.getJoinedFlowScope (  )  ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] getBooleanOutcomePair [RETURN_TYPE] TypeInference$BooleanOutcomePair   BooleanOutcomePair left BooleanOutcomePair right boolean condition [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  condition  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanOutcomePair  left  right  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Variable_Misuse]^getBooleanOutcomes ( left.toBooleanOutcomes, toBooleanOutcomes, condition ) , getBooleanOutcomes ( left.booleanValues, right.booleanValues, condition ) , left.getJoinedFlowScope (  ) , right.getJoinedFlowScope (  )  ) ;^1047^1048^1049^1050^^1044^1051^getBooleanOutcomes ( left.toBooleanOutcomes, right.toBooleanOutcomes, condition ) , getBooleanOutcomes ( left.booleanValues, right.booleanValues, condition ) , left.getJoinedFlowScope (  ) , right.getJoinedFlowScope (  )  ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] getBooleanOutcomePair [RETURN_TYPE] TypeInference$BooleanOutcomePair   BooleanOutcomePair left BooleanOutcomePair right boolean condition [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  condition  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanOutcomePair  left  right  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Argument_Swapping]^getBooleanOutcomes ( right.toBooleanOutcomes.toBooleanOutcomes, left, condition ) , getBooleanOutcomes ( left.booleanValues, right.booleanValues, condition ) , left.getJoinedFlowScope (  ) , right.getJoinedFlowScope (  )  ) ;^1047^1048^1049^1050^^1044^1051^getBooleanOutcomes ( left.toBooleanOutcomes, right.toBooleanOutcomes, condition ) , getBooleanOutcomes ( left.booleanValues, right.booleanValues, condition ) , left.getJoinedFlowScope (  ) , right.getJoinedFlowScope (  )  ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] getBooleanOutcomePair [RETURN_TYPE] TypeInference$BooleanOutcomePair   BooleanOutcomePair left BooleanOutcomePair right boolean condition [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  condition  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanOutcomePair  left  right  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Argument_Swapping]^getBooleanOutcomes ( right.toBooleanOutcomes, left.toBooleanOutcomes, condition ) , getBooleanOutcomes ( left.booleanValues, right.booleanValues, condition ) , left.getJoinedFlowScope (  ) , right.getJoinedFlowScope (  )  ) ;^1047^1048^1049^1050^^1044^1051^getBooleanOutcomes ( left.toBooleanOutcomes, right.toBooleanOutcomes, condition ) , getBooleanOutcomes ( left.booleanValues, right.booleanValues, condition ) , left.getJoinedFlowScope (  ) , right.getJoinedFlowScope (  )  ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] getBooleanOutcomePair [RETURN_TYPE] TypeInference$BooleanOutcomePair   BooleanOutcomePair left BooleanOutcomePair right boolean condition [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  condition  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanOutcomePair  left  right  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Argument_Swapping]^getBooleanOutcomes ( condition, right.toBooleanOutcomes, left.toBooleanOutcomes ) , getBooleanOutcomes ( left.booleanValues, right.booleanValues, condition ) , left.getJoinedFlowScope (  ) , right.getJoinedFlowScope (  )  ) ;^1047^1048^1049^1050^^1044^1051^getBooleanOutcomes ( left.toBooleanOutcomes, right.toBooleanOutcomes, condition ) , getBooleanOutcomes ( left.booleanValues, right.booleanValues, condition ) , left.getJoinedFlowScope (  ) , right.getJoinedFlowScope (  )  ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] getBooleanOutcomePair [RETURN_TYPE] TypeInference$BooleanOutcomePair   BooleanOutcomePair left BooleanOutcomePair right boolean condition [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  condition  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanOutcomePair  left  right  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Argument_Swapping]^getBooleanOutcomes ( left.toBooleanOutcomes, condition, right.toBooleanOutcomes ) , getBooleanOutcomes ( left.booleanValues, right.booleanValues, condition ) , left.getJoinedFlowScope (  ) , right.getJoinedFlowScope (  )  ) ;^1047^1048^1049^1050^^1044^1051^getBooleanOutcomes ( left.toBooleanOutcomes, right.toBooleanOutcomes, condition ) , getBooleanOutcomes ( left.booleanValues, right.booleanValues, condition ) , left.getJoinedFlowScope (  ) , right.getJoinedFlowScope (  )  ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] getBooleanOutcomePair [RETURN_TYPE] TypeInference$BooleanOutcomePair   BooleanOutcomePair left BooleanOutcomePair right boolean condition [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  condition  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanOutcomePair  left  right  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Variable_Misuse]^getBooleanOutcomes ( left.booleanValues, left.booleanValues, condition ) , left.getJoinedFlowScope (  ) , right.getJoinedFlowScope (  )  ) ;^1049^1050^^^^1044^1051^getBooleanOutcomes ( left.booleanValues, right.booleanValues, condition ) , left.getJoinedFlowScope (  ) , right.getJoinedFlowScope (  )  ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] getBooleanOutcomePair [RETURN_TYPE] TypeInference$BooleanOutcomePair   BooleanOutcomePair left BooleanOutcomePair right boolean condition [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  condition  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanOutcomePair  left  right  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Variable_Misuse]^getBooleanOutcomes ( toBooleanOutcomes, right.booleanValues, condition ) , left.getJoinedFlowScope (  ) , right.getJoinedFlowScope (  )  ) ;^1049^1050^^^^1044^1051^getBooleanOutcomes ( left.booleanValues, right.booleanValues, condition ) , left.getJoinedFlowScope (  ) , right.getJoinedFlowScope (  )  ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] getBooleanOutcomePair [RETURN_TYPE] TypeInference$BooleanOutcomePair   BooleanOutcomePair left BooleanOutcomePair right boolean condition [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  condition  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanOutcomePair  left  right  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Variable_Misuse]^getBooleanOutcomes ( left.booleanValues, toBooleanOutcomes, condition ) , left.getJoinedFlowScope (  ) , right.getJoinedFlowScope (  )  ) ;^1049^1050^^^^1044^1051^getBooleanOutcomes ( left.booleanValues, right.booleanValues, condition ) , left.getJoinedFlowScope (  ) , right.getJoinedFlowScope (  )  ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] getBooleanOutcomePair [RETURN_TYPE] TypeInference$BooleanOutcomePair   BooleanOutcomePair left BooleanOutcomePair right boolean condition [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  condition  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanOutcomePair  left  right  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Argument_Swapping]^getBooleanOutcomes ( condition.booleanValues, right.booleanValues, left ) , left.getJoinedFlowScope (  ) , right.getJoinedFlowScope (  )  ) ;^1049^1050^^^^1044^1051^getBooleanOutcomes ( left.booleanValues, right.booleanValues, condition ) , left.getJoinedFlowScope (  ) , right.getJoinedFlowScope (  )  ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] getBooleanOutcomePair [RETURN_TYPE] TypeInference$BooleanOutcomePair   BooleanOutcomePair left BooleanOutcomePair right boolean condition [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  condition  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanOutcomePair  left  right  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Argument_Swapping]^getBooleanOutcomes ( right, left.booleanValues.booleanValues, condition ) , left.getJoinedFlowScope (  ) , right.getJoinedFlowScope (  )  ) ;^1049^1050^^^^1044^1051^getBooleanOutcomes ( left.booleanValues, right.booleanValues, condition ) , left.getJoinedFlowScope (  ) , right.getJoinedFlowScope (  )  ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] getBooleanOutcomePair [RETURN_TYPE] TypeInference$BooleanOutcomePair   BooleanOutcomePair left BooleanOutcomePair right boolean condition [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  condition  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanOutcomePair  left  right  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Argument_Swapping]^getBooleanOutcomes ( left.booleanValues, condition.booleanValues, right ) , left.getJoinedFlowScope (  ) , right.getJoinedFlowScope (  )  ) ;^1049^1050^^^^1044^1051^getBooleanOutcomes ( left.booleanValues, right.booleanValues, condition ) , left.getJoinedFlowScope (  ) , right.getJoinedFlowScope (  )  ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] getBooleanOutcomePair [RETURN_TYPE] TypeInference$BooleanOutcomePair   BooleanOutcomePair left BooleanOutcomePair right boolean condition [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  condition  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanOutcomePair  left  right  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Argument_Swapping]^getBooleanOutcomes ( right.booleanValues, left.booleanValues, condition ) , left.getJoinedFlowScope (  ) , right.getJoinedFlowScope (  )  ) ;^1049^1050^^^^1044^1051^getBooleanOutcomes ( left.booleanValues, right.booleanValues, condition ) , left.getJoinedFlowScope (  ) , right.getJoinedFlowScope (  )  ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] getBooleanOutcomePair [RETURN_TYPE] TypeInference$BooleanOutcomePair   BooleanOutcomePair left BooleanOutcomePair right boolean condition [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  condition  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanOutcomePair  left  right  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Variable_Misuse]^left.getJoinedFlowScope (  ) , left.getJoinedFlowScope (  )  ) ;^1050^^^^^1044^1051^left.getJoinedFlowScope (  ) , right.getJoinedFlowScope (  )  ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] getBooleanOutcomePair [RETURN_TYPE] TypeInference$BooleanOutcomePair   BooleanOutcomePair left BooleanOutcomePair right boolean condition [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  condition  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanOutcomePair  left  right  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Variable_Misuse]^return toBooleanOutcomes.union ( left.intersection ( BooleanLiteralSet.get ( !condition )  )  ) ;^1067^^^^^1065^1068^return right.union ( left.intersection ( BooleanLiteralSet.get ( !condition )  )  ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] getBooleanOutcomes [RETURN_TYPE] BooleanLiteralSet   BooleanLiteralSet left BooleanLiteralSet right boolean condition [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  condition  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  left  right  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Variable_Misuse]^return right.union ( toBooleanOutcomes.intersection ( BooleanLiteralSet.get ( !condition )  )  ) ;^1067^^^^^1065^1068^return right.union ( left.intersection ( BooleanLiteralSet.get ( !condition )  )  ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] getBooleanOutcomes [RETURN_TYPE] BooleanLiteralSet   BooleanLiteralSet left BooleanLiteralSet right boolean condition [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  condition  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  left  right  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Variable_Misuse]^if  ( newScope == null )  {^1103^^^^^1102^1111^if  ( joinedScope == null )  {^[CLASS] TypeInference BooleanOutcomePair  [METHOD] getJoinedFlowScope [RETURN_TYPE] FlowScope   [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  left  right  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Wrong_Operator]^if  ( joinedScope != null )  {^1103^^^^^1102^1111^if  ( joinedScope == null )  {^[CLASS] TypeInference BooleanOutcomePair  [METHOD] getJoinedFlowScope [RETURN_TYPE] FlowScope   [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  left  right  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Variable_Misuse]^if  ( leftScope == joinedScope )  {^1104^^^^^1102^1111^if  ( leftScope == rightScope )  {^[CLASS] TypeInference BooleanOutcomePair  [METHOD] getJoinedFlowScope [RETURN_TYPE] FlowScope   [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  left  right  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Argument_Swapping]^if  ( rightScope == leftScope )  {^1104^^^^^1102^1111^if  ( leftScope == rightScope )  {^[CLASS] TypeInference BooleanOutcomePair  [METHOD] getJoinedFlowScope [RETURN_TYPE] FlowScope   [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  left  right  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Wrong_Operator]^if  ( leftScope <= rightScope )  {^1104^^^^^1102^1111^if  ( leftScope == rightScope )  {^[CLASS] TypeInference BooleanOutcomePair  [METHOD] getJoinedFlowScope [RETURN_TYPE] FlowScope   [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  left  right  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Variable_Misuse]^joinedScope = join ( joinedScope, rightScope ) ;^1107^^^^^1102^1111^joinedScope = join ( leftScope, rightScope ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] getJoinedFlowScope [RETURN_TYPE] FlowScope   [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  left  right  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Variable_Misuse]^joinedScope = join ( leftScope, joinedScope ) ;^1107^^^^^1102^1111^joinedScope = join ( leftScope, rightScope ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] getJoinedFlowScope [RETURN_TYPE] FlowScope   [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  left  right  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Argument_Swapping]^joinedScope = join ( rightScope, leftScope ) ;^1107^^^^^1102^1111^joinedScope = join ( leftScope, rightScope ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] getJoinedFlowScope [RETURN_TYPE] FlowScope   [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  left  right  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Variable_Misuse]^joinedScope = join ( output, rightScope ) ;^1107^^^^^1102^1111^joinedScope = join ( leftScope, rightScope ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] getJoinedFlowScope [RETURN_TYPE] FlowScope   [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  left  right  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Variable_Misuse]^joinedScope = join ( leftScope, scope ) ;^1107^^^^^1102^1111^joinedScope = join ( leftScope, rightScope ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] getJoinedFlowScope [RETURN_TYPE] FlowScope   [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  left  right  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Variable_Misuse]^joinedScope = trueScope;^1105^^^^^1102^1111^joinedScope = rightScope;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] getJoinedFlowScope [RETURN_TYPE] FlowScope   [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  left  right  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Variable_Misuse]^joinedScope = joinedScope;^1105^^^^^1102^1111^joinedScope = rightScope;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] getJoinedFlowScope [RETURN_TYPE] FlowScope   [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  left  right  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Variable_Misuse]^joinedScope = join ( trueScope, rightScope ) ;^1107^^^^^1102^1111^joinedScope = join ( leftScope, rightScope ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] getJoinedFlowScope [RETURN_TYPE] FlowScope   [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  left  right  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Variable_Misuse]^joinedScope = join ( leftScope, trueScope ) ;^1107^^^^^1102^1111^joinedScope = join ( leftScope, rightScope ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] getJoinedFlowScope [RETURN_TYPE] FlowScope   [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  left  right  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Variable_Misuse]^if  ( leftScope == output )  {^1104^^^^^1102^1111^if  ( leftScope == rightScope )  {^[CLASS] TypeInference BooleanOutcomePair  [METHOD] getJoinedFlowScope [RETURN_TYPE] FlowScope   [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  left  right  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Wrong_Operator]^if  ( leftScope != rightScope )  {^1104^^^^^1102^1111^if  ( leftScope == rightScope )  {^[CLASS] TypeInference BooleanOutcomePair  [METHOD] getJoinedFlowScope [RETURN_TYPE] FlowScope   [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  left  right  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Variable_Misuse]^joinedScope = join ( leftScope, newScope ) ;^1107^^^^^1102^1111^joinedScope = join ( leftScope, rightScope ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] getJoinedFlowScope [RETURN_TYPE] FlowScope   [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  left  right  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Variable_Misuse]^joinedScope = leftScope;^1105^^^^^1102^1111^joinedScope = rightScope;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] getJoinedFlowScope [RETURN_TYPE] FlowScope   [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  left  right  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Variable_Misuse]^joinedScope = newScope;^1105^^^^^1102^1111^joinedScope = rightScope;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] getJoinedFlowScope [RETURN_TYPE] FlowScope   [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  left  right  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Variable_Misuse]^return leftScope;^1110^^^^^1102^1111^return joinedScope;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] getJoinedFlowScope [RETURN_TYPE] FlowScope   [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  left  right  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Argument_Swapping]^if  ( outcome == Token.AND && nodeType || nodeType == Token.OR && !outcome )  {^1118^1119^^^^1117^1125^if  ( nodeType == Token.AND && outcome || nodeType == Token.OR && !outcome )  {^[CLASS] TypeInference BooleanOutcomePair  [METHOD] getOutcomeFlowScope [RETURN_TYPE] FlowScope   int nodeType boolean outcome [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  outcome  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  left  right  toBooleanOutcomes  int  nodeType  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Wrong_Operator]^if  ( nodeType == Token.AND && outcome && nodeType == Token.OR && !outcome )  {^1118^1119^^^^1117^1125^if  ( nodeType == Token.AND && outcome || nodeType == Token.OR && !outcome )  {^[CLASS] TypeInference BooleanOutcomePair  [METHOD] getOutcomeFlowScope [RETURN_TYPE] FlowScope   int nodeType boolean outcome [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  outcome  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  left  right  toBooleanOutcomes  int  nodeType  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Wrong_Operator]^if  ( nodeType == Token.AND || outcome || nodeType == Token.OR && !outcome )  {^1118^1119^^^^1117^1125^if  ( nodeType == Token.AND && outcome || nodeType == Token.OR && !outcome )  {^[CLASS] TypeInference BooleanOutcomePair  [METHOD] getOutcomeFlowScope [RETURN_TYPE] FlowScope   int nodeType boolean outcome [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  outcome  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  left  right  toBooleanOutcomes  int  nodeType  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Wrong_Operator]^if  ( nodeType != Token.AND && outcome || nodeType == Token.OR && !outcome )  {^1118^1119^^^^1117^1125^if  ( nodeType == Token.AND && outcome || nodeType == Token.OR && !outcome )  {^[CLASS] TypeInference BooleanOutcomePair  [METHOD] getOutcomeFlowScope [RETURN_TYPE] FlowScope   int nodeType boolean outcome [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  outcome  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  left  right  toBooleanOutcomes  int  nodeType  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Variable_Misuse]^return trueScope;^1121^^^^^1117^1125^return rightScope;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] getOutcomeFlowScope [RETURN_TYPE] FlowScope   int nodeType boolean outcome [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  outcome  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  left  right  toBooleanOutcomes  int  nodeType  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Wrong_Operator]^if  ( jsType != null )  {^1130^^^^^1128^1138^if  ( jsType == null )  {^[CLASS] TypeInference BooleanOutcomePair  [METHOD] newBooleanOutcomePair [RETURN_TYPE] TypeInference$BooleanOutcomePair   JSType jsType FlowScope flowScope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  jsType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  left  right  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  flowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Variable_Misuse]^return new BooleanOutcomePair ( BooleanLiteralSet.BOTH, BooleanLiteralSet.BOTH, leftScope, flowScope ) ;^1131^1132^^^^1128^1138^return new BooleanOutcomePair ( BooleanLiteralSet.BOTH, BooleanLiteralSet.BOTH, flowScope, flowScope ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] newBooleanOutcomePair [RETURN_TYPE] TypeInference$BooleanOutcomePair   JSType jsType FlowScope flowScope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  jsType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  left  right  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  flowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Variable_Misuse]^return new BooleanOutcomePair ( BooleanLiteralSet.BOTH, BooleanLiteralSet.BOTH, trueScope, flowScope ) ;^1131^1132^^^^1128^1138^return new BooleanOutcomePair ( BooleanLiteralSet.BOTH, BooleanLiteralSet.BOTH, flowScope, flowScope ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] newBooleanOutcomePair [RETURN_TYPE] TypeInference$BooleanOutcomePair   JSType jsType FlowScope flowScope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  jsType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  left  right  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  flowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Variable_Misuse]^return new BooleanOutcomePair ( BooleanLiteralSet.BOTH, BooleanLiteralSet.BOTH, rightScope, flowScope ) ;^1131^1132^^^^1128^1138^return new BooleanOutcomePair ( BooleanLiteralSet.BOTH, BooleanLiteralSet.BOTH, flowScope, flowScope ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] newBooleanOutcomePair [RETURN_TYPE] TypeInference$BooleanOutcomePair   JSType jsType FlowScope flowScope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  jsType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  left  right  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  flowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Variable_Misuse]^return new BooleanOutcomePair ( jsType.getPossibleToBooleanOutcomes (  ) , registry.getNativeType ( BOOLEAN_TYPE ) .isSubtype ( jsType )  ? BooleanLiteralSet.BOTH : BooleanLiteralSet.EMPTY, rightScope, flowScope ) ;^1134^1135^1136^1137^^1128^1138^return new BooleanOutcomePair ( jsType.getPossibleToBooleanOutcomes (  ) , registry.getNativeType ( BOOLEAN_TYPE ) .isSubtype ( jsType )  ? BooleanLiteralSet.BOTH : BooleanLiteralSet.EMPTY, flowScope, flowScope ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] newBooleanOutcomePair [RETURN_TYPE] TypeInference$BooleanOutcomePair   JSType jsType FlowScope flowScope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  jsType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  left  right  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  flowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Argument_Swapping]^return new BooleanOutcomePair ( flowScope.getPossibleToBooleanOutcomes (  ) , registry.getNativeType ( BOOLEAN_TYPE ) .isSubtype ( jsType )  ? BooleanLiteralSet.BOTH : BooleanLiteralSet.EMPTY, jsType, flowScope ) ;^1134^1135^1136^1137^^1128^1138^return new BooleanOutcomePair ( jsType.getPossibleToBooleanOutcomes (  ) , registry.getNativeType ( BOOLEAN_TYPE ) .isSubtype ( jsType )  ? BooleanLiteralSet.BOTH : BooleanLiteralSet.EMPTY, flowScope, flowScope ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] newBooleanOutcomePair [RETURN_TYPE] TypeInference$BooleanOutcomePair   JSType jsType FlowScope flowScope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  jsType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  left  right  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  flowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Argument_Swapping]^return new BooleanOutcomePair ( registry.getPossibleToBooleanOutcomes (  ) , jsType.getNativeType ( BOOLEAN_TYPE ) .isSubtype ( jsType )  ? BooleanLiteralSet.BOTH : BooleanLiteralSet.EMPTY, flowScope, flowScope ) ;^1134^1135^1136^1137^^1128^1138^return new BooleanOutcomePair ( jsType.getPossibleToBooleanOutcomes (  ) , registry.getNativeType ( BOOLEAN_TYPE ) .isSubtype ( jsType )  ? BooleanLiteralSet.BOTH : BooleanLiteralSet.EMPTY, flowScope, flowScope ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] newBooleanOutcomePair [RETURN_TYPE] TypeInference$BooleanOutcomePair   JSType jsType FlowScope flowScope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  jsType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  left  right  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  flowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Wrong_Operator]^if  ( varType != null )  {^1141^^^^^1140^1145^if  ( varType == null )  {^[CLASS] TypeInference BooleanOutcomePair  [METHOD] redeclare [RETURN_TYPE] void   FlowScope scope String varName JSType varType [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  varType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  left  right  toBooleanOutcomes  String  varName  FlowScope  bottomScope  conditionFlowScope  falseScope  flowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Argument_Swapping]^scope.inferSlotType ( varType, varName ) ;^1144^^^^^1140^1145^scope.inferSlotType ( varName, varType ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] redeclare [RETURN_TYPE] void   FlowScope scope String varName JSType varType [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  varType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  left  right  toBooleanOutcomes  String  varName  FlowScope  bottomScope  conditionFlowScope  falseScope  flowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Wrong_Operator]^if  ( jsType != null )  {^1153^^^^^1151^1162^if  ( jsType == null )  {^[CLASS] TypeInference BooleanOutcomePair  [METHOD] getJSType [RETURN_TYPE] JSType   Node n [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  jsType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  left  right  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  flowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Argument_Swapping]^return typeId.getNativeType ( registry ) ;^1165^^^^^1164^1166^return registry.getNativeType ( typeId ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] getNativeType [RETURN_TYPE] JSType   JSTypeNative typeId [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  left  right  toBooleanOutcomes  JSTypeNative  typeId  FlowScope  bottomScope  conditionFlowScope  falseScope  flowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[BugLab_Variable_Misuse]^this.toBooleanOutcomes = booleanValues;^1092^^^^^1089^1096^this.toBooleanOutcomes = toBooleanOutcomes;^[CLASS] BooleanOutcomePair  [METHOD] <init> [RETURN_TYPE] FlowScope)   BooleanLiteralSet toBooleanOutcomes BooleanLiteralSet booleanValues FlowScope leftScope FlowScope rightScope [VARIABLES] BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  joinedScope  leftScope  rightScope  boolean  
[BugLab_Variable_Misuse]^this.booleanValues = toBooleanOutcomes;^1093^^^^^1089^1096^this.booleanValues = booleanValues;^[CLASS] BooleanOutcomePair  [METHOD] <init> [RETURN_TYPE] FlowScope)   BooleanLiteralSet toBooleanOutcomes BooleanLiteralSet booleanValues FlowScope leftScope FlowScope rightScope [VARIABLES] BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  joinedScope  leftScope  rightScope  boolean  
[BugLab_Variable_Misuse]^this.leftScope = rightScope;^1094^^^^^1089^1096^this.leftScope = leftScope;^[CLASS] BooleanOutcomePair  [METHOD] <init> [RETURN_TYPE] FlowScope)   BooleanLiteralSet toBooleanOutcomes BooleanLiteralSet booleanValues FlowScope leftScope FlowScope rightScope [VARIABLES] BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  joinedScope  leftScope  rightScope  boolean  
[BugLab_Variable_Misuse]^if  ( leftScope == null )  {^1103^^^^^1102^1111^if  ( joinedScope == null )  {^[CLASS] BooleanOutcomePair  [METHOD] getJoinedFlowScope [RETURN_TYPE] FlowScope   [VARIABLES] BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  joinedScope  leftScope  rightScope  boolean  
[BugLab_Wrong_Operator]^if  ( joinedScope != null )  {^1103^^^^^1102^1111^if  ( joinedScope == null )  {^[CLASS] BooleanOutcomePair  [METHOD] getJoinedFlowScope [RETURN_TYPE] FlowScope   [VARIABLES] BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  joinedScope  leftScope  rightScope  boolean  
[BugLab_Variable_Misuse]^if  ( joinedScope == rightScope )  {^1104^^^^^1102^1111^if  ( leftScope == rightScope )  {^[CLASS] BooleanOutcomePair  [METHOD] getJoinedFlowScope [RETURN_TYPE] FlowScope   [VARIABLES] BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  joinedScope  leftScope  rightScope  boolean  
[BugLab_Variable_Misuse]^if  ( leftScope == joinedScope )  {^1104^^^^^1102^1111^if  ( leftScope == rightScope )  {^[CLASS] BooleanOutcomePair  [METHOD] getJoinedFlowScope [RETURN_TYPE] FlowScope   [VARIABLES] BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  joinedScope  leftScope  rightScope  boolean  
[BugLab_Argument_Swapping]^if  ( rightScope == leftScope )  {^1104^^^^^1102^1111^if  ( leftScope == rightScope )  {^[CLASS] BooleanOutcomePair  [METHOD] getJoinedFlowScope [RETURN_TYPE] FlowScope   [VARIABLES] BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  joinedScope  leftScope  rightScope  boolean  
[BugLab_Wrong_Operator]^if  ( leftScope < rightScope )  {^1104^^^^^1102^1111^if  ( leftScope == rightScope )  {^[CLASS] BooleanOutcomePair  [METHOD] getJoinedFlowScope [RETURN_TYPE] FlowScope   [VARIABLES] BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  joinedScope  leftScope  rightScope  boolean  
[BugLab_Variable_Misuse]^joinedScope = join ( joinedScope, rightScope ) ;^1107^^^^^1102^1111^joinedScope = join ( leftScope, rightScope ) ;^[CLASS] BooleanOutcomePair  [METHOD] getJoinedFlowScope [RETURN_TYPE] FlowScope   [VARIABLES] BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  joinedScope  leftScope  rightScope  boolean  
[BugLab_Variable_Misuse]^joinedScope = join ( leftScope, joinedScope ) ;^1107^^^^^1102^1111^joinedScope = join ( leftScope, rightScope ) ;^[CLASS] BooleanOutcomePair  [METHOD] getJoinedFlowScope [RETURN_TYPE] FlowScope   [VARIABLES] BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  joinedScope  leftScope  rightScope  boolean  
[BugLab_Argument_Swapping]^joinedScope = join ( rightScope, leftScope ) ;^1107^^^^^1102^1111^joinedScope = join ( leftScope, rightScope ) ;^[CLASS] BooleanOutcomePair  [METHOD] getJoinedFlowScope [RETURN_TYPE] FlowScope   [VARIABLES] BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  joinedScope  leftScope  rightScope  boolean  
[BugLab_Variable_Misuse]^joinedScope = leftScope;^1105^^^^^1102^1111^joinedScope = rightScope;^[CLASS] BooleanOutcomePair  [METHOD] getJoinedFlowScope [RETURN_TYPE] FlowScope   [VARIABLES] BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  joinedScope  leftScope  rightScope  boolean  
[BugLab_Wrong_Operator]^if  ( leftScope >= rightScope )  {^1104^^^^^1102^1111^if  ( leftScope == rightScope )  {^[CLASS] BooleanOutcomePair  [METHOD] getJoinedFlowScope [RETURN_TYPE] FlowScope   [VARIABLES] BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  joinedScope  leftScope  rightScope  boolean  
[BugLab_Variable_Misuse]^return rightScope;^1110^^^^^1102^1111^return joinedScope;^[CLASS] BooleanOutcomePair  [METHOD] getJoinedFlowScope [RETURN_TYPE] FlowScope   [VARIABLES] BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  joinedScope  leftScope  rightScope  boolean  
[BugLab_Wrong_Operator]^if  ( nodeType == Token.AND && outcome && nodeType == Token.OR && !outcome )  {^1118^1119^^^^1117^1125^if  ( nodeType == Token.AND && outcome || nodeType == Token.OR && !outcome )  {^[CLASS] BooleanOutcomePair  [METHOD] getOutcomeFlowScope [RETURN_TYPE] FlowScope   int nodeType boolean outcome [VARIABLES] BooleanLiteralSet  booleanValues  toBooleanOutcomes  boolean  outcome  int  nodeType  FlowScope  joinedScope  leftScope  rightScope  
[BugLab_Wrong_Operator]^if  ( nodeType == Token.AND || outcome || nodeType == Token.OR && !outcome )  {^1118^1119^^^^1117^1125^if  ( nodeType == Token.AND && outcome || nodeType == Token.OR && !outcome )  {^[CLASS] BooleanOutcomePair  [METHOD] getOutcomeFlowScope [RETURN_TYPE] FlowScope   int nodeType boolean outcome [VARIABLES] BooleanLiteralSet  booleanValues  toBooleanOutcomes  boolean  outcome  int  nodeType  FlowScope  joinedScope  leftScope  rightScope  
[BugLab_Wrong_Operator]^if  ( nodeType >= Token.AND && outcome || nodeType == Token.OR && !outcome )  {^1118^1119^^^^1117^1125^if  ( nodeType == Token.AND && outcome || nodeType == Token.OR && !outcome )  {^[CLASS] BooleanOutcomePair  [METHOD] getOutcomeFlowScope [RETURN_TYPE] FlowScope   int nodeType boolean outcome [VARIABLES] BooleanLiteralSet  booleanValues  toBooleanOutcomes  boolean  outcome  int  nodeType  FlowScope  joinedScope  leftScope  rightScope  
[BugLab_Wrong_Operator]^if  ( nodeType <= Token.AND && outcome || nodeType == Token.OR && !outcome )  {^1118^1119^^^^1117^1125^if  ( nodeType == Token.AND && outcome || nodeType == Token.OR && !outcome )  {^[CLASS] BooleanOutcomePair  [METHOD] getOutcomeFlowScope [RETURN_TYPE] FlowScope   int nodeType boolean outcome [VARIABLES] BooleanLiteralSet  booleanValues  toBooleanOutcomes  boolean  outcome  int  nodeType  FlowScope  joinedScope  leftScope  rightScope  
[BugLab_Variable_Misuse]^return leftScope;^1121^^^^^1117^1125^return rightScope;^[CLASS] BooleanOutcomePair  [METHOD] getOutcomeFlowScope [RETURN_TYPE] FlowScope   int nodeType boolean outcome [VARIABLES] BooleanLiteralSet  booleanValues  toBooleanOutcomes  boolean  outcome  int  nodeType  FlowScope  joinedScope  leftScope  rightScope  
