[buglab_swap_variables]^if  ( bottomScope == input )  {^122^^^^^119^129^if  ( input == bottomScope )  {^[CLASS] TypeInference BooleanOutcomePair  [METHOD] flowThrough [RETURN_TYPE] FlowScope   Node n FlowScope input [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  functionScope  input  joinedScope  leftScope  output  rightScope  
[buglab_swap_variables]^output = traverse ( output, n ) ;^127^^^^^119^129^output = traverse ( n, output ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] flowThrough [RETURN_TYPE] FlowScope   Node n FlowScope input [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  functionScope  input  joinedScope  leftScope  output  rightScope  
[buglab_swap_variables]^output = traverse (  output ) ;^127^^^^^119^129^output = traverse ( n, output ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] flowThrough [RETURN_TYPE] FlowScope   Node n FlowScope input [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  functionScope  input  joinedScope  leftScope  output  rightScope  
[buglab_swap_variables]^output = traverse ( n ) ;^127^^^^^119^129^output = traverse ( n, output ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] flowThrough [RETURN_TYPE] FlowScope   Node n FlowScope input [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  functionScope  input  joinedScope  leftScope  output  rightScope  
[buglab_swap_variables]^FlowScope output = flowThrough ( input, source ) ;^139^^^^^124^154^FlowScope output = flowThrough ( source, input ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] branchedFlowThrough [RETURN_TYPE] List   Node source FlowScope input [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  Node  condition  item  source  BooleanLiteralSet  booleanValues  toBooleanOutcomes  AbstractCompiler  compiler  JSTypeRegistry  registry  DiGraphEdge  branchEdge  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanOutcomePair  conditionOutcomes  Branch  branch  List  branchEdges  result  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  
[buglab_swap_variables]^FlowScope output = flowThrough (  input ) ;^139^^^^^124^154^FlowScope output = flowThrough ( source, input ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] branchedFlowThrough [RETURN_TYPE] List   Node source FlowScope input [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  Node  condition  item  source  BooleanLiteralSet  booleanValues  toBooleanOutcomes  AbstractCompiler  compiler  JSTypeRegistry  registry  DiGraphEdge  branchEdge  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanOutcomePair  conditionOutcomes  Branch  branch  List  branchEdges  result  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  
[buglab_swap_variables]^FlowScope output = flowThrough ( source ) ;^139^^^^^124^154^FlowScope output = flowThrough ( source, input ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] branchedFlowThrough [RETURN_TYPE] List   Node source FlowScope input [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  Node  condition  item  source  BooleanLiteralSet  booleanValues  toBooleanOutcomes  AbstractCompiler  compiler  JSTypeRegistry  registry  DiGraphEdge  branchEdge  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanOutcomePair  conditionOutcomes  Branch  branch  List  branchEdges  result  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  
[buglab_swap_variables]^redeclare ( item, informed.getString (  ) , getNativeType ( STRING_TYPE )  ) ;^160^161^^^^145^175^redeclare ( informed, item.getString (  ) , getNativeType ( STRING_TYPE )  ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] branchedFlowThrough [RETURN_TYPE] List   Node source FlowScope input [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  Node  condition  item  source  BooleanLiteralSet  booleanValues  toBooleanOutcomes  AbstractCompiler  compiler  JSTypeRegistry  registry  DiGraphEdge  branchEdge  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanOutcomePair  conditionOutcomes  Branch  branch  List  branchEdges  result  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  
[buglab_swap_variables]^redeclare (  item.getString (  ) , getNativeType ( STRING_TYPE )  ) ;^160^161^^^^145^175^redeclare ( informed, item.getString (  ) , getNativeType ( STRING_TYPE )  ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] branchedFlowThrough [RETURN_TYPE] List   Node source FlowScope input [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  Node  condition  item  source  BooleanLiteralSet  booleanValues  toBooleanOutcomes  AbstractCompiler  compiler  JSTypeRegistry  registry  DiGraphEdge  branchEdge  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanOutcomePair  conditionOutcomes  Branch  branch  List  branchEdges  result  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  
[buglab_swap_variables]^redeclare ( informed.getString (  ) , getNativeType ( STRING_TYPE )  ) ;^160^161^^^^145^175^redeclare ( informed, item.getString (  ) , getNativeType ( STRING_TYPE )  ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] branchedFlowThrough [RETURN_TYPE] List   Node source FlowScope input [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  Node  condition  item  source  BooleanLiteralSet  booleanValues  toBooleanOutcomes  AbstractCompiler  compiler  JSTypeRegistry  registry  DiGraphEdge  branchEdge  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanOutcomePair  conditionOutcomes  Branch  branch  List  branchEdges  result  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  
[buglab_swap_variables]^if  ( source == null && condition.getType (  )  == Token.CASE )  {^172^^^^^157^187^if  ( condition == null && source.getType (  )  == Token.CASE )  {^[CLASS] TypeInference BooleanOutcomePair  [METHOD] branchedFlowThrough [RETURN_TYPE] List   Node source FlowScope input [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  Node  condition  item  source  BooleanLiteralSet  booleanValues  toBooleanOutcomes  AbstractCompiler  compiler  JSTypeRegistry  registry  DiGraphEdge  branchEdge  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanOutcomePair  conditionOutcomes  Branch  branch  List  branchEdges  result  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  
[buglab_swap_variables]^if  ( conditionFlowScopeFlowScope == null )  {^208^^^^^193^223^if  ( conditionFlowScope == null )  {^[CLASS] TypeInference BooleanOutcomePair  [METHOD] branchedFlowThrough [RETURN_TYPE] List   Node source FlowScope input [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  Node  condition  item  source  BooleanLiteralSet  booleanValues  toBooleanOutcomes  AbstractCompiler  compiler  JSTypeRegistry  registry  DiGraphEdge  branchEdge  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanOutcomePair  conditionOutcomes  Branch  branch  List  branchEdges  result  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  
[buglab_swap_variables]^conditionFlowScope = traverse ( output, condition.createChildFlowScope (  )  ) ;^209^210^^^^194^224^conditionFlowScope = traverse ( condition, output.createChildFlowScope (  )  ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] branchedFlowThrough [RETURN_TYPE] List   Node source FlowScope input [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  Node  condition  item  source  BooleanLiteralSet  booleanValues  toBooleanOutcomes  AbstractCompiler  compiler  JSTypeRegistry  registry  DiGraphEdge  branchEdge  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanOutcomePair  conditionOutcomes  Branch  branch  List  branchEdges  result  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  
[buglab_swap_variables]^conditionFlowScope = traverse (  output.createChildFlowScope (  )  ) ;^209^210^^^^194^224^conditionFlowScope = traverse ( condition, output.createChildFlowScope (  )  ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] branchedFlowThrough [RETURN_TYPE] List   Node source FlowScope input [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  Node  condition  item  source  BooleanLiteralSet  booleanValues  toBooleanOutcomes  AbstractCompiler  compiler  JSTypeRegistry  registry  DiGraphEdge  branchEdge  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanOutcomePair  conditionOutcomes  Branch  branch  List  branchEdges  result  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  
[buglab_swap_variables]^conditionFlowScope = traverse ( condition.createChildFlowScope (  )  ) ;^209^210^^^^194^224^conditionFlowScope = traverse ( condition, output.createChildFlowScope (  )  ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] branchedFlowThrough [RETURN_TYPE] List   Node source FlowScope input [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  Node  condition  item  source  BooleanLiteralSet  booleanValues  toBooleanOutcomes  AbstractCompiler  compiler  JSTypeRegistry  registry  DiGraphEdge  branchEdge  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanOutcomePair  conditionOutcomes  Branch  branch  List  branchEdges  result  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  
[buglab_swap_variables]^traverse ( output, condition.createChildFlowScope (  )  ) ;^210^^^^^195^225^traverse ( condition, output.createChildFlowScope (  )  ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] branchedFlowThrough [RETURN_TYPE] List   Node source FlowScope input [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  Node  condition  item  source  BooleanLiteralSet  booleanValues  toBooleanOutcomes  AbstractCompiler  compiler  JSTypeRegistry  registry  DiGraphEdge  branchEdge  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanOutcomePair  conditionOutcomes  Branch  branch  List  branchEdges  result  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  
[buglab_swap_variables]^traverse (  output.createChildFlowScope (  )  ) ;^210^^^^^195^225^traverse ( condition, output.createChildFlowScope (  )  ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] branchedFlowThrough [RETURN_TYPE] List   Node source FlowScope input [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  Node  condition  item  source  BooleanLiteralSet  booleanValues  toBooleanOutcomes  AbstractCompiler  compiler  JSTypeRegistry  registry  DiGraphEdge  branchEdge  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanOutcomePair  conditionOutcomes  Branch  branch  List  branchEdges  result  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  
[buglab_swap_variables]^traverse ( condition.createChildFlowScope (  )  ) ;^210^^^^^195^225^traverse ( condition, output.createChildFlowScope (  )  ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] branchedFlowThrough [RETURN_TYPE] List   Node source FlowScope input [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  Node  condition  item  source  BooleanLiteralSet  booleanValues  toBooleanOutcomes  AbstractCompiler  compiler  JSTypeRegistry  registry  DiGraphEdge  branchEdge  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanOutcomePair  conditionOutcomes  Branch  branch  List  branchEdges  result  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  
[buglab_swap_variables]^newScope = reverseInterpreter.getPreciserScopeKnowingConditionOutcome (  conditionFlowScope, branch == Branch.ON_TRUE ) ;^212^213^214^^^197^227^newScope = reverseInterpreter.getPreciserScopeKnowingConditionOutcome ( condition, conditionFlowScope, branch == Branch.ON_TRUE ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] branchedFlowThrough [RETURN_TYPE] List   Node source FlowScope input [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  Node  condition  item  source  BooleanLiteralSet  booleanValues  toBooleanOutcomes  AbstractCompiler  compiler  JSTypeRegistry  registry  DiGraphEdge  branchEdge  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanOutcomePair  conditionOutcomes  Branch  branch  List  branchEdges  result  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  
[buglab_swap_variables]^newScope = reverseInterpreter.getPreciserScopeKnowingConditionOutcome ( condition,  branch == Branch.ON_TRUE ) ;^212^213^214^^^197^227^newScope = reverseInterpreter.getPreciserScopeKnowingConditionOutcome ( condition, conditionFlowScope, branch == Branch.ON_TRUE ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] branchedFlowThrough [RETURN_TYPE] List   Node source FlowScope input [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  Node  condition  item  source  BooleanLiteralSet  booleanValues  toBooleanOutcomes  AbstractCompiler  compiler  JSTypeRegistry  registry  DiGraphEdge  branchEdge  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanOutcomePair  conditionOutcomes  Branch  branch  List  branchEdges  result  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  
[buglab_swap_variables]^newScope = reverseInterpreter.getPreciserScopeKnowingConditionOutcome ( branch, conditionFlowScope, condition == Branch.ON_TRUE ) ;^212^213^214^^^197^227^newScope = reverseInterpreter.getPreciserScopeKnowingConditionOutcome ( condition, conditionFlowScope, branch == Branch.ON_TRUE ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] branchedFlowThrough [RETURN_TYPE] List   Node source FlowScope input [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  Node  condition  item  source  BooleanLiteralSet  booleanValues  toBooleanOutcomes  AbstractCompiler  compiler  JSTypeRegistry  registry  DiGraphEdge  branchEdge  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanOutcomePair  conditionOutcomes  Branch  branch  List  branchEdges  result  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  
[buglab_swap_variables]^newScope = reverseInterpreter.getPreciserScopeKnowingConditionOutcome ( condition, conditionFlowScope == Branch.ON_TRUE ) ;^212^213^214^^^197^227^newScope = reverseInterpreter.getPreciserScopeKnowingConditionOutcome ( condition, conditionFlowScope, branch == Branch.ON_TRUE ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] branchedFlowThrough [RETURN_TYPE] List   Node source FlowScope input [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  Node  condition  item  source  BooleanLiteralSet  booleanValues  toBooleanOutcomes  AbstractCompiler  compiler  JSTypeRegistry  registry  DiGraphEdge  branchEdge  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanOutcomePair  conditionOutcomes  Branch  branch  List  branchEdges  result  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  
[buglab_swap_variables]^newScope = condition.getPreciserScopeKnowingConditionOutcome ( reverseInterpreter, conditionFlowScope, branch == Branch.ON_TRUE ) ;^212^213^214^^^197^227^newScope = reverseInterpreter.getPreciserScopeKnowingConditionOutcome ( condition, conditionFlowScope, branch == Branch.ON_TRUE ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] branchedFlowThrough [RETURN_TYPE] List   Node source FlowScope input [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  Node  condition  item  source  BooleanLiteralSet  booleanValues  toBooleanOutcomes  AbstractCompiler  compiler  JSTypeRegistry  registry  DiGraphEdge  branchEdge  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanOutcomePair  conditionOutcomes  Branch  branch  List  branchEdges  result  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  
[buglab_swap_variables]^reverseInterpreter.getPreciserScopeKnowingConditionOutcome ( branch, conditionFlowScope, condition == Branch.ON_TRUE ) ;^213^214^^^^198^228^reverseInterpreter.getPreciserScopeKnowingConditionOutcome ( condition, conditionFlowScope, branch == Branch.ON_TRUE ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] branchedFlowThrough [RETURN_TYPE] List   Node source FlowScope input [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  Node  condition  item  source  BooleanLiteralSet  booleanValues  toBooleanOutcomes  AbstractCompiler  compiler  JSTypeRegistry  registry  DiGraphEdge  branchEdge  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanOutcomePair  conditionOutcomes  Branch  branch  List  branchEdges  result  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  
[buglab_swap_variables]^reverseInterpreter.getPreciserScopeKnowingConditionOutcome (  conditionFlowScope, branch == Branch.ON_TRUE ) ;^213^214^^^^198^228^reverseInterpreter.getPreciserScopeKnowingConditionOutcome ( condition, conditionFlowScope, branch == Branch.ON_TRUE ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] branchedFlowThrough [RETURN_TYPE] List   Node source FlowScope input [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  Node  condition  item  source  BooleanLiteralSet  booleanValues  toBooleanOutcomes  AbstractCompiler  compiler  JSTypeRegistry  registry  DiGraphEdge  branchEdge  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanOutcomePair  conditionOutcomes  Branch  branch  List  branchEdges  result  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  
[buglab_swap_variables]^reverseInterpreter.getPreciserScopeKnowingConditionOutcome ( conditionFlowScope, condition, branch == Branch.ON_TRUE ) ;^213^214^^^^198^228^reverseInterpreter.getPreciserScopeKnowingConditionOutcome ( condition, conditionFlowScope, branch == Branch.ON_TRUE ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] branchedFlowThrough [RETURN_TYPE] List   Node source FlowScope input [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  Node  condition  item  source  BooleanLiteralSet  booleanValues  toBooleanOutcomes  AbstractCompiler  compiler  JSTypeRegistry  registry  DiGraphEdge  branchEdge  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanOutcomePair  conditionOutcomes  Branch  branch  List  branchEdges  result  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  
[buglab_swap_variables]^reverseInterpreter.getPreciserScopeKnowingConditionOutcome ( condition,  branch == Branch.ON_TRUE ) ;^213^214^^^^198^228^reverseInterpreter.getPreciserScopeKnowingConditionOutcome ( condition, conditionFlowScope, branch == Branch.ON_TRUE ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] branchedFlowThrough [RETURN_TYPE] List   Node source FlowScope input [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  Node  condition  item  source  BooleanLiteralSet  booleanValues  toBooleanOutcomes  AbstractCompiler  compiler  JSTypeRegistry  registry  DiGraphEdge  branchEdge  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanOutcomePair  conditionOutcomes  Branch  branch  List  branchEdges  result  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  
[buglab_swap_variables]^reverseInterpreter.getPreciserScopeKnowingConditionOutcome ( condition, conditionFlowScope == Branch.ON_TRUE ) ;^213^214^^^^198^228^reverseInterpreter.getPreciserScopeKnowingConditionOutcome ( condition, conditionFlowScope, branch == Branch.ON_TRUE ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] branchedFlowThrough [RETURN_TYPE] List   Node source FlowScope input [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  Node  condition  item  source  BooleanLiteralSet  booleanValues  toBooleanOutcomes  AbstractCompiler  compiler  JSTypeRegistry  registry  DiGraphEdge  branchEdge  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanOutcomePair  conditionOutcomes  Branch  branch  List  branchEdges  result  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  
[buglab_swap_variables]^if  ( condition == null )  {^194^^^^^179^209^if  ( conditionOutcomes == null )  {^[CLASS] TypeInference BooleanOutcomePair  [METHOD] branchedFlowThrough [RETURN_TYPE] List   Node source FlowScope input [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  Node  condition  item  source  BooleanLiteralSet  booleanValues  toBooleanOutcomes  AbstractCompiler  compiler  JSTypeRegistry  registry  DiGraphEdge  branchEdge  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanOutcomePair  conditionOutcomes  Branch  branch  List  branchEdges  result  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  
[buglab_swap_variables]^if  ( conditionOutcomesOutcomes == null )  {^194^^^^^179^209^if  ( conditionOutcomes == null )  {^[CLASS] TypeInference BooleanOutcomePair  [METHOD] branchedFlowThrough [RETURN_TYPE] List   Node source FlowScope input [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  Node  condition  item  source  BooleanLiteralSet  booleanValues  toBooleanOutcomes  AbstractCompiler  compiler  JSTypeRegistry  registry  DiGraphEdge  branchEdge  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanOutcomePair  conditionOutcomes  Branch  branch  List  branchEdges  result  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  
[buglab_swap_variables]^conditionOutcomes = condition.getType (  )  == Token.AND ? traverseAnd (  output.createChildFlowScope (  )  )  : traverseOr ( condition, output.createChildFlowScope (  )  ) ;^195^196^197^^^180^210^conditionOutcomes = condition.getType (  )  == Token.AND ? traverseAnd ( condition, output.createChildFlowScope (  )  )  : traverseOr ( condition, output.createChildFlowScope (  )  ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] branchedFlowThrough [RETURN_TYPE] List   Node source FlowScope input [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  Node  condition  item  source  BooleanLiteralSet  booleanValues  toBooleanOutcomes  AbstractCompiler  compiler  JSTypeRegistry  registry  DiGraphEdge  branchEdge  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanOutcomePair  conditionOutcomes  Branch  branch  List  branchEdges  result  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  
[buglab_swap_variables]^conditionOutcomes = output.getType (  )  == Token.AND ? traverseAnd ( condition, condition.createChildFlowScope (  )  )  : traverseOr ( condition, output.createChildFlowScope (  )  ) ;^195^196^197^^^180^210^conditionOutcomes = condition.getType (  )  == Token.AND ? traverseAnd ( condition, output.createChildFlowScope (  )  )  : traverseOr ( condition, output.createChildFlowScope (  )  ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] branchedFlowThrough [RETURN_TYPE] List   Node source FlowScope input [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  Node  condition  item  source  BooleanLiteralSet  booleanValues  toBooleanOutcomes  AbstractCompiler  compiler  JSTypeRegistry  registry  DiGraphEdge  branchEdge  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanOutcomePair  conditionOutcomes  Branch  branch  List  branchEdges  result  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  
[buglab_swap_variables]^conditionOutcomes = condition.getType (  )  == Token.AND ? traverseAnd ( condition.createChildFlowScope (  )  )  : traverseOr ( condition, output.createChildFlowScope (  )  ) ;^195^196^197^^^180^210^conditionOutcomes = condition.getType (  )  == Token.AND ? traverseAnd ( condition, output.createChildFlowScope (  )  )  : traverseOr ( condition, output.createChildFlowScope (  )  ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] branchedFlowThrough [RETURN_TYPE] List   Node source FlowScope input [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  Node  condition  item  source  BooleanLiteralSet  booleanValues  toBooleanOutcomes  AbstractCompiler  compiler  JSTypeRegistry  registry  DiGraphEdge  branchEdge  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanOutcomePair  conditionOutcomes  Branch  branch  List  branchEdges  result  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  
[buglab_swap_variables]^traverseAnd ( output, condition.createChildFlowScope (  )  )  : traverseOr ( condition, output.createChildFlowScope (  )  ) ;^196^197^^^^181^211^traverseAnd ( condition, output.createChildFlowScope (  )  )  : traverseOr ( condition, output.createChildFlowScope (  )  ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] branchedFlowThrough [RETURN_TYPE] List   Node source FlowScope input [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  Node  condition  item  source  BooleanLiteralSet  booleanValues  toBooleanOutcomes  AbstractCompiler  compiler  JSTypeRegistry  registry  DiGraphEdge  branchEdge  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanOutcomePair  conditionOutcomes  Branch  branch  List  branchEdges  result  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  
[buglab_swap_variables]^traverseAnd (  output.createChildFlowScope (  )  )  : traverseOr ( condition, output.createChildFlowScope (  )  ) ;^196^197^^^^181^211^traverseAnd ( condition, output.createChildFlowScope (  )  )  : traverseOr ( condition, output.createChildFlowScope (  )  ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] branchedFlowThrough [RETURN_TYPE] List   Node source FlowScope input [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  Node  condition  item  source  BooleanLiteralSet  booleanValues  toBooleanOutcomes  AbstractCompiler  compiler  JSTypeRegistry  registry  DiGraphEdge  branchEdge  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanOutcomePair  conditionOutcomes  Branch  branch  List  branchEdges  result  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  
[buglab_swap_variables]^traverseAnd ( condition.createChildFlowScope (  )  )  : traverseOr ( condition, output.createChildFlowScope (  )  ) ;^196^197^^^^181^211^traverseAnd ( condition, output.createChildFlowScope (  )  )  : traverseOr ( condition, output.createChildFlowScope (  )  ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] branchedFlowThrough [RETURN_TYPE] List   Node source FlowScope input [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  Node  condition  item  source  BooleanLiteralSet  booleanValues  toBooleanOutcomes  AbstractCompiler  compiler  JSTypeRegistry  registry  DiGraphEdge  branchEdge  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanOutcomePair  conditionOutcomes  Branch  branch  List  branchEdges  result  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  
[buglab_swap_variables]^traverseOr ( output, condition.createChildFlowScope (  )  ) ;^197^^^^^182^212^traverseOr ( condition, output.createChildFlowScope (  )  ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] branchedFlowThrough [RETURN_TYPE] List   Node source FlowScope input [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  Node  condition  item  source  BooleanLiteralSet  booleanValues  toBooleanOutcomes  AbstractCompiler  compiler  JSTypeRegistry  registry  DiGraphEdge  branchEdge  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanOutcomePair  conditionOutcomes  Branch  branch  List  branchEdges  result  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  
[buglab_swap_variables]^traverseOr (  output.createChildFlowScope (  )  ) ;^197^^^^^182^212^traverseOr ( condition, output.createChildFlowScope (  )  ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] branchedFlowThrough [RETURN_TYPE] List   Node source FlowScope input [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  Node  condition  item  source  BooleanLiteralSet  booleanValues  toBooleanOutcomes  AbstractCompiler  compiler  JSTypeRegistry  registry  DiGraphEdge  branchEdge  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanOutcomePair  conditionOutcomes  Branch  branch  List  branchEdges  result  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  
[buglab_swap_variables]^traverseOr ( condition.createChildFlowScope (  )  ) ;^197^^^^^182^212^traverseOr ( condition, output.createChildFlowScope (  )  ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] branchedFlowThrough [RETURN_TYPE] List   Node source FlowScope input [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  Node  condition  item  source  BooleanLiteralSet  booleanValues  toBooleanOutcomes  AbstractCompiler  compiler  JSTypeRegistry  registry  DiGraphEdge  branchEdge  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanOutcomePair  conditionOutcomes  Branch  branch  List  branchEdges  result  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  
[buglab_swap_variables]^newScope = reverseInterpreter.getPreciserScopeKnowingConditionOutcome (  conditionOutcomes.getOutcomeFlowScope (^199^200^201^202^^184^214^newScope = reverseInterpreter.getPreciserScopeKnowingConditionOutcome ( condition, conditionOutcomes.getOutcomeFlowScope (^[CLASS] TypeInference BooleanOutcomePair  [METHOD] branchedFlowThrough [RETURN_TYPE] List   Node source FlowScope input [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  Node  condition  item  source  BooleanLiteralSet  booleanValues  toBooleanOutcomes  AbstractCompiler  compiler  JSTypeRegistry  registry  DiGraphEdge  branchEdge  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanOutcomePair  conditionOutcomes  Branch  branch  List  branchEdges  result  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  
[buglab_swap_variables]^newScope = reverseInterpreter.getPreciserScopeKnowingConditionOutcome ( conditionOutcomes, condition.getOutcomeFlowScope (^199^200^201^202^^184^214^newScope = reverseInterpreter.getPreciserScopeKnowingConditionOutcome ( condition, conditionOutcomes.getOutcomeFlowScope (^[CLASS] TypeInference BooleanOutcomePair  [METHOD] branchedFlowThrough [RETURN_TYPE] List   Node source FlowScope input [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  Node  condition  item  source  BooleanLiteralSet  booleanValues  toBooleanOutcomes  AbstractCompiler  compiler  JSTypeRegistry  registry  DiGraphEdge  branchEdge  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanOutcomePair  conditionOutcomes  Branch  branch  List  branchEdges  result  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  
[buglab_swap_variables]^newScope = reverseInterpreter.getPreciserScopeKnowingConditionOutcome ( condition.getOutcomeFlowScope (^199^200^201^202^^184^214^newScope = reverseInterpreter.getPreciserScopeKnowingConditionOutcome ( condition, conditionOutcomes.getOutcomeFlowScope (^[CLASS] TypeInference BooleanOutcomePair  [METHOD] branchedFlowThrough [RETURN_TYPE] List   Node source FlowScope input [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  Node  condition  item  source  BooleanLiteralSet  booleanValues  toBooleanOutcomes  AbstractCompiler  compiler  JSTypeRegistry  registry  DiGraphEdge  branchEdge  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanOutcomePair  conditionOutcomes  Branch  branch  List  branchEdges  result  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  
[buglab_swap_variables]^newScope = conditionOutcomes.getPreciserScopeKnowingConditionOutcome ( condition, reverseInterpreter.getOutcomeFlowScope (^199^200^201^202^^184^214^newScope = reverseInterpreter.getPreciserScopeKnowingConditionOutcome ( condition, conditionOutcomes.getOutcomeFlowScope (^[CLASS] TypeInference BooleanOutcomePair  [METHOD] branchedFlowThrough [RETURN_TYPE] List   Node source FlowScope input [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  Node  condition  item  source  BooleanLiteralSet  booleanValues  toBooleanOutcomes  AbstractCompiler  compiler  JSTypeRegistry  registry  DiGraphEdge  branchEdge  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanOutcomePair  conditionOutcomes  Branch  branch  List  branchEdges  result  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  
[buglab_swap_variables]^reverseInterpreter.getPreciserScopeKnowingConditionOutcome (  conditionOutcomes.getOutcomeFlowScope ( condition.getType (  ) , branch == Branch.ON_TRUE ) ,^200^201^202^203^^185^215^reverseInterpreter.getPreciserScopeKnowingConditionOutcome ( condition, conditionOutcomes.getOutcomeFlowScope ( condition.getType (  ) , branch == Branch.ON_TRUE ) ,^[CLASS] TypeInference BooleanOutcomePair  [METHOD] branchedFlowThrough [RETURN_TYPE] List   Node source FlowScope input [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  Node  condition  item  source  BooleanLiteralSet  booleanValues  toBooleanOutcomes  AbstractCompiler  compiler  JSTypeRegistry  registry  DiGraphEdge  branchEdge  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanOutcomePair  conditionOutcomes  Branch  branch  List  branchEdges  result  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  
[buglab_swap_variables]^reverseInterpreter.getPreciserScopeKnowingConditionOutcome ( condition, branch.getOutcomeFlowScope ( condition.getType (  ) , conditionOutcomes == Branch.ON_TRUE ) ,^200^201^202^203^^185^215^reverseInterpreter.getPreciserScopeKnowingConditionOutcome ( condition, conditionOutcomes.getOutcomeFlowScope ( condition.getType (  ) , branch == Branch.ON_TRUE ) ,^[CLASS] TypeInference BooleanOutcomePair  [METHOD] branchedFlowThrough [RETURN_TYPE] List   Node source FlowScope input [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  Node  condition  item  source  BooleanLiteralSet  booleanValues  toBooleanOutcomes  AbstractCompiler  compiler  JSTypeRegistry  registry  DiGraphEdge  branchEdge  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanOutcomePair  conditionOutcomes  Branch  branch  List  branchEdges  result  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  
[buglab_swap_variables]^reverseInterpreter.getPreciserScopeKnowingConditionOutcome ( condition.getOutcomeFlowScope ( condition.getType (  ) , branch == Branch.ON_TRUE ) ,^200^201^202^203^^185^215^reverseInterpreter.getPreciserScopeKnowingConditionOutcome ( condition, conditionOutcomes.getOutcomeFlowScope ( condition.getType (  ) , branch == Branch.ON_TRUE ) ,^[CLASS] TypeInference BooleanOutcomePair  [METHOD] branchedFlowThrough [RETURN_TYPE] List   Node source FlowScope input [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  Node  condition  item  source  BooleanLiteralSet  booleanValues  toBooleanOutcomes  AbstractCompiler  compiler  JSTypeRegistry  registry  DiGraphEdge  branchEdge  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanOutcomePair  conditionOutcomes  Branch  branch  List  branchEdges  result  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  
[buglab_swap_variables]^reverseInterpreter.getPreciserScopeKnowingConditionOutcome ( condition, conditionOutcomes.getOutcomeFlowScope ( condition.getType (  )  == Branch.ON_TRUE ) ,^200^201^202^203^^185^215^reverseInterpreter.getPreciserScopeKnowingConditionOutcome ( condition, conditionOutcomes.getOutcomeFlowScope ( condition.getType (  ) , branch == Branch.ON_TRUE ) ,^[CLASS] TypeInference BooleanOutcomePair  [METHOD] branchedFlowThrough [RETURN_TYPE] List   Node source FlowScope input [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  Node  condition  item  source  BooleanLiteralSet  booleanValues  toBooleanOutcomes  AbstractCompiler  compiler  JSTypeRegistry  registry  DiGraphEdge  branchEdge  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanOutcomePair  conditionOutcomes  Branch  branch  List  branchEdges  result  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  
[buglab_swap_variables]^conditionOutcomes.getOutcomeFlowScope ( condition.getType (  )  == Branch.ON_TRUE ) , branch == Branch.ON_TRUE ) ;^202^203^204^^^187^217^conditionOutcomes.getOutcomeFlowScope ( condition.getType (  ) , branch == Branch.ON_TRUE ) , branch == Branch.ON_TRUE ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] branchedFlowThrough [RETURN_TYPE] List   Node source FlowScope input [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  Node  condition  item  source  BooleanLiteralSet  booleanValues  toBooleanOutcomes  AbstractCompiler  compiler  JSTypeRegistry  registry  DiGraphEdge  branchEdge  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanOutcomePair  conditionOutcomes  Branch  branch  List  branchEdges  result  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  
[buglab_swap_variables]^if  ( condition == null )  {^208^^^^^193^223^if  ( conditionFlowScope == null )  {^[CLASS] TypeInference BooleanOutcomePair  [METHOD] branchedFlowThrough [RETURN_TYPE] List   Node source FlowScope input [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  Node  condition  item  source  BooleanLiteralSet  booleanValues  toBooleanOutcomes  AbstractCompiler  compiler  JSTypeRegistry  registry  DiGraphEdge  branchEdge  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanOutcomePair  conditionOutcomes  Branch  branch  List  branchEdges  result  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  
[buglab_swap_variables]^newScope = reverseInterpreter.getPreciserScopeKnowingConditionOutcome ( condition, branch, conditionFlowScope == Branch.ON_TRUE ) ;^212^213^214^^^197^227^newScope = reverseInterpreter.getPreciserScopeKnowingConditionOutcome ( condition, conditionFlowScope, branch == Branch.ON_TRUE ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] branchedFlowThrough [RETURN_TYPE] List   Node source FlowScope input [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  Node  condition  item  source  BooleanLiteralSet  booleanValues  toBooleanOutcomes  AbstractCompiler  compiler  JSTypeRegistry  registry  DiGraphEdge  branchEdge  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanOutcomePair  conditionOutcomes  Branch  branch  List  branchEdges  result  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  
[buglab_swap_variables]^reverseInterpreter.getPreciserScopeKnowingConditionOutcome ( condition, branch, conditionFlowScope == Branch.ON_TRUE ) ;^213^214^^^^198^228^reverseInterpreter.getPreciserScopeKnowingConditionOutcome ( condition, conditionFlowScope, branch == Branch.ON_TRUE ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] branchedFlowThrough [RETURN_TYPE] List   Node source FlowScope input [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  Node  condition  item  source  BooleanLiteralSet  booleanValues  toBooleanOutcomes  AbstractCompiler  compiler  JSTypeRegistry  registry  DiGraphEdge  branchEdge  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanOutcomePair  conditionOutcomes  Branch  branch  List  branchEdges  result  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  
[buglab_swap_variables]^reverseInterpreter.getPreciserScopeKnowingConditionOutcome ( branch, conditionOutcomes.getOutcomeFlowScope ( condition.getType (  ) , condition == Branch.ON_TRUE ) ,^200^201^202^203^^185^215^reverseInterpreter.getPreciserScopeKnowingConditionOutcome ( condition, conditionOutcomes.getOutcomeFlowScope ( condition.getType (  ) , branch == Branch.ON_TRUE ) ,^[CLASS] TypeInference BooleanOutcomePair  [METHOD] branchedFlowThrough [RETURN_TYPE] List   Node source FlowScope input [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  Node  condition  item  source  BooleanLiteralSet  booleanValues  toBooleanOutcomes  AbstractCompiler  compiler  JSTypeRegistry  registry  DiGraphEdge  branchEdge  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanOutcomePair  conditionOutcomes  Branch  branch  List  branchEdges  result  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  
[buglab_swap_variables]^reverseInterpreter.getPreciserScopeKnowingConditionOutcome ( conditionOutcomes, condition.getOutcomeFlowScope ( condition.getType (  ) , branch == Branch.ON_TRUE ) ,^200^201^202^203^^185^215^reverseInterpreter.getPreciserScopeKnowingConditionOutcome ( condition, conditionOutcomes.getOutcomeFlowScope ( condition.getType (  ) , branch == Branch.ON_TRUE ) ,^[CLASS] TypeInference BooleanOutcomePair  [METHOD] branchedFlowThrough [RETURN_TYPE] List   Node source FlowScope input [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  Node  condition  item  source  BooleanLiteralSet  booleanValues  toBooleanOutcomes  AbstractCompiler  compiler  JSTypeRegistry  registry  DiGraphEdge  branchEdge  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanOutcomePair  conditionOutcomes  Branch  branch  List  branchEdges  result  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  
[buglab_swap_variables]^conditionOutcomes.getOutcomeFlowScope ( branch.getType (  ) , condition == Branch.ON_TRUE ) , branch == Branch.ON_TRUE ) ;^202^203^204^^^187^217^conditionOutcomes.getOutcomeFlowScope ( condition.getType (  ) , branch == Branch.ON_TRUE ) , branch == Branch.ON_TRUE ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] branchedFlowThrough [RETURN_TYPE] List   Node source FlowScope input [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  Node  condition  item  source  BooleanLiteralSet  booleanValues  toBooleanOutcomes  AbstractCompiler  compiler  JSTypeRegistry  registry  DiGraphEdge  branchEdge  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanOutcomePair  conditionOutcomes  Branch  branch  List  branchEdges  result  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  
[buglab_swap_variables]^return new Node ( Token.SHEQ, caseExpressionNode.cloneTree (  ) , switchExpressionNode.cloneTree (  )  ) ;^233^234^^^^229^235^return new Node ( Token.SHEQ, switchExpressionNode.cloneTree (  ) , caseExpressionNode.cloneTree (  )  ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] createSwitchCaseConditionExpression [RETURN_TYPE] Node   Node caseNode [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  caseExpressionNode  caseNode  switchExpressionNode  switchNode  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  
[buglab_swap_variables]^return new Node ( Token.SHEQ.cloneTree (  ) , caseExpressionNode.cloneTree (  )  ) ;^233^234^^^^229^235^return new Node ( Token.SHEQ, switchExpressionNode.cloneTree (  ) , caseExpressionNode.cloneTree (  )  ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] createSwitchCaseConditionExpression [RETURN_TYPE] Node   Node caseNode [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  caseExpressionNode  caseNode  switchExpressionNode  switchNode  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  
[buglab_swap_variables]^return new Node ( Token.SHEQ, switchExpressionNode.cloneTree (  ) .cloneTree (  )  ) ;^233^234^^^^229^235^return new Node ( Token.SHEQ, switchExpressionNode.cloneTree (  ) , caseExpressionNode.cloneTree (  )  ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] createSwitchCaseConditionExpression [RETURN_TYPE] Node   Node caseNode [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  caseExpressionNode  caseNode  switchExpressionNode  switchNode  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  
[buglab_swap_variables]^return new Node ( Token. switchExpressionNode.cloneTree (  ) , caseExpressionNode.cloneTree (  )  ) ;^233^234^^^^229^235^return new Node ( Token.SHEQ, switchExpressionNode.cloneTree (  ) , caseExpressionNode.cloneTree (  )  ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] createSwitchCaseConditionExpression [RETURN_TYPE] Node   Node caseNode [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  caseExpressionNode  caseNode  switchExpressionNode  switchNode  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  
[buglab_swap_variables]^scope = traverseAssign ( scope, n ) ;^257^^^^^242^272^scope = traverseAssign ( n, scope ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverse [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[buglab_swap_variables]^scope = traverseAssign (  scope ) ;^257^^^^^242^272^scope = traverseAssign ( n, scope ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverse [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[buglab_swap_variables]^scope = traverseAssign ( n ) ;^257^^^^^242^272^scope = traverseAssign ( n, scope ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverse [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[buglab_swap_variables]^scope = traverseName ( scope, n ) ;^261^^^^^246^276^scope = traverseName ( n, scope ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverse [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[buglab_swap_variables]^scope = traverseName (  scope ) ;^261^^^^^246^276^scope = traverseName ( n, scope ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverse [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[buglab_swap_variables]^scope = traverseName ( n ) ;^261^^^^^246^276^scope = traverseName ( n, scope ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverse [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[buglab_swap_variables]^scope = traverseGetProp ( scope, n ) ;^265^^^^^250^280^scope = traverseGetProp ( n, scope ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverse [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[buglab_swap_variables]^scope = traverseGetProp (  scope ) ;^265^^^^^250^280^scope = traverseGetProp ( n, scope ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverse [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[buglab_swap_variables]^scope = traverseGetProp ( n ) ;^265^^^^^250^280^scope = traverseGetProp ( n, scope ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverse [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[buglab_swap_variables]^scope = traverseAnd ( scope, n ) .getJoinedFlowScope (  ) .createChildFlowScope (  ) ;^269^270^^^^254^284^scope = traverseAnd ( n, scope ) .getJoinedFlowScope (  ) .createChildFlowScope (  ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverse [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[buglab_swap_variables]^scope = traverseAnd (  scope ) .getJoinedFlowScope (  ) .createChildFlowScope (  ) ;^269^270^^^^254^284^scope = traverseAnd ( n, scope ) .getJoinedFlowScope (  ) .createChildFlowScope (  ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverse [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[buglab_swap_variables]^scope = traverseAnd ( n ) .getJoinedFlowScope (  ) .createChildFlowScope (  ) ;^269^270^^^^254^284^scope = traverseAnd ( n, scope ) .getJoinedFlowScope (  ) .createChildFlowScope (  ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverse [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[buglab_swap_variables]^scope = traverseOr ( scope, n ) .getJoinedFlowScope (  ) .createChildFlowScope (  ) ;^274^275^^^^259^289^scope = traverseOr ( n, scope ) .getJoinedFlowScope (  ) .createChildFlowScope (  ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverse [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[buglab_swap_variables]^scope = traverseOr (  scope ) .getJoinedFlowScope (  ) .createChildFlowScope (  ) ;^274^275^^^^259^289^scope = traverseOr ( n, scope ) .getJoinedFlowScope (  ) .createChildFlowScope (  ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverse [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[buglab_swap_variables]^scope = traverseOr ( n ) .getJoinedFlowScope (  ) .createChildFlowScope (  ) ;^274^275^^^^259^289^scope = traverseOr ( n, scope ) .getJoinedFlowScope (  ) .createChildFlowScope (  ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverse [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[buglab_swap_variables]^scope = traverseHook ( scope, n ) ;^279^^^^^264^294^scope = traverseHook ( n, scope ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverse [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[buglab_swap_variables]^scope = traverseHook (  scope ) ;^279^^^^^264^294^scope = traverseHook ( n, scope ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverse [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[buglab_swap_variables]^scope = traverseHook ( n ) ;^279^^^^^264^294^scope = traverseHook ( n, scope ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverse [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[buglab_swap_variables]^scope = traverseObjectLiteral ( scope, n ) ;^283^^^^^268^298^scope = traverseObjectLiteral ( n, scope ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverse [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[buglab_swap_variables]^scope = traverseObjectLiteral (  scope ) ;^283^^^^^268^298^scope = traverseObjectLiteral ( n, scope ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverse [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[buglab_swap_variables]^scope = traverseObjectLiteral ( n ) ;^283^^^^^268^298^scope = traverseObjectLiteral ( n, scope ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverse [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[buglab_swap_variables]^scope = traverseCall ( scope, n ) ;^287^^^^^272^302^scope = traverseCall ( n, scope ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverse [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[buglab_swap_variables]^scope = traverseCall (  scope ) ;^287^^^^^272^302^scope = traverseCall ( n, scope ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverse [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[buglab_swap_variables]^scope = traverseCall ( n ) ;^287^^^^^272^302^scope = traverseCall ( n, scope ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverse [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[buglab_swap_variables]^scope = traverseNew ( scope, n ) ;^291^^^^^276^306^scope = traverseNew ( n, scope ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverse [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[buglab_swap_variables]^scope = traverseNew (  scope ) ;^291^^^^^276^306^scope = traverseNew ( n, scope ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverse [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[buglab_swap_variables]^scope = traverseNew ( n ) ;^291^^^^^276^306^scope = traverseNew ( n, scope ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverse [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[buglab_swap_variables]^scope = traverseAdd ( scope, n ) ;^296^^^^^281^311^scope = traverseAdd ( n, scope ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverse [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[buglab_swap_variables]^scope = traverseAdd (  scope ) ;^296^^^^^281^311^scope = traverseAdd ( n, scope ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverse [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[buglab_swap_variables]^scope = traverseAdd ( n ) ;^296^^^^^281^311^scope = traverseAdd ( n, scope ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverse [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[buglab_swap_variables]^scope = traverse ( scope.getFirstChild (  ) , n ) ;^301^^^^^286^316^scope = traverse ( n.getFirstChild (  ) , scope ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverse [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[buglab_swap_variables]^scope = traverse ( n.getFirstChild (  )  ) ;^301^^^^^286^316^scope = traverse ( n.getFirstChild (  ) , scope ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverse [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[buglab_swap_variables]^scope = traverseArrayLiteral ( scope, n ) ;^314^^^^^299^329^scope = traverseArrayLiteral ( n, scope ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverse [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[buglab_swap_variables]^scope = traverseArrayLiteral (  scope ) ;^314^^^^^299^329^scope = traverseArrayLiteral ( n, scope ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverse [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[buglab_swap_variables]^scope = traverseArrayLiteral ( n ) ;^314^^^^^299^329^scope = traverseArrayLiteral ( n, scope ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverse [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[buglab_swap_variables]^scope = traverseChildren ( scope, n ) ;^353^^^^^338^368^scope = traverseChildren ( n, scope ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverse [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[buglab_swap_variables]^scope = traverseChildren (  scope ) ;^353^^^^^338^368^scope = traverseChildren ( n, scope ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverse [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[buglab_swap_variables]^scope = traverseChildren ( n ) ;^353^^^^^338^368^scope = traverseChildren ( n, scope ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverse [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[buglab_swap_variables]^scope = traverse ( scope.getFirstChild (  ) , n ) ;^359^^^^^344^374^scope = traverse ( n.getFirstChild (  ) , scope ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverse [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[buglab_swap_variables]^scope = traverse ( n.getFirstChild (  )  ) ;^359^^^^^344^374^scope = traverse ( n.getFirstChild (  ) , scope ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverse [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[buglab_swap_variables]^scope = traverseChildren ( scope, n ) ;^364^^^^^349^379^scope = traverseChildren ( n, scope ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverse [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[buglab_swap_variables]^scope = traverseChildren (  scope ) ;^364^^^^^349^379^scope = traverseChildren ( n, scope ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverse [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[buglab_swap_variables]^scope = traverseChildren ( n ) ;^364^^^^^349^379^scope = traverseChildren ( n, scope ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverse [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[buglab_swap_variables]^scope = traverseChildren ( scope, n ) ;^370^^^^^355^385^scope = traverseChildren ( n, scope ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverse [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[buglab_swap_variables]^scope = traverseChildren (  scope ) ;^370^^^^^355^385^scope = traverseChildren ( n, scope ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverse [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[buglab_swap_variables]^scope = traverseChildren ( n ) ;^370^^^^^355^385^scope = traverseChildren ( n, scope ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverse [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[buglab_swap_variables]^scope = traverseChildren ( scope, n ) ;^386^^^^^371^401^scope = traverseChildren ( n, scope ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverse [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[buglab_swap_variables]^scope = traverseChildren (  scope ) ;^386^^^^^371^401^scope = traverseChildren ( n, scope ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverse [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[buglab_swap_variables]^scope = traverseChildren ( n ) ;^386^^^^^371^401^scope = traverseChildren ( n, scope ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverse [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[buglab_swap_variables]^scope = traverseGetElem ( scope, n ) ;^391^^^^^376^406^scope = traverseGetElem ( n, scope ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverse [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[buglab_swap_variables]^scope = traverseGetElem (  scope ) ;^391^^^^^376^406^scope = traverseGetElem ( n, scope ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverse [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[buglab_swap_variables]^scope = traverseGetElem ( n ) ;^391^^^^^376^406^scope = traverseGetElem ( n, scope ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverse [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[buglab_swap_variables]^scope = traverseChildren ( scope, n ) ;^395^^^^^380^410^scope = traverseChildren ( n, scope ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverse [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[buglab_swap_variables]^scope = traverseChildren (  scope ) ;^395^^^^^380^410^scope = traverseChildren ( n, scope ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverse [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[buglab_swap_variables]^scope = traverseChildren ( n ) ;^395^^^^^380^410^scope = traverseChildren ( n, scope ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverse [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[buglab_swap_variables]^scope = traverseChildren ( scope, n ) ;^404^^^^^389^419^scope = traverseChildren ( n, scope ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverse [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[buglab_swap_variables]^scope = traverseChildren (  scope ) ;^404^^^^^389^419^scope = traverseChildren ( n, scope ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverse [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[buglab_swap_variables]^scope = traverseChildren ( n ) ;^404^^^^^389^419^scope = traverseChildren ( n, scope ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverse [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[buglab_swap_variables]^scope = traverseCatch ( scope, n ) ;^408^^^^^393^423^scope = traverseCatch ( n, scope ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverse [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[buglab_swap_variables]^scope = traverseCatch (  scope ) ;^408^^^^^393^423^scope = traverseCatch ( n, scope ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverse [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[buglab_swap_variables]^scope = traverseCatch ( n ) ;^408^^^^^393^423^scope = traverseCatch ( n, scope ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverse [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[buglab_swap_variables]^updateScopeForTypeChange ( n, scope, n.getJSType (  ) , castType ) ;^421^^^^^419^422^updateScopeForTypeChange ( scope, n, n.getJSType (  ) , castType ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverse [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[buglab_swap_variables]^updateScopeForTypeChange (  n, n.getJSType (  ) , castType ) ;^421^^^^^419^422^updateScopeForTypeChange ( scope, n, n.getJSType (  ) , castType ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverse [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[buglab_swap_variables]^updateScopeForTypeChange ( scope,  n.getJSType (  ) , castType ) ;^421^^^^^419^422^updateScopeForTypeChange ( scope, n, n.getJSType (  ) , castType ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverse [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[buglab_swap_variables]^updateScopeForTypeChange ( castType, n, n.getJSType (  ) , scope ) ;^421^^^^^419^422^updateScopeForTypeChange ( scope, n, n.getJSType (  ) , castType ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverse [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[buglab_swap_variables]^updateScopeForTypeChange ( scope, n, n.getJSType (  )  ) ;^421^^^^^419^422^updateScopeForTypeChange ( scope, n, n.getJSType (  ) , castType ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverse [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[buglab_swap_variables]^JSType castType = syntacticScope.getType (  ) .evaluate ( info ) ;^414^^^^^399^429^JSType castType = info.getType (  ) .evaluate ( syntacticScope ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverse [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[buglab_swap_variables]^updateScopeForTypeChange ( n, scope, n.getJSType (  ) , castType ) ;^421^^^^^406^436^updateScopeForTypeChange ( scope, n, n.getJSType (  ) , castType ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverse [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[buglab_swap_variables]^updateScopeForTypeChange (  n, n.getJSType (  ) , castType ) ;^421^^^^^406^436^updateScopeForTypeChange ( scope, n, n.getJSType (  ) , castType ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverse [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[buglab_swap_variables]^updateScopeForTypeChange ( scope,  n.getJSType (  ) , castType ) ;^421^^^^^406^436^updateScopeForTypeChange ( scope, n, n.getJSType (  ) , castType ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverse [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[buglab_swap_variables]^updateScopeForTypeChange ( scope, castType, n.getJSType (  ) , n ) ;^421^^^^^406^436^updateScopeForTypeChange ( scope, n, n.getJSType (  ) , castType ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverse [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[buglab_swap_variables]^updateScopeForTypeChange ( scope, n, n.getJSType (  )  ) ;^421^^^^^406^436^updateScopeForTypeChange ( scope, n, n.getJSType (  ) , castType ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverse [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[buglab_swap_variables]^updateScopeForTypeChange ( castType, n, n.getJSType (  ) , scope ) ;^421^^^^^406^436^updateScopeForTypeChange ( scope, n, n.getJSType (  ) , castType ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverse [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[buglab_swap_variables]^updateScopeForTypeChange ( scope, castType, n.getJSType (  ) , n ) ;^421^^^^^419^422^updateScopeForTypeChange ( scope, n, n.getJSType (  ) , castType ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverse [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[buglab_swap_variables]^redeclare ( name, scope.getString (  ) , type ) ;^439^^^^^435^441^redeclare ( scope, name.getString (  ) , type ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseCatch [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  name  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[buglab_swap_variables]^redeclare (  name.getString (  ) , type ) ;^439^^^^^435^441^redeclare ( scope, name.getString (  ) , type ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseCatch [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  name  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[buglab_swap_variables]^redeclare ( scope, type.getString (  ) , name ) ;^439^^^^^435^441^redeclare ( scope, name.getString (  ) , type ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseCatch [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  name  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[buglab_swap_variables]^redeclare ( scope.getString (  ) , type ) ;^439^^^^^435^441^redeclare ( scope, name.getString (  ) , type ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseCatch [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  name  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[buglab_swap_variables]^redeclare ( type, name.getString (  ) , scope ) ;^439^^^^^435^441^redeclare ( scope, name.getString (  ) , type ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseCatch [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  name  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[buglab_swap_variables]^redeclare ( scope, name.getString (  )  ) ;^439^^^^^435^441^redeclare ( scope, name.getString (  ) , type ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseCatch [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  name  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[buglab_swap_variables]^scope = traverseChildren ( scope, n ) ;^446^^^^^443^454^scope = traverseChildren ( n, scope ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseAssign [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  leftType  rightType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  left  n  right  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[buglab_swap_variables]^scope = traverseChildren (  scope ) ;^446^^^^^443^454^scope = traverseChildren ( n, scope ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseAssign [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  leftType  rightType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  left  n  right  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[buglab_swap_variables]^scope = traverseChildren ( n ) ;^446^^^^^443^454^scope = traverseChildren ( n, scope ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseAssign [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  leftType  rightType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  left  n  right  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[buglab_swap_variables]^updateScopeForTypeChange ( leftType, left, scope, rightType ) ;^452^^^^^443^454^updateScopeForTypeChange ( scope, left, leftType, rightType ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseAssign [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  leftType  rightType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  left  n  right  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[buglab_swap_variables]^updateScopeForTypeChange (  left, leftType, rightType ) ;^452^^^^^443^454^updateScopeForTypeChange ( scope, left, leftType, rightType ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseAssign [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  leftType  rightType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  left  n  right  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[buglab_swap_variables]^updateScopeForTypeChange ( scope, rightType, leftType, left ) ;^452^^^^^443^454^updateScopeForTypeChange ( scope, left, leftType, rightType ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseAssign [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  leftType  rightType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  left  n  right  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[buglab_swap_variables]^updateScopeForTypeChange ( scope,  leftType, rightType ) ;^452^^^^^443^454^updateScopeForTypeChange ( scope, left, leftType, rightType ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseAssign [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  leftType  rightType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  left  n  right  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[buglab_swap_variables]^updateScopeForTypeChange ( scope, left, rightType, leftType ) ;^452^^^^^443^454^updateScopeForTypeChange ( scope, left, leftType, rightType ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseAssign [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  leftType  rightType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  left  n  right  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[buglab_swap_variables]^updateScopeForTypeChange ( scope, left,  rightType ) ;^452^^^^^443^454^updateScopeForTypeChange ( scope, left, leftType, rightType ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseAssign [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  leftType  rightType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  left  n  right  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[buglab_swap_variables]^updateScopeForTypeChange ( scope, left, leftType ) ;^452^^^^^443^454^updateScopeForTypeChange ( scope, left, leftType, rightType ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseAssign [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  leftType  rightType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  left  n  right  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[buglab_swap_variables]^redeclare ( varName, scope, resultType ) ;^480^^^^^465^495^redeclare ( scope, varName, resultType ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] updateScopeForTypeChange [RETURN_TYPE] void   FlowScope scope Node left JSType leftType JSType resultType [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  leftType  oldType  resultType  boolean  isVarDeclaration  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Var  var  Node  left  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  qualifiedName  varName  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[buglab_swap_variables]^redeclare (  varName, resultType ) ;^480^^^^^465^495^redeclare ( scope, varName, resultType ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] updateScopeForTypeChange [RETURN_TYPE] void   FlowScope scope Node left JSType leftType JSType resultType [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  leftType  oldType  resultType  boolean  isVarDeclaration  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Var  var  Node  left  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  qualifiedName  varName  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[buglab_swap_variables]^redeclare ( scope,  resultType ) ;^480^^^^^465^495^redeclare ( scope, varName, resultType ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] updateScopeForTypeChange [RETURN_TYPE] void   FlowScope scope Node left JSType leftType JSType resultType [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  leftType  oldType  resultType  boolean  isVarDeclaration  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Var  var  Node  left  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  qualifiedName  varName  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[buglab_swap_variables]^redeclare ( resultType, varName, scope ) ;^480^^^^^465^495^redeclare ( scope, varName, resultType ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] updateScopeForTypeChange [RETURN_TYPE] void   FlowScope scope Node left JSType leftType JSType resultType [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  leftType  oldType  resultType  boolean  isVarDeclaration  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Var  var  Node  left  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  qualifiedName  varName  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[buglab_swap_variables]^redeclare ( scope, varName ) ;^480^^^^^465^495^redeclare ( scope, varName, resultType ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] updateScopeForTypeChange [RETURN_TYPE] void   FlowScope scope Node left JSType leftType JSType resultType [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  leftType  oldType  resultType  boolean  isVarDeclaration  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Var  var  Node  left  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  qualifiedName  varName  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[buglab_swap_variables]^var.setType ( resultType == null ? oldType : oldType.getLeastSupertype ( resultType )  ) ;^487^488^^^^472^502^var.setType ( oldType == null ? resultType : oldType.getLeastSupertype ( resultType )  ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] updateScopeForTypeChange [RETURN_TYPE] void   FlowScope scope Node left JSType leftType JSType resultType [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  leftType  oldType  resultType  boolean  isVarDeclaration  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Var  var  Node  left  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  qualifiedName  varName  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[buglab_swap_variables]^resultType : resultType.getLeastSupertype ( oldType )  ) ;^488^^^^^473^503^resultType : oldType.getLeastSupertype ( resultType )  ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] updateScopeForTypeChange [RETURN_TYPE] void   FlowScope scope Node left JSType leftType JSType resultType [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  leftType  oldType  resultType  boolean  isVarDeclaration  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Var  var  Node  left  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  qualifiedName  varName  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[buglab_swap_variables]^scope.inferQualifiedSlot ( leftType, qualifiedName == null ? getNativeType ( UNKNOWN_TYPE )  : leftType, resultType ) ;^494^495^496^^^479^509^scope.inferQualifiedSlot ( qualifiedName, leftType == null ? getNativeType ( UNKNOWN_TYPE )  : leftType, resultType ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] updateScopeForTypeChange [RETURN_TYPE] void   FlowScope scope Node left JSType leftType JSType resultType [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  leftType  oldType  resultType  boolean  isVarDeclaration  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Var  var  Node  left  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  qualifiedName  varName  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[buglab_swap_variables]^scope.inferQualifiedSlot (  leftType == null ? getNativeType ( UNKNOWN_TYPE )  : leftType, resultType ) ;^494^495^496^^^479^509^scope.inferQualifiedSlot ( qualifiedName, leftType == null ? getNativeType ( UNKNOWN_TYPE )  : leftType, resultType ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] updateScopeForTypeChange [RETURN_TYPE] void   FlowScope scope Node left JSType leftType JSType resultType [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  leftType  oldType  resultType  boolean  isVarDeclaration  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Var  var  Node  left  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  qualifiedName  varName  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[buglab_swap_variables]^scope.inferQualifiedSlot ( qualifiedName, resultType == null ? getNativeType ( UNKNOWN_TYPE )  : leftType, leftType ) ;^494^495^496^^^479^509^scope.inferQualifiedSlot ( qualifiedName, leftType == null ? getNativeType ( UNKNOWN_TYPE )  : leftType, resultType ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] updateScopeForTypeChange [RETURN_TYPE] void   FlowScope scope Node left JSType leftType JSType resultType [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  leftType  oldType  resultType  boolean  isVarDeclaration  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Var  var  Node  left  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  qualifiedName  varName  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[buglab_swap_variables]^scope.inferQualifiedSlot ( qualifiedName, leftType == null ? getNativeType ( UNKNOWN_TYPE )  :  resultType ) ;^494^495^496^^^479^509^scope.inferQualifiedSlot ( qualifiedName, leftType == null ? getNativeType ( UNKNOWN_TYPE )  : leftType, resultType ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] updateScopeForTypeChange [RETURN_TYPE] void   FlowScope scope Node left JSType leftType JSType resultType [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  leftType  oldType  resultType  boolean  isVarDeclaration  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Var  var  Node  left  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  qualifiedName  varName  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[buglab_swap_variables]^scope.inferQualifiedSlot ( qualifiedName, leftType == null ? getNativeType ( UNKNOWN_TYPE )  : leftType ) ;^494^495^496^^^479^509^scope.inferQualifiedSlot ( qualifiedName, leftType == null ? getNativeType ( UNKNOWN_TYPE )  : leftType, resultType ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] updateScopeForTypeChange [RETURN_TYPE] void   FlowScope scope Node left JSType leftType JSType resultType [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  leftType  oldType  resultType  boolean  isVarDeclaration  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Var  var  Node  left  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  qualifiedName  varName  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[buglab_swap_variables]^Var var = varName.getVar ( syntacticScope ) ;^466^^^^^451^481^Var var = syntacticScope.getVar ( varName ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] updateScopeForTypeChange [RETURN_TYPE] void   FlowScope scope Node left JSType leftType JSType resultType [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  leftType  oldType  resultType  boolean  isVarDeclaration  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Var  var  Node  left  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  qualifiedName  varName  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[buglab_swap_variables]^left.setJSType ( isVarDeclaration || leftTypeType == null ? resultType : null ) ;^482^483^^^^467^497^left.setJSType ( isVarDeclaration || leftType == null ? resultType : null ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] updateScopeForTypeChange [RETURN_TYPE] void   FlowScope scope Node left JSType leftType JSType resultType [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  leftType  oldType  resultType  boolean  isVarDeclaration  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Var  var  Node  left  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  qualifiedName  varName  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[buglab_swap_variables]^left.setJSType ( left || isVarDeclarationType == null ? resultType : null ) ;^482^483^^^^467^497^left.setJSType ( isVarDeclaration || leftType == null ? resultType : null ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] updateScopeForTypeChange [RETURN_TYPE] void   FlowScope scope Node left JSType leftType JSType resultType [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  leftType  oldType  resultType  boolean  isVarDeclaration  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Var  var  Node  left  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  qualifiedName  varName  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[buglab_swap_variables]^left.setJSType ( isVarDeclaration || resultType == null ? leftType : null ) ;^482^483^^^^467^497^left.setJSType ( isVarDeclaration || leftType == null ? resultType : null ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] updateScopeForTypeChange [RETURN_TYPE] void   FlowScope scope Node left JSType leftType JSType resultType [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  leftType  oldType  resultType  boolean  isVarDeclaration  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Var  var  Node  left  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  qualifiedName  varName  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[buglab_swap_variables]^scope.inferQualifiedSlot ( resultType, leftType == null ? getNativeType ( UNKNOWN_TYPE )  : leftType, qualifiedName ) ;^494^495^496^^^479^509^scope.inferQualifiedSlot ( qualifiedName, leftType == null ? getNativeType ( UNKNOWN_TYPE )  : leftType, resultType ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] updateScopeForTypeChange [RETURN_TYPE] void   FlowScope scope Node left JSType leftType JSType resultType [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  leftType  oldType  resultType  boolean  isVarDeclaration  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Var  var  Node  left  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  qualifiedName  varName  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[buglab_swap_variables]^ensurePropertyDefined ( resultType, left ) ;^500^^^^^485^515^ensurePropertyDefined ( left, resultType ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] updateScopeForTypeChange [RETURN_TYPE] void   FlowScope scope Node left JSType leftType JSType resultType [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  leftType  oldType  resultType  boolean  isVarDeclaration  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Var  var  Node  left  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  qualifiedName  varName  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[buglab_swap_variables]^ensurePropertyDefined (  resultType ) ;^500^^^^^485^515^ensurePropertyDefined ( left, resultType ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] updateScopeForTypeChange [RETURN_TYPE] void   FlowScope scope Node left JSType leftType JSType resultType [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  leftType  oldType  resultType  boolean  isVarDeclaration  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Var  var  Node  left  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  qualifiedName  varName  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[buglab_swap_variables]^ensurePropertyDefined ( left ) ;^500^^^^^485^515^ensurePropertyDefined ( left, resultType ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] updateScopeForTypeChange [RETURN_TYPE] void   FlowScope scope Node left JSType leftType JSType resultType [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  leftType  oldType  resultType  boolean  isVarDeclaration  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Var  var  Node  left  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  qualifiedName  varName  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[buglab_swap_variables]^if  ( ensurePropertyDeclaredHelper ( objectType, getprop )  )  {^512^^^^^497^527^if  ( ensurePropertyDeclaredHelper ( getprop, objectType )  )  {^[CLASS] TypeInference BooleanOutcomePair  [METHOD] ensurePropertyDefined [RETURN_TYPE] void   Node getprop JSType rightType [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  rightType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  getprop  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  propName  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[buglab_swap_variables]^if  ( ensurePropertyDeclaredHelper (  objectType )  )  {^512^^^^^497^527^if  ( ensurePropertyDeclaredHelper ( getprop, objectType )  )  {^[CLASS] TypeInference BooleanOutcomePair  [METHOD] ensurePropertyDefined [RETURN_TYPE] void   Node getprop JSType rightType [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  rightType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  getprop  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  propName  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[buglab_swap_variables]^if  ( ensurePropertyDeclaredHelper ( getprop )  )  {^512^^^^^497^527^if  ( ensurePropertyDeclaredHelper ( getprop, objectType )  )  {^[CLASS] TypeInference BooleanOutcomePair  [METHOD] ensurePropertyDefined [RETURN_TYPE] void   Node getprop JSType rightType [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  rightType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  getprop  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  propName  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[buglab_swap_variables]^registry.registerPropertyOnType ( objectType, propName ) ;^542^^^^^530^544^registry.registerPropertyOnType ( propName, objectType ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] ensurePropertyDefined [RETURN_TYPE] void   Node getprop JSType rightType [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  rightType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  getprop  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  propName  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[buglab_swap_variables]^registry.registerPropertyOnType (  objectType ) ;^542^^^^^530^544^registry.registerPropertyOnType ( propName, objectType ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] ensurePropertyDefined [RETURN_TYPE] void   Node getprop JSType rightType [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  rightType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  getprop  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  propName  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[buglab_swap_variables]^registry.registerPropertyOnType ( propName ) ;^542^^^^^530^544^registry.registerPropertyOnType ( propName, objectType ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] ensurePropertyDefined [RETURN_TYPE] void   Node getprop JSType rightType [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  rightType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  getprop  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  propName  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[buglab_swap_variables]^objectType.defineInferredProperty (  rightType, false ) ;^540^^^^^530^544^objectType.defineInferredProperty ( propName, rightType, false ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] ensurePropertyDefined [RETURN_TYPE] void   Node getprop JSType rightType [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  rightType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  getprop  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  propName  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[buglab_swap_variables]^objectType.defineInferredProperty ( propName,  false ) ;^540^^^^^530^544^objectType.defineInferredProperty ( propName, rightType, false ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] ensurePropertyDefined [RETURN_TYPE] void   Node getprop JSType rightType [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  rightType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  getprop  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  propName  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[buglab_swap_variables]^objectType.defineInferredProperty (  rightType, false ) ;^535^^^^^530^544^objectType.defineInferredProperty ( propName, rightType, false ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] ensurePropertyDefined [RETURN_TYPE] void   Node getprop JSType rightType [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  rightType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  getprop  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  propName  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[buglab_swap_variables]^objectType.defineInferredProperty ( propName,  false ) ;^535^^^^^530^544^objectType.defineInferredProperty ( propName, rightType, false ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] ensurePropertyDefined [RETURN_TYPE] void   Node getprop JSType rightType [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  rightType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  getprop  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  propName  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[buglab_swap_variables]^objectType.defineDeclaredProperty ( rightType, propName, false ) ;^533^^^^^530^544^objectType.defineDeclaredProperty ( propName, rightType, false ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] ensurePropertyDefined [RETURN_TYPE] void   Node getprop JSType rightType [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  rightType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  getprop  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  propName  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[buglab_swap_variables]^objectType.defineDeclaredProperty (  rightType, false ) ;^533^^^^^530^544^objectType.defineDeclaredProperty ( propName, rightType, false ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] ensurePropertyDefined [RETURN_TYPE] void   Node getprop JSType rightType [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  rightType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  getprop  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  propName  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[buglab_swap_variables]^objectType.defineDeclaredProperty ( propName,  false ) ;^533^^^^^530^544^objectType.defineDeclaredProperty ( propName, rightType, false ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] ensurePropertyDefined [RETURN_TYPE] void   Node getprop JSType rightType [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  rightType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  getprop  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  propName  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[buglab_swap_variables]^objectType.defineInferredProperty ( rightType, propName, false ) ;^535^^^^^530^544^objectType.defineInferredProperty ( propName, rightType, false ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] ensurePropertyDefined [RETURN_TYPE] void   Node getprop JSType rightType [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  rightType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  getprop  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  propName  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[buglab_swap_variables]^objectType.defineInferredProperty ( rightType, propName, false ) ;^535^^^^^532^536^objectType.defineInferredProperty ( propName, rightType, false ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] ensurePropertyDefined [RETURN_TYPE] void   Node getprop JSType rightType [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  rightType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  getprop  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  propName  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[buglab_swap_variables]^objectType.defineInferredProperty (  rightType, false ) ;^535^^^^^532^536^objectType.defineInferredProperty ( propName, rightType, false ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] ensurePropertyDefined [RETURN_TYPE] void   Node getprop JSType rightType [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  rightType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  getprop  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  propName  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[buglab_swap_variables]^objectType.defineInferredProperty ( propName,  false ) ;^535^^^^^532^536^objectType.defineInferredProperty ( propName, rightType, false ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] ensurePropertyDefined [RETURN_TYPE] void   Node getprop JSType rightType [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  rightType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  getprop  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  propName  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[buglab_swap_variables]^objectType.defineDeclaredProperty ( rightType, propName, false ) ;^533^^^^^518^548^objectType.defineDeclaredProperty ( propName, rightType, false ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] ensurePropertyDefined [RETURN_TYPE] void   Node getprop JSType rightType [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  rightType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  getprop  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  propName  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[buglab_swap_variables]^objectType.defineDeclaredProperty (  rightType, false ) ;^533^^^^^518^548^objectType.defineDeclaredProperty ( propName, rightType, false ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] ensurePropertyDefined [RETURN_TYPE] void   Node getprop JSType rightType [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  rightType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  getprop  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  propName  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[buglab_swap_variables]^objectType.defineDeclaredProperty ( propName,  false ) ;^533^^^^^518^548^objectType.defineDeclaredProperty ( propName, rightType, false ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] ensurePropertyDefined [RETURN_TYPE] void   Node getprop JSType rightType [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  rightType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  getprop  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  propName  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[buglab_swap_variables]^registry.registerPropertyOnType (  objectType ) ;^542^^^^^538^543^registry.registerPropertyOnType ( propName, objectType ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] ensurePropertyDefined [RETURN_TYPE] void   Node getprop JSType rightType [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  rightType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  getprop  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  propName  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[buglab_swap_variables]^registry.registerPropertyOnType ( propName ) ;^542^^^^^538^543^registry.registerPropertyOnType ( propName, objectType ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] ensurePropertyDefined [RETURN_TYPE] void   Node getprop JSType rightType [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  rightType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  getprop  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  propName  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[buglab_swap_variables]^objectType.defineInferredProperty (  rightType, false ) ;^540^^^^^538^543^objectType.defineInferredProperty ( propName, rightType, false ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] ensurePropertyDefined [RETURN_TYPE] void   Node getprop JSType rightType [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  rightType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  getprop  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  propName  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[buglab_swap_variables]^objectType.defineInferredProperty ( rightType, propName, false ) ;^540^^^^^538^543^objectType.defineInferredProperty ( propName, rightType, false ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] ensurePropertyDefined [RETURN_TYPE] void   Node getprop JSType rightType [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  rightType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  getprop  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  propName  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[buglab_swap_variables]^objectType.defineInferredProperty ( propName,  false ) ;^540^^^^^538^543^objectType.defineInferredProperty ( propName, rightType, false ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] ensurePropertyDefined [RETURN_TYPE] void   Node getprop JSType rightType [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  rightType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  getprop  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  propName  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[buglab_swap_variables]^if  ( propName.hasProperty ( objectType )  || !objectType.isInstanceType (  )  )  {^530^531^^^^515^545^if  ( objectType.hasProperty ( propName )  || !objectType.isInstanceType (  )  )  {^[CLASS] TypeInference BooleanOutcomePair  [METHOD] ensurePropertyDefined [RETURN_TYPE] void   Node getprop JSType rightType [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  rightType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  getprop  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  propName  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[buglab_swap_variables]^objectType.defineInferredProperty (  rightType, false ) ;^535^^^^^520^550^objectType.defineInferredProperty ( propName, rightType, false ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] ensurePropertyDefined [RETURN_TYPE] void   Node getprop JSType rightType [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  rightType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  getprop  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  propName  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[buglab_swap_variables]^objectType.defineInferredProperty ( rightType, propName, false ) ;^535^^^^^520^550^objectType.defineInferredProperty ( propName, rightType, false ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] ensurePropertyDefined [RETURN_TYPE] void   Node getprop JSType rightType [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  rightType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  getprop  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  propName  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[buglab_swap_variables]^objectType.defineInferredProperty ( propName,  false ) ;^535^^^^^520^550^objectType.defineInferredProperty ( propName, rightType, false ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] ensurePropertyDefined [RETURN_TYPE] void   Node getprop JSType rightType [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  rightType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  getprop  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  propName  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[buglab_swap_variables]^objectType.defineInferredProperty (  rightType, false ) ;^540^^^^^525^555^objectType.defineInferredProperty ( propName, rightType, false ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] ensurePropertyDefined [RETURN_TYPE] void   Node getprop JSType rightType [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  rightType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  getprop  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  propName  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[buglab_swap_variables]^objectType.defineInferredProperty ( rightType, propName, false ) ;^540^^^^^525^555^objectType.defineInferredProperty ( propName, rightType, false ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] ensurePropertyDefined [RETURN_TYPE] void   Node getprop JSType rightType [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  rightType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  getprop  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  propName  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[buglab_swap_variables]^objectType.defineInferredProperty ( propName,  false ) ;^540^^^^^525^555^objectType.defineInferredProperty ( propName, rightType, false ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] ensurePropertyDefined [RETURN_TYPE] void   Node getprop JSType rightType [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  rightType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  getprop  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  propName  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[buglab_swap_variables]^registry.registerPropertyOnType (  objectType ) ;^542^^^^^527^557^registry.registerPropertyOnType ( propName, objectType ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] ensurePropertyDefined [RETURN_TYPE] void   Node getprop JSType rightType [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  rightType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  getprop  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  propName  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[buglab_swap_variables]^registry.registerPropertyOnType ( objectType, propName ) ;^542^^^^^527^557^registry.registerPropertyOnType ( propName, objectType ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] ensurePropertyDefined [RETURN_TYPE] void   Node getprop JSType rightType [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  rightType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  getprop  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  propName  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[buglab_swap_variables]^registry.registerPropertyOnType ( propName ) ;^542^^^^^527^557^registry.registerPropertyOnType ( propName, objectType ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] ensurePropertyDefined [RETURN_TYPE] void   Node getprop JSType rightType [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  rightType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  getprop  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  propName  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[buglab_swap_variables]^if  ( syntacticScope.getFirstChild (  ) .getType (  )  == Token.THIS && getJSType ( getprop.getRootNode (  )  ) .isConstructor (  )  )  {^538^539^^^^530^544^if  ( getprop.getFirstChild (  ) .getType (  )  == Token.THIS && getJSType ( syntacticScope.getRootNode (  )  ) .isConstructor (  )  )  {^[CLASS] TypeInference BooleanOutcomePair  [METHOD] ensurePropertyDefined [RETURN_TYPE] void   Node getprop JSType rightType [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  rightType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  getprop  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  propName  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[buglab_swap_variables]^objectType.defineInferredProperty ( rightType, propName, false ) ;^540^^^^^530^544^objectType.defineInferredProperty ( propName, rightType, false ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] ensurePropertyDefined [RETURN_TYPE] void   Node getprop JSType rightType [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  rightType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  getprop  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  propName  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[buglab_swap_variables]^registry.registerPropertyOnType ( objectType, propName ) ;^542^^^^^538^543^registry.registerPropertyOnType ( propName, objectType ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] ensurePropertyDefined [RETURN_TYPE] void   Node getprop JSType rightType [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  rightType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  getprop  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  propName  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[buglab_swap_variables]^if  ( syntacticScope.getFirstChild (  ) .getType (  )  == Token.THIS && getJSType ( getprop.getRootNode (  )  ) .isConstructor (  )  )  {^538^539^^^^523^553^if  ( getprop.getFirstChild (  ) .getType (  )  == Token.THIS && getJSType ( syntacticScope.getRootNode (  )  ) .isConstructor (  )  )  {^[CLASS] TypeInference BooleanOutcomePair  [METHOD] ensurePropertyDefined [RETURN_TYPE] void   Node getprop JSType rightType [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  rightType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  getprop  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  propName  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[buglab_swap_variables]^ensurePropertyDeclaredHelper ( ownerType, getprop ) ;^560^^^^^556^562^ensurePropertyDeclaredHelper ( getprop, ownerType ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] ensurePropertyDeclared [RETURN_TYPE] void   Node getprop [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  ObjectType  ownerType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  getprop  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[buglab_swap_variables]^ensurePropertyDeclaredHelper (  ownerType ) ;^560^^^^^556^562^ensurePropertyDeclaredHelper ( getprop, ownerType ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] ensurePropertyDeclared [RETURN_TYPE] void   Node getprop [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  ObjectType  ownerType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  getprop  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[buglab_swap_variables]^ensurePropertyDeclaredHelper ( getprop ) ;^560^^^^^556^562^ensurePropertyDeclaredHelper ( getprop, ownerType ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] ensurePropertyDeclared [RETURN_TYPE] void   Node getprop [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  ObjectType  ownerType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  getprop  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[buglab_swap_variables]^objectType.defineDeclaredProperty ( var, propName.getType (  ) , var.isExtern (  )  ) ;^579^580^^^^568^585^objectType.defineDeclaredProperty ( propName, var.getType (  ) , var.isExtern (  )  ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] ensurePropertyDeclaredHelper [RETURN_TYPE] boolean   Node getprop ObjectType objectType [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Var  var  Node  getprop  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  propName  qName  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[buglab_swap_variables]^objectType.defineDeclaredProperty (  var.getType (  ) , var.isExtern (  )  ) ;^579^580^^^^568^585^objectType.defineDeclaredProperty ( propName, var.getType (  ) , var.isExtern (  )  ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] ensurePropertyDeclaredHelper [RETURN_TYPE] boolean   Node getprop ObjectType objectType [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Var  var  Node  getprop  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  propName  qName  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[buglab_swap_variables]^objectType.defineDeclaredProperty ( propName.getType (  ) , var.isExtern (  )  ) ;^579^580^^^^568^585^objectType.defineDeclaredProperty ( propName, var.getType (  ) , var.isExtern (  )  ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] ensurePropertyDeclaredHelper [RETURN_TYPE] boolean   Node getprop ObjectType objectType [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Var  var  Node  getprop  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  propName  qName  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[buglab_swap_variables]^Var var = qName.getVar ( syntacticScope ) ;^573^^^^^568^585^Var var = syntacticScope.getVar ( qName ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] ensurePropertyDeclaredHelper [RETURN_TYPE] boolean   Node getprop ObjectType objectType [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Var  var  Node  getprop  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  propName  qName  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[buglab_swap_variables]^if  ( propName != null && !var.isTypeInferred (  )  && !objectType.hasOwnProperty ( var )  && ( !objectType.isInstanceType (  )  ||^574^575^576^577^^568^585^if  ( var != null && !var.isTypeInferred (  )  && !objectType.hasOwnProperty ( propName )  && ( !objectType.isInstanceType (  )  ||^[CLASS] TypeInference BooleanOutcomePair  [METHOD] ensurePropertyDeclaredHelper [RETURN_TYPE] boolean   Node getprop ObjectType objectType [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Var  var  Node  getprop  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  propName  qName  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[buglab_swap_variables]^if  ( n != valueull )  {^591^^^^^587^604^if  ( value != null )  {^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseName [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  StaticSlot  var  JSType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  varName  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[buglab_swap_variables]^StaticSlot<JSType> var = varName.getSlot ( scope ) ;^597^^^^^587^604^StaticSlot<JSType> var = scope.getSlot ( varName ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseName [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  StaticSlot  var  JSType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  varName  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[buglab_swap_variables]^scope = traverse ( scope, value ) ;^592^^^^^587^604^scope = traverse ( value, scope ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseName [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  StaticSlot  var  JSType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  varName  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[buglab_swap_variables]^scope = traverse (  scope ) ;^592^^^^^587^604^scope = traverse ( value, scope ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseName [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  StaticSlot  var  JSType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  varName  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[buglab_swap_variables]^scope = traverse ( value ) ;^592^^^^^587^604^scope = traverse ( value, scope ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseName [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  StaticSlot  var  JSType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  varName  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[buglab_swap_variables]^scope = traverseChildren ( scope, n ) ;^608^^^^^607^611^scope = traverseChildren ( n, scope ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseArrayLiteral [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[buglab_swap_variables]^scope = traverseChildren (  scope ) ;^608^^^^^607^611^scope = traverseChildren ( n, scope ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseArrayLiteral [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[buglab_swap_variables]^scope = traverseChildren ( n ) ;^608^^^^^607^611^scope = traverseChildren ( n, scope ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseArrayLiteral [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[buglab_swap_variables]^objectType.defineInferredProperty (  getJSType ( value ) , false ) ;^631^^^^^613^639^objectType.defineInferredProperty ( memberName, getJSType ( value ) , false ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseObjectLiteral [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[buglab_swap_variables]^objectType.defineInferredProperty ( value, getJSType ( memberName ) , false ) ;^631^^^^^613^639^objectType.defineInferredProperty ( memberName, getJSType ( value ) , false ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseObjectLiteral [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[buglab_swap_variables]^for  ( Node nameame = n.getFirstChild (  ) ; n != null;^621^^^^^613^639^for  ( Node name = n.getFirstChild (  ) ; name != null;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseObjectLiteral [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[buglab_swap_variables]^for  ( Node n = name.getFirstChild (  ) ; name != null;^621^^^^^613^639^for  ( Node name = n.getFirstChild (  ) ; name != null;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseObjectLiteral [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[buglab_swap_variables]^objectType.defineInferredProperty ( value, getJSType ( memberName ) , false ) ;^631^^^^^621^636^objectType.defineInferredProperty ( memberName, getJSType ( value ) , false ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseObjectLiteral [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[buglab_swap_variables]^objectType.defineInferredProperty (  getJSType ( value ) , false ) ;^631^^^^^621^636^objectType.defineInferredProperty ( memberName, getJSType ( value ) , false ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseObjectLiteral [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[buglab_swap_variables]^scope = traverse ( scope, name ) ;^624^^^^^621^636^scope = traverse ( name, scope ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseObjectLiteral [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[buglab_swap_variables]^scope = traverse (  scope ) ;^624^^^^^621^636^scope = traverse ( name, scope ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseObjectLiteral [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[buglab_swap_variables]^scope = traverse ( name ) ;^624^^^^^621^636^scope = traverse ( name, scope ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseObjectLiteral [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[buglab_swap_variables]^scope = traverse ( scope, value ) ;^625^^^^^621^636^scope = traverse ( value, scope ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseObjectLiteral [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[buglab_swap_variables]^scope = traverse (  scope ) ;^625^^^^^621^636^scope = traverse ( value, scope ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseObjectLiteral [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[buglab_swap_variables]^scope = traverse ( value ) ;^625^^^^^621^636^scope = traverse ( value, scope ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseObjectLiteral [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[buglab_swap_variables]^scope = traverse ( scope, name ) ;^624^^^^^613^639^scope = traverse ( name, scope ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseObjectLiteral [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[buglab_swap_variables]^scope = traverse (  scope ) ;^624^^^^^613^639^scope = traverse ( name, scope ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseObjectLiteral [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[buglab_swap_variables]^scope = traverse ( name ) ;^624^^^^^613^639^scope = traverse ( name, scope ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseObjectLiteral [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[buglab_swap_variables]^scope = traverse ( scope, value ) ;^625^^^^^613^639^scope = traverse ( value, scope ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseObjectLiteral [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[buglab_swap_variables]^scope = traverse (  scope ) ;^625^^^^^613^639^scope = traverse ( value, scope ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseObjectLiteral [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[buglab_swap_variables]^scope = traverse ( value ) ;^625^^^^^613^639^scope = traverse ( value, scope ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseObjectLiteral [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[buglab_swap_variables]^scope = traverseChildren ( scope, n ) ;^644^^^^^629^659^scope = traverseChildren ( n, scope ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseAdd [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  leftType  rightType  type  boolean  leftIsUnknown  rightIsUnknown  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  left  n  right  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[buglab_swap_variables]^scope = traverseChildren (  scope ) ;^644^^^^^629^659^scope = traverseChildren ( n, scope ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseAdd [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  leftType  rightType  type  boolean  leftIsUnknown  rightIsUnknown  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  left  n  right  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[buglab_swap_variables]^scope = traverseChildren ( n ) ;^644^^^^^629^659^scope = traverseChildren ( n, scope ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseAdd [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  leftType  rightType  type  boolean  leftIsUnknown  rightIsUnknown  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  left  n  right  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[buglab_swap_variables]^if  ( rightType != null && leftType != null )  {^650^^^^^635^665^if  ( leftType != null && rightType != null )  {^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseAdd [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  leftType  rightType  type  boolean  leftIsUnknown  rightIsUnknown  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  left  n  right  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[buglab_swap_variables]^if  ( rightIsUnknown && leftIsUnknown )  {^653^^^^^638^668^if  ( leftIsUnknown && rightIsUnknown )  {^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseAdd [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  leftType  rightType  type  boolean  leftIsUnknown  rightIsUnknown  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  left  n  right  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[buglab_swap_variables]^} else if  (  ( !leftIsUnknown && rightType.isString (  )  )  || ( !rightIsUnknown && leftType.isString (  )  )  )  {^655^656^^^^640^670^} else if  (  ( !leftIsUnknown && leftType.isString (  )  )  || ( !rightIsUnknown && rightType.isString (  )  )  )  {^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseAdd [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  leftType  rightType  type  boolean  leftIsUnknown  rightIsUnknown  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  left  n  right  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[buglab_swap_variables]^} else if  ( rightIsUnknown || leftIsUnknown )  {^658^^^^^643^673^} else if  ( leftIsUnknown || rightIsUnknown )  {^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseAdd [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  leftType  rightType  type  boolean  leftIsUnknown  rightIsUnknown  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  left  n  right  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[buglab_swap_variables]^} else if  ( isAddedAsNumber ( rightType )  && isAddedAsNumber ( leftType )  )  {^660^^^^^645^675^} else if  ( isAddedAsNumber ( leftType )  && isAddedAsNumber ( rightType )  )  {^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseAdd [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  leftType  rightType  type  boolean  leftIsUnknown  rightIsUnknown  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  left  n  right  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[buglab_swap_variables]^updateScopeForTypeChange ( left, scope, leftType, type ) ;^669^^^^^654^684^updateScopeForTypeChange ( scope, left, leftType, type ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseAdd [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  leftType  rightType  type  boolean  leftIsUnknown  rightIsUnknown  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  left  n  right  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[buglab_swap_variables]^updateScopeForTypeChange (  left, leftType, type ) ;^669^^^^^654^684^updateScopeForTypeChange ( scope, left, leftType, type ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseAdd [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  leftType  rightType  type  boolean  leftIsUnknown  rightIsUnknown  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  left  n  right  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[buglab_swap_variables]^updateScopeForTypeChange ( scope, type, leftType, left ) ;^669^^^^^654^684^updateScopeForTypeChange ( scope, left, leftType, type ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseAdd [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  leftType  rightType  type  boolean  leftIsUnknown  rightIsUnknown  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  left  n  right  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[buglab_swap_variables]^updateScopeForTypeChange ( scope,  leftType, type ) ;^669^^^^^654^684^updateScopeForTypeChange ( scope, left, leftType, type ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseAdd [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  leftType  rightType  type  boolean  leftIsUnknown  rightIsUnknown  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  left  n  right  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[buglab_swap_variables]^updateScopeForTypeChange ( scope, left, type, leftType ) ;^669^^^^^654^684^updateScopeForTypeChange ( scope, left, leftType, type ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseAdd [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  leftType  rightType  type  boolean  leftIsUnknown  rightIsUnknown  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  left  n  right  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[buglab_swap_variables]^updateScopeForTypeChange ( scope, left,  type ) ;^669^^^^^654^684^updateScopeForTypeChange ( scope, left, leftType, type ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseAdd [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  leftType  rightType  type  boolean  leftIsUnknown  rightIsUnknown  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  left  n  right  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[buglab_swap_variables]^updateScopeForTypeChange ( scope, left, leftType ) ;^669^^^^^654^684^updateScopeForTypeChange ( scope, left, leftType, type ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseAdd [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  leftType  rightType  type  boolean  leftIsUnknown  rightIsUnknown  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  left  n  right  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[buglab_swap_variables]^updateScopeForTypeChange ( type, left, leftType, scope ) ;^669^^^^^654^684^updateScopeForTypeChange ( scope, left, leftType, type ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseAdd [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  leftType  rightType  type  boolean  leftIsUnknown  rightIsUnknown  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  left  n  right  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[buglab_swap_variables]^updateScopeForTypeChange ( scope, leftType, left, type ) ;^669^^^^^654^684^updateScopeForTypeChange ( scope, left, leftType, type ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseAdd [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  leftType  rightType  type  boolean  leftIsUnknown  rightIsUnknown  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  left  n  right  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[buglab_swap_variables]^return registry.isSubtype ( type.createUnionType ( VOID_TYPE, NULL_TYPE, NUMBER_VALUE_OR_OBJECT_TYPE, BOOLEAN_TYPE, BOOLEAN_OBJECT_TYPE )  ) ;^676^677^^^^675^678^return type.isSubtype ( registry.createUnionType ( VOID_TYPE, NULL_TYPE, NUMBER_VALUE_OR_OBJECT_TYPE, BOOLEAN_TYPE, BOOLEAN_OBJECT_TYPE )  ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] isAddedAsNumber [RETURN_TYPE] boolean   JSType type [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  
[buglab_swap_variables]^scope = traverse ( scope, condition ) ;^686^^^^^671^701^scope = traverse ( condition, scope ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseHook [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  falseType  trueType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  condition  falseNode  n  trueNode  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[buglab_swap_variables]^scope = traverse (  scope ) ;^686^^^^^671^701^scope = traverse ( condition, scope ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseHook [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  falseType  trueType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  condition  falseNode  n  trueNode  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[buglab_swap_variables]^scope = traverse ( condition ) ;^686^^^^^671^701^scope = traverse ( condition, scope ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseHook [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  falseType  trueType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  condition  falseNode  n  trueNode  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[buglab_swap_variables]^FlowScope trueScope = condition. getPreciserScopeKnowingConditionOutcome ( reverseInterpreter, scope, true ) ;^689^690^691^^^674^704^FlowScope trueScope = reverseInterpreter. getPreciserScopeKnowingConditionOutcome ( condition, scope, true ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseHook [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  falseType  trueType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  condition  falseNode  n  trueNode  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[buglab_swap_variables]^FlowScope trueScope = reverseInterpreter. getPreciserScopeKnowingConditionOutcome (  scope, true ) ;^689^690^691^^^674^704^FlowScope trueScope = reverseInterpreter. getPreciserScopeKnowingConditionOutcome ( condition, scope, true ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseHook [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  falseType  trueType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  condition  falseNode  n  trueNode  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[buglab_swap_variables]^FlowScope trueScope = reverseInterpreter. getPreciserScopeKnowingConditionOutcome ( scope, condition, true ) ;^689^690^691^^^674^704^FlowScope trueScope = reverseInterpreter. getPreciserScopeKnowingConditionOutcome ( condition, scope, true ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseHook [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  falseType  trueType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  condition  falseNode  n  trueNode  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[buglab_swap_variables]^FlowScope trueScope = reverseInterpreter. getPreciserScopeKnowingConditionOutcome ( condition,  true ) ;^689^690^691^^^674^704^FlowScope trueScope = reverseInterpreter. getPreciserScopeKnowingConditionOutcome ( condition, scope, true ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseHook [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  falseType  trueType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  condition  falseNode  n  trueNode  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[buglab_swap_variables]^FlowScope falseScope = reverseInterpreter. getPreciserScopeKnowingConditionOutcome ( scope, condition, false ) ;^692^693^694^^^677^707^FlowScope falseScope = reverseInterpreter. getPreciserScopeKnowingConditionOutcome ( condition, scope, false ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseHook [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  falseType  trueType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  condition  falseNode  n  trueNode  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[buglab_swap_variables]^FlowScope falseScope = reverseInterpreter. getPreciserScopeKnowingConditionOutcome (  scope, false ) ;^692^693^694^^^677^707^FlowScope falseScope = reverseInterpreter. getPreciserScopeKnowingConditionOutcome ( condition, scope, false ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseHook [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  falseType  trueType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  condition  falseNode  n  trueNode  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[buglab_swap_variables]^FlowScope falseScope = scope. getPreciserScopeKnowingConditionOutcome ( condition, reverseInterpreter, false ) ;^692^693^694^^^677^707^FlowScope falseScope = reverseInterpreter. getPreciserScopeKnowingConditionOutcome ( condition, scope, false ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseHook [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  falseType  trueType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  condition  falseNode  n  trueNode  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[buglab_swap_variables]^FlowScope falseScope = reverseInterpreter. getPreciserScopeKnowingConditionOutcome ( condition,  false ) ;^692^693^694^^^677^707^FlowScope falseScope = reverseInterpreter. getPreciserScopeKnowingConditionOutcome ( condition, scope, false ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseHook [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  falseType  trueType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  condition  falseNode  n  trueNode  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[buglab_swap_variables]^FlowScope falseScope = condition. getPreciserScopeKnowingConditionOutcome ( reverseInterpreter, scope, false ) ;^692^693^694^^^677^707^FlowScope falseScope = reverseInterpreter. getPreciserScopeKnowingConditionOutcome ( condition, scope, false ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseHook [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  falseType  trueType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  condition  falseNode  n  trueNode  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[buglab_swap_variables]^traverse ( trueScope, trueNode.createChildFlowScope (  )  ) ;^697^^^^^682^712^traverse ( trueNode, trueScope.createChildFlowScope (  )  ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseHook [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  falseType  trueType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  condition  falseNode  n  trueNode  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[buglab_swap_variables]^traverse (  trueScope.createChildFlowScope (  )  ) ;^697^^^^^682^712^traverse ( trueNode, trueScope.createChildFlowScope (  )  ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseHook [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  falseType  trueType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  condition  falseNode  n  trueNode  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[buglab_swap_variables]^traverse ( trueNode.createChildFlowScope (  )  ) ;^697^^^^^682^712^traverse ( trueNode, trueScope.createChildFlowScope (  )  ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseHook [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  falseType  trueType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  condition  falseNode  n  trueNode  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[buglab_swap_variables]^traverse ( falseScope, falseNode.createChildFlowScope (  )  ) ;^700^^^^^685^715^traverse ( falseNode, falseScope.createChildFlowScope (  )  ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseHook [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  falseType  trueType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  condition  falseNode  n  trueNode  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[buglab_swap_variables]^traverse (  falseScope.createChildFlowScope (  )  ) ;^700^^^^^685^715^traverse ( falseNode, falseScope.createChildFlowScope (  )  ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseHook [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  falseType  trueType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  condition  falseNode  n  trueNode  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[buglab_swap_variables]^traverse ( falseNode.createChildFlowScope (  )  ) ;^700^^^^^685^715^traverse ( falseNode, falseScope.createChildFlowScope (  )  ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseHook [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  falseType  trueType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  condition  falseNode  n  trueNode  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[buglab_swap_variables]^if  ( falseType != null && trueType != null )  {^705^^^^^690^720^if  ( trueType != null && falseType != null )  {^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseHook [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  falseType  trueType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  condition  falseNode  n  trueNode  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[buglab_swap_variables]^if  ( trueType != falseTypeull && n != null )  {^705^^^^^690^720^if  ( trueType != null && falseType != null )  {^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseHook [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  falseType  trueType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  condition  falseNode  n  trueNode  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[buglab_swap_variables]^n.setJSType ( falseType.getLeastSupertype ( trueType )  ) ;^706^^^^^691^721^n.setJSType ( trueType.getLeastSupertype ( falseType )  ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseHook [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  falseType  trueType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  condition  falseNode  n  trueNode  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[buglab_swap_variables]^scope = traverseChildren ( scope, n ) ;^715^^^^^714^730^scope = traverseChildren ( n, scope ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseCall [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  functionType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  left  n  FunctionType  fnType  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[buglab_swap_variables]^scope = traverseChildren (  scope ) ;^715^^^^^714^730^scope = traverseChildren ( n, scope ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseCall [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  functionType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  left  n  FunctionType  fnType  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[buglab_swap_variables]^scope = traverseChildren ( n ) ;^715^^^^^714^730^scope = traverseChildren ( n, scope ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseCall [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  functionType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  left  n  FunctionType  fnType  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[buglab_swap_variables]^if  ( n != functionTypeull )  {^719^^^^^714^730^if  ( functionType != null )  {^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseCall [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  functionType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  left  n  FunctionType  fnType  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[buglab_swap_variables]^updateTypeOfParametersOnClosure ( fnType, n ) ;^723^^^^^714^730^updateTypeOfParametersOnClosure ( n, fnType ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseCall [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  functionType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  left  n  FunctionType  fnType  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[buglab_swap_variables]^updateTypeOfParametersOnClosure (  fnType ) ;^723^^^^^714^730^updateTypeOfParametersOnClosure ( n, fnType ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseCall [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  functionType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  left  n  FunctionType  fnType  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[buglab_swap_variables]^updateTypeOfParametersOnClosure ( n ) ;^723^^^^^714^730^updateTypeOfParametersOnClosure ( n, fnType ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseCall [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  functionType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  left  n  FunctionType  fnType  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[buglab_swap_variables]^updateTypeOfThisOnClosure ( fnType, n ) ;^724^^^^^714^730^updateTypeOfThisOnClosure ( n, fnType ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseCall [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  functionType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  left  n  FunctionType  fnType  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[buglab_swap_variables]^updateTypeOfThisOnClosure (  fnType ) ;^724^^^^^714^730^updateTypeOfThisOnClosure ( n, fnType ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseCall [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  functionType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  left  n  FunctionType  fnType  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[buglab_swap_variables]^updateTypeOfThisOnClosure ( n ) ;^724^^^^^714^730^updateTypeOfThisOnClosure ( n, fnType ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseCall [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  functionType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  left  n  FunctionType  fnType  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[buglab_swap_variables]^if  ( n + 1 >= i.getChildCount (  )  )  {^743^^^^^736^757^if  ( i + 1 >= n.getChildCount (  )  )  {^[CLASS] TypeInference BooleanOutcomePair  [METHOD] updateTypeOfParametersOnClosure [RETURN_TYPE] void   Node n FunctionType fnType [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  iArgumentType  iParameterType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  iArgument  iParameter  n  FunctionType  fnType  iParameterFnType  BooleanLiteralSet  booleanValues  toBooleanOutcomes  int  i  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[buglab_swap_variables]^if  ( iArgumentType.getType (  )  == Token.FUNCTION && iArgument instanceof FunctionType && iArgumentType.getJSDocInfo (  )  == null )  {^749^750^751^^^736^757^if  ( iArgument.getType (  )  == Token.FUNCTION && iArgumentType instanceof FunctionType && iArgumentType.getJSDocInfo (  )  == null )  {^[CLASS] TypeInference BooleanOutcomePair  [METHOD] updateTypeOfParametersOnClosure [RETURN_TYPE] void   Node n FunctionType fnType [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  iArgumentType  iParameterType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  iArgument  iParameter  n  FunctionType  fnType  iParameterFnType  BooleanLiteralSet  booleanValues  toBooleanOutcomes  int  i  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[buglab_swap_variables]^Node nArgument = i.getChildAtIndex ( i + 1 ) ;^747^^^^^736^757^Node iArgument = n.getChildAtIndex ( i + 1 ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] updateTypeOfParametersOnClosure [RETURN_TYPE] void   Node n FunctionType fnType [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  iArgumentType  iParameterType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  iArgument  iParameter  n  FunctionType  fnType  iParameterFnType  BooleanLiteralSet  booleanValues  toBooleanOutcomes  int  i  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[buglab_swap_variables]^if  ( n + 1 >= i.getChildCount (  )  )  {^778^^^^^763^793^if  ( i + 1 >= n.getChildCount (  )  )  {^[CLASS] TypeInference BooleanOutcomePair  [METHOD] updateTypeOfThisOnClosure [RETURN_TYPE] void   Node n FunctionType fnType [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  iArgumentType  iParameterType  jArgumentType  jParameterType  boolean  foundTemplateTypeOfThisParameter  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  iArgument  iParameter  jArgument  jParameter  n  source  FunctionType  fnType  jArgumentFnType  jParameterFnType  BooleanLiteralSet  booleanValues  toBooleanOutcomes  int  i  j  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[buglab_swap_variables]^compiler.report ( JSError.make ( NodeUtil.getSourceName ( TEMPLATE_TYPE_NOT_OBJECT_TYPE ) , iArgument, iArgument )  ) ;^787^788^789^^^772^802^compiler.report ( JSError.make ( NodeUtil.getSourceName ( iArgument ) , iArgument, TEMPLATE_TYPE_NOT_OBJECT_TYPE )  ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] updateTypeOfThisOnClosure [RETURN_TYPE] void   Node n FunctionType fnType [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  iArgumentType  iParameterType  jArgumentType  jParameterType  boolean  foundTemplateTypeOfThisParameter  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  iArgument  iParameter  jArgument  jParameter  n  source  FunctionType  fnType  jArgumentFnType  jParameterFnType  BooleanLiteralSet  booleanValues  toBooleanOutcomes  int  i  j  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[buglab_swap_variables]^compiler.report ( JSError.make ( NodeUtil.getSourceName ( iArgument ) ,  TEMPLATE_TYPE_NOT_OBJECT_TYPE )  ) ;^787^788^789^^^772^802^compiler.report ( JSError.make ( NodeUtil.getSourceName ( iArgument ) , iArgument, TEMPLATE_TYPE_NOT_OBJECT_TYPE )  ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] updateTypeOfThisOnClosure [RETURN_TYPE] void   Node n FunctionType fnType [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  iArgumentType  iParameterType  jArgumentType  jParameterType  boolean  foundTemplateTypeOfThisParameter  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  iArgument  iParameter  jArgument  jParameter  n  source  FunctionType  fnType  jArgumentFnType  jParameterFnType  BooleanLiteralSet  booleanValues  toBooleanOutcomes  int  i  j  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[buglab_swap_variables]^compiler.report ( JSError.make ( NodeUtil.getSourceName ( iArgument ) , iArgument )  ) ;^787^788^789^^^772^802^compiler.report ( JSError.make ( NodeUtil.getSourceName ( iArgument ) , iArgument, TEMPLATE_TYPE_NOT_OBJECT_TYPE )  ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] updateTypeOfThisOnClosure [RETURN_TYPE] void   Node n FunctionType fnType [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  iArgumentType  iParameterType  jArgumentType  jParameterType  boolean  foundTemplateTypeOfThisParameter  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  iArgument  iParameter  jArgument  jParameter  n  source  FunctionType  fnType  jArgumentFnType  jParameterFnType  BooleanLiteralSet  booleanValues  toBooleanOutcomes  int  i  j  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[buglab_swap_variables]^JSError.make ( NodeUtil.getSourceName ( TEMPLATE_TYPE_NOT_OBJECT_TYPE ) , iArgument, iArgument )  ) ;^788^789^^^^773^803^JSError.make ( NodeUtil.getSourceName ( iArgument ) , iArgument, TEMPLATE_TYPE_NOT_OBJECT_TYPE )  ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] updateTypeOfThisOnClosure [RETURN_TYPE] void   Node n FunctionType fnType [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  iArgumentType  iParameterType  jArgumentType  jParameterType  boolean  foundTemplateTypeOfThisParameter  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  iArgument  iParameter  jArgument  jParameter  n  source  FunctionType  fnType  jArgumentFnType  jParameterFnType  BooleanLiteralSet  booleanValues  toBooleanOutcomes  int  i  j  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[buglab_swap_variables]^JSError.make ( NodeUtil.getSourceName ( iArgument ) ,  TEMPLATE_TYPE_NOT_OBJECT_TYPE )  ) ;^788^789^^^^773^803^JSError.make ( NodeUtil.getSourceName ( iArgument ) , iArgument, TEMPLATE_TYPE_NOT_OBJECT_TYPE )  ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] updateTypeOfThisOnClosure [RETURN_TYPE] void   Node n FunctionType fnType [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  iArgumentType  iParameterType  jArgumentType  jParameterType  boolean  foundTemplateTypeOfThisParameter  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  iArgument  iParameter  jArgument  jParameter  n  source  FunctionType  fnType  jArgumentFnType  jParameterFnType  BooleanLiteralSet  booleanValues  toBooleanOutcomes  int  i  j  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[buglab_swap_variables]^JSError.make ( NodeUtil.getSourceName ( iArgument ) , iArgument )  ) ;^788^789^^^^773^803^JSError.make ( NodeUtil.getSourceName ( iArgument ) , iArgument, TEMPLATE_TYPE_NOT_OBJECT_TYPE )  ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] updateTypeOfThisOnClosure [RETURN_TYPE] void   Node n FunctionType fnType [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  iArgumentType  iParameterType  jArgumentType  jParameterType  boolean  foundTemplateTypeOfThisParameter  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  iArgument  iParameter  jArgument  jParameter  n  source  FunctionType  fnType  jArgumentFnType  jParameterFnType  BooleanLiteralSet  booleanValues  toBooleanOutcomes  int  i  j  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[buglab_swap_variables]^if  ( n + 1 >= j.getChildCount (  )  )  {^803^^^^^788^818^if  ( j + 1 >= n.getChildCount (  )  )  {^[CLASS] TypeInference BooleanOutcomePair  [METHOD] updateTypeOfThisOnClosure [RETURN_TYPE] void   Node n FunctionType fnType [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  iArgumentType  iParameterType  jArgumentType  jParameterType  boolean  foundTemplateTypeOfThisParameter  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  iArgument  iParameter  jArgument  jParameter  n  source  FunctionType  fnType  jArgumentFnType  jParameterFnType  BooleanLiteralSet  booleanValues  toBooleanOutcomes  int  i  j  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[buglab_swap_variables]^new FunctionType ( jArgumentFnType, registry.getReferenceName (  ) , jArgumentFnType.getSource (  ) , jArgumentFnType.getParametersNode (  ) ,^818^819^820^821^^809^825^new FunctionType ( registry, jArgumentFnType.getReferenceName (  ) , jArgumentFnType.getSource (  ) , jArgumentFnType.getParametersNode (  ) ,^[CLASS] TypeInference BooleanOutcomePair  [METHOD] updateTypeOfThisOnClosure [RETURN_TYPE] void   Node n FunctionType fnType [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  iArgumentType  iParameterType  jArgumentType  jParameterType  boolean  foundTemplateTypeOfThisParameter  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  iArgument  iParameter  jArgument  jParameter  n  source  FunctionType  fnType  jArgumentFnType  jParameterFnType  BooleanLiteralSet  booleanValues  toBooleanOutcomes  int  i  j  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[buglab_swap_variables]^new FunctionType ( registry.getReferenceName (  ) , jArgumentFnType.getSource (  ) , jArgumentFnType.getParametersNode (  ) ,^818^819^820^821^^809^825^new FunctionType ( registry, jArgumentFnType.getReferenceName (  ) , jArgumentFnType.getSource (  ) , jArgumentFnType.getParametersNode (  ) ,^[CLASS] TypeInference BooleanOutcomePair  [METHOD] updateTypeOfThisOnClosure [RETURN_TYPE] void   Node n FunctionType fnType [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  iArgumentType  iParameterType  jArgumentType  jParameterType  boolean  foundTemplateTypeOfThisParameter  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  iArgument  iParameter  jArgument  jParameter  n  source  FunctionType  fnType  jArgumentFnType  jParameterFnType  BooleanLiteralSet  booleanValues  toBooleanOutcomes  int  i  j  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[buglab_swap_variables]^new FunctionType (  jArgumentFnType.getReferenceName (  ) , jArgumentFnType.getSource (  ) , jArgumentFnType.getParametersNode (  ) ,^818^819^820^821^^809^825^new FunctionType ( registry, jArgumentFnType.getReferenceName (  ) , jArgumentFnType.getSource (  ) , jArgumentFnType.getParametersNode (  ) ,^[CLASS] TypeInference BooleanOutcomePair  [METHOD] updateTypeOfThisOnClosure [RETURN_TYPE] void   Node n FunctionType fnType [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  iArgumentType  iParameterType  jArgumentType  jParameterType  boolean  foundTemplateTypeOfThisParameter  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  iArgument  iParameter  jArgument  jParameter  n  source  FunctionType  fnType  jArgumentFnType  jParameterFnType  BooleanLiteralSet  booleanValues  toBooleanOutcomes  int  i  j  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[buglab_swap_variables]^jArgument.setJSType ( new FunctionType ( registryFnType.getReferenceName (  ) , jArgumentFnType.getSource (  ) ,^817^818^819^820^^809^825^jArgument.setJSType ( new FunctionType ( registry, jArgumentFnType.getReferenceName (  ) , jArgumentFnType.getSource (  ) ,^[CLASS] TypeInference BooleanOutcomePair  [METHOD] updateTypeOfThisOnClosure [RETURN_TYPE] void   Node n FunctionType fnType [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  iArgumentType  iParameterType  jArgumentType  jParameterType  boolean  foundTemplateTypeOfThisParameter  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  iArgument  iParameter  jArgument  jParameter  n  source  FunctionType  fnType  jArgumentFnType  jParameterFnType  BooleanLiteralSet  booleanValues  toBooleanOutcomes  int  i  j  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[buglab_swap_variables]^jArgument.setJSType ( new FunctionType ( registry, jArgument.getReferenceName (  ) , jArgumentFnTypeFnType.getSource (  ) ,^817^818^819^820^^809^825^jArgument.setJSType ( new FunctionType ( registry, jArgumentFnType.getReferenceName (  ) , jArgumentFnType.getSource (  ) ,^[CLASS] TypeInference BooleanOutcomePair  [METHOD] updateTypeOfThisOnClosure [RETURN_TYPE] void   Node n FunctionType fnType [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  iArgumentType  iParameterType  jArgumentType  jParameterType  boolean  foundTemplateTypeOfThisParameter  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  iArgument  iParameter  jArgument  jParameter  n  source  FunctionType  fnType  jArgumentFnType  jParameterFnType  BooleanLiteralSet  booleanValues  toBooleanOutcomes  int  i  j  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[buglab_swap_variables]^jArgument.setJSType ( new FunctionType ( registry.getReferenceName (  ) , jArgumentFnType.getSource (  ) ,^817^818^819^820^^809^825^jArgument.setJSType ( new FunctionType ( registry, jArgumentFnType.getReferenceName (  ) , jArgumentFnType.getSource (  ) ,^[CLASS] TypeInference BooleanOutcomePair  [METHOD] updateTypeOfThisOnClosure [RETURN_TYPE] void   Node n FunctionType fnType [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  iArgumentType  iParameterType  jArgumentType  jParameterType  boolean  foundTemplateTypeOfThisParameter  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  iArgument  iParameter  jArgument  jParameter  n  source  FunctionType  fnType  jArgumentFnType  jParameterFnType  BooleanLiteralSet  booleanValues  toBooleanOutcomes  int  i  j  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[buglab_swap_variables]^jArgument.setJSType ( new FunctionType (  jArgumentFnType.getReferenceName (  ) , jArgumentFnType.getSource (  ) ,^817^818^819^820^^809^825^jArgument.setJSType ( new FunctionType ( registry, jArgumentFnType.getReferenceName (  ) , jArgumentFnType.getSource (  ) ,^[CLASS] TypeInference BooleanOutcomePair  [METHOD] updateTypeOfThisOnClosure [RETURN_TYPE] void   Node n FunctionType fnType [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  iArgumentType  iParameterType  jArgumentType  jParameterType  boolean  foundTemplateTypeOfThisParameter  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  iArgument  iParameter  jArgument  jParameter  n  source  FunctionType  fnType  jArgumentFnType  jParameterFnType  BooleanLiteralSet  booleanValues  toBooleanOutcomes  int  i  j  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[buglab_swap_variables]^jArgument.setJSType ( new FunctionType ( registry, jArgumentFnTypeFnType.getReferenceName (  ) , jArgument.getSource (  ) ,^817^818^819^820^^809^825^jArgument.setJSType ( new FunctionType ( registry, jArgumentFnType.getReferenceName (  ) , jArgumentFnType.getSource (  ) ,^[CLASS] TypeInference BooleanOutcomePair  [METHOD] updateTypeOfThisOnClosure [RETURN_TYPE] void   Node n FunctionType fnType [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  iArgumentType  iParameterType  jArgumentType  jParameterType  boolean  foundTemplateTypeOfThisParameter  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  iArgument  iParameter  jArgument  jParameter  n  source  FunctionType  fnType  jArgumentFnType  jParameterFnType  BooleanLiteralSet  booleanValues  toBooleanOutcomes  int  i  j  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[buglab_swap_variables]^jArgument.setJSType ( new FunctionType ( jArgumentFnType, registry.getReferenceName (  ) , jArgumentFnType.getSource (  ) ,^817^818^819^820^^809^825^jArgument.setJSType ( new FunctionType ( registry, jArgumentFnType.getReferenceName (  ) , jArgumentFnType.getSource (  ) ,^[CLASS] TypeInference BooleanOutcomePair  [METHOD] updateTypeOfThisOnClosure [RETURN_TYPE] void   Node n FunctionType fnType [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  iArgumentType  iParameterType  jArgumentType  jParameterType  boolean  foundTemplateTypeOfThisParameter  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  iArgument  iParameter  jArgument  jParameter  n  source  FunctionType  fnType  jArgumentFnType  jParameterFnType  BooleanLiteralSet  booleanValues  toBooleanOutcomes  int  i  j  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[buglab_swap_variables]^jArgument.setJSType ( new FunctionType ( jArgument, registryFnType.getReferenceName (  ) , jArgumentFnType.getSource (  ) ,^817^818^819^820^^809^825^jArgument.setJSType ( new FunctionType ( registry, jArgumentFnType.getReferenceName (  ) , jArgumentFnType.getSource (  ) ,^[CLASS] TypeInference BooleanOutcomePair  [METHOD] updateTypeOfThisOnClosure [RETURN_TYPE] void   Node n FunctionType fnType [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  iArgumentType  iParameterType  jArgumentType  jParameterType  boolean  foundTemplateTypeOfThisParameter  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  iArgument  iParameter  jArgument  jParameter  n  source  FunctionType  fnType  jArgumentFnType  jParameterFnType  BooleanLiteralSet  booleanValues  toBooleanOutcomes  int  i  j  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[buglab_swap_variables]^new FunctionType ( registry.getReferenceName (  ) , jArgumentFnType.getSource (  ) , jArgumentFnType.getParametersNode (  ) ,^818^819^820^821^^803^833^new FunctionType ( registry, jArgumentFnType.getReferenceName (  ) , jArgumentFnType.getSource (  ) , jArgumentFnType.getParametersNode (  ) ,^[CLASS] TypeInference BooleanOutcomePair  [METHOD] updateTypeOfThisOnClosure [RETURN_TYPE] void   Node n FunctionType fnType [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  iArgumentType  iParameterType  jArgumentType  jParameterType  boolean  foundTemplateTypeOfThisParameter  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  iArgument  iParameter  jArgument  jParameter  n  source  FunctionType  fnType  jArgumentFnType  jParameterFnType  BooleanLiteralSet  booleanValues  toBooleanOutcomes  int  i  j  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[buglab_swap_variables]^new FunctionType (  jArgumentFnType.getReferenceName (  ) , jArgumentFnType.getSource (  ) , jArgumentFnType.getParametersNode (  ) ,^818^819^820^821^^803^833^new FunctionType ( registry, jArgumentFnType.getReferenceName (  ) , jArgumentFnType.getSource (  ) , jArgumentFnType.getParametersNode (  ) ,^[CLASS] TypeInference BooleanOutcomePair  [METHOD] updateTypeOfThisOnClosure [RETURN_TYPE] void   Node n FunctionType fnType [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  iArgumentType  iParameterType  jArgumentType  jParameterType  boolean  foundTemplateTypeOfThisParameter  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  iArgument  iParameter  jArgument  jParameter  n  source  FunctionType  fnType  jArgumentFnType  jParameterFnType  BooleanLiteralSet  booleanValues  toBooleanOutcomes  int  i  j  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[buglab_swap_variables]^jArgument.setJSType ( new FunctionType ( jArgument, registryFnType.getReferenceName (  ) , jArgumentFnType.getSource (  ) ,^817^818^819^820^^802^832^jArgument.setJSType ( new FunctionType ( registry, jArgumentFnType.getReferenceName (  ) , jArgumentFnType.getSource (  ) ,^[CLASS] TypeInference BooleanOutcomePair  [METHOD] updateTypeOfThisOnClosure [RETURN_TYPE] void   Node n FunctionType fnType [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  iArgumentType  iParameterType  jArgumentType  jParameterType  boolean  foundTemplateTypeOfThisParameter  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  iArgument  iParameter  jArgument  jParameter  n  source  FunctionType  fnType  jArgumentFnType  jParameterFnType  BooleanLiteralSet  booleanValues  toBooleanOutcomes  int  i  j  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[buglab_swap_variables]^jArgument.setJSType ( new FunctionType ( registryFnType.getReferenceName (  ) , jArgumentFnType.getSource (  ) ,^817^818^819^820^^802^832^jArgument.setJSType ( new FunctionType ( registry, jArgumentFnType.getReferenceName (  ) , jArgumentFnType.getSource (  ) ,^[CLASS] TypeInference BooleanOutcomePair  [METHOD] updateTypeOfThisOnClosure [RETURN_TYPE] void   Node n FunctionType fnType [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  iArgumentType  iParameterType  jArgumentType  jParameterType  boolean  foundTemplateTypeOfThisParameter  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  iArgument  iParameter  jArgument  jParameter  n  source  FunctionType  fnType  jArgumentFnType  jParameterFnType  BooleanLiteralSet  booleanValues  toBooleanOutcomes  int  i  j  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[buglab_swap_variables]^jArgument.setJSType ( new FunctionType ( jArgumentFnType, registry.getReferenceName (  ) , jArgumentFnType.getSource (  ) ,^817^818^819^820^^802^832^jArgument.setJSType ( new FunctionType ( registry, jArgumentFnType.getReferenceName (  ) , jArgumentFnType.getSource (  ) ,^[CLASS] TypeInference BooleanOutcomePair  [METHOD] updateTypeOfThisOnClosure [RETURN_TYPE] void   Node n FunctionType fnType [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  iArgumentType  iParameterType  jArgumentType  jParameterType  boolean  foundTemplateTypeOfThisParameter  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  iArgument  iParameter  jArgument  jParameter  n  source  FunctionType  fnType  jArgumentFnType  jParameterFnType  BooleanLiteralSet  booleanValues  toBooleanOutcomes  int  i  j  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[buglab_swap_variables]^jArgument.setJSType ( new FunctionType ( registry.getReferenceName (  ) , jArgumentFnType.getSource (  ) ,^817^818^819^820^^802^832^jArgument.setJSType ( new FunctionType ( registry, jArgumentFnType.getReferenceName (  ) , jArgumentFnType.getSource (  ) ,^[CLASS] TypeInference BooleanOutcomePair  [METHOD] updateTypeOfThisOnClosure [RETURN_TYPE] void   Node n FunctionType fnType [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  iArgumentType  iParameterType  jArgumentType  jParameterType  boolean  foundTemplateTypeOfThisParameter  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  iArgument  iParameter  jArgument  jParameter  n  source  FunctionType  fnType  jArgumentFnType  jParameterFnType  BooleanLiteralSet  booleanValues  toBooleanOutcomes  int  i  j  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[buglab_swap_variables]^jArgument.setJSType ( new FunctionType (  jArgumentFnType.getReferenceName (  ) , jArgumentFnType.getSource (  ) ,^817^818^819^820^^802^832^jArgument.setJSType ( new FunctionType ( registry, jArgumentFnType.getReferenceName (  ) , jArgumentFnType.getSource (  ) ,^[CLASS] TypeInference BooleanOutcomePair  [METHOD] updateTypeOfThisOnClosure [RETURN_TYPE] void   Node n FunctionType fnType [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  iArgumentType  iParameterType  jArgumentType  jParameterType  boolean  foundTemplateTypeOfThisParameter  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  iArgument  iParameter  jArgument  jParameter  n  source  FunctionType  fnType  jArgumentFnType  jParameterFnType  BooleanLiteralSet  booleanValues  toBooleanOutcomes  int  i  j  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[buglab_swap_variables]^new FunctionType ( jArgumentFnType, registry.getReferenceName (  ) , jArgumentFnType.getSource (  ) , jArgumentFnType.getParametersNode (  ) ,^818^819^820^821^^803^833^new FunctionType ( registry, jArgumentFnType.getReferenceName (  ) , jArgumentFnType.getSource (  ) , jArgumentFnType.getParametersNode (  ) ,^[CLASS] TypeInference BooleanOutcomePair  [METHOD] updateTypeOfThisOnClosure [RETURN_TYPE] void   Node n FunctionType fnType [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  iArgumentType  iParameterType  jArgumentType  jParameterType  boolean  foundTemplateTypeOfThisParameter  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  iArgument  iParameter  jArgument  jParameter  n  source  FunctionType  fnType  jArgumentFnType  jParameterFnType  BooleanLiteralSet  booleanValues  toBooleanOutcomes  int  i  j  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[buglab_swap_variables]^Node nArgument = j.getChildAtIndex ( j + 1 ) ;^807^^^^^792^822^Node jArgument = n.getChildAtIndex ( j + 1 ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] updateTypeOfThisOnClosure [RETURN_TYPE] void   Node n FunctionType fnType [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  iArgumentType  iParameterType  jArgumentType  jParameterType  boolean  foundTemplateTypeOfThisParameter  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  iArgument  iParameter  jArgument  jParameter  n  source  FunctionType  fnType  jArgumentFnType  jParameterFnType  BooleanLiteralSet  booleanValues  toBooleanOutcomes  int  i  j  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[buglab_swap_variables]^jArgument.setJSType ( new FunctionType ( registry, jArgument.getReferenceName (  ) , jArgumentFnTypeFnType.getSource (  ) ,^817^818^819^820^^802^832^jArgument.setJSType ( new FunctionType ( registry, jArgumentFnType.getReferenceName (  ) , jArgumentFnType.getSource (  ) ,^[CLASS] TypeInference BooleanOutcomePair  [METHOD] updateTypeOfThisOnClosure [RETURN_TYPE] void   Node n FunctionType fnType [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  iArgumentType  iParameterType  jArgumentType  jParameterType  boolean  foundTemplateTypeOfThisParameter  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  iArgument  iParameter  jArgument  jParameter  n  source  FunctionType  fnType  jArgumentFnType  jParameterFnType  BooleanLiteralSet  booleanValues  toBooleanOutcomes  int  i  j  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[buglab_swap_variables]^if  ( jArgumentFnTypeFnType.getTypeOfThis (  ) .isUnknownType (  )  )  {^814^^^^^809^825^if  ( jArgumentFnType.getTypeOfThis (  ) .isUnknownType (  )  )  {^[CLASS] TypeInference BooleanOutcomePair  [METHOD] updateTypeOfThisOnClosure [RETURN_TYPE] void   Node n FunctionType fnType [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  iArgumentType  iParameterType  jArgumentType  jParameterType  boolean  foundTemplateTypeOfThisParameter  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  iArgument  iParameter  jArgument  jParameter  n  source  FunctionType  fnType  jArgumentFnType  jParameterFnType  BooleanLiteralSet  booleanValues  toBooleanOutcomes  int  i  j  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[buglab_swap_variables]^if  ( jArgument.getTypeOfThis (  ) .isUnknownType (  )  )  {^814^^^^^799^829^if  ( jArgumentFnType.getTypeOfThis (  ) .isUnknownType (  )  )  {^[CLASS] TypeInference BooleanOutcomePair  [METHOD] updateTypeOfThisOnClosure [RETURN_TYPE] void   Node n FunctionType fnType [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  iArgumentType  iParameterType  jArgumentType  jParameterType  boolean  foundTemplateTypeOfThisParameter  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  iArgument  iParameter  jArgument  jParameter  n  source  FunctionType  fnType  jArgumentFnType  jParameterFnType  BooleanLiteralSet  booleanValues  toBooleanOutcomes  int  i  j  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[buglab_swap_variables]^if  ( jArgumentFnTypeFnType.getTypeOfThis (  ) .isUnknownType (  )  )  {^814^^^^^799^829^if  ( jArgumentFnType.getTypeOfThis (  ) .isUnknownType (  )  )  {^[CLASS] TypeInference BooleanOutcomePair  [METHOD] updateTypeOfThisOnClosure [RETURN_TYPE] void   Node n FunctionType fnType [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  iArgumentType  iParameterType  jArgumentType  jParameterType  boolean  foundTemplateTypeOfThisParameter  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  iArgument  iParameter  jArgument  jParameter  n  source  FunctionType  fnType  jArgumentFnType  jParameterFnType  BooleanLiteralSet  booleanValues  toBooleanOutcomes  int  i  j  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[buglab_swap_variables]^jArgument.setJSType ( new FunctionType ( registry, jArgumentFnTypeFnType.getReferenceName (  ) , jArgument.getSource (  ) ,^817^818^819^820^^802^832^jArgument.setJSType ( new FunctionType ( registry, jArgumentFnType.getReferenceName (  ) , jArgumentFnType.getSource (  ) ,^[CLASS] TypeInference BooleanOutcomePair  [METHOD] updateTypeOfThisOnClosure [RETURN_TYPE] void   Node n FunctionType fnType [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  iArgumentType  iParameterType  jArgumentType  jParameterType  boolean  foundTemplateTypeOfThisParameter  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  iArgument  iParameter  jArgument  jParameter  n  source  FunctionType  fnType  jArgumentFnType  jParameterFnType  BooleanLiteralSet  booleanValues  toBooleanOutcomes  int  i  j  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[buglab_swap_variables]^if  ( iParameterType.getTypeOfThis (  ) .equals ( jParameterFnType )  )  {^800^^^^^785^815^if  ( jParameterFnType.getTypeOfThis (  ) .equals ( iParameterType )  )  {^[CLASS] TypeInference BooleanOutcomePair  [METHOD] updateTypeOfThisOnClosure [RETURN_TYPE] void   Node n FunctionType fnType [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  iArgumentType  iParameterType  jArgumentType  jParameterType  boolean  foundTemplateTypeOfThisParameter  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  iArgument  iParameter  jArgument  jParameter  n  source  FunctionType  fnType  jArgumentFnType  jParameterFnType  BooleanLiteralSet  booleanValues  toBooleanOutcomes  int  i  j  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[buglab_swap_variables]^if  ( iParameterTypeParameterFnType.getTypeOfThis (  ) .equals ( j )  )  {^800^^^^^785^815^if  ( jParameterFnType.getTypeOfThis (  ) .equals ( iParameterType )  )  {^[CLASS] TypeInference BooleanOutcomePair  [METHOD] updateTypeOfThisOnClosure [RETURN_TYPE] void   Node n FunctionType fnType [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  iArgumentType  iParameterType  jArgumentType  jParameterType  boolean  foundTemplateTypeOfThisParameter  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  iArgument  iParameter  jArgument  jParameter  n  source  FunctionType  fnType  jArgumentFnType  jParameterFnType  BooleanLiteralSet  booleanValues  toBooleanOutcomes  int  i  j  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[buglab_swap_variables]^if  ( jArgument.getTypeOfThis (  ) .isUnknownType (  )  )  {^814^^^^^809^825^if  ( jArgumentFnType.getTypeOfThis (  ) .isUnknownType (  )  )  {^[CLASS] TypeInference BooleanOutcomePair  [METHOD] updateTypeOfThisOnClosure [RETURN_TYPE] void   Node n FunctionType fnType [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  iArgumentType  iParameterType  jArgumentType  jParameterType  boolean  foundTemplateTypeOfThisParameter  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  iArgument  iParameter  jArgument  jParameter  n  source  FunctionType  fnType  jArgumentFnType  jParameterFnType  BooleanLiteralSet  booleanValues  toBooleanOutcomes  int  i  j  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[buglab_swap_variables]^compiler.report ( JSError.make ( NodeUtil.getSourceName ( TEMPLATE_TYPE_OF_THIS_EXPECTED ) , source, source )  ) ;^835^836^^^^820^850^compiler.report ( JSError.make ( NodeUtil.getSourceName ( source ) , source, TEMPLATE_TYPE_OF_THIS_EXPECTED )  ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] updateTypeOfThisOnClosure [RETURN_TYPE] void   Node n FunctionType fnType [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  iArgumentType  iParameterType  jArgumentType  jParameterType  boolean  foundTemplateTypeOfThisParameter  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  iArgument  iParameter  jArgument  jParameter  n  source  FunctionType  fnType  jArgumentFnType  jParameterFnType  BooleanLiteralSet  booleanValues  toBooleanOutcomes  int  i  j  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[buglab_swap_variables]^compiler.report ( JSError.make ( NodeUtil.getSourceName ( source ) ,  TEMPLATE_TYPE_OF_THIS_EXPECTED )  ) ;^835^836^^^^820^850^compiler.report ( JSError.make ( NodeUtil.getSourceName ( source ) , source, TEMPLATE_TYPE_OF_THIS_EXPECTED )  ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] updateTypeOfThisOnClosure [RETURN_TYPE] void   Node n FunctionType fnType [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  iArgumentType  iParameterType  jArgumentType  jParameterType  boolean  foundTemplateTypeOfThisParameter  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  iArgument  iParameter  jArgument  jParameter  n  source  FunctionType  fnType  jArgumentFnType  jParameterFnType  BooleanLiteralSet  booleanValues  toBooleanOutcomes  int  i  j  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[buglab_swap_variables]^compiler.report ( JSError.make ( NodeUtil.getSourceName ( source ) , source )  ) ;^835^836^^^^820^850^compiler.report ( JSError.make ( NodeUtil.getSourceName ( source ) , source, TEMPLATE_TYPE_OF_THIS_EXPECTED )  ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] updateTypeOfThisOnClosure [RETURN_TYPE] void   Node n FunctionType fnType [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  iArgumentType  iParameterType  jArgumentType  jParameterType  boolean  foundTemplateTypeOfThisParameter  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  iArgument  iParameter  jArgument  jParameter  n  source  FunctionType  fnType  jArgumentFnType  jParameterFnType  BooleanLiteralSet  booleanValues  toBooleanOutcomes  int  i  j  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[buglab_swap_variables]^if  ( ! ( iArgument instanceof ObjectType )  )  {^786^^^^^771^801^if  ( ! ( iArgumentType instanceof ObjectType )  )  {^[CLASS] TypeInference BooleanOutcomePair  [METHOD] updateTypeOfThisOnClosure [RETURN_TYPE] void   Node n FunctionType fnType [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  iArgumentType  iParameterType  jArgumentType  jParameterType  boolean  foundTemplateTypeOfThisParameter  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  iArgument  iParameter  jArgument  jParameter  n  source  FunctionType  fnType  jArgumentFnType  jParameterFnType  BooleanLiteralSet  booleanValues  toBooleanOutcomes  int  i  j  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[buglab_swap_variables]^if  ( ! ( iArgumentTypeType instanceof ObjectType )  )  {^786^^^^^771^801^if  ( ! ( iArgumentType instanceof ObjectType )  )  {^[CLASS] TypeInference BooleanOutcomePair  [METHOD] updateTypeOfThisOnClosure [RETURN_TYPE] void   Node n FunctionType fnType [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  iArgumentType  iParameterType  jArgumentType  jParameterType  boolean  foundTemplateTypeOfThisParameter  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  iArgument  iParameter  jArgument  jParameter  n  source  FunctionType  fnType  jArgumentFnType  jParameterFnType  BooleanLiteralSet  booleanValues  toBooleanOutcomes  int  i  j  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[buglab_swap_variables]^if  ( jParameterFnTypeParameterFnType.getTypeOfThis (  ) .equals ( iParameterType )  )  {^800^^^^^785^815^if  ( jParameterFnType.getTypeOfThis (  ) .equals ( iParameterType )  )  {^[CLASS] TypeInference BooleanOutcomePair  [METHOD] updateTypeOfThisOnClosure [RETURN_TYPE] void   Node n FunctionType fnType [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  iArgumentType  iParameterType  jArgumentType  jParameterType  boolean  foundTemplateTypeOfThisParameter  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  iArgument  iParameter  jArgument  jParameter  n  source  FunctionType  fnType  jArgumentFnType  jParameterFnType  BooleanLiteralSet  booleanValues  toBooleanOutcomes  int  i  j  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[buglab_swap_variables]^if  ( jArgumentType.getType (  )  == Token.FUNCTION && jArgument instanceof FunctionType )  {^809^810^^^^794^824^if  ( jArgument.getType (  )  == Token.FUNCTION && jArgumentType instanceof FunctionType )  {^[CLASS] TypeInference BooleanOutcomePair  [METHOD] updateTypeOfThisOnClosure [RETURN_TYPE] void   Node n FunctionType fnType [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  iArgumentType  iParameterType  jArgumentType  jParameterType  boolean  foundTemplateTypeOfThisParameter  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  iArgument  iParameter  jArgument  jParameter  n  source  FunctionType  fnType  jArgumentFnType  jParameterFnType  BooleanLiteralSet  booleanValues  toBooleanOutcomes  int  i  j  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[buglab_swap_variables]^Node nArgument = i.getChildAtIndex ( i + 1 ) ;^782^^^^^767^797^Node iArgument = n.getChildAtIndex ( i + 1 ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] updateTypeOfThisOnClosure [RETURN_TYPE] void   Node n FunctionType fnType [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  iArgumentType  iParameterType  jArgumentType  jParameterType  boolean  foundTemplateTypeOfThisParameter  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  iArgument  iParameter  jArgument  jParameter  n  source  FunctionType  fnType  jArgumentFnType  jParameterFnType  BooleanLiteralSet  booleanValues  toBooleanOutcomes  int  i  j  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[buglab_swap_variables]^if  ( nType != iArgumentull )  {^784^^^^^769^799^if  ( iArgumentType != null )  {^[CLASS] TypeInference BooleanOutcomePair  [METHOD] updateTypeOfThisOnClosure [RETURN_TYPE] void   Node n FunctionType fnType [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  iArgumentType  iParameterType  jArgumentType  jParameterType  boolean  foundTemplateTypeOfThisParameter  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  iArgument  iParameter  jArgument  jParameter  n  source  FunctionType  fnType  jArgumentFnType  jParameterFnType  BooleanLiteralSet  booleanValues  toBooleanOutcomes  int  i  j  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[buglab_swap_variables]^scope = traverse ( scope, constructor ) ;^847^^^^^845^868^scope = traverse ( constructor, scope ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseNew [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[buglab_swap_variables]^scope = traverse (  scope ) ;^847^^^^^845^868^scope = traverse ( constructor, scope ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseNew [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[buglab_swap_variables]^scope = traverse ( constructor ) ;^847^^^^^845^868^scope = traverse ( constructor, scope ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseNew [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[buglab_swap_variables]^for  ( Node constructor = arg.getNext (  ) ; arg != null; arg = arg.getNext (  )  )  {^864^^^^^845^868^for  ( Node arg = constructor.getNext (  ) ; arg != null; arg = arg.getNext (  )  )  {^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseNew [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[buglab_swap_variables]^scope = traverse ( scope, arg ) ;^865^^^^^845^868^scope = traverse ( arg, scope ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseNew [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[buglab_swap_variables]^scope = traverse (  scope ) ;^865^^^^^845^868^scope = traverse ( arg, scope ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseNew [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[buglab_swap_variables]^scope = traverse ( arg ) ;^865^^^^^845^868^scope = traverse ( arg, scope ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseNew [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[buglab_swap_variables]^return traverseShortCircuitingBinOp ( scope, n, true ) ;^871^^^^^870^872^return traverseShortCircuitingBinOp ( n, scope, true ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseAnd [RETURN_TYPE] TypeInference$BooleanOutcomePair   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[buglab_swap_variables]^return traverseShortCircuitingBinOp (  scope, true ) ;^871^^^^^870^872^return traverseShortCircuitingBinOp ( n, scope, true ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseAnd [RETURN_TYPE] TypeInference$BooleanOutcomePair   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[buglab_swap_variables]^return traverseShortCircuitingBinOp ( n,  true ) ;^871^^^^^870^872^return traverseShortCircuitingBinOp ( n, scope, true ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseAnd [RETURN_TYPE] TypeInference$BooleanOutcomePair   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[buglab_swap_variables]^for  ( Node n = el.getFirstChild (  ) ; el != null; el = el.getNext (  )  )  {^875^^^^^874^879^for  ( Node el = n.getFirstChild (  ) ; el != null; el = el.getNext (  )  )  {^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseChildren [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  el  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[buglab_swap_variables]^scope = traverse ( scope, el ) ;^876^^^^^874^879^scope = traverse ( el, scope ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseChildren [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  el  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[buglab_swap_variables]^scope = traverse (  scope ) ;^876^^^^^874^879^scope = traverse ( el, scope ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseChildren [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  el  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[buglab_swap_variables]^scope = traverse ( el ) ;^876^^^^^874^879^scope = traverse ( el, scope ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseChildren [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  el  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[buglab_swap_variables]^scope = traverseChildren ( scope, n ) ;^882^^^^^881^892^scope = traverseChildren ( n, scope ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseGetElem [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  ObjectType  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[buglab_swap_variables]^scope = traverseChildren (  scope ) ;^882^^^^^881^892^scope = traverseChildren ( n, scope ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseGetElem [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  ObjectType  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[buglab_swap_variables]^scope = traverseChildren ( n ) ;^882^^^^^881^892^scope = traverseChildren ( n, scope ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseGetElem [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  ObjectType  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[buglab_swap_variables]^if  ( n != objTypeull )  {^885^^^^^881^892^if  ( objType != null )  {^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseGetElem [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  ObjectType  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[buglab_swap_variables]^if  ( n != typeull )  {^887^^^^^881^892^if  ( type != null )  {^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseGetElem [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  ObjectType  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[buglab_swap_variables]^return dereferencePointer ( scope.getFirstChild (  ) , n ) ;^891^^^^^881^892^return dereferencePointer ( n.getFirstChild (  ) , scope ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseGetElem [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  ObjectType  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[buglab_swap_variables]^return dereferencePointer ( n.getFirstChild (  )  ) ;^891^^^^^881^892^return dereferencePointer ( n.getFirstChild (  ) , scope ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseGetElem [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  ObjectType  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[buglab_swap_variables]^scope = traverseChildren ( scope, n ) ;^897^^^^^894^902^scope = traverseChildren ( n, scope ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseGetProp [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  objNode  property  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[buglab_swap_variables]^scope = traverseChildren (  scope ) ;^897^^^^^894^902^scope = traverseChildren ( n, scope ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseGetProp [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  objNode  property  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[buglab_swap_variables]^scope = traverseChildren ( n ) ;^897^^^^^894^902^scope = traverseChildren ( n, scope ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseGetProp [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  objNode  property  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[buglab_swap_variables]^n.setJSType ( getPropertyType ( n.getJSType (  ) , property.getString (  ) , objNode, scope )  ) ;^898^899^900^^^894^902^n.setJSType ( getPropertyType ( objNode.getJSType (  ) , property.getString (  ) , n, scope )  ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseGetProp [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  objNode  property  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[buglab_swap_variables]^n.setJSType ( getPropertyType ( objNode.getJSType (  ) , property.getString (  ) ,  scope )  ) ;^898^899^900^^^894^902^n.setJSType ( getPropertyType ( objNode.getJSType (  ) , property.getString (  ) , n, scope )  ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseGetProp [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  objNode  property  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[buglab_swap_variables]^n.setJSType ( getPropertyType ( property.getJSType (  ) , objNode.getString (  ) , n, scope )  ) ;^898^899^900^^^894^902^n.setJSType ( getPropertyType ( objNode.getJSType (  ) , property.getString (  ) , n, scope )  ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseGetProp [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  objNode  property  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[buglab_swap_variables]^n.setJSType ( getPropertyType ( objNode.getJSType (  ) .getString (  ) , n, scope )  ) ;^898^899^900^^^894^902^n.setJSType ( getPropertyType ( objNode.getJSType (  ) , property.getString (  ) , n, scope )  ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseGetProp [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  objNode  property  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[buglab_swap_variables]^n.setJSType ( getPropertyType ( objNode.getJSType (  ) , scope.getString (  ) , n, property )  ) ;^898^899^900^^^894^902^n.setJSType ( getPropertyType ( objNode.getJSType (  ) , property.getString (  ) , n, scope )  ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseGetProp [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  objNode  property  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[buglab_swap_variables]^n.setJSType ( getPropertyType ( objNode.getJSType (  ) , property.getString (  ) , n )  ) ;^898^899^900^^^894^902^n.setJSType ( getPropertyType ( objNode.getJSType (  ) , property.getString (  ) , n, scope )  ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseGetProp [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  objNode  property  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[buglab_swap_variables]^getPropertyType ( property.getJSType (  ) , objNode.getString (  ) , n, scope )  ) ;^899^900^^^^894^902^getPropertyType ( objNode.getJSType (  ) , property.getString (  ) , n, scope )  ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseGetProp [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  objNode  property  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[buglab_swap_variables]^getPropertyType ( objNode.getJSType (  ) .getString (  ) , n, scope )  ) ;^899^900^^^^894^902^getPropertyType ( objNode.getJSType (  ) , property.getString (  ) , n, scope )  ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseGetProp [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  objNode  property  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[buglab_swap_variables]^getPropertyType ( n.getJSType (  ) , property.getString (  ) , objNode, scope )  ) ;^899^900^^^^894^902^getPropertyType ( objNode.getJSType (  ) , property.getString (  ) , n, scope )  ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseGetProp [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  objNode  property  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[buglab_swap_variables]^getPropertyType ( objNode.getJSType (  ) , property.getString (  ) ,  scope )  ) ;^899^900^^^^894^902^getPropertyType ( objNode.getJSType (  ) , property.getString (  ) , n, scope )  ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseGetProp [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  objNode  property  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[buglab_swap_variables]^getPropertyType ( objNode.getJSType (  ) , property.getString (  ) , scope, n )  ) ;^899^900^^^^894^902^getPropertyType ( objNode.getJSType (  ) , property.getString (  ) , n, scope )  ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseGetProp [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  objNode  property  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[buglab_swap_variables]^getPropertyType ( objNode.getJSType (  ) , property.getString (  ) , n )  ) ;^899^900^^^^894^902^getPropertyType ( objNode.getJSType (  ) , property.getString (  ) , n, scope )  ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseGetProp [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  objNode  property  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[buglab_swap_variables]^return dereferencePointer ( scope.getFirstChild (  ) , n ) ;^901^^^^^894^902^return dereferencePointer ( n.getFirstChild (  ) , scope ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseGetProp [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  objNode  property  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[buglab_swap_variables]^return dereferencePointer ( n.getFirstChild (  )  ) ;^901^^^^^894^902^return dereferencePointer ( n.getFirstChild (  ) , scope ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseGetProp [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  objNode  property  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[buglab_swap_variables]^if  ( n != typearrowed )  {^912^^^^^908^918^if  ( type != narrowed )  {^[CLASS] TypeInference BooleanOutcomePair  [METHOD] dereferencePointer [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  narrowed  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[buglab_swap_variables]^if  ( narrowed != type )  {^912^^^^^908^918^if  ( type != narrowed )  {^[CLASS] TypeInference BooleanOutcomePair  [METHOD] dereferencePointer [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  narrowed  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[buglab_swap_variables]^redeclare ( narrowed, n.getString (  ) , scope ) ;^914^^^^^908^918^redeclare ( scope, n.getString (  ) , narrowed ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] dereferencePointer [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  narrowed  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[buglab_swap_variables]^redeclare (  n.getString (  ) , narrowed ) ;^914^^^^^908^918^redeclare ( scope, n.getString (  ) , narrowed ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] dereferencePointer [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  narrowed  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[buglab_swap_variables]^redeclare ( n, scope.getString (  ) , narrowed ) ;^914^^^^^908^918^redeclare ( scope, n.getString (  ) , narrowed ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] dereferencePointer [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  narrowed  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[buglab_swap_variables]^redeclare ( scope.getString (  ) , narrowed ) ;^914^^^^^908^918^redeclare ( scope, n.getString (  ) , narrowed ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] dereferencePointer [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  narrowed  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[buglab_swap_variables]^redeclare ( scope, narrowed.getString (  ) , n ) ;^914^^^^^908^918^redeclare ( scope, n.getString (  ) , narrowed ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] dereferencePointer [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  narrowed  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[buglab_swap_variables]^redeclare ( scope, n.getString (  )  ) ;^914^^^^^908^918^redeclare ( scope, n.getString (  ) , narrowed ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] dereferencePointer [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  narrowed  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[buglab_swap_variables]^if  ( type != n )  {^912^^^^^908^918^if  ( type != narrowed )  {^[CLASS] TypeInference BooleanOutcomePair  [METHOD] dereferencePointer [RETURN_TYPE] FlowScope   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  narrowed  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[buglab_swap_variables]^StaticSlot<JSType> var = qualifiedName.getSlot ( scope ) ;^924^^^^^909^939^StaticSlot<JSType> var = scope.getSlot ( qualifiedName ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] getPropertyType [RETURN_TYPE] JSType   JSType objType String propName Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  JSType  objType  propertyType  varType  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  propName  qualifiedName  ObjectType  regType  AbstractCompiler  compiler  JSTypeRegistry  registry  StaticSlot  var  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[buglab_swap_variables]^if  ( var != null )  {^927^^^^^912^942^if  ( varType != null )  {^[CLASS] TypeInference BooleanOutcomePair  [METHOD] getPropertyType [RETURN_TYPE] JSType   JSType objType String propName Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  JSType  objType  propertyType  varType  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  propName  qualifiedName  ObjectType  regType  AbstractCompiler  compiler  JSTypeRegistry  registry  StaticSlot  var  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[buglab_swap_variables]^if  ( var.equals ( getNativeType ( UNKNOWN_TYPE )  )  && varType != syntacticScope.getSlot ( qualifiedName )  )  {^928^929^^^^913^943^if  ( varType.equals ( getNativeType ( UNKNOWN_TYPE )  )  && var != syntacticScope.getSlot ( qualifiedName )  )  {^[CLASS] TypeInference BooleanOutcomePair  [METHOD] getPropertyType [RETURN_TYPE] JSType   JSType objType String propName Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  JSType  objType  propertyType  varType  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  propName  qualifiedName  ObjectType  regType  AbstractCompiler  compiler  JSTypeRegistry  registry  StaticSlot  var  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[buglab_swap_variables]^if  ( syntacticScopeType.equals ( getNativeType ( UNKNOWN_TYPE )  )  && var != var.getSlot ( qualifiedName )  )  {^928^929^^^^913^943^if  ( varType.equals ( getNativeType ( UNKNOWN_TYPE )  )  && var != syntacticScope.getSlot ( qualifiedName )  )  {^[CLASS] TypeInference BooleanOutcomePair  [METHOD] getPropertyType [RETURN_TYPE] JSType   JSType objType String propName Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  JSType  objType  propertyType  varType  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  propName  qualifiedName  ObjectType  regType  AbstractCompiler  compiler  JSTypeRegistry  registry  StaticSlot  var  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[buglab_swap_variables]^if  ( varType.equals ( getNativeType ( UNKNOWN_TYPE )  )  && var != qualifiedName.getSlot ( syntacticScope )  )  {^928^929^^^^913^943^if  ( varType.equals ( getNativeType ( UNKNOWN_TYPE )  )  && var != syntacticScope.getSlot ( qualifiedName )  )  {^[CLASS] TypeInference BooleanOutcomePair  [METHOD] getPropertyType [RETURN_TYPE] JSType   JSType objType String propName Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  JSType  objType  propertyType  varType  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  propName  qualifiedName  ObjectType  regType  AbstractCompiler  compiler  JSTypeRegistry  registry  StaticSlot  var  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[buglab_swap_variables]^if  ( syntacticScope.equals ( getNativeType ( UNKNOWN_TYPE )  )  && var != varType.getSlot ( qualifiedName )  )  {^928^929^^^^913^943^if  ( varType.equals ( getNativeType ( UNKNOWN_TYPE )  )  && var != syntacticScope.getSlot ( qualifiedName )  )  {^[CLASS] TypeInference BooleanOutcomePair  [METHOD] getPropertyType [RETURN_TYPE] JSType   JSType objType String propName Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  JSType  objType  propertyType  varType  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  propName  qualifiedName  ObjectType  regType  AbstractCompiler  compiler  JSTypeRegistry  registry  StaticSlot  var  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[buglab_swap_variables]^var != qualifiedName.getSlot ( syntacticScope )  )  {^929^^^^^914^944^var != syntacticScope.getSlot ( qualifiedName )  )  {^[CLASS] TypeInference BooleanOutcomePair  [METHOD] getPropertyType [RETURN_TYPE] JSType   JSType objType String propName Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  JSType  objType  propertyType  varType  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  propName  qualifiedName  ObjectType  regType  AbstractCompiler  compiler  JSTypeRegistry  registry  StaticSlot  var  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[buglab_swap_variables]^if  ( varTypeType.equals ( getNativeType ( UNKNOWN_TYPE )  )  && var != syntacticScope.getSlot ( qualifiedName )  )  {^928^929^^^^913^943^if  ( varType.equals ( getNativeType ( UNKNOWN_TYPE )  )  && var != syntacticScope.getSlot ( qualifiedName )  )  {^[CLASS] TypeInference BooleanOutcomePair  [METHOD] getPropertyType [RETURN_TYPE] JSType   JSType objType String propName Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  JSType  objType  propertyType  varType  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  propName  qualifiedName  ObjectType  regType  AbstractCompiler  compiler  JSTypeRegistry  registry  StaticSlot  var  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[buglab_swap_variables]^if  ( qualifiedNameType.equals ( getNativeType ( UNKNOWN_TYPE )  )  && var != syntacticScope.getSlot ( var )  )  {^928^929^^^^913^943^if  ( varType.equals ( getNativeType ( UNKNOWN_TYPE )  )  && var != syntacticScope.getSlot ( qualifiedName )  )  {^[CLASS] TypeInference BooleanOutcomePair  [METHOD] getPropertyType [RETURN_TYPE] JSType   JSType objType String propName Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  JSType  objType  propertyType  varType  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  propName  qualifiedName  ObjectType  regType  AbstractCompiler  compiler  JSTypeRegistry  registry  StaticSlot  var  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[buglab_swap_variables]^if  ( qualifiedName.equals ( getNativeType ( UNKNOWN_TYPE )  )  && var != syntacticScope.getSlot ( varType )  )  {^928^929^^^^913^943^if  ( varType.equals ( getNativeType ( UNKNOWN_TYPE )  )  && var != syntacticScope.getSlot ( qualifiedName )  )  {^[CLASS] TypeInference BooleanOutcomePair  [METHOD] getPropertyType [RETURN_TYPE] JSType   JSType objType String propName Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  JSType  objType  propertyType  varType  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  propName  qualifiedName  ObjectType  regType  AbstractCompiler  compiler  JSTypeRegistry  registry  StaticSlot  var  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[buglab_swap_variables]^propertyType = propName.findPropertyType ( objType ) ;^941^^^^^926^956^propertyType = objType.findPropertyType ( propName ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] getPropertyType [RETURN_TYPE] JSType   JSType objType String propName Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  JSType  objType  propertyType  varType  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  propName  qualifiedName  ObjectType  regType  AbstractCompiler  compiler  JSTypeRegistry  registry  StaticSlot  var  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[buglab_swap_variables]^ObjectType regType = ObjectType.cast ( qualifiedName.getType ( registry )  ) ;^947^^^^^944^951^ObjectType regType = ObjectType.cast ( registry.getType ( qualifiedName )  ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] getPropertyType [RETURN_TYPE] JSType   JSType objType String propName Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  JSType  objType  propertyType  varType  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  propName  qualifiedName  ObjectType  regType  AbstractCompiler  compiler  JSTypeRegistry  registry  StaticSlot  var  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[buglab_swap_variables]^ObjectType regType = ObjectType.cast ( qualifiedName.getType ( registry )  ) ;^947^^^^^932^962^ObjectType regType = ObjectType.cast ( registry.getType ( qualifiedName )  ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] getPropertyType [RETURN_TYPE] JSType   JSType objType String propName Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  JSType  objType  propertyType  varType  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  propName  qualifiedName  ObjectType  regType  AbstractCompiler  compiler  JSTypeRegistry  registry  StaticSlot  var  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[buglab_swap_variables]^return traverseShortCircuitingBinOp ( scope, n, false ) ;^957^^^^^956^958^return traverseShortCircuitingBinOp ( n, scope, false ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseOr [RETURN_TYPE] TypeInference$BooleanOutcomePair   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[buglab_swap_variables]^return traverseShortCircuitingBinOp (  scope, false ) ;^957^^^^^956^958^return traverseShortCircuitingBinOp ( n, scope, false ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseOr [RETURN_TYPE] TypeInference$BooleanOutcomePair   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[buglab_swap_variables]^return traverseShortCircuitingBinOp ( n,  false ) ;^957^^^^^956^958^return traverseShortCircuitingBinOp ( n, scope, false ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseOr [RETURN_TYPE] TypeInference$BooleanOutcomePair   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[buglab_swap_variables]^BooleanOutcomePair scopeLiterals = traverseWithinShortCircuitingBinOp ( left, left.createChildFlowScope (  )  ) ;^966^967^968^^^951^981^BooleanOutcomePair leftLiterals = traverseWithinShortCircuitingBinOp ( left, scope.createChildFlowScope (  )  ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseShortCircuitingBinOp [RETURN_TYPE] TypeInference$BooleanOutcomePair   Node n FlowScope scope boolean condition [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  condition  JSType  leftType  rightType  type  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanOutcomePair  leftLiterals  literals  rightLiterals  Node  left  n  right  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[buglab_swap_variables]^BooleanOutcomePair leftLiterals = traverseWithinShortCircuitingBinOp (  scope.createChildFlowScope (  )  ) ;^966^967^968^^^951^981^BooleanOutcomePair leftLiterals = traverseWithinShortCircuitingBinOp ( left, scope.createChildFlowScope (  )  ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseShortCircuitingBinOp [RETURN_TYPE] TypeInference$BooleanOutcomePair   Node n FlowScope scope boolean condition [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  condition  JSType  leftType  rightType  type  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanOutcomePair  leftLiterals  literals  rightLiterals  Node  left  n  right  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[buglab_swap_variables]^BooleanOutcomePair leftLiterals = traverseWithinShortCircuitingBinOp ( left.createChildFlowScope (  )  ) ;^966^967^968^^^951^981^BooleanOutcomePair leftLiterals = traverseWithinShortCircuitingBinOp ( left, scope.createChildFlowScope (  )  ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseShortCircuitingBinOp [RETURN_TYPE] TypeInference$BooleanOutcomePair   Node n FlowScope scope boolean condition [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  condition  JSType  leftType  rightType  type  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanOutcomePair  leftLiterals  literals  rightLiterals  Node  left  n  right  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[buglab_swap_variables]^traverseWithinShortCircuitingBinOp ( scope, left.createChildFlowScope (  )  ) ;^967^968^^^^952^982^traverseWithinShortCircuitingBinOp ( left, scope.createChildFlowScope (  )  ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseShortCircuitingBinOp [RETURN_TYPE] TypeInference$BooleanOutcomePair   Node n FlowScope scope boolean condition [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  condition  JSType  leftType  rightType  type  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanOutcomePair  leftLiterals  literals  rightLiterals  Node  left  n  right  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[buglab_swap_variables]^traverseWithinShortCircuitingBinOp (  scope.createChildFlowScope (  )  ) ;^967^968^^^^952^982^traverseWithinShortCircuitingBinOp ( left, scope.createChildFlowScope (  )  ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseShortCircuitingBinOp [RETURN_TYPE] TypeInference$BooleanOutcomePair   Node n FlowScope scope boolean condition [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  condition  JSType  leftType  rightType  type  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanOutcomePair  leftLiterals  literals  rightLiterals  Node  left  n  right  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[buglab_swap_variables]^traverseWithinShortCircuitingBinOp ( left.createChildFlowScope (  )  ) ;^967^968^^^^952^982^traverseWithinShortCircuitingBinOp ( left, scope.createChildFlowScope (  )  ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseShortCircuitingBinOp [RETURN_TYPE] TypeInference$BooleanOutcomePair   Node n FlowScope scope boolean condition [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  condition  JSType  leftType  rightType  type  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanOutcomePair  leftLiterals  literals  rightLiterals  Node  left  n  right  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[buglab_swap_variables]^FlowScope rightScope = reverseInterpreter. getPreciserScopeKnowingConditionOutcome ( leftLiterals, left.getOutcomeFlowScope ( left.getType (  ) , condition ) , condition ) ;^973^974^975^976^^958^988^FlowScope rightScope = reverseInterpreter. getPreciserScopeKnowingConditionOutcome ( left, leftLiterals.getOutcomeFlowScope ( left.getType (  ) , condition ) , condition ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseShortCircuitingBinOp [RETURN_TYPE] TypeInference$BooleanOutcomePair   Node n FlowScope scope boolean condition [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  condition  JSType  leftType  rightType  type  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanOutcomePair  leftLiterals  literals  rightLiterals  Node  left  n  right  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[buglab_swap_variables]^FlowScope rightScope = reverseInterpreter. getPreciserScopeKnowingConditionOutcome (  leftLiterals.getOutcomeFlowScope ( left.getType (  ) , condition ) , condition ) ;^973^974^975^976^^958^988^FlowScope rightScope = reverseInterpreter. getPreciserScopeKnowingConditionOutcome ( left, leftLiterals.getOutcomeFlowScope ( left.getType (  ) , condition ) , condition ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseShortCircuitingBinOp [RETURN_TYPE] TypeInference$BooleanOutcomePair   Node n FlowScope scope boolean condition [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  condition  JSType  leftType  rightType  type  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanOutcomePair  leftLiterals  literals  rightLiterals  Node  left  n  right  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[buglab_swap_variables]^FlowScope rightScope = reverseInterpreter. getPreciserScopeKnowingConditionOutcome ( left, condition.getOutcomeFlowScope ( left.getType (  ) , leftLiterals ) , condition ) ;^973^974^975^976^^958^988^FlowScope rightScope = reverseInterpreter. getPreciserScopeKnowingConditionOutcome ( left, leftLiterals.getOutcomeFlowScope ( left.getType (  ) , condition ) , condition ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseShortCircuitingBinOp [RETURN_TYPE] TypeInference$BooleanOutcomePair   Node n FlowScope scope boolean condition [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  condition  JSType  leftType  rightType  type  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanOutcomePair  leftLiterals  literals  rightLiterals  Node  left  n  right  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[buglab_swap_variables]^FlowScope rightScope = reverseInterpreter. getPreciserScopeKnowingConditionOutcome ( left.getOutcomeFlowScope ( left.getType (  ) , condition ) , condition ) ;^973^974^975^976^^958^988^FlowScope rightScope = reverseInterpreter. getPreciserScopeKnowingConditionOutcome ( left, leftLiterals.getOutcomeFlowScope ( left.getType (  ) , condition ) , condition ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseShortCircuitingBinOp [RETURN_TYPE] TypeInference$BooleanOutcomePair   Node n FlowScope scope boolean condition [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  condition  JSType  leftType  rightType  type  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanOutcomePair  leftLiterals  literals  rightLiterals  Node  left  n  right  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[buglab_swap_variables]^FlowScope rightScope = reverseInterpreter. getPreciserScopeKnowingConditionOutcome ( left, leftLiterals.getOutcomeFlowScope ( left.getType (  )  ) , condition ) ;^973^974^975^976^^958^988^FlowScope rightScope = reverseInterpreter. getPreciserScopeKnowingConditionOutcome ( left, leftLiterals.getOutcomeFlowScope ( left.getType (  ) , condition ) , condition ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseShortCircuitingBinOp [RETURN_TYPE] TypeInference$BooleanOutcomePair   Node n FlowScope scope boolean condition [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  condition  JSType  leftType  rightType  type  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanOutcomePair  leftLiterals  literals  rightLiterals  Node  left  n  right  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[buglab_swap_variables]^FlowScope rightScope = condition. getPreciserScopeKnowingConditionOutcome ( left, leftLiterals.getOutcomeFlowScope ( left.getType (  ) , reverseInterpreter ) , condition ) ;^973^974^975^976^^958^988^FlowScope rightScope = reverseInterpreter. getPreciserScopeKnowingConditionOutcome ( left, leftLiterals.getOutcomeFlowScope ( left.getType (  ) , condition ) , condition ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseShortCircuitingBinOp [RETURN_TYPE] TypeInference$BooleanOutcomePair   Node n FlowScope scope boolean condition [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  condition  JSType  leftType  rightType  type  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanOutcomePair  leftLiterals  literals  rightLiterals  Node  left  n  right  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[buglab_swap_variables]^FlowScope rightScope = left. getPreciserScopeKnowingConditionOutcome ( reverseInterpreter, leftLiterals.getOutcomeFlowScope ( left.getType (  ) , condition ) , condition ) ;^973^974^975^976^^958^988^FlowScope rightScope = reverseInterpreter. getPreciserScopeKnowingConditionOutcome ( left, leftLiterals.getOutcomeFlowScope ( left.getType (  ) , condition ) , condition ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseShortCircuitingBinOp [RETURN_TYPE] TypeInference$BooleanOutcomePair   Node n FlowScope scope boolean condition [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  condition  JSType  leftType  rightType  type  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanOutcomePair  leftLiterals  literals  rightLiterals  Node  left  n  right  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[buglab_swap_variables]^FlowScope rightScope = reverseInterpreter. getPreciserScopeKnowingConditionOutcome ( condition, leftLiterals.getOutcomeFlowScope ( left.getType (  ) , left ) , condition ) ;^973^974^975^976^^958^988^FlowScope rightScope = reverseInterpreter. getPreciserScopeKnowingConditionOutcome ( left, leftLiterals.getOutcomeFlowScope ( left.getType (  ) , condition ) , condition ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseShortCircuitingBinOp [RETURN_TYPE] TypeInference$BooleanOutcomePair   Node n FlowScope scope boolean condition [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  condition  JSType  leftType  rightType  type  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanOutcomePair  leftLiterals  literals  rightLiterals  Node  left  n  right  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[buglab_swap_variables]^FlowScope rightScope = leftLiterals. getPreciserScopeKnowingConditionOutcome ( left, reverseInterpreter.getOutcomeFlowScope ( left.getType (  ) , condition ) , condition ) ;^973^974^975^976^^958^988^FlowScope rightScope = reverseInterpreter. getPreciserScopeKnowingConditionOutcome ( left, leftLiterals.getOutcomeFlowScope ( left.getType (  ) , condition ) , condition ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseShortCircuitingBinOp [RETURN_TYPE] TypeInference$BooleanOutcomePair   Node n FlowScope scope boolean condition [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  condition  JSType  leftType  rightType  type  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanOutcomePair  leftLiterals  literals  rightLiterals  Node  left  n  right  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[buglab_swap_variables]^left, condition.getOutcomeFlowScope ( left.getType (  ) , leftLiterals ) , condition ) ;^975^976^^^^960^990^left, leftLiterals.getOutcomeFlowScope ( left.getType (  ) , condition ) , condition ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseShortCircuitingBinOp [RETURN_TYPE] TypeInference$BooleanOutcomePair   Node n FlowScope scope boolean condition [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  condition  JSType  leftType  rightType  type  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanOutcomePair  leftLiterals  literals  rightLiterals  Node  left  n  right  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[buglab_swap_variables]^left.getOutcomeFlowScope ( left.getType (  ) , condition ) , condition ) ;^975^976^^^^960^990^left, leftLiterals.getOutcomeFlowScope ( left.getType (  ) , condition ) , condition ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseShortCircuitingBinOp [RETURN_TYPE] TypeInference$BooleanOutcomePair   Node n FlowScope scope boolean condition [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  condition  JSType  leftType  rightType  type  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanOutcomePair  leftLiterals  literals  rightLiterals  Node  left  n  right  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[buglab_swap_variables]^left, leftLiteralsLiterals.getOutcomeFlowScope ( left.getType (  ) , condition ) , condition ) ;^975^976^^^^960^990^left, leftLiterals.getOutcomeFlowScope ( left.getType (  ) , condition ) , condition ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseShortCircuitingBinOp [RETURN_TYPE] TypeInference$BooleanOutcomePair   Node n FlowScope scope boolean condition [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  condition  JSType  leftType  rightType  type  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanOutcomePair  leftLiterals  literals  rightLiterals  Node  left  n  right  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[buglab_swap_variables]^leftLiterals.getOutcomeFlowScope ( left.getType (  ) , condition ) , condition ) ;^975^976^^^^960^990^left, leftLiterals.getOutcomeFlowScope ( left.getType (  ) , condition ) , condition ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseShortCircuitingBinOp [RETURN_TYPE] TypeInference$BooleanOutcomePair   Node n FlowScope scope boolean condition [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  condition  JSType  leftType  rightType  type  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanOutcomePair  leftLiterals  literals  rightLiterals  Node  left  n  right  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[buglab_swap_variables]^left, leftLiterals.getOutcomeFlowScope ( left.getType (  )  ) , condition ) ;^975^976^^^^960^990^left, leftLiterals.getOutcomeFlowScope ( left.getType (  ) , condition ) , condition ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseShortCircuitingBinOp [RETURN_TYPE] TypeInference$BooleanOutcomePair   Node n FlowScope scope boolean condition [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  condition  JSType  leftType  rightType  type  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanOutcomePair  leftLiterals  literals  rightLiterals  Node  left  n  right  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[buglab_swap_variables]^BooleanOutcomePair rightScopeLiterals = traverseWithinShortCircuitingBinOp ( right, right.createChildFlowScope (  )  ) ;^979^980^981^^^964^994^BooleanOutcomePair rightLiterals = traverseWithinShortCircuitingBinOp ( right, rightScope.createChildFlowScope (  )  ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseShortCircuitingBinOp [RETURN_TYPE] TypeInference$BooleanOutcomePair   Node n FlowScope scope boolean condition [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  condition  JSType  leftType  rightType  type  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanOutcomePair  leftLiterals  literals  rightLiterals  Node  left  n  right  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[buglab_swap_variables]^BooleanOutcomePair rightLiterals = traverseWithinShortCircuitingBinOp (  rightScope.createChildFlowScope (  )  ) ;^979^980^981^^^964^994^BooleanOutcomePair rightLiterals = traverseWithinShortCircuitingBinOp ( right, rightScope.createChildFlowScope (  )  ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseShortCircuitingBinOp [RETURN_TYPE] TypeInference$BooleanOutcomePair   Node n FlowScope scope boolean condition [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  condition  JSType  leftType  rightType  type  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanOutcomePair  leftLiterals  literals  rightLiterals  Node  left  n  right  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[buglab_swap_variables]^BooleanOutcomePair rightLiterals = traverseWithinShortCircuitingBinOp ( right.createChildFlowScope (  )  ) ;^979^980^981^^^964^994^BooleanOutcomePair rightLiterals = traverseWithinShortCircuitingBinOp ( right, rightScope.createChildFlowScope (  )  ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseShortCircuitingBinOp [RETURN_TYPE] TypeInference$BooleanOutcomePair   Node n FlowScope scope boolean condition [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  condition  JSType  leftType  rightType  type  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanOutcomePair  leftLiterals  literals  rightLiterals  Node  left  n  right  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[buglab_swap_variables]^traverseWithinShortCircuitingBinOp ( rightScope, right.createChildFlowScope (  )  ) ;^980^981^^^^965^995^traverseWithinShortCircuitingBinOp ( right, rightScope.createChildFlowScope (  )  ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseShortCircuitingBinOp [RETURN_TYPE] TypeInference$BooleanOutcomePair   Node n FlowScope scope boolean condition [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  condition  JSType  leftType  rightType  type  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanOutcomePair  leftLiterals  literals  rightLiterals  Node  left  n  right  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[buglab_swap_variables]^traverseWithinShortCircuitingBinOp (  rightScope.createChildFlowScope (  )  ) ;^980^981^^^^965^995^traverseWithinShortCircuitingBinOp ( right, rightScope.createChildFlowScope (  )  ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseShortCircuitingBinOp [RETURN_TYPE] TypeInference$BooleanOutcomePair   Node n FlowScope scope boolean condition [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  condition  JSType  leftType  rightType  type  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanOutcomePair  leftLiterals  literals  rightLiterals  Node  left  n  right  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[buglab_swap_variables]^traverseWithinShortCircuitingBinOp ( right.createChildFlowScope (  )  ) ;^980^981^^^^965^995^traverseWithinShortCircuitingBinOp ( right, rightScope.createChildFlowScope (  )  ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseShortCircuitingBinOp [RETURN_TYPE] TypeInference$BooleanOutcomePair   Node n FlowScope scope boolean condition [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  condition  JSType  leftType  rightType  type  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanOutcomePair  leftLiterals  literals  rightLiterals  Node  left  n  right  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[buglab_swap_variables]^if  ( rightType != null && leftType != null )  {^986^^^^^971^1001^if  ( leftType != null && rightType != null )  {^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseShortCircuitingBinOp [RETURN_TYPE] TypeInference$BooleanOutcomePair   Node n FlowScope scope boolean condition [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  condition  JSType  leftType  rightType  type  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanOutcomePair  leftLiterals  literals  rightLiterals  Node  left  n  right  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[buglab_swap_variables]^literals = new BooleanOutcomePair ( BooleanLiteralSet.BOTH, BooleanLiteralSet.BOTH, rightLiterals.getJoinedFlowScope (  ) , leftLiterals.getJoinedFlowScope (  )  ) ;^1014^1015^1016^1017^^999^1029^literals = new BooleanOutcomePair ( BooleanLiteralSet.BOTH, BooleanLiteralSet.BOTH, leftLiterals.getJoinedFlowScope (  ) , rightLiterals.getJoinedFlowScope (  )  ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseShortCircuitingBinOp [RETURN_TYPE] TypeInference$BooleanOutcomePair   Node n FlowScope scope boolean condition [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  condition  JSType  leftType  rightType  type  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanOutcomePair  leftLiterals  literals  rightLiterals  Node  left  n  right  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[buglab_swap_variables]^literals = new BooleanOutcomePair ( BooleanLiteralSet.BOTH, BooleanLiteralSet.BOTH.getJoinedFlowScope (  ) , rightLiterals.getJoinedFlowScope (  )  ) ;^1014^1015^1016^1017^^999^1029^literals = new BooleanOutcomePair ( BooleanLiteralSet.BOTH, BooleanLiteralSet.BOTH, leftLiterals.getJoinedFlowScope (  ) , rightLiterals.getJoinedFlowScope (  )  ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseShortCircuitingBinOp [RETURN_TYPE] TypeInference$BooleanOutcomePair   Node n FlowScope scope boolean condition [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  condition  JSType  leftType  rightType  type  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanOutcomePair  leftLiterals  literals  rightLiterals  Node  left  n  right  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[buglab_swap_variables]^literals = new BooleanOutcomePair ( BooleanLiteralSet.BOTH, BooleanLiteralSet.BOTH, leftLiterals.getJoinedFlowScope (  ) .getJoinedFlowScope (  )  ) ;^1014^1015^1016^1017^^999^1029^literals = new BooleanOutcomePair ( BooleanLiteralSet.BOTH, BooleanLiteralSet.BOTH, leftLiterals.getJoinedFlowScope (  ) , rightLiterals.getJoinedFlowScope (  )  ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseShortCircuitingBinOp [RETURN_TYPE] TypeInference$BooleanOutcomePair   Node n FlowScope scope boolean condition [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  condition  JSType  leftType  rightType  type  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanOutcomePair  leftLiterals  literals  rightLiterals  Node  left  n  right  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[buglab_swap_variables]^literals = new BooleanOutcomePair ( BooleanLiteralSet. BooleanLiteralSet.BOTH, leftLiterals.getJoinedFlowScope (  ) , rightLiterals.getJoinedFlowScope (  )  ) ;^1014^1015^1016^1017^^999^1029^literals = new BooleanOutcomePair ( BooleanLiteralSet.BOTH, BooleanLiteralSet.BOTH, leftLiterals.getJoinedFlowScope (  ) , rightLiterals.getJoinedFlowScope (  )  ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseShortCircuitingBinOp [RETURN_TYPE] TypeInference$BooleanOutcomePair   Node n FlowScope scope boolean condition [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  condition  JSType  leftType  rightType  type  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanOutcomePair  leftLiterals  literals  rightLiterals  Node  left  n  right  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[buglab_swap_variables]^type = rightType.getLeastSupertype ( leftType ) ;^997^^^^^988^1000^type = leftType.getLeastSupertype ( rightType ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseShortCircuitingBinOp [RETURN_TYPE] TypeInference$BooleanOutcomePair   Node n FlowScope scope boolean condition [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  condition  JSType  leftType  rightType  type  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanOutcomePair  leftLiterals  literals  rightLiterals  Node  left  n  right  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[buglab_swap_variables]^literals = getBooleanOutcomePair ( condition, rightLiterals, leftLiterals ) ;^998^999^^^^988^1000^literals = getBooleanOutcomePair ( leftLiterals, rightLiterals, condition ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseShortCircuitingBinOp [RETURN_TYPE] TypeInference$BooleanOutcomePair   Node n FlowScope scope boolean condition [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  condition  JSType  leftType  rightType  type  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanOutcomePair  leftLiterals  literals  rightLiterals  Node  left  n  right  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[buglab_swap_variables]^literals = getBooleanOutcomePair (  rightLiterals, condition ) ;^998^999^^^^988^1000^literals = getBooleanOutcomePair ( leftLiterals, rightLiterals, condition ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseShortCircuitingBinOp [RETURN_TYPE] TypeInference$BooleanOutcomePair   Node n FlowScope scope boolean condition [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  condition  JSType  leftType  rightType  type  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanOutcomePair  leftLiterals  literals  rightLiterals  Node  left  n  right  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[buglab_swap_variables]^literals = getBooleanOutcomePair ( rightLiterals, leftLiterals, condition ) ;^998^999^^^^988^1000^literals = getBooleanOutcomePair ( leftLiterals, rightLiterals, condition ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseShortCircuitingBinOp [RETURN_TYPE] TypeInference$BooleanOutcomePair   Node n FlowScope scope boolean condition [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  condition  JSType  leftType  rightType  type  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanOutcomePair  leftLiterals  literals  rightLiterals  Node  left  n  right  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[buglab_swap_variables]^literals = getBooleanOutcomePair ( leftLiterals,  condition ) ;^998^999^^^^988^1000^literals = getBooleanOutcomePair ( leftLiterals, rightLiterals, condition ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseShortCircuitingBinOp [RETURN_TYPE] TypeInference$BooleanOutcomePair   Node n FlowScope scope boolean condition [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  condition  JSType  leftType  rightType  type  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanOutcomePair  leftLiterals  literals  rightLiterals  Node  left  n  right  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[buglab_swap_variables]^literals = getBooleanOutcomePair ( leftLiterals, condition, rightLiterals ) ;^998^999^^^^988^1000^literals = getBooleanOutcomePair ( leftLiterals, rightLiterals, condition ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseShortCircuitingBinOp [RETURN_TYPE] TypeInference$BooleanOutcomePair   Node n FlowScope scope boolean condition [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  condition  JSType  leftType  rightType  type  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanOutcomePair  leftLiterals  literals  rightLiterals  Node  left  n  right  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[buglab_swap_variables]^literals = getBooleanOutcomePair ( leftLiterals, rightLiterals ) ;^998^999^^^^988^1000^literals = getBooleanOutcomePair ( leftLiterals, rightLiterals, condition ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseShortCircuitingBinOp [RETURN_TYPE] TypeInference$BooleanOutcomePair   Node n FlowScope scope boolean condition [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  condition  JSType  leftType  rightType  type  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanOutcomePair  leftLiterals  literals  rightLiterals  Node  left  n  right  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[buglab_swap_variables]^getBooleanOutcomePair ( rightLiterals, leftLiterals, condition ) ;^999^^^^^988^1000^getBooleanOutcomePair ( leftLiterals, rightLiterals, condition ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseShortCircuitingBinOp [RETURN_TYPE] TypeInference$BooleanOutcomePair   Node n FlowScope scope boolean condition [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  condition  JSType  leftType  rightType  type  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanOutcomePair  leftLiterals  literals  rightLiterals  Node  left  n  right  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[buglab_swap_variables]^getBooleanOutcomePair (  rightLiterals, condition ) ;^999^^^^^988^1000^getBooleanOutcomePair ( leftLiterals, rightLiterals, condition ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseShortCircuitingBinOp [RETURN_TYPE] TypeInference$BooleanOutcomePair   Node n FlowScope scope boolean condition [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  condition  JSType  leftType  rightType  type  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanOutcomePair  leftLiterals  literals  rightLiterals  Node  left  n  right  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[buglab_swap_variables]^getBooleanOutcomePair ( leftLiterals,  condition ) ;^999^^^^^988^1000^getBooleanOutcomePair ( leftLiterals, rightLiterals, condition ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseShortCircuitingBinOp [RETURN_TYPE] TypeInference$BooleanOutcomePair   Node n FlowScope scope boolean condition [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  condition  JSType  leftType  rightType  type  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanOutcomePair  leftLiterals  literals  rightLiterals  Node  left  n  right  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[buglab_swap_variables]^getBooleanOutcomePair ( condition, rightLiterals, leftLiterals ) ;^999^^^^^988^1000^getBooleanOutcomePair ( leftLiterals, rightLiterals, condition ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseShortCircuitingBinOp [RETURN_TYPE] TypeInference$BooleanOutcomePair   Node n FlowScope scope boolean condition [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  condition  JSType  leftType  rightType  type  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanOutcomePair  leftLiterals  literals  rightLiterals  Node  left  n  right  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[buglab_swap_variables]^getBooleanOutcomePair ( leftLiterals, rightLiterals ) ;^999^^^^^988^1000^getBooleanOutcomePair ( leftLiterals, rightLiterals, condition ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseShortCircuitingBinOp [RETURN_TYPE] TypeInference$BooleanOutcomePair   Node n FlowScope scope boolean condition [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  condition  JSType  leftType  rightType  type  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanOutcomePair  leftLiterals  literals  rightLiterals  Node  left  n  right  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[buglab_swap_variables]^if  ( literals.booleanValues.booleanValues == BooleanLiteralSet.EMPTY && getNativeType ( BOOLEAN_TYPE ) .isSubtype ( type )  )  {^1004^1005^^^^989^1019^if  ( literals.booleanValues == BooleanLiteralSet.EMPTY && getNativeType ( BOOLEAN_TYPE ) .isSubtype ( type )  )  {^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseShortCircuitingBinOp [RETURN_TYPE] TypeInference$BooleanOutcomePair   Node n FlowScope scope boolean condition [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  condition  JSType  leftType  rightType  type  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanOutcomePair  leftLiterals  literals  rightLiterals  Node  left  n  right  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[buglab_swap_variables]^type = rightType.getLeastSupertype ( leftType ) ;^997^^^^^982^1012^type = leftType.getLeastSupertype ( rightType ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseShortCircuitingBinOp [RETURN_TYPE] TypeInference$BooleanOutcomePair   Node n FlowScope scope boolean condition [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  condition  JSType  leftType  rightType  type  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanOutcomePair  leftLiterals  literals  rightLiterals  Node  left  n  right  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[buglab_swap_variables]^literals = getBooleanOutcomePair ( rightLiterals, leftLiterals, condition ) ;^998^999^^^^983^1013^literals = getBooleanOutcomePair ( leftLiterals, rightLiterals, condition ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseShortCircuitingBinOp [RETURN_TYPE] TypeInference$BooleanOutcomePair   Node n FlowScope scope boolean condition [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  condition  JSType  leftType  rightType  type  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanOutcomePair  leftLiterals  literals  rightLiterals  Node  left  n  right  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[buglab_swap_variables]^literals = getBooleanOutcomePair (  rightLiterals, condition ) ;^998^999^^^^983^1013^literals = getBooleanOutcomePair ( leftLiterals, rightLiterals, condition ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseShortCircuitingBinOp [RETURN_TYPE] TypeInference$BooleanOutcomePair   Node n FlowScope scope boolean condition [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  condition  JSType  leftType  rightType  type  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanOutcomePair  leftLiterals  literals  rightLiterals  Node  left  n  right  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[buglab_swap_variables]^literals = getBooleanOutcomePair ( leftLiterals,  condition ) ;^998^999^^^^983^1013^literals = getBooleanOutcomePair ( leftLiterals, rightLiterals, condition ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseShortCircuitingBinOp [RETURN_TYPE] TypeInference$BooleanOutcomePair   Node n FlowScope scope boolean condition [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  condition  JSType  leftType  rightType  type  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanOutcomePair  leftLiterals  literals  rightLiterals  Node  left  n  right  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[buglab_swap_variables]^literals = getBooleanOutcomePair ( leftLiterals, condition, rightLiterals ) ;^998^999^^^^983^1013^literals = getBooleanOutcomePair ( leftLiterals, rightLiterals, condition ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseShortCircuitingBinOp [RETURN_TYPE] TypeInference$BooleanOutcomePair   Node n FlowScope scope boolean condition [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  condition  JSType  leftType  rightType  type  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanOutcomePair  leftLiterals  literals  rightLiterals  Node  left  n  right  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[buglab_swap_variables]^literals = getBooleanOutcomePair ( leftLiterals, rightLiterals ) ;^998^999^^^^983^1013^literals = getBooleanOutcomePair ( leftLiterals, rightLiterals, condition ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseShortCircuitingBinOp [RETURN_TYPE] TypeInference$BooleanOutcomePair   Node n FlowScope scope boolean condition [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  condition  JSType  leftType  rightType  type  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanOutcomePair  leftLiterals  literals  rightLiterals  Node  left  n  right  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[buglab_swap_variables]^getBooleanOutcomePair ( rightLiterals, leftLiterals, condition ) ;^999^^^^^984^1014^getBooleanOutcomePair ( leftLiterals, rightLiterals, condition ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseShortCircuitingBinOp [RETURN_TYPE] TypeInference$BooleanOutcomePair   Node n FlowScope scope boolean condition [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  condition  JSType  leftType  rightType  type  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanOutcomePair  leftLiterals  literals  rightLiterals  Node  left  n  right  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[buglab_swap_variables]^getBooleanOutcomePair (  rightLiterals, condition ) ;^999^^^^^984^1014^getBooleanOutcomePair ( leftLiterals, rightLiterals, condition ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseShortCircuitingBinOp [RETURN_TYPE] TypeInference$BooleanOutcomePair   Node n FlowScope scope boolean condition [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  condition  JSType  leftType  rightType  type  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanOutcomePair  leftLiterals  literals  rightLiterals  Node  left  n  right  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[buglab_swap_variables]^getBooleanOutcomePair ( leftLiterals,  condition ) ;^999^^^^^984^1014^getBooleanOutcomePair ( leftLiterals, rightLiterals, condition ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseShortCircuitingBinOp [RETURN_TYPE] TypeInference$BooleanOutcomePair   Node n FlowScope scope boolean condition [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  condition  JSType  leftType  rightType  type  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanOutcomePair  leftLiterals  literals  rightLiterals  Node  left  n  right  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[buglab_swap_variables]^getBooleanOutcomePair ( leftLiterals, condition, rightLiterals ) ;^999^^^^^984^1014^getBooleanOutcomePair ( leftLiterals, rightLiterals, condition ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseShortCircuitingBinOp [RETURN_TYPE] TypeInference$BooleanOutcomePair   Node n FlowScope scope boolean condition [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  condition  JSType  leftType  rightType  type  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanOutcomePair  leftLiterals  literals  rightLiterals  Node  left  n  right  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[buglab_swap_variables]^getBooleanOutcomePair ( leftLiterals, rightLiterals ) ;^999^^^^^984^1014^getBooleanOutcomePair ( leftLiterals, rightLiterals, condition ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseShortCircuitingBinOp [RETURN_TYPE] TypeInference$BooleanOutcomePair   Node n FlowScope scope boolean condition [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  condition  JSType  leftType  rightType  type  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanOutcomePair  leftLiterals  literals  rightLiterals  Node  left  n  right  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[buglab_swap_variables]^getBooleanOutcomePair ( leftLiterals, condition, rightLiterals ) ;^999^^^^^988^1000^getBooleanOutcomePair ( leftLiterals, rightLiterals, condition ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseShortCircuitingBinOp [RETURN_TYPE] TypeInference$BooleanOutcomePair   Node n FlowScope scope boolean condition [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  condition  JSType  leftType  rightType  type  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanOutcomePair  leftLiterals  literals  rightLiterals  Node  left  n  right  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[buglab_swap_variables]^if  ( type.booleanValues == BooleanLiteralSet.EMPTY && getNativeType ( BOOLEAN_TYPE ) .isSubtype ( literals )  )  {^1004^1005^^^^989^1019^if  ( literals.booleanValues == BooleanLiteralSet.EMPTY && getNativeType ( BOOLEAN_TYPE ) .isSubtype ( type )  )  {^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseShortCircuitingBinOp [RETURN_TYPE] TypeInference$BooleanOutcomePair   Node n FlowScope scope boolean condition [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  condition  JSType  leftType  rightType  type  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanOutcomePair  leftLiterals  literals  rightLiterals  Node  left  n  right  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[buglab_swap_variables]^if  ( literals == BooleanLiteralSet.EMPTY && getNativeType ( BOOLEAN_TYPE ) .isSubtype ( type )  )  {^1004^1005^^^^989^1019^if  ( literals.booleanValues == BooleanLiteralSet.EMPTY && getNativeType ( BOOLEAN_TYPE ) .isSubtype ( type )  )  {^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseShortCircuitingBinOp [RETURN_TYPE] TypeInference$BooleanOutcomePair   Node n FlowScope scope boolean condition [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  condition  JSType  leftType  rightType  type  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanOutcomePair  leftLiterals  literals  rightLiterals  Node  left  n  right  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[buglab_swap_variables]^literals = getBooleanOutcomePair ( condition, rightLiterals, leftLiterals ) ;^998^999^^^^983^1013^literals = getBooleanOutcomePair ( leftLiterals, rightLiterals, condition ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseShortCircuitingBinOp [RETURN_TYPE] TypeInference$BooleanOutcomePair   Node n FlowScope scope boolean condition [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  condition  JSType  leftType  rightType  type  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanOutcomePair  leftLiterals  literals  rightLiterals  Node  left  n  right  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[buglab_swap_variables]^getBooleanOutcomePair ( condition, rightLiterals, leftLiterals ) ;^999^^^^^984^1014^getBooleanOutcomePair ( leftLiterals, rightLiterals, condition ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseShortCircuitingBinOp [RETURN_TYPE] TypeInference$BooleanOutcomePair   Node n FlowScope scope boolean condition [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  condition  JSType  leftType  rightType  type  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanOutcomePair  leftLiterals  literals  rightLiterals  Node  left  n  right  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[buglab_swap_variables]^scope = traverse ( scope, n ) ;^1034^^^^^1024^1037^scope = traverse ( n, scope ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseWithinShortCircuitingBinOp [RETURN_TYPE] TypeInference$BooleanOutcomePair   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[buglab_swap_variables]^scope = traverse (  scope ) ;^1034^^^^^1024^1037^scope = traverse ( n, scope ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseWithinShortCircuitingBinOp [RETURN_TYPE] TypeInference$BooleanOutcomePair   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[buglab_swap_variables]^scope = traverse ( n ) ;^1034^^^^^1024^1037^scope = traverse ( n, scope ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseWithinShortCircuitingBinOp [RETURN_TYPE] TypeInference$BooleanOutcomePair   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[buglab_swap_variables]^return traverseAnd ( scope, n ) ;^1028^^^^^1024^1037^return traverseAnd ( n, scope ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseWithinShortCircuitingBinOp [RETURN_TYPE] TypeInference$BooleanOutcomePair   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[buglab_swap_variables]^return traverseAnd (  scope ) ;^1028^^^^^1024^1037^return traverseAnd ( n, scope ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseWithinShortCircuitingBinOp [RETURN_TYPE] TypeInference$BooleanOutcomePair   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[buglab_swap_variables]^return traverseAnd ( n ) ;^1028^^^^^1024^1037^return traverseAnd ( n, scope ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseWithinShortCircuitingBinOp [RETURN_TYPE] TypeInference$BooleanOutcomePair   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[buglab_swap_variables]^return traverseOr ( scope, n ) ;^1031^^^^^1024^1037^return traverseOr ( n, scope ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseWithinShortCircuitingBinOp [RETURN_TYPE] TypeInference$BooleanOutcomePair   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[buglab_swap_variables]^return traverseOr (  scope ) ;^1031^^^^^1024^1037^return traverseOr ( n, scope ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseWithinShortCircuitingBinOp [RETURN_TYPE] TypeInference$BooleanOutcomePair   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[buglab_swap_variables]^return traverseOr ( n ) ;^1031^^^^^1024^1037^return traverseOr ( n, scope ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseWithinShortCircuitingBinOp [RETURN_TYPE] TypeInference$BooleanOutcomePair   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[buglab_swap_variables]^return scopeewBooleanOutcomePair ( n.getJSType (  ) , n ) ;^1035^^^^^1024^1037^return newBooleanOutcomePair ( n.getJSType (  ) , scope ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseWithinShortCircuitingBinOp [RETURN_TYPE] TypeInference$BooleanOutcomePair   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[buglab_swap_variables]^return newBooleanOutcomePair ( n.getJSType (  )  ) ;^1035^^^^^1024^1037^return newBooleanOutcomePair ( n.getJSType (  ) , scope ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] traverseWithinShortCircuitingBinOp [RETURN_TYPE] TypeInference$BooleanOutcomePair   Node n FlowScope scope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[buglab_swap_variables]^return new BooleanOutcomePair ( getBooleanOutcomes ( condition.toBooleanOutcomes, right.toBooleanOutcomes, left ) , getBooleanOutcomes ( left.booleanValues, right.booleanValues, condition ) ,^1046^1047^1048^1049^^1044^1051^return new BooleanOutcomePair ( getBooleanOutcomes ( left.toBooleanOutcomes, right.toBooleanOutcomes, condition ) , getBooleanOutcomes ( left.booleanValues, right.booleanValues, condition ) ,^[CLASS] TypeInference BooleanOutcomePair  [METHOD] getBooleanOutcomePair [RETURN_TYPE] TypeInference$BooleanOutcomePair   BooleanOutcomePair left BooleanOutcomePair right boolean condition [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  condition  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanOutcomePair  left  right  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[buglab_swap_variables]^return new BooleanOutcomePair ( getBooleanOutcomes ( right.toBooleanOutcomes, left.toBooleanOutcomes, condition ) , getBooleanOutcomes ( left.booleanValues, right.booleanValues, condition ) ,^1046^1047^1048^1049^^1044^1051^return new BooleanOutcomePair ( getBooleanOutcomes ( left.toBooleanOutcomes, right.toBooleanOutcomes, condition ) , getBooleanOutcomes ( left.booleanValues, right.booleanValues, condition ) ,^[CLASS] TypeInference BooleanOutcomePair  [METHOD] getBooleanOutcomePair [RETURN_TYPE] TypeInference$BooleanOutcomePair   BooleanOutcomePair left BooleanOutcomePair right boolean condition [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  condition  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanOutcomePair  left  right  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[buglab_swap_variables]^return new BooleanOutcomePair ( getBooleanOutcomes ( left.toBooleanOutcomes.toBooleanOutcomes, condition ) , getBooleanOutcomes ( left.booleanValues, right.booleanValues, condition ) ,^1046^1047^1048^1049^^1044^1051^return new BooleanOutcomePair ( getBooleanOutcomes ( left.toBooleanOutcomes, right.toBooleanOutcomes, condition ) , getBooleanOutcomes ( left.booleanValues, right.booleanValues, condition ) ,^[CLASS] TypeInference BooleanOutcomePair  [METHOD] getBooleanOutcomePair [RETURN_TYPE] TypeInference$BooleanOutcomePair   BooleanOutcomePair left BooleanOutcomePair right boolean condition [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  condition  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanOutcomePair  left  right  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[buglab_swap_variables]^return new BooleanOutcomePair ( getBooleanOutcomes ( left.toBooleanOutcomes, right.toBooleanOutcomes, right.booleanValues ) , getBooleanOutcomes ( left.booleanValues, condition, condition ) ,^1046^1047^1048^1049^^1044^1051^return new BooleanOutcomePair ( getBooleanOutcomes ( left.toBooleanOutcomes, right.toBooleanOutcomes, condition ) , getBooleanOutcomes ( left.booleanValues, right.booleanValues, condition ) ,^[CLASS] TypeInference BooleanOutcomePair  [METHOD] getBooleanOutcomePair [RETURN_TYPE] TypeInference$BooleanOutcomePair   BooleanOutcomePair left BooleanOutcomePair right boolean condition [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  condition  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanOutcomePair  left  right  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[buglab_swap_variables]^return new BooleanOutcomePair ( getBooleanOutcomes ( left.toBooleanOutcomes, right.toBooleanOutcomes ) , getBooleanOutcomes ( left.booleanValues, right.booleanValues, condition ) ,^1046^1047^1048^1049^^1044^1051^return new BooleanOutcomePair ( getBooleanOutcomes ( left.toBooleanOutcomes, right.toBooleanOutcomes, condition ) , getBooleanOutcomes ( left.booleanValues, right.booleanValues, condition ) ,^[CLASS] TypeInference BooleanOutcomePair  [METHOD] getBooleanOutcomePair [RETURN_TYPE] TypeInference$BooleanOutcomePair   BooleanOutcomePair left BooleanOutcomePair right boolean condition [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  condition  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanOutcomePair  left  right  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[buglab_swap_variables]^return new BooleanOutcomePair ( getBooleanOutcomes ( left.booleanValues, right.toBooleanOutcomes, condition ) , getBooleanOutcomes ( left.toBooleanOutcomes, right.booleanValues, condition ) ,^1046^1047^1048^1049^^1044^1051^return new BooleanOutcomePair ( getBooleanOutcomes ( left.toBooleanOutcomes, right.toBooleanOutcomes, condition ) , getBooleanOutcomes ( left.booleanValues, right.booleanValues, condition ) ,^[CLASS] TypeInference BooleanOutcomePair  [METHOD] getBooleanOutcomePair [RETURN_TYPE] TypeInference$BooleanOutcomePair   BooleanOutcomePair left BooleanOutcomePair right boolean condition [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  condition  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanOutcomePair  left  right  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[buglab_swap_variables]^return new BooleanOutcomePair ( getBooleanOutcomes (  right.toBooleanOutcomes, condition ) , getBooleanOutcomes ( left.booleanValues, right.booleanValues, condition ) ,^1046^1047^1048^1049^^1044^1051^return new BooleanOutcomePair ( getBooleanOutcomes ( left.toBooleanOutcomes, right.toBooleanOutcomes, condition ) , getBooleanOutcomes ( left.booleanValues, right.booleanValues, condition ) ,^[CLASS] TypeInference BooleanOutcomePair  [METHOD] getBooleanOutcomePair [RETURN_TYPE] TypeInference$BooleanOutcomePair   BooleanOutcomePair left BooleanOutcomePair right boolean condition [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  condition  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanOutcomePair  left  right  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[buglab_swap_variables]^return new BooleanOutcomePair ( getBooleanOutcomes ( left.toBooleanOutcomes, right.booleanValues, condition ) , getBooleanOutcomes ( left.booleanValues, right.toBooleanOutcomes, condition ) ,^1046^1047^1048^1049^^1044^1051^return new BooleanOutcomePair ( getBooleanOutcomes ( left.toBooleanOutcomes, right.toBooleanOutcomes, condition ) , getBooleanOutcomes ( left.booleanValues, right.booleanValues, condition ) ,^[CLASS] TypeInference BooleanOutcomePair  [METHOD] getBooleanOutcomePair [RETURN_TYPE] TypeInference$BooleanOutcomePair   BooleanOutcomePair left BooleanOutcomePair right boolean condition [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  condition  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanOutcomePair  left  right  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[buglab_swap_variables]^return new BooleanOutcomePair ( getBooleanOutcomes ( left.toBooleanOutcomes,  condition ) , getBooleanOutcomes ( left.booleanValues, right.booleanValues, condition ) ,^1046^1047^1048^1049^^1044^1051^return new BooleanOutcomePair ( getBooleanOutcomes ( left.toBooleanOutcomes, right.toBooleanOutcomes, condition ) , getBooleanOutcomes ( left.booleanValues, right.booleanValues, condition ) ,^[CLASS] TypeInference BooleanOutcomePair  [METHOD] getBooleanOutcomePair [RETURN_TYPE] TypeInference$BooleanOutcomePair   BooleanOutcomePair left BooleanOutcomePair right boolean condition [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  condition  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanOutcomePair  left  right  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[buglab_swap_variables]^return new BooleanOutcomePair ( getBooleanOutcomes ( left.toBooleanOutcomes, right.toBooleanOutcomes, condition ) , getBooleanOutcomes (  right.booleanValues, condition ) ,^1046^1047^1048^1049^^1044^1051^return new BooleanOutcomePair ( getBooleanOutcomes ( left.toBooleanOutcomes, right.toBooleanOutcomes, condition ) , getBooleanOutcomes ( left.booleanValues, right.booleanValues, condition ) ,^[CLASS] TypeInference BooleanOutcomePair  [METHOD] getBooleanOutcomePair [RETURN_TYPE] TypeInference$BooleanOutcomePair   BooleanOutcomePair left BooleanOutcomePair right boolean condition [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  condition  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanOutcomePair  left  right  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[buglab_swap_variables]^return new BooleanOutcomePair ( getBooleanOutcomes ( left.toBooleanOutcomes, right.toBooleanOutcomes, condition ) , getBooleanOutcomes ( right.booleanValues, left.booleanValues, condition ) ,^1046^1047^1048^1049^^1044^1051^return new BooleanOutcomePair ( getBooleanOutcomes ( left.toBooleanOutcomes, right.toBooleanOutcomes, condition ) , getBooleanOutcomes ( left.booleanValues, right.booleanValues, condition ) ,^[CLASS] TypeInference BooleanOutcomePair  [METHOD] getBooleanOutcomePair [RETURN_TYPE] TypeInference$BooleanOutcomePair   BooleanOutcomePair left BooleanOutcomePair right boolean condition [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  condition  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanOutcomePair  left  right  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[buglab_swap_variables]^return new BooleanOutcomePair ( getBooleanOutcomes ( left.toBooleanOutcomes, right.toBooleanOutcomes, condition ) , getBooleanOutcomes ( left.booleanValues,  condition ) ,^1046^1047^1048^1049^^1044^1051^return new BooleanOutcomePair ( getBooleanOutcomes ( left.toBooleanOutcomes, right.toBooleanOutcomes, condition ) , getBooleanOutcomes ( left.booleanValues, right.booleanValues, condition ) ,^[CLASS] TypeInference BooleanOutcomePair  [METHOD] getBooleanOutcomePair [RETURN_TYPE] TypeInference$BooleanOutcomePair   BooleanOutcomePair left BooleanOutcomePair right boolean condition [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  condition  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanOutcomePair  left  right  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[buglab_swap_variables]^return new BooleanOutcomePair ( getBooleanOutcomes ( right.toBooleanOutcomes.toBooleanOutcomes, left, condition ) , getBooleanOutcomes ( left.booleanValues, right.booleanValues, condition ) ,^1046^1047^1048^1049^^1044^1051^return new BooleanOutcomePair ( getBooleanOutcomes ( left.toBooleanOutcomes, right.toBooleanOutcomes, condition ) , getBooleanOutcomes ( left.booleanValues, right.booleanValues, condition ) ,^[CLASS] TypeInference BooleanOutcomePair  [METHOD] getBooleanOutcomePair [RETURN_TYPE] TypeInference$BooleanOutcomePair   BooleanOutcomePair left BooleanOutcomePair right boolean condition [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  condition  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanOutcomePair  left  right  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[buglab_swap_variables]^return new BooleanOutcomePair ( getBooleanOutcomes ( left.toBooleanOutcomes, right.toBooleanOutcomes, left.booleanValues ) , getBooleanOutcomes ( condition, right.booleanValues, condition ) ,^1046^1047^1048^1049^^1044^1051^return new BooleanOutcomePair ( getBooleanOutcomes ( left.toBooleanOutcomes, right.toBooleanOutcomes, condition ) , getBooleanOutcomes ( left.booleanValues, right.booleanValues, condition ) ,^[CLASS] TypeInference BooleanOutcomePair  [METHOD] getBooleanOutcomePair [RETURN_TYPE] TypeInference$BooleanOutcomePair   BooleanOutcomePair left BooleanOutcomePair right boolean condition [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  condition  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanOutcomePair  left  right  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[buglab_swap_variables]^return new BooleanOutcomePair ( getBooleanOutcomes ( left, right.toBooleanOutcomes, condition ) , getBooleanOutcomes ( left.toBooleanOutcomes.booleanValues, right.booleanValues, condition ) ,^1046^1047^1048^1049^^1044^1051^return new BooleanOutcomePair ( getBooleanOutcomes ( left.toBooleanOutcomes, right.toBooleanOutcomes, condition ) , getBooleanOutcomes ( left.booleanValues, right.booleanValues, condition ) ,^[CLASS] TypeInference BooleanOutcomePair  [METHOD] getBooleanOutcomePair [RETURN_TYPE] TypeInference$BooleanOutcomePair   BooleanOutcomePair left BooleanOutcomePair right boolean condition [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  condition  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanOutcomePair  left  right  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[buglab_swap_variables]^return new BooleanOutcomePair ( getBooleanOutcomes ( left.toBooleanOutcomes, left.booleanValues, condition ) , getBooleanOutcomes ( right.toBooleanOutcomes, right.booleanValues, condition ) ,^1046^1047^1048^1049^^1044^1051^return new BooleanOutcomePair ( getBooleanOutcomes ( left.toBooleanOutcomes, right.toBooleanOutcomes, condition ) , getBooleanOutcomes ( left.booleanValues, right.booleanValues, condition ) ,^[CLASS] TypeInference BooleanOutcomePair  [METHOD] getBooleanOutcomePair [RETURN_TYPE] TypeInference$BooleanOutcomePair   BooleanOutcomePair left BooleanOutcomePair right boolean condition [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  condition  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanOutcomePair  left  right  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[buglab_swap_variables]^getBooleanOutcomes ( left.toBooleanOutcomes.toBooleanOutcomes, right.toBooleanOutcomes, condition ) , getBooleanOutcomes ( left.booleanValues, right.booleanValues, condition ) , left.getJoinedFlowScope (  ) , right.getJoinedFlowScope (  )  ) ;^1047^1048^1049^1050^^1044^1051^getBooleanOutcomes ( left.toBooleanOutcomes, right.toBooleanOutcomes, condition ) , getBooleanOutcomes ( left.booleanValues, right.booleanValues, condition ) , left.getJoinedFlowScope (  ) , right.getJoinedFlowScope (  )  ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] getBooleanOutcomePair [RETURN_TYPE] TypeInference$BooleanOutcomePair   BooleanOutcomePair left BooleanOutcomePair right boolean condition [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  condition  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanOutcomePair  left  right  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[buglab_swap_variables]^getBooleanOutcomes ( left.toBooleanOutcomes, right.toBooleanOutcomes, condition ) , getBooleanOutcomes ( left.booleanValues, right.booleanValues, condition ) .getJoinedFlowScope (  ) , right.getJoinedFlowScope (  )  ) ;^1047^1048^1049^1050^^1044^1051^getBooleanOutcomes ( left.toBooleanOutcomes, right.toBooleanOutcomes, condition ) , getBooleanOutcomes ( left.booleanValues, right.booleanValues, condition ) , left.getJoinedFlowScope (  ) , right.getJoinedFlowScope (  )  ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] getBooleanOutcomePair [RETURN_TYPE] TypeInference$BooleanOutcomePair   BooleanOutcomePair left BooleanOutcomePair right boolean condition [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  condition  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanOutcomePair  left  right  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[buglab_swap_variables]^getBooleanOutcomes ( right.toBooleanOutcomes, left.toBooleanOutcomes, condition ) , getBooleanOutcomes ( left.booleanValues, right.booleanValues, condition ) , left.getJoinedFlowScope (  ) , right.getJoinedFlowScope (  )  ) ;^1047^1048^1049^1050^^1044^1051^getBooleanOutcomes ( left.toBooleanOutcomes, right.toBooleanOutcomes, condition ) , getBooleanOutcomes ( left.booleanValues, right.booleanValues, condition ) , left.getJoinedFlowScope (  ) , right.getJoinedFlowScope (  )  ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] getBooleanOutcomePair [RETURN_TYPE] TypeInference$BooleanOutcomePair   BooleanOutcomePair left BooleanOutcomePair right boolean condition [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  condition  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanOutcomePair  left  right  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[buglab_swap_variables]^getBooleanOutcomes ( left.toBooleanOutcomes.toBooleanOutcomes, condition ) , getBooleanOutcomes ( left.booleanValues, right.booleanValues, condition ) , left.getJoinedFlowScope (  ) , right.getJoinedFlowScope (  )  ) ;^1047^1048^1049^1050^^1044^1051^getBooleanOutcomes ( left.toBooleanOutcomes, right.toBooleanOutcomes, condition ) , getBooleanOutcomes ( left.booleanValues, right.booleanValues, condition ) , left.getJoinedFlowScope (  ) , right.getJoinedFlowScope (  )  ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] getBooleanOutcomePair [RETURN_TYPE] TypeInference$BooleanOutcomePair   BooleanOutcomePair left BooleanOutcomePair right boolean condition [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  condition  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanOutcomePair  left  right  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[buglab_swap_variables]^getBooleanOutcomes ( left.toBooleanOutcomes, condition.toBooleanOutcomes, right ) , getBooleanOutcomes ( left.booleanValues, right.booleanValues, condition ) , left.getJoinedFlowScope (  ) , right.getJoinedFlowScope (  )  ) ;^1047^1048^1049^1050^^1044^1051^getBooleanOutcomes ( left.toBooleanOutcomes, right.toBooleanOutcomes, condition ) , getBooleanOutcomes ( left.booleanValues, right.booleanValues, condition ) , left.getJoinedFlowScope (  ) , right.getJoinedFlowScope (  )  ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] getBooleanOutcomePair [RETURN_TYPE] TypeInference$BooleanOutcomePair   BooleanOutcomePair left BooleanOutcomePair right boolean condition [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  condition  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanOutcomePair  left  right  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[buglab_swap_variables]^getBooleanOutcomes ( left.toBooleanOutcomes, right.toBooleanOutcomes ) , getBooleanOutcomes ( left.booleanValues, right.booleanValues, condition ) , left.getJoinedFlowScope (  ) , right.getJoinedFlowScope (  )  ) ;^1047^1048^1049^1050^^1044^1051^getBooleanOutcomes ( left.toBooleanOutcomes, right.toBooleanOutcomes, condition ) , getBooleanOutcomes ( left.booleanValues, right.booleanValues, condition ) , left.getJoinedFlowScope (  ) , right.getJoinedFlowScope (  )  ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] getBooleanOutcomePair [RETURN_TYPE] TypeInference$BooleanOutcomePair   BooleanOutcomePair left BooleanOutcomePair right boolean condition [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  condition  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanOutcomePair  left  right  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[buglab_swap_variables]^getBooleanOutcomes ( condition, right.toBooleanOutcomes, left.toBooleanOutcomes ) , getBooleanOutcomes ( left.booleanValues, right.booleanValues, condition ) , left.getJoinedFlowScope (  ) , right.getJoinedFlowScope (  )  ) ;^1047^1048^1049^1050^^1044^1051^getBooleanOutcomes ( left.toBooleanOutcomes, right.toBooleanOutcomes, condition ) , getBooleanOutcomes ( left.booleanValues, right.booleanValues, condition ) , left.getJoinedFlowScope (  ) , right.getJoinedFlowScope (  )  ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] getBooleanOutcomePair [RETURN_TYPE] TypeInference$BooleanOutcomePair   BooleanOutcomePair left BooleanOutcomePair right boolean condition [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  condition  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanOutcomePair  left  right  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[buglab_swap_variables]^getBooleanOutcomes (  right.toBooleanOutcomes, condition ) , getBooleanOutcomes ( left.booleanValues, right.booleanValues, condition ) , left.getJoinedFlowScope (  ) , right.getJoinedFlowScope (  )  ) ;^1047^1048^1049^1050^^1044^1051^getBooleanOutcomes ( left.toBooleanOutcomes, right.toBooleanOutcomes, condition ) , getBooleanOutcomes ( left.booleanValues, right.booleanValues, condition ) , left.getJoinedFlowScope (  ) , right.getJoinedFlowScope (  )  ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] getBooleanOutcomePair [RETURN_TYPE] TypeInference$BooleanOutcomePair   BooleanOutcomePair left BooleanOutcomePair right boolean condition [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  condition  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanOutcomePair  left  right  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[buglab_swap_variables]^getBooleanOutcomes ( left.toBooleanOutcomes,  condition ) , getBooleanOutcomes ( left.booleanValues, right.booleanValues, condition ) , left.getJoinedFlowScope (  ) , right.getJoinedFlowScope (  )  ) ;^1047^1048^1049^1050^^1044^1051^getBooleanOutcomes ( left.toBooleanOutcomes, right.toBooleanOutcomes, condition ) , getBooleanOutcomes ( left.booleanValues, right.booleanValues, condition ) , left.getJoinedFlowScope (  ) , right.getJoinedFlowScope (  )  ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] getBooleanOutcomePair [RETURN_TYPE] TypeInference$BooleanOutcomePair   BooleanOutcomePair left BooleanOutcomePair right boolean condition [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  condition  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanOutcomePair  left  right  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[buglab_swap_variables]^getBooleanOutcomes ( right.booleanValues, left.booleanValues, condition ) , left.getJoinedFlowScope (  ) , right.getJoinedFlowScope (  )  ) ;^1049^1050^^^^1044^1051^getBooleanOutcomes ( left.booleanValues, right.booleanValues, condition ) , left.getJoinedFlowScope (  ) , right.getJoinedFlowScope (  )  ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] getBooleanOutcomePair [RETURN_TYPE] TypeInference$BooleanOutcomePair   BooleanOutcomePair left BooleanOutcomePair right boolean condition [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  condition  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanOutcomePair  left  right  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[buglab_swap_variables]^getBooleanOutcomes ( left.booleanValues, right.booleanValues, condition ) .getJoinedFlowScope (  ) , right.getJoinedFlowScope (  )  ) ;^1049^1050^^^^1044^1051^getBooleanOutcomes ( left.booleanValues, right.booleanValues, condition ) , left.getJoinedFlowScope (  ) , right.getJoinedFlowScope (  )  ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] getBooleanOutcomePair [RETURN_TYPE] TypeInference$BooleanOutcomePair   BooleanOutcomePair left BooleanOutcomePair right boolean condition [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  condition  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanOutcomePair  left  right  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[buglab_swap_variables]^getBooleanOutcomes ( right, left.booleanValues.booleanValues, condition ) , left.getJoinedFlowScope (  ) , right.getJoinedFlowScope (  )  ) ;^1049^1050^^^^1044^1051^getBooleanOutcomes ( left.booleanValues, right.booleanValues, condition ) , left.getJoinedFlowScope (  ) , right.getJoinedFlowScope (  )  ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] getBooleanOutcomePair [RETURN_TYPE] TypeInference$BooleanOutcomePair   BooleanOutcomePair left BooleanOutcomePair right boolean condition [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  condition  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanOutcomePair  left  right  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[buglab_swap_variables]^getBooleanOutcomes ( left.booleanValues.booleanValues, condition ) , left.getJoinedFlowScope (  ) , right.getJoinedFlowScope (  )  ) ;^1049^1050^^^^1044^1051^getBooleanOutcomes ( left.booleanValues, right.booleanValues, condition ) , left.getJoinedFlowScope (  ) , right.getJoinedFlowScope (  )  ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] getBooleanOutcomePair [RETURN_TYPE] TypeInference$BooleanOutcomePair   BooleanOutcomePair left BooleanOutcomePair right boolean condition [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  condition  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanOutcomePair  left  right  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[buglab_swap_variables]^getBooleanOutcomes ( left.booleanValues, condition.booleanValues, right ) , left.getJoinedFlowScope (  ) , right.getJoinedFlowScope (  )  ) ;^1049^1050^^^^1044^1051^getBooleanOutcomes ( left.booleanValues, right.booleanValues, condition ) , left.getJoinedFlowScope (  ) , right.getJoinedFlowScope (  )  ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] getBooleanOutcomePair [RETURN_TYPE] TypeInference$BooleanOutcomePair   BooleanOutcomePair left BooleanOutcomePair right boolean condition [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  condition  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanOutcomePair  left  right  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[buglab_swap_variables]^getBooleanOutcomes ( left.booleanValues, right.booleanValues ) , left.getJoinedFlowScope (  ) , right.getJoinedFlowScope (  )  ) ;^1049^1050^^^^1044^1051^getBooleanOutcomes ( left.booleanValues, right.booleanValues, condition ) , left.getJoinedFlowScope (  ) , right.getJoinedFlowScope (  )  ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] getBooleanOutcomePair [RETURN_TYPE] TypeInference$BooleanOutcomePair   BooleanOutcomePair left BooleanOutcomePair right boolean condition [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  condition  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanOutcomePair  left  right  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[buglab_swap_variables]^getBooleanOutcomes (  right.booleanValues, condition ) , left.getJoinedFlowScope (  ) , right.getJoinedFlowScope (  )  ) ;^1049^1050^^^^1044^1051^getBooleanOutcomes ( left.booleanValues, right.booleanValues, condition ) , left.getJoinedFlowScope (  ) , right.getJoinedFlowScope (  )  ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] getBooleanOutcomePair [RETURN_TYPE] TypeInference$BooleanOutcomePair   BooleanOutcomePair left BooleanOutcomePair right boolean condition [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  condition  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanOutcomePair  left  right  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[buglab_swap_variables]^getBooleanOutcomes ( left.booleanValues, condition, right.booleanValues ) , left.getJoinedFlowScope (  ) , right.getJoinedFlowScope (  )  ) ;^1049^1050^^^^1044^1051^getBooleanOutcomes ( left.booleanValues, right.booleanValues, condition ) , left.getJoinedFlowScope (  ) , right.getJoinedFlowScope (  )  ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] getBooleanOutcomePair [RETURN_TYPE] TypeInference$BooleanOutcomePair   BooleanOutcomePair left BooleanOutcomePair right boolean condition [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  condition  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanOutcomePair  left  right  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[buglab_swap_variables]^getBooleanOutcomes ( left.booleanValues,  condition ) , left.getJoinedFlowScope (  ) , right.getJoinedFlowScope (  )  ) ;^1049^1050^^^^1044^1051^getBooleanOutcomes ( left.booleanValues, right.booleanValues, condition ) , left.getJoinedFlowScope (  ) , right.getJoinedFlowScope (  )  ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] getBooleanOutcomePair [RETURN_TYPE] TypeInference$BooleanOutcomePair   BooleanOutcomePair left BooleanOutcomePair right boolean condition [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  condition  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanOutcomePair  left  right  BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[buglab_swap_variables]^return left.union ( right.intersection ( BooleanLiteralSet.get ( !condition )  )  ) ;^1067^^^^^1065^1068^return right.union ( left.intersection ( BooleanLiteralSet.get ( !condition )  )  ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] getBooleanOutcomes [RETURN_TYPE] BooleanLiteralSet   BooleanLiteralSet left BooleanLiteralSet right boolean condition [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  condition  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  left  right  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[buglab_swap_variables]^if  ( rightScope == leftScope )  {^1104^^^^^1102^1111^if  ( leftScope == rightScope )  {^[CLASS] TypeInference BooleanOutcomePair  [METHOD] getJoinedFlowScope [RETURN_TYPE] FlowScope   [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  left  right  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[buglab_swap_variables]^joinedScope = join ( rightScope, leftScope ) ;^1107^^^^^1102^1111^joinedScope = join ( leftScope, rightScope ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] getJoinedFlowScope [RETURN_TYPE] FlowScope   [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  left  right  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[buglab_swap_variables]^joinedScope = join (  rightScope ) ;^1107^^^^^1102^1111^joinedScope = join ( leftScope, rightScope ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] getJoinedFlowScope [RETURN_TYPE] FlowScope   [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  left  right  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[buglab_swap_variables]^joinedScope = join ( leftScope ) ;^1107^^^^^1102^1111^joinedScope = join ( leftScope, rightScope ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] getJoinedFlowScope [RETURN_TYPE] FlowScope   [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  left  right  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[buglab_swap_variables]^if  ( outcome == Token.AND && nodeType || nodeType == Token.OR && !outcome )  {^1118^1119^^^^1117^1125^if  ( nodeType == Token.AND && outcome || nodeType == Token.OR && !outcome )  {^[CLASS] TypeInference BooleanOutcomePair  [METHOD] getOutcomeFlowScope [RETURN_TYPE] FlowScope   int nodeType boolean outcome [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  outcome  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  left  right  toBooleanOutcomes  int  nodeType  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[buglab_swap_variables]^return new BooleanOutcomePair ( BooleanLiteralSet.BOTH, BooleanLiteralSet.BOTH,  flowScope ) ;^1131^1132^^^^1128^1138^return new BooleanOutcomePair ( BooleanLiteralSet.BOTH, BooleanLiteralSet.BOTH, flowScope, flowScope ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] newBooleanOutcomePair [RETURN_TYPE] TypeInference$BooleanOutcomePair   JSType jsType FlowScope flowScope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  jsType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  left  right  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  flowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[buglab_swap_variables]^return new BooleanOutcomePair ( BooleanLiteralSet. BooleanLiteralSet.BOTH, flowScope, flowScope ) ;^1131^1132^^^^1128^1138^return new BooleanOutcomePair ( BooleanLiteralSet.BOTH, BooleanLiteralSet.BOTH, flowScope, flowScope ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] newBooleanOutcomePair [RETURN_TYPE] TypeInference$BooleanOutcomePair   JSType jsType FlowScope flowScope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  jsType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  left  right  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  flowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[buglab_swap_variables]^return new BooleanOutcomePair ( registry.getPossibleToBooleanOutcomes (  ) , jsType.getNativeType ( BOOLEAN_TYPE ) .isSubtype ( jsType )  ? BooleanLiteralSet.BOTH : BooleanLiteralSet.EMPTY, flowScope, flowScope ) ;^1134^1135^1136^1137^^1128^1138^return new BooleanOutcomePair ( jsType.getPossibleToBooleanOutcomes (  ) , registry.getNativeType ( BOOLEAN_TYPE ) .isSubtype ( jsType )  ? BooleanLiteralSet.BOTH : BooleanLiteralSet.EMPTY, flowScope, flowScope ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] newBooleanOutcomePair [RETURN_TYPE] TypeInference$BooleanOutcomePair   JSType jsType FlowScope flowScope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  jsType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  left  right  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  flowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[buglab_swap_variables]^return new BooleanOutcomePair ( flowScope.getPossibleToBooleanOutcomes (  ) , registry.getNativeType ( BOOLEAN_TYPE ) .isSubtype ( jsType )  ? BooleanLiteralSet.BOTH : BooleanLiteralSet.EMPTY, jsType, flowScope ) ;^1134^1135^1136^1137^^1128^1138^return new BooleanOutcomePair ( jsType.getPossibleToBooleanOutcomes (  ) , registry.getNativeType ( BOOLEAN_TYPE ) .isSubtype ( jsType )  ? BooleanLiteralSet.BOTH : BooleanLiteralSet.EMPTY, flowScope, flowScope ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] newBooleanOutcomePair [RETURN_TYPE] TypeInference$BooleanOutcomePair   JSType jsType FlowScope flowScope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  jsType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  left  right  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  flowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[buglab_swap_variables]^return new BooleanOutcomePair ( jsType.getPossibleToBooleanOutcomes (  ) , registry.getNativeType ( BOOLEAN_TYPE ) .isSubtype ( jsType )  ? BooleanLiteralSet.BOTH : BooleanLiteralSet.EMPTY,  flowScope ) ;^1134^1135^1136^1137^^1128^1138^return new BooleanOutcomePair ( jsType.getPossibleToBooleanOutcomes (  ) , registry.getNativeType ( BOOLEAN_TYPE ) .isSubtype ( jsType )  ? BooleanLiteralSet.BOTH : BooleanLiteralSet.EMPTY, flowScope, flowScope ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] newBooleanOutcomePair [RETURN_TYPE] TypeInference$BooleanOutcomePair   JSType jsType FlowScope flowScope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  jsType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  left  right  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  flowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[buglab_swap_variables]^return new BooleanOutcomePair ( jsType.getPossibleToBooleanOutcomes (  ) .getNativeType ( BOOLEAN_TYPE ) .isSubtype ( jsType )  ? BooleanLiteralSet.BOTH : BooleanLiteralSet.EMPTY, flowScope, flowScope ) ;^1134^1135^1136^1137^^1128^1138^return new BooleanOutcomePair ( jsType.getPossibleToBooleanOutcomes (  ) , registry.getNativeType ( BOOLEAN_TYPE ) .isSubtype ( jsType )  ? BooleanLiteralSet.BOTH : BooleanLiteralSet.EMPTY, flowScope, flowScope ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] newBooleanOutcomePair [RETURN_TYPE] TypeInference$BooleanOutcomePair   JSType jsType FlowScope flowScope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  jsType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  left  right  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  flowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[buglab_swap_variables]^return new BooleanOutcomePair ( jsType.getPossibleToBooleanOutcomes (  ) , registry.getNativeType ( BOOLEAN_TYPE ) .isSubtype ( jsType )  ? BooleanLiteralSet.BOTH : BooleanLiteralSet. flowScope, flowScope ) ;^1134^1135^1136^1137^^1128^1138^return new BooleanOutcomePair ( jsType.getPossibleToBooleanOutcomes (  ) , registry.getNativeType ( BOOLEAN_TYPE ) .isSubtype ( jsType )  ? BooleanLiteralSet.BOTH : BooleanLiteralSet.EMPTY, flowScope, flowScope ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] newBooleanOutcomePair [RETURN_TYPE] TypeInference$BooleanOutcomePair   JSType jsType FlowScope flowScope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  jsType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  left  right  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  flowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[buglab_swap_variables]^return new BooleanOutcomePair ( jsType.getPossibleToBooleanOutcomes (  ) , flowScope.getNativeType ( BOOLEAN_TYPE ) .isSubtype ( jsType )  ? BooleanLiteralSet.BOTH : BooleanLiteralSet.EMPTY, registry, flowScope ) ;^1134^1135^1136^1137^^1128^1138^return new BooleanOutcomePair ( jsType.getPossibleToBooleanOutcomes (  ) , registry.getNativeType ( BOOLEAN_TYPE ) .isSubtype ( jsType )  ? BooleanLiteralSet.BOTH : BooleanLiteralSet.EMPTY, flowScope, flowScope ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] newBooleanOutcomePair [RETURN_TYPE] TypeInference$BooleanOutcomePair   JSType jsType FlowScope flowScope [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  jsType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  left  right  toBooleanOutcomes  FlowScope  bottomScope  conditionFlowScope  falseScope  flowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[buglab_swap_variables]^scope.inferSlotType (  varType ) ;^1144^^^^^1140^1145^scope.inferSlotType ( varName, varType ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] redeclare [RETURN_TYPE] void   FlowScope scope String varName JSType varType [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  varType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  left  right  toBooleanOutcomes  String  varName  FlowScope  bottomScope  conditionFlowScope  falseScope  flowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[buglab_swap_variables]^scope.inferSlotType ( varName ) ;^1144^^^^^1140^1145^scope.inferSlotType ( varName, varType ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] redeclare [RETURN_TYPE] void   FlowScope scope String varName JSType varType [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  varType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  left  right  toBooleanOutcomes  String  varName  FlowScope  bottomScope  conditionFlowScope  falseScope  flowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[buglab_swap_variables]^return typeId.getNativeType ( registry ) ;^1165^^^^^1164^1166^return registry.getNativeType ( typeId ) ;^[CLASS] TypeInference BooleanOutcomePair  [METHOD] getNativeType [RETURN_TYPE] JSType   JSTypeNative typeId [VARIABLES] ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  Scope  functionScope  syntacticScope  DiagnosticType  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  BooleanLiteralSet  booleanValues  left  right  toBooleanOutcomes  JSTypeNative  typeId  FlowScope  bottomScope  conditionFlowScope  falseScope  flowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  
[buglab_swap_variables]^if  ( rightScope == leftScope )  {^1104^^^^^1102^1111^if  ( leftScope == rightScope )  {^[CLASS] BooleanOutcomePair  [METHOD] getJoinedFlowScope [RETURN_TYPE] FlowScope   [VARIABLES] BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  joinedScope  leftScope  rightScope  boolean  
[buglab_swap_variables]^joinedScope = join ( rightScope, leftScope ) ;^1107^^^^^1102^1111^joinedScope = join ( leftScope, rightScope ) ;^[CLASS] BooleanOutcomePair  [METHOD] getJoinedFlowScope [RETURN_TYPE] FlowScope   [VARIABLES] BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  joinedScope  leftScope  rightScope  boolean  
[buglab_swap_variables]^joinedScope = join (  rightScope ) ;^1107^^^^^1102^1111^joinedScope = join ( leftScope, rightScope ) ;^[CLASS] BooleanOutcomePair  [METHOD] getJoinedFlowScope [RETURN_TYPE] FlowScope   [VARIABLES] BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  joinedScope  leftScope  rightScope  boolean  
[buglab_swap_variables]^joinedScope = join ( leftScope ) ;^1107^^^^^1102^1111^joinedScope = join ( leftScope, rightScope ) ;^[CLASS] BooleanOutcomePair  [METHOD] getJoinedFlowScope [RETURN_TYPE] FlowScope   [VARIABLES] BooleanLiteralSet  booleanValues  toBooleanOutcomes  FlowScope  joinedScope  leftScope  rightScope  boolean  
