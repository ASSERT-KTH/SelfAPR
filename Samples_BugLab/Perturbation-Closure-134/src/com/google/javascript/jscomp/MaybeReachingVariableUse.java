[buglab_swap_variables]^computeEscaped ( escaped, jsScope, compiler ) ;^58^^^^^50^59^computeEscaped ( jsScope, escaped, compiler ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] <init> [RETURN_TYPE] AbstractCompiler)   Node> cfg Scope jsScope AbstractCompiler compiler [VARIABLES] Multimap  mayUseMap  AbstractCompiler  compiler  Set  escaped  boolean  Scope  jsScope  ControlFlowGraph  cfg  
[buglab_swap_variables]^computeEscaped (  escaped, compiler ) ;^58^^^^^50^59^computeEscaped ( jsScope, escaped, compiler ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] <init> [RETURN_TYPE] AbstractCompiler)   Node> cfg Scope jsScope AbstractCompiler compiler [VARIABLES] Multimap  mayUseMap  AbstractCompiler  compiler  Set  escaped  boolean  Scope  jsScope  ControlFlowGraph  cfg  
[buglab_swap_variables]^computeEscaped ( jsScope, compiler, escaped ) ;^58^^^^^50^59^computeEscaped ( jsScope, escaped, compiler ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] <init> [RETURN_TYPE] AbstractCompiler)   Node> cfg Scope jsScope AbstractCompiler compiler [VARIABLES] Multimap  mayUseMap  AbstractCompiler  compiler  Set  escaped  boolean  Scope  jsScope  ControlFlowGraph  cfg  
[buglab_swap_variables]^computeEscaped ( jsScope, escaped ) ;^58^^^^^50^59^computeEscaped ( jsScope, escaped, compiler ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] <init> [RETURN_TYPE] AbstractCompiler)   Node> cfg Scope jsScope AbstractCompiler compiler [VARIABLES] Multimap  mayUseMap  AbstractCompiler  compiler  Set  escaped  boolean  Scope  jsScope  ControlFlowGraph  cfg  
[buglab_swap_variables]^computeEscaped ( jsScope,  compiler ) ;^58^^^^^50^59^computeEscaped ( jsScope, escaped, compiler ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] <init> [RETURN_TYPE] AbstractCompiler)   Node> cfg Scope jsScope AbstractCompiler compiler [VARIABLES] Multimap  mayUseMap  AbstractCompiler  compiler  Set  escaped  boolean  Scope  jsScope  ControlFlowGraph  cfg  
[buglab_swap_variables]^mayUseMap = HashMultimap.create ( other.mayUseMap.mayUseMap ) ;^97^^^^^96^98^mayUseMap = HashMultimap.create ( other.mayUseMap ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] <init> [RETURN_TYPE] MaybeReachingVariableUse$ReachingUses)   ReachingUses other [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  Scope  jsScope  ReachingUses  other  
[buglab_swap_variables]^mayUseMap = HashMultimap.create ( other ) ;^97^^^^^96^98^mayUseMap = HashMultimap.create ( other.mayUseMap ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] <init> [RETURN_TYPE] MaybeReachingVariableUse$ReachingUses)   ReachingUses other [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  Scope  jsScope  ReachingUses  other  
[buglab_swap_variables]^return  ( this.mayUseMap instanceof ReachingUses )  && (  ( ReachingUses )  other ) .mayUseMap.equals ( other ) ;^102^103^^^^101^104^return  ( other instanceof ReachingUses )  && (  ( ReachingUses )  other ) .mayUseMap.equals ( this.mayUseMap ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] equals [RETURN_TYPE] boolean   Object other [VARIABLES] Multimap  mayUseMap  Object  other  Set  escaped  boolean  Scope  jsScope  
[buglab_swap_variables]^computeMayUse ( output, n, n, false ) ;^148^^^^^146^150^computeMayUse ( n, n, output, false ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] flowThrough [RETURN_TYPE] MaybeReachingVariableUse$ReachingUses   Node n ReachingUses input [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  Scope  jsScope  ReachingUses  input  output  Node  n  
[buglab_swap_variables]^computeMayUse (  n, output, false ) ;^148^^^^^146^150^computeMayUse ( n, n, output, false ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] flowThrough [RETURN_TYPE] MaybeReachingVariableUse$ReachingUses   Node n ReachingUses input [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  Scope  jsScope  ReachingUses  input  output  Node  n  
[buglab_swap_variables]^computeMayUse ( n, n,  false ) ;^148^^^^^146^150^computeMayUse ( n, n, output, false ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] flowThrough [RETURN_TYPE] MaybeReachingVariableUse$ReachingUses   Node n ReachingUses input [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  Scope  jsScope  ReachingUses  input  output  Node  n  
[buglab_swap_variables]^removeFromUseIfLocal ( output.getString (  ) , lhs ) ;^183^^^^^172^186^removeFromUseIfLocal ( lhs.getString (  ) , output ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[buglab_swap_variables]^removeFromUseIfLocal ( lhs.getString (  )  ) ;^183^^^^^172^186^removeFromUseIfLocal ( lhs.getString (  ) , output ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[buglab_swap_variables]^computeMayUse ( cfgNode, rhs, output, conditional ) ;^185^^^^^172^186^computeMayUse ( rhs, cfgNode, output, conditional ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[buglab_swap_variables]^computeMayUse (  cfgNode, output, conditional ) ;^185^^^^^172^186^computeMayUse ( rhs, cfgNode, output, conditional ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[buglab_swap_variables]^computeMayUse ( rhs,  output, conditional ) ;^185^^^^^172^186^computeMayUse ( rhs, cfgNode, output, conditional ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[buglab_swap_variables]^computeMayUse ( output, cfgNode, rhs, conditional ) ;^185^^^^^172^186^computeMayUse ( rhs, cfgNode, output, conditional ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[buglab_swap_variables]^computeMayUse ( rhs, cfgNode,  conditional ) ;^185^^^^^172^186^computeMayUse ( rhs, cfgNode, output, conditional ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[buglab_swap_variables]^computeMayUse ( conditional, cfgNode, output, rhs ) ;^185^^^^^172^186^computeMayUse ( rhs, cfgNode, output, conditional ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[buglab_swap_variables]^computeMayUse ( rhs, cfgNode, output ) ;^185^^^^^172^186^computeMayUse ( rhs, cfgNode, output, conditional ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[buglab_swap_variables]^computeMayUse ( NodeUtil.getConditionExpression ( conditional ) , cfgNode, output, n ) ;^173^174^^^^158^188^computeMayUse ( NodeUtil.getConditionExpression ( n ) , cfgNode, output, conditional ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[buglab_swap_variables]^computeMayUse ( NodeUtil.getConditionExpression ( cfgNode ) , n, output, conditional ) ;^173^174^^^^158^188^computeMayUse ( NodeUtil.getConditionExpression ( n ) , cfgNode, output, conditional ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[buglab_swap_variables]^computeMayUse ( NodeUtil.getConditionExpression ( n ) ,  output, conditional ) ;^173^174^^^^158^188^computeMayUse ( NodeUtil.getConditionExpression ( n ) , cfgNode, output, conditional ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[buglab_swap_variables]^computeMayUse ( NodeUtil.getConditionExpression ( n ) , cfgNode, conditional, output ) ;^173^174^^^^158^188^computeMayUse ( NodeUtil.getConditionExpression ( n ) , cfgNode, output, conditional ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[buglab_swap_variables]^computeMayUse ( NodeUtil.getConditionExpression ( n ) , cfgNode,  conditional ) ;^173^174^^^^158^188^computeMayUse ( NodeUtil.getConditionExpression ( n ) , cfgNode, output, conditional ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[buglab_swap_variables]^computeMayUse ( NodeUtil.getConditionExpression ( n ) , cfgNode, output ) ;^173^174^^^^158^188^computeMayUse ( NodeUtil.getConditionExpression ( n ) , cfgNode, output, conditional ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[buglab_swap_variables]^removeFromUseIfLocal ( output.getString (  ) , lhs ) ;^183^^^^^168^198^removeFromUseIfLocal ( lhs.getString (  ) , output ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[buglab_swap_variables]^removeFromUseIfLocal ( lhs.getString (  )  ) ;^183^^^^^168^198^removeFromUseIfLocal ( lhs.getString (  ) , output ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[buglab_swap_variables]^removeFromUseIfLocal ( output.getString (  ) , varName ) ;^208^^^^^193^223^removeFromUseIfLocal ( varName.getString (  ) , output ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[buglab_swap_variables]^removeFromUseIfLocal ( varName.getString (  )  ) ;^208^^^^^193^223^removeFromUseIfLocal ( varName.getString (  ) , output ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[buglab_swap_variables]^computeMayUse ( output.getFirstChild (  ) , cfgNode, varName, conditional ) ;^206^^^^^191^221^computeMayUse ( varName.getFirstChild (  ) , cfgNode, output, conditional ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[buglab_swap_variables]^computeMayUse ( cfgNode.getFirstChild (  ) , varName, output, conditional ) ;^206^^^^^191^221^computeMayUse ( varName.getFirstChild (  ) , cfgNode, output, conditional ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[buglab_swap_variables]^computeMayUse ( varName.getFirstChild (  ) ,  output, conditional ) ;^206^^^^^191^221^computeMayUse ( varName.getFirstChild (  ) , cfgNode, output, conditional ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[buglab_swap_variables]^computeMayUse ( varName.getFirstChild (  ) , cfgNode,  conditional ) ;^206^^^^^191^221^computeMayUse ( varName.getFirstChild (  ) , cfgNode, output, conditional ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[buglab_swap_variables]^computeMayUse ( varName.getFirstChild (  ) , cfgNode, conditional, output ) ;^206^^^^^191^221^computeMayUse ( varName.getFirstChild (  ) , cfgNode, output, conditional ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[buglab_swap_variables]^computeMayUse ( varName.getFirstChild (  ) , cfgNode, output ) ;^206^^^^^191^221^computeMayUse ( varName.getFirstChild (  ) , cfgNode, output, conditional ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[buglab_swap_variables]^computeMayUse ( cfgNode, c, output, conditional ) ;^233^^^^^214^235^computeMayUse ( c, cfgNode, output, conditional ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[buglab_swap_variables]^computeMayUse (  cfgNode, output, conditional ) ;^233^^^^^214^235^computeMayUse ( c, cfgNode, output, conditional ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[buglab_swap_variables]^computeMayUse ( c,  output, conditional ) ;^233^^^^^214^235^computeMayUse ( c, cfgNode, output, conditional ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[buglab_swap_variables]^computeMayUse ( c, cfgNode, conditional, output ) ;^233^^^^^214^235^computeMayUse ( c, cfgNode, output, conditional ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[buglab_swap_variables]^computeMayUse ( c, cfgNode,  conditional ) ;^233^^^^^214^235^computeMayUse ( c, cfgNode, output, conditional ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[buglab_swap_variables]^computeMayUse ( c, cfgNode, output ) ;^233^^^^^214^235^computeMayUse ( c, cfgNode, output, conditional ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[buglab_swap_variables]^for  ( Node n = c.getLastChild (  ) ; c != null; c = n.getChildBefore ( c )  )  {^232^^^^^214^235^for  ( Node c = n.getLastChild (  ) ; c != null; c = n.getChildBefore ( c )  )  {^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[buglab_swap_variables]^computeMayUse ( conditional, cfgNode, output, c ) ;^233^^^^^214^235^computeMayUse ( c, cfgNode, output, conditional ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[buglab_swap_variables]^computeMayUse ( output, cfgNode, c, conditional ) ;^233^^^^^214^235^computeMayUse ( c, cfgNode, output, conditional ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[buglab_swap_variables]^computeMayUse ( c, conditional, output, cfgNode ) ;^233^^^^^214^235^computeMayUse ( c, cfgNode, output, conditional ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[buglab_swap_variables]^removeFromUseIfLocal ( output.getString (  ) , name ) ;^217^^^^^202^232^removeFromUseIfLocal ( name.getString (  ) , output ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[buglab_swap_variables]^removeFromUseIfLocal ( name.getString (  )  ) ;^217^^^^^202^232^removeFromUseIfLocal ( name.getString (  ) , output ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[buglab_swap_variables]^addToUseIfLocal ( cfgNode.getString (  ) , name, output ) ;^222^^^^^207^237^addToUseIfLocal ( name.getString (  ) , cfgNode, output ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[buglab_swap_variables]^addToUseIfLocal ( name.getString (  ) ,  output ) ;^222^^^^^207^237^addToUseIfLocal ( name.getString (  ) , cfgNode, output ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[buglab_swap_variables]^addToUseIfLocal ( name.getString (  ) , output, cfgNode ) ;^222^^^^^207^237^addToUseIfLocal ( name.getString (  ) , cfgNode, output ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[buglab_swap_variables]^addToUseIfLocal ( name.getString (  ) , cfgNode ) ;^222^^^^^207^237^addToUseIfLocal ( name.getString (  ) , cfgNode, output ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[buglab_swap_variables]^addToUseIfLocal ( output.getString (  ) , cfgNode, name ) ;^222^^^^^207^237^addToUseIfLocal ( name.getString (  ) , cfgNode, output ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[buglab_swap_variables]^computeMayUse ( cfgNode.getNext (  ) , name, output, conditional ) ;^225^^^^^210^240^computeMayUse ( name.getNext (  ) , cfgNode, output, conditional ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[buglab_swap_variables]^computeMayUse ( name.getNext (  ) ,  output, conditional ) ;^225^^^^^210^240^computeMayUse ( name.getNext (  ) , cfgNode, output, conditional ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[buglab_swap_variables]^computeMayUse ( name.getNext (  ) , cfgNode, conditional, output ) ;^225^^^^^210^240^computeMayUse ( name.getNext (  ) , cfgNode, output, conditional ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[buglab_swap_variables]^computeMayUse ( name.getNext (  ) , cfgNode,  conditional ) ;^225^^^^^210^240^computeMayUse ( name.getNext (  ) , cfgNode, output, conditional ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[buglab_swap_variables]^computeMayUse ( conditional.getNext (  ) , cfgNode, output, name ) ;^225^^^^^210^240^computeMayUse ( name.getNext (  ) , cfgNode, output, conditional ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[buglab_swap_variables]^computeMayUse ( name.getNext (  ) , cfgNode, output ) ;^225^^^^^210^240^computeMayUse ( name.getNext (  ) , cfgNode, output, conditional ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[buglab_swap_variables]^for  ( Node n = c.getLastChild (  ) ; c != null; c = n.getChildBefore ( c )  )  {^232^^^^^217^247^for  ( Node c = n.getLastChild (  ) ; c != null; c = n.getChildBefore ( c )  )  {^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[buglab_swap_variables]^computeMayUse ( cfgNode, c, output, conditional ) ;^233^^^^^218^248^computeMayUse ( c, cfgNode, output, conditional ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[buglab_swap_variables]^computeMayUse (  cfgNode, output, conditional ) ;^233^^^^^218^248^computeMayUse ( c, cfgNode, output, conditional ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[buglab_swap_variables]^computeMayUse ( c, conditional, output, cfgNode ) ;^233^^^^^218^248^computeMayUse ( c, cfgNode, output, conditional ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[buglab_swap_variables]^computeMayUse ( c,  output, conditional ) ;^233^^^^^218^248^computeMayUse ( c, cfgNode, output, conditional ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[buglab_swap_variables]^computeMayUse ( output, cfgNode, c, conditional ) ;^233^^^^^218^248^computeMayUse ( c, cfgNode, output, conditional ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[buglab_swap_variables]^computeMayUse ( c, cfgNode,  conditional ) ;^233^^^^^218^248^computeMayUse ( c, cfgNode, output, conditional ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[buglab_swap_variables]^computeMayUse ( c, cfgNode, output ) ;^233^^^^^218^248^computeMayUse ( c, cfgNode, output, conditional ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[buglab_swap_variables]^addToUseIfLocal ( cfgNode.getString (  ) , n, output ) ;^161^^^^^146^176^addToUseIfLocal ( n.getString (  ) , cfgNode, output ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[buglab_swap_variables]^addToUseIfLocal ( n.getString (  ) ,  output ) ;^161^^^^^146^176^addToUseIfLocal ( n.getString (  ) , cfgNode, output ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[buglab_swap_variables]^addToUseIfLocal ( output.getString (  ) , cfgNode, n ) ;^161^^^^^146^176^addToUseIfLocal ( n.getString (  ) , cfgNode, output ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[buglab_swap_variables]^addToUseIfLocal ( n.getString (  ) , cfgNode ) ;^161^^^^^146^176^addToUseIfLocal ( n.getString (  ) , cfgNode, output ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[buglab_swap_variables]^computeMayUse ( NodeUtil.getConditionExpression ( cfgNode ) , n, output, conditional ) ;^167^168^^^^152^182^computeMayUse ( NodeUtil.getConditionExpression ( n ) , cfgNode, output, conditional ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[buglab_swap_variables]^computeMayUse ( NodeUtil.getConditionExpression ( n ) ,  output, conditional ) ;^167^168^^^^152^182^computeMayUse ( NodeUtil.getConditionExpression ( n ) , cfgNode, output, conditional ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[buglab_swap_variables]^computeMayUse ( NodeUtil.getConditionExpression ( n ) , output, cfgNode, conditional ) ;^167^168^^^^152^182^computeMayUse ( NodeUtil.getConditionExpression ( n ) , cfgNode, output, conditional ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[buglab_swap_variables]^computeMayUse ( NodeUtil.getConditionExpression ( n ) , cfgNode,  conditional ) ;^167^168^^^^152^182^computeMayUse ( NodeUtil.getConditionExpression ( n ) , cfgNode, output, conditional ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[buglab_swap_variables]^computeMayUse ( NodeUtil.getConditionExpression ( n ) , conditional, output, cfgNode ) ;^167^168^^^^152^182^computeMayUse ( NodeUtil.getConditionExpression ( n ) , cfgNode, output, conditional ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[buglab_swap_variables]^computeMayUse ( NodeUtil.getConditionExpression ( n ) , cfgNode, output ) ;^167^168^^^^152^182^computeMayUse ( NodeUtil.getConditionExpression ( n ) , cfgNode, output, conditional ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[buglab_swap_variables]^computeMayUse ( NodeUtil.getConditionExpression ( output ) , cfgNode, n, conditional ) ;^173^174^^^^158^188^computeMayUse ( NodeUtil.getConditionExpression ( n ) , cfgNode, output, conditional ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[buglab_swap_variables]^computeMayUse ( cfgNode, rhs, output, conditional ) ;^185^^^^^170^200^computeMayUse ( rhs, cfgNode, output, conditional ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[buglab_swap_variables]^computeMayUse (  cfgNode, output, conditional ) ;^185^^^^^170^200^computeMayUse ( rhs, cfgNode, output, conditional ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[buglab_swap_variables]^computeMayUse ( rhs,  output, conditional ) ;^185^^^^^170^200^computeMayUse ( rhs, cfgNode, output, conditional ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[buglab_swap_variables]^computeMayUse ( output, cfgNode, rhs, conditional ) ;^185^^^^^170^200^computeMayUse ( rhs, cfgNode, output, conditional ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[buglab_swap_variables]^computeMayUse ( rhs, cfgNode,  conditional ) ;^185^^^^^170^200^computeMayUse ( rhs, cfgNode, output, conditional ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[buglab_swap_variables]^computeMayUse ( rhs, conditional, output, cfgNode ) ;^185^^^^^170^200^computeMayUse ( rhs, cfgNode, output, conditional ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[buglab_swap_variables]^computeMayUse ( rhs, cfgNode, output ) ;^185^^^^^170^200^computeMayUse ( rhs, cfgNode, output, conditional ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[buglab_swap_variables]^computeMayUse ( output.getLastChild (  ) , cfgNode, n, true ) ;^191^^^^^176^206^computeMayUse ( n.getLastChild (  ) , cfgNode, output, true ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[buglab_swap_variables]^computeMayUse ( cfgNode.getLastChild (  ) , n, output, true ) ;^191^^^^^176^206^computeMayUse ( n.getLastChild (  ) , cfgNode, output, true ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[buglab_swap_variables]^computeMayUse ( n.getLastChild (  ) ,  output, true ) ;^191^^^^^176^206^computeMayUse ( n.getLastChild (  ) , cfgNode, output, true ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[buglab_swap_variables]^computeMayUse ( n.getLastChild (  ) , cfgNode,  true ) ;^191^^^^^176^206^computeMayUse ( n.getLastChild (  ) , cfgNode, output, true ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[buglab_swap_variables]^computeMayUse ( conditional.getFirstChild (  ) , cfgNode, output, n ) ;^192^^^^^177^207^computeMayUse ( n.getFirstChild (  ) , cfgNode, output, conditional ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[buglab_swap_variables]^computeMayUse ( cfgNode.getFirstChild (  ) , n, output, conditional ) ;^192^^^^^177^207^computeMayUse ( n.getFirstChild (  ) , cfgNode, output, conditional ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[buglab_swap_variables]^computeMayUse ( n.getFirstChild (  ) ,  output, conditional ) ;^192^^^^^177^207^computeMayUse ( n.getFirstChild (  ) , cfgNode, output, conditional ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[buglab_swap_variables]^computeMayUse ( n.getFirstChild (  ) , output, cfgNode, conditional ) ;^192^^^^^177^207^computeMayUse ( n.getFirstChild (  ) , cfgNode, output, conditional ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[buglab_swap_variables]^computeMayUse ( n.getFirstChild (  ) , cfgNode,  conditional ) ;^192^^^^^177^207^computeMayUse ( n.getFirstChild (  ) , cfgNode, output, conditional ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[buglab_swap_variables]^computeMayUse ( n.getFirstChild (  ) , cfgNode, output ) ;^192^^^^^177^207^computeMayUse ( n.getFirstChild (  ) , cfgNode, output, conditional ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[buglab_swap_variables]^computeMayUse ( cfgNode.getLastChild (  ) , n, output, true ) ;^196^^^^^181^211^computeMayUse ( n.getLastChild (  ) , cfgNode, output, true ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[buglab_swap_variables]^computeMayUse ( n.getLastChild (  ) , output, cfgNode, true ) ;^196^^^^^181^211^computeMayUse ( n.getLastChild (  ) , cfgNode, output, true ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[buglab_swap_variables]^computeMayUse ( n.getLastChild (  ) ,  output, true ) ;^196^^^^^181^211^computeMayUse ( n.getLastChild (  ) , cfgNode, output, true ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[buglab_swap_variables]^computeMayUse ( n.getLastChild (  ) , cfgNode,  true ) ;^196^^^^^181^211^computeMayUse ( n.getLastChild (  ) , cfgNode, output, true ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[buglab_swap_variables]^computeMayUse ( cfgNode.getFirstChild (  ) .getNext (  ) , n, output, true ) ;^197^^^^^182^212^computeMayUse ( n.getFirstChild (  ) .getNext (  ) , cfgNode, output, true ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[buglab_swap_variables]^computeMayUse ( n.getFirstChild (  ) .getNext (  ) , output, cfgNode, true ) ;^197^^^^^182^212^computeMayUse ( n.getFirstChild (  ) .getNext (  ) , cfgNode, output, true ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[buglab_swap_variables]^computeMayUse ( n.getFirstChild (  ) .getNext (  ) ,  output, true ) ;^197^^^^^182^212^computeMayUse ( n.getFirstChild (  ) .getNext (  ) , cfgNode, output, true ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[buglab_swap_variables]^computeMayUse ( output.getFirstChild (  ) .getNext (  ) , cfgNode, n, true ) ;^197^^^^^182^212^computeMayUse ( n.getFirstChild (  ) .getNext (  ) , cfgNode, output, true ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[buglab_swap_variables]^computeMayUse ( n.getFirstChild (  ) .getNext (  ) , cfgNode,  true ) ;^197^^^^^182^212^computeMayUse ( n.getFirstChild (  ) .getNext (  ) , cfgNode, output, true ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[buglab_swap_variables]^computeMayUse ( output.getFirstChild (  ) , cfgNode, n, conditional ) ;^198^^^^^183^213^computeMayUse ( n.getFirstChild (  ) , cfgNode, output, conditional ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[buglab_swap_variables]^computeMayUse ( n.getFirstChild (  ) , conditional, output, cfgNode ) ;^198^^^^^183^213^computeMayUse ( n.getFirstChild (  ) , cfgNode, output, conditional ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[buglab_swap_variables]^computeMayUse ( n.getFirstChild (  ) ,  output, conditional ) ;^198^^^^^183^213^computeMayUse ( n.getFirstChild (  ) , cfgNode, output, conditional ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[buglab_swap_variables]^computeMayUse ( n.getFirstChild (  ) , cfgNode, conditional, output ) ;^198^^^^^183^213^computeMayUse ( n.getFirstChild (  ) , cfgNode, output, conditional ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[buglab_swap_variables]^computeMayUse ( n.getFirstChild (  ) , cfgNode,  conditional ) ;^198^^^^^183^213^computeMayUse ( n.getFirstChild (  ) , cfgNode, output, conditional ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[buglab_swap_variables]^computeMayUse ( n.getFirstChild (  ) , cfgNode, output ) ;^198^^^^^183^213^computeMayUse ( n.getFirstChild (  ) , cfgNode, output, conditional ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[buglab_swap_variables]^computeMayUse ( conditional.getFirstChild (  ) , cfgNode, output, varName ) ;^206^^^^^191^221^computeMayUse ( varName.getFirstChild (  ) , cfgNode, output, conditional ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[buglab_swap_variables]^computeMayUse ( varName.getFirstChild (  ) , conditional, output, cfgNode ) ;^206^^^^^191^221^computeMayUse ( varName.getFirstChild (  ) , cfgNode, output, conditional ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[buglab_swap_variables]^computeMayUse ( varName.getFirstChild (  ) , output, cfgNode, conditional ) ;^206^^^^^191^221^computeMayUse ( varName.getFirstChild (  ) , cfgNode, output, conditional ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[buglab_swap_variables]^computeMayUse ( output.getNext (  ) , cfgNode, name, conditional ) ;^225^^^^^210^240^computeMayUse ( name.getNext (  ) , cfgNode, output, conditional ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[buglab_swap_variables]^computeMayUse ( conditional, cfgNode, output, c ) ;^233^^^^^218^248^computeMayUse ( c, cfgNode, output, conditional ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[buglab_swap_variables]^computeMayUse ( c, cfgNode, conditional, output ) ;^233^^^^^218^248^computeMayUse ( c, cfgNode, output, conditional ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[buglab_swap_variables]^Var var = name.getVar ( jsScope ) ;^245^^^^^244^252^Var var = jsScope.getVar ( name ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] addToUseIfLocal [RETURN_TYPE] void   String name Node node ReachingUses use [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  Scope  jsScope  ReachingUses  use  Var  var  Node  node  String  name  
[buglab_swap_variables]^use.mayUseMap.put ( node, var ) ;^250^^^^^244^252^use.mayUseMap.put ( var, node ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] addToUseIfLocal [RETURN_TYPE] void   String name Node node ReachingUses use [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  Scope  jsScope  ReachingUses  use  Var  var  Node  node  String  name  
[buglab_swap_variables]^use.mayUseMap.put (  node ) ;^250^^^^^244^252^use.mayUseMap.put ( var, node ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] addToUseIfLocal [RETURN_TYPE] void   String name Node node ReachingUses use [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  Scope  jsScope  ReachingUses  use  Var  var  Node  node  String  name  
[buglab_swap_variables]^use.mayUseMap.put ( var ) ;^250^^^^^244^252^use.mayUseMap.put ( var, node ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] addToUseIfLocal [RETURN_TYPE] void   String name Node node ReachingUses use [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  Scope  jsScope  ReachingUses  use  Var  var  Node  node  String  name  
[buglab_swap_variables]^Var var = name.getVar ( jsScope ) ;^260^^^^^259^267^Var var = jsScope.getVar ( name ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] removeFromUseIfLocal [RETURN_TYPE] void   String name ReachingUses use [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  Scope  jsScope  ReachingUses  use  Var  var  String  name  
[buglab_swap_variables]^return state.getOut (  ) .mayUseMap.get ( name.getVar ( jsScope )  ) ;^283^^^^^279^284^return state.getOut (  ) .mayUseMap.get ( jsScope.getVar ( name )  ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] getUses [RETURN_TYPE] Collection   String name Node defNode [VARIABLES] Multimap  mayUseMap  FlowState  state  Set  escaped  boolean  Scope  jsScope  Node  defNode  GraphNode  n  String  name  
[buglab_swap_variables]^mayUseMap = HashMultimap.create ( other.mayUseMap.mayUseMap ) ;^97^^^^^96^98^mayUseMap = HashMultimap.create ( other.mayUseMap ) ;^[CLASS] ReachingUses  [METHOD] <init> [RETURN_TYPE] MaybeReachingVariableUse$ReachingUses)   ReachingUses other [VARIABLES] Multimap  mayUseMap  ReachingUses  other  boolean  
[buglab_swap_variables]^mayUseMap = HashMultimap.create ( other ) ;^97^^^^^96^98^mayUseMap = HashMultimap.create ( other.mayUseMap ) ;^[CLASS] ReachingUses  [METHOD] <init> [RETURN_TYPE] MaybeReachingVariableUse$ReachingUses)   ReachingUses other [VARIABLES] Multimap  mayUseMap  ReachingUses  other  boolean  
