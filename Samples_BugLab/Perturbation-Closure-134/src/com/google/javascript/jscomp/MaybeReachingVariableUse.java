[BugLab_Argument_Swapping]^computeEscaped ( compiler, escaped, jsScope ) ;^58^^^^^50^59^computeEscaped ( jsScope, escaped, compiler ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] <init> [RETURN_TYPE] AbstractCompiler)   Node> cfg Scope jsScope AbstractCompiler compiler [VARIABLES] Multimap  mayUseMap  AbstractCompiler  compiler  Set  escaped  boolean  Scope  jsScope  ControlFlowGraph  cfg  
[BugLab_Argument_Swapping]^computeEscaped ( jsScope, compiler, escaped ) ;^58^^^^^50^59^computeEscaped ( jsScope, escaped, compiler ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] <init> [RETURN_TYPE] AbstractCompiler)   Node> cfg Scope jsScope AbstractCompiler compiler [VARIABLES] Multimap  mayUseMap  AbstractCompiler  compiler  Set  escaped  boolean  Scope  jsScope  ControlFlowGraph  cfg  
[BugLab_Argument_Swapping]^mayUseMap = HashMultimap.create ( other.mayUseMap.mayUseMap ) ;^97^^^^^96^98^mayUseMap = HashMultimap.create ( other.mayUseMap ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] <init> [RETURN_TYPE] MaybeReachingVariableUse$ReachingUses)   ReachingUses other [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  Scope  jsScope  ReachingUses  other  
[BugLab_Argument_Swapping]^mayUseMap = HashMultimap.create ( other ) ;^97^^^^^96^98^mayUseMap = HashMultimap.create ( other.mayUseMap ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] <init> [RETURN_TYPE] MaybeReachingVariableUse$ReachingUses)   ReachingUses other [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  Scope  jsScope  ReachingUses  other  
[BugLab_Wrong_Operator]^return  ( other instanceof ReachingUses )  || (  ( ReachingUses )  other ) .mayUseMap.equals ( this.mayUseMap ) ;^102^103^^^^101^104^return  ( other instanceof ReachingUses )  && (  ( ReachingUses )  other ) .mayUseMap.equals ( this.mayUseMap ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] equals [RETURN_TYPE] boolean   Object other [VARIABLES] Multimap  mayUseMap  Object  other  Set  escaped  boolean  Scope  jsScope  
[BugLab_Wrong_Operator]^return  ( other  >>  ReachingUses )  && (  ( ReachingUses )  other ) .mayUseMap.equals ( this.mayUseMap ) ;^102^103^^^^101^104^return  ( other instanceof ReachingUses )  && (  ( ReachingUses )  other ) .mayUseMap.equals ( this.mayUseMap ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] equals [RETURN_TYPE] boolean   Object other [VARIABLES] Multimap  mayUseMap  Object  other  Set  escaped  boolean  Scope  jsScope  
[BugLab_Variable_Misuse]^result.mayUseMap.putAll ( this ) ;^124^^^^^121^127^result.mayUseMap.putAll ( uses.mayUseMap ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] apply [RETURN_TYPE] MaybeReachingVariableUse$ReachingUses   ReachingUses> from [VARIABLES] Multimap  mayUseMap  List  from  Set  escaped  boolean  Scope  jsScope  ReachingUses  result  uses  
[BugLab_Variable_Misuse]^return uses;^126^^^^^121^127^return result;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] apply [RETURN_TYPE] MaybeReachingVariableUse$ReachingUses   ReachingUses> from [VARIABLES] Multimap  mayUseMap  List  from  Set  escaped  boolean  Scope  jsScope  ReachingUses  result  uses  
[BugLab_Wrong_Literal]^return true;^132^^^^^131^133^return false;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] isForward [RETURN_TYPE] boolean   [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  Scope  jsScope  
[BugLab_Variable_Misuse]^ReachingUses output = new ReachingUses ( output ) ;^147^^^^^146^150^ReachingUses output = new ReachingUses ( input ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] flowThrough [RETURN_TYPE] MaybeReachingVariableUse$ReachingUses   Node n ReachingUses input [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  Scope  jsScope  ReachingUses  input  output  Node  n  
[BugLab_Variable_Misuse]^computeMayUse ( n, n, input, false ) ;^148^^^^^146^150^computeMayUse ( n, n, output, false ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] flowThrough [RETURN_TYPE] MaybeReachingVariableUse$ReachingUses   Node n ReachingUses input [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  Scope  jsScope  ReachingUses  input  output  Node  n  
[BugLab_Argument_Swapping]^computeMayUse ( output, n, n, false ) ;^148^^^^^146^150^computeMayUse ( n, n, output, false ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] flowThrough [RETURN_TYPE] MaybeReachingVariableUse$ReachingUses   Node n ReachingUses input [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  Scope  jsScope  ReachingUses  input  output  Node  n  
[BugLab_Wrong_Literal]^computeMayUse ( n, n, output, true ) ;^148^^^^^146^150^computeMayUse ( n, n, output, false ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] flowThrough [RETURN_TYPE] MaybeReachingVariableUse$ReachingUses   Node n ReachingUses input [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  Scope  jsScope  ReachingUses  input  output  Node  n  
[BugLab_Variable_Misuse]^return input;^149^^^^^146^150^return output;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] flowThrough [RETURN_TYPE] MaybeReachingVariableUse$ReachingUses   Node n ReachingUses input [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  Scope  jsScope  ReachingUses  input  output  Node  n  
[BugLab_Variable_Misuse]^if  ( !NodeUtil.isForIn ( rhs )  )  {^172^^^^^157^187^if  ( !NodeUtil.isForIn ( n )  )  {^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[BugLab_Variable_Misuse]^if  ( NodeUtil.isVar ( rhs )  )  {^179^^^^^172^186^if  ( NodeUtil.isVar ( lhs )  )  {^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[BugLab_Variable_Misuse]^lhs = varName.getLastChild (  ) ;^180^^^^^172^186^lhs = lhs.getLastChild (  ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[BugLab_Variable_Misuse]^lhs = name.getLastChild (  ) ;^180^^^^^172^186^lhs = lhs.getLastChild (  ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[BugLab_Variable_Misuse]^if  ( NodeUtil.isName ( varName )  && !conditional )  {^182^^^^^172^186^if  ( NodeUtil.isName ( lhs )  && !conditional )  {^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[BugLab_Wrong_Operator]^if  ( NodeUtil.isName ( lhs )  || !conditional )  {^182^^^^^172^186^if  ( NodeUtil.isName ( lhs )  && !conditional )  {^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[BugLab_Variable_Misuse]^removeFromUseIfLocal ( varName.getString (  ) , output ) ;^183^^^^^172^186^removeFromUseIfLocal ( lhs.getString (  ) , output ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[BugLab_Argument_Swapping]^removeFromUseIfLocal ( output.getString (  ) , lhs ) ;^183^^^^^172^186^removeFromUseIfLocal ( lhs.getString (  ) , output ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[BugLab_Variable_Misuse]^removeFromUseIfLocal ( name.getString (  ) , output ) ;^183^^^^^172^186^removeFromUseIfLocal ( lhs.getString (  ) , output ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[BugLab_Variable_Misuse]^Node lhs = varName.getFirstChild (  ) ;^177^^^^^172^186^Node lhs = n.getFirstChild (  ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[BugLab_Variable_Misuse]^Node rhs = varName.getNext (  ) ;^178^^^^^172^186^Node rhs = lhs.getNext (  ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[BugLab_Variable_Misuse]^Node lhs = name.getFirstChild (  ) ;^177^^^^^172^186^Node lhs = n.getFirstChild (  ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[BugLab_Variable_Misuse]^if  ( NodeUtil.isVar ( name )  )  {^179^^^^^172^186^if  ( NodeUtil.isVar ( lhs )  )  {^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[BugLab_Variable_Misuse]^if  ( NodeUtil.isName ( rhs )  && !conditional )  {^182^^^^^172^186^if  ( NodeUtil.isName ( lhs )  && !conditional )  {^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[BugLab_Variable_Misuse]^removeFromUseIfLocal ( rhs.getString (  ) , output ) ;^183^^^^^172^186^removeFromUseIfLocal ( lhs.getString (  ) , output ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[BugLab_Variable_Misuse]^computeMayUse ( varName, cfgNode, output, conditional ) ;^185^^^^^172^186^computeMayUse ( rhs, cfgNode, output, conditional ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[BugLab_Argument_Swapping]^computeMayUse ( conditional, cfgNode, output, rhs ) ;^185^^^^^172^186^computeMayUse ( rhs, cfgNode, output, conditional ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[BugLab_Argument_Swapping]^computeMayUse ( cfgNode, rhs, output, conditional ) ;^185^^^^^172^186^computeMayUse ( rhs, cfgNode, output, conditional ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[BugLab_Argument_Swapping]^computeMayUse ( output, cfgNode, rhs, conditional ) ;^185^^^^^172^186^computeMayUse ( rhs, cfgNode, output, conditional ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[BugLab_Argument_Swapping]^computeMayUse ( rhs, cfgNode, conditional, output ) ;^185^^^^^172^186^computeMayUse ( rhs, cfgNode, output, conditional ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[BugLab_Variable_Misuse]^computeMayUse ( NodeUtil.getConditionExpression ( rhs ) , cfgNode, output, conditional ) ;^173^174^^^^158^188^computeMayUse ( NodeUtil.getConditionExpression ( n ) , cfgNode, output, conditional ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[BugLab_Variable_Misuse]^computeMayUse ( NodeUtil.getConditionExpression ( n ) , varName, output, conditional ) ;^173^174^^^^158^188^computeMayUse ( NodeUtil.getConditionExpression ( n ) , cfgNode, output, conditional ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[BugLab_Argument_Swapping]^computeMayUse ( NodeUtil.getConditionExpression ( cfgNode ) , n, output, conditional ) ;^173^174^^^^158^188^computeMayUse ( NodeUtil.getConditionExpression ( n ) , cfgNode, output, conditional ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[BugLab_Argument_Swapping]^computeMayUse ( NodeUtil.getConditionExpression ( output ) , cfgNode, n, conditional ) ;^173^174^^^^158^188^computeMayUse ( NodeUtil.getConditionExpression ( n ) , cfgNode, output, conditional ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[BugLab_Argument_Swapping]^computeMayUse ( NodeUtil.getConditionExpression ( n ) , conditional, output, cfgNode ) ;^173^174^^^^158^188^computeMayUse ( NodeUtil.getConditionExpression ( n ) , cfgNode, output, conditional ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[BugLab_Variable_Misuse]^NodeUtil.getConditionExpression ( name ) , cfgNode, output, conditional ) ;^174^^^^^159^189^NodeUtil.getConditionExpression ( n ) , cfgNode, output, conditional ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[BugLab_Variable_Misuse]^if  ( NodeUtil.isVar ( name )  )  {^179^^^^^164^194^if  ( NodeUtil.isVar ( lhs )  )  {^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[BugLab_Variable_Misuse]^lhs = name.getLastChild (  ) ;^180^^^^^165^195^lhs = lhs.getLastChild (  ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[BugLab_Wrong_Operator]^if  ( NodeUtil.isName ( lhs )  || !conditional )  {^182^^^^^167^197^if  ( NodeUtil.isName ( lhs )  && !conditional )  {^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[BugLab_Variable_Misuse]^removeFromUseIfLocal ( name.getString (  ) , output ) ;^183^^^^^168^198^removeFromUseIfLocal ( lhs.getString (  ) , output ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[BugLab_Argument_Swapping]^removeFromUseIfLocal ( output.getString (  ) , lhs ) ;^183^^^^^168^198^removeFromUseIfLocal ( lhs.getString (  ) , output ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[BugLab_Variable_Misuse]^if  ( n.hasChildren (  )  )  {^205^^^^^190^220^if  ( varName.hasChildren (  )  )  {^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[BugLab_Variable_Misuse]^removeFromUseIfLocal ( rhs.getString (  ) , output ) ;^208^^^^^193^223^removeFromUseIfLocal ( varName.getString (  ) , output ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[BugLab_Argument_Swapping]^removeFromUseIfLocal ( output.getString (  ) , varName ) ;^208^^^^^193^223^removeFromUseIfLocal ( varName.getString (  ) , output ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[BugLab_Variable_Misuse]^removeFromUseIfLocal ( name.getString (  ) , output ) ;^208^^^^^193^223^removeFromUseIfLocal ( varName.getString (  ) , output ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[BugLab_Variable_Misuse]^computeMayUse ( name.getFirstChild (  ) , cfgNode, output, conditional ) ;^206^^^^^191^221^computeMayUse ( varName.getFirstChild (  ) , cfgNode, output, conditional ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[BugLab_Variable_Misuse]^computeMayUse ( varName.getFirstChild (  ) , varName, output, conditional ) ;^206^^^^^191^221^computeMayUse ( varName.getFirstChild (  ) , cfgNode, output, conditional ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[BugLab_Argument_Swapping]^computeMayUse ( conditional.getFirstChild (  ) , cfgNode, output, varName ) ;^206^^^^^191^221^computeMayUse ( varName.getFirstChild (  ) , cfgNode, output, conditional ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[BugLab_Argument_Swapping]^computeMayUse ( cfgNode.getFirstChild (  ) , varName, output, conditional ) ;^206^^^^^191^221^computeMayUse ( varName.getFirstChild (  ) , cfgNode, output, conditional ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[BugLab_Argument_Swapping]^computeMayUse ( output.getFirstChild (  ) , cfgNode, varName, conditional ) ;^206^^^^^191^221^computeMayUse ( varName.getFirstChild (  ) , cfgNode, output, conditional ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[BugLab_Variable_Misuse]^computeMayUse ( n.getFirstChild (  ) , cfgNode, output, conditional ) ;^206^^^^^191^221^computeMayUse ( varName.getFirstChild (  ) , cfgNode, output, conditional ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[BugLab_Variable_Misuse]^if  ( NodeUtil.isAssignmentOp ( varName )  && NodeUtil.isName ( n.getFirstChild (  )  )  )  {^214^^^^^199^229^if  ( NodeUtil.isAssignmentOp ( n )  && NodeUtil.isName ( n.getFirstChild (  )  )  )  {^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[BugLab_Wrong_Operator]^if  ( NodeUtil.isAssignmentOp ( n )  || NodeUtil.isName ( n.getFirstChild (  )  )  )  {^214^^^^^199^229^if  ( NodeUtil.isAssignmentOp ( n )  && NodeUtil.isName ( n.getFirstChild (  )  )  )  {^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[BugLab_Variable_Misuse]^for  ( Node c = rhs.getLastChild (  ) ; c != null; c = n.getChildBefore ( c )  )  {^232^^^^^214^235^for  ( Node c = n.getLastChild (  ) ; c != null; c = n.getChildBefore ( c )  )  {^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[BugLab_Variable_Misuse]^for  ( Node varName = n.getLastChild (  ) ; c != null; c = n.getChildBefore ( c )  )  {^232^^^^^214^235^for  ( Node c = n.getLastChild (  ) ; c != null; c = n.getChildBefore ( c )  )  {^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[BugLab_Argument_Swapping]^for  ( Node n = c.getLastChild (  ) ; c != null; c = n.getChildBefore ( c )  )  {^232^^^^^214^235^for  ( Node c = n.getLastChild (  ) ; c != null; c = n.getChildBefore ( c )  )  {^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[BugLab_Wrong_Operator]^for  ( Node c = n.getLastChild (  ) ; c == null; c = n.getChildBefore ( c )  )  {^232^^^^^214^235^for  ( Node c = n.getLastChild (  ) ; c != null; c = n.getChildBefore ( c )  )  {^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[BugLab_Variable_Misuse]^computeMayUse ( varName, cfgNode, output, conditional ) ;^233^^^^^214^235^computeMayUse ( c, cfgNode, output, conditional ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[BugLab_Variable_Misuse]^computeMayUse ( c, rhs, output, conditional ) ;^233^^^^^214^235^computeMayUse ( c, cfgNode, output, conditional ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[BugLab_Argument_Swapping]^computeMayUse ( output, cfgNode, c, conditional ) ;^233^^^^^214^235^computeMayUse ( c, cfgNode, output, conditional ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[BugLab_Argument_Swapping]^computeMayUse ( cfgNode, c, output, conditional ) ;^233^^^^^214^235^computeMayUse ( c, cfgNode, output, conditional ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[BugLab_Argument_Swapping]^computeMayUse ( c, conditional, output, cfgNode ) ;^233^^^^^214^235^computeMayUse ( c, cfgNode, output, conditional ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[BugLab_Variable_Misuse]^for  ( Node c = varName.getLastChild (  ) ; c != null; c = n.getChildBefore ( c )  )  {^232^^^^^214^235^for  ( Node c = n.getLastChild (  ) ; c != null; c = n.getChildBefore ( c )  )  {^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[BugLab_Variable_Misuse]^for  ( Node c = name.getLastChild (  ) ; c != null; c = n.getChildBefore ( c )  )  {^232^^^^^214^235^for  ( Node c = n.getLastChild (  ) ; c != null; c = n.getChildBefore ( c )  )  {^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[BugLab_Variable_Misuse]^computeMayUse ( name, cfgNode, output, conditional ) ;^233^^^^^214^235^computeMayUse ( c, cfgNode, output, conditional ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[BugLab_Variable_Misuse]^computeMayUse ( c, varName, output, conditional ) ;^233^^^^^214^235^computeMayUse ( c, cfgNode, output, conditional ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[BugLab_Argument_Swapping]^computeMayUse ( c, cfgNode, conditional, output ) ;^233^^^^^214^235^computeMayUse ( c, cfgNode, output, conditional ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[BugLab_Variable_Misuse]^removeFromUseIfLocal ( varName.getString (  ) , output ) ;^217^^^^^202^232^removeFromUseIfLocal ( name.getString (  ) , output ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[BugLab_Argument_Swapping]^removeFromUseIfLocal ( output.getString (  ) , name ) ;^217^^^^^202^232^removeFromUseIfLocal ( name.getString (  ) , output ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[BugLab_Variable_Misuse]^removeFromUseIfLocal ( rhs.getString (  ) , output ) ;^217^^^^^202^232^removeFromUseIfLocal ( name.getString (  ) , output ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[BugLab_Variable_Misuse]^if  ( !NodeUtil.isAssign ( rhs )  )  {^221^^^^^206^236^if  ( !NodeUtil.isAssign ( n )  )  {^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[BugLab_Variable_Misuse]^addToUseIfLocal ( varName.getString (  ) , cfgNode, output ) ;^222^^^^^207^237^addToUseIfLocal ( name.getString (  ) , cfgNode, output ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[BugLab_Variable_Misuse]^addToUseIfLocal ( name.getString (  ) , varName, output ) ;^222^^^^^207^237^addToUseIfLocal ( name.getString (  ) , cfgNode, output ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[BugLab_Argument_Swapping]^addToUseIfLocal ( cfgNode.getString (  ) , name, output ) ;^222^^^^^207^237^addToUseIfLocal ( name.getString (  ) , cfgNode, output ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[BugLab_Argument_Swapping]^addToUseIfLocal ( name.getString (  ) , output, cfgNode ) ;^222^^^^^207^237^addToUseIfLocal ( name.getString (  ) , cfgNode, output ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[BugLab_Argument_Swapping]^addToUseIfLocal ( output.getString (  ) , cfgNode, name ) ;^222^^^^^207^237^addToUseIfLocal ( name.getString (  ) , cfgNode, output ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[BugLab_Variable_Misuse]^Node varNameame = n.getFirstChild (  ) ;^215^^^^^200^230^Node name = n.getFirstChild (  ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[BugLab_Variable_Misuse]^Node rhsame = n.getFirstChild (  ) ;^215^^^^^200^230^Node name = n.getFirstChild (  ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[BugLab_Variable_Misuse]^if  ( !NodeUtil.isAssign ( varName )  )  {^221^^^^^206^236^if  ( !NodeUtil.isAssign ( n )  )  {^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[BugLab_Variable_Misuse]^addToUseIfLocal ( n.getString (  ) , cfgNode, output ) ;^222^^^^^207^237^addToUseIfLocal ( name.getString (  ) , cfgNode, output ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[BugLab_Variable_Misuse]^computeMayUse ( varName.getNext (  ) , cfgNode, output, conditional ) ;^225^^^^^210^240^computeMayUse ( name.getNext (  ) , cfgNode, output, conditional ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[BugLab_Variable_Misuse]^computeMayUse ( name.getNext (  ) , varName, output, conditional ) ;^225^^^^^210^240^computeMayUse ( name.getNext (  ) , cfgNode, output, conditional ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[BugLab_Argument_Swapping]^computeMayUse ( cfgNode.getNext (  ) , name, output, conditional ) ;^225^^^^^210^240^computeMayUse ( name.getNext (  ) , cfgNode, output, conditional ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[BugLab_Argument_Swapping]^computeMayUse ( name.getNext (  ) , output, cfgNode, conditional ) ;^225^^^^^210^240^computeMayUse ( name.getNext (  ) , cfgNode, output, conditional ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[BugLab_Argument_Swapping]^computeMayUse ( name.getNext (  ) , cfgNode, conditional, output ) ;^225^^^^^210^240^computeMayUse ( name.getNext (  ) , cfgNode, output, conditional ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[BugLab_Variable_Misuse]^computeMayUse ( n.getNext (  ) , cfgNode, output, conditional ) ;^225^^^^^210^240^computeMayUse ( name.getNext (  ) , cfgNode, output, conditional ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[BugLab_Variable_Misuse]^removeFromUseIfLocal ( n.getString (  ) , output ) ;^217^^^^^202^232^removeFromUseIfLocal ( name.getString (  ) , output ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[BugLab_Variable_Misuse]^addToUseIfLocal ( name.getString (  ) , rhs, output ) ;^222^^^^^207^237^addToUseIfLocal ( name.getString (  ) , cfgNode, output ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[BugLab_Variable_Misuse]^for  ( Node c = varName.getLastChild (  ) ; c != null; c = n.getChildBefore ( c )  )  {^232^^^^^217^247^for  ( Node c = n.getLastChild (  ) ; c != null; c = n.getChildBefore ( c )  )  {^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[BugLab_Variable_Misuse]^for  ( Node varName = n.getLastChild (  ) ; c != null; c = n.getChildBefore ( c )  )  {^232^^^^^217^247^for  ( Node c = n.getLastChild (  ) ; c != null; c = n.getChildBefore ( c )  )  {^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[BugLab_Argument_Swapping]^for  ( Node n = c.getLastChild (  ) ; c != null; c = n.getChildBefore ( c )  )  {^232^^^^^217^247^for  ( Node c = n.getLastChild (  ) ; c != null; c = n.getChildBefore ( c )  )  {^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[BugLab_Wrong_Operator]^for  ( Node c = n.getLastChild (  ) ; c == null; c = n.getChildBefore ( c )  )  {^232^^^^^217^247^for  ( Node c = n.getLastChild (  ) ; c != null; c = n.getChildBefore ( c )  )  {^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[BugLab_Variable_Misuse]^computeMayUse ( rhs, cfgNode, output, conditional ) ;^233^^^^^218^248^computeMayUse ( c, cfgNode, output, conditional ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[BugLab_Variable_Misuse]^computeMayUse ( c, rhs, output, conditional ) ;^233^^^^^218^248^computeMayUse ( c, cfgNode, output, conditional ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[BugLab_Argument_Swapping]^computeMayUse ( cfgNode, c, output, conditional ) ;^233^^^^^218^248^computeMayUse ( c, cfgNode, output, conditional ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[BugLab_Argument_Swapping]^computeMayUse ( c, cfgNode, conditional, output ) ;^233^^^^^218^248^computeMayUse ( c, cfgNode, output, conditional ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[BugLab_Argument_Swapping]^computeMayUse ( c, conditional, output, cfgNode ) ;^233^^^^^218^248^computeMayUse ( c, cfgNode, output, conditional ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[BugLab_Variable_Misuse]^Node lhs = varName.getFirstChild (  ) ;^177^^^^^162^192^Node lhs = n.getFirstChild (  ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[BugLab_Variable_Misuse]^Node rhs = varName.getNext (  ) ;^178^^^^^163^193^Node rhs = lhs.getNext (  ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[BugLab_Variable_Misuse]^Node varName = rhs.getFirstChild (  ) ;^202^^^^^187^217^Node varName = n.getFirstChild (  ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[BugLab_Variable_Misuse]^switch  ( varName.getType (  )  )  {^154^^^^^139^169^switch  ( n.getType (  )  )  {^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[BugLab_Variable_Misuse]^addToUseIfLocal ( varName.getString (  ) , cfgNode, output ) ;^161^^^^^146^176^addToUseIfLocal ( n.getString (  ) , cfgNode, output ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[BugLab_Variable_Misuse]^addToUseIfLocal ( n.getString (  ) , name, output ) ;^161^^^^^146^176^addToUseIfLocal ( n.getString (  ) , cfgNode, output ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[BugLab_Argument_Swapping]^addToUseIfLocal ( cfgNode.getString (  ) , n, output ) ;^161^^^^^146^176^addToUseIfLocal ( n.getString (  ) , cfgNode, output ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[BugLab_Argument_Swapping]^addToUseIfLocal ( n.getString (  ) , output, cfgNode ) ;^161^^^^^146^176^addToUseIfLocal ( n.getString (  ) , cfgNode, output ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[BugLab_Variable_Misuse]^computeMayUse ( NodeUtil.getConditionExpression ( varName ) , cfgNode, output, conditional ) ;^167^168^^^^152^182^computeMayUse ( NodeUtil.getConditionExpression ( n ) , cfgNode, output, conditional ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[BugLab_Variable_Misuse]^computeMayUse ( NodeUtil.getConditionExpression ( n ) , name, output, conditional ) ;^167^168^^^^152^182^computeMayUse ( NodeUtil.getConditionExpression ( n ) , cfgNode, output, conditional ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[BugLab_Argument_Swapping]^computeMayUse ( NodeUtil.getConditionExpression ( conditional ) , cfgNode, output, n ) ;^167^168^^^^152^182^computeMayUse ( NodeUtil.getConditionExpression ( n ) , cfgNode, output, conditional ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[BugLab_Argument_Swapping]^computeMayUse ( NodeUtil.getConditionExpression ( n ) , conditional, output, cfgNode ) ;^167^168^^^^152^182^computeMayUse ( NodeUtil.getConditionExpression ( n ) , cfgNode, output, conditional ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[BugLab_Argument_Swapping]^computeMayUse ( NodeUtil.getConditionExpression ( n ) , cfgNode, conditional, output ) ;^167^168^^^^152^182^computeMayUse ( NodeUtil.getConditionExpression ( n ) , cfgNode, output, conditional ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[BugLab_Variable_Misuse]^NodeUtil.getConditionExpression ( rhs ) , cfgNode, output, conditional ) ;^168^^^^^153^183^NodeUtil.getConditionExpression ( n ) , cfgNode, output, conditional ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[BugLab_Variable_Misuse]^if  ( !NodeUtil.isForIn ( varName )  )  {^172^^^^^157^187^if  ( !NodeUtil.isForIn ( n )  )  {^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[BugLab_Variable_Misuse]^computeMayUse ( NodeUtil.getConditionExpression ( n ) , rhs, output, conditional ) ;^173^174^^^^158^188^computeMayUse ( NodeUtil.getConditionExpression ( n ) , cfgNode, output, conditional ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[BugLab_Argument_Swapping]^computeMayUse ( NodeUtil.getConditionExpression ( n ) , output, cfgNode, conditional ) ;^173^174^^^^158^188^computeMayUse ( NodeUtil.getConditionExpression ( n ) , cfgNode, output, conditional ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[BugLab_Argument_Swapping]^computeMayUse ( NodeUtil.getConditionExpression ( conditional ) , cfgNode, output, n ) ;^173^174^^^^158^188^computeMayUse ( NodeUtil.getConditionExpression ( n ) , cfgNode, output, conditional ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[BugLab_Variable_Misuse]^lhs = varName.getLastChild (  ) ;^180^^^^^165^195^lhs = lhs.getLastChild (  ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[BugLab_Variable_Misuse]^if  ( NodeUtil.isName ( varName )  && !conditional )  {^182^^^^^167^197^if  ( NodeUtil.isName ( lhs )  && !conditional )  {^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[BugLab_Variable_Misuse]^removeFromUseIfLocal ( varName.getString (  ) , output ) ;^183^^^^^168^198^removeFromUseIfLocal ( lhs.getString (  ) , output ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[BugLab_Variable_Misuse]^computeMayUse ( name, cfgNode, output, conditional ) ;^185^^^^^170^200^computeMayUse ( rhs, cfgNode, output, conditional ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[BugLab_Variable_Misuse]^computeMayUse ( rhs, varName, output, conditional ) ;^185^^^^^170^200^computeMayUse ( rhs, cfgNode, output, conditional ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[BugLab_Argument_Swapping]^computeMayUse ( cfgNode, rhs, output, conditional ) ;^185^^^^^170^200^computeMayUse ( rhs, cfgNode, output, conditional ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[BugLab_Argument_Swapping]^computeMayUse ( rhs, conditional, output, cfgNode ) ;^185^^^^^170^200^computeMayUse ( rhs, cfgNode, output, conditional ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[BugLab_Argument_Swapping]^computeMayUse ( output, cfgNode, rhs, conditional ) ;^185^^^^^170^200^computeMayUse ( rhs, cfgNode, output, conditional ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[BugLab_Argument_Swapping]^computeMayUse ( rhs, cfgNode, conditional, output ) ;^185^^^^^170^200^computeMayUse ( rhs, cfgNode, output, conditional ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[BugLab_Variable_Misuse]^computeMayUse ( rhs.getLastChild (  ) , cfgNode, output, true ) ;^191^^^^^176^206^computeMayUse ( n.getLastChild (  ) , cfgNode, output, true ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[BugLab_Variable_Misuse]^computeMayUse ( n.getLastChild (  ) , varName, output, true ) ;^191^^^^^176^206^computeMayUse ( n.getLastChild (  ) , cfgNode, output, true ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[BugLab_Argument_Swapping]^computeMayUse ( cfgNode.getLastChild (  ) , n, output, true ) ;^191^^^^^176^206^computeMayUse ( n.getLastChild (  ) , cfgNode, output, true ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[BugLab_Argument_Swapping]^computeMayUse ( n.getLastChild (  ) , output, cfgNode, true ) ;^191^^^^^176^206^computeMayUse ( n.getLastChild (  ) , cfgNode, output, true ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[BugLab_Argument_Swapping]^computeMayUse ( output.getLastChild (  ) , cfgNode, n, true ) ;^191^^^^^176^206^computeMayUse ( n.getLastChild (  ) , cfgNode, output, true ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[BugLab_Wrong_Literal]^computeMayUse ( n.getLastChild (  ) , cfgNode, output, false ) ;^191^^^^^176^206^computeMayUse ( n.getLastChild (  ) , cfgNode, output, true ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[BugLab_Variable_Misuse]^computeMayUse ( varName.getLastChild (  ) , cfgNode, output, true ) ;^191^^^^^176^206^computeMayUse ( n.getLastChild (  ) , cfgNode, output, true ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[BugLab_Variable_Misuse]^computeMayUse ( rhs.getFirstChild (  ) , cfgNode, output, conditional ) ;^192^^^^^177^207^computeMayUse ( n.getFirstChild (  ) , cfgNode, output, conditional ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[BugLab_Variable_Misuse]^computeMayUse ( n.getFirstChild (  ) , varName, output, conditional ) ;^192^^^^^177^207^computeMayUse ( n.getFirstChild (  ) , cfgNode, output, conditional ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[BugLab_Argument_Swapping]^computeMayUse ( cfgNode.getFirstChild (  ) , n, output, conditional ) ;^192^^^^^177^207^computeMayUse ( n.getFirstChild (  ) , cfgNode, output, conditional ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[BugLab_Argument_Swapping]^computeMayUse ( n.getFirstChild (  ) , output, cfgNode, conditional ) ;^192^^^^^177^207^computeMayUse ( n.getFirstChild (  ) , cfgNode, output, conditional ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[BugLab_Argument_Swapping]^computeMayUse ( conditional.getFirstChild (  ) , cfgNode, output, n ) ;^192^^^^^177^207^computeMayUse ( n.getFirstChild (  ) , cfgNode, output, conditional ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[BugLab_Variable_Misuse]^computeMayUse ( n.getLastChild (  ) , name, output, true ) ;^196^^^^^181^211^computeMayUse ( n.getLastChild (  ) , cfgNode, output, true ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[BugLab_Argument_Swapping]^computeMayUse ( cfgNode.getLastChild (  ) , n, output, true ) ;^196^^^^^181^211^computeMayUse ( n.getLastChild (  ) , cfgNode, output, true ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[BugLab_Argument_Swapping]^computeMayUse ( output.getLastChild (  ) , cfgNode, n, true ) ;^196^^^^^181^211^computeMayUse ( n.getLastChild (  ) , cfgNode, output, true ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[BugLab_Wrong_Literal]^computeMayUse ( n.getLastChild (  ) , cfgNode, output, false ) ;^196^^^^^181^211^computeMayUse ( n.getLastChild (  ) , cfgNode, output, true ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[BugLab_Variable_Misuse]^computeMayUse ( varName.getLastChild (  ) , cfgNode, output, true ) ;^196^^^^^181^211^computeMayUse ( n.getLastChild (  ) , cfgNode, output, true ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[BugLab_Variable_Misuse]^computeMayUse ( varName.getFirstChild (  ) .getNext (  ) , cfgNode, output, true ) ;^197^^^^^182^212^computeMayUse ( n.getFirstChild (  ) .getNext (  ) , cfgNode, output, true ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[BugLab_Variable_Misuse]^computeMayUse ( n.getFirstChild (  ) .getNext (  ) , varName, output, true ) ;^197^^^^^182^212^computeMayUse ( n.getFirstChild (  ) .getNext (  ) , cfgNode, output, true ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[BugLab_Argument_Swapping]^computeMayUse ( cfgNode.getFirstChild (  ) .getNext (  ) , n, output, true ) ;^197^^^^^182^212^computeMayUse ( n.getFirstChild (  ) .getNext (  ) , cfgNode, output, true ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[BugLab_Argument_Swapping]^computeMayUse ( n.getFirstChild (  ) .getNext (  ) , output, cfgNode, true ) ;^197^^^^^182^212^computeMayUse ( n.getFirstChild (  ) .getNext (  ) , cfgNode, output, true ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[BugLab_Wrong_Literal]^computeMayUse ( n.getFirstChild (  ) .getNext (  ) , cfgNode, output, false ) ;^197^^^^^182^212^computeMayUse ( n.getFirstChild (  ) .getNext (  ) , cfgNode, output, true ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[BugLab_Variable_Misuse]^computeMayUse ( rhs.getFirstChild (  ) .getNext (  ) , cfgNode, output, true ) ;^197^^^^^182^212^computeMayUse ( n.getFirstChild (  ) .getNext (  ) , cfgNode, output, true ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[BugLab_Variable_Misuse]^computeMayUse ( varName.getFirstChild (  ) , cfgNode, output, conditional ) ;^198^^^^^183^213^computeMayUse ( n.getFirstChild (  ) , cfgNode, output, conditional ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[BugLab_Variable_Misuse]^computeMayUse ( n.getFirstChild (  ) , varName, output, conditional ) ;^198^^^^^183^213^computeMayUse ( n.getFirstChild (  ) , cfgNode, output, conditional ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[BugLab_Argument_Swapping]^computeMayUse ( cfgNode.getFirstChild (  ) , n, output, conditional ) ;^198^^^^^183^213^computeMayUse ( n.getFirstChild (  ) , cfgNode, output, conditional ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[BugLab_Argument_Swapping]^computeMayUse ( n.getFirstChild (  ) , output, cfgNode, conditional ) ;^198^^^^^183^213^computeMayUse ( n.getFirstChild (  ) , cfgNode, output, conditional ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[BugLab_Argument_Swapping]^computeMayUse ( n.getFirstChild (  ) , cfgNode, conditional, output ) ;^198^^^^^183^213^computeMayUse ( n.getFirstChild (  ) , cfgNode, output, conditional ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[BugLab_Variable_Misuse]^computeMayUse ( name.getFirstChild (  ) , cfgNode, output, conditional ) ;^198^^^^^183^213^computeMayUse ( n.getFirstChild (  ) , cfgNode, output, conditional ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[BugLab_Variable_Misuse]^Preconditions.checkState ( name.hasChildren (  ) , "AST should be normalized" ) ;^203^^^^^188^218^Preconditions.checkState ( n.hasChildren (  ) , "AST should be normalized" ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[BugLab_Variable_Misuse]^Preconditions.checkState ( varName.hasChildren (  ) , "AST should be normalized" ) ;^203^^^^^188^218^Preconditions.checkState ( n.hasChildren (  ) , "AST should be normalized" ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[BugLab_Variable_Misuse]^if  ( rhs.hasChildren (  )  )  {^205^^^^^190^220^if  ( varName.hasChildren (  )  )  {^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[BugLab_Variable_Misuse]^computeMayUse ( rhs.getFirstChild (  ) , cfgNode, output, conditional ) ;^206^^^^^191^221^computeMayUse ( varName.getFirstChild (  ) , cfgNode, output, conditional ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[BugLab_Variable_Misuse]^computeMayUse ( varName.getFirstChild (  ) , rhs, output, conditional ) ;^206^^^^^191^221^computeMayUse ( varName.getFirstChild (  ) , cfgNode, output, conditional ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[BugLab_Argument_Swapping]^computeMayUse ( varName.getFirstChild (  ) , conditional, output, cfgNode ) ;^206^^^^^191^221^computeMayUse ( varName.getFirstChild (  ) , cfgNode, output, conditional ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[BugLab_Variable_Misuse]^removeFromUseIfLocal ( n.getString (  ) , output ) ;^208^^^^^193^223^removeFromUseIfLocal ( varName.getString (  ) , output ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[BugLab_Variable_Misuse]^if  ( NodeUtil.isAssignmentOp ( name )  && NodeUtil.isName ( n.getFirstChild (  )  )  )  {^214^^^^^199^229^if  ( NodeUtil.isAssignmentOp ( n )  && NodeUtil.isName ( n.getFirstChild (  )  )  )  {^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[BugLab_Variable_Misuse]^Node nameame = n.getFirstChild (  ) ;^215^^^^^200^230^Node name = n.getFirstChild (  ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[BugLab_Variable_Misuse]^addToUseIfLocal ( rhs.getString (  ) , cfgNode, output ) ;^222^^^^^207^237^addToUseIfLocal ( name.getString (  ) , cfgNode, output ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[BugLab_Variable_Misuse]^computeMayUse ( rhs.getNext (  ) , cfgNode, output, conditional ) ;^225^^^^^210^240^computeMayUse ( name.getNext (  ) , cfgNode, output, conditional ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[BugLab_Argument_Swapping]^computeMayUse ( conditional.getNext (  ) , cfgNode, output, name ) ;^225^^^^^210^240^computeMayUse ( name.getNext (  ) , cfgNode, output, conditional ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[BugLab_Argument_Swapping]^computeMayUse ( name.getNext (  ) , conditional, output, cfgNode ) ;^225^^^^^210^240^computeMayUse ( name.getNext (  ) , cfgNode, output, conditional ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[BugLab_Argument_Swapping]^computeMayUse ( output.getNext (  ) , cfgNode, name, conditional ) ;^225^^^^^210^240^computeMayUse ( name.getNext (  ) , cfgNode, output, conditional ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[BugLab_Variable_Misuse]^for  ( Node c = rhs.getLastChild (  ) ; c != null; c = n.getChildBefore ( c )  )  {^232^^^^^217^247^for  ( Node c = n.getLastChild (  ) ; c != null; c = n.getChildBefore ( c )  )  {^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[BugLab_Argument_Swapping]^computeMayUse ( c, output, cfgNode, conditional ) ;^233^^^^^218^248^computeMayUse ( c, cfgNode, output, conditional ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[BugLab_Argument_Swapping]^Var var = name.getVar ( jsScope ) ;^245^^^^^244^252^Var var = jsScope.getVar ( name ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] addToUseIfLocal [RETURN_TYPE] void   String name Node node ReachingUses use [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  Scope  jsScope  ReachingUses  use  Var  var  Node  node  String  name  
[BugLab_Wrong_Operator]^if  ( var == null && var.scope != jsScope )  {^246^^^^^244^252^if  ( var == null || var.scope != jsScope )  {^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] addToUseIfLocal [RETURN_TYPE] void   String name Node node ReachingUses use [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  Scope  jsScope  ReachingUses  use  Var  var  Node  node  String  name  
[BugLab_Wrong_Operator]^if  ( var != null || var.scope != jsScope )  {^246^^^^^244^252^if  ( var == null || var.scope != jsScope )  {^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] addToUseIfLocal [RETURN_TYPE] void   String name Node node ReachingUses use [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  Scope  jsScope  ReachingUses  use  Var  var  Node  node  String  name  
[BugLab_Wrong_Operator]^if  ( var == null || var.scope == jsScope )  {^246^^^^^244^252^if  ( var == null || var.scope != jsScope )  {^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] addToUseIfLocal [RETURN_TYPE] void   String name Node node ReachingUses use [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  Scope  jsScope  ReachingUses  use  Var  var  Node  node  String  name  
[BugLab_Argument_Swapping]^use.mayUseMap.put ( node, var ) ;^250^^^^^244^252^use.mayUseMap.put ( var, node ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] addToUseIfLocal [RETURN_TYPE] void   String name Node node ReachingUses use [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  Scope  jsScope  ReachingUses  use  Var  var  Node  node  String  name  
[BugLab_Argument_Swapping]^Var var = name.getVar ( jsScope ) ;^260^^^^^259^267^Var var = jsScope.getVar ( name ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] removeFromUseIfLocal [RETURN_TYPE] void   String name ReachingUses use [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  Scope  jsScope  ReachingUses  use  Var  var  String  name  
[BugLab_Wrong_Operator]^if  ( var == null && var.scope != jsScope )  {^261^^^^^259^267^if  ( var == null || var.scope != jsScope )  {^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] removeFromUseIfLocal [RETURN_TYPE] void   String name ReachingUses use [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  Scope  jsScope  ReachingUses  use  Var  var  String  name  
[BugLab_Wrong_Operator]^if  ( var != null || var.scope != jsScope )  {^261^^^^^259^267^if  ( var == null || var.scope != jsScope )  {^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] removeFromUseIfLocal [RETURN_TYPE] void   String name ReachingUses use [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  Scope  jsScope  ReachingUses  use  Var  var  String  name  
[BugLab_Wrong_Operator]^if  ( var == null || var.scope == jsScope )  {^261^^^^^259^267^if  ( var == null || var.scope != jsScope )  {^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] removeFromUseIfLocal [RETURN_TYPE] void   String name ReachingUses use [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  Scope  jsScope  ReachingUses  use  Var  var  String  name  
[BugLab_Argument_Swapping]^return state.getOut (  ) .mayUseMap.get ( name.getVar ( jsScope )  ) ;^283^^^^^279^284^return state.getOut (  ) .mayUseMap.get ( jsScope.getVar ( name )  ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] getUses [RETURN_TYPE] Collection   String name Node defNode [VARIABLES] Multimap  mayUseMap  FlowState  state  Set  escaped  boolean  Scope  jsScope  Node  defNode  GraphNode  n  String  name  
[BugLab_Argument_Swapping]^mayUseMap = HashMultimap.create ( other.mayUseMap.mayUseMap ) ;^97^^^^^96^98^mayUseMap = HashMultimap.create ( other.mayUseMap ) ;^[CLASS] ReachingUses  [METHOD] <init> [RETURN_TYPE] MaybeReachingVariableUse$ReachingUses)   ReachingUses other [VARIABLES] Multimap  mayUseMap  ReachingUses  other  boolean  
[BugLab_Argument_Swapping]^mayUseMap = HashMultimap.create ( other ) ;^97^^^^^96^98^mayUseMap = HashMultimap.create ( other.mayUseMap ) ;^[CLASS] ReachingUses  [METHOD] <init> [RETURN_TYPE] MaybeReachingVariableUse$ReachingUses)   ReachingUses other [VARIABLES] Multimap  mayUseMap  ReachingUses  other  boolean  
[BugLab_Wrong_Operator]^return  ( other instanceof ReachingUses )  || (  ( ReachingUses )  other ) .mayUseMap.equals ( this.mayUseMap ) ;^102^103^^^^101^104^return  ( other instanceof ReachingUses )  && (  ( ReachingUses )  other ) .mayUseMap.equals ( this.mayUseMap ) ;^[CLASS] ReachingUses  [METHOD] equals [RETURN_TYPE] boolean   Object other [VARIABLES] Multimap  mayUseMap  Object  other  boolean  
[BugLab_Wrong_Operator]^return  ( other  ==  ReachingUses )  && (  ( ReachingUses )  other ) .mayUseMap.equals ( this.mayUseMap ) ;^102^103^^^^101^104^return  ( other instanceof ReachingUses )  && (  ( ReachingUses )  other ) .mayUseMap.equals ( this.mayUseMap ) ;^[CLASS] ReachingUses  [METHOD] equals [RETURN_TYPE] boolean   Object other [VARIABLES] Multimap  mayUseMap  Object  other  boolean  
[BugLab_Variable_Misuse]^(  ( ReachingUses )  other ) .mayUseMap.equals ( this.2 ) ;^103^^^^^101^104^(  ( ReachingUses )  other ) .mayUseMap.equals ( this.mayUseMap ) ;^[CLASS] ReachingUses  [METHOD] equals [RETURN_TYPE] boolean   Object other [VARIABLES] Multimap  mayUseMap  Object  other  boolean  
[BugLab_Variable_Misuse]^result.mayUseMap.putAll ( result.mayUseMap ) ;^124^^^^^121^127^result.mayUseMap.putAll ( uses.mayUseMap ) ;^[CLASS] ReachingUsesJoinOp  [METHOD] apply [RETURN_TYPE] MaybeReachingVariableUse$ReachingUses   ReachingUses> from [VARIABLES] boolean  ReachingUses  result  uses  List  from  
[BugLab_Argument_Swapping]^result.mayUseMap.putAll ( uses ) ;^124^^^^^121^127^result.mayUseMap.putAll ( uses.mayUseMap ) ;^[CLASS] ReachingUsesJoinOp  [METHOD] apply [RETURN_TYPE] MaybeReachingVariableUse$ReachingUses   ReachingUses> from [VARIABLES] boolean  ReachingUses  result  uses  List  from  
[BugLab_Variable_Misuse]^return uses;^126^^^^^121^127^return result;^[CLASS] ReachingUsesJoinOp  [METHOD] apply [RETURN_TYPE] MaybeReachingVariableUse$ReachingUses   ReachingUses> from [VARIABLES] boolean  ReachingUses  result  uses  List  from  
