[buglab_swap_variables]^checkState ( ! "Attempt to record skipped property: %s", name ) ;^139^^^^^138^156^checkState ( !skipRenaming, "Attempt to record skipped property: %s", name ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] addType [RETURN_TYPE] boolean   T type T top T relatedType [VARIABLES] TypeSystem  typeSystem  Set  invalidatingTypes  renameNodes  typesToSkip  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  nextUniqueId  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  showInvalidationWarnings  skipRenaming  T  relatedType  top  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[buglab_swap_variables]^checkState ( !skipRenaming, "Attempt to record skipped property: %s" ) ;^139^^^^^138^156^checkState ( !skipRenaming, "Attempt to record skipped property: %s", name ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] addType [RETURN_TYPE] boolean   T type T top T relatedType [VARIABLES] TypeSystem  typeSystem  Set  invalidatingTypes  renameNodes  typesToSkip  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  nextUniqueId  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  showInvalidationWarnings  skipRenaming  T  relatedType  top  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[buglab_swap_variables]^if  ( top.isInvalidatingType ( typeSystem )  )  {^140^^^^^138^156^if  ( typeSystem.isInvalidatingType ( top )  )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] addType [RETURN_TYPE] boolean   T type T top T relatedType [VARIABLES] TypeSystem  typeSystem  Set  invalidatingTypes  renameNodes  typesToSkip  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  nextUniqueId  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  showInvalidationWarnings  skipRenaming  T  relatedType  top  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[buglab_swap_variables]^if  ( top.isTypeToSkip ( typeSystem )  )  {^144^^^^^138^156^if  ( typeSystem.isTypeToSkip ( top )  )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] addType [RETURN_TYPE] boolean   T type T top T relatedType [VARIABLES] TypeSystem  typeSystem  Set  invalidatingTypes  renameNodes  typesToSkip  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  nextUniqueId  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  showInvalidationWarnings  skipRenaming  T  relatedType  top  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[buglab_swap_variables]^getTypes (  ) .union ( relatedType, top ) ;^151^^^^^138^156^getTypes (  ) .union ( top, relatedType ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] addType [RETURN_TYPE] boolean   T type T top T relatedType [VARIABLES] TypeSystem  typeSystem  Set  invalidatingTypes  renameNodes  typesToSkip  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  nextUniqueId  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  showInvalidationWarnings  skipRenaming  T  relatedType  top  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[buglab_swap_variables]^getTypes (  ) .union (  relatedType ) ;^151^^^^^138^156^getTypes (  ) .union ( top, relatedType ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] addType [RETURN_TYPE] boolean   T type T top T relatedType [VARIABLES] TypeSystem  typeSystem  Set  invalidatingTypes  renameNodes  typesToSkip  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  nextUniqueId  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  showInvalidationWarnings  skipRenaming  T  relatedType  top  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[buglab_swap_variables]^getTypes (  ) .union ( top ) ;^151^^^^^138^156^getTypes (  ) .union ( top, relatedType ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] addType [RETURN_TYPE] boolean   T type T top T relatedType [VARIABLES] TypeSystem  typeSystem  Set  invalidatingTypes  renameNodes  typesToSkip  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  nextUniqueId  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  showInvalidationWarnings  skipRenaming  T  relatedType  top  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[buglab_swap_variables]^typeSystem.recordInterfaces ( top, type, this ) ;^153^^^^^138^156^typeSystem.recordInterfaces ( type, top, this ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] addType [RETURN_TYPE] boolean   T type T top T relatedType [VARIABLES] TypeSystem  typeSystem  Set  invalidatingTypes  renameNodes  typesToSkip  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  nextUniqueId  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  showInvalidationWarnings  skipRenaming  T  relatedType  top  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[buglab_swap_variables]^typeSystem.recordInterfaces (  top, this ) ;^153^^^^^138^156^typeSystem.recordInterfaces ( type, top, this ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] addType [RETURN_TYPE] boolean   T type T top T relatedType [VARIABLES] TypeSystem  typeSystem  Set  invalidatingTypes  renameNodes  typesToSkip  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  nextUniqueId  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  showInvalidationWarnings  skipRenaming  T  relatedType  top  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[buglab_swap_variables]^typeSystem.recordInterfaces ( type,  this ) ;^153^^^^^138^156^typeSystem.recordInterfaces ( type, top, this ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] addType [RETURN_TYPE] boolean   T type T top T relatedType [VARIABLES] TypeSystem  typeSystem  Set  invalidatingTypes  renameNodes  typesToSkip  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  nextUniqueId  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  showInvalidationWarnings  skipRenaming  T  relatedType  top  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[buglab_swap_variables]^for  ( T skipType : typeSystemSystem.getTypesToSkipForType ( type )  )  {^160^^^^^159^164^for  ( T skipType : typeSystem.getTypesToSkipForType ( type )  )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] addTypeToSkip [RETURN_TYPE] void   T type [VARIABLES] TypeSystem  typeSystem  Set  invalidatingTypes  renameNodes  typesToSkip  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  nextUniqueId  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  showInvalidationWarnings  skipRenaming  T  skipType  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[buglab_swap_variables]^for  ( T skipType : type.getTypesToSkipForType ( typeSystem )  )  {^160^^^^^159^164^for  ( T skipType : typeSystem.getTypesToSkipForType ( type )  )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] addTypeToSkip [RETURN_TYPE] void   T type [VARIABLES] TypeSystem  typeSystem  Set  invalidatingTypes  renameNodes  typesToSkip  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  nextUniqueId  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  showInvalidationWarnings  skipRenaming  T  skipType  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[buglab_swap_variables]^getTypes (  ) .union ( type, skipType ) ;^162^^^^^159^164^getTypes (  ) .union ( skipType, type ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] addTypeToSkip [RETURN_TYPE] void   T type [VARIABLES] TypeSystem  typeSystem  Set  invalidatingTypes  renameNodes  typesToSkip  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  nextUniqueId  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  showInvalidationWarnings  skipRenaming  T  skipType  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[buglab_swap_variables]^getTypes (  ) .union (  type ) ;^162^^^^^159^164^getTypes (  ) .union ( skipType, type ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] addTypeToSkip [RETURN_TYPE] void   T type [VARIABLES] TypeSystem  typeSystem  Set  invalidatingTypes  renameNodes  typesToSkip  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  nextUniqueId  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  showInvalidationWarnings  skipRenaming  T  skipType  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[buglab_swap_variables]^getTypes (  ) .union ( skipType ) ;^162^^^^^159^164^getTypes (  ) .union ( skipType, type ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] addTypeToSkip [RETURN_TYPE] void   T type [VARIABLES] TypeSystem  typeSystem  Set  invalidatingTypes  renameNodes  typesToSkip  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  nextUniqueId  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  showInvalidationWarnings  skipRenaming  T  skipType  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[buglab_swap_variables]^if  ( !typesToSkip.contains ( subType ) && typesToSkipToSkip.contains ( types.find ( subType )  )  )  {^188^189^^^^173^203^if  ( !typesToSkip.contains ( subType ) && typesToSkip.contains ( types.find ( subType )  )  )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] expandTypesToSkip [RETURN_TYPE] void   [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  showInvalidationWarnings  skipRenaming  T  newType  subType  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[buglab_swap_variables]^if  ( originalTypesSize.elements (  ) .size (  )  == types )  {^199^^^^^184^214^if  ( types.elements (  ) .size (  )  == originalTypesSize )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] expandTypesToSkip [RETURN_TYPE] void   [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  showInvalidationWarnings  skipRenaming  T  newType  subType  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[buglab_swap_variables]^rootTypesToSkip.add ( subType.find ( types )  ) ;^180^^^^^165^195^rootTypesToSkip.add ( types.find ( subType )  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] expandTypesToSkip [RETURN_TYPE] void   [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  showInvalidationWarnings  skipRenaming  T  newType  subType  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[buglab_swap_variables]^if  ( !typesToSkip.contains ( typesToSkip ) && subType.contains ( types.find ( subType )  )  )  {^188^189^^^^173^203^if  ( !typesToSkip.contains ( subType ) && typesToSkip.contains ( types.find ( subType )  )  )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] expandTypesToSkip [RETURN_TYPE] void   [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  showInvalidationWarnings  skipRenaming  T  newType  subType  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[buglab_swap_variables]^&& subTypeToSkip.contains ( types.find ( types )  )  )  {^189^^^^^174^204^&& typesToSkip.contains ( types.find ( subType )  )  )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] expandTypesToSkip [RETURN_TYPE] void   [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  showInvalidationWarnings  skipRenaming  T  newType  subType  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[buglab_swap_variables]^&& subType.contains ( types.find ( typesToSkip )  )  )  {^189^^^^^174^204^&& typesToSkip.contains ( types.find ( subType )  )  )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] expandTypesToSkip [RETURN_TYPE] void   [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  showInvalidationWarnings  skipRenaming  T  newType  subType  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[buglab_swap_variables]^if  ( !typesToSkip.contains ( types ) && subTypeToSkip.contains ( types.find ( subType )  )  )  {^188^189^^^^173^203^if  ( !typesToSkip.contains ( subType ) && typesToSkip.contains ( types.find ( subType )  )  )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] expandTypesToSkip [RETURN_TYPE] void   [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  showInvalidationWarnings  skipRenaming  T  newType  subType  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[buglab_swap_variables]^&& types.contains ( typesToSkip.find ( subType )  )  )  {^189^^^^^174^204^&& typesToSkip.contains ( types.find ( subType )  )  )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] expandTypesToSkip [RETURN_TYPE] void   [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  showInvalidationWarnings  skipRenaming  T  newType  subType  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[buglab_swap_variables]^&& typesToSkipToSkip.contains ( types.find ( subType )  )  )  {^189^^^^^174^204^&& typesToSkip.contains ( types.find ( subType )  )  )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] expandTypesToSkip [RETURN_TYPE] void   [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  showInvalidationWarnings  skipRenaming  T  newType  subType  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[buglab_swap_variables]^if  ( typeSystemSystem.isInvalidatingType ( type )  )  {^243^^^^^241^251^if  ( typeSystem.isInvalidatingType ( type )  )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] scheduleRenaming [RETURN_TYPE] boolean   Node node T type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  Node  node  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[buglab_swap_variables]^if  ( type.isInvalidatingType ( typeSystem )  )  {^243^^^^^241^251^if  ( typeSystem.isInvalidatingType ( type )  )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] scheduleRenaming [RETURN_TYPE] boolean   Node node T type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  Node  node  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[buglab_swap_variables]^rootTypes.put (  type ) ;^248^^^^^241^251^rootTypes.put ( node, type ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] scheduleRenaming [RETURN_TYPE] boolean   Node node T type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  Node  node  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[buglab_swap_variables]^rootTypes.put ( node ) ;^248^^^^^241^251^rootTypes.put ( node, type ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] scheduleRenaming [RETURN_TYPE] boolean   Node node T type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  Node  node  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[buglab_swap_variables]^return new DisambiguateProperties<ConcreteType> ( tt, new ConcreteTypeSystem ( compiler, compiler.getCodingConvention (  )  )  ) ;^264^265^^^^262^266^return new DisambiguateProperties<ConcreteType> ( compiler, new ConcreteTypeSystem ( tt, compiler.getCodingConvention (  )  )  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] forConcreteTypeSystem [RETURN_TYPE] DisambiguateProperties   AbstractCompiler compiler TightenTypes tt [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[buglab_swap_variables]^return new DisambiguateProperties<ConcreteType> (  new ConcreteTypeSystem ( tt, compiler.getCodingConvention (  )  )  ) ;^264^265^^^^262^266^return new DisambiguateProperties<ConcreteType> ( compiler, new ConcreteTypeSystem ( tt, compiler.getCodingConvention (  )  )  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] forConcreteTypeSystem [RETURN_TYPE] DisambiguateProperties   AbstractCompiler compiler TightenTypes tt [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[buglab_swap_variables]^return new DisambiguateProperties<ConcreteType> ( compiler, new ConcreteTypeSystem (  compiler.getCodingConvention (  )  )  ) ;^264^265^^^^262^266^return new DisambiguateProperties<ConcreteType> ( compiler, new ConcreteTypeSystem ( tt, compiler.getCodingConvention (  )  )  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] forConcreteTypeSystem [RETURN_TYPE] DisambiguateProperties   AbstractCompiler compiler TightenTypes tt [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[buglab_swap_variables]^compiler, new ConcreteTypeSystem ( compiler, tt.getCodingConvention (  )  )  ) ;^265^^^^^262^266^compiler, new ConcreteTypeSystem ( tt, compiler.getCodingConvention (  )  )  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] forConcreteTypeSystem [RETURN_TYPE] DisambiguateProperties   AbstractCompiler compiler TightenTypes tt [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[buglab_swap_variables]^compiler, new ConcreteTypeSystem (  compiler.getCodingConvention (  )  )  ) ;^265^^^^^262^266^compiler, new ConcreteTypeSystem ( tt, compiler.getCodingConvention (  )  )  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] forConcreteTypeSystem [RETURN_TYPE] DisambiguateProperties   AbstractCompiler compiler TightenTypes tt [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[buglab_swap_variables]^new ConcreteTypeSystem ( tt, compiler.getCodingConvention (  )  )  ) ;^265^^^^^262^266^compiler, new ConcreteTypeSystem ( tt, compiler.getCodingConvention (  )  )  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] forConcreteTypeSystem [RETURN_TYPE] DisambiguateProperties   AbstractCompiler compiler TightenTypes tt [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[buglab_swap_variables]^NodeTraversal.traverse ( externs, compiler, new FindExternProperties (  )  ) ;^285^^^^^278^288^NodeTraversal.traverse ( compiler, externs, new FindExternProperties (  )  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  Node  externs  root  StaticScope  scope  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  TypeMismatch  mis  
[buglab_swap_variables]^NodeTraversal.traverse ( compiler,  new FindExternProperties (  )  ) ;^285^^^^^278^288^NodeTraversal.traverse ( compiler, externs, new FindExternProperties (  )  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  Node  externs  root  StaticScope  scope  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  TypeMismatch  mis  
[buglab_swap_variables]^NodeTraversal.traverse (  externs, new FindExternProperties (  )  ) ;^285^^^^^278^288^NodeTraversal.traverse ( compiler, externs, new FindExternProperties (  )  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  Node  externs  root  StaticScope  scope  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  TypeMismatch  mis  
[buglab_swap_variables]^NodeTraversal.traverse ( root, compiler, new FindRenameableProperties (  )  ) ;^286^^^^^278^288^NodeTraversal.traverse ( compiler, root, new FindRenameableProperties (  )  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  Node  externs  root  StaticScope  scope  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  TypeMismatch  mis  
[buglab_swap_variables]^NodeTraversal.traverse ( compiler,  new FindRenameableProperties (  )  ) ;^286^^^^^278^288^NodeTraversal.traverse ( compiler, root, new FindRenameableProperties (  )  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  Node  externs  root  StaticScope  scope  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  TypeMismatch  mis  
[buglab_swap_variables]^NodeTraversal.traverse (  root, new FindRenameableProperties (  )  ) ;^286^^^^^278^288^NodeTraversal.traverse ( compiler, root, new FindRenameableProperties (  )  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  Node  externs  root  StaticScope  scope  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  TypeMismatch  mis  
[buglab_swap_variables]^properties.put (  new Property ( name )  ) ;^313^^^^^311^316^properties.put ( name, new Property ( name )  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getProperty [RETURN_TYPE] DisambiguateProperties$Property   String name [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[buglab_swap_variables]^return name.get ( properties ) ;^315^^^^^311^316^return properties.get ( name ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getProperty [RETURN_TYPE] DisambiguateProperties$Property   String name [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  UnionFind  types  String  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[buglab_swap_variables]^return fieldSystem.getTypeWithProperty ( type, type ) ;^320^^^^^319^321^return typeSystem.getTypeWithProperty ( field, type ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getTypeWithProperty [RETURN_TYPE] T   String field T type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[buglab_swap_variables]^return typeSystem.getTypeWithProperty (  type ) ;^320^^^^^319^321^return typeSystem.getTypeWithProperty ( field, type ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getTypeWithProperty [RETURN_TYPE] T   String field T type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[buglab_swap_variables]^return typeSystemSystem.getTypeWithProperty ( field, type ) ;^320^^^^^319^321^return typeSystem.getTypeWithProperty ( field, type ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getTypeWithProperty [RETURN_TYPE] T   String field T type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[buglab_swap_variables]^return typeSystem.getTypeWithProperty ( field ) ;^320^^^^^319^321^return typeSystem.getTypeWithProperty ( field, type ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getTypeWithProperty [RETURN_TYPE] T   String field T type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[buglab_swap_variables]^return field.getTypeWithProperty ( typeSystem, type ) ;^320^^^^^319^321^return typeSystem.getTypeWithProperty ( field, type ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getTypeWithProperty [RETURN_TYPE] T   String field T type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[buglab_swap_variables]^scopes.push ( typeSystemypeSystem.getFunctionScope ( t.getScopeRoot (  )  )  ) ;^336^^^^^332^338^scopes.push ( typeSystem.getFunctionScope ( t.getScopeRoot (  )  )  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[buglab_swap_variables]^scopes.push ( t.getFunctionScope ( typeSystem.getScopeRoot (  )  )  ) ;^336^^^^^332^338^scopes.push ( typeSystem.getFunctionScope ( t.getScopeRoot (  )  )  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[buglab_swap_variables]^if  ( type.isInvalidatingType ( typeSystem )  )  {^360^^^^^355^374^if  ( typeSystem.isInvalidatingType ( type )  )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  n  parent  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[buglab_swap_variables]^if  (  ( typeSystem = type.getInstanceFromPrototype ( type )  )  != null )  {^368^^^^^355^374^if  (  ( type = typeSystem.getInstanceFromPrototype ( type )  )  != null )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  n  parent  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[buglab_swap_variables]^T type = typeSystem.getType ( getScope (  ) , field.getFirstChild (  ) , n ) ;^358^^^^^355^374^T type = typeSystem.getType ( getScope (  ) , n.getFirstChild (  ) , field ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  n  parent  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[buglab_swap_variables]^T type = typeSystem.getType ( getScope (  ) .getFirstChild (  ) , field ) ;^358^^^^^355^374^T type = typeSystem.getType ( getScope (  ) , n.getFirstChild (  ) , field ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  n  parent  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[buglab_swap_variables]^T type = typeSystem.getType ( getScope (  ) , n.getFirstChild (  )  ) ;^358^^^^^355^374^T type = typeSystem.getType ( getScope (  ) , n.getFirstChild (  ) , field ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  n  parent  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[buglab_swap_variables]^T type = field.getType ( getScope (  ) , n.getFirstChild (  ) , typeSystem ) ;^358^^^^^355^374^T type = typeSystem.getType ( getScope (  ) , n.getFirstChild (  ) , field ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  n  parent  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[buglab_swap_variables]^T type = n.getType ( getScope (  ) , typeSystem.getFirstChild (  ) , field ) ;^358^^^^^355^374^T type = typeSystem.getType ( getScope (  ) , n.getFirstChild (  ) , field ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  n  parent  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[buglab_swap_variables]^if  ( typeSystemSystem.isInvalidatingType ( type )  )  {^360^^^^^355^374^if  ( typeSystem.isInvalidatingType ( type )  )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  n  parent  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[buglab_swap_variables]^handleObjectLit ( n, t ) ;^387^^^^^383^389^handleObjectLit ( t, n ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  n  parent  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[buglab_swap_variables]^handleObjectLit (  n ) ;^387^^^^^383^389^handleObjectLit ( t, n ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  n  parent  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[buglab_swap_variables]^handleObjectLit ( t ) ;^387^^^^^383^389^handleObjectLit ( t, n ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  n  parent  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[buglab_swap_variables]^handleGetProp ( n, t ) ;^385^^^^^383^389^handleGetProp ( t, n ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  n  parent  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[buglab_swap_variables]^handleGetProp (  n ) ;^385^^^^^383^389^handleGetProp ( t, n ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  n  parent  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[buglab_swap_variables]^handleGetProp ( t ) ;^385^^^^^383^389^handleGetProp ( t, n ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  n  parent  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  
[buglab_swap_variables]^T type = n.getType ( getScope (  ) , typeSystem.getFirstChild (  ) , name ) ;^396^^^^^394^407^T type = typeSystem.getType ( getScope (  ) , n.getFirstChild (  ) , name ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] handleGetProp [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  n  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[buglab_swap_variables]^T type = typeSystem.getType ( getScope (  ) .getFirstChild (  ) , name ) ;^396^^^^^394^407^T type = typeSystem.getType ( getScope (  ) , n.getFirstChild (  ) , name ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] handleGetProp [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  n  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[buglab_swap_variables]^T type = typeSystem.getType ( getScope (  ) , name.getFirstChild (  ) , n ) ;^396^^^^^394^407^T type = typeSystem.getType ( getScope (  ) , n.getFirstChild (  ) , name ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] handleGetProp [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  n  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[buglab_swap_variables]^T type = typeSystem.getType ( getScope (  ) , n.getFirstChild (  )  ) ;^396^^^^^394^407^T type = typeSystem.getType ( getScope (  ) , n.getFirstChild (  ) , name ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] handleGetProp [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  n  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[buglab_swap_variables]^T type = name.getType ( getScope (  ) , n.getFirstChild (  ) , typeSystem ) ;^396^^^^^394^407^T type = typeSystem.getType ( getScope (  ) , n.getFirstChild (  ) , name ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] handleGetProp [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  n  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[buglab_swap_variables]^if  ( !prop.scheduleRenaming ( n.getLastChild (  ) , processProperty ( t,  type, null )  )  )  {^399^400^^^^394^407^if  ( !prop.scheduleRenaming ( n.getLastChild (  ) , processProperty ( t, prop, type, null )  )  )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] handleGetProp [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  n  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[buglab_swap_variables]^if  ( !prop.scheduleRenaming ( n.getLastChild (  ) , processProperty ( t, prop, typeull )  )  )  {^399^400^^^^394^407^if  ( !prop.scheduleRenaming ( n.getLastChild (  ) , processProperty ( t, prop, type, null )  )  )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] handleGetProp [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  n  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[buglab_swap_variables]^if  ( !prop.scheduleRenaming ( n.getLastChild (  ) , processProperty (  prop, type, null )  )  )  {^399^400^^^^394^407^if  ( !prop.scheduleRenaming ( n.getLastChild (  ) , processProperty ( t, prop, type, null )  )  )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] handleGetProp [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  n  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[buglab_swap_variables]^if  ( !prop.scheduleRenaming ( n.getLastChild (  ) , processProperty ( t, type, prop, null )  )  )  {^399^400^^^^394^407^if  ( !prop.scheduleRenaming ( n.getLastChild (  ) , processProperty ( t, prop, type, null )  )  )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] handleGetProp [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  n  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[buglab_swap_variables]^if  ( !prop.scheduleRenaming ( n.getLastChild (  ) , processProperty ( t, prop,  null )  )  )  {^399^400^^^^394^407^if  ( !prop.scheduleRenaming ( n.getLastChild (  ) , processProperty ( t, prop, type, null )  )  )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] handleGetProp [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  n  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[buglab_swap_variables]^compiler.report ( JSError.make ( name.getSourceName (  ) , n, INVALIDATION, t, ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^402^403^404^^^394^407^compiler.report ( JSError.make ( t.getSourceName (  ) , n, INVALIDATION, name, ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] handleGetProp [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  n  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[buglab_swap_variables]^compiler.report ( JSError.make ( t.getSourceName (  ) , name, INVALIDATION, n, ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^402^403^404^^^394^407^compiler.report ( JSError.make ( t.getSourceName (  ) , n, INVALIDATION, name, ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] handleGetProp [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  n  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[buglab_swap_variables]^compiler.report ( JSError.make ( t.getSourceName (  ) ,  INVALIDATION, name, ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^402^403^404^^^394^407^compiler.report ( JSError.make ( t.getSourceName (  ) , n, INVALIDATION, name, ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] handleGetProp [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  n  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[buglab_swap_variables]^compiler.report ( JSError.make ( t.getSourceName (  ) , n, INVALIDATION,  ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^402^403^404^^^394^407^compiler.report ( JSError.make ( t.getSourceName (  ) , n, INVALIDATION, name, ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] handleGetProp [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  n  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[buglab_swap_variables]^compiler.report ( JSError.make ( t.getSourceName (  ) , n, INVALIDATION, type, ( name == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^402^403^404^^^394^407^compiler.report ( JSError.make ( t.getSourceName (  ) , n, INVALIDATION, name, ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] handleGetProp [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  n  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[buglab_swap_variables]^compiler.report ( JSError.make ( t.getSourceName (  ) , n,  name, ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^402^403^404^^^394^407^compiler.report ( JSError.make ( t.getSourceName (  ) , n, INVALIDATION, name, ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] handleGetProp [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  n  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[buglab_swap_variables]^compiler.report ( JSError.make ( n.getSourceName (  ) , t, INVALIDATION, name, ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^402^403^404^^^394^407^compiler.report ( JSError.make ( t.getSourceName (  ) , n, INVALIDATION, name, ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] handleGetProp [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  n  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[buglab_swap_variables]^compiler.report ( JSError.make ( t.getSourceName (  ) , INVALIDATION, n, name, ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^402^403^404^^^394^407^compiler.report ( JSError.make ( t.getSourceName (  ) , n, INVALIDATION, name, ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] handleGetProp [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  n  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[buglab_swap_variables]^compiler.report ( JSError.make ( t.getSourceName (  ) , n, name, INVALIDATION, ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^402^403^404^^^394^407^compiler.report ( JSError.make ( t.getSourceName (  ) , n, INVALIDATION, name, ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] handleGetProp [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  n  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[buglab_swap_variables]^compiler.report ( JSError.make ( t.getSourceName (  ) , n, type, name, ( INVALIDATION == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^402^403^404^^^394^407^compiler.report ( JSError.make ( t.getSourceName (  ) , n, INVALIDATION, name, ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] handleGetProp [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  n  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[buglab_swap_variables]^compiler.report ( JSError.make ( INVALIDATION.getSourceName (  ) , n, t, name, ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^402^403^404^^^394^407^compiler.report ( JSError.make ( t.getSourceName (  ) , n, INVALIDATION, name, ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] handleGetProp [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  n  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[buglab_swap_variables]^compiler.report ( JSError.make ( t.getSourceName (  ) , type, INVALIDATION, name, ( n == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^402^403^404^^^394^407^compiler.report ( JSError.make ( t.getSourceName (  ) , n, INVALIDATION, name, ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] handleGetProp [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  n  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[buglab_swap_variables]^if  ( !prop.scheduleRenaming ( n.getLastChild (  ) , processProperty ( prop, t, type, null )  )  )  {^399^400^^^^394^407^if  ( !prop.scheduleRenaming ( n.getLastChild (  ) , processProperty ( t, prop, type, null )  )  )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] handleGetProp [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  n  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[buglab_swap_variables]^if  ( !prop.scheduleRenaming ( t.getLastChild (  ) , processProperty ( n, prop, type, null )  )  )  {^399^400^^^^394^407^if  ( !prop.scheduleRenaming ( n.getLastChild (  ) , processProperty ( t, prop, type, null )  )  )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] handleGetProp [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  n  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[buglab_swap_variables]^if  ( !prop.scheduleRenaming ( n.getLastChild (  ) , processProperty ( type, prop, t, null )  )  )  {^399^400^^^^394^407^if  ( !prop.scheduleRenaming ( n.getLastChild (  ) , processProperty ( t, prop, type, null )  )  )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] handleGetProp [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  n  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[buglab_swap_variables]^processProperty ( prop, t, type, null )  )  )  {^400^^^^^394^407^processProperty ( t, prop, type, null )  )  )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] handleGetProp [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  n  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[buglab_swap_variables]^processProperty (  prop, type, null )  )  )  {^400^^^^^394^407^processProperty ( t, prop, type, null )  )  )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] handleGetProp [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  n  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[buglab_swap_variables]^processProperty ( t,  type, null )  )  )  {^400^^^^^394^407^processProperty ( t, prop, type, null )  )  )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] handleGetProp [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  n  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[buglab_swap_variables]^processProperty ( type, prop, t, null )  )  )  {^400^^^^^394^407^processProperty ( t, prop, type, null )  )  )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] handleGetProp [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  n  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[buglab_swap_variables]^processProperty ( t, prop,  null )  )  )  {^400^^^^^394^407^processProperty ( t, prop, type, null )  )  )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] handleGetProp [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  n  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[buglab_swap_variables]^compiler.report ( JSError.make ( type.getSourceName (  ) , n, INVALIDATION, name, ( t == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^402^403^404^^^394^407^compiler.report ( JSError.make ( t.getSourceName (  ) , n, INVALIDATION, name, ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] handleGetProp [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  n  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[buglab_swap_variables]^if  ( !prop.scheduleRenaming ( child, processProperty ( t,  type, null )  )  )  {^421^422^^^^412^433^if  ( !prop.scheduleRenaming ( child, processProperty ( t, prop, type, null )  )  )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] handleObjectLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  child  n  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[buglab_swap_variables]^if  ( !prop.scheduleRenaming ( n, processProperty ( t, prop, type, childull )  )  )  {^421^422^^^^412^433^if  ( !prop.scheduleRenaming ( child, processProperty ( t, prop, type, null )  )  )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] handleObjectLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  child  n  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[buglab_swap_variables]^if  ( !prop.scheduleRenaming (  processProperty ( t, prop, type, null )  )  )  {^421^422^^^^412^433^if  ( !prop.scheduleRenaming ( child, processProperty ( t, prop, type, null )  )  )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] handleObjectLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  child  n  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[buglab_swap_variables]^if  ( !prop.scheduleRenaming ( child, processProperty ( n, prop, type, tull )  )  )  {^421^422^^^^412^433^if  ( !prop.scheduleRenaming ( child, processProperty ( t, prop, type, null )  )  )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] handleObjectLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  child  n  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[buglab_swap_variables]^if  ( !prop.scheduleRenaming ( child, processProperty (  prop, type, null )  )  )  {^421^422^^^^412^433^if  ( !prop.scheduleRenaming ( child, processProperty ( t, prop, type, null )  )  )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] handleObjectLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  child  n  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[buglab_swap_variables]^if  ( !prop.scheduleRenaming ( child, processProperty ( t, prop,  null )  )  )  {^421^422^^^^412^433^if  ( !prop.scheduleRenaming ( child, processProperty ( t, prop, type, null )  )  )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] handleObjectLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  child  n  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[buglab_swap_variables]^if  ( !prop.scheduleRenaming ( child, processProperty ( t, n, type, propull )  )  )  {^421^422^^^^412^433^if  ( !prop.scheduleRenaming ( child, processProperty ( t, prop, type, null )  )  )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] handleObjectLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  child  n  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[buglab_swap_variables]^if  ( !prop.scheduleRenaming ( child, processProperty ( t, prop, typeull )  )  )  {^421^422^^^^412^433^if  ( !prop.scheduleRenaming ( child, processProperty ( t, prop, type, null )  )  )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] handleObjectLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  child  n  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[buglab_swap_variables]^compiler.report ( JSError.make ( n.getSourceName (  ) , child, INVALIDATION, tame, ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^424^425^426^^^412^433^compiler.report ( JSError.make ( t.getSourceName (  ) , child, INVALIDATION, name, ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] handleObjectLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  child  n  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[buglab_swap_variables]^compiler.report ( JSError.make ( child.getSourceName (  ) , t, INVALIDATION, name, ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^424^425^426^^^412^433^compiler.report ( JSError.make ( t.getSourceName (  ) , child, INVALIDATION, name, ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] handleObjectLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  child  n  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[buglab_swap_variables]^compiler.report ( JSError.make ( t.getSourceName (  ) ,  INVALIDATION, name, ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^424^425^426^^^412^433^compiler.report ( JSError.make ( t.getSourceName (  ) , child, INVALIDATION, name, ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] handleObjectLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  child  n  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[buglab_swap_variables]^compiler.report ( JSError.make ( t.getSourceName (  ) , child, INVALIDATION, type, ( name == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^424^425^426^^^412^433^compiler.report ( JSError.make ( t.getSourceName (  ) , child, INVALIDATION, name, ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] handleObjectLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  child  n  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[buglab_swap_variables]^compiler.report ( JSError.make ( t.getSourceName (  ) , child, INVALIDATION,  ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^424^425^426^^^412^433^compiler.report ( JSError.make ( t.getSourceName (  ) , child, INVALIDATION, name, ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] handleObjectLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  child  n  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[buglab_swap_variables]^compiler.report ( JSError.make ( t.getSourceName (  ) , child, type, name, ( INVALIDATION == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^424^425^426^^^412^433^compiler.report ( JSError.make ( t.getSourceName (  ) , child, INVALIDATION, name, ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] handleObjectLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  child  n  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[buglab_swap_variables]^compiler.report ( JSError.make ( t.getSourceName (  ) , n, INVALIDATION, childame, ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^424^425^426^^^412^433^compiler.report ( JSError.make ( t.getSourceName (  ) , child, INVALIDATION, name, ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] handleObjectLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  child  n  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[buglab_swap_variables]^compiler.report ( JSError.make ( t.getSourceName (  ) , child, INVALIDATIOName, ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^424^425^426^^^412^433^compiler.report ( JSError.make ( t.getSourceName (  ) , child, INVALIDATION, name, ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] handleObjectLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  child  n  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[buglab_swap_variables]^compiler.report ( JSError.make ( t.getSourceName (  ) , INVALIDATION, child, name, ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^424^425^426^^^412^433^compiler.report ( JSError.make ( t.getSourceName (  ) , child, INVALIDATION, name, ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] handleObjectLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  child  n  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[buglab_swap_variables]^compiler.report ( JSError.make ( t.getSourceName (  ) , child,  name, ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^424^425^426^^^412^433^compiler.report ( JSError.make ( t.getSourceName (  ) , child, INVALIDATION, name, ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] handleObjectLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  child  n  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[buglab_swap_variables]^compiler.report ( JSError.make ( name.getSourceName (  ) , child, INVALIDATION, t, ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^424^425^426^^^412^433^compiler.report ( JSError.make ( t.getSourceName (  ) , child, INVALIDATION, name, ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] handleObjectLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  child  n  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[buglab_swap_variables]^compiler.report ( JSError.make ( INVALIDATION.getSourceName (  ) , child, t, name, ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^424^425^426^^^412^433^compiler.report ( JSError.make ( t.getSourceName (  ) , child, INVALIDATION, name, ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] handleObjectLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  child  n  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[buglab_swap_variables]^compiler.report ( JSError.make ( t.getSourceName (  ) , name, INVALIDATION, child, ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^424^425^426^^^412^433^compiler.report ( JSError.make ( t.getSourceName (  ) , child, INVALIDATION, name, ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] handleObjectLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  child  n  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[buglab_swap_variables]^compiler.report ( JSError.make ( type.getSourceName (  ) , child, INVALIDATION, name, ( t == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^424^425^426^^^412^433^compiler.report ( JSError.make ( t.getSourceName (  ) , child, INVALIDATION, name, ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] handleObjectLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  child  n  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[buglab_swap_variables]^compiler.report ( JSError.make ( t.getSourceName (  ) , child, n, INVALIDATIOName, ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^424^425^426^^^412^433^compiler.report ( JSError.make ( t.getSourceName (  ) , child, INVALIDATION, name, ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] handleObjectLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  child  n  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[buglab_swap_variables]^compiler.report ( JSError.make ( t.getSourceName (  ) , type, INVALIDATION, name, ( child == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^424^425^426^^^412^433^compiler.report ( JSError.make ( t.getSourceName (  ) , child, INVALIDATION, name, ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] handleObjectLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  child  n  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[buglab_swap_variables]^compiler.report ( JSError.make ( t.getSourceName (  ) , child, INVALIDATION, typeame, ( n == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^424^425^426^^^412^433^compiler.report ( JSError.make ( t.getSourceName (  ) , child, INVALIDATION, name, ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] handleObjectLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  child  n  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[buglab_swap_variables]^compiler.report ( JSError.make ( t.getSourceName (  ) , child, INVALIDATION, n, ( type == nameull ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^424^425^426^^^412^433^compiler.report ( JSError.make ( t.getSourceName (  ) , child, INVALIDATION, name, ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] handleObjectLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  child  n  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[buglab_swap_variables]^T type = n.getType ( getScope (  ) , typeSystem, name ) ;^418^^^^^412^433^T type = typeSystem.getType ( getScope (  ) , n, name ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] handleObjectLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  child  n  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[buglab_swap_variables]^T type = typeSystem.getType ( getScope (  ) ,  name ) ;^418^^^^^412^433^T type = typeSystem.getType ( getScope (  ) , n, name ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] handleObjectLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  child  n  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[buglab_swap_variables]^T type = typeSystem.getType ( getScope (  ) , name, n ) ;^418^^^^^412^433^T type = typeSystem.getType ( getScope (  ) , n, name ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] handleObjectLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  child  n  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[buglab_swap_variables]^T type = typeSystem.getType ( getScope (  ) , n ) ;^418^^^^^412^433^T type = typeSystem.getType ( getScope (  ) , n, name ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] handleObjectLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  child  n  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[buglab_swap_variables]^T type = name.getType ( getScope (  ) , n, typeSystem ) ;^418^^^^^412^433^T type = typeSystem.getType ( getScope (  ) , n, name ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] handleObjectLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  child  n  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[buglab_swap_variables]^if  ( !prop.scheduleRenaming ( child, processProperty ( t, type, prop, null )  )  )  {^421^422^^^^412^433^if  ( !prop.scheduleRenaming ( child, processProperty ( t, prop, type, null )  )  )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] handleObjectLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  child  n  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[buglab_swap_variables]^if  ( !prop.scheduleRenaming ( t, processProperty ( child, prop, type, null )  )  )  {^421^422^^^^412^433^if  ( !prop.scheduleRenaming ( child, processProperty ( t, prop, type, null )  )  )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] handleObjectLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  child  n  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[buglab_swap_variables]^if  ( !prop.scheduleRenaming ( child, processProperty ( prop, t, type, null )  )  )  {^421^422^^^^412^433^if  ( !prop.scheduleRenaming ( child, processProperty ( t, prop, type, null )  )  )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] handleObjectLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  child  n  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[buglab_swap_variables]^processProperty ( type, prop, t, null )  )  )  {^422^^^^^412^433^processProperty ( t, prop, type, null )  )  )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] handleObjectLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  child  n  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[buglab_swap_variables]^processProperty (  prop, type, null )  )  )  {^422^^^^^412^433^processProperty ( t, prop, type, null )  )  )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] handleObjectLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  child  n  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[buglab_swap_variables]^processProperty ( t, type, prop, null )  )  )  {^422^^^^^412^433^processProperty ( t, prop, type, null )  )  )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] handleObjectLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  child  n  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[buglab_swap_variables]^processProperty ( t,  type, null )  )  )  {^422^^^^^412^433^processProperty ( t, prop, type, null )  )  )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] handleObjectLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  child  n  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[buglab_swap_variables]^processProperty ( t, prop,  null )  )  )  {^422^^^^^412^433^processProperty ( t, prop, type, null )  )  )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] handleObjectLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  child  n  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[buglab_swap_variables]^compiler.report ( JSError.make ( t.getSourceName (  ) , child, name, INVALIDATION, ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^424^425^426^^^412^433^compiler.report ( JSError.make ( t.getSourceName (  ) , child, INVALIDATION, name, ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] handleObjectLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  child  n  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[buglab_swap_variables]^compiler.report ( JSError.make ( t.getSourceName (  ) , child, INVALIDATION, nameame, ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^424^425^426^^^412^433^compiler.report ( JSError.make ( t.getSourceName (  ) , child, INVALIDATION, name, ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] handleObjectLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  child  n  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[buglab_swap_variables]^if  ( !prop.scheduleRenaming ( child, processProperty ( type, prop, t, null )  )  )  {^421^422^^^^412^433^if  ( !prop.scheduleRenaming ( child, processProperty ( t, prop, type, null )  )  )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] handleObjectLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  child  n  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[buglab_swap_variables]^if  ( !prop.scheduleRenaming ( prop, processProperty ( t, child, type, null )  )  )  {^421^422^^^^412^433^if  ( !prop.scheduleRenaming ( child, processProperty ( t, prop, type, null )  )  )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] handleObjectLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  child  n  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[buglab_swap_variables]^if  ( !prop.scheduleRenaming ( type, processProperty ( t, prop, child, null )  )  )  {^421^422^^^^412^433^if  ( !prop.scheduleRenaming ( child, processProperty ( t, prop, type, null )  )  )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] handleObjectLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  child  n  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[buglab_swap_variables]^processProperty ( prop, t, type, null )  )  )  {^422^^^^^412^433^processProperty ( t, prop, type, null )  )  )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] handleObjectLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  child  n  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[buglab_swap_variables]^if  ( !prop.scheduleRenaming ( child, processProperty ( t, prop, n, typeull )  )  )  {^421^422^^^^412^433^if  ( !prop.scheduleRenaming ( child, processProperty ( t, prop, type, null )  )  )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] handleObjectLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  NodeTraversal  t  Node  child  n  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[buglab_swap_variables]^type = typeSystemSystem.restrictByNotNullOrUndefined ( type ) ;^444^^^^^442^467^type = typeSystem.restrictByNotNullOrUndefined ( type ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] processProperty [RETURN_TYPE] T   NodeTraversal t Property prop T type T relatedType [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  Iterable  alternatives  NodeTraversal  t  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  firstType  lastType  relatedType  subType  topType  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[buglab_swap_variables]^type = type.restrictByNotNullOrUndefined ( typeSystem ) ;^444^^^^^442^467^type = typeSystem.restrictByNotNullOrUndefined ( type ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] processProperty [RETURN_TYPE] T   NodeTraversal t Property prop T type T relatedType [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  Iterable  alternatives  NodeTraversal  t  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  firstType  lastType  relatedType  subType  topType  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[buglab_swap_variables]^if  ( type.skipRenaming || propSystem.isInvalidatingType ( type )  )  {^445^^^^^442^467^if  ( prop.skipRenaming || typeSystem.isInvalidatingType ( type )  )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] processProperty [RETURN_TYPE] T   NodeTraversal t Property prop T type T relatedType [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  Iterable  alternatives  NodeTraversal  t  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  firstType  lastType  relatedType  subType  topType  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[buglab_swap_variables]^if  ( type || prop.skipRenamingSystem.isInvalidatingType ( type )  )  {^445^^^^^442^467^if  ( prop.skipRenaming || typeSystem.isInvalidatingType ( type )  )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] processProperty [RETURN_TYPE] T   NodeTraversal t Property prop T type T relatedType [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  Iterable  alternatives  NodeTraversal  t  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  firstType  lastType  relatedType  subType  topType  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[buglab_swap_variables]^if  ( typeSystem || prop.skipRenaming.isInvalidatingType ( type )  )  {^445^^^^^442^467^if  ( prop.skipRenaming || typeSystem.isInvalidatingType ( type )  )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] processProperty [RETURN_TYPE] T   NodeTraversal t Property prop T type T relatedType [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  Iterable  alternatives  NodeTraversal  t  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  firstType  lastType  relatedType  subType  topType  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[buglab_swap_variables]^if  ( prop.skipRenaming || typeSystemSystem.isInvalidatingType ( type )  )  {^445^^^^^442^467^if  ( prop.skipRenaming || typeSystem.isInvalidatingType ( type )  )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] processProperty [RETURN_TYPE] T   NodeTraversal t Property prop T type T relatedType [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  Iterable  alternatives  NodeTraversal  t  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  firstType  lastType  relatedType  subType  topType  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[buglab_swap_variables]^if  ( prop.skipRenaming || type.isInvalidatingType ( typeSystem )  )  {^445^^^^^442^467^if  ( prop.skipRenaming || typeSystem.isInvalidatingType ( type )  )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] processProperty [RETURN_TYPE] T   NodeTraversal t Property prop T type T relatedType [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  Iterable  alternatives  NodeTraversal  t  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  firstType  lastType  relatedType  subType  topType  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[buglab_swap_variables]^Iterable<T> alternatives = typeSystemSystem.getTypeAlternatives ( type ) ;^449^^^^^442^467^Iterable<T> alternatives = typeSystem.getTypeAlternatives ( type ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] processProperty [RETURN_TYPE] T   NodeTraversal t Property prop T type T relatedType [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  Iterable  alternatives  NodeTraversal  t  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  firstType  lastType  relatedType  subType  topType  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[buglab_swap_variables]^Iterable<T> alternatives = type.getTypeAlternatives ( typeSystem ) ;^449^^^^^442^467^Iterable<T> alternatives = typeSystem.getTypeAlternatives ( type ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] processProperty [RETURN_TYPE] T   NodeTraversal t Property prop T type T relatedType [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  Iterable  alternatives  NodeTraversal  t  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  firstType  lastType  relatedType  subType  topType  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[buglab_swap_variables]^if  ( topType.isInvalidatingType ( typeSystem )  )  {^461^^^^^442^467^if  ( typeSystem.isInvalidatingType ( topType )  )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] processProperty [RETURN_TYPE] T   NodeTraversal t Property prop T type T relatedType [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  Iterable  alternatives  NodeTraversal  t  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  firstType  lastType  relatedType  subType  topType  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[buglab_swap_variables]^T topType = prop.getTypeWithProperty ( typeSystem.name, type ) ;^460^^^^^442^467^T topType = typeSystem.getTypeWithProperty ( prop.name, type ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] processProperty [RETURN_TYPE] T   NodeTraversal t Property prop T type T relatedType [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  Iterable  alternatives  NodeTraversal  t  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  firstType  lastType  relatedType  subType  topType  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[buglab_swap_variables]^T topType = propSystem.getTypeWithProperty ( type.name, type ) ;^460^^^^^442^467^T topType = typeSystem.getTypeWithProperty ( prop.name, type ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] processProperty [RETURN_TYPE] T   NodeTraversal t Property prop T type T relatedType [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  Iterable  alternatives  NodeTraversal  t  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  firstType  lastType  relatedType  subType  topType  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[buglab_swap_variables]^T topType = typeSystem.getTypeWithProperty ( prop.name ) ;^460^^^^^442^467^T topType = typeSystem.getTypeWithProperty ( prop.name, type ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] processProperty [RETURN_TYPE] T   NodeTraversal t Property prop T type T relatedType [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  Iterable  alternatives  NodeTraversal  t  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  firstType  lastType  relatedType  subType  topType  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[buglab_swap_variables]^T topType = type.getTypeWithProperty ( prop.name, typeSystem ) ;^460^^^^^442^467^T topType = typeSystem.getTypeWithProperty ( prop.name, type ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] processProperty [RETURN_TYPE] T   NodeTraversal t Property prop T type T relatedType [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  Iterable  alternatives  NodeTraversal  t  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  firstType  lastType  relatedType  subType  topType  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[buglab_swap_variables]^T topType = prop.name.getTypeWithProperty ( typeSystem, type ) ;^460^^^^^442^467^T topType = typeSystem.getTypeWithProperty ( prop.name, type ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] processProperty [RETURN_TYPE] T   NodeTraversal t Property prop T type T relatedType [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  Iterable  alternatives  NodeTraversal  t  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  firstType  lastType  relatedType  subType  topType  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[buglab_swap_variables]^T topType = typeSystem.getTypeWithProperty (  type ) ;^460^^^^^442^467^T topType = typeSystem.getTypeWithProperty ( prop.name, type ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] processProperty [RETURN_TYPE] T   NodeTraversal t Property prop T type T relatedType [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  Iterable  alternatives  NodeTraversal  t  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  firstType  lastType  relatedType  subType  topType  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[buglab_swap_variables]^prop.addType (  topType, relatedType ) ;^464^^^^^442^467^prop.addType ( type, topType, relatedType ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] processProperty [RETURN_TYPE] T   NodeTraversal t Property prop T type T relatedType [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  Iterable  alternatives  NodeTraversal  t  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  firstType  lastType  relatedType  subType  topType  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[buglab_swap_variables]^prop.addType ( type,  relatedType ) ;^464^^^^^442^467^prop.addType ( type, topType, relatedType ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] processProperty [RETURN_TYPE] T   NodeTraversal t Property prop T type T relatedType [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  Iterable  alternatives  NodeTraversal  t  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  firstType  lastType  relatedType  subType  topType  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[buglab_swap_variables]^prop.addType ( relatedType, topType, type ) ;^464^^^^^442^467^prop.addType ( type, topType, relatedType ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] processProperty [RETURN_TYPE] T   NodeTraversal t Property prop T type T relatedType [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  Iterable  alternatives  NodeTraversal  t  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  firstType  lastType  relatedType  subType  topType  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[buglab_swap_variables]^prop.addType ( type, topType ) ;^464^^^^^442^467^prop.addType ( type, topType, relatedType ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] processProperty [RETURN_TYPE] T   NodeTraversal t Property prop T type T relatedType [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  Iterable  alternatives  NodeTraversal  t  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  firstType  lastType  relatedType  subType  topType  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[buglab_swap_variables]^firstType = lastType == null ? firstType : firstType;^455^^^^^442^467^firstType = firstType == null ? lastType : firstType;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] processProperty [RETURN_TYPE] T   NodeTraversal t Property prop T type T relatedType [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  Iterable  alternatives  NodeTraversal  t  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  firstType  lastType  relatedType  subType  topType  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[buglab_swap_variables]^T lastType = processProperty ( prop, t, subType, firstType ) ;^453^^^^^442^467^T lastType = processProperty ( t, prop, subType, firstType ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] processProperty [RETURN_TYPE] T   NodeTraversal t Property prop T type T relatedType [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  Iterable  alternatives  NodeTraversal  t  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  firstType  lastType  relatedType  subType  topType  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[buglab_swap_variables]^T lastType = processProperty (  prop, subType, firstType ) ;^453^^^^^442^467^T lastType = processProperty ( t, prop, subType, firstType ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] processProperty [RETURN_TYPE] T   NodeTraversal t Property prop T type T relatedType [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  Iterable  alternatives  NodeTraversal  t  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  firstType  lastType  relatedType  subType  topType  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[buglab_swap_variables]^T lastType = processProperty ( t, subType, prop, firstType ) ;^453^^^^^442^467^T lastType = processProperty ( t, prop, subType, firstType ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] processProperty [RETURN_TYPE] T   NodeTraversal t Property prop T type T relatedType [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  Iterable  alternatives  NodeTraversal  t  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  firstType  lastType  relatedType  subType  topType  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[buglab_swap_variables]^T lastType = processProperty ( t,  subType, firstType ) ;^453^^^^^442^467^T lastType = processProperty ( t, prop, subType, firstType ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] processProperty [RETURN_TYPE] T   NodeTraversal t Property prop T type T relatedType [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  Iterable  alternatives  NodeTraversal  t  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  firstType  lastType  relatedType  subType  topType  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[buglab_swap_variables]^T lastType = processProperty ( t, prop, firstType, subType ) ;^453^^^^^442^467^T lastType = processProperty ( t, prop, subType, firstType ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] processProperty [RETURN_TYPE] T   NodeTraversal t Property prop T type T relatedType [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  Iterable  alternatives  NodeTraversal  t  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  firstType  lastType  relatedType  subType  topType  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[buglab_swap_variables]^T lastType = processProperty ( t, prop,  firstType ) ;^453^^^^^442^467^T lastType = processProperty ( t, prop, subType, firstType ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] processProperty [RETURN_TYPE] T   NodeTraversal t Property prop T type T relatedType [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  Iterable  alternatives  NodeTraversal  t  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  firstType  lastType  relatedType  subType  topType  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[buglab_swap_variables]^T lastType = processProperty ( t, firstType, subType, prop ) ;^453^^^^^442^467^T lastType = processProperty ( t, prop, subType, firstType ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] processProperty [RETURN_TYPE] T   NodeTraversal t Property prop T type T relatedType [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  Iterable  alternatives  NodeTraversal  t  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  firstType  lastType  relatedType  subType  topType  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[buglab_swap_variables]^T lastType = processProperty ( t, prop, subType ) ;^453^^^^^442^467^T lastType = processProperty ( t, prop, subType, firstType ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] processProperty [RETURN_TYPE] T   NodeTraversal t Property prop T type T relatedType [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  Iterable  alternatives  NodeTraversal  t  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  firstType  lastType  relatedType  subType  topType  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[buglab_swap_variables]^T lastType = processProperty ( subType, prop, t, firstType ) ;^453^^^^^442^467^T lastType = processProperty ( t, prop, subType, firstType ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] processProperty [RETURN_TYPE] T   NodeTraversal t Property prop T type T relatedType [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  Iterable  alternatives  NodeTraversal  t  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  firstType  lastType  relatedType  subType  topType  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[buglab_swap_variables]^T lastType = processProperty ( firstType, prop, subType, t ) ;^453^^^^^442^467^T lastType = processProperty ( t, prop, subType, firstType ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] processProperty [RETURN_TYPE] T   NodeTraversal t Property prop T type T relatedType [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  Iterable  alternatives  NodeTraversal  t  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  firstType  lastType  relatedType  subType  topType  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[buglab_swap_variables]^T topType = typeSystem.getTypeWithProperty ( prop.name.name, type ) ;^460^^^^^442^467^T topType = typeSystem.getTypeWithProperty ( prop.name, type ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] processProperty [RETURN_TYPE] T   NodeTraversal t Property prop T type T relatedType [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  Iterable  alternatives  NodeTraversal  t  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  firstType  lastType  relatedType  subType  topType  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[buglab_swap_variables]^T topType = prop.nameSystem.getTypeWithProperty ( type, type ) ;^460^^^^^442^467^T topType = typeSystem.getTypeWithProperty ( prop.name, type ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] processProperty [RETURN_TYPE] T   NodeTraversal t Property prop T type T relatedType [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  Iterable  alternatives  NodeTraversal  t  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  firstType  lastType  relatedType  subType  topType  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[buglab_swap_variables]^prop.addType ( topType, type, relatedType ) ;^464^^^^^442^467^prop.addType ( type, topType, relatedType ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] processProperty [RETURN_TYPE] T   NodeTraversal t Property prop T type T relatedType [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  Iterable  alternatives  NodeTraversal  t  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  firstType  lastType  relatedType  subType  topType  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[buglab_swap_variables]^prop.addType ( type, relatedType, topType ) ;^464^^^^^442^467^prop.addType ( type, topType, relatedType ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] processProperty [RETURN_TYPE] T   NodeTraversal t Property prop T type T relatedType [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  Iterable  alternatives  NodeTraversal  t  UnionFind  types  String  field  name  Logger  logger  TightenTypes  tt  int  count  nextUniqueId  originalTypesSize  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  firstType  lastType  relatedType  subType  topType  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  properties  rootTypes  Property  prop  
[buglab_swap_variables]^if  ( prop.skipRenaming.skipRenaming )  {^494^^^^^476^499^if  ( prop.skipRenaming )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] renameProperties [RETURN_TYPE] void   [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  Node  node  UnionFind  types  String  field  name  newName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  rootTypes  Property  prop  
[buglab_swap_variables]^if  ( prop )  {^494^^^^^476^499^if  ( prop.skipRenaming )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] renameProperties [RETURN_TYPE] void   [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  Node  node  UnionFind  types  String  field  name  newName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  rootTypes  Property  prop  
[buglab_swap_variables]^String newName = rootType.get ( propNames ) ;^485^^^^^470^500^String newName = propNames.get ( rootType ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] renameProperties [RETURN_TYPE] void   [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  Node  node  UnionFind  types  String  field  name  newName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  rootTypes  Property  prop  
[buglab_swap_variables]^Map<T, String> prop.nameNames = buildPropNames ( prop.getTypes (  ) , prop ) ;^477^^^^^462^492^Map<T, String> propNames = buildPropNames ( prop.getTypes (  ) , prop.name ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] renameProperties [RETURN_TYPE] void   [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  Node  node  UnionFind  types  String  field  name  newName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  rootTypes  Property  prop  
[buglab_swap_variables]^Map<T, String> propNames = buildPropNames ( prop.getTypes (  ) .name ) ;^477^^^^^462^492^Map<T, String> propNames = buildPropNames ( prop.getTypes (  ) , prop.name ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] renameProperties [RETURN_TYPE] void   [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  Node  node  UnionFind  types  String  field  name  newName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  rootTypes  Property  prop  
[buglab_swap_variables]^Map<T, String> propNames = buildPropNames ( prop.getTypes (  )  ) ;^477^^^^^462^492^Map<T, String> propNames = buildPropNames ( prop.getTypes (  ) , prop.name ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] renameProperties [RETURN_TYPE] void   [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  Node  node  UnionFind  types  String  field  name  newName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  rootTypes  Property  prop  
[buglab_swap_variables]^T rootType = node.rootTypes.get ( prop ) ;^483^^^^^468^498^T rootType = prop.rootTypes.get ( node ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] renameProperties [RETURN_TYPE] void   [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  Node  node  UnionFind  types  String  field  name  newName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  rootTypes  Property  prop  
[buglab_swap_variables]^T rootType = node.get ( prop.rootTypes ) ;^483^^^^^468^498^T rootType = prop.rootTypes.get ( node ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] renameProperties [RETURN_TYPE] void   [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  Node  node  UnionFind  types  String  field  name  newName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  rootTypes  Property  prop  
[buglab_swap_variables]^T rootType = prop.rootTypes.rootTypes.get ( node ) ;^483^^^^^468^498^T rootType = prop.rootTypes.get ( node ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] renameProperties [RETURN_TYPE] void   [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  Node  node  UnionFind  types  String  field  name  newName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  rootTypes  Property  prop  
[buglab_swap_variables]^T rootType = prop.get ( node ) ;^483^^^^^468^498^T rootType = prop.rootTypes.get ( node ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] renameProperties [RETURN_TYPE] void   [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  Node  node  UnionFind  types  String  field  name  newName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  rootTypes  Property  prop  
[buglab_swap_variables]^if  ( rootType.shouldRename ( prop )  )  {^484^^^^^469^499^if  ( prop.shouldRename ( rootType )  )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] renameProperties [RETURN_TYPE] void   [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  Node  node  UnionFind  types  String  field  name  newName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  rootTypes  Property  prop  
[buglab_swap_variables]^if  ( prop.skipRenaming.skipRenaming )  {^494^^^^^479^509^if  ( prop.skipRenaming )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] renameProperties [RETURN_TYPE] void   [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  Node  node  UnionFind  types  String  field  name  newName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  rootTypes  Property  prop  
[buglab_swap_variables]^if  ( prop )  {^494^^^^^479^509^if  ( prop.skipRenaming )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] renameProperties [RETURN_TYPE] void   [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  Node  node  UnionFind  types  String  field  name  newName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  rootTypes  Property  prop  
[buglab_swap_variables]^logger.info ( "Renamed " + propsRenamed + " instances of " + instancesRenamed + " properties." ) ;^501^502^^^^486^516^logger.info ( "Renamed " + instancesRenamed + " instances of " + propsRenamed + " properties." ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] renameProperties [RETURN_TYPE] void   [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  Node  node  UnionFind  types  String  field  name  newName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  rootTypes  Property  prop  
[buglab_swap_variables]^logger.info ( "Skipped renaming " + singleTypeProps + " invalidated " + "properties, " + propsSkipped + " instances of properties " + "that were skipped for specific types and " + instancesSkipped + " properties that were referenced from only one type." ) ;^503^504^505^506^^488^518^logger.info ( "Skipped renaming " + instancesSkipped + " invalidated " + "properties, " + propsSkipped + " instances of properties " + "that were skipped for specific types and " + singleTypeProps + " properties that were referenced from only one type." ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] renameProperties [RETURN_TYPE] void   [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  Node  node  UnionFind  types  String  field  name  newName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  rootTypes  Property  prop  
[buglab_swap_variables]^logger.info ( "Skipped renaming " + instancesSkipped + " invalidated " + "properties, " + singleTypeProps + " instances of properties " + "that were skipped for specific types and " + propsSkipped + " properties that were referenced from only one type." ) ;^503^504^505^506^^488^518^logger.info ( "Skipped renaming " + instancesSkipped + " invalidated " + "properties, " + propsSkipped + " instances of properties " + "that were skipped for specific types and " + singleTypeProps + " properties that were referenced from only one type." ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] renameProperties [RETURN_TYPE] void   [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  Node  node  UnionFind  types  String  field  name  newName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  rootTypes  Property  prop  
[buglab_swap_variables]^if  ( type == null || typeName.toString (  ) .compareTo ( typeName )  < 0 )  {^520^^^^^513^537^if  ( typeName == null || type.toString (  ) .compareTo ( typeName )  < 0 )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] buildPropNames [RETURN_TYPE] Map   UnionFind<T> types String name [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  typesToSkip  UnionFind  types  String  field  name  newName  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[buglab_swap_variables]^if  ( typeNameName == null || type.toString (  ) .compareTo ( type )  < 0 )  {^520^^^^^513^537^if  ( typeName == null || type.toString (  ) .compareTo ( typeName )  < 0 )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] buildPropNames [RETURN_TYPE] Map   UnionFind<T> types String name [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  typesToSkip  UnionFind  types  String  field  name  newName  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[buglab_swap_variables]^newName = name.replaceAll ( "[^\\w$]", "_" )  + "$" + typeName;^529^^^^^513^537^newName = typeName.replaceAll ( "[^\\w$]", "_" )  + "$" + name;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] buildPropNames [RETURN_TYPE] Map   UnionFind<T> types String name [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  typesToSkip  UnionFind  types  String  field  name  newName  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[buglab_swap_variables]^names.put ( newName, type ) ;^533^^^^^513^537^names.put ( type, newName ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] buildPropNames [RETURN_TYPE] Map   UnionFind<T> types String name [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  typesToSkip  UnionFind  types  String  field  name  newName  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[buglab_swap_variables]^names.put (  newName ) ;^533^^^^^513^537^names.put ( type, newName ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] buildPropNames [RETURN_TYPE] Map   UnionFind<T> types String name [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  typesToSkip  UnionFind  types  String  field  name  newName  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[buglab_swap_variables]^names.put ( type ) ;^533^^^^^513^537^names.put ( type, newName ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] buildPropNames [RETURN_TYPE] Map   UnionFind<T> types String name [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  typesToSkip  UnionFind  types  String  field  name  newName  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  T  type  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[buglab_swap_variables]^ret.put ( entry.getKey (  )  ) ;^547^^^^^540^553^ret.put ( entry.getKey (  ) , c ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getRenamedTypesForTesting [RETURN_TYPE] Multimap   [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  typesToSkip  UnionFind  types  String  field  name  newName  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  Multimap  ret  AbstractCompiler  compiler  JSTypeRegistry  registry  Entry  entry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Collection  c  Map  names  propNames  properties  rootTypes  Property  prop  
[buglab_swap_variables]^ret.put ( c.getKey (  ) , entry ) ;^547^^^^^540^553^ret.put ( entry.getKey (  ) , c ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getRenamedTypesForTesting [RETURN_TYPE] Multimap   [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  typesToSkip  UnionFind  types  String  field  name  newName  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  Multimap  ret  AbstractCompiler  compiler  JSTypeRegistry  registry  Entry  entry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Collection  c  Map  names  propNames  properties  rootTypes  Property  prop  
[buglab_swap_variables]^if  ( invalidatingTypes == null || type.contains ( type )  || ( type.isNamedType (  )  && type.isUnknownType (  )  )  )  {^671^672^^^^670^678^if  ( type == null || invalidatingTypes.contains ( type )  || ( type.isNamedType (  )  && type.isUnknownType (  )  )  )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] isInvalidatingType [RETURN_TYPE] boolean   JSType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  typesToSkip  JSType  type  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ObjectType  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[buglab_swap_variables]^: objType.getDirectImplementors ( registry )  )  {^726^^^^^716^734^: registry.getDirectImplementors ( objType )  )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getTypeAlternatives [RETURN_TYPE] Iterable   JSType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  type  FunctionType  impl  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ObjectType  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  List  list  Map  names  propNames  properties  rootTypes  
[buglab_swap_variables]^if  ( field.hasOwnProperty ( objType )  )  {^751^^^^^736^757^if  ( objType.hasOwnProperty ( field )  )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getTypeWithProperty [RETURN_TYPE] JSType   String field JSType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  type  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ObjectType  foundType  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[buglab_swap_variables]^recordInterfaces ( relatedType, itype, p ) ;^790^^^^^787^791^recordInterfaces ( itype, relatedType, p ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] recordInterfaces [RETURN_TYPE] void   JSType type JSType relatedType Property p [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  relatedType  top  type  FunctionType  constructor  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ObjectType  itype  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  Property  p  
[buglab_swap_variables]^recordInterfaces (  relatedType, p ) ;^790^^^^^787^791^recordInterfaces ( itype, relatedType, p ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] recordInterfaces [RETURN_TYPE] void   JSType type JSType relatedType Property p [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  relatedType  top  type  FunctionType  constructor  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ObjectType  itype  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  Property  p  
[buglab_swap_variables]^recordInterfaces ( itype, p, relatedType ) ;^790^^^^^787^791^recordInterfaces ( itype, relatedType, p ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] recordInterfaces [RETURN_TYPE] void   JSType type JSType relatedType Property p [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  relatedType  top  type  FunctionType  constructor  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ObjectType  itype  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  Property  p  
[buglab_swap_variables]^recordInterfaces ( itype,  p ) ;^790^^^^^787^791^recordInterfaces ( itype, relatedType, p ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] recordInterfaces [RETURN_TYPE] void   JSType type JSType relatedType Property p [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  relatedType  top  type  FunctionType  constructor  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ObjectType  itype  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  Property  p  
[buglab_swap_variables]^recordInterfaces ( itype, relatedType ) ;^790^^^^^787^791^recordInterfaces ( itype, relatedType, p ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] recordInterfaces [RETURN_TYPE] void   JSType type JSType relatedType Property p [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  relatedType  top  type  FunctionType  constructor  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ObjectType  itype  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  Property  p  
[buglab_swap_variables]^p.addType ( itype, to relatedType ) ;^788^^^^^773^803^p.addType ( itype, top, relatedType ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] recordInterfaces [RETURN_TYPE] void   JSType type JSType relatedType Property p [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  relatedType  top  type  FunctionType  constructor  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ObjectType  itype  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  Property  p  
[buglab_swap_variables]^p.addType (  top, relatedType ) ;^788^^^^^773^803^p.addType ( itype, top, relatedType ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] recordInterfaces [RETURN_TYPE] void   JSType type JSType relatedType Property p [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  relatedType  top  type  FunctionType  constructor  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ObjectType  itype  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  Property  p  
[buglab_swap_variables]^p.addType ( itype, relatedType, top ) ;^788^^^^^773^803^p.addType ( itype, top, relatedType ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] recordInterfaces [RETURN_TYPE] void   JSType type JSType relatedType Property p [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  relatedType  top  type  FunctionType  constructor  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ObjectType  itype  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  Property  p  
[buglab_swap_variables]^p.addType ( itype,  relatedType ) ;^788^^^^^773^803^p.addType ( itype, top, relatedType ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] recordInterfaces [RETURN_TYPE] void   JSType type JSType relatedType Property p [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  relatedType  top  type  FunctionType  constructor  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ObjectType  itype  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  Property  p  
[buglab_swap_variables]^p.addType ( itype, top ) ;^788^^^^^773^803^p.addType ( itype, top, relatedType ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] recordInterfaces [RETURN_TYPE] void   JSType type JSType relatedType Property p [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  relatedType  top  type  FunctionType  constructor  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ObjectType  itype  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  Property  p  
[buglab_swap_variables]^p.addType ( top, itype, relatedType ) ;^788^^^^^773^803^p.addType ( itype, top, relatedType ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] recordInterfaces [RETURN_TYPE] void   JSType type JSType relatedType Property p [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  relatedType  top  type  FunctionType  constructor  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ObjectType  itype  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  Property  p  
[buglab_swap_variables]^recordInterfaces ( p, relatedType, itype ) ;^790^^^^^773^803^recordInterfaces ( itype, relatedType, p ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] recordInterfaces [RETURN_TYPE] void   JSType type JSType relatedType Property p [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  relatedType  top  type  FunctionType  constructor  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ObjectType  itype  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  Property  p  
[buglab_swap_variables]^recordInterfaces (  relatedType, p ) ;^790^^^^^773^803^recordInterfaces ( itype, relatedType, p ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] recordInterfaces [RETURN_TYPE] void   JSType type JSType relatedType Property p [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  relatedType  top  type  FunctionType  constructor  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ObjectType  itype  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  Property  p  
[buglab_swap_variables]^recordInterfaces ( relatedType, itype, p ) ;^790^^^^^773^803^recordInterfaces ( itype, relatedType, p ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] recordInterfaces [RETURN_TYPE] void   JSType type JSType relatedType Property p [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  relatedType  top  type  FunctionType  constructor  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ObjectType  itype  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  Property  p  
[buglab_swap_variables]^recordInterfaces ( itype,  p ) ;^790^^^^^773^803^recordInterfaces ( itype, relatedType, p ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] recordInterfaces [RETURN_TYPE] void   JSType type JSType relatedType Property p [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  relatedType  top  type  FunctionType  constructor  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ObjectType  itype  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  Property  p  
[buglab_swap_variables]^recordInterfaces ( itype, relatedType ) ;^790^^^^^773^803^recordInterfaces ( itype, relatedType, p ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] recordInterfaces [RETURN_TYPE] void   JSType type JSType relatedType Property p [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  relatedType  top  type  FunctionType  constructor  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ObjectType  itype  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  Property  p  
[buglab_swap_variables]^recordInterfaces ( p, relatedType, itype ) ;^790^^^^^787^791^recordInterfaces ( itype, relatedType, p ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] recordInterfaces [RETURN_TYPE] void   JSType type JSType relatedType Property p [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  relatedType  top  type  FunctionType  constructor  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ObjectType  itype  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  Property  p  
[buglab_swap_variables]^p.addType ( relatedType, top, itype ) ;^788^^^^^773^803^p.addType ( itype, top, relatedType ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] recordInterfaces [RETURN_TYPE] void   JSType type JSType relatedType Property p [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  relatedType  top  type  FunctionType  constructor  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ObjectType  itype  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  Property  p  
[buglab_swap_variables]^recordInterfaces ( itype, p, relatedType ) ;^790^^^^^773^803^recordInterfaces ( itype, relatedType, p ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] recordInterfaces [RETURN_TYPE] void   JSType type JSType relatedType Property p [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  relatedType  top  type  FunctionType  constructor  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ObjectType  itype  objType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  Property  p  
[buglab_swap_variables]^ConcreteFunctionType func = decl.getConcreteFunction ( tt ) ;^836^^^^^835^839^ConcreteFunctionType func = tt.getConcreteFunction ( decl ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getFunctionScope [RETURN_TYPE] StaticScope   Node decl [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  Node  decl  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ConcreteFunctionType  func  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[buglab_swap_variables]^return maybeAddAutoboxes ( prop, node, c ) ;^847^^^^^842^851^return maybeAddAutoboxes ( c, node, prop ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getType [RETURN_TYPE] ConcreteType   ConcreteType> scope Node node String prop [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  StaticScope  scope  Node  node  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  ConcreteType  c  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[buglab_swap_variables]^return maybeAddAutoboxes (  node, prop ) ;^847^^^^^842^851^return maybeAddAutoboxes ( c, node, prop ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getType [RETURN_TYPE] ConcreteType   ConcreteType> scope Node node String prop [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  StaticScope  scope  Node  node  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  ConcreteType  c  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[buglab_swap_variables]^return maybeAddAutoboxes ( node, c, prop ) ;^847^^^^^842^851^return maybeAddAutoboxes ( c, node, prop ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getType [RETURN_TYPE] ConcreteType   ConcreteType> scope Node node String prop [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  StaticScope  scope  Node  node  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  ConcreteType  c  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[buglab_swap_variables]^return maybeAddAutoboxes ( c,  prop ) ;^847^^^^^842^851^return maybeAddAutoboxes ( c, node, prop ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getType [RETURN_TYPE] ConcreteType   ConcreteType> scope Node node String prop [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  StaticScope  scope  Node  node  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  ConcreteType  c  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[buglab_swap_variables]^return maybeAddAutoboxes ( c, node ) ;^847^^^^^842^851^return maybeAddAutoboxes ( c, node, prop ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getType [RETURN_TYPE] ConcreteType   ConcreteType> scope Node node String prop [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  StaticScope  scope  Node  node  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  ConcreteType  c  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[buglab_swap_variables]^ConcreteType c = tt.inferConcreteType ( ( TightenTypes.ConcreteScope )  scope ) ;^845^846^^^^842^851^ConcreteType c = tt.inferConcreteType ( ( TightenTypes.ConcreteScope )  scope, node ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getType [RETURN_TYPE] ConcreteType   ConcreteType> scope Node node String prop [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  StaticScope  scope  Node  node  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  ConcreteType  c  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[buglab_swap_variables]^return maybeAddAutoboxes ( c, prop, node ) ;^847^^^^^842^851^return maybeAddAutoboxes ( c, node, prop ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getType [RETURN_TYPE] ConcreteType   ConcreteType> scope Node node String prop [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  StaticScope  scope  Node  node  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  ConcreteType  c  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[buglab_swap_variables]^ConcreteType c = node.inferConcreteType ( ( TightenTypes.ConcreteScope )  scope, tt ) ;^845^846^^^^842^851^ConcreteType c = tt.inferConcreteType ( ( TightenTypes.ConcreteScope )  scope, node ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getType [RETURN_TYPE] ConcreteType   ConcreteType> scope Node node String prop [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  StaticScope  scope  Node  node  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  ConcreteType  c  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[buglab_swap_variables]^if  ( prop != null && !concrete.getPropertyType ( concrete ) .isNone (  )  )  {^867^^^^^858^875^if  ( concrete != null && !concrete.getPropertyType ( prop ) .isNone (  )  )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] maybeAddAutoboxes [RETURN_TYPE] ConcreteType   ConcreteType cType Node node String prop [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  jsType  Node  node  UnionFind  types  String  field  name  newName  prop  typeName  JSTypeNative  nativeType  Logger  logger  ConcreteType  cType  concrete  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[buglab_swap_variables]^cType = concrete.unionWith ( cType ) ;^868^^^^^858^875^cType = cType.unionWith ( concrete ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] maybeAddAutoboxes [RETURN_TYPE] ConcreteType   ConcreteType cType Node node String prop [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  jsType  Node  node  UnionFind  types  String  field  name  newName  prop  typeName  JSTypeNative  nativeType  Logger  logger  ConcreteType  cType  concrete  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[buglab_swap_variables]^ConcreteType concrete = nativeType.getConcreteInstance ( tt.getTypeRegistry (  ) .getNativeObjectType ( tt )  ) ;^865^866^^^^858^875^ConcreteType concrete = tt.getConcreteInstance ( tt.getTypeRegistry (  ) .getNativeObjectType ( nativeType )  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] maybeAddAutoboxes [RETURN_TYPE] ConcreteType   ConcreteType cType Node node String prop [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  jsType  Node  node  UnionFind  types  String  field  name  newName  prop  typeName  JSTypeNative  nativeType  Logger  logger  ConcreteType  cType  concrete  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[buglab_swap_variables]^return maybeAddAutoboxes ( jsType, cType, prop ) ;^874^^^^^858^875^return maybeAddAutoboxes ( cType, jsType, prop ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] maybeAddAutoboxes [RETURN_TYPE] ConcreteType   ConcreteType cType Node node String prop [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  jsType  Node  node  UnionFind  types  String  field  name  newName  prop  typeName  JSTypeNative  nativeType  Logger  logger  ConcreteType  cType  concrete  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[buglab_swap_variables]^return maybeAddAutoboxes (  jsType, prop ) ;^874^^^^^858^875^return maybeAddAutoboxes ( cType, jsType, prop ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] maybeAddAutoboxes [RETURN_TYPE] ConcreteType   ConcreteType cType Node node String prop [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  jsType  Node  node  UnionFind  types  String  field  name  newName  prop  typeName  JSTypeNative  nativeType  Logger  logger  ConcreteType  cType  concrete  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[buglab_swap_variables]^return maybeAddAutoboxes ( cType,  prop ) ;^874^^^^^858^875^return maybeAddAutoboxes ( cType, jsType, prop ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] maybeAddAutoboxes [RETURN_TYPE] ConcreteType   ConcreteType cType Node node String prop [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  jsType  Node  node  UnionFind  types  String  field  name  newName  prop  typeName  JSTypeNative  nativeType  Logger  logger  ConcreteType  cType  concrete  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[buglab_swap_variables]^return maybeAddAutoboxes ( prop, jsType, cType ) ;^874^^^^^858^875^return maybeAddAutoboxes ( cType, jsType, prop ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] maybeAddAutoboxes [RETURN_TYPE] ConcreteType   ConcreteType cType Node node String prop [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  jsType  Node  node  UnionFind  types  String  field  name  newName  prop  typeName  JSTypeNative  nativeType  Logger  logger  ConcreteType  cType  concrete  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[buglab_swap_variables]^return maybeAddAutoboxes ( cType, jsType ) ;^874^^^^^858^875^return maybeAddAutoboxes ( cType, jsType, prop ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] maybeAddAutoboxes [RETURN_TYPE] ConcreteType   ConcreteType cType Node node String prop [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  jsType  Node  node  UnionFind  types  String  field  name  newName  prop  typeName  JSTypeNative  nativeType  Logger  logger  ConcreteType  cType  concrete  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[buglab_swap_variables]^return maybeAddAutoboxes ( cType, prop, jsType ) ;^874^^^^^858^875^return maybeAddAutoboxes ( cType, jsType, prop ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] maybeAddAutoboxes [RETURN_TYPE] ConcreteType   ConcreteType cType Node node String prop [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  jsType  Node  node  UnionFind  types  String  field  name  newName  prop  typeName  JSTypeNative  nativeType  Logger  logger  ConcreteType  cType  concrete  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[buglab_swap_variables]^return maybeAddAutoboxes ( alt, cType, prop ) ;^882^^^^^877^894^return maybeAddAutoboxes ( cType, alt, prop ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] maybeAddAutoboxes [RETURN_TYPE] ConcreteType   ConcreteType cType JSType jsType String prop [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  alt  autoboxed  jsType  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  ConcreteType  cType  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[buglab_swap_variables]^return maybeAddAutoboxes (  alt, prop ) ;^882^^^^^877^894^return maybeAddAutoboxes ( cType, alt, prop ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] maybeAddAutoboxes [RETURN_TYPE] ConcreteType   ConcreteType cType JSType jsType String prop [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  alt  autoboxed  jsType  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  ConcreteType  cType  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[buglab_swap_variables]^return maybeAddAutoboxes ( cType, prop, alt ) ;^882^^^^^877^894^return maybeAddAutoboxes ( cType, alt, prop ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] maybeAddAutoboxes [RETURN_TYPE] ConcreteType   ConcreteType cType JSType jsType String prop [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  alt  autoboxed  jsType  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  ConcreteType  cType  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[buglab_swap_variables]^return maybeAddAutoboxes ( cType,  prop ) ;^882^^^^^877^894^return maybeAddAutoboxes ( cType, alt, prop ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] maybeAddAutoboxes [RETURN_TYPE] ConcreteType   ConcreteType cType JSType jsType String prop [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  alt  autoboxed  jsType  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  ConcreteType  cType  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[buglab_swap_variables]^return maybeAddAutoboxes ( cType, alt ) ;^882^^^^^877^894^return maybeAddAutoboxes ( cType, alt, prop ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] maybeAddAutoboxes [RETURN_TYPE] ConcreteType   ConcreteType cType JSType jsType String prop [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  alt  autoboxed  jsType  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  ConcreteType  cType  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[buglab_swap_variables]^return maybeAddAutoboxes ( prop, alt, cType ) ;^882^^^^^877^894^return maybeAddAutoboxes ( cType, alt, prop ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] maybeAddAutoboxes [RETURN_TYPE] ConcreteType   ConcreteType cType JSType jsType String prop [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  alt  autoboxed  jsType  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  ConcreteType  cType  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[buglab_swap_variables]^return tt.unionWith ( cType.getConcreteInstance (  ( ObjectType )  jsType )  ) ;^890^^^^^877^894^return cType.unionWith ( tt.getConcreteInstance (  ( ObjectType )  jsType )  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] maybeAddAutoboxes [RETURN_TYPE] ConcreteType   ConcreteType cType JSType jsType String prop [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  alt  autoboxed  jsType  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  ConcreteType  cType  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[buglab_swap_variables]^return tt.unionWith ( cType.getConcreteInstance (  ( ObjectType )  autoboxed )  ) ;^888^^^^^877^894^return cType.unionWith ( tt.getConcreteInstance (  ( ObjectType )  autoboxed )  ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] maybeAddAutoboxes [RETURN_TYPE] ConcreteType   ConcreteType cType JSType jsType String prop [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  JSType  alt  autoboxed  jsType  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  ConcreteType  cType  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[buglab_swap_variables]^} else if  ( typeype.isFunction (  )  )  {^936^^^^^931^956^} else if  ( type.isFunction (  )  )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getTypeWithProperty [RETURN_TYPE] ConcreteType   String field ConcreteType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  ConcreteType  ret  t  type  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ConcreteInstanceType  instanceType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[buglab_swap_variables]^ConcreteType ret = getTypeWithProperty ( t, field ) ;^949^^^^^931^956^ConcreteType ret = getTypeWithProperty ( field, t ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getTypeWithProperty [RETURN_TYPE] ConcreteType   String field ConcreteType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  ConcreteType  ret  t  type  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ConcreteInstanceType  instanceType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[buglab_swap_variables]^ConcreteType ret = getTypeWithProperty (  t ) ;^949^^^^^931^956^ConcreteType ret = getTypeWithProperty ( field, t ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getTypeWithProperty [RETURN_TYPE] ConcreteType   String field ConcreteType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  ConcreteType  ret  t  type  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ConcreteInstanceType  instanceType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[buglab_swap_variables]^ConcreteType ret = getTypeWithProperty ( field ) ;^949^^^^^931^956^ConcreteType ret = getTypeWithProperty ( field, t ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getTypeWithProperty [RETURN_TYPE] ConcreteType   String field ConcreteType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  ConcreteType  ret  t  type  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ConcreteInstanceType  instanceType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[buglab_swap_variables]^if  ( "prototype".equals ( codingConvention ) || field.isSuperClassReference ( field )  )  {^937^938^^^^931^956^if  ( "prototype".equals ( field ) || codingConvention.isSuperClassReference ( field )  )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getTypeWithProperty [RETURN_TYPE] ConcreteType   String field ConcreteType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  ConcreteType  ret  t  type  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ConcreteInstanceType  instanceType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[buglab_swap_variables]^|| field.isSuperClassReference ( codingConvention )  )  {^938^^^^^931^956^|| codingConvention.isSuperClassReference ( field )  )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getTypeWithProperty [RETURN_TYPE] ConcreteType   String field ConcreteType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  ConcreteType  ret  t  type  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ConcreteInstanceType  instanceType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[buglab_swap_variables]^return field.getInstanceTypeWithProperty ( instanceType ) ;^935^^^^^931^956^return instanceType.getInstanceTypeWithProperty ( field ) ;^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getTypeWithProperty [RETURN_TYPE] ConcreteType   String field ConcreteType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  ConcreteType  ret  t  type  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ConcreteInstanceType  instanceType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[buglab_swap_variables]^} else if  ( t.isFunction (  )  )  {^936^^^^^931^956^} else if  ( type.isFunction (  )  )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getTypeWithProperty [RETURN_TYPE] ConcreteType   String field ConcreteType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  ConcreteType  ret  t  type  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ConcreteInstanceType  instanceType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[buglab_swap_variables]^} else if  ( t.isNone (  )  )  {^941^^^^^931^956^} else if  ( type.isNone (  )  )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getTypeWithProperty [RETURN_TYPE] ConcreteType   String field ConcreteType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  ConcreteType  ret  t  type  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ConcreteInstanceType  instanceType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[buglab_swap_variables]^} else if  ( t.isUnion (  )  )  {^946^^^^^931^956^} else if  ( type.isUnion (  )  )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getTypeWithProperty [RETURN_TYPE] ConcreteType   String field ConcreteType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  ConcreteType  ret  t  type  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ConcreteInstanceType  instanceType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[buglab_swap_variables]^} else if  ( typeype.isUnion (  )  )  {^946^^^^^931^956^} else if  ( type.isUnion (  )  )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getTypeWithProperty [RETURN_TYPE] ConcreteType   String field ConcreteType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  ConcreteType  ret  t  type  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ConcreteInstanceType  instanceType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[buglab_swap_variables]^} else if  ( typeype.isNone (  )  )  {^941^^^^^931^956^} else if  ( type.isNone (  )  )  {^[CLASS] DisambiguateProperties Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [METHOD] getTypeWithProperty [RETURN_TYPE] ConcreteType   String field ConcreteType type [VARIABLES] TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  rootTypesToSkip  set  types  typesToSkip  UnionFind  types  String  field  name  newName  prop  typeName  Logger  logger  ConcreteType  ret  t  type  TightenTypes  tt  int  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  Stack  scopes  ConcreteInstanceType  instanceType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  showInvalidationWarnings  skipRenaming  DiagnosticType  INVALIDATION  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  names  propNames  properties  rootTypes  
[buglab_swap_variables]^checkState ( ! "Attempt to record skipped property: %s", name ) ;^139^^^^^138^156^checkState ( !skipRenaming, "Attempt to record skipped property: %s", name ) ;^[CLASS] Property  [METHOD] addType [RETURN_TYPE] boolean   T type T top T relatedType [VARIABLES] UnionFind  types  Set  renameNodes  typesToSkip  boolean  skipRenaming  String  name  T  relatedType  top  type  Map  rootTypes  
[buglab_swap_variables]^checkState ( !skipRenaming, "Attempt to record skipped property: %s" ) ;^139^^^^^138^156^checkState ( !skipRenaming, "Attempt to record skipped property: %s", name ) ;^[CLASS] Property  [METHOD] addType [RETURN_TYPE] boolean   T type T top T relatedType [VARIABLES] UnionFind  types  Set  renameNodes  typesToSkip  boolean  skipRenaming  String  name  T  relatedType  top  type  Map  rootTypes  
[buglab_swap_variables]^if  ( topSystem.isInvalidatingType ( type )  )  {^140^^^^^138^156^if  ( typeSystem.isInvalidatingType ( top )  )  {^[CLASS] Property  [METHOD] addType [RETURN_TYPE] boolean   T type T top T relatedType [VARIABLES] UnionFind  types  Set  renameNodes  typesToSkip  boolean  skipRenaming  String  name  T  relatedType  top  type  Map  rootTypes  
[buglab_swap_variables]^if  ( top.isTypeToSkip ( typeSystem )  )  {^144^^^^^138^156^if  ( typeSystem.isTypeToSkip ( top )  )  {^[CLASS] Property  [METHOD] addType [RETURN_TYPE] boolean   T type T top T relatedType [VARIABLES] UnionFind  types  Set  renameNodes  typesToSkip  boolean  skipRenaming  String  name  T  relatedType  top  type  Map  rootTypes  
[buglab_swap_variables]^getTypes (  ) .union ( relatedType, top ) ;^151^^^^^138^156^getTypes (  ) .union ( top, relatedType ) ;^[CLASS] Property  [METHOD] addType [RETURN_TYPE] boolean   T type T top T relatedType [VARIABLES] UnionFind  types  Set  renameNodes  typesToSkip  boolean  skipRenaming  String  name  T  relatedType  top  type  Map  rootTypes  
[buglab_swap_variables]^getTypes (  ) .union (  relatedType ) ;^151^^^^^138^156^getTypes (  ) .union ( top, relatedType ) ;^[CLASS] Property  [METHOD] addType [RETURN_TYPE] boolean   T type T top T relatedType [VARIABLES] UnionFind  types  Set  renameNodes  typesToSkip  boolean  skipRenaming  String  name  T  relatedType  top  type  Map  rootTypes  
[buglab_swap_variables]^getTypes (  ) .union ( top ) ;^151^^^^^138^156^getTypes (  ) .union ( top, relatedType ) ;^[CLASS] Property  [METHOD] addType [RETURN_TYPE] boolean   T type T top T relatedType [VARIABLES] UnionFind  types  Set  renameNodes  typesToSkip  boolean  skipRenaming  String  name  T  relatedType  top  type  Map  rootTypes  
[buglab_swap_variables]^typeSystem.recordInterfaces ( top, type, this ) ;^153^^^^^138^156^typeSystem.recordInterfaces ( type, top, this ) ;^[CLASS] Property  [METHOD] addType [RETURN_TYPE] boolean   T type T top T relatedType [VARIABLES] UnionFind  types  Set  renameNodes  typesToSkip  boolean  skipRenaming  String  name  T  relatedType  top  type  Map  rootTypes  
[buglab_swap_variables]^typeSystem.recordInterfaces (  top, this ) ;^153^^^^^138^156^typeSystem.recordInterfaces ( type, top, this ) ;^[CLASS] Property  [METHOD] addType [RETURN_TYPE] boolean   T type T top T relatedType [VARIABLES] UnionFind  types  Set  renameNodes  typesToSkip  boolean  skipRenaming  String  name  T  relatedType  top  type  Map  rootTypes  
[buglab_swap_variables]^typeSystem.recordInterfaces ( type,  this ) ;^153^^^^^138^156^typeSystem.recordInterfaces ( type, top, this ) ;^[CLASS] Property  [METHOD] addType [RETURN_TYPE] boolean   T type T top T relatedType [VARIABLES] UnionFind  types  Set  renameNodes  typesToSkip  boolean  skipRenaming  String  name  T  relatedType  top  type  Map  rootTypes  
[buglab_swap_variables]^if  ( top.isInvalidatingType ( typeSystem )  )  {^140^^^^^138^156^if  ( typeSystem.isInvalidatingType ( top )  )  {^[CLASS] Property  [METHOD] addType [RETURN_TYPE] boolean   T type T top T relatedType [VARIABLES] UnionFind  types  Set  renameNodes  typesToSkip  boolean  skipRenaming  String  name  T  relatedType  top  type  Map  rootTypes  
[buglab_swap_variables]^for  ( T skipType : typeSystemSystem.getTypesToSkipForType ( type )  )  {^160^^^^^159^164^for  ( T skipType : typeSystem.getTypesToSkipForType ( type )  )  {^[CLASS] Property  [METHOD] addTypeToSkip [RETURN_TYPE] void   T type [VARIABLES] UnionFind  types  Set  renameNodes  typesToSkip  boolean  skipRenaming  String  name  T  skipType  type  Map  rootTypes  
[buglab_swap_variables]^for  ( T skipType : type.getTypesToSkipForType ( typeSystem )  )  {^160^^^^^159^164^for  ( T skipType : typeSystem.getTypesToSkipForType ( type )  )  {^[CLASS] Property  [METHOD] addTypeToSkip [RETURN_TYPE] void   T type [VARIABLES] UnionFind  types  Set  renameNodes  typesToSkip  boolean  skipRenaming  String  name  T  skipType  type  Map  rootTypes  
[buglab_swap_variables]^getTypes (  ) .union ( type, skipType ) ;^162^^^^^159^164^getTypes (  ) .union ( skipType, type ) ;^[CLASS] Property  [METHOD] addTypeToSkip [RETURN_TYPE] void   T type [VARIABLES] UnionFind  types  Set  renameNodes  typesToSkip  boolean  skipRenaming  String  name  T  skipType  type  Map  rootTypes  
[buglab_swap_variables]^getTypes (  ) .union (  type ) ;^162^^^^^159^164^getTypes (  ) .union ( skipType, type ) ;^[CLASS] Property  [METHOD] addTypeToSkip [RETURN_TYPE] void   T type [VARIABLES] UnionFind  types  Set  renameNodes  typesToSkip  boolean  skipRenaming  String  name  T  skipType  type  Map  rootTypes  
[buglab_swap_variables]^getTypes (  ) .union ( skipType ) ;^162^^^^^159^164^getTypes (  ) .union ( skipType, type ) ;^[CLASS] Property  [METHOD] addTypeToSkip [RETURN_TYPE] void   T type [VARIABLES] UnionFind  types  Set  renameNodes  typesToSkip  boolean  skipRenaming  String  name  T  skipType  type  Map  rootTypes  
[buglab_swap_variables]^if  ( !typesToSkip.contains ( typesToSkip ) && subType.contains ( types.find ( subType )  )  )  {^188^189^^^^173^203^if  ( !typesToSkip.contains ( subType ) && typesToSkip.contains ( types.find ( subType )  )  )  {^[CLASS] Property  [METHOD] expandTypesToSkip [RETURN_TYPE] void   [VARIABLES] Set  allTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  boolean  skipRenaming  T  newType  subType  UnionFind  types  String  name  Map  rootTypes  int  count  originalTypesSize  
[buglab_swap_variables]^if  ( !typesToSkip.contains ( subType ) && types.contains ( typesToSkip.find ( subType )  )  )  {^188^189^^^^173^203^if  ( !typesToSkip.contains ( subType ) && typesToSkip.contains ( types.find ( subType )  )  )  {^[CLASS] Property  [METHOD] expandTypesToSkip [RETURN_TYPE] void   [VARIABLES] Set  allTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  boolean  skipRenaming  T  newType  subType  UnionFind  types  String  name  Map  rootTypes  int  count  originalTypesSize  
[buglab_swap_variables]^if  ( !typesToSkip.contains ( types ) && subTypeToSkip.contains ( types.find ( subType )  )  )  {^188^189^^^^173^203^if  ( !typesToSkip.contains ( subType ) && typesToSkip.contains ( types.find ( subType )  )  )  {^[CLASS] Property  [METHOD] expandTypesToSkip [RETURN_TYPE] void   [VARIABLES] Set  allTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  boolean  skipRenaming  T  newType  subType  UnionFind  types  String  name  Map  rootTypes  int  count  originalTypesSize  
[buglab_swap_variables]^if  ( originalTypesSize.elements (  ) .size (  )  == types )  {^199^^^^^184^214^if  ( types.elements (  ) .size (  )  == originalTypesSize )  {^[CLASS] Property  [METHOD] expandTypesToSkip [RETURN_TYPE] void   [VARIABLES] Set  allTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  boolean  skipRenaming  T  newType  subType  UnionFind  types  String  name  Map  rootTypes  int  count  originalTypesSize  
[buglab_swap_variables]^rootTypesToSkip.add ( subType.find ( types )  ) ;^180^^^^^165^195^rootTypesToSkip.add ( types.find ( subType )  ) ;^[CLASS] Property  [METHOD] expandTypesToSkip [RETURN_TYPE] void   [VARIABLES] Set  allTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  boolean  skipRenaming  T  newType  subType  UnionFind  types  String  name  Map  rootTypes  int  count  originalTypesSize  
[buglab_swap_variables]^&& subType.contains ( types.find ( typesToSkip )  )  )  {^189^^^^^174^204^&& typesToSkip.contains ( types.find ( subType )  )  )  {^[CLASS] Property  [METHOD] expandTypesToSkip [RETURN_TYPE] void   [VARIABLES] Set  allTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  boolean  skipRenaming  T  newType  subType  UnionFind  types  String  name  Map  rootTypes  int  count  originalTypesSize  
[buglab_swap_variables]^&& subTypeToSkip.contains ( types.find ( types )  )  )  {^189^^^^^174^204^&& typesToSkip.contains ( types.find ( subType )  )  )  {^[CLASS] Property  [METHOD] expandTypesToSkip [RETURN_TYPE] void   [VARIABLES] Set  allTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  boolean  skipRenaming  T  newType  subType  UnionFind  types  String  name  Map  rootTypes  int  count  originalTypesSize  
[buglab_swap_variables]^&& typesToSkipToSkip.contains ( types.find ( subType )  )  )  {^189^^^^^174^204^&& typesToSkip.contains ( types.find ( subType )  )  )  {^[CLASS] Property  [METHOD] expandTypesToSkip [RETURN_TYPE] void   [VARIABLES] Set  allTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  boolean  skipRenaming  T  newType  subType  UnionFind  types  String  name  Map  rootTypes  int  count  originalTypesSize  
[buglab_swap_variables]^&& types.contains ( typesToSkip.find ( subType )  )  )  {^189^^^^^174^204^&& typesToSkip.contains ( types.find ( subType )  )  )  {^[CLASS] Property  [METHOD] expandTypesToSkip [RETURN_TYPE] void   [VARIABLES] Set  allTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  boolean  skipRenaming  T  newType  subType  UnionFind  types  String  name  Map  rootTypes  int  count  originalTypesSize  
[buglab_swap_variables]^if  ( typeSystemSystem.isInvalidatingType ( type )  )  {^243^^^^^241^251^if  ( typeSystem.isInvalidatingType ( type )  )  {^[CLASS] Property  [METHOD] scheduleRenaming [RETURN_TYPE] boolean   Node node T type [VARIABLES] Set  allTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  boolean  changed  skipRenaming  T  type  Node  node  UnionFind  types  String  name  Map  rootTypes  
[buglab_swap_variables]^if  ( type.isInvalidatingType ( typeSystem )  )  {^243^^^^^241^251^if  ( typeSystem.isInvalidatingType ( type )  )  {^[CLASS] Property  [METHOD] scheduleRenaming [RETURN_TYPE] boolean   Node node T type [VARIABLES] Set  allTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  boolean  changed  skipRenaming  T  type  Node  node  UnionFind  types  String  name  Map  rootTypes  
[buglab_swap_variables]^rootTypes.put (  type ) ;^248^^^^^241^251^rootTypes.put ( node, type ) ;^[CLASS] Property  [METHOD] scheduleRenaming [RETURN_TYPE] boolean   Node node T type [VARIABLES] Set  allTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  boolean  changed  skipRenaming  T  type  Node  node  UnionFind  types  String  name  Map  rootTypes  
[buglab_swap_variables]^rootTypes.put ( node ) ;^248^^^^^241^251^rootTypes.put ( node, type ) ;^[CLASS] Property  [METHOD] scheduleRenaming [RETURN_TYPE] boolean   Node node T type [VARIABLES] Set  allTypes  newTypesToSkip  renameNodes  rootTypesToSkip  typesToSkip  boolean  changed  skipRenaming  T  type  Node  node  UnionFind  types  String  name  Map  rootTypes  
[buglab_swap_variables]^scopes.push ( typeSystemypeSystem.getFunctionScope ( t.getScopeRoot (  )  )  ) ;^336^^^^^332^338^scopes.push ( typeSystem.getFunctionScope ( t.getScopeRoot (  )  )  ) ;^[CLASS] AbstractScopingCallback  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] NodeTraversal  t  Stack  scopes  boolean  
[buglab_swap_variables]^scopes.push ( t.getFunctionScope ( typeSystem.getScopeRoot (  )  )  ) ;^336^^^^^332^338^scopes.push ( typeSystem.getFunctionScope ( t.getScopeRoot (  )  )  ) ;^[CLASS] AbstractScopingCallback  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] NodeTraversal  t  Stack  scopes  boolean  
[buglab_swap_variables]^if  (  ( typeSystem = type.getInstanceFromPrototype ( type )  )  != null )  {^368^^^^^355^374^if  (  ( type = typeSystem.getInstanceFromPrototype ( type )  )  != null )  {^[CLASS] FindExternProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  T  type  NodeTraversal  t  Node  n  parent  String  field  Property  prop  
[buglab_swap_variables]^T type = typeSystem.getType ( getScope (  ) , field.getFirstChild (  ) , n ) ;^358^^^^^355^374^T type = typeSystem.getType ( getScope (  ) , n.getFirstChild (  ) , field ) ;^[CLASS] FindExternProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  T  type  NodeTraversal  t  Node  n  parent  String  field  Property  prop  
[buglab_swap_variables]^T type = typeSystem.getType ( getScope (  ) .getFirstChild (  ) , field ) ;^358^^^^^355^374^T type = typeSystem.getType ( getScope (  ) , n.getFirstChild (  ) , field ) ;^[CLASS] FindExternProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  T  type  NodeTraversal  t  Node  n  parent  String  field  Property  prop  
[buglab_swap_variables]^T type = typeSystem.getType ( getScope (  ) , n.getFirstChild (  )  ) ;^358^^^^^355^374^T type = typeSystem.getType ( getScope (  ) , n.getFirstChild (  ) , field ) ;^[CLASS] FindExternProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  T  type  NodeTraversal  t  Node  n  parent  String  field  Property  prop  
[buglab_swap_variables]^T type = n.getType ( getScope (  ) , typeSystem.getFirstChild (  ) , field ) ;^358^^^^^355^374^T type = typeSystem.getType ( getScope (  ) , n.getFirstChild (  ) , field ) ;^[CLASS] FindExternProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  T  type  NodeTraversal  t  Node  n  parent  String  field  Property  prop  
[buglab_swap_variables]^T type = field.getType ( getScope (  ) , n.getFirstChild (  ) , typeSystem ) ;^358^^^^^355^374^T type = typeSystem.getType ( getScope (  ) , n.getFirstChild (  ) , field ) ;^[CLASS] FindExternProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  T  type  NodeTraversal  t  Node  n  parent  String  field  Property  prop  
[buglab_swap_variables]^if  ( typeSystemSystem.isInvalidatingType ( type )  )  {^360^^^^^355^374^if  ( typeSystem.isInvalidatingType ( type )  )  {^[CLASS] FindExternProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  T  type  NodeTraversal  t  Node  n  parent  String  field  Property  prop  
[buglab_swap_variables]^if  ( type.isInvalidatingType ( typeSystem )  )  {^360^^^^^355^374^if  ( typeSystem.isInvalidatingType ( type )  )  {^[CLASS] FindExternProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  T  type  NodeTraversal  t  Node  n  parent  String  field  Property  prop  
[buglab_swap_variables]^handleObjectLit ( n, t ) ;^387^^^^^383^389^handleObjectLit ( t, n ) ;^[CLASS] FindRenameableProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  n  parent  
[buglab_swap_variables]^handleObjectLit (  n ) ;^387^^^^^383^389^handleObjectLit ( t, n ) ;^[CLASS] FindRenameableProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  n  parent  
[buglab_swap_variables]^handleObjectLit ( t ) ;^387^^^^^383^389^handleObjectLit ( t, n ) ;^[CLASS] FindRenameableProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  n  parent  
[buglab_swap_variables]^handleGetProp ( n, t ) ;^385^^^^^383^389^handleGetProp ( t, n ) ;^[CLASS] FindRenameableProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  n  parent  
[buglab_swap_variables]^handleGetProp (  n ) ;^385^^^^^383^389^handleGetProp ( t, n ) ;^[CLASS] FindRenameableProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  n  parent  
[buglab_swap_variables]^handleGetProp ( t ) ;^385^^^^^383^389^handleGetProp ( t, n ) ;^[CLASS] FindRenameableProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  n  parent  
[buglab_swap_variables]^T type = typeSystem.getType ( getScope (  ) , name.getFirstChild (  ) , n ) ;^396^^^^^394^407^T type = typeSystem.getType ( getScope (  ) , n.getFirstChild (  ) , name ) ;^[CLASS] FindRenameableProperties  [METHOD] handleGetProp [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] boolean  T  type  NodeTraversal  t  Node  n  String  name  Property  prop  
[buglab_swap_variables]^T type = typeSystem.getType ( getScope (  ) .getFirstChild (  ) , name ) ;^396^^^^^394^407^T type = typeSystem.getType ( getScope (  ) , n.getFirstChild (  ) , name ) ;^[CLASS] FindRenameableProperties  [METHOD] handleGetProp [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] boolean  T  type  NodeTraversal  t  Node  n  String  name  Property  prop  
[buglab_swap_variables]^T type = typeSystem.getType ( getScope (  ) , n.getFirstChild (  )  ) ;^396^^^^^394^407^T type = typeSystem.getType ( getScope (  ) , n.getFirstChild (  ) , name ) ;^[CLASS] FindRenameableProperties  [METHOD] handleGetProp [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] boolean  T  type  NodeTraversal  t  Node  n  String  name  Property  prop  
[buglab_swap_variables]^T type = name.getType ( getScope (  ) , n.getFirstChild (  ) , typeSystem ) ;^396^^^^^394^407^T type = typeSystem.getType ( getScope (  ) , n.getFirstChild (  ) , name ) ;^[CLASS] FindRenameableProperties  [METHOD] handleGetProp [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] boolean  T  type  NodeTraversal  t  Node  n  String  name  Property  prop  
[buglab_swap_variables]^T type = n.getType ( getScope (  ) , typeSystem.getFirstChild (  ) , name ) ;^396^^^^^394^407^T type = typeSystem.getType ( getScope (  ) , n.getFirstChild (  ) , name ) ;^[CLASS] FindRenameableProperties  [METHOD] handleGetProp [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] boolean  T  type  NodeTraversal  t  Node  n  String  name  Property  prop  
[buglab_swap_variables]^if  ( !prop.scheduleRenaming ( n.getLastChild (  ) , processProperty ( t, type, prop, null )  )  )  {^399^400^^^^394^407^if  ( !prop.scheduleRenaming ( n.getLastChild (  ) , processProperty ( t, prop, type, null )  )  )  {^[CLASS] FindRenameableProperties  [METHOD] handleGetProp [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] boolean  T  type  NodeTraversal  t  Node  n  String  name  Property  prop  
[buglab_swap_variables]^if  ( !prop.scheduleRenaming ( n.getLastChild (  ) , processProperty ( t,  type, null )  )  )  {^399^400^^^^394^407^if  ( !prop.scheduleRenaming ( n.getLastChild (  ) , processProperty ( t, prop, type, null )  )  )  {^[CLASS] FindRenameableProperties  [METHOD] handleGetProp [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] boolean  T  type  NodeTraversal  t  Node  n  String  name  Property  prop  
[buglab_swap_variables]^if  ( !prop.scheduleRenaming ( n.getLastChild (  ) , processProperty ( t, prop, typeull )  )  )  {^399^400^^^^394^407^if  ( !prop.scheduleRenaming ( n.getLastChild (  ) , processProperty ( t, prop, type, null )  )  )  {^[CLASS] FindRenameableProperties  [METHOD] handleGetProp [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] boolean  T  type  NodeTraversal  t  Node  n  String  name  Property  prop  
[buglab_swap_variables]^if  ( !prop.scheduleRenaming ( n.getLastChild (  ) , processProperty (  prop, type, null )  )  )  {^399^400^^^^394^407^if  ( !prop.scheduleRenaming ( n.getLastChild (  ) , processProperty ( t, prop, type, null )  )  )  {^[CLASS] FindRenameableProperties  [METHOD] handleGetProp [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] boolean  T  type  NodeTraversal  t  Node  n  String  name  Property  prop  
[buglab_swap_variables]^if  ( !prop.scheduleRenaming ( n.getLastChild (  ) , processProperty ( t, prop,  null )  )  )  {^399^400^^^^394^407^if  ( !prop.scheduleRenaming ( n.getLastChild (  ) , processProperty ( t, prop, type, null )  )  )  {^[CLASS] FindRenameableProperties  [METHOD] handleGetProp [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] boolean  T  type  NodeTraversal  t  Node  n  String  name  Property  prop  
[buglab_swap_variables]^compiler.report ( JSError.make ( INVALIDATION.getSourceName (  ) , n, t, name, ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^402^403^404^^^394^407^compiler.report ( JSError.make ( t.getSourceName (  ) , n, INVALIDATION, name, ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^[CLASS] FindRenameableProperties  [METHOD] handleGetProp [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] boolean  T  type  NodeTraversal  t  Node  n  String  name  Property  prop  
[buglab_swap_variables]^compiler.report ( JSError.make ( t.getSourceName (  ) ,  INVALIDATION, name, ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^402^403^404^^^394^407^compiler.report ( JSError.make ( t.getSourceName (  ) , n, INVALIDATION, name, ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^[CLASS] FindRenameableProperties  [METHOD] handleGetProp [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] boolean  T  type  NodeTraversal  t  Node  n  String  name  Property  prop  
[buglab_swap_variables]^compiler.report ( JSError.make ( name.getSourceName (  ) , n, INVALIDATION, t, ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^402^403^404^^^394^407^compiler.report ( JSError.make ( t.getSourceName (  ) , n, INVALIDATION, name, ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^[CLASS] FindRenameableProperties  [METHOD] handleGetProp [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] boolean  T  type  NodeTraversal  t  Node  n  String  name  Property  prop  
[buglab_swap_variables]^compiler.report ( JSError.make ( t.getSourceName (  ) , n, INVALIDATION,  ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^402^403^404^^^394^407^compiler.report ( JSError.make ( t.getSourceName (  ) , n, INVALIDATION, name, ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^[CLASS] FindRenameableProperties  [METHOD] handleGetProp [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] boolean  T  type  NodeTraversal  t  Node  n  String  name  Property  prop  
[buglab_swap_variables]^compiler.report ( JSError.make ( t.getSourceName (  ) , n, INVALIDATION, type, ( name == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^402^403^404^^^394^407^compiler.report ( JSError.make ( t.getSourceName (  ) , n, INVALIDATION, name, ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^[CLASS] FindRenameableProperties  [METHOD] handleGetProp [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] boolean  T  type  NodeTraversal  t  Node  n  String  name  Property  prop  
[buglab_swap_variables]^compiler.report ( JSError.make ( t.getSourceName (  ) , n, name, INVALIDATION, ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^402^403^404^^^394^407^compiler.report ( JSError.make ( t.getSourceName (  ) , n, INVALIDATION, name, ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^[CLASS] FindRenameableProperties  [METHOD] handleGetProp [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] boolean  T  type  NodeTraversal  t  Node  n  String  name  Property  prop  
[buglab_swap_variables]^compiler.report ( JSError.make ( t.getSourceName (  ) , n,  name, ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^402^403^404^^^394^407^compiler.report ( JSError.make ( t.getSourceName (  ) , n, INVALIDATION, name, ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^[CLASS] FindRenameableProperties  [METHOD] handleGetProp [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] boolean  T  type  NodeTraversal  t  Node  n  String  name  Property  prop  
[buglab_swap_variables]^compiler.report ( JSError.make ( n.getSourceName (  ) , t, INVALIDATION, name, ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^402^403^404^^^394^407^compiler.report ( JSError.make ( t.getSourceName (  ) , n, INVALIDATION, name, ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^[CLASS] FindRenameableProperties  [METHOD] handleGetProp [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] boolean  T  type  NodeTraversal  t  Node  n  String  name  Property  prop  
[buglab_swap_variables]^compiler.report ( JSError.make ( t.getSourceName (  ) , type, INVALIDATION, name, ( n == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^402^403^404^^^394^407^compiler.report ( JSError.make ( t.getSourceName (  ) , n, INVALIDATION, name, ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^[CLASS] FindRenameableProperties  [METHOD] handleGetProp [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] boolean  T  type  NodeTraversal  t  Node  n  String  name  Property  prop  
[buglab_swap_variables]^compiler.report ( JSError.make ( t.getSourceName (  ) , name, INVALIDATION, n, ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^402^403^404^^^394^407^compiler.report ( JSError.make ( t.getSourceName (  ) , n, INVALIDATION, name, ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^[CLASS] FindRenameableProperties  [METHOD] handleGetProp [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] boolean  T  type  NodeTraversal  t  Node  n  String  name  Property  prop  
[buglab_swap_variables]^compiler.report ( JSError.make ( type.getSourceName (  ) , n, INVALIDATION, name, ( t == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^402^403^404^^^394^407^compiler.report ( JSError.make ( t.getSourceName (  ) , n, INVALIDATION, name, ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^[CLASS] FindRenameableProperties  [METHOD] handleGetProp [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] boolean  T  type  NodeTraversal  t  Node  n  String  name  Property  prop  
[buglab_swap_variables]^compiler.report ( JSError.make ( t.getSourceName (  ) , INVALIDATION, n, name, ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^402^403^404^^^394^407^compiler.report ( JSError.make ( t.getSourceName (  ) , n, INVALIDATION, name, ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^[CLASS] FindRenameableProperties  [METHOD] handleGetProp [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] boolean  T  type  NodeTraversal  t  Node  n  String  name  Property  prop  
[buglab_swap_variables]^compiler.report ( JSError.make ( t.getSourceName (  ) , n, type, name, ( INVALIDATION == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^402^403^404^^^394^407^compiler.report ( JSError.make ( t.getSourceName (  ) , n, INVALIDATION, name, ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^[CLASS] FindRenameableProperties  [METHOD] handleGetProp [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] boolean  T  type  NodeTraversal  t  Node  n  String  name  Property  prop  
[buglab_swap_variables]^if  ( !prop.scheduleRenaming ( prop.getLastChild (  ) , processProperty ( t, n, type, null )  )  )  {^399^400^^^^394^407^if  ( !prop.scheduleRenaming ( n.getLastChild (  ) , processProperty ( t, prop, type, null )  )  )  {^[CLASS] FindRenameableProperties  [METHOD] handleGetProp [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] boolean  T  type  NodeTraversal  t  Node  n  String  name  Property  prop  
[buglab_swap_variables]^if  ( !prop.scheduleRenaming ( n.getLastChild (  ) , processProperty ( type, prop, t, null )  )  )  {^399^400^^^^394^407^if  ( !prop.scheduleRenaming ( n.getLastChild (  ) , processProperty ( t, prop, type, null )  )  )  {^[CLASS] FindRenameableProperties  [METHOD] handleGetProp [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] boolean  T  type  NodeTraversal  t  Node  n  String  name  Property  prop  
[buglab_swap_variables]^processProperty ( type, prop, t, null )  )  )  {^400^^^^^394^407^processProperty ( t, prop, type, null )  )  )  {^[CLASS] FindRenameableProperties  [METHOD] handleGetProp [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] boolean  T  type  NodeTraversal  t  Node  n  String  name  Property  prop  
[buglab_swap_variables]^processProperty (  prop, type, null )  )  )  {^400^^^^^394^407^processProperty ( t, prop, type, null )  )  )  {^[CLASS] FindRenameableProperties  [METHOD] handleGetProp [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] boolean  T  type  NodeTraversal  t  Node  n  String  name  Property  prop  
[buglab_swap_variables]^processProperty ( prop, t, type, null )  )  )  {^400^^^^^394^407^processProperty ( t, prop, type, null )  )  )  {^[CLASS] FindRenameableProperties  [METHOD] handleGetProp [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] boolean  T  type  NodeTraversal  t  Node  n  String  name  Property  prop  
[buglab_swap_variables]^processProperty ( t,  type, null )  )  )  {^400^^^^^394^407^processProperty ( t, prop, type, null )  )  )  {^[CLASS] FindRenameableProperties  [METHOD] handleGetProp [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] boolean  T  type  NodeTraversal  t  Node  n  String  name  Property  prop  
[buglab_swap_variables]^processProperty ( t, prop,  null )  )  )  {^400^^^^^394^407^processProperty ( t, prop, type, null )  )  )  {^[CLASS] FindRenameableProperties  [METHOD] handleGetProp [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] boolean  T  type  NodeTraversal  t  Node  n  String  name  Property  prop  
[buglab_swap_variables]^while  ( n != childull )  {^414^^^^^412^433^while  ( child != null )  {^[CLASS] FindRenameableProperties  [METHOD] handleObjectLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] boolean  T  type  NodeTraversal  t  Node  child  n  String  name  Property  prop  
[buglab_swap_variables]^if  ( !prop.scheduleRenaming ( child, processProperty ( t,  type, null )  )  )  {^421^422^^^^412^433^if  ( !prop.scheduleRenaming ( child, processProperty ( t, prop, type, null )  )  )  {^[CLASS] FindRenameableProperties  [METHOD] handleObjectLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] boolean  T  type  NodeTraversal  t  Node  child  n  String  name  Property  prop  
[buglab_swap_variables]^if  ( !prop.scheduleRenaming ( n, processProperty ( t, prop, type, childull )  )  )  {^421^422^^^^412^433^if  ( !prop.scheduleRenaming ( child, processProperty ( t, prop, type, null )  )  )  {^[CLASS] FindRenameableProperties  [METHOD] handleObjectLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] boolean  T  type  NodeTraversal  t  Node  child  n  String  name  Property  prop  
[buglab_swap_variables]^if  ( !prop.scheduleRenaming (  processProperty ( t, prop, type, null )  )  )  {^421^422^^^^412^433^if  ( !prop.scheduleRenaming ( child, processProperty ( t, prop, type, null )  )  )  {^[CLASS] FindRenameableProperties  [METHOD] handleObjectLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] boolean  T  type  NodeTraversal  t  Node  child  n  String  name  Property  prop  
[buglab_swap_variables]^if  ( !prop.scheduleRenaming ( child, processProperty (  prop, type, null )  )  )  {^421^422^^^^412^433^if  ( !prop.scheduleRenaming ( child, processProperty ( t, prop, type, null )  )  )  {^[CLASS] FindRenameableProperties  [METHOD] handleObjectLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] boolean  T  type  NodeTraversal  t  Node  child  n  String  name  Property  prop  
[buglab_swap_variables]^if  ( !prop.scheduleRenaming ( child, processProperty ( t, prop,  null )  )  )  {^421^422^^^^412^433^if  ( !prop.scheduleRenaming ( child, processProperty ( t, prop, type, null )  )  )  {^[CLASS] FindRenameableProperties  [METHOD] handleObjectLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] boolean  T  type  NodeTraversal  t  Node  child  n  String  name  Property  prop  
[buglab_swap_variables]^if  ( !prop.scheduleRenaming ( child, processProperty ( t, prop, typeull )  )  )  {^421^422^^^^412^433^if  ( !prop.scheduleRenaming ( child, processProperty ( t, prop, type, null )  )  )  {^[CLASS] FindRenameableProperties  [METHOD] handleObjectLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] boolean  T  type  NodeTraversal  t  Node  child  n  String  name  Property  prop  
[buglab_swap_variables]^compiler.report ( JSError.make ( n.getSourceName (  ) , child, INVALIDATION, tame, ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^424^425^426^^^412^433^compiler.report ( JSError.make ( t.getSourceName (  ) , child, INVALIDATION, name, ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^[CLASS] FindRenameableProperties  [METHOD] handleObjectLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] boolean  T  type  NodeTraversal  t  Node  child  n  String  name  Property  prop  
[buglab_swap_variables]^compiler.report ( JSError.make ( t.getSourceName (  ) , type, INVALIDATION, name, ( child == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^424^425^426^^^412^433^compiler.report ( JSError.make ( t.getSourceName (  ) , child, INVALIDATION, name, ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^[CLASS] FindRenameableProperties  [METHOD] handleObjectLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] boolean  T  type  NodeTraversal  t  Node  child  n  String  name  Property  prop  
[buglab_swap_variables]^compiler.report ( JSError.make ( t.getSourceName (  ) ,  INVALIDATION, name, ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^424^425^426^^^412^433^compiler.report ( JSError.make ( t.getSourceName (  ) , child, INVALIDATION, name, ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^[CLASS] FindRenameableProperties  [METHOD] handleObjectLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] boolean  T  type  NodeTraversal  t  Node  child  n  String  name  Property  prop  
[buglab_swap_variables]^compiler.report ( JSError.make ( t.getSourceName (  ) , child, INVALIDATION, type, ( name == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^424^425^426^^^412^433^compiler.report ( JSError.make ( t.getSourceName (  ) , child, INVALIDATION, name, ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^[CLASS] FindRenameableProperties  [METHOD] handleObjectLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] boolean  T  type  NodeTraversal  t  Node  child  n  String  name  Property  prop  
[buglab_swap_variables]^compiler.report ( JSError.make ( t.getSourceName (  ) , child, INVALIDATION,  ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^424^425^426^^^412^433^compiler.report ( JSError.make ( t.getSourceName (  ) , child, INVALIDATION, name, ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^[CLASS] FindRenameableProperties  [METHOD] handleObjectLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] boolean  T  type  NodeTraversal  t  Node  child  n  String  name  Property  prop  
[buglab_swap_variables]^compiler.report ( JSError.make ( t.getSourceName (  ) , child, INVALIDATION, typeame, ( n == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^424^425^426^^^412^433^compiler.report ( JSError.make ( t.getSourceName (  ) , child, INVALIDATION, name, ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^[CLASS] FindRenameableProperties  [METHOD] handleObjectLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] boolean  T  type  NodeTraversal  t  Node  child  n  String  name  Property  prop  
[buglab_swap_variables]^compiler.report ( JSError.make ( t.getSourceName (  ) , child, INVALIDATIOName, ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^424^425^426^^^412^433^compiler.report ( JSError.make ( t.getSourceName (  ) , child, INVALIDATION, name, ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^[CLASS] FindRenameableProperties  [METHOD] handleObjectLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] boolean  T  type  NodeTraversal  t  Node  child  n  String  name  Property  prop  
[buglab_swap_variables]^compiler.report ( JSError.make ( t.getSourceName (  ) , child, type, name, ( INVALIDATION == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^424^425^426^^^412^433^compiler.report ( JSError.make ( t.getSourceName (  ) , child, INVALIDATION, name, ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^[CLASS] FindRenameableProperties  [METHOD] handleObjectLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] boolean  T  type  NodeTraversal  t  Node  child  n  String  name  Property  prop  
[buglab_swap_variables]^compiler.report ( JSError.make ( t.getSourceName (  ) , child,  name, ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^424^425^426^^^412^433^compiler.report ( JSError.make ( t.getSourceName (  ) , child, INVALIDATION, name, ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^[CLASS] FindRenameableProperties  [METHOD] handleObjectLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] boolean  T  type  NodeTraversal  t  Node  child  n  String  name  Property  prop  
[buglab_swap_variables]^compiler.report ( JSError.make ( child.getSourceName (  ) , t, INVALIDATION, name, ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^424^425^426^^^412^433^compiler.report ( JSError.make ( t.getSourceName (  ) , child, INVALIDATION, name, ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^[CLASS] FindRenameableProperties  [METHOD] handleObjectLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] boolean  T  type  NodeTraversal  t  Node  child  n  String  name  Property  prop  
[buglab_swap_variables]^compiler.report ( JSError.make ( t.getSourceName (  ) , n, INVALIDATION, childame, ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^424^425^426^^^412^433^compiler.report ( JSError.make ( t.getSourceName (  ) , child, INVALIDATION, name, ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^[CLASS] FindRenameableProperties  [METHOD] handleObjectLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] boolean  T  type  NodeTraversal  t  Node  child  n  String  name  Property  prop  
[buglab_swap_variables]^compiler.report ( JSError.make ( type.getSourceName (  ) , child, INVALIDATION, name, ( t == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^424^425^426^^^412^433^compiler.report ( JSError.make ( t.getSourceName (  ) , child, INVALIDATION, name, ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^[CLASS] FindRenameableProperties  [METHOD] handleObjectLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] boolean  T  type  NodeTraversal  t  Node  child  n  String  name  Property  prop  
[buglab_swap_variables]^compiler.report ( JSError.make ( t.getSourceName (  ) , child, name, INVALIDATION, ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^424^425^426^^^412^433^compiler.report ( JSError.make ( t.getSourceName (  ) , child, INVALIDATION, name, ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^[CLASS] FindRenameableProperties  [METHOD] handleObjectLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] boolean  T  type  NodeTraversal  t  Node  child  n  String  name  Property  prop  
[buglab_swap_variables]^compiler.report ( JSError.make ( name.getSourceName (  ) , child, INVALIDATION, t, ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^424^425^426^^^412^433^compiler.report ( JSError.make ( t.getSourceName (  ) , child, INVALIDATION, name, ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^[CLASS] FindRenameableProperties  [METHOD] handleObjectLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] boolean  T  type  NodeTraversal  t  Node  child  n  String  name  Property  prop  
[buglab_swap_variables]^compiler.report ( JSError.make ( t.getSourceName (  ) , name, INVALIDATION, child, ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^424^425^426^^^412^433^compiler.report ( JSError.make ( t.getSourceName (  ) , child, INVALIDATION, name, ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^[CLASS] FindRenameableProperties  [METHOD] handleObjectLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] boolean  T  type  NodeTraversal  t  Node  child  n  String  name  Property  prop  
[buglab_swap_variables]^compiler.report ( JSError.make ( t.getSourceName (  ) , child, INVALIDATION, nameame, ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^424^425^426^^^412^433^compiler.report ( JSError.make ( t.getSourceName (  ) , child, INVALIDATION, name, ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^[CLASS] FindRenameableProperties  [METHOD] handleObjectLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] boolean  T  type  NodeTraversal  t  Node  child  n  String  name  Property  prop  
[buglab_swap_variables]^compiler.report ( JSError.make ( t.getSourceName (  ) , child, INVALIDATION, n, ( type == nameull ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^424^425^426^^^412^433^compiler.report ( JSError.make ( t.getSourceName (  ) , child, INVALIDATION, name, ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^[CLASS] FindRenameableProperties  [METHOD] handleObjectLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] boolean  T  type  NodeTraversal  t  Node  child  n  String  name  Property  prop  
[buglab_swap_variables]^compiler.report ( JSError.make ( t.getSourceName (  ) , child, n, INVALIDATIOName, ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^424^425^426^^^412^433^compiler.report ( JSError.make ( t.getSourceName (  ) , child, INVALIDATION, name, ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^[CLASS] FindRenameableProperties  [METHOD] handleObjectLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] boolean  T  type  NodeTraversal  t  Node  child  n  String  name  Property  prop  
[buglab_swap_variables]^T type = n.getType ( getScope (  ) , typeSystem, name ) ;^418^^^^^412^433^T type = typeSystem.getType ( getScope (  ) , n, name ) ;^[CLASS] FindRenameableProperties  [METHOD] handleObjectLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] boolean  T  type  NodeTraversal  t  Node  child  n  String  name  Property  prop  
[buglab_swap_variables]^T type = typeSystem.getType ( getScope (  ) ,  name ) ;^418^^^^^412^433^T type = typeSystem.getType ( getScope (  ) , n, name ) ;^[CLASS] FindRenameableProperties  [METHOD] handleObjectLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] boolean  T  type  NodeTraversal  t  Node  child  n  String  name  Property  prop  
[buglab_swap_variables]^T type = typeSystem.getType ( getScope (  ) , name, n ) ;^418^^^^^412^433^T type = typeSystem.getType ( getScope (  ) , n, name ) ;^[CLASS] FindRenameableProperties  [METHOD] handleObjectLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] boolean  T  type  NodeTraversal  t  Node  child  n  String  name  Property  prop  
[buglab_swap_variables]^T type = typeSystem.getType ( getScope (  ) , n ) ;^418^^^^^412^433^T type = typeSystem.getType ( getScope (  ) , n, name ) ;^[CLASS] FindRenameableProperties  [METHOD] handleObjectLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] boolean  T  type  NodeTraversal  t  Node  child  n  String  name  Property  prop  
[buglab_swap_variables]^T type = name.getType ( getScope (  ) , n, typeSystem ) ;^418^^^^^412^433^T type = typeSystem.getType ( getScope (  ) , n, name ) ;^[CLASS] FindRenameableProperties  [METHOD] handleObjectLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] boolean  T  type  NodeTraversal  t  Node  child  n  String  name  Property  prop  
[buglab_swap_variables]^if  ( !prop.scheduleRenaming ( child, processProperty ( t, type, prop, null )  )  )  {^421^422^^^^412^433^if  ( !prop.scheduleRenaming ( child, processProperty ( t, prop, type, null )  )  )  {^[CLASS] FindRenameableProperties  [METHOD] handleObjectLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] boolean  T  type  NodeTraversal  t  Node  child  n  String  name  Property  prop  
[buglab_swap_variables]^if  ( !prop.scheduleRenaming ( type, processProperty ( t, prop, child, null )  )  )  {^421^422^^^^412^433^if  ( !prop.scheduleRenaming ( child, processProperty ( t, prop, type, null )  )  )  {^[CLASS] FindRenameableProperties  [METHOD] handleObjectLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] boolean  T  type  NodeTraversal  t  Node  child  n  String  name  Property  prop  
[buglab_swap_variables]^if  ( !prop.scheduleRenaming ( t, processProperty ( child, prop, type, null )  )  )  {^421^422^^^^412^433^if  ( !prop.scheduleRenaming ( child, processProperty ( t, prop, type, null )  )  )  {^[CLASS] FindRenameableProperties  [METHOD] handleObjectLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] boolean  T  type  NodeTraversal  t  Node  child  n  String  name  Property  prop  
[buglab_swap_variables]^if  ( !prop.scheduleRenaming ( child, processProperty ( type, prop, t, null )  )  )  {^421^422^^^^412^433^if  ( !prop.scheduleRenaming ( child, processProperty ( t, prop, type, null )  )  )  {^[CLASS] FindRenameableProperties  [METHOD] handleObjectLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] boolean  T  type  NodeTraversal  t  Node  child  n  String  name  Property  prop  
[buglab_swap_variables]^processProperty ( prop, t, type, null )  )  )  {^422^^^^^412^433^processProperty ( t, prop, type, null )  )  )  {^[CLASS] FindRenameableProperties  [METHOD] handleObjectLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] boolean  T  type  NodeTraversal  t  Node  child  n  String  name  Property  prop  
[buglab_swap_variables]^processProperty (  prop, type, null )  )  )  {^422^^^^^412^433^processProperty ( t, prop, type, null )  )  )  {^[CLASS] FindRenameableProperties  [METHOD] handleObjectLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] boolean  T  type  NodeTraversal  t  Node  child  n  String  name  Property  prop  
[buglab_swap_variables]^processProperty ( t, type, prop, null )  )  )  {^422^^^^^412^433^processProperty ( t, prop, type, null )  )  )  {^[CLASS] FindRenameableProperties  [METHOD] handleObjectLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] boolean  T  type  NodeTraversal  t  Node  child  n  String  name  Property  prop  
[buglab_swap_variables]^processProperty ( t,  type, null )  )  )  {^422^^^^^412^433^processProperty ( t, prop, type, null )  )  )  {^[CLASS] FindRenameableProperties  [METHOD] handleObjectLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] boolean  T  type  NodeTraversal  t  Node  child  n  String  name  Property  prop  
[buglab_swap_variables]^processProperty ( t, prop,  null )  )  )  {^422^^^^^412^433^processProperty ( t, prop, type, null )  )  )  {^[CLASS] FindRenameableProperties  [METHOD] handleObjectLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] boolean  T  type  NodeTraversal  t  Node  child  n  String  name  Property  prop  
[buglab_swap_variables]^compiler.report ( JSError.make ( t.getSourceName (  ) , INVALIDATION, child, name, ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^424^425^426^^^412^433^compiler.report ( JSError.make ( t.getSourceName (  ) , child, INVALIDATION, name, ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^[CLASS] FindRenameableProperties  [METHOD] handleObjectLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] boolean  T  type  NodeTraversal  t  Node  child  n  String  name  Property  prop  
[buglab_swap_variables]^compiler.report ( JSError.make ( INVALIDATION.getSourceName (  ) , child, t, name, ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^424^425^426^^^412^433^compiler.report ( JSError.make ( t.getSourceName (  ) , child, INVALIDATION, name, ( type == null ? "null" : type.toString (  )  ) , n.toString (  )  )  ) ;^[CLASS] FindRenameableProperties  [METHOD] handleObjectLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] boolean  T  type  NodeTraversal  t  Node  child  n  String  name  Property  prop  
[buglab_swap_variables]^if  ( !prop.scheduleRenaming ( child, processProperty ( prop, t, type, null )  )  )  {^421^422^^^^412^433^if  ( !prop.scheduleRenaming ( child, processProperty ( t, prop, type, null )  )  )  {^[CLASS] FindRenameableProperties  [METHOD] handleObjectLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] boolean  T  type  NodeTraversal  t  Node  child  n  String  name  Property  prop  
[buglab_swap_variables]^if  ( !prop.scheduleRenaming ( child, processProperty ( t, n, type, propull )  )  )  {^421^422^^^^412^433^if  ( !prop.scheduleRenaming ( child, processProperty ( t, prop, type, null )  )  )  {^[CLASS] FindRenameableProperties  [METHOD] handleObjectLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] boolean  T  type  NodeTraversal  t  Node  child  n  String  name  Property  prop  
[buglab_swap_variables]^processProperty ( type, prop, t, null )  )  )  {^422^^^^^412^433^processProperty ( t, prop, type, null )  )  )  {^[CLASS] FindRenameableProperties  [METHOD] handleObjectLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] boolean  T  type  NodeTraversal  t  Node  child  n  String  name  Property  prop  
[buglab_swap_variables]^if  ( !prop.scheduleRenaming ( child, processProperty ( n, prop, type, tull )  )  )  {^421^422^^^^412^433^if  ( !prop.scheduleRenaming ( child, processProperty ( t, prop, type, null )  )  )  {^[CLASS] FindRenameableProperties  [METHOD] handleObjectLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] boolean  T  type  NodeTraversal  t  Node  child  n  String  name  Property  prop  
[buglab_swap_variables]^type = typeSystemSystem.restrictByNotNullOrUndefined ( type ) ;^444^^^^^442^467^type = typeSystem.restrictByNotNullOrUndefined ( type ) ;^[CLASS] FindRenameableProperties  [METHOD] processProperty [RETURN_TYPE] T   NodeTraversal t Property prop T type T relatedType [VARIABLES] boolean  T  firstType  lastType  relatedType  subType  topType  type  Iterable  alternatives  NodeTraversal  t  Property  prop  
[buglab_swap_variables]^type = type.restrictByNotNullOrUndefined ( typeSystem ) ;^444^^^^^442^467^type = typeSystem.restrictByNotNullOrUndefined ( type ) ;^[CLASS] FindRenameableProperties  [METHOD] processProperty [RETURN_TYPE] T   NodeTraversal t Property prop T type T relatedType [VARIABLES] boolean  T  firstType  lastType  relatedType  subType  topType  type  Iterable  alternatives  NodeTraversal  t  Property  prop  
[buglab_swap_variables]^if  ( type.skipRenaming || propSystem.isInvalidatingType ( type )  )  {^445^^^^^442^467^if  ( prop.skipRenaming || typeSystem.isInvalidatingType ( type )  )  {^[CLASS] FindRenameableProperties  [METHOD] processProperty [RETURN_TYPE] T   NodeTraversal t Property prop T type T relatedType [VARIABLES] boolean  T  firstType  lastType  relatedType  subType  topType  type  Iterable  alternatives  NodeTraversal  t  Property  prop  
[buglab_swap_variables]^if  ( type || prop.skipRenamingSystem.isInvalidatingType ( type )  )  {^445^^^^^442^467^if  ( prop.skipRenaming || typeSystem.isInvalidatingType ( type )  )  {^[CLASS] FindRenameableProperties  [METHOD] processProperty [RETURN_TYPE] T   NodeTraversal t Property prop T type T relatedType [VARIABLES] boolean  T  firstType  lastType  relatedType  subType  topType  type  Iterable  alternatives  NodeTraversal  t  Property  prop  
[buglab_swap_variables]^if  ( prop || typeSystem.isInvalidatingType ( type )  )  {^445^^^^^442^467^if  ( prop.skipRenaming || typeSystem.isInvalidatingType ( type )  )  {^[CLASS] FindRenameableProperties  [METHOD] processProperty [RETURN_TYPE] T   NodeTraversal t Property prop T type T relatedType [VARIABLES] boolean  T  firstType  lastType  relatedType  subType  topType  type  Iterable  alternatives  NodeTraversal  t  Property  prop  
[buglab_swap_variables]^if  ( typeSystem.skipRenaming || prop.isInvalidatingType ( type )  )  {^445^^^^^442^467^if  ( prop.skipRenaming || typeSystem.isInvalidatingType ( type )  )  {^[CLASS] FindRenameableProperties  [METHOD] processProperty [RETURN_TYPE] T   NodeTraversal t Property prop T type T relatedType [VARIABLES] boolean  T  firstType  lastType  relatedType  subType  topType  type  Iterable  alternatives  NodeTraversal  t  Property  prop  
[buglab_swap_variables]^if  ( prop.skipRenaming || typeSystemSystem.isInvalidatingType ( type )  )  {^445^^^^^442^467^if  ( prop.skipRenaming || typeSystem.isInvalidatingType ( type )  )  {^[CLASS] FindRenameableProperties  [METHOD] processProperty [RETURN_TYPE] T   NodeTraversal t Property prop T type T relatedType [VARIABLES] boolean  T  firstType  lastType  relatedType  subType  topType  type  Iterable  alternatives  NodeTraversal  t  Property  prop  
[buglab_swap_variables]^if  ( prop.skipRenaming || type.isInvalidatingType ( typeSystem )  )  {^445^^^^^442^467^if  ( prop.skipRenaming || typeSystem.isInvalidatingType ( type )  )  {^[CLASS] FindRenameableProperties  [METHOD] processProperty [RETURN_TYPE] T   NodeTraversal t Property prop T type T relatedType [VARIABLES] boolean  T  firstType  lastType  relatedType  subType  topType  type  Iterable  alternatives  NodeTraversal  t  Property  prop  
[buglab_swap_variables]^Iterable<T> alternatives = typeSystemSystem.getTypeAlternatives ( type ) ;^449^^^^^442^467^Iterable<T> alternatives = typeSystem.getTypeAlternatives ( type ) ;^[CLASS] FindRenameableProperties  [METHOD] processProperty [RETURN_TYPE] T   NodeTraversal t Property prop T type T relatedType [VARIABLES] boolean  T  firstType  lastType  relatedType  subType  topType  type  Iterable  alternatives  NodeTraversal  t  Property  prop  
[buglab_swap_variables]^Iterable<T> alternatives = type.getTypeAlternatives ( typeSystem ) ;^449^^^^^442^467^Iterable<T> alternatives = typeSystem.getTypeAlternatives ( type ) ;^[CLASS] FindRenameableProperties  [METHOD] processProperty [RETURN_TYPE] T   NodeTraversal t Property prop T type T relatedType [VARIABLES] boolean  T  firstType  lastType  relatedType  subType  topType  type  Iterable  alternatives  NodeTraversal  t  Property  prop  
[buglab_swap_variables]^if  ( topType.isInvalidatingType ( typeSystem )  )  {^461^^^^^442^467^if  ( typeSystem.isInvalidatingType ( topType )  )  {^[CLASS] FindRenameableProperties  [METHOD] processProperty [RETURN_TYPE] T   NodeTraversal t Property prop T type T relatedType [VARIABLES] boolean  T  firstType  lastType  relatedType  subType  topType  type  Iterable  alternatives  NodeTraversal  t  Property  prop  
[buglab_swap_variables]^T topType = typeSystem.getTypeWithProperty ( prop.name.name, type ) ;^460^^^^^442^467^T topType = typeSystem.getTypeWithProperty ( prop.name, type ) ;^[CLASS] FindRenameableProperties  [METHOD] processProperty [RETURN_TYPE] T   NodeTraversal t Property prop T type T relatedType [VARIABLES] boolean  T  firstType  lastType  relatedType  subType  topType  type  Iterable  alternatives  NodeTraversal  t  Property  prop  
[buglab_swap_variables]^T topType = propSystem.getTypeWithProperty ( type.name, type ) ;^460^^^^^442^467^T topType = typeSystem.getTypeWithProperty ( prop.name, type ) ;^[CLASS] FindRenameableProperties  [METHOD] processProperty [RETURN_TYPE] T   NodeTraversal t Property prop T type T relatedType [VARIABLES] boolean  T  firstType  lastType  relatedType  subType  topType  type  Iterable  alternatives  NodeTraversal  t  Property  prop  
[buglab_swap_variables]^T topType = typeSystem.getTypeWithProperty ( prop.name ) ;^460^^^^^442^467^T topType = typeSystem.getTypeWithProperty ( prop.name, type ) ;^[CLASS] FindRenameableProperties  [METHOD] processProperty [RETURN_TYPE] T   NodeTraversal t Property prop T type T relatedType [VARIABLES] boolean  T  firstType  lastType  relatedType  subType  topType  type  Iterable  alternatives  NodeTraversal  t  Property  prop  
[buglab_swap_variables]^T topType = type.getTypeWithProperty ( prop.name, typeSystem ) ;^460^^^^^442^467^T topType = typeSystem.getTypeWithProperty ( prop.name, type ) ;^[CLASS] FindRenameableProperties  [METHOD] processProperty [RETURN_TYPE] T   NodeTraversal t Property prop T type T relatedType [VARIABLES] boolean  T  firstType  lastType  relatedType  subType  topType  type  Iterable  alternatives  NodeTraversal  t  Property  prop  
[buglab_swap_variables]^T topType = prop.nameSystem.getTypeWithProperty ( type, type ) ;^460^^^^^442^467^T topType = typeSystem.getTypeWithProperty ( prop.name, type ) ;^[CLASS] FindRenameableProperties  [METHOD] processProperty [RETURN_TYPE] T   NodeTraversal t Property prop T type T relatedType [VARIABLES] boolean  T  firstType  lastType  relatedType  subType  topType  type  Iterable  alternatives  NodeTraversal  t  Property  prop  
[buglab_swap_variables]^T topType = typeSystem.getTypeWithProperty (  type ) ;^460^^^^^442^467^T topType = typeSystem.getTypeWithProperty ( prop.name, type ) ;^[CLASS] FindRenameableProperties  [METHOD] processProperty [RETURN_TYPE] T   NodeTraversal t Property prop T type T relatedType [VARIABLES] boolean  T  firstType  lastType  relatedType  subType  topType  type  Iterable  alternatives  NodeTraversal  t  Property  prop  
[buglab_swap_variables]^T topType = prop.getTypeWithProperty ( typeSystem.name, type ) ;^460^^^^^442^467^T topType = typeSystem.getTypeWithProperty ( prop.name, type ) ;^[CLASS] FindRenameableProperties  [METHOD] processProperty [RETURN_TYPE] T   NodeTraversal t Property prop T type T relatedType [VARIABLES] boolean  T  firstType  lastType  relatedType  subType  topType  type  Iterable  alternatives  NodeTraversal  t  Property  prop  
[buglab_swap_variables]^prop.addType (  topType, relatedType ) ;^464^^^^^442^467^prop.addType ( type, topType, relatedType ) ;^[CLASS] FindRenameableProperties  [METHOD] processProperty [RETURN_TYPE] T   NodeTraversal t Property prop T type T relatedType [VARIABLES] boolean  T  firstType  lastType  relatedType  subType  topType  type  Iterable  alternatives  NodeTraversal  t  Property  prop  
[buglab_swap_variables]^prop.addType ( type, relatedType, topType ) ;^464^^^^^442^467^prop.addType ( type, topType, relatedType ) ;^[CLASS] FindRenameableProperties  [METHOD] processProperty [RETURN_TYPE] T   NodeTraversal t Property prop T type T relatedType [VARIABLES] boolean  T  firstType  lastType  relatedType  subType  topType  type  Iterable  alternatives  NodeTraversal  t  Property  prop  
[buglab_swap_variables]^prop.addType ( type,  relatedType ) ;^464^^^^^442^467^prop.addType ( type, topType, relatedType ) ;^[CLASS] FindRenameableProperties  [METHOD] processProperty [RETURN_TYPE] T   NodeTraversal t Property prop T type T relatedType [VARIABLES] boolean  T  firstType  lastType  relatedType  subType  topType  type  Iterable  alternatives  NodeTraversal  t  Property  prop  
[buglab_swap_variables]^prop.addType ( type, topType ) ;^464^^^^^442^467^prop.addType ( type, topType, relatedType ) ;^[CLASS] FindRenameableProperties  [METHOD] processProperty [RETURN_TYPE] T   NodeTraversal t Property prop T type T relatedType [VARIABLES] boolean  T  firstType  lastType  relatedType  subType  topType  type  Iterable  alternatives  NodeTraversal  t  Property  prop  
[buglab_swap_variables]^firstType = lastType == null ? firstType : firstType;^455^^^^^442^467^firstType = firstType == null ? lastType : firstType;^[CLASS] FindRenameableProperties  [METHOD] processProperty [RETURN_TYPE] T   NodeTraversal t Property prop T type T relatedType [VARIABLES] boolean  T  firstType  lastType  relatedType  subType  topType  type  Iterable  alternatives  NodeTraversal  t  Property  prop  
[buglab_swap_variables]^T lastType = processProperty ( subType, prop, t, firstType ) ;^453^^^^^442^467^T lastType = processProperty ( t, prop, subType, firstType ) ;^[CLASS] FindRenameableProperties  [METHOD] processProperty [RETURN_TYPE] T   NodeTraversal t Property prop T type T relatedType [VARIABLES] boolean  T  firstType  lastType  relatedType  subType  topType  type  Iterable  alternatives  NodeTraversal  t  Property  prop  
[buglab_swap_variables]^T lastType = processProperty (  prop, subType, firstType ) ;^453^^^^^442^467^T lastType = processProperty ( t, prop, subType, firstType ) ;^[CLASS] FindRenameableProperties  [METHOD] processProperty [RETURN_TYPE] T   NodeTraversal t Property prop T type T relatedType [VARIABLES] boolean  T  firstType  lastType  relatedType  subType  topType  type  Iterable  alternatives  NodeTraversal  t  Property  prop  
[buglab_swap_variables]^T lastType = processProperty ( t, firstType, subType, prop ) ;^453^^^^^442^467^T lastType = processProperty ( t, prop, subType, firstType ) ;^[CLASS] FindRenameableProperties  [METHOD] processProperty [RETURN_TYPE] T   NodeTraversal t Property prop T type T relatedType [VARIABLES] boolean  T  firstType  lastType  relatedType  subType  topType  type  Iterable  alternatives  NodeTraversal  t  Property  prop  
[buglab_swap_variables]^T lastType = processProperty ( t,  subType, firstType ) ;^453^^^^^442^467^T lastType = processProperty ( t, prop, subType, firstType ) ;^[CLASS] FindRenameableProperties  [METHOD] processProperty [RETURN_TYPE] T   NodeTraversal t Property prop T type T relatedType [VARIABLES] boolean  T  firstType  lastType  relatedType  subType  topType  type  Iterable  alternatives  NodeTraversal  t  Property  prop  
[buglab_swap_variables]^T lastType = processProperty ( t, prop, firstType, subType ) ;^453^^^^^442^467^T lastType = processProperty ( t, prop, subType, firstType ) ;^[CLASS] FindRenameableProperties  [METHOD] processProperty [RETURN_TYPE] T   NodeTraversal t Property prop T type T relatedType [VARIABLES] boolean  T  firstType  lastType  relatedType  subType  topType  type  Iterable  alternatives  NodeTraversal  t  Property  prop  
[buglab_swap_variables]^T lastType = processProperty ( t, prop,  firstType ) ;^453^^^^^442^467^T lastType = processProperty ( t, prop, subType, firstType ) ;^[CLASS] FindRenameableProperties  [METHOD] processProperty [RETURN_TYPE] T   NodeTraversal t Property prop T type T relatedType [VARIABLES] boolean  T  firstType  lastType  relatedType  subType  topType  type  Iterable  alternatives  NodeTraversal  t  Property  prop  
[buglab_swap_variables]^T lastType = processProperty ( t, prop, subType ) ;^453^^^^^442^467^T lastType = processProperty ( t, prop, subType, firstType ) ;^[CLASS] FindRenameableProperties  [METHOD] processProperty [RETURN_TYPE] T   NodeTraversal t Property prop T type T relatedType [VARIABLES] boolean  T  firstType  lastType  relatedType  subType  topType  type  Iterable  alternatives  NodeTraversal  t  Property  prop  
[buglab_swap_variables]^T lastType = processProperty ( prop, t, subType, firstType ) ;^453^^^^^442^467^T lastType = processProperty ( t, prop, subType, firstType ) ;^[CLASS] FindRenameableProperties  [METHOD] processProperty [RETURN_TYPE] T   NodeTraversal t Property prop T type T relatedType [VARIABLES] boolean  T  firstType  lastType  relatedType  subType  topType  type  Iterable  alternatives  NodeTraversal  t  Property  prop  
[buglab_swap_variables]^T lastType = processProperty ( t, subType, prop, firstType ) ;^453^^^^^442^467^T lastType = processProperty ( t, prop, subType, firstType ) ;^[CLASS] FindRenameableProperties  [METHOD] processProperty [RETURN_TYPE] T   NodeTraversal t Property prop T type T relatedType [VARIABLES] boolean  T  firstType  lastType  relatedType  subType  topType  type  Iterable  alternatives  NodeTraversal  t  Property  prop  
[buglab_swap_variables]^T lastType = processProperty ( firstType, prop, subType, t ) ;^453^^^^^442^467^T lastType = processProperty ( t, prop, subType, firstType ) ;^[CLASS] FindRenameableProperties  [METHOD] processProperty [RETURN_TYPE] T   NodeTraversal t Property prop T type T relatedType [VARIABLES] boolean  T  firstType  lastType  relatedType  subType  topType  type  Iterable  alternatives  NodeTraversal  t  Property  prop  
[buglab_swap_variables]^T topType = typeSystemSystem.getTypeWithProperty ( prop.name, type ) ;^460^^^^^442^467^T topType = typeSystem.getTypeWithProperty ( prop.name, type ) ;^[CLASS] FindRenameableProperties  [METHOD] processProperty [RETURN_TYPE] T   NodeTraversal t Property prop T type T relatedType [VARIABLES] boolean  T  firstType  lastType  relatedType  subType  topType  type  Iterable  alternatives  NodeTraversal  t  Property  prop  
[buglab_swap_variables]^T topType = typeSystem.getTypeWithProperty ( prop, type ) ;^460^^^^^442^467^T topType = typeSystem.getTypeWithProperty ( prop.name, type ) ;^[CLASS] FindRenameableProperties  [METHOD] processProperty [RETURN_TYPE] T   NodeTraversal t Property prop T type T relatedType [VARIABLES] boolean  T  firstType  lastType  relatedType  subType  topType  type  Iterable  alternatives  NodeTraversal  t  Property  prop  
[buglab_swap_variables]^prop.addType ( topType, type, relatedType ) ;^464^^^^^442^467^prop.addType ( type, topType, relatedType ) ;^[CLASS] FindRenameableProperties  [METHOD] processProperty [RETURN_TYPE] T   NodeTraversal t Property prop T type T relatedType [VARIABLES] boolean  T  firstType  lastType  relatedType  subType  topType  type  Iterable  alternatives  NodeTraversal  t  Property  prop  
[buglab_swap_variables]^prop.addType ( relatedType, topType, type ) ;^464^^^^^442^467^prop.addType ( type, topType, relatedType ) ;^[CLASS] FindRenameableProperties  [METHOD] processProperty [RETURN_TYPE] T   NodeTraversal t Property prop T type T relatedType [VARIABLES] boolean  T  firstType  lastType  relatedType  subType  topType  type  Iterable  alternatives  NodeTraversal  t  Property  prop  
[buglab_swap_variables]^if  ( invalidatingTypes == null || type.contains ( type )  || ( type.isNamedType (  )  && type.isUnknownType (  )  )  )  {^671^672^^^^670^678^if  ( type == null || invalidatingTypes.contains ( type )  || ( type.isNamedType (  )  && type.isUnknownType (  )  )  )  {^[CLASS] JSTypeSystem  [METHOD] isInvalidatingType [RETURN_TYPE] boolean   JSType type [VARIABLES] ObjectType  objType  JSTypeRegistry  registry  Set  invalidatingTypes  JSType  type  boolean  
[buglab_swap_variables]^: objType.getDirectImplementors ( registry )  )  {^726^^^^^716^734^: registry.getDirectImplementors ( objType )  )  {^[CLASS] JSTypeSystem  [METHOD] getTypeAlternatives [RETURN_TYPE] Iterable   JSType type [VARIABLES] ObjectType  objType  JSTypeRegistry  registry  Set  invalidatingTypes  types  JSType  type  boolean  FunctionType  impl  List  list  
[buglab_swap_variables]^if  ( field.hasOwnProperty ( objType )  )  {^751^^^^^736^757^if  ( objType.hasOwnProperty ( field )  )  {^[CLASS] JSTypeSystem  [METHOD] getTypeWithProperty [RETURN_TYPE] JSType   String field JSType type [VARIABLES] ObjectType  foundType  objType  JSTypeRegistry  registry  Set  invalidatingTypes  types  String  field  JSType  type  boolean  
[buglab_swap_variables]^recordInterfaces ( relatedType, itype, p ) ;^790^^^^^787^791^recordInterfaces ( itype, relatedType, p ) ;^[CLASS] JSTypeSystem  [METHOD] recordInterfaces [RETURN_TYPE] void   JSType type JSType relatedType Property p [VARIABLES] ObjectType  itype  objType  JSTypeRegistry  registry  Set  invalidatingTypes  types  JSType  relatedType  top  type  boolean  FunctionType  constructor  Property  p  
[buglab_swap_variables]^recordInterfaces (  relatedType, p ) ;^790^^^^^787^791^recordInterfaces ( itype, relatedType, p ) ;^[CLASS] JSTypeSystem  [METHOD] recordInterfaces [RETURN_TYPE] void   JSType type JSType relatedType Property p [VARIABLES] ObjectType  itype  objType  JSTypeRegistry  registry  Set  invalidatingTypes  types  JSType  relatedType  top  type  boolean  FunctionType  constructor  Property  p  
[buglab_swap_variables]^recordInterfaces ( itype, p, relatedType ) ;^790^^^^^787^791^recordInterfaces ( itype, relatedType, p ) ;^[CLASS] JSTypeSystem  [METHOD] recordInterfaces [RETURN_TYPE] void   JSType type JSType relatedType Property p [VARIABLES] ObjectType  itype  objType  JSTypeRegistry  registry  Set  invalidatingTypes  types  JSType  relatedType  top  type  boolean  FunctionType  constructor  Property  p  
[buglab_swap_variables]^recordInterfaces ( itype,  p ) ;^790^^^^^787^791^recordInterfaces ( itype, relatedType, p ) ;^[CLASS] JSTypeSystem  [METHOD] recordInterfaces [RETURN_TYPE] void   JSType type JSType relatedType Property p [VARIABLES] ObjectType  itype  objType  JSTypeRegistry  registry  Set  invalidatingTypes  types  JSType  relatedType  top  type  boolean  FunctionType  constructor  Property  p  
[buglab_swap_variables]^recordInterfaces ( itype, relatedType ) ;^790^^^^^787^791^recordInterfaces ( itype, relatedType, p ) ;^[CLASS] JSTypeSystem  [METHOD] recordInterfaces [RETURN_TYPE] void   JSType type JSType relatedType Property p [VARIABLES] ObjectType  itype  objType  JSTypeRegistry  registry  Set  invalidatingTypes  types  JSType  relatedType  top  type  boolean  FunctionType  constructor  Property  p  
[buglab_swap_variables]^p.addType ( itype, to relatedType ) ;^788^^^^^773^803^p.addType ( itype, top, relatedType ) ;^[CLASS] JSTypeSystem  [METHOD] recordInterfaces [RETURN_TYPE] void   JSType type JSType relatedType Property p [VARIABLES] ObjectType  itype  objType  JSTypeRegistry  registry  Set  invalidatingTypes  types  JSType  relatedType  top  type  boolean  FunctionType  constructor  Property  p  
[buglab_swap_variables]^p.addType (  top, relatedType ) ;^788^^^^^773^803^p.addType ( itype, top, relatedType ) ;^[CLASS] JSTypeSystem  [METHOD] recordInterfaces [RETURN_TYPE] void   JSType type JSType relatedType Property p [VARIABLES] ObjectType  itype  objType  JSTypeRegistry  registry  Set  invalidatingTypes  types  JSType  relatedType  top  type  boolean  FunctionType  constructor  Property  p  
[buglab_swap_variables]^p.addType ( itype, relatedType, top ) ;^788^^^^^773^803^p.addType ( itype, top, relatedType ) ;^[CLASS] JSTypeSystem  [METHOD] recordInterfaces [RETURN_TYPE] void   JSType type JSType relatedType Property p [VARIABLES] ObjectType  itype  objType  JSTypeRegistry  registry  Set  invalidatingTypes  types  JSType  relatedType  top  type  boolean  FunctionType  constructor  Property  p  
[buglab_swap_variables]^p.addType ( itype,  relatedType ) ;^788^^^^^773^803^p.addType ( itype, top, relatedType ) ;^[CLASS] JSTypeSystem  [METHOD] recordInterfaces [RETURN_TYPE] void   JSType type JSType relatedType Property p [VARIABLES] ObjectType  itype  objType  JSTypeRegistry  registry  Set  invalidatingTypes  types  JSType  relatedType  top  type  boolean  FunctionType  constructor  Property  p  
[buglab_swap_variables]^p.addType ( itype, top ) ;^788^^^^^773^803^p.addType ( itype, top, relatedType ) ;^[CLASS] JSTypeSystem  [METHOD] recordInterfaces [RETURN_TYPE] void   JSType type JSType relatedType Property p [VARIABLES] ObjectType  itype  objType  JSTypeRegistry  registry  Set  invalidatingTypes  types  JSType  relatedType  top  type  boolean  FunctionType  constructor  Property  p  
[buglab_swap_variables]^p.addType ( relatedType, top, itype ) ;^788^^^^^773^803^p.addType ( itype, top, relatedType ) ;^[CLASS] JSTypeSystem  [METHOD] recordInterfaces [RETURN_TYPE] void   JSType type JSType relatedType Property p [VARIABLES] ObjectType  itype  objType  JSTypeRegistry  registry  Set  invalidatingTypes  types  JSType  relatedType  top  type  boolean  FunctionType  constructor  Property  p  
[buglab_swap_variables]^p.addType ( top, itype, relatedType ) ;^788^^^^^773^803^p.addType ( itype, top, relatedType ) ;^[CLASS] JSTypeSystem  [METHOD] recordInterfaces [RETURN_TYPE] void   JSType type JSType relatedType Property p [VARIABLES] ObjectType  itype  objType  JSTypeRegistry  registry  Set  invalidatingTypes  types  JSType  relatedType  top  type  boolean  FunctionType  constructor  Property  p  
[buglab_swap_variables]^recordInterfaces ( p, relatedType, itype ) ;^790^^^^^773^803^recordInterfaces ( itype, relatedType, p ) ;^[CLASS] JSTypeSystem  [METHOD] recordInterfaces [RETURN_TYPE] void   JSType type JSType relatedType Property p [VARIABLES] ObjectType  itype  objType  JSTypeRegistry  registry  Set  invalidatingTypes  types  JSType  relatedType  top  type  boolean  FunctionType  constructor  Property  p  
[buglab_swap_variables]^recordInterfaces (  relatedType, p ) ;^790^^^^^773^803^recordInterfaces ( itype, relatedType, p ) ;^[CLASS] JSTypeSystem  [METHOD] recordInterfaces [RETURN_TYPE] void   JSType type JSType relatedType Property p [VARIABLES] ObjectType  itype  objType  JSTypeRegistry  registry  Set  invalidatingTypes  types  JSType  relatedType  top  type  boolean  FunctionType  constructor  Property  p  
[buglab_swap_variables]^recordInterfaces ( relatedType, itype, p ) ;^790^^^^^773^803^recordInterfaces ( itype, relatedType, p ) ;^[CLASS] JSTypeSystem  [METHOD] recordInterfaces [RETURN_TYPE] void   JSType type JSType relatedType Property p [VARIABLES] ObjectType  itype  objType  JSTypeRegistry  registry  Set  invalidatingTypes  types  JSType  relatedType  top  type  boolean  FunctionType  constructor  Property  p  
[buglab_swap_variables]^recordInterfaces ( itype,  p ) ;^790^^^^^773^803^recordInterfaces ( itype, relatedType, p ) ;^[CLASS] JSTypeSystem  [METHOD] recordInterfaces [RETURN_TYPE] void   JSType type JSType relatedType Property p [VARIABLES] ObjectType  itype  objType  JSTypeRegistry  registry  Set  invalidatingTypes  types  JSType  relatedType  top  type  boolean  FunctionType  constructor  Property  p  
[buglab_swap_variables]^recordInterfaces ( itype, relatedType ) ;^790^^^^^773^803^recordInterfaces ( itype, relatedType, p ) ;^[CLASS] JSTypeSystem  [METHOD] recordInterfaces [RETURN_TYPE] void   JSType type JSType relatedType Property p [VARIABLES] ObjectType  itype  objType  JSTypeRegistry  registry  Set  invalidatingTypes  types  JSType  relatedType  top  type  boolean  FunctionType  constructor  Property  p  
[buglab_swap_variables]^recordInterfaces ( itype, p, relatedType ) ;^790^^^^^773^803^recordInterfaces ( itype, relatedType, p ) ;^[CLASS] JSTypeSystem  [METHOD] recordInterfaces [RETURN_TYPE] void   JSType type JSType relatedType Property p [VARIABLES] ObjectType  itype  objType  JSTypeRegistry  registry  Set  invalidatingTypes  types  JSType  relatedType  top  type  boolean  FunctionType  constructor  Property  p  
[buglab_swap_variables]^recordInterfaces ( p, relatedType, itype ) ;^790^^^^^787^791^recordInterfaces ( itype, relatedType, p ) ;^[CLASS] JSTypeSystem  [METHOD] recordInterfaces [RETURN_TYPE] void   JSType type JSType relatedType Property p [VARIABLES] ObjectType  itype  objType  JSTypeRegistry  registry  Set  invalidatingTypes  types  JSType  relatedType  top  type  boolean  FunctionType  constructor  Property  p  
[buglab_swap_variables]^ConcreteFunctionType func = decl.getConcreteFunction ( tt ) ;^836^^^^^835^839^ConcreteFunctionType func = tt.getConcreteFunction ( decl ) ;^[CLASS] ConcreteTypeSystem  [METHOD] getFunctionScope [RETURN_TYPE] StaticScope   Node decl [VARIABLES] ConcreteFunctionType  func  Set  invalidatingTypes  boolean  CodingConvention  codingConvention  convention  Node  decl  JSTypeNative[]  nativeTypes  TightenTypes  tt  int  nextUniqueId  
[buglab_swap_variables]^return maybeAddAutoboxes ( node, c, prop ) ;^847^^^^^842^851^return maybeAddAutoboxes ( c, node, prop ) ;^[CLASS] ConcreteTypeSystem  [METHOD] getType [RETURN_TYPE] ConcreteType   ConcreteType> scope Node node String prop [VARIABLES] Set  invalidatingTypes  boolean  CodingConvention  codingConvention  convention  StaticScope  scope  Node  node  JSTypeNative[]  nativeTypes  String  prop  ConcreteType  c  TightenTypes  tt  int  nextUniqueId  
[buglab_swap_variables]^return maybeAddAutoboxes (  node, prop ) ;^847^^^^^842^851^return maybeAddAutoboxes ( c, node, prop ) ;^[CLASS] ConcreteTypeSystem  [METHOD] getType [RETURN_TYPE] ConcreteType   ConcreteType> scope Node node String prop [VARIABLES] Set  invalidatingTypes  boolean  CodingConvention  codingConvention  convention  StaticScope  scope  Node  node  JSTypeNative[]  nativeTypes  String  prop  ConcreteType  c  TightenTypes  tt  int  nextUniqueId  
[buglab_swap_variables]^return maybeAddAutoboxes ( c,  prop ) ;^847^^^^^842^851^return maybeAddAutoboxes ( c, node, prop ) ;^[CLASS] ConcreteTypeSystem  [METHOD] getType [RETURN_TYPE] ConcreteType   ConcreteType> scope Node node String prop [VARIABLES] Set  invalidatingTypes  boolean  CodingConvention  codingConvention  convention  StaticScope  scope  Node  node  JSTypeNative[]  nativeTypes  String  prop  ConcreteType  c  TightenTypes  tt  int  nextUniqueId  
[buglab_swap_variables]^return maybeAddAutoboxes ( prop, node, c ) ;^847^^^^^842^851^return maybeAddAutoboxes ( c, node, prop ) ;^[CLASS] ConcreteTypeSystem  [METHOD] getType [RETURN_TYPE] ConcreteType   ConcreteType> scope Node node String prop [VARIABLES] Set  invalidatingTypes  boolean  CodingConvention  codingConvention  convention  StaticScope  scope  Node  node  JSTypeNative[]  nativeTypes  String  prop  ConcreteType  c  TightenTypes  tt  int  nextUniqueId  
[buglab_swap_variables]^return maybeAddAutoboxes ( c, node ) ;^847^^^^^842^851^return maybeAddAutoboxes ( c, node, prop ) ;^[CLASS] ConcreteTypeSystem  [METHOD] getType [RETURN_TYPE] ConcreteType   ConcreteType> scope Node node String prop [VARIABLES] Set  invalidatingTypes  boolean  CodingConvention  codingConvention  convention  StaticScope  scope  Node  node  JSTypeNative[]  nativeTypes  String  prop  ConcreteType  c  TightenTypes  tt  int  nextUniqueId  
[buglab_swap_variables]^ConcreteType c = node.inferConcreteType ( ( TightenTypes.ConcreteScope )  scope, tt ) ;^845^846^^^^842^851^ConcreteType c = tt.inferConcreteType ( ( TightenTypes.ConcreteScope )  scope, node ) ;^[CLASS] ConcreteTypeSystem  [METHOD] getType [RETURN_TYPE] ConcreteType   ConcreteType> scope Node node String prop [VARIABLES] Set  invalidatingTypes  boolean  CodingConvention  codingConvention  convention  StaticScope  scope  Node  node  JSTypeNative[]  nativeTypes  String  prop  ConcreteType  c  TightenTypes  tt  int  nextUniqueId  
[buglab_swap_variables]^ConcreteType c = tt.inferConcreteType ( ( TightenTypes.ConcreteScope )  scope ) ;^845^846^^^^842^851^ConcreteType c = tt.inferConcreteType ( ( TightenTypes.ConcreteScope )  scope, node ) ;^[CLASS] ConcreteTypeSystem  [METHOD] getType [RETURN_TYPE] ConcreteType   ConcreteType> scope Node node String prop [VARIABLES] Set  invalidatingTypes  boolean  CodingConvention  codingConvention  convention  StaticScope  scope  Node  node  JSTypeNative[]  nativeTypes  String  prop  ConcreteType  c  TightenTypes  tt  int  nextUniqueId  
[buglab_swap_variables]^return maybeAddAutoboxes ( c, prop, node ) ;^847^^^^^842^851^return maybeAddAutoboxes ( c, node, prop ) ;^[CLASS] ConcreteTypeSystem  [METHOD] getType [RETURN_TYPE] ConcreteType   ConcreteType> scope Node node String prop [VARIABLES] Set  invalidatingTypes  boolean  CodingConvention  codingConvention  convention  StaticScope  scope  Node  node  JSTypeNative[]  nativeTypes  String  prop  ConcreteType  c  TightenTypes  tt  int  nextUniqueId  
[buglab_swap_variables]^if  ( prop != null && !concrete.getPropertyType ( concrete ) .isNone (  )  )  {^867^^^^^858^875^if  ( concrete != null && !concrete.getPropertyType ( prop ) .isNone (  )  )  {^[CLASS] ConcreteTypeSystem  [METHOD] maybeAddAutoboxes [RETURN_TYPE] ConcreteType   ConcreteType cType Node node String prop [VARIABLES] Set  invalidatingTypes  JSType  jsType  boolean  CodingConvention  codingConvention  convention  Node  node  JSTypeNative[]  nativeTypes  String  prop  JSTypeNative  nativeType  ConcreteType  cType  concrete  TightenTypes  tt  int  nextUniqueId  
[buglab_swap_variables]^cType = concrete.unionWith ( cType ) ;^868^^^^^858^875^cType = cType.unionWith ( concrete ) ;^[CLASS] ConcreteTypeSystem  [METHOD] maybeAddAutoboxes [RETURN_TYPE] ConcreteType   ConcreteType cType Node node String prop [VARIABLES] Set  invalidatingTypes  JSType  jsType  boolean  CodingConvention  codingConvention  convention  Node  node  JSTypeNative[]  nativeTypes  String  prop  JSTypeNative  nativeType  ConcreteType  cType  concrete  TightenTypes  tt  int  nextUniqueId  
[buglab_swap_variables]^ConcreteType concrete = nativeType.getConcreteInstance ( tt.getTypeRegistry (  ) .getNativeObjectType ( tt )  ) ;^865^866^^^^858^875^ConcreteType concrete = tt.getConcreteInstance ( tt.getTypeRegistry (  ) .getNativeObjectType ( nativeType )  ) ;^[CLASS] ConcreteTypeSystem  [METHOD] maybeAddAutoboxes [RETURN_TYPE] ConcreteType   ConcreteType cType Node node String prop [VARIABLES] Set  invalidatingTypes  JSType  jsType  boolean  CodingConvention  codingConvention  convention  Node  node  JSTypeNative[]  nativeTypes  String  prop  JSTypeNative  nativeType  ConcreteType  cType  concrete  TightenTypes  tt  int  nextUniqueId  
[buglab_swap_variables]^return maybeAddAutoboxes ( jsType, cType, prop ) ;^874^^^^^858^875^return maybeAddAutoboxes ( cType, jsType, prop ) ;^[CLASS] ConcreteTypeSystem  [METHOD] maybeAddAutoboxes [RETURN_TYPE] ConcreteType   ConcreteType cType Node node String prop [VARIABLES] Set  invalidatingTypes  JSType  jsType  boolean  CodingConvention  codingConvention  convention  Node  node  JSTypeNative[]  nativeTypes  String  prop  JSTypeNative  nativeType  ConcreteType  cType  concrete  TightenTypes  tt  int  nextUniqueId  
[buglab_swap_variables]^return maybeAddAutoboxes (  jsType, prop ) ;^874^^^^^858^875^return maybeAddAutoboxes ( cType, jsType, prop ) ;^[CLASS] ConcreteTypeSystem  [METHOD] maybeAddAutoboxes [RETURN_TYPE] ConcreteType   ConcreteType cType Node node String prop [VARIABLES] Set  invalidatingTypes  JSType  jsType  boolean  CodingConvention  codingConvention  convention  Node  node  JSTypeNative[]  nativeTypes  String  prop  JSTypeNative  nativeType  ConcreteType  cType  concrete  TightenTypes  tt  int  nextUniqueId  
[buglab_swap_variables]^return maybeAddAutoboxes ( cType, prop, jsType ) ;^874^^^^^858^875^return maybeAddAutoboxes ( cType, jsType, prop ) ;^[CLASS] ConcreteTypeSystem  [METHOD] maybeAddAutoboxes [RETURN_TYPE] ConcreteType   ConcreteType cType Node node String prop [VARIABLES] Set  invalidatingTypes  JSType  jsType  boolean  CodingConvention  codingConvention  convention  Node  node  JSTypeNative[]  nativeTypes  String  prop  JSTypeNative  nativeType  ConcreteType  cType  concrete  TightenTypes  tt  int  nextUniqueId  
[buglab_swap_variables]^return maybeAddAutoboxes ( cType,  prop ) ;^874^^^^^858^875^return maybeAddAutoboxes ( cType, jsType, prop ) ;^[CLASS] ConcreteTypeSystem  [METHOD] maybeAddAutoboxes [RETURN_TYPE] ConcreteType   ConcreteType cType Node node String prop [VARIABLES] Set  invalidatingTypes  JSType  jsType  boolean  CodingConvention  codingConvention  convention  Node  node  JSTypeNative[]  nativeTypes  String  prop  JSTypeNative  nativeType  ConcreteType  cType  concrete  TightenTypes  tt  int  nextUniqueId  
[buglab_swap_variables]^return maybeAddAutoboxes ( prop, jsType, cType ) ;^874^^^^^858^875^return maybeAddAutoboxes ( cType, jsType, prop ) ;^[CLASS] ConcreteTypeSystem  [METHOD] maybeAddAutoboxes [RETURN_TYPE] ConcreteType   ConcreteType cType Node node String prop [VARIABLES] Set  invalidatingTypes  JSType  jsType  boolean  CodingConvention  codingConvention  convention  Node  node  JSTypeNative[]  nativeTypes  String  prop  JSTypeNative  nativeType  ConcreteType  cType  concrete  TightenTypes  tt  int  nextUniqueId  
[buglab_swap_variables]^return maybeAddAutoboxes ( cType, jsType ) ;^874^^^^^858^875^return maybeAddAutoboxes ( cType, jsType, prop ) ;^[CLASS] ConcreteTypeSystem  [METHOD] maybeAddAutoboxes [RETURN_TYPE] ConcreteType   ConcreteType cType Node node String prop [VARIABLES] Set  invalidatingTypes  JSType  jsType  boolean  CodingConvention  codingConvention  convention  Node  node  JSTypeNative[]  nativeTypes  String  prop  JSTypeNative  nativeType  ConcreteType  cType  concrete  TightenTypes  tt  int  nextUniqueId  
[buglab_swap_variables]^return maybeAddAutoboxes ( prop, alt, cType ) ;^882^^^^^877^894^return maybeAddAutoboxes ( cType, alt, prop ) ;^[CLASS] ConcreteTypeSystem  [METHOD] maybeAddAutoboxes [RETURN_TYPE] ConcreteType   ConcreteType cType JSType jsType String prop [VARIABLES] Set  invalidatingTypes  JSType  alt  autoboxed  jsType  boolean  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  String  prop  ConcreteType  cType  TightenTypes  tt  int  nextUniqueId  
[buglab_swap_variables]^return maybeAddAutoboxes (  alt, prop ) ;^882^^^^^877^894^return maybeAddAutoboxes ( cType, alt, prop ) ;^[CLASS] ConcreteTypeSystem  [METHOD] maybeAddAutoboxes [RETURN_TYPE] ConcreteType   ConcreteType cType JSType jsType String prop [VARIABLES] Set  invalidatingTypes  JSType  alt  autoboxed  jsType  boolean  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  String  prop  ConcreteType  cType  TightenTypes  tt  int  nextUniqueId  
[buglab_swap_variables]^return maybeAddAutoboxes ( cType, prop, alt ) ;^882^^^^^877^894^return maybeAddAutoboxes ( cType, alt, prop ) ;^[CLASS] ConcreteTypeSystem  [METHOD] maybeAddAutoboxes [RETURN_TYPE] ConcreteType   ConcreteType cType JSType jsType String prop [VARIABLES] Set  invalidatingTypes  JSType  alt  autoboxed  jsType  boolean  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  String  prop  ConcreteType  cType  TightenTypes  tt  int  nextUniqueId  
[buglab_swap_variables]^return maybeAddAutoboxes ( cType,  prop ) ;^882^^^^^877^894^return maybeAddAutoboxes ( cType, alt, prop ) ;^[CLASS] ConcreteTypeSystem  [METHOD] maybeAddAutoboxes [RETURN_TYPE] ConcreteType   ConcreteType cType JSType jsType String prop [VARIABLES] Set  invalidatingTypes  JSType  alt  autoboxed  jsType  boolean  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  String  prop  ConcreteType  cType  TightenTypes  tt  int  nextUniqueId  
[buglab_swap_variables]^return maybeAddAutoboxes ( cType, alt ) ;^882^^^^^877^894^return maybeAddAutoboxes ( cType, alt, prop ) ;^[CLASS] ConcreteTypeSystem  [METHOD] maybeAddAutoboxes [RETURN_TYPE] ConcreteType   ConcreteType cType JSType jsType String prop [VARIABLES] Set  invalidatingTypes  JSType  alt  autoboxed  jsType  boolean  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  String  prop  ConcreteType  cType  TightenTypes  tt  int  nextUniqueId  
[buglab_swap_variables]^return maybeAddAutoboxes ( alt, cType, prop ) ;^882^^^^^877^894^return maybeAddAutoboxes ( cType, alt, prop ) ;^[CLASS] ConcreteTypeSystem  [METHOD] maybeAddAutoboxes [RETURN_TYPE] ConcreteType   ConcreteType cType JSType jsType String prop [VARIABLES] Set  invalidatingTypes  JSType  alt  autoboxed  jsType  boolean  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  String  prop  ConcreteType  cType  TightenTypes  tt  int  nextUniqueId  
[buglab_swap_variables]^return tt.unionWith ( cType.getConcreteInstance (  ( ObjectType )  jsType )  ) ;^890^^^^^877^894^return cType.unionWith ( tt.getConcreteInstance (  ( ObjectType )  jsType )  ) ;^[CLASS] ConcreteTypeSystem  [METHOD] maybeAddAutoboxes [RETURN_TYPE] ConcreteType   ConcreteType cType JSType jsType String prop [VARIABLES] Set  invalidatingTypes  JSType  alt  autoboxed  jsType  boolean  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  String  prop  ConcreteType  cType  TightenTypes  tt  int  nextUniqueId  
[buglab_swap_variables]^return tt.unionWith ( cType.getConcreteInstance (  ( ObjectType )  autoboxed )  ) ;^888^^^^^877^894^return cType.unionWith ( tt.getConcreteInstance (  ( ObjectType )  autoboxed )  ) ;^[CLASS] ConcreteTypeSystem  [METHOD] maybeAddAutoboxes [RETURN_TYPE] ConcreteType   ConcreteType cType JSType jsType String prop [VARIABLES] Set  invalidatingTypes  JSType  alt  autoboxed  jsType  boolean  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  String  prop  ConcreteType  cType  TightenTypes  tt  int  nextUniqueId  
[buglab_swap_variables]^} else if  ( t.isNone (  )  )  {^941^^^^^931^956^} else if  ( type.isNone (  )  )  {^[CLASS] ConcreteTypeSystem  [METHOD] getTypeWithProperty [RETURN_TYPE] ConcreteType   String field ConcreteType type [VARIABLES] ConcreteInstanceType  instanceType  Set  invalidatingTypes  boolean  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  String  field  ConcreteType  ret  t  type  TightenTypes  tt  int  nextUniqueId  
[buglab_swap_variables]^} else if  ( typeype.isUnion (  )  )  {^946^^^^^931^956^} else if  ( type.isUnion (  )  )  {^[CLASS] ConcreteTypeSystem  [METHOD] getTypeWithProperty [RETURN_TYPE] ConcreteType   String field ConcreteType type [VARIABLES] ConcreteInstanceType  instanceType  Set  invalidatingTypes  boolean  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  String  field  ConcreteType  ret  t  type  TightenTypes  tt  int  nextUniqueId  
[buglab_swap_variables]^ConcreteType ret = getTypeWithProperty ( t, field ) ;^949^^^^^931^956^ConcreteType ret = getTypeWithProperty ( field, t ) ;^[CLASS] ConcreteTypeSystem  [METHOD] getTypeWithProperty [RETURN_TYPE] ConcreteType   String field ConcreteType type [VARIABLES] ConcreteInstanceType  instanceType  Set  invalidatingTypes  boolean  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  String  field  ConcreteType  ret  t  type  TightenTypes  tt  int  nextUniqueId  
[buglab_swap_variables]^ConcreteType ret = getTypeWithProperty (  t ) ;^949^^^^^931^956^ConcreteType ret = getTypeWithProperty ( field, t ) ;^[CLASS] ConcreteTypeSystem  [METHOD] getTypeWithProperty [RETURN_TYPE] ConcreteType   String field ConcreteType type [VARIABLES] ConcreteInstanceType  instanceType  Set  invalidatingTypes  boolean  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  String  field  ConcreteType  ret  t  type  TightenTypes  tt  int  nextUniqueId  
[buglab_swap_variables]^ConcreteType ret = getTypeWithProperty ( field ) ;^949^^^^^931^956^ConcreteType ret = getTypeWithProperty ( field, t ) ;^[CLASS] ConcreteTypeSystem  [METHOD] getTypeWithProperty [RETURN_TYPE] ConcreteType   String field ConcreteType type [VARIABLES] ConcreteInstanceType  instanceType  Set  invalidatingTypes  boolean  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  String  field  ConcreteType  ret  t  type  TightenTypes  tt  int  nextUniqueId  
[buglab_swap_variables]^if  ( "prototype".equals ( codingConvention ) || field.isSuperClassReference ( field )  )  {^937^938^^^^931^956^if  ( "prototype".equals ( field ) || codingConvention.isSuperClassReference ( field )  )  {^[CLASS] ConcreteTypeSystem  [METHOD] getTypeWithProperty [RETURN_TYPE] ConcreteType   String field ConcreteType type [VARIABLES] ConcreteInstanceType  instanceType  Set  invalidatingTypes  boolean  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  String  field  ConcreteType  ret  t  type  TightenTypes  tt  int  nextUniqueId  
[buglab_swap_variables]^|| field.isSuperClassReference ( codingConvention )  )  {^938^^^^^931^956^|| codingConvention.isSuperClassReference ( field )  )  {^[CLASS] ConcreteTypeSystem  [METHOD] getTypeWithProperty [RETURN_TYPE] ConcreteType   String field ConcreteType type [VARIABLES] ConcreteInstanceType  instanceType  Set  invalidatingTypes  boolean  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  String  field  ConcreteType  ret  t  type  TightenTypes  tt  int  nextUniqueId  
[buglab_swap_variables]^} else if  ( t.isUnion (  )  )  {^946^^^^^931^956^} else if  ( type.isUnion (  )  )  {^[CLASS] ConcreteTypeSystem  [METHOD] getTypeWithProperty [RETURN_TYPE] ConcreteType   String field ConcreteType type [VARIABLES] ConcreteInstanceType  instanceType  Set  invalidatingTypes  boolean  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  String  field  ConcreteType  ret  t  type  TightenTypes  tt  int  nextUniqueId  
[buglab_swap_variables]^return field.getInstanceTypeWithProperty ( instanceType ) ;^935^^^^^931^956^return instanceType.getInstanceTypeWithProperty ( field ) ;^[CLASS] ConcreteTypeSystem  [METHOD] getTypeWithProperty [RETURN_TYPE] ConcreteType   String field ConcreteType type [VARIABLES] ConcreteInstanceType  instanceType  Set  invalidatingTypes  boolean  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  String  field  ConcreteType  ret  t  type  TightenTypes  tt  int  nextUniqueId  
