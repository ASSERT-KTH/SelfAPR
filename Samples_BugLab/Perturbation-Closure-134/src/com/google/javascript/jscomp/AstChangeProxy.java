[buglab_swap_variables]^replaceWith ( replacement, node, Lists.newArrayList ( parent )  ) ;^88^^^^^87^89^replaceWith ( parent, node, Lists.newArrayList ( replacement )  ) ;^[CLASS] AstChangeProxy  [METHOD] replaceWith [RETURN_TYPE] void   Node parent Node node Node replacement [VARIABLES] List  listeners  Node  node  parent  replacement  boolean  
[buglab_swap_variables]^replaceWith (  node, Lists.newArrayList ( replacement )  ) ;^88^^^^^87^89^replaceWith ( parent, node, Lists.newArrayList ( replacement )  ) ;^[CLASS] AstChangeProxy  [METHOD] replaceWith [RETURN_TYPE] void   Node parent Node node Node replacement [VARIABLES] List  listeners  Node  node  parent  replacement  boolean  
[buglab_swap_variables]^replaceWith ( node, parent, Lists.newArrayList ( replacement )  ) ;^88^^^^^87^89^replaceWith ( parent, node, Lists.newArrayList ( replacement )  ) ;^[CLASS] AstChangeProxy  [METHOD] replaceWith [RETURN_TYPE] void   Node parent Node node Node replacement [VARIABLES] List  listeners  Node  node  parent  replacement  boolean  
[buglab_swap_variables]^replaceWith ( parent,  Lists.newArrayList ( replacement )  ) ;^88^^^^^87^89^replaceWith ( parent, node, Lists.newArrayList ( replacement )  ) ;^[CLASS] AstChangeProxy  [METHOD] replaceWith [RETURN_TYPE] void   Node parent Node node Node replacement [VARIABLES] List  listeners  Node  node  parent  replacement  boolean  
[buglab_swap_variables]^if  (  ( node == 1 )  && size.checkTreeEqualsSilent ( replacements.get ( 0 )  )  )  {^99^^^^^84^114^if  (  ( size == 1 )  && node.checkTreeEqualsSilent ( replacements.get ( 0 )  )  )  {^[CLASS] AstChangeProxy  [METHOD] replaceWith [RETURN_TYPE] void   Node parent Node node Node> replacements [VARIABLES] List  listeners  replacements  boolean  int  parentType  size  Node  block  newChild  node  oldParent  parent  
[buglab_swap_variables]^if  (  ( size == 1 )  && replacements.checkTreeEqualsSilent ( node.get ( 0 )  )  )  {^99^^^^^84^114^if  (  ( size == 1 )  && node.checkTreeEqualsSilent ( replacements.get ( 0 )  )  )  {^[CLASS] AstChangeProxy  [METHOD] replaceWith [RETURN_TYPE] void   Node parent Node node Node> replacements [VARIABLES] List  listeners  replacements  boolean  int  parentType  size  Node  block  newChild  node  oldParent  parent  
[buglab_swap_variables]^Preconditions.checkState ( parentType == 1 || size == Token.BLOCK || parentType == Token.SCRIPT || parentType == Token.LABEL ) ;^106^107^108^109^^91^121^Preconditions.checkState ( size == 1 || parentType == Token.BLOCK || parentType == Token.SCRIPT || parentType == Token.LABEL ) ;^[CLASS] AstChangeProxy  [METHOD] replaceWith [RETURN_TYPE] void   Node parent Node node Node> replacements [VARIABLES] List  listeners  replacements  boolean  int  parentType  size  Node  block  newChild  node  oldParent  parent  
[buglab_swap_variables]^if  ( size == Token.LABEL && parentType != 1 )  {^111^^^^^96^126^if  ( parentType == Token.LABEL && size != 1 )  {^[CLASS] AstChangeProxy  [METHOD] replaceWith [RETURN_TYPE] void   Node parent Node node Node> replacements [VARIABLES] List  listeners  replacements  boolean  int  parentType  size  Node  block  newChild  node  oldParent  parent  
[buglab_swap_variables]^parent.addChildBefore (  node ) ;^123^^^^^111^127^parent.addChildBefore ( newChild, node ) ;^[CLASS] AstChangeProxy  [METHOD] replaceWith [RETURN_TYPE] void   Node parent Node node Node> replacements [VARIABLES] List  listeners  replacements  boolean  int  parentType  size  Node  block  newChild  node  oldParent  parent  
[buglab_swap_variables]^parent.addChildBefore ( node, newChild ) ;^123^^^^^111^127^parent.addChildBefore ( newChild, node ) ;^[CLASS] AstChangeProxy  [METHOD] replaceWith [RETURN_TYPE] void   Node parent Node node Node> replacements [VARIABLES] List  listeners  replacements  boolean  int  parentType  size  Node  block  newChild  node  oldParent  parent  
[buglab_swap_variables]^parent.addChildBefore ( newChild ) ;^123^^^^^111^127^parent.addChildBefore ( newChild, node ) ;^[CLASS] AstChangeProxy  [METHOD] replaceWith [RETURN_TYPE] void   Node parent Node node Node> replacements [VARIABLES] List  listeners  replacements  boolean  int  parentType  size  Node  block  newChild  node  oldParent  parent  
[buglab_swap_variables]^parent.replaceChild (  block ) ;^118^^^^^103^133^parent.replaceChild ( node, block ) ;^[CLASS] AstChangeProxy  [METHOD] replaceWith [RETURN_TYPE] void   Node parent Node node Node> replacements [VARIABLES] List  listeners  replacements  boolean  int  parentType  size  Node  block  newChild  node  oldParent  parent  
[buglab_swap_variables]^parent.replaceChild ( node ) ;^118^^^^^103^133^parent.replaceChild ( node, block ) ;^[CLASS] AstChangeProxy  [METHOD] replaceWith [RETURN_TYPE] void   Node parent Node node Node> replacements [VARIABLES] List  listeners  replacements  boolean  int  parentType  size  Node  block  newChild  node  oldParent  parent  
[buglab_swap_variables]^parent.addChildBefore (  node ) ;^123^^^^^108^138^parent.addChildBefore ( newChild, node ) ;^[CLASS] AstChangeProxy  [METHOD] replaceWith [RETURN_TYPE] void   Node parent Node node Node> replacements [VARIABLES] List  listeners  replacements  boolean  int  parentType  size  Node  block  newChild  node  oldParent  parent  
[buglab_swap_variables]^parent.addChildBefore ( newChild ) ;^123^^^^^108^138^parent.addChildBefore ( newChild, node ) ;^[CLASS] AstChangeProxy  [METHOD] replaceWith [RETURN_TYPE] void   Node parent Node node Node> replacements [VARIABLES] List  listeners  replacements  boolean  int  parentType  size  Node  block  newChild  node  oldParent  parent  
