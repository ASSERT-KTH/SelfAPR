[BugLab_Variable_Misuse]^notifyOfRemoval ( parent ) ;^81^^^^^78^82^notifyOfRemoval ( node ) ;^[CLASS] AstChangeProxy  [METHOD] removeChild [RETURN_TYPE] void   Node parent Node node [VARIABLES] List  listeners  Node  node  parent  boolean  
[BugLab_Variable_Misuse]^replaceWith ( replacement, node, Lists.newArrayList ( replacement )  ) ;^88^^^^^87^89^replaceWith ( parent, node, Lists.newArrayList ( replacement )  ) ;^[CLASS] AstChangeProxy  [METHOD] replaceWith [RETURN_TYPE] void   Node parent Node node Node replacement [VARIABLES] List  listeners  Node  node  parent  replacement  boolean  
[BugLab_Variable_Misuse]^replaceWith ( parent, replacement, Lists.newArrayList ( replacement )  ) ;^88^^^^^87^89^replaceWith ( parent, node, Lists.newArrayList ( replacement )  ) ;^[CLASS] AstChangeProxy  [METHOD] replaceWith [RETURN_TYPE] void   Node parent Node node Node replacement [VARIABLES] List  listeners  Node  node  parent  replacement  boolean  
[BugLab_Variable_Misuse]^replaceWith ( parent, node, Lists.newArrayList ( node )  ) ;^88^^^^^87^89^replaceWith ( parent, node, Lists.newArrayList ( replacement )  ) ;^[CLASS] AstChangeProxy  [METHOD] replaceWith [RETURN_TYPE] void   Node parent Node node Node replacement [VARIABLES] List  listeners  Node  node  parent  replacement  boolean  
[BugLab_Argument_Swapping]^replaceWith ( node, parent, Lists.newArrayList ( replacement )  ) ;^88^^^^^87^89^replaceWith ( parent, node, Lists.newArrayList ( replacement )  ) ;^[CLASS] AstChangeProxy  [METHOD] replaceWith [RETURN_TYPE] void   Node parent Node node Node replacement [VARIABLES] List  listeners  Node  node  parent  replacement  boolean  
[BugLab_Argument_Swapping]^replaceWith ( replacement, node, Lists.newArrayList ( parent )  ) ;^88^^^^^87^89^replaceWith ( parent, node, Lists.newArrayList ( replacement )  ) ;^[CLASS] AstChangeProxy  [METHOD] replaceWith [RETURN_TYPE] void   Node parent Node node Node replacement [VARIABLES] List  listeners  Node  node  parent  replacement  boolean  
[BugLab_Variable_Misuse]^replaceWith ( parent, node, Lists.newArrayList ( parent )  ) ;^88^^^^^87^89^replaceWith ( parent, node, Lists.newArrayList ( replacement )  ) ;^[CLASS] AstChangeProxy  [METHOD] replaceWith [RETURN_TYPE] void   Node parent Node node Node replacement [VARIABLES] List  listeners  Node  node  parent  replacement  boolean  
[BugLab_Variable_Misuse]^int size = null.size (  ) ;^97^^^^^82^112^int size = replacements.size (  ) ;^[CLASS] AstChangeProxy  [METHOD] replaceWith [RETURN_TYPE] void   Node parent Node node Node> replacements [VARIABLES] List  listeners  replacements  boolean  int  parentType  size  Node  block  newChild  node  oldParent  parent  
[BugLab_Variable_Misuse]^if  (  ( parentType == 1 )  && node.checkTreeEqualsSilent ( replacements.get ( 0 )  )  )  {^99^^^^^84^114^if  (  ( size == 1 )  && node.checkTreeEqualsSilent ( replacements.get ( 0 )  )  )  {^[CLASS] AstChangeProxy  [METHOD] replaceWith [RETURN_TYPE] void   Node parent Node node Node> replacements [VARIABLES] List  listeners  replacements  boolean  int  parentType  size  Node  block  newChild  node  oldParent  parent  
[BugLab_Variable_Misuse]^if  (  ( size == 1 )  && parent.checkTreeEqualsSilent ( replacements.get ( 0 )  )  )  {^99^^^^^84^114^if  (  ( size == 1 )  && node.checkTreeEqualsSilent ( replacements.get ( 0 )  )  )  {^[CLASS] AstChangeProxy  [METHOD] replaceWith [RETURN_TYPE] void   Node parent Node node Node> replacements [VARIABLES] List  listeners  replacements  boolean  int  parentType  size  Node  block  newChild  node  oldParent  parent  
[BugLab_Argument_Swapping]^if  (  ( node == 1 )  && size.checkTreeEqualsSilent ( replacements.get ( 0 )  )  )  {^99^^^^^84^114^if  (  ( size == 1 )  && node.checkTreeEqualsSilent ( replacements.get ( 0 )  )  )  {^[CLASS] AstChangeProxy  [METHOD] replaceWith [RETURN_TYPE] void   Node parent Node node Node> replacements [VARIABLES] List  listeners  replacements  boolean  int  parentType  size  Node  block  newChild  node  oldParent  parent  
[BugLab_Argument_Swapping]^if  (  ( size == 1 )  && replacements.checkTreeEqualsSilent ( node.get ( 0 )  )  )  {^99^^^^^84^114^if  (  ( size == 1 )  && node.checkTreeEqualsSilent ( replacements.get ( 0 )  )  )  {^[CLASS] AstChangeProxy  [METHOD] replaceWith [RETURN_TYPE] void   Node parent Node node Node> replacements [VARIABLES] List  listeners  replacements  boolean  int  parentType  size  Node  block  newChild  node  oldParent  parent  
[BugLab_Argument_Swapping]^if  (  ( replacements == 1 )  && node.checkTreeEqualsSilent ( size.get ( 0 )  )  )  {^99^^^^^84^114^if  (  ( size == 1 )  && node.checkTreeEqualsSilent ( replacements.get ( 0 )  )  )  {^[CLASS] AstChangeProxy  [METHOD] replaceWith [RETURN_TYPE] void   Node parent Node node Node> replacements [VARIABLES] List  listeners  replacements  boolean  int  parentType  size  Node  block  newChild  node  oldParent  parent  
[BugLab_Wrong_Operator]^if  (  ( size == 1 )  || node.checkTreeEqualsSilent ( replacements.get ( 0 )  )  )  {^99^^^^^84^114^if  (  ( size == 1 )  && node.checkTreeEqualsSilent ( replacements.get ( 0 )  )  )  {^[CLASS] AstChangeProxy  [METHOD] replaceWith [RETURN_TYPE] void   Node parent Node node Node> replacements [VARIABLES] List  listeners  replacements  boolean  int  parentType  size  Node  block  newChild  node  oldParent  parent  
[BugLab_Wrong_Operator]^if  (  ( size != 1 )  && node.checkTreeEqualsSilent ( replacements.get ( 0 )  )  )  {^99^^^^^84^114^if  (  ( size == 1 )  && node.checkTreeEqualsSilent ( replacements.get ( 0 )  )  )  {^[CLASS] AstChangeProxy  [METHOD] replaceWith [RETURN_TYPE] void   Node parent Node node Node> replacements [VARIABLES] List  listeners  replacements  boolean  int  parentType  size  Node  block  newChild  node  oldParent  parent  
[BugLab_Wrong_Literal]^if  (  ( size == size )  && node.checkTreeEqualsSilent ( replacements.get ( 0 )  )  )  {^99^^^^^84^114^if  (  ( size == 1 )  && node.checkTreeEqualsSilent ( replacements.get ( 0 )  )  )  {^[CLASS] AstChangeProxy  [METHOD] replaceWith [RETURN_TYPE] void   Node parent Node node Node> replacements [VARIABLES] List  listeners  replacements  boolean  int  parentType  size  Node  block  newChild  node  oldParent  parent  
[BugLab_Wrong_Literal]^if  (  ( size == 1 )  && node.checkTreeEqualsSilent ( replacements.get ( 1 )  )  )  {^99^^^^^84^114^if  (  ( size == 1 )  && node.checkTreeEqualsSilent ( replacements.get ( 0 )  )  )  {^[CLASS] AstChangeProxy  [METHOD] replaceWith [RETURN_TYPE] void   Node parent Node node Node> replacements [VARIABLES] List  listeners  replacements  boolean  int  parentType  size  Node  block  newChild  node  oldParent  parent  
[BugLab_Wrong_Literal]^if  (  ( size == 1 )  && node.checkTreeEqualsSilent ( replacements.get ( -1 )  )  )  {^99^^^^^84^114^if  (  ( size == 1 )  && node.checkTreeEqualsSilent ( replacements.get ( 0 )  )  )  {^[CLASS] AstChangeProxy  [METHOD] replaceWith [RETURN_TYPE] void   Node parent Node node Node> replacements [VARIABLES] List  listeners  replacements  boolean  int  parentType  size  Node  block  newChild  node  oldParent  parent  
[BugLab_Wrong_Literal]^if  (  ( size == 1 )  && node.checkTreeEqualsSilent ( replacements.get ( parentType )  )  )  {^99^^^^^84^114^if  (  ( size == 1 )  && node.checkTreeEqualsSilent ( replacements.get ( 0 )  )  )  {^[CLASS] AstChangeProxy  [METHOD] replaceWith [RETURN_TYPE] void   Node parent Node node Node> replacements [VARIABLES] List  listeners  replacements  boolean  int  parentType  size  Node  block  newChild  node  oldParent  parent  
[BugLab_Variable_Misuse]^int oldParentType = parent.getType (  ) ;^104^^^^^89^119^int parentType = parent.getType (  ) ;^[CLASS] AstChangeProxy  [METHOD] replaceWith [RETURN_TYPE] void   Node parent Node node Node> replacements [VARIABLES] List  listeners  replacements  boolean  int  parentType  size  Node  block  newChild  node  oldParent  parent  
[BugLab_Variable_Misuse]^int nodeType = parent.getType (  ) ;^104^^^^^89^119^int parentType = parent.getType (  ) ;^[CLASS] AstChangeProxy  [METHOD] replaceWith [RETURN_TYPE] void   Node parent Node node Node> replacements [VARIABLES] List  listeners  replacements  boolean  int  parentType  size  Node  block  newChild  node  oldParent  parent  
[BugLab_Variable_Misuse]^Preconditions.checkState ( size == 1 || size == Token.BLOCK || parentType == Token.SCRIPT || parentType == Token.LABEL ) ;^106^107^108^109^^91^121^Preconditions.checkState ( size == 1 || parentType == Token.BLOCK || parentType == Token.SCRIPT || parentType == Token.LABEL ) ;^[CLASS] AstChangeProxy  [METHOD] replaceWith [RETURN_TYPE] void   Node parent Node node Node> replacements [VARIABLES] List  listeners  replacements  boolean  int  parentType  size  Node  block  newChild  node  oldParent  parent  
[BugLab_Argument_Swapping]^Preconditions.checkState ( parentType == 1 || size == Token.BLOCK || parentType == Token.SCRIPT || parentType == Token.LABEL ) ;^106^107^108^109^^91^121^Preconditions.checkState ( size == 1 || parentType == Token.BLOCK || parentType == Token.SCRIPT || parentType == Token.LABEL ) ;^[CLASS] AstChangeProxy  [METHOD] replaceWith [RETURN_TYPE] void   Node parent Node node Node> replacements [VARIABLES] List  listeners  replacements  boolean  int  parentType  size  Node  block  newChild  node  oldParent  parent  
[BugLab_Wrong_Operator]^Preconditions.checkState ( size == 1 && parentType == Token.BLOCK || parentType == Token.SCRIPT || parentType == Token.LABEL ) ;^106^107^108^109^^91^121^Preconditions.checkState ( size == 1 || parentType == Token.BLOCK || parentType == Token.SCRIPT || parentType == Token.LABEL ) ;^[CLASS] AstChangeProxy  [METHOD] replaceWith [RETURN_TYPE] void   Node parent Node node Node> replacements [VARIABLES] List  listeners  replacements  boolean  int  parentType  size  Node  block  newChild  node  oldParent  parent  
[BugLab_Wrong_Operator]^Preconditions.checkState ( size != 1 || parentType == Token.BLOCK || parentType == Token.SCRIPT || parentType == Token.LABEL ) ;^106^107^108^109^^91^121^Preconditions.checkState ( size == 1 || parentType == Token.BLOCK || parentType == Token.SCRIPT || parentType == Token.LABEL ) ;^[CLASS] AstChangeProxy  [METHOD] replaceWith [RETURN_TYPE] void   Node parent Node node Node> replacements [VARIABLES] List  listeners  replacements  boolean  int  parentType  size  Node  block  newChild  node  oldParent  parent  
[BugLab_Wrong_Operator]^Preconditions.checkState ( size >= 1 || parentType == Token.BLOCK || parentType == Token.SCRIPT || parentType == Token.LABEL ) ;^106^107^108^109^^91^121^Preconditions.checkState ( size == 1 || parentType == Token.BLOCK || parentType == Token.SCRIPT || parentType == Token.LABEL ) ;^[CLASS] AstChangeProxy  [METHOD] replaceWith [RETURN_TYPE] void   Node parent Node node Node> replacements [VARIABLES] List  listeners  replacements  boolean  int  parentType  size  Node  block  newChild  node  oldParent  parent  
[BugLab_Wrong_Operator]^Preconditions.checkState ( size <= 1 || parentType == Token.BLOCK || parentType == Token.SCRIPT || parentType == Token.LABEL ) ;^106^107^108^109^^91^121^Preconditions.checkState ( size == 1 || parentType == Token.BLOCK || parentType == Token.SCRIPT || parentType == Token.LABEL ) ;^[CLASS] AstChangeProxy  [METHOD] replaceWith [RETURN_TYPE] void   Node parent Node node Node> replacements [VARIABLES] List  listeners  replacements  boolean  int  parentType  size  Node  block  newChild  node  oldParent  parent  
[BugLab_Wrong_Literal]^Preconditions.checkState ( size == 2 || parentType == Token.BLOCK || parentType == Token.SCRIPT || parentType == Token.LABEL ) ;^106^107^108^109^^91^121^Preconditions.checkState ( size == 1 || parentType == Token.BLOCK || parentType == Token.SCRIPT || parentType == Token.LABEL ) ;^[CLASS] AstChangeProxy  [METHOD] replaceWith [RETURN_TYPE] void   Node parent Node node Node> replacements [VARIABLES] List  listeners  replacements  boolean  int  parentType  size  Node  block  newChild  node  oldParent  parent  
[BugLab_Variable_Misuse]^if  ( size == Token.LABEL && size != 1 )  {^111^^^^^96^126^if  ( parentType == Token.LABEL && size != 1 )  {^[CLASS] AstChangeProxy  [METHOD] replaceWith [RETURN_TYPE] void   Node parent Node node Node> replacements [VARIABLES] List  listeners  replacements  boolean  int  parentType  size  Node  block  newChild  node  oldParent  parent  
[BugLab_Variable_Misuse]^if  ( parentType == Token.LABEL && parentType != 1 )  {^111^^^^^96^126^if  ( parentType == Token.LABEL && size != 1 )  {^[CLASS] AstChangeProxy  [METHOD] replaceWith [RETURN_TYPE] void   Node parent Node node Node> replacements [VARIABLES] List  listeners  replacements  boolean  int  parentType  size  Node  block  newChild  node  oldParent  parent  
[BugLab_Variable_Misuse]^if  ( oldParentType == Token.LABEL && size != 1 )  {^111^^^^^96^126^if  ( parentType == Token.LABEL && size != 1 )  {^[CLASS] AstChangeProxy  [METHOD] replaceWith [RETURN_TYPE] void   Node parent Node node Node> replacements [VARIABLES] List  listeners  replacements  boolean  int  parentType  size  Node  block  newChild  node  oldParent  parent  
[BugLab_Argument_Swapping]^if  ( size == Token.LABEL && parentType != 1 )  {^111^^^^^96^126^if  ( parentType == Token.LABEL && size != 1 )  {^[CLASS] AstChangeProxy  [METHOD] replaceWith [RETURN_TYPE] void   Node parent Node node Node> replacements [VARIABLES] List  listeners  replacements  boolean  int  parentType  size  Node  block  newChild  node  oldParent  parent  
[BugLab_Wrong_Operator]^if  ( parentType == Token.LABEL || size != 1 )  {^111^^^^^96^126^if  ( parentType == Token.LABEL && size != 1 )  {^[CLASS] AstChangeProxy  [METHOD] replaceWith [RETURN_TYPE] void   Node parent Node node Node> replacements [VARIABLES] List  listeners  replacements  boolean  int  parentType  size  Node  block  newChild  node  oldParent  parent  
[BugLab_Wrong_Operator]^if  ( parentType >= Token.LABEL && size != 1 )  {^111^^^^^96^126^if  ( parentType == Token.LABEL && size != 1 )  {^[CLASS] AstChangeProxy  [METHOD] replaceWith [RETURN_TYPE] void   Node parent Node node Node> replacements [VARIABLES] List  listeners  replacements  boolean  int  parentType  size  Node  block  newChild  node  oldParent  parent  
[BugLab_Wrong_Operator]^if  ( parentType == Token.LABEL && size == 1 )  {^111^^^^^96^126^if  ( parentType == Token.LABEL && size != 1 )  {^[CLASS] AstChangeProxy  [METHOD] replaceWith [RETURN_TYPE] void   Node parent Node node Node> replacements [VARIABLES] List  listeners  replacements  boolean  int  parentType  size  Node  block  newChild  node  oldParent  parent  
[BugLab_Wrong_Literal]^if  ( parentType == Token.LABEL && size != parentType )  {^111^^^^^96^126^if  ( parentType == Token.LABEL && size != 1 )  {^[CLASS] AstChangeProxy  [METHOD] replaceWith [RETURN_TYPE] void   Node parent Node node Node> replacements [VARIABLES] List  listeners  replacements  boolean  int  parentType  size  Node  block  newChild  node  oldParent  parent  
[BugLab_Variable_Misuse]^Node oldParent = oldParent.getParent (  ) ;^122^^^^^111^127^Node oldParent = newChild.getParent (  ) ;^[CLASS] AstChangeProxy  [METHOD] replaceWith [RETURN_TYPE] void   Node parent Node node Node> replacements [VARIABLES] List  listeners  replacements  boolean  int  parentType  size  Node  block  newChild  node  oldParent  parent  
[BugLab_Variable_Misuse]^parent.addChildBefore ( parent, node ) ;^123^^^^^111^127^parent.addChildBefore ( newChild, node ) ;^[CLASS] AstChangeProxy  [METHOD] replaceWith [RETURN_TYPE] void   Node parent Node node Node> replacements [VARIABLES] List  listeners  replacements  boolean  int  parentType  size  Node  block  newChild  node  oldParent  parent  
[BugLab_Variable_Misuse]^parent.addChildBefore ( newChild, parent ) ;^123^^^^^111^127^parent.addChildBefore ( newChild, node ) ;^[CLASS] AstChangeProxy  [METHOD] replaceWith [RETURN_TYPE] void   Node parent Node node Node> replacements [VARIABLES] List  listeners  replacements  boolean  int  parentType  size  Node  block  newChild  node  oldParent  parent  
[BugLab_Argument_Swapping]^parent.addChildBefore ( node, newChild ) ;^123^^^^^111^127^parent.addChildBefore ( newChild, node ) ;^[CLASS] AstChangeProxy  [METHOD] replaceWith [RETURN_TYPE] void   Node parent Node node Node> replacements [VARIABLES] List  listeners  replacements  boolean  int  parentType  size  Node  block  newChild  node  oldParent  parent  
[BugLab_Variable_Misuse]^parent.removeChild ( oldParent ) ;^125^^^^^111^127^parent.removeChild ( node ) ;^[CLASS] AstChangeProxy  [METHOD] replaceWith [RETURN_TYPE] void   Node parent Node node Node> replacements [VARIABLES] List  listeners  replacements  boolean  int  parentType  size  Node  block  newChild  node  oldParent  parent  
[BugLab_Variable_Misuse]^Node block = new Node ( Token.null ) ;^112^^^^^97^127^Node block = new Node ( Token.BLOCK ) ;^[CLASS] AstChangeProxy  [METHOD] replaceWith [RETURN_TYPE] void   Node parent Node node Node> replacements [VARIABLES] List  listeners  replacements  boolean  int  parentType  size  Node  block  newChild  node  oldParent  parent  
[BugLab_Variable_Misuse]^Node oldParent = parent.getParent (  ) ;^114^^^^^99^129^Node oldParent = newChild.getParent (  ) ;^[CLASS] AstChangeProxy  [METHOD] replaceWith [RETURN_TYPE] void   Node parent Node node Node> replacements [VARIABLES] List  listeners  replacements  boolean  int  parentType  size  Node  block  newChild  node  oldParent  parent  
[BugLab_Variable_Misuse]^block.addChildToBack ( parent ) ;^115^^^^^100^130^block.addChildToBack ( newChild ) ;^[CLASS] AstChangeProxy  [METHOD] replaceWith [RETURN_TYPE] void   Node parent Node node Node> replacements [VARIABLES] List  listeners  replacements  boolean  int  parentType  size  Node  block  newChild  node  oldParent  parent  
[BugLab_Variable_Misuse]^parent.replaceChild ( oldParent, block ) ;^118^^^^^103^133^parent.replaceChild ( node, block ) ;^[CLASS] AstChangeProxy  [METHOD] replaceWith [RETURN_TYPE] void   Node parent Node node Node> replacements [VARIABLES] List  listeners  replacements  boolean  int  parentType  size  Node  block  newChild  node  oldParent  parent  
[BugLab_Variable_Misuse]^parent.replaceChild ( node, oldParent ) ;^118^^^^^103^133^parent.replaceChild ( node, block ) ;^[CLASS] AstChangeProxy  [METHOD] replaceWith [RETURN_TYPE] void   Node parent Node node Node> replacements [VARIABLES] List  listeners  replacements  boolean  int  parentType  size  Node  block  newChild  node  oldParent  parent  
[BugLab_Argument_Swapping]^parent.replaceChild ( block, node ) ;^118^^^^^103^133^parent.replaceChild ( node, block ) ;^[CLASS] AstChangeProxy  [METHOD] replaceWith [RETURN_TYPE] void   Node parent Node node Node> replacements [VARIABLES] List  listeners  replacements  boolean  int  parentType  size  Node  block  newChild  node  oldParent  parent  
[BugLab_Variable_Misuse]^Node oldParent = parent.getParent (  ) ;^122^^^^^107^137^Node oldParent = newChild.getParent (  ) ;^[CLASS] AstChangeProxy  [METHOD] replaceWith [RETURN_TYPE] void   Node parent Node node Node> replacements [VARIABLES] List  listeners  replacements  boolean  int  parentType  size  Node  block  newChild  node  oldParent  parent  
[BugLab_Variable_Misuse]^parent.replaceChild ( node, parent ) ;^118^^^^^103^133^parent.replaceChild ( node, block ) ;^[CLASS] AstChangeProxy  [METHOD] replaceWith [RETURN_TYPE] void   Node parent Node node Node> replacements [VARIABLES] List  listeners  replacements  boolean  int  parentType  size  Node  block  newChild  node  oldParent  parent  
[BugLab_Variable_Misuse]^parent.addChildBefore ( oldParent, node ) ;^123^^^^^108^138^parent.addChildBefore ( newChild, node ) ;^[CLASS] AstChangeProxy  [METHOD] replaceWith [RETURN_TYPE] void   Node parent Node node Node> replacements [VARIABLES] List  listeners  replacements  boolean  int  parentType  size  Node  block  newChild  node  oldParent  parent  
[BugLab_Variable_Misuse]^parent.removeChild ( oldParent ) ;^125^^^^^110^140^parent.removeChild ( node ) ;^[CLASS] AstChangeProxy  [METHOD] replaceWith [RETURN_TYPE] void   Node parent Node node Node> replacements [VARIABLES] List  listeners  replacements  boolean  int  parentType  size  Node  block  newChild  node  oldParent  parent  
[BugLab_Variable_Misuse]^notifyOfRemoval ( parent ) ;^128^^^^^113^143^notifyOfRemoval ( node ) ;^[CLASS] AstChangeProxy  [METHOD] replaceWith [RETURN_TYPE] void   Node parent Node node Node> replacements [VARIABLES] List  listeners  replacements  boolean  int  parentType  size  Node  block  newChild  node  oldParent  parent  
