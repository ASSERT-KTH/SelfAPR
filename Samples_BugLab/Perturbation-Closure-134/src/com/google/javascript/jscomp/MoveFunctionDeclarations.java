[buglab_swap_variables]^NodeTraversal.traverse ( root, compiler, this ) ;^62^^^^^61^70^NodeTraversal.traverse ( compiler, root, this ) ;^[CLASS] MoveFunctionDeclarations  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] JSModule  module  AbstractCompiler  compiler  Entry  entry  boolean  Map  functions  Node  addingRoot  externs  n  root  
[buglab_swap_variables]^NodeTraversal.traverse ( compiler,  this ) ;^62^^^^^61^70^NodeTraversal.traverse ( compiler, root, this ) ;^[CLASS] MoveFunctionDeclarations  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] JSModule  module  AbstractCompiler  compiler  Entry  entry  boolean  Map  functions  Node  addingRoot  externs  n  root  
[buglab_swap_variables]^NodeTraversal.traverse (  root, this ) ;^62^^^^^61^70^NodeTraversal.traverse ( compiler, root, this ) ;^[CLASS] MoveFunctionDeclarations  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] JSModule  module  AbstractCompiler  compiler  Entry  entry  boolean  Map  functions  Node  addingRoot  externs  n  root  
[buglab_swap_variables]^Node addingRoot = module.getNodeForCodeInsertion ( compiler ) ;^65^^^^^61^70^Node addingRoot = compiler.getNodeForCodeInsertion ( module ) ;^[CLASS] MoveFunctionDeclarations  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] JSModule  module  AbstractCompiler  compiler  Entry  entry  boolean  Map  functions  Node  addingRoot  externs  n  root  
[buglab_swap_variables]^if  ( module == null )  {^91^^^^^79^97^if  ( moduleFunctions == null )  {^[CLASS] MoveFunctionDeclarations  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  n  parent  JSModule  module  List  moduleFunctions  Map  functions  
[buglab_swap_variables]^if  ( moduleFunctionsFunctions == null )  {^91^^^^^79^97^if  ( moduleFunctions == null )  {^[CLASS] MoveFunctionDeclarations  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  n  parent  JSModule  module  List  moduleFunctions  Map  functions  
[buglab_swap_variables]^functions.put ( moduleFunctions, module ) ;^93^^^^^79^97^functions.put ( module, moduleFunctions ) ;^[CLASS] MoveFunctionDeclarations  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  n  parent  JSModule  module  List  moduleFunctions  Map  functions  
[buglab_swap_variables]^functions.put (  moduleFunctions ) ;^93^^^^^79^97^functions.put ( module, moduleFunctions ) ;^[CLASS] MoveFunctionDeclarations  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  n  parent  JSModule  module  List  moduleFunctions  Map  functions  
[buglab_swap_variables]^functions.put ( module ) ;^93^^^^^79^97^functions.put ( module, moduleFunctions ) ;^[CLASS] MoveFunctionDeclarations  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  n  parent  JSModule  module  List  moduleFunctions  Map  functions  
[buglab_swap_variables]^List<Node> functionsFunctions = module.get ( module ) ;^90^^^^^79^97^List<Node> moduleFunctions = functions.get ( module ) ;^[CLASS] MoveFunctionDeclarations  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  n  parent  JSModule  module  List  moduleFunctions  Map  functions  
