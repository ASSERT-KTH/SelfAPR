[BugLab_Variable_Misuse]^NodeTraversal.traverse ( compiler, n, this ) ;^62^^^^^61^70^NodeTraversal.traverse ( compiler, root, this ) ;^[CLASS] MoveFunctionDeclarations  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] JSModule  module  AbstractCompiler  compiler  Entry  entry  boolean  Map  functions  Node  addingRoot  externs  n  root  
[BugLab_Argument_Swapping]^NodeTraversal.traverse ( root, compiler, this ) ;^62^^^^^61^70^NodeTraversal.traverse ( compiler, root, this ) ;^[CLASS] MoveFunctionDeclarations  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] JSModule  module  AbstractCompiler  compiler  Entry  entry  boolean  Map  functions  Node  addingRoot  externs  n  root  
[BugLab_Argument_Swapping]^Node addingRoot = module.getNodeForCodeInsertion ( compiler ) ;^65^^^^^61^70^Node addingRoot = compiler.getNodeForCodeInsertion ( module ) ;^[CLASS] MoveFunctionDeclarations  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] JSModule  module  AbstractCompiler  compiler  Entry  entry  boolean  Map  functions  Node  addingRoot  externs  n  root  
[BugLab_Variable_Misuse]^addingRoot.addChildToFront ( root ) ;^67^^^^^61^70^addingRoot.addChildToFront ( n ) ;^[CLASS] MoveFunctionDeclarations  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] JSModule  module  AbstractCompiler  compiler  Entry  entry  boolean  Map  functions  Node  addingRoot  externs  n  root  
[BugLab_Variable_Misuse]^Node gramps = parent.getAncestor ( 2 ) ;^74^^^^^73^76^Node gramps = n.getAncestor ( 2 ) ;^[CLASS] MoveFunctionDeclarations  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Map  functions  NodeTraversal  t  Node  gramps  n  parent  
[BugLab_Variable_Misuse]^return parent == null || gramps.getType (  )  != Token.SCRIPT;^75^^^^^73^76^return gramps == null || gramps.getType (  )  != Token.SCRIPT;^[CLASS] MoveFunctionDeclarations  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Map  functions  NodeTraversal  t  Node  gramps  n  parent  
[BugLab_Wrong_Operator]^return gramps == null && gramps.getType (  )  != Token.SCRIPT;^75^^^^^73^76^return gramps == null || gramps.getType (  )  != Token.SCRIPT;^[CLASS] MoveFunctionDeclarations  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Map  functions  NodeTraversal  t  Node  gramps  n  parent  
[BugLab_Wrong_Operator]^return gramps != null || gramps.getType (  )  != Token.SCRIPT;^75^^^^^73^76^return gramps == null || gramps.getType (  )  != Token.SCRIPT;^[CLASS] MoveFunctionDeclarations  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Map  functions  NodeTraversal  t  Node  gramps  n  parent  
[BugLab_Wrong_Operator]^return gramps == null || gramps.getType (  )  == Token.SCRIPT;^75^^^^^73^76^return gramps == null || gramps.getType (  )  != Token.SCRIPT;^[CLASS] MoveFunctionDeclarations  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Map  functions  NodeTraversal  t  Node  gramps  n  parent  
[BugLab_Variable_Misuse]^if  ( n == null || parent.getType (  )  != Token.SCRIPT )  {^80^81^^^^79^97^if  ( parent == null || parent.getType (  )  != Token.SCRIPT )  {^[CLASS] MoveFunctionDeclarations  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  n  parent  JSModule  module  List  moduleFunctions  Map  functions  
[BugLab_Wrong_Operator]^if  ( parent == null && parent.getType (  )  != Token.SCRIPT )  {^80^81^^^^79^97^if  ( parent == null || parent.getType (  )  != Token.SCRIPT )  {^[CLASS] MoveFunctionDeclarations  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  n  parent  JSModule  module  List  moduleFunctions  Map  functions  
[BugLab_Wrong_Operator]^if  ( parent != null || parent.getType (  )  != Token.SCRIPT )  {^80^81^^^^79^97^if  ( parent == null || parent.getType (  )  != Token.SCRIPT )  {^[CLASS] MoveFunctionDeclarations  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  n  parent  JSModule  module  List  moduleFunctions  Map  functions  
[BugLab_Wrong_Operator]^if  ( parent == null || parent.getType (  )  == Token.SCRIPT )  {^80^81^^^^79^97^if  ( parent == null || parent.getType (  )  != Token.SCRIPT )  {^[CLASS] MoveFunctionDeclarations  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  n  parent  JSModule  module  List  moduleFunctions  Map  functions  
[BugLab_Variable_Misuse]^if  ( NodeUtil.isFunctionDeclaration ( parent )  )  {^85^^^^^79^97^if  ( NodeUtil.isFunctionDeclaration ( n )  )  {^[CLASS] MoveFunctionDeclarations  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  n  parent  JSModule  module  List  moduleFunctions  Map  functions  
[BugLab_Variable_Misuse]^if  ( this == null )  {^91^^^^^79^97^if  ( moduleFunctions == null )  {^[CLASS] MoveFunctionDeclarations  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  n  parent  JSModule  module  List  moduleFunctions  Map  functions  
[BugLab_Argument_Swapping]^if  ( moduleFunctionsFunctions == null )  {^91^^^^^79^97^if  ( moduleFunctions == null )  {^[CLASS] MoveFunctionDeclarations  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  n  parent  JSModule  module  List  moduleFunctions  Map  functions  
[BugLab_Wrong_Operator]^if  ( moduleFunctions != null )  {^91^^^^^79^97^if  ( moduleFunctions == null )  {^[CLASS] MoveFunctionDeclarations  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  n  parent  JSModule  module  List  moduleFunctions  Map  functions  
[BugLab_Argument_Swapping]^functions.put ( moduleFunctions, module ) ;^93^^^^^79^97^functions.put ( module, moduleFunctions ) ;^[CLASS] MoveFunctionDeclarations  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  n  parent  JSModule  module  List  moduleFunctions  Map  functions  
[BugLab_Argument_Swapping]^List<Node> functionsFunctions = module.get ( module ) ;^90^^^^^79^97^List<Node> moduleFunctions = functions.get ( module ) ;^[CLASS] MoveFunctionDeclarations  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  n  parent  JSModule  module  List  moduleFunctions  Map  functions  
[BugLab_Variable_Misuse]^moduleFunctions.add ( parent ) ;^95^^^^^79^97^moduleFunctions.add ( n ) ;^[CLASS] MoveFunctionDeclarations  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  n  parent  JSModule  module  List  moduleFunctions  Map  functions  
