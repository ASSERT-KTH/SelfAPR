[BugLab_Variable_Misuse]^NodeTraversal.traverse ( compiler, externs, new Callback (  )  ) ;^48^^^^^47^49^NodeTraversal.traverse ( compiler, root, new Callback (  )  ) ;^[CLASS] ObjectPropertyStringPostprocess Callback  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Node  externs  root  boolean  
[BugLab_Argument_Swapping]^NodeTraversal.traverse ( root, compiler, new Callback (  )  ) ;^48^^^^^47^49^NodeTraversal.traverse ( compiler, root, new Callback (  )  ) ;^[CLASS] ObjectPropertyStringPostprocess Callback  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Node  externs  root  boolean  
[BugLab_Variable_Misuse]^if  ( secondArgument.getType (  )  != Token.NEW )  {^53^^^^^38^68^if  ( n.getType (  )  != Token.NEW )  {^[CLASS] ObjectPropertyStringPostprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  secondArgumentType  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  
[BugLab_Wrong_Operator]^if  ( n.getType (  )  == Token.NEW )  {^53^^^^^38^68^if  ( n.getType (  )  != Token.NEW )  {^[CLASS] ObjectPropertyStringPostprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  secondArgumentType  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  
[BugLab_Variable_Misuse]^if  ( objectName.getType (  )  != Token.NEW )  {^53^^^^^38^68^if  ( n.getType (  )  != Token.NEW )  {^[CLASS] ObjectPropertyStringPostprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  secondArgumentType  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  
[BugLab_Variable_Misuse]^Node objectName = parent.getFirstChild (  ) ;^57^^^^^42^72^Node objectName = n.getFirstChild (  ) ;^[CLASS] ObjectPropertyStringPostprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  secondArgumentType  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  
[BugLab_Variable_Misuse]^if  ( !ObjectPropertyStringPreprocess.EXTERN_OBJECT_PROPERTY_STRING.equals ( parent.getQualifiedName (  )  )  )  {^59^60^^^^44^74^if  ( !ObjectPropertyStringPreprocess.EXTERN_OBJECT_PROPERTY_STRING.equals ( objectName.getQualifiedName (  )  )  )  {^[CLASS] ObjectPropertyStringPostprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  secondArgumentType  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  
[BugLab_Variable_Misuse]^if  ( !ObjectPropertyStringPreprocess.EXTERN_OBJECT_PROPERTY_STRING.equals ( newSecondArgument.getQualifiedName (  )  )  )  {^59^60^^^^44^74^if  ( !ObjectPropertyStringPreprocess.EXTERN_OBJECT_PROPERTY_STRING.equals ( objectName.getQualifiedName (  )  )  )  {^[CLASS] ObjectPropertyStringPostprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  secondArgumentType  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  
[BugLab_Variable_Misuse]^Node firstArgument = secondArgument.getNext (  ) ;^64^^^^^49^79^Node firstArgument = objectName.getNext (  ) ;^[CLASS] ObjectPropertyStringPostprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  secondArgumentType  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  
[BugLab_Variable_Misuse]^Node firstArgument = newSecondArgument.getNext (  ) ;^64^^^^^49^79^Node firstArgument = objectName.getNext (  ) ;^[CLASS] ObjectPropertyStringPostprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  secondArgumentType  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  
[BugLab_Variable_Misuse]^Node secondArgument = objectName.getNext (  ) ;^65^^^^^50^80^Node secondArgument = firstArgument.getNext (  ) ;^[CLASS] ObjectPropertyStringPostprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  secondArgumentType  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  
[BugLab_Variable_Misuse]^int objectNameType = secondArgument.getType (  ) ;^66^^^^^51^81^int secondArgumentType = secondArgument.getType (  ) ;^[CLASS] ObjectPropertyStringPostprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  secondArgumentType  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  
[BugLab_Variable_Misuse]^int newSecondArgumentType = secondArgument.getType (  ) ;^66^^^^^51^81^int secondArgumentType = secondArgument.getType (  ) ;^[CLASS] ObjectPropertyStringPostprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  secondArgumentType  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  
[BugLab_Variable_Misuse]^if  ( parentType == Token.GETPROP )  {^67^^^^^52^82^if  ( secondArgumentType == Token.GETPROP )  {^[CLASS] ObjectPropertyStringPostprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  secondArgumentType  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  
[BugLab_Variable_Misuse]^if  ( secondArgumentType == Token.null )  {^67^^^^^52^82^if  ( secondArgumentType == Token.GETPROP )  {^[CLASS] ObjectPropertyStringPostprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  secondArgumentType  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  
[BugLab_Wrong_Operator]^if  ( secondArgumentType != Token.GETPROP )  {^67^^^^^52^82^if  ( secondArgumentType == Token.GETPROP )  {^[CLASS] ObjectPropertyStringPostprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  secondArgumentType  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  
[BugLab_Wrong_Operator]^if  ( secondArgumentType < Token.GETPROP )  {^67^^^^^52^82^if  ( secondArgumentType == Token.GETPROP )  {^[CLASS] ObjectPropertyStringPostprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  secondArgumentType  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  
[BugLab_Variable_Misuse]^} else if  ( parentType == Token.GETELEM )  {^75^^^^^60^90^} else if  ( secondArgumentType == Token.GETELEM )  {^[CLASS] ObjectPropertyStringPostprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  secondArgumentType  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  
[BugLab_Wrong_Operator]^} else if  ( secondArgumentType != Token.GETELEM )  {^75^^^^^60^90^} else if  ( secondArgumentType == Token.GETELEM )  {^[CLASS] ObjectPropertyStringPostprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  secondArgumentType  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  
[BugLab_Variable_Misuse]^n.replaceChild ( objectName, Node.newString ( secondArgument.getString (  )  )  ) ;^87^88^^^^75^89^n.replaceChild ( secondArgument, Node.newString ( secondArgument.getString (  )  )  ) ;^[CLASS] ObjectPropertyStringPostprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  secondArgumentType  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  
[BugLab_Variable_Misuse]^Node.newString ( parent.getString (  )  )  ) ;^88^^^^^75^89^Node.newString ( secondArgument.getString (  )  )  ) ;^[CLASS] ObjectPropertyStringPostprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  secondArgumentType  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  
[BugLab_Variable_Misuse]^Node newFirstArgument = parent.getFirstChild (  ) ;^78^^^^^63^93^Node newFirstArgument = secondArgument.getFirstChild (  ) ;^[CLASS] ObjectPropertyStringPostprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  secondArgumentType  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  
[BugLab_Variable_Misuse]^Node newSecondArgument = objectName.getLastChild (  ) ;^80^^^^^65^95^Node newSecondArgument = secondArgument.getLastChild (  ) ;^[CLASS] ObjectPropertyStringPostprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  secondArgumentType  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  
[BugLab_Variable_Misuse]^secondArgument.removeChild ( objectName ) ;^79^^^^^64^94^secondArgument.removeChild ( newFirstArgument ) ;^[CLASS] ObjectPropertyStringPostprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  secondArgumentType  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  
[BugLab_Variable_Misuse]^Node newSecondArgument = parent.getLastChild (  ) ;^80^^^^^65^95^Node newSecondArgument = secondArgument.getLastChild (  ) ;^[CLASS] ObjectPropertyStringPostprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  secondArgumentType  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  
[BugLab_Variable_Misuse]^secondArgument.removeChild ( objectName ) ;^81^^^^^66^96^secondArgument.removeChild ( newSecondArgument ) ;^[CLASS] ObjectPropertyStringPostprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  secondArgumentType  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  
[BugLab_Variable_Misuse]^n.replaceChild ( firstArgument, secondArgumentewFirstArgument ) ;^82^^^^^67^97^n.replaceChild ( firstArgument, newFirstArgument ) ;^[CLASS] ObjectPropertyStringPostprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  secondArgumentType  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  
[BugLab_Variable_Misuse]^n.replaceChild ( secondArgument, newFirstArgument ) ;^82^^^^^67^97^n.replaceChild ( firstArgument, newFirstArgument ) ;^[CLASS] ObjectPropertyStringPostprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  secondArgumentType  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  
[BugLab_Variable_Misuse]^n.replaceChild ( firstArgument, secondArgument ) ;^82^^^^^67^97^n.replaceChild ( firstArgument, newFirstArgument ) ;^[CLASS] ObjectPropertyStringPostprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  secondArgumentType  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  
[BugLab_Argument_Swapping]^n.replaceChild ( firstArgument, newFirstArgumentewFirstArgument ) ;^82^^^^^67^97^n.replaceChild ( firstArgument, newFirstArgument ) ;^[CLASS] ObjectPropertyStringPostprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  secondArgumentType  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  
[BugLab_Argument_Swapping]^n.replaceChild ( n, firstArgumentewFirstArgument ) ;^82^^^^^67^97^n.replaceChild ( firstArgument, newFirstArgument ) ;^[CLASS] ObjectPropertyStringPostprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  secondArgumentType  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  
[BugLab_Argument_Swapping]^n.replaceChild ( newFirstArgument, firstArgument ) ;^82^^^^^67^97^n.replaceChild ( firstArgument, newFirstArgument ) ;^[CLASS] ObjectPropertyStringPostprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  secondArgumentType  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  
[BugLab_Variable_Misuse]^n.replaceChild ( secondArgument, secondArgumentewSecondArgument ) ;^83^^^^^68^98^n.replaceChild ( secondArgument, newSecondArgument ) ;^[CLASS] ObjectPropertyStringPostprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  secondArgumentType  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  
[BugLab_Variable_Misuse]^n.replaceChild ( parent, newSecondArgument ) ;^83^^^^^68^98^n.replaceChild ( secondArgument, newSecondArgument ) ;^[CLASS] ObjectPropertyStringPostprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  secondArgumentType  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  
[BugLab_Variable_Misuse]^n.replaceChild ( secondArgument, secondArgument ) ;^83^^^^^68^98^n.replaceChild ( secondArgument, newSecondArgument ) ;^[CLASS] ObjectPropertyStringPostprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  secondArgumentType  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  
[BugLab_Argument_Swapping]^n.replaceChild ( secondArgument, newSecondArgumentewSecondArgument ) ;^83^^^^^68^98^n.replaceChild ( secondArgument, newSecondArgument ) ;^[CLASS] ObjectPropertyStringPostprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  secondArgumentType  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  
[BugLab_Argument_Swapping]^n.replaceChild ( n, secondArgumentewSecondArgument ) ;^83^^^^^68^98^n.replaceChild ( secondArgument, newSecondArgument ) ;^[CLASS] ObjectPropertyStringPostprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  secondArgumentType  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  
[BugLab_Argument_Swapping]^n.replaceChild ( secondArgument, n ) ;^83^^^^^68^98^n.replaceChild ( secondArgument, newSecondArgument ) ;^[CLASS] ObjectPropertyStringPostprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  secondArgumentType  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  
[BugLab_Variable_Misuse]^Node newFirstArgument = newSecondArgument.getFirstChild (  ) ;^78^^^^^63^93^Node newFirstArgument = secondArgument.getFirstChild (  ) ;^[CLASS] ObjectPropertyStringPostprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  secondArgumentType  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  
[BugLab_Variable_Misuse]^n.replaceChild ( firstArgument, parent ) ;^82^^^^^67^97^n.replaceChild ( firstArgument, newFirstArgument ) ;^[CLASS] ObjectPropertyStringPostprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  secondArgumentType  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  
[BugLab_Argument_Swapping]^n.replaceChild ( firstArgument, n ) ;^82^^^^^67^97^n.replaceChild ( firstArgument, newFirstArgument ) ;^[CLASS] ObjectPropertyStringPostprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  secondArgumentType  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  
[BugLab_Argument_Swapping]^n.replaceChild ( newSecondArgument, secondArgument ) ;^83^^^^^68^98^n.replaceChild ( secondArgument, newSecondArgument ) ;^[CLASS] ObjectPropertyStringPostprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  secondArgumentType  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  
[BugLab_Variable_Misuse]^n.replaceChild ( parent, Node.newString ( secondArgument.getString (  )  )  ) ;^87^88^^^^72^102^n.replaceChild ( secondArgument, Node.newString ( secondArgument.getString (  )  )  ) ;^[CLASS] ObjectPropertyStringPostprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  secondArgumentType  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  
[BugLab_Variable_Misuse]^Node.newString ( objectName.getString (  )  )  ) ;^88^^^^^73^103^Node.newString ( secondArgument.getString (  )  )  ) ;^[CLASS] ObjectPropertyStringPostprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  secondArgumentType  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  
[BugLab_Variable_Misuse]^Node newChild = objectName.getFirstChild (  ) ;^70^^^^^55^85^Node newChild = secondArgument.getFirstChild (  ) ;^[CLASS] ObjectPropertyStringPostprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  secondArgumentType  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  
[BugLab_Variable_Misuse]^Node newChild = newSecondArgument.getFirstChild (  ) ;^70^^^^^55^85^Node newChild = secondArgument.getFirstChild (  ) ;^[CLASS] ObjectPropertyStringPostprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  secondArgumentType  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  
[BugLab_Variable_Misuse]^secondArgument.removeChild ( parent ) ;^71^^^^^56^86^secondArgument.removeChild ( newChild ) ;^[CLASS] ObjectPropertyStringPostprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  secondArgumentType  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  
[BugLab_Variable_Misuse]^n.replaceChild ( firstArgument, parentewChild ) ;^72^^^^^57^87^n.replaceChild ( firstArgument, newChild ) ;^[CLASS] ObjectPropertyStringPostprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  secondArgumentType  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  
[BugLab_Variable_Misuse]^n.replaceChild ( secondArgument, newChild ) ;^72^^^^^57^87^n.replaceChild ( firstArgument, newChild ) ;^[CLASS] ObjectPropertyStringPostprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  secondArgumentType  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  
[BugLab_Variable_Misuse]^n.replaceChild ( firstArgument, secondArgument ) ;^72^^^^^57^87^n.replaceChild ( firstArgument, newChild ) ;^[CLASS] ObjectPropertyStringPostprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  secondArgumentType  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  
[BugLab_Argument_Swapping]^n.replaceChild ( n, firstArgumentewChild ) ;^72^^^^^57^87^n.replaceChild ( firstArgument, newChild ) ;^[CLASS] ObjectPropertyStringPostprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  secondArgumentType  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  
[BugLab_Argument_Swapping]^n.replaceChild ( newChild, firstArgument ) ;^72^^^^^57^87^n.replaceChild ( firstArgument, newChild ) ;^[CLASS] ObjectPropertyStringPostprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  secondArgumentType  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  
[BugLab_Argument_Swapping]^n.replaceChild ( firstArgument, n ) ;^72^^^^^57^87^n.replaceChild ( firstArgument, newChild ) ;^[CLASS] ObjectPropertyStringPostprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  secondArgumentType  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  
[BugLab_Variable_Misuse]^n.replaceChild ( objectName, Node.newString ( secondArgument.getFirstChild (  ) .getString (  )  )  ) ;^73^74^^^^58^88^n.replaceChild ( secondArgument, Node.newString ( secondArgument.getFirstChild (  ) .getString (  )  )  ) ;^[CLASS] ObjectPropertyStringPostprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  secondArgumentType  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  
[BugLab_Variable_Misuse]^Node.newString ( newSecondArgument.getFirstChild (  ) .getString (  )  )  ) ;^74^^^^^59^89^Node.newString ( secondArgument.getFirstChild (  ) .getString (  )  )  ) ;^[CLASS] ObjectPropertyStringPostprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  secondArgumentType  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  
[BugLab_Variable_Misuse]^Node.newString ( parent.getFirstChild (  ) .getString (  )  )  ) ;^74^^^^^59^89^Node.newString ( secondArgument.getFirstChild (  ) .getString (  )  )  ) ;^[CLASS] ObjectPropertyStringPostprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  secondArgumentType  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  
[BugLab_Variable_Misuse]^} else if  ( objectNameType == Token.GETELEM )  {^75^^^^^60^90^} else if  ( secondArgumentType == Token.GETELEM )  {^[CLASS] ObjectPropertyStringPostprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  secondArgumentType  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  
[BugLab_Wrong_Operator]^} else if  ( secondArgumentType >= Token.GETELEM )  {^75^^^^^60^90^} else if  ( secondArgumentType == Token.GETELEM )  {^[CLASS] ObjectPropertyStringPostprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  secondArgumentType  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  
[BugLab_Variable_Misuse]^n.replaceChild ( parent, Node.newString ( secondArgument.getString (  )  )  ) ;^87^88^^^^75^89^n.replaceChild ( secondArgument, Node.newString ( secondArgument.getString (  )  )  ) ;^[CLASS] ObjectPropertyStringPostprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  secondArgumentType  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  
[BugLab_Variable_Misuse]^Node.newString ( objectName.getString (  )  )  ) ;^88^^^^^75^89^Node.newString ( secondArgument.getString (  )  )  ) ;^[CLASS] ObjectPropertyStringPostprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  secondArgumentType  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  
[BugLab_Variable_Misuse]^n.replaceChild ( firstArgument, parentewFirstArgument ) ;^82^^^^^67^97^n.replaceChild ( firstArgument, newFirstArgument ) ;^[CLASS] ObjectPropertyStringPostprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  secondArgumentType  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  
[BugLab_Variable_Misuse]^n.replaceChild ( secondArgument, objectNameewSecondArgument ) ;^83^^^^^68^98^n.replaceChild ( secondArgument, newSecondArgument ) ;^[CLASS] ObjectPropertyStringPostprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  secondArgumentType  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  
[BugLab_Variable_Misuse]^n.replaceChild ( secondArgument, parent ) ;^83^^^^^68^98^n.replaceChild ( secondArgument, newSecondArgument ) ;^[CLASS] ObjectPropertyStringPostprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  secondArgumentType  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  
[BugLab_Variable_Misuse]^Node newChild = parent.getFirstChild (  ) ;^70^^^^^55^85^Node newChild = secondArgument.getFirstChild (  ) ;^[CLASS] ObjectPropertyStringPostprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  secondArgumentType  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  
[BugLab_Variable_Misuse]^secondArgument.removeChild ( parent ) ;^79^^^^^64^94^secondArgument.removeChild ( newFirstArgument ) ;^[CLASS] ObjectPropertyStringPostprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  secondArgumentType  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  
[BugLab_Variable_Misuse]^secondArgument.removeChild ( parent ) ;^81^^^^^66^96^secondArgument.removeChild ( newSecondArgument ) ;^[CLASS] ObjectPropertyStringPostprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  secondArgumentType  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  
[BugLab_Variable_Misuse]^n.replaceChild ( secondArgument, parentewSecondArgument ) ;^83^^^^^68^98^n.replaceChild ( secondArgument, newSecondArgument ) ;^[CLASS] ObjectPropertyStringPostprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  secondArgumentType  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  
[BugLab_Variable_Misuse]^Node.newString ( parent.getString (  )  )  ) ;^88^^^^^73^103^Node.newString ( secondArgument.getString (  )  )  ) ;^[CLASS] ObjectPropertyStringPostprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  secondArgumentType  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  
[BugLab_Variable_Misuse]^if  ( secondArgument.getType (  )  != Token.NEW )  {^53^^^^^38^68^if  ( n.getType (  )  != Token.NEW )  {^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  int  secondArgumentType  
[BugLab_Wrong_Operator]^if  ( n.getType (  )  <= Token.NEW )  {^53^^^^^38^68^if  ( n.getType (  )  != Token.NEW )  {^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  int  secondArgumentType  
[BugLab_Variable_Misuse]^if  ( parent.getType (  )  != Token.NEW )  {^53^^^^^38^68^if  ( n.getType (  )  != Token.NEW )  {^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  int  secondArgumentType  
[BugLab_Variable_Misuse]^Node objectName = secondArgument.getFirstChild (  ) ;^57^^^^^42^72^Node objectName = n.getFirstChild (  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  int  secondArgumentType  
[BugLab_Variable_Misuse]^if  ( !ObjectPropertyStringPreprocess.EXTERN_OBJECT_PROPERTY_STRING.equals ( newSecondArgument.getQualifiedName (  )  )  )  {^59^60^^^^44^74^if  ( !ObjectPropertyStringPreprocess.EXTERN_OBJECT_PROPERTY_STRING.equals ( objectName.getQualifiedName (  )  )  )  {^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  int  secondArgumentType  
[BugLab_Variable_Misuse]^Node firstArgument = secondArgument.getNext (  ) ;^64^^^^^49^79^Node firstArgument = objectName.getNext (  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  int  secondArgumentType  
[BugLab_Variable_Misuse]^Node secondArgument = parent.getNext (  ) ;^65^^^^^50^80^Node secondArgument = firstArgument.getNext (  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  int  secondArgumentType  
[BugLab_Variable_Misuse]^Node secondArgument = objectName.getNext (  ) ;^65^^^^^50^80^Node secondArgument = firstArgument.getNext (  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  int  secondArgumentType  
[BugLab_Variable_Misuse]^int newSecondArgumentType = secondArgument.getType (  ) ;^66^^^^^51^81^int secondArgumentType = secondArgument.getType (  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  int  secondArgumentType  
[BugLab_Variable_Misuse]^if  ( objectNameType == Token.GETPROP )  {^67^^^^^52^82^if  ( secondArgumentType == Token.GETPROP )  {^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  int  secondArgumentType  
[BugLab_Argument_Swapping]^if  ( secondArgument == Token.GETPROP )  {^67^^^^^52^82^if  ( secondArgumentType == Token.GETPROP )  {^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  int  secondArgumentType  
[BugLab_Wrong_Operator]^if  ( secondArgumentType != Token.GETPROP )  {^67^^^^^52^82^if  ( secondArgumentType == Token.GETPROP )  {^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  int  secondArgumentType  
[BugLab_Variable_Misuse]^} else if  ( parentType == Token.GETELEM )  {^75^^^^^60^90^} else if  ( secondArgumentType == Token.GETELEM )  {^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  int  secondArgumentType  
[BugLab_Variable_Misuse]^} else if  ( secondArgumentType == Token.null )  {^75^^^^^60^90^} else if  ( secondArgumentType == Token.GETELEM )  {^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  int  secondArgumentType  
[BugLab_Wrong_Operator]^} else if  ( secondArgumentType != Token.GETELEM )  {^75^^^^^60^90^} else if  ( secondArgumentType == Token.GETELEM )  {^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  int  secondArgumentType  
[BugLab_Variable_Misuse]^n.replaceChild ( objectName, Node.newString ( secondArgument.getString (  )  )  ) ;^87^88^^^^75^89^n.replaceChild ( secondArgument, Node.newString ( secondArgument.getString (  )  )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  int  secondArgumentType  
[BugLab_Variable_Misuse]^Node.newString ( parent.getString (  )  )  ) ;^88^^^^^75^89^Node.newString ( secondArgument.getString (  )  )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  int  secondArgumentType  
[BugLab_Variable_Misuse]^Node newFirstArgument = parent.getFirstChild (  ) ;^78^^^^^63^93^Node newFirstArgument = secondArgument.getFirstChild (  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  int  secondArgumentType  
[BugLab_Variable_Misuse]^Node newFirstArgument = newSecondArgument.getFirstChild (  ) ;^78^^^^^63^93^Node newFirstArgument = secondArgument.getFirstChild (  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  int  secondArgumentType  
[BugLab_Variable_Misuse]^secondArgument.removeChild ( objectName ) ;^79^^^^^64^94^secondArgument.removeChild ( newFirstArgument ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  int  secondArgumentType  
[BugLab_Variable_Misuse]^Node newSecondArgument = newSecondArgument.getLastChild (  ) ;^80^^^^^65^95^Node newSecondArgument = secondArgument.getLastChild (  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  int  secondArgumentType  
[BugLab_Variable_Misuse]^secondArgument.removeChild ( parent ) ;^81^^^^^66^96^secondArgument.removeChild ( newSecondArgument ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  int  secondArgumentType  
[BugLab_Variable_Misuse]^n.replaceChild ( firstArgument, secondArgumentewFirstArgument ) ;^82^^^^^67^97^n.replaceChild ( firstArgument, newFirstArgument ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  int  secondArgumentType  
[BugLab_Variable_Misuse]^n.replaceChild ( secondArgument, newFirstArgument ) ;^82^^^^^67^97^n.replaceChild ( firstArgument, newFirstArgument ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  int  secondArgumentType  
[BugLab_Variable_Misuse]^n.replaceChild ( firstArgument, secondArgument ) ;^82^^^^^67^97^n.replaceChild ( firstArgument, newFirstArgument ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  int  secondArgumentType  
[BugLab_Argument_Swapping]^n.replaceChild ( n, firstArgumentewFirstArgument ) ;^82^^^^^67^97^n.replaceChild ( firstArgument, newFirstArgument ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  int  secondArgumentType  
[BugLab_Argument_Swapping]^n.replaceChild ( newFirstArgument, firstArgument ) ;^82^^^^^67^97^n.replaceChild ( firstArgument, newFirstArgument ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  int  secondArgumentType  
[BugLab_Variable_Misuse]^n.replaceChild ( secondArgument, parentewSecondArgument ) ;^83^^^^^68^98^n.replaceChild ( secondArgument, newSecondArgument ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  int  secondArgumentType  
[BugLab_Variable_Misuse]^n.replaceChild ( objectName, newSecondArgument ) ;^83^^^^^68^98^n.replaceChild ( secondArgument, newSecondArgument ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  int  secondArgumentType  
[BugLab_Variable_Misuse]^n.replaceChild ( secondArgument, secondArgument ) ;^83^^^^^68^98^n.replaceChild ( secondArgument, newSecondArgument ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  int  secondArgumentType  
[BugLab_Argument_Swapping]^n.replaceChild ( n, secondArgumentewSecondArgument ) ;^83^^^^^68^98^n.replaceChild ( secondArgument, newSecondArgument ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  int  secondArgumentType  
[BugLab_Argument_Swapping]^n.replaceChild ( newSecondArgument, secondArgument ) ;^83^^^^^68^98^n.replaceChild ( secondArgument, newSecondArgument ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  int  secondArgumentType  
[BugLab_Variable_Misuse]^Node newSecondArgument = parent.getLastChild (  ) ;^80^^^^^65^95^Node newSecondArgument = secondArgument.getLastChild (  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  int  secondArgumentType  
[BugLab_Variable_Misuse]^secondArgument.removeChild ( parent ) ;^79^^^^^64^94^secondArgument.removeChild ( newFirstArgument ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  int  secondArgumentType  
[BugLab_Variable_Misuse]^secondArgument.removeChild ( objectName ) ;^81^^^^^66^96^secondArgument.removeChild ( newSecondArgument ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  int  secondArgumentType  
[BugLab_Argument_Swapping]^n.replaceChild ( firstArgument, n ) ;^82^^^^^67^97^n.replaceChild ( firstArgument, newFirstArgument ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  int  secondArgumentType  
[BugLab_Variable_Misuse]^n.replaceChild ( secondArgument, secondArgumentewSecondArgument ) ;^83^^^^^68^98^n.replaceChild ( secondArgument, newSecondArgument ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  int  secondArgumentType  
[BugLab_Variable_Misuse]^n.replaceChild ( parent, newSecondArgument ) ;^83^^^^^68^98^n.replaceChild ( secondArgument, newSecondArgument ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  int  secondArgumentType  
[BugLab_Argument_Swapping]^n.replaceChild ( secondArgument, n ) ;^83^^^^^68^98^n.replaceChild ( secondArgument, newSecondArgument ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  int  secondArgumentType  
[BugLab_Variable_Misuse]^n.replaceChild ( parent, Node.newString ( secondArgument.getString (  )  )  ) ;^87^88^^^^72^102^n.replaceChild ( secondArgument, Node.newString ( secondArgument.getString (  )  )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  int  secondArgumentType  
[BugLab_Variable_Misuse]^Node.newString ( newSecondArgument.getString (  )  )  ) ;^88^^^^^73^103^Node.newString ( secondArgument.getString (  )  )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  int  secondArgumentType  
[BugLab_Variable_Misuse]^Node.newString ( objectName.getString (  )  )  ) ;^88^^^^^73^103^Node.newString ( secondArgument.getString (  )  )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  int  secondArgumentType  
[BugLab_Variable_Misuse]^Node newChild = parent.getFirstChild (  ) ;^70^^^^^55^85^Node newChild = secondArgument.getFirstChild (  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  int  secondArgumentType  
[BugLab_Variable_Misuse]^secondArgument.removeChild ( parent ) ;^71^^^^^56^86^secondArgument.removeChild ( newChild ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  int  secondArgumentType  
[BugLab_Variable_Misuse]^n.replaceChild ( firstArgument, secondArgumentewChild ) ;^72^^^^^57^87^n.replaceChild ( firstArgument, newChild ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  int  secondArgumentType  
[BugLab_Variable_Misuse]^n.replaceChild ( parent, newChild ) ;^72^^^^^57^87^n.replaceChild ( firstArgument, newChild ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  int  secondArgumentType  
[BugLab_Variable_Misuse]^n.replaceChild ( firstArgument, parent ) ;^72^^^^^57^87^n.replaceChild ( firstArgument, newChild ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  int  secondArgumentType  
[BugLab_Argument_Swapping]^n.replaceChild ( n, firstArgumentewChild ) ;^72^^^^^57^87^n.replaceChild ( firstArgument, newChild ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  int  secondArgumentType  
[BugLab_Argument_Swapping]^n.replaceChild ( firstArgument, n ) ;^72^^^^^57^87^n.replaceChild ( firstArgument, newChild ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  int  secondArgumentType  
[BugLab_Variable_Misuse]^n.replaceChild ( parent, Node.newString ( secondArgument.getFirstChild (  ) .getString (  )  )  ) ;^73^74^^^^58^88^n.replaceChild ( secondArgument, Node.newString ( secondArgument.getFirstChild (  ) .getString (  )  )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  int  secondArgumentType  
[BugLab_Variable_Misuse]^Node.newString ( objectName.getFirstChild (  ) .getString (  )  )  ) ;^74^^^^^59^89^Node.newString ( secondArgument.getFirstChild (  ) .getString (  )  )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  int  secondArgumentType  
[BugLab_Variable_Misuse]^Node.newString ( parent.getFirstChild (  ) .getString (  )  )  ) ;^74^^^^^59^89^Node.newString ( secondArgument.getFirstChild (  ) .getString (  )  )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  int  secondArgumentType  
[BugLab_Variable_Misuse]^Node.newString ( objectName.getString (  )  )  ) ;^88^^^^^75^89^Node.newString ( secondArgument.getString (  )  )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  int  secondArgumentType  
[BugLab_Variable_Misuse]^n.replaceChild ( firstArgument, parentewFirstArgument ) ;^82^^^^^67^97^n.replaceChild ( firstArgument, newFirstArgument ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  int  secondArgumentType  
[BugLab_Argument_Swapping]^n.replaceChild ( firstArgument, newFirstArgumentewFirstArgument ) ;^82^^^^^67^97^n.replaceChild ( firstArgument, newFirstArgument ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  int  secondArgumentType  
[BugLab_Variable_Misuse]^Node newFirstArgument = objectName.getFirstChild (  ) ;^78^^^^^63^93^Node newFirstArgument = secondArgument.getFirstChild (  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  int  secondArgumentType  
[BugLab_Variable_Misuse]^Node newChild = newSecondArgument.getFirstChild (  ) ;^70^^^^^55^85^Node newChild = secondArgument.getFirstChild (  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  int  secondArgumentType  
[BugLab_Argument_Swapping]^n.replaceChild ( newChild, firstArgument ) ;^72^^^^^57^87^n.replaceChild ( firstArgument, newChild ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  int  secondArgumentType  
[BugLab_Variable_Misuse]^n.replaceChild ( firstArgument, parent ) ;^82^^^^^67^97^n.replaceChild ( firstArgument, newFirstArgument ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  int  secondArgumentType  
[BugLab_Variable_Misuse]^n.replaceChild ( secondArgument, objectNameewSecondArgument ) ;^83^^^^^68^98^n.replaceChild ( secondArgument, newSecondArgument ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  int  secondArgumentType  
[BugLab_Variable_Misuse]^n.replaceChild ( secondArgument, parent ) ;^83^^^^^68^98^n.replaceChild ( secondArgument, newSecondArgument ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  int  secondArgumentType  
[BugLab_Argument_Swapping]^n.replaceChild ( secondArgument, newSecondArgumentewSecondArgument ) ;^83^^^^^68^98^n.replaceChild ( secondArgument, newSecondArgument ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  int  secondArgumentType  
[BugLab_Variable_Misuse]^Node.newString ( parent.getString (  )  )  ) ;^88^^^^^73^103^Node.newString ( secondArgument.getString (  )  )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  int  secondArgumentType  
