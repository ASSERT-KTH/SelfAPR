[buglab_swap_variables]^NodeTraversal.traverse ( root, compiler, new Callback (  )  ) ;^48^^^^^47^49^NodeTraversal.traverse ( compiler, root, new Callback (  )  ) ;^[CLASS] ObjectPropertyStringPostprocess Callback  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Node  externs  root  boolean  
[buglab_swap_variables]^NodeTraversal.traverse ( compiler,  new Callback (  )  ) ;^48^^^^^47^49^NodeTraversal.traverse ( compiler, root, new Callback (  )  ) ;^[CLASS] ObjectPropertyStringPostprocess Callback  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Node  externs  root  boolean  
[buglab_swap_variables]^NodeTraversal.traverse (  root, new Callback (  )  ) ;^48^^^^^47^49^NodeTraversal.traverse ( compiler, root, new Callback (  )  ) ;^[CLASS] ObjectPropertyStringPostprocess Callback  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Node  externs  root  boolean  
[buglab_swap_variables]^n.replaceChild (  Node.newString ( secondArgument.getString (  )  )  ) ;^87^88^^^^75^89^n.replaceChild ( secondArgument, Node.newString ( secondArgument.getString (  )  )  ) ;^[CLASS] ObjectPropertyStringPostprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  secondArgumentType  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  
[buglab_swap_variables]^n.replaceChild ( firstArgument, newFirstArgumentewFirstArgument ) ;^82^^^^^67^97^n.replaceChild ( firstArgument, newFirstArgument ) ;^[CLASS] ObjectPropertyStringPostprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  secondArgumentType  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  
[buglab_swap_variables]^n.replaceChild ( firstArgumentewFirstArgument ) ;^82^^^^^67^97^n.replaceChild ( firstArgument, newFirstArgument ) ;^[CLASS] ObjectPropertyStringPostprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  secondArgumentType  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  
[buglab_swap_variables]^n.replaceChild ( n, firstArgumentewFirstArgument ) ;^82^^^^^67^97^n.replaceChild ( firstArgument, newFirstArgument ) ;^[CLASS] ObjectPropertyStringPostprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  secondArgumentType  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  
[buglab_swap_variables]^n.replaceChild (  newFirstArgument ) ;^82^^^^^67^97^n.replaceChild ( firstArgument, newFirstArgument ) ;^[CLASS] ObjectPropertyStringPostprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  secondArgumentType  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  
[buglab_swap_variables]^n.replaceChild ( firstArgument, n ) ;^82^^^^^67^97^n.replaceChild ( firstArgument, newFirstArgument ) ;^[CLASS] ObjectPropertyStringPostprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  secondArgumentType  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  
[buglab_swap_variables]^n.replaceChild ( firstArgument ) ;^82^^^^^67^97^n.replaceChild ( firstArgument, newFirstArgument ) ;^[CLASS] ObjectPropertyStringPostprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  secondArgumentType  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  
[buglab_swap_variables]^n.replaceChild ( secondArgument, newSecondArgumentewSecondArgument ) ;^83^^^^^68^98^n.replaceChild ( secondArgument, newSecondArgument ) ;^[CLASS] ObjectPropertyStringPostprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  secondArgumentType  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  
[buglab_swap_variables]^n.replaceChild ( secondArgumentewSecondArgument ) ;^83^^^^^68^98^n.replaceChild ( secondArgument, newSecondArgument ) ;^[CLASS] ObjectPropertyStringPostprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  secondArgumentType  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  
[buglab_swap_variables]^n.replaceChild ( newSecondArgument, secondArgument ) ;^83^^^^^68^98^n.replaceChild ( secondArgument, newSecondArgument ) ;^[CLASS] ObjectPropertyStringPostprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  secondArgumentType  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  
[buglab_swap_variables]^n.replaceChild (  newSecondArgument ) ;^83^^^^^68^98^n.replaceChild ( secondArgument, newSecondArgument ) ;^[CLASS] ObjectPropertyStringPostprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  secondArgumentType  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  
[buglab_swap_variables]^n.replaceChild ( secondArgument ) ;^83^^^^^68^98^n.replaceChild ( secondArgument, newSecondArgument ) ;^[CLASS] ObjectPropertyStringPostprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  secondArgumentType  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  
[buglab_swap_variables]^n.replaceChild ( newFirstArgument, firstArgument ) ;^82^^^^^67^97^n.replaceChild ( firstArgument, newFirstArgument ) ;^[CLASS] ObjectPropertyStringPostprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  secondArgumentType  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  
[buglab_swap_variables]^n.replaceChild (  Node.newString ( secondArgument.getString (  )  )  ) ;^87^88^^^^72^102^n.replaceChild ( secondArgument, Node.newString ( secondArgument.getString (  )  )  ) ;^[CLASS] ObjectPropertyStringPostprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  secondArgumentType  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  
[buglab_swap_variables]^n.replaceChild ( n, firstArgumentewChild ) ;^72^^^^^57^87^n.replaceChild ( firstArgument, newChild ) ;^[CLASS] ObjectPropertyStringPostprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  secondArgumentType  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  
[buglab_swap_variables]^n.replaceChild ( firstArgumentewChild ) ;^72^^^^^57^87^n.replaceChild ( firstArgument, newChild ) ;^[CLASS] ObjectPropertyStringPostprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  secondArgumentType  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  
[buglab_swap_variables]^n.replaceChild (  newChild ) ;^72^^^^^57^87^n.replaceChild ( firstArgument, newChild ) ;^[CLASS] ObjectPropertyStringPostprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  secondArgumentType  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  
[buglab_swap_variables]^n.replaceChild ( firstArgument, n ) ;^72^^^^^57^87^n.replaceChild ( firstArgument, newChild ) ;^[CLASS] ObjectPropertyStringPostprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  secondArgumentType  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  
[buglab_swap_variables]^n.replaceChild ( firstArgument ) ;^72^^^^^57^87^n.replaceChild ( firstArgument, newChild ) ;^[CLASS] ObjectPropertyStringPostprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  secondArgumentType  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  
[buglab_swap_variables]^n.replaceChild (  Node.newString ( secondArgument.getFirstChild (  ) .getString (  )  )  ) ;^73^74^^^^58^88^n.replaceChild ( secondArgument, Node.newString ( secondArgument.getFirstChild (  ) .getString (  )  )  ) ;^[CLASS] ObjectPropertyStringPostprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  secondArgumentType  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  
[buglab_swap_variables]^n.replaceChild ( n, secondArgumentewSecondArgument ) ;^83^^^^^68^98^n.replaceChild ( secondArgument, newSecondArgument ) ;^[CLASS] ObjectPropertyStringPostprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  secondArgumentType  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  
[buglab_swap_variables]^n.replaceChild ( secondArgument, n ) ;^83^^^^^68^98^n.replaceChild ( secondArgument, newSecondArgument ) ;^[CLASS] ObjectPropertyStringPostprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  secondArgumentType  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  
[buglab_swap_variables]^n.replaceChild ( firstArgument, newChildewChild ) ;^72^^^^^57^87^n.replaceChild ( firstArgument, newChild ) ;^[CLASS] ObjectPropertyStringPostprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  secondArgumentType  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  
[buglab_swap_variables]^n.replaceChild ( newChild, firstArgument ) ;^72^^^^^57^87^n.replaceChild ( firstArgument, newChild ) ;^[CLASS] ObjectPropertyStringPostprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  secondArgumentType  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  
[buglab_swap_variables]^n.replaceChild (  Node.newString ( secondArgument.getString (  )  )  ) ;^87^88^^^^75^89^n.replaceChild ( secondArgument, Node.newString ( secondArgument.getString (  )  )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  int  secondArgumentType  
[buglab_swap_variables]^n.replaceChild ( firstArgument, newFirstArgumentewFirstArgument ) ;^82^^^^^67^97^n.replaceChild ( firstArgument, newFirstArgument ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  int  secondArgumentType  
[buglab_swap_variables]^n.replaceChild ( firstArgumentewFirstArgument ) ;^82^^^^^67^97^n.replaceChild ( firstArgument, newFirstArgument ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  int  secondArgumentType  
[buglab_swap_variables]^n.replaceChild ( n, firstArgumentewFirstArgument ) ;^82^^^^^67^97^n.replaceChild ( firstArgument, newFirstArgument ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  int  secondArgumentType  
[buglab_swap_variables]^n.replaceChild (  newFirstArgument ) ;^82^^^^^67^97^n.replaceChild ( firstArgument, newFirstArgument ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  int  secondArgumentType  
[buglab_swap_variables]^n.replaceChild ( newFirstArgument, firstArgument ) ;^82^^^^^67^97^n.replaceChild ( firstArgument, newFirstArgument ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  int  secondArgumentType  
[buglab_swap_variables]^n.replaceChild ( firstArgument ) ;^82^^^^^67^97^n.replaceChild ( firstArgument, newFirstArgument ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  int  secondArgumentType  
[buglab_swap_variables]^n.replaceChild ( secondArgument, newSecondArgumentewSecondArgument ) ;^83^^^^^68^98^n.replaceChild ( secondArgument, newSecondArgument ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  int  secondArgumentType  
[buglab_swap_variables]^n.replaceChild ( secondArgumentewSecondArgument ) ;^83^^^^^68^98^n.replaceChild ( secondArgument, newSecondArgument ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  int  secondArgumentType  
[buglab_swap_variables]^n.replaceChild ( newSecondArgument, secondArgument ) ;^83^^^^^68^98^n.replaceChild ( secondArgument, newSecondArgument ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  int  secondArgumentType  
[buglab_swap_variables]^n.replaceChild (  newSecondArgument ) ;^83^^^^^68^98^n.replaceChild ( secondArgument, newSecondArgument ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  int  secondArgumentType  
[buglab_swap_variables]^n.replaceChild ( secondArgument, n ) ;^83^^^^^68^98^n.replaceChild ( secondArgument, newSecondArgument ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  int  secondArgumentType  
[buglab_swap_variables]^n.replaceChild ( secondArgument ) ;^83^^^^^68^98^n.replaceChild ( secondArgument, newSecondArgument ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  int  secondArgumentType  
[buglab_swap_variables]^n.replaceChild ( n, secondArgumentewSecondArgument ) ;^83^^^^^68^98^n.replaceChild ( secondArgument, newSecondArgument ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  int  secondArgumentType  
[buglab_swap_variables]^n.replaceChild (  Node.newString ( secondArgument.getString (  )  )  ) ;^87^88^^^^72^102^n.replaceChild ( secondArgument, Node.newString ( secondArgument.getString (  )  )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  int  secondArgumentType  
[buglab_swap_variables]^n.replaceChild ( firstArgument, newChildewChild ) ;^72^^^^^57^87^n.replaceChild ( firstArgument, newChild ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  int  secondArgumentType  
[buglab_swap_variables]^n.replaceChild ( firstArgumentewChild ) ;^72^^^^^57^87^n.replaceChild ( firstArgument, newChild ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  int  secondArgumentType  
[buglab_swap_variables]^n.replaceChild ( newChild, firstArgument ) ;^72^^^^^57^87^n.replaceChild ( firstArgument, newChild ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  int  secondArgumentType  
[buglab_swap_variables]^n.replaceChild (  newChild ) ;^72^^^^^57^87^n.replaceChild ( firstArgument, newChild ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  int  secondArgumentType  
[buglab_swap_variables]^n.replaceChild ( firstArgument, n ) ;^72^^^^^57^87^n.replaceChild ( firstArgument, newChild ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  int  secondArgumentType  
[buglab_swap_variables]^n.replaceChild ( firstArgument ) ;^72^^^^^57^87^n.replaceChild ( firstArgument, newChild ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  int  secondArgumentType  
[buglab_swap_variables]^n.replaceChild (  Node.newString ( secondArgument.getFirstChild (  ) .getString (  )  )  ) ;^73^74^^^^58^88^n.replaceChild ( secondArgument, Node.newString ( secondArgument.getFirstChild (  ) .getString (  )  )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  int  secondArgumentType  
[buglab_swap_variables]^n.replaceChild ( firstArgument, n ) ;^82^^^^^67^97^n.replaceChild ( firstArgument, newFirstArgument ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  int  secondArgumentType  
[buglab_swap_variables]^n.replaceChild ( n, firstArgumentewChild ) ;^72^^^^^57^87^n.replaceChild ( firstArgument, newChild ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newChild  newFirstArgument  newSecondArgument  objectName  parent  secondArgument  int  secondArgumentType  
