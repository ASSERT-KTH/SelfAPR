[buglab_swap_variables]^changed = other || changed.changed;^82^^^^^81^85^changed = changed || other.changed;^[CLASS] ParallelCompilerPass Result 1  [METHOD] combine [RETURN_TYPE] void   Result other [VARIABLES] AbstractCompiler  compiler  boolean  changed  AstParallelizer  splitter  Supplier  taskSupply  List  errors  exceptions  worklist  int  numWorkers  Result  other  
[buglab_swap_variables]^changed = other.changed || changed;^82^^^^^81^85^changed = changed || other.changed;^[CLASS] ParallelCompilerPass Result 1  [METHOD] combine [RETURN_TYPE] void   Result other [VARIABLES] AbstractCompiler  compiler  boolean  changed  AstParallelizer  splitter  Supplier  taskSupply  List  errors  exceptions  worklist  int  numWorkers  Result  other  
[buglab_swap_variables]^errors.addAll ( other ) ;^83^^^^^81^85^errors.addAll ( other.errors ) ;^[CLASS] ParallelCompilerPass Result 1  [METHOD] combine [RETURN_TYPE] void   Result other [VARIABLES] AbstractCompiler  compiler  boolean  changed  AstParallelizer  splitter  Supplier  taskSupply  List  errors  exceptions  worklist  int  numWorkers  Result  other  
[buglab_swap_variables]^exceptions.addAll ( other.exceptions.exceptions ) ;^84^^^^^81^85^exceptions.addAll ( other.exceptions ) ;^[CLASS] ParallelCompilerPass Result 1  [METHOD] combine [RETURN_TYPE] void   Result other [VARIABLES] AbstractCompiler  compiler  boolean  changed  AstParallelizer  splitter  Supplier  taskSupply  List  errors  exceptions  worklist  int  numWorkers  Result  other  
[buglab_swap_variables]^exceptions.addAll ( other ) ;^84^^^^^81^85^exceptions.addAll ( other.exceptions ) ;^[CLASS] ParallelCompilerPass Result 1  [METHOD] combine [RETURN_TYPE] void   Result other [VARIABLES] AbstractCompiler  compiler  boolean  changed  AstParallelizer  splitter  Supplier  taskSupply  List  errors  exceptions  worklist  int  numWorkers  Result  other  
[buglab_swap_variables]^if  ( changedhanged )  {^101^^^^^94^104^if  ( changed )  {^[CLASS] ParallelCompilerPass Result 1  [METHOD] notifyCompiler [RETURN_TYPE] void   AbstractCompiler c [VARIABLES] AbstractCompiler  c  compiler  boolean  changed  AstParallelizer  splitter  Supplier  taskSupply  List  errors  exceptions  worklist  int  numWorkers  JSError  error  
[buglab_swap_variables]^if  ( c )  {^101^^^^^94^104^if  ( changed )  {^[CLASS] ParallelCompilerPass Result 1  [METHOD] notifyCompiler [RETURN_TYPE] void   AbstractCompiler c [VARIABLES] AbstractCompiler  c  compiler  boolean  changed  AstParallelizer  splitter  Supplier  taskSupply  List  errors  exceptions  worklist  int  numWorkers  JSError  error  
[buglab_swap_variables]^for  ( numChildThreadnt i = 0; i < i; i++ )  {^142^^^^^127^157^for  ( int i = 0; i < numChildThread; i++ )  {^[CLASS] ParallelCompilerPass Result 1  [METHOD] execute [RETURN_TYPE] ParallelCompilerPass$Result   [VARIABLES] AbstractCompiler  c  compiler  boolean  changed  AstParallelizer  splitter  Result[]  results  Supplier  taskSupply  List  errors  exceptions  worklist  Thread[]  workers  InterruptedException  e  int  i  index  numChildThread  numWorkers  Thread  worker  Result  result  
[buglab_swap_variables]^for  ( numChildThreadnt i = 0; i < i; i++ )  {^157^^^^^142^172^for  ( int i = 0; i < numChildThread; i++ )  {^[CLASS] ParallelCompilerPass Result 1  [METHOD] execute [RETURN_TYPE] ParallelCompilerPass$Result   [VARIABLES] AbstractCompiler  c  compiler  boolean  changed  AstParallelizer  splitter  Result[]  results  Supplier  taskSupply  List  errors  exceptions  worklist  Thread[]  workers  InterruptedException  e  int  i  index  numChildThread  numWorkers  Thread  worker  Result  result  
[buglab_swap_variables]^result.combine ( resultss[i] ) ;^174^^^^^159^189^result.combine ( results[i] ) ;^[CLASS] ParallelCompilerPass Result 1  [METHOD] execute [RETURN_TYPE] ParallelCompilerPass$Result   [VARIABLES] AbstractCompiler  c  compiler  boolean  changed  AstParallelizer  splitter  Result[]  results  Supplier  taskSupply  List  errors  exceptions  worklist  Thread[]  workers  InterruptedException  e  int  i  index  numChildThread  numWorkers  Thread  worker  Result  result  
[buglab_swap_variables]^return subtree.get (  ) .processSubtree ( taskSupply ) ;^208^^^^^202^215^return taskSupply.get (  ) .processSubtree ( subtree ) ;^[CLASS] ParallelCompilerPass Result 1  [METHOD] processTask [RETURN_TYPE] ParallelCompilerPass$Result   [VARIABLES] AbstractCompiler  c  compiler  boolean  changed  AstParallelizer  splitter  Node  subtree  Supplier  taskSupply  List  errors  exceptions  worklist  int  i  index  numChildThread  numWorkers  Exception  e  Result  r  
[buglab_swap_variables]^changed = changed || other.changed.changed;^82^^^^^81^85^changed = changed || other.changed;^[CLASS] Result  [METHOD] combine [RETURN_TYPE] void   Result other [VARIABLES] List  errors  exceptions  boolean  changed  Result  other  
[buglab_swap_variables]^changed = other || changed.changed;^82^^^^^81^85^changed = changed || other.changed;^[CLASS] Result  [METHOD] combine [RETURN_TYPE] void   Result other [VARIABLES] List  errors  exceptions  boolean  changed  Result  other  
[buglab_swap_variables]^changed = other.changed || changed;^82^^^^^81^85^changed = changed || other.changed;^[CLASS] Result  [METHOD] combine [RETURN_TYPE] void   Result other [VARIABLES] List  errors  exceptions  boolean  changed  Result  other  
[buglab_swap_variables]^errors.addAll ( other ) ;^83^^^^^81^85^errors.addAll ( other.errors ) ;^[CLASS] Result  [METHOD] combine [RETURN_TYPE] void   Result other [VARIABLES] List  errors  exceptions  boolean  changed  Result  other  
[buglab_swap_variables]^exceptions.addAll ( other ) ;^84^^^^^81^85^exceptions.addAll ( other.exceptions ) ;^[CLASS] Result  [METHOD] combine [RETURN_TYPE] void   Result other [VARIABLES] List  errors  exceptions  boolean  changed  Result  other  
[buglab_swap_variables]^if  ( changedhanged )  {^101^^^^^94^104^if  ( changed )  {^[CLASS] Result  [METHOD] notifyCompiler [RETURN_TYPE] void   AbstractCompiler c [VARIABLES] List  errors  exceptions  AbstractCompiler  c  boolean  changed  JSError  error  
[buglab_swap_variables]^if  ( c )  {^101^^^^^94^104^if  ( changed )  {^[CLASS] Result  [METHOD] notifyCompiler [RETURN_TYPE] void   AbstractCompiler c [VARIABLES] List  errors  exceptions  AbstractCompiler  c  boolean  changed  JSError  error  
