[BugLab_Variable_Misuse]^if  ( parent.getType (  )  == Token.EMPTY || n.getType (  )  == Token.COMMA )  {^54^55^^^^39^69^if  ( n.getType (  )  == Token.EMPTY || n.getType (  )  == Token.COMMA )  {^[CLASS] CheckSideEffects  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  String  msg  int  ancestorType  pt  
[BugLab_Wrong_Operator]^if  ( n.getType (  )  == Token.EMPTY && n.getType (  )  == Token.COMMA )  {^54^55^^^^39^69^if  ( n.getType (  )  == Token.EMPTY || n.getType (  )  == Token.COMMA )  {^[CLASS] CheckSideEffects  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  String  msg  int  ancestorType  pt  
[BugLab_Wrong_Operator]^if  ( n.getType (  )  != Token.EMPTY || n.getType (  )  == Token.COMMA )  {^54^55^^^^39^69^if  ( n.getType (  )  == Token.EMPTY || n.getType (  )  == Token.COMMA )  {^[CLASS] CheckSideEffects  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  String  msg  int  ancestorType  pt  
[BugLab_Variable_Misuse]^if  ( n == null ) return;^59^60^^^^44^74^if  ( parent == null ) return;^[CLASS] CheckSideEffects  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  String  msg  int  ancestorType  pt  
[BugLab_Wrong_Operator]^if  ( parent != null ) return;^59^60^^^^44^74^if  ( parent == null ) return;^[CLASS] CheckSideEffects  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  String  msg  int  ancestorType  pt  
[BugLab_Variable_Misuse]^int pt = n.getType (  ) ;^62^^^^^47^77^int pt = parent.getType (  ) ;^[CLASS] CheckSideEffects  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  String  msg  int  ancestorType  pt  
[BugLab_Variable_Misuse]^if  ( ancestorType == Token.COMMA )  {^63^^^^^48^78^if  ( pt == Token.COMMA )  {^[CLASS] CheckSideEffects  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  String  msg  int  ancestorType  pt  
[BugLab_Variable_Misuse]^if  ( pt == Token.4 )  {^63^^^^^48^78^if  ( pt == Token.COMMA )  {^[CLASS] CheckSideEffects  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  String  msg  int  ancestorType  pt  
[BugLab_Wrong_Operator]^if  ( pt != Token.COMMA )  {^63^^^^^48^78^if  ( pt == Token.COMMA )  {^[CLASS] CheckSideEffects  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  String  msg  int  ancestorType  pt  
[BugLab_Wrong_Operator]^if  ( pt >= Token.COMMA )  {^63^^^^^48^78^if  ( pt == Token.COMMA )  {^[CLASS] CheckSideEffects  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  String  msg  int  ancestorType  pt  
[BugLab_Wrong_Operator]^if  ( pt <= Token.COMMA )  {^63^^^^^48^78^if  ( pt == Token.COMMA )  {^[CLASS] CheckSideEffects  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  String  msg  int  ancestorType  pt  
[BugLab_Variable_Misuse]^} else if  ( ancestorType != Token.EXPR_RESULT && pt != Token.BLOCK )  {^76^^^^^61^91^} else if  ( pt != Token.EXPR_RESULT && pt != Token.BLOCK )  {^[CLASS] CheckSideEffects  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  String  msg  int  ancestorType  pt  
[BugLab_Wrong_Operator]^} else if  ( pt != Token.EXPR_RESULT || pt != Token.BLOCK )  {^76^^^^^61^91^} else if  ( pt != Token.EXPR_RESULT && pt != Token.BLOCK )  {^[CLASS] CheckSideEffects  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  String  msg  int  ancestorType  pt  
[BugLab_Wrong_Operator]^} else if  ( pt == Token.EXPR_RESULT && pt != Token.BLOCK )  {^76^^^^^61^91^} else if  ( pt != Token.EXPR_RESULT && pt != Token.BLOCK )  {^[CLASS] CheckSideEffects  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  String  msg  int  ancestorType  pt  
[BugLab_Variable_Misuse]^if  ( ancestorType == Token.FOR && parent.getChildCount (  )  == 4 && ( n == parent.getFirstChild (  )  || n == parent.getFirstChild (  ) .getNext (  ) .getNext (  )  )  )  {^77^78^79^^^62^92^if  ( pt == Token.FOR && parent.getChildCount (  )  == 4 && ( n == parent.getFirstChild (  )  || n == parent.getFirstChild (  ) .getNext (  ) .getNext (  )  )  )  {^[CLASS] CheckSideEffects  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  String  msg  int  ancestorType  pt  
[BugLab_Variable_Misuse]^if  ( pt == Token.FOR && an.getChildCount (  )  == 4 && ( n == parent.getFirstChild (  )  || n == parent.getFirstChild (  ) .getNext (  ) .getNext (  )  )  )  {^77^78^79^^^62^92^if  ( pt == Token.FOR && parent.getChildCount (  )  == 4 && ( n == parent.getFirstChild (  )  || n == parent.getFirstChild (  ) .getNext (  ) .getNext (  )  )  )  {^[CLASS] CheckSideEffects  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  String  msg  int  ancestorType  pt  
[BugLab_Variable_Misuse]^if  ( pt == Token.FOR && parent.getChildCount (  )  == 4 && ( an == parent.getFirstChild (  )  || n == parent.getFirstChild (  ) .getNext (  ) .getNext (  )  )  )  {^77^78^79^^^62^92^if  ( pt == Token.FOR && parent.getChildCount (  )  == 4 && ( n == parent.getFirstChild (  )  || n == parent.getFirstChild (  ) .getNext (  ) .getNext (  )  )  )  {^[CLASS] CheckSideEffects  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  String  msg  int  ancestorType  pt  
[BugLab_Argument_Swapping]^if  ( parent == Token.FOR && pt.getChildCount (  )  == 4 && ( n == parent.getFirstChild (  )  || n == parent.getFirstChild (  ) .getNext (  ) .getNext (  )  )  )  {^77^78^79^^^62^92^if  ( pt == Token.FOR && parent.getChildCount (  )  == 4 && ( n == parent.getFirstChild (  )  || n == parent.getFirstChild (  ) .getNext (  ) .getNext (  )  )  )  {^[CLASS] CheckSideEffects  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  String  msg  int  ancestorType  pt  
[BugLab_Argument_Swapping]^if  ( pt == Token.FOR && n.getChildCount (  )  == 4 && ( parent == parent.getFirstChild (  )  || n == parent.getFirstChild (  ) .getNext (  ) .getNext (  )  )  )  {^77^78^79^^^62^92^if  ( pt == Token.FOR && parent.getChildCount (  )  == 4 && ( n == parent.getFirstChild (  )  || n == parent.getFirstChild (  ) .getNext (  ) .getNext (  )  )  )  {^[CLASS] CheckSideEffects  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  String  msg  int  ancestorType  pt  
[BugLab_Wrong_Operator]^if  ( pt == Token.FOR || parent.getChildCount (  )  == 4 && ( n == parent.getFirstChild (  )  || n == parent.getFirstChild (  ) .getNext (  ) .getNext (  )  )  )  {^77^78^79^^^62^92^if  ( pt == Token.FOR && parent.getChildCount (  )  == 4 && ( n == parent.getFirstChild (  )  || n == parent.getFirstChild (  ) .getNext (  ) .getNext (  )  )  )  {^[CLASS] CheckSideEffects  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  String  msg  int  ancestorType  pt  
[BugLab_Wrong_Operator]^if  ( pt >= Token.FOR && parent.getChildCount (  )  == 4 && ( n == parent.getFirstChild (  )  || n == parent.getFirstChild (  ) .getNext (  ) .getNext (  )  )  )  {^77^78^79^^^62^92^if  ( pt == Token.FOR && parent.getChildCount (  )  == 4 && ( n == parent.getFirstChild (  )  || n == parent.getFirstChild (  ) .getNext (  ) .getNext (  )  )  )  {^[CLASS] CheckSideEffects  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  String  msg  int  ancestorType  pt  
[BugLab_Wrong_Operator]^if  ( pt == Token.FOR && parent.getChildCount (  )  >= 4 && ( n == parent.getFirstChild (  )  || n == parent.getFirstChild (  ) .getNext (  ) .getNext (  )  )  )  {^77^78^79^^^62^92^if  ( pt == Token.FOR && parent.getChildCount (  )  == 4 && ( n == parent.getFirstChild (  )  || n == parent.getFirstChild (  ) .getNext (  ) .getNext (  )  )  )  {^[CLASS] CheckSideEffects  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  String  msg  int  ancestorType  pt  
[BugLab_Wrong_Operator]^if  ( pt == Token.FOR && parent.getChildCount (  )  == 4 && ( n == parent.getFirstChild (  )  && n == parent.getFirstChild (  ) .getNext (  ) .getNext (  )  )  )  {^77^78^79^^^62^92^if  ( pt == Token.FOR && parent.getChildCount (  )  == 4 && ( n == parent.getFirstChild (  )  || n == parent.getFirstChild (  ) .getNext (  ) .getNext (  )  )  )  {^[CLASS] CheckSideEffects  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  String  msg  int  ancestorType  pt  
[BugLab_Wrong_Operator]^if  ( pt == Token.FOR && parent.getChildCount (  )  == 4 && ( n != parent.getFirstChild (  )  || n != parent.getFirstChild (  ) .getNext (  ) .getNext (  )  )  )  {^77^78^79^^^62^92^if  ( pt == Token.FOR && parent.getChildCount (  )  == 4 && ( n == parent.getFirstChild (  )  || n == parent.getFirstChild (  ) .getNext (  ) .getNext (  )  )  )  {^[CLASS] CheckSideEffects  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  String  msg  int  ancestorType  pt  
[BugLab_Wrong_Operator]^if  ( pt == Token.FOR && parent.getChildCount (  )  == 4 && ( n == parent.getFirstChild (  )  || n != parent.getFirstChild (  ) .getNext (  ) .getNext (  )  )  )  {^77^78^79^^^62^92^if  ( pt == Token.FOR && parent.getChildCount (  )  == 4 && ( n == parent.getFirstChild (  )  || n == parent.getFirstChild (  ) .getNext (  ) .getNext (  )  )  )  {^[CLASS] CheckSideEffects  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  String  msg  int  ancestorType  pt  
[BugLab_Wrong_Literal]^if  ( pt == Token.FOR && parent.getChildCount (  )  == pt && ( n == parent.getFirstChild (  )  || n == parent.getFirstChild (  ) .getNext (  ) .getNext (  )  )  )  {^77^78^79^^^62^92^if  ( pt == Token.FOR && parent.getChildCount (  )  == 4 && ( n == parent.getFirstChild (  )  || n == parent.getFirstChild (  ) .getNext (  ) .getNext (  )  )  )  {^[CLASS] CheckSideEffects  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  String  msg  int  ancestorType  pt  
[BugLab_Variable_Misuse]^if  ( pt == Token.FOR && n.getChildCount (  )  == 4 && ( n == parent.getFirstChild (  )  || n == parent.getFirstChild (  ) .getNext (  ) .getNext (  )  )  )  {^77^78^79^^^62^92^if  ( pt == Token.FOR && parent.getChildCount (  )  == 4 && ( n == parent.getFirstChild (  )  || n == parent.getFirstChild (  ) .getNext (  ) .getNext (  )  )  )  {^[CLASS] CheckSideEffects  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  String  msg  int  ancestorType  pt  
[BugLab_Variable_Misuse]^( n == n.getFirstChild (  )  || n == parent.getFirstChild (  ) .getNext (  ) .getNext (  )  )  )  {^78^79^^^^63^93^( n == parent.getFirstChild (  )  || n == parent.getFirstChild (  ) .getNext (  ) .getNext (  )  )  )  {^[CLASS] CheckSideEffects  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  String  msg  int  ancestorType  pt  
[BugLab_Variable_Misuse]^n == n.getFirstChild (  ) .getNext (  ) .getNext (  )  )  )  {^79^^^^^64^94^n == parent.getFirstChild (  ) .getNext (  ) .getNext (  )  )  )  {^[CLASS] CheckSideEffects  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  String  msg  int  ancestorType  pt  
[BugLab_Variable_Misuse]^if  ( pt == Token.FOR && parent.getChildCount (  )  == 4 && ( parent == parent.getFirstChild (  )  || n == parent.getFirstChild (  ) .getNext (  ) .getNext (  )  )  )  {^77^78^79^^^62^92^if  ( pt == Token.FOR && parent.getChildCount (  )  == 4 && ( n == parent.getFirstChild (  )  || n == parent.getFirstChild (  ) .getNext (  ) .getNext (  )  )  )  {^[CLASS] CheckSideEffects  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  String  msg  int  ancestorType  pt  
[BugLab_Wrong_Operator]^if  ( pt != Token.FOR && parent.getChildCount (  )  == 4 && ( n == parent.getFirstChild (  )  || n == parent.getFirstChild (  ) .getNext (  ) .getNext (  )  )  )  {^77^78^79^^^62^92^if  ( pt == Token.FOR && parent.getChildCount (  )  == 4 && ( n == parent.getFirstChild (  )  || n == parent.getFirstChild (  ) .getNext (  ) .getNext (  )  )  )  {^[CLASS] CheckSideEffects  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  String  msg  int  ancestorType  pt  
[BugLab_Wrong_Operator]^if  ( pt == Token.FOR && parent.getChildCount (  )  != 4 && ( n == parent.getFirstChild (  )  || n == parent.getFirstChild (  ) .getNext (  ) .getNext (  )  )  )  {^77^78^79^^^62^92^if  ( pt == Token.FOR && parent.getChildCount (  )  == 4 && ( n == parent.getFirstChild (  )  || n == parent.getFirstChild (  ) .getNext (  ) .getNext (  )  )  )  {^[CLASS] CheckSideEffects  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  String  msg  int  ancestorType  pt  
[BugLab_Wrong_Operator]^if  ( pt == Token.FOR && parent.getChildCount (  )  == 4 && ( n == parent.getFirstChild (  )  || n > parent.getFirstChild (  ) .getNext (  ) .getNext (  )  )  )  {^77^78^79^^^62^92^if  ( pt == Token.FOR && parent.getChildCount (  )  == 4 && ( n == parent.getFirstChild (  )  || n == parent.getFirstChild (  ) .getNext (  ) .getNext (  )  )  )  {^[CLASS] CheckSideEffects  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  String  msg  int  ancestorType  pt  
[BugLab_Variable_Misuse]^if  ( parent == parent.getLastChild (  )  )  {^64^^^^^49^79^if  ( n == parent.getLastChild (  )  )  {^[CLASS] CheckSideEffects  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  String  msg  int  ancestorType  pt  
[BugLab_Variable_Misuse]^if  ( n == n.getLastChild (  )  )  {^64^^^^^49^79^if  ( n == parent.getLastChild (  )  )  {^[CLASS] CheckSideEffects  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  String  msg  int  ancestorType  pt  
[BugLab_Argument_Swapping]^if  ( parent == n.getLastChild (  )  )  {^64^^^^^49^79^if  ( n == parent.getLastChild (  )  )  {^[CLASS] CheckSideEffects  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  String  msg  int  ancestorType  pt  
[BugLab_Wrong_Operator]^if  ( n >= parent.getLastChild (  )  )  {^64^^^^^49^79^if  ( n == parent.getLastChild (  )  )  {^[CLASS] CheckSideEffects  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  String  msg  int  ancestorType  pt  
[BugLab_Wrong_Operator]^if  ( n <= parent.getLastChild (  )  )  {^64^^^^^49^79^if  ( n == parent.getLastChild (  )  )  {^[CLASS] CheckSideEffects  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  String  msg  int  ancestorType  pt  
[BugLab_Variable_Misuse]^if  ( pt == Token.COMMA ) continue;^67^68^^^^52^82^if  ( ancestorType == Token.COMMA ) continue;^[CLASS] CheckSideEffects  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  String  msg  int  ancestorType  pt  
[BugLab_Wrong_Operator]^if  ( ancestorType != Token.COMMA ) continue;^67^68^^^^52^82^if  ( ancestorType == Token.COMMA ) continue;^[CLASS] CheckSideEffects  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  String  msg  int  ancestorType  pt  
[BugLab_Variable_Misuse]^if  ( pt != Token.EXPR_RESULT && ancestorType != Token.BLOCK ) return;^69^70^71^^^54^84^if  ( ancestorType != Token.EXPR_RESULT && ancestorType != Token.BLOCK ) return;^[CLASS] CheckSideEffects  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  String  msg  int  ancestorType  pt  
[BugLab_Wrong_Operator]^if  ( ancestorType != Token.EXPR_RESULT || ancestorType != Token.BLOCK ) return;^69^70^71^^^54^84^if  ( ancestorType != Token.EXPR_RESULT && ancestorType != Token.BLOCK ) return;^[CLASS] CheckSideEffects  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  String  msg  int  ancestorType  pt  
[BugLab_Wrong_Operator]^if  ( ancestorType <= Token.EXPR_RESULT && ancestorType != Token.BLOCK ) return;^69^70^71^^^54^84^if  ( ancestorType != Token.EXPR_RESULT && ancestorType != Token.BLOCK ) return;^[CLASS] CheckSideEffects  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  String  msg  int  ancestorType  pt  
[BugLab_Wrong_Operator]^if  ( ancestorType == Token.EXPR_RESULT && ancestorType != Token.BLOCK ) return;^69^70^71^^^54^84^if  ( ancestorType != Token.EXPR_RESULT && ancestorType != Token.BLOCK ) return;^[CLASS] CheckSideEffects  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  String  msg  int  ancestorType  pt  
[BugLab_Variable_Misuse]^int parentcestorType = an.getType (  ) ;^66^^^^^51^81^int ancestorType = an.getType (  ) ;^[CLASS] CheckSideEffects  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  String  msg  int  ancestorType  pt  
[BugLab_Variable_Misuse]^for  ( Node an : n.getAncestors (  )  )  {^65^^^^^50^80^for  ( Node an : parent.getAncestors (  )  )  {^[CLASS] CheckSideEffects  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  String  msg  int  ancestorType  pt  
[BugLab_Wrong_Operator]^if  ( n != parent.getLastChild (  )  )  {^64^^^^^49^79^if  ( n == parent.getLastChild (  )  )  {^[CLASS] CheckSideEffects  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  String  msg  int  ancestorType  pt  
[BugLab_Wrong_Operator]^if  ( ancestorType > Token.COMMA ) continue;^67^68^^^^52^82^if  ( ancestorType == Token.COMMA ) continue;^[CLASS] CheckSideEffects  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  String  msg  int  ancestorType  pt  
[BugLab_Wrong_Operator]^if  ( ancestorType >= Token.EXPR_RESULT && ancestorType != Token.BLOCK ) return;^69^70^71^^^54^84^if  ( ancestorType != Token.EXPR_RESULT && ancestorType != Token.BLOCK ) return;^[CLASS] CheckSideEffects  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  String  msg  int  ancestorType  pt  
[BugLab_Variable_Misuse]^if  ( ancestorType != Token.EXPR_RESULT && ancestorType != Token.null ) return;^69^70^71^^^54^84^if  ( ancestorType != Token.EXPR_RESULT && ancestorType != Token.BLOCK ) return;^[CLASS] CheckSideEffects  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  String  msg  int  ancestorType  pt  
[BugLab_Wrong_Operator]^if  ( ancestorType < Token.EXPR_RESULT && ancestorType != Token.BLOCK ) return;^69^70^71^^^54^84^if  ( ancestorType != Token.EXPR_RESULT && ancestorType != Token.BLOCK ) return;^[CLASS] CheckSideEffects  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  String  msg  int  ancestorType  pt  
[BugLab_Wrong_Operator]^} else if  ( pt <= Token.EXPR_RESULT && pt != Token.BLOCK )  {^76^^^^^61^91^} else if  ( pt != Token.EXPR_RESULT && pt != Token.BLOCK )  {^[CLASS] CheckSideEffects  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  String  msg  int  ancestorType  pt  
[BugLab_Wrong_Operator]^} else if  ( pt < Token.EXPR_RESULT && pt != Token.BLOCK )  {^76^^^^^61^91^} else if  ( pt != Token.EXPR_RESULT && pt != Token.BLOCK )  {^[CLASS] CheckSideEffects  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  String  msg  int  ancestorType  pt  
[BugLab_Argument_Swapping]^if  ( n == Token.FOR && parent.getChildCount (  )  == 4 && ( pt == parent.getFirstChild (  )  || n == parent.getFirstChild (  ) .getNext (  ) .getNext (  )  )  )  {^77^78^79^^^62^92^if  ( pt == Token.FOR && parent.getChildCount (  )  == 4 && ( n == parent.getFirstChild (  )  || n == parent.getFirstChild (  ) .getNext (  ) .getNext (  )  )  )  {^[CLASS] CheckSideEffects  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  String  msg  int  ancestorType  pt  
[BugLab_Wrong_Operator]^if  ( pt == Token.FOR && parent.getChildCount (  )  <= 4 && ( n == parent.getFirstChild (  )  || n == parent.getFirstChild (  ) .getNext (  ) .getNext (  )  )  )  {^77^78^79^^^62^92^if  ( pt == Token.FOR && parent.getChildCount (  )  == 4 && ( n == parent.getFirstChild (  )  || n == parent.getFirstChild (  ) .getNext (  ) .getNext (  )  )  )  {^[CLASS] CheckSideEffects  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  String  msg  int  ancestorType  pt  
[BugLab_Wrong_Operator]^if  ( pt == Token.FOR && parent.getChildCount (  )  == 4 && ( n == parent.getFirstChild (  )  || n >= parent.getFirstChild (  ) .getNext (  ) .getNext (  )  )  )  {^77^78^79^^^62^92^if  ( pt == Token.FOR && parent.getChildCount (  )  == 4 && ( n == parent.getFirstChild (  )  || n == parent.getFirstChild (  ) .getNext (  ) .getNext (  )  )  )  {^[CLASS] CheckSideEffects  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  String  msg  int  ancestorType  pt  
[BugLab_Wrong_Literal]^if  ( pt == Token.FOR && parent.getChildCount (  )  == 3 && ( n == parent.getFirstChild (  )  || n == parent.getFirstChild (  ) .getNext (  ) .getNext (  )  )  )  {^77^78^79^^^62^92^if  ( pt == Token.FOR && parent.getChildCount (  )  == 4 && ( n == parent.getFirstChild (  )  || n == parent.getFirstChild (  ) .getNext (  ) .getNext (  )  )  )  {^[CLASS] CheckSideEffects  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  String  msg  int  ancestorType  pt  
[BugLab_Wrong_Operator]^if  ( pt <= Token.FOR && parent.getChildCount (  )  == 4 && ( n == parent.getFirstChild (  )  || n == parent.getFirstChild (  ) .getNext (  ) .getNext (  )  )  )  {^77^78^79^^^62^92^if  ( pt == Token.FOR && parent.getChildCount (  )  == 4 && ( n == parent.getFirstChild (  )  || n == parent.getFirstChild (  ) .getNext (  ) .getNext (  )  )  )  {^[CLASS] CheckSideEffects  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  String  msg  int  ancestorType  pt  
[BugLab_Wrong_Literal]^if  ( pt == Token.FOR && parent.getChildCount (  )  == 5 && ( n == parent.getFirstChild (  )  || n == parent.getFirstChild (  ) .getNext (  ) .getNext (  )  )  )  {^77^78^79^^^62^92^if  ( pt == Token.FOR && parent.getChildCount (  )  == 4 && ( n == parent.getFirstChild (  )  || n == parent.getFirstChild (  ) .getNext (  ) .getNext (  )  )  )  {^[CLASS] CheckSideEffects  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  String  msg  int  ancestorType  pt  
[BugLab_Variable_Misuse]^if  ( NodeUtil.isSimpleOperatorType ( parent.getType (  )  )  || !NodeUtil.mayHaveSideEffects ( n )  )  {^86^87^^^^71^101^if  ( NodeUtil.isSimpleOperatorType ( n.getType (  )  )  || !NodeUtil.mayHaveSideEffects ( n )  )  {^[CLASS] CheckSideEffects  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  String  msg  int  ancestorType  pt  
[BugLab_Wrong_Operator]^if  ( NodeUtil.isSimpleOperatorType ( n.getType (  )  )  && !NodeUtil.mayHaveSideEffects ( n )  )  {^86^87^^^^71^101^if  ( NodeUtil.isSimpleOperatorType ( n.getType (  )  )  || !NodeUtil.mayHaveSideEffects ( n )  )  {^[CLASS] CheckSideEffects  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  String  msg  int  ancestorType  pt  
[BugLab_Variable_Misuse]^if  ( parent.isQualifiedName (  )  && n.getJSDocInfo (  )  != null )  {^88^^^^^86^104^if  ( n.isQualifiedName (  )  && n.getJSDocInfo (  )  != null )  {^[CLASS] CheckSideEffects  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  String  msg  int  ancestorType  pt  
[BugLab_Wrong_Operator]^if  ( n.isQualifiedName (  )  || n.getJSDocInfo (  )  != null )  {^88^^^^^86^104^if  ( n.isQualifiedName (  )  && n.getJSDocInfo (  )  != null )  {^[CLASS] CheckSideEffects  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  String  msg  int  ancestorType  pt  
[BugLab_Wrong_Operator]^if  ( n.isQualifiedName (  )  && n.getJSDocInfo (  )  == null )  {^88^^^^^86^104^if  ( n.isQualifiedName (  )  && n.getJSDocInfo (  )  != null )  {^[CLASS] CheckSideEffects  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  String  msg  int  ancestorType  pt  
[BugLab_Variable_Misuse]^} else if  ( NodeUtil.isExpressionNode ( parent )  )  {^92^^^^^86^104^} else if  ( NodeUtil.isExpressionNode ( n )  )  {^[CLASS] CheckSideEffects  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  String  msg  int  ancestorType  pt  
[BugLab_Variable_Misuse]^if  ( parent.getType (  )  == Token.STRING )  {^98^^^^^86^104^if  ( n.getType (  )  == Token.STRING )  {^[CLASS] CheckSideEffects  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  String  msg  int  ancestorType  pt  
[BugLab_Wrong_Operator]^if  ( n.getType (  )  != Token.STRING )  {^98^^^^^86^104^if  ( n.getType (  )  == Token.STRING )  {^[CLASS] CheckSideEffects  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  String  msg  int  ancestorType  pt  
[BugLab_Variable_Misuse]^t.getCompiler (  ) .report ( JSError.make ( t, parent, level, USELESS_CODE_ERROR, msg )  ) ;^102^103^^^^86^104^t.getCompiler (  ) .report ( JSError.make ( t, n, level, USELESS_CODE_ERROR, msg )  ) ;^[CLASS] CheckSideEffects  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  String  msg  int  ancestorType  pt  
[BugLab_Argument_Swapping]^t.getCompiler (  ) .report ( JSError.make ( msg, n, level, USELESS_CODE_ERROR, t )  ) ;^102^103^^^^86^104^t.getCompiler (  ) .report ( JSError.make ( t, n, level, USELESS_CODE_ERROR, msg )  ) ;^[CLASS] CheckSideEffects  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  String  msg  int  ancestorType  pt  
[BugLab_Argument_Swapping]^t.getCompiler (  ) .report ( JSError.make ( t, level, n, USELESS_CODE_ERROR, msg )  ) ;^102^103^^^^86^104^t.getCompiler (  ) .report ( JSError.make ( t, n, level, USELESS_CODE_ERROR, msg )  ) ;^[CLASS] CheckSideEffects  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  String  msg  int  ancestorType  pt  
[BugLab_Argument_Swapping]^t.getCompiler (  ) .report ( JSError.make ( t, n, msg, USELESS_CODE_ERROR, level )  ) ;^102^103^^^^86^104^t.getCompiler (  ) .report ( JSError.make ( t, n, level, USELESS_CODE_ERROR, msg )  ) ;^[CLASS] CheckSideEffects  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  String  msg  int  ancestorType  pt  
[BugLab_Argument_Swapping]^t.getCompiler (  ) .report ( JSError.make ( t, n, USELESS_CODE_ERROR, level, msg )  ) ;^102^103^^^^86^104^t.getCompiler (  ) .report ( JSError.make ( t, n, level, USELESS_CODE_ERROR, msg )  ) ;^[CLASS] CheckSideEffects  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  String  msg  int  ancestorType  pt  
[BugLab_Variable_Misuse]^JSError.make ( t, parent, level, USELESS_CODE_ERROR, msg )  ) ;^103^^^^^86^104^JSError.make ( t, n, level, USELESS_CODE_ERROR, msg )  ) ;^[CLASS] CheckSideEffects  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  String  msg  int  ancestorType  pt  
[BugLab_Argument_Swapping]^JSError.make ( n, t, level, USELESS_CODE_ERROR, msg )  ) ;^103^^^^^86^104^JSError.make ( t, n, level, USELESS_CODE_ERROR, msg )  ) ;^[CLASS] CheckSideEffects  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  String  msg  int  ancestorType  pt  
[BugLab_Argument_Swapping]^JSError.make ( t, msg, level, USELESS_CODE_ERROR, n )  ) ;^103^^^^^86^104^JSError.make ( t, n, level, USELESS_CODE_ERROR, msg )  ) ;^[CLASS] CheckSideEffects  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  String  msg  int  ancestorType  pt  
[BugLab_Argument_Swapping]^JSError.make ( t, n, level, msg, USELESS_CODE_ERROR )  ) ;^103^^^^^86^104^JSError.make ( t, n, level, USELESS_CODE_ERROR, msg )  ) ;^[CLASS] CheckSideEffects  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  String  msg  int  ancestorType  pt  
[BugLab_Argument_Swapping]^JSError.make ( t, n, USELESS_CODE_ERROR, level, msg )  ) ;^103^^^^^86^104^JSError.make ( t, n, level, USELESS_CODE_ERROR, msg )  ) ;^[CLASS] CheckSideEffects  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  String  msg  int  ancestorType  pt  
[BugLab_Variable_Misuse]^if  ( parent.isQualifiedName (  )  && n.getJSDocInfo (  )  != null )  {^88^^^^^73^103^if  ( n.isQualifiedName (  )  && n.getJSDocInfo (  )  != null )  {^[CLASS] CheckSideEffects  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  String  msg  int  ancestorType  pt  
[BugLab_Wrong_Operator]^if  ( n.isQualifiedName (  )  || n.getJSDocInfo (  )  != null )  {^88^^^^^73^103^if  ( n.isQualifiedName (  )  && n.getJSDocInfo (  )  != null )  {^[CLASS] CheckSideEffects  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  String  msg  int  ancestorType  pt  
[BugLab_Wrong_Operator]^if  ( n.isQualifiedName (  )  && n.getJSDocInfo (  )  == null )  {^88^^^^^73^103^if  ( n.isQualifiedName (  )  && n.getJSDocInfo (  )  != null )  {^[CLASS] CheckSideEffects  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  String  msg  int  ancestorType  pt  
[BugLab_Variable_Misuse]^} else if  ( NodeUtil.isExpressionNode ( parent )  )  {^92^^^^^77^107^} else if  ( NodeUtil.isExpressionNode ( n )  )  {^[CLASS] CheckSideEffects  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  String  msg  int  ancestorType  pt  
[BugLab_Variable_Misuse]^if  ( parent.getType (  )  == Token.STRING )  {^98^^^^^83^113^if  ( n.getType (  )  == Token.STRING )  {^[CLASS] CheckSideEffects  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  String  msg  int  ancestorType  pt  
[BugLab_Wrong_Operator]^if  ( n.getType (  )  != Token.STRING )  {^98^^^^^83^113^if  ( n.getType (  )  == Token.STRING )  {^[CLASS] CheckSideEffects  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  String  msg  int  ancestorType  pt  
[BugLab_Variable_Misuse]^!NodeUtil.mayHaveSideEffects ( parent )  )  {^87^^^^^72^102^!NodeUtil.mayHaveSideEffects ( n )  )  {^[CLASS] CheckSideEffects  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  String  msg  int  ancestorType  pt  
[BugLab_Argument_Swapping]^t.getCompiler (  ) .report ( JSError.make ( level, n, t, USELESS_CODE_ERROR, msg )  ) ;^102^103^^^^87^117^t.getCompiler (  ) .report ( JSError.make ( t, n, level, USELESS_CODE_ERROR, msg )  ) ;^[CLASS] CheckSideEffects  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  String  msg  int  ancestorType  pt  
[BugLab_Argument_Swapping]^t.getCompiler (  ) .report ( JSError.make ( n, t, level, USELESS_CODE_ERROR, msg )  ) ;^102^103^^^^87^117^t.getCompiler (  ) .report ( JSError.make ( t, n, level, USELESS_CODE_ERROR, msg )  ) ;^[CLASS] CheckSideEffects  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  String  msg  int  ancestorType  pt  
[BugLab_Argument_Swapping]^t.getCompiler (  ) .report ( JSError.make ( msg, n, level, USELESS_CODE_ERROR, t )  ) ;^102^103^^^^87^117^t.getCompiler (  ) .report ( JSError.make ( t, n, level, USELESS_CODE_ERROR, msg )  ) ;^[CLASS] CheckSideEffects  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  String  msg  int  ancestorType  pt  
[BugLab_Argument_Swapping]^t.getCompiler (  ) .report ( JSError.make ( t, level, n, USELESS_CODE_ERROR, msg )  ) ;^102^103^^^^87^117^t.getCompiler (  ) .report ( JSError.make ( t, n, level, USELESS_CODE_ERROR, msg )  ) ;^[CLASS] CheckSideEffects  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  String  msg  int  ancestorType  pt  
[BugLab_Argument_Swapping]^t.getCompiler (  ) .report ( JSError.make ( t, n, USELESS_CODE_ERROR, level, msg )  ) ;^102^103^^^^87^117^t.getCompiler (  ) .report ( JSError.make ( t, n, level, USELESS_CODE_ERROR, msg )  ) ;^[CLASS] CheckSideEffects  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  String  msg  int  ancestorType  pt  
[BugLab_Variable_Misuse]^JSError.make ( t, parent, level, USELESS_CODE_ERROR, msg )  ) ;^103^^^^^88^118^JSError.make ( t, n, level, USELESS_CODE_ERROR, msg )  ) ;^[CLASS] CheckSideEffects  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  String  msg  int  ancestorType  pt  
[BugLab_Argument_Swapping]^JSError.make ( USELESS_CODE_ERROR, n, level, t, msg )  ) ;^103^^^^^88^118^JSError.make ( t, n, level, USELESS_CODE_ERROR, msg )  ) ;^[CLASS] CheckSideEffects  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  String  msg  int  ancestorType  pt  
[BugLab_Argument_Swapping]^JSError.make ( n, t, level, USELESS_CODE_ERROR, msg )  ) ;^103^^^^^88^118^JSError.make ( t, n, level, USELESS_CODE_ERROR, msg )  ) ;^[CLASS] CheckSideEffects  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  String  msg  int  ancestorType  pt  
[BugLab_Argument_Swapping]^JSError.make ( t, n, level, msg, USELESS_CODE_ERROR )  ) ;^103^^^^^88^118^JSError.make ( t, n, level, USELESS_CODE_ERROR, msg )  ) ;^[CLASS] CheckSideEffects  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  String  msg  int  ancestorType  pt  
[BugLab_Argument_Swapping]^JSError.make ( t, n, msg, USELESS_CODE_ERROR, level )  ) ;^103^^^^^88^118^JSError.make ( t, n, level, USELESS_CODE_ERROR, msg )  ) ;^[CLASS] CheckSideEffects  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  String  msg  int  ancestorType  pt  
[BugLab_Argument_Swapping]^JSError.make ( t, n, USELESS_CODE_ERROR, level, msg )  ) ;^103^^^^^88^118^JSError.make ( t, n, level, USELESS_CODE_ERROR, msg )  ) ;^[CLASS] CheckSideEffects  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  String  msg  int  ancestorType  pt  
