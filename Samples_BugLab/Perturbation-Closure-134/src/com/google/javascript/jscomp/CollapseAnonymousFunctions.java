[buglab_swap_variables]^NodeTraversal.traverse ( root, compiler, new Callback (  )  ) ;^50^^^^^49^51^NodeTraversal.traverse ( compiler, root, new Callback (  )  ) ;^[CLASS] CollapseAnonymousFunctions Callback  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Node  externs  root  boolean  
[buglab_swap_variables]^NodeTraversal.traverse ( compiler,  new Callback (  )  ) ;^50^^^^^49^51^NodeTraversal.traverse ( compiler, root, new Callback (  )  ) ;^[CLASS] CollapseAnonymousFunctions Callback  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Node  externs  root  boolean  
[buglab_swap_variables]^NodeTraversal.traverse (  root, new Callback (  )  ) ;^50^^^^^49^51^NodeTraversal.traverse ( compiler, root, new Callback (  )  ) ;^[CLASS] CollapseAnonymousFunctions Callback  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Node  externs  root  boolean  
[buglab_swap_variables]^if  ( ! ( grandparent.getType (  )  == Token.SCRIPT || parent != null && grandparent.getType (  )  == Token.FUNCTION && parent.getType (  )  == Token.BLOCK )  )  {^67^68^69^70^^52^82^if  ( ! ( parent.getType (  )  == Token.SCRIPT || grandparent != null && grandparent.getType (  )  == Token.FUNCTION && parent.getType (  )  == Token.BLOCK )  )  {^[CLASS] CollapseAnonymousFunctions Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  fnName  grandparent  n  name  parent  value  
[buglab_swap_variables]^NodeUtil.copyNameAnnotations ( fnName, name ) ;^84^^^^^79^88^NodeUtil.copyNameAnnotations ( name, fnName ) ;^[CLASS] CollapseAnonymousFunctions Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  fnName  grandparent  n  name  parent  value  
[buglab_swap_variables]^NodeUtil.copyNameAnnotations (  fnName ) ;^84^^^^^79^88^NodeUtil.copyNameAnnotations ( name, fnName ) ;^[CLASS] CollapseAnonymousFunctions Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  fnName  grandparent  n  name  parent  value  
[buglab_swap_variables]^NodeUtil.copyNameAnnotations ( name ) ;^84^^^^^79^88^NodeUtil.copyNameAnnotations ( name, fnName ) ;^[CLASS] CollapseAnonymousFunctions Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  fnName  grandparent  n  name  parent  value  
[buglab_swap_variables]^parent.replaceChild (  value ) ;^86^^^^^79^88^parent.replaceChild ( n, value ) ;^[CLASS] CollapseAnonymousFunctions Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  fnName  grandparent  n  name  parent  value  
[buglab_swap_variables]^parent.replaceChild ( value, n ) ;^86^^^^^79^88^parent.replaceChild ( n, value ) ;^[CLASS] CollapseAnonymousFunctions Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  fnName  grandparent  n  name  parent  value  
[buglab_swap_variables]^parent.replaceChild ( n ) ;^86^^^^^79^88^parent.replaceChild ( n, value ) ;^[CLASS] CollapseAnonymousFunctions Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  fnName  grandparent  n  name  parent  value  
[buglab_swap_variables]^NodeUtil.copyNameAnnotations ( fnName, name ) ;^84^^^^^69^99^NodeUtil.copyNameAnnotations ( name, fnName ) ;^[CLASS] CollapseAnonymousFunctions Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  fnName  grandparent  n  name  parent  value  
[buglab_swap_variables]^NodeUtil.copyNameAnnotations (  fnName ) ;^84^^^^^69^99^NodeUtil.copyNameAnnotations ( name, fnName ) ;^[CLASS] CollapseAnonymousFunctions Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  fnName  grandparent  n  name  parent  value  
[buglab_swap_variables]^NodeUtil.copyNameAnnotations ( name ) ;^84^^^^^69^99^NodeUtil.copyNameAnnotations ( name, fnName ) ;^[CLASS] CollapseAnonymousFunctions Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  fnName  grandparent  n  name  parent  value  
[buglab_swap_variables]^parent.replaceChild (  value ) ;^86^^^^^71^101^parent.replaceChild ( n, value ) ;^[CLASS] CollapseAnonymousFunctions Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  fnName  grandparent  n  name  parent  value  
[buglab_swap_variables]^parent.replaceChild ( n ) ;^86^^^^^71^101^parent.replaceChild ( n, value ) ;^[CLASS] CollapseAnonymousFunctions Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  fnName  grandparent  n  name  parent  value  
[buglab_swap_variables]^return containsName ( name, body.getString (  )  ) ;^98^^^^^91^99^return containsName ( body, name.getString (  )  ) ;^[CLASS] CollapseAnonymousFunctions Callback  [METHOD] isRecursiveFunction [RETURN_TYPE] boolean   Node function [VARIABLES] AbstractCompiler  compiler  Node  args  body  function  name  boolean  
[buglab_swap_variables]^return containsName (  name.getString (  )  ) ;^98^^^^^91^99^return containsName ( body, name.getString (  )  ) ;^[CLASS] CollapseAnonymousFunctions Callback  [METHOD] isRecursiveFunction [RETURN_TYPE] boolean   Node function [VARIABLES] AbstractCompiler  compiler  Node  args  body  function  name  boolean  
[buglab_swap_variables]^return containsName ( body.getString (  )  ) ;^98^^^^^91^99^return containsName ( body, name.getString (  )  ) ;^[CLASS] CollapseAnonymousFunctions Callback  [METHOD] isRecursiveFunction [RETURN_TYPE] boolean   Node function [VARIABLES] AbstractCompiler  compiler  Node  args  body  function  name  boolean  
[buglab_swap_variables]^if  ( name.getType (  )  == Token.NAME && n.getString (  ) .equals ( n )  )  {^102^^^^^101^112^if  ( n.getType (  )  == Token.NAME && n.getString (  ) .equals ( name )  )  {^[CLASS] CollapseAnonymousFunctions Callback  [METHOD] containsName [RETURN_TYPE] boolean   Node n String name [VARIABLES] AbstractCompiler  compiler  String  name  boolean  Node  child  n  
[buglab_swap_variables]^if  ( containsName ( name, child )  )  {^107^^^^^101^112^if  ( containsName ( child, name )  )  {^[CLASS] CollapseAnonymousFunctions Callback  [METHOD] containsName [RETURN_TYPE] boolean   Node n String name [VARIABLES] AbstractCompiler  compiler  String  name  boolean  Node  child  n  
[buglab_swap_variables]^if  ( containsName (  name )  )  {^107^^^^^101^112^if  ( containsName ( child, name )  )  {^[CLASS] CollapseAnonymousFunctions Callback  [METHOD] containsName [RETURN_TYPE] boolean   Node n String name [VARIABLES] AbstractCompiler  compiler  String  name  boolean  Node  child  n  
[buglab_swap_variables]^if  ( containsName ( child )  )  {^107^^^^^101^112^if  ( containsName ( child, name )  )  {^[CLASS] CollapseAnonymousFunctions Callback  [METHOD] containsName [RETURN_TYPE] boolean   Node n String name [VARIABLES] AbstractCompiler  compiler  String  name  boolean  Node  child  n  
[buglab_swap_variables]^if  ( ! ( grandparent.getType (  )  == Token.SCRIPT || parent != null && grandparent.getType (  )  == Token.FUNCTION && parent.getType (  )  == Token.BLOCK )  )  {^67^68^69^70^^52^82^if  ( ! ( parent.getType (  )  == Token.SCRIPT || grandparent != null && grandparent.getType (  )  == Token.FUNCTION && parent.getType (  )  == Token.BLOCK )  )  {^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  fnName  grandparent  n  name  parent  value  
[buglab_swap_variables]^NodeUtil.copyNameAnnotations ( fnName, name ) ;^84^^^^^79^88^NodeUtil.copyNameAnnotations ( name, fnName ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  fnName  grandparent  n  name  parent  value  
[buglab_swap_variables]^NodeUtil.copyNameAnnotations (  fnName ) ;^84^^^^^79^88^NodeUtil.copyNameAnnotations ( name, fnName ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  fnName  grandparent  n  name  parent  value  
[buglab_swap_variables]^NodeUtil.copyNameAnnotations ( name ) ;^84^^^^^79^88^NodeUtil.copyNameAnnotations ( name, fnName ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  fnName  grandparent  n  name  parent  value  
[buglab_swap_variables]^parent.replaceChild (  value ) ;^86^^^^^79^88^parent.replaceChild ( n, value ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  fnName  grandparent  n  name  parent  value  
[buglab_swap_variables]^parent.replaceChild ( value, n ) ;^86^^^^^79^88^parent.replaceChild ( n, value ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  fnName  grandparent  n  name  parent  value  
[buglab_swap_variables]^parent.replaceChild ( n ) ;^86^^^^^79^88^parent.replaceChild ( n, value ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  fnName  grandparent  n  name  parent  value  
[buglab_swap_variables]^NodeUtil.copyNameAnnotations ( fnName, name ) ;^84^^^^^69^99^NodeUtil.copyNameAnnotations ( name, fnName ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  fnName  grandparent  n  name  parent  value  
[buglab_swap_variables]^NodeUtil.copyNameAnnotations (  fnName ) ;^84^^^^^69^99^NodeUtil.copyNameAnnotations ( name, fnName ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  fnName  grandparent  n  name  parent  value  
[buglab_swap_variables]^NodeUtil.copyNameAnnotations ( name ) ;^84^^^^^69^99^NodeUtil.copyNameAnnotations ( name, fnName ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  fnName  grandparent  n  name  parent  value  
[buglab_swap_variables]^parent.replaceChild ( value, n ) ;^86^^^^^71^101^parent.replaceChild ( n, value ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  fnName  grandparent  n  name  parent  value  
[buglab_swap_variables]^parent.replaceChild (  value ) ;^86^^^^^71^101^parent.replaceChild ( n, value ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  fnName  grandparent  n  name  parent  value  
[buglab_swap_variables]^parent.replaceChild ( n ) ;^86^^^^^71^101^parent.replaceChild ( n, value ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  fnName  grandparent  n  name  parent  value  
[buglab_swap_variables]^return containsName ( name, body.getString (  )  ) ;^98^^^^^91^99^return containsName ( body, name.getString (  )  ) ;^[CLASS] Callback  [METHOD] isRecursiveFunction [RETURN_TYPE] boolean   Node function [VARIABLES] boolean  Node  args  body  function  name  
[buglab_swap_variables]^return containsName (  name.getString (  )  ) ;^98^^^^^91^99^return containsName ( body, name.getString (  )  ) ;^[CLASS] Callback  [METHOD] isRecursiveFunction [RETURN_TYPE] boolean   Node function [VARIABLES] boolean  Node  args  body  function  name  
[buglab_swap_variables]^return containsName ( body.getString (  )  ) ;^98^^^^^91^99^return containsName ( body, name.getString (  )  ) ;^[CLASS] Callback  [METHOD] isRecursiveFunction [RETURN_TYPE] boolean   Node function [VARIABLES] boolean  Node  args  body  function  name  
[buglab_swap_variables]^if  ( name.getType (  )  == Token.NAME && n.getString (  ) .equals ( n )  )  {^102^^^^^101^112^if  ( n.getType (  )  == Token.NAME && n.getString (  ) .equals ( name )  )  {^[CLASS] Callback  [METHOD] containsName [RETURN_TYPE] boolean   Node n String name [VARIABLES] boolean  Node  child  n  String  name  
[buglab_swap_variables]^if  ( containsName ( name, child )  )  {^107^^^^^101^112^if  ( containsName ( child, name )  )  {^[CLASS] Callback  [METHOD] containsName [RETURN_TYPE] boolean   Node n String name [VARIABLES] boolean  Node  child  n  String  name  
[buglab_swap_variables]^if  ( containsName (  name )  )  {^107^^^^^101^112^if  ( containsName ( child, name )  )  {^[CLASS] Callback  [METHOD] containsName [RETURN_TYPE] boolean   Node n String name [VARIABLES] boolean  Node  child  n  String  name  
[buglab_swap_variables]^if  ( containsName ( child )  )  {^107^^^^^101^112^if  ( containsName ( child, name )  )  {^[CLASS] Callback  [METHOD] containsName [RETURN_TYPE] boolean   Node n String name [VARIABLES] boolean  Node  child  n  String  name  
