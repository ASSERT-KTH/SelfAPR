[BugLab_Argument_Swapping]^if  ( callName.contains ( externMethodsWithoutSignatures )  )  {^66^^^^^65^80^if  ( externMethodsWithoutSignatures.contains ( callName )  )  {^[CLASS] MethodCheck CheckUsage Store  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node callNode Node parent String callName [VARIABLES] Multimap  methodSignatures  SignatureStore  signatureCallback  boolean  NodeTraversal  t  CheckLevel  level  Node  callNode  parent  Collection  signatures  String  callName  
[BugLab_Argument_Swapping]^Collection<FunctionInfo> signatures = callName.get ( methodSignatures ) ;^70^^^^^65^80^Collection<FunctionInfo> signatures = methodSignatures.get ( callName ) ;^[CLASS] MethodCheck CheckUsage Store  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node callNode Node parent String callName [VARIABLES] Multimap  methodSignatures  SignatureStore  signatureCallback  boolean  NodeTraversal  t  CheckLevel  level  Node  callNode  parent  Collection  signatures  String  callName  
[BugLab_Variable_Misuse]^Collection<FunctionInfo> signatures = 4.get ( callName ) ;^70^^^^^65^80^Collection<FunctionInfo> signatures = methodSignatures.get ( callName ) ;^[CLASS] MethodCheck CheckUsage Store  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node callNode Node parent String callName [VARIABLES] Multimap  methodSignatures  SignatureStore  signatureCallback  boolean  NodeTraversal  t  CheckLevel  level  Node  callNode  parent  Collection  signatures  String  callName  
[BugLab_Variable_Misuse]^if  ( 0.isEmpty (  )  )  {^72^^^^^65^80^if  ( signatures.isEmpty (  )  )  {^[CLASS] MethodCheck CheckUsage Store  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node callNode Node parent String callName [VARIABLES] Multimap  methodSignatures  SignatureStore  signatureCallback  boolean  NodeTraversal  t  CheckLevel  level  Node  callNode  parent  Collection  signatures  String  callName  
[BugLab_Variable_Misuse]^FunctionCheck.checkCall ( parent, callName, signatures, t, level ) ;^79^^^^^65^80^FunctionCheck.checkCall ( callNode, callName, signatures, t, level ) ;^[CLASS] MethodCheck CheckUsage Store  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node callNode Node parent String callName [VARIABLES] Multimap  methodSignatures  SignatureStore  signatureCallback  boolean  NodeTraversal  t  CheckLevel  level  Node  callNode  parent  Collection  signatures  String  callName  
[BugLab_Argument_Swapping]^FunctionCheck.checkCall ( t, callName, signatures, callNode, level ) ;^79^^^^^65^80^FunctionCheck.checkCall ( callNode, callName, signatures, t, level ) ;^[CLASS] MethodCheck CheckUsage Store  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node callNode Node parent String callName [VARIABLES] Multimap  methodSignatures  SignatureStore  signatureCallback  boolean  NodeTraversal  t  CheckLevel  level  Node  callNode  parent  Collection  signatures  String  callName  
[BugLab_Argument_Swapping]^FunctionCheck.checkCall ( callNode, t, signatures, callName, level ) ;^79^^^^^65^80^FunctionCheck.checkCall ( callNode, callName, signatures, t, level ) ;^[CLASS] MethodCheck CheckUsage Store  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node callNode Node parent String callName [VARIABLES] Multimap  methodSignatures  SignatureStore  signatureCallback  boolean  NodeTraversal  t  CheckLevel  level  Node  callNode  parent  Collection  signatures  String  callName  
[BugLab_Argument_Swapping]^FunctionCheck.checkCall ( callNode, callName, t, signatures, level ) ;^79^^^^^65^80^FunctionCheck.checkCall ( callNode, callName, signatures, t, level ) ;^[CLASS] MethodCheck CheckUsage Store  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node callNode Node parent String callName [VARIABLES] Multimap  methodSignatures  SignatureStore  signatureCallback  boolean  NodeTraversal  t  CheckLevel  level  Node  callNode  parent  Collection  signatures  String  callName  
[BugLab_Argument_Swapping]^FunctionCheck.checkCall ( level, callName, signatures, t, callNode ) ;^79^^^^^65^80^FunctionCheck.checkCall ( callNode, callName, signatures, t, level ) ;^[CLASS] MethodCheck CheckUsage Store  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node callNode Node parent String callName [VARIABLES] Multimap  methodSignatures  SignatureStore  signatureCallback  boolean  NodeTraversal  t  CheckLevel  level  Node  callNode  parent  Collection  signatures  String  callName  
[BugLab_Variable_Misuse]^methodSignatures.put ( sourceFile, FunctionCheck.createFunctionInfo ( compiler, functionNode, sourceFile )  ) ;^100^101^^^^98^102^methodSignatures.put ( functionName, FunctionCheck.createFunctionInfo ( compiler, functionNode, sourceFile )  ) ;^[CLASS] MethodCheck CheckUsage Store  [METHOD] addSignature [RETURN_TYPE] void   String functionName Node functionNode String sourceFile [VARIABLES] Multimap  methodSignatures  SignatureStore  signatureCallback  String  functionName  sourceFile  boolean  CheckLevel  level  Node  functionNode  
[BugLab_Argument_Swapping]^methodSignatures.put ( compiler, FunctionCheck.createFunctionInfo ( functionName, functionNode, sourceFile )  ) ;^100^101^^^^98^102^methodSignatures.put ( functionName, FunctionCheck.createFunctionInfo ( compiler, functionNode, sourceFile )  ) ;^[CLASS] MethodCheck CheckUsage Store  [METHOD] addSignature [RETURN_TYPE] void   String functionName Node functionNode String sourceFile [VARIABLES] Multimap  methodSignatures  SignatureStore  signatureCallback  String  functionName  sourceFile  boolean  CheckLevel  level  Node  functionNode  
[BugLab_Argument_Swapping]^methodSignatures.put ( functionNode, FunctionCheck.createFunctionInfo ( compiler, functionName, sourceFile )  ) ;^100^101^^^^98^102^methodSignatures.put ( functionName, FunctionCheck.createFunctionInfo ( compiler, functionNode, sourceFile )  ) ;^[CLASS] MethodCheck CheckUsage Store  [METHOD] addSignature [RETURN_TYPE] void   String functionName Node functionNode String sourceFile [VARIABLES] Multimap  methodSignatures  SignatureStore  signatureCallback  String  functionName  sourceFile  boolean  CheckLevel  level  Node  functionNode  
[BugLab_Argument_Swapping]^methodSignatures.put ( sourceFile, FunctionCheck.createFunctionInfo ( compiler, functionNode, functionName )  ) ;^100^101^^^^98^102^methodSignatures.put ( functionName, FunctionCheck.createFunctionInfo ( compiler, functionNode, sourceFile )  ) ;^[CLASS] MethodCheck CheckUsage Store  [METHOD] addSignature [RETURN_TYPE] void   String functionName Node functionNode String sourceFile [VARIABLES] Multimap  methodSignatures  SignatureStore  signatureCallback  String  functionName  sourceFile  boolean  CheckLevel  level  Node  functionNode  
[BugLab_Argument_Swapping]^methodSignatures.put ( functionName, FunctionCheck.createFunctionInfo ( sourceFile, functionNode, compiler )  ) ;^100^101^^^^98^102^methodSignatures.put ( functionName, FunctionCheck.createFunctionInfo ( compiler, functionNode, sourceFile )  ) ;^[CLASS] MethodCheck CheckUsage Store  [METHOD] addSignature [RETURN_TYPE] void   String functionName Node functionNode String sourceFile [VARIABLES] Multimap  methodSignatures  SignatureStore  signatureCallback  String  functionName  sourceFile  boolean  CheckLevel  level  Node  functionNode  
[BugLab_Variable_Misuse]^FunctionCheck.createFunctionInfo ( 1, functionNode, sourceFile )  ) ;^101^^^^^98^102^FunctionCheck.createFunctionInfo ( compiler, functionNode, sourceFile )  ) ;^[CLASS] MethodCheck CheckUsage Store  [METHOD] addSignature [RETURN_TYPE] void   String functionName Node functionNode String sourceFile [VARIABLES] Multimap  methodSignatures  SignatureStore  signatureCallback  String  functionName  sourceFile  boolean  CheckLevel  level  Node  functionNode  
[BugLab_Argument_Swapping]^FunctionCheck.createFunctionInfo ( compiler, sourceFile, functionNode )  ) ;^101^^^^^98^102^FunctionCheck.createFunctionInfo ( compiler, functionNode, sourceFile )  ) ;^[CLASS] MethodCheck CheckUsage Store  [METHOD] addSignature [RETURN_TYPE] void   String functionName Node functionNode String sourceFile [VARIABLES] Multimap  methodSignatures  SignatureStore  signatureCallback  String  functionName  sourceFile  boolean  CheckLevel  level  Node  functionNode  
[BugLab_Argument_Swapping]^FunctionCheck.createFunctionInfo ( sourceFile, functionNode, compiler )  ) ;^101^^^^^98^102^FunctionCheck.createFunctionInfo ( compiler, functionNode, sourceFile )  ) ;^[CLASS] MethodCheck CheckUsage Store  [METHOD] addSignature [RETURN_TYPE] void   String functionName Node functionNode String sourceFile [VARIABLES] Multimap  methodSignatures  SignatureStore  signatureCallback  String  functionName  sourceFile  boolean  CheckLevel  level  Node  functionNode  
[BugLab_Variable_Misuse]^if  ( null.containsKey ( functionName )  )  {^108^^^^^105^111^if  ( methodSignatures.containsKey ( functionName )  )  {^[CLASS] MethodCheck CheckUsage Store  [METHOD] removeSignature [RETURN_TYPE] void   String functionName [VARIABLES] Multimap  methodSignatures  SignatureStore  signatureCallback  String  functionName  boolean  CheckLevel  level  
[BugLab_Argument_Swapping]^if  ( functionName.containsKey ( methodSignatures )  )  {^108^^^^^105^111^if  ( methodSignatures.containsKey ( functionName )  )  {^[CLASS] MethodCheck CheckUsage Store  [METHOD] removeSignature [RETURN_TYPE] void   String functionName [VARIABLES] Multimap  methodSignatures  SignatureStore  signatureCallback  String  functionName  boolean  CheckLevel  level  
[BugLab_Argument_Swapping]^if  ( callName.contains ( externMethodsWithoutSignatures )  )  {^66^^^^^65^80^if  ( externMethodsWithoutSignatures.contains ( callName )  )  {^[CLASS] CheckUsage  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node callNode Node parent String callName [VARIABLES] boolean  NodeTraversal  t  Node  callNode  parent  Collection  signatures  String  callName  
[BugLab_Argument_Swapping]^Collection<FunctionInfo> signatures = callName.get ( methodSignatures ) ;^70^^^^^65^80^Collection<FunctionInfo> signatures = methodSignatures.get ( callName ) ;^[CLASS] CheckUsage  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node callNode Node parent String callName [VARIABLES] boolean  NodeTraversal  t  Node  callNode  parent  Collection  signatures  String  callName  
[BugLab_Argument_Swapping]^FunctionCheck.checkCall ( signatures, callName, callNode, t, level ) ;^79^^^^^65^80^FunctionCheck.checkCall ( callNode, callName, signatures, t, level ) ;^[CLASS] CheckUsage  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node callNode Node parent String callName [VARIABLES] boolean  NodeTraversal  t  Node  callNode  parent  Collection  signatures  String  callName  
[BugLab_Argument_Swapping]^FunctionCheck.checkCall ( callNode, t, signatures, callName, level ) ;^79^^^^^65^80^FunctionCheck.checkCall ( callNode, callName, signatures, t, level ) ;^[CLASS] CheckUsage  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node callNode Node parent String callName [VARIABLES] boolean  NodeTraversal  t  Node  callNode  parent  Collection  signatures  String  callName  
[BugLab_Argument_Swapping]^FunctionCheck.checkCall ( callNode, callName, t, signatures, level ) ;^79^^^^^65^80^FunctionCheck.checkCall ( callNode, callName, signatures, t, level ) ;^[CLASS] CheckUsage  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node callNode Node parent String callName [VARIABLES] boolean  NodeTraversal  t  Node  callNode  parent  Collection  signatures  String  callName  
[BugLab_Argument_Swapping]^FunctionCheck.checkCall ( callNode, callName, signatures, level, t ) ;^79^^^^^65^80^FunctionCheck.checkCall ( callNode, callName, signatures, t, level ) ;^[CLASS] CheckUsage  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node callNode Node parent String callName [VARIABLES] boolean  NodeTraversal  t  Node  callNode  parent  Collection  signatures  String  callName  
[BugLab_Variable_Misuse]^methodSignatures.put ( functionName, FunctionCheck.createFunctionInfo ( compiler, functionNode, functionName )  ) ;^100^101^^^^98^102^methodSignatures.put ( functionName, FunctionCheck.createFunctionInfo ( compiler, functionNode, sourceFile )  ) ;^[CLASS] Store  [METHOD] addSignature [RETURN_TYPE] void   String functionName Node functionNode String sourceFile [VARIABLES] boolean  Node  functionNode  String  functionName  sourceFile  
[BugLab_Argument_Swapping]^methodSignatures.put ( sourceFile, FunctionCheck.createFunctionInfo ( compiler, functionNode, functionName )  ) ;^100^101^^^^98^102^methodSignatures.put ( functionName, FunctionCheck.createFunctionInfo ( compiler, functionNode, sourceFile )  ) ;^[CLASS] Store  [METHOD] addSignature [RETURN_TYPE] void   String functionName Node functionNode String sourceFile [VARIABLES] boolean  Node  functionNode  String  functionName  sourceFile  
[BugLab_Argument_Swapping]^methodSignatures.put ( functionName, FunctionCheck.createFunctionInfo ( functionNode, compiler, sourceFile )  ) ;^100^101^^^^98^102^methodSignatures.put ( functionName, FunctionCheck.createFunctionInfo ( compiler, functionNode, sourceFile )  ) ;^[CLASS] Store  [METHOD] addSignature [RETURN_TYPE] void   String functionName Node functionNode String sourceFile [VARIABLES] boolean  Node  functionNode  String  functionName  sourceFile  
[BugLab_Argument_Swapping]^methodSignatures.put ( functionName, FunctionCheck.createFunctionInfo ( sourceFile, functionNode, compiler )  ) ;^100^101^^^^98^102^methodSignatures.put ( functionName, FunctionCheck.createFunctionInfo ( compiler, functionNode, sourceFile )  ) ;^[CLASS] Store  [METHOD] addSignature [RETURN_TYPE] void   String functionName Node functionNode String sourceFile [VARIABLES] boolean  Node  functionNode  String  functionName  sourceFile  
[BugLab_Variable_Misuse]^FunctionCheck.createFunctionInfo ( compiler, functionNode, functionName )  ) ;^101^^^^^98^102^FunctionCheck.createFunctionInfo ( compiler, functionNode, sourceFile )  ) ;^[CLASS] Store  [METHOD] addSignature [RETURN_TYPE] void   String functionName Node functionNode String sourceFile [VARIABLES] boolean  Node  functionNode  String  functionName  sourceFile  
[BugLab_Variable_Misuse]^FunctionCheck.createFunctionInfo ( 3, functionNode, sourceFile )  ) ;^101^^^^^98^102^FunctionCheck.createFunctionInfo ( compiler, functionNode, sourceFile )  ) ;^[CLASS] Store  [METHOD] addSignature [RETURN_TYPE] void   String functionName Node functionNode String sourceFile [VARIABLES] boolean  Node  functionNode  String  functionName  sourceFile  
[BugLab_Argument_Swapping]^FunctionCheck.createFunctionInfo ( compiler, sourceFile, functionNode )  ) ;^101^^^^^98^102^FunctionCheck.createFunctionInfo ( compiler, functionNode, sourceFile )  ) ;^[CLASS] Store  [METHOD] addSignature [RETURN_TYPE] void   String functionName Node functionNode String sourceFile [VARIABLES] boolean  Node  functionNode  String  functionName  sourceFile  
[BugLab_Argument_Swapping]^FunctionCheck.createFunctionInfo ( sourceFile, functionNode, compiler )  ) ;^101^^^^^98^102^FunctionCheck.createFunctionInfo ( compiler, functionNode, sourceFile )  ) ;^[CLASS] Store  [METHOD] addSignature [RETURN_TYPE] void   String functionName Node functionNode String sourceFile [VARIABLES] boolean  Node  functionNode  String  functionName  sourceFile  
[BugLab_Argument_Swapping]^FunctionCheck.createFunctionInfo ( functionNode, compiler, sourceFile )  ) ;^101^^^^^98^102^FunctionCheck.createFunctionInfo ( compiler, functionNode, sourceFile )  ) ;^[CLASS] Store  [METHOD] addSignature [RETURN_TYPE] void   String functionName Node functionNode String sourceFile [VARIABLES] boolean  Node  functionNode  String  functionName  sourceFile  
[BugLab_Argument_Swapping]^if  ( functionName.containsKey ( methodSignatures )  )  {^108^^^^^105^111^if  ( methodSignatures.containsKey ( functionName )  )  {^[CLASS] Store  [METHOD] removeSignature [RETURN_TYPE] void   String functionName [VARIABLES] boolean  String  functionName  
