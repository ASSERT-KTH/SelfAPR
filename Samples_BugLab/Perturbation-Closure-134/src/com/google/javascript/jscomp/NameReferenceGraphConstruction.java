[BugLab_Wrong_Literal]^private static final boolean CONSERVATIVE = true;^62^^^^^57^67^private static final boolean CONSERVATIVE = false;^[CLASS] NameReferenceGraphConstruction Traversal   [VARIABLES] 
[BugLab_Variable_Misuse]^this.isExtern = CONSERVATIVE;^109^^^^^108^111^this.isExtern = isExtern;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] <init> [RETURN_TYPE] NameReferenceGraphConstruction$Traversal(boolean)   boolean isExtern [VARIABLES] ArrayList  currentFunctionStack  Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NameReferenceGraph  graph  
[BugLab_Variable_Misuse]^return graph;^75^^^^^74^76^return this.graph;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] getNameReferenceGraph [RETURN_TYPE] NameReferenceGraph   [VARIABLES] ArrayList  currentFunctionStack  Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NameReferenceGraph  graph  
[BugLab_Wrong_Operator]^if  ( scopeCreator != null )  {^83^^^^^78^102^if  ( scopeCreator == null )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Scope  topScope  NodeTraversal  codeTraversal  externsTraversal  Node  externs  root  ArrayList  currentFunctionStack  ScopeCreator  scopeCreator  NameReferenceGraph  graph  
[BugLab_Argument_Swapping]^NodeTraversal externsTraversal = new NodeTraversal ( scopeCreator, new Traversal ( true ) , compiler ) ;^89^90^^^^78^102^NodeTraversal externsTraversal = new NodeTraversal ( compiler, new Traversal ( true ) , scopeCreator ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Scope  topScope  NodeTraversal  codeTraversal  externsTraversal  Node  externs  root  ArrayList  currentFunctionStack  ScopeCreator  scopeCreator  NameReferenceGraph  graph  
[BugLab_Wrong_Literal]^NodeTraversal externsTraversal = new NodeTraversal ( compiler, new Traversal ( false ) , scopeCreator ) ;^89^90^^^^78^102^NodeTraversal externsTraversal = new NodeTraversal ( compiler, new Traversal ( true ) , scopeCreator ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Scope  topScope  NodeTraversal  codeTraversal  externsTraversal  Node  externs  root  ArrayList  currentFunctionStack  ScopeCreator  scopeCreator  NameReferenceGraph  graph  
[BugLab_Wrong_Literal]^new Traversal ( false ) , scopeCreator ) ;^90^^^^^78^102^new Traversal ( true ) , scopeCreator ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Scope  topScope  NodeTraversal  codeTraversal  externsTraversal  Node  externs  root  ArrayList  currentFunctionStack  ScopeCreator  scopeCreator  NameReferenceGraph  graph  
[BugLab_Argument_Swapping]^NodeTraversal codeTraversal = new NodeTraversal ( scopeCreator, new Traversal ( false ) , compiler ) ;^91^92^^^^78^102^NodeTraversal codeTraversal = new NodeTraversal ( compiler, new Traversal ( false ) , scopeCreator ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Scope  topScope  NodeTraversal  codeTraversal  externsTraversal  Node  externs  root  ArrayList  currentFunctionStack  ScopeCreator  scopeCreator  NameReferenceGraph  graph  
[BugLab_Wrong_Literal]^NodeTraversal codeTraversal = new NodeTraversal ( compiler, new Traversal ( true ) , scopeCreator ) ;^91^92^^^^78^102^NodeTraversal codeTraversal = new NodeTraversal ( compiler, new Traversal ( false ) , scopeCreator ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Scope  topScope  NodeTraversal  codeTraversal  externsTraversal  Node  externs  root  ArrayList  currentFunctionStack  ScopeCreator  scopeCreator  NameReferenceGraph  graph  
[BugLab_Wrong_Literal]^new Traversal ( true ) , scopeCreator ) ;^92^^^^^78^102^new Traversal ( false ) , scopeCreator ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Scope  topScope  NodeTraversal  codeTraversal  externsTraversal  Node  externs  root  ArrayList  currentFunctionStack  ScopeCreator  scopeCreator  NameReferenceGraph  graph  
[BugLab_Wrong_Operator]^if  ( topScope == null )  {^94^^^^^78^102^if  ( topScope != null )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Scope  topScope  NodeTraversal  codeTraversal  externsTraversal  Node  externs  root  ArrayList  currentFunctionStack  ScopeCreator  scopeCreator  NameReferenceGraph  graph  
[BugLab_Variable_Misuse]^externsTraversal.traverse ( root ) ;^98^^^^^78^102^externsTraversal.traverse ( externs ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Scope  topScope  NodeTraversal  codeTraversal  externsTraversal  Node  externs  root  ArrayList  currentFunctionStack  ScopeCreator  scopeCreator  NameReferenceGraph  graph  
[BugLab_Variable_Misuse]^codeTraversal.traverse ( externs ) ;^99^^^^^78^102^codeTraversal.traverse ( root ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Scope  topScope  NodeTraversal  codeTraversal  externsTraversal  Node  externs  root  ArrayList  currentFunctionStack  ScopeCreator  scopeCreator  NameReferenceGraph  graph  
[BugLab_Variable_Misuse]^externsTraversal.traverseWithScope ( root, topScope ) ;^95^^^^^78^102^externsTraversal.traverseWithScope ( externs, topScope ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Scope  topScope  NodeTraversal  codeTraversal  externsTraversal  Node  externs  root  ArrayList  currentFunctionStack  ScopeCreator  scopeCreator  NameReferenceGraph  graph  
[BugLab_Argument_Swapping]^externsTraversal.traverseWithScope ( topScope, externs ) ;^95^^^^^78^102^externsTraversal.traverseWithScope ( externs, topScope ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Scope  topScope  NodeTraversal  codeTraversal  externsTraversal  Node  externs  root  ArrayList  currentFunctionStack  ScopeCreator  scopeCreator  NameReferenceGraph  graph  
[BugLab_Variable_Misuse]^codeTraversal.traverseWithScope ( externs, topScope ) ;^96^^^^^78^102^codeTraversal.traverseWithScope ( root, topScope ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Scope  topScope  NodeTraversal  codeTraversal  externsTraversal  Node  externs  root  ArrayList  currentFunctionStack  ScopeCreator  scopeCreator  NameReferenceGraph  graph  
[BugLab_Argument_Swapping]^codeTraversal.traverseWithScope ( topScope, root ) ;^96^^^^^78^102^codeTraversal.traverseWithScope ( root, topScope ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Scope  topScope  NodeTraversal  codeTraversal  externsTraversal  Node  externs  root  ArrayList  currentFunctionStack  ScopeCreator  scopeCreator  NameReferenceGraph  graph  
[BugLab_Variable_Misuse]^Node parent = parent.getParent (  ) ;^116^^^^^101^131^Node parent = root.getParent (  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[BugLab_Wrong_Operator]^if  ( name != null )  {^127^^^^^112^142^if  ( name == null )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[BugLab_Wrong_Operator]^if  ( NodeUtil.isAssign ( parent )  || NodeUtil.isPrototypeProperty ( parent.getFirstChild (  )  )  )  {^142^143^^^^127^157^if  ( NodeUtil.isAssign ( parent )  && NodeUtil.isPrototypeProperty ( parent.getFirstChild (  )  )  )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[BugLab_Variable_Misuse]^pushContainingFunction ( recordStaticNameDefinition ( t, name, type, parent, parent, gParent, root.getLastChild (  )  )  ) ;^148^149^150^^^142^151^pushContainingFunction ( recordStaticNameDefinition ( t, name, type, root, parent, gParent, root.getLastChild (  )  )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[BugLab_Variable_Misuse]^pushContainingFunction ( recordStaticNameDefinition ( t, name, type, root, root, gParent, root.getLastChild (  )  )  ) ;^148^149^150^^^142^151^pushContainingFunction ( recordStaticNameDefinition ( t, name, type, root, parent, gParent, root.getLastChild (  )  )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[BugLab_Argument_Swapping]^pushContainingFunction ( recordStaticNameDefinition ( type, name, t, root, parent, gParent, root.getLastChild (  )  )  ) ;^148^149^150^^^142^151^pushContainingFunction ( recordStaticNameDefinition ( t, name, type, root, parent, gParent, root.getLastChild (  )  )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[BugLab_Argument_Swapping]^pushContainingFunction ( recordStaticNameDefinition ( t, root, type, name, parent, gParent, root.getLastChild (  )  )  ) ;^148^149^150^^^142^151^pushContainingFunction ( recordStaticNameDefinition ( t, name, type, root, parent, gParent, root.getLastChild (  )  )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[BugLab_Argument_Swapping]^pushContainingFunction ( recordStaticNameDefinition ( t, name, type, gParent, parent, root, root.getLastChild (  )  )  ) ;^148^149^150^^^142^151^pushContainingFunction ( recordStaticNameDefinition ( t, name, type, root, parent, gParent, root.getLastChild (  )  )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[BugLab_Argument_Swapping]^pushContainingFunction ( recordStaticNameDefinition ( t, name, type, parent, root, gParent, root.getLastChild (  )  )  ) ;^148^149^150^^^142^151^pushContainingFunction ( recordStaticNameDefinition ( t, name, type, root, parent, gParent, root.getLastChild (  )  )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[BugLab_Variable_Misuse]^recordStaticNameDefinition ( t, name, type, parent, parent, gParent, root.getLastChild (  )  )  ) ;^149^150^^^^142^151^recordStaticNameDefinition ( t, name, type, root, parent, gParent, root.getLastChild (  )  )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[BugLab_Variable_Misuse]^recordStaticNameDefinition ( t, name, type, root, root, gParent, root.getLastChild (  )  )  ) ;^149^150^^^^142^151^recordStaticNameDefinition ( t, name, type, root, parent, gParent, root.getLastChild (  )  )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[BugLab_Variable_Misuse]^recordStaticNameDefinition ( t, name, type, root, parent, root, root.getLastChild (  )  )  ) ;^149^150^^^^142^151^recordStaticNameDefinition ( t, name, type, root, parent, gParent, root.getLastChild (  )  )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[BugLab_Argument_Swapping]^recordStaticNameDefinition ( name, t, type, root, parent, gParent, root.getLastChild (  )  )  ) ;^149^150^^^^142^151^recordStaticNameDefinition ( t, name, type, root, parent, gParent, root.getLastChild (  )  )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[BugLab_Argument_Swapping]^recordStaticNameDefinition ( t, name, gParent, root, parent, type, root.getLastChild (  )  )  ) ;^149^150^^^^142^151^recordStaticNameDefinition ( t, name, type, root, parent, gParent, root.getLastChild (  )  )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[BugLab_Argument_Swapping]^recordStaticNameDefinition ( t, name, type, parent, root, gParent, root.getLastChild (  )  )  ) ;^149^150^^^^142^151^recordStaticNameDefinition ( t, name, type, root, parent, gParent, root.getLastChild (  )  )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[BugLab_Argument_Swapping]^recordStaticNameDefinition ( t, name, type, gParent, parent, root, root.getLastChild (  )  )  ) ;^149^150^^^^142^151^recordStaticNameDefinition ( t, name, type, root, parent, gParent, root.getLastChild (  )  )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[BugLab_Variable_Misuse]^pushContainingFunction ( recordPrototypePropDefinition ( t, root.getFirstChild (  ) , type, parent, gParent, ggParent )  ) ;^144^145^146^^^142^151^pushContainingFunction ( recordPrototypePropDefinition ( t, parent.getFirstChild (  ) , type, parent, gParent, ggParent )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[BugLab_Variable_Misuse]^pushContainingFunction ( recordPrototypePropDefinition ( t, parent.getFirstChild (  ) , type, parent, root, ggParent )  ) ;^144^145^146^^^142^151^pushContainingFunction ( recordPrototypePropDefinition ( t, parent.getFirstChild (  ) , type, parent, gParent, ggParent )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[BugLab_Variable_Misuse]^pushContainingFunction ( recordPrototypePropDefinition ( t, parent.getFirstChild (  ) , type, parent, gParent, root )  ) ;^144^145^146^^^142^151^pushContainingFunction ( recordPrototypePropDefinition ( t, parent.getFirstChild (  ) , type, parent, gParent, ggParent )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[BugLab_Argument_Swapping]^pushContainingFunction ( recordPrototypePropDefinition ( ggParent, parent.getFirstChild (  ) , type, parent, gParent, t )  ) ;^144^145^146^^^142^151^pushContainingFunction ( recordPrototypePropDefinition ( t, parent.getFirstChild (  ) , type, parent, gParent, ggParent )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[BugLab_Argument_Swapping]^pushContainingFunction ( recordPrototypePropDefinition ( t, gParent.getFirstChild (  ) , type, parent, parent, ggParent )  ) ;^144^145^146^^^142^151^pushContainingFunction ( recordPrototypePropDefinition ( t, parent.getFirstChild (  ) , type, parent, gParent, ggParent )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[BugLab_Argument_Swapping]^pushContainingFunction ( recordPrototypePropDefinition ( type, parent.getFirstChild (  ) , t, parent, gParent, ggParent )  ) ;^144^145^146^^^142^151^pushContainingFunction ( recordPrototypePropDefinition ( t, parent.getFirstChild (  ) , type, parent, gParent, ggParent )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[BugLab_Argument_Swapping]^pushContainingFunction ( recordPrototypePropDefinition ( t, parent.getFirstChild (  ) , type, parent, ggParent, gParent )  ) ;^144^145^146^^^142^151^pushContainingFunction ( recordPrototypePropDefinition ( t, parent.getFirstChild (  ) , type, parent, gParent, ggParent )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[BugLab_Argument_Swapping]^pushContainingFunction ( recordPrototypePropDefinition ( t, ggParent.getFirstChild (  ) , type, parent, gParent, parent )  ) ;^144^145^146^^^142^151^pushContainingFunction ( recordPrototypePropDefinition ( t, parent.getFirstChild (  ) , type, parent, gParent, ggParent )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[BugLab_Variable_Misuse]^recordPrototypePropDefinition ( t, root.getFirstChild (  ) , type, parent, gParent, ggParent )  ) ;^145^146^^^^142^151^recordPrototypePropDefinition ( t, parent.getFirstChild (  ) , type, parent, gParent, ggParent )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[BugLab_Variable_Misuse]^recordPrototypePropDefinition ( t, parent.getFirstChild (  ) , type, parent, root, ggParent )  ) ;^145^146^^^^142^151^recordPrototypePropDefinition ( t, parent.getFirstChild (  ) , type, parent, gParent, ggParent )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[BugLab_Variable_Misuse]^recordPrototypePropDefinition ( t, parent.getFirstChild (  ) , type, parent, gParent, root )  ) ;^145^146^^^^142^151^recordPrototypePropDefinition ( t, parent.getFirstChild (  ) , type, parent, gParent, ggParent )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[BugLab_Argument_Swapping]^recordPrototypePropDefinition ( type, parent.getFirstChild (  ) , t, parent, gParent, ggParent )  ) ;^145^146^^^^142^151^recordPrototypePropDefinition ( t, parent.getFirstChild (  ) , type, parent, gParent, ggParent )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[BugLab_Argument_Swapping]^recordPrototypePropDefinition ( t, ggParent.getFirstChild (  ) , type, parent, gParent, parent )  ) ;^145^146^^^^142^151^recordPrototypePropDefinition ( t, parent.getFirstChild (  ) , type, parent, gParent, ggParent )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[BugLab_Argument_Swapping]^recordPrototypePropDefinition ( t, type.getFirstChild (  ) , parent, parent, gParent, ggParent )  ) ;^145^146^^^^142^151^recordPrototypePropDefinition ( t, parent.getFirstChild (  ) , type, parent, gParent, ggParent )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[BugLab_Argument_Swapping]^recordPrototypePropDefinition ( gParent, parent.getFirstChild (  ) , type, parent, t, ggParent )  ) ;^145^146^^^^142^151^recordPrototypePropDefinition ( t, parent.getFirstChild (  ) , type, parent, gParent, ggParent )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[BugLab_Argument_Swapping]^recordPrototypePropDefinition ( t, parent.getFirstChild (  ) , type, parent, ggParent, gParent )  ) ;^145^146^^^^142^151^recordPrototypePropDefinition ( t, parent.getFirstChild (  ) , type, parent, gParent, ggParent )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[BugLab_Variable_Misuse]^String name = NodeUtil.getFunctionName ( parent, parent ) ;^125^^^^^110^140^String name = NodeUtil.getFunctionName ( root, parent ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[BugLab_Variable_Misuse]^String name = NodeUtil.getFunctionName ( root, root ) ;^125^^^^^110^140^String name = NodeUtil.getFunctionName ( root, parent ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[BugLab_Argument_Swapping]^String name = NodeUtil.getFunctionName ( parent, root ) ;^125^^^^^110^140^String name = NodeUtil.getFunctionName ( root, parent ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[BugLab_Variable_Misuse]^JSType type = getType ( parent ) ;^138^^^^^123^153^JSType type = getType ( root ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[BugLab_Variable_Misuse]^Node gParent = root.getParent (  ) ;^140^^^^^125^155^Node gParent = parent.getParent (  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[BugLab_Variable_Misuse]^Node ggParent = root.getParent (  ) ;^141^^^^^126^156^Node ggParent = gParent.getParent (  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[BugLab_Variable_Misuse]^String name = NodeUtil.getFunctionName ( ggParent, parent ) ;^125^^^^^110^140^String name = NodeUtil.getFunctionName ( root, parent ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[BugLab_Variable_Misuse]^if  ( NodeUtil.isAssign ( root )  && NodeUtil.isPrototypeProperty ( parent.getFirstChild (  )  )  )  {^142^143^^^^127^157^if  ( NodeUtil.isAssign ( parent )  && NodeUtil.isPrototypeProperty ( parent.getFirstChild (  )  )  )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[BugLab_Variable_Misuse]^NodeUtil.isPrototypeProperty ( root.getFirstChild (  )  )  )  {^143^^^^^128^158^NodeUtil.isPrototypeProperty ( parent.getFirstChild (  )  )  )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[BugLab_Variable_Misuse]^pushContainingFunction ( recordPrototypePropDefinition ( t, root.getFirstChild (  ) , type, parent, gParent, ggParent )  ) ;^144^145^146^^^129^159^pushContainingFunction ( recordPrototypePropDefinition ( t, parent.getFirstChild (  ) , type, parent, gParent, ggParent )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[BugLab_Variable_Misuse]^pushContainingFunction ( recordPrototypePropDefinition ( t, parent.getFirstChild (  ) , type, parent, root, ggParent )  ) ;^144^145^146^^^129^159^pushContainingFunction ( recordPrototypePropDefinition ( t, parent.getFirstChild (  ) , type, parent, gParent, ggParent )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[BugLab_Variable_Misuse]^pushContainingFunction ( recordPrototypePropDefinition ( t, parent.getFirstChild (  ) , type, parent, gParent, root )  ) ;^144^145^146^^^129^159^pushContainingFunction ( recordPrototypePropDefinition ( t, parent.getFirstChild (  ) , type, parent, gParent, ggParent )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[BugLab_Argument_Swapping]^pushContainingFunction ( recordPrototypePropDefinition ( type, parent.getFirstChild (  ) , t, parent, gParent, ggParent )  ) ;^144^145^146^^^129^159^pushContainingFunction ( recordPrototypePropDefinition ( t, parent.getFirstChild (  ) , type, parent, gParent, ggParent )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[BugLab_Argument_Swapping]^pushContainingFunction ( recordPrototypePropDefinition ( t, gParent.getFirstChild (  ) , type, parent, parent, ggParent )  ) ;^144^145^146^^^129^159^pushContainingFunction ( recordPrototypePropDefinition ( t, parent.getFirstChild (  ) , type, parent, gParent, ggParent )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[BugLab_Argument_Swapping]^pushContainingFunction ( recordPrototypePropDefinition ( t, parent.getFirstChild (  ) , gParent, parent, type, ggParent )  ) ;^144^145^146^^^129^159^pushContainingFunction ( recordPrototypePropDefinition ( t, parent.getFirstChild (  ) , type, parent, gParent, ggParent )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[BugLab_Argument_Swapping]^pushContainingFunction ( recordPrototypePropDefinition ( gParent, parent.getFirstChild (  ) , type, parent, t, ggParent )  ) ;^144^145^146^^^129^159^pushContainingFunction ( recordPrototypePropDefinition ( t, parent.getFirstChild (  ) , type, parent, gParent, ggParent )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[BugLab_Argument_Swapping]^pushContainingFunction ( recordPrototypePropDefinition ( t, ggParent.getFirstChild (  ) , type, parent, gParent, parent )  ) ;^144^145^146^^^129^159^pushContainingFunction ( recordPrototypePropDefinition ( t, parent.getFirstChild (  ) , type, parent, gParent, ggParent )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[BugLab_Variable_Misuse]^recordPrototypePropDefinition ( t, root.getFirstChild (  ) , type, parent, gParent, ggParent )  ) ;^145^146^^^^130^160^recordPrototypePropDefinition ( t, parent.getFirstChild (  ) , type, parent, gParent, ggParent )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[BugLab_Variable_Misuse]^recordPrototypePropDefinition ( t, parent.getFirstChild (  ) , type, parent, root, ggParent )  ) ;^145^146^^^^130^160^recordPrototypePropDefinition ( t, parent.getFirstChild (  ) , type, parent, gParent, ggParent )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[BugLab_Variable_Misuse]^recordPrototypePropDefinition ( t, parent.getFirstChild (  ) , type, parent, gParent, root )  ) ;^145^146^^^^130^160^recordPrototypePropDefinition ( t, parent.getFirstChild (  ) , type, parent, gParent, ggParent )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[BugLab_Argument_Swapping]^recordPrototypePropDefinition ( gParent, parent.getFirstChild (  ) , type, parent, t, ggParent )  ) ;^145^146^^^^130^160^recordPrototypePropDefinition ( t, parent.getFirstChild (  ) , type, parent, gParent, ggParent )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[BugLab_Argument_Swapping]^recordPrototypePropDefinition ( t, ggParent.getFirstChild (  ) , type, parent, gParent, parent )  ) ;^145^146^^^^130^160^recordPrototypePropDefinition ( t, parent.getFirstChild (  ) , type, parent, gParent, ggParent )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[BugLab_Argument_Swapping]^recordPrototypePropDefinition ( t, parent.getFirstChild (  ) , ggParent, parent, gParent, type )  ) ;^145^146^^^^130^160^recordPrototypePropDefinition ( t, parent.getFirstChild (  ) , type, parent, gParent, ggParent )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[BugLab_Argument_Swapping]^recordPrototypePropDefinition ( t, gParent.getFirstChild (  ) , type, parent, parent, ggParent )  ) ;^145^146^^^^130^160^recordPrototypePropDefinition ( t, parent.getFirstChild (  ) , type, parent, gParent, ggParent )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[BugLab_Argument_Swapping]^recordPrototypePropDefinition ( t, parent.getFirstChild (  ) , type, parent, ggParent, gParent )  ) ;^145^146^^^^130^160^recordPrototypePropDefinition ( t, parent.getFirstChild (  ) , type, parent, gParent, ggParent )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[BugLab_Variable_Misuse]^pushContainingFunction ( recordStaticNameDefinition ( t, name, type, ggParent, parent, gParent, root.getLastChild (  )  )  ) ;^148^149^150^^^133^163^pushContainingFunction ( recordStaticNameDefinition ( t, name, type, root, parent, gParent, root.getLastChild (  )  )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[BugLab_Variable_Misuse]^pushContainingFunction ( recordStaticNameDefinition ( t, name, type, root, ggParent, gParent, root.getLastChild (  )  )  ) ;^148^149^150^^^133^163^pushContainingFunction ( recordStaticNameDefinition ( t, name, type, root, parent, gParent, root.getLastChild (  )  )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[BugLab_Variable_Misuse]^pushContainingFunction ( recordStaticNameDefinition ( t, name, type, root, parent, parent, root.getLastChild (  )  )  ) ;^148^149^150^^^133^163^pushContainingFunction ( recordStaticNameDefinition ( t, name, type, root, parent, gParent, root.getLastChild (  )  )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[BugLab_Argument_Swapping]^pushContainingFunction ( recordStaticNameDefinition ( gParent, name, type, root, parent, t, root.getLastChild (  )  )  ) ;^148^149^150^^^133^163^pushContainingFunction ( recordStaticNameDefinition ( t, name, type, root, parent, gParent, root.getLastChild (  )  )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[BugLab_Argument_Swapping]^pushContainingFunction ( recordStaticNameDefinition ( t, parent, type, root, name, gParent, root.getLastChild (  )  )  ) ;^148^149^150^^^133^163^pushContainingFunction ( recordStaticNameDefinition ( t, name, type, root, parent, gParent, root.getLastChild (  )  )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[BugLab_Argument_Swapping]^pushContainingFunction ( recordStaticNameDefinition ( t, type, name, root, parent, gParent, root.getLastChild (  )  )  ) ;^148^149^150^^^133^163^pushContainingFunction ( recordStaticNameDefinition ( t, name, type, root, parent, gParent, root.getLastChild (  )  )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[BugLab_Argument_Swapping]^pushContainingFunction ( recordStaticNameDefinition ( t, name, type, parent, root, gParent, root.getLastChild (  )  )  ) ;^148^149^150^^^133^163^pushContainingFunction ( recordStaticNameDefinition ( t, name, type, root, parent, gParent, root.getLastChild (  )  )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[BugLab_Argument_Swapping]^pushContainingFunction ( recordStaticNameDefinition ( t, name, type, root, gParent, parent, root.getLastChild (  )  )  ) ;^148^149^150^^^133^163^pushContainingFunction ( recordStaticNameDefinition ( t, name, type, root, parent, gParent, root.getLastChild (  )  )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[BugLab_Argument_Swapping]^pushContainingFunction ( recordStaticNameDefinition ( t, name, type, gParent, parent, root, root.getLastChild (  )  )  ) ;^148^149^150^^^133^163^pushContainingFunction ( recordStaticNameDefinition ( t, name, type, root, parent, gParent, root.getLastChild (  )  )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[BugLab_Variable_Misuse]^recordStaticNameDefinition ( t, name, type, parent, parent, gParent, root.getLastChild (  )  )  ) ;^149^150^^^^134^164^recordStaticNameDefinition ( t, name, type, root, parent, gParent, root.getLastChild (  )  )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[BugLab_Variable_Misuse]^recordStaticNameDefinition ( t, name, type, root, ggParent, gParent, root.getLastChild (  )  )  ) ;^149^150^^^^134^164^recordStaticNameDefinition ( t, name, type, root, parent, gParent, root.getLastChild (  )  )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[BugLab_Variable_Misuse]^recordStaticNameDefinition ( t, name, type, root, parent, root, root.getLastChild (  )  )  ) ;^149^150^^^^134^164^recordStaticNameDefinition ( t, name, type, root, parent, gParent, root.getLastChild (  )  )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[BugLab_Argument_Swapping]^recordStaticNameDefinition ( name, t, type, root, parent, gParent, root.getLastChild (  )  )  ) ;^149^150^^^^134^164^recordStaticNameDefinition ( t, name, type, root, parent, gParent, root.getLastChild (  )  )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[BugLab_Argument_Swapping]^recordStaticNameDefinition ( t, name, root, type, parent, gParent, root.getLastChild (  )  )  ) ;^149^150^^^^134^164^recordStaticNameDefinition ( t, name, type, root, parent, gParent, root.getLastChild (  )  )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[BugLab_Argument_Swapping]^recordStaticNameDefinition ( t, name, type, gParent, parent, root, root.getLastChild (  )  )  ) ;^149^150^^^^134^164^recordStaticNameDefinition ( t, name, type, root, parent, gParent, root.getLastChild (  )  )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[BugLab_Argument_Swapping]^recordStaticNameDefinition ( t, name, type, root, gParent, parent, root.getLastChild (  )  )  ) ;^149^150^^^^134^164^recordStaticNameDefinition ( t, name, type, root, parent, gParent, root.getLastChild (  )  )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[BugLab_Variable_Misuse]^t, name, type, parent, parent, gParent, root.getLastChild (  )  )  ) ;^150^^^^^135^165^t, name, type, root, parent, gParent, root.getLastChild (  )  )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[BugLab_Variable_Misuse]^pushContainingFunction ( recordStaticNameDefinition ( t, name, type, ggParent, parent, gParent, root.getLastChild (  )  )  ) ;^148^149^150^^^142^151^pushContainingFunction ( recordStaticNameDefinition ( t, name, type, root, parent, gParent, root.getLastChild (  )  )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[BugLab_Argument_Swapping]^pushContainingFunction ( recordStaticNameDefinition ( t, gParent, type, root, parent, name, root.getLastChild (  )  )  ) ;^148^149^150^^^142^151^pushContainingFunction ( recordStaticNameDefinition ( t, name, type, root, parent, gParent, root.getLastChild (  )  )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[BugLab_Argument_Swapping]^pushContainingFunction ( recordStaticNameDefinition ( t, name, gParent, root, parent, type, root.getLastChild (  )  )  ) ;^148^149^150^^^142^151^pushContainingFunction ( recordStaticNameDefinition ( t, name, type, root, parent, gParent, root.getLastChild (  )  )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[BugLab_Argument_Swapping]^pushContainingFunction ( recordStaticNameDefinition ( parent, name, type, root, t, gParent, root.getLastChild (  )  )  ) ;^148^149^150^^^142^151^pushContainingFunction ( recordStaticNameDefinition ( t, name, type, root, parent, gParent, root.getLastChild (  )  )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[BugLab_Argument_Swapping]^recordStaticNameDefinition ( parent, name, type, root, t, gParent, root.getLastChild (  )  )  ) ;^149^150^^^^142^151^recordStaticNameDefinition ( t, name, type, root, parent, gParent, root.getLastChild (  )  )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[BugLab_Argument_Swapping]^recordStaticNameDefinition ( root, name, type, t, parent, gParent, root.getLastChild (  )  )  ) ;^149^150^^^^142^151^recordStaticNameDefinition ( t, name, type, root, parent, gParent, root.getLastChild (  )  )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[BugLab_Argument_Swapping]^recordStaticNameDefinition ( t, name, type, root, gParent, parent, root.getLastChild (  )  )  ) ;^149^150^^^^142^151^recordStaticNameDefinition ( t, name, type, root, parent, gParent, root.getLastChild (  )  )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[BugLab_Variable_Misuse]^t, name, type, parent, parent, gParent, root.getLastChild (  )  )  ) ;^150^^^^^142^151^t, name, type, root, parent, gParent, root.getLastChild (  )  )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[BugLab_Argument_Swapping]^pushContainingFunction ( recordPrototypePropDefinition ( parent, t.getFirstChild (  ) , type, parent, gParent, ggParent )  ) ;^144^145^146^^^142^151^pushContainingFunction ( recordPrototypePropDefinition ( t, parent.getFirstChild (  ) , type, parent, gParent, ggParent )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[BugLab_Argument_Swapping]^pushContainingFunction ( recordPrototypePropDefinition ( t, parent.getFirstChild (  ) , ggParent, parent, gParent, type )  ) ;^144^145^146^^^142^151^pushContainingFunction ( recordPrototypePropDefinition ( t, parent.getFirstChild (  ) , type, parent, gParent, ggParent )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[BugLab_Argument_Swapping]^recordPrototypePropDefinition ( parent, t.getFirstChild (  ) , type, parent, gParent, ggParent )  ) ;^145^146^^^^142^151^recordPrototypePropDefinition ( t, parent.getFirstChild (  ) , type, parent, gParent, ggParent )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[BugLab_Argument_Swapping]^recordPrototypePropDefinition ( t, parent.getFirstChild (  ) , gParent, parent, type, ggParent )  ) ;^145^146^^^^142^151^recordPrototypePropDefinition ( t, parent.getFirstChild (  ) , type, parent, gParent, ggParent )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[BugLab_Argument_Swapping]^recordPrototypePropDefinition ( t, gParent.getFirstChild (  ) , type, parent, parent, ggParent )  ) ;^145^146^^^^142^151^recordPrototypePropDefinition ( t, parent.getFirstChild (  ) , type, parent, gParent, ggParent )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[BugLab_Argument_Swapping]^recordPrototypePropDefinition ( t, parent.getFirstChild (  ) , ggParent, parent, gParent, type )  ) ;^145^146^^^^142^151^recordPrototypePropDefinition ( t, parent.getFirstChild (  ) , type, parent, gParent, ggParent )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[BugLab_Variable_Misuse]^String name = NodeUtil.getFunctionName ( root, ggParent ) ;^125^^^^^110^140^String name = NodeUtil.getFunctionName ( root, parent ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[BugLab_Argument_Swapping]^pushContainingFunction ( recordPrototypePropDefinition ( parent, t.getFirstChild (  ) , type, parent, gParent, ggParent )  ) ;^144^145^146^^^129^159^pushContainingFunction ( recordPrototypePropDefinition ( t, parent.getFirstChild (  ) , type, parent, gParent, ggParent )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[BugLab_Argument_Swapping]^pushContainingFunction ( recordPrototypePropDefinition ( t, parent.getFirstChild (  ) , type, parent, ggParent, gParent )  ) ;^144^145^146^^^129^159^pushContainingFunction ( recordPrototypePropDefinition ( t, parent.getFirstChild (  ) , type, parent, gParent, ggParent )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[BugLab_Argument_Swapping]^recordPrototypePropDefinition ( t, type.getFirstChild (  ) , parent, parent, gParent, ggParent )  ) ;^145^146^^^^130^160^recordPrototypePropDefinition ( t, parent.getFirstChild (  ) , type, parent, gParent, ggParent )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[BugLab_Variable_Misuse]^pushContainingFunction ( recordStaticNameDefinition ( t, name, type, root, parent, root, root.getLastChild (  )  )  ) ;^148^149^150^^^133^163^pushContainingFunction ( recordStaticNameDefinition ( t, name, type, root, parent, gParent, root.getLastChild (  )  )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[BugLab_Argument_Swapping]^pushContainingFunction ( recordStaticNameDefinition ( t, root, type, name, parent, gParent, root.getLastChild (  )  )  ) ;^148^149^150^^^133^163^pushContainingFunction ( recordStaticNameDefinition ( t, name, type, root, parent, gParent, root.getLastChild (  )  )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[BugLab_Variable_Misuse]^recordStaticNameDefinition ( t, name, type, ggParent, parent, gParent, root.getLastChild (  )  )  ) ;^149^150^^^^134^164^recordStaticNameDefinition ( t, name, type, root, parent, gParent, root.getLastChild (  )  )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[BugLab_Variable_Misuse]^recordStaticNameDefinition ( t, name, type, root, root, gParent, root.getLastChild (  )  )  ) ;^149^150^^^^134^164^recordStaticNameDefinition ( t, name, type, root, parent, gParent, root.getLastChild (  )  )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[BugLab_Argument_Swapping]^recordStaticNameDefinition ( gParent, name, type, root, parent, t, root.getLastChild (  )  )  ) ;^149^150^^^^134^164^recordStaticNameDefinition ( t, name, type, root, parent, gParent, root.getLastChild (  )  )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[BugLab_Argument_Swapping]^recordStaticNameDefinition ( t, type, name, root, parent, gParent, root.getLastChild (  )  )  ) ;^149^150^^^^134^164^recordStaticNameDefinition ( t, name, type, root, parent, gParent, root.getLastChild (  )  )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[BugLab_Argument_Swapping]^recordStaticNameDefinition ( t, name, type, parent, root, gParent, root.getLastChild (  )  )  ) ;^149^150^^^^134^164^recordStaticNameDefinition ( t, name, type, root, parent, gParent, root.getLastChild (  )  )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[BugLab_Wrong_Literal]^return false;^164^^^^^163^165^return true;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  n  parent  ArrayList  currentFunctionStack  NameReferenceGraph  graph  
[BugLab_Variable_Misuse]^while  (  ( varName = param.getNext (  )  )  != null )  {^232^^^^^217^247^while  (  ( param = param.getNext (  )  )  != null )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[BugLab_Wrong_Operator]^while  (  ( param = param.getNext (  )  )  == null )  {^232^^^^^217^247^while  (  ( param = param.getNext (  )  )  != null )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[BugLab_Wrong_Operator]^if  ( NodeUtil.isName ( param )  && NodeUtil.isGetProp ( param )  )  {^233^^^^^218^248^if  ( NodeUtil.isName ( param )  || NodeUtil.isGetProp ( param )  )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[BugLab_Variable_Misuse]^safeAlias ( rhs ) ;^234^^^^^219^249^safeAlias ( param ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[BugLab_Variable_Misuse]^if  ( NodeUtil.isName ( varName )  || NodeUtil.isGetProp ( param )  )  {^233^^^^^218^248^if  ( NodeUtil.isName ( param )  || NodeUtil.isGetProp ( param )  )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[BugLab_Variable_Misuse]^if  ( NodeUtil.isName ( rhs )  || NodeUtil.isGetProp ( param )  )  {^233^^^^^218^248^if  ( NodeUtil.isName ( param )  || NodeUtil.isGetProp ( param )  )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[BugLab_Variable_Misuse]^if  ( NodeUtil.isGetProp ( varName )  || parent.getType (  )  == Token.REF_SPECIAL )  {^173^174^^^^158^188^if  ( NodeUtil.isGetProp ( parent )  || parent.getType (  )  == Token.REF_SPECIAL )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[BugLab_Wrong_Operator]^if  ( NodeUtil.isGetProp ( parent )  && parent.getType (  )  == Token.REF_SPECIAL )  {^173^174^^^^158^188^if  ( NodeUtil.isGetProp ( parent )  || parent.getType (  )  == Token.REF_SPECIAL )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[BugLab_Wrong_Operator]^if  ( NodeUtil.isGetProp ( parent )  || parent.getType (  )  <= Token.REF_SPECIAL )  {^173^174^^^^158^188^if  ( NodeUtil.isGetProp ( parent )  || parent.getType (  )  == Token.REF_SPECIAL )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[BugLab_Variable_Misuse]^} else if  ( NodeUtil.isFunction ( param )  )  {^177^^^^^162^192^} else if  ( NodeUtil.isFunction ( parent )  )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[BugLab_Variable_Misuse]^} else if  ( NodeUtil.isAssign ( param )  )  {^180^^^^^165^195^} else if  ( NodeUtil.isAssign ( parent )  )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[BugLab_Variable_Misuse]^} else if  ( NodeUtil.isAssign ( varName )  )  {^180^^^^^165^195^} else if  ( NodeUtil.isAssign ( parent )  )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[BugLab_Variable_Misuse]^} else if  ( NodeUtil.isAssign ( rhs )  )  {^180^^^^^165^195^} else if  ( NodeUtil.isAssign ( parent )  )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[BugLab_Variable_Misuse]^if  ( isLocalNameReference ( t, rhs )  )  {^185^^^^^170^200^if  ( isLocalNameReference ( t, n )  )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[BugLab_Argument_Swapping]^if  ( isLocalNameReference ( n, t )  )  {^185^^^^^170^200^if  ( isLocalNameReference ( t, n )  )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[BugLab_Variable_Misuse]^if  ( isPrototypeNameReference ( rhs )  )  {^190^^^^^175^205^if  ( isPrototypeNameReference ( n )  )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[BugLab_Variable_Misuse]^} else if  ( isStaticNameReference ( varName, t.getScope (  )  )  )  {^192^^^^^177^207^} else if  ( isStaticNameReference ( n, t.getScope (  )  )  )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[BugLab_Argument_Swapping]^} else if  ( isStaticNameReference ( t, n.getScope (  )  )  )  {^192^^^^^177^207^} else if  ( isStaticNameReference ( n, t.getScope (  )  )  )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[BugLab_Variable_Misuse]^recordUnknownUse ( t, varName, parent ) ;^195^^^^^192^196^recordUnknownUse ( t, n, parent ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[BugLab_Variable_Misuse]^recordUnknownUse ( t, n, varName ) ;^195^^^^^192^196^recordUnknownUse ( t, n, parent ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[BugLab_Argument_Swapping]^recordUnknownUse ( n, t, parent ) ;^195^^^^^192^196^recordUnknownUse ( t, n, parent ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[BugLab_Argument_Swapping]^recordUnknownUse ( t, parent, n ) ;^195^^^^^192^196^recordUnknownUse ( t, n, parent ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[BugLab_Argument_Swapping]^recordUnknownUse ( parent, n, t ) ;^195^^^^^192^196^recordUnknownUse ( t, n, parent ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[BugLab_Variable_Misuse]^recordStaticNameUse ( t, varName, parent ) ;^193^^^^^178^208^recordStaticNameUse ( t, n, parent ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[BugLab_Variable_Misuse]^recordStaticNameUse ( t, n, varName ) ;^193^^^^^178^208^recordStaticNameUse ( t, n, parent ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[BugLab_Argument_Swapping]^recordStaticNameUse ( parent, n, t ) ;^193^^^^^178^208^recordStaticNameUse ( t, n, parent ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[BugLab_Argument_Swapping]^recordStaticNameUse ( t, parent, n ) ;^193^^^^^178^208^recordStaticNameUse ( t, n, parent ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[BugLab_Variable_Misuse]^} else if  ( isStaticNameReference ( parent, t.getScope (  )  )  )  {^192^^^^^177^207^} else if  ( isStaticNameReference ( n, t.getScope (  )  )  )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[BugLab_Variable_Misuse]^recordStaticNameUse ( t, parent, parent ) ;^193^^^^^178^208^recordStaticNameUse ( t, n, parent ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[BugLab_Argument_Swapping]^recordStaticNameUse ( n, t, parent ) ;^193^^^^^178^208^recordStaticNameUse ( t, n, parent ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[BugLab_Variable_Misuse]^recordUnknownUse ( t, varName, parent ) ;^195^^^^^180^210^recordUnknownUse ( t, n, parent ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[BugLab_Argument_Swapping]^recordUnknownUse ( parent, n, t ) ;^195^^^^^180^210^recordUnknownUse ( t, n, parent ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[BugLab_Argument_Swapping]^recordUnknownUse ( t, parent, n ) ;^195^^^^^180^210^recordUnknownUse ( t, n, parent ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[BugLab_Variable_Misuse]^recordPrototypePropUse ( t, rhs, parent ) ;^191^^^^^176^206^recordPrototypePropUse ( t, n, parent ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[BugLab_Variable_Misuse]^recordPrototypePropUse ( t, n, varName ) ;^191^^^^^176^206^recordPrototypePropUse ( t, n, parent ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[BugLab_Argument_Swapping]^recordPrototypePropUse ( parent, n, t ) ;^191^^^^^176^206^recordPrototypePropUse ( t, n, parent ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[BugLab_Argument_Swapping]^recordPrototypePropUse ( t, parent, n ) ;^191^^^^^176^206^recordPrototypePropUse ( t, n, parent ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[BugLab_Variable_Misuse]^recordUnknownUse ( t, n, param ) ;^195^^^^^192^196^recordUnknownUse ( t, n, parent ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[BugLab_Variable_Misuse]^if  ( NodeUtil.isFunction ( varName )  )  {^202^^^^^187^217^if  ( NodeUtil.isFunction ( rhs )  )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[BugLab_Variable_Misuse]^if  ( NodeUtil.isName ( rhs )  || NodeUtil.isGetProp ( lhs )  || NodeUtil.isGetProp ( rhs )  )  {^206^207^208^^^191^221^if  ( NodeUtil.isName ( lhs )  || NodeUtil.isGetProp ( lhs )  || NodeUtil.isGetProp ( rhs )  )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[BugLab_Variable_Misuse]^if  ( NodeUtil.isName ( lhs )  || NodeUtil.isGetProp ( lhs )  || NodeUtil.isGetProp ( varName )  )  {^206^207^208^^^191^221^if  ( NodeUtil.isName ( lhs )  || NodeUtil.isGetProp ( lhs )  || NodeUtil.isGetProp ( rhs )  )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[BugLab_Wrong_Operator]^if  ( NodeUtil.isName ( lhs )  && NodeUtil.isGetProp ( lhs )  || NodeUtil.isGetProp ( rhs )  )  {^206^207^208^^^191^221^if  ( NodeUtil.isName ( lhs )  || NodeUtil.isGetProp ( lhs )  || NodeUtil.isGetProp ( rhs )  )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[BugLab_Variable_Misuse]^if  ( NodeUtil.isPrototypeProperty ( varName )  )  {^209^^^^^206^214^if  ( NodeUtil.isPrototypeProperty ( lhs )  )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[BugLab_Variable_Misuse]^Name name = recordPrototypePropDefinition ( t, varName, getType ( rhs ) , n, parent, parent.getParent (  )  ) ;^210^211^^^^206^214^Name name = recordPrototypePropDefinition ( t, lhs, getType ( rhs ) , n, parent, parent.getParent (  )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[BugLab_Variable_Misuse]^Name name = recordPrototypePropDefinition ( t, lhs, getType ( param ) , n, parent, parent.getParent (  )  ) ;^210^211^^^^206^214^Name name = recordPrototypePropDefinition ( t, lhs, getType ( rhs ) , n, parent, parent.getParent (  )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[BugLab_Variable_Misuse]^Name varNameame = recordPrototypePropDefinition ( t, lhs, getType ( rhs ) , n, parent, parent.getParent (  )  ) ;^210^211^^^^206^214^Name name = recordPrototypePropDefinition ( t, lhs, getType ( rhs ) , n, parent, parent.getParent (  )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[BugLab_Variable_Misuse]^Name name = recordPrototypePropDefinition ( t, lhs, getType ( rhs ) , n, rhs, parent.getParent (  )  ) ;^210^211^^^^206^214^Name name = recordPrototypePropDefinition ( t, lhs, getType ( rhs ) , n, parent, parent.getParent (  )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[BugLab_Argument_Swapping]^Name tame = recordPrototypePropDefinition ( n, lhs, getType ( rhs ) , n, parent, parent.getParent (  )  ) ;^210^211^^^^206^214^Name name = recordPrototypePropDefinition ( t, lhs, getType ( rhs ) , n, parent, parent.getParent (  )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[BugLab_Argument_Swapping]^Name name = recordPrototypePropDefinition ( t, parent, getType ( rhs ) , n, lhs, parent.getParent (  )  ) ;^210^211^^^^206^214^Name name = recordPrototypePropDefinition ( t, lhs, getType ( rhs ) , n, parent, parent.getParent (  )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[BugLab_Argument_Swapping]^Name name = recordPrototypePropDefinition ( t, lhs, getType ( parent ) , n, rhs, parent.getParent (  )  ) ;^210^211^^^^206^214^Name name = recordPrototypePropDefinition ( t, lhs, getType ( rhs ) , n, parent, parent.getParent (  )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[BugLab_Argument_Swapping]^Name parentame = recordPrototypePropDefinition ( t, lhs, getType ( rhs ) , n, n, parent.getParent (  )  ) ;^210^211^^^^206^214^Name name = recordPrototypePropDefinition ( t, lhs, getType ( rhs ) , n, parent, parent.getParent (  )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[BugLab_Variable_Misuse]^Name rhsame = recordPrototypePropDefinition ( t, lhs, getType ( rhs ) , n, parent, parent.getParent (  )  ) ;^210^211^^^^206^214^Name name = recordPrototypePropDefinition ( t, lhs, getType ( rhs ) , n, parent, parent.getParent (  )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[BugLab_Variable_Misuse]^Name name = recordPrototypePropDefinition ( t, lhs, getType ( rhs ) , n, varName, parent.getParent (  )  ) ;^210^211^^^^206^214^Name name = recordPrototypePropDefinition ( t, lhs, getType ( rhs ) , n, parent, parent.getParent (  )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[BugLab_Argument_Swapping]^Name name = recordPrototypePropDefinition ( lhs, t, getType ( rhs ) , n, parent, parent.getParent (  )  ) ;^210^211^^^^206^214^Name name = recordPrototypePropDefinition ( t, lhs, getType ( rhs ) , n, parent, parent.getParent (  )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[BugLab_Argument_Swapping]^Name name = recordPrototypePropDefinition ( t, rhs, getType ( lhs ) , n, parent, parent.getParent (  )  ) ;^210^211^^^^206^214^Name name = recordPrototypePropDefinition ( t, lhs, getType ( rhs ) , n, parent, parent.getParent (  )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[BugLab_Variable_Misuse]^t, lhs, getType ( varName ) , n, parent, parent.getParent (  )  ) ;^211^^^^^206^214^t, lhs, getType ( rhs ) , n, parent, parent.getParent (  )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[BugLab_Variable_Misuse]^t, lhs, getType ( rhs ) , n, varName, parent.getParent (  )  ) ;^211^^^^^206^214^t, lhs, getType ( rhs ) , n, parent, parent.getParent (  )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[BugLab_Wrong_Literal]^name.setAliased ( false ) ;^212^^^^^206^214^name.setAliased ( true ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[BugLab_Variable_Misuse]^Name name = recordPrototypePropDefinition ( t, lhs, getType ( varName ) , n, parent, parent.getParent (  )  ) ;^210^211^^^^206^214^Name name = recordPrototypePropDefinition ( t, lhs, getType ( rhs ) , n, parent, parent.getParent (  )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[BugLab_Variable_Misuse]^Name name = recordPrototypePropDefinition ( t, lhs, getType ( rhs ) , n, param, parent.getParent (  )  ) ;^210^211^^^^206^214^Name name = recordPrototypePropDefinition ( t, lhs, getType ( rhs ) , n, parent, parent.getParent (  )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[BugLab_Argument_Swapping]^Name name = recordPrototypePropDefinition ( parent, lhs, getType ( rhs ) , n, t, parent.getParent (  )  ) ;^210^211^^^^206^214^Name name = recordPrototypePropDefinition ( t, lhs, getType ( rhs ) , n, parent, parent.getParent (  )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[BugLab_Argument_Swapping]^Name name = recordPrototypePropDefinition ( rhs, lhs, getType ( t ) , n, parent, parent.getParent (  )  ) ;^210^211^^^^206^214^Name name = recordPrototypePropDefinition ( t, lhs, getType ( rhs ) , n, parent, parent.getParent (  )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[BugLab_Argument_Swapping]^Name lhsame = recordPrototypePropDefinition ( t, n, getType ( rhs ) , n, parent, parent.getParent (  )  ) ;^210^211^^^^206^214^Name name = recordPrototypePropDefinition ( t, lhs, getType ( rhs ) , n, parent, parent.getParent (  )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[BugLab_Variable_Misuse]^t, lhs, getType ( param ) , n, parent, parent.getParent (  )  ) ;^211^^^^^206^214^t, lhs, getType ( rhs ) , n, parent, parent.getParent (  )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[BugLab_Variable_Misuse]^t, lhs, getType ( rhs ) , n, rhs, parent.getParent (  )  ) ;^211^^^^^206^214^t, lhs, getType ( rhs ) , n, parent, parent.getParent (  )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[BugLab_Variable_Misuse]^if  ( NodeUtil.isPrototypeProperty ( parent )  )  {^209^^^^^194^224^if  ( NodeUtil.isPrototypeProperty ( lhs )  )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[BugLab_Variable_Misuse]^Name name = recordPrototypePropDefinition ( t, lhs, getType ( varName ) , n, parent, parent.getParent (  )  ) ;^210^211^^^^195^225^Name name = recordPrototypePropDefinition ( t, lhs, getType ( rhs ) , n, parent, parent.getParent (  )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[BugLab_Variable_Misuse]^Name name = recordPrototypePropDefinition ( t, lhs, getType ( rhs ) , n, rhs, parent.getParent (  )  ) ;^210^211^^^^195^225^Name name = recordPrototypePropDefinition ( t, lhs, getType ( rhs ) , n, parent, parent.getParent (  )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[BugLab_Argument_Swapping]^Name name = recordPrototypePropDefinition ( parent, lhs, getType ( rhs ) , n, t, parent.getParent (  )  ) ;^210^211^^^^195^225^Name name = recordPrototypePropDefinition ( t, lhs, getType ( rhs ) , n, parent, parent.getParent (  )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[BugLab_Argument_Swapping]^Name lhsame = recordPrototypePropDefinition ( t, n, getType ( rhs ) , n, parent, parent.getParent (  )  ) ;^210^211^^^^195^225^Name name = recordPrototypePropDefinition ( t, lhs, getType ( rhs ) , n, parent, parent.getParent (  )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[BugLab_Argument_Swapping]^Name name = recordPrototypePropDefinition ( rhs, lhs, getType ( t ) , n, parent, parent.getParent (  )  ) ;^210^211^^^^195^225^Name name = recordPrototypePropDefinition ( t, lhs, getType ( rhs ) , n, parent, parent.getParent (  )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[BugLab_Argument_Swapping]^Name parentame = recordPrototypePropDefinition ( t, lhs, getType ( rhs ) , n, n, parent.getParent (  )  ) ;^210^211^^^^195^225^Name name = recordPrototypePropDefinition ( t, lhs, getType ( rhs ) , n, parent, parent.getParent (  )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[BugLab_Argument_Swapping]^Name name = recordPrototypePropDefinition ( t, lhs, getType ( parent ) , n, rhs, parent.getParent (  )  ) ;^210^211^^^^195^225^Name name = recordPrototypePropDefinition ( t, lhs, getType ( rhs ) , n, parent, parent.getParent (  )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[BugLab_Variable_Misuse]^Name name = recordPrototypePropDefinition ( t, varName, getType ( rhs ) , n, parent, parent.getParent (  )  ) ;^210^211^^^^195^225^Name name = recordPrototypePropDefinition ( t, lhs, getType ( rhs ) , n, parent, parent.getParent (  )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[BugLab_Variable_Misuse]^Name parentame = recordPrototypePropDefinition ( t, lhs, getType ( rhs ) , n, parent, parent.getParent (  )  ) ;^210^211^^^^195^225^Name name = recordPrototypePropDefinition ( t, lhs, getType ( rhs ) , n, parent, parent.getParent (  )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[BugLab_Variable_Misuse]^Name name = recordPrototypePropDefinition ( t, lhs, getType ( rhs ) , n, varName, parent.getParent (  )  ) ;^210^211^^^^195^225^Name name = recordPrototypePropDefinition ( t, lhs, getType ( rhs ) , n, parent, parent.getParent (  )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[BugLab_Argument_Swapping]^Name tame = recordPrototypePropDefinition ( n, lhs, getType ( rhs ) , n, parent, parent.getParent (  )  ) ;^210^211^^^^195^225^Name name = recordPrototypePropDefinition ( t, lhs, getType ( rhs ) , n, parent, parent.getParent (  )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[BugLab_Argument_Swapping]^Name name = recordPrototypePropDefinition ( t, rhs, getType ( lhs ) , n, parent, parent.getParent (  )  ) ;^210^211^^^^195^225^Name name = recordPrototypePropDefinition ( t, lhs, getType ( rhs ) , n, parent, parent.getParent (  )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[BugLab_Argument_Swapping]^Name rhsame = recordPrototypePropDefinition ( t, lhs, getType ( n ) , n, parent, parent.getParent (  )  ) ;^210^211^^^^195^225^Name name = recordPrototypePropDefinition ( t, lhs, getType ( rhs ) , n, parent, parent.getParent (  )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[BugLab_Variable_Misuse]^t, lhs, getType ( varName ) , n, parent, parent.getParent (  )  ) ;^211^^^^^196^226^t, lhs, getType ( rhs ) , n, parent, parent.getParent (  )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[BugLab_Variable_Misuse]^t, lhs, getType ( rhs ) , n, rhs, parent.getParent (  )  ) ;^211^^^^^196^226^t, lhs, getType ( rhs ) , n, parent, parent.getParent (  )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[BugLab_Wrong_Literal]^name.setAliased ( false ) ;^212^^^^^197^227^name.setAliased ( true ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[BugLab_Variable_Misuse]^if  ( varName == null )  {^222^^^^^207^237^if  ( assignedValue == null )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[BugLab_Wrong_Operator]^if  ( assignedValue != null )  {^222^^^^^207^237^if  ( assignedValue == null )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[BugLab_Variable_Misuse]^while  (  ( parent = param.getNext (  )  )  != null )  {^232^^^^^217^247^while  (  ( param = param.getNext (  )  )  != null )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[BugLab_Variable_Misuse]^Node lhs = rhs.getFirstChild (  ) ;^200^^^^^185^215^Node lhs = n.getFirstChild (  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[BugLab_Variable_Misuse]^Node rhs = varName.getLastChild (  ) ;^201^^^^^186^216^Node rhs = n.getLastChild (  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[BugLab_Variable_Misuse]^Name name = recordPrototypePropDefinition ( t, lhs, getType ( param ) , n, parent, parent.getParent (  )  ) ;^210^211^^^^195^225^Name name = recordPrototypePropDefinition ( t, lhs, getType ( rhs ) , n, parent, parent.getParent (  )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[BugLab_Variable_Misuse]^Name varNameame = recordPrototypePropDefinition ( t, lhs, getType ( rhs ) , n, parent, parent.getParent (  )  ) ;^210^211^^^^195^225^Name name = recordPrototypePropDefinition ( t, lhs, getType ( rhs ) , n, parent, parent.getParent (  )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[BugLab_Argument_Swapping]^Name name = recordPrototypePropDefinition ( t, parent, getType ( rhs ) , n, lhs, parent.getParent (  )  ) ;^210^211^^^^195^225^Name name = recordPrototypePropDefinition ( t, lhs, getType ( rhs ) , n, parent, parent.getParent (  )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[BugLab_Variable_Misuse]^Node varName = parent.getFirstChild (  ) ;^220^^^^^205^235^Node varName = n.getFirstChild (  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[BugLab_Variable_Misuse]^Node param = varName.getFirstChild (  ) ;^229^^^^^214^244^Node param = n.getFirstChild (  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[BugLab_Variable_Misuse]^switch  ( varName.getType (  )  )  {^170^^^^^155^185^switch  ( n.getType (  )  )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[BugLab_Variable_Misuse]^if  ( NodeUtil.isGetProp ( rhs )  || parent.getType (  )  == Token.REF_SPECIAL )  {^173^174^^^^158^188^if  ( NodeUtil.isGetProp ( parent )  || parent.getType (  )  == Token.REF_SPECIAL )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[BugLab_Variable_Misuse]^} else if  ( NodeUtil.isFunction ( varName )  )  {^177^^^^^162^192^} else if  ( NodeUtil.isFunction ( parent )  )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[BugLab_Variable_Misuse]^recordPrototypePropUse ( t, varName, parent ) ;^191^^^^^176^206^recordPrototypePropUse ( t, n, parent ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[BugLab_Variable_Misuse]^recordUnknownUse ( t, n, varName ) ;^195^^^^^180^210^recordUnknownUse ( t, n, parent ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[BugLab_Variable_Misuse]^Node lhs = parent.getFirstChild (  ) ;^200^^^^^185^215^Node lhs = n.getFirstChild (  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[BugLab_Variable_Misuse]^Node rhs = rhs.getLastChild (  ) ;^201^^^^^186^216^Node rhs = n.getLastChild (  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[BugLab_Variable_Misuse]^if  ( NodeUtil.isName ( varName )  || NodeUtil.isGetProp ( lhs )  || NodeUtil.isGetProp ( rhs )  )  {^206^207^208^^^191^221^if  ( NodeUtil.isName ( lhs )  || NodeUtil.isGetProp ( lhs )  || NodeUtil.isGetProp ( rhs )  )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[BugLab_Variable_Misuse]^if  ( NodeUtil.isPrototypeProperty ( varName )  )  {^209^^^^^194^224^if  ( NodeUtil.isPrototypeProperty ( lhs )  )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[BugLab_Argument_Swapping]^Name name = recordPrototypePropDefinition ( lhs, t, getType ( rhs ) , n, parent, parent.getParent (  )  ) ;^210^211^^^^195^225^Name name = recordPrototypePropDefinition ( t, lhs, getType ( rhs ) , n, parent, parent.getParent (  )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[BugLab_Variable_Misuse]^maybeAliasNamesOnAssign ( varName, rhs ) ;^215^^^^^200^230^maybeAliasNamesOnAssign ( lhs, rhs ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[BugLab_Argument_Swapping]^maybeAliasNamesOnAssign ( rhs, lhs ) ;^215^^^^^200^230^maybeAliasNamesOnAssign ( lhs, rhs ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[BugLab_Variable_Misuse]^Node varName = varName.getFirstChild (  ) ;^220^^^^^205^235^Node varName = n.getFirstChild (  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[BugLab_Variable_Misuse]^Node assignedValue = rhs.getFirstChild (  ) ;^221^^^^^206^236^Node assignedValue = varName.getFirstChild (  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[BugLab_Variable_Misuse]^maybeAliasNamesOnAssign ( varName, parent ) ;^225^^^^^210^240^maybeAliasNamesOnAssign ( varName, assignedValue ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[BugLab_Argument_Swapping]^maybeAliasNamesOnAssign ( assignedValue, varName ) ;^225^^^^^210^240^maybeAliasNamesOnAssign ( varName, assignedValue ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[BugLab_Variable_Misuse]^Node param = rhs.getFirstChild (  ) ;^229^^^^^214^244^Node param = n.getFirstChild (  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[BugLab_Variable_Misuse]^while  (  ( rhs = param.getNext (  )  )  != null )  {^232^^^^^217^247^while  (  ( param = param.getNext (  )  )  != null )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[BugLab_Variable_Misuse]^if  ( NodeUtil.isName ( parent )  || NodeUtil.isGetProp ( param )  )  {^233^^^^^218^248^if  ( NodeUtil.isName ( param )  || NodeUtil.isGetProp ( param )  )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[BugLab_Variable_Misuse]^safeAlias ( parent ) ;^234^^^^^219^249^safeAlias ( param ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[BugLab_Variable_Misuse]^maybeRecordExport ( rhs ) ;^238^^^^^223^253^maybeRecordExport ( n ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[BugLab_Wrong_Operator]^return NodeUtil.containsType ( n, Token.NAME )  && NodeUtil.containsType ( n, Token.GETELEM )  || NodeUtil.containsType ( n, Token.GETPROP ) ;^244^245^246^^^243^247^return NodeUtil.containsType ( n, Token.NAME )  || NodeUtil.containsType ( n, Token.GETELEM )  || NodeUtil.containsType ( n, Token.GETPROP ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] containsName [RETURN_TYPE] boolean   Node n [VARIABLES] ArrayList  currentFunctionStack  Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NameReferenceGraph  graph  Node  n  
[BugLab_Variable_Misuse]^if  ( NodeUtil.isName ( cur )  || NodeUtil.isGetProp ( n )  )  {^256^^^^^255^280^if  ( NodeUtil.isName ( n )  || NodeUtil.isGetProp ( n )  )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] safeAlias [RETURN_TYPE] void   Node n [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Node  cur  n  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[BugLab_Wrong_Operator]^if  ( NodeUtil.isName ( n )  && NodeUtil.isGetProp ( n )  )  {^256^^^^^255^280^if  ( NodeUtil.isName ( n )  || NodeUtil.isGetProp ( n )  )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] safeAlias [RETURN_TYPE] void   Node n [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Node  cur  n  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[BugLab_Wrong_Operator]^if  ( name == null )  {^259^^^^^255^280^if  ( name != null )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] safeAlias [RETURN_TYPE] void   Node n [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Node  cur  n  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[BugLab_Variable_Misuse]^String curame = n.getQualifiedName (  ) ;^257^^^^^255^280^String name = n.getQualifiedName (  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] safeAlias [RETURN_TYPE] void   Node n [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Node  cur  n  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[BugLab_Variable_Misuse]^} while  (  ( n = cur.getNext (  )  )  != null ) ;^276^^^^^255^280^} while  (  ( cur = cur.getNext (  )  )  != null ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] safeAlias [RETURN_TYPE] void   Node n [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Node  cur  n  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[BugLab_Variable_Misuse]^} else if  ( cur.hasChildren (  )  )  {^272^^^^^255^280^} else if  ( n.hasChildren (  )  )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] safeAlias [RETURN_TYPE] void   Node n [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Node  cur  n  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[BugLab_Variable_Misuse]^Node cur = cur.getFirstChild (  ) ;^273^^^^^255^280^Node cur = n.getFirstChild (  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] safeAlias [RETURN_TYPE] void   Node n [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Node  cur  n  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[BugLab_Variable_Misuse]^safeAlias ( n ) ;^275^^^^^255^280^safeAlias ( cur ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] safeAlias [RETURN_TYPE] void   Node n [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Node  cur  n  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[BugLab_Variable_Misuse]^safeAlias ( cur.getFirstChild (  )  ) ;^271^^^^^255^280^safeAlias ( n.getFirstChild (  )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] safeAlias [RETURN_TYPE] void   Node n [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Node  cur  n  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[BugLab_Variable_Misuse]^} else if  ( NodeUtil.isAssign ( cur )  )  {^268^^^^^255^280^} else if  ( NodeUtil.isAssign ( n )  )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] safeAlias [RETURN_TYPE] void   Node n [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Node  cur  n  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[BugLab_Variable_Misuse]^defineAndAlias ( cur.getLastChild (  ) .getString (  )  ) ;^267^^^^^255^280^defineAndAlias ( n.getLastChild (  ) .getString (  )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] safeAlias [RETURN_TYPE] void   Node n [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Node  cur  n  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  
[BugLab_Argument_Swapping]^if  (  ( NodeUtil.isName ( rhs )  || NodeUtil.isGetProp ( lhs )  )  && containsName ( lhs )  && !NodeUtil.isFunction ( rhs )  && !NodeUtil.isNew ( rhs )  )  {^283^284^285^286^^282^290^if  (  ( NodeUtil.isName ( lhs )  || NodeUtil.isGetProp ( lhs )  )  && containsName ( rhs )  && !NodeUtil.isFunction ( rhs )  && !NodeUtil.isNew ( rhs )  )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] maybeAliasNamesOnAssign [RETURN_TYPE] void   Node lhs Node rhs [VARIABLES] ArrayList  currentFunctionStack  Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NameReferenceGraph  graph  Node  lhs  rhs  
[BugLab_Wrong_Operator]^if  (  ( NodeUtil.isName ( lhs )  || NodeUtil.isGetProp ( lhs )  )  || containsName ( rhs )  && !NodeUtil.isFunction ( rhs )  && !NodeUtil.isNew ( rhs )  )  {^283^284^285^286^^282^290^if  (  ( NodeUtil.isName ( lhs )  || NodeUtil.isGetProp ( lhs )  )  && containsName ( rhs )  && !NodeUtil.isFunction ( rhs )  && !NodeUtil.isNew ( rhs )  )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] maybeAliasNamesOnAssign [RETURN_TYPE] void   Node lhs Node rhs [VARIABLES] ArrayList  currentFunctionStack  Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NameReferenceGraph  graph  Node  lhs  rhs  
[BugLab_Wrong_Operator]^if  (  ( NodeUtil.isName ( lhs )  && NodeUtil.isGetProp ( lhs )  )  && containsName ( rhs )  && !NodeUtil.isFunction ( rhs )  && !NodeUtil.isNew ( rhs )  )  {^283^284^285^286^^282^290^if  (  ( NodeUtil.isName ( lhs )  || NodeUtil.isGetProp ( lhs )  )  && containsName ( rhs )  && !NodeUtil.isFunction ( rhs )  && !NodeUtil.isNew ( rhs )  )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] maybeAliasNamesOnAssign [RETURN_TYPE] void   Node lhs Node rhs [VARIABLES] ArrayList  currentFunctionStack  Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NameReferenceGraph  graph  Node  lhs  rhs  
[BugLab_Variable_Misuse]^safeAlias ( lhs ) ;^288^^^^^282^290^safeAlias ( rhs ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] maybeAliasNamesOnAssign [RETURN_TYPE] void   Node lhs Node rhs [VARIABLES] ArrayList  currentFunctionStack  Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NameReferenceGraph  graph  Node  lhs  rhs  
[BugLab_Variable_Misuse]^if  (  ( NodeUtil.isName ( rhs )  || NodeUtil.isGetProp ( lhs )  )  && containsName ( rhs )  && !NodeUtil.isFunction ( rhs )  && !NodeUtil.isNew ( rhs )  )  {^283^284^285^286^^282^290^if  (  ( NodeUtil.isName ( lhs )  || NodeUtil.isGetProp ( lhs )  )  && containsName ( rhs )  && !NodeUtil.isFunction ( rhs )  && !NodeUtil.isNew ( rhs )  )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] maybeAliasNamesOnAssign [RETURN_TYPE] void   Node lhs Node rhs [VARIABLES] ArrayList  currentFunctionStack  Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NameReferenceGraph  graph  Node  lhs  rhs  
[BugLab_Variable_Misuse]^!NodeUtil.isFunction ( lhs )  && !NodeUtil.isNew ( rhs )  )  {^285^286^^^^282^290^!NodeUtil.isFunction ( rhs )  && !NodeUtil.isNew ( rhs )  )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] maybeAliasNamesOnAssign [RETURN_TYPE] void   Node lhs Node rhs [VARIABLES] ArrayList  currentFunctionStack  Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NameReferenceGraph  graph  Node  lhs  rhs  
[BugLab_Variable_Misuse]^!NodeUtil.isNew ( lhs )  )  {^286^^^^^282^290^!NodeUtil.isNew ( rhs )  )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] maybeAliasNamesOnAssign [RETURN_TYPE] void   Node lhs Node rhs [VARIABLES] ArrayList  currentFunctionStack  Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NameReferenceGraph  graph  Node  lhs  rhs  
[BugLab_Variable_Misuse]^safeAlias ( rhs ) ;^287^^^^^282^290^safeAlias ( lhs ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] maybeAliasNamesOnAssign [RETURN_TYPE] void   Node lhs Node rhs [VARIABLES] ArrayList  currentFunctionStack  Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NameReferenceGraph  graph  Node  lhs  rhs  
[BugLab_Variable_Misuse]^graph.defineNameIfNotExists ( name, CONSERVATIVE ) .setAliased ( true ) ;^293^^^^^292^294^graph.defineNameIfNotExists ( name, isExtern ) .setAliased ( true ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] defineAndAlias [RETURN_TYPE] void   String name [VARIABLES] ArrayList  currentFunctionStack  Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  String  name  NameReferenceGraph  graph  
[BugLab_Argument_Swapping]^graph.defineNameIfNotExists ( isExtern, name ) .setAliased ( true ) ;^293^^^^^292^294^graph.defineNameIfNotExists ( name, isExtern ) .setAliased ( true ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] defineAndAlias [RETURN_TYPE] void   String name [VARIABLES] ArrayList  currentFunctionStack  Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  String  name  NameReferenceGraph  graph  
[BugLab_Wrong_Literal]^graph.defineNameIfNotExists ( name, isExtern ) .setAliased ( false ) ;^293^^^^^292^294^graph.defineNameIfNotExists ( name, isExtern ) .setAliased ( true ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] defineAndAlias [RETURN_TYPE] void   String name [VARIABLES] ArrayList  currentFunctionStack  Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  String  name  NameReferenceGraph  graph  
[BugLab_Variable_Misuse]^Preconditions.checkArgument ( NodeUtil.isCall ( symbol )  ) ;^297^^^^^282^312^Preconditions.checkArgument ( NodeUtil.isCall ( call )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] maybeRecordExport [RETURN_TYPE] void   Node call [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Node  call  getProp  obj  symbol  ArrayList  currentFunctionStack  String  propQName  qName  NameReferenceGraph  graph  
[BugLab_Variable_Misuse]^Node getProp = symbol.getFirstChild (  ) ;^298^^^^^283^313^Node getProp = call.getFirstChild (  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] maybeRecordExport [RETURN_TYPE] void   Node call [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Node  call  getProp  obj  symbol  ArrayList  currentFunctionStack  String  propQName  qName  NameReferenceGraph  graph  
[BugLab_Variable_Misuse]^if  ( !NodeUtil.isGetProp ( symbol )  )  {^299^^^^^284^314^if  ( !NodeUtil.isGetProp ( getProp )  )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] maybeRecordExport [RETURN_TYPE] void   Node call [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Node  call  getProp  obj  symbol  ArrayList  currentFunctionStack  String  propQName  qName  NameReferenceGraph  graph  
[BugLab_Variable_Misuse]^String propQName = symbol.getQualifiedName (  ) ;^303^^^^^288^318^String propQName = getProp.getQualifiedName (  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] maybeRecordExport [RETURN_TYPE] void   Node call [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Node  call  getProp  obj  symbol  ArrayList  currentFunctionStack  String  propQName  qName  NameReferenceGraph  graph  
[BugLab_Variable_Misuse]^if  ( qName == null )  {^305^^^^^290^320^if  ( propQName == null )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] maybeRecordExport [RETURN_TYPE] void   Node call [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Node  call  getProp  obj  symbol  ArrayList  currentFunctionStack  String  propQName  qName  NameReferenceGraph  graph  
[BugLab_Wrong_Operator]^if  ( propQName != null )  {^305^^^^^290^320^if  ( propQName == null )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] maybeRecordExport [RETURN_TYPE] void   Node call [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Node  call  getProp  obj  symbol  ArrayList  currentFunctionStack  String  propQName  qName  NameReferenceGraph  graph  
[BugLab_Variable_Misuse]^if  ( qName.endsWith ( ".call" )  || propQName.endsWith ( ".apply" )  )  {^311^^^^^296^326^if  ( propQName.endsWith ( ".call" )  || propQName.endsWith ( ".apply" )  )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] maybeRecordExport [RETURN_TYPE] void   Node call [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Node  call  getProp  obj  symbol  ArrayList  currentFunctionStack  String  propQName  qName  NameReferenceGraph  graph  
[BugLab_Wrong_Operator]^if  ( propQName.endsWith ( ".call" )  && propQName.endsWith ( ".apply" )  )  {^311^^^^^296^326^if  ( propQName.endsWith ( ".call" )  || propQName.endsWith ( ".apply" )  )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] maybeRecordExport [RETURN_TYPE] void   Node call [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Node  call  getProp  obj  symbol  ArrayList  currentFunctionStack  String  propQName  qName  NameReferenceGraph  graph  
[BugLab_Variable_Misuse]^graph.defineNameIfNotExists ( symbol.getFirstChild (  ) .getQualifiedName (  ) , isExtern ) .markExposedToCallOrApply (  ) ;^312^313^^^^297^327^graph.defineNameIfNotExists ( getProp.getFirstChild (  ) .getQualifiedName (  ) , isExtern ) .markExposedToCallOrApply (  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] maybeRecordExport [RETURN_TYPE] void   Node call [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Node  call  getProp  obj  symbol  ArrayList  currentFunctionStack  String  propQName  qName  NameReferenceGraph  graph  
[BugLab_Variable_Misuse]^graph.defineNameIfNotExists ( getProp.getFirstChild (  ) .getQualifiedName (  ) , CONSERVATIVE ) .markExposedToCallOrApply (  ) ;^312^313^^^^297^327^graph.defineNameIfNotExists ( getProp.getFirstChild (  ) .getQualifiedName (  ) , isExtern ) .markExposedToCallOrApply (  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] maybeRecordExport [RETURN_TYPE] void   Node call [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Node  call  getProp  obj  symbol  ArrayList  currentFunctionStack  String  propQName  qName  NameReferenceGraph  graph  
[BugLab_Argument_Swapping]^graph.defineNameIfNotExists ( isExtern.getFirstChild (  ) .getQualifiedName (  ) , getProp ) .markExposedToCallOrApply (  ) ;^312^313^^^^297^327^graph.defineNameIfNotExists ( getProp.getFirstChild (  ) .getQualifiedName (  ) , isExtern ) .markExposedToCallOrApply (  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] maybeRecordExport [RETURN_TYPE] void   Node call [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Node  call  getProp  obj  symbol  ArrayList  currentFunctionStack  String  propQName  qName  NameReferenceGraph  graph  
[BugLab_Variable_Misuse]^if  ( !"goog.exportSymbol".equals ( qName )  )  {^316^^^^^301^331^if  ( !"goog.exportSymbol".equals ( propQName )  )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] maybeRecordExport [RETURN_TYPE] void   Node call [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Node  call  getProp  obj  symbol  ArrayList  currentFunctionStack  String  propQName  qName  NameReferenceGraph  graph  
[BugLab_Variable_Misuse]^Node symbol = symbol.getNext (  ) ;^320^^^^^305^335^Node symbol = getProp.getNext (  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] maybeRecordExport [RETURN_TYPE] void   Node call [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Node  call  getProp  obj  symbol  ArrayList  currentFunctionStack  String  propQName  qName  NameReferenceGraph  graph  
[BugLab_Variable_Misuse]^if  ( !NodeUtil.isString ( obj )  )  {^321^^^^^306^336^if  ( !NodeUtil.isString ( symbol )  )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] maybeRecordExport [RETURN_TYPE] void   Node call [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Node  call  getProp  obj  symbol  ArrayList  currentFunctionStack  String  propQName  qName  NameReferenceGraph  graph  
[BugLab_Variable_Misuse]^Node obj = getProp.getNext (  ) ;^325^^^^^310^340^Node obj = symbol.getNext (  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] maybeRecordExport [RETURN_TYPE] void   Node call [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Node  call  getProp  obj  symbol  ArrayList  currentFunctionStack  String  propQName  qName  NameReferenceGraph  graph  
[BugLab_Variable_Misuse]^String qName = symbol.getQualifiedName (  ) ;^326^^^^^311^341^String qName = obj.getQualifiedName (  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] maybeRecordExport [RETURN_TYPE] void   Node call [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Node  call  getProp  obj  symbol  ArrayList  currentFunctionStack  String  propQName  qName  NameReferenceGraph  graph  
[BugLab_Variable_Misuse]^if  ( propQName == null || obj.getNext (  )  != null )  {^328^^^^^313^343^if  ( qName == null || obj.getNext (  )  != null )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] maybeRecordExport [RETURN_TYPE] void   Node call [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Node  call  getProp  obj  symbol  ArrayList  currentFunctionStack  String  propQName  qName  NameReferenceGraph  graph  
[BugLab_Variable_Misuse]^if  ( qName == null || symbol.getNext (  )  != null )  {^328^^^^^313^343^if  ( qName == null || obj.getNext (  )  != null )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] maybeRecordExport [RETURN_TYPE] void   Node call [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Node  call  getProp  obj  symbol  ArrayList  currentFunctionStack  String  propQName  qName  NameReferenceGraph  graph  
[BugLab_Argument_Swapping]^if  ( obj == null || qName.getNext (  )  != null )  {^328^^^^^313^343^if  ( qName == null || obj.getNext (  )  != null )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] maybeRecordExport [RETURN_TYPE] void   Node call [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Node  call  getProp  obj  symbol  ArrayList  currentFunctionStack  String  propQName  qName  NameReferenceGraph  graph  
[BugLab_Wrong_Operator]^if  ( qName == null && obj.getNext (  )  != null )  {^328^^^^^313^343^if  ( qName == null || obj.getNext (  )  != null )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] maybeRecordExport [RETURN_TYPE] void   Node call [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Node  call  getProp  obj  symbol  ArrayList  currentFunctionStack  String  propQName  qName  NameReferenceGraph  graph  
[BugLab_Wrong_Operator]^if  ( qName != null || obj.getNext (  )  != null )  {^328^^^^^313^343^if  ( qName == null || obj.getNext (  )  != null )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] maybeRecordExport [RETURN_TYPE] void   Node call [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Node  call  getProp  obj  symbol  ArrayList  currentFunctionStack  String  propQName  qName  NameReferenceGraph  graph  
[BugLab_Wrong_Operator]^if  ( qName == null || obj.getNext (  )  == null )  {^328^^^^^313^343^if  ( qName == null || obj.getNext (  )  != null )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] maybeRecordExport [RETURN_TYPE] void   Node call [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Node  call  getProp  obj  symbol  ArrayList  currentFunctionStack  String  propQName  qName  NameReferenceGraph  graph  
[BugLab_Variable_Misuse]^graph.defineNameIfNotExists ( propQName, false ) .markExported (  ) ;^332^^^^^317^347^graph.defineNameIfNotExists ( qName, false ) .markExported (  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] maybeRecordExport [RETURN_TYPE] void   Node call [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Node  call  getProp  obj  symbol  ArrayList  currentFunctionStack  String  propQName  qName  NameReferenceGraph  graph  
[BugLab_Wrong_Literal]^graph.defineNameIfNotExists ( qName, true ) .markExported (  ) ;^332^^^^^317^347^graph.defineNameIfNotExists ( qName, false ) .markExported (  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] maybeRecordExport [RETURN_TYPE] void   Node call [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Node  call  getProp  obj  symbol  ArrayList  currentFunctionStack  String  propQName  qName  NameReferenceGraph  graph  
[BugLab_Wrong_Operator]^return v != null || v.isLocal (  ) ;^343^^^^^338^346^return v != null && v.isLocal (  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] isLocalNameReference [RETURN_TYPE] boolean   NodeTraversal t Node n [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Var  v  Node  n  ArrayList  currentFunctionStack  NameReferenceGraph  graph  
[BugLab_Wrong_Operator]^return v == null && v.isLocal (  ) ;^343^^^^^338^346^return v != null && v.isLocal (  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] isLocalNameReference [RETURN_TYPE] boolean   NodeTraversal t Node n [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Var  v  Node  n  ArrayList  currentFunctionStack  NameReferenceGraph  graph  
[BugLab_Argument_Swapping]^Var v = n.getScope (  ) .getVar ( t.getString (  )  ) ;^342^^^^^338^346^Var v = t.getScope (  ) .getVar ( n.getString (  )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] isLocalNameReference [RETURN_TYPE] boolean   NodeTraversal t Node n [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Var  v  Node  n  ArrayList  currentFunctionStack  NameReferenceGraph  graph  
[BugLab_Wrong_Literal]^return true;^345^^^^^338^346^return false;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] isLocalNameReference [RETURN_TYPE] boolean   NodeTraversal t Node n [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Var  v  Node  n  ArrayList  currentFunctionStack  NameReferenceGraph  graph  
[BugLab_Wrong_Operator]^Preconditions.checkArgument ( NodeUtil.isName ( n )  && NodeUtil.isGetProp ( n )  ) ;^352^^^^^351^362^Preconditions.checkArgument ( NodeUtil.isName ( n )  || NodeUtil.isGetProp ( n )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] isStaticNameReference [RETURN_TYPE] boolean   Node n Scope scope [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Scope  scope  Node  n  ArrayList  currentFunctionStack  String  qName  NameReferenceGraph  graph  
[BugLab_Wrong_Literal]^return false;^354^^^^^351^362^return true;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] isStaticNameReference [RETURN_TYPE] boolean   Node n Scope scope [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Scope  scope  Node  n  ArrayList  currentFunctionStack  String  qName  NameReferenceGraph  graph  
[BugLab_Wrong_Operator]^if  ( qName != null )  {^357^^^^^351^362^if  ( qName == null )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] isStaticNameReference [RETURN_TYPE] boolean   Node n Scope scope [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Scope  scope  Node  n  ArrayList  currentFunctionStack  String  qName  NameReferenceGraph  graph  
[BugLab_Wrong_Literal]^return true;^358^^^^^351^362^return false;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] isStaticNameReference [RETURN_TYPE] boolean   Node n Scope scope [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Scope  scope  Node  n  ArrayList  currentFunctionStack  String  qName  NameReferenceGraph  graph  
[BugLab_Argument_Swapping]^return qName.isDeclared ( scope, true ) ;^361^^^^^351^362^return scope.isDeclared ( qName, true ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] isStaticNameReference [RETURN_TYPE] boolean   Node n Scope scope [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Scope  scope  Node  n  ArrayList  currentFunctionStack  String  qName  NameReferenceGraph  graph  
[BugLab_Wrong_Literal]^return scope.isDeclared ( qName, false ) ;^361^^^^^351^362^return scope.isDeclared ( qName, true ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] isStaticNameReference [RETURN_TYPE] boolean   Node n Scope scope [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Scope  scope  Node  n  ArrayList  currentFunctionStack  String  qName  NameReferenceGraph  graph  
[BugLab_Wrong_Literal]^return true;^369^^^^^367^376^return false;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] isPrototypeNameReference [RETURN_TYPE] boolean   Node n [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  Node  n  ArrayList  currentFunctionStack  NameReferenceGraph  graph  
[BugLab_Wrong_Operator]^if  ( type.isUnknownType (  )  && type.isUnionType (  )  )  {^372^^^^^367^376^if  ( type.isUnknownType (  )  || type.isUnionType (  )  )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] isPrototypeNameReference [RETURN_TYPE] boolean   Node n [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  Node  n  ArrayList  currentFunctionStack  NameReferenceGraph  graph  
[BugLab_Wrong_Literal]^return true;^373^^^^^367^376^return false;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] isPrototypeNameReference [RETURN_TYPE] boolean   Node n [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  Node  n  ArrayList  currentFunctionStack  NameReferenceGraph  graph  
[BugLab_Wrong_Operator]^return  ( type instanceof InstanceObjectType && type.autoboxesTo (  )  != null ) ;^375^^^^^367^376^return  ( type instanceof InstanceObjectType || type.autoboxesTo (  )  != null ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] isPrototypeNameReference [RETURN_TYPE] boolean   Node n [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  Node  n  ArrayList  currentFunctionStack  NameReferenceGraph  graph  
[BugLab_Wrong_Operator]^return  ( type  |  InstanceObjectType || type.autoboxesTo (  )  != null ) ;^375^^^^^367^376^return  ( type instanceof InstanceObjectType || type.autoboxesTo (  )  != null ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] isPrototypeNameReference [RETURN_TYPE] boolean   Node n [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  Node  n  ArrayList  currentFunctionStack  NameReferenceGraph  graph  
[BugLab_Wrong_Operator]^return  ( type instanceof InstanceObjectType || type.autoboxesTo (  )  == null ) ;^375^^^^^367^376^return  ( type instanceof InstanceObjectType || type.autoboxesTo (  )  != null ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] isPrototypeNameReference [RETURN_TYPE] boolean   Node n [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  Node  n  ArrayList  currentFunctionStack  NameReferenceGraph  graph  
[BugLab_Wrong_Operator]^if  ( getNamedContainingFunction (  )  <= graph.MAIN )  {^380^^^^^378^398^if  ( getNamedContainingFunction (  )  != graph.MAIN )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordStaticNameDefinition [RETURN_TYPE] Name   NodeTraversal t String name JSType type Node n Node parent Node gParent Node rValue [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  n  parent  rValue  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  Name  symbol  
[BugLab_Wrong_Operator]^if  ( type.isFunctionType (  )  || type.isConstructor (  )  )  {^385^^^^^378^398^if  ( type.isFunctionType (  )  && type.isConstructor (  )  )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordStaticNameDefinition [RETURN_TYPE] Name   NodeTraversal t String name JSType type Node n Node parent Node gParent Node rValue [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  n  parent  rValue  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  Name  symbol  
[BugLab_Variable_Misuse]^if  ( NodeUtil.isAssign ( rValue )  )  {^391^^^^^378^398^if  ( NodeUtil.isAssign ( n )  )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordStaticNameDefinition [RETURN_TYPE] Name   NodeTraversal t String name JSType type Node n Node parent Node gParent Node rValue [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  n  parent  rValue  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  Name  symbol  
[BugLab_Variable_Misuse]^symbol.addFunctionDeclaration ( rValue ) ;^394^^^^^378^398^symbol.addFunctionDeclaration ( n ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordStaticNameDefinition [RETURN_TYPE] Name   NodeTraversal t String name JSType type Node n Node parent Node gParent Node rValue [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  n  parent  rValue  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  Name  symbol  
[BugLab_Variable_Misuse]^symbol.addAssignmentDeclaration ( rValue ) ;^392^^^^^378^398^symbol.addAssignmentDeclaration ( n ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordStaticNameDefinition [RETURN_TYPE] Name   NodeTraversal t String name JSType type Node n Node parent Node gParent Node rValue [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  n  parent  rValue  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  Name  symbol  
[BugLab_Variable_Misuse]^Name symbol = graph.defineNameIfNotExists ( name, CONSERVATIVE ) ;^389^^^^^378^398^Name symbol = graph.defineNameIfNotExists ( name, isExtern ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordStaticNameDefinition [RETURN_TYPE] Name   NodeTraversal t String name JSType type Node n Node parent Node gParent Node rValue [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  n  parent  rValue  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  Name  symbol  
[BugLab_Argument_Swapping]^Name symbol = name.defineNameIfNotExists ( graph, isExtern ) ;^389^^^^^378^398^Name symbol = graph.defineNameIfNotExists ( name, isExtern ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordStaticNameDefinition [RETURN_TYPE] Name   NodeTraversal t String name JSType type Node n Node parent Node gParent Node rValue [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  n  parent  rValue  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  Name  symbol  
[BugLab_Argument_Swapping]^Name symbol = graph.defineNameIfNotExists ( isExtern, name ) ;^389^^^^^378^398^Name symbol = graph.defineNameIfNotExists ( name, isExtern ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordStaticNameDefinition [RETURN_TYPE] Name   NodeTraversal t String name JSType type Node n Node parent Node gParent Node rValue [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  n  parent  rValue  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  Name  symbol  
[BugLab_Variable_Misuse]^return recordClassConstructorOrInterface ( rValueame,  ( FunctionType )  type, n, parent, parent.getParent (  ) , rValue ) ;^386^387^^^^378^398^return recordClassConstructorOrInterface ( name,  ( FunctionType )  type, n, parent, parent.getParent (  ) , rValue ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordStaticNameDefinition [RETURN_TYPE] Name   NodeTraversal t String name JSType type Node n Node parent Node gParent Node rValue [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  n  parent  rValue  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  Name  symbol  
[BugLab_Variable_Misuse]^return recordClassConstructorOrInterface ( name,  ( FunctionType )  type, n, rValue, parent.getParent (  ) , rValue ) ;^386^387^^^^378^398^return recordClassConstructorOrInterface ( name,  ( FunctionType )  type, n, parent, parent.getParent (  ) , rValue ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordStaticNameDefinition [RETURN_TYPE] Name   NodeTraversal t String name JSType type Node n Node parent Node gParent Node rValue [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  n  parent  rValue  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  Name  symbol  
[BugLab_Argument_Swapping]^return recordClassConstructorOrInterface ( rValueame,  ( FunctionType )  type, n, parent, parent.getParent (  ) , n ) ;^386^387^^^^378^398^return recordClassConstructorOrInterface ( name,  ( FunctionType )  type, n, parent, parent.getParent (  ) , rValue ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordStaticNameDefinition [RETURN_TYPE] Name   NodeTraversal t String name JSType type Node n Node parent Node gParent Node rValue [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  n  parent  rValue  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  Name  symbol  
[BugLab_Argument_Swapping]^return recordClassConstructorOrInterface ( parentame,  ( FunctionType )  type, n, n, parent.getParent (  ) , rValue ) ;^386^387^^^^378^398^return recordClassConstructorOrInterface ( name,  ( FunctionType )  type, n, parent, parent.getParent (  ) , rValue ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordStaticNameDefinition [RETURN_TYPE] Name   NodeTraversal t String name JSType type Node n Node parent Node gParent Node rValue [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  n  parent  rValue  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  Name  symbol  
[BugLab_Argument_Swapping]^return recordClassConstructorOrInterface ( n,  ( FunctionType )  type, name, parent, parent.getParent (  ) , rValue ) ;^386^387^^^^378^398^return recordClassConstructorOrInterface ( name,  ( FunctionType )  type, n, parent, parent.getParent (  ) , rValue ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordStaticNameDefinition [RETURN_TYPE] Name   NodeTraversal t String name JSType type Node n Node parent Node gParent Node rValue [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  n  parent  rValue  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  Name  symbol  
[BugLab_Variable_Misuse]^name,  ( FunctionType )  type, n, rValue, parent.getParent (  ) , rValue ) ;^387^^^^^378^398^name,  ( FunctionType )  type, n, parent, parent.getParent (  ) , rValue ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordStaticNameDefinition [RETURN_TYPE] Name   NodeTraversal t String name JSType type Node n Node parent Node gParent Node rValue [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  n  parent  rValue  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  Name  symbol  
[BugLab_Variable_Misuse]^return recordClassConstructorOrInterface ( parentame,  ( FunctionType )  type, n, parent, parent.getParent (  ) , rValue ) ;^386^387^^^^378^398^return recordClassConstructorOrInterface ( name,  ( FunctionType )  type, n, parent, parent.getParent (  ) , rValue ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordStaticNameDefinition [RETURN_TYPE] Name   NodeTraversal t String name JSType type Node n Node parent Node gParent Node rValue [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  n  parent  rValue  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  Name  symbol  
[BugLab_Variable_Misuse]^return recordClassConstructorOrInterface ( name,  ( FunctionType )  type, n, parent, parent.getParent (  ) , parent ) ;^386^387^^^^378^398^return recordClassConstructorOrInterface ( name,  ( FunctionType )  type, n, parent, parent.getParent (  ) , rValue ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordStaticNameDefinition [RETURN_TYPE] Name   NodeTraversal t String name JSType type Node n Node parent Node gParent Node rValue [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  n  parent  rValue  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  Name  symbol  
[BugLab_Argument_Swapping]^return recordClassConstructorOrInterface ( name,  ( FunctionType )  type, n, rValue, parent.getParent (  ) , parent ) ;^386^387^^^^378^398^return recordClassConstructorOrInterface ( name,  ( FunctionType )  type, n, parent, parent.getParent (  ) , rValue ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordStaticNameDefinition [RETURN_TYPE] Name   NodeTraversal t String name JSType type Node n Node parent Node gParent Node rValue [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  n  parent  rValue  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  Name  symbol  
[BugLab_Argument_Swapping]^Name symbol = isExtern.defineNameIfNotExists ( name, graph ) ;^389^^^^^378^398^Name symbol = graph.defineNameIfNotExists ( name, isExtern ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordStaticNameDefinition [RETURN_TYPE] Name   NodeTraversal t String name JSType type Node n Node parent Node gParent Node rValue [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  n  parent  rValue  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  Name  symbol  
[BugLab_Argument_Swapping]^return recordClassConstructorOrInterface ( parent,  ( FunctionType )  type, n, name, parent.getParent (  ) , rValue ) ;^386^387^^^^378^398^return recordClassConstructorOrInterface ( name,  ( FunctionType )  type, n, parent, parent.getParent (  ) , rValue ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordStaticNameDefinition [RETURN_TYPE] Name   NodeTraversal t String name JSType type Node n Node parent Node gParent Node rValue [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  NodeTraversal  t  Node  gParent  n  parent  rValue  ArrayList  currentFunctionStack  String  name  NameReferenceGraph  graph  Name  symbol  
[BugLab_Variable_Misuse]^JSType constructor = getType ( NodeUtil.getPrototypeClassName ( parent )  ) ;^407^^^^^406^435^JSType constructor = getType ( NodeUtil.getPrototypeClassName ( qName )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordPrototypePropDefinition [RETURN_TYPE] Name   NodeTraversal t Node qName JSType type Node assign Node parent Node gParent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  constructor  type  NodeTraversal  t  Node  assign  gParent  parent  qName  FunctionType  classType  ArrayList  currentFunctionStack  String  className  qNameStr  NameReferenceGraph  graph  Name  prototypeProp  
[BugLab_Variable_Misuse]^if  ( type instanceof FunctionType && constructor.isConstructor (  )  )  {^411^^^^^406^435^if  ( constructor instanceof FunctionType && constructor.isConstructor (  )  )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordPrototypePropDefinition [RETURN_TYPE] Name   NodeTraversal t Node qName JSType type Node assign Node parent Node gParent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  constructor  type  NodeTraversal  t  Node  assign  gParent  parent  qName  FunctionType  classType  ArrayList  currentFunctionStack  String  className  qNameStr  NameReferenceGraph  graph  Name  prototypeProp  
[BugLab_Wrong_Operator]^if  ( constructor instanceof FunctionType || constructor.isConstructor (  )  )  {^411^^^^^406^435^if  ( constructor instanceof FunctionType && constructor.isConstructor (  )  )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordPrototypePropDefinition [RETURN_TYPE] Name   NodeTraversal t Node qName JSType type Node assign Node parent Node gParent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  constructor  type  NodeTraversal  t  Node  assign  gParent  parent  qName  FunctionType  classType  ArrayList  currentFunctionStack  String  className  qNameStr  NameReferenceGraph  graph  Name  prototypeProp  
[BugLab_Wrong_Operator]^if  ( constructor  |  FunctionType && constructor.isConstructor (  )  )  {^411^^^^^406^435^if  ( constructor instanceof FunctionType && constructor.isConstructor (  )  )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordPrototypePropDefinition [RETURN_TYPE] Name   NodeTraversal t Node qName JSType type Node assign Node parent Node gParent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  constructor  type  NodeTraversal  t  Node  assign  gParent  parent  qName  FunctionType  classType  ArrayList  currentFunctionStack  String  className  qNameStr  NameReferenceGraph  graph  Name  prototypeProp  
[BugLab_Variable_Misuse]^className = NodeUtil.getPrototypeClassName ( parent ) .getQualifiedName (  ) ;^419^^^^^411^420^className = NodeUtil.getPrototypeClassName ( qName ) .getQualifiedName (  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordPrototypePropDefinition [RETURN_TYPE] Name   NodeTraversal t Node qName JSType type Node assign Node parent Node gParent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  constructor  type  NodeTraversal  t  Node  assign  gParent  parent  qName  FunctionType  classType  ArrayList  currentFunctionStack  String  className  qNameStr  NameReferenceGraph  graph  Name  prototypeProp  
[BugLab_Variable_Misuse]^className = NodeUtil.getPrototypeClassName ( parent ) .getQualifiedName (  ) ;^419^^^^^406^435^className = NodeUtil.getPrototypeClassName ( qName ) .getQualifiedName (  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordPrototypePropDefinition [RETURN_TYPE] Name   NodeTraversal t Node qName JSType type Node assign Node parent Node gParent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  constructor  type  NodeTraversal  t  Node  assign  gParent  parent  qName  FunctionType  classType  ArrayList  currentFunctionStack  String  className  qNameStr  NameReferenceGraph  graph  Name  prototypeProp  
[BugLab_Variable_Misuse]^recordClassConstructorOrInterface ( qNameStr, classType, null, null, null, null ) ;^422^423^^^^406^435^recordClassConstructorOrInterface ( className, classType, null, null, null, null ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordPrototypePropDefinition [RETURN_TYPE] Name   NodeTraversal t Node qName JSType type Node assign Node parent Node gParent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  constructor  type  NodeTraversal  t  Node  assign  gParent  parent  qName  FunctionType  classType  ArrayList  currentFunctionStack  String  className  qNameStr  NameReferenceGraph  graph  Name  prototypeProp  
[BugLab_Argument_Swapping]^recordClassConstructorOrInterface ( classType, className, null, null, null, null ) ;^422^423^^^^406^435^recordClassConstructorOrInterface ( className, classType, null, null, null, null ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordPrototypePropDefinition [RETURN_TYPE] Name   NodeTraversal t Node qName JSType type Node assign Node parent Node gParent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  constructor  type  NodeTraversal  t  Node  assign  gParent  parent  qName  FunctionType  classType  ArrayList  currentFunctionStack  String  className  qNameStr  NameReferenceGraph  graph  Name  prototypeProp  
[BugLab_Variable_Misuse]^String parentStr = className + ".prototype." + NodeUtil.getPrototypePropertyName ( qName ) ;^425^426^^^^406^435^String qNameStr = className + ".prototype." + NodeUtil.getPrototypePropertyName ( qName ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordPrototypePropDefinition [RETURN_TYPE] Name   NodeTraversal t Node qName JSType type Node assign Node parent Node gParent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  constructor  type  NodeTraversal  t  Node  assign  gParent  parent  qName  FunctionType  classType  ArrayList  currentFunctionStack  String  className  qNameStr  NameReferenceGraph  graph  Name  prototypeProp  
[BugLab_Argument_Swapping]^String classNameStr = qName + ".prototype." + NodeUtil.getPrototypePropertyName ( qName ) ;^425^426^^^^406^435^String qNameStr = className + ".prototype." + NodeUtil.getPrototypePropertyName ( qName ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordPrototypePropDefinition [RETURN_TYPE] Name   NodeTraversal t Node qName JSType type Node assign Node parent Node gParent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  constructor  type  NodeTraversal  t  Node  assign  gParent  parent  qName  FunctionType  classType  ArrayList  currentFunctionStack  String  className  qNameStr  NameReferenceGraph  graph  Name  prototypeProp  
[BugLab_Variable_Misuse]^NodeUtil.getPrototypePropertyName ( parent ) ;^426^^^^^406^435^NodeUtil.getPrototypePropertyName ( qName ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordPrototypePropDefinition [RETURN_TYPE] Name   NodeTraversal t Node qName JSType type Node assign Node parent Node gParent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  constructor  type  NodeTraversal  t  Node  assign  gParent  parent  qName  FunctionType  classType  ArrayList  currentFunctionStack  String  className  qNameStr  NameReferenceGraph  graph  Name  prototypeProp  
[BugLab_Variable_Misuse]^Name prototypeProp = graph.defineNameIfNotExists ( className, isExtern ) ;^427^^^^^406^435^Name prototypeProp = graph.defineNameIfNotExists ( qNameStr, isExtern ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordPrototypePropDefinition [RETURN_TYPE] Name   NodeTraversal t Node qName JSType type Node assign Node parent Node gParent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  constructor  type  NodeTraversal  t  Node  assign  gParent  parent  qName  FunctionType  classType  ArrayList  currentFunctionStack  String  className  qNameStr  NameReferenceGraph  graph  Name  prototypeProp  
[BugLab_Variable_Misuse]^Name prototypeProp = graph.defineNameIfNotExists ( qNameStr, CONSERVATIVE ) ;^427^^^^^406^435^Name prototypeProp = graph.defineNameIfNotExists ( qNameStr, isExtern ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordPrototypePropDefinition [RETURN_TYPE] Name   NodeTraversal t Node qName JSType type Node assign Node parent Node gParent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  constructor  type  NodeTraversal  t  Node  assign  gParent  parent  qName  FunctionType  classType  ArrayList  currentFunctionStack  String  className  qNameStr  NameReferenceGraph  graph  Name  prototypeProp  
[BugLab_Argument_Swapping]^Name prototypeProp = graph.defineNameIfNotExists ( isExtern, qNameStr ) ;^427^^^^^406^435^Name prototypeProp = graph.defineNameIfNotExists ( qNameStr, isExtern ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordPrototypePropDefinition [RETURN_TYPE] Name   NodeTraversal t Node qName JSType type Node assign Node parent Node gParent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  constructor  type  NodeTraversal  t  Node  assign  gParent  parent  qName  FunctionType  classType  ArrayList  currentFunctionStack  String  className  qNameStr  NameReferenceGraph  graph  Name  prototypeProp  
[BugLab_Argument_Swapping]^Name prototypeProp = isExtern.defineNameIfNotExists ( qNameStr, graph ) ;^427^^^^^406^435^Name prototypeProp = graph.defineNameIfNotExists ( qNameStr, isExtern ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordPrototypePropDefinition [RETURN_TYPE] Name   NodeTraversal t Node qName JSType type Node assign Node parent Node gParent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  constructor  type  NodeTraversal  t  Node  assign  gParent  parent  qName  FunctionType  classType  ArrayList  currentFunctionStack  String  className  qNameStr  NameReferenceGraph  graph  Name  prototypeProp  
[BugLab_Argument_Swapping]^Name prototypeProp = qNameStr.defineNameIfNotExists ( graph, isExtern ) ;^427^^^^^406^435^Name prototypeProp = graph.defineNameIfNotExists ( qNameStr, isExtern ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordPrototypePropDefinition [RETURN_TYPE] Name   NodeTraversal t Node qName JSType type Node assign Node parent Node gParent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  constructor  type  NodeTraversal  t  Node  assign  gParent  parent  qName  FunctionType  classType  ArrayList  currentFunctionStack  String  className  qNameStr  NameReferenceGraph  graph  Name  prototypeProp  
[BugLab_Argument_Swapping]^Preconditions.checkNotNull ( qNameStr, prototypeProp + " should be in the name graph as a node." ) ;^428^429^^^^406^435^Preconditions.checkNotNull ( prototypeProp, qNameStr + " should be in the name graph as a node." ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordPrototypePropDefinition [RETURN_TYPE] Name   NodeTraversal t Node qName JSType type Node assign Node parent Node gParent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  constructor  type  NodeTraversal  t  Node  assign  gParent  parent  qName  FunctionType  classType  ArrayList  currentFunctionStack  String  className  qNameStr  NameReferenceGraph  graph  Name  prototypeProp  
[BugLab_Wrong_Operator]^Preconditions.checkNotNull ( prototypeProp, qNameStr   instanceof   " should be in the name graph as a node." ) ;^428^429^^^^406^435^Preconditions.checkNotNull ( prototypeProp, qNameStr + " should be in the name graph as a node." ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordPrototypePropDefinition [RETURN_TYPE] Name   NodeTraversal t Node qName JSType type Node assign Node parent Node gParent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  constructor  type  NodeTraversal  t  Node  assign  gParent  parent  qName  FunctionType  classType  ArrayList  currentFunctionStack  String  className  qNameStr  NameReferenceGraph  graph  Name  prototypeProp  
[BugLab_Variable_Misuse]^if  ( qName != null )  {^430^^^^^406^435^if  ( assign != null )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordPrototypePropDefinition [RETURN_TYPE] Name   NodeTraversal t Node qName JSType type Node assign Node parent Node gParent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  constructor  type  NodeTraversal  t  Node  assign  gParent  parent  qName  FunctionType  classType  ArrayList  currentFunctionStack  String  className  qNameStr  NameReferenceGraph  graph  Name  prototypeProp  
[BugLab_Wrong_Operator]^if  ( assign == null )  {^430^^^^^406^435^if  ( assign != null )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordPrototypePropDefinition [RETURN_TYPE] Name   NodeTraversal t Node qName JSType type Node assign Node parent Node gParent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  constructor  type  NodeTraversal  t  Node  assign  gParent  parent  qName  FunctionType  classType  ArrayList  currentFunctionStack  String  className  qNameStr  NameReferenceGraph  graph  Name  prototypeProp  
[BugLab_Variable_Misuse]^prototypeProp.setType ( constructor ) ;^433^^^^^406^435^prototypeProp.setType ( type ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordPrototypePropDefinition [RETURN_TYPE] Name   NodeTraversal t Node qName JSType type Node assign Node parent Node gParent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  constructor  type  NodeTraversal  t  Node  assign  gParent  parent  qName  FunctionType  classType  ArrayList  currentFunctionStack  String  className  qNameStr  NameReferenceGraph  graph  Name  prototypeProp  
[BugLab_Variable_Misuse]^if  ( isExterparent )  {^439^^^^^437^449^if  ( isExtern )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordStaticNameUse [RETURN_TYPE] Reference   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Reference  reference  Node  n  parent  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[BugLab_Variable_Misuse]^if  ( CONSERVATIVE )  {^439^^^^^437^449^if  ( isExtern )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordStaticNameUse [RETURN_TYPE] Reference   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Reference  reference  Node  n  parent  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[BugLab_Argument_Swapping]^Reference reference = parentew Reference ( n, n ) ;^443^^^^^437^449^Reference reference = new Reference ( n, parent ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordStaticNameUse [RETURN_TYPE] Reference   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Reference  reference  Node  n  parent  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[BugLab_Variable_Misuse]^Reference reference = new Reference ( n, n ) ;^443^^^^^437^449^Reference reference = new Reference ( n, parent ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordStaticNameUse [RETURN_TYPE] Reference   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Reference  reference  Node  n  parent  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[BugLab_Variable_Misuse]^Name parentame = graph.defineNameIfNotExists ( n.getQualifiedName (  ) , isExtern ) ;^444^^^^^437^449^Name name = graph.defineNameIfNotExists ( n.getQualifiedName (  ) , isExtern ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordStaticNameUse [RETURN_TYPE] Reference   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Reference  reference  Node  n  parent  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[BugLab_Variable_Misuse]^Name name = graph.defineNameIfNotExists ( n.getQualifiedName (  ) , CONSERVATIVE ) ;^444^^^^^437^449^Name name = graph.defineNameIfNotExists ( n.getQualifiedName (  ) , isExtern ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordStaticNameUse [RETURN_TYPE] Reference   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Reference  reference  Node  n  parent  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[BugLab_Argument_Swapping]^Name graphame = n.defineNameIfNotExists ( n.getQualifiedName (  ) , isExtern ) ;^444^^^^^437^449^Name name = graph.defineNameIfNotExists ( n.getQualifiedName (  ) , isExtern ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordStaticNameUse [RETURN_TYPE] Reference   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Reference  reference  Node  n  parent  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[BugLab_Argument_Swapping]^Name name = isExtern.defineNameIfNotExists ( n.getQualifiedName (  ) , graph ) ;^444^^^^^437^449^Name name = graph.defineNameIfNotExists ( n.getQualifiedName (  ) , isExtern ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordStaticNameUse [RETURN_TYPE] Reference   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Reference  reference  Node  n  parent  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[BugLab_Argument_Swapping]^Name isExtername = graph.defineNameIfNotExists ( n.getQualifiedName (  ) , n ) ;^444^^^^^437^449^Name name = graph.defineNameIfNotExists ( n.getQualifiedName (  ) , isExtern ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordStaticNameUse [RETURN_TYPE] Reference   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Reference  reference  Node  n  parent  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[BugLab_Variable_Misuse]^name.setType ( getType ( parent )  ) ;^445^^^^^437^449^name.setType ( getType ( n )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordStaticNameUse [RETURN_TYPE] Reference   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Reference  reference  Node  n  parent  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[BugLab_Argument_Swapping]^graph.connect ( getNamedContainingFunction (  ) , name, reference ) ;^446^^^^^437^449^graph.connect ( getNamedContainingFunction (  ) , reference, name ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordStaticNameUse [RETURN_TYPE] Reference   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Reference  reference  Node  n  parent  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[BugLab_Variable_Misuse]^Reference reference = parentew Reference ( n, parent ) ;^443^^^^^437^449^Reference reference = new Reference ( n, parent ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordStaticNameUse [RETURN_TYPE] Reference   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Reference  reference  Node  n  parent  ArrayList  currentFunctionStack  NameReferenceGraph  graph  Name  name  
[BugLab_Variable_Misuse]^Preconditions.checkArgument ( NodeUtil.isGetProp ( parent )  ) ;^453^^^^^452^480^Preconditions.checkArgument ( NodeUtil.isGetProp ( n )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordPrototypePropUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  ObjectType  objType  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  boxedType  instanceType  NodeTraversal  t  Reference  ref  Node  instance  n  parent  FunctionType  constructor  ArrayList  currentFunctionStack  String  propName  NameReferenceGraph  graph  
[BugLab_Variable_Misuse]^Node instance = parent.getFirstChild (  ) ;^454^^^^^452^480^Node instance = n.getFirstChild (  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordPrototypePropUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  ObjectType  objType  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  boxedType  instanceType  NodeTraversal  t  Reference  ref  Node  instance  n  parent  FunctionType  constructor  ArrayList  currentFunctionStack  String  propName  NameReferenceGraph  graph  
[BugLab_Variable_Misuse]^JSType parentType = getType ( instance ) ;^455^^^^^452^480^JSType instanceType = getType ( instance ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordPrototypePropUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  ObjectType  objType  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  boxedType  instanceType  NodeTraversal  t  Reference  ref  Node  instance  n  parent  FunctionType  constructor  ArrayList  currentFunctionStack  String  propName  NameReferenceGraph  graph  
[BugLab_Variable_Misuse]^JSType boxedType = boxedType.autoboxesTo (  ) ;^456^^^^^452^480^JSType boxedType = instanceType.autoboxesTo (  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordPrototypePropUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  ObjectType  objType  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  boxedType  instanceType  NodeTraversal  t  Reference  ref  Node  instance  n  parent  FunctionType  constructor  ArrayList  currentFunctionStack  String  propName  NameReferenceGraph  graph  
[BugLab_Argument_Swapping]^instanceType = instanceType != null ? boxedType : boxedType;^457^^^^^452^480^instanceType = boxedType != null ? boxedType : instanceType;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordPrototypePropUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  ObjectType  objType  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  boxedType  instanceType  NodeTraversal  t  Reference  ref  Node  instance  n  parent  FunctionType  constructor  ArrayList  currentFunctionStack  String  propName  NameReferenceGraph  graph  
[BugLab_Wrong_Operator]^instanceType = boxedType == null ? boxedType : instanceType;^457^^^^^452^480^instanceType = boxedType != null ? boxedType : instanceType;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordPrototypePropUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  ObjectType  objType  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  boxedType  instanceType  NodeTraversal  t  Reference  ref  Node  instance  n  parent  FunctionType  constructor  ArrayList  currentFunctionStack  String  propName  NameReferenceGraph  graph  
[BugLab_Variable_Misuse]^ObjectType objType = boxedType.toObjectType (  ) ;^460^^^^^452^480^ObjectType objType = instanceType.toObjectType (  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordPrototypePropUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  ObjectType  objType  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  boxedType  instanceType  NodeTraversal  t  Reference  ref  Node  instance  n  parent  FunctionType  constructor  ArrayList  currentFunctionStack  String  propName  NameReferenceGraph  graph  
[BugLab_Wrong_Operator]^Preconditions.checkState ( objType == null ) ;^461^^^^^452^480^Preconditions.checkState ( objType != null ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordPrototypePropUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  ObjectType  objType  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  boxedType  instanceType  NodeTraversal  t  Reference  ref  Node  instance  n  parent  FunctionType  constructor  ArrayList  currentFunctionStack  String  propName  NameReferenceGraph  graph  
[BugLab_Variable_Misuse]^if  ( !isExterparent )  {^463^^^^^452^480^if  ( !isExtern )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordPrototypePropUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  ObjectType  objType  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  boxedType  instanceType  NodeTraversal  t  Reference  ref  Node  instance  n  parent  FunctionType  constructor  ArrayList  currentFunctionStack  String  propName  NameReferenceGraph  graph  
[BugLab_Variable_Misuse]^if  ( !CONSERVATIVE )  {^463^^^^^452^480^if  ( !isExtern )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordPrototypePropUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  ObjectType  objType  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  boxedType  instanceType  NodeTraversal  t  Reference  ref  Node  instance  n  parent  FunctionType  constructor  ArrayList  currentFunctionStack  String  propName  NameReferenceGraph  graph  
[BugLab_Variable_Misuse]^if  ( constructor != parentull )  {^468^^^^^452^480^if  ( constructor != null )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordPrototypePropUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  ObjectType  objType  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  boxedType  instanceType  NodeTraversal  t  Reference  ref  Node  instance  n  parent  FunctionType  constructor  ArrayList  currentFunctionStack  String  propName  NameReferenceGraph  graph  
[BugLab_Wrong_Operator]^if  ( constructor == null )  {^468^^^^^452^480^if  ( constructor != null )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordPrototypePropUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  ObjectType  objType  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  boxedType  instanceType  NodeTraversal  t  Reference  ref  Node  instance  n  parent  FunctionType  constructor  ArrayList  currentFunctionStack  String  propName  NameReferenceGraph  graph  
[BugLab_Variable_Misuse]^recordUnknownUse ( t, instance, parent ) ;^477^^^^^468^478^recordUnknownUse ( t, n, parent ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordPrototypePropUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  ObjectType  objType  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  boxedType  instanceType  NodeTraversal  t  Reference  ref  Node  instance  n  parent  FunctionType  constructor  ArrayList  currentFunctionStack  String  propName  NameReferenceGraph  graph  
[BugLab_Variable_Misuse]^recordUnknownUse ( t, n, instance ) ;^477^^^^^468^478^recordUnknownUse ( t, n, parent ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordPrototypePropUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  ObjectType  objType  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  boxedType  instanceType  NodeTraversal  t  Reference  ref  Node  instance  n  parent  FunctionType  constructor  ArrayList  currentFunctionStack  String  propName  NameReferenceGraph  graph  
[BugLab_Argument_Swapping]^recordUnknownUse ( parent, n, t ) ;^477^^^^^468^478^recordUnknownUse ( t, n, parent ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordPrototypePropUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  ObjectType  objType  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  boxedType  instanceType  NodeTraversal  t  Reference  ref  Node  instance  n  parent  FunctionType  constructor  ArrayList  currentFunctionStack  String  propName  NameReferenceGraph  graph  
[BugLab_Argument_Swapping]^recordUnknownUse ( n, t, parent ) ;^477^^^^^468^478^recordUnknownUse ( t, n, parent ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordPrototypePropUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  ObjectType  objType  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  boxedType  instanceType  NodeTraversal  t  Reference  ref  Node  instance  n  parent  FunctionType  constructor  ArrayList  currentFunctionStack  String  propName  NameReferenceGraph  graph  
[BugLab_Argument_Swapping]^recordSuperClassPrototypePropUse ( propName, constructor, ref ) ;^471^^^^^452^480^recordSuperClassPrototypePropUse ( constructor, propName, ref ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordPrototypePropUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  ObjectType  objType  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  boxedType  instanceType  NodeTraversal  t  Reference  ref  Node  instance  n  parent  FunctionType  constructor  ArrayList  currentFunctionStack  String  propName  NameReferenceGraph  graph  
[BugLab_Argument_Swapping]^recordSuperClassPrototypePropUse ( constructor, ref, propName ) ;^471^^^^^452^480^recordSuperClassPrototypePropUse ( constructor, propName, ref ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordPrototypePropUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  ObjectType  objType  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  boxedType  instanceType  NodeTraversal  t  Reference  ref  Node  instance  n  parent  FunctionType  constructor  ArrayList  currentFunctionStack  String  propName  NameReferenceGraph  graph  
[BugLab_Variable_Misuse]^String propName = parent.getLastChild (  ) .getString (  ) ;^469^^^^^452^480^String propName = n.getLastChild (  ) .getString (  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordPrototypePropUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  ObjectType  objType  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  boxedType  instanceType  NodeTraversal  t  Reference  ref  Node  instance  n  parent  FunctionType  constructor  ArrayList  currentFunctionStack  String  propName  NameReferenceGraph  graph  
[BugLab_Argument_Swapping]^recordSuperClassPrototypePropUse ( ref, propName, constructor ) ;^471^^^^^452^480^recordSuperClassPrototypePropUse ( constructor, propName, ref ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordPrototypePropUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  ObjectType  objType  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  boxedType  instanceType  NodeTraversal  t  Reference  ref  Node  instance  n  parent  FunctionType  constructor  ArrayList  currentFunctionStack  String  propName  NameReferenceGraph  graph  
[BugLab_Argument_Swapping]^recordSubclassPrototypePropUse ( ref, propName, constructor ) ;^475^^^^^452^480^recordSubclassPrototypePropUse ( constructor, propName, ref ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordPrototypePropUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  ObjectType  objType  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  boxedType  instanceType  NodeTraversal  t  Reference  ref  Node  instance  n  parent  FunctionType  constructor  ArrayList  currentFunctionStack  String  propName  NameReferenceGraph  graph  
[BugLab_Argument_Swapping]^recordSubclassPrototypePropUse ( constructor, ref, propName ) ;^475^^^^^452^480^recordSubclassPrototypePropUse ( constructor, propName, ref ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordPrototypePropUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  ObjectType  objType  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  boxedType  instanceType  NodeTraversal  t  Reference  ref  Node  instance  n  parent  FunctionType  constructor  ArrayList  currentFunctionStack  String  propName  NameReferenceGraph  graph  
[BugLab_Variable_Misuse]^Reference ref = new Reference ( n, instance ) ;^465^^^^^452^480^Reference ref = new Reference ( n, parent ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordPrototypePropUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  ObjectType  objType  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  boxedType  instanceType  NodeTraversal  t  Reference  ref  Node  instance  n  parent  FunctionType  constructor  ArrayList  currentFunctionStack  String  propName  NameReferenceGraph  graph  
[BugLab_Argument_Swapping]^Reference ref = parentew Reference ( n, n ) ;^465^^^^^452^480^Reference ref = new Reference ( n, parent ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordPrototypePropUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  ObjectType  objType  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  boxedType  instanceType  NodeTraversal  t  Reference  ref  Node  instance  n  parent  FunctionType  constructor  ArrayList  currentFunctionStack  String  propName  NameReferenceGraph  graph  
[BugLab_Variable_Misuse]^Reference ref = parentew Reference ( n, parent ) ;^465^^^^^452^480^Reference ref = new Reference ( n, parent ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordPrototypePropUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  ObjectType  objType  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  boxedType  instanceType  NodeTraversal  t  Reference  ref  Node  instance  n  parent  FunctionType  constructor  ArrayList  currentFunctionStack  String  propName  NameReferenceGraph  graph  
[BugLab_Variable_Misuse]^Reference ref = new Reference ( n, n ) ;^465^^^^^452^480^Reference ref = new Reference ( n, parent ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordPrototypePropUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  ObjectType  objType  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  boxedType  instanceType  NodeTraversal  t  Reference  ref  Node  instance  n  parent  FunctionType  constructor  ArrayList  currentFunctionStack  String  propName  NameReferenceGraph  graph  
[BugLab_Variable_Misuse]^recordUnknownUse ( t, instance, parent ) ;^477^^^^^452^480^recordUnknownUse ( t, n, parent ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordPrototypePropUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  ObjectType  objType  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  boxedType  instanceType  NodeTraversal  t  Reference  ref  Node  instance  n  parent  FunctionType  constructor  ArrayList  currentFunctionStack  String  propName  NameReferenceGraph  graph  
[BugLab_Variable_Misuse]^recordUnknownUse ( t, n, instance ) ;^477^^^^^452^480^recordUnknownUse ( t, n, parent ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordPrototypePropUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  ObjectType  objType  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  boxedType  instanceType  NodeTraversal  t  Reference  ref  Node  instance  n  parent  FunctionType  constructor  ArrayList  currentFunctionStack  String  propName  NameReferenceGraph  graph  
[BugLab_Argument_Swapping]^recordUnknownUse ( n, t, parent ) ;^477^^^^^452^480^recordUnknownUse ( t, n, parent ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordPrototypePropUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  ObjectType  objType  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  boxedType  instanceType  NodeTraversal  t  Reference  ref  Node  instance  n  parent  FunctionType  constructor  ArrayList  currentFunctionStack  String  propName  NameReferenceGraph  graph  
[BugLab_Argument_Swapping]^recordUnknownUse ( t, parent, n ) ;^477^^^^^452^480^recordUnknownUse ( t, n, parent ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordPrototypePropUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  ObjectType  objType  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  boxedType  instanceType  NodeTraversal  t  Reference  ref  Node  instance  n  parent  FunctionType  constructor  ArrayList  currentFunctionStack  String  propName  NameReferenceGraph  graph  
[BugLab_Argument_Swapping]^recordUnknownUse ( parent, n, t ) ;^477^^^^^452^480^recordUnknownUse ( t, n, parent ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordPrototypePropUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  ObjectType  objType  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  boxedType  instanceType  NodeTraversal  t  Reference  ref  Node  instance  n  parent  FunctionType  constructor  ArrayList  currentFunctionStack  String  propName  NameReferenceGraph  graph  
[BugLab_Variable_Misuse]^recordUnknownUse ( t, parent, parent ) ;^477^^^^^468^478^recordUnknownUse ( t, n, parent ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordPrototypePropUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  ObjectType  objType  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  boxedType  instanceType  NodeTraversal  t  Reference  ref  Node  instance  n  parent  FunctionType  constructor  ArrayList  currentFunctionStack  String  propName  NameReferenceGraph  graph  
[BugLab_Variable_Misuse]^recordUnknownUse ( t, n, n ) ;^477^^^^^468^478^recordUnknownUse ( t, n, parent ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordPrototypePropUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  ObjectType  objType  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  boxedType  instanceType  NodeTraversal  t  Reference  ref  Node  instance  n  parent  FunctionType  constructor  ArrayList  currentFunctionStack  String  propName  NameReferenceGraph  graph  
[BugLab_Argument_Swapping]^recordUnknownUse ( t, parent, n ) ;^477^^^^^468^478^recordUnknownUse ( t, n, parent ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordPrototypePropUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  ObjectType  objType  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  boxedType  instanceType  NodeTraversal  t  Reference  ref  Node  instance  n  parent  FunctionType  constructor  ArrayList  currentFunctionStack  String  propName  NameReferenceGraph  graph  
[BugLab_Argument_Swapping]^recordSubclassPrototypePropUse ( propName, constructor, ref ) ;^475^^^^^452^480^recordSubclassPrototypePropUse ( constructor, propName, ref ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordPrototypePropUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  ObjectType  objType  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  boxedType  instanceType  NodeTraversal  t  Reference  ref  Node  instance  n  parent  FunctionType  constructor  ArrayList  currentFunctionStack  String  propName  NameReferenceGraph  graph  
[BugLab_Variable_Misuse]^Reference ref = instanceew Reference ( n, parent ) ;^465^^^^^452^480^Reference ref = new Reference ( n, parent ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordPrototypePropUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  ObjectType  objType  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  boxedType  instanceType  NodeTraversal  t  Reference  ref  Node  instance  n  parent  FunctionType  constructor  ArrayList  currentFunctionStack  String  propName  NameReferenceGraph  graph  
[BugLab_Variable_Misuse]^recordUnknownUse ( t, parent, parent ) ;^477^^^^^452^480^recordUnknownUse ( t, n, parent ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordPrototypePropUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  ObjectType  objType  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  boxedType  instanceType  NodeTraversal  t  Reference  ref  Node  instance  n  parent  FunctionType  constructor  ArrayList  currentFunctionStack  String  propName  NameReferenceGraph  graph  
[BugLab_Variable_Misuse]^while  ( classType != null )  {^488^^^^^485^498^while  ( superClass != null )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordSuperClassPrototypePropUse [RETURN_TYPE] void   FunctionType classType String prop Reference ref [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Reference  ref  FunctionType  classType  superClass  ArrayList  currentFunctionStack  String  prop  NameReferenceGraph  graph  
[BugLab_Wrong_Operator]^while  ( superClass == null )  {^488^^^^^485^498^while  ( superClass != null )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordSuperClassPrototypePropUse [RETURN_TYPE] void   FunctionType classType String prop Reference ref [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Reference  ref  FunctionType  classType  superClass  ArrayList  currentFunctionStack  String  prop  NameReferenceGraph  graph  
[BugLab_Variable_Misuse]^superClass = classType.getSuperClassConstructor (  ) ;^495^^^^^485^498^superClass = superClass.getSuperClassConstructor (  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordSuperClassPrototypePropUse [RETURN_TYPE] void   FunctionType classType String prop Reference ref [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Reference  ref  FunctionType  classType  superClass  ArrayList  currentFunctionStack  String  prop  NameReferenceGraph  graph  
[BugLab_Variable_Misuse]^graph.connect ( getNamedContainingFunction (  ) , ref, graph.defineNameIfNotExists ( classType.getReferenceName (  )  + ".prototype." + prop, false )  ) ;^490^491^492^^^485^498^graph.connect ( getNamedContainingFunction (  ) , ref, graph.defineNameIfNotExists ( superClass.getReferenceName (  )  + ".prototype." + prop, false )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordSuperClassPrototypePropUse [RETURN_TYPE] void   FunctionType classType String prop Reference ref [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Reference  ref  FunctionType  classType  superClass  ArrayList  currentFunctionStack  String  prop  NameReferenceGraph  graph  
[BugLab_Argument_Swapping]^graph.connect ( getNamedContainingFunction (  ) , superClass, graph.defineNameIfNotExists ( ref.getReferenceName (  )  + ".prototype." + prop, false )  ) ;^490^491^492^^^485^498^graph.connect ( getNamedContainingFunction (  ) , ref, graph.defineNameIfNotExists ( superClass.getReferenceName (  )  + ".prototype." + prop, false )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordSuperClassPrototypePropUse [RETURN_TYPE] void   FunctionType classType String prop Reference ref [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Reference  ref  FunctionType  classType  superClass  ArrayList  currentFunctionStack  String  prop  NameReferenceGraph  graph  
[BugLab_Argument_Swapping]^graph.connect ( getNamedContainingFunction (  ) , ref, graph.defineNameIfNotExists ( prop.getReferenceName (  )  + ".prototype." + superClass, false )  ) ;^490^491^492^^^485^498^graph.connect ( getNamedContainingFunction (  ) , ref, graph.defineNameIfNotExists ( superClass.getReferenceName (  )  + ".prototype." + prop, false )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordSuperClassPrototypePropUse [RETURN_TYPE] void   FunctionType classType String prop Reference ref [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Reference  ref  FunctionType  classType  superClass  ArrayList  currentFunctionStack  String  prop  NameReferenceGraph  graph  
[BugLab_Argument_Swapping]^graph.connect ( getNamedContainingFunction (  ) , graph, ref.defineNameIfNotExists ( superClass.getReferenceName (  )  + ".prototype." + prop, false )  ) ;^490^491^492^^^485^498^graph.connect ( getNamedContainingFunction (  ) , ref, graph.defineNameIfNotExists ( superClass.getReferenceName (  )  + ".prototype." + prop, false )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordSuperClassPrototypePropUse [RETURN_TYPE] void   FunctionType classType String prop Reference ref [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Reference  ref  FunctionType  classType  superClass  ArrayList  currentFunctionStack  String  prop  NameReferenceGraph  graph  
[BugLab_Wrong_Operator]^graph.connect ( getNamedContainingFunction (  <=  ) , ref, graph.defineNameIfNotExists ( superClass.getReferenceName (  )  + ".prototype." + prop, false )  ) ;^490^491^492^^^485^498^graph.connect ( getNamedContainingFunction (  ) , ref, graph.defineNameIfNotExists ( superClass.getReferenceName (  )  + ".prototype." + prop, false )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordSuperClassPrototypePropUse [RETURN_TYPE] void   FunctionType classType String prop Reference ref [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Reference  ref  FunctionType  classType  superClass  ArrayList  currentFunctionStack  String  prop  NameReferenceGraph  graph  
[BugLab_Wrong_Operator]^graph.connect ( getNamedContainingFunction (  !=  ) , ref, graph.defineNameIfNotExists ( superClass.getReferenceName (  )  + ".prototype." + prop, false )  ) ;^490^491^492^^^485^498^graph.connect ( getNamedContainingFunction (  ) , ref, graph.defineNameIfNotExists ( superClass.getReferenceName (  )  + ".prototype." + prop, false )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordSuperClassPrototypePropUse [RETURN_TYPE] void   FunctionType classType String prop Reference ref [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Reference  ref  FunctionType  classType  superClass  ArrayList  currentFunctionStack  String  prop  NameReferenceGraph  graph  
[BugLab_Wrong_Literal]^graph.connect ( getNamedContainingFunction (  ) , ref, graph.defineNameIfNotExists ( superClass.getReferenceName (  )  + ".prototype." + prop, true )  ) ;^490^491^492^^^485^498^graph.connect ( getNamedContainingFunction (  ) , ref, graph.defineNameIfNotExists ( superClass.getReferenceName (  )  + ".prototype." + prop, false )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordSuperClassPrototypePropUse [RETURN_TYPE] void   FunctionType classType String prop Reference ref [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Reference  ref  FunctionType  classType  superClass  ArrayList  currentFunctionStack  String  prop  NameReferenceGraph  graph  
[BugLab_Variable_Misuse]^graph.defineNameIfNotExists ( classType.getReferenceName (  )  + ".prototype." + prop, false )  ) ;^491^492^^^^485^498^graph.defineNameIfNotExists ( superClass.getReferenceName (  )  + ".prototype." + prop, false )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordSuperClassPrototypePropUse [RETURN_TYPE] void   FunctionType classType String prop Reference ref [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Reference  ref  FunctionType  classType  superClass  ArrayList  currentFunctionStack  String  prop  NameReferenceGraph  graph  
[BugLab_Argument_Swapping]^graph.defineNameIfNotExists ( prop.getReferenceName (  )  + ".prototype." + superClass, false )  ) ;^491^492^^^^485^498^graph.defineNameIfNotExists ( superClass.getReferenceName (  )  + ".prototype." + prop, false )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordSuperClassPrototypePropUse [RETURN_TYPE] void   FunctionType classType String prop Reference ref [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Reference  ref  FunctionType  classType  superClass  ArrayList  currentFunctionStack  String  prop  NameReferenceGraph  graph  
[BugLab_Wrong_Operator]^graph.defineNameIfNotExists ( superClass.getReferenceName (  ^  )  + ".prototype." + prop, false )  ) ;^491^492^^^^485^498^graph.defineNameIfNotExists ( superClass.getReferenceName (  )  + ".prototype." + prop, false )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordSuperClassPrototypePropUse [RETURN_TYPE] void   FunctionType classType String prop Reference ref [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Reference  ref  FunctionType  classType  superClass  ArrayList  currentFunctionStack  String  prop  NameReferenceGraph  graph  
[BugLab_Wrong_Operator]^graph.defineNameIfNotExists ( superClass.getReferenceName (  >  )  + ".prototype." + prop, false )  ) ;^491^492^^^^485^498^graph.defineNameIfNotExists ( superClass.getReferenceName (  )  + ".prototype." + prop, false )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordSuperClassPrototypePropUse [RETURN_TYPE] void   FunctionType classType String prop Reference ref [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Reference  ref  FunctionType  classType  superClass  ArrayList  currentFunctionStack  String  prop  NameReferenceGraph  graph  
[BugLab_Wrong_Literal]^graph.defineNameIfNotExists ( superClass.getReferenceName (  )  + ".prototype." + prop, true )  ) ;^491^492^^^^485^498^graph.defineNameIfNotExists ( superClass.getReferenceName (  )  + ".prototype." + prop, false )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordSuperClassPrototypePropUse [RETURN_TYPE] void   FunctionType classType String prop Reference ref [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Reference  ref  FunctionType  classType  superClass  ArrayList  currentFunctionStack  String  prop  NameReferenceGraph  graph  
[BugLab_Variable_Misuse]^if  ( classType.getPrototype (  ) .hasOwnProperty ( prop )  )  {^489^^^^^485^498^if  ( superClass.getPrototype (  ) .hasOwnProperty ( prop )  )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordSuperClassPrototypePropUse [RETURN_TYPE] void   FunctionType classType String prop Reference ref [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Reference  ref  FunctionType  classType  superClass  ArrayList  currentFunctionStack  String  prop  NameReferenceGraph  graph  
[BugLab_Argument_Swapping]^if  ( prop.getPrototype (  ) .hasOwnProperty ( superClass )  )  {^489^^^^^485^498^if  ( superClass.getPrototype (  ) .hasOwnProperty ( prop )  )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordSuperClassPrototypePropUse [RETURN_TYPE] void   FunctionType classType String prop Reference ref [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Reference  ref  FunctionType  classType  superClass  ArrayList  currentFunctionStack  String  prop  NameReferenceGraph  graph  
[BugLab_Argument_Swapping]^graph.connect ( getNamedContainingFunction (  ) , prop, graph.defineNameIfNotExists ( superClass.getReferenceName (  )  + ".prototype." + ref, false )  ) ;^490^491^492^^^485^498^graph.connect ( getNamedContainingFunction (  ) , ref, graph.defineNameIfNotExists ( superClass.getReferenceName (  )  + ".prototype." + prop, false )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordSuperClassPrototypePropUse [RETURN_TYPE] void   FunctionType classType String prop Reference ref [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Reference  ref  FunctionType  classType  superClass  ArrayList  currentFunctionStack  String  prop  NameReferenceGraph  graph  
[BugLab_Argument_Swapping]^graph.connect ( getNamedContainingFunction (  ) , ref, prop.defineNameIfNotExists ( superClass.getReferenceName (  )  + ".prototype." + graph, false )  ) ;^490^491^492^^^485^498^graph.connect ( getNamedContainingFunction (  ) , ref, graph.defineNameIfNotExists ( superClass.getReferenceName (  )  + ".prototype." + prop, false )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordSuperClassPrototypePropUse [RETURN_TYPE] void   FunctionType classType String prop Reference ref [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Reference  ref  FunctionType  classType  superClass  ArrayList  currentFunctionStack  String  prop  NameReferenceGraph  graph  
[BugLab_Wrong_Operator]^graph.connect ( getNamedContainingFunction (  >=  ) , ref, graph.defineNameIfNotExists ( superClass.getReferenceName (  )  + ".prototype." + prop, false )  ) ;^490^491^492^^^485^498^graph.connect ( getNamedContainingFunction (  ) , ref, graph.defineNameIfNotExists ( superClass.getReferenceName (  )  + ".prototype." + prop, false )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordSuperClassPrototypePropUse [RETURN_TYPE] void   FunctionType classType String prop Reference ref [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Reference  ref  FunctionType  classType  superClass  ArrayList  currentFunctionStack  String  prop  NameReferenceGraph  graph  
[BugLab_Wrong_Operator]^graph.connect ( getNamedContainingFunction (  ||  ) , ref, graph.defineNameIfNotExists ( superClass.getReferenceName (  )  + ".prototype." + prop, false )  ) ;^490^491^492^^^485^498^graph.connect ( getNamedContainingFunction (  ) , ref, graph.defineNameIfNotExists ( superClass.getReferenceName (  )  + ".prototype." + prop, false )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordSuperClassPrototypePropUse [RETURN_TYPE] void   FunctionType classType String prop Reference ref [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Reference  ref  FunctionType  classType  superClass  ArrayList  currentFunctionStack  String  prop  NameReferenceGraph  graph  
[BugLab_Wrong_Operator]^graph.defineNameIfNotExists ( superClass.getReferenceName (  <=  )  + ".prototype." + prop, false )  ) ;^491^492^^^^485^498^graph.defineNameIfNotExists ( superClass.getReferenceName (  )  + ".prototype." + prop, false )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordSuperClassPrototypePropUse [RETURN_TYPE] void   FunctionType classType String prop Reference ref [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Reference  ref  FunctionType  classType  superClass  ArrayList  currentFunctionStack  String  prop  NameReferenceGraph  graph  
[BugLab_Wrong_Operator]^graph.defineNameIfNotExists ( superClass.getReferenceName (  >>  )  + ".prototype." + prop, false )  ) ;^491^492^^^^485^498^graph.defineNameIfNotExists ( superClass.getReferenceName (  )  + ".prototype." + prop, false )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordSuperClassPrototypePropUse [RETURN_TYPE] void   FunctionType classType String prop Reference ref [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Reference  ref  FunctionType  classType  superClass  ArrayList  currentFunctionStack  String  prop  NameReferenceGraph  graph  
[BugLab_Wrong_Operator]^graph.connect ( getNamedContainingFunction (   instanceof   ) , ref, graph.defineNameIfNotExists ( superClass.getReferenceName (  )  + ".prototype." + prop, false )  ) ;^490^491^492^^^485^498^graph.connect ( getNamedContainingFunction (  ) , ref, graph.defineNameIfNotExists ( superClass.getReferenceName (  )  + ".prototype." + prop, false )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordSuperClassPrototypePropUse [RETURN_TYPE] void   FunctionType classType String prop Reference ref [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Reference  ref  FunctionType  classType  superClass  ArrayList  currentFunctionStack  String  prop  NameReferenceGraph  graph  
[BugLab_Wrong_Operator]^graph.defineNameIfNotExists ( superClass.getReferenceName (  !=  )  + ".prototype." + prop, false )  ) ;^491^492^^^^485^498^graph.defineNameIfNotExists ( superClass.getReferenceName (  )  + ".prototype." + prop, false )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordSuperClassPrototypePropUse [RETURN_TYPE] void   FunctionType classType String prop Reference ref [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Reference  ref  FunctionType  classType  superClass  ArrayList  currentFunctionStack  String  prop  NameReferenceGraph  graph  
[BugLab_Argument_Swapping]^graph.connect ( getNamedContainingFunction (  ) , ref, superClass.defineNameIfNotExists ( graph.getReferenceName (  )  + ".prototype." + prop, false )  ) ;^490^491^492^^^485^498^graph.connect ( getNamedContainingFunction (  ) , ref, graph.defineNameIfNotExists ( superClass.getReferenceName (  )  + ".prototype." + prop, false )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordSuperClassPrototypePropUse [RETURN_TYPE] void   FunctionType classType String prop Reference ref [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Reference  ref  FunctionType  classType  superClass  ArrayList  currentFunctionStack  String  prop  NameReferenceGraph  graph  
[BugLab_Wrong_Operator]^graph.connect ( getNamedContainingFunction (  &&  ) , ref, graph.defineNameIfNotExists ( superClass.getReferenceName (  )  + ".prototype." + prop, false )  ) ;^490^491^492^^^485^498^graph.connect ( getNamedContainingFunction (  ) , ref, graph.defineNameIfNotExists ( superClass.getReferenceName (  )  + ".prototype." + prop, false )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordSuperClassPrototypePropUse [RETURN_TYPE] void   FunctionType classType String prop Reference ref [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Reference  ref  FunctionType  classType  superClass  ArrayList  currentFunctionStack  String  prop  NameReferenceGraph  graph  
[BugLab_Wrong_Operator]^graph.connect ( getNamedContainingFunction (  ==  ) , ref, graph.defineNameIfNotExists ( superClass.getReferenceName (  )  + ".prototype." + prop, false )  ) ;^490^491^492^^^485^498^graph.connect ( getNamedContainingFunction (  ) , ref, graph.defineNameIfNotExists ( superClass.getReferenceName (  )  + ".prototype." + prop, false )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordSuperClassPrototypePropUse [RETURN_TYPE] void   FunctionType classType String prop Reference ref [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Reference  ref  FunctionType  classType  superClass  ArrayList  currentFunctionStack  String  prop  NameReferenceGraph  graph  
[BugLab_Wrong_Operator]^graph.defineNameIfNotExists ( superClass.getReferenceName (  ||  )  + ".prototype." + prop, false )  ) ;^491^492^^^^485^498^graph.defineNameIfNotExists ( superClass.getReferenceName (  )  + ".prototype." + prop, false )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordSuperClassPrototypePropUse [RETURN_TYPE] void   FunctionType classType String prop Reference ref [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Reference  ref  FunctionType  classType  superClass  ArrayList  currentFunctionStack  String  prop  NameReferenceGraph  graph  
[BugLab_Wrong_Operator]^graph.defineNameIfNotExists ( superClass.getReferenceName (  <<  )  + ".prototype." + prop, false )  ) ;^491^492^^^^485^498^graph.defineNameIfNotExists ( superClass.getReferenceName (  )  + ".prototype." + prop, false )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordSuperClassPrototypePropUse [RETURN_TYPE] void   FunctionType classType String prop Reference ref [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Reference  ref  FunctionType  classType  superClass  ArrayList  currentFunctionStack  String  prop  NameReferenceGraph  graph  
[BugLab_Variable_Misuse]^if  ( subclass.getPrototype (  ) .hasOwnProperty ( prop )  )  {^506^^^^^504^516^if  ( classType.getPrototype (  ) .hasOwnProperty ( prop )  )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordSubclassPrototypePropUse [RETURN_TYPE] void   FunctionType classType String prop Reference ref [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Reference  ref  FunctionType  classType  subclass  ArrayList  currentFunctionStack  String  prop  NameReferenceGraph  graph  
[BugLab_Argument_Swapping]^if  ( prop.getPrototype (  ) .hasOwnProperty ( classType )  )  {^506^^^^^504^516^if  ( classType.getPrototype (  ) .hasOwnProperty ( prop )  )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordSubclassPrototypePropUse [RETURN_TYPE] void   FunctionType classType String prop Reference ref [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Reference  ref  FunctionType  classType  subclass  ArrayList  currentFunctionStack  String  prop  NameReferenceGraph  graph  
[BugLab_Variable_Misuse]^graph.connect ( getNamedContainingFunction (  ) , ref, graph.defineNameIfNotExists ( subclass.getReferenceName (  )  + ".prototype." + prop, false )  ) ;^507^508^509^^^504^516^graph.connect ( getNamedContainingFunction (  ) , ref, graph.defineNameIfNotExists ( classType.getReferenceName (  )  + ".prototype." + prop, false )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordSubclassPrototypePropUse [RETURN_TYPE] void   FunctionType classType String prop Reference ref [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Reference  ref  FunctionType  classType  subclass  ArrayList  currentFunctionStack  String  prop  NameReferenceGraph  graph  
[BugLab_Argument_Swapping]^graph.connect ( getNamedContainingFunction (  ) , classType, graph.defineNameIfNotExists ( ref.getReferenceName (  )  + ".prototype." + prop, false )  ) ;^507^508^509^^^504^516^graph.connect ( getNamedContainingFunction (  ) , ref, graph.defineNameIfNotExists ( classType.getReferenceName (  )  + ".prototype." + prop, false )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordSubclassPrototypePropUse [RETURN_TYPE] void   FunctionType classType String prop Reference ref [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Reference  ref  FunctionType  classType  subclass  ArrayList  currentFunctionStack  String  prop  NameReferenceGraph  graph  
[BugLab_Argument_Swapping]^graph.connect ( getNamedContainingFunction (  ) , prop, graph.defineNameIfNotExists ( classType.getReferenceName (  )  + ".prototype." + ref, false )  ) ;^507^508^509^^^504^516^graph.connect ( getNamedContainingFunction (  ) , ref, graph.defineNameIfNotExists ( classType.getReferenceName (  )  + ".prototype." + prop, false )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordSubclassPrototypePropUse [RETURN_TYPE] void   FunctionType classType String prop Reference ref [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Reference  ref  FunctionType  classType  subclass  ArrayList  currentFunctionStack  String  prop  NameReferenceGraph  graph  
[BugLab_Argument_Swapping]^graph.connect ( getNamedContainingFunction (  ) , ref, prop.defineNameIfNotExists ( classType.getReferenceName (  )  + ".prototype." + graph, false )  ) ;^507^508^509^^^504^516^graph.connect ( getNamedContainingFunction (  ) , ref, graph.defineNameIfNotExists ( classType.getReferenceName (  )  + ".prototype." + prop, false )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordSubclassPrototypePropUse [RETURN_TYPE] void   FunctionType classType String prop Reference ref [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Reference  ref  FunctionType  classType  subclass  ArrayList  currentFunctionStack  String  prop  NameReferenceGraph  graph  
[BugLab_Wrong_Operator]^graph.connect ( getNamedContainingFunction (  >=  ) , ref, graph.defineNameIfNotExists ( classType.getReferenceName (  )  + ".prototype." + prop, false )  ) ;^507^508^509^^^504^516^graph.connect ( getNamedContainingFunction (  ) , ref, graph.defineNameIfNotExists ( classType.getReferenceName (  )  + ".prototype." + prop, false )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordSubclassPrototypePropUse [RETURN_TYPE] void   FunctionType classType String prop Reference ref [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Reference  ref  FunctionType  classType  subclass  ArrayList  currentFunctionStack  String  prop  NameReferenceGraph  graph  
[BugLab_Wrong_Operator]^graph.connect ( getNamedContainingFunction (  <  ) , ref, graph.defineNameIfNotExists ( classType.getReferenceName (  )  + ".prototype." + prop, false )  ) ;^507^508^509^^^504^516^graph.connect ( getNamedContainingFunction (  ) , ref, graph.defineNameIfNotExists ( classType.getReferenceName (  )  + ".prototype." + prop, false )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordSubclassPrototypePropUse [RETURN_TYPE] void   FunctionType classType String prop Reference ref [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Reference  ref  FunctionType  classType  subclass  ArrayList  currentFunctionStack  String  prop  NameReferenceGraph  graph  
[BugLab_Wrong_Literal]^graph.connect ( getNamedContainingFunction (  ) , ref, graph.defineNameIfNotExists ( classType.getReferenceName (  )  + ".prototype." + prop, true )  ) ;^507^508^509^^^504^516^graph.connect ( getNamedContainingFunction (  ) , ref, graph.defineNameIfNotExists ( classType.getReferenceName (  )  + ".prototype." + prop, false )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordSubclassPrototypePropUse [RETURN_TYPE] void   FunctionType classType String prop Reference ref [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Reference  ref  FunctionType  classType  subclass  ArrayList  currentFunctionStack  String  prop  NameReferenceGraph  graph  
[BugLab_Variable_Misuse]^graph.defineNameIfNotExists ( subclass.getReferenceName (  )  + ".prototype." + prop, false )  ) ;^508^509^^^^504^516^graph.defineNameIfNotExists ( classType.getReferenceName (  )  + ".prototype." + prop, false )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordSubclassPrototypePropUse [RETURN_TYPE] void   FunctionType classType String prop Reference ref [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Reference  ref  FunctionType  classType  subclass  ArrayList  currentFunctionStack  String  prop  NameReferenceGraph  graph  
[BugLab_Argument_Swapping]^graph.defineNameIfNotExists ( prop.getReferenceName (  )  + ".prototype." + classType, false )  ) ;^508^509^^^^504^516^graph.defineNameIfNotExists ( classType.getReferenceName (  )  + ".prototype." + prop, false )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordSubclassPrototypePropUse [RETURN_TYPE] void   FunctionType classType String prop Reference ref [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Reference  ref  FunctionType  classType  subclass  ArrayList  currentFunctionStack  String  prop  NameReferenceGraph  graph  
[BugLab_Wrong_Operator]^graph.defineNameIfNotExists ( classType.getReferenceName (  >=  )  + ".prototype." + prop, false )  ) ;^508^509^^^^504^516^graph.defineNameIfNotExists ( classType.getReferenceName (  )  + ".prototype." + prop, false )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordSubclassPrototypePropUse [RETURN_TYPE] void   FunctionType classType String prop Reference ref [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Reference  ref  FunctionType  classType  subclass  ArrayList  currentFunctionStack  String  prop  NameReferenceGraph  graph  
[BugLab_Wrong_Operator]^graph.defineNameIfNotExists ( classType.getReferenceName (  <  )  + ".prototype." + prop, false )  ) ;^508^509^^^^504^516^graph.defineNameIfNotExists ( classType.getReferenceName (  )  + ".prototype." + prop, false )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordSubclassPrototypePropUse [RETURN_TYPE] void   FunctionType classType String prop Reference ref [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Reference  ref  FunctionType  classType  subclass  ArrayList  currentFunctionStack  String  prop  NameReferenceGraph  graph  
[BugLab_Wrong_Literal]^graph.defineNameIfNotExists ( classType.getReferenceName (  )  + ".prototype." + prop, true )  ) ;^508^509^^^^504^516^graph.defineNameIfNotExists ( classType.getReferenceName (  )  + ".prototype." + prop, false )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordSubclassPrototypePropUse [RETURN_TYPE] void   FunctionType classType String prop Reference ref [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Reference  ref  FunctionType  classType  subclass  ArrayList  currentFunctionStack  String  prop  NameReferenceGraph  graph  
[BugLab_Argument_Swapping]^graph.connect ( getNamedContainingFunction (  ) , ref, graph.defineNameIfNotExists ( prop.getReferenceName (  )  + ".prototype." + classType, false )  ) ;^507^508^509^^^504^516^graph.connect ( getNamedContainingFunction (  ) , ref, graph.defineNameIfNotExists ( classType.getReferenceName (  )  + ".prototype." + prop, false )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordSubclassPrototypePropUse [RETURN_TYPE] void   FunctionType classType String prop Reference ref [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Reference  ref  FunctionType  classType  subclass  ArrayList  currentFunctionStack  String  prop  NameReferenceGraph  graph  
[BugLab_Argument_Swapping]^graph.connect ( getNamedContainingFunction (  ) , ref, classType.defineNameIfNotExists ( graph.getReferenceName (  )  + ".prototype." + prop, false )  ) ;^507^508^509^^^504^516^graph.connect ( getNamedContainingFunction (  ) , ref, graph.defineNameIfNotExists ( classType.getReferenceName (  )  + ".prototype." + prop, false )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordSubclassPrototypePropUse [RETURN_TYPE] void   FunctionType classType String prop Reference ref [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Reference  ref  FunctionType  classType  subclass  ArrayList  currentFunctionStack  String  prop  NameReferenceGraph  graph  
[BugLab_Wrong_Operator]^graph.connect ( getNamedContainingFunction (  <=  ) , ref, graph.defineNameIfNotExists ( classType.getReferenceName (  )  + ".prototype." + prop, false )  ) ;^507^508^509^^^504^516^graph.connect ( getNamedContainingFunction (  ) , ref, graph.defineNameIfNotExists ( classType.getReferenceName (  )  + ".prototype." + prop, false )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordSubclassPrototypePropUse [RETURN_TYPE] void   FunctionType classType String prop Reference ref [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Reference  ref  FunctionType  classType  subclass  ArrayList  currentFunctionStack  String  prop  NameReferenceGraph  graph  
[BugLab_Wrong_Operator]^graph.connect ( getNamedContainingFunction (  &  ) , ref, graph.defineNameIfNotExists ( classType.getReferenceName (  )  + ".prototype." + prop, false )  ) ;^507^508^509^^^504^516^graph.connect ( getNamedContainingFunction (  ) , ref, graph.defineNameIfNotExists ( classType.getReferenceName (  )  + ".prototype." + prop, false )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordSubclassPrototypePropUse [RETURN_TYPE] void   FunctionType classType String prop Reference ref [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Reference  ref  FunctionType  classType  subclass  ArrayList  currentFunctionStack  String  prop  NameReferenceGraph  graph  
[BugLab_Wrong_Operator]^graph.defineNameIfNotExists ( classType.getReferenceName (  &  )  + ".prototype." + prop, false )  ) ;^508^509^^^^504^516^graph.defineNameIfNotExists ( classType.getReferenceName (  )  + ".prototype." + prop, false )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordSubclassPrototypePropUse [RETURN_TYPE] void   FunctionType classType String prop Reference ref [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Reference  ref  FunctionType  classType  subclass  ArrayList  currentFunctionStack  String  prop  NameReferenceGraph  graph  
[BugLab_Wrong_Operator]^graph.defineNameIfNotExists ( classType.getReferenceName (  ^  )  + ".prototype." + prop, false )  ) ;^508^509^^^^504^516^graph.defineNameIfNotExists ( classType.getReferenceName (  )  + ".prototype." + prop, false )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordSubclassPrototypePropUse [RETURN_TYPE] void   FunctionType classType String prop Reference ref [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Reference  ref  FunctionType  classType  subclass  ArrayList  currentFunctionStack  String  prop  NameReferenceGraph  graph  
[BugLab_Wrong_Operator]^if  ( classType.getSubTypes (  )  == null )  {^511^^^^^504^516^if  ( classType.getSubTypes (  )  != null )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordSubclassPrototypePropUse [RETURN_TYPE] void   FunctionType classType String prop Reference ref [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Reference  ref  FunctionType  classType  subclass  ArrayList  currentFunctionStack  String  prop  NameReferenceGraph  graph  
[BugLab_Variable_Misuse]^for  ( FunctionType subclass : subclass.getSubTypes (  )  )  {^512^^^^^504^516^for  ( FunctionType subclass : classType.getSubTypes (  )  )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordSubclassPrototypePropUse [RETURN_TYPE] void   FunctionType classType String prop Reference ref [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Reference  ref  FunctionType  classType  subclass  ArrayList  currentFunctionStack  String  prop  NameReferenceGraph  graph  
[BugLab_Variable_Misuse]^recordSubclassPrototypePropUse ( classType, prop, ref ) ;^513^^^^^504^516^recordSubclassPrototypePropUse ( subclass, prop, ref ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordSubclassPrototypePropUse [RETURN_TYPE] void   FunctionType classType String prop Reference ref [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Reference  ref  FunctionType  classType  subclass  ArrayList  currentFunctionStack  String  prop  NameReferenceGraph  graph  
[BugLab_Argument_Swapping]^recordSubclassPrototypePropUse ( prop, subclass, ref ) ;^513^^^^^504^516^recordSubclassPrototypePropUse ( subclass, prop, ref ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordSubclassPrototypePropUse [RETURN_TYPE] void   FunctionType classType String prop Reference ref [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Reference  ref  FunctionType  classType  subclass  ArrayList  currentFunctionStack  String  prop  NameReferenceGraph  graph  
[BugLab_Argument_Swapping]^recordSubclassPrototypePropUse ( subclass, ref, prop ) ;^513^^^^^504^516^recordSubclassPrototypePropUse ( subclass, prop, ref ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordSubclassPrototypePropUse [RETURN_TYPE] void   FunctionType classType String prop Reference ref [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Reference  ref  FunctionType  classType  subclass  ArrayList  currentFunctionStack  String  prop  NameReferenceGraph  graph  
[BugLab_Argument_Swapping]^recordSubclassPrototypePropUse ( ref, prop, subclass ) ;^513^^^^^504^516^recordSubclassPrototypePropUse ( subclass, prop, ref ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordSubclassPrototypePropUse [RETURN_TYPE] void   FunctionType classType String prop Reference ref [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Reference  ref  FunctionType  classType  subclass  ArrayList  currentFunctionStack  String  prop  NameReferenceGraph  graph  
[BugLab_Variable_Misuse]^if  ( subclass.getSubTypes (  )  != null )  {^511^^^^^504^516^if  ( classType.getSubTypes (  )  != null )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordSubclassPrototypePropUse [RETURN_TYPE] void   FunctionType classType String prop Reference ref [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  Reference  ref  FunctionType  classType  subclass  ArrayList  currentFunctionStack  String  prop  NameReferenceGraph  graph  
[BugLab_Variable_Misuse]^if  ( isExterparent )  {^519^^^^^518^529^if  ( isExtern )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordUnknownUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Reference  ref  Node  n  parent  ArrayList  currentFunctionStack  NameReferenceGraph  graph  
[BugLab_Variable_Misuse]^if  ( CONSERVATIVE )  {^519^^^^^518^529^if  ( isExtern )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordUnknownUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Reference  ref  Node  n  parent  ArrayList  currentFunctionStack  NameReferenceGraph  graph  
[BugLab_Argument_Swapping]^Reference ref = parentew Reference ( n, n ) ;^524^^^^^518^529^Reference ref = new Reference ( n, parent ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordUnknownUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Reference  ref  Node  n  parent  ArrayList  currentFunctionStack  NameReferenceGraph  graph  
[BugLab_Variable_Misuse]^Reference ref = parentew Reference ( n, parent ) ;^524^^^^^518^529^Reference ref = new Reference ( n, parent ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordUnknownUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Reference  ref  Node  n  parent  ArrayList  currentFunctionStack  NameReferenceGraph  graph  
[BugLab_Variable_Misuse]^Reference ref = new Reference ( n, n ) ;^524^^^^^518^529^Reference ref = new Reference ( n, parent ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordUnknownUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Reference  ref  Node  n  parent  ArrayList  currentFunctionStack  NameReferenceGraph  graph  
[BugLab_Variable_Misuse]^Preconditions.checkArgument ( NodeUtil.isGetProp ( parent )  ) ;^523^^^^^518^529^Preconditions.checkArgument ( NodeUtil.isGetProp ( n )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordUnknownUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Reference  ref  Node  n  parent  ArrayList  currentFunctionStack  NameReferenceGraph  graph  
[BugLab_Wrong_Literal]^ref.setUnknown ( false ) ;^525^^^^^518^529^ref.setUnknown ( true ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordUnknownUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Reference  ref  Node  n  parent  ArrayList  currentFunctionStack  NameReferenceGraph  graph  
[BugLab_Variable_Misuse]^unknownNameUse.put ( parent.getLastChild (  ) .getString (  ) , new Pair<Name, Reference> ( getNamedContainingFunction (  ) , ref )  ) ;^526^527^^^^518^529^unknownNameUse.put ( n.getLastChild (  ) .getString (  ) , new Pair<Name, Reference> ( getNamedContainingFunction (  ) , ref )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordUnknownUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Reference  ref  Node  n  parent  ArrayList  currentFunctionStack  NameReferenceGraph  graph  
[BugLab_Argument_Swapping]^unknownNameUse.put ( ref.getLastChild (  ) .getString (  ) , new Pair<Name, Reference> ( getNamedContainingFunction (  ) , n )  ) ;^526^527^^^^518^529^unknownNameUse.put ( n.getLastChild (  ) .getString (  ) , new Pair<Name, Reference> ( getNamedContainingFunction (  ) , ref )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordUnknownUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NodeTraversal  t  Reference  ref  Node  n  parent  ArrayList  currentFunctionStack  NameReferenceGraph  graph  
[BugLab_Wrong_Operator]^Preconditions.checkArgument ( type.isConstructor (  )  && type.isInterface (  )  ) ;^538^^^^^535^555^Preconditions.checkArgument ( type.isConstructor (  )  || type.isInterface (  )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordClassConstructorOrInterface [RETURN_TYPE] Name   String name FunctionType type Node n Node parent Node gParent Node rhs [VARIABLES] Multimap  unknownNameUse  ObjectType  prototype  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  FunctionType  type  Node  gParent  n  parent  rhs  ArrayList  currentFunctionStack  String  name  prop  NameReferenceGraph  graph  Name  symbol  
[BugLab_Variable_Misuse]^Name symbol = graph.defineNameIfNotExists ( prop, isExtern ) ;^539^^^^^535^555^Name symbol = graph.defineNameIfNotExists ( name, isExtern ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordClassConstructorOrInterface [RETURN_TYPE] Name   String name FunctionType type Node n Node parent Node gParent Node rhs [VARIABLES] Multimap  unknownNameUse  ObjectType  prototype  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  FunctionType  type  Node  gParent  n  parent  rhs  ArrayList  currentFunctionStack  String  name  prop  NameReferenceGraph  graph  Name  symbol  
[BugLab_Variable_Misuse]^Name symbol = graph.defineNameIfNotExists ( name, CONSERVATIVE ) ;^539^^^^^535^555^Name symbol = graph.defineNameIfNotExists ( name, isExtern ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordClassConstructorOrInterface [RETURN_TYPE] Name   String name FunctionType type Node n Node parent Node gParent Node rhs [VARIABLES] Multimap  unknownNameUse  ObjectType  prototype  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  FunctionType  type  Node  gParent  n  parent  rhs  ArrayList  currentFunctionStack  String  name  prop  NameReferenceGraph  graph  Name  symbol  
[BugLab_Argument_Swapping]^Name symbol = graph.defineNameIfNotExists ( isExtern, name ) ;^539^^^^^535^555^Name symbol = graph.defineNameIfNotExists ( name, isExtern ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordClassConstructorOrInterface [RETURN_TYPE] Name   String name FunctionType type Node n Node parent Node gParent Node rhs [VARIABLES] Multimap  unknownNameUse  ObjectType  prototype  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  FunctionType  type  Node  gParent  n  parent  rhs  ArrayList  currentFunctionStack  String  name  prop  NameReferenceGraph  graph  Name  symbol  
[BugLab_Argument_Swapping]^Name symbol = name.defineNameIfNotExists ( graph, isExtern ) ;^539^^^^^535^555^Name symbol = graph.defineNameIfNotExists ( name, isExtern ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordClassConstructorOrInterface [RETURN_TYPE] Name   String name FunctionType type Node n Node parent Node gParent Node rhs [VARIABLES] Multimap  unknownNameUse  ObjectType  prototype  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  FunctionType  type  Node  gParent  n  parent  rhs  ArrayList  currentFunctionStack  String  name  prop  NameReferenceGraph  graph  Name  symbol  
[BugLab_Variable_Misuse]^if  ( parent != null )  {^540^^^^^535^555^if  ( rhs != null )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordClassConstructorOrInterface [RETURN_TYPE] Name   String name FunctionType type Node n Node parent Node gParent Node rhs [VARIABLES] Multimap  unknownNameUse  ObjectType  prototype  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  FunctionType  type  Node  gParent  n  parent  rhs  ArrayList  currentFunctionStack  String  name  prop  NameReferenceGraph  graph  Name  symbol  
[BugLab_Variable_Misuse]^if  ( rhs != parentull )  {^540^^^^^535^555^if  ( rhs != null )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordClassConstructorOrInterface [RETURN_TYPE] Name   String name FunctionType type Node n Node parent Node gParent Node rhs [VARIABLES] Multimap  unknownNameUse  ObjectType  prototype  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  FunctionType  type  Node  gParent  n  parent  rhs  ArrayList  currentFunctionStack  String  name  prop  NameReferenceGraph  graph  Name  symbol  
[BugLab_Wrong_Operator]^if  ( rhs == null )  {^540^^^^^535^555^if  ( rhs != null )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordClassConstructorOrInterface [RETURN_TYPE] Name   String name FunctionType type Node n Node parent Node gParent Node rhs [VARIABLES] Multimap  unknownNameUse  ObjectType  prototype  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  FunctionType  type  Node  gParent  n  parent  rhs  ArrayList  currentFunctionStack  String  name  prop  NameReferenceGraph  graph  Name  symbol  
[BugLab_Variable_Misuse]^symbol.addFunctionDeclaration ( rhs ) ;^546^^^^^535^555^symbol.addFunctionDeclaration ( n ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordClassConstructorOrInterface [RETURN_TYPE] Name   String name FunctionType type Node n Node parent Node gParent Node rhs [VARIABLES] Multimap  unknownNameUse  ObjectType  prototype  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  FunctionType  type  Node  gParent  n  parent  rhs  ArrayList  currentFunctionStack  String  name  prop  NameReferenceGraph  graph  Name  symbol  
[BugLab_Variable_Misuse]^symbol.addAssignmentDeclaration ( rhs ) ;^544^^^^^535^555^symbol.addAssignmentDeclaration ( n ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordClassConstructorOrInterface [RETURN_TYPE] Name   String name FunctionType type Node n Node parent Node gParent Node rhs [VARIABLES] Multimap  unknownNameUse  ObjectType  prototype  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  FunctionType  type  Node  gParent  n  parent  rhs  ArrayList  currentFunctionStack  String  name  prop  NameReferenceGraph  graph  Name  symbol  
[BugLab_Variable_Misuse]^symbol.setType ( getType ( parent )  ) ;^542^^^^^535^555^symbol.setType ( getType ( rhs )  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordClassConstructorOrInterface [RETURN_TYPE] Name   String name FunctionType type Node n Node parent Node gParent Node rhs [VARIABLES] Multimap  unknownNameUse  ObjectType  prototype  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  FunctionType  type  Node  gParent  n  parent  rhs  ArrayList  currentFunctionStack  String  name  prop  NameReferenceGraph  graph  Name  symbol  
[BugLab_Variable_Misuse]^if  ( NodeUtil.isAssign ( rhs )  )  {^543^^^^^535^555^if  ( NodeUtil.isAssign ( n )  )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordClassConstructorOrInterface [RETURN_TYPE] Name   String name FunctionType type Node n Node parent Node gParent Node rhs [VARIABLES] Multimap  unknownNameUse  ObjectType  prototype  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  FunctionType  type  Node  gParent  n  parent  rhs  ArrayList  currentFunctionStack  String  name  prop  NameReferenceGraph  graph  Name  symbol  
[BugLab_Variable_Misuse]^graph.defineNameIfNotExists ( prop + ".prototype." + prop, isExtern ) ;^551^552^^^^535^555^graph.defineNameIfNotExists ( name + ".prototype." + prop, isExtern ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordClassConstructorOrInterface [RETURN_TYPE] Name   String name FunctionType type Node n Node parent Node gParent Node rhs [VARIABLES] Multimap  unknownNameUse  ObjectType  prototype  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  FunctionType  type  Node  gParent  n  parent  rhs  ArrayList  currentFunctionStack  String  name  prop  NameReferenceGraph  graph  Name  symbol  
[BugLab_Variable_Misuse]^graph.defineNameIfNotExists ( name + ".prototype." + prop, CONSERVATIVE ) ;^551^552^^^^535^555^graph.defineNameIfNotExists ( name + ".prototype." + prop, isExtern ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordClassConstructorOrInterface [RETURN_TYPE] Name   String name FunctionType type Node n Node parent Node gParent Node rhs [VARIABLES] Multimap  unknownNameUse  ObjectType  prototype  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  FunctionType  type  Node  gParent  n  parent  rhs  ArrayList  currentFunctionStack  String  name  prop  NameReferenceGraph  graph  Name  symbol  
[BugLab_Argument_Swapping]^graph.defineNameIfNotExists ( name + ".prototype." + isExtern, prop ) ;^551^552^^^^535^555^graph.defineNameIfNotExists ( name + ".prototype." + prop, isExtern ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] recordClassConstructorOrInterface [RETURN_TYPE] Name   String name FunctionType type Node n Node parent Node gParent Node rhs [VARIABLES] Multimap  unknownNameUse  ObjectType  prototype  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  FunctionType  type  Node  gParent  n  parent  rhs  ArrayList  currentFunctionStack  String  name  prop  NameReferenceGraph  graph  Name  symbol  
[BugLab_Wrong_Operator]^if  ( propName != null )  {^562^^^^^558^572^if  ( propName == null )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] connectUnknowns [RETURN_TYPE] void   [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  ArrayList  currentFunctionStack  Collection  uses  GraphNode  node  String  propName  NameReferenceGraph  graph  Name  name  Pair  use  
[BugLab_Argument_Swapping]^if  ( usess != null )  {^566^^^^^558^572^if  ( uses != null )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] connectUnknowns [RETURN_TYPE] void   [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  ArrayList  currentFunctionStack  Collection  uses  GraphNode  node  String  propName  NameReferenceGraph  graph  Name  name  Pair  use  
[BugLab_Wrong_Operator]^if  ( uses == null )  {^566^^^^^558^572^if  ( uses != null )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] connectUnknowns [RETURN_TYPE] void   [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  ArrayList  currentFunctionStack  Collection  uses  GraphNode  node  String  propName  NameReferenceGraph  graph  Name  name  Pair  use  
[BugLab_Argument_Swapping]^graph.connect ( name.getFirst (  ) , use.getSecond (  ) , use ) ;^568^^^^^558^572^graph.connect ( use.getFirst (  ) , use.getSecond (  ) , name ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] connectUnknowns [RETURN_TYPE] void   [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  ArrayList  currentFunctionStack  Collection  uses  GraphNode  node  String  propName  NameReferenceGraph  graph  Name  name  Pair  use  
[BugLab_Variable_Misuse]^graph.connect ( null.getFirst (  ) , use.getSecond (  ) , name ) ;^568^^^^^558^572^graph.connect ( use.getFirst (  ) , use.getSecond (  ) , name ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] connectUnknowns [RETURN_TYPE] void   [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  ArrayList  currentFunctionStack  Collection  uses  GraphNode  node  String  propName  NameReferenceGraph  graph  Name  name  Pair  use  
[BugLab_Argument_Swapping]^Collection<Pair<Name, Reference>> uses = propName.get ( unknownNameUse ) ;^565^^^^^558^572^Collection<Pair<Name, Reference>> uses = unknownNameUse.get ( propName ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] connectUnknowns [RETURN_TYPE] void   [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  ArrayList  currentFunctionStack  Collection  uses  GraphNode  node  String  propName  NameReferenceGraph  graph  Name  name  Pair  use  
[BugLab_Variable_Misuse]^Name name = null.getValue (  ) ;^560^^^^^558^572^Name name = node.getValue (  ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] connectUnknowns [RETURN_TYPE] void   [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  ArrayList  currentFunctionStack  Collection  uses  GraphNode  node  String  propName  NameReferenceGraph  graph  Name  name  Pair  use  
[BugLab_Variable_Misuse]^graph.connect ( this.getFirst (  ) , use.getSecond (  ) , name ) ;^568^^^^^558^572^graph.connect ( use.getFirst (  ) , use.getSecond (  ) , name ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] connectUnknowns [RETURN_TYPE] void   [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  ArrayList  currentFunctionStack  Collection  uses  GraphNode  node  String  propName  NameReferenceGraph  graph  Name  name  Pair  use  
[BugLab_Wrong_Operator]^if  ( type != null )  {^579^^^^^577^589^if  ( type == null )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] getType [RETURN_TYPE] JSType   Node n [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  Node  n  ArrayList  currentFunctionStack  NameReferenceGraph  graph  
[BugLab_Variable_Misuse]^if  ( isExtern )  {^580^^^^^577^589^if  ( CONSERVATIVE )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] getType [RETURN_TYPE] JSType   Node n [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  JSType  type  Node  n  ArrayList  currentFunctionStack  NameReferenceGraph  graph  
[BugLab_Wrong_Operator]^currentFunctionStack.remove ( currentFunctionStack.size (  )   ^  1 ) ;^606^^^^^605^607^currentFunctionStack.remove ( currentFunctionStack.size (  )  - 1 ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] popContainingFunction [RETURN_TYPE] void   [VARIABLES] ArrayList  currentFunctionStack  Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NameReferenceGraph  graph  
[BugLab_Wrong_Literal]^currentFunctionStack.remove ( currentFunctionStack.size (  )   ) ;^606^^^^^605^607^currentFunctionStack.remove ( currentFunctionStack.size (  )  - 1 ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] popContainingFunction [RETURN_TYPE] void   [VARIABLES] ArrayList  currentFunctionStack  Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  NameReferenceGraph  graph  
[BugLab_Wrong_Operator]^if  ( cf > graph.UNKNOWN )  {^618^^^^^613^625^if  ( cf != graph.UNKNOWN )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] getNamedContainingFunction [RETURN_TYPE] Name   [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  ArrayList  currentFunctionStack  NameReferenceGraph  graph  int  pos  Name  cf  containingFn  
[BugLab_Variable_Misuse]^containingFn = containingFn;^619^^^^^613^625^containingFn = cf;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] getNamedContainingFunction [RETURN_TYPE] Name   [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  ArrayList  currentFunctionStack  NameReferenceGraph  graph  int  pos  Name  cf  containingFn  
[BugLab_Wrong_Operator]^for  ( pos = currentFunctionStack.size (  )   |  1; pos >= 0; pos = pos - 1 )  {^616^^^^^613^625^for  ( pos = currentFunctionStack.size (  )  - 1; pos >= 0; pos = pos - 1 )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] getNamedContainingFunction [RETURN_TYPE] Name   [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  ArrayList  currentFunctionStack  NameReferenceGraph  graph  int  pos  Name  cf  containingFn  
[BugLab_Wrong_Operator]^for  ( pos = currentFunctionStack.size (  )  - 1; pos > 0; pos = pos - 1 )  {^616^^^^^613^625^for  ( pos = currentFunctionStack.size (  )  - 1; pos >= 0; pos = pos - 1 )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] getNamedContainingFunction [RETURN_TYPE] Name   [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  ArrayList  currentFunctionStack  NameReferenceGraph  graph  int  pos  Name  cf  containingFn  
[BugLab_Wrong_Operator]^for  ( pos = currentFunctionStack.size (  )  - 1; pos >= 0; pos = pos  >>  1 )  {^616^^^^^613^625^for  ( pos = currentFunctionStack.size (  )  - 1; pos >= 0; pos = pos - 1 )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] getNamedContainingFunction [RETURN_TYPE] Name   [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  ArrayList  currentFunctionStack  NameReferenceGraph  graph  int  pos  Name  cf  containingFn  
[BugLab_Wrong_Literal]^for  ( pos = currentFunctionStack.size (  )  ; pos >= 0; pos = pos  )  {^616^^^^^613^625^for  ( pos = currentFunctionStack.size (  )  - 1; pos >= 0; pos = pos - 1 )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] getNamedContainingFunction [RETURN_TYPE] Name   [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  ArrayList  currentFunctionStack  NameReferenceGraph  graph  int  pos  Name  cf  containingFn  
[BugLab_Wrong_Literal]^for  ( pos = currentFunctionStack.size (  )  - 1; pos >= 1; pos = pos - 1 )  {^616^^^^^613^625^for  ( pos = currentFunctionStack.size (  )  - 1; pos >= 0; pos = pos - 1 )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] getNamedContainingFunction [RETURN_TYPE] Name   [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  ArrayList  currentFunctionStack  NameReferenceGraph  graph  int  pos  Name  cf  containingFn  
[BugLab_Wrong_Operator]^if  ( cf == graph.UNKNOWN )  {^618^^^^^613^625^if  ( cf != graph.UNKNOWN )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] getNamedContainingFunction [RETURN_TYPE] Name   [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  ArrayList  currentFunctionStack  NameReferenceGraph  graph  int  pos  Name  cf  containingFn  
[BugLab_Argument_Swapping]^Name cf = pos.get ( currentFunctionStack ) ;^617^^^^^613^625^Name cf = currentFunctionStack.get ( pos ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] getNamedContainingFunction [RETURN_TYPE] Name   [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  ArrayList  currentFunctionStack  NameReferenceGraph  graph  int  pos  Name  cf  containingFn  
[BugLab_Wrong_Operator]^for  ( pos = currentFunctionStack.size (  )   &  1; pos >= 0; pos = pos - 1 )  {^616^^^^^613^625^for  ( pos = currentFunctionStack.size (  )  - 1; pos >= 0; pos = pos - 1 )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] getNamedContainingFunction [RETURN_TYPE] Name   [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  ArrayList  currentFunctionStack  NameReferenceGraph  graph  int  pos  Name  cf  containingFn  
[BugLab_Wrong_Literal]^for  ( pos = currentFunctionStack.size (  )  - pos; pos >= 0; pos = pos - pos )  {^616^^^^^613^625^for  ( pos = currentFunctionStack.size (  )  - 1; pos >= 0; pos = pos - 1 )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] getNamedContainingFunction [RETURN_TYPE] Name   [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  ArrayList  currentFunctionStack  NameReferenceGraph  graph  int  pos  Name  cf  containingFn  
[BugLab_Wrong_Operator]^for  ( pos = currentFunctionStack.size (  )  - 1; pos >= 0; pos = pos  <  1 )  {^616^^^^^613^625^for  ( pos = currentFunctionStack.size (  )  - 1; pos >= 0; pos = pos - 1 )  {^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] getNamedContainingFunction [RETURN_TYPE] Name   [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  ArrayList  currentFunctionStack  NameReferenceGraph  graph  int  pos  Name  cf  containingFn  
[BugLab_Variable_Misuse]^Name cf = 3.get ( pos ) ;^617^^^^^613^625^Name cf = currentFunctionStack.get ( pos ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] getNamedContainingFunction [RETURN_TYPE] Name   [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  ArrayList  currentFunctionStack  NameReferenceGraph  graph  int  pos  Name  cf  containingFn  
[BugLab_Variable_Misuse]^Preconditions.checkNotNull ( cf ) ;^623^^^^^613^625^Preconditions.checkNotNull ( containingFn ) ;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] getNamedContainingFunction [RETURN_TYPE] Name   [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  ArrayList  currentFunctionStack  NameReferenceGraph  graph  int  pos  Name  cf  containingFn  
[BugLab_Variable_Misuse]^return cf;^624^^^^^613^625^return containingFn;^[CLASS] NameReferenceGraphConstruction Traversal  [METHOD] getNamedContainingFunction [RETURN_TYPE] Name   [VARIABLES] Multimap  unknownNameUse  AbstractCompiler  compiler  boolean  CONSERVATIVE  isExtern  ArrayList  currentFunctionStack  NameReferenceGraph  graph  int  pos  Name  cf  containingFn  
[BugLab_Wrong_Operator]^if  ( name != null )  {^127^^^^^112^142^if  ( name == null )  {^[CLASS] Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  
[BugLab_Variable_Misuse]^if  ( NodeUtil.isAssign ( root )  && NodeUtil.isPrototypeProperty ( parent.getFirstChild (  )  )  )  {^142^143^^^^127^157^if  ( NodeUtil.isAssign ( parent )  && NodeUtil.isPrototypeProperty ( parent.getFirstChild (  )  )  )  {^[CLASS] Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  
[BugLab_Wrong_Operator]^if  ( NodeUtil.isAssign ( parent )  || NodeUtil.isPrototypeProperty ( parent.getFirstChild (  )  )  )  {^142^143^^^^127^157^if  ( NodeUtil.isAssign ( parent )  && NodeUtil.isPrototypeProperty ( parent.getFirstChild (  )  )  )  {^[CLASS] Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  
[BugLab_Variable_Misuse]^pushContainingFunction ( recordStaticNameDefinition ( t, name, type, root, ggParent, gParent, root.getLastChild (  )  )  ) ;^148^149^150^^^142^151^pushContainingFunction ( recordStaticNameDefinition ( t, name, type, root, parent, gParent, root.getLastChild (  )  )  ) ;^[CLASS] Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  
[BugLab_Variable_Misuse]^pushContainingFunction ( recordStaticNameDefinition ( t, name, type, root, parent, parent, root.getLastChild (  )  )  ) ;^148^149^150^^^142^151^pushContainingFunction ( recordStaticNameDefinition ( t, name, type, root, parent, gParent, root.getLastChild (  )  )  ) ;^[CLASS] Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  
[BugLab_Argument_Swapping]^pushContainingFunction ( recordStaticNameDefinition ( gParent, name, type, root, parent, t, root.getLastChild (  )  )  ) ;^148^149^150^^^142^151^pushContainingFunction ( recordStaticNameDefinition ( t, name, type, root, parent, gParent, root.getLastChild (  )  )  ) ;^[CLASS] Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  
[BugLab_Argument_Swapping]^pushContainingFunction ( recordStaticNameDefinition ( t, type, name, root, parent, gParent, root.getLastChild (  )  )  ) ;^148^149^150^^^142^151^pushContainingFunction ( recordStaticNameDefinition ( t, name, type, root, parent, gParent, root.getLastChild (  )  )  ) ;^[CLASS] Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  
[BugLab_Argument_Swapping]^pushContainingFunction ( recordStaticNameDefinition ( t, name, gParent, root, parent, type, root.getLastChild (  )  )  ) ;^148^149^150^^^142^151^pushContainingFunction ( recordStaticNameDefinition ( t, name, type, root, parent, gParent, root.getLastChild (  )  )  ) ;^[CLASS] Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  
[BugLab_Argument_Swapping]^pushContainingFunction ( recordStaticNameDefinition ( t, name, root, type, parent, gParent, root.getLastChild (  )  )  ) ;^148^149^150^^^142^151^pushContainingFunction ( recordStaticNameDefinition ( t, name, type, root, parent, gParent, root.getLastChild (  )  )  ) ;^[CLASS] Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  
[BugLab_Argument_Swapping]^pushContainingFunction ( recordStaticNameDefinition ( t, name, type, root, gParent, parent, root.getLastChild (  )  )  ) ;^148^149^150^^^142^151^pushContainingFunction ( recordStaticNameDefinition ( t, name, type, root, parent, gParent, root.getLastChild (  )  )  ) ;^[CLASS] Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  
[BugLab_Variable_Misuse]^recordStaticNameDefinition ( t, name, type, parent, parent, gParent, root.getLastChild (  )  )  ) ;^149^150^^^^142^151^recordStaticNameDefinition ( t, name, type, root, parent, gParent, root.getLastChild (  )  )  ) ;^[CLASS] Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  
[BugLab_Variable_Misuse]^recordStaticNameDefinition ( t, name, type, root, root, gParent, root.getLastChild (  )  )  ) ;^149^150^^^^142^151^recordStaticNameDefinition ( t, name, type, root, parent, gParent, root.getLastChild (  )  )  ) ;^[CLASS] Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  
[BugLab_Variable_Misuse]^recordStaticNameDefinition ( t, name, type, root, parent, root, root.getLastChild (  )  )  ) ;^149^150^^^^142^151^recordStaticNameDefinition ( t, name, type, root, parent, gParent, root.getLastChild (  )  )  ) ;^[CLASS] Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  
[BugLab_Argument_Swapping]^recordStaticNameDefinition ( parent, name, type, root, t, gParent, root.getLastChild (  )  )  ) ;^149^150^^^^142^151^recordStaticNameDefinition ( t, name, type, root, parent, gParent, root.getLastChild (  )  )  ) ;^[CLASS] Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  
[BugLab_Argument_Swapping]^recordStaticNameDefinition ( t, parent, type, root, name, gParent, root.getLastChild (  )  )  ) ;^149^150^^^^142^151^recordStaticNameDefinition ( t, name, type, root, parent, gParent, root.getLastChild (  )  )  ) ;^[CLASS] Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  
[BugLab_Argument_Swapping]^recordStaticNameDefinition ( t, type, name, root, parent, gParent, root.getLastChild (  )  )  ) ;^149^150^^^^142^151^recordStaticNameDefinition ( t, name, type, root, parent, gParent, root.getLastChild (  )  )  ) ;^[CLASS] Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  
[BugLab_Argument_Swapping]^recordStaticNameDefinition ( t, name, type, parent, root, gParent, root.getLastChild (  )  )  ) ;^149^150^^^^142^151^recordStaticNameDefinition ( t, name, type, root, parent, gParent, root.getLastChild (  )  )  ) ;^[CLASS] Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  
[BugLab_Argument_Swapping]^recordStaticNameDefinition ( t, name, type, root, gParent, parent, root.getLastChild (  )  )  ) ;^149^150^^^^142^151^recordStaticNameDefinition ( t, name, type, root, parent, gParent, root.getLastChild (  )  )  ) ;^[CLASS] Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  
[BugLab_Variable_Misuse]^t, name, type, parent, parent, gParent, root.getLastChild (  )  )  ) ;^150^^^^^142^151^t, name, type, root, parent, gParent, root.getLastChild (  )  )  ) ;^[CLASS] Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  
[BugLab_Variable_Misuse]^pushContainingFunction ( recordPrototypePropDefinition ( t, root.getFirstChild (  ) , type, parent, gParent, ggParent )  ) ;^144^145^146^^^142^151^pushContainingFunction ( recordPrototypePropDefinition ( t, parent.getFirstChild (  ) , type, parent, gParent, ggParent )  ) ;^[CLASS] Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  
[BugLab_Variable_Misuse]^pushContainingFunction ( recordPrototypePropDefinition ( t, parent.getFirstChild (  ) , type, parent, root, ggParent )  ) ;^144^145^146^^^142^151^pushContainingFunction ( recordPrototypePropDefinition ( t, parent.getFirstChild (  ) , type, parent, gParent, ggParent )  ) ;^[CLASS] Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  
[BugLab_Variable_Misuse]^pushContainingFunction ( recordPrototypePropDefinition ( t, parent.getFirstChild (  ) , type, parent, gParent, root )  ) ;^144^145^146^^^142^151^pushContainingFunction ( recordPrototypePropDefinition ( t, parent.getFirstChild (  ) , type, parent, gParent, ggParent )  ) ;^[CLASS] Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  
[BugLab_Argument_Swapping]^pushContainingFunction ( recordPrototypePropDefinition ( type, parent.getFirstChild (  ) , t, parent, gParent, ggParent )  ) ;^144^145^146^^^142^151^pushContainingFunction ( recordPrototypePropDefinition ( t, parent.getFirstChild (  ) , type, parent, gParent, ggParent )  ) ;^[CLASS] Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  
[BugLab_Argument_Swapping]^pushContainingFunction ( recordPrototypePropDefinition ( t, ggParent.getFirstChild (  ) , type, parent, gParent, parent )  ) ;^144^145^146^^^142^151^pushContainingFunction ( recordPrototypePropDefinition ( t, parent.getFirstChild (  ) , type, parent, gParent, ggParent )  ) ;^[CLASS] Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  
[BugLab_Argument_Swapping]^pushContainingFunction ( recordPrototypePropDefinition ( t, parent.getFirstChild (  ) , gParent, parent, type, ggParent )  ) ;^144^145^146^^^142^151^pushContainingFunction ( recordPrototypePropDefinition ( t, parent.getFirstChild (  ) , type, parent, gParent, ggParent )  ) ;^[CLASS] Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  
[BugLab_Argument_Swapping]^pushContainingFunction ( recordPrototypePropDefinition ( t, gParent.getFirstChild (  ) , type, parent, parent, ggParent )  ) ;^144^145^146^^^142^151^pushContainingFunction ( recordPrototypePropDefinition ( t, parent.getFirstChild (  ) , type, parent, gParent, ggParent )  ) ;^[CLASS] Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  
[BugLab_Argument_Swapping]^pushContainingFunction ( recordPrototypePropDefinition ( ggParent, parent.getFirstChild (  ) , type, parent, gParent, t )  ) ;^144^145^146^^^142^151^pushContainingFunction ( recordPrototypePropDefinition ( t, parent.getFirstChild (  ) , type, parent, gParent, ggParent )  ) ;^[CLASS] Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  
[BugLab_Variable_Misuse]^recordPrototypePropDefinition ( t, parent.getFirstChild (  ) , type, parent, root, ggParent )  ) ;^145^146^^^^142^151^recordPrototypePropDefinition ( t, parent.getFirstChild (  ) , type, parent, gParent, ggParent )  ) ;^[CLASS] Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  
[BugLab_Variable_Misuse]^recordPrototypePropDefinition ( t, parent.getFirstChild (  ) , type, parent, gParent, root )  ) ;^145^146^^^^142^151^recordPrototypePropDefinition ( t, parent.getFirstChild (  ) , type, parent, gParent, ggParent )  ) ;^[CLASS] Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  
[BugLab_Argument_Swapping]^recordPrototypePropDefinition ( type, parent.getFirstChild (  ) , t, parent, gParent, ggParent )  ) ;^145^146^^^^142^151^recordPrototypePropDefinition ( t, parent.getFirstChild (  ) , type, parent, gParent, ggParent )  ) ;^[CLASS] Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  
[BugLab_Argument_Swapping]^recordPrototypePropDefinition ( t, ggParent.getFirstChild (  ) , type, parent, gParent, parent )  ) ;^145^146^^^^142^151^recordPrototypePropDefinition ( t, parent.getFirstChild (  ) , type, parent, gParent, ggParent )  ) ;^[CLASS] Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  
[BugLab_Argument_Swapping]^recordPrototypePropDefinition ( t, type.getFirstChild (  ) , parent, parent, gParent, ggParent )  ) ;^145^146^^^^142^151^recordPrototypePropDefinition ( t, parent.getFirstChild (  ) , type, parent, gParent, ggParent )  ) ;^[CLASS] Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  
[BugLab_Argument_Swapping]^recordPrototypePropDefinition ( gParent, parent.getFirstChild (  ) , type, parent, t, ggParent )  ) ;^145^146^^^^142^151^recordPrototypePropDefinition ( t, parent.getFirstChild (  ) , type, parent, gParent, ggParent )  ) ;^[CLASS] Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  
[BugLab_Argument_Swapping]^recordPrototypePropDefinition ( t, parent.getFirstChild (  ) , type, parent, ggParent, gParent )  ) ;^145^146^^^^142^151^recordPrototypePropDefinition ( t, parent.getFirstChild (  ) , type, parent, gParent, ggParent )  ) ;^[CLASS] Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  
[BugLab_Variable_Misuse]^recordPrototypePropDefinition ( t, root.getFirstChild (  ) , type, parent, gParent, ggParent )  ) ;^145^146^^^^142^151^recordPrototypePropDefinition ( t, parent.getFirstChild (  ) , type, parent, gParent, ggParent )  ) ;^[CLASS] Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  
[BugLab_Variable_Misuse]^String name = NodeUtil.getFunctionName ( parent, parent ) ;^125^^^^^110^140^String name = NodeUtil.getFunctionName ( root, parent ) ;^[CLASS] Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  
[BugLab_Variable_Misuse]^String name = NodeUtil.getFunctionName ( root, root ) ;^125^^^^^110^140^String name = NodeUtil.getFunctionName ( root, parent ) ;^[CLASS] Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  
[BugLab_Argument_Swapping]^String name = NodeUtil.getFunctionName ( parent, root ) ;^125^^^^^110^140^String name = NodeUtil.getFunctionName ( root, parent ) ;^[CLASS] Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  
[BugLab_Variable_Misuse]^JSType type = getType ( parent ) ;^138^^^^^123^153^JSType type = getType ( root ) ;^[CLASS] Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  
[BugLab_Variable_Misuse]^Node gParent = root.getParent (  ) ;^140^^^^^125^155^Node gParent = parent.getParent (  ) ;^[CLASS] Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  
[BugLab_Variable_Misuse]^Node ggParent = root.getParent (  ) ;^141^^^^^126^156^Node ggParent = gParent.getParent (  ) ;^[CLASS] Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  
[BugLab_Variable_Misuse]^String name = NodeUtil.getFunctionName ( ggParent, parent ) ;^125^^^^^110^140^String name = NodeUtil.getFunctionName ( root, parent ) ;^[CLASS] Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  
[BugLab_Variable_Misuse]^String name = NodeUtil.getFunctionName ( root, ggParent ) ;^125^^^^^110^140^String name = NodeUtil.getFunctionName ( root, parent ) ;^[CLASS] Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  
[BugLab_Variable_Misuse]^NodeUtil.isPrototypeProperty ( root.getFirstChild (  )  )  )  {^143^^^^^128^158^NodeUtil.isPrototypeProperty ( parent.getFirstChild (  )  )  )  {^[CLASS] Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  
[BugLab_Variable_Misuse]^pushContainingFunction ( recordPrototypePropDefinition ( t, root.getFirstChild (  ) , type, parent, gParent, ggParent )  ) ;^144^145^146^^^129^159^pushContainingFunction ( recordPrototypePropDefinition ( t, parent.getFirstChild (  ) , type, parent, gParent, ggParent )  ) ;^[CLASS] Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  
[BugLab_Variable_Misuse]^pushContainingFunction ( recordPrototypePropDefinition ( t, parent.getFirstChild (  ) , type, parent, root, ggParent )  ) ;^144^145^146^^^129^159^pushContainingFunction ( recordPrototypePropDefinition ( t, parent.getFirstChild (  ) , type, parent, gParent, ggParent )  ) ;^[CLASS] Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  
[BugLab_Variable_Misuse]^pushContainingFunction ( recordPrototypePropDefinition ( t, parent.getFirstChild (  ) , type, parent, gParent, root )  ) ;^144^145^146^^^129^159^pushContainingFunction ( recordPrototypePropDefinition ( t, parent.getFirstChild (  ) , type, parent, gParent, ggParent )  ) ;^[CLASS] Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  
[BugLab_Argument_Swapping]^pushContainingFunction ( recordPrototypePropDefinition ( type, parent.getFirstChild (  ) , t, parent, gParent, ggParent )  ) ;^144^145^146^^^129^159^pushContainingFunction ( recordPrototypePropDefinition ( t, parent.getFirstChild (  ) , type, parent, gParent, ggParent )  ) ;^[CLASS] Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  
[BugLab_Argument_Swapping]^pushContainingFunction ( recordPrototypePropDefinition ( parent, t.getFirstChild (  ) , type, parent, gParent, ggParent )  ) ;^144^145^146^^^129^159^pushContainingFunction ( recordPrototypePropDefinition ( t, parent.getFirstChild (  ) , type, parent, gParent, ggParent )  ) ;^[CLASS] Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  
[BugLab_Argument_Swapping]^pushContainingFunction ( recordPrototypePropDefinition ( t, parent.getFirstChild (  ) , type, parent, ggParent, gParent )  ) ;^144^145^146^^^129^159^pushContainingFunction ( recordPrototypePropDefinition ( t, parent.getFirstChild (  ) , type, parent, gParent, ggParent )  ) ;^[CLASS] Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  
[BugLab_Argument_Swapping]^pushContainingFunction ( recordPrototypePropDefinition ( t, ggParent.getFirstChild (  ) , type, parent, gParent, parent )  ) ;^144^145^146^^^129^159^pushContainingFunction ( recordPrototypePropDefinition ( t, parent.getFirstChild (  ) , type, parent, gParent, ggParent )  ) ;^[CLASS] Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  
[BugLab_Variable_Misuse]^recordPrototypePropDefinition ( t, root.getFirstChild (  ) , type, parent, gParent, ggParent )  ) ;^145^146^^^^130^160^recordPrototypePropDefinition ( t, parent.getFirstChild (  ) , type, parent, gParent, ggParent )  ) ;^[CLASS] Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  
[BugLab_Variable_Misuse]^recordPrototypePropDefinition ( t, parent.getFirstChild (  ) , type, parent, root, ggParent )  ) ;^145^146^^^^130^160^recordPrototypePropDefinition ( t, parent.getFirstChild (  ) , type, parent, gParent, ggParent )  ) ;^[CLASS] Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  
[BugLab_Variable_Misuse]^recordPrototypePropDefinition ( t, parent.getFirstChild (  ) , type, parent, gParent, root )  ) ;^145^146^^^^130^160^recordPrototypePropDefinition ( t, parent.getFirstChild (  ) , type, parent, gParent, ggParent )  ) ;^[CLASS] Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  
[BugLab_Argument_Swapping]^recordPrototypePropDefinition ( gParent, parent.getFirstChild (  ) , type, parent, t, ggParent )  ) ;^145^146^^^^130^160^recordPrototypePropDefinition ( t, parent.getFirstChild (  ) , type, parent, gParent, ggParent )  ) ;^[CLASS] Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  
[BugLab_Argument_Swapping]^recordPrototypePropDefinition ( t, ggParent.getFirstChild (  ) , type, parent, gParent, parent )  ) ;^145^146^^^^130^160^recordPrototypePropDefinition ( t, parent.getFirstChild (  ) , type, parent, gParent, ggParent )  ) ;^[CLASS] Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  
[BugLab_Argument_Swapping]^recordPrototypePropDefinition ( t, parent.getFirstChild (  ) , gParent, parent, type, ggParent )  ) ;^145^146^^^^130^160^recordPrototypePropDefinition ( t, parent.getFirstChild (  ) , type, parent, gParent, ggParent )  ) ;^[CLASS] Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  
[BugLab_Argument_Swapping]^recordPrototypePropDefinition ( t, parent.getFirstChild (  ) , type, parent, ggParent, gParent )  ) ;^145^146^^^^130^160^recordPrototypePropDefinition ( t, parent.getFirstChild (  ) , type, parent, gParent, ggParent )  ) ;^[CLASS] Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  
[BugLab_Variable_Misuse]^pushContainingFunction ( recordStaticNameDefinition ( t, name, type, ggParent, parent, gParent, root.getLastChild (  )  )  ) ;^148^149^150^^^133^163^pushContainingFunction ( recordStaticNameDefinition ( t, name, type, root, parent, gParent, root.getLastChild (  )  )  ) ;^[CLASS] Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  
[BugLab_Variable_Misuse]^pushContainingFunction ( recordStaticNameDefinition ( t, name, type, root, root, gParent, root.getLastChild (  )  )  ) ;^148^149^150^^^133^163^pushContainingFunction ( recordStaticNameDefinition ( t, name, type, root, parent, gParent, root.getLastChild (  )  )  ) ;^[CLASS] Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  
[BugLab_Variable_Misuse]^pushContainingFunction ( recordStaticNameDefinition ( t, name, type, root, parent, root, root.getLastChild (  )  )  ) ;^148^149^150^^^133^163^pushContainingFunction ( recordStaticNameDefinition ( t, name, type, root, parent, gParent, root.getLastChild (  )  )  ) ;^[CLASS] Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  
[BugLab_Argument_Swapping]^pushContainingFunction ( recordStaticNameDefinition ( parent, name, type, root, t, gParent, root.getLastChild (  )  )  ) ;^148^149^150^^^133^163^pushContainingFunction ( recordStaticNameDefinition ( t, name, type, root, parent, gParent, root.getLastChild (  )  )  ) ;^[CLASS] Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  
[BugLab_Argument_Swapping]^pushContainingFunction ( recordStaticNameDefinition ( t, gParent, type, root, parent, name, root.getLastChild (  )  )  ) ;^148^149^150^^^133^163^pushContainingFunction ( recordStaticNameDefinition ( t, name, type, root, parent, gParent, root.getLastChild (  )  )  ) ;^[CLASS] Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  
[BugLab_Argument_Swapping]^pushContainingFunction ( recordStaticNameDefinition ( t, name, root, type, parent, gParent, root.getLastChild (  )  )  ) ;^148^149^150^^^133^163^pushContainingFunction ( recordStaticNameDefinition ( t, name, type, root, parent, gParent, root.getLastChild (  )  )  ) ;^[CLASS] Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  
[BugLab_Argument_Swapping]^pushContainingFunction ( recordStaticNameDefinition ( t, name, type, parent, root, gParent, root.getLastChild (  )  )  ) ;^148^149^150^^^133^163^pushContainingFunction ( recordStaticNameDefinition ( t, name, type, root, parent, gParent, root.getLastChild (  )  )  ) ;^[CLASS] Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  
[BugLab_Argument_Swapping]^pushContainingFunction ( recordStaticNameDefinition ( t, name, type, root, gParent, parent, root.getLastChild (  )  )  ) ;^148^149^150^^^133^163^pushContainingFunction ( recordStaticNameDefinition ( t, name, type, root, parent, gParent, root.getLastChild (  )  )  ) ;^[CLASS] Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  
[BugLab_Variable_Misuse]^recordStaticNameDefinition ( t, name, type, ggParent, parent, gParent, root.getLastChild (  )  )  ) ;^149^150^^^^134^164^recordStaticNameDefinition ( t, name, type, root, parent, gParent, root.getLastChild (  )  )  ) ;^[CLASS] Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  
[BugLab_Variable_Misuse]^recordStaticNameDefinition ( t, name, type, root, ggParent, gParent, root.getLastChild (  )  )  ) ;^149^150^^^^134^164^recordStaticNameDefinition ( t, name, type, root, parent, gParent, root.getLastChild (  )  )  ) ;^[CLASS] Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  
[BugLab_Variable_Misuse]^recordStaticNameDefinition ( t, name, type, root, parent, root, root.getLastChild (  )  )  ) ;^149^150^^^^134^164^recordStaticNameDefinition ( t, name, type, root, parent, gParent, root.getLastChild (  )  )  ) ;^[CLASS] Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  
[BugLab_Argument_Swapping]^recordStaticNameDefinition ( type, name, t, root, parent, gParent, root.getLastChild (  )  )  ) ;^149^150^^^^134^164^recordStaticNameDefinition ( t, name, type, root, parent, gParent, root.getLastChild (  )  )  ) ;^[CLASS] Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  
[BugLab_Argument_Swapping]^recordStaticNameDefinition ( t, parent, type, root, name, gParent, root.getLastChild (  )  )  ) ;^149^150^^^^134^164^recordStaticNameDefinition ( t, name, type, root, parent, gParent, root.getLastChild (  )  )  ) ;^[CLASS] Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  
[BugLab_Argument_Swapping]^recordStaticNameDefinition ( t, name, parent, root, type, gParent, root.getLastChild (  )  )  ) ;^149^150^^^^134^164^recordStaticNameDefinition ( t, name, type, root, parent, gParent, root.getLastChild (  )  )  ) ;^[CLASS] Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  
[BugLab_Argument_Swapping]^recordStaticNameDefinition ( root, name, type, t, parent, gParent, root.getLastChild (  )  )  ) ;^149^150^^^^134^164^recordStaticNameDefinition ( t, name, type, root, parent, gParent, root.getLastChild (  )  )  ) ;^[CLASS] Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  
[BugLab_Argument_Swapping]^recordStaticNameDefinition ( t, name, type, root, gParent, parent, root.getLastChild (  )  )  ) ;^149^150^^^^134^164^recordStaticNameDefinition ( t, name, type, root, parent, gParent, root.getLastChild (  )  )  ) ;^[CLASS] Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  
[BugLab_Argument_Swapping]^recordStaticNameDefinition ( t, name, type, gParent, parent, root, root.getLastChild (  )  )  ) ;^149^150^^^^134^164^recordStaticNameDefinition ( t, name, type, root, parent, gParent, root.getLastChild (  )  )  ) ;^[CLASS] Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  
[BugLab_Variable_Misuse]^t, name, type, parent, parent, gParent, root.getLastChild (  )  )  ) ;^150^^^^^135^165^t, name, type, root, parent, gParent, root.getLastChild (  )  )  ) ;^[CLASS] Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  
[BugLab_Variable_Misuse]^if  ( NodeUtil.isAssign ( ggParent )  && NodeUtil.isPrototypeProperty ( parent.getFirstChild (  )  )  )  {^142^143^^^^127^157^if  ( NodeUtil.isAssign ( parent )  && NodeUtil.isPrototypeProperty ( parent.getFirstChild (  )  )  )  {^[CLASS] Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  
[BugLab_Variable_Misuse]^pushContainingFunction ( recordStaticNameDefinition ( t, name, type, parent, parent, gParent, root.getLastChild (  )  )  ) ;^148^149^150^^^142^151^pushContainingFunction ( recordStaticNameDefinition ( t, name, type, root, parent, gParent, root.getLastChild (  )  )  ) ;^[CLASS] Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  
[BugLab_Variable_Misuse]^pushContainingFunction ( recordStaticNameDefinition ( t, name, type, root, root, gParent, root.getLastChild (  )  )  ) ;^148^149^150^^^142^151^pushContainingFunction ( recordStaticNameDefinition ( t, name, type, root, parent, gParent, root.getLastChild (  )  )  ) ;^[CLASS] Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  
[BugLab_Argument_Swapping]^pushContainingFunction ( recordStaticNameDefinition ( root, name, type, t, parent, gParent, root.getLastChild (  )  )  ) ;^148^149^150^^^142^151^pushContainingFunction ( recordStaticNameDefinition ( t, name, type, root, parent, gParent, root.getLastChild (  )  )  ) ;^[CLASS] Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  
[BugLab_Argument_Swapping]^pushContainingFunction ( recordStaticNameDefinition ( t, name, parent, root, type, gParent, root.getLastChild (  )  )  ) ;^148^149^150^^^142^151^pushContainingFunction ( recordStaticNameDefinition ( t, name, type, root, parent, gParent, root.getLastChild (  )  )  ) ;^[CLASS] Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  
[BugLab_Argument_Swapping]^pushContainingFunction ( recordStaticNameDefinition ( t, name, type, gParent, parent, root, root.getLastChild (  )  )  ) ;^148^149^150^^^142^151^pushContainingFunction ( recordStaticNameDefinition ( t, name, type, root, parent, gParent, root.getLastChild (  )  )  ) ;^[CLASS] Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  
[BugLab_Argument_Swapping]^pushContainingFunction ( recordStaticNameDefinition ( t, parent, type, root, name, gParent, root.getLastChild (  )  )  ) ;^148^149^150^^^142^151^pushContainingFunction ( recordStaticNameDefinition ( t, name, type, root, parent, gParent, root.getLastChild (  )  )  ) ;^[CLASS] Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  
[BugLab_Variable_Misuse]^recordStaticNameDefinition ( t, name, type, root, parent, parent, root.getLastChild (  )  )  ) ;^149^150^^^^142^151^recordStaticNameDefinition ( t, name, type, root, parent, gParent, root.getLastChild (  )  )  ) ;^[CLASS] Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  
[BugLab_Argument_Swapping]^recordStaticNameDefinition ( name, t, type, root, parent, gParent, root.getLastChild (  )  )  ) ;^149^150^^^^142^151^recordStaticNameDefinition ( t, name, type, root, parent, gParent, root.getLastChild (  )  )  ) ;^[CLASS] Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  
[BugLab_Argument_Swapping]^recordStaticNameDefinition ( t, name, root, type, parent, gParent, root.getLastChild (  )  )  ) ;^149^150^^^^142^151^recordStaticNameDefinition ( t, name, type, root, parent, gParent, root.getLastChild (  )  )  ) ;^[CLASS] Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  
[BugLab_Argument_Swapping]^recordStaticNameDefinition ( t, name, type, gParent, parent, root, root.getLastChild (  )  )  ) ;^149^150^^^^142^151^recordStaticNameDefinition ( t, name, type, root, parent, gParent, root.getLastChild (  )  )  ) ;^[CLASS] Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  
[BugLab_Argument_Swapping]^recordStaticNameDefinition ( t, name, parent, root, type, gParent, root.getLastChild (  )  )  ) ;^149^150^^^^142^151^recordStaticNameDefinition ( t, name, type, root, parent, gParent, root.getLastChild (  )  )  ) ;^[CLASS] Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  
[BugLab_Argument_Swapping]^pushContainingFunction ( recordPrototypePropDefinition ( gParent, parent.getFirstChild (  ) , type, parent, t, ggParent )  ) ;^144^145^146^^^142^151^pushContainingFunction ( recordPrototypePropDefinition ( t, parent.getFirstChild (  ) , type, parent, gParent, ggParent )  ) ;^[CLASS] Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  
[BugLab_Argument_Swapping]^pushContainingFunction ( recordPrototypePropDefinition ( t, parent.getFirstChild (  ) , type, parent, ggParent, gParent )  ) ;^144^145^146^^^142^151^pushContainingFunction ( recordPrototypePropDefinition ( t, parent.getFirstChild (  ) , type, parent, gParent, ggParent )  ) ;^[CLASS] Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  
[BugLab_Argument_Swapping]^recordPrototypePropDefinition ( t, parent.getFirstChild (  ) , gParent, parent, type, ggParent )  ) ;^145^146^^^^142^151^recordPrototypePropDefinition ( t, parent.getFirstChild (  ) , type, parent, gParent, ggParent )  ) ;^[CLASS] Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  
[BugLab_Argument_Swapping]^recordPrototypePropDefinition ( t, gParent.getFirstChild (  ) , type, parent, parent, ggParent )  ) ;^145^146^^^^142^151^recordPrototypePropDefinition ( t, parent.getFirstChild (  ) , type, parent, gParent, ggParent )  ) ;^[CLASS] Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  
[BugLab_Argument_Swapping]^pushContainingFunction ( recordPrototypePropDefinition ( ggParent, parent.getFirstChild (  ) , type, parent, gParent, t )  ) ;^144^145^146^^^129^159^pushContainingFunction ( recordPrototypePropDefinition ( t, parent.getFirstChild (  ) , type, parent, gParent, ggParent )  ) ;^[CLASS] Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  
[BugLab_Argument_Swapping]^pushContainingFunction ( recordPrototypePropDefinition ( t, gParent.getFirstChild (  ) , type, parent, parent, ggParent )  ) ;^144^145^146^^^129^159^pushContainingFunction ( recordPrototypePropDefinition ( t, parent.getFirstChild (  ) , type, parent, gParent, ggParent )  ) ;^[CLASS] Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  
[BugLab_Argument_Swapping]^pushContainingFunction ( recordPrototypePropDefinition ( t, type.getFirstChild (  ) , parent, parent, gParent, ggParent )  ) ;^144^145^146^^^129^159^pushContainingFunction ( recordPrototypePropDefinition ( t, parent.getFirstChild (  ) , type, parent, gParent, ggParent )  ) ;^[CLASS] Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  
[BugLab_Argument_Swapping]^pushContainingFunction ( recordPrototypePropDefinition ( gParent, parent.getFirstChild (  ) , type, parent, t, ggParent )  ) ;^144^145^146^^^129^159^pushContainingFunction ( recordPrototypePropDefinition ( t, parent.getFirstChild (  ) , type, parent, gParent, ggParent )  ) ;^[CLASS] Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  
[BugLab_Argument_Swapping]^recordPrototypePropDefinition ( type, parent.getFirstChild (  ) , t, parent, gParent, ggParent )  ) ;^145^146^^^^130^160^recordPrototypePropDefinition ( t, parent.getFirstChild (  ) , type, parent, gParent, ggParent )  ) ;^[CLASS] Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  
[BugLab_Argument_Swapping]^recordPrototypePropDefinition ( t, parent.getFirstChild (  ) , ggParent, parent, gParent, type )  ) ;^145^146^^^^130^160^recordPrototypePropDefinition ( t, parent.getFirstChild (  ) , type, parent, gParent, ggParent )  ) ;^[CLASS] Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  
[BugLab_Variable_Misuse]^pushContainingFunction ( recordStaticNameDefinition ( t, name, type, parent, parent, gParent, root.getLastChild (  )  )  ) ;^148^149^150^^^133^163^pushContainingFunction ( recordStaticNameDefinition ( t, name, type, root, parent, gParent, root.getLastChild (  )  )  ) ;^[CLASS] Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  
[BugLab_Argument_Swapping]^pushContainingFunction ( recordStaticNameDefinition ( gParent, name, type, root, parent, t, root.getLastChild (  )  )  ) ;^148^149^150^^^133^163^pushContainingFunction ( recordStaticNameDefinition ( t, name, type, root, parent, gParent, root.getLastChild (  )  )  ) ;^[CLASS] Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  
[BugLab_Argument_Swapping]^pushContainingFunction ( recordStaticNameDefinition ( t, parent, type, root, name, gParent, root.getLastChild (  )  )  ) ;^148^149^150^^^133^163^pushContainingFunction ( recordStaticNameDefinition ( t, name, type, root, parent, gParent, root.getLastChild (  )  )  ) ;^[CLASS] Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  
[BugLab_Argument_Swapping]^pushContainingFunction ( recordStaticNameDefinition ( t, type, name, root, parent, gParent, root.getLastChild (  )  )  ) ;^148^149^150^^^133^163^pushContainingFunction ( recordStaticNameDefinition ( t, name, type, root, parent, gParent, root.getLastChild (  )  )  ) ;^[CLASS] Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  
[BugLab_Argument_Swapping]^pushContainingFunction ( recordStaticNameDefinition ( t, name, type, gParent, parent, root, root.getLastChild (  )  )  ) ;^148^149^150^^^133^163^pushContainingFunction ( recordStaticNameDefinition ( t, name, type, root, parent, gParent, root.getLastChild (  )  )  ) ;^[CLASS] Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  
[BugLab_Variable_Misuse]^recordStaticNameDefinition ( t, name, type, parent, parent, gParent, root.getLastChild (  )  )  ) ;^149^150^^^^134^164^recordStaticNameDefinition ( t, name, type, root, parent, gParent, root.getLastChild (  )  )  ) ;^[CLASS] Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  
[BugLab_Variable_Misuse]^recordStaticNameDefinition ( t, name, type, root, root, gParent, root.getLastChild (  )  )  ) ;^149^150^^^^134^164^recordStaticNameDefinition ( t, name, type, root, parent, gParent, root.getLastChild (  )  )  ) ;^[CLASS] Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  
[BugLab_Argument_Swapping]^recordStaticNameDefinition ( name, t, type, root, parent, gParent, root.getLastChild (  )  )  ) ;^149^150^^^^134^164^recordStaticNameDefinition ( t, name, type, root, parent, gParent, root.getLastChild (  )  )  ) ;^[CLASS] Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  
[BugLab_Argument_Swapping]^recordStaticNameDefinition ( t, name, type, parent, root, gParent, root.getLastChild (  )  )  ) ;^149^150^^^^134^164^recordStaticNameDefinition ( t, name, type, root, parent, gParent, root.getLastChild (  )  )  ) ;^[CLASS] Traversal  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  ggParent  parent  root  
[BugLab_Wrong_Literal]^return false;^164^^^^^163^165^return true;^[CLASS] Traversal  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] NodeTraversal  t  boolean  isExtern  Node  n  parent  
[BugLab_Variable_Misuse]^while  (  ( parent = param.getNext (  )  )  != null )  {^232^^^^^217^247^while  (  ( param = param.getNext (  )  )  != null )  {^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[BugLab_Wrong_Operator]^while  (  ( param = param.getNext (  )  )  == null )  {^232^^^^^217^247^while  (  ( param = param.getNext (  )  )  != null )  {^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[BugLab_Variable_Misuse]^if  ( NodeUtil.isName ( varName )  || NodeUtil.isGetProp ( param )  )  {^233^^^^^218^248^if  ( NodeUtil.isName ( param )  || NodeUtil.isGetProp ( param )  )  {^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[BugLab_Wrong_Operator]^if  ( NodeUtil.isName ( param )  && NodeUtil.isGetProp ( param )  )  {^233^^^^^218^248^if  ( NodeUtil.isName ( param )  || NodeUtil.isGetProp ( param )  )  {^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[BugLab_Variable_Misuse]^safeAlias ( rhs ) ;^234^^^^^219^249^safeAlias ( param ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[BugLab_Variable_Misuse]^if  ( NodeUtil.isName ( rhs )  || NodeUtil.isGetProp ( param )  )  {^233^^^^^218^248^if  ( NodeUtil.isName ( param )  || NodeUtil.isGetProp ( param )  )  {^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[BugLab_Variable_Misuse]^if  ( NodeUtil.isGetProp ( param )  || parent.getType (  )  == Token.REF_SPECIAL )  {^173^174^^^^158^188^if  ( NodeUtil.isGetProp ( parent )  || parent.getType (  )  == Token.REF_SPECIAL )  {^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[BugLab_Variable_Misuse]^if  ( NodeUtil.isGetProp ( parent )  || parent.getType (  )  == Token.null )  {^173^174^^^^158^188^if  ( NodeUtil.isGetProp ( parent )  || parent.getType (  )  == Token.REF_SPECIAL )  {^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[BugLab_Wrong_Operator]^if  ( NodeUtil.isGetProp ( parent )  && parent.getType (  )  == Token.REF_SPECIAL )  {^173^174^^^^158^188^if  ( NodeUtil.isGetProp ( parent )  || parent.getType (  )  == Token.REF_SPECIAL )  {^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[BugLab_Wrong_Operator]^if  ( NodeUtil.isGetProp ( parent )  || parent.getType (  )  >= Token.REF_SPECIAL )  {^173^174^^^^158^188^if  ( NodeUtil.isGetProp ( parent )  || parent.getType (  )  == Token.REF_SPECIAL )  {^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[BugLab_Variable_Misuse]^} else if  ( NodeUtil.isFunction ( rhs )  )  {^177^^^^^162^192^} else if  ( NodeUtil.isFunction ( parent )  )  {^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[BugLab_Variable_Misuse]^} else if  ( NodeUtil.isAssign ( rhs )  )  {^180^^^^^165^195^} else if  ( NodeUtil.isAssign ( parent )  )  {^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[BugLab_Variable_Misuse]^} else if  ( NodeUtil.isAssign ( varName )  )  {^180^^^^^165^195^} else if  ( NodeUtil.isAssign ( parent )  )  {^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[BugLab_Variable_Misuse]^} else if  ( NodeUtil.isFunction ( varName )  )  {^177^^^^^162^192^} else if  ( NodeUtil.isFunction ( parent )  )  {^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[BugLab_Variable_Misuse]^} else if  ( NodeUtil.isAssign ( param )  )  {^180^^^^^165^195^} else if  ( NodeUtil.isAssign ( parent )  )  {^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[BugLab_Variable_Misuse]^} else if  ( NodeUtil.isFunction ( param )  )  {^177^^^^^162^192^} else if  ( NodeUtil.isFunction ( parent )  )  {^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[BugLab_Variable_Misuse]^if  ( isLocalNameReference ( t, parent )  )  {^185^^^^^170^200^if  ( isLocalNameReference ( t, n )  )  {^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[BugLab_Argument_Swapping]^if  ( isLocalNameReference ( n, t )  )  {^185^^^^^170^200^if  ( isLocalNameReference ( t, n )  )  {^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[BugLab_Variable_Misuse]^if  ( isPrototypeNameReference ( varName )  )  {^190^^^^^175^205^if  ( isPrototypeNameReference ( n )  )  {^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[BugLab_Variable_Misuse]^} else if  ( isStaticNameReference ( rhs, t.getScope (  )  )  )  {^192^^^^^177^207^} else if  ( isStaticNameReference ( n, t.getScope (  )  )  )  {^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[BugLab_Argument_Swapping]^} else if  ( isStaticNameReference ( t, n.getScope (  )  )  )  {^192^^^^^177^207^} else if  ( isStaticNameReference ( n, t.getScope (  )  )  )  {^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[BugLab_Variable_Misuse]^recordUnknownUse ( t, n, varName ) ;^195^^^^^192^196^recordUnknownUse ( t, n, parent ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[BugLab_Argument_Swapping]^recordUnknownUse ( parent, n, t ) ;^195^^^^^192^196^recordUnknownUse ( t, n, parent ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[BugLab_Argument_Swapping]^recordUnknownUse ( t, parent, n ) ;^195^^^^^192^196^recordUnknownUse ( t, n, parent ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[BugLab_Variable_Misuse]^recordStaticNameUse ( t, varName, parent ) ;^193^^^^^178^208^recordStaticNameUse ( t, n, parent ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[BugLab_Variable_Misuse]^recordStaticNameUse ( t, n, varName ) ;^193^^^^^178^208^recordStaticNameUse ( t, n, parent ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[BugLab_Argument_Swapping]^recordStaticNameUse ( parent, n, t ) ;^193^^^^^178^208^recordStaticNameUse ( t, n, parent ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[BugLab_Argument_Swapping]^recordStaticNameUse ( t, parent, n ) ;^193^^^^^178^208^recordStaticNameUse ( t, n, parent ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[BugLab_Variable_Misuse]^} else if  ( isStaticNameReference ( varName, t.getScope (  )  )  )  {^192^^^^^177^207^} else if  ( isStaticNameReference ( n, t.getScope (  )  )  )  {^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[BugLab_Variable_Misuse]^recordStaticNameUse ( t, rhs, parent ) ;^193^^^^^178^208^recordStaticNameUse ( t, n, parent ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[BugLab_Argument_Swapping]^recordStaticNameUse ( n, t, parent ) ;^193^^^^^178^208^recordStaticNameUse ( t, n, parent ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[BugLab_Variable_Misuse]^recordUnknownUse ( t, varName, parent ) ;^195^^^^^180^210^recordUnknownUse ( t, n, parent ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[BugLab_Variable_Misuse]^recordUnknownUse ( t, n, varName ) ;^195^^^^^180^210^recordUnknownUse ( t, n, parent ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[BugLab_Argument_Swapping]^recordUnknownUse ( parent, n, t ) ;^195^^^^^180^210^recordUnknownUse ( t, n, parent ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[BugLab_Argument_Swapping]^recordUnknownUse ( t, parent, n ) ;^195^^^^^180^210^recordUnknownUse ( t, n, parent ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[BugLab_Variable_Misuse]^recordPrototypePropUse ( t, parent, parent ) ;^191^^^^^176^206^recordPrototypePropUse ( t, n, parent ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[BugLab_Variable_Misuse]^recordPrototypePropUse ( t, n, varName ) ;^191^^^^^176^206^recordPrototypePropUse ( t, n, parent ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[BugLab_Argument_Swapping]^recordPrototypePropUse ( parent, n, t ) ;^191^^^^^176^206^recordPrototypePropUse ( t, n, parent ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[BugLab_Argument_Swapping]^recordPrototypePropUse ( t, parent, n ) ;^191^^^^^176^206^recordPrototypePropUse ( t, n, parent ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[BugLab_Variable_Misuse]^recordUnknownUse ( t, varName, parent ) ;^195^^^^^192^196^recordUnknownUse ( t, n, parent ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[BugLab_Argument_Swapping]^recordUnknownUse ( n, t, parent ) ;^195^^^^^192^196^recordUnknownUse ( t, n, parent ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[BugLab_Variable_Misuse]^recordStaticNameUse ( t, n, param ) ;^193^^^^^178^208^recordStaticNameUse ( t, n, parent ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[BugLab_Variable_Misuse]^if  ( NodeUtil.isFunction ( varName )  )  {^202^^^^^187^217^if  ( NodeUtil.isFunction ( rhs )  )  {^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[BugLab_Variable_Misuse]^if  ( NodeUtil.isName ( rhs )  || NodeUtil.isGetProp ( lhs )  || NodeUtil.isGetProp ( rhs )  )  {^206^207^208^^^191^221^if  ( NodeUtil.isName ( lhs )  || NodeUtil.isGetProp ( lhs )  || NodeUtil.isGetProp ( rhs )  )  {^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[BugLab_Variable_Misuse]^if  ( NodeUtil.isName ( lhs )  || NodeUtil.isGetProp ( lhs )  || NodeUtil.isGetProp ( varName )  )  {^206^207^208^^^191^221^if  ( NodeUtil.isName ( lhs )  || NodeUtil.isGetProp ( lhs )  || NodeUtil.isGetProp ( rhs )  )  {^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[BugLab_Wrong_Operator]^if  ( NodeUtil.isName ( lhs )  && NodeUtil.isGetProp ( lhs )  || NodeUtil.isGetProp ( rhs )  )  {^206^207^208^^^191^221^if  ( NodeUtil.isName ( lhs )  || NodeUtil.isGetProp ( lhs )  || NodeUtil.isGetProp ( rhs )  )  {^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[BugLab_Variable_Misuse]^if  ( NodeUtil.isPrototypeProperty ( parent )  )  {^209^^^^^206^214^if  ( NodeUtil.isPrototypeProperty ( lhs )  )  {^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[BugLab_Variable_Misuse]^Name name = recordPrototypePropDefinition ( t, varName, getType ( rhs ) , n, parent, parent.getParent (  )  ) ;^210^211^^^^206^214^Name name = recordPrototypePropDefinition ( t, lhs, getType ( rhs ) , n, parent, parent.getParent (  )  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[BugLab_Variable_Misuse]^Name name = recordPrototypePropDefinition ( t, lhs, getType ( param ) , n, parent, parent.getParent (  )  ) ;^210^211^^^^206^214^Name name = recordPrototypePropDefinition ( t, lhs, getType ( rhs ) , n, parent, parent.getParent (  )  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[BugLab_Variable_Misuse]^Name varNameame = recordPrototypePropDefinition ( t, lhs, getType ( rhs ) , n, parent, parent.getParent (  )  ) ;^210^211^^^^206^214^Name name = recordPrototypePropDefinition ( t, lhs, getType ( rhs ) , n, parent, parent.getParent (  )  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[BugLab_Variable_Misuse]^Name name = recordPrototypePropDefinition ( t, lhs, getType ( rhs ) , n, param, parent.getParent (  )  ) ;^210^211^^^^206^214^Name name = recordPrototypePropDefinition ( t, lhs, getType ( rhs ) , n, parent, parent.getParent (  )  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[BugLab_Argument_Swapping]^Name name = recordPrototypePropDefinition ( lhs, t, getType ( rhs ) , n, parent, parent.getParent (  )  ) ;^210^211^^^^206^214^Name name = recordPrototypePropDefinition ( t, lhs, getType ( rhs ) , n, parent, parent.getParent (  )  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[BugLab_Argument_Swapping]^Name rhsame = recordPrototypePropDefinition ( t, lhs, getType ( n ) , n, parent, parent.getParent (  )  ) ;^210^211^^^^206^214^Name name = recordPrototypePropDefinition ( t, lhs, getType ( rhs ) , n, parent, parent.getParent (  )  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[BugLab_Argument_Swapping]^Name parentame = recordPrototypePropDefinition ( t, lhs, getType ( rhs ) , n, n, parent.getParent (  )  ) ;^210^211^^^^206^214^Name name = recordPrototypePropDefinition ( t, lhs, getType ( rhs ) , n, parent, parent.getParent (  )  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[BugLab_Variable_Misuse]^Name name = recordPrototypePropDefinition ( t, lhs, getType ( varName ) , n, parent, parent.getParent (  )  ) ;^210^211^^^^206^214^Name name = recordPrototypePropDefinition ( t, lhs, getType ( rhs ) , n, parent, parent.getParent (  )  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[BugLab_Variable_Misuse]^Name name = recordPrototypePropDefinition ( t, lhs, getType ( rhs ) , n, varName, parent.getParent (  )  ) ;^210^211^^^^206^214^Name name = recordPrototypePropDefinition ( t, lhs, getType ( rhs ) , n, parent, parent.getParent (  )  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[BugLab_Argument_Swapping]^Name name = recordPrototypePropDefinition ( t, rhs, getType ( lhs ) , n, parent, parent.getParent (  )  ) ;^210^211^^^^206^214^Name name = recordPrototypePropDefinition ( t, lhs, getType ( rhs ) , n, parent, parent.getParent (  )  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[BugLab_Argument_Swapping]^Name lhsame = recordPrototypePropDefinition ( t, n, getType ( rhs ) , n, parent, parent.getParent (  )  ) ;^210^211^^^^206^214^Name name = recordPrototypePropDefinition ( t, lhs, getType ( rhs ) , n, parent, parent.getParent (  )  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[BugLab_Argument_Swapping]^Name name = recordPrototypePropDefinition ( t, lhs, getType ( parent ) , n, rhs, parent.getParent (  )  ) ;^210^211^^^^206^214^Name name = recordPrototypePropDefinition ( t, lhs, getType ( rhs ) , n, parent, parent.getParent (  )  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[BugLab_Variable_Misuse]^t, lhs, getType ( varName ) , n, parent, parent.getParent (  )  ) ;^211^^^^^206^214^t, lhs, getType ( rhs ) , n, parent, parent.getParent (  )  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[BugLab_Variable_Misuse]^t, lhs, getType ( rhs ) , n, varName, parent.getParent (  )  ) ;^211^^^^^206^214^t, lhs, getType ( rhs ) , n, parent, parent.getParent (  )  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[BugLab_Wrong_Literal]^name.setAliased ( false ) ;^212^^^^^206^214^name.setAliased ( true ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[BugLab_Variable_Misuse]^Name name = recordPrototypePropDefinition ( t, lhs, getType ( rhs ) , n, rhs, parent.getParent (  )  ) ;^210^211^^^^206^214^Name name = recordPrototypePropDefinition ( t, lhs, getType ( rhs ) , n, parent, parent.getParent (  )  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[BugLab_Variable_Misuse]^if  ( NodeUtil.isPrototypeProperty ( rhs )  )  {^209^^^^^206^214^if  ( NodeUtil.isPrototypeProperty ( lhs )  )  {^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[BugLab_Variable_Misuse]^Name parentame = recordPrototypePropDefinition ( t, lhs, getType ( rhs ) , n, parent, parent.getParent (  )  ) ;^210^211^^^^206^214^Name name = recordPrototypePropDefinition ( t, lhs, getType ( rhs ) , n, parent, parent.getParent (  )  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[BugLab_Variable_Misuse]^t, lhs, getType ( rhs ) , n, param, parent.getParent (  )  ) ;^211^^^^^206^214^t, lhs, getType ( rhs ) , n, parent, parent.getParent (  )  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[BugLab_Variable_Misuse]^if  ( NodeUtil.isPrototypeProperty ( varName )  )  {^209^^^^^194^224^if  ( NodeUtil.isPrototypeProperty ( lhs )  )  {^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[BugLab_Variable_Misuse]^Name name = recordPrototypePropDefinition ( t, parent, getType ( rhs ) , n, parent, parent.getParent (  )  ) ;^210^211^^^^195^225^Name name = recordPrototypePropDefinition ( t, lhs, getType ( rhs ) , n, parent, parent.getParent (  )  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[BugLab_Variable_Misuse]^Name varNameame = recordPrototypePropDefinition ( t, lhs, getType ( rhs ) , n, parent, parent.getParent (  )  ) ;^210^211^^^^195^225^Name name = recordPrototypePropDefinition ( t, lhs, getType ( rhs ) , n, parent, parent.getParent (  )  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[BugLab_Variable_Misuse]^Name name = recordPrototypePropDefinition ( t, lhs, getType ( rhs ) , n, varName, parent.getParent (  )  ) ;^210^211^^^^195^225^Name name = recordPrototypePropDefinition ( t, lhs, getType ( rhs ) , n, parent, parent.getParent (  )  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[BugLab_Argument_Swapping]^Name name = recordPrototypePropDefinition ( rhs, lhs, getType ( t ) , n, parent, parent.getParent (  )  ) ;^210^211^^^^195^225^Name name = recordPrototypePropDefinition ( t, lhs, getType ( rhs ) , n, parent, parent.getParent (  )  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[BugLab_Argument_Swapping]^Name name = recordPrototypePropDefinition ( t, parent, getType ( rhs ) , n, lhs, parent.getParent (  )  ) ;^210^211^^^^195^225^Name name = recordPrototypePropDefinition ( t, lhs, getType ( rhs ) , n, parent, parent.getParent (  )  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[BugLab_Argument_Swapping]^Name rhsame = recordPrototypePropDefinition ( t, lhs, getType ( n ) , n, parent, parent.getParent (  )  ) ;^210^211^^^^195^225^Name name = recordPrototypePropDefinition ( t, lhs, getType ( rhs ) , n, parent, parent.getParent (  )  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[BugLab_Argument_Swapping]^Name parentame = recordPrototypePropDefinition ( t, lhs, getType ( rhs ) , n, n, parent.getParent (  )  ) ;^210^211^^^^195^225^Name name = recordPrototypePropDefinition ( t, lhs, getType ( rhs ) , n, parent, parent.getParent (  )  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[BugLab_Argument_Swapping]^Name name = recordPrototypePropDefinition ( t, lhs, getType ( parent ) , n, rhs, parent.getParent (  )  ) ;^210^211^^^^195^225^Name name = recordPrototypePropDefinition ( t, lhs, getType ( rhs ) , n, parent, parent.getParent (  )  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[BugLab_Variable_Misuse]^Name name = recordPrototypePropDefinition ( t, varName, getType ( rhs ) , n, parent, parent.getParent (  )  ) ;^210^211^^^^195^225^Name name = recordPrototypePropDefinition ( t, lhs, getType ( rhs ) , n, parent, parent.getParent (  )  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[BugLab_Variable_Misuse]^Name name = recordPrototypePropDefinition ( t, lhs, getType ( varName ) , n, parent, parent.getParent (  )  ) ;^210^211^^^^195^225^Name name = recordPrototypePropDefinition ( t, lhs, getType ( rhs ) , n, parent, parent.getParent (  )  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[BugLab_Variable_Misuse]^Name rhsame = recordPrototypePropDefinition ( t, lhs, getType ( rhs ) , n, parent, parent.getParent (  )  ) ;^210^211^^^^195^225^Name name = recordPrototypePropDefinition ( t, lhs, getType ( rhs ) , n, parent, parent.getParent (  )  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[BugLab_Argument_Swapping]^Name name = recordPrototypePropDefinition ( lhs, t, getType ( rhs ) , n, parent, parent.getParent (  )  ) ;^210^211^^^^195^225^Name name = recordPrototypePropDefinition ( t, lhs, getType ( rhs ) , n, parent, parent.getParent (  )  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[BugLab_Argument_Swapping]^Name lhsame = recordPrototypePropDefinition ( t, n, getType ( rhs ) , n, parent, parent.getParent (  )  ) ;^210^211^^^^195^225^Name name = recordPrototypePropDefinition ( t, lhs, getType ( rhs ) , n, parent, parent.getParent (  )  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[BugLab_Argument_Swapping]^Name tame = recordPrototypePropDefinition ( n, lhs, getType ( rhs ) , n, parent, parent.getParent (  )  ) ;^210^211^^^^195^225^Name name = recordPrototypePropDefinition ( t, lhs, getType ( rhs ) , n, parent, parent.getParent (  )  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[BugLab_Variable_Misuse]^t, lhs, getType ( varName ) , n, parent, parent.getParent (  )  ) ;^211^^^^^196^226^t, lhs, getType ( rhs ) , n, parent, parent.getParent (  )  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[BugLab_Variable_Misuse]^t, lhs, getType ( rhs ) , n, varName, parent.getParent (  )  ) ;^211^^^^^196^226^t, lhs, getType ( rhs ) , n, parent, parent.getParent (  )  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[BugLab_Wrong_Literal]^name.setAliased ( false ) ;^212^^^^^197^227^name.setAliased ( true ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[BugLab_Variable_Misuse]^if  ( rhs == null )  {^222^^^^^207^237^if  ( assignedValue == null )  {^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[BugLab_Wrong_Operator]^if  ( assignedValue != null )  {^222^^^^^207^237^if  ( assignedValue == null )  {^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[BugLab_Variable_Misuse]^safeAlias ( parent ) ;^234^^^^^219^249^safeAlias ( param ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[BugLab_Variable_Misuse]^while  (  ( rhs = param.getNext (  )  )  != null )  {^232^^^^^217^247^while  (  ( param = param.getNext (  )  )  != null )  {^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[BugLab_Variable_Misuse]^Node lhs = varName.getFirstChild (  ) ;^200^^^^^185^215^Node lhs = n.getFirstChild (  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[BugLab_Variable_Misuse]^Node rhs = varName.getLastChild (  ) ;^201^^^^^186^216^Node rhs = n.getLastChild (  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[BugLab_Variable_Misuse]^Node varName = rhs.getFirstChild (  ) ;^220^^^^^205^235^Node varName = n.getFirstChild (  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[BugLab_Variable_Misuse]^Node assignedValue = rhs.getFirstChild (  ) ;^221^^^^^206^236^Node assignedValue = varName.getFirstChild (  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[BugLab_Variable_Misuse]^switch  ( varName.getType (  )  )  {^170^^^^^155^185^switch  ( n.getType (  )  )  {^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[BugLab_Variable_Misuse]^if  ( isLocalNameReference ( t, varName )  )  {^185^^^^^170^200^if  ( isLocalNameReference ( t, n )  )  {^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[BugLab_Variable_Misuse]^recordUnknownUse ( t, rhs, parent ) ;^195^^^^^180^210^recordUnknownUse ( t, n, parent ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[BugLab_Variable_Misuse]^Node rhs = parent.getLastChild (  ) ;^201^^^^^186^216^Node rhs = n.getLastChild (  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[BugLab_Variable_Misuse]^if  ( NodeUtil.isName ( varName )  || NodeUtil.isGetProp ( lhs )  || NodeUtil.isGetProp ( rhs )  )  {^206^207^208^^^191^221^if  ( NodeUtil.isName ( lhs )  || NodeUtil.isGetProp ( lhs )  || NodeUtil.isGetProp ( rhs )  )  {^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[BugLab_Variable_Misuse]^NodeUtil.isGetProp ( parent )  || NodeUtil.isGetProp ( rhs )  )  {^207^208^^^^192^222^NodeUtil.isGetProp ( lhs )  || NodeUtil.isGetProp ( rhs )  )  {^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[BugLab_Variable_Misuse]^NodeUtil.isGetProp ( varName )  )  {^208^^^^^193^223^NodeUtil.isGetProp ( rhs )  )  {^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[BugLab_Variable_Misuse]^if  ( NodeUtil.isPrototypeProperty ( rhs )  )  {^209^^^^^194^224^if  ( NodeUtil.isPrototypeProperty ( lhs )  )  {^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[BugLab_Variable_Misuse]^Name parentame = recordPrototypePropDefinition ( t, lhs, getType ( rhs ) , n, parent, parent.getParent (  )  ) ;^210^211^^^^195^225^Name name = recordPrototypePropDefinition ( t, lhs, getType ( rhs ) , n, parent, parent.getParent (  )  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[BugLab_Argument_Swapping]^Name name = recordPrototypePropDefinition ( t, rhs, getType ( lhs ) , n, parent, parent.getParent (  )  ) ;^210^211^^^^195^225^Name name = recordPrototypePropDefinition ( t, lhs, getType ( rhs ) , n, parent, parent.getParent (  )  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[BugLab_Variable_Misuse]^t, lhs, getType ( rhs ) , n, param, parent.getParent (  )  ) ;^211^^^^^196^226^t, lhs, getType ( rhs ) , n, parent, parent.getParent (  )  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[BugLab_Variable_Misuse]^maybeAliasNamesOnAssign ( varName, rhs ) ;^215^^^^^200^230^maybeAliasNamesOnAssign ( lhs, rhs ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[BugLab_Argument_Swapping]^maybeAliasNamesOnAssign ( rhs, lhs ) ;^215^^^^^200^230^maybeAliasNamesOnAssign ( lhs, rhs ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[BugLab_Variable_Misuse]^Node varName = parent.getFirstChild (  ) ;^220^^^^^205^235^Node varName = n.getFirstChild (  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[BugLab_Variable_Misuse]^maybeAliasNamesOnAssign ( rhs, assignedValue ) ;^225^^^^^210^240^maybeAliasNamesOnAssign ( varName, assignedValue ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[BugLab_Variable_Misuse]^maybeAliasNamesOnAssign ( varName, rhs ) ;^225^^^^^210^240^maybeAliasNamesOnAssign ( varName, assignedValue ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[BugLab_Argument_Swapping]^maybeAliasNamesOnAssign ( assignedValue, varName ) ;^225^^^^^210^240^maybeAliasNamesOnAssign ( varName, assignedValue ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[BugLab_Variable_Misuse]^Node param = rhs.getFirstChild (  ) ;^229^^^^^214^244^Node param = n.getFirstChild (  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[BugLab_Variable_Misuse]^while  (  ( varName = param.getNext (  )  )  != null )  {^232^^^^^217^247^while  (  ( param = param.getNext (  )  )  != null )  {^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[BugLab_Variable_Misuse]^if  ( NodeUtil.isName ( parent )  || NodeUtil.isGetProp ( param )  )  {^233^^^^^218^248^if  ( NodeUtil.isName ( param )  || NodeUtil.isGetProp ( param )  )  {^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[BugLab_Variable_Misuse]^safeAlias ( varName ) ;^234^^^^^219^249^safeAlias ( param ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[BugLab_Variable_Misuse]^maybeRecordExport ( parent ) ;^238^^^^^223^253^maybeRecordExport ( n ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Node  assignedValue  lhs  n  param  parent  rhs  varName  Name  name  
[BugLab_Wrong_Operator]^return NodeUtil.containsType ( n, Token.NAME )  && NodeUtil.containsType ( n, Token.GETELEM )  || NodeUtil.containsType ( n, Token.GETPROP ) ;^244^245^246^^^243^247^return NodeUtil.containsType ( n, Token.NAME )  || NodeUtil.containsType ( n, Token.GETELEM )  || NodeUtil.containsType ( n, Token.GETPROP ) ;^[CLASS] Traversal  [METHOD] containsName [RETURN_TYPE] boolean   Node n [VARIABLES] boolean  isExtern  Node  n  
[BugLab_Variable_Misuse]^if  ( NodeUtil.isName ( cur )  || NodeUtil.isGetProp ( n )  )  {^256^^^^^255^280^if  ( NodeUtil.isName ( n )  || NodeUtil.isGetProp ( n )  )  {^[CLASS] Traversal  [METHOD] safeAlias [RETURN_TYPE] void   Node n [VARIABLES] boolean  isExtern  Node  cur  n  String  name  
[BugLab_Wrong_Operator]^if  ( NodeUtil.isName ( n )  && NodeUtil.isGetProp ( n )  )  {^256^^^^^255^280^if  ( NodeUtil.isName ( n )  || NodeUtil.isGetProp ( n )  )  {^[CLASS] Traversal  [METHOD] safeAlias [RETURN_TYPE] void   Node n [VARIABLES] boolean  isExtern  Node  cur  n  String  name  
[BugLab_Wrong_Operator]^if  ( name == null )  {^259^^^^^255^280^if  ( name != null )  {^[CLASS] Traversal  [METHOD] safeAlias [RETURN_TYPE] void   Node n [VARIABLES] boolean  isExtern  Node  cur  n  String  name  
[BugLab_Variable_Misuse]^String curame = n.getQualifiedName (  ) ;^257^^^^^255^280^String name = n.getQualifiedName (  ) ;^[CLASS] Traversal  [METHOD] safeAlias [RETURN_TYPE] void   Node n [VARIABLES] boolean  isExtern  Node  cur  n  String  name  
[BugLab_Variable_Misuse]^} while  (  ( n = cur.getNext (  )  )  != null ) ;^276^^^^^255^280^} while  (  ( cur = cur.getNext (  )  )  != null ) ;^[CLASS] Traversal  [METHOD] safeAlias [RETURN_TYPE] void   Node n [VARIABLES] boolean  isExtern  Node  cur  n  String  name  
[BugLab_Variable_Misuse]^Node cur = cur.getFirstChild (  ) ;^273^^^^^255^280^Node cur = n.getFirstChild (  ) ;^[CLASS] Traversal  [METHOD] safeAlias [RETURN_TYPE] void   Node n [VARIABLES] boolean  isExtern  Node  cur  n  String  name  
[BugLab_Variable_Misuse]^safeAlias ( n ) ;^275^^^^^255^280^safeAlias ( cur ) ;^[CLASS] Traversal  [METHOD] safeAlias [RETURN_TYPE] void   Node n [VARIABLES] boolean  isExtern  Node  cur  n  String  name  
[BugLab_Variable_Misuse]^} else if  ( cur.hasChildren (  )  )  {^272^^^^^255^280^} else if  ( n.hasChildren (  )  )  {^[CLASS] Traversal  [METHOD] safeAlias [RETURN_TYPE] void   Node n [VARIABLES] boolean  isExtern  Node  cur  n  String  name  
[BugLab_Variable_Misuse]^safeAlias ( cur.getFirstChild (  )  ) ;^271^^^^^255^280^safeAlias ( n.getFirstChild (  )  ) ;^[CLASS] Traversal  [METHOD] safeAlias [RETURN_TYPE] void   Node n [VARIABLES] boolean  isExtern  Node  cur  n  String  name  
[BugLab_Variable_Misuse]^} else if  ( NodeUtil.isAssign ( cur )  )  {^268^^^^^255^280^} else if  ( NodeUtil.isAssign ( n )  )  {^[CLASS] Traversal  [METHOD] safeAlias [RETURN_TYPE] void   Node n [VARIABLES] boolean  isExtern  Node  cur  n  String  name  
[BugLab_Variable_Misuse]^defineAndAlias ( cur.getLastChild (  ) .getString (  )  ) ;^267^^^^^255^280^defineAndAlias ( n.getLastChild (  ) .getString (  )  ) ;^[CLASS] Traversal  [METHOD] safeAlias [RETURN_TYPE] void   Node n [VARIABLES] boolean  isExtern  Node  cur  n  String  name  
[BugLab_Variable_Misuse]^if  ( NodeUtil.isGetProp ( cur )  )  {^265^^^^^255^280^if  ( NodeUtil.isGetProp ( n )  )  {^[CLASS] Traversal  [METHOD] safeAlias [RETURN_TYPE] void   Node n [VARIABLES] boolean  isExtern  Node  cur  n  String  name  
[BugLab_Argument_Swapping]^if  (  ( NodeUtil.isName ( rhs )  || NodeUtil.isGetProp ( lhs )  )  && containsName ( lhs )  && !NodeUtil.isFunction ( rhs )  && !NodeUtil.isNew ( rhs )  )  {^283^284^285^286^^282^290^if  (  ( NodeUtil.isName ( lhs )  || NodeUtil.isGetProp ( lhs )  )  && containsName ( rhs )  && !NodeUtil.isFunction ( rhs )  && !NodeUtil.isNew ( rhs )  )  {^[CLASS] Traversal  [METHOD] maybeAliasNamesOnAssign [RETURN_TYPE] void   Node lhs Node rhs [VARIABLES] boolean  isExtern  Node  lhs  rhs  
[BugLab_Wrong_Operator]^if  (  ( NodeUtil.isName ( lhs )  || NodeUtil.isGetProp ( lhs )  )  || containsName ( rhs )  && !NodeUtil.isFunction ( rhs )  && !NodeUtil.isNew ( rhs )  )  {^283^284^285^286^^282^290^if  (  ( NodeUtil.isName ( lhs )  || NodeUtil.isGetProp ( lhs )  )  && containsName ( rhs )  && !NodeUtil.isFunction ( rhs )  && !NodeUtil.isNew ( rhs )  )  {^[CLASS] Traversal  [METHOD] maybeAliasNamesOnAssign [RETURN_TYPE] void   Node lhs Node rhs [VARIABLES] boolean  isExtern  Node  lhs  rhs  
[BugLab_Wrong_Operator]^if  (  ( NodeUtil.isName ( lhs )  && NodeUtil.isGetProp ( lhs )  )  && containsName ( rhs )  && !NodeUtil.isFunction ( rhs )  && !NodeUtil.isNew ( rhs )  )  {^283^284^285^286^^282^290^if  (  ( NodeUtil.isName ( lhs )  || NodeUtil.isGetProp ( lhs )  )  && containsName ( rhs )  && !NodeUtil.isFunction ( rhs )  && !NodeUtil.isNew ( rhs )  )  {^[CLASS] Traversal  [METHOD] maybeAliasNamesOnAssign [RETURN_TYPE] void   Node lhs Node rhs [VARIABLES] boolean  isExtern  Node  lhs  rhs  
[BugLab_Variable_Misuse]^safeAlias ( rhs ) ;^287^^^^^282^290^safeAlias ( lhs ) ;^[CLASS] Traversal  [METHOD] maybeAliasNamesOnAssign [RETURN_TYPE] void   Node lhs Node rhs [VARIABLES] boolean  isExtern  Node  lhs  rhs  
[BugLab_Variable_Misuse]^safeAlias ( lhs ) ;^288^^^^^282^290^safeAlias ( rhs ) ;^[CLASS] Traversal  [METHOD] maybeAliasNamesOnAssign [RETURN_TYPE] void   Node lhs Node rhs [VARIABLES] boolean  isExtern  Node  lhs  rhs  
[BugLab_Variable_Misuse]^if  (  ( NodeUtil.isName ( rhs )  || NodeUtil.isGetProp ( lhs )  )  && containsName ( rhs )  && !NodeUtil.isFunction ( rhs )  && !NodeUtil.isNew ( rhs )  )  {^283^284^285^286^^282^290^if  (  ( NodeUtil.isName ( lhs )  || NodeUtil.isGetProp ( lhs )  )  && containsName ( rhs )  && !NodeUtil.isFunction ( rhs )  && !NodeUtil.isNew ( rhs )  )  {^[CLASS] Traversal  [METHOD] maybeAliasNamesOnAssign [RETURN_TYPE] void   Node lhs Node rhs [VARIABLES] boolean  isExtern  Node  lhs  rhs  
[BugLab_Variable_Misuse]^containsName ( lhs )  && !NodeUtil.isFunction ( rhs )  && !NodeUtil.isNew ( rhs )  )  {^284^285^286^^^282^290^containsName ( rhs )  && !NodeUtil.isFunction ( rhs )  && !NodeUtil.isNew ( rhs )  )  {^[CLASS] Traversal  [METHOD] maybeAliasNamesOnAssign [RETURN_TYPE] void   Node lhs Node rhs [VARIABLES] boolean  isExtern  Node  lhs  rhs  
[BugLab_Variable_Misuse]^!NodeUtil.isNew ( lhs )  )  {^286^^^^^282^290^!NodeUtil.isNew ( rhs )  )  {^[CLASS] Traversal  [METHOD] maybeAliasNamesOnAssign [RETURN_TYPE] void   Node lhs Node rhs [VARIABLES] boolean  isExtern  Node  lhs  rhs  
[BugLab_Argument_Swapping]^graph.defineNameIfNotExists ( isExtern, name ) .setAliased ( true ) ;^293^^^^^292^294^graph.defineNameIfNotExists ( name, isExtern ) .setAliased ( true ) ;^[CLASS] Traversal  [METHOD] defineAndAlias [RETURN_TYPE] void   String name [VARIABLES] boolean  isExtern  String  name  
[BugLab_Wrong_Literal]^graph.defineNameIfNotExists ( name, isExtern ) .setAliased ( false ) ;^293^^^^^292^294^graph.defineNameIfNotExists ( name, isExtern ) .setAliased ( true ) ;^[CLASS] Traversal  [METHOD] defineAndAlias [RETURN_TYPE] void   String name [VARIABLES] boolean  isExtern  String  name  
[BugLab_Variable_Misuse]^Preconditions.checkArgument ( NodeUtil.isCall ( symbol )  ) ;^297^^^^^282^312^Preconditions.checkArgument ( NodeUtil.isCall ( call )  ) ;^[CLASS] Traversal  [METHOD] maybeRecordExport [RETURN_TYPE] void   Node call [VARIABLES] boolean  isExtern  Node  call  getProp  obj  symbol  String  propQName  qName  
[BugLab_Variable_Misuse]^Node getProp = symbol.getFirstChild (  ) ;^298^^^^^283^313^Node getProp = call.getFirstChild (  ) ;^[CLASS] Traversal  [METHOD] maybeRecordExport [RETURN_TYPE] void   Node call [VARIABLES] boolean  isExtern  Node  call  getProp  obj  symbol  String  propQName  qName  
[BugLab_Variable_Misuse]^if  ( !NodeUtil.isGetProp ( symbol )  )  {^299^^^^^284^314^if  ( !NodeUtil.isGetProp ( getProp )  )  {^[CLASS] Traversal  [METHOD] maybeRecordExport [RETURN_TYPE] void   Node call [VARIABLES] boolean  isExtern  Node  call  getProp  obj  symbol  String  propQName  qName  
[BugLab_Variable_Misuse]^String propQName = symbol.getQualifiedName (  ) ;^303^^^^^288^318^String propQName = getProp.getQualifiedName (  ) ;^[CLASS] Traversal  [METHOD] maybeRecordExport [RETURN_TYPE] void   Node call [VARIABLES] boolean  isExtern  Node  call  getProp  obj  symbol  String  propQName  qName  
[BugLab_Variable_Misuse]^if  ( qName == null )  {^305^^^^^290^320^if  ( propQName == null )  {^[CLASS] Traversal  [METHOD] maybeRecordExport [RETURN_TYPE] void   Node call [VARIABLES] boolean  isExtern  Node  call  getProp  obj  symbol  String  propQName  qName  
[BugLab_Wrong_Operator]^if  ( propQName != null )  {^305^^^^^290^320^if  ( propQName == null )  {^[CLASS] Traversal  [METHOD] maybeRecordExport [RETURN_TYPE] void   Node call [VARIABLES] boolean  isExtern  Node  call  getProp  obj  symbol  String  propQName  qName  
[BugLab_Variable_Misuse]^if  ( qName.endsWith ( ".call" )  || propQName.endsWith ( ".apply" )  )  {^311^^^^^296^326^if  ( propQName.endsWith ( ".call" )  || propQName.endsWith ( ".apply" )  )  {^[CLASS] Traversal  [METHOD] maybeRecordExport [RETURN_TYPE] void   Node call [VARIABLES] boolean  isExtern  Node  call  getProp  obj  symbol  String  propQName  qName  
[BugLab_Wrong_Operator]^if  ( propQName.endsWith ( ".call" )  && propQName.endsWith ( ".apply" )  )  {^311^^^^^296^326^if  ( propQName.endsWith ( ".call" )  || propQName.endsWith ( ".apply" )  )  {^[CLASS] Traversal  [METHOD] maybeRecordExport [RETURN_TYPE] void   Node call [VARIABLES] boolean  isExtern  Node  call  getProp  obj  symbol  String  propQName  qName  
[BugLab_Variable_Misuse]^graph.defineNameIfNotExists ( symbol.getFirstChild (  ) .getQualifiedName (  ) , isExtern ) .markExposedToCallOrApply (  ) ;^312^313^^^^297^327^graph.defineNameIfNotExists ( getProp.getFirstChild (  ) .getQualifiedName (  ) , isExtern ) .markExposedToCallOrApply (  ) ;^[CLASS] Traversal  [METHOD] maybeRecordExport [RETURN_TYPE] void   Node call [VARIABLES] boolean  isExtern  Node  call  getProp  obj  symbol  String  propQName  qName  
[BugLab_Argument_Swapping]^graph.defineNameIfNotExists ( isExtern.getFirstChild (  ) .getQualifiedName (  ) , getProp ) .markExposedToCallOrApply (  ) ;^312^313^^^^297^327^graph.defineNameIfNotExists ( getProp.getFirstChild (  ) .getQualifiedName (  ) , isExtern ) .markExposedToCallOrApply (  ) ;^[CLASS] Traversal  [METHOD] maybeRecordExport [RETURN_TYPE] void   Node call [VARIABLES] boolean  isExtern  Node  call  getProp  obj  symbol  String  propQName  qName  
[BugLab_Variable_Misuse]^if  ( !"goog.exportSymbol".equals ( qName )  )  {^316^^^^^301^331^if  ( !"goog.exportSymbol".equals ( propQName )  )  {^[CLASS] Traversal  [METHOD] maybeRecordExport [RETURN_TYPE] void   Node call [VARIABLES] boolean  isExtern  Node  call  getProp  obj  symbol  String  propQName  qName  
[BugLab_Variable_Misuse]^Node symbol = obj.getNext (  ) ;^320^^^^^305^335^Node symbol = getProp.getNext (  ) ;^[CLASS] Traversal  [METHOD] maybeRecordExport [RETURN_TYPE] void   Node call [VARIABLES] boolean  isExtern  Node  call  getProp  obj  symbol  String  propQName  qName  
[BugLab_Variable_Misuse]^Node symbol = symbol.getNext (  ) ;^320^^^^^305^335^Node symbol = getProp.getNext (  ) ;^[CLASS] Traversal  [METHOD] maybeRecordExport [RETURN_TYPE] void   Node call [VARIABLES] boolean  isExtern  Node  call  getProp  obj  symbol  String  propQName  qName  
[BugLab_Variable_Misuse]^if  ( !NodeUtil.isString ( obj )  )  {^321^^^^^306^336^if  ( !NodeUtil.isString ( symbol )  )  {^[CLASS] Traversal  [METHOD] maybeRecordExport [RETURN_TYPE] void   Node call [VARIABLES] boolean  isExtern  Node  call  getProp  obj  symbol  String  propQName  qName  
[BugLab_Variable_Misuse]^Node obj = getProp.getNext (  ) ;^325^^^^^310^340^Node obj = symbol.getNext (  ) ;^[CLASS] Traversal  [METHOD] maybeRecordExport [RETURN_TYPE] void   Node call [VARIABLES] boolean  isExtern  Node  call  getProp  obj  symbol  String  propQName  qName  
[BugLab_Variable_Misuse]^Node obj = obj.getNext (  ) ;^325^^^^^310^340^Node obj = symbol.getNext (  ) ;^[CLASS] Traversal  [METHOD] maybeRecordExport [RETURN_TYPE] void   Node call [VARIABLES] boolean  isExtern  Node  call  getProp  obj  symbol  String  propQName  qName  
[BugLab_Variable_Misuse]^String qName = symbol.getQualifiedName (  ) ;^326^^^^^311^341^String qName = obj.getQualifiedName (  ) ;^[CLASS] Traversal  [METHOD] maybeRecordExport [RETURN_TYPE] void   Node call [VARIABLES] boolean  isExtern  Node  call  getProp  obj  symbol  String  propQName  qName  
[BugLab_Variable_Misuse]^if  ( propQName == null || obj.getNext (  )  != null )  {^328^^^^^313^343^if  ( qName == null || obj.getNext (  )  != null )  {^[CLASS] Traversal  [METHOD] maybeRecordExport [RETURN_TYPE] void   Node call [VARIABLES] boolean  isExtern  Node  call  getProp  obj  symbol  String  propQName  qName  
[BugLab_Variable_Misuse]^if  ( qName == null || symbol.getNext (  )  != null )  {^328^^^^^313^343^if  ( qName == null || obj.getNext (  )  != null )  {^[CLASS] Traversal  [METHOD] maybeRecordExport [RETURN_TYPE] void   Node call [VARIABLES] boolean  isExtern  Node  call  getProp  obj  symbol  String  propQName  qName  
[BugLab_Argument_Swapping]^if  ( obj == null || qName.getNext (  )  != null )  {^328^^^^^313^343^if  ( qName == null || obj.getNext (  )  != null )  {^[CLASS] Traversal  [METHOD] maybeRecordExport [RETURN_TYPE] void   Node call [VARIABLES] boolean  isExtern  Node  call  getProp  obj  symbol  String  propQName  qName  
[BugLab_Wrong_Operator]^if  ( qName == null && obj.getNext (  )  != null )  {^328^^^^^313^343^if  ( qName == null || obj.getNext (  )  != null )  {^[CLASS] Traversal  [METHOD] maybeRecordExport [RETURN_TYPE] void   Node call [VARIABLES] boolean  isExtern  Node  call  getProp  obj  symbol  String  propQName  qName  
[BugLab_Wrong_Operator]^if  ( qName != null || obj.getNext (  )  != null )  {^328^^^^^313^343^if  ( qName == null || obj.getNext (  )  != null )  {^[CLASS] Traversal  [METHOD] maybeRecordExport [RETURN_TYPE] void   Node call [VARIABLES] boolean  isExtern  Node  call  getProp  obj  symbol  String  propQName  qName  
[BugLab_Wrong_Operator]^if  ( qName == null || obj.getNext (  )  == null )  {^328^^^^^313^343^if  ( qName == null || obj.getNext (  )  != null )  {^[CLASS] Traversal  [METHOD] maybeRecordExport [RETURN_TYPE] void   Node call [VARIABLES] boolean  isExtern  Node  call  getProp  obj  symbol  String  propQName  qName  
[BugLab_Variable_Misuse]^graph.defineNameIfNotExists ( propQName, false ) .markExported (  ) ;^332^^^^^317^347^graph.defineNameIfNotExists ( qName, false ) .markExported (  ) ;^[CLASS] Traversal  [METHOD] maybeRecordExport [RETURN_TYPE] void   Node call [VARIABLES] boolean  isExtern  Node  call  getProp  obj  symbol  String  propQName  qName  
[BugLab_Wrong_Literal]^graph.defineNameIfNotExists ( qName, true ) .markExported (  ) ;^332^^^^^317^347^graph.defineNameIfNotExists ( qName, false ) .markExported (  ) ;^[CLASS] Traversal  [METHOD] maybeRecordExport [RETURN_TYPE] void   Node call [VARIABLES] boolean  isExtern  Node  call  getProp  obj  symbol  String  propQName  qName  
[BugLab_Wrong_Operator]^return v != null || v.isLocal (  ) ;^343^^^^^338^346^return v != null && v.isLocal (  ) ;^[CLASS] Traversal  [METHOD] isLocalNameReference [RETURN_TYPE] boolean   NodeTraversal t Node n [VARIABLES] boolean  isExtern  NodeTraversal  t  Var  v  Node  n  
[BugLab_Wrong_Operator]^return v == null && v.isLocal (  ) ;^343^^^^^338^346^return v != null && v.isLocal (  ) ;^[CLASS] Traversal  [METHOD] isLocalNameReference [RETURN_TYPE] boolean   NodeTraversal t Node n [VARIABLES] boolean  isExtern  NodeTraversal  t  Var  v  Node  n  
[BugLab_Argument_Swapping]^Var v = n.getScope (  ) .getVar ( t.getString (  )  ) ;^342^^^^^338^346^Var v = t.getScope (  ) .getVar ( n.getString (  )  ) ;^[CLASS] Traversal  [METHOD] isLocalNameReference [RETURN_TYPE] boolean   NodeTraversal t Node n [VARIABLES] boolean  isExtern  NodeTraversal  t  Var  v  Node  n  
[BugLab_Wrong_Literal]^return true;^345^^^^^338^346^return false;^[CLASS] Traversal  [METHOD] isLocalNameReference [RETURN_TYPE] boolean   NodeTraversal t Node n [VARIABLES] boolean  isExtern  NodeTraversal  t  Var  v  Node  n  
[BugLab_Wrong_Operator]^Preconditions.checkArgument ( NodeUtil.isName ( n )  && NodeUtil.isGetProp ( n )  ) ;^352^^^^^351^362^Preconditions.checkArgument ( NodeUtil.isName ( n )  || NodeUtil.isGetProp ( n )  ) ;^[CLASS] Traversal  [METHOD] isStaticNameReference [RETURN_TYPE] boolean   Node n Scope scope [VARIABLES] boolean  isExtern  String  qName  Scope  scope  Node  n  
[BugLab_Wrong_Literal]^return false;^354^^^^^351^362^return true;^[CLASS] Traversal  [METHOD] isStaticNameReference [RETURN_TYPE] boolean   Node n Scope scope [VARIABLES] boolean  isExtern  String  qName  Scope  scope  Node  n  
[BugLab_Wrong_Operator]^if  ( qName != null )  {^357^^^^^351^362^if  ( qName == null )  {^[CLASS] Traversal  [METHOD] isStaticNameReference [RETURN_TYPE] boolean   Node n Scope scope [VARIABLES] boolean  isExtern  String  qName  Scope  scope  Node  n  
[BugLab_Wrong_Literal]^return true;^358^^^^^351^362^return false;^[CLASS] Traversal  [METHOD] isStaticNameReference [RETURN_TYPE] boolean   Node n Scope scope [VARIABLES] boolean  isExtern  String  qName  Scope  scope  Node  n  
[BugLab_Argument_Swapping]^return qName.isDeclared ( scope, true ) ;^361^^^^^351^362^return scope.isDeclared ( qName, true ) ;^[CLASS] Traversal  [METHOD] isStaticNameReference [RETURN_TYPE] boolean   Node n Scope scope [VARIABLES] boolean  isExtern  String  qName  Scope  scope  Node  n  
[BugLab_Wrong_Literal]^return scope.isDeclared ( qName, false ) ;^361^^^^^351^362^return scope.isDeclared ( qName, true ) ;^[CLASS] Traversal  [METHOD] isStaticNameReference [RETURN_TYPE] boolean   Node n Scope scope [VARIABLES] boolean  isExtern  String  qName  Scope  scope  Node  n  
[BugLab_Wrong_Literal]^return true;^369^^^^^367^376^return false;^[CLASS] Traversal  [METHOD] isPrototypeNameReference [RETURN_TYPE] boolean   Node n [VARIABLES] boolean  isExtern  Node  n  JSType  type  
[BugLab_Wrong_Operator]^if  ( type.isUnknownType (  )  && type.isUnionType (  )  )  {^372^^^^^367^376^if  ( type.isUnknownType (  )  || type.isUnionType (  )  )  {^[CLASS] Traversal  [METHOD] isPrototypeNameReference [RETURN_TYPE] boolean   Node n [VARIABLES] boolean  isExtern  Node  n  JSType  type  
[BugLab_Wrong_Literal]^return true;^373^^^^^367^376^return false;^[CLASS] Traversal  [METHOD] isPrototypeNameReference [RETURN_TYPE] boolean   Node n [VARIABLES] boolean  isExtern  Node  n  JSType  type  
[BugLab_Wrong_Operator]^return  ( type instanceof InstanceObjectType && type.autoboxesTo (  )  != null ) ;^375^^^^^367^376^return  ( type instanceof InstanceObjectType || type.autoboxesTo (  )  != null ) ;^[CLASS] Traversal  [METHOD] isPrototypeNameReference [RETURN_TYPE] boolean   Node n [VARIABLES] boolean  isExtern  Node  n  JSType  type  
[BugLab_Wrong_Operator]^return  ( type  <<  InstanceObjectType || type.autoboxesTo (  )  != null ) ;^375^^^^^367^376^return  ( type instanceof InstanceObjectType || type.autoboxesTo (  )  != null ) ;^[CLASS] Traversal  [METHOD] isPrototypeNameReference [RETURN_TYPE] boolean   Node n [VARIABLES] boolean  isExtern  Node  n  JSType  type  
[BugLab_Wrong_Operator]^return  ( type instanceof InstanceObjectType || type.autoboxesTo (  )  == null ) ;^375^^^^^367^376^return  ( type instanceof InstanceObjectType || type.autoboxesTo (  )  != null ) ;^[CLASS] Traversal  [METHOD] isPrototypeNameReference [RETURN_TYPE] boolean   Node n [VARIABLES] boolean  isExtern  Node  n  JSType  type  
[BugLab_Wrong_Operator]^if  ( getNamedContainingFunction (  )  <= graph.MAIN )  {^380^^^^^378^398^if  ( getNamedContainingFunction (  )  != graph.MAIN )  {^[CLASS] Traversal  [METHOD] recordStaticNameDefinition [RETURN_TYPE] Name   NodeTraversal t String name JSType type Node n Node parent Node gParent Node rValue [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  n  parent  rValue  Name  symbol  
[BugLab_Wrong_Operator]^if  ( type.isFunctionType (  )  || type.isConstructor (  )  )  {^385^^^^^378^398^if  ( type.isFunctionType (  )  && type.isConstructor (  )  )  {^[CLASS] Traversal  [METHOD] recordStaticNameDefinition [RETURN_TYPE] Name   NodeTraversal t String name JSType type Node n Node parent Node gParent Node rValue [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  n  parent  rValue  Name  symbol  
[BugLab_Variable_Misuse]^symbol.addFunctionDeclaration ( rValue ) ;^394^^^^^378^398^symbol.addFunctionDeclaration ( n ) ;^[CLASS] Traversal  [METHOD] recordStaticNameDefinition [RETURN_TYPE] Name   NodeTraversal t String name JSType type Node n Node parent Node gParent Node rValue [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  n  parent  rValue  Name  symbol  
[BugLab_Variable_Misuse]^Name symbol = this.defineNameIfNotExists ( name, isExtern ) ;^389^^^^^378^398^Name symbol = graph.defineNameIfNotExists ( name, isExtern ) ;^[CLASS] Traversal  [METHOD] recordStaticNameDefinition [RETURN_TYPE] Name   NodeTraversal t String name JSType type Node n Node parent Node gParent Node rValue [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  n  parent  rValue  Name  symbol  
[BugLab_Argument_Swapping]^Name symbol = graph.defineNameIfNotExists ( isExtern, name ) ;^389^^^^^378^398^Name symbol = graph.defineNameIfNotExists ( name, isExtern ) ;^[CLASS] Traversal  [METHOD] recordStaticNameDefinition [RETURN_TYPE] Name   NodeTraversal t String name JSType type Node n Node parent Node gParent Node rValue [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  n  parent  rValue  Name  symbol  
[BugLab_Argument_Swapping]^Name symbol = name.defineNameIfNotExists ( graph, isExtern ) ;^389^^^^^378^398^Name symbol = graph.defineNameIfNotExists ( name, isExtern ) ;^[CLASS] Traversal  [METHOD] recordStaticNameDefinition [RETURN_TYPE] Name   NodeTraversal t String name JSType type Node n Node parent Node gParent Node rValue [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  n  parent  rValue  Name  symbol  
[BugLab_Argument_Swapping]^Name symbol = isExtern.defineNameIfNotExists ( name, graph ) ;^389^^^^^378^398^Name symbol = graph.defineNameIfNotExists ( name, isExtern ) ;^[CLASS] Traversal  [METHOD] recordStaticNameDefinition [RETURN_TYPE] Name   NodeTraversal t String name JSType type Node n Node parent Node gParent Node rValue [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  n  parent  rValue  Name  symbol  
[BugLab_Variable_Misuse]^Name symbol = null.defineNameIfNotExists ( name, isExtern ) ;^389^^^^^378^398^Name symbol = graph.defineNameIfNotExists ( name, isExtern ) ;^[CLASS] Traversal  [METHOD] recordStaticNameDefinition [RETURN_TYPE] Name   NodeTraversal t String name JSType type Node n Node parent Node gParent Node rValue [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  n  parent  rValue  Name  symbol  
[BugLab_Variable_Misuse]^if  ( NodeUtil.isAssign ( rValue )  )  {^391^^^^^378^398^if  ( NodeUtil.isAssign ( n )  )  {^[CLASS] Traversal  [METHOD] recordStaticNameDefinition [RETURN_TYPE] Name   NodeTraversal t String name JSType type Node n Node parent Node gParent Node rValue [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  n  parent  rValue  Name  symbol  
[BugLab_Variable_Misuse]^symbol.addAssignmentDeclaration ( rValue ) ;^392^^^^^378^398^symbol.addAssignmentDeclaration ( n ) ;^[CLASS] Traversal  [METHOD] recordStaticNameDefinition [RETURN_TYPE] Name   NodeTraversal t String name JSType type Node n Node parent Node gParent Node rValue [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  n  parent  rValue  Name  symbol  
[BugLab_Variable_Misuse]^return recordClassConstructorOrInterface ( rValueame,  ( FunctionType )  type, n, parent, parent.getParent (  ) , rValue ) ;^386^387^^^^378^398^return recordClassConstructorOrInterface ( name,  ( FunctionType )  type, n, parent, parent.getParent (  ) , rValue ) ;^[CLASS] Traversal  [METHOD] recordStaticNameDefinition [RETURN_TYPE] Name   NodeTraversal t String name JSType type Node n Node parent Node gParent Node rValue [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  n  parent  rValue  Name  symbol  
[BugLab_Variable_Misuse]^return recordClassConstructorOrInterface ( name,  ( FunctionType )  type, n, rValue, parent.getParent (  ) , rValue ) ;^386^387^^^^378^398^return recordClassConstructorOrInterface ( name,  ( FunctionType )  type, n, parent, parent.getParent (  ) , rValue ) ;^[CLASS] Traversal  [METHOD] recordStaticNameDefinition [RETURN_TYPE] Name   NodeTraversal t String name JSType type Node n Node parent Node gParent Node rValue [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  n  parent  rValue  Name  symbol  
[BugLab_Variable_Misuse]^return recordClassConstructorOrInterface ( name,  ( FunctionType )  type, n, parent, parent.getParent (  ) , parent ) ;^386^387^^^^378^398^return recordClassConstructorOrInterface ( name,  ( FunctionType )  type, n, parent, parent.getParent (  ) , rValue ) ;^[CLASS] Traversal  [METHOD] recordStaticNameDefinition [RETURN_TYPE] Name   NodeTraversal t String name JSType type Node n Node parent Node gParent Node rValue [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  n  parent  rValue  Name  symbol  
[BugLab_Argument_Swapping]^return recordClassConstructorOrInterface ( n,  ( FunctionType )  type, name, parent, parent.getParent (  ) , rValue ) ;^386^387^^^^378^398^return recordClassConstructorOrInterface ( name,  ( FunctionType )  type, n, parent, parent.getParent (  ) , rValue ) ;^[CLASS] Traversal  [METHOD] recordStaticNameDefinition [RETURN_TYPE] Name   NodeTraversal t String name JSType type Node n Node parent Node gParent Node rValue [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  n  parent  rValue  Name  symbol  
[BugLab_Argument_Swapping]^return recordClassConstructorOrInterface ( rValueame,  ( FunctionType )  type, n, parent, parent.getParent (  ) , n ) ;^386^387^^^^378^398^return recordClassConstructorOrInterface ( name,  ( FunctionType )  type, n, parent, parent.getParent (  ) , rValue ) ;^[CLASS] Traversal  [METHOD] recordStaticNameDefinition [RETURN_TYPE] Name   NodeTraversal t String name JSType type Node n Node parent Node gParent Node rValue [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  n  parent  rValue  Name  symbol  
[BugLab_Argument_Swapping]^return recordClassConstructorOrInterface ( name,  ( FunctionType )  type, n, rValue, parent.getParent (  ) , parent ) ;^386^387^^^^378^398^return recordClassConstructorOrInterface ( name,  ( FunctionType )  type, n, parent, parent.getParent (  ) , rValue ) ;^[CLASS] Traversal  [METHOD] recordStaticNameDefinition [RETURN_TYPE] Name   NodeTraversal t String name JSType type Node n Node parent Node gParent Node rValue [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  n  parent  rValue  Name  symbol  
[BugLab_Variable_Misuse]^return recordClassConstructorOrInterface ( parentame,  ( FunctionType )  type, n, parent, parent.getParent (  ) , rValue ) ;^386^387^^^^378^398^return recordClassConstructorOrInterface ( name,  ( FunctionType )  type, n, parent, parent.getParent (  ) , rValue ) ;^[CLASS] Traversal  [METHOD] recordStaticNameDefinition [RETURN_TYPE] Name   NodeTraversal t String name JSType type Node n Node parent Node gParent Node rValue [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  n  parent  rValue  Name  symbol  
[BugLab_Variable_Misuse]^return recordClassConstructorOrInterface ( name,  ( FunctionType )  type, n, parent, parent.getParent (  ) , n ) ;^386^387^^^^378^398^return recordClassConstructorOrInterface ( name,  ( FunctionType )  type, n, parent, parent.getParent (  ) , rValue ) ;^[CLASS] Traversal  [METHOD] recordStaticNameDefinition [RETURN_TYPE] Name   NodeTraversal t String name JSType type Node n Node parent Node gParent Node rValue [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  n  parent  rValue  Name  symbol  
[BugLab_Variable_Misuse]^name,  ( FunctionType )  type, n, rValue, parent.getParent (  ) , rValue ) ;^387^^^^^378^398^name,  ( FunctionType )  type, n, parent, parent.getParent (  ) , rValue ) ;^[CLASS] Traversal  [METHOD] recordStaticNameDefinition [RETURN_TYPE] Name   NodeTraversal t String name JSType type Node n Node parent Node gParent Node rValue [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  n  parent  rValue  Name  symbol  
[BugLab_Argument_Swapping]^return recordClassConstructorOrInterface ( parent,  ( FunctionType )  type, n, name, parent.getParent (  ) , rValue ) ;^386^387^^^^378^398^return recordClassConstructorOrInterface ( name,  ( FunctionType )  type, n, parent, parent.getParent (  ) , rValue ) ;^[CLASS] Traversal  [METHOD] recordStaticNameDefinition [RETURN_TYPE] Name   NodeTraversal t String name JSType type Node n Node parent Node gParent Node rValue [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  n  parent  rValue  Name  symbol  
[BugLab_Argument_Swapping]^return recordClassConstructorOrInterface ( parentame,  ( FunctionType )  type, n, n, parent.getParent (  ) , rValue ) ;^386^387^^^^378^398^return recordClassConstructorOrInterface ( name,  ( FunctionType )  type, n, parent, parent.getParent (  ) , rValue ) ;^[CLASS] Traversal  [METHOD] recordStaticNameDefinition [RETURN_TYPE] Name   NodeTraversal t String name JSType type Node n Node parent Node gParent Node rValue [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  n  parent  rValue  Name  symbol  
[BugLab_Argument_Swapping]^return recordClassConstructorOrInterface ( rValue,  ( FunctionType )  type, n, parent, parent.getParent (  ) , name ) ;^386^387^^^^378^398^return recordClassConstructorOrInterface ( name,  ( FunctionType )  type, n, parent, parent.getParent (  ) , rValue ) ;^[CLASS] Traversal  [METHOD] recordStaticNameDefinition [RETURN_TYPE] Name   NodeTraversal t String name JSType type Node n Node parent Node gParent Node rValue [VARIABLES] boolean  isExtern  String  name  JSType  type  NodeTraversal  t  Node  gParent  n  parent  rValue  Name  symbol  
[BugLab_Variable_Misuse]^JSType constructor = getType ( NodeUtil.getPrototypeClassName ( parent )  ) ;^407^^^^^406^435^JSType constructor = getType ( NodeUtil.getPrototypeClassName ( qName )  ) ;^[CLASS] Traversal  [METHOD] recordPrototypePropDefinition [RETURN_TYPE] Name   NodeTraversal t Node qName JSType type Node assign Node parent Node gParent [VARIABLES] boolean  isExtern  JSType  constructor  type  NodeTraversal  t  Node  assign  gParent  parent  qName  FunctionType  classType  String  className  qNameStr  Name  prototypeProp  
[BugLab_Variable_Misuse]^if  ( type instanceof FunctionType && constructor.isConstructor (  )  )  {^411^^^^^406^435^if  ( constructor instanceof FunctionType && constructor.isConstructor (  )  )  {^[CLASS] Traversal  [METHOD] recordPrototypePropDefinition [RETURN_TYPE] Name   NodeTraversal t Node qName JSType type Node assign Node parent Node gParent [VARIABLES] boolean  isExtern  JSType  constructor  type  NodeTraversal  t  Node  assign  gParent  parent  qName  FunctionType  classType  String  className  qNameStr  Name  prototypeProp  
[BugLab_Wrong_Operator]^if  ( constructor instanceof FunctionType || constructor.isConstructor (  )  )  {^411^^^^^406^435^if  ( constructor instanceof FunctionType && constructor.isConstructor (  )  )  {^[CLASS] Traversal  [METHOD] recordPrototypePropDefinition [RETURN_TYPE] Name   NodeTraversal t Node qName JSType type Node assign Node parent Node gParent [VARIABLES] boolean  isExtern  JSType  constructor  type  NodeTraversal  t  Node  assign  gParent  parent  qName  FunctionType  classType  String  className  qNameStr  Name  prototypeProp  
[BugLab_Wrong_Operator]^if  ( constructor  <<  FunctionType && constructor.isConstructor (  )  )  {^411^^^^^406^435^if  ( constructor instanceof FunctionType && constructor.isConstructor (  )  )  {^[CLASS] Traversal  [METHOD] recordPrototypePropDefinition [RETURN_TYPE] Name   NodeTraversal t Node qName JSType type Node assign Node parent Node gParent [VARIABLES] boolean  isExtern  JSType  constructor  type  NodeTraversal  t  Node  assign  gParent  parent  qName  FunctionType  classType  String  className  qNameStr  Name  prototypeProp  
[BugLab_Variable_Misuse]^className = NodeUtil.getPrototypeClassName ( parent ) .getQualifiedName (  ) ;^419^^^^^411^420^className = NodeUtil.getPrototypeClassName ( qName ) .getQualifiedName (  ) ;^[CLASS] Traversal  [METHOD] recordPrototypePropDefinition [RETURN_TYPE] Name   NodeTraversal t Node qName JSType type Node assign Node parent Node gParent [VARIABLES] boolean  isExtern  JSType  constructor  type  NodeTraversal  t  Node  assign  gParent  parent  qName  FunctionType  classType  String  className  qNameStr  Name  prototypeProp  
[BugLab_Variable_Misuse]^className = NodeUtil.getPrototypeClassName ( parent ) .getQualifiedName (  ) ;^419^^^^^406^435^className = NodeUtil.getPrototypeClassName ( qName ) .getQualifiedName (  ) ;^[CLASS] Traversal  [METHOD] recordPrototypePropDefinition [RETURN_TYPE] Name   NodeTraversal t Node qName JSType type Node assign Node parent Node gParent [VARIABLES] boolean  isExtern  JSType  constructor  type  NodeTraversal  t  Node  assign  gParent  parent  qName  FunctionType  classType  String  className  qNameStr  Name  prototypeProp  
[BugLab_Variable_Misuse]^recordClassConstructorOrInterface ( qNameStr, classType, null, null, null, null ) ;^422^423^^^^406^435^recordClassConstructorOrInterface ( className, classType, null, null, null, null ) ;^[CLASS] Traversal  [METHOD] recordPrototypePropDefinition [RETURN_TYPE] Name   NodeTraversal t Node qName JSType type Node assign Node parent Node gParent [VARIABLES] boolean  isExtern  JSType  constructor  type  NodeTraversal  t  Node  assign  gParent  parent  qName  FunctionType  classType  String  className  qNameStr  Name  prototypeProp  
[BugLab_Argument_Swapping]^recordClassConstructorOrInterface ( classType, className, null, null, null, null ) ;^422^423^^^^406^435^recordClassConstructorOrInterface ( className, classType, null, null, null, null ) ;^[CLASS] Traversal  [METHOD] recordPrototypePropDefinition [RETURN_TYPE] Name   NodeTraversal t Node qName JSType type Node assign Node parent Node gParent [VARIABLES] boolean  isExtern  JSType  constructor  type  NodeTraversal  t  Node  assign  gParent  parent  qName  FunctionType  classType  String  className  qNameStr  Name  prototypeProp  
[BugLab_Variable_Misuse]^String parentStr = className + ".prototype." + NodeUtil.getPrototypePropertyName ( qName ) ;^425^426^^^^406^435^String qNameStr = className + ".prototype." + NodeUtil.getPrototypePropertyName ( qName ) ;^[CLASS] Traversal  [METHOD] recordPrototypePropDefinition [RETURN_TYPE] Name   NodeTraversal t Node qName JSType type Node assign Node parent Node gParent [VARIABLES] boolean  isExtern  JSType  constructor  type  NodeTraversal  t  Node  assign  gParent  parent  qName  FunctionType  classType  String  className  qNameStr  Name  prototypeProp  
[BugLab_Argument_Swapping]^String classNameStr = qName + ".prototype." + NodeUtil.getPrototypePropertyName ( qName ) ;^425^426^^^^406^435^String qNameStr = className + ".prototype." + NodeUtil.getPrototypePropertyName ( qName ) ;^[CLASS] Traversal  [METHOD] recordPrototypePropDefinition [RETURN_TYPE] Name   NodeTraversal t Node qName JSType type Node assign Node parent Node gParent [VARIABLES] boolean  isExtern  JSType  constructor  type  NodeTraversal  t  Node  assign  gParent  parent  qName  FunctionType  classType  String  className  qNameStr  Name  prototypeProp  
[BugLab_Variable_Misuse]^NodeUtil.getPrototypePropertyName ( parent ) ;^426^^^^^406^435^NodeUtil.getPrototypePropertyName ( qName ) ;^[CLASS] Traversal  [METHOD] recordPrototypePropDefinition [RETURN_TYPE] Name   NodeTraversal t Node qName JSType type Node assign Node parent Node gParent [VARIABLES] boolean  isExtern  JSType  constructor  type  NodeTraversal  t  Node  assign  gParent  parent  qName  FunctionType  classType  String  className  qNameStr  Name  prototypeProp  
[BugLab_Variable_Misuse]^Name prototypeProp = graph.defineNameIfNotExists ( className, isExtern ) ;^427^^^^^406^435^Name prototypeProp = graph.defineNameIfNotExists ( qNameStr, isExtern ) ;^[CLASS] Traversal  [METHOD] recordPrototypePropDefinition [RETURN_TYPE] Name   NodeTraversal t Node qName JSType type Node assign Node parent Node gParent [VARIABLES] boolean  isExtern  JSType  constructor  type  NodeTraversal  t  Node  assign  gParent  parent  qName  FunctionType  classType  String  className  qNameStr  Name  prototypeProp  
[BugLab_Argument_Swapping]^Name prototypeProp = qNameStr.defineNameIfNotExists ( graph, isExtern ) ;^427^^^^^406^435^Name prototypeProp = graph.defineNameIfNotExists ( qNameStr, isExtern ) ;^[CLASS] Traversal  [METHOD] recordPrototypePropDefinition [RETURN_TYPE] Name   NodeTraversal t Node qName JSType type Node assign Node parent Node gParent [VARIABLES] boolean  isExtern  JSType  constructor  type  NodeTraversal  t  Node  assign  gParent  parent  qName  FunctionType  classType  String  className  qNameStr  Name  prototypeProp  
[BugLab_Argument_Swapping]^Name prototypeProp = isExtern.defineNameIfNotExists ( qNameStr, graph ) ;^427^^^^^406^435^Name prototypeProp = graph.defineNameIfNotExists ( qNameStr, isExtern ) ;^[CLASS] Traversal  [METHOD] recordPrototypePropDefinition [RETURN_TYPE] Name   NodeTraversal t Node qName JSType type Node assign Node parent Node gParent [VARIABLES] boolean  isExtern  JSType  constructor  type  NodeTraversal  t  Node  assign  gParent  parent  qName  FunctionType  classType  String  className  qNameStr  Name  prototypeProp  
[BugLab_Argument_Swapping]^Name prototypeProp = graph.defineNameIfNotExists ( isExtern, qNameStr ) ;^427^^^^^406^435^Name prototypeProp = graph.defineNameIfNotExists ( qNameStr, isExtern ) ;^[CLASS] Traversal  [METHOD] recordPrototypePropDefinition [RETURN_TYPE] Name   NodeTraversal t Node qName JSType type Node assign Node parent Node gParent [VARIABLES] boolean  isExtern  JSType  constructor  type  NodeTraversal  t  Node  assign  gParent  parent  qName  FunctionType  classType  String  className  qNameStr  Name  prototypeProp  
[BugLab_Variable_Misuse]^Preconditions.checkNotNull ( prototypeProp, className + " should be in the name graph as a node." ) ;^428^429^^^^406^435^Preconditions.checkNotNull ( prototypeProp, qNameStr + " should be in the name graph as a node." ) ;^[CLASS] Traversal  [METHOD] recordPrototypePropDefinition [RETURN_TYPE] Name   NodeTraversal t Node qName JSType type Node assign Node parent Node gParent [VARIABLES] boolean  isExtern  JSType  constructor  type  NodeTraversal  t  Node  assign  gParent  parent  qName  FunctionType  classType  String  className  qNameStr  Name  prototypeProp  
[BugLab_Argument_Swapping]^Preconditions.checkNotNull ( qNameStr, prototypeProp + " should be in the name graph as a node." ) ;^428^429^^^^406^435^Preconditions.checkNotNull ( prototypeProp, qNameStr + " should be in the name graph as a node." ) ;^[CLASS] Traversal  [METHOD] recordPrototypePropDefinition [RETURN_TYPE] Name   NodeTraversal t Node qName JSType type Node assign Node parent Node gParent [VARIABLES] boolean  isExtern  JSType  constructor  type  NodeTraversal  t  Node  assign  gParent  parent  qName  FunctionType  classType  String  className  qNameStr  Name  prototypeProp  
[BugLab_Wrong_Operator]^Preconditions.checkNotNull ( prototypeProp, qNameStr  |  " should be in the name graph as a node." ) ;^428^429^^^^406^435^Preconditions.checkNotNull ( prototypeProp, qNameStr + " should be in the name graph as a node." ) ;^[CLASS] Traversal  [METHOD] recordPrototypePropDefinition [RETURN_TYPE] Name   NodeTraversal t Node qName JSType type Node assign Node parent Node gParent [VARIABLES] boolean  isExtern  JSType  constructor  type  NodeTraversal  t  Node  assign  gParent  parent  qName  FunctionType  classType  String  className  qNameStr  Name  prototypeProp  
[BugLab_Variable_Misuse]^if  ( qName != null )  {^430^^^^^406^435^if  ( assign != null )  {^[CLASS] Traversal  [METHOD] recordPrototypePropDefinition [RETURN_TYPE] Name   NodeTraversal t Node qName JSType type Node assign Node parent Node gParent [VARIABLES] boolean  isExtern  JSType  constructor  type  NodeTraversal  t  Node  assign  gParent  parent  qName  FunctionType  classType  String  className  qNameStr  Name  prototypeProp  
[BugLab_Wrong_Operator]^if  ( assign == null )  {^430^^^^^406^435^if  ( assign != null )  {^[CLASS] Traversal  [METHOD] recordPrototypePropDefinition [RETURN_TYPE] Name   NodeTraversal t Node qName JSType type Node assign Node parent Node gParent [VARIABLES] boolean  isExtern  JSType  constructor  type  NodeTraversal  t  Node  assign  gParent  parent  qName  FunctionType  classType  String  className  qNameStr  Name  prototypeProp  
[BugLab_Variable_Misuse]^prototypeProp.addAssignmentDeclaration ( qName ) ;^431^^^^^406^435^prototypeProp.addAssignmentDeclaration ( assign ) ;^[CLASS] Traversal  [METHOD] recordPrototypePropDefinition [RETURN_TYPE] Name   NodeTraversal t Node qName JSType type Node assign Node parent Node gParent [VARIABLES] boolean  isExtern  JSType  constructor  type  NodeTraversal  t  Node  assign  gParent  parent  qName  FunctionType  classType  String  className  qNameStr  Name  prototypeProp  
[BugLab_Variable_Misuse]^prototypeProp.setType ( constructor ) ;^433^^^^^406^435^prototypeProp.setType ( type ) ;^[CLASS] Traversal  [METHOD] recordPrototypePropDefinition [RETURN_TYPE] Name   NodeTraversal t Node qName JSType type Node assign Node parent Node gParent [VARIABLES] boolean  isExtern  JSType  constructor  type  NodeTraversal  t  Node  assign  gParent  parent  qName  FunctionType  classType  String  className  qNameStr  Name  prototypeProp  
[BugLab_Variable_Misuse]^if  ( isExterparent )  {^439^^^^^437^449^if  ( isExtern )  {^[CLASS] Traversal  [METHOD] recordStaticNameUse [RETURN_TYPE] Reference   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Reference  reference  Node  n  parent  Name  name  
[BugLab_Argument_Swapping]^Reference reference = parentew Reference ( n, n ) ;^443^^^^^437^449^Reference reference = new Reference ( n, parent ) ;^[CLASS] Traversal  [METHOD] recordStaticNameUse [RETURN_TYPE] Reference   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Reference  reference  Node  n  parent  Name  name  
[BugLab_Variable_Misuse]^Reference reference = parentew Reference ( n, parent ) ;^443^^^^^437^449^Reference reference = new Reference ( n, parent ) ;^[CLASS] Traversal  [METHOD] recordStaticNameUse [RETURN_TYPE] Reference   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Reference  reference  Node  n  parent  Name  name  
[BugLab_Variable_Misuse]^Reference reference = new Reference ( n, n ) ;^443^^^^^437^449^Reference reference = new Reference ( n, parent ) ;^[CLASS] Traversal  [METHOD] recordStaticNameUse [RETURN_TYPE] Reference   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Reference  reference  Node  n  parent  Name  name  
[BugLab_Variable_Misuse]^Name parentame = graph.defineNameIfNotExists ( n.getQualifiedName (  ) , isExtern ) ;^444^^^^^437^449^Name name = graph.defineNameIfNotExists ( n.getQualifiedName (  ) , isExtern ) ;^[CLASS] Traversal  [METHOD] recordStaticNameUse [RETURN_TYPE] Reference   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Reference  reference  Node  n  parent  Name  name  
[BugLab_Argument_Swapping]^Name isExtername = graph.defineNameIfNotExists ( n.getQualifiedName (  ) , n ) ;^444^^^^^437^449^Name name = graph.defineNameIfNotExists ( n.getQualifiedName (  ) , isExtern ) ;^[CLASS] Traversal  [METHOD] recordStaticNameUse [RETURN_TYPE] Reference   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Reference  reference  Node  n  parent  Name  name  
[BugLab_Argument_Swapping]^Name name = isExtern.defineNameIfNotExists ( n.getQualifiedName (  ) , graph ) ;^444^^^^^437^449^Name name = graph.defineNameIfNotExists ( n.getQualifiedName (  ) , isExtern ) ;^[CLASS] Traversal  [METHOD] recordStaticNameUse [RETURN_TYPE] Reference   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Reference  reference  Node  n  parent  Name  name  
[BugLab_Argument_Swapping]^Name graphame = n.defineNameIfNotExists ( n.getQualifiedName (  ) , isExtern ) ;^444^^^^^437^449^Name name = graph.defineNameIfNotExists ( n.getQualifiedName (  ) , isExtern ) ;^[CLASS] Traversal  [METHOD] recordStaticNameUse [RETURN_TYPE] Reference   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Reference  reference  Node  n  parent  Name  name  
[BugLab_Variable_Misuse]^name.setType ( getType ( parent )  ) ;^445^^^^^437^449^name.setType ( getType ( n )  ) ;^[CLASS] Traversal  [METHOD] recordStaticNameUse [RETURN_TYPE] Reference   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Reference  reference  Node  n  parent  Name  name  
[BugLab_Argument_Swapping]^graph.connect ( getNamedContainingFunction (  ) , name, reference ) ;^446^^^^^437^449^graph.connect ( getNamedContainingFunction (  ) , reference, name ) ;^[CLASS] Traversal  [METHOD] recordStaticNameUse [RETURN_TYPE] Reference   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Reference  reference  Node  n  parent  Name  name  
[BugLab_Variable_Misuse]^Preconditions.checkArgument ( NodeUtil.isGetProp ( parent )  ) ;^453^^^^^452^480^Preconditions.checkArgument ( NodeUtil.isGetProp ( n )  ) ;^[CLASS] Traversal  [METHOD] recordPrototypePropUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ObjectType  objType  boolean  isExtern  JSType  boxedType  instanceType  NodeTraversal  t  Reference  ref  Node  instance  n  parent  FunctionType  constructor  String  propName  
[BugLab_Variable_Misuse]^Node instance = parent.getFirstChild (  ) ;^454^^^^^452^480^Node instance = n.getFirstChild (  ) ;^[CLASS] Traversal  [METHOD] recordPrototypePropUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ObjectType  objType  boolean  isExtern  JSType  boxedType  instanceType  NodeTraversal  t  Reference  ref  Node  instance  n  parent  FunctionType  constructor  String  propName  
[BugLab_Variable_Misuse]^JSType parentType = getType ( instance ) ;^455^^^^^452^480^JSType instanceType = getType ( instance ) ;^[CLASS] Traversal  [METHOD] recordPrototypePropUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ObjectType  objType  boolean  isExtern  JSType  boxedType  instanceType  NodeTraversal  t  Reference  ref  Node  instance  n  parent  FunctionType  constructor  String  propName  
[BugLab_Variable_Misuse]^JSType boxedType = boxedType.autoboxesTo (  ) ;^456^^^^^452^480^JSType boxedType = instanceType.autoboxesTo (  ) ;^[CLASS] Traversal  [METHOD] recordPrototypePropUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ObjectType  objType  boolean  isExtern  JSType  boxedType  instanceType  NodeTraversal  t  Reference  ref  Node  instance  n  parent  FunctionType  constructor  String  propName  
[BugLab_Argument_Swapping]^instanceType = instanceType != null ? boxedType : boxedType;^457^^^^^452^480^instanceType = boxedType != null ? boxedType : instanceType;^[CLASS] Traversal  [METHOD] recordPrototypePropUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ObjectType  objType  boolean  isExtern  JSType  boxedType  instanceType  NodeTraversal  t  Reference  ref  Node  instance  n  parent  FunctionType  constructor  String  propName  
[BugLab_Wrong_Operator]^instanceType = boxedType == null ? boxedType : instanceType;^457^^^^^452^480^instanceType = boxedType != null ? boxedType : instanceType;^[CLASS] Traversal  [METHOD] recordPrototypePropUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ObjectType  objType  boolean  isExtern  JSType  boxedType  instanceType  NodeTraversal  t  Reference  ref  Node  instance  n  parent  FunctionType  constructor  String  propName  
[BugLab_Variable_Misuse]^ObjectType objType = boxedType.toObjectType (  ) ;^460^^^^^452^480^ObjectType objType = instanceType.toObjectType (  ) ;^[CLASS] Traversal  [METHOD] recordPrototypePropUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ObjectType  objType  boolean  isExtern  JSType  boxedType  instanceType  NodeTraversal  t  Reference  ref  Node  instance  n  parent  FunctionType  constructor  String  propName  
[BugLab_Wrong_Operator]^Preconditions.checkState ( objType == null ) ;^461^^^^^452^480^Preconditions.checkState ( objType != null ) ;^[CLASS] Traversal  [METHOD] recordPrototypePropUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ObjectType  objType  boolean  isExtern  JSType  boxedType  instanceType  NodeTraversal  t  Reference  ref  Node  instance  n  parent  FunctionType  constructor  String  propName  
[BugLab_Variable_Misuse]^if  ( !isExterparent )  {^463^^^^^452^480^if  ( !isExtern )  {^[CLASS] Traversal  [METHOD] recordPrototypePropUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ObjectType  objType  boolean  isExtern  JSType  boxedType  instanceType  NodeTraversal  t  Reference  ref  Node  instance  n  parent  FunctionType  constructor  String  propName  
[BugLab_Variable_Misuse]^if  ( constructor != parentull )  {^468^^^^^452^480^if  ( constructor != null )  {^[CLASS] Traversal  [METHOD] recordPrototypePropUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ObjectType  objType  boolean  isExtern  JSType  boxedType  instanceType  NodeTraversal  t  Reference  ref  Node  instance  n  parent  FunctionType  constructor  String  propName  
[BugLab_Wrong_Operator]^if  ( constructor == null )  {^468^^^^^452^480^if  ( constructor != null )  {^[CLASS] Traversal  [METHOD] recordPrototypePropUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ObjectType  objType  boolean  isExtern  JSType  boxedType  instanceType  NodeTraversal  t  Reference  ref  Node  instance  n  parent  FunctionType  constructor  String  propName  
[BugLab_Argument_Swapping]^recordUnknownUse ( n, t, parent ) ;^477^^^^^468^478^recordUnknownUse ( t, n, parent ) ;^[CLASS] Traversal  [METHOD] recordPrototypePropUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ObjectType  objType  boolean  isExtern  JSType  boxedType  instanceType  NodeTraversal  t  Reference  ref  Node  instance  n  parent  FunctionType  constructor  String  propName  
[BugLab_Argument_Swapping]^recordUnknownUse ( t, parent, n ) ;^477^^^^^468^478^recordUnknownUse ( t, n, parent ) ;^[CLASS] Traversal  [METHOD] recordPrototypePropUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ObjectType  objType  boolean  isExtern  JSType  boxedType  instanceType  NodeTraversal  t  Reference  ref  Node  instance  n  parent  FunctionType  constructor  String  propName  
[BugLab_Argument_Swapping]^recordSuperClassPrototypePropUse ( ref, propName, constructor ) ;^471^^^^^452^480^recordSuperClassPrototypePropUse ( constructor, propName, ref ) ;^[CLASS] Traversal  [METHOD] recordPrototypePropUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ObjectType  objType  boolean  isExtern  JSType  boxedType  instanceType  NodeTraversal  t  Reference  ref  Node  instance  n  parent  FunctionType  constructor  String  propName  
[BugLab_Argument_Swapping]^recordSuperClassPrototypePropUse ( constructor, ref, propName ) ;^471^^^^^452^480^recordSuperClassPrototypePropUse ( constructor, propName, ref ) ;^[CLASS] Traversal  [METHOD] recordPrototypePropUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ObjectType  objType  boolean  isExtern  JSType  boxedType  instanceType  NodeTraversal  t  Reference  ref  Node  instance  n  parent  FunctionType  constructor  String  propName  
[BugLab_Variable_Misuse]^String propName = parent.getLastChild (  ) .getString (  ) ;^469^^^^^452^480^String propName = n.getLastChild (  ) .getString (  ) ;^[CLASS] Traversal  [METHOD] recordPrototypePropUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ObjectType  objType  boolean  isExtern  JSType  boxedType  instanceType  NodeTraversal  t  Reference  ref  Node  instance  n  parent  FunctionType  constructor  String  propName  
[BugLab_Argument_Swapping]^recordSuperClassPrototypePropUse ( propName, constructor, ref ) ;^471^^^^^452^480^recordSuperClassPrototypePropUse ( constructor, propName, ref ) ;^[CLASS] Traversal  [METHOD] recordPrototypePropUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ObjectType  objType  boolean  isExtern  JSType  boxedType  instanceType  NodeTraversal  t  Reference  ref  Node  instance  n  parent  FunctionType  constructor  String  propName  
[BugLab_Argument_Swapping]^recordSubclassPrototypePropUse ( ref, propName, constructor ) ;^475^^^^^452^480^recordSubclassPrototypePropUse ( constructor, propName, ref ) ;^[CLASS] Traversal  [METHOD] recordPrototypePropUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ObjectType  objType  boolean  isExtern  JSType  boxedType  instanceType  NodeTraversal  t  Reference  ref  Node  instance  n  parent  FunctionType  constructor  String  propName  
[BugLab_Argument_Swapping]^recordSubclassPrototypePropUse ( constructor, ref, propName ) ;^475^^^^^452^480^recordSubclassPrototypePropUse ( constructor, propName, ref ) ;^[CLASS] Traversal  [METHOD] recordPrototypePropUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ObjectType  objType  boolean  isExtern  JSType  boxedType  instanceType  NodeTraversal  t  Reference  ref  Node  instance  n  parent  FunctionType  constructor  String  propName  
[BugLab_Variable_Misuse]^Reference ref = instanceew Reference ( n, parent ) ;^465^^^^^452^480^Reference ref = new Reference ( n, parent ) ;^[CLASS] Traversal  [METHOD] recordPrototypePropUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ObjectType  objType  boolean  isExtern  JSType  boxedType  instanceType  NodeTraversal  t  Reference  ref  Node  instance  n  parent  FunctionType  constructor  String  propName  
[BugLab_Argument_Swapping]^Reference ref = parentew Reference ( n, n ) ;^465^^^^^452^480^Reference ref = new Reference ( n, parent ) ;^[CLASS] Traversal  [METHOD] recordPrototypePropUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ObjectType  objType  boolean  isExtern  JSType  boxedType  instanceType  NodeTraversal  t  Reference  ref  Node  instance  n  parent  FunctionType  constructor  String  propName  
[BugLab_Variable_Misuse]^Reference ref = parentew Reference ( n, parent ) ;^465^^^^^452^480^Reference ref = new Reference ( n, parent ) ;^[CLASS] Traversal  [METHOD] recordPrototypePropUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ObjectType  objType  boolean  isExtern  JSType  boxedType  instanceType  NodeTraversal  t  Reference  ref  Node  instance  n  parent  FunctionType  constructor  String  propName  
[BugLab_Variable_Misuse]^Reference ref = new Reference ( n, n ) ;^465^^^^^452^480^Reference ref = new Reference ( n, parent ) ;^[CLASS] Traversal  [METHOD] recordPrototypePropUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ObjectType  objType  boolean  isExtern  JSType  boxedType  instanceType  NodeTraversal  t  Reference  ref  Node  instance  n  parent  FunctionType  constructor  String  propName  
[BugLab_Argument_Swapping]^recordSubclassPrototypePropUse ( propName, constructor, ref ) ;^475^^^^^452^480^recordSubclassPrototypePropUse ( constructor, propName, ref ) ;^[CLASS] Traversal  [METHOD] recordPrototypePropUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ObjectType  objType  boolean  isExtern  JSType  boxedType  instanceType  NodeTraversal  t  Reference  ref  Node  instance  n  parent  FunctionType  constructor  String  propName  
[BugLab_Variable_Misuse]^recordUnknownUse ( t, instance, parent ) ;^477^^^^^452^480^recordUnknownUse ( t, n, parent ) ;^[CLASS] Traversal  [METHOD] recordPrototypePropUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ObjectType  objType  boolean  isExtern  JSType  boxedType  instanceType  NodeTraversal  t  Reference  ref  Node  instance  n  parent  FunctionType  constructor  String  propName  
[BugLab_Variable_Misuse]^recordUnknownUse ( t, n, instance ) ;^477^^^^^452^480^recordUnknownUse ( t, n, parent ) ;^[CLASS] Traversal  [METHOD] recordPrototypePropUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ObjectType  objType  boolean  isExtern  JSType  boxedType  instanceType  NodeTraversal  t  Reference  ref  Node  instance  n  parent  FunctionType  constructor  String  propName  
[BugLab_Argument_Swapping]^recordUnknownUse ( parent, n, t ) ;^477^^^^^452^480^recordUnknownUse ( t, n, parent ) ;^[CLASS] Traversal  [METHOD] recordPrototypePropUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ObjectType  objType  boolean  isExtern  JSType  boxedType  instanceType  NodeTraversal  t  Reference  ref  Node  instance  n  parent  FunctionType  constructor  String  propName  
[BugLab_Argument_Swapping]^recordUnknownUse ( n, t, parent ) ;^477^^^^^452^480^recordUnknownUse ( t, n, parent ) ;^[CLASS] Traversal  [METHOD] recordPrototypePropUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ObjectType  objType  boolean  isExtern  JSType  boxedType  instanceType  NodeTraversal  t  Reference  ref  Node  instance  n  parent  FunctionType  constructor  String  propName  
[BugLab_Argument_Swapping]^recordUnknownUse ( t, parent, n ) ;^477^^^^^452^480^recordUnknownUse ( t, n, parent ) ;^[CLASS] Traversal  [METHOD] recordPrototypePropUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ObjectType  objType  boolean  isExtern  JSType  boxedType  instanceType  NodeTraversal  t  Reference  ref  Node  instance  n  parent  FunctionType  constructor  String  propName  
[BugLab_Variable_Misuse]^recordUnknownUse ( t, instance, parent ) ;^477^^^^^468^478^recordUnknownUse ( t, n, parent ) ;^[CLASS] Traversal  [METHOD] recordPrototypePropUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ObjectType  objType  boolean  isExtern  JSType  boxedType  instanceType  NodeTraversal  t  Reference  ref  Node  instance  n  parent  FunctionType  constructor  String  propName  
[BugLab_Variable_Misuse]^recordUnknownUse ( t, n, instance ) ;^477^^^^^468^478^recordUnknownUse ( t, n, parent ) ;^[CLASS] Traversal  [METHOD] recordPrototypePropUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ObjectType  objType  boolean  isExtern  JSType  boxedType  instanceType  NodeTraversal  t  Reference  ref  Node  instance  n  parent  FunctionType  constructor  String  propName  
[BugLab_Variable_Misuse]^Reference ref = new Reference ( n, instance ) ;^465^^^^^452^480^Reference ref = new Reference ( n, parent ) ;^[CLASS] Traversal  [METHOD] recordPrototypePropUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ObjectType  objType  boolean  isExtern  JSType  boxedType  instanceType  NodeTraversal  t  Reference  ref  Node  instance  n  parent  FunctionType  constructor  String  propName  
[BugLab_Variable_Misuse]^FunctionType superClass = superClass.getSuperClassConstructor (  ) ;^487^^^^^485^498^FunctionType superClass = classType.getSuperClassConstructor (  ) ;^[CLASS] Traversal  [METHOD] recordSuperClassPrototypePropUse [RETURN_TYPE] void   FunctionType classType String prop Reference ref [VARIABLES] boolean  isExtern  String  prop  Reference  ref  FunctionType  classType  superClass  
[BugLab_Variable_Misuse]^while  ( classType != null )  {^488^^^^^485^498^while  ( superClass != null )  {^[CLASS] Traversal  [METHOD] recordSuperClassPrototypePropUse [RETURN_TYPE] void   FunctionType classType String prop Reference ref [VARIABLES] boolean  isExtern  String  prop  Reference  ref  FunctionType  classType  superClass  
[BugLab_Wrong_Operator]^while  ( superClass == null )  {^488^^^^^485^498^while  ( superClass != null )  {^[CLASS] Traversal  [METHOD] recordSuperClassPrototypePropUse [RETURN_TYPE] void   FunctionType classType String prop Reference ref [VARIABLES] boolean  isExtern  String  prop  Reference  ref  FunctionType  classType  superClass  
[BugLab_Variable_Misuse]^if  ( classType.getPrototype (  ) .hasOwnProperty ( prop )  )  {^489^^^^^485^498^if  ( superClass.getPrototype (  ) .hasOwnProperty ( prop )  )  {^[CLASS] Traversal  [METHOD] recordSuperClassPrototypePropUse [RETURN_TYPE] void   FunctionType classType String prop Reference ref [VARIABLES] boolean  isExtern  String  prop  Reference  ref  FunctionType  classType  superClass  
[BugLab_Argument_Swapping]^if  ( prop.getPrototype (  ) .hasOwnProperty ( superClass )  )  {^489^^^^^485^498^if  ( superClass.getPrototype (  ) .hasOwnProperty ( prop )  )  {^[CLASS] Traversal  [METHOD] recordSuperClassPrototypePropUse [RETURN_TYPE] void   FunctionType classType String prop Reference ref [VARIABLES] boolean  isExtern  String  prop  Reference  ref  FunctionType  classType  superClass  
[BugLab_Variable_Misuse]^superClass = classType.getSuperClassConstructor (  ) ;^495^^^^^485^498^superClass = superClass.getSuperClassConstructor (  ) ;^[CLASS] Traversal  [METHOD] recordSuperClassPrototypePropUse [RETURN_TYPE] void   FunctionType classType String prop Reference ref [VARIABLES] boolean  isExtern  String  prop  Reference  ref  FunctionType  classType  superClass  
[BugLab_Variable_Misuse]^graph.connect ( getNamedContainingFunction (  ) , ref, graph.defineNameIfNotExists ( classType.getReferenceName (  )  + ".prototype." + prop, false )  ) ;^490^491^492^^^485^498^graph.connect ( getNamedContainingFunction (  ) , ref, graph.defineNameIfNotExists ( superClass.getReferenceName (  )  + ".prototype." + prop, false )  ) ;^[CLASS] Traversal  [METHOD] recordSuperClassPrototypePropUse [RETURN_TYPE] void   FunctionType classType String prop Reference ref [VARIABLES] boolean  isExtern  String  prop  Reference  ref  FunctionType  classType  superClass  
[BugLab_Argument_Swapping]^graph.connect ( getNamedContainingFunction (  ) , graph, ref.defineNameIfNotExists ( superClass.getReferenceName (  )  + ".prototype." + prop, false )  ) ;^490^491^492^^^485^498^graph.connect ( getNamedContainingFunction (  ) , ref, graph.defineNameIfNotExists ( superClass.getReferenceName (  )  + ".prototype." + prop, false )  ) ;^[CLASS] Traversal  [METHOD] recordSuperClassPrototypePropUse [RETURN_TYPE] void   FunctionType classType String prop Reference ref [VARIABLES] boolean  isExtern  String  prop  Reference  ref  FunctionType  classType  superClass  
[BugLab_Argument_Swapping]^graph.connect ( getNamedContainingFunction (  ) , ref, superClass.defineNameIfNotExists ( graph.getReferenceName (  )  + ".prototype." + prop, false )  ) ;^490^491^492^^^485^498^graph.connect ( getNamedContainingFunction (  ) , ref, graph.defineNameIfNotExists ( superClass.getReferenceName (  )  + ".prototype." + prop, false )  ) ;^[CLASS] Traversal  [METHOD] recordSuperClassPrototypePropUse [RETURN_TYPE] void   FunctionType classType String prop Reference ref [VARIABLES] boolean  isExtern  String  prop  Reference  ref  FunctionType  classType  superClass  
[BugLab_Argument_Swapping]^graph.connect ( getNamedContainingFunction (  ) , prop, graph.defineNameIfNotExists ( superClass.getReferenceName (  )  + ".prototype." + ref, false )  ) ;^490^491^492^^^485^498^graph.connect ( getNamedContainingFunction (  ) , ref, graph.defineNameIfNotExists ( superClass.getReferenceName (  )  + ".prototype." + prop, false )  ) ;^[CLASS] Traversal  [METHOD] recordSuperClassPrototypePropUse [RETURN_TYPE] void   FunctionType classType String prop Reference ref [VARIABLES] boolean  isExtern  String  prop  Reference  ref  FunctionType  classType  superClass  
[BugLab_Wrong_Operator]^graph.connect ( getNamedContainingFunction (  >>  ) , ref, graph.defineNameIfNotExists ( superClass.getReferenceName (  )  + ".prototype." + prop, false )  ) ;^490^491^492^^^485^498^graph.connect ( getNamedContainingFunction (  ) , ref, graph.defineNameIfNotExists ( superClass.getReferenceName (  )  + ".prototype." + prop, false )  ) ;^[CLASS] Traversal  [METHOD] recordSuperClassPrototypePropUse [RETURN_TYPE] void   FunctionType classType String prop Reference ref [VARIABLES] boolean  isExtern  String  prop  Reference  ref  FunctionType  classType  superClass  
[BugLab_Wrong_Literal]^graph.connect ( getNamedContainingFunction (  ) , ref, graph.defineNameIfNotExists ( superClass.getReferenceName (  )  + ".prototype." + prop, true )  ) ;^490^491^492^^^485^498^graph.connect ( getNamedContainingFunction (  ) , ref, graph.defineNameIfNotExists ( superClass.getReferenceName (  )  + ".prototype." + prop, false )  ) ;^[CLASS] Traversal  [METHOD] recordSuperClassPrototypePropUse [RETURN_TYPE] void   FunctionType classType String prop Reference ref [VARIABLES] boolean  isExtern  String  prop  Reference  ref  FunctionType  classType  superClass  
[BugLab_Variable_Misuse]^graph.defineNameIfNotExists ( classType.getReferenceName (  )  + ".prototype." + prop, false )  ) ;^491^492^^^^485^498^graph.defineNameIfNotExists ( superClass.getReferenceName (  )  + ".prototype." + prop, false )  ) ;^[CLASS] Traversal  [METHOD] recordSuperClassPrototypePropUse [RETURN_TYPE] void   FunctionType classType String prop Reference ref [VARIABLES] boolean  isExtern  String  prop  Reference  ref  FunctionType  classType  superClass  
[BugLab_Argument_Swapping]^graph.defineNameIfNotExists ( prop.getReferenceName (  )  + ".prototype." + superClass, false )  ) ;^491^492^^^^485^498^graph.defineNameIfNotExists ( superClass.getReferenceName (  )  + ".prototype." + prop, false )  ) ;^[CLASS] Traversal  [METHOD] recordSuperClassPrototypePropUse [RETURN_TYPE] void   FunctionType classType String prop Reference ref [VARIABLES] boolean  isExtern  String  prop  Reference  ref  FunctionType  classType  superClass  
[BugLab_Wrong_Operator]^graph.defineNameIfNotExists ( superClass.getReferenceName (  !=  )  + ".prototype." + prop, false )  ) ;^491^492^^^^485^498^graph.defineNameIfNotExists ( superClass.getReferenceName (  )  + ".prototype." + prop, false )  ) ;^[CLASS] Traversal  [METHOD] recordSuperClassPrototypePropUse [RETURN_TYPE] void   FunctionType classType String prop Reference ref [VARIABLES] boolean  isExtern  String  prop  Reference  ref  FunctionType  classType  superClass  
[BugLab_Wrong_Operator]^graph.defineNameIfNotExists ( superClass.getReferenceName (  ==  )  + ".prototype." + prop, false )  ) ;^491^492^^^^485^498^graph.defineNameIfNotExists ( superClass.getReferenceName (  )  + ".prototype." + prop, false )  ) ;^[CLASS] Traversal  [METHOD] recordSuperClassPrototypePropUse [RETURN_TYPE] void   FunctionType classType String prop Reference ref [VARIABLES] boolean  isExtern  String  prop  Reference  ref  FunctionType  classType  superClass  
[BugLab_Wrong_Literal]^graph.defineNameIfNotExists ( superClass.getReferenceName (  )  + ".prototype." + prop, true )  ) ;^491^492^^^^485^498^graph.defineNameIfNotExists ( superClass.getReferenceName (  )  + ".prototype." + prop, false )  ) ;^[CLASS] Traversal  [METHOD] recordSuperClassPrototypePropUse [RETURN_TYPE] void   FunctionType classType String prop Reference ref [VARIABLES] boolean  isExtern  String  prop  Reference  ref  FunctionType  classType  superClass  
[BugLab_Argument_Swapping]^graph.connect ( getNamedContainingFunction (  ) , superClass, graph.defineNameIfNotExists ( ref.getReferenceName (  )  + ".prototype." + prop, false )  ) ;^490^491^492^^^485^498^graph.connect ( getNamedContainingFunction (  ) , ref, graph.defineNameIfNotExists ( superClass.getReferenceName (  )  + ".prototype." + prop, false )  ) ;^[CLASS] Traversal  [METHOD] recordSuperClassPrototypePropUse [RETURN_TYPE] void   FunctionType classType String prop Reference ref [VARIABLES] boolean  isExtern  String  prop  Reference  ref  FunctionType  classType  superClass  
[BugLab_Argument_Swapping]^graph.connect ( getNamedContainingFunction (  ) , ref, graph.defineNameIfNotExists ( prop.getReferenceName (  )  + ".prototype." + superClass, false )  ) ;^490^491^492^^^485^498^graph.connect ( getNamedContainingFunction (  ) , ref, graph.defineNameIfNotExists ( superClass.getReferenceName (  )  + ".prototype." + prop, false )  ) ;^[CLASS] Traversal  [METHOD] recordSuperClassPrototypePropUse [RETURN_TYPE] void   FunctionType classType String prop Reference ref [VARIABLES] boolean  isExtern  String  prop  Reference  ref  FunctionType  classType  superClass  
[BugLab_Wrong_Operator]^graph.connect ( getNamedContainingFunction (  <  ) , ref, graph.defineNameIfNotExists ( superClass.getReferenceName (  )  + ".prototype." + prop, false )  ) ;^490^491^492^^^485^498^graph.connect ( getNamedContainingFunction (  ) , ref, graph.defineNameIfNotExists ( superClass.getReferenceName (  )  + ".prototype." + prop, false )  ) ;^[CLASS] Traversal  [METHOD] recordSuperClassPrototypePropUse [RETURN_TYPE] void   FunctionType classType String prop Reference ref [VARIABLES] boolean  isExtern  String  prop  Reference  ref  FunctionType  classType  superClass  
[BugLab_Wrong_Operator]^graph.connect ( getNamedContainingFunction (  ||  ) , ref, graph.defineNameIfNotExists ( superClass.getReferenceName (  )  + ".prototype." + prop, false )  ) ;^490^491^492^^^485^498^graph.connect ( getNamedContainingFunction (  ) , ref, graph.defineNameIfNotExists ( superClass.getReferenceName (  )  + ".prototype." + prop, false )  ) ;^[CLASS] Traversal  [METHOD] recordSuperClassPrototypePropUse [RETURN_TYPE] void   FunctionType classType String prop Reference ref [VARIABLES] boolean  isExtern  String  prop  Reference  ref  FunctionType  classType  superClass  
[BugLab_Wrong_Operator]^graph.defineNameIfNotExists ( superClass.getReferenceName (  >=  )  + ".prototype." + prop, false )  ) ;^491^492^^^^485^498^graph.defineNameIfNotExists ( superClass.getReferenceName (  )  + ".prototype." + prop, false )  ) ;^[CLASS] Traversal  [METHOD] recordSuperClassPrototypePropUse [RETURN_TYPE] void   FunctionType classType String prop Reference ref [VARIABLES] boolean  isExtern  String  prop  Reference  ref  FunctionType  classType  superClass  
[BugLab_Wrong_Operator]^graph.connect ( getNamedContainingFunction (  !=  ) , ref, graph.defineNameIfNotExists ( superClass.getReferenceName (  )  + ".prototype." + prop, false )  ) ;^490^491^492^^^485^498^graph.connect ( getNamedContainingFunction (  ) , ref, graph.defineNameIfNotExists ( superClass.getReferenceName (  )  + ".prototype." + prop, false )  ) ;^[CLASS] Traversal  [METHOD] recordSuperClassPrototypePropUse [RETURN_TYPE] void   FunctionType classType String prop Reference ref [VARIABLES] boolean  isExtern  String  prop  Reference  ref  FunctionType  classType  superClass  
[BugLab_Wrong_Operator]^graph.connect ( getNamedContainingFunction (  >  ) , ref, graph.defineNameIfNotExists ( superClass.getReferenceName (  )  + ".prototype." + prop, false )  ) ;^490^491^492^^^485^498^graph.connect ( getNamedContainingFunction (  ) , ref, graph.defineNameIfNotExists ( superClass.getReferenceName (  )  + ".prototype." + prop, false )  ) ;^[CLASS] Traversal  [METHOD] recordSuperClassPrototypePropUse [RETURN_TYPE] void   FunctionType classType String prop Reference ref [VARIABLES] boolean  isExtern  String  prop  Reference  ref  FunctionType  classType  superClass  
[BugLab_Wrong_Operator]^graph.defineNameIfNotExists ( superClass.getReferenceName (  <<  )  + ".prototype." + prop, false )  ) ;^491^492^^^^485^498^graph.defineNameIfNotExists ( superClass.getReferenceName (  )  + ".prototype." + prop, false )  ) ;^[CLASS] Traversal  [METHOD] recordSuperClassPrototypePropUse [RETURN_TYPE] void   FunctionType classType String prop Reference ref [VARIABLES] boolean  isExtern  String  prop  Reference  ref  FunctionType  classType  superClass  
[BugLab_Wrong_Operator]^graph.defineNameIfNotExists ( superClass.getReferenceName (  ||  )  + ".prototype." + prop, false )  ) ;^491^492^^^^485^498^graph.defineNameIfNotExists ( superClass.getReferenceName (  )  + ".prototype." + prop, false )  ) ;^[CLASS] Traversal  [METHOD] recordSuperClassPrototypePropUse [RETURN_TYPE] void   FunctionType classType String prop Reference ref [VARIABLES] boolean  isExtern  String  prop  Reference  ref  FunctionType  classType  superClass  
[BugLab_Argument_Swapping]^graph.connect ( getNamedContainingFunction (  ) , ref, prop.defineNameIfNotExists ( superClass.getReferenceName (  )  + ".prototype." + graph, false )  ) ;^490^491^492^^^485^498^graph.connect ( getNamedContainingFunction (  ) , ref, graph.defineNameIfNotExists ( superClass.getReferenceName (  )  + ".prototype." + prop, false )  ) ;^[CLASS] Traversal  [METHOD] recordSuperClassPrototypePropUse [RETURN_TYPE] void   FunctionType classType String prop Reference ref [VARIABLES] boolean  isExtern  String  prop  Reference  ref  FunctionType  classType  superClass  
[BugLab_Wrong_Operator]^graph.connect ( getNamedContainingFunction (  <=  ) , ref, graph.defineNameIfNotExists ( superClass.getReferenceName (  )  + ".prototype." + prop, false )  ) ;^490^491^492^^^485^498^graph.connect ( getNamedContainingFunction (  ) , ref, graph.defineNameIfNotExists ( superClass.getReferenceName (  )  + ".prototype." + prop, false )  ) ;^[CLASS] Traversal  [METHOD] recordSuperClassPrototypePropUse [RETURN_TYPE] void   FunctionType classType String prop Reference ref [VARIABLES] boolean  isExtern  String  prop  Reference  ref  FunctionType  classType  superClass  
[BugLab_Variable_Misuse]^if  ( subclass.getPrototype (  ) .hasOwnProperty ( prop )  )  {^506^^^^^504^516^if  ( classType.getPrototype (  ) .hasOwnProperty ( prop )  )  {^[CLASS] Traversal  [METHOD] recordSubclassPrototypePropUse [RETURN_TYPE] void   FunctionType classType String prop Reference ref [VARIABLES] boolean  isExtern  String  prop  Reference  ref  FunctionType  classType  subclass  
[BugLab_Variable_Misuse]^graph.connect ( getNamedContainingFunction (  ) , ref, graph.defineNameIfNotExists ( subclass.getReferenceName (  )  + ".prototype." + prop, false )  ) ;^507^508^509^^^504^516^graph.connect ( getNamedContainingFunction (  ) , ref, graph.defineNameIfNotExists ( classType.getReferenceName (  )  + ".prototype." + prop, false )  ) ;^[CLASS] Traversal  [METHOD] recordSubclassPrototypePropUse [RETURN_TYPE] void   FunctionType classType String prop Reference ref [VARIABLES] boolean  isExtern  String  prop  Reference  ref  FunctionType  classType  subclass  
[BugLab_Argument_Swapping]^graph.connect ( getNamedContainingFunction (  ) , prop, graph.defineNameIfNotExists ( classType.getReferenceName (  )  + ".prototype." + ref, false )  ) ;^507^508^509^^^504^516^graph.connect ( getNamedContainingFunction (  ) , ref, graph.defineNameIfNotExists ( classType.getReferenceName (  )  + ".prototype." + prop, false )  ) ;^[CLASS] Traversal  [METHOD] recordSubclassPrototypePropUse [RETURN_TYPE] void   FunctionType classType String prop Reference ref [VARIABLES] boolean  isExtern  String  prop  Reference  ref  FunctionType  classType  subclass  
[BugLab_Argument_Swapping]^graph.connect ( getNamedContainingFunction (  ) , classType, graph.defineNameIfNotExists ( ref.getReferenceName (  )  + ".prototype." + prop, false )  ) ;^507^508^509^^^504^516^graph.connect ( getNamedContainingFunction (  ) , ref, graph.defineNameIfNotExists ( classType.getReferenceName (  )  + ".prototype." + prop, false )  ) ;^[CLASS] Traversal  [METHOD] recordSubclassPrototypePropUse [RETURN_TYPE] void   FunctionType classType String prop Reference ref [VARIABLES] boolean  isExtern  String  prop  Reference  ref  FunctionType  classType  subclass  
[BugLab_Argument_Swapping]^graph.connect ( getNamedContainingFunction (  ) , ref, prop.defineNameIfNotExists ( classType.getReferenceName (  )  + ".prototype." + graph, false )  ) ;^507^508^509^^^504^516^graph.connect ( getNamedContainingFunction (  ) , ref, graph.defineNameIfNotExists ( classType.getReferenceName (  )  + ".prototype." + prop, false )  ) ;^[CLASS] Traversal  [METHOD] recordSubclassPrototypePropUse [RETURN_TYPE] void   FunctionType classType String prop Reference ref [VARIABLES] boolean  isExtern  String  prop  Reference  ref  FunctionType  classType  subclass  
[BugLab_Wrong_Operator]^graph.connect ( getNamedContainingFunction (   instanceof   ) , ref, graph.defineNameIfNotExists ( classType.getReferenceName (  )  + ".prototype." + prop, false )  ) ;^507^508^509^^^504^516^graph.connect ( getNamedContainingFunction (  ) , ref, graph.defineNameIfNotExists ( classType.getReferenceName (  )  + ".prototype." + prop, false )  ) ;^[CLASS] Traversal  [METHOD] recordSubclassPrototypePropUse [RETURN_TYPE] void   FunctionType classType String prop Reference ref [VARIABLES] boolean  isExtern  String  prop  Reference  ref  FunctionType  classType  subclass  
[BugLab_Wrong_Operator]^graph.connect ( getNamedContainingFunction (  ||  ) , ref, graph.defineNameIfNotExists ( classType.getReferenceName (  )  + ".prototype." + prop, false )  ) ;^507^508^509^^^504^516^graph.connect ( getNamedContainingFunction (  ) , ref, graph.defineNameIfNotExists ( classType.getReferenceName (  )  + ".prototype." + prop, false )  ) ;^[CLASS] Traversal  [METHOD] recordSubclassPrototypePropUse [RETURN_TYPE] void   FunctionType classType String prop Reference ref [VARIABLES] boolean  isExtern  String  prop  Reference  ref  FunctionType  classType  subclass  
[BugLab_Wrong_Literal]^graph.connect ( getNamedContainingFunction (  ) , ref, graph.defineNameIfNotExists ( classType.getReferenceName (  )  + ".prototype." + prop, true )  ) ;^507^508^509^^^504^516^graph.connect ( getNamedContainingFunction (  ) , ref, graph.defineNameIfNotExists ( classType.getReferenceName (  )  + ".prototype." + prop, false )  ) ;^[CLASS] Traversal  [METHOD] recordSubclassPrototypePropUse [RETURN_TYPE] void   FunctionType classType String prop Reference ref [VARIABLES] boolean  isExtern  String  prop  Reference  ref  FunctionType  classType  subclass  
[BugLab_Argument_Swapping]^graph.defineNameIfNotExists ( prop.getReferenceName (  )  + ".prototype." + classType, false )  ) ;^508^509^^^^504^516^graph.defineNameIfNotExists ( classType.getReferenceName (  )  + ".prototype." + prop, false )  ) ;^[CLASS] Traversal  [METHOD] recordSubclassPrototypePropUse [RETURN_TYPE] void   FunctionType classType String prop Reference ref [VARIABLES] boolean  isExtern  String  prop  Reference  ref  FunctionType  classType  subclass  
[BugLab_Wrong_Operator]^graph.defineNameIfNotExists ( classType.getReferenceName (   instanceof   )  + ".prototype." + prop, false )  ) ;^508^509^^^^504^516^graph.defineNameIfNotExists ( classType.getReferenceName (  )  + ".prototype." + prop, false )  ) ;^[CLASS] Traversal  [METHOD] recordSubclassPrototypePropUse [RETURN_TYPE] void   FunctionType classType String prop Reference ref [VARIABLES] boolean  isExtern  String  prop  Reference  ref  FunctionType  classType  subclass  
[BugLab_Wrong_Operator]^graph.defineNameIfNotExists ( classType.getReferenceName (  &  )  + ".prototype." + prop, false )  ) ;^508^509^^^^504^516^graph.defineNameIfNotExists ( classType.getReferenceName (  )  + ".prototype." + prop, false )  ) ;^[CLASS] Traversal  [METHOD] recordSubclassPrototypePropUse [RETURN_TYPE] void   FunctionType classType String prop Reference ref [VARIABLES] boolean  isExtern  String  prop  Reference  ref  FunctionType  classType  subclass  
[BugLab_Wrong_Literal]^graph.defineNameIfNotExists ( classType.getReferenceName (  )  + ".prototype." + prop, true )  ) ;^508^509^^^^504^516^graph.defineNameIfNotExists ( classType.getReferenceName (  )  + ".prototype." + prop, false )  ) ;^[CLASS] Traversal  [METHOD] recordSubclassPrototypePropUse [RETURN_TYPE] void   FunctionType classType String prop Reference ref [VARIABLES] boolean  isExtern  String  prop  Reference  ref  FunctionType  classType  subclass  
[BugLab_Argument_Swapping]^if  ( prop.getPrototype (  ) .hasOwnProperty ( classType )  )  {^506^^^^^504^516^if  ( classType.getPrototype (  ) .hasOwnProperty ( prop )  )  {^[CLASS] Traversal  [METHOD] recordSubclassPrototypePropUse [RETURN_TYPE] void   FunctionType classType String prop Reference ref [VARIABLES] boolean  isExtern  String  prop  Reference  ref  FunctionType  classType  subclass  
[BugLab_Argument_Swapping]^graph.connect ( getNamedContainingFunction (  ) , graph, ref.defineNameIfNotExists ( classType.getReferenceName (  )  + ".prototype." + prop, false )  ) ;^507^508^509^^^504^516^graph.connect ( getNamedContainingFunction (  ) , ref, graph.defineNameIfNotExists ( classType.getReferenceName (  )  + ".prototype." + prop, false )  ) ;^[CLASS] Traversal  [METHOD] recordSubclassPrototypePropUse [RETURN_TYPE] void   FunctionType classType String prop Reference ref [VARIABLES] boolean  isExtern  String  prop  Reference  ref  FunctionType  classType  subclass  
[BugLab_Wrong_Operator]^graph.connect ( getNamedContainingFunction (  |  ) , ref, graph.defineNameIfNotExists ( classType.getReferenceName (  )  + ".prototype." + prop, false )  ) ;^507^508^509^^^504^516^graph.connect ( getNamedContainingFunction (  ) , ref, graph.defineNameIfNotExists ( classType.getReferenceName (  )  + ".prototype." + prop, false )  ) ;^[CLASS] Traversal  [METHOD] recordSubclassPrototypePropUse [RETURN_TYPE] void   FunctionType classType String prop Reference ref [VARIABLES] boolean  isExtern  String  prop  Reference  ref  FunctionType  classType  subclass  
[BugLab_Variable_Misuse]^graph.defineNameIfNotExists ( subclass.getReferenceName (  )  + ".prototype." + prop, false )  ) ;^508^509^^^^504^516^graph.defineNameIfNotExists ( classType.getReferenceName (  )  + ".prototype." + prop, false )  ) ;^[CLASS] Traversal  [METHOD] recordSubclassPrototypePropUse [RETURN_TYPE] void   FunctionType classType String prop Reference ref [VARIABLES] boolean  isExtern  String  prop  Reference  ref  FunctionType  classType  subclass  
[BugLab_Wrong_Operator]^graph.defineNameIfNotExists ( classType.getReferenceName (  ||  )  + ".prototype." + prop, false )  ) ;^508^509^^^^504^516^graph.defineNameIfNotExists ( classType.getReferenceName (  )  + ".prototype." + prop, false )  ) ;^[CLASS] Traversal  [METHOD] recordSubclassPrototypePropUse [RETURN_TYPE] void   FunctionType classType String prop Reference ref [VARIABLES] boolean  isExtern  String  prop  Reference  ref  FunctionType  classType  subclass  
[BugLab_Wrong_Operator]^graph.defineNameIfNotExists ( classType.getReferenceName (  |  )  + ".prototype." + prop, false )  ) ;^508^509^^^^504^516^graph.defineNameIfNotExists ( classType.getReferenceName (  )  + ".prototype." + prop, false )  ) ;^[CLASS] Traversal  [METHOD] recordSubclassPrototypePropUse [RETURN_TYPE] void   FunctionType classType String prop Reference ref [VARIABLES] boolean  isExtern  String  prop  Reference  ref  FunctionType  classType  subclass  
[BugLab_Wrong_Operator]^if  ( classType.getSubTypes (  )  == null )  {^511^^^^^504^516^if  ( classType.getSubTypes (  )  != null )  {^[CLASS] Traversal  [METHOD] recordSubclassPrototypePropUse [RETURN_TYPE] void   FunctionType classType String prop Reference ref [VARIABLES] boolean  isExtern  String  prop  Reference  ref  FunctionType  classType  subclass  
[BugLab_Variable_Misuse]^for  ( FunctionType subclass : subclass.getSubTypes (  )  )  {^512^^^^^504^516^for  ( FunctionType subclass : classType.getSubTypes (  )  )  {^[CLASS] Traversal  [METHOD] recordSubclassPrototypePropUse [RETURN_TYPE] void   FunctionType classType String prop Reference ref [VARIABLES] boolean  isExtern  String  prop  Reference  ref  FunctionType  classType  subclass  
[BugLab_Variable_Misuse]^recordSubclassPrototypePropUse ( classType, prop, ref ) ;^513^^^^^504^516^recordSubclassPrototypePropUse ( subclass, prop, ref ) ;^[CLASS] Traversal  [METHOD] recordSubclassPrototypePropUse [RETURN_TYPE] void   FunctionType classType String prop Reference ref [VARIABLES] boolean  isExtern  String  prop  Reference  ref  FunctionType  classType  subclass  
[BugLab_Argument_Swapping]^recordSubclassPrototypePropUse ( prop, subclass, ref ) ;^513^^^^^504^516^recordSubclassPrototypePropUse ( subclass, prop, ref ) ;^[CLASS] Traversal  [METHOD] recordSubclassPrototypePropUse [RETURN_TYPE] void   FunctionType classType String prop Reference ref [VARIABLES] boolean  isExtern  String  prop  Reference  ref  FunctionType  classType  subclass  
[BugLab_Argument_Swapping]^recordSubclassPrototypePropUse ( subclass, ref, prop ) ;^513^^^^^504^516^recordSubclassPrototypePropUse ( subclass, prop, ref ) ;^[CLASS] Traversal  [METHOD] recordSubclassPrototypePropUse [RETURN_TYPE] void   FunctionType classType String prop Reference ref [VARIABLES] boolean  isExtern  String  prop  Reference  ref  FunctionType  classType  subclass  
[BugLab_Variable_Misuse]^if  ( subclass.getSubTypes (  )  != null )  {^511^^^^^504^516^if  ( classType.getSubTypes (  )  != null )  {^[CLASS] Traversal  [METHOD] recordSubclassPrototypePropUse [RETURN_TYPE] void   FunctionType classType String prop Reference ref [VARIABLES] boolean  isExtern  String  prop  Reference  ref  FunctionType  classType  subclass  
[BugLab_Argument_Swapping]^recordSubclassPrototypePropUse ( ref, prop, subclass ) ;^513^^^^^504^516^recordSubclassPrototypePropUse ( subclass, prop, ref ) ;^[CLASS] Traversal  [METHOD] recordSubclassPrototypePropUse [RETURN_TYPE] void   FunctionType classType String prop Reference ref [VARIABLES] boolean  isExtern  String  prop  Reference  ref  FunctionType  classType  subclass  
[BugLab_Variable_Misuse]^if  ( isExterparent )  {^519^^^^^518^529^if  ( isExtern )  {^[CLASS] Traversal  [METHOD] recordUnknownUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Reference  ref  Node  n  parent  
[BugLab_Argument_Swapping]^Reference ref = parentew Reference ( n, n ) ;^524^^^^^518^529^Reference ref = new Reference ( n, parent ) ;^[CLASS] Traversal  [METHOD] recordUnknownUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Reference  ref  Node  n  parent  
[BugLab_Variable_Misuse]^Reference ref = new Reference ( n, n ) ;^524^^^^^518^529^Reference ref = new Reference ( n, parent ) ;^[CLASS] Traversal  [METHOD] recordUnknownUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Reference  ref  Node  n  parent  
[BugLab_Variable_Misuse]^Preconditions.checkArgument ( NodeUtil.isGetProp ( parent )  ) ;^523^^^^^518^529^Preconditions.checkArgument ( NodeUtil.isGetProp ( n )  ) ;^[CLASS] Traversal  [METHOD] recordUnknownUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Reference  ref  Node  n  parent  
[BugLab_Wrong_Literal]^ref.setUnknown ( false ) ;^525^^^^^518^529^ref.setUnknown ( true ) ;^[CLASS] Traversal  [METHOD] recordUnknownUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Reference  ref  Node  n  parent  
[BugLab_Variable_Misuse]^unknownNameUse.put ( parent.getLastChild (  ) .getString (  ) , new Pair<Name, Reference> ( getNamedContainingFunction (  ) , ref )  ) ;^526^527^^^^518^529^unknownNameUse.put ( n.getLastChild (  ) .getString (  ) , new Pair<Name, Reference> ( getNamedContainingFunction (  ) , ref )  ) ;^[CLASS] Traversal  [METHOD] recordUnknownUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Reference  ref  Node  n  parent  
[BugLab_Variable_Misuse]^Reference ref = parentew Reference ( n, parent ) ;^524^^^^^518^529^Reference ref = new Reference ( n, parent ) ;^[CLASS] Traversal  [METHOD] recordUnknownUse [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  isExtern  NodeTraversal  t  Reference  ref  Node  n  parent  
[BugLab_Wrong_Operator]^Preconditions.checkArgument ( type.isConstructor (  )  && type.isInterface (  )  ) ;^538^^^^^535^555^Preconditions.checkArgument ( type.isConstructor (  )  || type.isInterface (  )  ) ;^[CLASS] Traversal  [METHOD] recordClassConstructorOrInterface [RETURN_TYPE] Name   String name FunctionType type Node n Node parent Node gParent Node rhs [VARIABLES] ObjectType  prototype  boolean  isExtern  String  name  prop  FunctionType  type  Node  gParent  n  parent  rhs  Name  symbol  
[BugLab_Variable_Misuse]^Name symbol = graph.defineNameIfNotExists ( prop, isExtern ) ;^539^^^^^535^555^Name symbol = graph.defineNameIfNotExists ( name, isExtern ) ;^[CLASS] Traversal  [METHOD] recordClassConstructorOrInterface [RETURN_TYPE] Name   String name FunctionType type Node n Node parent Node gParent Node rhs [VARIABLES] ObjectType  prototype  boolean  isExtern  String  name  prop  FunctionType  type  Node  gParent  n  parent  rhs  Name  symbol  
[BugLab_Argument_Swapping]^Name symbol = name.defineNameIfNotExists ( graph, isExtern ) ;^539^^^^^535^555^Name symbol = graph.defineNameIfNotExists ( name, isExtern ) ;^[CLASS] Traversal  [METHOD] recordClassConstructorOrInterface [RETURN_TYPE] Name   String name FunctionType type Node n Node parent Node gParent Node rhs [VARIABLES] ObjectType  prototype  boolean  isExtern  String  name  prop  FunctionType  type  Node  gParent  n  parent  rhs  Name  symbol  
[BugLab_Argument_Swapping]^Name symbol = isExtern.defineNameIfNotExists ( name, graph ) ;^539^^^^^535^555^Name symbol = graph.defineNameIfNotExists ( name, isExtern ) ;^[CLASS] Traversal  [METHOD] recordClassConstructorOrInterface [RETURN_TYPE] Name   String name FunctionType type Node n Node parent Node gParent Node rhs [VARIABLES] ObjectType  prototype  boolean  isExtern  String  name  prop  FunctionType  type  Node  gParent  n  parent  rhs  Name  symbol  
[BugLab_Argument_Swapping]^Name symbol = graph.defineNameIfNotExists ( isExtern, name ) ;^539^^^^^535^555^Name symbol = graph.defineNameIfNotExists ( name, isExtern ) ;^[CLASS] Traversal  [METHOD] recordClassConstructorOrInterface [RETURN_TYPE] Name   String name FunctionType type Node n Node parent Node gParent Node rhs [VARIABLES] ObjectType  prototype  boolean  isExtern  String  name  prop  FunctionType  type  Node  gParent  n  parent  rhs  Name  symbol  
[BugLab_Variable_Misuse]^if  ( rhs != parentull )  {^540^^^^^535^555^if  ( rhs != null )  {^[CLASS] Traversal  [METHOD] recordClassConstructorOrInterface [RETURN_TYPE] Name   String name FunctionType type Node n Node parent Node gParent Node rhs [VARIABLES] ObjectType  prototype  boolean  isExtern  String  name  prop  FunctionType  type  Node  gParent  n  parent  rhs  Name  symbol  
[BugLab_Argument_Swapping]^if  ( n != rhsull )  {^540^^^^^535^555^if  ( rhs != null )  {^[CLASS] Traversal  [METHOD] recordClassConstructorOrInterface [RETURN_TYPE] Name   String name FunctionType type Node n Node parent Node gParent Node rhs [VARIABLES] ObjectType  prototype  boolean  isExtern  String  name  prop  FunctionType  type  Node  gParent  n  parent  rhs  Name  symbol  
[BugLab_Wrong_Operator]^if  ( rhs == null )  {^540^^^^^535^555^if  ( rhs != null )  {^[CLASS] Traversal  [METHOD] recordClassConstructorOrInterface [RETURN_TYPE] Name   String name FunctionType type Node n Node parent Node gParent Node rhs [VARIABLES] ObjectType  prototype  boolean  isExtern  String  name  prop  FunctionType  type  Node  gParent  n  parent  rhs  Name  symbol  
[BugLab_Variable_Misuse]^if  ( NodeUtil.isAssign ( rhs )  )  {^543^^^^^535^555^if  ( NodeUtil.isAssign ( n )  )  {^[CLASS] Traversal  [METHOD] recordClassConstructorOrInterface [RETURN_TYPE] Name   String name FunctionType type Node n Node parent Node gParent Node rhs [VARIABLES] ObjectType  prototype  boolean  isExtern  String  name  prop  FunctionType  type  Node  gParent  n  parent  rhs  Name  symbol  
[BugLab_Variable_Misuse]^symbol.addFunctionDeclaration ( rhs ) ;^546^^^^^535^555^symbol.addFunctionDeclaration ( n ) ;^[CLASS] Traversal  [METHOD] recordClassConstructorOrInterface [RETURN_TYPE] Name   String name FunctionType type Node n Node parent Node gParent Node rhs [VARIABLES] ObjectType  prototype  boolean  isExtern  String  name  prop  FunctionType  type  Node  gParent  n  parent  rhs  Name  symbol  
[BugLab_Variable_Misuse]^symbol.addAssignmentDeclaration ( rhs ) ;^544^^^^^535^555^symbol.addAssignmentDeclaration ( n ) ;^[CLASS] Traversal  [METHOD] recordClassConstructorOrInterface [RETURN_TYPE] Name   String name FunctionType type Node n Node parent Node gParent Node rhs [VARIABLES] ObjectType  prototype  boolean  isExtern  String  name  prop  FunctionType  type  Node  gParent  n  parent  rhs  Name  symbol  
[BugLab_Variable_Misuse]^symbol.setType ( getType ( parent )  ) ;^542^^^^^535^555^symbol.setType ( getType ( rhs )  ) ;^[CLASS] Traversal  [METHOD] recordClassConstructorOrInterface [RETURN_TYPE] Name   String name FunctionType type Node n Node parent Node gParent Node rhs [VARIABLES] ObjectType  prototype  boolean  isExtern  String  name  prop  FunctionType  type  Node  gParent  n  parent  rhs  Name  symbol  
[BugLab_Variable_Misuse]^graph.defineNameIfNotExists ( prop + ".prototype." + prop, isExtern ) ;^551^552^^^^535^555^graph.defineNameIfNotExists ( name + ".prototype." + prop, isExtern ) ;^[CLASS] Traversal  [METHOD] recordClassConstructorOrInterface [RETURN_TYPE] Name   String name FunctionType type Node n Node parent Node gParent Node rhs [VARIABLES] ObjectType  prototype  boolean  isExtern  String  name  prop  FunctionType  type  Node  gParent  n  parent  rhs  Name  symbol  
[BugLab_Argument_Swapping]^graph.defineNameIfNotExists ( prop + ".prototype." + name, isExtern ) ;^551^552^^^^535^555^graph.defineNameIfNotExists ( name + ".prototype." + prop, isExtern ) ;^[CLASS] Traversal  [METHOD] recordClassConstructorOrInterface [RETURN_TYPE] Name   String name FunctionType type Node n Node parent Node gParent Node rhs [VARIABLES] ObjectType  prototype  boolean  isExtern  String  name  prop  FunctionType  type  Node  gParent  n  parent  rhs  Name  symbol  
[BugLab_Argument_Swapping]^graph.defineNameIfNotExists ( name + ".prototype." + isExtern, prop ) ;^551^552^^^^535^555^graph.defineNameIfNotExists ( name + ".prototype." + prop, isExtern ) ;^[CLASS] Traversal  [METHOD] recordClassConstructorOrInterface [RETURN_TYPE] Name   String name FunctionType type Node n Node parent Node gParent Node rhs [VARIABLES] ObjectType  prototype  boolean  isExtern  String  name  prop  FunctionType  type  Node  gParent  n  parent  rhs  Name  symbol  
