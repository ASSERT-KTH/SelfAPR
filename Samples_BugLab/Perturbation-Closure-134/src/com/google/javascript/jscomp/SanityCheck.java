[BugLab_Variable_Misuse]^sanityCheckNormalization ( reparsedRoot, root ) ;^53^^^^^52^63^sanityCheckNormalization ( externs, root ) ;^[CLASS] SanityCheck  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  DiagnosticType  CANNOT_PARSE_GENERATED_CODE  GENERATED_BAD_CODE  Node  clonedExterns  externs  reparsedRoot  root  
[BugLab_Variable_Misuse]^sanityCheckNormalization ( externs, reparsedRoot ) ;^53^^^^^52^63^sanityCheckNormalization ( externs, root ) ;^[CLASS] SanityCheck  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  DiagnosticType  CANNOT_PARSE_GENERATED_CODE  GENERATED_BAD_CODE  Node  clonedExterns  externs  reparsedRoot  root  
[BugLab_Argument_Swapping]^sanityCheckNormalization ( root, externs ) ;^53^^^^^52^63^sanityCheckNormalization ( externs, root ) ;^[CLASS] SanityCheck  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  DiagnosticType  CANNOT_PARSE_GENERATED_CODE  GENERATED_BAD_CODE  Node  clonedExterns  externs  reparsedRoot  root  
[BugLab_Variable_Misuse]^Node reparsedRoot = sanityCheckCodeGeneration ( externs ) ;^54^^^^^52^63^Node reparsedRoot = sanityCheckCodeGeneration ( root ) ;^[CLASS] SanityCheck  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  DiagnosticType  CANNOT_PARSE_GENERATED_CODE  GENERATED_BAD_CODE  Node  clonedExterns  externs  reparsedRoot  root  
[BugLab_Variable_Misuse]^Node reparsedRoot = sanityCheckCodeGeneration ( reparsedRoot ) ;^54^^^^^52^63^Node reparsedRoot = sanityCheckCodeGeneration ( root ) ;^[CLASS] SanityCheck  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  DiagnosticType  CANNOT_PARSE_GENERATED_CODE  GENERATED_BAD_CODE  Node  clonedExterns  externs  reparsedRoot  root  
[BugLab_Variable_Misuse]^if  ( root != null )  {^55^^^^^52^63^if  ( reparsedRoot != null )  {^[CLASS] SanityCheck  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  DiagnosticType  CANNOT_PARSE_GENERATED_CODE  GENERATED_BAD_CODE  Node  clonedExterns  externs  reparsedRoot  root  
[BugLab_Wrong_Operator]^if  ( reparsedRoot == null )  {^55^^^^^52^63^if  ( reparsedRoot != null )  {^[CLASS] SanityCheck  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  DiagnosticType  CANNOT_PARSE_GENERATED_CODE  GENERATED_BAD_CODE  Node  clonedExterns  externs  reparsedRoot  root  
[BugLab_Variable_Misuse]^new Node ( Token.BLOCK, root, new Node ( Token.BLOCK, reparsedRoot )  ) , root.getParent (  )  ) ;^58^59^60^61^^52^63^new Node ( Token.BLOCK, clonedExterns, new Node ( Token.BLOCK, reparsedRoot )  ) , root.getParent (  )  ) ;^[CLASS] SanityCheck  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  DiagnosticType  CANNOT_PARSE_GENERATED_CODE  GENERATED_BAD_CODE  Node  clonedExterns  externs  reparsedRoot  root  
[BugLab_Variable_Misuse]^new Node ( Token.BLOCK, clonedExterns, new Node ( Token.BLOCK, root )  ) , root.getParent (  )  ) ;^58^59^60^61^^52^63^new Node ( Token.BLOCK, clonedExterns, new Node ( Token.BLOCK, reparsedRoot )  ) , root.getParent (  )  ) ;^[CLASS] SanityCheck  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  DiagnosticType  CANNOT_PARSE_GENERATED_CODE  GENERATED_BAD_CODE  Node  clonedExterns  externs  reparsedRoot  root  
[BugLab_Argument_Swapping]^new Node ( Token.BLOCK, reparsedRoot, new Node ( Token.BLOCK, clonedExterns )  ) , root.getParent (  )  ) ;^58^59^60^61^^52^63^new Node ( Token.BLOCK, clonedExterns, new Node ( Token.BLOCK, reparsedRoot )  ) , root.getParent (  )  ) ;^[CLASS] SanityCheck  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  DiagnosticType  CANNOT_PARSE_GENERATED_CODE  GENERATED_BAD_CODE  Node  clonedExterns  externs  reparsedRoot  root  
[BugLab_Variable_Misuse]^new Node ( Token.BLOCK, root )  ) , root.getParent (  )  ) ;^60^61^^^^52^63^new Node ( Token.BLOCK, reparsedRoot )  ) , root.getParent (  )  ) ;^[CLASS] SanityCheck  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  DiagnosticType  CANNOT_PARSE_GENERATED_CODE  GENERATED_BAD_CODE  Node  clonedExterns  externs  reparsedRoot  root  
[BugLab_Variable_Misuse]^Node clonedExterns = root.cloneTree (  ) ;^56^^^^^52^63^Node clonedExterns = externs.cloneTree (  ) ;^[CLASS] SanityCheck  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  DiagnosticType  CANNOT_PARSE_GENERATED_CODE  GENERATED_BAD_CODE  Node  clonedExterns  externs  reparsedRoot  root  
[BugLab_Variable_Misuse]^sanityCheckSymbolTable ( new Node ( Token.BLOCK, reparsedRoot, new Node ( Token.BLOCK, reparsedRoot )  ) ,^57^58^59^60^^52^63^sanityCheckSymbolTable ( new Node ( Token.BLOCK, clonedExterns, new Node ( Token.BLOCK, reparsedRoot )  ) ,^[CLASS] SanityCheck  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  DiagnosticType  CANNOT_PARSE_GENERATED_CODE  GENERATED_BAD_CODE  Node  clonedExterns  externs  reparsedRoot  root  
[BugLab_Argument_Swapping]^sanityCheckSymbolTable ( new Node ( Token.BLOCK, reparsedRoot, new Node ( Token.BLOCK, clonedExterns )  ) ,^57^58^59^60^^52^63^sanityCheckSymbolTable ( new Node ( Token.BLOCK, clonedExterns, new Node ( Token.BLOCK, reparsedRoot )  ) ,^[CLASS] SanityCheck  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  DiagnosticType  CANNOT_PARSE_GENERATED_CODE  GENERATED_BAD_CODE  Node  clonedExterns  externs  reparsedRoot  root  
[BugLab_Variable_Misuse]^sanityCheckSymbolTable ( new Node ( Token.BLOCK, clonedExterns, new Node ( Token.BLOCK, externs )  ) ,^57^58^59^60^^52^63^sanityCheckSymbolTable ( new Node ( Token.BLOCK, clonedExterns, new Node ( Token.BLOCK, reparsedRoot )  ) ,^[CLASS] SanityCheck  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  DiagnosticType  CANNOT_PARSE_GENERATED_CODE  GENERATED_BAD_CODE  Node  clonedExterns  externs  reparsedRoot  root  
[BugLab_Argument_Swapping]^table.verify ( originalRoot, reparsedRoot ) ;^70^^^^^68^72^table.verify ( reparsedRoot, originalRoot ) ;^[CLASS] SanityCheck  [METHOD] sanityCheckSymbolTable [RETURN_TYPE] void   Node reparsedRoot Node originalRoot [VARIABLES] SymbolTable  table  AbstractCompiler  compiler  boolean  DiagnosticType  CANNOT_PARSE_GENERATED_CODE  GENERATED_BAD_CODE  Node  originalRoot  reparsedRoot  
[BugLab_Variable_Misuse]^String source = compiler.toSource ( root2 ) ;^88^^^^^81^104^String source = compiler.toSource ( root ) ;^[CLASS] SanityCheck  [METHOD] sanityCheckCodeGeneration [RETURN_TYPE] Node   Node root [VARIABLES] AbstractCompiler  compiler  String  source  source2  boolean  DiagnosticType  CANNOT_PARSE_GENERATED_CODE  GENERATED_BAD_CODE  Node  root  root2  
[BugLab_Argument_Swapping]^String source = root.toSource ( compiler ) ;^88^^^^^81^104^String source = compiler.toSource ( root ) ;^[CLASS] SanityCheck  [METHOD] sanityCheckCodeGeneration [RETURN_TYPE] Node   Node root [VARIABLES] AbstractCompiler  compiler  String  source  source2  boolean  DiagnosticType  CANNOT_PARSE_GENERATED_CODE  GENERATED_BAD_CODE  Node  root  root2  
[BugLab_Variable_Misuse]^Node root2 = compiler.parseSyntheticCode ( source2 ) ;^89^^^^^81^104^Node root2 = compiler.parseSyntheticCode ( source ) ;^[CLASS] SanityCheck  [METHOD] sanityCheckCodeGeneration [RETURN_TYPE] Node   Node root [VARIABLES] AbstractCompiler  compiler  String  source  source2  boolean  DiagnosticType  CANNOT_PARSE_GENERATED_CODE  GENERATED_BAD_CODE  Node  root  root2  
[BugLab_Argument_Swapping]^Node root2 = source.parseSyntheticCode ( compiler ) ;^89^^^^^81^104^Node root2 = compiler.parseSyntheticCode ( source ) ;^[CLASS] SanityCheck  [METHOD] sanityCheckCodeGeneration [RETURN_TYPE] Node   Node root [VARIABLES] AbstractCompiler  compiler  String  source  source2  boolean  DiagnosticType  CANNOT_PARSE_GENERATED_CODE  GENERATED_BAD_CODE  Node  root  root2  
[BugLab_Variable_Misuse]^compiler.report ( JSError.make ( CANNOT_PARSE_GENERATED_CODE, StringUtil.truncateAtMaxLength ( source2, 100, true )  )  ) ;^91^92^^^^81^104^compiler.report ( JSError.make ( CANNOT_PARSE_GENERATED_CODE, StringUtil.truncateAtMaxLength ( source, 100, true )  )  ) ;^[CLASS] SanityCheck  [METHOD] sanityCheckCodeGeneration [RETURN_TYPE] Node   Node root [VARIABLES] AbstractCompiler  compiler  String  source  source2  boolean  DiagnosticType  CANNOT_PARSE_GENERATED_CODE  GENERATED_BAD_CODE  Node  root  root2  
[BugLab_Variable_Misuse]^compiler.report ( JSError.make ( GENERATED_BAD_CODE, StringUtil.truncateAtMaxLength ( source, 100, true )  )  ) ;^91^92^^^^81^104^compiler.report ( JSError.make ( CANNOT_PARSE_GENERATED_CODE, StringUtil.truncateAtMaxLength ( source, 100, true )  )  ) ;^[CLASS] SanityCheck  [METHOD] sanityCheckCodeGeneration [RETURN_TYPE] Node   Node root [VARIABLES] AbstractCompiler  compiler  String  source  source2  boolean  DiagnosticType  CANNOT_PARSE_GENERATED_CODE  GENERATED_BAD_CODE  Node  root  root2  
[BugLab_Argument_Swapping]^compiler.report ( JSError.make ( source, StringUtil.truncateAtMaxLength ( CANNOT_PARSE_GENERATED_CODE, 100, true )  )  ) ;^91^92^^^^81^104^compiler.report ( JSError.make ( CANNOT_PARSE_GENERATED_CODE, StringUtil.truncateAtMaxLength ( source, 100, true )  )  ) ;^[CLASS] SanityCheck  [METHOD] sanityCheckCodeGeneration [RETURN_TYPE] Node   Node root [VARIABLES] AbstractCompiler  compiler  String  source  source2  boolean  DiagnosticType  CANNOT_PARSE_GENERATED_CODE  GENERATED_BAD_CODE  Node  root  root2  
[BugLab_Wrong_Literal]^compiler.report ( JSError.make ( CANNOT_PARSE_GENERATED_CODE, StringUtil.truncateAtMaxLength ( source, 99, true )  )  ) ;^91^92^^^^81^104^compiler.report ( JSError.make ( CANNOT_PARSE_GENERATED_CODE, StringUtil.truncateAtMaxLength ( source, 100, true )  )  ) ;^[CLASS] SanityCheck  [METHOD] sanityCheckCodeGeneration [RETURN_TYPE] Node   Node root [VARIABLES] AbstractCompiler  compiler  String  source  source2  boolean  DiagnosticType  CANNOT_PARSE_GENERATED_CODE  GENERATED_BAD_CODE  Node  root  root2  
[BugLab_Wrong_Literal]^compiler.report ( JSError.make ( CANNOT_PARSE_GENERATED_CODE, StringUtil.truncateAtMaxLength ( source, 100, false )  )  ) ;^91^92^^^^81^104^compiler.report ( JSError.make ( CANNOT_PARSE_GENERATED_CODE, StringUtil.truncateAtMaxLength ( source, 100, true )  )  ) ;^[CLASS] SanityCheck  [METHOD] sanityCheckCodeGeneration [RETURN_TYPE] Node   Node root [VARIABLES] AbstractCompiler  compiler  String  source  source2  boolean  DiagnosticType  CANNOT_PARSE_GENERATED_CODE  GENERATED_BAD_CODE  Node  root  root2  
[BugLab_Variable_Misuse]^StringUtil.truncateAtMaxLength ( source2, 100, true )  )  ) ;^92^^^^^81^104^StringUtil.truncateAtMaxLength ( source, 100, true )  )  ) ;^[CLASS] SanityCheck  [METHOD] sanityCheckCodeGeneration [RETURN_TYPE] Node   Node root [VARIABLES] AbstractCompiler  compiler  String  source  source2  boolean  DiagnosticType  CANNOT_PARSE_GENERATED_CODE  GENERATED_BAD_CODE  Node  root  root2  
[BugLab_Wrong_Literal]^StringUtil.truncateAtMaxLength ( source, null, true )  )  ) ;^92^^^^^81^104^StringUtil.truncateAtMaxLength ( source, 100, true )  )  ) ;^[CLASS] SanityCheck  [METHOD] sanityCheckCodeGeneration [RETURN_TYPE] Node   Node root [VARIABLES] AbstractCompiler  compiler  String  source  source2  boolean  DiagnosticType  CANNOT_PARSE_GENERATED_CODE  GENERATED_BAD_CODE  Node  root  root2  
[BugLab_Wrong_Literal]^StringUtil.truncateAtMaxLength ( source, 100, false )  )  ) ;^92^^^^^81^104^StringUtil.truncateAtMaxLength ( source, 100, true )  )  ) ;^[CLASS] SanityCheck  [METHOD] sanityCheckCodeGeneration [RETURN_TYPE] Node   Node root [VARIABLES] AbstractCompiler  compiler  String  source  source2  boolean  DiagnosticType  CANNOT_PARSE_GENERATED_CODE  GENERATED_BAD_CODE  Node  root  root2  
[BugLab_Wrong_Literal]^compiler.report ( JSError.make ( CANNOT_PARSE_GENERATED_CODE, StringUtil.truncateAtMaxLength ( source, 101, true )  )  ) ;^91^92^^^^81^104^compiler.report ( JSError.make ( CANNOT_PARSE_GENERATED_CODE, StringUtil.truncateAtMaxLength ( source, 100, true )  )  ) ;^[CLASS] SanityCheck  [METHOD] sanityCheckCodeGeneration [RETURN_TYPE] Node   Node root [VARIABLES] AbstractCompiler  compiler  String  source  source2  boolean  DiagnosticType  CANNOT_PARSE_GENERATED_CODE  GENERATED_BAD_CODE  Node  root  root2  
[BugLab_Wrong_Literal]^StringUtil.truncateAtMaxLength ( source, 99, true )  )  ) ;^92^^^^^81^104^StringUtil.truncateAtMaxLength ( source, 100, true )  )  ) ;^[CLASS] SanityCheck  [METHOD] sanityCheckCodeGeneration [RETURN_TYPE] Node   Node root [VARIABLES] AbstractCompiler  compiler  String  source  source2  boolean  DiagnosticType  CANNOT_PARSE_GENERATED_CODE  GENERATED_BAD_CODE  Node  root  root2  
[BugLab_Variable_Misuse]^String source2 = compiler.toSource ( root ) ;^96^^^^^81^104^String source2 = compiler.toSource ( root2 ) ;^[CLASS] SanityCheck  [METHOD] sanityCheckCodeGeneration [RETURN_TYPE] Node   Node root [VARIABLES] AbstractCompiler  compiler  String  source  source2  boolean  DiagnosticType  CANNOT_PARSE_GENERATED_CODE  GENERATED_BAD_CODE  Node  root  root2  
[BugLab_Argument_Swapping]^String source2 = root2.toSource ( compiler ) ;^96^^^^^81^104^String source2 = compiler.toSource ( root2 ) ;^[CLASS] SanityCheck  [METHOD] sanityCheckCodeGeneration [RETURN_TYPE] Node   Node root [VARIABLES] AbstractCompiler  compiler  String  source  source2  boolean  DiagnosticType  CANNOT_PARSE_GENERATED_CODE  GENERATED_BAD_CODE  Node  root  root2  
[BugLab_Variable_Misuse]^if  ( !source.equals ( source22 )  )  {^97^^^^^81^104^if  ( !source.equals ( source2 )  )  {^[CLASS] SanityCheck  [METHOD] sanityCheckCodeGeneration [RETURN_TYPE] Node   Node root [VARIABLES] AbstractCompiler  compiler  String  source  source2  boolean  DiagnosticType  CANNOT_PARSE_GENERATED_CODE  GENERATED_BAD_CODE  Node  root  root2  
[BugLab_Variable_Misuse]^if  ( !source.equals ( source )  )  {^97^^^^^81^104^if  ( !source.equals ( source2 )  )  {^[CLASS] SanityCheck  [METHOD] sanityCheckCodeGeneration [RETURN_TYPE] Node   Node root [VARIABLES] AbstractCompiler  compiler  String  source  source2  boolean  DiagnosticType  CANNOT_PARSE_GENERATED_CODE  GENERATED_BAD_CODE  Node  root  root2  
[BugLab_Variable_Misuse]^compiler.report ( JSError.make ( CANNOT_PARSE_GENERATED_CODE, StringUtil.truncateAtMaxLength ( source, 100, true ) , StringUtil.truncateAtMaxLength ( source2, 100, true )  )  ) ;^98^99^100^^^81^104^compiler.report ( JSError.make ( GENERATED_BAD_CODE, StringUtil.truncateAtMaxLength ( source, 100, true ) , StringUtil.truncateAtMaxLength ( source2, 100, true )  )  ) ;^[CLASS] SanityCheck  [METHOD] sanityCheckCodeGeneration [RETURN_TYPE] Node   Node root [VARIABLES] AbstractCompiler  compiler  String  source  source2  boolean  DiagnosticType  CANNOT_PARSE_GENERATED_CODE  GENERATED_BAD_CODE  Node  root  root2  
[BugLab_Argument_Swapping]^compiler.report ( JSError.make ( GENERATED_BAD_CODE, StringUtil.truncateAtMaxLength ( source2, 100, true ) , StringUtil.truncateAtMaxLength ( source, 100, true )  )  ) ;^98^99^100^^^81^104^compiler.report ( JSError.make ( GENERATED_BAD_CODE, StringUtil.truncateAtMaxLength ( source, 100, true ) , StringUtil.truncateAtMaxLength ( source2, 100, true )  )  ) ;^[CLASS] SanityCheck  [METHOD] sanityCheckCodeGeneration [RETURN_TYPE] Node   Node root [VARIABLES] AbstractCompiler  compiler  String  source  source2  boolean  DiagnosticType  CANNOT_PARSE_GENERATED_CODE  GENERATED_BAD_CODE  Node  root  root2  
[BugLab_Argument_Swapping]^compiler.report ( JSError.make ( source, StringUtil.truncateAtMaxLength ( GENERATED_BAD_CODE, 100, true ) , StringUtil.truncateAtMaxLength ( source2, 100, true )  )  ) ;^98^99^100^^^81^104^compiler.report ( JSError.make ( GENERATED_BAD_CODE, StringUtil.truncateAtMaxLength ( source, 100, true ) , StringUtil.truncateAtMaxLength ( source2, 100, true )  )  ) ;^[CLASS] SanityCheck  [METHOD] sanityCheckCodeGeneration [RETURN_TYPE] Node   Node root [VARIABLES] AbstractCompiler  compiler  String  source  source2  boolean  DiagnosticType  CANNOT_PARSE_GENERATED_CODE  GENERATED_BAD_CODE  Node  root  root2  
[BugLab_Wrong_Literal]^compiler.report ( JSError.make ( GENERATED_BAD_CODE, StringUtil.truncateAtMaxLength ( source, 101, true ) , StringUtil.truncateAtMaxLength ( source2, 101, true )  )  ) ;^98^99^100^^^81^104^compiler.report ( JSError.make ( GENERATED_BAD_CODE, StringUtil.truncateAtMaxLength ( source, 100, true ) , StringUtil.truncateAtMaxLength ( source2, 100, true )  )  ) ;^[CLASS] SanityCheck  [METHOD] sanityCheckCodeGeneration [RETURN_TYPE] Node   Node root [VARIABLES] AbstractCompiler  compiler  String  source  source2  boolean  DiagnosticType  CANNOT_PARSE_GENERATED_CODE  GENERATED_BAD_CODE  Node  root  root2  
[BugLab_Wrong_Literal]^compiler.report ( JSError.make ( GENERATED_BAD_CODE, StringUtil.truncateAtMaxLength ( source, 100, false ) , StringUtil.truncateAtMaxLength ( source2, 100, false )  )  ) ;^98^99^100^^^81^104^compiler.report ( JSError.make ( GENERATED_BAD_CODE, StringUtil.truncateAtMaxLength ( source, 100, true ) , StringUtil.truncateAtMaxLength ( source2, 100, true )  )  ) ;^[CLASS] SanityCheck  [METHOD] sanityCheckCodeGeneration [RETURN_TYPE] Node   Node root [VARIABLES] AbstractCompiler  compiler  String  source  source2  boolean  DiagnosticType  CANNOT_PARSE_GENERATED_CODE  GENERATED_BAD_CODE  Node  root  root2  
[BugLab_Argument_Swapping]^compiler.report ( JSError.make ( source2, StringUtil.truncateAtMaxLength ( source, 100, true ) , StringUtil.truncateAtMaxLength ( GENERATED_BAD_CODE, 100, true )  )  ) ;^98^99^100^^^81^104^compiler.report ( JSError.make ( GENERATED_BAD_CODE, StringUtil.truncateAtMaxLength ( source, 100, true ) , StringUtil.truncateAtMaxLength ( source2, 100, true )  )  ) ;^[CLASS] SanityCheck  [METHOD] sanityCheckCodeGeneration [RETURN_TYPE] Node   Node root [VARIABLES] AbstractCompiler  compiler  String  source  source2  boolean  DiagnosticType  CANNOT_PARSE_GENERATED_CODE  GENERATED_BAD_CODE  Node  root  root2  
[BugLab_Variable_Misuse]^StringUtil.truncateAtMaxLength ( source2, 100, true ) , StringUtil.truncateAtMaxLength ( source2, 100, true )  )  ) ;^99^100^^^^81^104^StringUtil.truncateAtMaxLength ( source, 100, true ) , StringUtil.truncateAtMaxLength ( source2, 100, true )  )  ) ;^[CLASS] SanityCheck  [METHOD] sanityCheckCodeGeneration [RETURN_TYPE] Node   Node root [VARIABLES] AbstractCompiler  compiler  String  source  source2  boolean  DiagnosticType  CANNOT_PARSE_GENERATED_CODE  GENERATED_BAD_CODE  Node  root  root2  
[BugLab_Wrong_Literal]^StringUtil.truncateAtMaxLength ( source, 99, true ) , StringUtil.truncateAtMaxLength ( source2, 99, true )  )  ) ;^99^100^^^^81^104^StringUtil.truncateAtMaxLength ( source, 100, true ) , StringUtil.truncateAtMaxLength ( source2, 100, true )  )  ) ;^[CLASS] SanityCheck  [METHOD] sanityCheckCodeGeneration [RETURN_TYPE] Node   Node root [VARIABLES] AbstractCompiler  compiler  String  source  source2  boolean  DiagnosticType  CANNOT_PARSE_GENERATED_CODE  GENERATED_BAD_CODE  Node  root  root2  
[BugLab_Wrong_Literal]^StringUtil.truncateAtMaxLength ( source, 100, false ) , StringUtil.truncateAtMaxLength ( source2, 100, false )  )  ) ;^99^100^^^^81^104^StringUtil.truncateAtMaxLength ( source, 100, true ) , StringUtil.truncateAtMaxLength ( source2, 100, true )  )  ) ;^[CLASS] SanityCheck  [METHOD] sanityCheckCodeGeneration [RETURN_TYPE] Node   Node root [VARIABLES] AbstractCompiler  compiler  String  source  source2  boolean  DiagnosticType  CANNOT_PARSE_GENERATED_CODE  GENERATED_BAD_CODE  Node  root  root2  
[BugLab_Variable_Misuse]^StringUtil.truncateAtMaxLength ( source, 100, true )  )  ) ;^100^^^^^81^104^StringUtil.truncateAtMaxLength ( source2, 100, true )  )  ) ;^[CLASS] SanityCheck  [METHOD] sanityCheckCodeGeneration [RETURN_TYPE] Node   Node root [VARIABLES] AbstractCompiler  compiler  String  source  source2  boolean  DiagnosticType  CANNOT_PARSE_GENERATED_CODE  GENERATED_BAD_CODE  Node  root  root2  
[BugLab_Wrong_Literal]^StringUtil.truncateAtMaxLength ( source2, 100, false )  )  ) ;^100^^^^^81^104^StringUtil.truncateAtMaxLength ( source2, 100, true )  )  ) ;^[CLASS] SanityCheck  [METHOD] sanityCheckCodeGeneration [RETURN_TYPE] Node   Node root [VARIABLES] AbstractCompiler  compiler  String  source  source2  boolean  DiagnosticType  CANNOT_PARSE_GENERATED_CODE  GENERATED_BAD_CODE  Node  root  root2  
[BugLab_Variable_Misuse]^compiler.report ( JSError.make ( GENERATED_BAD_CODE, StringUtil.truncateAtMaxLength ( source2, 100, true ) , StringUtil.truncateAtMaxLength ( source2, 100, true )  )  ) ;^98^99^100^^^81^104^compiler.report ( JSError.make ( GENERATED_BAD_CODE, StringUtil.truncateAtMaxLength ( source, 100, true ) , StringUtil.truncateAtMaxLength ( source2, 100, true )  )  ) ;^[CLASS] SanityCheck  [METHOD] sanityCheckCodeGeneration [RETURN_TYPE] Node   Node root [VARIABLES] AbstractCompiler  compiler  String  source  source2  boolean  DiagnosticType  CANNOT_PARSE_GENERATED_CODE  GENERATED_BAD_CODE  Node  root  root2  
[BugLab_Wrong_Literal]^compiler.report ( JSError.make ( GENERATED_BAD_CODE, StringUtil.truncateAtMaxLength ( source, 99, true ) , StringUtil.truncateAtMaxLength ( source2, 99, true )  )  ) ;^98^99^100^^^81^104^compiler.report ( JSError.make ( GENERATED_BAD_CODE, StringUtil.truncateAtMaxLength ( source, 100, true ) , StringUtil.truncateAtMaxLength ( source2, 100, true )  )  ) ;^[CLASS] SanityCheck  [METHOD] sanityCheckCodeGeneration [RETURN_TYPE] Node   Node root [VARIABLES] AbstractCompiler  compiler  String  source  source2  boolean  DiagnosticType  CANNOT_PARSE_GENERATED_CODE  GENERATED_BAD_CODE  Node  root  root2  
[BugLab_Variable_Misuse]^return root;^103^^^^^81^104^return root2;^[CLASS] SanityCheck  [METHOD] sanityCheckCodeGeneration [RETURN_TYPE] Node   Node root [VARIABLES] AbstractCompiler  compiler  String  source  source2  boolean  DiagnosticType  CANNOT_PARSE_GENERATED_CODE  GENERATED_BAD_CODE  Node  root  root2  
[BugLab_Wrong_Literal]^new NodeTypeNormalizer ( false ) .process ( null, root ) ;^119^^^^^110^135^new NodeTypeNormalizer ( true ) .process ( null, root ) ;^[CLASS] SanityCheck  [METHOD] sanityCheckNormalization [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  RecentChange  handler  boolean  checkUserDeclarations  DiagnosticType  CANNOT_PARSE_GENERATED_CODE  GENERATED_BAD_CODE  Node  externs  root  CompilerPass  pass  
[BugLab_Variable_Misuse]^new NodeTypeNormalizer ( true ) .process ( null, externs ) ;^119^^^^^110^135^new NodeTypeNormalizer ( true ) .process ( null, root ) ;^[CLASS] SanityCheck  [METHOD] sanityCheckNormalization [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  RecentChange  handler  boolean  checkUserDeclarations  DiagnosticType  CANNOT_PARSE_GENERATED_CODE  GENERATED_BAD_CODE  Node  externs  root  CompilerPass  pass  
[BugLab_Wrong_Literal]^( new Normalize ( compiler, false )  ) .process ( externs, root ) ;^124^^^^^110^135^( new Normalize ( compiler, true )  ) .process ( externs, root ) ;^[CLASS] SanityCheck  [METHOD] sanityCheckNormalization [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  RecentChange  handler  boolean  checkUserDeclarations  DiagnosticType  CANNOT_PARSE_GENERATED_CODE  GENERATED_BAD_CODE  Node  externs  root  CompilerPass  pass  
[BugLab_Argument_Swapping]^CompilerPass pass = new Normalize.VerifyConstants ( checkUserDeclarations, compiler ) ;^129^130^^^^110^135^CompilerPass pass = new Normalize.VerifyConstants ( compiler, checkUserDeclarations ) ;^[CLASS] SanityCheck  [METHOD] sanityCheckNormalization [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  RecentChange  handler  boolean  checkUserDeclarations  DiagnosticType  CANNOT_PARSE_GENERATED_CODE  GENERATED_BAD_CODE  Node  externs  root  CompilerPass  pass  
[BugLab_Wrong_Literal]^boolean checkUserDeclarations = false;^128^^^^^110^135^boolean checkUserDeclarations = true;^[CLASS] SanityCheck  [METHOD] sanityCheckNormalization [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  RecentChange  handler  boolean  checkUserDeclarations  DiagnosticType  CANNOT_PARSE_GENERATED_CODE  GENERATED_BAD_CODE  Node  externs  root  CompilerPass  pass  
[BugLab_Argument_Swapping]^( new Normalize ( compiler, true )  ) .process ( root, externs ) ;^124^^^^^110^135^( new Normalize ( compiler, true )  ) .process ( externs, root ) ;^[CLASS] SanityCheck  [METHOD] sanityCheckNormalization [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  RecentChange  handler  boolean  checkUserDeclarations  DiagnosticType  CANNOT_PARSE_GENERATED_CODE  GENERATED_BAD_CODE  Node  externs  root  CompilerPass  pass  
[BugLab_Argument_Swapping]^( new Normalize ( externs, true )  ) .process ( compiler, root ) ;^124^^^^^110^135^( new Normalize ( compiler, true )  ) .process ( externs, root ) ;^[CLASS] SanityCheck  [METHOD] sanityCheckNormalization [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  RecentChange  handler  boolean  checkUserDeclarations  DiagnosticType  CANNOT_PARSE_GENERATED_CODE  GENERATED_BAD_CODE  Node  externs  root  CompilerPass  pass  
[BugLab_Variable_Misuse]^pass.process ( root, root ) ;^131^^^^^110^135^pass.process ( externs, root ) ;^[CLASS] SanityCheck  [METHOD] sanityCheckNormalization [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  RecentChange  handler  boolean  checkUserDeclarations  DiagnosticType  CANNOT_PARSE_GENERATED_CODE  GENERATED_BAD_CODE  Node  externs  root  CompilerPass  pass  
[BugLab_Argument_Swapping]^pass.process ( root, externs ) ;^131^^^^^110^135^pass.process ( externs, root ) ;^[CLASS] SanityCheck  [METHOD] sanityCheckNormalization [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  RecentChange  handler  boolean  checkUserDeclarations  DiagnosticType  CANNOT_PARSE_GENERATED_CODE  GENERATED_BAD_CODE  Node  externs  root  CompilerPass  pass  
[BugLab_Variable_Misuse]^( new Normalize ( compiler, true )  ) .process ( root, root ) ;^124^^^^^110^135^( new Normalize ( compiler, true )  ) .process ( externs, root ) ;^[CLASS] SanityCheck  [METHOD] sanityCheckNormalization [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  RecentChange  handler  boolean  checkUserDeclarations  DiagnosticType  CANNOT_PARSE_GENERATED_CODE  GENERATED_BAD_CODE  Node  externs  root  CompilerPass  pass  
