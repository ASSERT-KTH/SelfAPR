[buglab_swap_variables]^sanityCheckNormalization ( root, externs ) ;^53^^^^^52^63^sanityCheckNormalization ( externs, root ) ;^[CLASS] SanityCheck  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  DiagnosticType  CANNOT_PARSE_GENERATED_CODE  GENERATED_BAD_CODE  Node  clonedExterns  externs  reparsedRoot  root  
[buglab_swap_variables]^sanityCheckNormalization (  root ) ;^53^^^^^52^63^sanityCheckNormalization ( externs, root ) ;^[CLASS] SanityCheck  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  DiagnosticType  CANNOT_PARSE_GENERATED_CODE  GENERATED_BAD_CODE  Node  clonedExterns  externs  reparsedRoot  root  
[buglab_swap_variables]^sanityCheckNormalization ( externs ) ;^53^^^^^52^63^sanityCheckNormalization ( externs, root ) ;^[CLASS] SanityCheck  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  DiagnosticType  CANNOT_PARSE_GENERATED_CODE  GENERATED_BAD_CODE  Node  clonedExterns  externs  reparsedRoot  root  
[buglab_swap_variables]^new Node ( Token.BLOCK, reparsedRoot, new Node ( Token.BLOCK, clonedExterns )  ) , root.getParent (  )  ) ;^58^59^60^61^^52^63^new Node ( Token.BLOCK, clonedExterns, new Node ( Token.BLOCK, reparsedRoot )  ) , root.getParent (  )  ) ;^[CLASS] SanityCheck  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  DiagnosticType  CANNOT_PARSE_GENERATED_CODE  GENERATED_BAD_CODE  Node  clonedExterns  externs  reparsedRoot  root  
[buglab_swap_variables]^new Node ( Token.BLOCK,  new Node ( Token.BLOCK, reparsedRoot )  ) , root.getParent (  )  ) ;^58^59^60^61^^52^63^new Node ( Token.BLOCK, clonedExterns, new Node ( Token.BLOCK, reparsedRoot )  ) , root.getParent (  )  ) ;^[CLASS] SanityCheck  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  DiagnosticType  CANNOT_PARSE_GENERATED_CODE  GENERATED_BAD_CODE  Node  clonedExterns  externs  reparsedRoot  root  
[buglab_swap_variables]^new Node ( Token.BLOCK, clonedExterns, new Node ( Token.BLOCK )  ) , root.getParent (  )  ) ;^58^59^60^61^^52^63^new Node ( Token.BLOCK, clonedExterns, new Node ( Token.BLOCK, reparsedRoot )  ) , root.getParent (  )  ) ;^[CLASS] SanityCheck  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  DiagnosticType  CANNOT_PARSE_GENERATED_CODE  GENERATED_BAD_CODE  Node  clonedExterns  externs  reparsedRoot  root  
[buglab_swap_variables]^new Node ( Token. clonedExterns, new Node ( Token.BLOCK, reparsedRoot )  ) , root.getParent (  )  ) ;^58^59^60^61^^52^63^new Node ( Token.BLOCK, clonedExterns, new Node ( Token.BLOCK, reparsedRoot )  ) , root.getParent (  )  ) ;^[CLASS] SanityCheck  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  DiagnosticType  CANNOT_PARSE_GENERATED_CODE  GENERATED_BAD_CODE  Node  clonedExterns  externs  reparsedRoot  root  
[buglab_swap_variables]^new Node ( Token.BLOCK )  ) , root.getParent (  )  ) ;^60^61^^^^52^63^new Node ( Token.BLOCK, reparsedRoot )  ) , root.getParent (  )  ) ;^[CLASS] SanityCheck  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  DiagnosticType  CANNOT_PARSE_GENERATED_CODE  GENERATED_BAD_CODE  Node  clonedExterns  externs  reparsedRoot  root  
[buglab_swap_variables]^new Node ( Token. reparsedRoot )  ) , root.getParent (  )  ) ;^60^61^^^^52^63^new Node ( Token.BLOCK, reparsedRoot )  ) , root.getParent (  )  ) ;^[CLASS] SanityCheck  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  DiagnosticType  CANNOT_PARSE_GENERATED_CODE  GENERATED_BAD_CODE  Node  clonedExterns  externs  reparsedRoot  root  
[buglab_swap_variables]^sanityCheckSymbolTable ( new Node ( Token.BLOCK,  new Node ( Token.BLOCK, reparsedRoot )  ) ,^57^58^59^60^^52^63^sanityCheckSymbolTable ( new Node ( Token.BLOCK, clonedExterns, new Node ( Token.BLOCK, reparsedRoot )  ) ,^[CLASS] SanityCheck  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  DiagnosticType  CANNOT_PARSE_GENERATED_CODE  GENERATED_BAD_CODE  Node  clonedExterns  externs  reparsedRoot  root  
[buglab_swap_variables]^sanityCheckSymbolTable ( new Node ( Token.BLOCK, reparsedRoot, new Node ( Token.BLOCK, clonedExterns )  ) ,^57^58^59^60^^52^63^sanityCheckSymbolTable ( new Node ( Token.BLOCK, clonedExterns, new Node ( Token.BLOCK, reparsedRoot )  ) ,^[CLASS] SanityCheck  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  DiagnosticType  CANNOT_PARSE_GENERATED_CODE  GENERATED_BAD_CODE  Node  clonedExterns  externs  reparsedRoot  root  
[buglab_swap_variables]^sanityCheckSymbolTable ( new Node ( Token.BLOCK, clonedExterns, new Node ( Token.BLOCK )  ) ,^57^58^59^60^^52^63^sanityCheckSymbolTable ( new Node ( Token.BLOCK, clonedExterns, new Node ( Token.BLOCK, reparsedRoot )  ) ,^[CLASS] SanityCheck  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  DiagnosticType  CANNOT_PARSE_GENERATED_CODE  GENERATED_BAD_CODE  Node  clonedExterns  externs  reparsedRoot  root  
[buglab_swap_variables]^sanityCheckSymbolTable ( new Node ( Token. clonedExterns, new Node ( Token.BLOCK, reparsedRoot )  ) ,^57^58^59^60^^52^63^sanityCheckSymbolTable ( new Node ( Token.BLOCK, clonedExterns, new Node ( Token.BLOCK, reparsedRoot )  ) ,^[CLASS] SanityCheck  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  DiagnosticType  CANNOT_PARSE_GENERATED_CODE  GENERATED_BAD_CODE  Node  clonedExterns  externs  reparsedRoot  root  
[buglab_swap_variables]^table.verify (  originalRoot ) ;^70^^^^^68^72^table.verify ( reparsedRoot, originalRoot ) ;^[CLASS] SanityCheck  [METHOD] sanityCheckSymbolTable [RETURN_TYPE] void   Node reparsedRoot Node originalRoot [VARIABLES] SymbolTable  table  AbstractCompiler  compiler  boolean  DiagnosticType  CANNOT_PARSE_GENERATED_CODE  GENERATED_BAD_CODE  Node  originalRoot  reparsedRoot  
[buglab_swap_variables]^table.verify ( originalRoot, reparsedRoot ) ;^70^^^^^68^72^table.verify ( reparsedRoot, originalRoot ) ;^[CLASS] SanityCheck  [METHOD] sanityCheckSymbolTable [RETURN_TYPE] void   Node reparsedRoot Node originalRoot [VARIABLES] SymbolTable  table  AbstractCompiler  compiler  boolean  DiagnosticType  CANNOT_PARSE_GENERATED_CODE  GENERATED_BAD_CODE  Node  originalRoot  reparsedRoot  
[buglab_swap_variables]^table.verify ( reparsedRoot ) ;^70^^^^^68^72^table.verify ( reparsedRoot, originalRoot ) ;^[CLASS] SanityCheck  [METHOD] sanityCheckSymbolTable [RETURN_TYPE] void   Node reparsedRoot Node originalRoot [VARIABLES] SymbolTable  table  AbstractCompiler  compiler  boolean  DiagnosticType  CANNOT_PARSE_GENERATED_CODE  GENERATED_BAD_CODE  Node  originalRoot  reparsedRoot  
[buglab_swap_variables]^String source = root.toSource ( compiler ) ;^88^^^^^81^104^String source = compiler.toSource ( root ) ;^[CLASS] SanityCheck  [METHOD] sanityCheckCodeGeneration [RETURN_TYPE] Node   Node root [VARIABLES] AbstractCompiler  compiler  String  source  source2  boolean  DiagnosticType  CANNOT_PARSE_GENERATED_CODE  GENERATED_BAD_CODE  Node  root  root2  
[buglab_swap_variables]^Node root2 = source.parseSyntheticCode ( compiler ) ;^89^^^^^81^104^Node root2 = compiler.parseSyntheticCode ( source ) ;^[CLASS] SanityCheck  [METHOD] sanityCheckCodeGeneration [RETURN_TYPE] Node   Node root [VARIABLES] AbstractCompiler  compiler  String  source  source2  boolean  DiagnosticType  CANNOT_PARSE_GENERATED_CODE  GENERATED_BAD_CODE  Node  root  root2  
[buglab_swap_variables]^compiler.report ( JSError.make ( source, StringUtil.truncateAtMaxLength ( CANNOT_PARSE_GENERATED_CODE, 100, true )  )  ) ;^91^92^^^^81^104^compiler.report ( JSError.make ( CANNOT_PARSE_GENERATED_CODE, StringUtil.truncateAtMaxLength ( source, 100, true )  )  ) ;^[CLASS] SanityCheck  [METHOD] sanityCheckCodeGeneration [RETURN_TYPE] Node   Node root [VARIABLES] AbstractCompiler  compiler  String  source  source2  boolean  DiagnosticType  CANNOT_PARSE_GENERATED_CODE  GENERATED_BAD_CODE  Node  root  root2  
[buglab_swap_variables]^compiler.report ( JSError.make ( CANNOT_PARSE_GENERATED_CODE, StringUtil.truncateAtMaxLength (  100, true )  )  ) ;^91^92^^^^81^104^compiler.report ( JSError.make ( CANNOT_PARSE_GENERATED_CODE, StringUtil.truncateAtMaxLength ( source, 100, true )  )  ) ;^[CLASS] SanityCheck  [METHOD] sanityCheckCodeGeneration [RETURN_TYPE] Node   Node root [VARIABLES] AbstractCompiler  compiler  String  source  source2  boolean  DiagnosticType  CANNOT_PARSE_GENERATED_CODE  GENERATED_BAD_CODE  Node  root  root2  
[buglab_swap_variables]^compiler.report ( JSError.make (  StringUtil.truncateAtMaxLength ( source, 100, true )  )  ) ;^91^92^^^^81^104^compiler.report ( JSError.make ( CANNOT_PARSE_GENERATED_CODE, StringUtil.truncateAtMaxLength ( source, 100, true )  )  ) ;^[CLASS] SanityCheck  [METHOD] sanityCheckCodeGeneration [RETURN_TYPE] Node   Node root [VARIABLES] AbstractCompiler  compiler  String  source  source2  boolean  DiagnosticType  CANNOT_PARSE_GENERATED_CODE  GENERATED_BAD_CODE  Node  root  root2  
[buglab_swap_variables]^String source2 = root2.toSource ( compiler ) ;^96^^^^^81^104^String source2 = compiler.toSource ( root2 ) ;^[CLASS] SanityCheck  [METHOD] sanityCheckCodeGeneration [RETURN_TYPE] Node   Node root [VARIABLES] AbstractCompiler  compiler  String  source  source2  boolean  DiagnosticType  CANNOT_PARSE_GENERATED_CODE  GENERATED_BAD_CODE  Node  root  root2  
[buglab_swap_variables]^if  ( !source.equals ( source22 )  )  {^97^^^^^81^104^if  ( !source.equals ( source2 )  )  {^[CLASS] SanityCheck  [METHOD] sanityCheckCodeGeneration [RETURN_TYPE] Node   Node root [VARIABLES] AbstractCompiler  compiler  String  source  source2  boolean  DiagnosticType  CANNOT_PARSE_GENERATED_CODE  GENERATED_BAD_CODE  Node  root  root2  
[buglab_swap_variables]^if  ( !source.equals ( source )  )  {^97^^^^^81^104^if  ( !source.equals ( source2 )  )  {^[CLASS] SanityCheck  [METHOD] sanityCheckCodeGeneration [RETURN_TYPE] Node   Node root [VARIABLES] AbstractCompiler  compiler  String  source  source2  boolean  DiagnosticType  CANNOT_PARSE_GENERATED_CODE  GENERATED_BAD_CODE  Node  root  root2  
[buglab_swap_variables]^compiler.report ( JSError.make ( GENERATED_BAD_CODE, StringUtil.truncateAtMaxLength (  100, true ) , StringUtil.truncateAtMaxLength ( source2, 100, true )  )  ) ;^98^99^100^^^81^104^compiler.report ( JSError.make ( GENERATED_BAD_CODE, StringUtil.truncateAtMaxLength ( source, 100, true ) , StringUtil.truncateAtMaxLength ( source2, 100, true )  )  ) ;^[CLASS] SanityCheck  [METHOD] sanityCheckCodeGeneration [RETURN_TYPE] Node   Node root [VARIABLES] AbstractCompiler  compiler  String  source  source2  boolean  DiagnosticType  CANNOT_PARSE_GENERATED_CODE  GENERATED_BAD_CODE  Node  root  root2  
[buglab_swap_variables]^compiler.report ( JSError.make ( GENERATED_BAD_CODE, StringUtil.truncateAtMaxLength ( source2, 100, true ) , StringUtil.truncateAtMaxLength ( source, 100, true )  )  ) ;^98^99^100^^^81^104^compiler.report ( JSError.make ( GENERATED_BAD_CODE, StringUtil.truncateAtMaxLength ( source, 100, true ) , StringUtil.truncateAtMaxLength ( source2, 100, true )  )  ) ;^[CLASS] SanityCheck  [METHOD] sanityCheckCodeGeneration [RETURN_TYPE] Node   Node root [VARIABLES] AbstractCompiler  compiler  String  source  source2  boolean  DiagnosticType  CANNOT_PARSE_GENERATED_CODE  GENERATED_BAD_CODE  Node  root  root2  
[buglab_swap_variables]^compiler.report ( JSError.make ( GENERATED_BAD_CODE, StringUtil.truncateAtMaxLength ( source, 100, true ) , StringUtil.truncateAtMaxLength (  100, true )  )  ) ;^98^99^100^^^81^104^compiler.report ( JSError.make ( GENERATED_BAD_CODE, StringUtil.truncateAtMaxLength ( source, 100, true ) , StringUtil.truncateAtMaxLength ( source2, 100, true )  )  ) ;^[CLASS] SanityCheck  [METHOD] sanityCheckCodeGeneration [RETURN_TYPE] Node   Node root [VARIABLES] AbstractCompiler  compiler  String  source  source2  boolean  DiagnosticType  CANNOT_PARSE_GENERATED_CODE  GENERATED_BAD_CODE  Node  root  root2  
[buglab_swap_variables]^compiler.report ( JSError.make ( source, StringUtil.truncateAtMaxLength ( GENERATED_BAD_CODE, 100, true ) , StringUtil.truncateAtMaxLength ( source2, 100, true )  )  ) ;^98^99^100^^^81^104^compiler.report ( JSError.make ( GENERATED_BAD_CODE, StringUtil.truncateAtMaxLength ( source, 100, true ) , StringUtil.truncateAtMaxLength ( source2, 100, true )  )  ) ;^[CLASS] SanityCheck  [METHOD] sanityCheckCodeGeneration [RETURN_TYPE] Node   Node root [VARIABLES] AbstractCompiler  compiler  String  source  source2  boolean  DiagnosticType  CANNOT_PARSE_GENERATED_CODE  GENERATED_BAD_CODE  Node  root  root2  
[buglab_swap_variables]^compiler.report ( JSError.make (  StringUtil.truncateAtMaxLength ( source, 100, true ) , StringUtil.truncateAtMaxLength ( source2, 100, true )  )  ) ;^98^99^100^^^81^104^compiler.report ( JSError.make ( GENERATED_BAD_CODE, StringUtil.truncateAtMaxLength ( source, 100, true ) , StringUtil.truncateAtMaxLength ( source2, 100, true )  )  ) ;^[CLASS] SanityCheck  [METHOD] sanityCheckCodeGeneration [RETURN_TYPE] Node   Node root [VARIABLES] AbstractCompiler  compiler  String  source  source2  boolean  DiagnosticType  CANNOT_PARSE_GENERATED_CODE  GENERATED_BAD_CODE  Node  root  root2  
[buglab_swap_variables]^compiler.report ( JSError.make ( source2, StringUtil.truncateAtMaxLength ( source, 100, true ) , StringUtil.truncateAtMaxLength ( GENERATED_BAD_CODE, 100, true )  )  ) ;^98^99^100^^^81^104^compiler.report ( JSError.make ( GENERATED_BAD_CODE, StringUtil.truncateAtMaxLength ( source, 100, true ) , StringUtil.truncateAtMaxLength ( source2, 100, true )  )  ) ;^[CLASS] SanityCheck  [METHOD] sanityCheckCodeGeneration [RETURN_TYPE] Node   Node root [VARIABLES] AbstractCompiler  compiler  String  source  source2  boolean  DiagnosticType  CANNOT_PARSE_GENERATED_CODE  GENERATED_BAD_CODE  Node  root  root2  
[buglab_swap_variables]^CompilerPass pass = new Normalize.VerifyConstants ( checkUserDeclarations, compiler ) ;^129^130^^^^110^135^CompilerPass pass = new Normalize.VerifyConstants ( compiler, checkUserDeclarations ) ;^[CLASS] SanityCheck  [METHOD] sanityCheckNormalization [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  RecentChange  handler  boolean  checkUserDeclarations  DiagnosticType  CANNOT_PARSE_GENERATED_CODE  GENERATED_BAD_CODE  Node  externs  root  CompilerPass  pass  
[buglab_swap_variables]^CompilerPass pass = new Normalize.VerifyConstants ( compiler ) ;^129^130^^^^110^135^CompilerPass pass = new Normalize.VerifyConstants ( compiler, checkUserDeclarations ) ;^[CLASS] SanityCheck  [METHOD] sanityCheckNormalization [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  RecentChange  handler  boolean  checkUserDeclarations  DiagnosticType  CANNOT_PARSE_GENERATED_CODE  GENERATED_BAD_CODE  Node  externs  root  CompilerPass  pass  
[buglab_swap_variables]^CompilerPass pass = new Normalize.VerifyConstants (  checkUserDeclarations ) ;^129^130^^^^110^135^CompilerPass pass = new Normalize.VerifyConstants ( compiler, checkUserDeclarations ) ;^[CLASS] SanityCheck  [METHOD] sanityCheckNormalization [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  RecentChange  handler  boolean  checkUserDeclarations  DiagnosticType  CANNOT_PARSE_GENERATED_CODE  GENERATED_BAD_CODE  Node  externs  root  CompilerPass  pass  
[buglab_swap_variables]^( new Normalize ( compiler, true )  ) .process ( root, externs ) ;^124^^^^^110^135^( new Normalize ( compiler, true )  ) .process ( externs, root ) ;^[CLASS] SanityCheck  [METHOD] sanityCheckNormalization [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  RecentChange  handler  boolean  checkUserDeclarations  DiagnosticType  CANNOT_PARSE_GENERATED_CODE  GENERATED_BAD_CODE  Node  externs  root  CompilerPass  pass  
[buglab_swap_variables]^( new Normalize ( compiler, true )  ) .process (  root ) ;^124^^^^^110^135^( new Normalize ( compiler, true )  ) .process ( externs, root ) ;^[CLASS] SanityCheck  [METHOD] sanityCheckNormalization [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  RecentChange  handler  boolean  checkUserDeclarations  DiagnosticType  CANNOT_PARSE_GENERATED_CODE  GENERATED_BAD_CODE  Node  externs  root  CompilerPass  pass  
[buglab_swap_variables]^( new Normalize ( compiler, true )  ) .process ( externs ) ;^124^^^^^110^135^( new Normalize ( compiler, true )  ) .process ( externs, root ) ;^[CLASS] SanityCheck  [METHOD] sanityCheckNormalization [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  RecentChange  handler  boolean  checkUserDeclarations  DiagnosticType  CANNOT_PARSE_GENERATED_CODE  GENERATED_BAD_CODE  Node  externs  root  CompilerPass  pass  
[buglab_swap_variables]^( new Normalize ( externs, true )  ) .process ( compiler, root ) ;^124^^^^^110^135^( new Normalize ( compiler, true )  ) .process ( externs, root ) ;^[CLASS] SanityCheck  [METHOD] sanityCheckNormalization [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  RecentChange  handler  boolean  checkUserDeclarations  DiagnosticType  CANNOT_PARSE_GENERATED_CODE  GENERATED_BAD_CODE  Node  externs  root  CompilerPass  pass  
[buglab_swap_variables]^( new Normalize (  true )  ) .process ( externs, root ) ;^124^^^^^110^135^( new Normalize ( compiler, true )  ) .process ( externs, root ) ;^[CLASS] SanityCheck  [METHOD] sanityCheckNormalization [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  RecentChange  handler  boolean  checkUserDeclarations  DiagnosticType  CANNOT_PARSE_GENERATED_CODE  GENERATED_BAD_CODE  Node  externs  root  CompilerPass  pass  
[buglab_swap_variables]^pass.process ( root, externs ) ;^131^^^^^110^135^pass.process ( externs, root ) ;^[CLASS] SanityCheck  [METHOD] sanityCheckNormalization [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  RecentChange  handler  boolean  checkUserDeclarations  DiagnosticType  CANNOT_PARSE_GENERATED_CODE  GENERATED_BAD_CODE  Node  externs  root  CompilerPass  pass  
[buglab_swap_variables]^pass.process (  root ) ;^131^^^^^110^135^pass.process ( externs, root ) ;^[CLASS] SanityCheck  [METHOD] sanityCheckNormalization [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  RecentChange  handler  boolean  checkUserDeclarations  DiagnosticType  CANNOT_PARSE_GENERATED_CODE  GENERATED_BAD_CODE  Node  externs  root  CompilerPass  pass  
[buglab_swap_variables]^pass.process ( externs ) ;^131^^^^^110^135^pass.process ( externs, root ) ;^[CLASS] SanityCheck  [METHOD] sanityCheckNormalization [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  RecentChange  handler  boolean  checkUserDeclarations  DiagnosticType  CANNOT_PARSE_GENERATED_CODE  GENERATED_BAD_CODE  Node  externs  root  CompilerPass  pass  
[buglab_swap_variables]^( new Normalize ( root, true )  ) .process ( externs, compiler ) ;^124^^^^^110^135^( new Normalize ( compiler, true )  ) .process ( externs, root ) ;^[CLASS] SanityCheck  [METHOD] sanityCheckNormalization [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  RecentChange  handler  boolean  checkUserDeclarations  DiagnosticType  CANNOT_PARSE_GENERATED_CODE  GENERATED_BAD_CODE  Node  externs  root  CompilerPass  pass  
