[buglab_swap_variables]^visit ( nameNode, n, parent, t.getString (  )  ) ;^58^^^^^40^59^visit ( t, n, parent, nameNode.getString (  )  ) ;^[CLASS] InvocationsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  function  n  nameNode  parent  
[buglab_swap_variables]^visit (  n, parent, nameNode.getString (  )  ) ;^58^^^^^40^59^visit ( t, n, parent, nameNode.getString (  )  ) ;^[CLASS] InvocationsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  function  n  nameNode  parent  
[buglab_swap_variables]^visit ( t, nameNode, parent, n.getString (  )  ) ;^58^^^^^40^59^visit ( t, n, parent, nameNode.getString (  )  ) ;^[CLASS] InvocationsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  function  n  nameNode  parent  
[buglab_swap_variables]^visit ( t,  parent, nameNode.getString (  )  ) ;^58^^^^^40^59^visit ( t, n, parent, nameNode.getString (  )  ) ;^[CLASS] InvocationsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  function  n  nameNode  parent  
[buglab_swap_variables]^visit ( t, parent, n, nameNode.getString (  )  ) ;^58^^^^^40^59^visit ( t, n, parent, nameNode.getString (  )  ) ;^[CLASS] InvocationsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  function  n  nameNode  parent  
[buglab_swap_variables]^visit ( t, n,  nameNode.getString (  )  ) ;^58^^^^^40^59^visit ( t, n, parent, nameNode.getString (  )  ) ;^[CLASS] InvocationsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  function  n  nameNode  parent  
[buglab_swap_variables]^visit ( t, n, parent.getString (  )  ) ;^58^^^^^40^59^visit ( t, n, parent, nameNode.getString (  )  ) ;^[CLASS] InvocationsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  function  n  nameNode  parent  
