[BugLab_Variable_Misuse]^if  ( parent.getType (  )  != Token.CALL )  {^41^^^^^40^59^if  ( n.getType (  )  != Token.CALL )  {^[CLASS] InvocationsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  function  n  nameNode  parent  
[BugLab_Wrong_Operator]^if  ( n.getType (  )  == Token.CALL )  {^41^^^^^40^59^if  ( n.getType (  )  != Token.CALL )  {^[CLASS] InvocationsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  function  n  nameNode  parent  
[BugLab_Variable_Misuse]^Node function = parent.getFirstChild (  ) ;^45^^^^^40^59^Node function = n.getFirstChild (  ) ;^[CLASS] InvocationsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  function  n  nameNode  parent  
[BugLab_Variable_Misuse]^if  ( parent.getType (  )  != Token.GETPROP )  {^47^^^^^40^59^if  ( function.getType (  )  != Token.GETPROP )  {^[CLASS] InvocationsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  function  n  nameNode  parent  
[BugLab_Wrong_Operator]^if  ( function.getType (  )  >= Token.GETPROP )  {^47^^^^^40^59^if  ( function.getType (  )  != Token.GETPROP )  {^[CLASS] InvocationsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  function  n  nameNode  parent  
[BugLab_Variable_Misuse]^Node nameNode = parent.getFirstChild (  ) .getNext (  ) ;^51^^^^^40^59^Node nameNode = function.getFirstChild (  ) .getNext (  ) ;^[CLASS] InvocationsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  function  n  nameNode  parent  
[BugLab_Variable_Misuse]^if  ( parent.getType (  )  != Token.STRING )  {^54^^^^^40^59^if  ( nameNode.getType (  )  != Token.STRING )  {^[CLASS] InvocationsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  function  n  nameNode  parent  
[BugLab_Wrong_Operator]^if  ( nameNode.getType (  )  > Token.STRING )  {^54^^^^^40^59^if  ( nameNode.getType (  )  != Token.STRING )  {^[CLASS] InvocationsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  function  n  nameNode  parent  
[BugLab_Variable_Misuse]^visit ( t, n, nameNode, nameNode.getString (  )  ) ;^58^^^^^40^59^visit ( t, n, parent, nameNode.getString (  )  ) ;^[CLASS] InvocationsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  function  n  nameNode  parent  
[BugLab_Variable_Misuse]^visit ( t, n, parent, n.getString (  )  ) ;^58^^^^^40^59^visit ( t, n, parent, nameNode.getString (  )  ) ;^[CLASS] InvocationsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  function  n  nameNode  parent  
[BugLab_Argument_Swapping]^visit ( n, t, parent, nameNode.getString (  )  ) ;^58^^^^^40^59^visit ( t, n, parent, nameNode.getString (  )  ) ;^[CLASS] InvocationsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  function  n  nameNode  parent  
[BugLab_Argument_Swapping]^visit ( t, nameNode, parent, n.getString (  )  ) ;^58^^^^^40^59^visit ( t, n, parent, nameNode.getString (  )  ) ;^[CLASS] InvocationsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  function  n  nameNode  parent  
[BugLab_Argument_Swapping]^visit ( t, n, nameNode, parent.getString (  )  ) ;^58^^^^^40^59^visit ( t, n, parent, nameNode.getString (  )  ) ;^[CLASS] InvocationsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  function  n  nameNode  parent  
[BugLab_Variable_Misuse]^visit ( t, n, parent, parent.getString (  )  ) ;^58^^^^^40^59^visit ( t, n, parent, nameNode.getString (  )  ) ;^[CLASS] InvocationsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  function  n  nameNode  parent  
