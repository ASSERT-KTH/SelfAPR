[BugLab_Variable_Misuse]^NodeTraversal.traverse ( null, externs, cb ) ;^52^^^^^50^54^NodeTraversal.traverse ( null, root, cb ) ;^[CLASS] RemoveConstantExpressions RemoveConstantRValuesCallback ReportCodeHasChangedListener  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] RemoveConstantRValuesCallback  cb  AbstractCompiler  compiler  boolean  AstChangeProxy  changeProxy  Result  result  Node  externs  root  
[BugLab_Argument_Swapping]^NodeTraversal.traverse ( null, cb, root ) ;^52^^^^^50^54^NodeTraversal.traverse ( null, root, cb ) ;^[CLASS] RemoveConstantExpressions RemoveConstantRValuesCallback ReportCodeHasChangedListener  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] RemoveConstantRValuesCallback  cb  AbstractCompiler  compiler  boolean  AstChangeProxy  changeProxy  Result  result  Node  externs  root  
[BugLab_Argument_Swapping]^trySimplify ( node, parent ) ;^77^^^^^76^78^trySimplify ( parent, node ) ;^[CLASS] RemoveConstantExpressions RemoveConstantRValuesCallback ReportCodeHasChangedListener  [METHOD] visit [RETURN_TYPE] void   NodeTraversal traversal Node node Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  traversal  AstChangeProxy  changeProxy  Result  result  Node  node  parent  
[BugLab_Wrong_Operator]^if  ( node.getType (  )  == Token.EXPR_RESULT )  {^85^^^^^84^93^if  ( node.getType (  )  != Token.EXPR_RESULT )  {^[CLASS] RemoveConstantExpressions RemoveConstantRValuesCallback ReportCodeHasChangedListener  [METHOD] trySimplify [RETURN_TYPE] void   Node parent Node node [VARIABLES] AbstractCompiler  compiler  boolean  AstChangeProxy  changeProxy  Result  result  Node  exprBody  node  parent  
[BugLab_Variable_Misuse]^if  ( parent.getType (  )  != Token.EXPR_RESULT )  {^85^^^^^84^93^if  ( node.getType (  )  != Token.EXPR_RESULT )  {^[CLASS] RemoveConstantExpressions RemoveConstantRValuesCallback ReportCodeHasChangedListener  [METHOD] trySimplify [RETURN_TYPE] void   Node parent Node node [VARIABLES] AbstractCompiler  compiler  boolean  AstChangeProxy  changeProxy  Result  result  Node  exprBody  node  parent  
[BugLab_Variable_Misuse]^Node exprBody = parent.getFirstChild (  ) ;^89^^^^^84^93^Node exprBody = node.getFirstChild (  ) ;^[CLASS] RemoveConstantExpressions RemoveConstantRValuesCallback ReportCodeHasChangedListener  [METHOD] trySimplify [RETURN_TYPE] void   Node parent Node node [VARIABLES] AbstractCompiler  compiler  boolean  AstChangeProxy  changeProxy  Result  result  Node  exprBody  node  parent  
[BugLab_Variable_Misuse]^if  ( !NodeUtil.nodeTypeMayHaveSideEffects ( node )  )  {^90^^^^^84^93^if  ( !NodeUtil.nodeTypeMayHaveSideEffects ( exprBody )  )  {^[CLASS] RemoveConstantExpressions RemoveConstantRValuesCallback ReportCodeHasChangedListener  [METHOD] trySimplify [RETURN_TYPE] void   Node parent Node node [VARIABLES] AbstractCompiler  compiler  boolean  AstChangeProxy  changeProxy  Result  result  Node  exprBody  node  parent  
[BugLab_Variable_Misuse]^changeProxy.replaceWith ( node, node, getSideEffectNodes ( exprBody )  ) ;^91^^^^^84^93^changeProxy.replaceWith ( parent, node, getSideEffectNodes ( exprBody )  ) ;^[CLASS] RemoveConstantExpressions RemoveConstantRValuesCallback ReportCodeHasChangedListener  [METHOD] trySimplify [RETURN_TYPE] void   Node parent Node node [VARIABLES] AbstractCompiler  compiler  boolean  AstChangeProxy  changeProxy  Result  result  Node  exprBody  node  parent  
[BugLab_Variable_Misuse]^changeProxy.replaceWith ( parent, exprBody, getSideEffectNodes ( exprBody )  ) ;^91^^^^^84^93^changeProxy.replaceWith ( parent, node, getSideEffectNodes ( exprBody )  ) ;^[CLASS] RemoveConstantExpressions RemoveConstantRValuesCallback ReportCodeHasChangedListener  [METHOD] trySimplify [RETURN_TYPE] void   Node parent Node node [VARIABLES] AbstractCompiler  compiler  boolean  AstChangeProxy  changeProxy  Result  result  Node  exprBody  node  parent  
[BugLab_Variable_Misuse]^changeProxy.replaceWith ( parent, node, getSideEffectNodes ( node )  ) ;^91^^^^^84^93^changeProxy.replaceWith ( parent, node, getSideEffectNodes ( exprBody )  ) ;^[CLASS] RemoveConstantExpressions RemoveConstantRValuesCallback ReportCodeHasChangedListener  [METHOD] trySimplify [RETURN_TYPE] void   Node parent Node node [VARIABLES] AbstractCompiler  compiler  boolean  AstChangeProxy  changeProxy  Result  result  Node  exprBody  node  parent  
[BugLab_Argument_Swapping]^changeProxy.replaceWith ( node, parent, getSideEffectNodes ( exprBody )  ) ;^91^^^^^84^93^changeProxy.replaceWith ( parent, node, getSideEffectNodes ( exprBody )  ) ;^[CLASS] RemoveConstantExpressions RemoveConstantRValuesCallback ReportCodeHasChangedListener  [METHOD] trySimplify [RETURN_TYPE] void   Node parent Node node [VARIABLES] AbstractCompiler  compiler  boolean  AstChangeProxy  changeProxy  Result  result  Node  exprBody  node  parent  
[BugLab_Argument_Swapping]^changeProxy.replaceWith ( exprBody, node, getSideEffectNodes ( parent )  ) ;^91^^^^^84^93^changeProxy.replaceWith ( parent, node, getSideEffectNodes ( exprBody )  ) ;^[CLASS] RemoveConstantExpressions RemoveConstantRValuesCallback ReportCodeHasChangedListener  [METHOD] trySimplify [RETURN_TYPE] void   Node parent Node node [VARIABLES] AbstractCompiler  compiler  boolean  AstChangeProxy  changeProxy  Result  result  Node  exprBody  node  parent  
[BugLab_Variable_Misuse]^changeProxy.replaceWith ( parent, node, getSideEffectNodes ( parent )  ) ;^91^^^^^84^93^changeProxy.replaceWith ( parent, node, getSideEffectNodes ( exprBody )  ) ;^[CLASS] RemoveConstantExpressions RemoveConstantRValuesCallback ReportCodeHasChangedListener  [METHOD] trySimplify [RETURN_TYPE] void   Node parent Node node [VARIABLES] AbstractCompiler  compiler  boolean  AstChangeProxy  changeProxy  Result  result  Node  exprBody  node  parent  
[BugLab_Variable_Misuse]^if  ( !NodeUtil.nodeTypeMayHaveSideEffects ( parent )  )  {^90^^^^^84^93^if  ( !NodeUtil.nodeTypeMayHaveSideEffects ( exprBody )  )  {^[CLASS] RemoveConstantExpressions RemoveConstantRValuesCallback ReportCodeHasChangedListener  [METHOD] trySimplify [RETURN_TYPE] void   Node parent Node node [VARIABLES] AbstractCompiler  compiler  boolean  AstChangeProxy  changeProxy  Result  result  Node  exprBody  node  parent  
[BugLab_Variable_Misuse]^changeProxy.replaceWith ( exprBody, node, getSideEffectNodes ( exprBody )  ) ;^91^^^^^84^93^changeProxy.replaceWith ( parent, node, getSideEffectNodes ( exprBody )  ) ;^[CLASS] RemoveConstantExpressions RemoveConstantRValuesCallback ReportCodeHasChangedListener  [METHOD] trySimplify [RETURN_TYPE] void   Node parent Node node [VARIABLES] AbstractCompiler  compiler  boolean  AstChangeProxy  changeProxy  Result  result  Node  exprBody  node  parent  
[BugLab_Argument_Swapping]^changeProxy.replaceWith ( parent, exprBody, getSideEffectNodes ( node )  ) ;^91^^^^^84^93^changeProxy.replaceWith ( parent, node, getSideEffectNodes ( exprBody )  ) ;^[CLASS] RemoveConstantExpressions RemoveConstantRValuesCallback ReportCodeHasChangedListener  [METHOD] trySimplify [RETURN_TYPE] void   Node parent Node node [VARIABLES] AbstractCompiler  compiler  boolean  AstChangeProxy  changeProxy  Result  result  Node  exprBody  node  parent  
[BugLab_Variable_Misuse]^NodeTraversal.traverse ( null, subexpression, new GatherSideEffectSubexpressionsCallback ( null,^100^101^102^103^^98^112^NodeTraversal.traverse ( null, node, new GatherSideEffectSubexpressionsCallback ( null,^[CLASS] RemoveConstantExpressions RemoveConstantRValuesCallback ReportCodeHasChangedListener  [METHOD] getSideEffectNodes [RETURN_TYPE] List   Node node [VARIABLES] AbstractCompiler  compiler  List  replacements  subexpressions  boolean  AstChangeProxy  changeProxy  Result  result  Node  node  subexpression  
[BugLab_Variable_Misuse]^replacements.add ( new Node ( Token.EXPR_RESULT, node )  ) ;^109^^^^^98^112^replacements.add ( new Node ( Token.EXPR_RESULT, subexpression )  ) ;^[CLASS] RemoveConstantExpressions RemoveConstantRValuesCallback ReportCodeHasChangedListener  [METHOD] getSideEffectNodes [RETURN_TYPE] List   Node node [VARIABLES] AbstractCompiler  compiler  List  replacements  subexpressions  boolean  AstChangeProxy  changeProxy  Result  result  Node  node  subexpression  
[BugLab_Wrong_Literal]^result.changed = false;^131^^^^^130^132^result.changed = true;^[CLASS] RemoveConstantExpressions RemoveConstantRValuesCallback ReportCodeHasChangedListener  [METHOD] nodeRemoved [RETURN_TYPE] void   Node node [VARIABLES] AbstractCompiler  compiler  boolean  AstChangeProxy  changeProxy  Result  result  Node  node  
[BugLab_Argument_Swapping]^trySimplify ( node, parent ) ;^77^^^^^76^78^trySimplify ( parent, node ) ;^[CLASS] RemoveConstantRValuesCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal traversal Node node Node parent [VARIABLES] boolean  NodeTraversal  traversal  AstChangeProxy  changeProxy  Result  result  Node  node  parent  
[BugLab_Variable_Misuse]^if  ( parent.getType (  )  != Token.EXPR_RESULT )  {^85^^^^^84^93^if  ( node.getType (  )  != Token.EXPR_RESULT )  {^[CLASS] RemoveConstantRValuesCallback  [METHOD] trySimplify [RETURN_TYPE] void   Node parent Node node [VARIABLES] boolean  AstChangeProxy  changeProxy  Result  result  Node  exprBody  node  parent  
[BugLab_Wrong_Operator]^if  ( node.getType (  )  == Token.EXPR_RESULT )  {^85^^^^^84^93^if  ( node.getType (  )  != Token.EXPR_RESULT )  {^[CLASS] RemoveConstantRValuesCallback  [METHOD] trySimplify [RETURN_TYPE] void   Node parent Node node [VARIABLES] boolean  AstChangeProxy  changeProxy  Result  result  Node  exprBody  node  parent  
[BugLab_Variable_Misuse]^Node exprBody = parent.getFirstChild (  ) ;^89^^^^^84^93^Node exprBody = node.getFirstChild (  ) ;^[CLASS] RemoveConstantRValuesCallback  [METHOD] trySimplify [RETURN_TYPE] void   Node parent Node node [VARIABLES] boolean  AstChangeProxy  changeProxy  Result  result  Node  exprBody  node  parent  
[BugLab_Variable_Misuse]^if  ( !NodeUtil.nodeTypeMayHaveSideEffects ( node )  )  {^90^^^^^84^93^if  ( !NodeUtil.nodeTypeMayHaveSideEffects ( exprBody )  )  {^[CLASS] RemoveConstantRValuesCallback  [METHOD] trySimplify [RETURN_TYPE] void   Node parent Node node [VARIABLES] boolean  AstChangeProxy  changeProxy  Result  result  Node  exprBody  node  parent  
[BugLab_Variable_Misuse]^changeProxy.replaceWith ( parent, parent, getSideEffectNodes ( exprBody )  ) ;^91^^^^^84^93^changeProxy.replaceWith ( parent, node, getSideEffectNodes ( exprBody )  ) ;^[CLASS] RemoveConstantRValuesCallback  [METHOD] trySimplify [RETURN_TYPE] void   Node parent Node node [VARIABLES] boolean  AstChangeProxy  changeProxy  Result  result  Node  exprBody  node  parent  
[BugLab_Variable_Misuse]^changeProxy.replaceWith ( parent, node, getSideEffectNodes ( node )  ) ;^91^^^^^84^93^changeProxy.replaceWith ( parent, node, getSideEffectNodes ( exprBody )  ) ;^[CLASS] RemoveConstantRValuesCallback  [METHOD] trySimplify [RETURN_TYPE] void   Node parent Node node [VARIABLES] boolean  AstChangeProxy  changeProxy  Result  result  Node  exprBody  node  parent  
[BugLab_Argument_Swapping]^changeProxy.replaceWith ( exprBody, node, getSideEffectNodes ( parent )  ) ;^91^^^^^84^93^changeProxy.replaceWith ( parent, node, getSideEffectNodes ( exprBody )  ) ;^[CLASS] RemoveConstantRValuesCallback  [METHOD] trySimplify [RETURN_TYPE] void   Node parent Node node [VARIABLES] boolean  AstChangeProxy  changeProxy  Result  result  Node  exprBody  node  parent  
[BugLab_Argument_Swapping]^changeProxy.replaceWith ( parent, exprBody, getSideEffectNodes ( node )  ) ;^91^^^^^84^93^changeProxy.replaceWith ( parent, node, getSideEffectNodes ( exprBody )  ) ;^[CLASS] RemoveConstantRValuesCallback  [METHOD] trySimplify [RETURN_TYPE] void   Node parent Node node [VARIABLES] boolean  AstChangeProxy  changeProxy  Result  result  Node  exprBody  node  parent  
[BugLab_Variable_Misuse]^changeProxy.replaceWith ( parent, node, getSideEffectNodes ( parent )  ) ;^91^^^^^84^93^changeProxy.replaceWith ( parent, node, getSideEffectNodes ( exprBody )  ) ;^[CLASS] RemoveConstantRValuesCallback  [METHOD] trySimplify [RETURN_TYPE] void   Node parent Node node [VARIABLES] boolean  AstChangeProxy  changeProxy  Result  result  Node  exprBody  node  parent  
[BugLab_Variable_Misuse]^if  ( !NodeUtil.nodeTypeMayHaveSideEffects ( parent )  )  {^90^^^^^84^93^if  ( !NodeUtil.nodeTypeMayHaveSideEffects ( exprBody )  )  {^[CLASS] RemoveConstantRValuesCallback  [METHOD] trySimplify [RETURN_TYPE] void   Node parent Node node [VARIABLES] boolean  AstChangeProxy  changeProxy  Result  result  Node  exprBody  node  parent  
[BugLab_Variable_Misuse]^changeProxy.replaceWith ( exprBody, node, getSideEffectNodes ( exprBody )  ) ;^91^^^^^84^93^changeProxy.replaceWith ( parent, node, getSideEffectNodes ( exprBody )  ) ;^[CLASS] RemoveConstantRValuesCallback  [METHOD] trySimplify [RETURN_TYPE] void   Node parent Node node [VARIABLES] boolean  AstChangeProxy  changeProxy  Result  result  Node  exprBody  node  parent  
[BugLab_Variable_Misuse]^changeProxy.replaceWith ( parent, exprBody, getSideEffectNodes ( exprBody )  ) ;^91^^^^^84^93^changeProxy.replaceWith ( parent, node, getSideEffectNodes ( exprBody )  ) ;^[CLASS] RemoveConstantRValuesCallback  [METHOD] trySimplify [RETURN_TYPE] void   Node parent Node node [VARIABLES] boolean  AstChangeProxy  changeProxy  Result  result  Node  exprBody  node  parent  
[BugLab_Variable_Misuse]^NodeTraversal.traverse ( null, subexpression, new GatherSideEffectSubexpressionsCallback ( null,^100^101^102^103^^98^112^NodeTraversal.traverse ( null, node, new GatherSideEffectSubexpressionsCallback ( null,^[CLASS] RemoveConstantRValuesCallback  [METHOD] getSideEffectNodes [RETURN_TYPE] List   Node node [VARIABLES] List  replacements  subexpressions  boolean  AstChangeProxy  changeProxy  Result  result  Node  node  subexpression  
[BugLab_Variable_Misuse]^replacements.add ( new Node ( Token.EXPR_RESULT, node )  ) ;^109^^^^^98^112^replacements.add ( new Node ( Token.EXPR_RESULT, subexpression )  ) ;^[CLASS] RemoveConstantRValuesCallback  [METHOD] getSideEffectNodes [RETURN_TYPE] List   Node node [VARIABLES] List  replacements  subexpressions  boolean  AstChangeProxy  changeProxy  Result  result  Node  node  subexpression  
[BugLab_Wrong_Literal]^result.changed = false;^131^^^^^130^132^result.changed = true;^[CLASS] ReportCodeHasChangedListener  [METHOD] nodeRemoved [RETURN_TYPE] void   Node node [VARIABLES] Result  result  Node  node  boolean  
