[buglab_swap_variables]^Preconditions.checkArgument ( ( n.getType (  )  == Token.BLOCK && n.getParent (  )  == null )  || n.getType (  )  == Token. "May only create scopes for the global node and functions" ) ;^102^103^104^105^^100^113^Preconditions.checkArgument ( ( n.getType (  )  == Token.BLOCK && n.getParent (  )  == null )  || n.getType (  )  == Token.FUNCTION, "May only create scopes for the global node and functions" ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] createScope [RETURN_TYPE] Scope   Node n Scope parent [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  parent  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Node  actualRoot  expectedRoot  n  ScopeCreator  scopeCreator  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  
[buglab_swap_variables]^cache.scopes.put ( scopeCreator, n.createScope ( n, parent )  ) ;^109^^^^^100^113^cache.scopes.put ( n, scopeCreator.createScope ( n, parent )  ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] createScope [RETURN_TYPE] Scope   Node n Scope parent [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  parent  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Node  actualRoot  expectedRoot  n  ScopeCreator  scopeCreator  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  
[buglab_swap_variables]^cache.scopes.put (  scopeCreator.createScope ( n, parent )  ) ;^109^^^^^100^113^cache.scopes.put ( n, scopeCreator.createScope ( n, parent )  ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] createScope [RETURN_TYPE] Scope   Node n Scope parent [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  parent  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Node  actualRoot  expectedRoot  n  ScopeCreator  scopeCreator  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  
[buglab_swap_variables]^cache.scopes.put ( n, scopeCreator.createScope ( n )  ) ;^109^^^^^100^113^cache.scopes.put ( n, scopeCreator.createScope ( n, parent )  ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] createScope [RETURN_TYPE] Scope   Node n Scope parent [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  parent  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Node  actualRoot  expectedRoot  n  ScopeCreator  scopeCreator  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  
[buglab_swap_variables]^cache.scopes.put ( n, parent.createScope ( n, scopeCreator )  ) ;^109^^^^^100^113^cache.scopes.put ( n, scopeCreator.createScope ( n, parent )  ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] createScope [RETURN_TYPE] Scope   Node n Scope parent [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  parent  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Node  actualRoot  expectedRoot  n  ScopeCreator  scopeCreator  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  
[buglab_swap_variables]^cache.scopes.put ( n.createScope ( n, parent )  ) ;^109^^^^^100^113^cache.scopes.put ( n, scopeCreator.createScope ( n, parent )  ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] createScope [RETURN_TYPE] Scope   Node n Scope parent [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  parent  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Node  actualRoot  expectedRoot  n  ScopeCreator  scopeCreator  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  
[buglab_swap_variables]^cache.scopes.put ( parent, scopeCreator.createScope ( n, n )  ) ;^109^^^^^100^113^cache.scopes.put ( n, scopeCreator.createScope ( n, parent )  ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] createScope [RETURN_TYPE] Scope   Node n Scope parent [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  parent  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Node  actualRoot  expectedRoot  n  ScopeCreator  scopeCreator  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  
[buglab_swap_variables]^return n.scopes.get ( cache ) ;^112^^^^^100^113^return cache.scopes.get ( n ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] createScope [RETURN_TYPE] Scope   Node n Scope parent [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  parent  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Node  actualRoot  expectedRoot  n  ScopeCreator  scopeCreator  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  
[buglab_swap_variables]^return n.get ( cache.scopes ) ;^112^^^^^100^113^return cache.scopes.get ( n ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] createScope [RETURN_TYPE] Scope   Node n Scope parent [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  parent  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Node  actualRoot  expectedRoot  n  ScopeCreator  scopeCreator  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  
[buglab_swap_variables]^VerifyingCallback callback = new VerifyingCallback ( actualRoot, expectedRoot ) ;^153^154^^^^152^156^VerifyingCallback callback = new VerifyingCallback ( expectedRoot, actualRoot ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verify [RETURN_TYPE] void   Node expectedRoot Node actualRoot [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Node  actualRoot  expectedRoot  n  ScopeCreator  scopeCreator  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  VerifyingCallback  callback  
[buglab_swap_variables]^VerifyingCallback callback = new VerifyingCallback (  actualRoot ) ;^153^154^^^^152^156^VerifyingCallback callback = new VerifyingCallback ( expectedRoot, actualRoot ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verify [RETURN_TYPE] void   Node expectedRoot Node actualRoot [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Node  actualRoot  expectedRoot  n  ScopeCreator  scopeCreator  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  VerifyingCallback  callback  
[buglab_swap_variables]^VerifyingCallback callback = new VerifyingCallback ( expectedRoot ) ;^153^154^^^^152^156^VerifyingCallback callback = new VerifyingCallback ( expectedRoot, actualRoot ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verify [RETURN_TYPE] void   Node expectedRoot Node actualRoot [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Node  actualRoot  expectedRoot  n  ScopeCreator  scopeCreator  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  VerifyingCallback  callback  
[buglab_swap_variables]^NodeTraversal.traverse ( expectedRoot, compiler, this ) ;^208^^^^^193^223^NodeTraversal.traverse ( compiler, expectedRoot, this ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[buglab_swap_variables]^NodeTraversal.traverse (  expectedRoot, this ) ;^208^^^^^193^223^NodeTraversal.traverse ( compiler, expectedRoot, this ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[buglab_swap_variables]^NodeTraversal.traverse ( compiler,  this ) ;^208^^^^^193^223^NodeTraversal.traverse ( compiler, expectedRoot, this ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[buglab_swap_variables]^( new NodeTraversal ( actualRoot, this, SymbolTable.this )  ) .traverse ( compiler ) ;^211^212^^^^196^226^( new NodeTraversal ( compiler, this, SymbolTable.this )  ) .traverse ( actualRoot ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[buglab_swap_variables]^( new NodeTraversal (  this, SymbolTable.this )  ) .traverse ( actualRoot ) ;^211^212^^^^196^226^( new NodeTraversal ( compiler, this, SymbolTable.this )  ) .traverse ( actualRoot ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[buglab_swap_variables]^Preconditions.checkState ( actualScopes.size (  )  == expectedScopes.size (  )  ) ;^215^^^^^200^230^Preconditions.checkState ( expectedScopes.size (  )  == actualScopes.size (  )  ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[buglab_swap_variables]^if  ( expectedScope == null || actualVar.getVar ( var.getName (  )  )  != var )  {^242^243^^^^227^257^if  ( actualVar == null || expectedScope.getVar ( var.getName (  )  )  != var )  {^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[buglab_swap_variables]^if  ( var == null || expectedScope.getVar ( actualVar.getName (  )  )  != var )  {^242^243^^^^227^257^if  ( actualVar == null || expectedScope.getVar ( var.getName (  )  )  != var )  {^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[buglab_swap_variables]^} else if  ( !checkNodesMatch ( var.getNameNode (  ) .getNameNode (  )  )  ||^246^247^248^249^^231^261^} else if  ( !checkNodesMatch ( var.getNameNode (  ) , actualVar.getNameNode (  )  )  ||^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[buglab_swap_variables]^compiler.report ( JSError.make ( var, MOVED_VARIABLE.getName (  )  )  ) ;^251^252^^^^246^253^compiler.report ( JSError.make ( MOVED_VARIABLE, var.getName (  )  )  ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[buglab_swap_variables]^compiler.report ( JSError.make ( MOVED_VARIABLE.getName (  )  )  ) ;^251^252^^^^246^253^compiler.report ( JSError.make ( MOVED_VARIABLE, var.getName (  )  )  ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[buglab_swap_variables]^compiler.report ( JSError.make (  var.getName (  )  )  ) ;^251^252^^^^246^253^compiler.report ( JSError.make ( MOVED_VARIABLE, var.getName (  )  )  ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[buglab_swap_variables]^JSError.make ( var, MOVED_VARIABLE.getName (  )  )  ) ;^252^^^^^246^253^JSError.make ( MOVED_VARIABLE, var.getName (  )  )  ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[buglab_swap_variables]^JSError.make ( MOVED_VARIABLE.getName (  )  )  ) ;^252^^^^^246^253^JSError.make ( MOVED_VARIABLE, var.getName (  )  )  ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[buglab_swap_variables]^JSError.make (  var.getName (  )  )  ) ;^252^^^^^246^253^JSError.make ( MOVED_VARIABLE, var.getName (  )  )  ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[buglab_swap_variables]^!checkNodesMatch ( actualVar.getNameNode (  ) , var.getNameNode (  )  )  || !isNodeAttached ( actualVar.getNameNode (  )  )  )  {^247^248^249^250^^232^262^!checkNodesMatch ( var.getNameNode (  ) , actualVar.getNameNode (  )  )  || !isNodeAttached ( actualVar.getNameNode (  )  )  )  {^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[buglab_swap_variables]^!checkNodesMatch ( var.getNameNode (  ) .getNameNode (  )  )  || !isNodeAttached ( actualVar.getNameNode (  )  )  )  {^247^248^249^250^^232^262^!checkNodesMatch ( var.getNameNode (  ) , actualVar.getNameNode (  )  )  || !isNodeAttached ( actualVar.getNameNode (  )  )  )  {^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[buglab_swap_variables]^compiler.report ( JSError.make ( var, MOVED_VARIABLE.getName (  )  )  ) ;^251^252^^^^236^266^compiler.report ( JSError.make ( MOVED_VARIABLE, var.getName (  )  )  ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[buglab_swap_variables]^compiler.report ( JSError.make ( MOVED_VARIABLE.getName (  )  )  ) ;^251^252^^^^236^266^compiler.report ( JSError.make ( MOVED_VARIABLE, var.getName (  )  )  ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[buglab_swap_variables]^compiler.report ( JSError.make (  var.getName (  )  )  ) ;^251^252^^^^236^266^compiler.report ( JSError.make ( MOVED_VARIABLE, var.getName (  )  )  ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[buglab_swap_variables]^JSError.make ( var, MOVED_VARIABLE.getName (  )  )  ) ;^252^^^^^237^267^JSError.make ( MOVED_VARIABLE, var.getName (  )  )  ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[buglab_swap_variables]^JSError.make ( MOVED_VARIABLE.getName (  )  )  ) ;^252^^^^^237^267^JSError.make ( MOVED_VARIABLE, var.getName (  )  )  ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[buglab_swap_variables]^JSError.make (  var.getName (  )  )  ) ;^252^^^^^237^267^JSError.make ( MOVED_VARIABLE, var.getName (  )  )  ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[buglab_swap_variables]^compiler.report ( JSError.make ( var, MISSING_VARIABLE.getName (  )  )  ) ;^244^245^^^^242^253^compiler.report ( JSError.make ( MISSING_VARIABLE, var.getName (  )  )  ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[buglab_swap_variables]^compiler.report ( JSError.make ( MISSING_VARIABLE.getName (  )  )  ) ;^244^245^^^^242^253^compiler.report ( JSError.make ( MISSING_VARIABLE, var.getName (  )  )  ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[buglab_swap_variables]^compiler.report ( JSError.make (  var.getName (  )  )  ) ;^244^245^^^^242^253^compiler.report ( JSError.make ( MISSING_VARIABLE, var.getName (  )  )  ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[buglab_swap_variables]^JSError.make ( var, MISSING_VARIABLE.getName (  )  )  ) ;^245^^^^^242^253^JSError.make ( MISSING_VARIABLE, var.getName (  )  )  ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[buglab_swap_variables]^JSError.make ( MISSING_VARIABLE.getName (  )  )  ) ;^245^^^^^242^253^JSError.make ( MISSING_VARIABLE, var.getName (  )  )  ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[buglab_swap_variables]^JSError.make (  var.getName (  )  )  ) ;^245^^^^^242^253^JSError.make ( MISSING_VARIABLE, var.getName (  )  )  ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[buglab_swap_variables]^} else if  ( !checkNodesMatch ( actualVar.getNameNode (  ) , var.getNameNode (  )  )  ||^246^247^248^249^^231^261^} else if  ( !checkNodesMatch ( var.getNameNode (  ) , actualVar.getNameNode (  )  )  ||^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[buglab_swap_variables]^Scope.Var actualVar = var.getVar ( actualScope.getName (  )  ) ;^241^^^^^226^256^Scope.Var actualVar = actualScope.getVar ( var.getName (  )  ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[buglab_swap_variables]^compiler.report ( JSError.make ( MISSING_VARIABLE.getName (  )  )  ) ;^244^245^^^^229^259^compiler.report ( JSError.make ( MISSING_VARIABLE, var.getName (  )  )  ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[buglab_swap_variables]^compiler.report ( JSError.make (  var.getName (  )  )  ) ;^244^245^^^^229^259^compiler.report ( JSError.make ( MISSING_VARIABLE, var.getName (  )  )  ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[buglab_swap_variables]^JSError.make ( var, MISSING_VARIABLE.getName (  )  )  ) ;^245^^^^^230^260^JSError.make ( MISSING_VARIABLE, var.getName (  )  )  ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[buglab_swap_variables]^JSError.make ( MISSING_VARIABLE.getName (  )  )  ) ;^245^^^^^230^260^JSError.make ( MISSING_VARIABLE, var.getName (  )  )  ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[buglab_swap_variables]^JSError.make (  var.getName (  )  )  ) ;^245^^^^^230^260^JSError.make ( MISSING_VARIABLE, var.getName (  )  )  ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[buglab_swap_variables]^if  ( !checkNodesMatch ( actualScope.getRootNode (  ) , expectedScope.getRootNode (  )  )  )  {^221^222^^^^206^236^if  ( !checkNodesMatch ( expectedScope.getRootNode (  ) , actualScope.getRootNode (  )  )  )  {^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[buglab_swap_variables]^if  ( !checkNodesMatch ( expectedScope.getRootNode (  ) .getRootNode (  )  )  )  {^221^222^^^^206^236^if  ( !checkNodesMatch ( expectedScope.getRootNode (  ) , actualScope.getRootNode (  )  )  )  {^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[buglab_swap_variables]^compiler.report ( JSError.make ( expectedScope, SCOPE_MISMATCH.getRootNode (  ) .toStringTree (  ) ,^223^224^225^226^^221^229^compiler.report ( JSError.make ( SCOPE_MISMATCH, expectedScope.getRootNode (  ) .toStringTree (  ) ,^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[buglab_swap_variables]^compiler.report ( JSError.make ( SCOPE_MISMATCH.getRootNode (  ) .toStringTree (  ) ,^223^224^225^226^^221^229^compiler.report ( JSError.make ( SCOPE_MISMATCH, expectedScope.getRootNode (  ) .toStringTree (  ) ,^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[buglab_swap_variables]^compiler.report ( JSError.make (  expectedScope.getRootNode (  ) .toStringTree (  ) ,^223^224^225^226^^221^229^compiler.report ( JSError.make ( SCOPE_MISMATCH, expectedScope.getRootNode (  ) .toStringTree (  ) ,^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[buglab_swap_variables]^JSError.make ( SCOPE_MISMATCH, actualScope.getRootNode (  ) .toStringTree (  ) , expectedScope.getRootNode (  ) .toStringTree (  )  )  ) ;^224^225^226^227^^221^229^JSError.make ( SCOPE_MISMATCH, expectedScope.getRootNode (  ) .toStringTree (  ) , actualScope.getRootNode (  ) .toStringTree (  )  )  ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[buglab_swap_variables]^JSError.make ( SCOPE_MISMATCH.getRootNode (  ) .toStringTree (  ) , actualScope.getRootNode (  ) .toStringTree (  )  )  ) ;^224^225^226^227^^221^229^JSError.make ( SCOPE_MISMATCH, expectedScope.getRootNode (  ) .toStringTree (  ) , actualScope.getRootNode (  ) .toStringTree (  )  )  ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[buglab_swap_variables]^JSError.make ( SCOPE_MISMATCH, expectedScope.getRootNode (  ) .toStringTree (  ) .getRootNode (  ) .toStringTree (  )  )  ) ;^224^225^226^227^^221^229^JSError.make ( SCOPE_MISMATCH, expectedScope.getRootNode (  ) .toStringTree (  ) , actualScope.getRootNode (  ) .toStringTree (  )  )  ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[buglab_swap_variables]^JSError.make ( expectedScope, SCOPE_MISMATCH.getRootNode (  ) .toStringTree (  ) , actualScope.getRootNode (  ) .toStringTree (  )  )  ) ;^224^225^226^227^^221^229^JSError.make ( SCOPE_MISMATCH, expectedScope.getRootNode (  ) .toStringTree (  ) , actualScope.getRootNode (  ) .toStringTree (  )  )  ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[buglab_swap_variables]^JSError.make (  expectedScope.getRootNode (  ) .toStringTree (  ) , actualScope.getRootNode (  ) .toStringTree (  )  )  ) ;^224^225^226^227^^221^229^JSError.make ( SCOPE_MISMATCH, expectedScope.getRootNode (  ) .toStringTree (  ) , actualScope.getRootNode (  ) .toStringTree (  )  )  ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[buglab_swap_variables]^if  ( var == null || expectedScope.getVar ( actualVar.getName (  )  )  != var )  {^242^243^^^^231^255^if  ( actualVar == null || expectedScope.getVar ( var.getName (  )  )  != var )  {^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[buglab_swap_variables]^} else if  ( !checkNodesMatch ( actualVar.getNameNode (  ) , var.getNameNode (  )  )  ||^246^247^248^249^^231^255^} else if  ( !checkNodesMatch ( var.getNameNode (  ) , actualVar.getNameNode (  )  )  ||^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[buglab_swap_variables]^} else if  ( !checkNodesMatch ( var.getNameNode (  ) .getNameNode (  )  )  ||^246^247^248^249^^231^255^} else if  ( !checkNodesMatch ( var.getNameNode (  ) , actualVar.getNameNode (  )  )  ||^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[buglab_swap_variables]^compiler.report ( JSError.make ( var, MOVED_VARIABLE.getName (  )  )  ) ;^251^252^^^^231^255^compiler.report ( JSError.make ( MOVED_VARIABLE, var.getName (  )  )  ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[buglab_swap_variables]^compiler.report ( JSError.make ( MOVED_VARIABLE.getName (  )  )  ) ;^251^252^^^^231^255^compiler.report ( JSError.make ( MOVED_VARIABLE, var.getName (  )  )  ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[buglab_swap_variables]^compiler.report ( JSError.make (  var.getName (  )  )  ) ;^251^252^^^^231^255^compiler.report ( JSError.make ( MOVED_VARIABLE, var.getName (  )  )  ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[buglab_swap_variables]^JSError.make ( var, MOVED_VARIABLE.getName (  )  )  ) ;^252^^^^^231^255^JSError.make ( MOVED_VARIABLE, var.getName (  )  )  ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[buglab_swap_variables]^JSError.make ( MOVED_VARIABLE.getName (  )  )  ) ;^252^^^^^231^255^JSError.make ( MOVED_VARIABLE, var.getName (  )  )  ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[buglab_swap_variables]^JSError.make (  var.getName (  )  )  ) ;^252^^^^^231^255^JSError.make ( MOVED_VARIABLE, var.getName (  )  )  ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[buglab_swap_variables]^!checkNodesMatch ( actualVar.getNameNode (  ) , var.getNameNode (  )  )  || !isNodeAttached ( actualVar.getNameNode (  )  )  )  {^247^248^249^250^^231^255^!checkNodesMatch ( var.getNameNode (  ) , actualVar.getNameNode (  )  )  || !isNodeAttached ( actualVar.getNameNode (  )  )  )  {^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[buglab_swap_variables]^!checkNodesMatch ( var.getNameNode (  ) .getNameNode (  )  )  || !isNodeAttached ( actualVar.getNameNode (  )  )  )  {^247^248^249^250^^231^255^!checkNodesMatch ( var.getNameNode (  ) , actualVar.getNameNode (  )  )  || !isNodeAttached ( actualVar.getNameNode (  )  )  )  {^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[buglab_swap_variables]^compiler.report ( JSError.make ( var, MISSING_VARIABLE.getName (  )  )  ) ;^244^245^^^^231^255^compiler.report ( JSError.make ( MISSING_VARIABLE, var.getName (  )  )  ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[buglab_swap_variables]^compiler.report ( JSError.make ( MISSING_VARIABLE.getName (  )  )  ) ;^244^245^^^^231^255^compiler.report ( JSError.make ( MISSING_VARIABLE, var.getName (  )  )  ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[buglab_swap_variables]^compiler.report ( JSError.make (  var.getName (  )  )  ) ;^244^245^^^^231^255^compiler.report ( JSError.make ( MISSING_VARIABLE, var.getName (  )  )  ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[buglab_swap_variables]^JSError.make ( var, MISSING_VARIABLE.getName (  )  )  ) ;^245^^^^^231^255^JSError.make ( MISSING_VARIABLE, var.getName (  )  )  ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[buglab_swap_variables]^JSError.make ( MISSING_VARIABLE.getName (  )  )  ) ;^245^^^^^231^255^JSError.make ( MISSING_VARIABLE, var.getName (  )  )  ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[buglab_swap_variables]^JSError.make (  var.getName (  )  )  ) ;^245^^^^^231^255^JSError.make ( MISSING_VARIABLE, var.getName (  )  )  ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[buglab_swap_variables]^Scope.Var actualVar = var.getVar ( actualScope.getName (  )  ) ;^241^^^^^231^255^Scope.Var actualVar = actualScope.getVar ( var.getName (  )  ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[buglab_swap_variables]^compiler.report ( JSError.make (  Integer.toString ( expectedScope.getVarCount (  )  ) ,^232^233^234^235^^217^247^compiler.report ( JSError.make ( VARIABLE_COUNT_MISMATCH, Integer.toString ( expectedScope.getVarCount (  )  ) ,^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[buglab_swap_variables]^JSError.make ( VARIABLE_COUNT_MISMATCH, Integer.toString ( actualScope.getVarCount (  )  ) , Integer.toString ( expectedScope.getVarCount (  )  )  )  ) ;^233^234^235^236^^218^248^JSError.make ( VARIABLE_COUNT_MISMATCH, Integer.toString ( expectedScope.getVarCount (  )  ) , Integer.toString ( actualScope.getVarCount (  )  )  )  ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[buglab_swap_variables]^JSError.make ( actualScope, Integer.toString ( expectedScope.getVarCount (  )  ) , Integer.toString ( VARIABLE_COUNT_MISMATCH.getVarCount (  )  )  )  ) ;^233^234^235^236^^218^248^JSError.make ( VARIABLE_COUNT_MISMATCH, Integer.toString ( expectedScope.getVarCount (  )  ) , Integer.toString ( actualScope.getVarCount (  )  )  )  ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[buglab_swap_variables]^JSError.make (  Integer.toString ( expectedScope.getVarCount (  )  ) , Integer.toString ( actualScope.getVarCount (  )  )  )  ) ;^233^234^235^236^^218^248^JSError.make ( VARIABLE_COUNT_MISMATCH, Integer.toString ( expectedScope.getVarCount (  )  ) , Integer.toString ( actualScope.getVarCount (  )  )  )  ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[buglab_swap_variables]^compiler.report ( JSError.make ( var, MISSING_VARIABLE.getName (  )  )  ) ;^244^245^^^^229^259^compiler.report ( JSError.make ( MISSING_VARIABLE, var.getName (  )  )  ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[buglab_swap_variables]^if  ( expectedScope == null || actualVar.getVar ( var.getName (  )  )  != var )  {^242^243^^^^231^255^if  ( actualVar == null || expectedScope.getVar ( var.getName (  )  )  != var )  {^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[buglab_swap_variables]^JSError.make ( expectedScope, Integer.toString ( VARIABLE_COUNT_MISMATCH.getVarCount (  )  ) , Integer.toString ( actualScope.getVarCount (  )  )  )  ) ;^233^234^235^236^^218^248^JSError.make ( VARIABLE_COUNT_MISMATCH, Integer.toString ( expectedScope.getVarCount (  )  ) , Integer.toString ( actualScope.getVarCount (  )  )  )  ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[buglab_swap_variables]^Scope expectedScope = i.get ( expectedScopes ) ;^218^^^^^203^233^Scope expectedScope = expectedScopes.get ( i ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[buglab_swap_variables]^Scope actualScope = i.get ( actualScopes ) ;^219^^^^^204^234^Scope actualScope = actualScopes.get ( i ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[buglab_swap_variables]^compiler.report ( JSError.make ( expectedScope, SCOPE_MISMATCH.getRootNode (  ) .toStringTree (  ) ,^223^224^225^226^^208^238^compiler.report ( JSError.make ( SCOPE_MISMATCH, expectedScope.getRootNode (  ) .toStringTree (  ) ,^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[buglab_swap_variables]^compiler.report ( JSError.make ( SCOPE_MISMATCH.getRootNode (  ) .toStringTree (  ) ,^223^224^225^226^^208^238^compiler.report ( JSError.make ( SCOPE_MISMATCH, expectedScope.getRootNode (  ) .toStringTree (  ) ,^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[buglab_swap_variables]^compiler.report ( JSError.make (  expectedScope.getRootNode (  ) .toStringTree (  ) ,^223^224^225^226^^208^238^compiler.report ( JSError.make ( SCOPE_MISMATCH, expectedScope.getRootNode (  ) .toStringTree (  ) ,^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[buglab_swap_variables]^JSError.make ( SCOPE_MISMATCH, actualScope.getRootNode (  ) .toStringTree (  ) , expectedScope.getRootNode (  ) .toStringTree (  )  )  ) ;^224^225^226^227^^209^239^JSError.make ( SCOPE_MISMATCH, expectedScope.getRootNode (  ) .toStringTree (  ) , actualScope.getRootNode (  ) .toStringTree (  )  )  ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[buglab_swap_variables]^JSError.make ( SCOPE_MISMATCH.getRootNode (  ) .toStringTree (  ) , actualScope.getRootNode (  ) .toStringTree (  )  )  ) ;^224^225^226^227^^209^239^JSError.make ( SCOPE_MISMATCH, expectedScope.getRootNode (  ) .toStringTree (  ) , actualScope.getRootNode (  ) .toStringTree (  )  )  ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[buglab_swap_variables]^JSError.make ( SCOPE_MISMATCH, expectedScope.getRootNode (  ) .toStringTree (  ) .getRootNode (  ) .toStringTree (  )  )  ) ;^224^225^226^227^^209^239^JSError.make ( SCOPE_MISMATCH, expectedScope.getRootNode (  ) .toStringTree (  ) , actualScope.getRootNode (  ) .toStringTree (  )  )  ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[buglab_swap_variables]^JSError.make ( actualScope, expectedScope.getRootNode (  ) .toStringTree (  ) , SCOPE_MISMATCH.getRootNode (  ) .toStringTree (  )  )  ) ;^224^225^226^227^^209^239^JSError.make ( SCOPE_MISMATCH, expectedScope.getRootNode (  ) .toStringTree (  ) , actualScope.getRootNode (  ) .toStringTree (  )  )  ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[buglab_swap_variables]^JSError.make (  expectedScope.getRootNode (  ) .toStringTree (  ) , actualScope.getRootNode (  ) .toStringTree (  )  )  ) ;^224^225^226^227^^209^239^JSError.make ( SCOPE_MISMATCH, expectedScope.getRootNode (  ) .toStringTree (  ) , actualScope.getRootNode (  ) .toStringTree (  )  )  ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[buglab_swap_variables]^JSError.make ( expectedScope, SCOPE_MISMATCH.getRootNode (  ) .toStringTree (  ) , actualScope.getRootNode (  ) .toStringTree (  )  )  ) ;^224^225^226^227^^209^239^JSError.make ( SCOPE_MISMATCH, expectedScope.getRootNode (  ) .toStringTree (  ) , actualScope.getRootNode (  ) .toStringTree (  )  )  ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[buglab_swap_variables]^compiler.report ( JSError.make ( expectedScope, Integer.toString ( VARIABLE_COUNT_MISMATCH.getVarCount (  )  ) ,^232^233^234^235^^217^247^compiler.report ( JSError.make ( VARIABLE_COUNT_MISMATCH, Integer.toString ( expectedScope.getVarCount (  )  ) ,^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[buglab_swap_variables]^while  ( currentB != null && currentA != null )  {^265^^^^^262^276^while  ( currentA != null && currentB != null )  {^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] checkNodesMatch [RETURN_TYPE] boolean   Node nodeA Node nodeB [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Node  actualRoot  currentA  currentB  expectedRoot  n  nodeA  nodeB  parent  ScopeCreator  scopeCreator  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  
[buglab_swap_variables]^if  ( currentB.getType (  )  != currentA.getType (  )  || !currentA.isEquivalentTo ( currentB )  )  {^266^267^^^^262^276^if  ( currentA.getType (  )  != currentB.getType (  )  || !currentA.isEquivalentTo ( currentB )  )  {^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] checkNodesMatch [RETURN_TYPE] boolean   Node nodeA Node nodeB [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Node  actualRoot  currentA  currentB  expectedRoot  n  nodeA  nodeB  parent  ScopeCreator  scopeCreator  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  
[buglab_swap_variables]^return currentB == null && currentA == null;^275^^^^^262^276^return currentA == null && currentB == null;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] checkNodesMatch [RETURN_TYPE] boolean   Node nodeA Node nodeB [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Node  actualRoot  currentA  currentB  expectedRoot  n  nodeA  nodeB  parent  ScopeCreator  scopeCreator  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  
[buglab_swap_variables]^for  ( Node node = current;^280^^^^^278^287^for  ( Node current = node;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] isNodeAttached [RETURN_TYPE] boolean   Node node [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Node  actualRoot  current  currentA  currentB  expectedRoot  n  node  nodeA  nodeB  parent  ScopeCreator  scopeCreator  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  
[buglab_swap_variables]^NodeTraversal.traverse ( expectedRoot, compiler, this ) ;^208^^^^^193^223^NodeTraversal.traverse ( compiler, expectedRoot, this ) ;^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[buglab_swap_variables]^NodeTraversal.traverse (  expectedRoot, this ) ;^208^^^^^193^223^NodeTraversal.traverse ( compiler, expectedRoot, this ) ;^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[buglab_swap_variables]^NodeTraversal.traverse ( compiler,  this ) ;^208^^^^^193^223^NodeTraversal.traverse ( compiler, expectedRoot, this ) ;^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[buglab_swap_variables]^( new NodeTraversal ( actualRoot, this, SymbolTable.this )  ) .traverse ( compiler ) ;^211^212^^^^196^226^( new NodeTraversal ( compiler, this, SymbolTable.this )  ) .traverse ( actualRoot ) ;^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[buglab_swap_variables]^( new NodeTraversal (  this, SymbolTable.this )  ) .traverse ( actualRoot ) ;^211^212^^^^196^226^( new NodeTraversal ( compiler, this, SymbolTable.this )  ) .traverse ( actualRoot ) ;^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[buglab_swap_variables]^Preconditions.checkState ( actualScopes.size (  )  == expectedScopes.size (  )  ) ;^215^^^^^200^230^Preconditions.checkState ( expectedScopes.size (  )  == actualScopes.size (  )  ) ;^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[buglab_swap_variables]^if  ( var == null || expectedScope.getVar ( actualVar.getName (  )  )  != var )  {^242^243^^^^227^257^if  ( actualVar == null || expectedScope.getVar ( var.getName (  )  )  != var )  {^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[buglab_swap_variables]^if  ( actualVar == null || var.getVar ( expectedScope.getName (  )  )  != var )  {^242^243^^^^227^257^if  ( actualVar == null || expectedScope.getVar ( var.getName (  )  )  != var )  {^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[buglab_swap_variables]^} else if  ( !checkNodesMatch ( actualVar.getNameNode (  ) , var.getNameNode (  )  )  ||^246^247^248^249^^231^261^} else if  ( !checkNodesMatch ( var.getNameNode (  ) , actualVar.getNameNode (  )  )  ||^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[buglab_swap_variables]^} else if  ( !checkNodesMatch ( var.getNameNode (  ) .getNameNode (  )  )  ||^246^247^248^249^^231^261^} else if  ( !checkNodesMatch ( var.getNameNode (  ) , actualVar.getNameNode (  )  )  ||^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[buglab_swap_variables]^compiler.report ( JSError.make ( var, MOVED_VARIABLE.getName (  )  )  ) ;^251^252^^^^246^253^compiler.report ( JSError.make ( MOVED_VARIABLE, var.getName (  )  )  ) ;^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[buglab_swap_variables]^compiler.report ( JSError.make ( MOVED_VARIABLE.getName (  )  )  ) ;^251^252^^^^246^253^compiler.report ( JSError.make ( MOVED_VARIABLE, var.getName (  )  )  ) ;^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[buglab_swap_variables]^compiler.report ( JSError.make (  var.getName (  )  )  ) ;^251^252^^^^246^253^compiler.report ( JSError.make ( MOVED_VARIABLE, var.getName (  )  )  ) ;^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[buglab_swap_variables]^JSError.make ( var, MOVED_VARIABLE.getName (  )  )  ) ;^252^^^^^246^253^JSError.make ( MOVED_VARIABLE, var.getName (  )  )  ) ;^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[buglab_swap_variables]^JSError.make ( MOVED_VARIABLE.getName (  )  )  ) ;^252^^^^^246^253^JSError.make ( MOVED_VARIABLE, var.getName (  )  )  ) ;^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[buglab_swap_variables]^JSError.make (  var.getName (  )  )  ) ;^252^^^^^246^253^JSError.make ( MOVED_VARIABLE, var.getName (  )  )  ) ;^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[buglab_swap_variables]^!checkNodesMatch ( actualVar.getNameNode (  ) , var.getNameNode (  )  )  || !isNodeAttached ( actualVar.getNameNode (  )  )  )  {^247^248^249^250^^232^262^!checkNodesMatch ( var.getNameNode (  ) , actualVar.getNameNode (  )  )  || !isNodeAttached ( actualVar.getNameNode (  )  )  )  {^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[buglab_swap_variables]^!checkNodesMatch ( var.getNameNode (  ) .getNameNode (  )  )  || !isNodeAttached ( actualVar.getNameNode (  )  )  )  {^247^248^249^250^^232^262^!checkNodesMatch ( var.getNameNode (  ) , actualVar.getNameNode (  )  )  || !isNodeAttached ( actualVar.getNameNode (  )  )  )  {^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[buglab_swap_variables]^compiler.report ( JSError.make ( MOVED_VARIABLE.getName (  )  )  ) ;^251^252^^^^236^266^compiler.report ( JSError.make ( MOVED_VARIABLE, var.getName (  )  )  ) ;^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[buglab_swap_variables]^compiler.report ( JSError.make (  var.getName (  )  )  ) ;^251^252^^^^236^266^compiler.report ( JSError.make ( MOVED_VARIABLE, var.getName (  )  )  ) ;^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[buglab_swap_variables]^JSError.make ( var, MOVED_VARIABLE.getName (  )  )  ) ;^252^^^^^237^267^JSError.make ( MOVED_VARIABLE, var.getName (  )  )  ) ;^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[buglab_swap_variables]^JSError.make ( MOVED_VARIABLE.getName (  )  )  ) ;^252^^^^^237^267^JSError.make ( MOVED_VARIABLE, var.getName (  )  )  ) ;^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[buglab_swap_variables]^JSError.make (  var.getName (  )  )  ) ;^252^^^^^237^267^JSError.make ( MOVED_VARIABLE, var.getName (  )  )  ) ;^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[buglab_swap_variables]^compiler.report ( JSError.make ( var, MISSING_VARIABLE.getName (  )  )  ) ;^244^245^^^^242^253^compiler.report ( JSError.make ( MISSING_VARIABLE, var.getName (  )  )  ) ;^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[buglab_swap_variables]^compiler.report ( JSError.make ( MISSING_VARIABLE.getName (  )  )  ) ;^244^245^^^^242^253^compiler.report ( JSError.make ( MISSING_VARIABLE, var.getName (  )  )  ) ;^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[buglab_swap_variables]^compiler.report ( JSError.make (  var.getName (  )  )  ) ;^244^245^^^^242^253^compiler.report ( JSError.make ( MISSING_VARIABLE, var.getName (  )  )  ) ;^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[buglab_swap_variables]^JSError.make ( var, MISSING_VARIABLE.getName (  )  )  ) ;^245^^^^^242^253^JSError.make ( MISSING_VARIABLE, var.getName (  )  )  ) ;^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[buglab_swap_variables]^JSError.make ( MISSING_VARIABLE.getName (  )  )  ) ;^245^^^^^242^253^JSError.make ( MISSING_VARIABLE, var.getName (  )  )  ) ;^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[buglab_swap_variables]^JSError.make (  var.getName (  )  )  ) ;^245^^^^^242^253^JSError.make ( MISSING_VARIABLE, var.getName (  )  )  ) ;^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[buglab_swap_variables]^Scope.Var actualVar = var.getVar ( actualScope.getName (  )  ) ;^241^^^^^226^256^Scope.Var actualVar = actualScope.getVar ( var.getName (  )  ) ;^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[buglab_swap_variables]^compiler.report ( JSError.make ( var, MISSING_VARIABLE.getName (  )  )  ) ;^244^245^^^^229^259^compiler.report ( JSError.make ( MISSING_VARIABLE, var.getName (  )  )  ) ;^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[buglab_swap_variables]^compiler.report ( JSError.make ( MISSING_VARIABLE.getName (  )  )  ) ;^244^245^^^^229^259^compiler.report ( JSError.make ( MISSING_VARIABLE, var.getName (  )  )  ) ;^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[buglab_swap_variables]^compiler.report ( JSError.make (  var.getName (  )  )  ) ;^244^245^^^^229^259^compiler.report ( JSError.make ( MISSING_VARIABLE, var.getName (  )  )  ) ;^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[buglab_swap_variables]^JSError.make ( var, MISSING_VARIABLE.getName (  )  )  ) ;^245^^^^^230^260^JSError.make ( MISSING_VARIABLE, var.getName (  )  )  ) ;^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[buglab_swap_variables]^JSError.make ( MISSING_VARIABLE.getName (  )  )  ) ;^245^^^^^230^260^JSError.make ( MISSING_VARIABLE, var.getName (  )  )  ) ;^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[buglab_swap_variables]^JSError.make (  var.getName (  )  )  ) ;^245^^^^^230^260^JSError.make ( MISSING_VARIABLE, var.getName (  )  )  ) ;^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[buglab_swap_variables]^compiler.report ( JSError.make ( var, MOVED_VARIABLE.getName (  )  )  ) ;^251^252^^^^236^266^compiler.report ( JSError.make ( MOVED_VARIABLE, var.getName (  )  )  ) ;^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[buglab_swap_variables]^if  ( !checkNodesMatch ( actualScope.getRootNode (  ) , expectedScope.getRootNode (  )  )  )  {^221^222^^^^206^236^if  ( !checkNodesMatch ( expectedScope.getRootNode (  ) , actualScope.getRootNode (  )  )  )  {^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[buglab_swap_variables]^if  ( !checkNodesMatch ( expectedScope.getRootNode (  ) .getRootNode (  )  )  )  {^221^222^^^^206^236^if  ( !checkNodesMatch ( expectedScope.getRootNode (  ) , actualScope.getRootNode (  )  )  )  {^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[buglab_swap_variables]^compiler.report ( JSError.make ( SCOPE_MISMATCH.getRootNode (  ) .toStringTree (  ) ,^223^224^225^226^^221^229^compiler.report ( JSError.make ( SCOPE_MISMATCH, expectedScope.getRootNode (  ) .toStringTree (  ) ,^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[buglab_swap_variables]^compiler.report ( JSError.make ( expectedScope, SCOPE_MISMATCH.getRootNode (  ) .toStringTree (  ) ,^223^224^225^226^^221^229^compiler.report ( JSError.make ( SCOPE_MISMATCH, expectedScope.getRootNode (  ) .toStringTree (  ) ,^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[buglab_swap_variables]^compiler.report ( JSError.make (  expectedScope.getRootNode (  ) .toStringTree (  ) ,^223^224^225^226^^221^229^compiler.report ( JSError.make ( SCOPE_MISMATCH, expectedScope.getRootNode (  ) .toStringTree (  ) ,^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[buglab_swap_variables]^JSError.make ( SCOPE_MISMATCH, actualScope.getRootNode (  ) .toStringTree (  ) , expectedScope.getRootNode (  ) .toStringTree (  )  )  ) ;^224^225^226^227^^221^229^JSError.make ( SCOPE_MISMATCH, expectedScope.getRootNode (  ) .toStringTree (  ) , actualScope.getRootNode (  ) .toStringTree (  )  )  ) ;^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[buglab_swap_variables]^JSError.make ( SCOPE_MISMATCH.getRootNode (  ) .toStringTree (  ) , actualScope.getRootNode (  ) .toStringTree (  )  )  ) ;^224^225^226^227^^221^229^JSError.make ( SCOPE_MISMATCH, expectedScope.getRootNode (  ) .toStringTree (  ) , actualScope.getRootNode (  ) .toStringTree (  )  )  ) ;^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[buglab_swap_variables]^JSError.make ( SCOPE_MISMATCH, expectedScope.getRootNode (  ) .toStringTree (  ) .getRootNode (  ) .toStringTree (  )  )  ) ;^224^225^226^227^^221^229^JSError.make ( SCOPE_MISMATCH, expectedScope.getRootNode (  ) .toStringTree (  ) , actualScope.getRootNode (  ) .toStringTree (  )  )  ) ;^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[buglab_swap_variables]^JSError.make ( actualScope, expectedScope.getRootNode (  ) .toStringTree (  ) , SCOPE_MISMATCH.getRootNode (  ) .toStringTree (  )  )  ) ;^224^225^226^227^^221^229^JSError.make ( SCOPE_MISMATCH, expectedScope.getRootNode (  ) .toStringTree (  ) , actualScope.getRootNode (  ) .toStringTree (  )  )  ) ;^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[buglab_swap_variables]^JSError.make (  expectedScope.getRootNode (  ) .toStringTree (  ) , actualScope.getRootNode (  ) .toStringTree (  )  )  ) ;^224^225^226^227^^221^229^JSError.make ( SCOPE_MISMATCH, expectedScope.getRootNode (  ) .toStringTree (  ) , actualScope.getRootNode (  ) .toStringTree (  )  )  ) ;^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[buglab_swap_variables]^if  ( actualScope.getVarCount (  )  != expectedScope.getVarCount (  )  )  {^231^^^^^216^246^if  ( expectedScope.getVarCount (  )  != actualScope.getVarCount (  )  )  {^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[buglab_swap_variables]^if  ( var == null || expectedScope.getVar ( actualVar.getName (  )  )  != var )  {^242^243^^^^231^255^if  ( actualVar == null || expectedScope.getVar ( var.getName (  )  )  != var )  {^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[buglab_swap_variables]^} else if  ( !checkNodesMatch ( actualVar.getNameNode (  ) , var.getNameNode (  )  )  ||^246^247^248^249^^231^255^} else if  ( !checkNodesMatch ( var.getNameNode (  ) , actualVar.getNameNode (  )  )  ||^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[buglab_swap_variables]^} else if  ( !checkNodesMatch ( var.getNameNode (  ) .getNameNode (  )  )  ||^246^247^248^249^^231^255^} else if  ( !checkNodesMatch ( var.getNameNode (  ) , actualVar.getNameNode (  )  )  ||^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[buglab_swap_variables]^compiler.report ( JSError.make ( MOVED_VARIABLE.getName (  )  )  ) ;^251^252^^^^231^255^compiler.report ( JSError.make ( MOVED_VARIABLE, var.getName (  )  )  ) ;^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[buglab_swap_variables]^compiler.report ( JSError.make ( var, MOVED_VARIABLE.getName (  )  )  ) ;^251^252^^^^231^255^compiler.report ( JSError.make ( MOVED_VARIABLE, var.getName (  )  )  ) ;^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[buglab_swap_variables]^compiler.report ( JSError.make (  var.getName (  )  )  ) ;^251^252^^^^231^255^compiler.report ( JSError.make ( MOVED_VARIABLE, var.getName (  )  )  ) ;^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[buglab_swap_variables]^JSError.make ( var, MOVED_VARIABLE.getName (  )  )  ) ;^252^^^^^231^255^JSError.make ( MOVED_VARIABLE, var.getName (  )  )  ) ;^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[buglab_swap_variables]^JSError.make ( MOVED_VARIABLE.getName (  )  )  ) ;^252^^^^^231^255^JSError.make ( MOVED_VARIABLE, var.getName (  )  )  ) ;^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[buglab_swap_variables]^JSError.make (  var.getName (  )  )  ) ;^252^^^^^231^255^JSError.make ( MOVED_VARIABLE, var.getName (  )  )  ) ;^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[buglab_swap_variables]^!checkNodesMatch ( actualVar.getNameNode (  ) , var.getNameNode (  )  )  || !isNodeAttached ( actualVar.getNameNode (  )  )  )  {^247^248^249^250^^231^255^!checkNodesMatch ( var.getNameNode (  ) , actualVar.getNameNode (  )  )  || !isNodeAttached ( actualVar.getNameNode (  )  )  )  {^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[buglab_swap_variables]^!checkNodesMatch ( var.getNameNode (  ) .getNameNode (  )  )  || !isNodeAttached ( actualVar.getNameNode (  )  )  )  {^247^248^249^250^^231^255^!checkNodesMatch ( var.getNameNode (  ) , actualVar.getNameNode (  )  )  || !isNodeAttached ( actualVar.getNameNode (  )  )  )  {^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[buglab_swap_variables]^compiler.report ( JSError.make ( var, MISSING_VARIABLE.getName (  )  )  ) ;^244^245^^^^231^255^compiler.report ( JSError.make ( MISSING_VARIABLE, var.getName (  )  )  ) ;^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[buglab_swap_variables]^compiler.report ( JSError.make ( MISSING_VARIABLE.getName (  )  )  ) ;^244^245^^^^231^255^compiler.report ( JSError.make ( MISSING_VARIABLE, var.getName (  )  )  ) ;^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[buglab_swap_variables]^compiler.report ( JSError.make (  var.getName (  )  )  ) ;^244^245^^^^231^255^compiler.report ( JSError.make ( MISSING_VARIABLE, var.getName (  )  )  ) ;^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[buglab_swap_variables]^JSError.make ( var, MISSING_VARIABLE.getName (  )  )  ) ;^245^^^^^231^255^JSError.make ( MISSING_VARIABLE, var.getName (  )  )  ) ;^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[buglab_swap_variables]^JSError.make ( MISSING_VARIABLE.getName (  )  )  ) ;^245^^^^^231^255^JSError.make ( MISSING_VARIABLE, var.getName (  )  )  ) ;^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[buglab_swap_variables]^JSError.make (  var.getName (  )  )  ) ;^245^^^^^231^255^JSError.make ( MISSING_VARIABLE, var.getName (  )  )  ) ;^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[buglab_swap_variables]^Scope.Var actualVar = var.getVar ( actualScope.getName (  )  ) ;^241^^^^^231^255^Scope.Var actualVar = actualScope.getVar ( var.getName (  )  ) ;^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[buglab_swap_variables]^if  ( expectedScope == null || actualVar.getVar ( var.getName (  )  )  != var )  {^242^243^^^^231^255^if  ( actualVar == null || expectedScope.getVar ( var.getName (  )  )  != var )  {^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[buglab_swap_variables]^compiler.report ( JSError.make ( expectedScope, Integer.toString ( VARIABLE_COUNT_MISMATCH.getVarCount (  )  ) ,^232^233^234^235^^217^247^compiler.report ( JSError.make ( VARIABLE_COUNT_MISMATCH, Integer.toString ( expectedScope.getVarCount (  )  ) ,^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[buglab_swap_variables]^compiler.report ( JSError.make (  Integer.toString ( expectedScope.getVarCount (  )  ) ,^232^233^234^235^^217^247^compiler.report ( JSError.make ( VARIABLE_COUNT_MISMATCH, Integer.toString ( expectedScope.getVarCount (  )  ) ,^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[buglab_swap_variables]^JSError.make ( VARIABLE_COUNT_MISMATCH, Integer.toString ( actualScope.getVarCount (  )  ) , Integer.toString ( expectedScope.getVarCount (  )  )  )  ) ;^233^234^235^236^^218^248^JSError.make ( VARIABLE_COUNT_MISMATCH, Integer.toString ( expectedScope.getVarCount (  )  ) , Integer.toString ( actualScope.getVarCount (  )  )  )  ) ;^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[buglab_swap_variables]^JSError.make ( actualScope, Integer.toString ( expectedScope.getVarCount (  )  ) , Integer.toString ( VARIABLE_COUNT_MISMATCH.getVarCount (  )  )  )  ) ;^233^234^235^236^^218^248^JSError.make ( VARIABLE_COUNT_MISMATCH, Integer.toString ( expectedScope.getVarCount (  )  ) , Integer.toString ( actualScope.getVarCount (  )  )  )  ) ;^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[buglab_swap_variables]^JSError.make (  Integer.toString ( expectedScope.getVarCount (  )  ) , Integer.toString ( actualScope.getVarCount (  )  )  )  ) ;^233^234^235^236^^218^248^JSError.make ( VARIABLE_COUNT_MISMATCH, Integer.toString ( expectedScope.getVarCount (  )  ) , Integer.toString ( actualScope.getVarCount (  )  )  )  ) ;^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[buglab_swap_variables]^if  ( expectedScope == null || actualVar.getVar ( var.getName (  )  )  != var )  {^242^243^^^^227^257^if  ( actualVar == null || expectedScope.getVar ( var.getName (  )  )  != var )  {^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[buglab_swap_variables]^JSError.make ( expectedScope, SCOPE_MISMATCH.getRootNode (  ) .toStringTree (  ) , actualScope.getRootNode (  ) .toStringTree (  )  )  ) ;^224^225^226^227^^221^229^JSError.make ( SCOPE_MISMATCH, expectedScope.getRootNode (  ) .toStringTree (  ) , actualScope.getRootNode (  ) .toStringTree (  )  )  ) ;^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[buglab_swap_variables]^if  ( actualVar == null || var.getVar ( expectedScope.getName (  )  )  != var )  {^242^243^^^^231^255^if  ( actualVar == null || expectedScope.getVar ( var.getName (  )  )  != var )  {^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[buglab_swap_variables]^JSError.make ( expectedScope, Integer.toString ( VARIABLE_COUNT_MISMATCH.getVarCount (  )  ) , Integer.toString ( actualScope.getVarCount (  )  )  )  ) ;^233^234^235^236^^218^248^JSError.make ( VARIABLE_COUNT_MISMATCH, Integer.toString ( expectedScope.getVarCount (  )  ) , Integer.toString ( actualScope.getVarCount (  )  )  )  ) ;^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[buglab_swap_variables]^Scope expectedScope = i.get ( expectedScopes ) ;^218^^^^^203^233^Scope expectedScope = expectedScopes.get ( i ) ;^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[buglab_swap_variables]^Scope actualScope = i.get ( actualScopes ) ;^219^^^^^204^234^Scope actualScope = actualScopes.get ( i ) ;^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[buglab_swap_variables]^compiler.report ( JSError.make ( expectedScope, SCOPE_MISMATCH.getRootNode (  ) .toStringTree (  ) ,^223^224^225^226^^208^238^compiler.report ( JSError.make ( SCOPE_MISMATCH, expectedScope.getRootNode (  ) .toStringTree (  ) ,^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[buglab_swap_variables]^compiler.report ( JSError.make ( SCOPE_MISMATCH.getRootNode (  ) .toStringTree (  ) ,^223^224^225^226^^208^238^compiler.report ( JSError.make ( SCOPE_MISMATCH, expectedScope.getRootNode (  ) .toStringTree (  ) ,^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[buglab_swap_variables]^compiler.report ( JSError.make (  expectedScope.getRootNode (  ) .toStringTree (  ) ,^223^224^225^226^^208^238^compiler.report ( JSError.make ( SCOPE_MISMATCH, expectedScope.getRootNode (  ) .toStringTree (  ) ,^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[buglab_swap_variables]^JSError.make ( SCOPE_MISMATCH, actualScope.getRootNode (  ) .toStringTree (  ) , expectedScope.getRootNode (  ) .toStringTree (  )  )  ) ;^224^225^226^227^^209^239^JSError.make ( SCOPE_MISMATCH, expectedScope.getRootNode (  ) .toStringTree (  ) , actualScope.getRootNode (  ) .toStringTree (  )  )  ) ;^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[buglab_swap_variables]^JSError.make ( SCOPE_MISMATCH.getRootNode (  ) .toStringTree (  ) , actualScope.getRootNode (  ) .toStringTree (  )  )  ) ;^224^225^226^227^^209^239^JSError.make ( SCOPE_MISMATCH, expectedScope.getRootNode (  ) .toStringTree (  ) , actualScope.getRootNode (  ) .toStringTree (  )  )  ) ;^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[buglab_swap_variables]^JSError.make ( actualScope, expectedScope.getRootNode (  ) .toStringTree (  ) , SCOPE_MISMATCH.getRootNode (  ) .toStringTree (  )  )  ) ;^224^225^226^227^^209^239^JSError.make ( SCOPE_MISMATCH, expectedScope.getRootNode (  ) .toStringTree (  ) , actualScope.getRootNode (  ) .toStringTree (  )  )  ) ;^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[buglab_swap_variables]^JSError.make ( SCOPE_MISMATCH, expectedScope.getRootNode (  ) .toStringTree (  ) .getRootNode (  ) .toStringTree (  )  )  ) ;^224^225^226^227^^209^239^JSError.make ( SCOPE_MISMATCH, expectedScope.getRootNode (  ) .toStringTree (  ) , actualScope.getRootNode (  ) .toStringTree (  )  )  ) ;^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[buglab_swap_variables]^JSError.make (  expectedScope.getRootNode (  ) .toStringTree (  ) , actualScope.getRootNode (  ) .toStringTree (  )  )  ) ;^224^225^226^227^^209^239^JSError.make ( SCOPE_MISMATCH, expectedScope.getRootNode (  ) .toStringTree (  ) , actualScope.getRootNode (  ) .toStringTree (  )  )  ) ;^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[buglab_swap_variables]^while  ( currentB != null && currentA != null )  {^265^^^^^262^276^while  ( currentA != null && currentB != null )  {^[CLASS] VerifyingCallback  [METHOD] checkNodesMatch [RETURN_TYPE] boolean   Node nodeA Node nodeB [VARIABLES] List  actualScopes  expectedScopes  boolean  collectingExpected  Node  actualRoot  currentA  currentB  expectedRoot  n  nodeA  nodeB  parent  
[buglab_swap_variables]^if  ( currentB.getType (  )  != currentA.getType (  )  || !currentA.isEquivalentTo ( currentB )  )  {^266^267^^^^262^276^if  ( currentA.getType (  )  != currentB.getType (  )  || !currentA.isEquivalentTo ( currentB )  )  {^[CLASS] VerifyingCallback  [METHOD] checkNodesMatch [RETURN_TYPE] boolean   Node nodeA Node nodeB [VARIABLES] List  actualScopes  expectedScopes  boolean  collectingExpected  Node  actualRoot  currentA  currentB  expectedRoot  n  nodeA  nodeB  parent  
[buglab_swap_variables]^return currentB == null && currentA == null;^275^^^^^262^276^return currentA == null && currentB == null;^[CLASS] VerifyingCallback  [METHOD] checkNodesMatch [RETURN_TYPE] boolean   Node nodeA Node nodeB [VARIABLES] List  actualScopes  expectedScopes  boolean  collectingExpected  Node  actualRoot  currentA  currentB  expectedRoot  n  nodeA  nodeB  parent  
[buglab_swap_variables]^for  ( Node node = current;^280^^^^^278^287^for  ( Node current = node;^[CLASS] VerifyingCallback  [METHOD] isNodeAttached [RETURN_TYPE] boolean   Node node [VARIABLES] List  actualScopes  expectedScopes  boolean  collectingExpected  Node  actualRoot  current  currentA  currentB  expectedRoot  n  node  nodeA  nodeB  parent  
