[BugLab_Wrong_Literal]^private boolean locked = true;^73^^^^^68^78^private boolean locked = false;^[CLASS] SymbolTable MemoizedData VerifyingCallback   [VARIABLES] 
[BugLab_Wrong_Literal]^private boolean collectingExpected = false;^165^^^^^160^170^private boolean collectingExpected = true;^[CLASS] SymbolTable MemoizedData VerifyingCallback   [VARIABLES] 
[BugLab_Variable_Misuse]^this.actualRoot = expectedRoot;^170^^^^^169^172^this.actualRoot = actualRoot;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] <init> [RETURN_TYPE] Node)   Node expectedRoot Node actualRoot [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Node  actualRoot  expectedRoot  ScopeCreator  scopeCreator  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  
[BugLab_Variable_Misuse]^this.expectedRoot = actualRoot;^171^^^^^169^172^this.expectedRoot = expectedRoot;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] <init> [RETURN_TYPE] Node)   Node expectedRoot Node actualRoot [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Node  actualRoot  expectedRoot  ScopeCreator  scopeCreator  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  
[BugLab_Wrong_Literal]^locked = false;^88^^^^^86^89^locked = true;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] acquire [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Node  actualRoot  expectedRoot  ScopeCreator  scopeCreator  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  
[BugLab_Variable_Misuse]^Preconditions.checkState ( collectingExpected, "SymbolTable already released" ) ;^92^^^^^91^94^Preconditions.checkState ( locked, "SymbolTable already released" ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] release [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Node  actualRoot  expectedRoot  ScopeCreator  scopeCreator  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  
[BugLab_Wrong_Literal]^locked = true;^93^^^^^91^94^locked = false;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] release [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Node  actualRoot  expectedRoot  ScopeCreator  scopeCreator  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  
[BugLab_Wrong_Operator]^Preconditions.checkArgument ( ( n.getType (  )  == Token.BLOCK && n.getParent (  )  == null )  && n.getType (  )  == Token.FUNCTION, "May only create scopes for the global node and functions" ) ;^102^103^104^105^^100^113^Preconditions.checkArgument ( ( n.getType (  )  == Token.BLOCK && n.getParent (  )  == null )  || n.getType (  )  == Token.FUNCTION, "May only create scopes for the global node and functions" ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] createScope [RETURN_TYPE] Scope   Node n Scope parent [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  parent  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Node  actualRoot  expectedRoot  n  ScopeCreator  scopeCreator  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  
[BugLab_Wrong_Operator]^Preconditions.checkArgument ( ( n.getType (  )  == Token.BLOCK || n.getParent (  )  == null )  || n.getType (  )  == Token.FUNCTION, "May only create scopes for the global node and functions" ) ;^102^103^104^105^^100^113^Preconditions.checkArgument ( ( n.getType (  )  == Token.BLOCK && n.getParent (  )  == null )  || n.getType (  )  == Token.FUNCTION, "May only create scopes for the global node and functions" ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] createScope [RETURN_TYPE] Scope   Node n Scope parent [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  parent  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Node  actualRoot  expectedRoot  n  ScopeCreator  scopeCreator  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  
[BugLab_Wrong_Operator]^Preconditions.checkArgument ( ( n.getType (  )  != Token.BLOCK && n.getParent (  )  == null )  || n.getType (  )  == Token.FUNCTION, "May only create scopes for the global node and functions" ) ;^102^103^104^105^^100^113^Preconditions.checkArgument ( ( n.getType (  )  == Token.BLOCK && n.getParent (  )  == null )  || n.getType (  )  == Token.FUNCTION, "May only create scopes for the global node and functions" ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] createScope [RETURN_TYPE] Scope   Node n Scope parent [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  parent  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Node  actualRoot  expectedRoot  n  ScopeCreator  scopeCreator  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  
[BugLab_Wrong_Operator]^Preconditions.checkArgument ( ( n.getType (  )  == Token.BLOCK && n.getParent (  )  != null )  || n.getType (  )  == Token.FUNCTION, "May only create scopes for the global node and functions" ) ;^102^103^104^105^^100^113^Preconditions.checkArgument ( ( n.getType (  )  == Token.BLOCK && n.getParent (  )  == null )  || n.getType (  )  == Token.FUNCTION, "May only create scopes for the global node and functions" ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] createScope [RETURN_TYPE] Scope   Node n Scope parent [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  parent  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Node  actualRoot  expectedRoot  n  ScopeCreator  scopeCreator  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  
[BugLab_Variable_Misuse]^( expectedRoot.getType (  )  == Token.BLOCK && n.getParent (  )  == null )  || n.getType (  )  == Token.FUNCTION, "May only create scopes for the global node and functions" ) ;^103^104^105^^^100^113^( n.getType (  )  == Token.BLOCK && n.getParent (  )  == null )  || n.getType (  )  == Token.FUNCTION, "May only create scopes for the global node and functions" ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] createScope [RETURN_TYPE] Scope   Node n Scope parent [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  parent  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Node  actualRoot  expectedRoot  n  ScopeCreator  scopeCreator  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  
[BugLab_Variable_Misuse]^n.getType (  )  == Token.FUNCTION, "May only create scopes for the global expectedRootode and functions" ) ;^104^105^^^^100^113^n.getType (  )  == Token.FUNCTION, "May only create scopes for the global node and functions" ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] createScope [RETURN_TYPE] Scope   Node n Scope parent [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  parent  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Node  actualRoot  expectedRoot  n  ScopeCreator  scopeCreator  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  
[BugLab_Variable_Misuse]^if  ( !cache.scopes.containsKey ( expectedRoot )  )  {^108^^^^^100^113^if  ( !cache.scopes.containsKey ( n )  )  {^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] createScope [RETURN_TYPE] Scope   Node n Scope parent [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  parent  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Node  actualRoot  expectedRoot  n  ScopeCreator  scopeCreator  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  
[BugLab_Variable_Misuse]^cache.scopes.put ( expectedRoot, scopeCreator.createScope ( n, parent )  ) ;^109^^^^^100^113^cache.scopes.put ( n, scopeCreator.createScope ( n, parent )  ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] createScope [RETURN_TYPE] Scope   Node n Scope parent [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  parent  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Node  actualRoot  expectedRoot  n  ScopeCreator  scopeCreator  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  
[BugLab_Argument_Swapping]^cache.scopes.put ( n, parent.createScope ( n, scopeCreator )  ) ;^109^^^^^100^113^cache.scopes.put ( n, scopeCreator.createScope ( n, parent )  ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] createScope [RETURN_TYPE] Scope   Node n Scope parent [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  parent  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Node  actualRoot  expectedRoot  n  ScopeCreator  scopeCreator  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  
[BugLab_Argument_Swapping]^cache.scopes.put ( parent, scopeCreator.createScope ( n, n )  ) ;^109^^^^^100^113^cache.scopes.put ( n, scopeCreator.createScope ( n, parent )  ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] createScope [RETURN_TYPE] Scope   Node n Scope parent [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  parent  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Node  actualRoot  expectedRoot  n  ScopeCreator  scopeCreator  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  
[BugLab_Argument_Swapping]^cache.scopes.put ( scopeCreator, n.createScope ( n, parent )  ) ;^109^^^^^100^113^cache.scopes.put ( n, scopeCreator.createScope ( n, parent )  ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] createScope [RETURN_TYPE] Scope   Node n Scope parent [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  parent  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Node  actualRoot  expectedRoot  n  ScopeCreator  scopeCreator  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  
[BugLab_Variable_Misuse]^return cache.scopes.get ( expectedRoot ) ;^112^^^^^100^113^return cache.scopes.get ( n ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] createScope [RETURN_TYPE] Scope   Node n Scope parent [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  parent  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Node  actualRoot  expectedRoot  n  ScopeCreator  scopeCreator  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  
[BugLab_Argument_Swapping]^return n.get ( cache.scopes ) ;^112^^^^^100^113^return cache.scopes.get ( n ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] createScope [RETURN_TYPE] Scope   Node n Scope parent [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  parent  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Node  actualRoot  expectedRoot  n  ScopeCreator  scopeCreator  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  
[BugLab_Argument_Swapping]^return cache.scopes.scopes.get ( n ) ;^112^^^^^100^113^return cache.scopes.get ( n ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] createScope [RETURN_TYPE] Scope   Node n Scope parent [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  parent  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Node  actualRoot  expectedRoot  n  ScopeCreator  scopeCreator  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  
[BugLab_Argument_Swapping]^return n.scopes.get ( cache ) ;^112^^^^^100^113^return cache.scopes.get ( n ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] createScope [RETURN_TYPE] Scope   Node n Scope parent [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  parent  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Node  actualRoot  expectedRoot  n  ScopeCreator  scopeCreator  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  
[BugLab_Wrong_Operator]^if  ( cache != null )  {^120^^^^^118^123^if  ( cache == null )  {^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] ensureCacheInitialized [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Node  actualRoot  expectedRoot  n  ScopeCreator  scopeCreator  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  
[BugLab_Variable_Misuse]^if  ( !collectingExpected )  {^131^^^^^130^134^if  ( !locked )  {^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] reportChange [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Node  actualRoot  expectedRoot  n  ScopeCreator  scopeCreator  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  
[BugLab_Variable_Misuse]^VerifyingCallback callback = new VerifyingCallback ( n, actualRoot ) ;^153^154^^^^152^156^VerifyingCallback callback = new VerifyingCallback ( expectedRoot, actualRoot ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verify [RETURN_TYPE] void   Node expectedRoot Node actualRoot [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Node  actualRoot  expectedRoot  n  ScopeCreator  scopeCreator  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  VerifyingCallback  callback  
[BugLab_Variable_Misuse]^VerifyingCallback callback = new VerifyingCallback ( expectedRoot, n ) ;^153^154^^^^152^156^VerifyingCallback callback = new VerifyingCallback ( expectedRoot, actualRoot ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verify [RETURN_TYPE] void   Node expectedRoot Node actualRoot [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Node  actualRoot  expectedRoot  n  ScopeCreator  scopeCreator  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  VerifyingCallback  callback  
[BugLab_Argument_Swapping]^VerifyingCallback callback = new VerifyingCallback ( actualRoot, expectedRoot ) ;^153^154^^^^152^156^VerifyingCallback callback = new VerifyingCallback ( expectedRoot, actualRoot ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verify [RETURN_TYPE] void   Node expectedRoot Node actualRoot [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Node  actualRoot  expectedRoot  n  ScopeCreator  scopeCreator  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  VerifyingCallback  callback  
[BugLab_Wrong_Literal]^return false;^177^^^^^175^178^return true;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  NodeTraversal  nodeTraversal  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  
[BugLab_Variable_Misuse]^if  ( locked )  {^188^^^^^187^193^if  ( collectingExpected )  {^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] exitScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  NodeTraversal  t  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  
[BugLab_Wrong_Operator]^if  ( cache != null )  {^196^^^^^195^204^if  ( cache == null )  {^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verify [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  
[BugLab_Wrong_Literal]^collectingExpected = false;^207^^^^^192^222^collectingExpected = true;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[BugLab_Variable_Misuse]^NodeTraversal.traverse ( compiler, parent, this ) ;^208^^^^^193^223^NodeTraversal.traverse ( compiler, expectedRoot, this ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[BugLab_Argument_Swapping]^NodeTraversal.traverse ( expectedRoot, compiler, this ) ;^208^^^^^193^223^NodeTraversal.traverse ( compiler, expectedRoot, this ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[BugLab_Wrong_Literal]^collectingExpected = true;^210^^^^^195^225^collectingExpected = false;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[BugLab_Variable_Misuse]^( new NodeTraversal ( compiler, this, SymbolTable.this )  ) .traverse ( parent ) ;^211^212^^^^196^226^( new NodeTraversal ( compiler, this, SymbolTable.this )  ) .traverse ( actualRoot ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[BugLab_Argument_Swapping]^( new NodeTraversal ( actualRoot, this, SymbolTable.this )  ) .traverse ( compiler ) ;^211^212^^^^196^226^( new NodeTraversal ( compiler, this, SymbolTable.this )  ) .traverse ( actualRoot ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[BugLab_Argument_Swapping]^Preconditions.checkState ( actualScopes.size (  )  == expectedScopes.size (  )  ) ;^215^^^^^200^230^Preconditions.checkState ( expectedScopes.size (  )  == actualScopes.size (  )  ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[BugLab_Wrong_Operator]^Preconditions.checkState ( expectedScopes.size (  )  <= actualScopes.size (  )  ) ;^215^^^^^200^230^Preconditions.checkState ( expectedScopes.size (  )  == actualScopes.size (  )  ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[BugLab_Variable_Misuse]^Preconditions.checkState ( expectedScopes.size (  )  == null.size (  )  ) ;^215^^^^^200^230^Preconditions.checkState ( expectedScopes.size (  )  == actualScopes.size (  )  ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[BugLab_Variable_Misuse]^if  ( var == null || expectedScope.getVar ( var.getName (  )  )  != var )  {^242^243^^^^227^257^if  ( actualVar == null || expectedScope.getVar ( var.getName (  )  )  != var )  {^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[BugLab_Variable_Misuse]^if  ( actualVar == null || actualScope.getVar ( var.getName (  )  )  != var )  {^242^243^^^^227^257^if  ( actualVar == null || expectedScope.getVar ( var.getName (  )  )  != var )  {^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[BugLab_Argument_Swapping]^if  ( var == null || expectedScope.getVar ( actualVar.getName (  )  )  != var )  {^242^243^^^^227^257^if  ( actualVar == null || expectedScope.getVar ( var.getName (  )  )  != var )  {^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[BugLab_Argument_Swapping]^if  ( actualVar == null || var.getVar ( expectedScope.getName (  )  )  != var )  {^242^243^^^^227^257^if  ( actualVar == null || expectedScope.getVar ( var.getName (  )  )  != var )  {^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[BugLab_Wrong_Operator]^if  ( actualVar == null && expectedScope.getVar ( var.getName (  )  )  != var )  {^242^243^^^^227^257^if  ( actualVar == null || expectedScope.getVar ( var.getName (  )  )  != var )  {^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[BugLab_Wrong_Operator]^if  ( actualVar != null || expectedScope.getVar ( var.getName (  )  )  != var )  {^242^243^^^^227^257^if  ( actualVar == null || expectedScope.getVar ( var.getName (  )  )  != var )  {^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[BugLab_Wrong_Operator]^if  ( actualVar == null || expectedScope.getVar ( var.getName (  )  )  == var )  {^242^243^^^^227^257^if  ( actualVar == null || expectedScope.getVar ( var.getName (  )  )  != var )  {^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[BugLab_Argument_Swapping]^} else if  ( !checkNodesMatch ( actualVar.getNameNode (  ) , var.getNameNode (  )  )  ||^246^247^248^249^^231^261^} else if  ( !checkNodesMatch ( var.getNameNode (  ) , actualVar.getNameNode (  )  )  ||^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[BugLab_Wrong_Operator]^} else if  ( !checkNodesMatch ( var.getNameNode (  ) , actualVar.getNameNode (  )  )  &&^246^247^248^249^^231^261^} else if  ( !checkNodesMatch ( var.getNameNode (  ) , actualVar.getNameNode (  )  )  ||^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[BugLab_Variable_Misuse]^compiler.report ( JSError.make ( MOVED_VARIABLE, actualVar.getName (  )  )  ) ;^251^252^^^^246^253^compiler.report ( JSError.make ( MOVED_VARIABLE, var.getName (  )  )  ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[BugLab_Variable_Misuse]^compiler.report ( JSError.make ( VARIABLE_COUNT_MISMATCH, var.getName (  )  )  ) ;^251^252^^^^246^253^compiler.report ( JSError.make ( MOVED_VARIABLE, var.getName (  )  )  ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[BugLab_Argument_Swapping]^compiler.report ( JSError.make ( var, MOVED_VARIABLE.getName (  )  )  ) ;^251^252^^^^246^253^compiler.report ( JSError.make ( MOVED_VARIABLE, var.getName (  )  )  ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[BugLab_Variable_Misuse]^JSError.make ( MOVED_VARIABLE, actualVar.getName (  )  )  ) ;^252^^^^^246^253^JSError.make ( MOVED_VARIABLE, var.getName (  )  )  ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[BugLab_Variable_Misuse]^JSError.make ( VARIABLE_COUNT_MISMATCH, var.getName (  )  )  ) ;^252^^^^^246^253^JSError.make ( MOVED_VARIABLE, var.getName (  )  )  ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[BugLab_Argument_Swapping]^JSError.make ( var, MOVED_VARIABLE.getName (  )  )  ) ;^252^^^^^246^253^JSError.make ( MOVED_VARIABLE, var.getName (  )  )  ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[BugLab_Argument_Swapping]^!checkNodesMatch ( actualVar.getNameNode (  ) , var.getNameNode (  )  )  || !isNodeAttached ( actualVar.getNameNode (  )  )  )  {^247^248^249^250^^232^262^!checkNodesMatch ( var.getNameNode (  ) , actualVar.getNameNode (  )  )  || !isNodeAttached ( actualVar.getNameNode (  )  )  )  {^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[BugLab_Variable_Misuse]^actualVar.getNameNode (  )  )  || !isNodeAttached ( var.getNameNode (  )  )  )  {^249^250^^^^234^264^actualVar.getNameNode (  )  )  || !isNodeAttached ( actualVar.getNameNode (  )  )  )  {^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[BugLab_Variable_Misuse]^!isNodeAttached ( var.getNameNode (  )  )  )  {^250^^^^^235^265^!isNodeAttached ( actualVar.getNameNode (  )  )  )  {^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[BugLab_Variable_Misuse]^compiler.report ( JSError.make ( MOVED_VARIABLE, actualVar.getName (  )  )  ) ;^251^252^^^^236^266^compiler.report ( JSError.make ( MOVED_VARIABLE, var.getName (  )  )  ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[BugLab_Argument_Swapping]^compiler.report ( JSError.make ( var, MOVED_VARIABLE.getName (  )  )  ) ;^251^252^^^^236^266^compiler.report ( JSError.make ( MOVED_VARIABLE, var.getName (  )  )  ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[BugLab_Variable_Misuse]^JSError.make ( MOVED_VARIABLE, actualVar.getName (  )  )  ) ;^252^^^^^237^267^JSError.make ( MOVED_VARIABLE, var.getName (  )  )  ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[BugLab_Variable_Misuse]^JSError.make ( VARIABLE_COUNT_MISMATCH, var.getName (  )  )  ) ;^252^^^^^237^267^JSError.make ( MOVED_VARIABLE, var.getName (  )  )  ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[BugLab_Argument_Swapping]^JSError.make ( var, MOVED_VARIABLE.getName (  )  )  ) ;^252^^^^^237^267^JSError.make ( MOVED_VARIABLE, var.getName (  )  )  ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[BugLab_Variable_Misuse]^compiler.report ( JSError.make ( MISSING_VARIABLE, actualVar.getName (  )  )  ) ;^244^245^^^^242^253^compiler.report ( JSError.make ( MISSING_VARIABLE, var.getName (  )  )  ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[BugLab_Variable_Misuse]^compiler.report ( JSError.make ( VARIABLE_COUNT_MISMATCH, var.getName (  )  )  ) ;^244^245^^^^242^253^compiler.report ( JSError.make ( MISSING_VARIABLE, var.getName (  )  )  ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[BugLab_Argument_Swapping]^compiler.report ( JSError.make ( var, MISSING_VARIABLE.getName (  )  )  ) ;^244^245^^^^242^253^compiler.report ( JSError.make ( MISSING_VARIABLE, var.getName (  )  )  ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[BugLab_Variable_Misuse]^JSError.make ( MISSING_VARIABLE, actualVar.getName (  )  )  ) ;^245^^^^^242^253^JSError.make ( MISSING_VARIABLE, var.getName (  )  )  ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[BugLab_Variable_Misuse]^JSError.make ( VARIABLE_COUNT_MISMATCH, var.getName (  )  )  ) ;^245^^^^^242^253^JSError.make ( MISSING_VARIABLE, var.getName (  )  )  ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[BugLab_Argument_Swapping]^JSError.make ( var, MISSING_VARIABLE.getName (  )  )  ) ;^245^^^^^242^253^JSError.make ( MISSING_VARIABLE, var.getName (  )  )  ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[BugLab_Variable_Misuse]^Scope.Var actualVar = expectedScope.getVar ( var.getName (  )  ) ;^241^^^^^226^256^Scope.Var actualVar = actualScope.getVar ( var.getName (  )  ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[BugLab_Argument_Swapping]^Scope.Var actualVar = var.getVar ( actualScope.getName (  )  ) ;^241^^^^^226^256^Scope.Var actualVar = actualScope.getVar ( var.getName (  )  ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[BugLab_Variable_Misuse]^Scope.Var actualVar = actualScope.getVar ( actualVar.getName (  )  ) ;^241^^^^^226^256^Scope.Var actualVar = actualScope.getVar ( var.getName (  )  ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[BugLab_Variable_Misuse]^expectedScope.getVar ( actualVar.getName (  )  )  != var )  {^243^^^^^228^258^expectedScope.getVar ( var.getName (  )  )  != var )  {^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[BugLab_Variable_Misuse]^compiler.report ( JSError.make ( MISSING_VARIABLE, actualVar.getName (  )  )  ) ;^244^245^^^^229^259^compiler.report ( JSError.make ( MISSING_VARIABLE, var.getName (  )  )  ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[BugLab_Argument_Swapping]^compiler.report ( JSError.make ( var, MISSING_VARIABLE.getName (  )  )  ) ;^244^245^^^^229^259^compiler.report ( JSError.make ( MISSING_VARIABLE, var.getName (  )  )  ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[BugLab_Variable_Misuse]^JSError.make ( MISSING_VARIABLE, actualVar.getName (  )  )  ) ;^245^^^^^230^260^JSError.make ( MISSING_VARIABLE, var.getName (  )  )  ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[BugLab_Variable_Misuse]^JSError.make ( VARIABLE_COUNT_MISMATCH, var.getName (  )  )  ) ;^245^^^^^230^260^JSError.make ( MISSING_VARIABLE, var.getName (  )  )  ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[BugLab_Argument_Swapping]^JSError.make ( var, MISSING_VARIABLE.getName (  )  )  ) ;^245^^^^^230^260^JSError.make ( MISSING_VARIABLE, var.getName (  )  )  ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[BugLab_Variable_Misuse]^compiler.report ( JSError.make ( VARIABLE_COUNT_MISMATCH, var.getName (  )  )  ) ;^251^252^^^^236^266^compiler.report ( JSError.make ( MOVED_VARIABLE, var.getName (  )  )  ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[BugLab_Variable_Misuse]^compiler.report ( JSError.make ( VARIABLE_COUNT_MISMATCH, expectedScope.getRootNode (  ) .toStringTree (  ) ,^223^224^225^226^^221^229^compiler.report ( JSError.make ( SCOPE_MISMATCH, expectedScope.getRootNode (  ) .toStringTree (  ) ,^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[BugLab_Argument_Swapping]^compiler.report ( JSError.make ( expectedScope, SCOPE_MISMATCH.getRootNode (  ) .toStringTree (  ) ,^223^224^225^226^^221^229^compiler.report ( JSError.make ( SCOPE_MISMATCH, expectedScope.getRootNode (  ) .toStringTree (  ) ,^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[BugLab_Variable_Misuse]^JSError.make ( SCOPE_MISMATCH, actualScope.getRootNode (  ) .toStringTree (  ) , actualScope.getRootNode (  ) .toStringTree (  )  )  ) ;^224^225^226^227^^221^229^JSError.make ( SCOPE_MISMATCH, expectedScope.getRootNode (  ) .toStringTree (  ) , actualScope.getRootNode (  ) .toStringTree (  )  )  ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[BugLab_Variable_Misuse]^JSError.make ( VARIABLE_COUNT_MISMATCH, expectedScope.getRootNode (  ) .toStringTree (  ) , actualScope.getRootNode (  ) .toStringTree (  )  )  ) ;^224^225^226^227^^221^229^JSError.make ( SCOPE_MISMATCH, expectedScope.getRootNode (  ) .toStringTree (  ) , actualScope.getRootNode (  ) .toStringTree (  )  )  ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[BugLab_Argument_Swapping]^JSError.make ( expectedScope, SCOPE_MISMATCH.getRootNode (  ) .toStringTree (  ) , actualScope.getRootNode (  ) .toStringTree (  )  )  ) ;^224^225^226^227^^221^229^JSError.make ( SCOPE_MISMATCH, expectedScope.getRootNode (  ) .toStringTree (  ) , actualScope.getRootNode (  ) .toStringTree (  )  )  ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[BugLab_Argument_Swapping]^JSError.make ( actualScope, expectedScope.getRootNode (  ) .toStringTree (  ) , SCOPE_MISMATCH.getRootNode (  ) .toStringTree (  )  )  ) ;^224^225^226^227^^221^229^JSError.make ( SCOPE_MISMATCH, expectedScope.getRootNode (  ) .toStringTree (  ) , actualScope.getRootNode (  ) .toStringTree (  )  )  ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[BugLab_Variable_Misuse]^if  ( actualScope.getVarCount (  )  != actualScope.getVarCount (  )  )  {^231^^^^^216^246^if  ( expectedScope.getVarCount (  )  != actualScope.getVarCount (  )  )  {^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[BugLab_Variable_Misuse]^if  ( expectedScope.getVarCount (  )  != expectedScope.getVarCount (  )  )  {^231^^^^^216^246^if  ( expectedScope.getVarCount (  )  != actualScope.getVarCount (  )  )  {^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[BugLab_Argument_Swapping]^if  ( actualScope.getVarCount (  )  != expectedScope.getVarCount (  )  )  {^231^^^^^216^246^if  ( expectedScope.getVarCount (  )  != actualScope.getVarCount (  )  )  {^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[BugLab_Wrong_Operator]^if  ( expectedScope.getVarCount (  )  == actualScope.getVarCount (  )  )  {^231^^^^^216^246^if  ( expectedScope.getVarCount (  )  != actualScope.getVarCount (  )  )  {^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[BugLab_Variable_Misuse]^if  ( var == null || expectedScope.getVar ( var.getName (  )  )  != var )  {^242^243^^^^231^255^if  ( actualVar == null || expectedScope.getVar ( var.getName (  )  )  != var )  {^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[BugLab_Variable_Misuse]^if  ( actualVar == null || actualScope.getVar ( var.getName (  )  )  != var )  {^242^243^^^^231^255^if  ( actualVar == null || expectedScope.getVar ( var.getName (  )  )  != var )  {^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[BugLab_Argument_Swapping]^if  ( var == null || expectedScope.getVar ( actualVar.getName (  )  )  != var )  {^242^243^^^^231^255^if  ( actualVar == null || expectedScope.getVar ( var.getName (  )  )  != var )  {^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[BugLab_Wrong_Operator]^if  ( actualVar == null && expectedScope.getVar ( var.getName (  )  )  != var )  {^242^243^^^^231^255^if  ( actualVar == null || expectedScope.getVar ( var.getName (  )  )  != var )  {^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[BugLab_Wrong_Operator]^if  ( actualVar != null || expectedScope.getVar ( var.getName (  )  )  != var )  {^242^243^^^^231^255^if  ( actualVar == null || expectedScope.getVar ( var.getName (  )  )  != var )  {^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[BugLab_Wrong_Operator]^if  ( actualVar == null || expectedScope.getVar ( var.getName (  )  )  == var )  {^242^243^^^^231^255^if  ( actualVar == null || expectedScope.getVar ( var.getName (  )  )  != var )  {^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[BugLab_Argument_Swapping]^} else if  ( !checkNodesMatch ( actualVar.getNameNode (  ) , var.getNameNode (  )  )  ||^246^247^248^249^^231^255^} else if  ( !checkNodesMatch ( var.getNameNode (  ) , actualVar.getNameNode (  )  )  ||^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[BugLab_Wrong_Operator]^} else if  ( !checkNodesMatch ( var.getNameNode (  ) , actualVar.getNameNode (  )  )  &&^246^247^248^249^^231^255^} else if  ( !checkNodesMatch ( var.getNameNode (  ) , actualVar.getNameNode (  )  )  ||^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[BugLab_Variable_Misuse]^compiler.report ( JSError.make ( MOVED_VARIABLE, actualVar.getName (  )  )  ) ;^251^252^^^^231^255^compiler.report ( JSError.make ( MOVED_VARIABLE, var.getName (  )  )  ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[BugLab_Argument_Swapping]^compiler.report ( JSError.make ( var, MOVED_VARIABLE.getName (  )  )  ) ;^251^252^^^^231^255^compiler.report ( JSError.make ( MOVED_VARIABLE, var.getName (  )  )  ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[BugLab_Variable_Misuse]^JSError.make ( MOVED_VARIABLE, actualVar.getName (  )  )  ) ;^252^^^^^231^255^JSError.make ( MOVED_VARIABLE, var.getName (  )  )  ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[BugLab_Variable_Misuse]^JSError.make ( VARIABLE_COUNT_MISMATCH, var.getName (  )  )  ) ;^252^^^^^231^255^JSError.make ( MOVED_VARIABLE, var.getName (  )  )  ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[BugLab_Argument_Swapping]^JSError.make ( var, MOVED_VARIABLE.getName (  )  )  ) ;^252^^^^^231^255^JSError.make ( MOVED_VARIABLE, var.getName (  )  )  ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[BugLab_Argument_Swapping]^!checkNodesMatch ( actualVar.getNameNode (  ) , var.getNameNode (  )  )  || !isNodeAttached ( actualVar.getNameNode (  )  )  )  {^247^248^249^250^^231^255^!checkNodesMatch ( var.getNameNode (  ) , actualVar.getNameNode (  )  )  || !isNodeAttached ( actualVar.getNameNode (  )  )  )  {^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[BugLab_Variable_Misuse]^actualVar.getNameNode (  )  )  || !isNodeAttached ( var.getNameNode (  )  )  )  {^249^250^^^^231^255^actualVar.getNameNode (  )  )  || !isNodeAttached ( actualVar.getNameNode (  )  )  )  {^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[BugLab_Variable_Misuse]^!isNodeAttached ( var.getNameNode (  )  )  )  {^250^^^^^231^255^!isNodeAttached ( actualVar.getNameNode (  )  )  )  {^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[BugLab_Variable_Misuse]^compiler.report ( JSError.make ( VARIABLE_COUNT_MISMATCH, var.getName (  )  )  ) ;^251^252^^^^231^255^compiler.report ( JSError.make ( MOVED_VARIABLE, var.getName (  )  )  ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[BugLab_Variable_Misuse]^compiler.report ( JSError.make ( MISSING_VARIABLE, actualVar.getName (  )  )  ) ;^244^245^^^^231^255^compiler.report ( JSError.make ( MISSING_VARIABLE, var.getName (  )  )  ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[BugLab_Variable_Misuse]^compiler.report ( JSError.make ( VARIABLE_COUNT_MISMATCH, var.getName (  )  )  ) ;^244^245^^^^231^255^compiler.report ( JSError.make ( MISSING_VARIABLE, var.getName (  )  )  ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[BugLab_Argument_Swapping]^compiler.report ( JSError.make ( var, MISSING_VARIABLE.getName (  )  )  ) ;^244^245^^^^231^255^compiler.report ( JSError.make ( MISSING_VARIABLE, var.getName (  )  )  ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[BugLab_Variable_Misuse]^JSError.make ( MISSING_VARIABLE, actualVar.getName (  )  )  ) ;^245^^^^^231^255^JSError.make ( MISSING_VARIABLE, var.getName (  )  )  ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[BugLab_Argument_Swapping]^JSError.make ( var, MISSING_VARIABLE.getName (  )  )  ) ;^245^^^^^231^255^JSError.make ( MISSING_VARIABLE, var.getName (  )  )  ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[BugLab_Variable_Misuse]^} else if  ( !checkNodesMatch ( actualVar.getNameNode (  ) , actualVar.getNameNode (  )  )  ||^246^247^248^249^^231^255^} else if  ( !checkNodesMatch ( var.getNameNode (  ) , actualVar.getNameNode (  )  )  ||^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[BugLab_Variable_Misuse]^Var var = 2.next (  ) ;^240^^^^^231^255^Var var = it.next (  ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[BugLab_Variable_Misuse]^Scope.Var actualVar = expectedScope.getVar ( var.getName (  )  ) ;^241^^^^^231^255^Scope.Var actualVar = actualScope.getVar ( var.getName (  )  ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[BugLab_Argument_Swapping]^Scope.Var actualVar = var.getVar ( actualScope.getName (  )  ) ;^241^^^^^231^255^Scope.Var actualVar = actualScope.getVar ( var.getName (  )  ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[BugLab_Variable_Misuse]^Scope.Var actualVar = actualScope.getVar ( actualVar.getName (  )  ) ;^241^^^^^231^255^Scope.Var actualVar = actualScope.getVar ( var.getName (  )  ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[BugLab_Variable_Misuse]^expectedScope.getVar ( actualVar.getName (  )  )  != var )  {^243^^^^^231^255^expectedScope.getVar ( var.getName (  )  )  != var )  {^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[BugLab_Variable_Misuse]^JSError.make ( VARIABLE_COUNT_MISMATCH, var.getName (  )  )  ) ;^245^^^^^231^255^JSError.make ( MISSING_VARIABLE, var.getName (  )  )  ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[BugLab_Argument_Swapping]^if  ( expectedScope == null || actualVar.getVar ( var.getName (  )  )  != var )  {^242^243^^^^231^255^if  ( actualVar == null || expectedScope.getVar ( var.getName (  )  )  != var )  {^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[BugLab_Argument_Swapping]^if  ( actualVar == null || var.getVar ( expectedScope.getName (  )  )  != var )  {^242^243^^^^231^255^if  ( actualVar == null || expectedScope.getVar ( var.getName (  )  )  != var )  {^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[BugLab_Variable_Misuse]^Iterator<Var> it = actualScope.getVars (  ) ;^238^^^^^231^255^Iterator<Var> it = expectedScope.getVars (  ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[BugLab_Variable_Misuse]^JSError.make ( SCOPE_MISMATCH, Integer.toString ( expectedScope.getVarCount (  )  ) , Integer.toString ( actualScope.getVarCount (  )  )  )  ) ;^233^234^235^236^^218^248^JSError.make ( VARIABLE_COUNT_MISMATCH, Integer.toString ( expectedScope.getVarCount (  )  ) , Integer.toString ( actualScope.getVarCount (  )  )  )  ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[BugLab_Argument_Swapping]^JSError.make ( VARIABLE_COUNT_MISMATCH, Integer.toString ( actualScope.getVarCount (  )  ) , Integer.toString ( expectedScope.getVarCount (  )  )  )  ) ;^233^234^235^236^^218^248^JSError.make ( VARIABLE_COUNT_MISMATCH, Integer.toString ( expectedScope.getVarCount (  )  ) , Integer.toString ( actualScope.getVarCount (  )  )  )  ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[BugLab_Argument_Swapping]^JSError.make ( expectedScope, Integer.toString ( VARIABLE_COUNT_MISMATCH.getVarCount (  )  ) , Integer.toString ( actualScope.getVarCount (  )  )  )  ) ;^233^234^235^236^^218^248^JSError.make ( VARIABLE_COUNT_MISMATCH, Integer.toString ( expectedScope.getVarCount (  )  ) , Integer.toString ( actualScope.getVarCount (  )  )  )  ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[BugLab_Variable_Misuse]^Integer.toString ( actualScope.getVarCount (  )  ) , Integer.toString ( actualScope.getVarCount (  )  )  )  ) ;^235^236^^^^220^250^Integer.toString ( expectedScope.getVarCount (  )  ) , Integer.toString ( actualScope.getVarCount (  )  )  )  ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[BugLab_Variable_Misuse]^Integer.toString ( expectedScope.getVarCount (  )  )  )  ) ;^236^^^^^221^251^Integer.toString ( actualScope.getVarCount (  )  )  )  ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[BugLab_Variable_Misuse]^} else if  ( !checkNodesMatch ( var.getNameNode (  ) , var.getNameNode (  )  )  ||^246^247^248^249^^231^261^} else if  ( !checkNodesMatch ( var.getNameNode (  ) , actualVar.getNameNode (  )  )  ||^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[BugLab_Variable_Misuse]^for  ( int i = 0; i < actualScopes.size (  ) ; i++ )  {^217^^^^^202^232^for  ( int i = 0; i < expectedScopes.size (  ) ; i++ )  {^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[BugLab_Variable_Misuse]^for  ( int i = 0; i < this.size (  ) ; i++ )  {^217^^^^^202^232^for  ( int i = 0; i < expectedScopes.size (  ) ; i++ )  {^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[BugLab_Wrong_Operator]^for  ( int i = 0; i == expectedScopes.size (  ) ; i++ )  {^217^^^^^202^232^for  ( int i = 0; i < expectedScopes.size (  ) ; i++ )  {^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[BugLab_Wrong_Literal]^for  ( int i = i; i < expectedScopes.size (  ) ; i++ )  {^217^^^^^202^232^for  ( int i = 0; i < expectedScopes.size (  ) ; i++ )  {^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[BugLab_Variable_Misuse]^compiler.report ( JSError.make ( VARIABLE_COUNT_MISMATCH, var.getName (  )  )  ) ;^244^245^^^^229^259^compiler.report ( JSError.make ( MISSING_VARIABLE, var.getName (  )  )  ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[BugLab_Argument_Swapping]^if  ( !checkNodesMatch ( actualScope.getRootNode (  ) , expectedScope.getRootNode (  )  )  )  {^221^222^^^^206^236^if  ( !checkNodesMatch ( expectedScope.getRootNode (  ) , actualScope.getRootNode (  )  )  )  {^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[BugLab_Variable_Misuse]^JSError.make ( SCOPE_MISMATCH, expectedScope.getRootNode (  ) .toStringTree (  ) , expectedScope.getRootNode (  ) .toStringTree (  )  )  ) ;^224^225^226^227^^221^229^JSError.make ( SCOPE_MISMATCH, expectedScope.getRootNode (  ) .toStringTree (  ) , actualScope.getRootNode (  ) .toStringTree (  )  )  ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[BugLab_Argument_Swapping]^JSError.make ( SCOPE_MISMATCH, actualScope.getRootNode (  ) .toStringTree (  ) , expectedScope.getRootNode (  ) .toStringTree (  )  )  ) ;^224^225^226^227^^221^229^JSError.make ( SCOPE_MISMATCH, expectedScope.getRootNode (  ) .toStringTree (  ) , actualScope.getRootNode (  ) .toStringTree (  )  )  ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[BugLab_Wrong_Operator]^if  ( expectedScope.getVarCount (  )  <= actualScope.getVarCount (  )  )  {^231^^^^^216^246^if  ( expectedScope.getVarCount (  )  != actualScope.getVarCount (  )  )  {^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[BugLab_Variable_Misuse]^} else if  ( !checkNodesMatch ( var.getNameNode (  ) , var.getNameNode (  )  )  ||^246^247^248^249^^231^255^} else if  ( !checkNodesMatch ( var.getNameNode (  ) , actualVar.getNameNode (  )  )  ||^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[BugLab_Variable_Misuse]^compiler.report ( JSError.make ( VARIABLE_COUNT_MISMATCH, Integer.toString ( actualScope.getVarCount (  )  ) ,^232^233^234^235^^217^247^compiler.report ( JSError.make ( VARIABLE_COUNT_MISMATCH, Integer.toString ( expectedScope.getVarCount (  )  ) ,^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[BugLab_Variable_Misuse]^compiler.report ( JSError.make ( SCOPE_MISMATCH, Integer.toString ( expectedScope.getVarCount (  )  ) ,^232^233^234^235^^217^247^compiler.report ( JSError.make ( VARIABLE_COUNT_MISMATCH, Integer.toString ( expectedScope.getVarCount (  )  ) ,^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[BugLab_Variable_Misuse]^JSError.make ( VARIABLE_COUNT_MISMATCH, Integer.toString ( actualScope.getVarCount (  )  ) , Integer.toString ( actualScope.getVarCount (  )  )  )  ) ;^233^234^235^236^^218^248^JSError.make ( VARIABLE_COUNT_MISMATCH, Integer.toString ( expectedScope.getVarCount (  )  ) , Integer.toString ( actualScope.getVarCount (  )  )  )  ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[BugLab_Argument_Swapping]^Scope expectedScope = i.get ( expectedScopes ) ;^218^^^^^203^233^Scope expectedScope = expectedScopes.get ( i ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[BugLab_Argument_Swapping]^Scope actualScope = i.get ( actualScopes ) ;^219^^^^^204^234^Scope actualScope = actualScopes.get ( i ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[BugLab_Variable_Misuse]^Iterator<Var> it = actualScope.getVars (  ) ;^238^^^^^223^253^Iterator<Var> it = expectedScope.getVars (  ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[BugLab_Variable_Misuse]^Var var = 0.next (  ) ;^240^^^^^225^255^Var var = it.next (  ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[BugLab_Variable_Misuse]^Scope actualScope = 0.get ( i ) ;^219^^^^^204^234^Scope actualScope = actualScopes.get ( i ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[BugLab_Variable_Misuse]^if  ( !checkNodesMatch ( actualScope.getRootNode (  ) , actualScope.getRootNode (  )  )  )  {^221^222^^^^206^236^if  ( !checkNodesMatch ( expectedScope.getRootNode (  ) , actualScope.getRootNode (  )  )  )  {^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[BugLab_Variable_Misuse]^compiler.report ( JSError.make ( SCOPE_MISMATCH, actualScope.getRootNode (  ) .toStringTree (  ) ,^223^224^225^226^^208^238^compiler.report ( JSError.make ( SCOPE_MISMATCH, expectedScope.getRootNode (  ) .toStringTree (  ) ,^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[BugLab_Variable_Misuse]^compiler.report ( JSError.make ( VARIABLE_COUNT_MISMATCH, expectedScope.getRootNode (  ) .toStringTree (  ) ,^223^224^225^226^^208^238^compiler.report ( JSError.make ( SCOPE_MISMATCH, expectedScope.getRootNode (  ) .toStringTree (  ) ,^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[BugLab_Variable_Misuse]^JSError.make ( VARIABLE_COUNT_MISMATCH, expectedScope.getRootNode (  ) .toStringTree (  ) , actualScope.getRootNode (  ) .toStringTree (  )  )  ) ;^224^225^226^227^^209^239^JSError.make ( SCOPE_MISMATCH, expectedScope.getRootNode (  ) .toStringTree (  ) , actualScope.getRootNode (  ) .toStringTree (  )  )  ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[BugLab_Argument_Swapping]^JSError.make ( SCOPE_MISMATCH, actualScope.getRootNode (  ) .toStringTree (  ) , expectedScope.getRootNode (  ) .toStringTree (  )  )  ) ;^224^225^226^227^^209^239^JSError.make ( SCOPE_MISMATCH, expectedScope.getRootNode (  ) .toStringTree (  ) , actualScope.getRootNode (  ) .toStringTree (  )  )  ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[BugLab_Argument_Swapping]^JSError.make ( actualScope, expectedScope.getRootNode (  ) .toStringTree (  ) , SCOPE_MISMATCH.getRootNode (  ) .toStringTree (  )  )  ) ;^224^225^226^227^^209^239^JSError.make ( SCOPE_MISMATCH, expectedScope.getRootNode (  ) .toStringTree (  ) , actualScope.getRootNode (  ) .toStringTree (  )  )  ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[BugLab_Variable_Misuse]^JSError.make ( VARIABLE_COUNT_MISMATCH, Integer.toString ( expectedScope.getVarCount (  )  ) , Integer.toString ( expectedScope.getVarCount (  )  )  )  ) ;^233^234^235^236^^218^248^JSError.make ( VARIABLE_COUNT_MISMATCH, Integer.toString ( expectedScope.getVarCount (  )  ) , Integer.toString ( actualScope.getVarCount (  )  )  )  ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[BugLab_Wrong_Literal]^for  ( int i = ; i < expectedScopes.size (  ) ; i++ )  {^217^^^^^202^232^for  ( int i = 0; i < expectedScopes.size (  ) ; i++ )  {^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[BugLab_Argument_Swapping]^JSError.make ( actualScope, Integer.toString ( expectedScope.getVarCount (  )  ) , Integer.toString ( VARIABLE_COUNT_MISMATCH.getVarCount (  )  )  )  ) ;^233^234^235^236^^218^248^JSError.make ( VARIABLE_COUNT_MISMATCH, Integer.toString ( expectedScope.getVarCount (  )  ) , Integer.toString ( actualScope.getVarCount (  )  )  )  ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[BugLab_Variable_Misuse]^Node currentA = parent;^263^^^^^262^276^Node currentA = nodeA;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] checkNodesMatch [RETURN_TYPE] boolean   Node nodeA Node nodeB [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Node  actualRoot  currentA  currentB  expectedRoot  n  nodeA  nodeB  parent  ScopeCreator  scopeCreator  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  
[BugLab_Variable_Misuse]^Node currentB = parent;^264^^^^^262^276^Node currentB = nodeB;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] checkNodesMatch [RETURN_TYPE] boolean   Node nodeA Node nodeB [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Node  actualRoot  currentA  currentB  expectedRoot  n  nodeA  nodeB  parent  ScopeCreator  scopeCreator  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  
[BugLab_Variable_Misuse]^while  ( parent != null && currentB != null )  {^265^^^^^262^276^while  ( currentA != null && currentB != null )  {^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] checkNodesMatch [RETURN_TYPE] boolean   Node nodeA Node nodeB [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Node  actualRoot  currentA  currentB  expectedRoot  n  nodeA  nodeB  parent  ScopeCreator  scopeCreator  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  
[BugLab_Variable_Misuse]^while  ( currentA != null && nodeB != null )  {^265^^^^^262^276^while  ( currentA != null && currentB != null )  {^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] checkNodesMatch [RETURN_TYPE] boolean   Node nodeA Node nodeB [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Node  actualRoot  currentA  currentB  expectedRoot  n  nodeA  nodeB  parent  ScopeCreator  scopeCreator  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  
[BugLab_Argument_Swapping]^while  ( currentB != null && currentA != null )  {^265^^^^^262^276^while  ( currentA != null && currentB != null )  {^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] checkNodesMatch [RETURN_TYPE] boolean   Node nodeA Node nodeB [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Node  actualRoot  currentA  currentB  expectedRoot  n  nodeA  nodeB  parent  ScopeCreator  scopeCreator  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  
[BugLab_Wrong_Operator]^while  ( currentA != null || currentB != null )  {^265^^^^^262^276^while  ( currentA != null && currentB != null )  {^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] checkNodesMatch [RETURN_TYPE] boolean   Node nodeA Node nodeB [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Node  actualRoot  currentA  currentB  expectedRoot  n  nodeA  nodeB  parent  ScopeCreator  scopeCreator  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  
[BugLab_Wrong_Operator]^while  ( currentA == null && currentB != null )  {^265^^^^^262^276^while  ( currentA != null && currentB != null )  {^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] checkNodesMatch [RETURN_TYPE] boolean   Node nodeA Node nodeB [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Node  actualRoot  currentA  currentB  expectedRoot  n  nodeA  nodeB  parent  ScopeCreator  scopeCreator  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  
[BugLab_Wrong_Operator]^while  ( currentA != null && currentB == null )  {^265^^^^^262^276^while  ( currentA != null && currentB != null )  {^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] checkNodesMatch [RETURN_TYPE] boolean   Node nodeA Node nodeB [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Node  actualRoot  currentA  currentB  expectedRoot  n  nodeA  nodeB  parent  ScopeCreator  scopeCreator  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  
[BugLab_Variable_Misuse]^if  ( parent.getType (  )  != currentB.getType (  )  || !currentA.isEquivalentTo ( currentB )  )  {^266^267^^^^262^276^if  ( currentA.getType (  )  != currentB.getType (  )  || !currentA.isEquivalentTo ( currentB )  )  {^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] checkNodesMatch [RETURN_TYPE] boolean   Node nodeA Node nodeB [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Node  actualRoot  currentA  currentB  expectedRoot  n  nodeA  nodeB  parent  ScopeCreator  scopeCreator  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  
[BugLab_Argument_Swapping]^if  ( currentB.getType (  )  != currentA.getType (  )  || !currentA.isEquivalentTo ( currentB )  )  {^266^267^^^^262^276^if  ( currentA.getType (  )  != currentB.getType (  )  || !currentA.isEquivalentTo ( currentB )  )  {^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] checkNodesMatch [RETURN_TYPE] boolean   Node nodeA Node nodeB [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Node  actualRoot  currentA  currentB  expectedRoot  n  nodeA  nodeB  parent  ScopeCreator  scopeCreator  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  
[BugLab_Wrong_Operator]^if  ( currentA.getType (  )  != currentB.getType (  )  && !currentA.isEquivalentTo ( currentB )  )  {^266^267^^^^262^276^if  ( currentA.getType (  )  != currentB.getType (  )  || !currentA.isEquivalentTo ( currentB )  )  {^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] checkNodesMatch [RETURN_TYPE] boolean   Node nodeA Node nodeB [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Node  actualRoot  currentA  currentB  expectedRoot  n  nodeA  nodeB  parent  ScopeCreator  scopeCreator  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  
[BugLab_Wrong_Operator]^if  ( currentA.getType (  )  >= currentB.getType (  )  || !currentA.isEquivalentTo ( currentB )  )  {^266^267^^^^262^276^if  ( currentA.getType (  )  != currentB.getType (  )  || !currentA.isEquivalentTo ( currentB )  )  {^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] checkNodesMatch [RETURN_TYPE] boolean   Node nodeA Node nodeB [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Node  actualRoot  currentA  currentB  expectedRoot  n  nodeA  nodeB  parent  ScopeCreator  scopeCreator  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  
[BugLab_Wrong_Literal]^return true;^268^^^^^262^276^return false;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] checkNodesMatch [RETURN_TYPE] boolean   Node nodeA Node nodeB [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Node  actualRoot  currentA  currentB  expectedRoot  n  nodeA  nodeB  parent  ScopeCreator  scopeCreator  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  
[BugLab_Variable_Misuse]^currentA = nodeB.getParent (  ) ;^271^^^^^262^276^currentA = currentA.getParent (  ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] checkNodesMatch [RETURN_TYPE] boolean   Node nodeA Node nodeB [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Node  actualRoot  currentA  currentB  expectedRoot  n  nodeA  nodeB  parent  ScopeCreator  scopeCreator  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  
[BugLab_Variable_Misuse]^currentB = nodeB.getParent (  ) ;^272^^^^^262^276^currentB = currentB.getParent (  ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] checkNodesMatch [RETURN_TYPE] boolean   Node nodeA Node nodeB [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Node  actualRoot  currentA  currentB  expectedRoot  n  nodeA  nodeB  parent  ScopeCreator  scopeCreator  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  
[BugLab_Variable_Misuse]^if  ( nodeA.getType (  )  != currentB.getType (  )  || !currentA.isEquivalentTo ( currentB )  )  {^266^267^^^^262^276^if  ( currentA.getType (  )  != currentB.getType (  )  || !currentA.isEquivalentTo ( currentB )  )  {^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] checkNodesMatch [RETURN_TYPE] boolean   Node nodeA Node nodeB [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Node  actualRoot  currentA  currentB  expectedRoot  n  nodeA  nodeB  parent  ScopeCreator  scopeCreator  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  
[BugLab_Variable_Misuse]^if  ( currentA.getType (  )  != parent.getType (  )  || !currentA.isEquivalentTo ( currentB )  )  {^266^267^^^^262^276^if  ( currentA.getType (  )  != currentB.getType (  )  || !currentA.isEquivalentTo ( currentB )  )  {^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] checkNodesMatch [RETURN_TYPE] boolean   Node nodeA Node nodeB [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Node  actualRoot  currentA  currentB  expectedRoot  n  nodeA  nodeB  parent  ScopeCreator  scopeCreator  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  
[BugLab_Variable_Misuse]^!currentA.isEquivalentTo ( parent )  )  {^267^^^^^262^276^!currentA.isEquivalentTo ( currentB )  )  {^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] checkNodesMatch [RETURN_TYPE] boolean   Node nodeA Node nodeB [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Node  actualRoot  currentA  currentB  expectedRoot  n  nodeA  nodeB  parent  ScopeCreator  scopeCreator  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  
[BugLab_Variable_Misuse]^currentA = parent.getParent (  ) ;^271^^^^^262^276^currentA = currentA.getParent (  ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] checkNodesMatch [RETURN_TYPE] boolean   Node nodeA Node nodeB [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Node  actualRoot  currentA  currentB  expectedRoot  n  nodeA  nodeB  parent  ScopeCreator  scopeCreator  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  
[BugLab_Wrong_Operator]^if  ( currentA.getType (  )  == currentB.getType (  )  || !currentA.isEquivalentTo ( currentB )  )  {^266^267^^^^262^276^if  ( currentA.getType (  )  != currentB.getType (  )  || !currentA.isEquivalentTo ( currentB )  )  {^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] checkNodesMatch [RETURN_TYPE] boolean   Node nodeA Node nodeB [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Node  actualRoot  currentA  currentB  expectedRoot  n  nodeA  nodeB  parent  ScopeCreator  scopeCreator  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  
[BugLab_Variable_Misuse]^currentB = parent.getParent (  ) ;^272^^^^^262^276^currentB = currentB.getParent (  ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] checkNodesMatch [RETURN_TYPE] boolean   Node nodeA Node nodeB [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Node  actualRoot  currentA  currentB  expectedRoot  n  nodeA  nodeB  parent  ScopeCreator  scopeCreator  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  
[BugLab_Variable_Misuse]^if  ( nodeB.getType (  )  != currentB.getType (  )  || !currentA.isEquivalentTo ( currentB )  )  {^266^267^^^^262^276^if  ( currentA.getType (  )  != currentB.getType (  )  || !currentA.isEquivalentTo ( currentB )  )  {^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] checkNodesMatch [RETURN_TYPE] boolean   Node nodeA Node nodeB [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Node  actualRoot  currentA  currentB  expectedRoot  n  nodeA  nodeB  parent  ScopeCreator  scopeCreator  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  
[BugLab_Variable_Misuse]^if  ( currentA.getType (  )  != nodeA.getType (  )  || !currentA.isEquivalentTo ( currentB )  )  {^266^267^^^^262^276^if  ( currentA.getType (  )  != currentB.getType (  )  || !currentA.isEquivalentTo ( currentB )  )  {^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] checkNodesMatch [RETURN_TYPE] boolean   Node nodeA Node nodeB [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Node  actualRoot  currentA  currentB  expectedRoot  n  nodeA  nodeB  parent  ScopeCreator  scopeCreator  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  
[BugLab_Variable_Misuse]^return parent == null && currentB == null;^275^^^^^262^276^return currentA == null && currentB == null;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] checkNodesMatch [RETURN_TYPE] boolean   Node nodeA Node nodeB [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Node  actualRoot  currentA  currentB  expectedRoot  n  nodeA  nodeB  parent  ScopeCreator  scopeCreator  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  
[BugLab_Variable_Misuse]^return currentA == null && nodeB == null;^275^^^^^262^276^return currentA == null && currentB == null;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] checkNodesMatch [RETURN_TYPE] boolean   Node nodeA Node nodeB [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Node  actualRoot  currentA  currentB  expectedRoot  n  nodeA  nodeB  parent  ScopeCreator  scopeCreator  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  
[BugLab_Argument_Swapping]^return currentB == null && currentA == null;^275^^^^^262^276^return currentA == null && currentB == null;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] checkNodesMatch [RETURN_TYPE] boolean   Node nodeA Node nodeB [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Node  actualRoot  currentA  currentB  expectedRoot  n  nodeA  nodeB  parent  ScopeCreator  scopeCreator  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  
[BugLab_Wrong_Operator]^return currentA == null || currentB == null;^275^^^^^262^276^return currentA == null && currentB == null;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] checkNodesMatch [RETURN_TYPE] boolean   Node nodeA Node nodeB [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Node  actualRoot  currentA  currentB  expectedRoot  n  nodeA  nodeB  parent  ScopeCreator  scopeCreator  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  
[BugLab_Wrong_Operator]^return currentA != null && currentB == null;^275^^^^^262^276^return currentA == null && currentB == null;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] checkNodesMatch [RETURN_TYPE] boolean   Node nodeA Node nodeB [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Node  actualRoot  currentA  currentB  expectedRoot  n  nodeA  nodeB  parent  ScopeCreator  scopeCreator  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  
[BugLab_Variable_Misuse]^if  ( node.getType (  )  == Token.SCRIPT )  {^282^^^^^278^287^if  ( current.getType (  )  == Token.SCRIPT )  {^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] isNodeAttached [RETURN_TYPE] boolean   Node node [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Node  actualRoot  current  currentA  currentB  expectedRoot  n  node  nodeA  nodeB  parent  ScopeCreator  scopeCreator  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  
[BugLab_Wrong_Operator]^if  ( current.getType (  )  >= Token.SCRIPT )  {^282^^^^^278^287^if  ( current.getType (  )  == Token.SCRIPT )  {^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] isNodeAttached [RETURN_TYPE] boolean   Node node [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Node  actualRoot  current  currentA  currentB  expectedRoot  n  node  nodeA  nodeB  parent  ScopeCreator  scopeCreator  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  
[BugLab_Wrong_Literal]^return false;^283^^^^^278^287^return true;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] isNodeAttached [RETURN_TYPE] boolean   Node node [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Node  actualRoot  current  currentA  currentB  expectedRoot  n  node  nodeA  nodeB  parent  ScopeCreator  scopeCreator  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  
[BugLab_Variable_Misuse]^for  ( Node current = parent;^280^^^^^278^287^for  ( Node current = node;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] isNodeAttached [RETURN_TYPE] boolean   Node node [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Node  actualRoot  current  currentA  currentB  expectedRoot  n  node  nodeA  nodeB  parent  ScopeCreator  scopeCreator  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  
[BugLab_Variable_Misuse]^for  ( Node node = node;^280^^^^^278^287^for  ( Node current = node;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] isNodeAttached [RETURN_TYPE] boolean   Node node [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Node  actualRoot  current  currentA  currentB  expectedRoot  n  node  nodeA  nodeB  parent  ScopeCreator  scopeCreator  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  
[BugLab_Argument_Swapping]^for  ( Node node = current;^280^^^^^278^287^for  ( Node current = node;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] isNodeAttached [RETURN_TYPE] boolean   Node node [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Node  actualRoot  current  currentA  currentB  expectedRoot  n  node  nodeA  nodeB  parent  ScopeCreator  scopeCreator  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  
[BugLab_Variable_Misuse]^if  ( parent.getType (  )  == Token.SCRIPT )  {^282^^^^^278^287^if  ( current.getType (  )  == Token.SCRIPT )  {^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] isNodeAttached [RETURN_TYPE] boolean   Node node [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Node  actualRoot  current  currentA  currentB  expectedRoot  n  node  nodeA  nodeB  parent  ScopeCreator  scopeCreator  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  
[BugLab_Wrong_Operator]^if  ( current.getType (  )  != Token.SCRIPT )  {^282^^^^^278^287^if  ( current.getType (  )  == Token.SCRIPT )  {^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] isNodeAttached [RETURN_TYPE] boolean   Node node [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Node  actualRoot  current  currentA  currentB  expectedRoot  n  node  nodeA  nodeB  parent  ScopeCreator  scopeCreator  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  
[BugLab_Variable_Misuse]^current != null; node = current.getParent (  )  )  {^281^^^^^278^287^current != null; current = current.getParent (  )  )  {^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] isNodeAttached [RETURN_TYPE] boolean   Node node [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Node  actualRoot  current  currentA  currentB  expectedRoot  n  node  nodeA  nodeB  parent  ScopeCreator  scopeCreator  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  
[BugLab_Variable_Misuse]^for  ( Node current = nodeB;^280^^^^^278^287^for  ( Node current = node;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] isNodeAttached [RETURN_TYPE] boolean   Node node [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Node  actualRoot  current  currentA  currentB  expectedRoot  n  node  nodeA  nodeB  parent  ScopeCreator  scopeCreator  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  
[BugLab_Variable_Misuse]^current != null; parent = current.getParent (  )  )  {^281^^^^^278^287^current != null; current = current.getParent (  )  )  {^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] isNodeAttached [RETURN_TYPE] boolean   Node node [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Node  actualRoot  current  currentA  currentB  expectedRoot  n  node  nodeA  nodeB  parent  ScopeCreator  scopeCreator  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  
[BugLab_Variable_Misuse]^if  ( nodeB.getType (  )  == Token.SCRIPT )  {^282^^^^^278^287^if  ( current.getType (  )  == Token.SCRIPT )  {^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] isNodeAttached [RETURN_TYPE] boolean   Node node [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Node  actualRoot  current  currentA  currentB  expectedRoot  n  node  nodeA  nodeB  parent  ScopeCreator  scopeCreator  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  
[BugLab_Wrong_Literal]^return true;^286^^^^^278^287^return false;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] isNodeAttached [RETURN_TYPE] boolean   Node node [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Node  actualRoot  current  currentA  currentB  expectedRoot  n  node  nodeA  nodeB  parent  ScopeCreator  scopeCreator  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  
[BugLab_Wrong_Literal]^private boolean collectingExpected = false;^165^^^^^160^170^private boolean collectingExpected = true;^[CLASS] VerifyingCallback  [METHOD] <init> [RETURN_TYPE] SymbolTable$MemoizedData()   [VARIABLES] Map  scopes  boolean  
[BugLab_Variable_Misuse]^this.actualRoot = expectedRoot;^170^^^^^169^172^this.actualRoot = actualRoot;^[CLASS] VerifyingCallback  [METHOD] <init> [RETURN_TYPE] Node)   Node expectedRoot Node actualRoot [VARIABLES] List  actualScopes  expectedScopes  boolean  collectingExpected  Node  actualRoot  expectedRoot  
[BugLab_Variable_Misuse]^this.expectedRoot = actualRoot;^171^^^^^169^172^this.expectedRoot = expectedRoot;^[CLASS] VerifyingCallback  [METHOD] <init> [RETURN_TYPE] Node)   Node expectedRoot Node actualRoot [VARIABLES] List  actualScopes  expectedScopes  boolean  collectingExpected  Node  actualRoot  expectedRoot  
[BugLab_Wrong_Literal]^return false;^177^^^^^175^178^return true;^[CLASS] VerifyingCallback  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node n Node parent [VARIABLES] List  actualScopes  expectedScopes  boolean  collectingExpected  NodeTraversal  nodeTraversal  Node  actualRoot  expectedRoot  n  parent  
[BugLab_Wrong_Operator]^if  ( cache != null )  {^196^^^^^195^204^if  ( cache == null )  {^[CLASS] VerifyingCallback  [METHOD] verify [RETURN_TYPE] void   [VARIABLES] List  actualScopes  expectedScopes  boolean  collectingExpected  Node  actualRoot  expectedRoot  n  parent  
[BugLab_Wrong_Literal]^collectingExpected = false;^207^^^^^192^222^collectingExpected = true;^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[BugLab_Variable_Misuse]^NodeTraversal.traverse ( compiler, parent, this ) ;^208^^^^^193^223^NodeTraversal.traverse ( compiler, expectedRoot, this ) ;^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[BugLab_Argument_Swapping]^NodeTraversal.traverse ( expectedRoot, compiler, this ) ;^208^^^^^193^223^NodeTraversal.traverse ( compiler, expectedRoot, this ) ;^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[BugLab_Wrong_Literal]^collectingExpected = true;^210^^^^^195^225^collectingExpected = false;^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[BugLab_Variable_Misuse]^( new NodeTraversal ( compiler, this, SymbolTable.this )  ) .traverse ( parent ) ;^211^212^^^^196^226^( new NodeTraversal ( compiler, this, SymbolTable.this )  ) .traverse ( actualRoot ) ;^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[BugLab_Argument_Swapping]^( new NodeTraversal ( actualRoot, this, SymbolTable.this )  ) .traverse ( compiler ) ;^211^212^^^^196^226^( new NodeTraversal ( compiler, this, SymbolTable.this )  ) .traverse ( actualRoot ) ;^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[BugLab_Argument_Swapping]^Preconditions.checkState ( actualScopes.size (  )  == expectedScopes.size (  )  ) ;^215^^^^^200^230^Preconditions.checkState ( expectedScopes.size (  )  == actualScopes.size (  )  ) ;^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[BugLab_Wrong_Operator]^Preconditions.checkState ( expectedScopes.size (  )  != actualScopes.size (  )  ) ;^215^^^^^200^230^Preconditions.checkState ( expectedScopes.size (  )  == actualScopes.size (  )  ) ;^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[BugLab_Argument_Swapping]^if  ( var == null || expectedScope.getVar ( actualVar.getName (  )  )  != var )  {^242^243^^^^227^257^if  ( actualVar == null || expectedScope.getVar ( var.getName (  )  )  != var )  {^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[BugLab_Wrong_Operator]^if  ( actualVar == null && expectedScope.getVar ( var.getName (  )  )  != var )  {^242^243^^^^227^257^if  ( actualVar == null || expectedScope.getVar ( var.getName (  )  )  != var )  {^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[BugLab_Wrong_Operator]^if  ( actualVar != null || expectedScope.getVar ( var.getName (  )  )  != var )  {^242^243^^^^227^257^if  ( actualVar == null || expectedScope.getVar ( var.getName (  )  )  != var )  {^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[BugLab_Wrong_Operator]^if  ( actualVar == null || expectedScope.getVar ( var.getName (  )  )  == var )  {^242^243^^^^227^257^if  ( actualVar == null || expectedScope.getVar ( var.getName (  )  )  != var )  {^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[BugLab_Argument_Swapping]^} else if  ( !checkNodesMatch ( actualVar.getNameNode (  ) , var.getNameNode (  )  )  ||^246^247^248^249^^231^261^} else if  ( !checkNodesMatch ( var.getNameNode (  ) , actualVar.getNameNode (  )  )  ||^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[BugLab_Wrong_Operator]^} else if  ( !checkNodesMatch ( var.getNameNode (  ) , actualVar.getNameNode (  )  )  &&^246^247^248^249^^231^261^} else if  ( !checkNodesMatch ( var.getNameNode (  ) , actualVar.getNameNode (  )  )  ||^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[BugLab_Argument_Swapping]^compiler.report ( JSError.make ( var, MOVED_VARIABLE.getName (  )  )  ) ;^251^252^^^^246^253^compiler.report ( JSError.make ( MOVED_VARIABLE, var.getName (  )  )  ) ;^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[BugLab_Variable_Misuse]^JSError.make ( MOVED_VARIABLE, actualVar.getName (  )  )  ) ;^252^^^^^246^253^JSError.make ( MOVED_VARIABLE, var.getName (  )  )  ) ;^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[BugLab_Argument_Swapping]^JSError.make ( var, MOVED_VARIABLE.getName (  )  )  ) ;^252^^^^^246^253^JSError.make ( MOVED_VARIABLE, var.getName (  )  )  ) ;^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[BugLab_Argument_Swapping]^!checkNodesMatch ( actualVar.getNameNode (  ) , var.getNameNode (  )  )  || !isNodeAttached ( actualVar.getNameNode (  )  )  )  {^247^248^249^250^^232^262^!checkNodesMatch ( var.getNameNode (  ) , actualVar.getNameNode (  )  )  || !isNodeAttached ( actualVar.getNameNode (  )  )  )  {^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[BugLab_Variable_Misuse]^actualVar.getNameNode (  )  )  || !isNodeAttached ( var.getNameNode (  )  )  )  {^249^250^^^^234^264^actualVar.getNameNode (  )  )  || !isNodeAttached ( actualVar.getNameNode (  )  )  )  {^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[BugLab_Variable_Misuse]^!isNodeAttached ( var.getNameNode (  )  )  )  {^250^^^^^235^265^!isNodeAttached ( actualVar.getNameNode (  )  )  )  {^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[BugLab_Variable_Misuse]^compiler.report ( JSError.make ( MOVED_VARIABLE, actualVar.getName (  )  )  ) ;^251^252^^^^236^266^compiler.report ( JSError.make ( MOVED_VARIABLE, var.getName (  )  )  ) ;^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[BugLab_Argument_Swapping]^compiler.report ( JSError.make ( var, MOVED_VARIABLE.getName (  )  )  ) ;^251^252^^^^236^266^compiler.report ( JSError.make ( MOVED_VARIABLE, var.getName (  )  )  ) ;^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[BugLab_Variable_Misuse]^JSError.make ( MOVED_VARIABLE, actualVar.getName (  )  )  ) ;^252^^^^^237^267^JSError.make ( MOVED_VARIABLE, var.getName (  )  )  ) ;^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[BugLab_Argument_Swapping]^JSError.make ( var, MOVED_VARIABLE.getName (  )  )  ) ;^252^^^^^237^267^JSError.make ( MOVED_VARIABLE, var.getName (  )  )  ) ;^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[BugLab_Variable_Misuse]^compiler.report ( JSError.make ( MISSING_VARIABLE, actualVar.getName (  )  )  ) ;^244^245^^^^242^253^compiler.report ( JSError.make ( MISSING_VARIABLE, var.getName (  )  )  ) ;^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[BugLab_Argument_Swapping]^compiler.report ( JSError.make ( var, MISSING_VARIABLE.getName (  )  )  ) ;^244^245^^^^242^253^compiler.report ( JSError.make ( MISSING_VARIABLE, var.getName (  )  )  ) ;^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[BugLab_Variable_Misuse]^JSError.make ( MISSING_VARIABLE, actualVar.getName (  )  )  ) ;^245^^^^^242^253^JSError.make ( MISSING_VARIABLE, var.getName (  )  )  ) ;^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[BugLab_Argument_Swapping]^JSError.make ( var, MISSING_VARIABLE.getName (  )  )  ) ;^245^^^^^242^253^JSError.make ( MISSING_VARIABLE, var.getName (  )  )  ) ;^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[BugLab_Variable_Misuse]^compiler.report ( JSError.make ( MOVED_VARIABLE, actualVar.getName (  )  )  ) ;^251^252^^^^246^253^compiler.report ( JSError.make ( MOVED_VARIABLE, var.getName (  )  )  ) ;^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[BugLab_Variable_Misuse]^Scope.Var actualVar = expectedScope.getVar ( var.getName (  )  ) ;^241^^^^^226^256^Scope.Var actualVar = actualScope.getVar ( var.getName (  )  ) ;^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[BugLab_Argument_Swapping]^Scope.Var actualVar = var.getVar ( actualScope.getName (  )  ) ;^241^^^^^226^256^Scope.Var actualVar = actualScope.getVar ( var.getName (  )  ) ;^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[BugLab_Variable_Misuse]^Scope.Var actualVar = actualScope.getVar ( actualVar.getName (  )  ) ;^241^^^^^226^256^Scope.Var actualVar = actualScope.getVar ( var.getName (  )  ) ;^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[BugLab_Variable_Misuse]^expectedScope.getVar ( actualVar.getName (  )  )  != var )  {^243^^^^^228^258^expectedScope.getVar ( var.getName (  )  )  != var )  {^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[BugLab_Variable_Misuse]^compiler.report ( JSError.make ( MISSING_VARIABLE, actualVar.getName (  )  )  ) ;^244^245^^^^229^259^compiler.report ( JSError.make ( MISSING_VARIABLE, var.getName (  )  )  ) ;^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[BugLab_Argument_Swapping]^compiler.report ( JSError.make ( var, MISSING_VARIABLE.getName (  )  )  ) ;^244^245^^^^229^259^compiler.report ( JSError.make ( MISSING_VARIABLE, var.getName (  )  )  ) ;^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[BugLab_Variable_Misuse]^JSError.make ( MISSING_VARIABLE, actualVar.getName (  )  )  ) ;^245^^^^^230^260^JSError.make ( MISSING_VARIABLE, var.getName (  )  )  ) ;^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[BugLab_Argument_Swapping]^JSError.make ( var, MISSING_VARIABLE.getName (  )  )  ) ;^245^^^^^230^260^JSError.make ( MISSING_VARIABLE, var.getName (  )  )  ) ;^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[BugLab_Variable_Misuse]^if  ( !checkNodesMatch ( actualScope.getRootNode (  ) , actualScope.getRootNode (  )  )  )  {^221^222^^^^206^236^if  ( !checkNodesMatch ( expectedScope.getRootNode (  ) , actualScope.getRootNode (  )  )  )  {^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[BugLab_Variable_Misuse]^if  ( !checkNodesMatch ( expectedScope.getRootNode (  ) , expectedScope.getRootNode (  )  )  )  {^221^222^^^^206^236^if  ( !checkNodesMatch ( expectedScope.getRootNode (  ) , actualScope.getRootNode (  )  )  )  {^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[BugLab_Argument_Swapping]^if  ( !checkNodesMatch ( actualScope.getRootNode (  ) , expectedScope.getRootNode (  )  )  )  {^221^222^^^^206^236^if  ( !checkNodesMatch ( expectedScope.getRootNode (  ) , actualScope.getRootNode (  )  )  )  {^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[BugLab_Argument_Swapping]^compiler.report ( JSError.make ( expectedScope, SCOPE_MISMATCH.getRootNode (  ) .toStringTree (  ) ,^223^224^225^226^^221^229^compiler.report ( JSError.make ( SCOPE_MISMATCH, expectedScope.getRootNode (  ) .toStringTree (  ) ,^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[BugLab_Variable_Misuse]^JSError.make ( null, expectedScope.getRootNode (  ) .toStringTree (  ) , actualScope.getRootNode (  ) .toStringTree (  )  )  ) ;^224^225^226^227^^221^229^JSError.make ( SCOPE_MISMATCH, expectedScope.getRootNode (  ) .toStringTree (  ) , actualScope.getRootNode (  ) .toStringTree (  )  )  ) ;^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[BugLab_Argument_Swapping]^JSError.make ( SCOPE_MISMATCH, actualScope.getRootNode (  ) .toStringTree (  ) , expectedScope.getRootNode (  ) .toStringTree (  )  )  ) ;^224^225^226^227^^221^229^JSError.make ( SCOPE_MISMATCH, expectedScope.getRootNode (  ) .toStringTree (  ) , actualScope.getRootNode (  ) .toStringTree (  )  )  ) ;^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[BugLab_Argument_Swapping]^JSError.make ( actualScope, expectedScope.getRootNode (  ) .toStringTree (  ) , SCOPE_MISMATCH.getRootNode (  ) .toStringTree (  )  )  ) ;^224^225^226^227^^221^229^JSError.make ( SCOPE_MISMATCH, expectedScope.getRootNode (  ) .toStringTree (  ) , actualScope.getRootNode (  ) .toStringTree (  )  )  ) ;^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[BugLab_Argument_Swapping]^JSError.make ( expectedScope, SCOPE_MISMATCH.getRootNode (  ) .toStringTree (  ) , actualScope.getRootNode (  ) .toStringTree (  )  )  ) ;^224^225^226^227^^221^229^JSError.make ( SCOPE_MISMATCH, expectedScope.getRootNode (  ) .toStringTree (  ) , actualScope.getRootNode (  ) .toStringTree (  )  )  ) ;^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[BugLab_Variable_Misuse]^if  ( actualScope.getVarCount (  )  != actualScope.getVarCount (  )  )  {^231^^^^^216^246^if  ( expectedScope.getVarCount (  )  != actualScope.getVarCount (  )  )  {^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[BugLab_Wrong_Operator]^if  ( expectedScope.getVarCount (  )  == actualScope.getVarCount (  )  )  {^231^^^^^216^246^if  ( expectedScope.getVarCount (  )  != actualScope.getVarCount (  )  )  {^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[BugLab_Wrong_Operator]^if  ( expectedScope.getVarCount (  )  <= actualScope.getVarCount (  )  )  {^231^^^^^216^246^if  ( expectedScope.getVarCount (  )  != actualScope.getVarCount (  )  )  {^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[BugLab_Variable_Misuse]^while  ( null.hasNext (  )  )  {^239^^^^^231^255^while  ( it.hasNext (  )  )  {^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[BugLab_Variable_Misuse]^if  ( actualVar == null || actualScope.getVar ( var.getName (  )  )  != var )  {^242^243^^^^231^255^if  ( actualVar == null || expectedScope.getVar ( var.getName (  )  )  != var )  {^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[BugLab_Argument_Swapping]^if  ( var == null || expectedScope.getVar ( actualVar.getName (  )  )  != var )  {^242^243^^^^231^255^if  ( actualVar == null || expectedScope.getVar ( var.getName (  )  )  != var )  {^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[BugLab_Wrong_Operator]^if  ( actualVar == null && expectedScope.getVar ( var.getName (  )  )  != var )  {^242^243^^^^231^255^if  ( actualVar == null || expectedScope.getVar ( var.getName (  )  )  != var )  {^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[BugLab_Wrong_Operator]^if  ( actualVar != null || expectedScope.getVar ( var.getName (  )  )  != var )  {^242^243^^^^231^255^if  ( actualVar == null || expectedScope.getVar ( var.getName (  )  )  != var )  {^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[BugLab_Wrong_Operator]^if  ( actualVar == null || expectedScope.getVar ( var.getName (  )  )  == var )  {^242^243^^^^231^255^if  ( actualVar == null || expectedScope.getVar ( var.getName (  )  )  != var )  {^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[BugLab_Argument_Swapping]^} else if  ( !checkNodesMatch ( actualVar.getNameNode (  ) , var.getNameNode (  )  )  ||^246^247^248^249^^231^255^} else if  ( !checkNodesMatch ( var.getNameNode (  ) , actualVar.getNameNode (  )  )  ||^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[BugLab_Wrong_Operator]^} else if  ( !checkNodesMatch ( var.getNameNode (  ) , actualVar.getNameNode (  )  )  &&^246^247^248^249^^231^255^} else if  ( !checkNodesMatch ( var.getNameNode (  ) , actualVar.getNameNode (  )  )  ||^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[BugLab_Variable_Misuse]^compiler.report ( JSError.make ( MOVED_VARIABLE, actualVar.getName (  )  )  ) ;^251^252^^^^231^255^compiler.report ( JSError.make ( MOVED_VARIABLE, var.getName (  )  )  ) ;^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[BugLab_Argument_Swapping]^compiler.report ( JSError.make ( var, MOVED_VARIABLE.getName (  )  )  ) ;^251^252^^^^231^255^compiler.report ( JSError.make ( MOVED_VARIABLE, var.getName (  )  )  ) ;^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[BugLab_Variable_Misuse]^JSError.make ( MOVED_VARIABLE, actualVar.getName (  )  )  ) ;^252^^^^^231^255^JSError.make ( MOVED_VARIABLE, var.getName (  )  )  ) ;^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[BugLab_Argument_Swapping]^JSError.make ( var, MOVED_VARIABLE.getName (  )  )  ) ;^252^^^^^231^255^JSError.make ( MOVED_VARIABLE, var.getName (  )  )  ) ;^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[BugLab_Argument_Swapping]^!checkNodesMatch ( actualVar.getNameNode (  ) , var.getNameNode (  )  )  || !isNodeAttached ( actualVar.getNameNode (  )  )  )  {^247^248^249^250^^231^255^!checkNodesMatch ( var.getNameNode (  ) , actualVar.getNameNode (  )  )  || !isNodeAttached ( actualVar.getNameNode (  )  )  )  {^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[BugLab_Variable_Misuse]^actualVar.getNameNode (  )  )  || !isNodeAttached ( var.getNameNode (  )  )  )  {^249^250^^^^231^255^actualVar.getNameNode (  )  )  || !isNodeAttached ( actualVar.getNameNode (  )  )  )  {^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[BugLab_Variable_Misuse]^!isNodeAttached ( var.getNameNode (  )  )  )  {^250^^^^^231^255^!isNodeAttached ( actualVar.getNameNode (  )  )  )  {^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[BugLab_Argument_Swapping]^compiler.report ( JSError.make ( var, MISSING_VARIABLE.getName (  )  )  ) ;^244^245^^^^231^255^compiler.report ( JSError.make ( MISSING_VARIABLE, var.getName (  )  )  ) ;^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[BugLab_Variable_Misuse]^JSError.make ( MISSING_VARIABLE, actualVar.getName (  )  )  ) ;^245^^^^^231^255^JSError.make ( MISSING_VARIABLE, var.getName (  )  )  ) ;^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[BugLab_Argument_Swapping]^JSError.make ( var, MISSING_VARIABLE.getName (  )  )  ) ;^245^^^^^231^255^JSError.make ( MISSING_VARIABLE, var.getName (  )  )  ) ;^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[BugLab_Variable_Misuse]^JSError.make ( null, var.getName (  )  )  ) ;^252^^^^^231^255^JSError.make ( MOVED_VARIABLE, var.getName (  )  )  ) ;^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[BugLab_Variable_Misuse]^Scope.Var actualVar = expectedScope.getVar ( var.getName (  )  ) ;^241^^^^^231^255^Scope.Var actualVar = actualScope.getVar ( var.getName (  )  ) ;^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[BugLab_Argument_Swapping]^Scope.Var actualVar = var.getVar ( actualScope.getName (  )  ) ;^241^^^^^231^255^Scope.Var actualVar = actualScope.getVar ( var.getName (  )  ) ;^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[BugLab_Variable_Misuse]^Scope.Var actualVar = actualScope.getVar ( actualVar.getName (  )  ) ;^241^^^^^231^255^Scope.Var actualVar = actualScope.getVar ( var.getName (  )  ) ;^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[BugLab_Variable_Misuse]^expectedScope.getVar ( actualVar.getName (  )  )  != var )  {^243^^^^^231^255^expectedScope.getVar ( var.getName (  )  )  != var )  {^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[BugLab_Variable_Misuse]^compiler.report ( JSError.make ( MISSING_VARIABLE, actualVar.getName (  )  )  ) ;^244^245^^^^231^255^compiler.report ( JSError.make ( MISSING_VARIABLE, var.getName (  )  )  ) ;^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[BugLab_Variable_Misuse]^compiler.report ( JSError.make ( 2, var.getName (  )  )  ) ;^244^245^^^^231^255^compiler.report ( JSError.make ( MISSING_VARIABLE, var.getName (  )  )  ) ;^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[BugLab_Argument_Swapping]^if  ( expectedScope == null || actualVar.getVar ( var.getName (  )  )  != var )  {^242^243^^^^231^255^if  ( actualVar == null || expectedScope.getVar ( var.getName (  )  )  != var )  {^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[BugLab_Variable_Misuse]^JSError.make ( 0, var.getName (  )  )  ) ;^245^^^^^231^255^JSError.make ( MISSING_VARIABLE, var.getName (  )  )  ) ;^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[BugLab_Variable_Misuse]^} else if  ( !checkNodesMatch ( actualVar.getNameNode (  ) , actualVar.getNameNode (  )  )  ||^246^247^248^249^^231^255^} else if  ( !checkNodesMatch ( var.getNameNode (  ) , actualVar.getNameNode (  )  )  ||^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[BugLab_Variable_Misuse]^JSError.make ( 4, var.getName (  )  )  ) ;^245^^^^^231^255^JSError.make ( MISSING_VARIABLE, var.getName (  )  )  ) ;^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[BugLab_Variable_Misuse]^compiler.report ( JSError.make ( null, var.getName (  )  )  ) ;^251^252^^^^231^255^compiler.report ( JSError.make ( MOVED_VARIABLE, var.getName (  )  )  ) ;^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[BugLab_Argument_Swapping]^JSError.make ( VARIABLE_COUNT_MISMATCH, Integer.toString ( actualScope.getVarCount (  )  ) , Integer.toString ( expectedScope.getVarCount (  )  )  )  ) ;^233^234^235^236^^218^248^JSError.make ( VARIABLE_COUNT_MISMATCH, Integer.toString ( expectedScope.getVarCount (  )  ) , Integer.toString ( actualScope.getVarCount (  )  )  )  ) ;^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[BugLab_Argument_Swapping]^JSError.make ( actualScope, Integer.toString ( expectedScope.getVarCount (  )  ) , Integer.toString ( VARIABLE_COUNT_MISMATCH.getVarCount (  )  )  )  ) ;^233^234^235^236^^218^248^JSError.make ( VARIABLE_COUNT_MISMATCH, Integer.toString ( expectedScope.getVarCount (  )  ) , Integer.toString ( actualScope.getVarCount (  )  )  )  ) ;^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[BugLab_Argument_Swapping]^JSError.make ( expectedScope, Integer.toString ( VARIABLE_COUNT_MISMATCH.getVarCount (  )  ) , Integer.toString ( actualScope.getVarCount (  )  )  )  ) ;^233^234^235^236^^218^248^JSError.make ( VARIABLE_COUNT_MISMATCH, Integer.toString ( expectedScope.getVarCount (  )  ) , Integer.toString ( actualScope.getVarCount (  )  )  )  ) ;^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[BugLab_Variable_Misuse]^Integer.toString ( expectedScope.getVarCount (  )  )  )  ) ;^236^^^^^221^251^Integer.toString ( actualScope.getVarCount (  )  )  )  ) ;^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[BugLab_Variable_Misuse]^if  ( var == null || expectedScope.getVar ( var.getName (  )  )  != var )  {^242^243^^^^227^257^if  ( actualVar == null || expectedScope.getVar ( var.getName (  )  )  != var )  {^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[BugLab_Variable_Misuse]^if  ( actualVar == null || actualScope.getVar ( var.getName (  )  )  != var )  {^242^243^^^^227^257^if  ( actualVar == null || expectedScope.getVar ( var.getName (  )  )  != var )  {^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[BugLab_Variable_Misuse]^if  ( actualVar == null || expectedScope.getVar ( actualVar.getName (  )  )  != var )  {^242^243^^^^227^257^if  ( actualVar == null || expectedScope.getVar ( var.getName (  )  )  != var )  {^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[BugLab_Variable_Misuse]^compiler.report ( JSError.make ( this, var.getName (  )  )  ) ;^251^252^^^^236^266^compiler.report ( JSError.make ( MOVED_VARIABLE, var.getName (  )  )  ) ;^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[BugLab_Variable_Misuse]^JSError.make ( 0, var.getName (  )  )  ) ;^252^^^^^237^267^JSError.make ( MOVED_VARIABLE, var.getName (  )  )  ) ;^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[BugLab_Variable_Misuse]^} else if  ( !checkNodesMatch ( var.getNameNode (  ) , var.getNameNode (  )  )  ||^246^247^248^249^^231^261^} else if  ( !checkNodesMatch ( var.getNameNode (  ) , actualVar.getNameNode (  )  )  ||^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[BugLab_Variable_Misuse]^JSError.make ( 0, var.getName (  )  )  ) ;^252^^^^^246^253^JSError.make ( MOVED_VARIABLE, var.getName (  )  )  ) ;^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[BugLab_Variable_Misuse]^for  ( int i = 0; i < actualScopes.size (  ) ; i++ )  {^217^^^^^202^232^for  ( int i = 0; i < expectedScopes.size (  ) ; i++ )  {^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[BugLab_Wrong_Operator]^for  ( int i = 0; i <= expectedScopes.size (  ) ; i++ )  {^217^^^^^202^232^for  ( int i = 0; i < expectedScopes.size (  ) ; i++ )  {^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[BugLab_Wrong_Literal]^for  ( int i = i; i < expectedScopes.size (  ) ; i++ )  {^217^^^^^202^232^for  ( int i = 0; i < expectedScopes.size (  ) ; i++ )  {^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[BugLab_Variable_Misuse]^JSError.make ( null, var.getName (  )  )  ) ;^252^^^^^246^253^JSError.make ( MOVED_VARIABLE, var.getName (  )  )  ) ;^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[BugLab_Variable_Misuse]^compiler.report ( JSError.make ( SCOPE_MISMATCH, actualScope.getRootNode (  ) .toStringTree (  ) ,^223^224^225^226^^221^229^compiler.report ( JSError.make ( SCOPE_MISMATCH, expectedScope.getRootNode (  ) .toStringTree (  ) ,^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[BugLab_Wrong_Operator]^if  ( expectedScope.getVarCount (  )  >= actualScope.getVarCount (  )  )  {^231^^^^^216^246^if  ( expectedScope.getVarCount (  )  != actualScope.getVarCount (  )  )  {^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[BugLab_Variable_Misuse]^if  ( actualVar == null || expectedScope.getVar ( actualVar.getName (  )  )  != var )  {^242^243^^^^231^255^if  ( actualVar == null || expectedScope.getVar ( var.getName (  )  )  != var )  {^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[BugLab_Variable_Misuse]^} else if  ( !checkNodesMatch ( var.getNameNode (  ) , var.getNameNode (  )  )  ||^246^247^248^249^^231^255^} else if  ( !checkNodesMatch ( var.getNameNode (  ) , actualVar.getNameNode (  )  )  ||^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[BugLab_Variable_Misuse]^Var var = this.next (  ) ;^240^^^^^231^255^Var var = it.next (  ) ;^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[BugLab_Variable_Misuse]^Iterator<Var> it = actualScope.getVars (  ) ;^238^^^^^231^255^Iterator<Var> it = expectedScope.getVars (  ) ;^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[BugLab_Variable_Misuse]^compiler.report ( JSError.make ( VARIABLE_COUNT_MISMATCH, Integer.toString ( actualScope.getVarCount (  )  ) ,^232^233^234^235^^217^247^compiler.report ( JSError.make ( VARIABLE_COUNT_MISMATCH, Integer.toString ( expectedScope.getVarCount (  )  ) ,^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[BugLab_Variable_Misuse]^Integer.toString ( actualScope.getVarCount (  )  ) , Integer.toString ( actualScope.getVarCount (  )  )  )  ) ;^235^236^^^^220^250^Integer.toString ( expectedScope.getVarCount (  )  ) , Integer.toString ( actualScope.getVarCount (  )  )  )  ) ;^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[BugLab_Argument_Swapping]^if  ( actualVar == null || var.getVar ( expectedScope.getName (  )  )  != var )  {^242^243^^^^227^257^if  ( actualVar == null || expectedScope.getVar ( var.getName (  )  )  != var )  {^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[BugLab_Variable_Misuse]^} else if  ( !checkNodesMatch ( actualVar.getNameNode (  ) , actualVar.getNameNode (  )  )  ||^246^247^248^249^^231^261^} else if  ( !checkNodesMatch ( var.getNameNode (  ) , actualVar.getNameNode (  )  )  ||^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[BugLab_Argument_Swapping]^Scope expectedScope = i.get ( expectedScopes ) ;^218^^^^^203^233^Scope expectedScope = expectedScopes.get ( i ) ;^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[BugLab_Argument_Swapping]^Scope actualScope = i.get ( actualScopes ) ;^219^^^^^204^234^Scope actualScope = actualScopes.get ( i ) ;^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[BugLab_Variable_Misuse]^Iterator<Var> it = actualScope.getVars (  ) ;^238^^^^^223^253^Iterator<Var> it = expectedScope.getVars (  ) ;^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[BugLab_Variable_Misuse]^Scope actualScope = null.get ( i ) ;^219^^^^^204^234^Scope actualScope = actualScopes.get ( i ) ;^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[BugLab_Variable_Misuse]^compiler.report ( JSError.make ( SCOPE_MISMATCH, actualScope.getRootNode (  ) .toStringTree (  ) ,^223^224^225^226^^208^238^compiler.report ( JSError.make ( SCOPE_MISMATCH, expectedScope.getRootNode (  ) .toStringTree (  ) ,^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[BugLab_Argument_Swapping]^JSError.make ( SCOPE_MISMATCH, actualScope.getRootNode (  ) .toStringTree (  ) , expectedScope.getRootNode (  ) .toStringTree (  )  )  ) ;^224^225^226^227^^209^239^JSError.make ( SCOPE_MISMATCH, expectedScope.getRootNode (  ) .toStringTree (  ) , actualScope.getRootNode (  ) .toStringTree (  )  )  ) ;^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[BugLab_Argument_Swapping]^JSError.make ( actualScope, expectedScope.getRootNode (  ) .toStringTree (  ) , SCOPE_MISMATCH.getRootNode (  ) .toStringTree (  )  )  ) ;^224^225^226^227^^209^239^JSError.make ( SCOPE_MISMATCH, expectedScope.getRootNode (  ) .toStringTree (  ) , actualScope.getRootNode (  ) .toStringTree (  )  )  ) ;^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[BugLab_Argument_Swapping]^JSError.make ( expectedScope, SCOPE_MISMATCH.getRootNode (  ) .toStringTree (  ) , actualScope.getRootNode (  ) .toStringTree (  )  )  ) ;^224^225^226^227^^209^239^JSError.make ( SCOPE_MISMATCH, expectedScope.getRootNode (  ) .toStringTree (  ) , actualScope.getRootNode (  ) .toStringTree (  )  )  ) ;^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[BugLab_Variable_Misuse]^if  ( expectedScope.getVarCount (  )  != expectedScope.getVarCount (  )  )  {^231^^^^^216^246^if  ( expectedScope.getVarCount (  )  != actualScope.getVarCount (  )  )  {^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[BugLab_Variable_Misuse]^JSError.make ( VARIABLE_COUNT_MISMATCH, Integer.toString ( actualScope.getVarCount (  )  ) , Integer.toString ( actualScope.getVarCount (  )  )  )  ) ;^233^234^235^236^^218^248^JSError.make ( VARIABLE_COUNT_MISMATCH, Integer.toString ( expectedScope.getVarCount (  )  ) , Integer.toString ( actualScope.getVarCount (  )  )  )  ) ;^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[BugLab_Argument_Swapping]^compiler.report ( JSError.make ( expectedScope, Integer.toString ( VARIABLE_COUNT_MISMATCH.getVarCount (  )  ) ,^232^233^234^235^^217^247^compiler.report ( JSError.make ( VARIABLE_COUNT_MISMATCH, Integer.toString ( expectedScope.getVarCount (  )  ) ,^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[BugLab_Variable_Misuse]^JSError.make ( VARIABLE_COUNT_MISMATCH, Integer.toString ( expectedScope.getVarCount (  )  ) , Integer.toString ( expectedScope.getVarCount (  )  )  )  ) ;^233^234^235^236^^218^248^JSError.make ( VARIABLE_COUNT_MISMATCH, Integer.toString ( expectedScope.getVarCount (  )  ) , Integer.toString ( actualScope.getVarCount (  )  )  )  ) ;^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[BugLab_Variable_Misuse]^Var var = null.next (  ) ;^240^^^^^225^255^Var var = it.next (  ) ;^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[BugLab_Variable_Misuse]^Node currentA = parent;^263^^^^^262^276^Node currentA = nodeA;^[CLASS] VerifyingCallback  [METHOD] checkNodesMatch [RETURN_TYPE] boolean   Node nodeA Node nodeB [VARIABLES] List  actualScopes  expectedScopes  boolean  collectingExpected  Node  actualRoot  currentA  currentB  expectedRoot  n  nodeA  nodeB  parent  
[BugLab_Variable_Misuse]^Node currentB = parent;^264^^^^^262^276^Node currentB = nodeB;^[CLASS] VerifyingCallback  [METHOD] checkNodesMatch [RETURN_TYPE] boolean   Node nodeA Node nodeB [VARIABLES] List  actualScopes  expectedScopes  boolean  collectingExpected  Node  actualRoot  currentA  currentB  expectedRoot  n  nodeA  nodeB  parent  
[BugLab_Variable_Misuse]^while  ( parent != null && currentB != null )  {^265^^^^^262^276^while  ( currentA != null && currentB != null )  {^[CLASS] VerifyingCallback  [METHOD] checkNodesMatch [RETURN_TYPE] boolean   Node nodeA Node nodeB [VARIABLES] List  actualScopes  expectedScopes  boolean  collectingExpected  Node  actualRoot  currentA  currentB  expectedRoot  n  nodeA  nodeB  parent  
[BugLab_Variable_Misuse]^while  ( currentA != null && parent != null )  {^265^^^^^262^276^while  ( currentA != null && currentB != null )  {^[CLASS] VerifyingCallback  [METHOD] checkNodesMatch [RETURN_TYPE] boolean   Node nodeA Node nodeB [VARIABLES] List  actualScopes  expectedScopes  boolean  collectingExpected  Node  actualRoot  currentA  currentB  expectedRoot  n  nodeA  nodeB  parent  
[BugLab_Argument_Swapping]^while  ( currentB != null && currentA != null )  {^265^^^^^262^276^while  ( currentA != null && currentB != null )  {^[CLASS] VerifyingCallback  [METHOD] checkNodesMatch [RETURN_TYPE] boolean   Node nodeA Node nodeB [VARIABLES] List  actualScopes  expectedScopes  boolean  collectingExpected  Node  actualRoot  currentA  currentB  expectedRoot  n  nodeA  nodeB  parent  
[BugLab_Wrong_Operator]^while  ( currentA != null || currentB != null )  {^265^^^^^262^276^while  ( currentA != null && currentB != null )  {^[CLASS] VerifyingCallback  [METHOD] checkNodesMatch [RETURN_TYPE] boolean   Node nodeA Node nodeB [VARIABLES] List  actualScopes  expectedScopes  boolean  collectingExpected  Node  actualRoot  currentA  currentB  expectedRoot  n  nodeA  nodeB  parent  
[BugLab_Wrong_Operator]^while  ( currentA == null && currentB != null )  {^265^^^^^262^276^while  ( currentA != null && currentB != null )  {^[CLASS] VerifyingCallback  [METHOD] checkNodesMatch [RETURN_TYPE] boolean   Node nodeA Node nodeB [VARIABLES] List  actualScopes  expectedScopes  boolean  collectingExpected  Node  actualRoot  currentA  currentB  expectedRoot  n  nodeA  nodeB  parent  
[BugLab_Wrong_Operator]^while  ( currentA != null && currentB == null )  {^265^^^^^262^276^while  ( currentA != null && currentB != null )  {^[CLASS] VerifyingCallback  [METHOD] checkNodesMatch [RETURN_TYPE] boolean   Node nodeA Node nodeB [VARIABLES] List  actualScopes  expectedScopes  boolean  collectingExpected  Node  actualRoot  currentA  currentB  expectedRoot  n  nodeA  nodeB  parent  
[BugLab_Variable_Misuse]^if  ( parent.getType (  )  != currentB.getType (  )  || !currentA.isEquivalentTo ( currentB )  )  {^266^267^^^^262^276^if  ( currentA.getType (  )  != currentB.getType (  )  || !currentA.isEquivalentTo ( currentB )  )  {^[CLASS] VerifyingCallback  [METHOD] checkNodesMatch [RETURN_TYPE] boolean   Node nodeA Node nodeB [VARIABLES] List  actualScopes  expectedScopes  boolean  collectingExpected  Node  actualRoot  currentA  currentB  expectedRoot  n  nodeA  nodeB  parent  
[BugLab_Variable_Misuse]^if  ( currentA.getType (  )  != nodeB.getType (  )  || !currentA.isEquivalentTo ( currentB )  )  {^266^267^^^^262^276^if  ( currentA.getType (  )  != currentB.getType (  )  || !currentA.isEquivalentTo ( currentB )  )  {^[CLASS] VerifyingCallback  [METHOD] checkNodesMatch [RETURN_TYPE] boolean   Node nodeA Node nodeB [VARIABLES] List  actualScopes  expectedScopes  boolean  collectingExpected  Node  actualRoot  currentA  currentB  expectedRoot  n  nodeA  nodeB  parent  
[BugLab_Argument_Swapping]^if  ( currentB.getType (  )  != currentA.getType (  )  || !currentA.isEquivalentTo ( currentB )  )  {^266^267^^^^262^276^if  ( currentA.getType (  )  != currentB.getType (  )  || !currentA.isEquivalentTo ( currentB )  )  {^[CLASS] VerifyingCallback  [METHOD] checkNodesMatch [RETURN_TYPE] boolean   Node nodeA Node nodeB [VARIABLES] List  actualScopes  expectedScopes  boolean  collectingExpected  Node  actualRoot  currentA  currentB  expectedRoot  n  nodeA  nodeB  parent  
[BugLab_Wrong_Operator]^if  ( currentA.getType (  )  != currentB.getType (  )  && !currentA.isEquivalentTo ( currentB )  )  {^266^267^^^^262^276^if  ( currentA.getType (  )  != currentB.getType (  )  || !currentA.isEquivalentTo ( currentB )  )  {^[CLASS] VerifyingCallback  [METHOD] checkNodesMatch [RETURN_TYPE] boolean   Node nodeA Node nodeB [VARIABLES] List  actualScopes  expectedScopes  boolean  collectingExpected  Node  actualRoot  currentA  currentB  expectedRoot  n  nodeA  nodeB  parent  
[BugLab_Wrong_Operator]^if  ( currentA.getType (  )  == currentB.getType (  )  || !currentA.isEquivalentTo ( currentB )  )  {^266^267^^^^262^276^if  ( currentA.getType (  )  != currentB.getType (  )  || !currentA.isEquivalentTo ( currentB )  )  {^[CLASS] VerifyingCallback  [METHOD] checkNodesMatch [RETURN_TYPE] boolean   Node nodeA Node nodeB [VARIABLES] List  actualScopes  expectedScopes  boolean  collectingExpected  Node  actualRoot  currentA  currentB  expectedRoot  n  nodeA  nodeB  parent  
[BugLab_Wrong_Literal]^return true;^268^^^^^262^276^return false;^[CLASS] VerifyingCallback  [METHOD] checkNodesMatch [RETURN_TYPE] boolean   Node nodeA Node nodeB [VARIABLES] List  actualScopes  expectedScopes  boolean  collectingExpected  Node  actualRoot  currentA  currentB  expectedRoot  n  nodeA  nodeB  parent  
[BugLab_Variable_Misuse]^currentA = nodeA.getParent (  ) ;^271^^^^^262^276^currentA = currentA.getParent (  ) ;^[CLASS] VerifyingCallback  [METHOD] checkNodesMatch [RETURN_TYPE] boolean   Node nodeA Node nodeB [VARIABLES] List  actualScopes  expectedScopes  boolean  collectingExpected  Node  actualRoot  currentA  currentB  expectedRoot  n  nodeA  nodeB  parent  
[BugLab_Variable_Misuse]^currentB = parent.getParent (  ) ;^272^^^^^262^276^currentB = currentB.getParent (  ) ;^[CLASS] VerifyingCallback  [METHOD] checkNodesMatch [RETURN_TYPE] boolean   Node nodeA Node nodeB [VARIABLES] List  actualScopes  expectedScopes  boolean  collectingExpected  Node  actualRoot  currentA  currentB  expectedRoot  n  nodeA  nodeB  parent  
[BugLab_Variable_Misuse]^if  ( currentA.getType (  )  != nodeA.getType (  )  || !currentA.isEquivalentTo ( currentB )  )  {^266^267^^^^262^276^if  ( currentA.getType (  )  != currentB.getType (  )  || !currentA.isEquivalentTo ( currentB )  )  {^[CLASS] VerifyingCallback  [METHOD] checkNodesMatch [RETURN_TYPE] boolean   Node nodeA Node nodeB [VARIABLES] List  actualScopes  expectedScopes  boolean  collectingExpected  Node  actualRoot  currentA  currentB  expectedRoot  n  nodeA  nodeB  parent  
[BugLab_Variable_Misuse]^!currentA.isEquivalentTo ( parent )  )  {^267^^^^^262^276^!currentA.isEquivalentTo ( currentB )  )  {^[CLASS] VerifyingCallback  [METHOD] checkNodesMatch [RETURN_TYPE] boolean   Node nodeA Node nodeB [VARIABLES] List  actualScopes  expectedScopes  boolean  collectingExpected  Node  actualRoot  currentA  currentB  expectedRoot  n  nodeA  nodeB  parent  
[BugLab_Variable_Misuse]^currentA = parent.getParent (  ) ;^271^^^^^262^276^currentA = currentA.getParent (  ) ;^[CLASS] VerifyingCallback  [METHOD] checkNodesMatch [RETURN_TYPE] boolean   Node nodeA Node nodeB [VARIABLES] List  actualScopes  expectedScopes  boolean  collectingExpected  Node  actualRoot  currentA  currentB  expectedRoot  n  nodeA  nodeB  parent  
[BugLab_Variable_Misuse]^if  ( currentA.getType (  )  != parent.getType (  )  || !currentA.isEquivalentTo ( currentB )  )  {^266^267^^^^262^276^if  ( currentA.getType (  )  != currentB.getType (  )  || !currentA.isEquivalentTo ( currentB )  )  {^[CLASS] VerifyingCallback  [METHOD] checkNodesMatch [RETURN_TYPE] boolean   Node nodeA Node nodeB [VARIABLES] List  actualScopes  expectedScopes  boolean  collectingExpected  Node  actualRoot  currentA  currentB  expectedRoot  n  nodeA  nodeB  parent  
[BugLab_Wrong_Operator]^if  ( currentA.getType (  )  >= currentB.getType (  )  || !currentA.isEquivalentTo ( currentB )  )  {^266^267^^^^262^276^if  ( currentA.getType (  )  != currentB.getType (  )  || !currentA.isEquivalentTo ( currentB )  )  {^[CLASS] VerifyingCallback  [METHOD] checkNodesMatch [RETURN_TYPE] boolean   Node nodeA Node nodeB [VARIABLES] List  actualScopes  expectedScopes  boolean  collectingExpected  Node  actualRoot  currentA  currentB  expectedRoot  n  nodeA  nodeB  parent  
[BugLab_Variable_Misuse]^currentB = nodeA.getParent (  ) ;^272^^^^^262^276^currentB = currentB.getParent (  ) ;^[CLASS] VerifyingCallback  [METHOD] checkNodesMatch [RETURN_TYPE] boolean   Node nodeA Node nodeB [VARIABLES] List  actualScopes  expectedScopes  boolean  collectingExpected  Node  actualRoot  currentA  currentB  expectedRoot  n  nodeA  nodeB  parent  
[BugLab_Variable_Misuse]^return parent == null && currentB == null;^275^^^^^262^276^return currentA == null && currentB == null;^[CLASS] VerifyingCallback  [METHOD] checkNodesMatch [RETURN_TYPE] boolean   Node nodeA Node nodeB [VARIABLES] List  actualScopes  expectedScopes  boolean  collectingExpected  Node  actualRoot  currentA  currentB  expectedRoot  n  nodeA  nodeB  parent  
[BugLab_Argument_Swapping]^return currentB == null && currentA == null;^275^^^^^262^276^return currentA == null && currentB == null;^[CLASS] VerifyingCallback  [METHOD] checkNodesMatch [RETURN_TYPE] boolean   Node nodeA Node nodeB [VARIABLES] List  actualScopes  expectedScopes  boolean  collectingExpected  Node  actualRoot  currentA  currentB  expectedRoot  n  nodeA  nodeB  parent  
[BugLab_Wrong_Operator]^return currentA == null || currentB == null;^275^^^^^262^276^return currentA == null && currentB == null;^[CLASS] VerifyingCallback  [METHOD] checkNodesMatch [RETURN_TYPE] boolean   Node nodeA Node nodeB [VARIABLES] List  actualScopes  expectedScopes  boolean  collectingExpected  Node  actualRoot  currentA  currentB  expectedRoot  n  nodeA  nodeB  parent  
[BugLab_Wrong_Operator]^return currentA != null && currentB == null;^275^^^^^262^276^return currentA == null && currentB == null;^[CLASS] VerifyingCallback  [METHOD] checkNodesMatch [RETURN_TYPE] boolean   Node nodeA Node nodeB [VARIABLES] List  actualScopes  expectedScopes  boolean  collectingExpected  Node  actualRoot  currentA  currentB  expectedRoot  n  nodeA  nodeB  parent  
[BugLab_Variable_Misuse]^if  ( nodeA.getType (  )  == Token.SCRIPT )  {^282^^^^^278^287^if  ( current.getType (  )  == Token.SCRIPT )  {^[CLASS] VerifyingCallback  [METHOD] isNodeAttached [RETURN_TYPE] boolean   Node node [VARIABLES] List  actualScopes  expectedScopes  boolean  collectingExpected  Node  actualRoot  current  currentA  currentB  expectedRoot  n  node  nodeA  nodeB  parent  
[BugLab_Wrong_Operator]^if  ( current.getType (  )  != Token.SCRIPT )  {^282^^^^^278^287^if  ( current.getType (  )  == Token.SCRIPT )  {^[CLASS] VerifyingCallback  [METHOD] isNodeAttached [RETURN_TYPE] boolean   Node node [VARIABLES] List  actualScopes  expectedScopes  boolean  collectingExpected  Node  actualRoot  current  currentA  currentB  expectedRoot  n  node  nodeA  nodeB  parent  
[BugLab_Wrong_Literal]^return false;^283^^^^^278^287^return true;^[CLASS] VerifyingCallback  [METHOD] isNodeAttached [RETURN_TYPE] boolean   Node node [VARIABLES] List  actualScopes  expectedScopes  boolean  collectingExpected  Node  actualRoot  current  currentA  currentB  expectedRoot  n  node  nodeA  nodeB  parent  
[BugLab_Variable_Misuse]^for  ( Node current = nodeA;^280^^^^^278^287^for  ( Node current = node;^[CLASS] VerifyingCallback  [METHOD] isNodeAttached [RETURN_TYPE] boolean   Node node [VARIABLES] List  actualScopes  expectedScopes  boolean  collectingExpected  Node  actualRoot  current  currentA  currentB  expectedRoot  n  node  nodeA  nodeB  parent  
[BugLab_Variable_Misuse]^for  ( Node node = node;^280^^^^^278^287^for  ( Node current = node;^[CLASS] VerifyingCallback  [METHOD] isNodeAttached [RETURN_TYPE] boolean   Node node [VARIABLES] List  actualScopes  expectedScopes  boolean  collectingExpected  Node  actualRoot  current  currentA  currentB  expectedRoot  n  node  nodeA  nodeB  parent  
[BugLab_Argument_Swapping]^for  ( Node node = current;^280^^^^^278^287^for  ( Node current = node;^[CLASS] VerifyingCallback  [METHOD] isNodeAttached [RETURN_TYPE] boolean   Node node [VARIABLES] List  actualScopes  expectedScopes  boolean  collectingExpected  Node  actualRoot  current  currentA  currentB  expectedRoot  n  node  nodeA  nodeB  parent  
[BugLab_Variable_Misuse]^if  ( node.getType (  )  == Token.SCRIPT )  {^282^^^^^278^287^if  ( current.getType (  )  == Token.SCRIPT )  {^[CLASS] VerifyingCallback  [METHOD] isNodeAttached [RETURN_TYPE] boolean   Node node [VARIABLES] List  actualScopes  expectedScopes  boolean  collectingExpected  Node  actualRoot  current  currentA  currentB  expectedRoot  n  node  nodeA  nodeB  parent  
[BugLab_Wrong_Operator]^if  ( current.getType (  )  < Token.SCRIPT )  {^282^^^^^278^287^if  ( current.getType (  )  == Token.SCRIPT )  {^[CLASS] VerifyingCallback  [METHOD] isNodeAttached [RETURN_TYPE] boolean   Node node [VARIABLES] List  actualScopes  expectedScopes  boolean  collectingExpected  Node  actualRoot  current  currentA  currentB  expectedRoot  n  node  nodeA  nodeB  parent  
[BugLab_Variable_Misuse]^if  ( parent.getType (  )  == Token.SCRIPT )  {^282^^^^^278^287^if  ( current.getType (  )  == Token.SCRIPT )  {^[CLASS] VerifyingCallback  [METHOD] isNodeAttached [RETURN_TYPE] boolean   Node node [VARIABLES] List  actualScopes  expectedScopes  boolean  collectingExpected  Node  actualRoot  current  currentA  currentB  expectedRoot  n  node  nodeA  nodeB  parent  
[BugLab_Variable_Misuse]^current != null; parent = current.getParent (  )  )  {^281^^^^^278^287^current != null; current = current.getParent (  )  )  {^[CLASS] VerifyingCallback  [METHOD] isNodeAttached [RETURN_TYPE] boolean   Node node [VARIABLES] List  actualScopes  expectedScopes  boolean  collectingExpected  Node  actualRoot  current  currentA  currentB  expectedRoot  n  node  nodeA  nodeB  parent  
[BugLab_Variable_Misuse]^for  ( Node current = nodeB;^280^^^^^278^287^for  ( Node current = node;^[CLASS] VerifyingCallback  [METHOD] isNodeAttached [RETURN_TYPE] boolean   Node node [VARIABLES] List  actualScopes  expectedScopes  boolean  collectingExpected  Node  actualRoot  current  currentA  currentB  expectedRoot  n  node  nodeA  nodeB  parent  
[BugLab_Variable_Misuse]^current != null; nodeB = current.getParent (  )  )  {^281^^^^^278^287^current != null; current = current.getParent (  )  )  {^[CLASS] VerifyingCallback  [METHOD] isNodeAttached [RETURN_TYPE] boolean   Node node [VARIABLES] List  actualScopes  expectedScopes  boolean  collectingExpected  Node  actualRoot  current  currentA  currentB  expectedRoot  n  node  nodeA  nodeB  parent  
[BugLab_Wrong_Literal]^return true;^286^^^^^278^287^return false;^[CLASS] VerifyingCallback  [METHOD] isNodeAttached [RETURN_TYPE] boolean   Node node [VARIABLES] List  actualScopes  expectedScopes  boolean  collectingExpected  Node  actualRoot  current  currentA  currentB  expectedRoot  n  node  nodeA  nodeB  parent  
