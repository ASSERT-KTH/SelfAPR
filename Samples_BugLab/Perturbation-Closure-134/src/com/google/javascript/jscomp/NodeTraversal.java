[BugLab_Wrong_Literal]^this ( nodeTypes, false ) ;^176^^^^^175^177^this ( nodeTypes, true ) ;^[CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback  [METHOD] <init> [RETURN_TYPE] Set)   Integer> nodeTypes [VARIABLES] ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  ScopeCreator  scopeCreator  String  MISSING_SOURCE  sourceName  Deque  cfgs  scopeRoots  scopes  
[BugLab_Variable_Misuse]^this ( compiler, callback, new SyntacticScopeCreator ( compiler )  ) ;^200^^^^^199^201^this ( compiler, cb, new SyntacticScopeCreator ( compiler )  ) ;^[CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback  [METHOD] <init> [RETURN_TYPE] NodeTraversal$Callback)   AbstractCompiler compiler Callback cb [VARIABLES] ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  ScopeCreator  scopeCreator  String  MISSING_SOURCE  sourceName  Deque  cfgs  scopeRoots  scopes  
[BugLab_Argument_Swapping]^this ( cb, compiler, new SyntacticScopeCreator ( compiler )  ) ;^200^^^^^199^201^this ( compiler, cb, new SyntacticScopeCreator ( compiler )  ) ;^[CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback  [METHOD] <init> [RETURN_TYPE] NodeTraversal$Callback)   AbstractCompiler compiler Callback cb [VARIABLES] ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  ScopeCreator  scopeCreator  String  MISSING_SOURCE  sourceName  Deque  cfgs  scopeRoots  scopes  
[BugLab_Variable_Misuse]^this.callback = callback;^209^^^^^207^216^this.callback = cb;^[CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback  [METHOD] <init> [RETURN_TYPE] ScopeCreator)   AbstractCompiler compiler Callback cb ScopeCreator scopeCreator [VARIABLES] ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  ScopeCreator  scopeCreator  String  MISSING_SOURCE  sourceName  Deque  cfgs  scopeRoots  scopes  
[BugLab_Variable_Misuse]^if  ( callback instanceof ScopedCallback )  {^210^^^^^207^216^if  ( cb instanceof ScopedCallback )  {^[CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback  [METHOD] <init> [RETURN_TYPE] ScopeCreator)   AbstractCompiler compiler Callback cb ScopeCreator scopeCreator [VARIABLES] ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  ScopeCreator  scopeCreator  String  MISSING_SOURCE  sourceName  Deque  cfgs  scopeRoots  scopes  
[BugLab_Wrong_Operator]^if  ( cb  <  ScopedCallback )  {^210^^^^^207^216^if  ( cb instanceof ScopedCallback )  {^[CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback  [METHOD] <init> [RETURN_TYPE] ScopeCreator)   AbstractCompiler compiler Callback cb ScopeCreator scopeCreator [VARIABLES] ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  ScopeCreator  scopeCreator  String  MISSING_SOURCE  sourceName  Deque  cfgs  scopeRoots  scopes  
[BugLab_Wrong_Literal]^return false;^131^^^^^129^132^return true;^[CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node n Node parent [VARIABLES] ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  NodeTraversal  nodeTraversal  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  ScopeCreator  scopeCreator  String  MISSING_SOURCE  sourceName  Deque  cfgs  scopeRoots  scopes  
[BugLab_Variable_Misuse]^return curNode == null || parent.getType (  )  != Token.FUNCTION || n == parent.getFirstChild (  ) ;^144^145^^^^140^146^return parent == null || parent.getType (  )  != Token.FUNCTION || n == parent.getFirstChild (  ) ;^[CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node n Node parent [VARIABLES] ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  NodeTraversal  nodeTraversal  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  ScopeCreator  scopeCreator  String  MISSING_SOURCE  sourceName  Deque  cfgs  scopeRoots  scopes  
[BugLab_Variable_Misuse]^return parent == parentull || parent.getType (  )  != Token.FUNCTION || n == parent.getFirstChild (  ) ;^144^145^^^^140^146^return parent == null || parent.getType (  )  != Token.FUNCTION || n == parent.getFirstChild (  ) ;^[CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node n Node parent [VARIABLES] ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  NodeTraversal  nodeTraversal  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  ScopeCreator  scopeCreator  String  MISSING_SOURCE  sourceName  Deque  cfgs  scopeRoots  scopes  
[BugLab_Argument_Swapping]^return n == parentull || parent.getType (  )  != Token.FUNCTION || n == parent.getFirstChild (  ) ;^144^145^^^^140^146^return parent == null || parent.getType (  )  != Token.FUNCTION || n == parent.getFirstChild (  ) ;^[CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node n Node parent [VARIABLES] ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  NodeTraversal  nodeTraversal  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  ScopeCreator  scopeCreator  String  MISSING_SOURCE  sourceName  Deque  cfgs  scopeRoots  scopes  
[BugLab_Wrong_Operator]^return parent == null && parent.getType (  )  != Token.FUNCTION || n == parent.getFirstChild (  ) ;^144^145^^^^140^146^return parent == null || parent.getType (  )  != Token.FUNCTION || n == parent.getFirstChild (  ) ;^[CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node n Node parent [VARIABLES] ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  NodeTraversal  nodeTraversal  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  ScopeCreator  scopeCreator  String  MISSING_SOURCE  sourceName  Deque  cfgs  scopeRoots  scopes  
[BugLab_Wrong_Operator]^return parent != null || parent.getType (  )  != Token.FUNCTION || n == parent.getFirstChild (  ) ;^144^145^^^^140^146^return parent == null || parent.getType (  )  != Token.FUNCTION || n == parent.getFirstChild (  ) ;^[CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node n Node parent [VARIABLES] ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  NodeTraversal  nodeTraversal  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  ScopeCreator  scopeCreator  String  MISSING_SOURCE  sourceName  Deque  cfgs  scopeRoots  scopes  
[BugLab_Wrong_Operator]^return parent == null || parent.getType (  )  == Token.FUNCTION || n == parent.getFirstChild (  ) ;^144^145^^^^140^146^return parent == null || parent.getType (  )  != Token.FUNCTION || n == parent.getFirstChild (  ) ;^[CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node n Node parent [VARIABLES] ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  NodeTraversal  nodeTraversal  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  ScopeCreator  scopeCreator  String  MISSING_SOURCE  sourceName  Deque  cfgs  scopeRoots  scopes  
[BugLab_Wrong_Operator]^return parent == null || parent.getType (  )  != Token.FUNCTION || n != parent.getFirstChild (  ) ;^144^145^^^^140^146^return parent == null || parent.getType (  )  != Token.FUNCTION || n == parent.getFirstChild (  ) ;^[CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node n Node parent [VARIABLES] ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  NodeTraversal  nodeTraversal  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  ScopeCreator  scopeCreator  String  MISSING_SOURCE  sourceName  Deque  cfgs  scopeRoots  scopes  
[BugLab_Variable_Misuse]^return n == null || parent.getType (  )  != Token.FUNCTION || n == parent.getFirstChild (  ) ;^144^145^^^^140^146^return parent == null || parent.getType (  )  != Token.FUNCTION || n == parent.getFirstChild (  ) ;^[CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node n Node parent [VARIABLES] ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  NodeTraversal  nodeTraversal  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  ScopeCreator  scopeCreator  String  MISSING_SOURCE  sourceName  Deque  cfgs  scopeRoots  scopes  
[BugLab_Variable_Misuse]^n == n.getFirstChild (  ) ;^145^^^^^140^146^n == parent.getFirstChild (  ) ;^[CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node n Node parent [VARIABLES] ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  NodeTraversal  nodeTraversal  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  ScopeCreator  scopeCreator  String  MISSING_SOURCE  sourceName  Deque  cfgs  scopeRoots  scopes  
[BugLab_Variable_Misuse]^return n == null || NodeUtil.isControlStructure ( parent ) || NodeUtil.isStatementBlock ( parent ) ;^157^158^^^^155^159^return parent == null || NodeUtil.isControlStructure ( parent ) || NodeUtil.isStatementBlock ( parent ) ;^[CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node n Node parent [VARIABLES] ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  NodeTraversal  nodeTraversal  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  ScopeCreator  scopeCreator  String  MISSING_SOURCE  sourceName  Deque  cfgs  scopeRoots  scopes  
[BugLab_Wrong_Operator]^return parent == null && NodeUtil.isControlStructure ( parent ) || NodeUtil.isStatementBlock ( parent ) ;^157^158^^^^155^159^return parent == null || NodeUtil.isControlStructure ( parent ) || NodeUtil.isStatementBlock ( parent ) ;^[CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node n Node parent [VARIABLES] ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  NodeTraversal  nodeTraversal  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  ScopeCreator  scopeCreator  String  MISSING_SOURCE  sourceName  Deque  cfgs  scopeRoots  scopes  
[BugLab_Wrong_Operator]^return parent != null || NodeUtil.isControlStructure ( parent ) || NodeUtil.isStatementBlock ( parent ) ;^157^158^^^^155^159^return parent == null || NodeUtil.isControlStructure ( parent ) || NodeUtil.isStatementBlock ( parent ) ;^[CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node n Node parent [VARIABLES] ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  NodeTraversal  nodeTraversal  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  ScopeCreator  scopeCreator  String  MISSING_SOURCE  sourceName  Deque  cfgs  scopeRoots  scopes  
[BugLab_Variable_Misuse]^|| NodeUtil.isStatementBlock ( n ) ;^158^^^^^155^159^|| NodeUtil.isStatementBlock ( parent ) ;^[CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node n Node parent [VARIABLES] ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  NodeTraversal  nodeTraversal  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  ScopeCreator  scopeCreator  String  MISSING_SOURCE  sourceName  Deque  cfgs  scopeRoots  scopes  
[BugLab_Variable_Misuse]^return include == parentodeTypes.contains ( n.getType (  )  ) ;^192^^^^^190^193^return include == nodeTypes.contains ( n.getType (  )  ) ;^[CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node n Node parent [VARIABLES] ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  NodeTraversal  nodeTraversal  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  ScopeCreator  scopeCreator  String  MISSING_SOURCE  sourceName  Deque  cfgs  scopeRoots  scopes  
[BugLab_Argument_Swapping]^return n == includeodeTypes.contains ( n.getType (  )  ) ;^192^^^^^190^193^return include == nodeTypes.contains ( n.getType (  )  ) ;^[CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node n Node parent [VARIABLES] ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  NodeTraversal  nodeTraversal  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  ScopeCreator  scopeCreator  String  MISSING_SOURCE  sourceName  Deque  cfgs  scopeRoots  scopes  
[BugLab_Argument_Swapping]^return nodeTypes == include.contains ( n.getType (  )  ) ;^192^^^^^190^193^return include == nodeTypes.contains ( n.getType (  )  ) ;^[CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node n Node parent [VARIABLES] ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  NodeTraversal  nodeTraversal  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  ScopeCreator  scopeCreator  String  MISSING_SOURCE  sourceName  Deque  cfgs  scopeRoots  scopes  
[BugLab_Argument_Swapping]^return include == n.contains ( nodeTypes.getType (  )  ) ;^192^^^^^190^193^return include == nodeTypes.contains ( n.getType (  )  ) ;^[CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node n Node parent [VARIABLES] ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  NodeTraversal  nodeTraversal  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  ScopeCreator  scopeCreator  String  MISSING_SOURCE  sourceName  Deque  cfgs  scopeRoots  scopes  
[BugLab_Wrong_Operator]^return include != nodeTypes.contains ( n.getType (  )  ) ;^192^^^^^190^193^return include == nodeTypes.contains ( n.getType (  )  ) ;^[CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node n Node parent [VARIABLES] ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  NodeTraversal  nodeTraversal  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  ScopeCreator  scopeCreator  String  MISSING_SOURCE  sourceName  Deque  cfgs  scopeRoots  scopes  
[BugLab_Argument_Swapping]^return include == nodeTypesodeTypes.contains ( n.getType (  )  ) ;^192^^^^^190^193^return include == nodeTypes.contains ( n.getType (  )  ) ;^[CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node n Node parent [VARIABLES] ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  NodeTraversal  nodeTraversal  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  ScopeCreator  scopeCreator  String  MISSING_SOURCE  sourceName  Deque  cfgs  scopeRoots  scopes  
[BugLab_Variable_Misuse]^message = unexpectedException.getMessage (  )  + "\n" + formatNodeContext ( "Node", parent )  + ( curNode == null ?^227^228^229^230^^218^235^message = unexpectedException.getMessage (  )  + "\n" + formatNodeContext ( "Node", curNode )  + ( curNode == null ?^[CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback  [METHOD] throwUnexpectedException [RETURN_TYPE] void   Exception unexpectedException [VARIABLES] ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  ScopeCreator  scopeCreator  String  MISSING_SOURCE  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  
[BugLab_Argument_Swapping]^message = curNode.getMessage (  )  + "\n" + formatNodeContext ( "Node", unexpectedException )  + ( curNode == null ?^227^228^229^230^^218^235^message = unexpectedException.getMessage (  )  + "\n" + formatNodeContext ( "Node", curNode )  + ( curNode == null ?^[CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback  [METHOD] throwUnexpectedException [RETURN_TYPE] void   Exception unexpectedException [VARIABLES] ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  ScopeCreator  scopeCreator  String  MISSING_SOURCE  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  
[BugLab_Wrong_Operator]^message = unexpectedException.getMessage (  <=  )  + "\n" + formatNodeContext ( "Node", curNode )  + ( curNode == null ?^227^228^229^230^^218^235^message = unexpectedException.getMessage (  )  + "\n" + formatNodeContext ( "Node", curNode )  + ( curNode == null ?^[CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback  [METHOD] throwUnexpectedException [RETURN_TYPE] void   Exception unexpectedException [VARIABLES] ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  ScopeCreator  scopeCreator  String  MISSING_SOURCE  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  
[BugLab_Wrong_Operator]^message = unexpectedException.getMessage (  &&  )  + "\n" + formatNodeContext ( "Node", curNode )  + ( curNode == null ?^227^228^229^230^^218^235^message = unexpectedException.getMessage (  )  + "\n" + formatNodeContext ( "Node", curNode )  + ( curNode == null ?^[CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback  [METHOD] throwUnexpectedException [RETURN_TYPE] void   Exception unexpectedException [VARIABLES] ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  ScopeCreator  scopeCreator  String  MISSING_SOURCE  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  
[BugLab_Wrong_Operator]^message = unexpectedException.getMessage (  )   >=  "\n" + formatNodeContext ( "Node", curNode )  + ( curNode == null ?^227^228^229^230^^218^235^message = unexpectedException.getMessage (  )  + "\n" + formatNodeContext ( "Node", curNode )  + ( curNode == null ?^[CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback  [METHOD] throwUnexpectedException [RETURN_TYPE] void   Exception unexpectedException [VARIABLES] ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  ScopeCreator  scopeCreator  String  MISSING_SOURCE  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  
[BugLab_Wrong_Operator]^message = unexpectedException.getMessage (  )  + "\n" + formatNodeContext ( "Node", curNode )  + ( curNode != null ?^227^228^229^230^^218^235^message = unexpectedException.getMessage (  )  + "\n" + formatNodeContext ( "Node", curNode )  + ( curNode == null ?^[CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback  [METHOD] throwUnexpectedException [RETURN_TYPE] void   Exception unexpectedException [VARIABLES] ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  ScopeCreator  scopeCreator  String  MISSING_SOURCE  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  
[BugLab_Variable_Misuse]^formatNodeContext ( "Node", parent )  + ( curNode == null ? "" : formatNodeContext ( "Parent", curNode.getParent (  )  )  ) ;^229^230^231^232^^218^235^formatNodeContext ( "Node", curNode )  + ( curNode == null ? "" : formatNodeContext ( "Parent", curNode.getParent (  )  )  ) ;^[CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback  [METHOD] throwUnexpectedException [RETURN_TYPE] void   Exception unexpectedException [VARIABLES] ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  ScopeCreator  scopeCreator  String  MISSING_SOURCE  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  
[BugLab_Variable_Misuse]^formatNodeContext ( "Parent", parent.getParent (  )  )  ) ;^232^^^^^218^235^formatNodeContext ( "Parent", curNode.getParent (  )  )  ) ;^[CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback  [METHOD] throwUnexpectedException [RETURN_TYPE] void   Exception unexpectedException [VARIABLES] ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  ScopeCreator  scopeCreator  String  MISSING_SOURCE  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  
[BugLab_Wrong_Operator]^message = unexpectedException.getMessage (  ^  )  + "\n" + formatNodeContext ( "Node", curNode )  + ( curNode == null ?^227^228^229^230^^218^235^message = unexpectedException.getMessage (  )  + "\n" + formatNodeContext ( "Node", curNode )  + ( curNode == null ?^[CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback  [METHOD] throwUnexpectedException [RETURN_TYPE] void   Exception unexpectedException [VARIABLES] ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  ScopeCreator  scopeCreator  String  MISSING_SOURCE  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  
[BugLab_Wrong_Operator]^message = unexpectedException.getMessage (  <  )  + "\n" + formatNodeContext ( "Node", curNode )  + ( curNode == null ?^227^228^229^230^^218^235^message = unexpectedException.getMessage (  )  + "\n" + formatNodeContext ( "Node", curNode )  + ( curNode == null ?^[CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback  [METHOD] throwUnexpectedException [RETURN_TYPE] void   Exception unexpectedException [VARIABLES] ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  ScopeCreator  scopeCreator  String  MISSING_SOURCE  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  
[BugLab_Wrong_Operator]^message = unexpectedException.getMessage (  )   >>  "\n" + formatNodeContext ( "Node", curNode )  + ( curNode == null ?^227^228^229^230^^218^235^message = unexpectedException.getMessage (  )  + "\n" + formatNodeContext ( "Node", curNode )  + ( curNode == null ?^[CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback  [METHOD] throwUnexpectedException [RETURN_TYPE] void   Exception unexpectedException [VARIABLES] ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  ScopeCreator  scopeCreator  String  MISSING_SOURCE  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  
[BugLab_Variable_Misuse]^compiler.throwInternalError ( sourceName, unexpectedException ) ;^234^^^^^218^235^compiler.throwInternalError ( message, unexpectedException ) ;^[CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback  [METHOD] throwUnexpectedException [RETURN_TYPE] void   Exception unexpectedException [VARIABLES] ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  ScopeCreator  scopeCreator  String  MISSING_SOURCE  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  
[BugLab_Argument_Swapping]^compiler.throwInternalError ( unexpectedException, message ) ;^234^^^^^218^235^compiler.throwInternalError ( message, unexpectedException ) ;^[CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback  [METHOD] throwUnexpectedException [RETURN_TYPE] void   Exception unexpectedException [VARIABLES] ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  ScopeCreator  scopeCreator  String  MISSING_SOURCE  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  
[BugLab_Variable_Misuse]^if  ( parent == null )  {^238^^^^^237^243^if  ( n == null )  {^[CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback  [METHOD] formatNodeContext [RETURN_TYPE] String   String label Node n [VARIABLES] ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  
[BugLab_Wrong_Operator]^if  ( n != null )  {^238^^^^^237^243^if  ( n == null )  {^[CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback  [METHOD] formatNodeContext [RETURN_TYPE] String   String label Node n [VARIABLES] ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  
[BugLab_Wrong_Operator]^return "  >=  " + label + ": NULL";^239^^^^^237^243^return "  " + label + ": NULL";^[CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback  [METHOD] formatNodeContext [RETURN_TYPE] String   String label Node n [VARIABLES] ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  
[BugLab_Wrong_Operator]^return "  "  <=  label + ": NULL";^239^^^^^237^243^return "  " + label + ": NULL";^[CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback  [METHOD] formatNodeContext [RETURN_TYPE] String   String label Node n [VARIABLES] ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  
[BugLab_Variable_Misuse]^return "  " + sourceName + ": NULL";^239^^^^^237^243^return "  " + label + ": NULL";^[CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback  [METHOD] formatNodeContext [RETURN_TYPE] String   String label Node n [VARIABLES] ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  
[BugLab_Wrong_Operator]^return "  ^  " + label + ": NULL";^239^^^^^237^243^return "  " + label + ": NULL";^[CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback  [METHOD] formatNodeContext [RETURN_TYPE] String   String label Node n [VARIABLES] ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  
[BugLab_Wrong_Operator]^return "  "  >>  label + ": NULL";^239^^^^^237^243^return "  " + label + ": NULL";^[CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback  [METHOD] formatNodeContext [RETURN_TYPE] String   String label Node n [VARIABLES] ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  
[BugLab_Variable_Misuse]^return "  " + sourceName + " ( " + n.toString ( false, false, false )  + " ) : " + formatNodePosition ( n ) ;^241^242^^^^237^243^return "  " + label + " ( " + n.toString ( false, false, false )  + " ) : " + formatNodePosition ( n ) ;^[CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback  [METHOD] formatNodeContext [RETURN_TYPE] String   String label Node n [VARIABLES] ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  
[BugLab_Variable_Misuse]^return "  " + label + " ( " + parent.toString ( false, false, false )  + " ) : " + formatNodePosition ( n ) ;^241^242^^^^237^243^return "  " + label + " ( " + n.toString ( false, false, false )  + " ) : " + formatNodePosition ( n ) ;^[CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback  [METHOD] formatNodeContext [RETURN_TYPE] String   String label Node n [VARIABLES] ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  
[BugLab_Argument_Swapping]^return "  " + n + " ( " + label.toString ( false, false, false )  + " ) : " + formatNodePosition ( n ) ;^241^242^^^^237^243^return "  " + label + " ( " + n.toString ( false, false, false )  + " ) : " + formatNodePosition ( n ) ;^[CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback  [METHOD] formatNodeContext [RETURN_TYPE] String   String label Node n [VARIABLES] ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  
[BugLab_Wrong_Operator]^return "  >=  " + label + " ( " + n.toString ( false, false, false )  + " ) : " + formatNodePosition ( n ) ;^241^242^^^^237^243^return "  " + label + " ( " + n.toString ( false, false, false )  + " ) : " + formatNodePosition ( n ) ;^[CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback  [METHOD] formatNodeContext [RETURN_TYPE] String   String label Node n [VARIABLES] ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  
[BugLab_Wrong_Operator]^return "  !=  " + label + " ( " + n.toString ( false, false, false )  + " ) : " + formatNodePosition ( n ) ;^241^242^^^^237^243^return "  " + label + " ( " + n.toString ( false, false, false )  + " ) : " + formatNodePosition ( n ) ;^[CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback  [METHOD] formatNodeContext [RETURN_TYPE] String   String label Node n [VARIABLES] ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  
[BugLab_Wrong_Operator]^return "  ==  " + label + " ( " + n.toString ( false, false, false )  + " ) : " + formatNodePosition ( n ) ;^241^242^^^^237^243^return "  " + label + " ( " + n.toString ( false, false, false )  + " ) : " + formatNodePosition ( n ) ;^[CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback  [METHOD] formatNodeContext [RETURN_TYPE] String   String label Node n [VARIABLES] ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  
[BugLab_Wrong_Operator]^return "  "  ^  label  ^  " ( " + n.toString ( false, false, false )  + " ) : " + formatNodePosition ( n ) ;^241^242^^^^237^243^return "  " + label + " ( " + n.toString ( false, false, false )  + " ) : " + formatNodePosition ( n ) ;^[CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback  [METHOD] formatNodeContext [RETURN_TYPE] String   String label Node n [VARIABLES] ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  
[BugLab_Wrong_Operator]^return "  "  >  label + " ( " + n.toString ( false, false, false )  + " ) : " + formatNodePosition ( n ) ;^241^242^^^^237^243^return "  " + label + " ( " + n.toString ( false, false, false )  + " ) : " + formatNodePosition ( n ) ;^[CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback  [METHOD] formatNodeContext [RETURN_TYPE] String   String label Node n [VARIABLES] ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  
[BugLab_Wrong_Literal]^return "  " + label + " ( " + n.toString ( true, true, true )  + " ) : " + formatNodePosition ( n ) ;^241^242^^^^237^243^return "  " + label + " ( " + n.toString ( false, false, false )  + " ) : " + formatNodePosition ( n ) ;^[CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback  [METHOD] formatNodeContext [RETURN_TYPE] String   String label Node n [VARIABLES] ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  
[BugLab_Variable_Misuse]^+ formatNodePosition ( parent ) ;^242^^^^^237^243^+ formatNodePosition ( n ) ;^[CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback  [METHOD] formatNodeContext [RETURN_TYPE] String   String label Node n [VARIABLES] ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  
[BugLab_Variable_Misuse]^curNode = parent;^251^^^^^248^258^curNode = root;^[CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback  [METHOD] traverse [RETURN_TYPE] void   Node root [VARIABLES] ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  
[BugLab_Variable_Misuse]^pushScope ( parent ) ;^252^^^^^248^258^pushScope ( root ) ;^[CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback  [METHOD] traverse [RETURN_TYPE] void   Node root [VARIABLES] ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  
[BugLab_Variable_Misuse]^traverseBranch ( parent, null ) ;^253^^^^^248^258^traverseBranch ( root, null ) ;^[CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback  [METHOD] traverse [RETURN_TYPE] void   Node root [VARIABLES] ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  
[BugLab_Variable_Misuse]^if  ( 4.isEmpty (  )  )  {^265^^^^^264^286^if  ( roots.isEmpty (  )  )  {^[CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback  [METHOD] traverseRoots [RETURN_TYPE] void   Node> roots [VARIABLES] ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  scopeRoot  ScopeCreator  scopeCreator  List  roots  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  
[BugLab_Variable_Misuse]^curNode = root;^274^^^^^264^286^curNode = scopeRoot;^[CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback  [METHOD] traverseRoots [RETURN_TYPE] void   Node> roots [VARIABLES] ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  scopeRoot  ScopeCreator  scopeCreator  List  roots  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  
[BugLab_Wrong_Literal]^Node scopeRoot = roots.get ( 1 ) .getParent (  ) ;^270^^^^^264^286^Node scopeRoot = roots.get ( 0 ) .getParent (  ) ;^[CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback  [METHOD] traverseRoots [RETURN_TYPE] void   Node> roots [VARIABLES] ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  scopeRoot  ScopeCreator  scopeCreator  List  roots  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  
[BugLab_Variable_Misuse]^Node scopeRoot = 3.get ( 0 ) .getParent (  ) ;^270^^^^^264^286^Node scopeRoot = roots.get ( 0 ) .getParent (  ) ;^[CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback  [METHOD] traverseRoots [RETURN_TYPE] void   Node> roots [VARIABLES] ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  scopeRoot  ScopeCreator  scopeCreator  List  roots  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  
[BugLab_Wrong_Literal]^Node scopeRoot = roots.get ( -1 ) .getParent (  ) ;^270^^^^^264^286^Node scopeRoot = roots.get ( 0 ) .getParent (  ) ;^[CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback  [METHOD] traverseRoots [RETURN_TYPE] void   Node> roots [VARIABLES] ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  scopeRoot  ScopeCreator  scopeCreator  List  roots  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  
[BugLab_Variable_Misuse]^Preconditions.checkState ( root != null ) ;^271^^^^^264^286^Preconditions.checkState ( scopeRoot != null ) ;^[CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback  [METHOD] traverseRoots [RETURN_TYPE] void   Node> roots [VARIABLES] ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  scopeRoot  ScopeCreator  scopeCreator  List  roots  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  
[BugLab_Wrong_Operator]^Preconditions.checkState ( scopeRoot == null ) ;^271^^^^^264^286^Preconditions.checkState ( scopeRoot != null ) ;^[CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback  [METHOD] traverseRoots [RETURN_TYPE] void   Node> roots [VARIABLES] ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  scopeRoot  ScopeCreator  scopeCreator  List  roots  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  
[BugLab_Variable_Misuse]^pushScope ( root ) ;^275^^^^^264^286^pushScope ( scopeRoot ) ;^[CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback  [METHOD] traverseRoots [RETURN_TYPE] void   Node> roots [VARIABLES] ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  scopeRoot  ScopeCreator  scopeCreator  List  roots  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  
[BugLab_Variable_Misuse]^Preconditions.checkState ( parent.getParent (  )  == scopeRoot ) ;^278^^^^^264^286^Preconditions.checkState ( root.getParent (  )  == scopeRoot ) ;^[CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback  [METHOD] traverseRoots [RETURN_TYPE] void   Node> roots [VARIABLES] ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  scopeRoot  ScopeCreator  scopeCreator  List  roots  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  
[BugLab_Variable_Misuse]^Preconditions.checkState ( root.getParent (  )  == parent ) ;^278^^^^^264^286^Preconditions.checkState ( root.getParent (  )  == scopeRoot ) ;^[CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback  [METHOD] traverseRoots [RETURN_TYPE] void   Node> roots [VARIABLES] ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  scopeRoot  ScopeCreator  scopeCreator  List  roots  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  
[BugLab_Argument_Swapping]^Preconditions.checkState ( scopeRoot.getParent (  )  == root ) ;^278^^^^^264^286^Preconditions.checkState ( root.getParent (  )  == scopeRoot ) ;^[CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback  [METHOD] traverseRoots [RETURN_TYPE] void   Node> roots [VARIABLES] ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  scopeRoot  ScopeCreator  scopeCreator  List  roots  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  
[BugLab_Wrong_Operator]^Preconditions.checkState ( root.getParent (  )  != scopeRoot ) ;^278^^^^^264^286^Preconditions.checkState ( root.getParent (  )  == scopeRoot ) ;^[CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback  [METHOD] traverseRoots [RETURN_TYPE] void   Node> roots [VARIABLES] ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  scopeRoot  ScopeCreator  scopeCreator  List  roots  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  
[BugLab_Variable_Misuse]^Preconditions.checkState ( scopeRoot.getParent (  )  == scopeRoot ) ;^278^^^^^264^286^Preconditions.checkState ( root.getParent (  )  == scopeRoot ) ;^[CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback  [METHOD] traverseRoots [RETURN_TYPE] void   Node> roots [VARIABLES] ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  scopeRoot  ScopeCreator  scopeCreator  List  roots  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  
[BugLab_Variable_Misuse]^traverseBranch ( root, parent ) ;^279^^^^^264^286^traverseBranch ( root, scopeRoot ) ;^[CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback  [METHOD] traverseRoots [RETURN_TYPE] void   Node> roots [VARIABLES] ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  scopeRoot  ScopeCreator  scopeCreator  List  roots  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  
[BugLab_Argument_Swapping]^traverseBranch ( scopeRoot, root ) ;^279^^^^^264^286^traverseBranch ( root, scopeRoot ) ;^[CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback  [METHOD] traverseRoots [RETURN_TYPE] void   Node> roots [VARIABLES] ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  scopeRoot  ScopeCreator  scopeCreator  List  roots  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  
[BugLab_Variable_Misuse]^Preconditions.checkState ( parent != null ) ;^271^^^^^264^286^Preconditions.checkState ( scopeRoot != null ) ;^[CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback  [METHOD] traverseRoots [RETURN_TYPE] void   Node> roots [VARIABLES] ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  scopeRoot  ScopeCreator  scopeCreator  List  roots  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  
[BugLab_Variable_Misuse]^pushScope ( parent ) ;^275^^^^^264^286^pushScope ( scopeRoot ) ;^[CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback  [METHOD] traverseRoots [RETURN_TYPE] void   Node> roots [VARIABLES] ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  scopeRoot  ScopeCreator  scopeCreator  List  roots  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  
[BugLab_Variable_Misuse]^traverseBranch ( parent, scopeRoot ) ;^279^^^^^264^286^traverseBranch ( root, scopeRoot ) ;^[CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback  [METHOD] traverseRoots [RETURN_TYPE] void   Node> roots [VARIABLES] ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  scopeRoot  ScopeCreator  scopeCreator  List  roots  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  
[BugLab_Variable_Misuse]^if  ( scopeRoot == null )  {^291^^^^^290^303^if  ( n == null )  {^[CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback  [METHOD] formatNodePosition [RETURN_TYPE] String   Node n [VARIABLES] ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  scopeRoot  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  src  Deque  cfgs  scopeRoots  scopes  int  columnNumber  lineNumber  
[BugLab_Wrong_Operator]^if  ( n != null )  {^291^^^^^290^303^if  ( n == null )  {^[CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback  [METHOD] formatNodePosition [RETURN_TYPE] String   Node n [VARIABLES] ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  scopeRoot  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  src  Deque  cfgs  scopeRoots  scopes  int  columnNumber  lineNumber  
[BugLab_Variable_Misuse]^return sourceName + "\n";^292^^^^^290^303^return MISSING_SOURCE + "\n";^[CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback  [METHOD] formatNodePosition [RETURN_TYPE] String   Node n [VARIABLES] ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  scopeRoot  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  src  Deque  cfgs  scopeRoots  scopes  int  columnNumber  lineNumber  
[BugLab_Variable_Misuse]^return src + "\n";^292^^^^^290^303^return MISSING_SOURCE + "\n";^[CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback  [METHOD] formatNodePosition [RETURN_TYPE] String   Node n [VARIABLES] ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  scopeRoot  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  src  Deque  cfgs  scopeRoots  scopes  int  columnNumber  lineNumber  
[BugLab_Variable_Misuse]^int lineNumber = scopeRoot.getLineno (  ) ;^295^^^^^290^303^int lineNumber = n.getLineno (  ) ;^[CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback  [METHOD] formatNodePosition [RETURN_TYPE] String   Node n [VARIABLES] ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  scopeRoot  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  src  Deque  cfgs  scopeRoots  scopes  int  columnNumber  lineNumber  
[BugLab_Variable_Misuse]^int columnNumber = scopeRoot.getCharno (  ) ;^296^^^^^290^303^int columnNumber = n.getCharno (  ) ;^[CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback  [METHOD] formatNodePosition [RETURN_TYPE] String   Node n [VARIABLES] ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  scopeRoot  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  src  Deque  cfgs  scopeRoots  scopes  int  columnNumber  lineNumber  
[BugLab_Variable_Misuse]^String src = compiler.getSourceLine ( sourceName, columnNumber ) ;^297^^^^^290^303^String src = compiler.getSourceLine ( sourceName, lineNumber ) ;^[CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback  [METHOD] formatNodePosition [RETURN_TYPE] String   Node n [VARIABLES] ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  scopeRoot  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  src  Deque  cfgs  scopeRoots  scopes  int  columnNumber  lineNumber  
[BugLab_Variable_Misuse]^String src = compiler.getSourceLine ( message, lineNumber ) ;^297^^^^^290^303^String src = compiler.getSourceLine ( sourceName, lineNumber ) ;^[CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback  [METHOD] formatNodePosition [RETURN_TYPE] String   Node n [VARIABLES] ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  scopeRoot  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  src  Deque  cfgs  scopeRoots  scopes  int  columnNumber  lineNumber  
[BugLab_Argument_Swapping]^String src = compiler.getSourceLine ( lineNumber, sourceName ) ;^297^^^^^290^303^String src = compiler.getSourceLine ( sourceName, lineNumber ) ;^[CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback  [METHOD] formatNodePosition [RETURN_TYPE] String   Node n [VARIABLES] ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  scopeRoot  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  src  Deque  cfgs  scopeRoots  scopes  int  columnNumber  lineNumber  
[BugLab_Argument_Swapping]^String src = sourceName.getSourceLine ( compiler, lineNumber ) ;^297^^^^^290^303^String src = compiler.getSourceLine ( sourceName, lineNumber ) ;^[CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback  [METHOD] formatNodePosition [RETURN_TYPE] String   Node n [VARIABLES] ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  scopeRoot  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  src  Deque  cfgs  scopeRoots  scopes  int  columnNumber  lineNumber  
[BugLab_Argument_Swapping]^String src = lineNumber.getSourceLine ( sourceName, compiler ) ;^297^^^^^290^303^String src = compiler.getSourceLine ( sourceName, lineNumber ) ;^[CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback  [METHOD] formatNodePosition [RETURN_TYPE] String   Node n [VARIABLES] ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  scopeRoot  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  src  Deque  cfgs  scopeRoots  scopes  int  columnNumber  lineNumber  
[BugLab_Wrong_Operator]^if  ( src != null )  {^298^^^^^290^303^if  ( src == null )  {^[CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback  [METHOD] formatNodePosition [RETURN_TYPE] String   Node n [VARIABLES] ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  scopeRoot  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  src  Deque  cfgs  scopeRoots  scopes  int  columnNumber  lineNumber  
[BugLab_Variable_Misuse]^src = src;^299^^^^^290^303^src = MISSING_SOURCE;^[CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback  [METHOD] formatNodePosition [RETURN_TYPE] String   Node n [VARIABLES] ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  scopeRoot  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  src  Deque  cfgs  scopeRoots  scopes  int  columnNumber  lineNumber  
[BugLab_Variable_Misuse]^return sourceName + ":" + columnNumber + ":" + columnNumber + "\n" + src + "\n";^301^302^^^^290^303^return sourceName + ":" + lineNumber + ":" + columnNumber + "\n" + src + "\n";^[CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback  [METHOD] formatNodePosition [RETURN_TYPE] String   Node n [VARIABLES] ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  scopeRoot  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  src  Deque  cfgs  scopeRoots  scopes  int  columnNumber  lineNumber  
[BugLab_Variable_Misuse]^return sourceName + ":" + lineNumber + ":" + columnNumber + "\n" + message + "\n";^301^302^^^^290^303^return sourceName + ":" + lineNumber + ":" + columnNumber + "\n" + src + "\n";^[CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback  [METHOD] formatNodePosition [RETURN_TYPE] String   Node n [VARIABLES] ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  scopeRoot  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  src  Deque  cfgs  scopeRoots  scopes  int  columnNumber  lineNumber  
[BugLab_Variable_Misuse]^return src + ":" + lineNumber + ":" + columnNumber + "\n" + src + "\n";^301^302^^^^290^303^return sourceName + ":" + lineNumber + ":" + columnNumber + "\n" + src + "\n";^[CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback  [METHOD] formatNodePosition [RETURN_TYPE] String   Node n [VARIABLES] ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  scopeRoot  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  src  Deque  cfgs  scopeRoots  scopes  int  columnNumber  lineNumber  
[BugLab_Argument_Swapping]^return sourceName + ":" + columnNumber + ":" + lineNumber + "\n" + src + "\n";^301^302^^^^290^303^return sourceName + ":" + lineNumber + ":" + columnNumber + "\n" + src + "\n";^[CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback  [METHOD] formatNodePosition [RETURN_TYPE] String   Node n [VARIABLES] ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  scopeRoot  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  src  Deque  cfgs  scopeRoots  scopes  int  columnNumber  lineNumber  
[BugLab_Argument_Swapping]^return columnNumber + ":" + lineNumber + ":" + sourceName + "\n" + src + "\n";^301^302^^^^290^303^return sourceName + ":" + lineNumber + ":" + columnNumber + "\n" + src + "\n";^[CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback  [METHOD] formatNodePosition [RETURN_TYPE] String   Node n [VARIABLES] ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  scopeRoot  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  src  Deque  cfgs  scopeRoots  scopes  int  columnNumber  lineNumber  
[BugLab_Argument_Swapping]^return sourceName + ":" + lineNumber + ":" + src + "\n" + columnNumber + "\n";^301^302^^^^290^303^return sourceName + ":" + lineNumber + ":" + columnNumber + "\n" + src + "\n";^[CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback  [METHOD] formatNodePosition [RETURN_TYPE] String   Node n [VARIABLES] ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  scopeRoot  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  src  Deque  cfgs  scopeRoots  scopes  int  columnNumber  lineNumber  
[BugLab_Argument_Swapping]^return lineNumber + ":" + sourceName + ":" + columnNumber + "\n" + src + "\n";^301^302^^^^290^303^return sourceName + ":" + lineNumber + ":" + columnNumber + "\n" + src + "\n";^[CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback  [METHOD] formatNodePosition [RETURN_TYPE] String   Node n [VARIABLES] ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  scopeRoot  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  src  Deque  cfgs  scopeRoots  scopes  int  columnNumber  lineNumber  
[BugLab_Wrong_Operator]^return sourceName   instanceof   ":" + lineNumber + ":" + columnNumber + "\n" + src + "\n";^301^302^^^^290^303^return sourceName + ":" + lineNumber + ":" + columnNumber + "\n" + src + "\n";^[CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback  [METHOD] formatNodePosition [RETURN_TYPE] String   Node n [VARIABLES] ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  scopeRoot  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  src  Deque  cfgs  scopeRoots  scopes  int  columnNumber  lineNumber  
[BugLab_Variable_Misuse]^curNode = scopeRoot;^314^^^^^310^318^curNode = root;^[CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback  [METHOD] traverseWithScope [RETURN_TYPE] void   Node root Scope s [VARIABLES] ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  Scope  s  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  scopeRoot  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  src  Deque  cfgs  scopeRoots  scopes  
[BugLab_Variable_Misuse]^traverseBranch ( parent, null ) ;^316^^^^^310^318^traverseBranch ( root, null ) ;^[CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback  [METHOD] traverseWithScope [RETURN_TYPE] void   Node root Scope s [VARIABLES] ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  Scope  s  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  scopeRoot  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  src  Deque  cfgs  scopeRoots  scopes  
[BugLab_Variable_Misuse]^if  ( root.getType (  )  == Token.FUNCTION )  {^326^^^^^324^342^if  ( n.getType (  )  == Token.FUNCTION )  {^[CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback  [METHOD] traverseAtScope [RETURN_TYPE] void   Scope s [VARIABLES] ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  Scope  s  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  args  body  curNode  n  parent  root  scopeRoot  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  src  Deque  cfgs  scopeRoots  scopes  
[BugLab_Wrong_Operator]^if  ( n.getType (  )  != Token.FUNCTION )  {^326^^^^^324^342^if  ( n.getType (  )  == Token.FUNCTION )  {^[CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback  [METHOD] traverseAtScope [RETURN_TYPE] void   Scope s [VARIABLES] ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  Scope  s  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  args  body  curNode  n  parent  root  scopeRoot  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  src  Deque  cfgs  scopeRoots  scopes  
[BugLab_Variable_Misuse]^traverseWithScope ( root, s ) ;^340^^^^^324^342^traverseWithScope ( n, s ) ;^[CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback  [METHOD] traverseAtScope [RETURN_TYPE] void   Scope s [VARIABLES] ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  Scope  s  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  args  body  curNode  n  parent  root  scopeRoot  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  src  Deque  cfgs  scopeRoots  scopes  
[BugLab_Argument_Swapping]^traverseWithScope ( s, n ) ;^340^^^^^324^342^traverseWithScope ( n, s ) ;^[CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback  [METHOD] traverseAtScope [RETURN_TYPE] void   Scope s [VARIABLES] ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  Scope  s  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  args  body  curNode  n  parent  root  scopeRoot  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  src  Deque  cfgs  scopeRoots  scopes  
[BugLab_Variable_Misuse]^sourceName = getSourceName ( parent ) ;^329^^^^^324^342^sourceName = getSourceName ( n ) ;^[CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback  [METHOD] traverseAtScope [RETURN_TYPE] void   Scope s [VARIABLES] ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  Scope  s  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  args  body  curNode  n  parent  root  scopeRoot  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  src  Deque  cfgs  scopeRoots  scopes  
[BugLab_Variable_Misuse]^curNode = scopeRoot;^330^^^^^324^342^curNode = n;^[CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback  [METHOD] traverseAtScope [RETURN_TYPE] void   Scope s [VARIABLES] ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  Scope  s  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  args  body  curNode  n  parent  root  scopeRoot  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  src  Deque  cfgs  scopeRoots  scopes  
[BugLab_Variable_Misuse]^Node args = root.getFirstChild (  ) .getNext (  ) ;^333^^^^^324^342^Node args = n.getFirstChild (  ) .getNext (  ) ;^[CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback  [METHOD] traverseAtScope [RETURN_TYPE] void   Scope s [VARIABLES] ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  Scope  s  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  args  body  curNode  n  parent  root  scopeRoot  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  src  Deque  cfgs  scopeRoots  scopes  
[BugLab_Variable_Misuse]^Node body = root.getNext (  ) ;^334^^^^^324^342^Node body = args.getNext (  ) ;^[CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback  [METHOD] traverseAtScope [RETURN_TYPE] void   Scope s [VARIABLES] ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  Scope  s  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  args  body  curNode  n  parent  root  scopeRoot  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  src  Deque  cfgs  scopeRoots  scopes  
[BugLab_Variable_Misuse]^sourceName = getSourceName ( root ) ;^329^^^^^324^342^sourceName = getSourceName ( n ) ;^[CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback  [METHOD] traverseAtScope [RETURN_TYPE] void   Scope s [VARIABLES] ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  Scope  s  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  args  body  curNode  n  parent  root  scopeRoot  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  src  Deque  cfgs  scopeRoots  scopes  
[BugLab_Variable_Misuse]^Node args = scopeRoot.getFirstChild (  ) .getNext (  ) ;^333^^^^^324^342^Node args = n.getFirstChild (  ) .getNext (  ) ;^[CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback  [METHOD] traverseAtScope [RETURN_TYPE] void   Scope s [VARIABLES] ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  Scope  s  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  args  body  curNode  n  parent  root  scopeRoot  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  src  Deque  cfgs  scopeRoots  scopes  
[BugLab_Variable_Misuse]^Node body = scopeRoot.getNext (  ) ;^334^^^^^324^342^Node body = args.getNext (  ) ;^[CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback  [METHOD] traverseAtScope [RETURN_TYPE] void   Scope s [VARIABLES] ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  Scope  s  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  args  body  curNode  n  parent  root  scopeRoot  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  src  Deque  cfgs  scopeRoots  scopes  
[BugLab_Variable_Misuse]^traverseBranch ( root, n ) ;^335^^^^^324^342^traverseBranch ( args, n ) ;^[CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback  [METHOD] traverseAtScope [RETURN_TYPE] void   Scope s [VARIABLES] ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  Scope  s  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  args  body  curNode  n  parent  root  scopeRoot  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  src  Deque  cfgs  scopeRoots  scopes  
[BugLab_Variable_Misuse]^traverseBranch ( args, scopeRoot ) ;^335^^^^^324^342^traverseBranch ( args, n ) ;^[CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback  [METHOD] traverseAtScope [RETURN_TYPE] void   Scope s [VARIABLES] ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  Scope  s  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  args  body  curNode  n  parent  root  scopeRoot  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  src  Deque  cfgs  scopeRoots  scopes  
[BugLab_Argument_Swapping]^traverseBranch ( n, args ) ;^335^^^^^324^342^traverseBranch ( args, n ) ;^[CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback  [METHOD] traverseAtScope [RETURN_TYPE] void   Scope s [VARIABLES] ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  Scope  s  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  args  body  curNode  n  parent  root  scopeRoot  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  src  Deque  cfgs  scopeRoots  scopes  
[BugLab_Variable_Misuse]^traverseBranch ( body, scopeRoot ) ;^336^^^^^324^342^traverseBranch ( body, n ) ;^[CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback  [METHOD] traverseAtScope [RETURN_TYPE] void   Scope s [VARIABLES] ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  Scope  s  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  args  body  curNode  n  parent  root  scopeRoot  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  src  Deque  cfgs  scopeRoots  scopes  
[BugLab_Argument_Swapping]^traverseBranch ( n, body ) ;^336^^^^^324^342^traverseBranch ( body, n ) ;^[CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback  [METHOD] traverseAtScope [RETURN_TYPE] void   Scope s [VARIABLES] ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  Scope  s  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  args  body  curNode  n  parent  root  scopeRoot  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  src  Deque  cfgs  scopeRoots  scopes  
[BugLab_Variable_Misuse]^if  ( scopeRoot.getType (  )  == Token.FUNCTION )  {^326^^^^^324^342^if  ( n.getType (  )  == Token.FUNCTION )  {^[CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback  [METHOD] traverseAtScope [RETURN_TYPE] void   Scope s [VARIABLES] ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  Scope  s  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  args  body  curNode  n  parent  root  scopeRoot  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  src  Deque  cfgs  scopeRoots  scopes  
[BugLab_Variable_Misuse]^Preconditions.checkNotNull ( node ) ;^355^^^^^354^364^Preconditions.checkNotNull ( parent ) ;^[CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback  [METHOD] traverseInnerNode [RETURN_TYPE] void   Node node Node parent Scope refinedScope [VARIABLES] ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  Scope  refinedScope  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  args  body  curNode  n  node  parent  root  scopeRoot  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  src  Deque  cfgs  scopeRoots  scopes  
[BugLab_Wrong_Operator]^if  ( refinedScope != null || getScope (  )  != refinedScope )  {^356^^^^^354^364^if  ( refinedScope != null && getScope (  )  != refinedScope )  {^[CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback  [METHOD] traverseInnerNode [RETURN_TYPE] void   Node node Node parent Scope refinedScope [VARIABLES] ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  Scope  refinedScope  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  args  body  curNode  n  node  parent  root  scopeRoot  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  src  Deque  cfgs  scopeRoots  scopes  
[BugLab_Wrong_Operator]^if  ( refinedScope == null && getScope (  )  != refinedScope )  {^356^^^^^354^364^if  ( refinedScope != null && getScope (  )  != refinedScope )  {^[CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback  [METHOD] traverseInnerNode [RETURN_TYPE] void   Node node Node parent Scope refinedScope [VARIABLES] ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  Scope  refinedScope  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  args  body  curNode  n  node  parent  root  scopeRoot  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  src  Deque  cfgs  scopeRoots  scopes  
[BugLab_Wrong_Operator]^if  ( refinedScope != null && getScope (  )  == refinedScope )  {^356^^^^^354^364^if  ( refinedScope != null && getScope (  )  != refinedScope )  {^[CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback  [METHOD] traverseInnerNode [RETURN_TYPE] void   Node node Node parent Scope refinedScope [VARIABLES] ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  Scope  refinedScope  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  args  body  curNode  n  node  parent  root  scopeRoot  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  src  Deque  cfgs  scopeRoots  scopes  
[BugLab_Variable_Misuse]^traverseBranch ( scopeRoot, parent ) ;^362^^^^^354^364^traverseBranch ( node, parent ) ;^[CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback  [METHOD] traverseInnerNode [RETURN_TYPE] void   Node node Node parent Scope refinedScope [VARIABLES] ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  Scope  refinedScope  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  args  body  curNode  n  node  parent  root  scopeRoot  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  src  Deque  cfgs  scopeRoots  scopes  
[BugLab_Variable_Misuse]^traverseBranch ( node, scopeRoot ) ;^362^^^^^354^364^traverseBranch ( node, parent ) ;^[CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback  [METHOD] traverseInnerNode [RETURN_TYPE] void   Node node Node parent Scope refinedScope [VARIABLES] ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  Scope  refinedScope  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  args  body  curNode  n  node  parent  root  scopeRoot  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  src  Deque  cfgs  scopeRoots  scopes  
[BugLab_Argument_Swapping]^traverseBranch ( parent, node ) ;^362^^^^^354^364^traverseBranch ( node, parent ) ;^[CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback  [METHOD] traverseInnerNode [RETURN_TYPE] void   Node node Node parent Scope refinedScope [VARIABLES] ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  Scope  refinedScope  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  args  body  curNode  n  node  parent  root  scopeRoot  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  src  Deque  cfgs  scopeRoots  scopes  
[BugLab_Variable_Misuse]^curNode = scopeRoot;^357^^^^^354^364^curNode = node;^[CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback  [METHOD] traverseInnerNode [RETURN_TYPE] void   Node node Node parent Scope refinedScope [VARIABLES] ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  Scope  refinedScope  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  args  body  curNode  n  node  parent  root  scopeRoot  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  src  Deque  cfgs  scopeRoots  scopes  
[BugLab_Variable_Misuse]^traverseBranch ( root, parent ) ;^359^^^^^354^364^traverseBranch ( node, parent ) ;^[CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback  [METHOD] traverseInnerNode [RETURN_TYPE] void   Node node Node parent Scope refinedScope [VARIABLES] ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  Scope  refinedScope  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  args  body  curNode  n  node  parent  root  scopeRoot  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  src  Deque  cfgs  scopeRoots  scopes  
[BugLab_Variable_Misuse]^traverseBranch ( node, scopeRoot ) ;^359^^^^^354^364^traverseBranch ( node, parent ) ;^[CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback  [METHOD] traverseInnerNode [RETURN_TYPE] void   Node node Node parent Scope refinedScope [VARIABLES] ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  Scope  refinedScope  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  args  body  curNode  n  node  parent  root  scopeRoot  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  src  Deque  cfgs  scopeRoots  scopes  
[BugLab_Argument_Swapping]^traverseBranch ( parent, node ) ;^359^^^^^354^364^traverseBranch ( node, parent ) ;^[CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback  [METHOD] traverseInnerNode [RETURN_TYPE] void   Node node Node parent Scope refinedScope [VARIABLES] ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  Scope  refinedScope  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  args  body  curNode  n  node  parent  root  scopeRoot  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  src  Deque  cfgs  scopeRoots  scopes  
[BugLab_Variable_Misuse]^traverseBranch ( scopeRoot, parent ) ;^359^^^^^354^364^traverseBranch ( node, parent ) ;^[CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback  [METHOD] traverseInnerNode [RETURN_TYPE] void   Node node Node parent Scope refinedScope [VARIABLES] ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  Scope  refinedScope  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  args  body  curNode  n  node  parent  root  scopeRoot  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  src  Deque  cfgs  scopeRoots  scopes  
[BugLab_Variable_Misuse]^while  ( parent != null )  {^381^^^^^379^389^while  ( cur != null )  {^[CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback  [METHOD] getLineNumber [RETURN_TYPE] int   [VARIABLES] ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  args  body  cur  curNode  n  node  parent  root  scopeRoot  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  src  Deque  cfgs  scopeRoots  scopes  int  line  
[BugLab_Wrong_Operator]^while  ( cur == null )  {^381^^^^^379^389^while  ( cur != null )  {^[CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback  [METHOD] getLineNumber [RETURN_TYPE] int   [VARIABLES] ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  args  body  cur  curNode  n  node  parent  root  scopeRoot  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  src  Deque  cfgs  scopeRoots  scopes  int  line  
[BugLab_Wrong_Literal]^if  ( line >=line )  {^383^^^^^379^389^if  ( line >=0 )  {^[CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback  [METHOD] getLineNumber [RETURN_TYPE] int   [VARIABLES] ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  args  body  cur  curNode  n  node  parent  root  scopeRoot  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  src  Deque  cfgs  scopeRoots  scopes  int  line  
[BugLab_Variable_Misuse]^cur = node.getParent (  ) ;^386^^^^^379^389^cur = cur.getParent (  ) ;^[CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback  [METHOD] getLineNumber [RETURN_TYPE] int   [VARIABLES] ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  args  body  cur  curNode  n  node  parent  root  scopeRoot  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  src  Deque  cfgs  scopeRoots  scopes  int  line  
[BugLab_Variable_Misuse]^int line = node.getLineno (  ) ;^382^^^^^379^389^int line = cur.getLineno (  ) ;^[CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback  [METHOD] getLineNumber [RETURN_TYPE] int   [VARIABLES] ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  args  body  cur  curNode  n  node  parent  root  scopeRoot  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  src  Deque  cfgs  scopeRoots  scopes  int  line  
[BugLab_Variable_Misuse]^int line = scopeRoot.getLineno (  ) ;^382^^^^^379^389^int line = cur.getLineno (  ) ;^[CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback  [METHOD] getLineNumber [RETURN_TYPE] int   [VARIABLES] ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  args  body  cur  curNode  n  node  parent  root  scopeRoot  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  src  Deque  cfgs  scopeRoots  scopes  int  line  
[BugLab_Wrong_Literal]^if  ( line >=1 )  {^383^^^^^379^389^if  ( line >=0 )  {^[CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback  [METHOD] getLineNumber [RETURN_TYPE] int   [VARIABLES] ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  args  body  cur  curNode  n  node  parent  root  scopeRoot  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  src  Deque  cfgs  scopeRoots  scopes  int  line  
[BugLab_Variable_Misuse]^cur = parent.getParent (  ) ;^386^^^^^379^389^cur = cur.getParent (  ) ;^[CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback  [METHOD] getLineNumber [RETURN_TYPE] int   [VARIABLES] ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  args  body  cur  curNode  n  node  parent  root  scopeRoot  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  src  Deque  cfgs  scopeRoots  scopes  int  line  
[BugLab_Wrong_Literal]^return line;^388^^^^^379^389^return 0;^[CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback  [METHOD] getLineNumber [RETURN_TYPE] int   [VARIABLES] ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  args  body  cur  curNode  n  node  parent  root  scopeRoot  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  src  Deque  cfgs  scopeRoots  scopes  int  line  
[BugLab_Variable_Misuse]^return src;^397^^^^^396^398^return sourceName;^[CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback  [METHOD] getSourceName [RETURN_TYPE] String   [VARIABLES] ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  args  body  cur  curNode  n  node  parent  root  scopeRoot  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  src  Deque  cfgs  scopeRoots  scopes  
[BugLab_Variable_Misuse]^return compiler.getInput ( message ) ;^404^^^^^403^405^return compiler.getInput ( sourceName ) ;^[CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback  [METHOD] getInput [RETURN_TYPE] CompilerInput   [VARIABLES] ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  args  body  cur  curNode  n  node  parent  root  scopeRoot  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  src  Deque  cfgs  scopeRoots  scopes  
[BugLab_Argument_Swapping]^return sourceName.getInput ( compiler ) ;^404^^^^^403^405^return compiler.getInput ( sourceName ) ;^[CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback  [METHOD] getInput [RETURN_TYPE] CompilerInput   [VARIABLES] ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  args  body  cur  curNode  n  node  parent  root  scopeRoot  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  src  Deque  cfgs  scopeRoots  scopes  
[BugLab_Variable_Misuse]^return compiler.getInput ( src ) ;^404^^^^^403^405^return compiler.getInput ( sourceName ) ;^[CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback  [METHOD] getInput [RETURN_TYPE] CompilerInput   [VARIABLES] ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  args  body  cur  curNode  n  node  parent  root  scopeRoot  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  src  Deque  cfgs  scopeRoots  scopes  
[BugLab_Wrong_Operator]^return input != null ? null : input.getModule (  ) ;^412^^^^^410^413^return input == null ? null : input.getModule (  ) ;^[CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback  [METHOD] getModule [RETURN_TYPE] JSModule   [VARIABLES] ScopedCallback  scopeCallback  AbstractCompiler  compiler  CompilerInput  input  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  args  body  cur  curNode  n  node  parent  root  scopeRoot  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  src  Deque  cfgs  scopeRoots  scopes  
[BugLab_Variable_Misuse]^return scopeRoot;^417^^^^^416^418^return curNode;^[CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback  [METHOD] getCurrentNode [RETURN_TYPE] Node   [VARIABLES] ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  args  body  cur  curNode  n  node  parent  root  scopeRoot  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  src  Deque  cfgs  scopeRoots  scopes  
[BugLab_Variable_Misuse]^NodeTraversal t = new NodeTraversal ( compiler, callback ) ;^425^^^^^423^427^NodeTraversal t = new NodeTraversal ( compiler, cb ) ;^[CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback  [METHOD] traverse [RETURN_TYPE] void   AbstractCompiler compiler Node root Callback cb [VARIABLES] ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  NodeTraversal  t  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  args  body  cur  curNode  n  node  parent  root  scopeRoot  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  src  Deque  cfgs  scopeRoots  scopes  
[BugLab_Argument_Swapping]^NodeTraversal t = new NodeTraversal ( cb, compiler ) ;^425^^^^^423^427^NodeTraversal t = new NodeTraversal ( compiler, cb ) ;^[CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback  [METHOD] traverse [RETURN_TYPE] void   AbstractCompiler compiler Node root Callback cb [VARIABLES] ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  NodeTraversal  t  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  args  body  cur  curNode  n  node  parent  root  scopeRoot  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  src  Deque  cfgs  scopeRoots  scopes  
[BugLab_Argument_Swapping]^NodeTraversal t = new NodeTraversal ( cb, compiler ) ;^434^^^^^432^436^NodeTraversal t = new NodeTraversal ( compiler, cb ) ;^[CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback  [METHOD] traverseRoots [RETURN_TYPE] void   AbstractCompiler compiler Node> roots Callback cb [VARIABLES] ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  NodeTraversal  t  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  args  body  cur  curNode  n  node  parent  root  scopeRoot  ScopeCreator  scopeCreator  List  roots  String  MISSING_SOURCE  label  message  sourceName  src  Deque  cfgs  scopeRoots  scopes  
[BugLab_Variable_Misuse]^NodeTraversal t = new NodeTraversal ( compiler, callback ) ;^434^^^^^432^436^NodeTraversal t = new NodeTraversal ( compiler, cb ) ;^[CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback  [METHOD] traverseRoots [RETURN_TYPE] void   AbstractCompiler compiler Node> roots Callback cb [VARIABLES] ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  NodeTraversal  t  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  args  body  cur  curNode  n  node  parent  root  scopeRoot  ScopeCreator  scopeCreator  List  roots  String  MISSING_SOURCE  label  message  sourceName  src  Deque  cfgs  scopeRoots  scopes  
[BugLab_Variable_Misuse]^int type = parent.getType (  ) ;^443^^^^^428^458^int type = n.getType (  ) ;^[CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback  [METHOD] traverseBranch [RETURN_TYPE] void   Node n Node parent [VARIABLES] ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  args  body  child  cur  curNode  n  next  node  parent  root  scopeRoot  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  src  Deque  cfgs  scopeRoots  scopes  int  type  
[BugLab_Variable_Misuse]^int type = node.getType (  ) ;^443^^^^^428^458^int type = n.getType (  ) ;^[CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback  [METHOD] traverseBranch [RETURN_TYPE] void   Node n Node parent [VARIABLES] ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  args  body  child  cur  curNode  n  next  node  parent  root  scopeRoot  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  src  Deque  cfgs  scopeRoots  scopes  int  type  
[BugLab_Wrong_Operator]^if  ( type != Token.SCRIPT )  {^444^^^^^429^459^if  ( type == Token.SCRIPT )  {^[CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback  [METHOD] traverseBranch [RETURN_TYPE] void   Node n Node parent [VARIABLES] ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  args  body  child  cur  curNode  n  next  node  parent  root  scopeRoot  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  src  Deque  cfgs  scopeRoots  scopes  int  type  
[BugLab_Variable_Misuse]^sourceName = getSourceName ( parent ) ;^445^^^^^430^460^sourceName = getSourceName ( n ) ;^[CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback  [METHOD] traverseBranch [RETURN_TYPE] void   Node n Node parent [VARIABLES] ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  args  body  child  cur  curNode  n  next  node  parent  root  scopeRoot  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  src  Deque  cfgs  scopeRoots  scopes  int  type  
[BugLab_Variable_Misuse]^sourceName = getSourceName ( scopeRoot ) ;^445^^^^^430^460^sourceName = getSourceName ( n ) ;^[CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback  [METHOD] traverseBranch [RETURN_TYPE] void   Node n Node parent [VARIABLES] ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  args  body  child  cur  curNode  n  next  node  parent  root  scopeRoot  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  src  Deque  cfgs  scopeRoots  scopes  int  type  
[BugLab_Variable_Misuse]^curNode = next;^448^^^^^433^463^curNode = n;^[CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback  [METHOD] traverseBranch [RETURN_TYPE] void   Node n Node parent [VARIABLES] ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  args  body  child  cur  curNode  n  next  node  parent  root  scopeRoot  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  src  Deque  cfgs  scopeRoots  scopes  int  type  
[BugLab_Variable_Misuse]^if  ( !callback.shouldTraverse ( this, scopeRoot, parent )  )  return;^449^^^^^434^464^if  ( !callback.shouldTraverse ( this, n, parent )  )  return;^[CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback  [METHOD] traverseBranch [RETURN_TYPE] void   Node n Node parent [VARIABLES] ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  args  body  child  cur  curNode  n  next  node  parent  root  scopeRoot  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  src  Deque  cfgs  scopeRoots  scopes  int  type  
[BugLab_Variable_Misuse]^if  ( !callback.shouldTraverse ( this, n, node )  )  return;^449^^^^^434^464^if  ( !callback.shouldTraverse ( this, n, parent )  )  return;^[CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback  [METHOD] traverseBranch [RETURN_TYPE] void   Node n Node parent [VARIABLES] ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  args  body  child  cur  curNode  n  next  node  parent  root  scopeRoot  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  src  Deque  cfgs  scopeRoots  scopes  int  type  
[BugLab_Variable_Misuse]^if  ( !callback.shouldTraverse ( this, n, n )  )  return;^449^^^^^434^464^if  ( !callback.shouldTraverse ( this, n, parent )  )  return;^[CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback  [METHOD] traverseBranch [RETURN_TYPE] void   Node n Node parent [VARIABLES] ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  args  body  child  cur  curNode  n  next  node  parent  root  scopeRoot  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  src  Deque  cfgs  scopeRoots  scopes  int  type  
[BugLab_Argument_Swapping]^if  ( !callback.shouldTraverse ( this, parent, n )  )  return;^449^^^^^434^464^if  ( !callback.shouldTraverse ( this, n, parent )  )  return;^[CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback  [METHOD] traverseBranch [RETURN_TYPE] void   Node n Node parent [VARIABLES] ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  args  body  child  cur  curNode  n  next  node  parent  root  scopeRoot  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  src  Deque  cfgs  scopeRoots  scopes  int  type  
[BugLab_Variable_Misuse]^for  ( Node child = node.getFirstChild (  ) ; child != null;  )  {^466^^^^^451^481^for  ( Node child = n.getFirstChild (  ) ; child != null;  )  {^[CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback  [METHOD] traverseBranch [RETURN_TYPE] void   Node n Node parent [VARIABLES] ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  args  body  child  cur  curNode  n  next  node  parent  root  scopeRoot  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  src  Deque  cfgs  scopeRoots  scopes  int  type  
[BugLab_Variable_Misuse]^for  ( Node parent = n.getFirstChild (  ) ; child != null;  )  {^466^^^^^451^481^for  ( Node child = n.getFirstChild (  ) ; child != null;  )  {^[CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback  [METHOD] traverseBranch [RETURN_TYPE] void   Node n Node parent [VARIABLES] ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  args  body  child  cur  curNode  n  next  node  parent  root  scopeRoot  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  src  Deque  cfgs  scopeRoots  scopes  int  type  
[BugLab_Wrong_Operator]^for  ( Node child = n.getFirstChild (  ) ; child == null;  )  {^466^^^^^451^481^for  ( Node child = n.getFirstChild (  ) ; child != null;  )  {^[CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback  [METHOD] traverseBranch [RETURN_TYPE] void   Node n Node parent [VARIABLES] ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  args  body  child  cur  curNode  n  next  node  parent  root  scopeRoot  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  src  Deque  cfgs  scopeRoots  scopes  int  type  
[BugLab_Variable_Misuse]^child = scopeRoot;^471^^^^^456^486^child = next;^[CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback  [METHOD] traverseBranch [RETURN_TYPE] void   Node n Node parent [VARIABLES] ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  args  body  child  cur  curNode  n  next  node  parent  root  scopeRoot  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  src  Deque  cfgs  scopeRoots  scopes  int  type  
[BugLab_Variable_Misuse]^Node next = scopeRoot.getNext (  ) ;^469^^^^^454^484^Node next = child.getNext (  ) ;^[CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback  [METHOD] traverseBranch [RETURN_TYPE] void   Node n Node parent [VARIABLES] ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  args  body  child  cur  curNode  n  next  node  parent  root  scopeRoot  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  src  Deque  cfgs  scopeRoots  scopes  int  type  
[BugLab_Variable_Misuse]^Node next = parent.getNext (  ) ;^469^^^^^454^484^Node next = child.getNext (  ) ;^[CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback  [METHOD] traverseBranch [RETURN_TYPE] void   Node n Node parent [VARIABLES] ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  args  body  child  cur  curNode  n  next  node  parent  root  scopeRoot  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  src  Deque  cfgs  scopeRoots  scopes  int  type  
[BugLab_Variable_Misuse]^traverseBranch ( scopeRoot, n ) ;^470^^^^^455^485^traverseBranch ( child, n ) ;^[CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback  [METHOD] traverseBranch [RETURN_TYPE] void   Node n Node parent [VARIABLES] ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  args  body  child  cur  curNode  n  next  node  parent  root  scopeRoot  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  src  Deque  cfgs  scopeRoots  scopes  int  type  
[BugLab_Variable_Misuse]^traverseBranch ( child, node ) ;^470^^^^^455^485^traverseBranch ( child, n ) ;^[CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback  [METHOD] traverseBranch [RETURN_TYPE] void   Node n Node parent [VARIABLES] ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  args  body  child  cur  curNode  n  next  node  parent  root  scopeRoot  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  src  Deque  cfgs  scopeRoots  scopes  int  type  
[BugLab_Argument_Swapping]^traverseBranch ( n, child ) ;^470^^^^^455^485^traverseBranch ( child, n ) ;^[CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback  [METHOD] traverseBranch [RETURN_TYPE] void   Node n Node parent [VARIABLES] ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  args  body  child  cur  curNode  n  next  node  parent  root  scopeRoot  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  src  Deque  cfgs  scopeRoots  scopes  int  type  
[BugLab_Variable_Misuse]^child = n;^471^^^^^456^486^child = next;^[CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback  [METHOD] traverseBranch [RETURN_TYPE] void   Node n Node parent [VARIABLES] ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  args  body  child  cur  curNode  n  next  node  parent  root  scopeRoot  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  src  Deque  cfgs  scopeRoots  scopes  int  type  
[BugLab_Variable_Misuse]^for  ( Node child = root.getFirstChild (  ) ; child != null;  )  {^466^^^^^451^481^for  ( Node child = n.getFirstChild (  ) ; child != null;  )  {^[CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback  [METHOD] traverseBranch [RETURN_TYPE] void   Node n Node parent [VARIABLES] ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  args  body  child  cur  curNode  n  next  node  parent  root  scopeRoot  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  src  Deque  cfgs  scopeRoots  scopes  int  type  
[BugLab_Variable_Misuse]^Preconditions.checkState ( node.getChildCount (  )  == 3 ) ;^453^^^^^438^468^Preconditions.checkState ( n.getChildCount (  )  == 3 ) ;^[CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback  [METHOD] traverseBranch [RETURN_TYPE] void   Node n Node parent [VARIABLES] ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  args  body  child  cur  curNode  n  next  node  parent  root  scopeRoot  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  src  Deque  cfgs  scopeRoots  scopes  int  type  
[BugLab_Wrong_Operator]^Preconditions.checkState ( n.getChildCount (  )  != 3 ) ;^453^^^^^438^468^Preconditions.checkState ( n.getChildCount (  )  == 3 ) ;^[CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback  [METHOD] traverseBranch [RETURN_TYPE] void   Node n Node parent [VARIABLES] ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  args  body  child  cur  curNode  n  next  node  parent  root  scopeRoot  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  src  Deque  cfgs  scopeRoots  scopes  int  type  
[BugLab_Wrong_Literal]^Preconditions.checkState ( n.getChildCount (  )  == type ) ;^453^^^^^438^468^Preconditions.checkState ( n.getChildCount (  )  == 3 ) ;^[CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback  [METHOD] traverseBranch [RETURN_TYPE] void   Node n Node parent [VARIABLES] ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  args  body  child  cur  curNode  n  next  node  parent  root  scopeRoot  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  src  Deque  cfgs  scopeRoots  scopes  int  type  
[BugLab_Variable_Misuse]^Preconditions.checkState ( next.getChildCount (  )  == 3 ) ;^453^^^^^438^468^Preconditions.checkState ( n.getChildCount (  )  == 3 ) ;^[CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback  [METHOD] traverseBranch [RETURN_TYPE] void   Node n Node parent [VARIABLES] ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  args  body  child  cur  curNode  n  next  node  parent  root  scopeRoot  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  src  Deque  cfgs  scopeRoots  scopes  int  type  
[BugLab_Variable_Misuse]^Preconditions.checkState ( root.getFirstChild (  ) .getType (  )  == Token.NAME ) ;^454^^^^^439^469^Preconditions.checkState ( n.getFirstChild (  ) .getType (  )  == Token.NAME ) ;^[CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback  [METHOD] traverseBranch [RETURN_TYPE] void   Node n Node parent [VARIABLES] ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  args  body  child  cur  curNode  n  next  node  parent  root  scopeRoot  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  src  Deque  cfgs  scopeRoots  scopes  int  type  
[BugLab_Wrong_Operator]^Preconditions.checkState ( n.getFirstChild (  ) .getType (  )  < Token.NAME ) ;^454^^^^^439^469^Preconditions.checkState ( n.getFirstChild (  ) .getType (  )  == Token.NAME ) ;^[CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback  [METHOD] traverseBranch [RETURN_TYPE] void   Node n Node parent [VARIABLES] ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  args  body  child  cur  curNode  n  next  node  parent  root  scopeRoot  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  src  Deque  cfgs  scopeRoots  scopes  int  type  
[BugLab_Variable_Misuse]^Preconditions.checkState ( parent.getFirstChild (  ) .getType (  )  == Token.NAME ) ;^454^^^^^439^469^Preconditions.checkState ( n.getFirstChild (  ) .getType (  )  == Token.NAME ) ;^[CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback  [METHOD] traverseBranch [RETURN_TYPE] void   Node n Node parent [VARIABLES] ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  args  body  child  cur  curNode  n  next  node  parent  root  scopeRoot  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  src  Deque  cfgs  scopeRoots  scopes  int  type  
[BugLab_Variable_Misuse]^Preconditions.checkState ( node.getFirstChild (  ) .getType (  )  == Token.NAME ) ;^454^^^^^439^469^Preconditions.checkState ( n.getFirstChild (  ) .getType (  )  == Token.NAME ) ;^[CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback  [METHOD] traverseBranch [RETURN_TYPE] void   Node n Node parent [VARIABLES] ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  args  body  child  cur  curNode  n  next  node  parent  root  scopeRoot  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  src  Deque  cfgs  scopeRoots  scopes  int  type  
[BugLab_Variable_Misuse]^traverseBranch ( scopeRoot.getFirstChild (  ) , n ) ;^457^^^^^442^472^traverseBranch ( n.getFirstChild (  ) , n ) ;^[CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback  [METHOD] traverseBranch [RETURN_TYPE] void   Node n Node parent [VARIABLES] ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  args  body  child  cur  curNode  n  next  node  parent  root  scopeRoot  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  src  Deque  cfgs  scopeRoots  scopes  int  type  
[BugLab_Variable_Misuse]^traverseBranch ( scopeRoot.getFirstChild (  ) .getNext (  ) .getNext (  ) , n ) ;^458^^^^^443^473^traverseBranch ( n.getFirstChild (  ) .getNext (  ) .getNext (  ) , n ) ;^[CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback  [METHOD] traverseBranch [RETURN_TYPE] void   Node n Node parent [VARIABLES] ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  args  body  child  cur  curNode  n  next  node  parent  root  scopeRoot  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  src  Deque  cfgs  scopeRoots  scopes  int  type  
[BugLab_Variable_Misuse]^traverseFunction ( scopeRoot, parent ) ;^462^^^^^447^477^traverseFunction ( n, parent ) ;^[CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback  [METHOD] traverseBranch [RETURN_TYPE] void   Node n Node parent [VARIABLES] ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  args  body  child  cur  curNode  n  next  node  parent  root  scopeRoot  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  src  Deque  cfgs  scopeRoots  scopes  int  type  
[BugLab_Variable_Misuse]^traverseFunction ( n, scopeRoot ) ;^462^^^^^447^477^traverseFunction ( n, parent ) ;^[CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback  [METHOD] traverseBranch [RETURN_TYPE] void   Node n Node parent [VARIABLES] ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  args  body  child  cur  curNode  n  next  node  parent  root  scopeRoot  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  src  Deque  cfgs  scopeRoots  scopes  int  type  
[BugLab_Argument_Swapping]^traverseFunction ( parent, n ) ;^462^^^^^447^477^traverseFunction ( n, parent ) ;^[CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback  [METHOD] traverseBranch [RETURN_TYPE] void   Node n Node parent [VARIABLES] ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  args  body  child  cur  curNode  n  next  node  parent  root  scopeRoot  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  src  Deque  cfgs  scopeRoots  scopes  int  type  
[BugLab_Variable_Misuse]^Node next = node.getNext (  ) ;^469^^^^^454^484^Node next = child.getNext (  ) ;^[CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback  [METHOD] traverseBranch [RETURN_TYPE] void   Node n Node parent [VARIABLES] ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  args  body  child  cur  curNode  n  next  node  parent  root  scopeRoot  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  src  Deque  cfgs  scopeRoots  scopes  int  type  
[BugLab_Variable_Misuse]^traverseBranch ( parent, n ) ;^470^^^^^455^485^traverseBranch ( child, n ) ;^[CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback  [METHOD] traverseBranch [RETURN_TYPE] void   Node n Node parent [VARIABLES] ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  args  body  child  cur  curNode  n  next  node  parent  root  scopeRoot  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  src  Deque  cfgs  scopeRoots  scopes  int  type  
[BugLab_Variable_Misuse]^traverseBranch ( child, scopeRoot ) ;^470^^^^^455^485^traverseBranch ( child, n ) ;^[CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback  [METHOD] traverseBranch [RETURN_TYPE] void   Node n Node parent [VARIABLES] ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  args  body  child  cur  curNode  n  next  node  parent  root  scopeRoot  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  src  Deque  cfgs  scopeRoots  scopes  int  type  
[BugLab_Variable_Misuse]^callback.visit ( this, scopeRoot, parent ) ;^477^^^^^462^492^callback.visit ( this, n, parent ) ;^[CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback  [METHOD] traverseBranch [RETURN_TYPE] void   Node n Node parent [VARIABLES] ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  args  body  child  cur  curNode  n  next  node  parent  root  scopeRoot  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  src  Deque  cfgs  scopeRoots  scopes  int  type  
[BugLab_Variable_Misuse]^callback.visit ( this, n, scopeRoot ) ;^477^^^^^462^492^callback.visit ( this, n, parent ) ;^[CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback  [METHOD] traverseBranch [RETURN_TYPE] void   Node n Node parent [VARIABLES] ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  args  body  child  cur  curNode  n  next  node  parent  root  scopeRoot  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  src  Deque  cfgs  scopeRoots  scopes  int  type  
[BugLab_Argument_Swapping]^callback.visit ( this, parent, n ) ;^477^^^^^462^492^callback.visit ( this, n, parent ) ;^[CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback  [METHOD] traverseBranch [RETURN_TYPE] void   Node n Node parent [VARIABLES] ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  args  body  child  cur  curNode  n  next  node  parent  root  scopeRoot  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  src  Deque  cfgs  scopeRoots  scopes  int  type  
[BugLab_Wrong_Operator]^Preconditions.checkState ( n.getChildCount (  )  >= 3 ) ;^484^^^^^469^499^Preconditions.checkState ( n.getChildCount (  )  == 3 ) ;^[CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback  [METHOD] traverseFunction [RETURN_TYPE] void   Node n Node parent [VARIABLES] ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  anonymous  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  args  body  child  cur  curNode  fnName  n  next  node  parent  root  scopeRoot  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  src  Deque  cfgs  scopeRoots  scopes  
[BugLab_Wrong_Literal]^Preconditions.checkState ( n.getChildCount (  )  == 2 ) ;^484^^^^^469^499^Preconditions.checkState ( n.getChildCount (  )  == 3 ) ;^[CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback  [METHOD] traverseFunction [RETURN_TYPE] void   Node n Node parent [VARIABLES] ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  anonymous  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  args  body  child  cur  curNode  fnName  n  next  node  parent  root  scopeRoot  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  src  Deque  cfgs  scopeRoots  scopes  
[BugLab_Variable_Misuse]^Preconditions.checkState ( root.getType (  )  == Token.FUNCTION ) ;^485^^^^^470^500^Preconditions.checkState ( n.getType (  )  == Token.FUNCTION ) ;^[CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback  [METHOD] traverseFunction [RETURN_TYPE] void   Node n Node parent [VARIABLES] ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  anonymous  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  args  body  child  cur  curNode  fnName  n  next  node  parent  root  scopeRoot  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  src  Deque  cfgs  scopeRoots  scopes  
[BugLab_Wrong_Operator]^Preconditions.checkState ( n.getType (  )  != Token.FUNCTION ) ;^485^^^^^470^500^Preconditions.checkState ( n.getType (  )  == Token.FUNCTION ) ;^[CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback  [METHOD] traverseFunction [RETURN_TYPE] void   Node n Node parent [VARIABLES] ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  anonymous  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  args  body  child  cur  curNode  fnName  n  next  node  parent  root  scopeRoot  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  src  Deque  cfgs  scopeRoots  scopes  
[BugLab_Variable_Misuse]^Preconditions.checkState ( parent.getType (  )  == Token.FUNCTION ) ;^485^^^^^470^500^Preconditions.checkState ( n.getType (  )  == Token.FUNCTION ) ;^[CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback  [METHOD] traverseFunction [RETURN_TYPE] void   Node n Node parent [VARIABLES] ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  anonymous  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  args  body  child  cur  curNode  fnName  n  next  node  parent  root  scopeRoot  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  src  Deque  cfgs  scopeRoots  scopes  
[BugLab_Variable_Misuse]^final Node fnName = root.getFirstChild (  ) ;^487^^^^^472^502^final Node fnName = n.getFirstChild (  ) ;^[CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback  [METHOD] traverseFunction [RETURN_TYPE] void   Node n Node parent [VARIABLES] ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  anonymous  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  args  body  child  cur  curNode  fnName  n  next  node  parent  root  scopeRoot  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  src  Deque  cfgs  scopeRoots  scopes  
[BugLab_Variable_Misuse]^final Node fnName = next.getFirstChild (  ) ;^487^^^^^472^502^final Node fnName = n.getFirstChild (  ) ;^[CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback  [METHOD] traverseFunction [RETURN_TYPE] void   Node n Node parent [VARIABLES] ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  anonymous  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  args  body  child  cur  curNode  fnName  n  next  node  parent  root  scopeRoot  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  src  Deque  cfgs  scopeRoots  scopes  
[BugLab_Variable_Misuse]^boolean anonymous = n != null && NodeUtil.isFunctionAnonymous ( n ) ;^489^^^^^474^504^boolean anonymous = parent != null && NodeUtil.isFunctionAnonymous ( n ) ;^[CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback  [METHOD] traverseFunction [RETURN_TYPE] void   Node n Node parent [VARIABLES] ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  anonymous  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  args  body  child  cur  curNode  fnName  n  next  node  parent  root  scopeRoot  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  src  Deque  cfgs  scopeRoots  scopes  
[BugLab_Variable_Misuse]^boolean anonymous = parent != nextull && NodeUtil.isFunctionAnonymous ( n ) ;^489^^^^^474^504^boolean anonymous = parent != null && NodeUtil.isFunctionAnonymous ( n ) ;^[CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback  [METHOD] traverseFunction [RETURN_TYPE] void   Node n Node parent [VARIABLES] ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  anonymous  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  args  body  child  cur  curNode  fnName  n  next  node  parent  root  scopeRoot  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  src  Deque  cfgs  scopeRoots  scopes  
[BugLab_Argument_Swapping]^boolean anonymous = n != parentull && NodeUtil.isFunctionAnonymous ( n ) ;^489^^^^^474^504^boolean anonymous = parent != null && NodeUtil.isFunctionAnonymous ( n ) ;^[CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback  [METHOD] traverseFunction [RETURN_TYPE] void   Node n Node parent [VARIABLES] ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  anonymous  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  args  body  child  cur  curNode  fnName  n  next  node  parent  root  scopeRoot  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  src  Deque  cfgs  scopeRoots  scopes  
[BugLab_Wrong_Operator]^boolean anonymous = parent != null || NodeUtil.isFunctionAnonymous ( n ) ;^489^^^^^474^504^boolean anonymous = parent != null && NodeUtil.isFunctionAnonymous ( n ) ;^[CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback  [METHOD] traverseFunction [RETURN_TYPE] void   Node n Node parent [VARIABLES] ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  anonymous  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  args  body  child  cur  curNode  fnName  n  next  node  parent  root  scopeRoot  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  src  Deque  cfgs  scopeRoots  scopes  
[BugLab_Wrong_Operator]^boolean anonymous = parent == null && NodeUtil.isFunctionAnonymous ( n ) ;^489^^^^^474^504^boolean anonymous = parent != null && NodeUtil.isFunctionAnonymous ( n ) ;^[CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback  [METHOD] traverseFunction [RETURN_TYPE] void   Node n Node parent [VARIABLES] ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  anonymous  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  args  body  child  cur  curNode  fnName  n  next  node  parent  root  scopeRoot  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  src  Deque  cfgs  scopeRoots  scopes  
[BugLab_Variable_Misuse]^if  ( !include )  {^491^^^^^476^506^if  ( !anonymous )  {^[CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback  [METHOD] traverseFunction [RETURN_TYPE] void   Node n Node parent [VARIABLES] ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  anonymous  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  args  body  child  cur  curNode  fnName  n  next  node  parent  root  scopeRoot  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  src  Deque  cfgs  scopeRoots  scopes  
[BugLab_Variable_Misuse]^traverseBranch ( scopeRoot, n ) ;^493^^^^^478^508^traverseBranch ( fnName, n ) ;^[CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback  [METHOD] traverseFunction [RETURN_TYPE] void   Node n Node parent [VARIABLES] ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  anonymous  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  args  body  child  cur  curNode  fnName  n  next  node  parent  root  scopeRoot  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  src  Deque  cfgs  scopeRoots  scopes  
[BugLab_Variable_Misuse]^traverseBranch ( fnName, root ) ;^493^^^^^478^508^traverseBranch ( fnName, n ) ;^[CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback  [METHOD] traverseFunction [RETURN_TYPE] void   Node n Node parent [VARIABLES] ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  anonymous  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  args  body  child  cur  curNode  fnName  n  next  node  parent  root  scopeRoot  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  src  Deque  cfgs  scopeRoots  scopes  
[BugLab_Argument_Swapping]^traverseBranch ( n, fnName ) ;^493^^^^^478^508^traverseBranch ( fnName, n ) ;^[CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback  [METHOD] traverseFunction [RETURN_TYPE] void   Node n Node parent [VARIABLES] ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  anonymous  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  args  body  child  cur  curNode  fnName  n  next  node  parent  root  scopeRoot  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  src  Deque  cfgs  scopeRoots  scopes  
[BugLab_Variable_Misuse]^traverseBranch ( node, n ) ;^493^^^^^478^508^traverseBranch ( fnName, n ) ;^[CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback  [METHOD] traverseFunction [RETURN_TYPE] void   Node n Node parent [VARIABLES] ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  anonymous  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  args  body  child  cur  curNode  fnName  n  next  node  parent  root  scopeRoot  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  src  Deque  cfgs  scopeRoots  scopes  
[BugLab_Variable_Misuse]^traverseBranch ( fnName, parent ) ;^493^^^^^478^508^traverseBranch ( fnName, n ) ;^[CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback  [METHOD] traverseFunction [RETURN_TYPE] void   Node n Node parent [VARIABLES] ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  anonymous  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  args  body  child  cur  curNode  fnName  n  next  node  parent  root  scopeRoot  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  src  Deque  cfgs  scopeRoots  scopes  
[BugLab_Variable_Misuse]^curNode = node;^496^^^^^481^511^curNode = n;^[CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback  [METHOD] traverseFunction [RETURN_TYPE] void   Node n Node parent [VARIABLES] ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  anonymous  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  args  body  child  cur  curNode  fnName  n  next  node  parent  root  scopeRoot  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  src  Deque  cfgs  scopeRoots  scopes  
[BugLab_Variable_Misuse]^pushScope ( next ) ;^497^^^^^482^512^pushScope ( n ) ;^[CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback  [METHOD] traverseFunction [RETURN_TYPE] void   Node n Node parent [VARIABLES] ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  anonymous  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  args  body  child  cur  curNode  fnName  n  next  node  parent  root  scopeRoot  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  src  Deque  cfgs  scopeRoots  scopes  
[BugLab_Variable_Misuse]^if  ( include )  {^499^^^^^484^514^if  ( anonymous )  {^[CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback  [METHOD] traverseFunction [RETURN_TYPE] void   Node n Node parent [VARIABLES] ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  anonymous  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  args  body  child  cur  curNode  fnName  n  next  node  parent  root  scopeRoot  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  src  Deque  cfgs  scopeRoots  scopes  
[BugLab_Variable_Misuse]^traverseBranch ( scopeRoot, n ) ;^501^^^^^486^516^traverseBranch ( fnName, n ) ;^[CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback  [METHOD] traverseFunction [RETURN_TYPE] void   Node n Node parent [VARIABLES] ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  anonymous  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  args  body  child  cur  curNode  fnName  n  next  node  parent  root  scopeRoot  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  src  Deque  cfgs  scopeRoots  scopes  
[BugLab_Variable_Misuse]^traverseBranch ( fnName, root ) ;^501^^^^^486^516^traverseBranch ( fnName, n ) ;^[CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback  [METHOD] traverseFunction [RETURN_TYPE] void   Node n Node parent [VARIABLES] ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  anonymous  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  args  body  child  cur  curNode  fnName  n  next  node  parent  root  scopeRoot  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  src  Deque  cfgs  scopeRoots  scopes  
[BugLab_Argument_Swapping]^traverseBranch ( n, fnName ) ;^501^^^^^486^516^traverseBranch ( fnName, n ) ;^[CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback  [METHOD] traverseFunction [RETURN_TYPE] void   Node n Node parent [VARIABLES] ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  anonymous  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  args  body  child  cur  curNode  fnName  n  next  node  parent  root  scopeRoot  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  src  Deque  cfgs  scopeRoots  scopes  
[BugLab_Variable_Misuse]^traverseBranch ( fnName, scopeRoot ) ;^501^^^^^486^516^traverseBranch ( fnName, n ) ;^[CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback  [METHOD] traverseFunction [RETURN_TYPE] void   Node n Node parent [VARIABLES] ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  anonymous  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  args  body  child  cur  curNode  fnName  n  next  node  parent  root  scopeRoot  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  src  Deque  cfgs  scopeRoots  scopes  
[BugLab_Variable_Misuse]^final Node args = scopeRoot.getNext (  ) ;^504^^^^^489^519^final Node args = fnName.getNext (  ) ;^[CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback  [METHOD] traverseFunction [RETURN_TYPE] void   Node n Node parent [VARIABLES] ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  anonymous  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  args  body  child  cur  curNode  fnName  n  next  node  parent  root  scopeRoot  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  src  Deque  cfgs  scopeRoots  scopes  
[BugLab_Variable_Misuse]^final Node args = parent.getNext (  ) ;^504^^^^^489^519^final Node args = fnName.getNext (  ) ;^[CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback  [METHOD] traverseFunction [RETURN_TYPE] void   Node n Node parent [VARIABLES] ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  anonymous  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  args  body  child  cur  curNode  fnName  n  next  node  parent  root  scopeRoot  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  src  Deque  cfgs  scopeRoots  scopes  
[BugLab_Variable_Misuse]^final Node body = root.getNext (  ) ;^505^^^^^490^520^final Node body = args.getNext (  ) ;^[CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback  [METHOD] traverseFunction [RETURN_TYPE] void   Node n Node parent [VARIABLES] ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  anonymous  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  args  body  child  cur  curNode  fnName  n  next  node  parent  root  scopeRoot  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  src  Deque  cfgs  scopeRoots  scopes  
[BugLab_Variable_Misuse]^final Node body = next.getNext (  ) ;^505^^^^^490^520^final Node body = args.getNext (  ) ;^[CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback  [METHOD] traverseFunction [RETURN_TYPE] void   Node n Node parent [VARIABLES] ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  anonymous  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  args  body  child  cur  curNode  fnName  n  next  node  parent  root  scopeRoot  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  src  Deque  cfgs  scopeRoots  scopes  
[BugLab_Variable_Misuse]^traverseBranch ( scopeRoot, n ) ;^508^^^^^493^523^traverseBranch ( args, n ) ;^[CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback  [METHOD] traverseFunction [RETURN_TYPE] void   Node n Node parent [VARIABLES] ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  anonymous  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  args  body  child  cur  curNode  fnName  n  next  node  parent  root  scopeRoot  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  src  Deque  cfgs  scopeRoots  scopes  
[BugLab_Variable_Misuse]^traverseBranch ( args, scopeRoot ) ;^508^^^^^493^523^traverseBranch ( args, n ) ;^[CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback  [METHOD] traverseFunction [RETURN_TYPE] void   Node n Node parent [VARIABLES] ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  anonymous  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  args  body  child  cur  curNode  fnName  n  next  node  parent  root  scopeRoot  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  src  Deque  cfgs  scopeRoots  scopes  
[BugLab_Argument_Swapping]^traverseBranch ( n, args ) ;^508^^^^^493^523^traverseBranch ( args, n ) ;^[CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback  [METHOD] traverseFunction [RETURN_TYPE] void   Node n Node parent [VARIABLES] ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  anonymous  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  args  body  child  cur  curNode  fnName  n  next  node  parent  root  scopeRoot  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  src  Deque  cfgs  scopeRoots  scopes  
[BugLab_Variable_Misuse]^Preconditions.checkState ( root.getNext (  )  == null && body.getType (  )  == Token.BLOCK ) ;^511^512^^^^496^526^Preconditions.checkState ( body.getNext (  )  == null && body.getType (  )  == Token.BLOCK ) ;^[CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback  [METHOD] traverseFunction [RETURN_TYPE] void   Node n Node parent [VARIABLES] ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  anonymous  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  args  body  child  cur  curNode  fnName  n  next  node  parent  root  scopeRoot  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  src  Deque  cfgs  scopeRoots  scopes  
[BugLab_Variable_Misuse]^Preconditions.checkState ( body.getNext (  )  == null && body.getType (  )  == Token.0 ) ;^511^512^^^^496^526^Preconditions.checkState ( body.getNext (  )  == null && body.getType (  )  == Token.BLOCK ) ;^[CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback  [METHOD] traverseFunction [RETURN_TYPE] void   Node n Node parent [VARIABLES] ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  anonymous  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  args  body  child  cur  curNode  fnName  n  next  node  parent  root  scopeRoot  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  src  Deque  cfgs  scopeRoots  scopes  
[BugLab_Wrong_Operator]^Preconditions.checkState ( body.getNext (  )  == null || body.getType (  )  == Token.BLOCK ) ;^511^512^^^^496^526^Preconditions.checkState ( body.getNext (  )  == null && body.getType (  )  == Token.BLOCK ) ;^[CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback  [METHOD] traverseFunction [RETURN_TYPE] void   Node n Node parent [VARIABLES] ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  anonymous  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  args  body  child  cur  curNode  fnName  n  next  node  parent  root  scopeRoot  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  src  Deque  cfgs  scopeRoots  scopes  
[BugLab_Wrong_Operator]^Preconditions.checkState ( body.getNext (  )  != null && body.getType (  )  == Token.BLOCK ) ;^511^512^^^^496^526^Preconditions.checkState ( body.getNext (  )  == null && body.getType (  )  == Token.BLOCK ) ;^[CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback  [METHOD] traverseFunction [RETURN_TYPE] void   Node n Node parent [VARIABLES] ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  anonymous  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  args  body  child  cur  curNode  fnName  n  next  node  parent  root  scopeRoot  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  src  Deque  cfgs  scopeRoots  scopes  
[BugLab_Variable_Misuse]^Preconditions.checkState ( scopeRoot.getNext (  )  == null && body.getType (  )  == Token.BLOCK ) ;^511^512^^^^496^526^Preconditions.checkState ( body.getNext (  )  == null && body.getType (  )  == Token.BLOCK ) ;^[CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback  [METHOD] traverseFunction [RETURN_TYPE] void   Node n Node parent [VARIABLES] ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  anonymous  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  args  body  child  cur  curNode  fnName  n  next  node  parent  root  scopeRoot  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  src  Deque  cfgs  scopeRoots  scopes  
[BugLab_Variable_Misuse]^traverseBranch ( parent, n ) ;^513^^^^^498^528^traverseBranch ( body, n ) ;^[CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback  [METHOD] traverseFunction [RETURN_TYPE] void   Node n Node parent [VARIABLES] ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  anonymous  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  args  body  child  cur  curNode  fnName  n  next  node  parent  root  scopeRoot  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  src  Deque  cfgs  scopeRoots  scopes  
[BugLab_Variable_Misuse]^traverseBranch ( body, scopeRoot ) ;^513^^^^^498^528^traverseBranch ( body, n ) ;^[CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback  [METHOD] traverseFunction [RETURN_TYPE] void   Node n Node parent [VARIABLES] ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  anonymous  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  args  body  child  cur  curNode  fnName  n  next  node  parent  root  scopeRoot  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  src  Deque  cfgs  scopeRoots  scopes  
[BugLab_Argument_Swapping]^traverseBranch ( n, body ) ;^513^^^^^498^528^traverseBranch ( body, n ) ;^[CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback  [METHOD] traverseFunction [RETURN_TYPE] void   Node n Node parent [VARIABLES] ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  anonymous  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  args  body  child  cur  curNode  fnName  n  next  node  parent  root  scopeRoot  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  src  Deque  cfgs  scopeRoots  scopes  
[BugLab_Argument_Swapping]^if  ( scopeRoots.size (  )  + scopes.size (  )  < 2 )  {^521^^^^^520^530^if  ( scopes.size (  )  + scopeRoots.size (  )  < 2 )  {^[CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback  [METHOD] getEnclosingFunction [RETURN_TYPE] Node   [VARIABLES] ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  anonymous  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  args  body  child  cur  curNode  fnName  n  next  node  parent  root  scopeRoot  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  src  Deque  cfgs  scopeRoots  scopes  
[BugLab_Wrong_Operator]^if  ( scopes.size (  )  + scopeRoots.size (  )  <= 2 )  {^521^^^^^520^530^if  ( scopes.size (  )  + scopeRoots.size (  )  < 2 )  {^[CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback  [METHOD] getEnclosingFunction [RETURN_TYPE] Node   [VARIABLES] ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  anonymous  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  args  body  child  cur  curNode  fnName  n  next  node  parent  root  scopeRoot  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  src  Deque  cfgs  scopeRoots  scopes  
[BugLab_Wrong_Operator]^if  ( scopes.size (  )   >>  scopeRoots.size (  )  < 2 )  {^521^^^^^520^530^if  ( scopes.size (  )  + scopeRoots.size (  )  < 2 )  {^[CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback  [METHOD] getEnclosingFunction [RETURN_TYPE] Node   [VARIABLES] ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  anonymous  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  args  body  child  cur  curNode  fnName  n  next  node  parent  root  scopeRoot  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  src  Deque  cfgs  scopeRoots  scopes  
[BugLab_Wrong_Literal]^if  ( scopes.size (  )  + scopeRoots.size (  )  < 1 )  {^521^^^^^520^530^if  ( scopes.size (  )  + scopeRoots.size (  )  < 2 )  {^[CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback  [METHOD] getEnclosingFunction [RETURN_TYPE] Node   [VARIABLES] ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  anonymous  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  args  body  child  cur  curNode  fnName  n  next  node  parent  root  scopeRoot  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  src  Deque  cfgs  scopeRoots  scopes  
[BugLab_Variable_Misuse]^return this.peek (  ) .getRootNode (  ) ;^525^^^^^520^530^return scopes.peek (  ) .getRootNode (  ) ;^[CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback  [METHOD] getEnclosingFunction [RETURN_TYPE] Node   [VARIABLES] ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  anonymous  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  args  body  child  cur  curNode  fnName  n  next  node  parent  root  scopeRoot  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  src  Deque  cfgs  scopeRoots  scopes  
[BugLab_Variable_Misuse]^Preconditions.checkState ( scopeRoot != null ) ;^534^^^^^533^540^Preconditions.checkState ( curNode != null ) ;^[CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback  [METHOD] pushScope [RETURN_TYPE] void   Node node [VARIABLES] ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  anonymous  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  args  body  child  cur  curNode  fnName  n  next  node  parent  root  scopeRoot  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  src  Deque  cfgs  scopeRoots  scopes  
[BugLab_Wrong_Operator]^Preconditions.checkState ( curNode == null ) ;^534^^^^^533^540^Preconditions.checkState ( curNode != null ) ;^[CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback  [METHOD] pushScope [RETURN_TYPE] void   Node node [VARIABLES] ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  anonymous  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  args  body  child  cur  curNode  fnName  n  next  node  parent  root  scopeRoot  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  src  Deque  cfgs  scopeRoots  scopes  
[BugLab_Variable_Misuse]^scopeRoots.push ( n ) ;^535^^^^^533^540^scopeRoots.push ( node ) ;^[CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback  [METHOD] pushScope [RETURN_TYPE] void   Node node [VARIABLES] ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  anonymous  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  args  body  child  cur  curNode  fnName  n  next  node  parent  root  scopeRoot  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  src  Deque  cfgs  scopeRoots  scopes  
[BugLab_Wrong_Operator]^if  ( scopeCallback == null )  {^537^^^^^533^540^if  ( scopeCallback != null )  {^[CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback  [METHOD] pushScope [RETURN_TYPE] void   Node node [VARIABLES] ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  anonymous  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  args  body  child  cur  curNode  fnName  n  next  node  parent  root  scopeRoot  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  src  Deque  cfgs  scopeRoots  scopes  
[BugLab_Variable_Misuse]^Preconditions.checkState ( node != null ) ;^544^^^^^543^550^Preconditions.checkState ( curNode != null ) ;^[CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback  [METHOD] pushScope [RETURN_TYPE] void   Scope s [VARIABLES] ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  anonymous  include  Scope  s  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  args  body  child  cur  curNode  fnName  n  next  node  parent  root  scopeRoot  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  src  Deque  cfgs  scopeRoots  scopes  
[BugLab_Wrong_Operator]^Preconditions.checkState ( curNode == null ) ;^544^^^^^543^550^Preconditions.checkState ( curNode != null ) ;^[CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback  [METHOD] pushScope [RETURN_TYPE] void   Scope s [VARIABLES] ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  anonymous  include  Scope  s  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  args  body  child  cur  curNode  fnName  n  next  node  parent  root  scopeRoot  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  src  Deque  cfgs  scopeRoots  scopes  
[BugLab_Wrong_Operator]^if  ( scopeCallback == null )  {^547^^^^^543^550^if  ( scopeCallback != null )  {^[CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback  [METHOD] pushScope [RETURN_TYPE] void   Scope s [VARIABLES] ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  anonymous  include  Scope  s  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  args  body  child  cur  curNode  fnName  n  next  node  parent  root  scopeRoot  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  src  Deque  cfgs  scopeRoots  scopes  
[BugLab_Wrong_Operator]^if  ( scopeCallback == null )  {^554^^^^^553^563^if  ( scopeCallback != null )  {^[CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback  [METHOD] popScope [RETURN_TYPE] void   [VARIABLES] ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  anonymous  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  args  body  child  cur  curNode  fnName  n  next  node  parent  root  scopeRoot  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  src  Deque  cfgs  scopeRoots  scopes  
[BugLab_Variable_Misuse]^if  ( 0.isEmpty (  )  )  {^557^^^^^553^563^if  ( scopeRoots.isEmpty (  )  )  {^[CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback  [METHOD] popScope [RETURN_TYPE] void   [VARIABLES] ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  anonymous  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  args  body  child  cur  curNode  fnName  n  next  node  parent  root  scopeRoot  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  src  Deque  cfgs  scopeRoots  scopes  
[BugLab_Argument_Swapping]^if  ( scopeRootsRoots.isEmpty (  )  )  {^568^^^^^566^580^if  ( scopeRoots.isEmpty (  )  )  {^[CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback  [METHOD] getScope [RETURN_TYPE] Scope   [VARIABLES] ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  anonymous  include  Scope  scope  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  args  body  child  cur  curNode  fnName  n  next  node  parent  root  scopeRoot  ScopeCreator  scopeCreator  Iterator  it  String  MISSING_SOURCE  label  message  sourceName  src  Deque  cfgs  scopeRoots  scopes  
[BugLab_Argument_Swapping]^if  ( scope.isEmpty (  )  )  {^568^^^^^566^580^if  ( scopeRoots.isEmpty (  )  )  {^[CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback  [METHOD] getScope [RETURN_TYPE] Scope   [VARIABLES] ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  anonymous  include  Scope  scope  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  args  body  child  cur  curNode  fnName  n  next  node  parent  root  scopeRoot  ScopeCreator  scopeCreator  Iterator  it  String  MISSING_SOURCE  label  message  sourceName  src  Deque  cfgs  scopeRoots  scopes  
[BugLab_Argument_Swapping]^scope = it.createScope ( scopeCreator.next (  ) , scope ) ;^574^^^^^566^580^scope = scopeCreator.createScope ( it.next (  ) , scope ) ;^[CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback  [METHOD] getScope [RETURN_TYPE] Scope   [VARIABLES] ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  anonymous  include  Scope  scope  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  args  body  child  cur  curNode  fnName  n  next  node  parent  root  scopeRoot  ScopeCreator  scopeCreator  Iterator  it  String  MISSING_SOURCE  label  message  sourceName  src  Deque  cfgs  scopeRoots  scopes  
[BugLab_Argument_Swapping]^scope = scopeCreatorCreator.createScope ( it.next (  ) , scope ) ;^574^^^^^566^580^scope = scopeCreator.createScope ( it.next (  ) , scope ) ;^[CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback  [METHOD] getScope [RETURN_TYPE] Scope   [VARIABLES] ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  anonymous  include  Scope  scope  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  args  body  child  cur  curNode  fnName  n  next  node  parent  root  scopeRoot  ScopeCreator  scopeCreator  Iterator  it  String  MISSING_SOURCE  label  message  sourceName  src  Deque  cfgs  scopeRoots  scopes  
[BugLab_Argument_Swapping]^scope = scope.createScope ( it.next (  ) , scopeCreator ) ;^574^^^^^566^580^scope = scopeCreator.createScope ( it.next (  ) , scope ) ;^[CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback  [METHOD] getScope [RETURN_TYPE] Scope   [VARIABLES] ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  anonymous  include  Scope  scope  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  args  body  child  cur  curNode  fnName  n  next  node  parent  root  scopeRoot  ScopeCreator  scopeCreator  Iterator  it  String  MISSING_SOURCE  label  message  sourceName  src  Deque  cfgs  scopeRoots  scopes  
[BugLab_Argument_Swapping]^scope = itCreator.createScope ( scope.next (  ) , scope ) ;^574^^^^^566^580^scope = scopeCreator.createScope ( it.next (  ) , scope ) ;^[CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback  [METHOD] getScope [RETURN_TYPE] Scope   [VARIABLES] ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  anonymous  include  Scope  scope  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  args  body  child  cur  curNode  fnName  n  next  node  parent  root  scopeRoot  ScopeCreator  scopeCreator  Iterator  it  String  MISSING_SOURCE  label  message  sourceName  src  Deque  cfgs  scopeRoots  scopes  
[BugLab_Wrong_Operator]^if  ( cfgs.peek (  )  != null )  {^584^^^^^583^591^if  ( cfgs.peek (  )  == null )  {^[CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback  [METHOD] getControlFlowGraph [RETURN_TYPE] ControlFlowGraph   [VARIABLES] ScopedCallback  scopeCallback  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  Callback  callback  cb  Set  nodeTypes  boolean  anonymous  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  args  body  child  cur  curNode  fnName  n  next  node  parent  root  scopeRoot  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  src  Deque  cfgs  scopeRoots  scopes  
[BugLab_Wrong_Literal]^ControlFlowAnalysis cfa = new ControlFlowAnalysis ( compiler, true ) ;^585^^^^^583^591^ControlFlowAnalysis cfa = new ControlFlowAnalysis ( compiler, false ) ;^[CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback  [METHOD] getControlFlowGraph [RETURN_TYPE] ControlFlowGraph   [VARIABLES] ScopedCallback  scopeCallback  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  Callback  callback  cb  Set  nodeTypes  boolean  anonymous  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  args  body  child  cur  curNode  fnName  n  next  node  parent  root  scopeRoot  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  src  Deque  cfgs  scopeRoots  scopes  
[BugLab_Variable_Misuse]^return null.peek (  ) ;^590^^^^^583^591^return cfgs.peek (  ) ;^[CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback  [METHOD] getControlFlowGraph [RETURN_TYPE] ControlFlowGraph   [VARIABLES] ScopedCallback  scopeCallback  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  Callback  callback  cb  Set  nodeTypes  boolean  anonymous  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  args  body  child  cur  curNode  fnName  n  next  node  parent  root  scopeRoot  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  src  Deque  cfgs  scopeRoots  scopes  
[BugLab_Variable_Misuse]^return 1.peek (  ) .getRootNode (  ) ;^596^^^^^594^600^return scopes.peek (  ) .getRootNode (  ) ;^[CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback  [METHOD] getScopeRoot [RETURN_TYPE] Node   [VARIABLES] ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  anonymous  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  args  body  child  cur  curNode  fnName  n  next  node  parent  root  scopeRoot  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  src  Deque  cfgs  scopeRoots  scopes  
[BugLab_Wrong_Operator]^return getScopeDepth (  )  < 1;^606^^^^^605^607^return getScopeDepth (  )  <= 1;^[CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback  [METHOD] inGlobalScope [RETURN_TYPE] boolean   [VARIABLES] ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  anonymous  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  args  body  child  cur  curNode  fnName  n  next  node  parent  root  scopeRoot  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  src  Deque  cfgs  scopeRoots  scopes  
[BugLab_Wrong_Literal]^return getScopeDepth (  )  <= 2;^606^^^^^605^607^return getScopeDepth (  )  <= 1;^[CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback  [METHOD] inGlobalScope [RETURN_TYPE] boolean   [VARIABLES] ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  anonymous  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  args  body  child  cur  curNode  fnName  n  next  node  parent  root  scopeRoot  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  src  Deque  cfgs  scopeRoots  scopes  
[BugLab_Argument_Swapping]^return scopeRoots.size (  )  + scopes.size (  ) ;^610^^^^^609^611^return scopes.size (  )  + scopeRoots.size (  ) ;^[CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback  [METHOD] getScopeDepth [RETURN_TYPE] int   [VARIABLES] ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  anonymous  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  args  body  child  cur  curNode  fnName  n  next  node  parent  root  scopeRoot  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  src  Deque  cfgs  scopeRoots  scopes  
[BugLab_Wrong_Operator]^return scopes.size (  !=  )  + scopeRoots.size (  ) ;^610^^^^^609^611^return scopes.size (  )  + scopeRoots.size (  ) ;^[CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback  [METHOD] getScopeDepth [RETURN_TYPE] int   [VARIABLES] ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  anonymous  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  args  body  child  cur  curNode  fnName  n  next  node  parent  root  scopeRoot  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  src  Deque  cfgs  scopeRoots  scopes  
[BugLab_Argument_Swapping]^return ! ( scopeRoots.isEmpty (  )  && scopes.isEmpty (  )  ) ;^614^^^^^613^615^return ! ( scopes.isEmpty (  )  && scopeRoots.isEmpty (  )  ) ;^[CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback  [METHOD] hasScope [RETURN_TYPE] boolean   [VARIABLES] ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  anonymous  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  args  body  child  cur  curNode  fnName  n  next  node  parent  root  scopeRoot  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  src  Deque  cfgs  scopeRoots  scopes  
[BugLab_Wrong_Operator]^return ! ( scopes.isEmpty (  )  || scopeRoots.isEmpty (  )  ) ;^614^^^^^613^615^return ! ( scopes.isEmpty (  )  && scopeRoots.isEmpty (  )  ) ;^[CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback  [METHOD] hasScope [RETURN_TYPE] boolean   [VARIABLES] ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  anonymous  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  args  body  child  cur  curNode  fnName  n  next  node  parent  root  scopeRoot  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  src  Deque  cfgs  scopeRoots  scopes  
[BugLab_Variable_Misuse]^JSError error = JSError.make ( getSourceName (  ) , scopeRoot, diagnosticType, arguments ) ;^620^^^^^618^622^JSError error = JSError.make ( getSourceName (  ) , n, diagnosticType, arguments ) ;^[CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback  [METHOD] report [RETURN_TYPE] void   Node n DiagnosticType diagnosticType  arguments [VARIABLES] ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  anonymous  include  DiagnosticType  NODE_TRAVERSAL_ERROR  diagnosticType  Node  args  body  child  cur  curNode  fnName  n  next  node  parent  root  scopeRoot  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  src  String[]  arguments  Deque  cfgs  scopeRoots  scopes  JSError  error  
[BugLab_Variable_Misuse]^JSError error = JSError.make ( getSourceName (  ) , n, NODE_TRAVERSAL_ERROR, arguments ) ;^620^^^^^618^622^JSError error = JSError.make ( getSourceName (  ) , n, diagnosticType, arguments ) ;^[CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback  [METHOD] report [RETURN_TYPE] void   Node n DiagnosticType diagnosticType  arguments [VARIABLES] ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  anonymous  include  DiagnosticType  NODE_TRAVERSAL_ERROR  diagnosticType  Node  args  body  child  cur  curNode  fnName  n  next  node  parent  root  scopeRoot  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  src  String[]  arguments  Deque  cfgs  scopeRoots  scopes  JSError  error  
[BugLab_Argument_Swapping]^JSError error = JSError.make ( getSourceName (  ) , arguments, diagnosticType, n ) ;^620^^^^^618^622^JSError error = JSError.make ( getSourceName (  ) , n, diagnosticType, arguments ) ;^[CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback  [METHOD] report [RETURN_TYPE] void   Node n DiagnosticType diagnosticType  arguments [VARIABLES] ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  anonymous  include  DiagnosticType  NODE_TRAVERSAL_ERROR  diagnosticType  Node  args  body  child  cur  curNode  fnName  n  next  node  parent  root  scopeRoot  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  src  String[]  arguments  Deque  cfgs  scopeRoots  scopes  JSError  error  
[BugLab_Argument_Swapping]^JSError error = JSError.make ( getSourceName (  ) , n, arguments, diagnosticType ) ;^620^^^^^618^622^JSError error = JSError.make ( getSourceName (  ) , n, diagnosticType, arguments ) ;^[CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback  [METHOD] report [RETURN_TYPE] void   Node n DiagnosticType diagnosticType  arguments [VARIABLES] ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  anonymous  include  DiagnosticType  NODE_TRAVERSAL_ERROR  diagnosticType  Node  args  body  child  cur  curNode  fnName  n  next  node  parent  root  scopeRoot  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  src  String[]  arguments  Deque  cfgs  scopeRoots  scopes  JSError  error  
[BugLab_Variable_Misuse]^JSError error = JSError.make ( getSourceName (  ) , next, diagnosticType, arguments ) ;^620^^^^^618^622^JSError error = JSError.make ( getSourceName (  ) , n, diagnosticType, arguments ) ;^[CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback  [METHOD] report [RETURN_TYPE] void   Node n DiagnosticType diagnosticType  arguments [VARIABLES] ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  anonymous  include  DiagnosticType  NODE_TRAVERSAL_ERROR  diagnosticType  Node  args  body  child  cur  curNode  fnName  n  next  node  parent  root  scopeRoot  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  src  String[]  arguments  Deque  cfgs  scopeRoots  scopes  JSError  error  
[BugLab_Argument_Swapping]^JSError error = JSError.make ( getSourceName (  ) , diagnosticType, n, arguments ) ;^620^^^^^618^622^JSError error = JSError.make ( getSourceName (  ) , n, diagnosticType, arguments ) ;^[CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback  [METHOD] report [RETURN_TYPE] void   Node n DiagnosticType diagnosticType  arguments [VARIABLES] ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  anonymous  include  DiagnosticType  NODE_TRAVERSAL_ERROR  diagnosticType  Node  args  body  child  cur  curNode  fnName  n  next  node  parent  root  scopeRoot  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  src  String[]  arguments  Deque  cfgs  scopeRoots  scopes  JSError  error  
[BugLab_Variable_Misuse]^String rootame =  ( String )  n.getProp ( Node.SOURCENAME_PROP ) ;^625^^^^^624^627^String name =  ( String )  n.getProp ( Node.SOURCENAME_PROP ) ;^[CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback  [METHOD] getSourceName [RETURN_TYPE] String   Node n [VARIABLES] ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  anonymous  include  DiagnosticType  NODE_TRAVERSAL_ERROR  diagnosticType  Node  args  body  child  cur  curNode  fnName  n  next  node  parent  root  scopeRoot  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  name  sourceName  src  Deque  cfgs  scopeRoots  scopes  
[BugLab_Variable_Misuse]^return src == null ? "" : name;^626^^^^^624^627^return name == null ? "" : name;^[CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback  [METHOD] getSourceName [RETURN_TYPE] String   Node n [VARIABLES] ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  anonymous  include  DiagnosticType  NODE_TRAVERSAL_ERROR  diagnosticType  Node  args  body  child  cur  curNode  fnName  n  next  node  parent  root  scopeRoot  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  name  sourceName  src  Deque  cfgs  scopeRoots  scopes  
[BugLab_Wrong_Operator]^return name != null ? "" : name;^626^^^^^624^627^return name == null ? "" : name;^[CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback  [METHOD] getSourceName [RETURN_TYPE] String   Node n [VARIABLES] ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  anonymous  include  DiagnosticType  NODE_TRAVERSAL_ERROR  diagnosticType  Node  args  body  child  cur  curNode  fnName  n  next  node  parent  root  scopeRoot  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  name  sourceName  src  Deque  cfgs  scopeRoots  scopes  
[BugLab_Wrong_Literal]^return false;^131^^^^^129^132^return true;^[CLASS] AbstractPostOrderCallback  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node n Node parent [VARIABLES] boolean  NodeTraversal  nodeTraversal  Node  n  parent  
[BugLab_Variable_Misuse]^return n == null || parent.getType (  )  != Token.FUNCTION || n == parent.getFirstChild (  ) ;^144^145^^^^140^146^return parent == null || parent.getType (  )  != Token.FUNCTION || n == parent.getFirstChild (  ) ;^[CLASS] AbstractShallowCallback  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node n Node parent [VARIABLES] boolean  NodeTraversal  nodeTraversal  Node  n  parent  
[BugLab_Argument_Swapping]^return n == parentull || parent.getType (  )  != Token.FUNCTION || n == parent.getFirstChild (  ) ;^144^145^^^^140^146^return parent == null || parent.getType (  )  != Token.FUNCTION || n == parent.getFirstChild (  ) ;^[CLASS] AbstractShallowCallback  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node n Node parent [VARIABLES] boolean  NodeTraversal  nodeTraversal  Node  n  parent  
[BugLab_Wrong_Operator]^return parent == null && parent.getType (  )  != Token.FUNCTION || n == parent.getFirstChild (  ) ;^144^145^^^^140^146^return parent == null || parent.getType (  )  != Token.FUNCTION || n == parent.getFirstChild (  ) ;^[CLASS] AbstractShallowCallback  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node n Node parent [VARIABLES] boolean  NodeTraversal  nodeTraversal  Node  n  parent  
[BugLab_Wrong_Operator]^return parent != null || parent.getType (  )  != Token.FUNCTION || n == parent.getFirstChild (  ) ;^144^145^^^^140^146^return parent == null || parent.getType (  )  != Token.FUNCTION || n == parent.getFirstChild (  ) ;^[CLASS] AbstractShallowCallback  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node n Node parent [VARIABLES] boolean  NodeTraversal  nodeTraversal  Node  n  parent  
[BugLab_Wrong_Operator]^return parent == null || parent.getType (  )  == Token.FUNCTION || n == parent.getFirstChild (  ) ;^144^145^^^^140^146^return parent == null || parent.getType (  )  != Token.FUNCTION || n == parent.getFirstChild (  ) ;^[CLASS] AbstractShallowCallback  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node n Node parent [VARIABLES] boolean  NodeTraversal  nodeTraversal  Node  n  parent  
[BugLab_Wrong_Operator]^return parent == null || parent.getType (  )  != Token.FUNCTION || n != parent.getFirstChild (  ) ;^144^145^^^^140^146^return parent == null || parent.getType (  )  != Token.FUNCTION || n == parent.getFirstChild (  ) ;^[CLASS] AbstractShallowCallback  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node n Node parent [VARIABLES] boolean  NodeTraversal  nodeTraversal  Node  n  parent  
[BugLab_Variable_Misuse]^n == n.getFirstChild (  ) ;^145^^^^^140^146^n == parent.getFirstChild (  ) ;^[CLASS] AbstractShallowCallback  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node n Node parent [VARIABLES] boolean  NodeTraversal  nodeTraversal  Node  n  parent  
[BugLab_Variable_Misuse]^return n == null || NodeUtil.isControlStructure ( parent ) || NodeUtil.isStatementBlock ( parent ) ;^157^158^^^^155^159^return parent == null || NodeUtil.isControlStructure ( parent ) || NodeUtil.isStatementBlock ( parent ) ;^[CLASS] AbstractShallowStatementCallback  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node n Node parent [VARIABLES] boolean  NodeTraversal  nodeTraversal  Node  n  parent  
[BugLab_Wrong_Operator]^return parent == null && NodeUtil.isControlStructure ( parent ) || NodeUtil.isStatementBlock ( parent ) ;^157^158^^^^155^159^return parent == null || NodeUtil.isControlStructure ( parent ) || NodeUtil.isStatementBlock ( parent ) ;^[CLASS] AbstractShallowStatementCallback  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node n Node parent [VARIABLES] boolean  NodeTraversal  nodeTraversal  Node  n  parent  
[BugLab_Wrong_Operator]^return parent != null || NodeUtil.isControlStructure ( parent ) || NodeUtil.isStatementBlock ( parent ) ;^157^158^^^^155^159^return parent == null || NodeUtil.isControlStructure ( parent ) || NodeUtil.isStatementBlock ( parent ) ;^[CLASS] AbstractShallowStatementCallback  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node n Node parent [VARIABLES] boolean  NodeTraversal  nodeTraversal  Node  n  parent  
[BugLab_Variable_Misuse]^|| NodeUtil.isStatementBlock ( n ) ;^158^^^^^155^159^|| NodeUtil.isStatementBlock ( parent ) ;^[CLASS] AbstractShallowStatementCallback  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node n Node parent [VARIABLES] boolean  NodeTraversal  nodeTraversal  Node  n  parent  
[BugLab_Wrong_Literal]^this ( nodeTypes, false ) ;^176^^^^^175^177^this ( nodeTypes, true ) ;^[CLASS] AbstractNodeTypePruningCallback  [METHOD] <init> [RETURN_TYPE] Set)   Integer> nodeTypes [VARIABLES] Set  nodeTypes  boolean  include  
[BugLab_Variable_Misuse]^return include == parentodeTypes.contains ( n.getType (  )  ) ;^192^^^^^190^193^return include == nodeTypes.contains ( n.getType (  )  ) ;^[CLASS] AbstractNodeTypePruningCallback  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node n Node parent [VARIABLES] Set  nodeTypes  boolean  include  NodeTraversal  nodeTraversal  Node  n  parent  
[BugLab_Argument_Swapping]^return include == nodeTypesodeTypes.contains ( n.getType (  )  ) ;^192^^^^^190^193^return include == nodeTypes.contains ( n.getType (  )  ) ;^[CLASS] AbstractNodeTypePruningCallback  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node n Node parent [VARIABLES] Set  nodeTypes  boolean  include  NodeTraversal  nodeTraversal  Node  n  parent  
[BugLab_Argument_Swapping]^return nodeTypes == include.contains ( n.getType (  )  ) ;^192^^^^^190^193^return include == nodeTypes.contains ( n.getType (  )  ) ;^[CLASS] AbstractNodeTypePruningCallback  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node n Node parent [VARIABLES] Set  nodeTypes  boolean  include  NodeTraversal  nodeTraversal  Node  n  parent  
[BugLab_Wrong_Operator]^return include != nodeTypes.contains ( n.getType (  )  ) ;^192^^^^^190^193^return include == nodeTypes.contains ( n.getType (  )  ) ;^[CLASS] AbstractNodeTypePruningCallback  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node n Node parent [VARIABLES] Set  nodeTypes  boolean  include  NodeTraversal  nodeTraversal  Node  n  parent  
[BugLab_Argument_Swapping]^return include == n.contains ( nodeTypes.getType (  )  ) ;^192^^^^^190^193^return include == nodeTypes.contains ( n.getType (  )  ) ;^[CLASS] AbstractNodeTypePruningCallback  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node n Node parent [VARIABLES] Set  nodeTypes  boolean  include  NodeTraversal  nodeTraversal  Node  n  parent  
