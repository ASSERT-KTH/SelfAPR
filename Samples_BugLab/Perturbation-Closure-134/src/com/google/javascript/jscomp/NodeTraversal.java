[buglab_swap_variables]^this ( cb, compiler, new SyntacticScopeCreator ( compiler )  ) ;^200^^^^^199^201^this ( compiler, cb, new SyntacticScopeCreator ( compiler )  ) ;^[CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback  [METHOD] <init> [RETURN_TYPE] NodeTraversal$Callback)   AbstractCompiler compiler Callback cb [VARIABLES] ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  ScopeCreator  scopeCreator  String  MISSING_SOURCE  sourceName  Deque  cfgs  scopeRoots  scopes  
[buglab_swap_variables]^this (  cb, new SyntacticScopeCreator ( compiler )  ) ;^200^^^^^199^201^this ( compiler, cb, new SyntacticScopeCreator ( compiler )  ) ;^[CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback  [METHOD] <init> [RETURN_TYPE] NodeTraversal$Callback)   AbstractCompiler compiler Callback cb [VARIABLES] ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  ScopeCreator  scopeCreator  String  MISSING_SOURCE  sourceName  Deque  cfgs  scopeRoots  scopes  
[buglab_swap_variables]^this ( compiler,  new SyntacticScopeCreator ( compiler )  ) ;^200^^^^^199^201^this ( compiler, cb, new SyntacticScopeCreator ( compiler )  ) ;^[CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback  [METHOD] <init> [RETURN_TYPE] NodeTraversal$Callback)   AbstractCompiler compiler Callback cb [VARIABLES] ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  ScopeCreator  scopeCreator  String  MISSING_SOURCE  sourceName  Deque  cfgs  scopeRoots  scopes  
[buglab_swap_variables]^return n == parentull || parent.getType (  )  != Token.FUNCTION || n == parent.getFirstChild (  ) ;^144^145^^^^140^146^return parent == null || parent.getType (  )  != Token.FUNCTION || n == parent.getFirstChild (  ) ;^[CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node n Node parent [VARIABLES] ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  NodeTraversal  nodeTraversal  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  ScopeCreator  scopeCreator  String  MISSING_SOURCE  sourceName  Deque  cfgs  scopeRoots  scopes  
[buglab_swap_variables]^return include == nodeTypesodeTypes.contains ( n.getType (  )  ) ;^192^^^^^190^193^return include == nodeTypes.contains ( n.getType (  )  ) ;^[CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node n Node parent [VARIABLES] ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  NodeTraversal  nodeTraversal  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  ScopeCreator  scopeCreator  String  MISSING_SOURCE  sourceName  Deque  cfgs  scopeRoots  scopes  
[buglab_swap_variables]^return nodeTypes == include.contains ( n.getType (  )  ) ;^192^^^^^190^193^return include == nodeTypes.contains ( n.getType (  )  ) ;^[CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node n Node parent [VARIABLES] ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  NodeTraversal  nodeTraversal  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  ScopeCreator  scopeCreator  String  MISSING_SOURCE  sourceName  Deque  cfgs  scopeRoots  scopes  
[buglab_swap_variables]^return include == n.contains ( nodeTypes.getType (  )  ) ;^192^^^^^190^193^return include == nodeTypes.contains ( n.getType (  )  ) ;^[CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node n Node parent [VARIABLES] ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  NodeTraversal  nodeTraversal  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  ScopeCreator  scopeCreator  String  MISSING_SOURCE  sourceName  Deque  cfgs  scopeRoots  scopes  
[buglab_swap_variables]^message = curNode.getMessage (  )  + "\n" + formatNodeContext ( "Node", unexpectedException )  + ( curNode == null ?^227^228^229^230^^218^235^message = unexpectedException.getMessage (  )  + "\n" + formatNodeContext ( "Node", curNode )  + ( curNode == null ?^[CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback  [METHOD] throwUnexpectedException [RETURN_TYPE] void   Exception unexpectedException [VARIABLES] ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  ScopeCreator  scopeCreator  String  MISSING_SOURCE  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  
[buglab_swap_variables]^message = unexpectedException.getMessage (  )  + "\n" + formatNodeContext ( "Node" )  + ( curNode == null ?^227^228^229^230^^218^235^message = unexpectedException.getMessage (  )  + "\n" + formatNodeContext ( "Node", curNode )  + ( curNode == null ?^[CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback  [METHOD] throwUnexpectedException [RETURN_TYPE] void   Exception unexpectedException [VARIABLES] ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  ScopeCreator  scopeCreator  String  MISSING_SOURCE  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  
[buglab_swap_variables]^compiler.throwInternalError (  unexpectedException ) ;^234^^^^^218^235^compiler.throwInternalError ( message, unexpectedException ) ;^[CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback  [METHOD] throwUnexpectedException [RETURN_TYPE] void   Exception unexpectedException [VARIABLES] ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  ScopeCreator  scopeCreator  String  MISSING_SOURCE  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  
[buglab_swap_variables]^compiler.throwInternalError ( message ) ;^234^^^^^218^235^compiler.throwInternalError ( message, unexpectedException ) ;^[CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback  [METHOD] throwUnexpectedException [RETURN_TYPE] void   Exception unexpectedException [VARIABLES] ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  ScopeCreator  scopeCreator  String  MISSING_SOURCE  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  
[buglab_swap_variables]^return "  " + n + " ( " + label.toString ( false, false, false )  + " ) : " + formatNodePosition ( n ) ;^241^242^^^^237^243^return "  " + label + " ( " + n.toString ( false, false, false )  + " ) : " + formatNodePosition ( n ) ;^[CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback  [METHOD] formatNodeContext [RETURN_TYPE] String   String label Node n [VARIABLES] ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  
[buglab_swap_variables]^Preconditions.checkState ( scopeRoot.getParent (  )  == root ) ;^278^^^^^264^286^Preconditions.checkState ( root.getParent (  )  == scopeRoot ) ;^[CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback  [METHOD] traverseRoots [RETURN_TYPE] void   Node> roots [VARIABLES] ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  scopeRoot  ScopeCreator  scopeCreator  List  roots  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  
[buglab_swap_variables]^traverseBranch ( scopeRoot, root ) ;^279^^^^^264^286^traverseBranch ( root, scopeRoot ) ;^[CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback  [METHOD] traverseRoots [RETURN_TYPE] void   Node> roots [VARIABLES] ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  scopeRoot  ScopeCreator  scopeCreator  List  roots  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  
[buglab_swap_variables]^traverseBranch (  scopeRoot ) ;^279^^^^^264^286^traverseBranch ( root, scopeRoot ) ;^[CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback  [METHOD] traverseRoots [RETURN_TYPE] void   Node> roots [VARIABLES] ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  scopeRoot  ScopeCreator  scopeCreator  List  roots  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  
[buglab_swap_variables]^traverseBranch ( root ) ;^279^^^^^264^286^traverseBranch ( root, scopeRoot ) ;^[CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback  [METHOD] traverseRoots [RETURN_TYPE] void   Node> roots [VARIABLES] ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  scopeRoot  ScopeCreator  scopeCreator  List  roots  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  
[buglab_swap_variables]^String src = compiler.getSourceLine ( lineNumber, sourceName ) ;^297^^^^^290^303^String src = compiler.getSourceLine ( sourceName, lineNumber ) ;^[CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback  [METHOD] formatNodePosition [RETURN_TYPE] String   Node n [VARIABLES] ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  scopeRoot  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  src  Deque  cfgs  scopeRoots  scopes  int  columnNumber  lineNumber  
[buglab_swap_variables]^String src = compiler.getSourceLine ( sourceName ) ;^297^^^^^290^303^String src = compiler.getSourceLine ( sourceName, lineNumber ) ;^[CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback  [METHOD] formatNodePosition [RETURN_TYPE] String   Node n [VARIABLES] ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  scopeRoot  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  src  Deque  cfgs  scopeRoots  scopes  int  columnNumber  lineNumber  
[buglab_swap_variables]^String src = lineNumber.getSourceLine ( sourceName, compiler ) ;^297^^^^^290^303^String src = compiler.getSourceLine ( sourceName, lineNumber ) ;^[CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback  [METHOD] formatNodePosition [RETURN_TYPE] String   Node n [VARIABLES] ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  scopeRoot  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  src  Deque  cfgs  scopeRoots  scopes  int  columnNumber  lineNumber  
[buglab_swap_variables]^String src = sourceName.getSourceLine ( compiler, lineNumber ) ;^297^^^^^290^303^String src = compiler.getSourceLine ( sourceName, lineNumber ) ;^[CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback  [METHOD] formatNodePosition [RETURN_TYPE] String   Node n [VARIABLES] ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  scopeRoot  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  src  Deque  cfgs  scopeRoots  scopes  int  columnNumber  lineNumber  
[buglab_swap_variables]^String src = compiler.getSourceLine (  lineNumber ) ;^297^^^^^290^303^String src = compiler.getSourceLine ( sourceName, lineNumber ) ;^[CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback  [METHOD] formatNodePosition [RETURN_TYPE] String   Node n [VARIABLES] ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  scopeRoot  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  src  Deque  cfgs  scopeRoots  scopes  int  columnNumber  lineNumber  
[buglab_swap_variables]^return sourceName + ":" + src + ":" + columnNumber + "\n" + lineNumber + "\n";^301^302^^^^290^303^return sourceName + ":" + lineNumber + ":" + columnNumber + "\n" + src + "\n";^[CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback  [METHOD] formatNodePosition [RETURN_TYPE] String   Node n [VARIABLES] ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  scopeRoot  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  src  Deque  cfgs  scopeRoots  scopes  int  columnNumber  lineNumber  
[buglab_swap_variables]^return columnNumber + ":" + lineNumber + ":" + sourceName + "\n" + src + "\n";^301^302^^^^290^303^return sourceName + ":" + lineNumber + ":" + columnNumber + "\n" + src + "\n";^[CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback  [METHOD] formatNodePosition [RETURN_TYPE] String   Node n [VARIABLES] ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  scopeRoot  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  src  Deque  cfgs  scopeRoots  scopes  int  columnNumber  lineNumber  
[buglab_swap_variables]^return src + ":" + lineNumber + ":" + columnNumber + "\n" + sourceName + "\n";^301^302^^^^290^303^return sourceName + ":" + lineNumber + ":" + columnNumber + "\n" + src + "\n";^[CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback  [METHOD] formatNodePosition [RETURN_TYPE] String   Node n [VARIABLES] ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  scopeRoot  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  src  Deque  cfgs  scopeRoots  scopes  int  columnNumber  lineNumber  
[buglab_swap_variables]^traverseWithScope ( s, n ) ;^340^^^^^324^342^traverseWithScope ( n, s ) ;^[CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback  [METHOD] traverseAtScope [RETURN_TYPE] void   Scope s [VARIABLES] ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  Scope  s  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  args  body  curNode  n  parent  root  scopeRoot  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  src  Deque  cfgs  scopeRoots  scopes  
[buglab_swap_variables]^traverseWithScope (  s ) ;^340^^^^^324^342^traverseWithScope ( n, s ) ;^[CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback  [METHOD] traverseAtScope [RETURN_TYPE] void   Scope s [VARIABLES] ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  Scope  s  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  args  body  curNode  n  parent  root  scopeRoot  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  src  Deque  cfgs  scopeRoots  scopes  
[buglab_swap_variables]^traverseWithScope ( n ) ;^340^^^^^324^342^traverseWithScope ( n, s ) ;^[CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback  [METHOD] traverseAtScope [RETURN_TYPE] void   Scope s [VARIABLES] ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  Scope  s  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  args  body  curNode  n  parent  root  scopeRoot  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  src  Deque  cfgs  scopeRoots  scopes  
[buglab_swap_variables]^traverseBranch ( n, args ) ;^335^^^^^324^342^traverseBranch ( args, n ) ;^[CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback  [METHOD] traverseAtScope [RETURN_TYPE] void   Scope s [VARIABLES] ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  Scope  s  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  args  body  curNode  n  parent  root  scopeRoot  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  src  Deque  cfgs  scopeRoots  scopes  
[buglab_swap_variables]^traverseBranch (  n ) ;^335^^^^^324^342^traverseBranch ( args, n ) ;^[CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback  [METHOD] traverseAtScope [RETURN_TYPE] void   Scope s [VARIABLES] ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  Scope  s  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  args  body  curNode  n  parent  root  scopeRoot  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  src  Deque  cfgs  scopeRoots  scopes  
[buglab_swap_variables]^traverseBranch ( args ) ;^335^^^^^324^342^traverseBranch ( args, n ) ;^[CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback  [METHOD] traverseAtScope [RETURN_TYPE] void   Scope s [VARIABLES] ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  Scope  s  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  args  body  curNode  n  parent  root  scopeRoot  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  src  Deque  cfgs  scopeRoots  scopes  
[buglab_swap_variables]^traverseBranch ( n, body ) ;^336^^^^^324^342^traverseBranch ( body, n ) ;^[CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback  [METHOD] traverseAtScope [RETURN_TYPE] void   Scope s [VARIABLES] ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  Scope  s  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  args  body  curNode  n  parent  root  scopeRoot  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  src  Deque  cfgs  scopeRoots  scopes  
[buglab_swap_variables]^traverseBranch (  n ) ;^336^^^^^324^342^traverseBranch ( body, n ) ;^[CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback  [METHOD] traverseAtScope [RETURN_TYPE] void   Scope s [VARIABLES] ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  Scope  s  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  args  body  curNode  n  parent  root  scopeRoot  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  src  Deque  cfgs  scopeRoots  scopes  
[buglab_swap_variables]^traverseBranch ( body ) ;^336^^^^^324^342^traverseBranch ( body, n ) ;^[CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback  [METHOD] traverseAtScope [RETURN_TYPE] void   Scope s [VARIABLES] ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  Scope  s  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  args  body  curNode  n  parent  root  scopeRoot  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  src  Deque  cfgs  scopeRoots  scopes  
[buglab_swap_variables]^traverseBranch ( parent, node ) ;^362^^^^^354^364^traverseBranch ( node, parent ) ;^[CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback  [METHOD] traverseInnerNode [RETURN_TYPE] void   Node node Node parent Scope refinedScope [VARIABLES] ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  Scope  refinedScope  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  args  body  curNode  n  node  parent  root  scopeRoot  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  src  Deque  cfgs  scopeRoots  scopes  
[buglab_swap_variables]^traverseBranch (  parent ) ;^362^^^^^354^364^traverseBranch ( node, parent ) ;^[CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback  [METHOD] traverseInnerNode [RETURN_TYPE] void   Node node Node parent Scope refinedScope [VARIABLES] ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  Scope  refinedScope  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  args  body  curNode  n  node  parent  root  scopeRoot  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  src  Deque  cfgs  scopeRoots  scopes  
[buglab_swap_variables]^traverseBranch ( node ) ;^362^^^^^354^364^traverseBranch ( node, parent ) ;^[CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback  [METHOD] traverseInnerNode [RETURN_TYPE] void   Node node Node parent Scope refinedScope [VARIABLES] ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  Scope  refinedScope  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  args  body  curNode  n  node  parent  root  scopeRoot  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  src  Deque  cfgs  scopeRoots  scopes  
[buglab_swap_variables]^traverseBranch ( parent, node ) ;^359^^^^^354^364^traverseBranch ( node, parent ) ;^[CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback  [METHOD] traverseInnerNode [RETURN_TYPE] void   Node node Node parent Scope refinedScope [VARIABLES] ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  Scope  refinedScope  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  args  body  curNode  n  node  parent  root  scopeRoot  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  src  Deque  cfgs  scopeRoots  scopes  
[buglab_swap_variables]^traverseBranch (  parent ) ;^359^^^^^354^364^traverseBranch ( node, parent ) ;^[CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback  [METHOD] traverseInnerNode [RETURN_TYPE] void   Node node Node parent Scope refinedScope [VARIABLES] ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  Scope  refinedScope  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  args  body  curNode  n  node  parent  root  scopeRoot  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  src  Deque  cfgs  scopeRoots  scopes  
[buglab_swap_variables]^traverseBranch ( node ) ;^359^^^^^354^364^traverseBranch ( node, parent ) ;^[CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback  [METHOD] traverseInnerNode [RETURN_TYPE] void   Node node Node parent Scope refinedScope [VARIABLES] ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  Scope  refinedScope  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  args  body  curNode  n  node  parent  root  scopeRoot  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  src  Deque  cfgs  scopeRoots  scopes  
[buglab_swap_variables]^return sourceName.getInput ( compiler ) ;^404^^^^^403^405^return compiler.getInput ( sourceName ) ;^[CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback  [METHOD] getInput [RETURN_TYPE] CompilerInput   [VARIABLES] ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  args  body  cur  curNode  n  node  parent  root  scopeRoot  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  src  Deque  cfgs  scopeRoots  scopes  
[buglab_swap_variables]^NodeTraversal t = new NodeTraversal ( cb, compiler ) ;^425^^^^^423^427^NodeTraversal t = new NodeTraversal ( compiler, cb ) ;^[CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback  [METHOD] traverse [RETURN_TYPE] void   AbstractCompiler compiler Node root Callback cb [VARIABLES] ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  NodeTraversal  t  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  args  body  cur  curNode  n  node  parent  root  scopeRoot  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  src  Deque  cfgs  scopeRoots  scopes  
[buglab_swap_variables]^NodeTraversal t = new NodeTraversal (  cb ) ;^425^^^^^423^427^NodeTraversal t = new NodeTraversal ( compiler, cb ) ;^[CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback  [METHOD] traverse [RETURN_TYPE] void   AbstractCompiler compiler Node root Callback cb [VARIABLES] ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  NodeTraversal  t  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  args  body  cur  curNode  n  node  parent  root  scopeRoot  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  src  Deque  cfgs  scopeRoots  scopes  
[buglab_swap_variables]^NodeTraversal t = new NodeTraversal ( compiler ) ;^425^^^^^423^427^NodeTraversal t = new NodeTraversal ( compiler, cb ) ;^[CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback  [METHOD] traverse [RETURN_TYPE] void   AbstractCompiler compiler Node root Callback cb [VARIABLES] ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  NodeTraversal  t  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  args  body  cur  curNode  n  node  parent  root  scopeRoot  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  src  Deque  cfgs  scopeRoots  scopes  
[buglab_swap_variables]^NodeTraversal t = new NodeTraversal ( cb, compiler ) ;^434^^^^^432^436^NodeTraversal t = new NodeTraversal ( compiler, cb ) ;^[CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback  [METHOD] traverseRoots [RETURN_TYPE] void   AbstractCompiler compiler Node> roots Callback cb [VARIABLES] ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  NodeTraversal  t  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  args  body  cur  curNode  n  node  parent  root  scopeRoot  ScopeCreator  scopeCreator  List  roots  String  MISSING_SOURCE  label  message  sourceName  src  Deque  cfgs  scopeRoots  scopes  
[buglab_swap_variables]^NodeTraversal t = new NodeTraversal (  cb ) ;^434^^^^^432^436^NodeTraversal t = new NodeTraversal ( compiler, cb ) ;^[CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback  [METHOD] traverseRoots [RETURN_TYPE] void   AbstractCompiler compiler Node> roots Callback cb [VARIABLES] ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  NodeTraversal  t  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  args  body  cur  curNode  n  node  parent  root  scopeRoot  ScopeCreator  scopeCreator  List  roots  String  MISSING_SOURCE  label  message  sourceName  src  Deque  cfgs  scopeRoots  scopes  
[buglab_swap_variables]^NodeTraversal t = new NodeTraversal ( compiler ) ;^434^^^^^432^436^NodeTraversal t = new NodeTraversal ( compiler, cb ) ;^[CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback  [METHOD] traverseRoots [RETURN_TYPE] void   AbstractCompiler compiler Node> roots Callback cb [VARIABLES] ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  NodeTraversal  t  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  args  body  cur  curNode  n  node  parent  root  scopeRoot  ScopeCreator  scopeCreator  List  roots  String  MISSING_SOURCE  label  message  sourceName  src  Deque  cfgs  scopeRoots  scopes  
[buglab_swap_variables]^if  ( !callback.shouldTraverse ( this, parent, n )  )  return;^449^^^^^434^464^if  ( !callback.shouldTraverse ( this, n, parent )  )  return;^[CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback  [METHOD] traverseBranch [RETURN_TYPE] void   Node n Node parent [VARIABLES] ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  args  body  child  cur  curNode  n  next  node  parent  root  scopeRoot  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  src  Deque  cfgs  scopeRoots  scopes  int  type  
[buglab_swap_variables]^if  ( !callback.shouldTraverse ( this,  parent )  )  return;^449^^^^^434^464^if  ( !callback.shouldTraverse ( this, n, parent )  )  return;^[CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback  [METHOD] traverseBranch [RETURN_TYPE] void   Node n Node parent [VARIABLES] ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  args  body  child  cur  curNode  n  next  node  parent  root  scopeRoot  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  src  Deque  cfgs  scopeRoots  scopes  int  type  
[buglab_swap_variables]^if  ( !callback.shouldTraverse ( this, n )  )  return;^449^^^^^434^464^if  ( !callback.shouldTraverse ( this, n, parent )  )  return;^[CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback  [METHOD] traverseBranch [RETURN_TYPE] void   Node n Node parent [VARIABLES] ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  args  body  child  cur  curNode  n  next  node  parent  root  scopeRoot  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  src  Deque  cfgs  scopeRoots  scopes  int  type  
[buglab_swap_variables]^for  ( Node n = child.getFirstChild (  ) ; child != null;  )  {^466^^^^^451^481^for  ( Node child = n.getFirstChild (  ) ; child != null;  )  {^[CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback  [METHOD] traverseBranch [RETURN_TYPE] void   Node n Node parent [VARIABLES] ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  args  body  child  cur  curNode  n  next  node  parent  root  scopeRoot  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  src  Deque  cfgs  scopeRoots  scopes  int  type  
[buglab_swap_variables]^traverseBranch ( n, child ) ;^470^^^^^455^485^traverseBranch ( child, n ) ;^[CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback  [METHOD] traverseBranch [RETURN_TYPE] void   Node n Node parent [VARIABLES] ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  args  body  child  cur  curNode  n  next  node  parent  root  scopeRoot  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  src  Deque  cfgs  scopeRoots  scopes  int  type  
[buglab_swap_variables]^traverseBranch (  n ) ;^470^^^^^455^485^traverseBranch ( child, n ) ;^[CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback  [METHOD] traverseBranch [RETURN_TYPE] void   Node n Node parent [VARIABLES] ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  args  body  child  cur  curNode  n  next  node  parent  root  scopeRoot  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  src  Deque  cfgs  scopeRoots  scopes  int  type  
[buglab_swap_variables]^traverseBranch ( child ) ;^470^^^^^455^485^traverseBranch ( child, n ) ;^[CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback  [METHOD] traverseBranch [RETURN_TYPE] void   Node n Node parent [VARIABLES] ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  args  body  child  cur  curNode  n  next  node  parent  root  scopeRoot  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  src  Deque  cfgs  scopeRoots  scopes  int  type  
[buglab_swap_variables]^traverseFunction ( parent, n ) ;^462^^^^^447^477^traverseFunction ( n, parent ) ;^[CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback  [METHOD] traverseBranch [RETURN_TYPE] void   Node n Node parent [VARIABLES] ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  args  body  child  cur  curNode  n  next  node  parent  root  scopeRoot  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  src  Deque  cfgs  scopeRoots  scopes  int  type  
[buglab_swap_variables]^traverseFunction (  parent ) ;^462^^^^^447^477^traverseFunction ( n, parent ) ;^[CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback  [METHOD] traverseBranch [RETURN_TYPE] void   Node n Node parent [VARIABLES] ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  args  body  child  cur  curNode  n  next  node  parent  root  scopeRoot  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  src  Deque  cfgs  scopeRoots  scopes  int  type  
[buglab_swap_variables]^traverseFunction ( n ) ;^462^^^^^447^477^traverseFunction ( n, parent ) ;^[CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback  [METHOD] traverseBranch [RETURN_TYPE] void   Node n Node parent [VARIABLES] ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  args  body  child  cur  curNode  n  next  node  parent  root  scopeRoot  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  src  Deque  cfgs  scopeRoots  scopes  int  type  
[buglab_swap_variables]^callback.visit ( this, parent, n ) ;^477^^^^^462^492^callback.visit ( this, n, parent ) ;^[CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback  [METHOD] traverseBranch [RETURN_TYPE] void   Node n Node parent [VARIABLES] ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  args  body  child  cur  curNode  n  next  node  parent  root  scopeRoot  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  src  Deque  cfgs  scopeRoots  scopes  int  type  
[buglab_swap_variables]^callback.visit ( this,  parent ) ;^477^^^^^462^492^callback.visit ( this, n, parent ) ;^[CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback  [METHOD] traverseBranch [RETURN_TYPE] void   Node n Node parent [VARIABLES] ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  args  body  child  cur  curNode  n  next  node  parent  root  scopeRoot  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  src  Deque  cfgs  scopeRoots  scopes  int  type  
[buglab_swap_variables]^callback.visit ( this, n ) ;^477^^^^^462^492^callback.visit ( this, n, parent ) ;^[CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback  [METHOD] traverseBranch [RETURN_TYPE] void   Node n Node parent [VARIABLES] ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  args  body  child  cur  curNode  n  next  node  parent  root  scopeRoot  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  src  Deque  cfgs  scopeRoots  scopes  int  type  
[buglab_swap_variables]^boolean anonymous = n != parentull && NodeUtil.isFunctionAnonymous ( n ) ;^489^^^^^474^504^boolean anonymous = parent != null && NodeUtil.isFunctionAnonymous ( n ) ;^[CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback  [METHOD] traverseFunction [RETURN_TYPE] void   Node n Node parent [VARIABLES] ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  anonymous  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  args  body  child  cur  curNode  fnName  n  next  node  parent  root  scopeRoot  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  src  Deque  cfgs  scopeRoots  scopes  
[buglab_swap_variables]^traverseBranch ( n, fnName ) ;^493^^^^^478^508^traverseBranch ( fnName, n ) ;^[CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback  [METHOD] traverseFunction [RETURN_TYPE] void   Node n Node parent [VARIABLES] ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  anonymous  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  args  body  child  cur  curNode  fnName  n  next  node  parent  root  scopeRoot  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  src  Deque  cfgs  scopeRoots  scopes  
[buglab_swap_variables]^traverseBranch (  n ) ;^493^^^^^478^508^traverseBranch ( fnName, n ) ;^[CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback  [METHOD] traverseFunction [RETURN_TYPE] void   Node n Node parent [VARIABLES] ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  anonymous  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  args  body  child  cur  curNode  fnName  n  next  node  parent  root  scopeRoot  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  src  Deque  cfgs  scopeRoots  scopes  
[buglab_swap_variables]^traverseBranch ( fnName ) ;^493^^^^^478^508^traverseBranch ( fnName, n ) ;^[CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback  [METHOD] traverseFunction [RETURN_TYPE] void   Node n Node parent [VARIABLES] ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  anonymous  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  args  body  child  cur  curNode  fnName  n  next  node  parent  root  scopeRoot  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  src  Deque  cfgs  scopeRoots  scopes  
[buglab_swap_variables]^traverseBranch ( n, fnName ) ;^501^^^^^486^516^traverseBranch ( fnName, n ) ;^[CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback  [METHOD] traverseFunction [RETURN_TYPE] void   Node n Node parent [VARIABLES] ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  anonymous  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  args  body  child  cur  curNode  fnName  n  next  node  parent  root  scopeRoot  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  src  Deque  cfgs  scopeRoots  scopes  
[buglab_swap_variables]^traverseBranch (  n ) ;^501^^^^^486^516^traverseBranch ( fnName, n ) ;^[CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback  [METHOD] traverseFunction [RETURN_TYPE] void   Node n Node parent [VARIABLES] ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  anonymous  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  args  body  child  cur  curNode  fnName  n  next  node  parent  root  scopeRoot  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  src  Deque  cfgs  scopeRoots  scopes  
[buglab_swap_variables]^traverseBranch ( fnName ) ;^501^^^^^486^516^traverseBranch ( fnName, n ) ;^[CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback  [METHOD] traverseFunction [RETURN_TYPE] void   Node n Node parent [VARIABLES] ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  anonymous  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  args  body  child  cur  curNode  fnName  n  next  node  parent  root  scopeRoot  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  src  Deque  cfgs  scopeRoots  scopes  
[buglab_swap_variables]^traverseBranch ( n, args ) ;^508^^^^^493^523^traverseBranch ( args, n ) ;^[CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback  [METHOD] traverseFunction [RETURN_TYPE] void   Node n Node parent [VARIABLES] ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  anonymous  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  args  body  child  cur  curNode  fnName  n  next  node  parent  root  scopeRoot  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  src  Deque  cfgs  scopeRoots  scopes  
[buglab_swap_variables]^traverseBranch (  n ) ;^508^^^^^493^523^traverseBranch ( args, n ) ;^[CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback  [METHOD] traverseFunction [RETURN_TYPE] void   Node n Node parent [VARIABLES] ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  anonymous  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  args  body  child  cur  curNode  fnName  n  next  node  parent  root  scopeRoot  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  src  Deque  cfgs  scopeRoots  scopes  
[buglab_swap_variables]^traverseBranch ( args ) ;^508^^^^^493^523^traverseBranch ( args, n ) ;^[CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback  [METHOD] traverseFunction [RETURN_TYPE] void   Node n Node parent [VARIABLES] ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  anonymous  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  args  body  child  cur  curNode  fnName  n  next  node  parent  root  scopeRoot  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  src  Deque  cfgs  scopeRoots  scopes  
[buglab_swap_variables]^traverseBranch ( n, body ) ;^513^^^^^498^528^traverseBranch ( body, n ) ;^[CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback  [METHOD] traverseFunction [RETURN_TYPE] void   Node n Node parent [VARIABLES] ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  anonymous  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  args  body  child  cur  curNode  fnName  n  next  node  parent  root  scopeRoot  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  src  Deque  cfgs  scopeRoots  scopes  
[buglab_swap_variables]^traverseBranch (  n ) ;^513^^^^^498^528^traverseBranch ( body, n ) ;^[CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback  [METHOD] traverseFunction [RETURN_TYPE] void   Node n Node parent [VARIABLES] ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  anonymous  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  args  body  child  cur  curNode  fnName  n  next  node  parent  root  scopeRoot  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  src  Deque  cfgs  scopeRoots  scopes  
[buglab_swap_variables]^traverseBranch ( body ) ;^513^^^^^498^528^traverseBranch ( body, n ) ;^[CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback  [METHOD] traverseFunction [RETURN_TYPE] void   Node n Node parent [VARIABLES] ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  anonymous  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  args  body  child  cur  curNode  fnName  n  next  node  parent  root  scopeRoot  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  src  Deque  cfgs  scopeRoots  scopes  
[buglab_swap_variables]^if  ( scopeRoots.size (  )  + scopes.size (  )  < 2 )  {^521^^^^^520^530^if  ( scopes.size (  )  + scopeRoots.size (  )  < 2 )  {^[CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback  [METHOD] getEnclosingFunction [RETURN_TYPE] Node   [VARIABLES] ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  anonymous  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  args  body  child  cur  curNode  fnName  n  next  node  parent  root  scopeRoot  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  src  Deque  cfgs  scopeRoots  scopes  
[buglab_swap_variables]^if  ( scopeRootsRoots.isEmpty (  )  )  {^568^^^^^566^580^if  ( scopeRoots.isEmpty (  )  )  {^[CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback  [METHOD] getScope [RETURN_TYPE] Scope   [VARIABLES] ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  anonymous  include  Scope  scope  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  args  body  child  cur  curNode  fnName  n  next  node  parent  root  scopeRoot  ScopeCreator  scopeCreator  Iterator  it  String  MISSING_SOURCE  label  message  sourceName  src  Deque  cfgs  scopeRoots  scopes  
[buglab_swap_variables]^if  ( scope.isEmpty (  )  )  {^568^^^^^566^580^if  ( scopeRoots.isEmpty (  )  )  {^[CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback  [METHOD] getScope [RETURN_TYPE] Scope   [VARIABLES] ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  anonymous  include  Scope  scope  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  args  body  child  cur  curNode  fnName  n  next  node  parent  root  scopeRoot  ScopeCreator  scopeCreator  Iterator  it  String  MISSING_SOURCE  label  message  sourceName  src  Deque  cfgs  scopeRoots  scopes  
[buglab_swap_variables]^scope = it.createScope ( scopeCreator.next (  ) , scope ) ;^574^^^^^566^580^scope = scopeCreator.createScope ( it.next (  ) , scope ) ;^[CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback  [METHOD] getScope [RETURN_TYPE] Scope   [VARIABLES] ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  anonymous  include  Scope  scope  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  args  body  child  cur  curNode  fnName  n  next  node  parent  root  scopeRoot  ScopeCreator  scopeCreator  Iterator  it  String  MISSING_SOURCE  label  message  sourceName  src  Deque  cfgs  scopeRoots  scopes  
[buglab_swap_variables]^scope = scopeCreatorCreator.createScope ( it.next (  ) , scope ) ;^574^^^^^566^580^scope = scopeCreator.createScope ( it.next (  ) , scope ) ;^[CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback  [METHOD] getScope [RETURN_TYPE] Scope   [VARIABLES] ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  anonymous  include  Scope  scope  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  args  body  child  cur  curNode  fnName  n  next  node  parent  root  scopeRoot  ScopeCreator  scopeCreator  Iterator  it  String  MISSING_SOURCE  label  message  sourceName  src  Deque  cfgs  scopeRoots  scopes  
[buglab_swap_variables]^scope = scopeCreator.createScope ( it.next (  )  ) ;^574^^^^^566^580^scope = scopeCreator.createScope ( it.next (  ) , scope ) ;^[CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback  [METHOD] getScope [RETURN_TYPE] Scope   [VARIABLES] ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  anonymous  include  Scope  scope  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  args  body  child  cur  curNode  fnName  n  next  node  parent  root  scopeRoot  ScopeCreator  scopeCreator  Iterator  it  String  MISSING_SOURCE  label  message  sourceName  src  Deque  cfgs  scopeRoots  scopes  
[buglab_swap_variables]^scope = scope.createScope ( it.next (  ) , scopeCreator ) ;^574^^^^^566^580^scope = scopeCreator.createScope ( it.next (  ) , scope ) ;^[CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback  [METHOD] getScope [RETURN_TYPE] Scope   [VARIABLES] ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  anonymous  include  Scope  scope  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  args  body  child  cur  curNode  fnName  n  next  node  parent  root  scopeRoot  ScopeCreator  scopeCreator  Iterator  it  String  MISSING_SOURCE  label  message  sourceName  src  Deque  cfgs  scopeRoots  scopes  
[buglab_swap_variables]^scope = itCreator.createScope ( scope.next (  ) , scope ) ;^574^^^^^566^580^scope = scopeCreator.createScope ( it.next (  ) , scope ) ;^[CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback  [METHOD] getScope [RETURN_TYPE] Scope   [VARIABLES] ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  anonymous  include  Scope  scope  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  args  body  child  cur  curNode  fnName  n  next  node  parent  root  scopeRoot  ScopeCreator  scopeCreator  Iterator  it  String  MISSING_SOURCE  label  message  sourceName  src  Deque  cfgs  scopeRoots  scopes  
[buglab_swap_variables]^return scopeRoots.size (  )  + scopes.size (  ) ;^610^^^^^609^611^return scopes.size (  )  + scopeRoots.size (  ) ;^[CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback  [METHOD] getScopeDepth [RETURN_TYPE] int   [VARIABLES] ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  anonymous  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  args  body  child  cur  curNode  fnName  n  next  node  parent  root  scopeRoot  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  src  Deque  cfgs  scopeRoots  scopes  
[buglab_swap_variables]^return ! ( scopeRoots.isEmpty (  )  && scopes.isEmpty (  )  ) ;^614^^^^^613^615^return ! ( scopes.isEmpty (  )  && scopeRoots.isEmpty (  )  ) ;^[CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback  [METHOD] hasScope [RETURN_TYPE] boolean   [VARIABLES] ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  anonymous  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  args  body  child  cur  curNode  fnName  n  next  node  parent  root  scopeRoot  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  src  Deque  cfgs  scopeRoots  scopes  
[buglab_swap_variables]^JSError error = JSError.make ( getSourceName (  ) , arguments, diagnosticType, n ) ;^620^^^^^618^622^JSError error = JSError.make ( getSourceName (  ) , n, diagnosticType, arguments ) ;^[CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback  [METHOD] report [RETURN_TYPE] void   Node n DiagnosticType diagnosticType  arguments [VARIABLES] ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  anonymous  include  DiagnosticType  NODE_TRAVERSAL_ERROR  diagnosticType  Node  args  body  child  cur  curNode  fnName  n  next  node  parent  root  scopeRoot  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  src  String[]  arguments  Deque  cfgs  scopeRoots  scopes  JSError  error  
[buglab_swap_variables]^JSError error = JSError.make ( getSourceName (  ) ,  diagnosticType, arguments ) ;^620^^^^^618^622^JSError error = JSError.make ( getSourceName (  ) , n, diagnosticType, arguments ) ;^[CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback  [METHOD] report [RETURN_TYPE] void   Node n DiagnosticType diagnosticType  arguments [VARIABLES] ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  anonymous  include  DiagnosticType  NODE_TRAVERSAL_ERROR  diagnosticType  Node  args  body  child  cur  curNode  fnName  n  next  node  parent  root  scopeRoot  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  src  String[]  arguments  Deque  cfgs  scopeRoots  scopes  JSError  error  
[buglab_swap_variables]^JSError error = JSError.make ( getSourceName (  ) , n, arguments, diagnosticType ) ;^620^^^^^618^622^JSError error = JSError.make ( getSourceName (  ) , n, diagnosticType, arguments ) ;^[CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback  [METHOD] report [RETURN_TYPE] void   Node n DiagnosticType diagnosticType  arguments [VARIABLES] ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  anonymous  include  DiagnosticType  NODE_TRAVERSAL_ERROR  diagnosticType  Node  args  body  child  cur  curNode  fnName  n  next  node  parent  root  scopeRoot  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  src  String[]  arguments  Deque  cfgs  scopeRoots  scopes  JSError  error  
[buglab_swap_variables]^JSError error = JSError.make ( getSourceName (  ) , n,  arguments ) ;^620^^^^^618^622^JSError error = JSError.make ( getSourceName (  ) , n, diagnosticType, arguments ) ;^[CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback  [METHOD] report [RETURN_TYPE] void   Node n DiagnosticType diagnosticType  arguments [VARIABLES] ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  anonymous  include  DiagnosticType  NODE_TRAVERSAL_ERROR  diagnosticType  Node  args  body  child  cur  curNode  fnName  n  next  node  parent  root  scopeRoot  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  src  String[]  arguments  Deque  cfgs  scopeRoots  scopes  JSError  error  
[buglab_swap_variables]^JSError error = JSError.make ( getSourceName (  ) , n, diagnosticType ) ;^620^^^^^618^622^JSError error = JSError.make ( getSourceName (  ) , n, diagnosticType, arguments ) ;^[CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback  [METHOD] report [RETURN_TYPE] void   Node n DiagnosticType diagnosticType  arguments [VARIABLES] ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  anonymous  include  DiagnosticType  NODE_TRAVERSAL_ERROR  diagnosticType  Node  args  body  child  cur  curNode  fnName  n  next  node  parent  root  scopeRoot  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  src  String[]  arguments  Deque  cfgs  scopeRoots  scopes  JSError  error  
[buglab_swap_variables]^JSError error = JSError.make ( getSourceName (  ) , diagnosticType, n, arguments ) ;^620^^^^^618^622^JSError error = JSError.make ( getSourceName (  ) , n, diagnosticType, arguments ) ;^[CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback  [METHOD] report [RETURN_TYPE] void   Node n DiagnosticType diagnosticType  arguments [VARIABLES] ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  anonymous  include  DiagnosticType  NODE_TRAVERSAL_ERROR  diagnosticType  Node  args  body  child  cur  curNode  fnName  n  next  node  parent  root  scopeRoot  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  src  String[]  arguments  Deque  cfgs  scopeRoots  scopes  JSError  error  
[buglab_swap_variables]^return n == parentull || parent.getType (  )  != Token.FUNCTION || n == parent.getFirstChild (  ) ;^144^145^^^^140^146^return parent == null || parent.getType (  )  != Token.FUNCTION || n == parent.getFirstChild (  ) ;^[CLASS] AbstractShallowCallback  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node n Node parent [VARIABLES] boolean  NodeTraversal  nodeTraversal  Node  n  parent  
[buglab_swap_variables]^return n == includeodeTypes.contains ( n.getType (  )  ) ;^192^^^^^190^193^return include == nodeTypes.contains ( n.getType (  )  ) ;^[CLASS] AbstractNodeTypePruningCallback  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node n Node parent [VARIABLES] Set  nodeTypes  boolean  include  NodeTraversal  nodeTraversal  Node  n  parent  
[buglab_swap_variables]^return nodeTypes == include.contains ( n.getType (  )  ) ;^192^^^^^190^193^return include == nodeTypes.contains ( n.getType (  )  ) ;^[CLASS] AbstractNodeTypePruningCallback  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node n Node parent [VARIABLES] Set  nodeTypes  boolean  include  NodeTraversal  nodeTraversal  Node  n  parent  
[buglab_swap_variables]^return include == n.contains ( nodeTypes.getType (  )  ) ;^192^^^^^190^193^return include == nodeTypes.contains ( n.getType (  )  ) ;^[CLASS] AbstractNodeTypePruningCallback  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node n Node parent [VARIABLES] Set  nodeTypes  boolean  include  NodeTraversal  nodeTraversal  Node  n  parent  
[buglab_swap_variables]^return include == nodeTypesodeTypes.contains ( n.getType (  )  ) ;^192^^^^^190^193^return include == nodeTypes.contains ( n.getType (  )  ) ;^[CLASS] AbstractNodeTypePruningCallback  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node n Node parent [VARIABLES] Set  nodeTypes  boolean  include  NodeTraversal  nodeTraversal  Node  n  parent  
