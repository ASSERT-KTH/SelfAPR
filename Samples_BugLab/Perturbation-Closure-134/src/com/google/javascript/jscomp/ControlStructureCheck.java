[BugLab_Variable_Misuse]^check ( externs ) ;^44^^^^^43^45^check ( root ) ;^[CLASS] ControlStructureCheck  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  String  sourceName  boolean  DiagnosticType  USE_OF_WITH  Node  externs  root  
[BugLab_Variable_Misuse]^report ( next, USE_OF_WITH ) ;^59^^^^^52^74^report ( node, USE_OF_WITH ) ;^[CLASS] ControlStructureCheck  [METHOD] check [RETURN_TYPE] void   Node node [VARIABLES] AbstractCompiler  compiler  String  sourceName  boolean  allowWith  JSDocInfo  info  DiagnosticType  USE_OF_WITH  Node  bChild  next  node  
[BugLab_Argument_Swapping]^report ( USE_OF_WITH, node ) ;^59^^^^^52^74^report ( node, USE_OF_WITH ) ;^[CLASS] ControlStructureCheck  [METHOD] check [RETURN_TYPE] void   Node node [VARIABLES] AbstractCompiler  compiler  String  sourceName  boolean  allowWith  JSDocInfo  info  DiagnosticType  USE_OF_WITH  Node  bChild  next  node  
[BugLab_Variable_Misuse]^sourceName =  ( String )  next.getProp ( Node.SOURCENAME_PROP ) ;^65^^^^^52^74^sourceName =  ( String )  node.getProp ( Node.SOURCENAME_PROP ) ;^[CLASS] ControlStructureCheck  [METHOD] check [RETURN_TYPE] void   Node node [VARIABLES] AbstractCompiler  compiler  String  sourceName  boolean  allowWith  JSDocInfo  info  DiagnosticType  USE_OF_WITH  Node  bChild  next  node  
[BugLab_Variable_Misuse]^JSDocInfo info = next.getJSDocInfo (  ) ;^55^^^^^52^74^JSDocInfo info = node.getJSDocInfo (  ) ;^[CLASS] ControlStructureCheck  [METHOD] check [RETURN_TYPE] void   Node node [VARIABLES] AbstractCompiler  compiler  String  sourceName  boolean  allowWith  JSDocInfo  info  DiagnosticType  USE_OF_WITH  Node  bChild  next  node  
[BugLab_Wrong_Operator]^boolean allowWith = info != null || info.getSuppressions (  ) .contains ( "with" ) ;^56^57^^^^52^74^boolean allowWith = info != null && info.getSuppressions (  ) .contains ( "with" ) ;^[CLASS] ControlStructureCheck  [METHOD] check [RETURN_TYPE] void   Node node [VARIABLES] AbstractCompiler  compiler  String  sourceName  boolean  allowWith  JSDocInfo  info  DiagnosticType  USE_OF_WITH  Node  bChild  next  node  
[BugLab_Wrong_Operator]^boolean allowWith = info == null && info.getSuppressions (  ) .contains ( "with" ) ;^56^57^^^^52^74^boolean allowWith = info != null && info.getSuppressions (  ) .contains ( "with" ) ;^[CLASS] ControlStructureCheck  [METHOD] check [RETURN_TYPE] void   Node node [VARIABLES] AbstractCompiler  compiler  String  sourceName  boolean  allowWith  JSDocInfo  info  DiagnosticType  USE_OF_WITH  Node  bChild  next  node  
[BugLab_Variable_Misuse]^switch  ( next.getType (  )  )  {^53^^^^^52^74^switch  ( node.getType (  )  )  {^[CLASS] ControlStructureCheck  [METHOD] check [RETURN_TYPE] void   Node node [VARIABLES] AbstractCompiler  compiler  String  sourceName  boolean  allowWith  JSDocInfo  info  DiagnosticType  USE_OF_WITH  Node  bChild  next  node  
[BugLab_Variable_Misuse]^for  ( Node bChild = next.getFirstChild (  ) ; bChild != null; )  {^69^^^^^52^74^for  ( Node bChild = node.getFirstChild (  ) ; bChild != null; )  {^[CLASS] ControlStructureCheck  [METHOD] check [RETURN_TYPE] void   Node node [VARIABLES] AbstractCompiler  compiler  String  sourceName  boolean  allowWith  JSDocInfo  info  DiagnosticType  USE_OF_WITH  Node  bChild  next  node  
[BugLab_Variable_Misuse]^for  ( Node node = node.getFirstChild (  ) ; bChild != null; )  {^69^^^^^52^74^for  ( Node bChild = node.getFirstChild (  ) ; bChild != null; )  {^[CLASS] ControlStructureCheck  [METHOD] check [RETURN_TYPE] void   Node node [VARIABLES] AbstractCompiler  compiler  String  sourceName  boolean  allowWith  JSDocInfo  info  DiagnosticType  USE_OF_WITH  Node  bChild  next  node  
[BugLab_Argument_Swapping]^for  ( Node node = bChild.getFirstChild (  ) ; bChild != null; )  {^69^^^^^52^74^for  ( Node bChild = node.getFirstChild (  ) ; bChild != null; )  {^[CLASS] ControlStructureCheck  [METHOD] check [RETURN_TYPE] void   Node node [VARIABLES] AbstractCompiler  compiler  String  sourceName  boolean  allowWith  JSDocInfo  info  DiagnosticType  USE_OF_WITH  Node  bChild  next  node  
[BugLab_Wrong_Operator]^for  ( Node bChild = node.getFirstChild (  ) ; bChild == null; )  {^69^^^^^52^74^for  ( Node bChild = node.getFirstChild (  ) ; bChild != null; )  {^[CLASS] ControlStructureCheck  [METHOD] check [RETURN_TYPE] void   Node node [VARIABLES] AbstractCompiler  compiler  String  sourceName  boolean  allowWith  JSDocInfo  info  DiagnosticType  USE_OF_WITH  Node  bChild  next  node  
[BugLab_Variable_Misuse]^bChild = node;^72^^^^^52^74^bChild = next;^[CLASS] ControlStructureCheck  [METHOD] check [RETURN_TYPE] void   Node node [VARIABLES] AbstractCompiler  compiler  String  sourceName  boolean  allowWith  JSDocInfo  info  DiagnosticType  USE_OF_WITH  Node  bChild  next  node  
[BugLab_Variable_Misuse]^Node next = node.getNext (  ) ;^70^^^^^52^74^Node next = bChild.getNext (  ) ;^[CLASS] ControlStructureCheck  [METHOD] check [RETURN_TYPE] void   Node node [VARIABLES] AbstractCompiler  compiler  String  sourceName  boolean  allowWith  JSDocInfo  info  DiagnosticType  USE_OF_WITH  Node  bChild  next  node  
[BugLab_Variable_Misuse]^check ( node ) ;^71^^^^^52^74^check ( bChild ) ;^[CLASS] ControlStructureCheck  [METHOD] check [RETURN_TYPE] void   Node node [VARIABLES] AbstractCompiler  compiler  String  sourceName  boolean  allowWith  JSDocInfo  info  DiagnosticType  USE_OF_WITH  Node  bChild  next  node  
[BugLab_Variable_Misuse]^compiler.report ( JSError.make ( sourceName, n, USE_OF_WITH )  ) ;^77^^^^^76^78^compiler.report ( JSError.make ( sourceName, n, error )  ) ;^[CLASS] ControlStructureCheck  [METHOD] report [RETURN_TYPE] void   Node n DiagnosticType error [VARIABLES] AbstractCompiler  compiler  String  sourceName  boolean  DiagnosticType  USE_OF_WITH  error  Node  n  
[BugLab_Argument_Swapping]^compiler.report ( JSError.make ( n, sourceName, error )  ) ;^77^^^^^76^78^compiler.report ( JSError.make ( sourceName, n, error )  ) ;^[CLASS] ControlStructureCheck  [METHOD] report [RETURN_TYPE] void   Node n DiagnosticType error [VARIABLES] AbstractCompiler  compiler  String  sourceName  boolean  DiagnosticType  USE_OF_WITH  error  Node  n  
[BugLab_Argument_Swapping]^compiler.report ( JSError.make ( error, n, sourceName )  ) ;^77^^^^^76^78^compiler.report ( JSError.make ( sourceName, n, error )  ) ;^[CLASS] ControlStructureCheck  [METHOD] report [RETURN_TYPE] void   Node n DiagnosticType error [VARIABLES] AbstractCompiler  compiler  String  sourceName  boolean  DiagnosticType  USE_OF_WITH  error  Node  n  
[BugLab_Argument_Swapping]^compiler.report ( JSError.make ( sourceName, error, n )  ) ;^77^^^^^76^78^compiler.report ( JSError.make ( sourceName, n, error )  ) ;^[CLASS] ControlStructureCheck  [METHOD] report [RETURN_TYPE] void   Node n DiagnosticType error [VARIABLES] AbstractCompiler  compiler  String  sourceName  boolean  DiagnosticType  USE_OF_WITH  error  Node  n  
