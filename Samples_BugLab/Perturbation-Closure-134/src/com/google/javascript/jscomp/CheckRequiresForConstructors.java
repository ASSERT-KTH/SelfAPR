[buglab_swap_variables]^new NodeTraversal ( callback, compiler ) .traverseRoots ( externs, root ) ;^63^^^^^61^64^new NodeTraversal ( compiler, callback ) .traverseRoots ( externs, root ) ;^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Callback  callback  boolean  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  externs  root  List  constructors  newNodes  requires  
[buglab_swap_variables]^new NodeTraversal ( compiler ) .traverseRoots ( externs, root ) ;^63^^^^^61^64^new NodeTraversal ( compiler, callback ) .traverseRoots ( externs, root ) ;^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Callback  callback  boolean  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  externs  root  List  constructors  newNodes  requires  
[buglab_swap_variables]^new NodeTraversal (  callback ) .traverseRoots ( externs, root ) ;^63^^^^^61^64^new NodeTraversal ( compiler, callback ) .traverseRoots ( externs, root ) ;^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Callback  callback  boolean  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  externs  root  List  constructors  newNodes  requires  
[buglab_swap_variables]^new NodeTraversal ( compiler, root ) .traverseRoots ( externs, callback ) ;^63^^^^^61^64^new NodeTraversal ( compiler, callback ) .traverseRoots ( externs, root ) ;^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Callback  callback  boolean  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  externs  root  List  constructors  newNodes  requires  
[buglab_swap_variables]^new NodeTraversal ( compiler, callback ) .traverseRoots ( root, externs ) ;^63^^^^^61^64^new NodeTraversal ( compiler, callback ) .traverseRoots ( externs, root ) ;^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Callback  callback  boolean  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  externs  root  List  constructors  newNodes  requires  
[buglab_swap_variables]^new NodeTraversal ( compiler, callback ) .traverseRoots (  root ) ;^63^^^^^61^64^new NodeTraversal ( compiler, callback ) .traverseRoots ( externs, root ) ;^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Callback  callback  boolean  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  externs  root  List  constructors  newNodes  requires  
[buglab_swap_variables]^new NodeTraversal ( compiler, callback ) .traverseRoots ( externs ) ;^63^^^^^61^64^new NodeTraversal ( compiler, callback ) .traverseRoots ( externs, root ) ;^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Callback  callback  boolean  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  externs  root  List  constructors  newNodes  requires  
[buglab_swap_variables]^new NodeTraversal ( root, callback ) .traverseRoots ( externs, compiler ) ;^63^^^^^61^64^new NodeTraversal ( compiler, callback ) .traverseRoots ( externs, root ) ;^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Callback  callback  boolean  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  externs  root  List  constructors  newNodes  requires  
[buglab_swap_variables]^if  ( n != infoull && info.isConstructor (  )  )  {^113^^^^^98^128^if  ( info != null && info.isConstructor (  )  )  {^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  gramps  n  parent  List  constructors  newNodes  requires  String  functionName  qualifiedName  JSDocInfo  info  
[buglab_swap_variables]^visitCallNode ( parent, n ) ;^120^^^^^105^135^visitCallNode ( n, parent ) ;^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  gramps  n  parent  List  constructors  newNodes  requires  String  functionName  qualifiedName  JSDocInfo  info  
[buglab_swap_variables]^visitCallNode (  parent ) ;^120^^^^^105^135^visitCallNode ( n, parent ) ;^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  gramps  n  parent  List  constructors  newNodes  requires  String  functionName  qualifiedName  JSDocInfo  info  
[buglab_swap_variables]^visitCallNode ( n ) ;^120^^^^^105^135^visitCallNode ( n, parent ) ;^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  gramps  n  parent  List  constructors  newNodes  requires  String  functionName  qualifiedName  JSDocInfo  info  
[buglab_swap_variables]^visitNewNode ( n, t ) ;^126^^^^^111^141^visitNewNode ( t, n ) ;^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  gramps  n  parent  List  constructors  newNodes  requires  String  functionName  qualifiedName  JSDocInfo  info  
[buglab_swap_variables]^visitNewNode (  n ) ;^126^^^^^111^141^visitNewNode ( t, n ) ;^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  gramps  n  parent  List  constructors  newNodes  requires  String  functionName  qualifiedName  JSDocInfo  info  
[buglab_swap_variables]^visitNewNode ( t ) ;^126^^^^^111^141^visitNewNode ( t, n ) ;^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  gramps  n  parent  List  constructors  newNodes  requires  String  functionName  qualifiedName  JSDocInfo  info  
[buglab_swap_variables]^if  (  ( requires == null || !constructors.contains ( className )  ) &&  ( constructors == null || !requires.contains ( className )  ) && !classNames.contains ( className )  )  {^134^135^136^^^130^147^if  (  ( constructors == null || !constructors.contains ( className )  ) &&  ( requires == null || !requires.contains ( className )  ) && !classNames.contains ( className )  )  {^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visitScriptNode [RETURN_TYPE] void   NodeTraversal t [VARIABLES] AbstractCompiler  compiler  Set  classNames  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  node  List  constructors  newNodes  requires  String  className  
[buglab_swap_variables]^compiler.report ( JSError.make ( MISSING_REQUIRE_WARNING, node, level, t, className )  ) ;^137^138^^^^130^147^compiler.report ( JSError.make ( t, node, level, MISSING_REQUIRE_WARNING, className )  ) ;^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visitScriptNode [RETURN_TYPE] void   NodeTraversal t [VARIABLES] AbstractCompiler  compiler  Set  classNames  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  node  List  constructors  newNodes  requires  String  className  
[buglab_swap_variables]^compiler.report ( JSError.make (  node, level, MISSING_REQUIRE_WARNING, className )  ) ;^137^138^^^^130^147^compiler.report ( JSError.make ( t, node, level, MISSING_REQUIRE_WARNING, className )  ) ;^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visitScriptNode [RETURN_TYPE] void   NodeTraversal t [VARIABLES] AbstractCompiler  compiler  Set  classNames  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  node  List  constructors  newNodes  requires  String  className  
[buglab_swap_variables]^compiler.report ( JSError.make ( t, className, level, MISSING_REQUIRE_WARNING, node )  ) ;^137^138^^^^130^147^compiler.report ( JSError.make ( t, node, level, MISSING_REQUIRE_WARNING, className )  ) ;^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visitScriptNode [RETURN_TYPE] void   NodeTraversal t [VARIABLES] AbstractCompiler  compiler  Set  classNames  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  node  List  constructors  newNodes  requires  String  className  
[buglab_swap_variables]^compiler.report ( JSError.make ( t,  level, MISSING_REQUIRE_WARNING, className )  ) ;^137^138^^^^130^147^compiler.report ( JSError.make ( t, node, level, MISSING_REQUIRE_WARNING, className )  ) ;^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visitScriptNode [RETURN_TYPE] void   NodeTraversal t [VARIABLES] AbstractCompiler  compiler  Set  classNames  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  node  List  constructors  newNodes  requires  String  className  
[buglab_swap_variables]^compiler.report ( JSError.make ( t, node, level, className, MISSING_REQUIRE_WARNING )  ) ;^137^138^^^^130^147^compiler.report ( JSError.make ( t, node, level, MISSING_REQUIRE_WARNING, className )  ) ;^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visitScriptNode [RETURN_TYPE] void   NodeTraversal t [VARIABLES] AbstractCompiler  compiler  Set  classNames  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  node  List  constructors  newNodes  requires  String  className  
[buglab_swap_variables]^compiler.report ( JSError.make ( t, node, level, MISSING_REQUIRE_WARNING )  ) ;^137^138^^^^130^147^compiler.report ( JSError.make ( t, node, level, MISSING_REQUIRE_WARNING, className )  ) ;^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visitScriptNode [RETURN_TYPE] void   NodeTraversal t [VARIABLES] AbstractCompiler  compiler  Set  classNames  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  node  List  constructors  newNodes  requires  String  className  
[buglab_swap_variables]^compiler.report ( JSError.make ( level, node, t, MISSING_REQUIRE_WARNING, className )  ) ;^137^138^^^^130^147^compiler.report ( JSError.make ( t, node, level, MISSING_REQUIRE_WARNING, className )  ) ;^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visitScriptNode [RETURN_TYPE] void   NodeTraversal t [VARIABLES] AbstractCompiler  compiler  Set  classNames  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  node  List  constructors  newNodes  requires  String  className  
[buglab_swap_variables]^compiler.report ( JSError.make ( t, node,  MISSING_REQUIRE_WARNING, className )  ) ;^137^138^^^^130^147^compiler.report ( JSError.make ( t, node, level, MISSING_REQUIRE_WARNING, className )  ) ;^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visitScriptNode [RETURN_TYPE] void   NodeTraversal t [VARIABLES] AbstractCompiler  compiler  Set  classNames  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  node  List  constructors  newNodes  requires  String  className  
[buglab_swap_variables]^compiler.report ( JSError.make ( t, node, MISSING_REQUIRE_WARNING, level, className )  ) ;^137^138^^^^130^147^compiler.report ( JSError.make ( t, node, level, MISSING_REQUIRE_WARNING, className )  ) ;^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visitScriptNode [RETURN_TYPE] void   NodeTraversal t [VARIABLES] AbstractCompiler  compiler  Set  classNames  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  node  List  constructors  newNodes  requires  String  className  
[buglab_swap_variables]^compiler.report ( JSError.make ( t, node, level,  className )  ) ;^137^138^^^^130^147^compiler.report ( JSError.make ( t, node, level, MISSING_REQUIRE_WARNING, className )  ) ;^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visitScriptNode [RETURN_TYPE] void   NodeTraversal t [VARIABLES] AbstractCompiler  compiler  Set  classNames  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  node  List  constructors  newNodes  requires  String  className  
[buglab_swap_variables]^JSError.make ( MISSING_REQUIRE_WARNING, node, level, t, className )  ) ;^138^^^^^130^147^JSError.make ( t, node, level, MISSING_REQUIRE_WARNING, className )  ) ;^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visitScriptNode [RETURN_TYPE] void   NodeTraversal t [VARIABLES] AbstractCompiler  compiler  Set  classNames  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  node  List  constructors  newNodes  requires  String  className  
[buglab_swap_variables]^JSError.make (  node, level, MISSING_REQUIRE_WARNING, className )  ) ;^138^^^^^130^147^JSError.make ( t, node, level, MISSING_REQUIRE_WARNING, className )  ) ;^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visitScriptNode [RETURN_TYPE] void   NodeTraversal t [VARIABLES] AbstractCompiler  compiler  Set  classNames  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  node  List  constructors  newNodes  requires  String  className  
[buglab_swap_variables]^JSError.make ( t, className, level, MISSING_REQUIRE_WARNING, node )  ) ;^138^^^^^130^147^JSError.make ( t, node, level, MISSING_REQUIRE_WARNING, className )  ) ;^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visitScriptNode [RETURN_TYPE] void   NodeTraversal t [VARIABLES] AbstractCompiler  compiler  Set  classNames  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  node  List  constructors  newNodes  requires  String  className  
[buglab_swap_variables]^JSError.make ( t,  level, MISSING_REQUIRE_WARNING, className )  ) ;^138^^^^^130^147^JSError.make ( t, node, level, MISSING_REQUIRE_WARNING, className )  ) ;^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visitScriptNode [RETURN_TYPE] void   NodeTraversal t [VARIABLES] AbstractCompiler  compiler  Set  classNames  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  node  List  constructors  newNodes  requires  String  className  
[buglab_swap_variables]^JSError.make ( className, node, level, MISSING_REQUIRE_WARNING, t )  ) ;^138^^^^^130^147^JSError.make ( t, node, level, MISSING_REQUIRE_WARNING, className )  ) ;^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visitScriptNode [RETURN_TYPE] void   NodeTraversal t [VARIABLES] AbstractCompiler  compiler  Set  classNames  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  node  List  constructors  newNodes  requires  String  className  
[buglab_swap_variables]^JSError.make ( t, node, level, MISSING_REQUIRE_WARNING )  ) ;^138^^^^^130^147^JSError.make ( t, node, level, MISSING_REQUIRE_WARNING, className )  ) ;^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visitScriptNode [RETURN_TYPE] void   NodeTraversal t [VARIABLES] AbstractCompiler  compiler  Set  classNames  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  node  List  constructors  newNodes  requires  String  className  
[buglab_swap_variables]^JSError.make ( t, node, className, MISSING_REQUIRE_WARNING, level )  ) ;^138^^^^^130^147^JSError.make ( t, node, level, MISSING_REQUIRE_WARNING, className )  ) ;^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visitScriptNode [RETURN_TYPE] void   NodeTraversal t [VARIABLES] AbstractCompiler  compiler  Set  classNames  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  node  List  constructors  newNodes  requires  String  className  
[buglab_swap_variables]^JSError.make ( t, node,  MISSING_REQUIRE_WARNING, className )  ) ;^138^^^^^130^147^JSError.make ( t, node, level, MISSING_REQUIRE_WARNING, className )  ) ;^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visitScriptNode [RETURN_TYPE] void   NodeTraversal t [VARIABLES] AbstractCompiler  compiler  Set  classNames  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  node  List  constructors  newNodes  requires  String  className  
[buglab_swap_variables]^JSError.make ( t, MISSING_REQUIRE_WARNING, level, node, className )  ) ;^138^^^^^130^147^JSError.make ( t, node, level, MISSING_REQUIRE_WARNING, className )  ) ;^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visitScriptNode [RETURN_TYPE] void   NodeTraversal t [VARIABLES] AbstractCompiler  compiler  Set  classNames  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  node  List  constructors  newNodes  requires  String  className  
[buglab_swap_variables]^JSError.make ( t, node, level,  className )  ) ;^138^^^^^130^147^JSError.make ( t, node, level, MISSING_REQUIRE_WARNING, className )  ) ;^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visitScriptNode [RETURN_TYPE] void   NodeTraversal t [VARIABLES] AbstractCompiler  compiler  Set  classNames  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  node  List  constructors  newNodes  requires  String  className  
[buglab_swap_variables]^if  (  ( className == null || !constructors.contains ( constructors )  ) &&  ( requires == null || !requires.contains ( className )  ) && !classNames.contains ( className )  )  {^134^135^136^^^130^147^if  (  ( constructors == null || !constructors.contains ( className )  ) &&  ( requires == null || !requires.contains ( className )  ) && !classNames.contains ( className )  )  {^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visitScriptNode [RETURN_TYPE] void   NodeTraversal t [VARIABLES] AbstractCompiler  compiler  Set  classNames  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  node  List  constructors  newNodes  requires  String  className  
[buglab_swap_variables]^&&  ( className == null || !requires.contains ( requires )  ) && !classNames.contains ( className )  )  {^135^136^^^^130^147^&&  ( requires == null || !requires.contains ( className )  ) && !classNames.contains ( className )  )  {^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visitScriptNode [RETURN_TYPE] void   NodeTraversal t [VARIABLES] AbstractCompiler  compiler  Set  classNames  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  node  List  constructors  newNodes  requires  String  className  
[buglab_swap_variables]^compiler.report ( JSError.make ( t, level, node, MISSING_REQUIRE_WARNING, className )  ) ;^137^138^^^^130^147^compiler.report ( JSError.make ( t, node, level, MISSING_REQUIRE_WARNING, className )  ) ;^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visitScriptNode [RETURN_TYPE] void   NodeTraversal t [VARIABLES] AbstractCompiler  compiler  Set  classNames  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  node  List  constructors  newNodes  requires  String  className  
[buglab_swap_variables]^compiler.report ( JSError.make ( t, MISSING_REQUIRE_WARNING, level, node, className )  ) ;^137^138^^^^130^147^compiler.report ( JSError.make ( t, node, level, MISSING_REQUIRE_WARNING, className )  ) ;^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visitScriptNode [RETURN_TYPE] void   NodeTraversal t [VARIABLES] AbstractCompiler  compiler  Set  classNames  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  node  List  constructors  newNodes  requires  String  className  
[buglab_swap_variables]^JSError.make ( t, node, level, className, MISSING_REQUIRE_WARNING )  ) ;^138^^^^^130^147^JSError.make ( t, node, level, MISSING_REQUIRE_WARNING, className )  ) ;^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visitScriptNode [RETURN_TYPE] void   NodeTraversal t [VARIABLES] AbstractCompiler  compiler  Set  classNames  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  node  List  constructors  newNodes  requires  String  className  
[buglab_swap_variables]^String required = n.extractClassNameIfRequire ( codingConvention, parent ) ;^150^^^^^149^154^String required = codingConvention.extractClassNameIfRequire ( n, parent ) ;^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visitCallNode [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  n  parent  List  constructors  newNodes  requires  String  required  
[buglab_swap_variables]^String required = codingConvention.extractClassNameIfRequire (  parent ) ;^150^^^^^149^154^String required = codingConvention.extractClassNameIfRequire ( n, parent ) ;^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visitCallNode [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  n  parent  List  constructors  newNodes  requires  String  required  
[buglab_swap_variables]^String required = codingConvention.extractClassNameIfRequire ( parent, n ) ;^150^^^^^149^154^String required = codingConvention.extractClassNameIfRequire ( n, parent ) ;^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visitCallNode [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  n  parent  List  constructors  newNodes  requires  String  required  
[buglab_swap_variables]^String required = codingConvention.extractClassNameIfRequire ( n ) ;^150^^^^^149^154^String required = codingConvention.extractClassNameIfRequire ( n, parent ) ;^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visitCallNode [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  n  parent  List  constructors  newNodes  requires  String  required  
[buglab_swap_variables]^String required = parent.extractClassNameIfRequire ( n, codingConvention ) ;^150^^^^^149^154^String required = codingConvention.extractClassNameIfRequire ( n, parent ) ;^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visitCallNode [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  n  parent  List  constructors  newNodes  requires  String  required  
[buglab_swap_variables]^Scope.Var var = name.getScope (  ) .getVar ( t ) ;^176^^^^^156^181^Scope.Var var = t.getScope (  ) .getVar ( name ) ;^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visitNewNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  Var  var  CodingConvention  codingConvention  Node  n  nameNode  qNameNode  List  constructors  newNodes  requires  String  name  qName  
[buglab_swap_variables]^if  ( n != infoull && info.isConstructor (  )  )  {^113^^^^^95^117^if  ( info != null && info.isConstructor (  )  )  {^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] List  constructors  newNodes  requires  String  functionName  qualifiedName  boolean  JSDocInfo  info  NodeTraversal  t  Node  gramps  n  parent  
[buglab_swap_variables]^visitCallNode ( parent, n ) ;^120^^^^^105^135^visitCallNode ( n, parent ) ;^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] List  constructors  newNodes  requires  String  functionName  qualifiedName  boolean  JSDocInfo  info  NodeTraversal  t  Node  gramps  n  parent  
[buglab_swap_variables]^visitCallNode (  parent ) ;^120^^^^^105^135^visitCallNode ( n, parent ) ;^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] List  constructors  newNodes  requires  String  functionName  qualifiedName  boolean  JSDocInfo  info  NodeTraversal  t  Node  gramps  n  parent  
[buglab_swap_variables]^visitCallNode ( n ) ;^120^^^^^105^135^visitCallNode ( n, parent ) ;^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] List  constructors  newNodes  requires  String  functionName  qualifiedName  boolean  JSDocInfo  info  NodeTraversal  t  Node  gramps  n  parent  
[buglab_swap_variables]^visitNewNode ( n, t ) ;^126^^^^^111^141^visitNewNode ( t, n ) ;^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] List  constructors  newNodes  requires  String  functionName  qualifiedName  boolean  JSDocInfo  info  NodeTraversal  t  Node  gramps  n  parent  
[buglab_swap_variables]^visitNewNode (  n ) ;^126^^^^^111^141^visitNewNode ( t, n ) ;^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] List  constructors  newNodes  requires  String  functionName  qualifiedName  boolean  JSDocInfo  info  NodeTraversal  t  Node  gramps  n  parent  
[buglab_swap_variables]^visitNewNode ( t ) ;^126^^^^^111^141^visitNewNode ( t, n ) ;^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] List  constructors  newNodes  requires  String  functionName  qualifiedName  boolean  JSDocInfo  info  NodeTraversal  t  Node  gramps  n  parent  
[buglab_swap_variables]^if  (  ( requires == null || !constructors.contains ( className )  ) &&  ( constructors == null || !requires.contains ( className )  ) && !classNames.contains ( className )  )  {^134^135^136^^^130^147^if  (  ( constructors == null || !constructors.contains ( className )  ) &&  ( requires == null || !requires.contains ( className )  ) && !classNames.contains ( className )  )  {^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visitScriptNode [RETURN_TYPE] void   NodeTraversal t [VARIABLES] List  constructors  newNodes  requires  Set  classNames  String  className  boolean  NodeTraversal  t  Node  node  
[buglab_swap_variables]^compiler.report ( JSError.make ( level, node, t, MISSING_REQUIRE_WARNING, className )  ) ;^137^138^^^^130^147^compiler.report ( JSError.make ( t, node, level, MISSING_REQUIRE_WARNING, className )  ) ;^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visitScriptNode [RETURN_TYPE] void   NodeTraversal t [VARIABLES] List  constructors  newNodes  requires  Set  classNames  String  className  boolean  NodeTraversal  t  Node  node  
[buglab_swap_variables]^compiler.report ( JSError.make (  node, level, MISSING_REQUIRE_WARNING, className )  ) ;^137^138^^^^130^147^compiler.report ( JSError.make ( t, node, level, MISSING_REQUIRE_WARNING, className )  ) ;^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visitScriptNode [RETURN_TYPE] void   NodeTraversal t [VARIABLES] List  constructors  newNodes  requires  Set  classNames  String  className  boolean  NodeTraversal  t  Node  node  
[buglab_swap_variables]^compiler.report ( JSError.make ( t, className, level, MISSING_REQUIRE_WARNING, node )  ) ;^137^138^^^^130^147^compiler.report ( JSError.make ( t, node, level, MISSING_REQUIRE_WARNING, className )  ) ;^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visitScriptNode [RETURN_TYPE] void   NodeTraversal t [VARIABLES] List  constructors  newNodes  requires  Set  classNames  String  className  boolean  NodeTraversal  t  Node  node  
[buglab_swap_variables]^compiler.report ( JSError.make ( t,  level, MISSING_REQUIRE_WARNING, className )  ) ;^137^138^^^^130^147^compiler.report ( JSError.make ( t, node, level, MISSING_REQUIRE_WARNING, className )  ) ;^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visitScriptNode [RETURN_TYPE] void   NodeTraversal t [VARIABLES] List  constructors  newNodes  requires  Set  classNames  String  className  boolean  NodeTraversal  t  Node  node  
[buglab_swap_variables]^compiler.report ( JSError.make ( t, node, className, MISSING_REQUIRE_WARNING, level )  ) ;^137^138^^^^130^147^compiler.report ( JSError.make ( t, node, level, MISSING_REQUIRE_WARNING, className )  ) ;^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visitScriptNode [RETURN_TYPE] void   NodeTraversal t [VARIABLES] List  constructors  newNodes  requires  Set  classNames  String  className  boolean  NodeTraversal  t  Node  node  
[buglab_swap_variables]^compiler.report ( JSError.make ( t, node, level, MISSING_REQUIRE_WARNING )  ) ;^137^138^^^^130^147^compiler.report ( JSError.make ( t, node, level, MISSING_REQUIRE_WARNING, className )  ) ;^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visitScriptNode [RETURN_TYPE] void   NodeTraversal t [VARIABLES] List  constructors  newNodes  requires  Set  classNames  String  className  boolean  NodeTraversal  t  Node  node  
[buglab_swap_variables]^compiler.report ( JSError.make ( t, node,  MISSING_REQUIRE_WARNING, className )  ) ;^137^138^^^^130^147^compiler.report ( JSError.make ( t, node, level, MISSING_REQUIRE_WARNING, className )  ) ;^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visitScriptNode [RETURN_TYPE] void   NodeTraversal t [VARIABLES] List  constructors  newNodes  requires  Set  classNames  String  className  boolean  NodeTraversal  t  Node  node  
[buglab_swap_variables]^compiler.report ( JSError.make ( t, node, level,  className )  ) ;^137^138^^^^130^147^compiler.report ( JSError.make ( t, node, level, MISSING_REQUIRE_WARNING, className )  ) ;^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visitScriptNode [RETURN_TYPE] void   NodeTraversal t [VARIABLES] List  constructors  newNodes  requires  Set  classNames  String  className  boolean  NodeTraversal  t  Node  node  
[buglab_swap_variables]^JSError.make ( className, node, level, MISSING_REQUIRE_WARNING, t )  ) ;^138^^^^^130^147^JSError.make ( t, node, level, MISSING_REQUIRE_WARNING, className )  ) ;^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visitScriptNode [RETURN_TYPE] void   NodeTraversal t [VARIABLES] List  constructors  newNodes  requires  Set  classNames  String  className  boolean  NodeTraversal  t  Node  node  
[buglab_swap_variables]^JSError.make (  node, level, MISSING_REQUIRE_WARNING, className )  ) ;^138^^^^^130^147^JSError.make ( t, node, level, MISSING_REQUIRE_WARNING, className )  ) ;^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visitScriptNode [RETURN_TYPE] void   NodeTraversal t [VARIABLES] List  constructors  newNodes  requires  Set  classNames  String  className  boolean  NodeTraversal  t  Node  node  
[buglab_swap_variables]^JSError.make ( t, level, node, MISSING_REQUIRE_WARNING, className )  ) ;^138^^^^^130^147^JSError.make ( t, node, level, MISSING_REQUIRE_WARNING, className )  ) ;^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visitScriptNode [RETURN_TYPE] void   NodeTraversal t [VARIABLES] List  constructors  newNodes  requires  Set  classNames  String  className  boolean  NodeTraversal  t  Node  node  
[buglab_swap_variables]^JSError.make ( t,  level, MISSING_REQUIRE_WARNING, className )  ) ;^138^^^^^130^147^JSError.make ( t, node, level, MISSING_REQUIRE_WARNING, className )  ) ;^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visitScriptNode [RETURN_TYPE] void   NodeTraversal t [VARIABLES] List  constructors  newNodes  requires  Set  classNames  String  className  boolean  NodeTraversal  t  Node  node  
[buglab_swap_variables]^JSError.make ( t, node, className, MISSING_REQUIRE_WARNING, level )  ) ;^138^^^^^130^147^JSError.make ( t, node, level, MISSING_REQUIRE_WARNING, className )  ) ;^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visitScriptNode [RETURN_TYPE] void   NodeTraversal t [VARIABLES] List  constructors  newNodes  requires  Set  classNames  String  className  boolean  NodeTraversal  t  Node  node  
[buglab_swap_variables]^JSError.make ( t, node, level, MISSING_REQUIRE_WARNING )  ) ;^138^^^^^130^147^JSError.make ( t, node, level, MISSING_REQUIRE_WARNING, className )  ) ;^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visitScriptNode [RETURN_TYPE] void   NodeTraversal t [VARIABLES] List  constructors  newNodes  requires  Set  classNames  String  className  boolean  NodeTraversal  t  Node  node  
[buglab_swap_variables]^JSError.make ( level, node, t, MISSING_REQUIRE_WARNING, className )  ) ;^138^^^^^130^147^JSError.make ( t, node, level, MISSING_REQUIRE_WARNING, className )  ) ;^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visitScriptNode [RETURN_TYPE] void   NodeTraversal t [VARIABLES] List  constructors  newNodes  requires  Set  classNames  String  className  boolean  NodeTraversal  t  Node  node  
[buglab_swap_variables]^JSError.make ( t, node,  MISSING_REQUIRE_WARNING, className )  ) ;^138^^^^^130^147^JSError.make ( t, node, level, MISSING_REQUIRE_WARNING, className )  ) ;^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visitScriptNode [RETURN_TYPE] void   NodeTraversal t [VARIABLES] List  constructors  newNodes  requires  Set  classNames  String  className  boolean  NodeTraversal  t  Node  node  
[buglab_swap_variables]^JSError.make ( t, MISSING_REQUIRE_WARNING, level, node, className )  ) ;^138^^^^^130^147^JSError.make ( t, node, level, MISSING_REQUIRE_WARNING, className )  ) ;^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visitScriptNode [RETURN_TYPE] void   NodeTraversal t [VARIABLES] List  constructors  newNodes  requires  Set  classNames  String  className  boolean  NodeTraversal  t  Node  node  
[buglab_swap_variables]^JSError.make ( t, node, level,  className )  ) ;^138^^^^^130^147^JSError.make ( t, node, level, MISSING_REQUIRE_WARNING, className )  ) ;^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visitScriptNode [RETURN_TYPE] void   NodeTraversal t [VARIABLES] List  constructors  newNodes  requires  Set  classNames  String  className  boolean  NodeTraversal  t  Node  node  
[buglab_swap_variables]^if  (  ( className == null || !constructors.contains ( constructors )  ) &&  ( requires == null || !requires.contains ( className )  ) && !classNames.contains ( className )  )  {^134^135^136^^^130^147^if  (  ( constructors == null || !constructors.contains ( className )  ) &&  ( requires == null || !requires.contains ( className )  ) && !classNames.contains ( className )  )  {^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visitScriptNode [RETURN_TYPE] void   NodeTraversal t [VARIABLES] List  constructors  newNodes  requires  Set  classNames  String  className  boolean  NodeTraversal  t  Node  node  
[buglab_swap_variables]^&&  ( className == null || !requires.contains ( requires )  ) && !classNames.contains ( className )  )  {^135^136^^^^130^147^&&  ( requires == null || !requires.contains ( className )  ) && !classNames.contains ( className )  )  {^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visitScriptNode [RETURN_TYPE] void   NodeTraversal t [VARIABLES] List  constructors  newNodes  requires  Set  classNames  String  className  boolean  NodeTraversal  t  Node  node  
[buglab_swap_variables]^compiler.report ( JSError.make ( node, t, level, MISSING_REQUIRE_WARNING, className )  ) ;^137^138^^^^130^147^compiler.report ( JSError.make ( t, node, level, MISSING_REQUIRE_WARNING, className )  ) ;^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visitScriptNode [RETURN_TYPE] void   NodeTraversal t [VARIABLES] List  constructors  newNodes  requires  Set  classNames  String  className  boolean  NodeTraversal  t  Node  node  
[buglab_swap_variables]^compiler.report ( JSError.make ( t, node, level, className, MISSING_REQUIRE_WARNING )  ) ;^137^138^^^^130^147^compiler.report ( JSError.make ( t, node, level, MISSING_REQUIRE_WARNING, className )  ) ;^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visitScriptNode [RETURN_TYPE] void   NodeTraversal t [VARIABLES] List  constructors  newNodes  requires  Set  classNames  String  className  boolean  NodeTraversal  t  Node  node  
[buglab_swap_variables]^JSError.make ( node, t, level, MISSING_REQUIRE_WARNING, className )  ) ;^138^^^^^130^147^JSError.make ( t, node, level, MISSING_REQUIRE_WARNING, className )  ) ;^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visitScriptNode [RETURN_TYPE] void   NodeTraversal t [VARIABLES] List  constructors  newNodes  requires  Set  classNames  String  className  boolean  NodeTraversal  t  Node  node  
[buglab_swap_variables]^JSError.make ( t, node, MISSING_REQUIRE_WARNING, level, className )  ) ;^138^^^^^130^147^JSError.make ( t, node, level, MISSING_REQUIRE_WARNING, className )  ) ;^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visitScriptNode [RETURN_TYPE] void   NodeTraversal t [VARIABLES] List  constructors  newNodes  requires  Set  classNames  String  className  boolean  NodeTraversal  t  Node  node  
[buglab_swap_variables]^JSError.make ( t, node, level, className, MISSING_REQUIRE_WARNING )  ) ;^138^^^^^130^147^JSError.make ( t, node, level, MISSING_REQUIRE_WARNING, className )  ) ;^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visitScriptNode [RETURN_TYPE] void   NodeTraversal t [VARIABLES] List  constructors  newNodes  requires  Set  classNames  String  className  boolean  NodeTraversal  t  Node  node  
[buglab_swap_variables]^String required = n.extractClassNameIfRequire ( codingConvention, parent ) ;^150^^^^^149^154^String required = codingConvention.extractClassNameIfRequire ( n, parent ) ;^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visitCallNode [RETURN_TYPE] void   Node n Node parent [VARIABLES] List  constructors  newNodes  requires  String  required  boolean  Node  n  parent  
[buglab_swap_variables]^String required = codingConvention.extractClassNameIfRequire (  parent ) ;^150^^^^^149^154^String required = codingConvention.extractClassNameIfRequire ( n, parent ) ;^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visitCallNode [RETURN_TYPE] void   Node n Node parent [VARIABLES] List  constructors  newNodes  requires  String  required  boolean  Node  n  parent  
[buglab_swap_variables]^String required = codingConvention.extractClassNameIfRequire ( parent, n ) ;^150^^^^^149^154^String required = codingConvention.extractClassNameIfRequire ( n, parent ) ;^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visitCallNode [RETURN_TYPE] void   Node n Node parent [VARIABLES] List  constructors  newNodes  requires  String  required  boolean  Node  n  parent  
[buglab_swap_variables]^String required = codingConvention.extractClassNameIfRequire ( n ) ;^150^^^^^149^154^String required = codingConvention.extractClassNameIfRequire ( n, parent ) ;^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visitCallNode [RETURN_TYPE] void   Node n Node parent [VARIABLES] List  constructors  newNodes  requires  String  required  boolean  Node  n  parent  
[buglab_swap_variables]^String required = parent.extractClassNameIfRequire ( n, codingConvention ) ;^150^^^^^149^154^String required = codingConvention.extractClassNameIfRequire ( n, parent ) ;^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visitCallNode [RETURN_TYPE] void   Node n Node parent [VARIABLES] List  constructors  newNodes  requires  String  required  boolean  Node  n  parent  
[buglab_swap_variables]^Scope.Var var = name.getScope (  ) .getVar ( t ) ;^176^^^^^156^181^Scope.Var var = t.getScope (  ) .getVar ( name ) ;^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visitNewNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] List  constructors  newNodes  requires  String  name  qName  boolean  NodeTraversal  t  Var  var  Node  n  nameNode  qNameNode  
