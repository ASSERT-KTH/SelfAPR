[BugLab_Argument_Swapping]^new NodeTraversal ( callback, compiler ) .traverseRoots ( externs, root ) ;^63^^^^^61^64^new NodeTraversal ( compiler, callback ) .traverseRoots ( externs, root ) ;^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Callback  callback  boolean  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  externs  root  List  constructors  newNodes  requires  
[BugLab_Argument_Swapping]^new NodeTraversal ( compiler, root ) .traverseRoots ( externs, callback ) ;^63^^^^^61^64^new NodeTraversal ( compiler, callback ) .traverseRoots ( externs, root ) ;^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Callback  callback  boolean  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  externs  root  List  constructors  newNodes  requires  
[BugLab_Argument_Swapping]^new NodeTraversal ( compiler, callback ) .traverseRoots ( root, externs ) ;^63^^^^^61^64^new NodeTraversal ( compiler, callback ) .traverseRoots ( externs, root ) ;^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Callback  callback  boolean  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  externs  root  List  constructors  newNodes  requires  
[BugLab_Argument_Swapping]^new NodeTraversal ( externs, callback ) .traverseRoots ( compiler, root ) ;^63^^^^^61^64^new NodeTraversal ( compiler, callback ) .traverseRoots ( externs, root ) ;^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Callback  callback  boolean  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  externs  root  List  constructors  newNodes  requires  
[BugLab_Variable_Misuse]^return n == null || parent.getType (  )  != Token.SCRIPT || !t.getInput (  ) .isExtern (  ) ;^79^80^^^^78^81^return parent == null || parent.getType (  )  != Token.SCRIPT || !t.getInput (  ) .isExtern (  ) ;^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  n  parent  List  constructors  newNodes  requires  
[BugLab_Wrong_Operator]^return parent == null && parent.getType (  )  != Token.SCRIPT || !t.getInput (  ) .isExtern (  ) ;^79^80^^^^78^81^return parent == null || parent.getType (  )  != Token.SCRIPT || !t.getInput (  ) .isExtern (  ) ;^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  n  parent  List  constructors  newNodes  requires  
[BugLab_Wrong_Operator]^return parent != null || parent.getType (  )  != Token.SCRIPT || !t.getInput (  ) .isExtern (  ) ;^79^80^^^^78^81^return parent == null || parent.getType (  )  != Token.SCRIPT || !t.getInput (  ) .isExtern (  ) ;^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  n  parent  List  constructors  newNodes  requires  
[BugLab_Wrong_Operator]^return parent == null || parent.getType (  )  == Token.SCRIPT || !t.getInput (  ) .isExtern (  ) ;^79^80^^^^78^81^return parent == null || parent.getType (  )  != Token.SCRIPT || !t.getInput (  ) .isExtern (  ) ;^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  n  parent  List  constructors  newNodes  requires  
[BugLab_Variable_Misuse]^if  ( info != parentull && info.isConstructor (  )  )  {^89^^^^^74^104^if  ( info != null && info.isConstructor (  )  )  {^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  gramps  n  parent  List  constructors  newNodes  requires  String  functionName  qualifiedName  JSDocInfo  info  
[BugLab_Wrong_Operator]^if  ( info != null || info.isConstructor (  )  )  {^89^^^^^74^104^if  ( info != null && info.isConstructor (  )  )  {^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  gramps  n  parent  List  constructors  newNodes  requires  String  functionName  qualifiedName  JSDocInfo  info  
[BugLab_Wrong_Operator]^if  ( info == null && info.isConstructor (  )  )  {^89^^^^^74^104^if  ( info != null && info.isConstructor (  )  )  {^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  gramps  n  parent  List  constructors  newNodes  requires  String  functionName  qualifiedName  JSDocInfo  info  
[BugLab_Variable_Misuse]^String qualifiedName = parent.getFirstChild (  ) .getQualifiedName (  ) ;^90^^^^^75^105^String qualifiedName = n.getFirstChild (  ) .getQualifiedName (  ) ;^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  gramps  n  parent  List  constructors  newNodes  requires  String  functionName  qualifiedName  JSDocInfo  info  
[BugLab_Variable_Misuse]^constructors.add ( functionName ) ;^91^^^^^76^106^constructors.add ( qualifiedName ) ;^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  gramps  n  parent  List  constructors  newNodes  requires  String  functionName  qualifiedName  JSDocInfo  info  
[BugLab_Variable_Misuse]^if  ( NodeUtil.isFunctionAnonymous ( parent )  )  {^95^^^^^80^110^if  ( NodeUtil.isFunctionAnonymous ( n )  )  {^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  gramps  n  parent  List  constructors  newNodes  requires  String  functionName  qualifiedName  JSDocInfo  info  
[BugLab_Variable_Misuse]^if  ( info != parentull && info.isConstructor (  )  )  {^113^^^^^95^117^if  ( info != null && info.isConstructor (  )  )  {^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  gramps  n  parent  List  constructors  newNodes  requires  String  functionName  qualifiedName  JSDocInfo  info  
[BugLab_Argument_Swapping]^if  ( n != infoull && info.isConstructor (  )  )  {^113^^^^^95^117^if  ( info != null && info.isConstructor (  )  )  {^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  gramps  n  parent  List  constructors  newNodes  requires  String  functionName  qualifiedName  JSDocInfo  info  
[BugLab_Wrong_Operator]^if  ( info != null || info.isConstructor (  )  )  {^113^^^^^95^117^if  ( info != null && info.isConstructor (  )  )  {^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  gramps  n  parent  List  constructors  newNodes  requires  String  functionName  qualifiedName  JSDocInfo  info  
[BugLab_Wrong_Operator]^if  ( info == null && info.isConstructor (  )  )  {^113^^^^^95^117^if  ( info != null && info.isConstructor (  )  )  {^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  gramps  n  parent  List  constructors  newNodes  requires  String  functionName  qualifiedName  JSDocInfo  info  
[BugLab_Variable_Misuse]^String functionName = parent.getFirstChild (  ) .getString (  ) ;^114^^^^^95^117^String functionName = n.getFirstChild (  ) .getString (  ) ;^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  gramps  n  parent  List  constructors  newNodes  requires  String  functionName  qualifiedName  JSDocInfo  info  
[BugLab_Variable_Misuse]^constructors.add ( qualifiedName ) ;^115^^^^^95^117^constructors.add ( functionName ) ;^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  gramps  n  parent  List  constructors  newNodes  requires  String  functionName  qualifiedName  JSDocInfo  info  
[BugLab_Variable_Misuse]^info =  ( JSDocInfo )  parent.getProp ( Node.JSDOC_INFO_PROP ) ;^112^^^^^95^117^info =  ( JSDocInfo )  n.getProp ( Node.JSDOC_INFO_PROP ) ;^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  gramps  n  parent  List  constructors  newNodes  requires  String  functionName  qualifiedName  JSDocInfo  info  
[BugLab_Variable_Misuse]^if  ( n.getType (  )  == Token.NAME )  {^96^^^^^81^111^if  ( parent.getType (  )  == Token.NAME )  {^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  gramps  n  parent  List  constructors  newNodes  requires  String  functionName  qualifiedName  JSDocInfo  info  
[BugLab_Wrong_Operator]^if  ( parent.getType (  )  > Token.NAME )  {^96^^^^^81^111^if  ( parent.getType (  )  == Token.NAME )  {^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  gramps  n  parent  List  constructors  newNodes  requires  String  functionName  qualifiedName  JSDocInfo  info  
[BugLab_Wrong_Operator]^if  ( parent.getType (  )  != Token.NAME )  {^96^^^^^81^111^if  ( parent.getType (  )  == Token.NAME )  {^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  gramps  n  parent  List  constructors  newNodes  requires  String  functionName  qualifiedName  JSDocInfo  info  
[BugLab_Wrong_Operator]^if  ( info != null || info.isConstructor (  )  )  {^99^^^^^84^114^if  ( info != null && info.isConstructor (  )  )  {^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  gramps  n  parent  List  constructors  newNodes  requires  String  functionName  qualifiedName  JSDocInfo  info  
[BugLab_Wrong_Operator]^if  ( info == null && info.isConstructor (  )  )  {^99^^^^^84^114^if  ( info != null && info.isConstructor (  )  )  {^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  gramps  n  parent  List  constructors  newNodes  requires  String  functionName  qualifiedName  JSDocInfo  info  
[BugLab_Wrong_Operator]^if  ( info != null || info.isConstructor (  )  )  {^106^^^^^99^109^if  ( info != null && info.isConstructor (  )  )  {^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  gramps  n  parent  List  constructors  newNodes  requires  String  functionName  qualifiedName  JSDocInfo  info  
[BugLab_Wrong_Operator]^if  ( info == null && info.isConstructor (  )  )  {^106^^^^^99^109^if  ( info != null && info.isConstructor (  )  )  {^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  gramps  n  parent  List  constructors  newNodes  requires  String  functionName  qualifiedName  JSDocInfo  info  
[BugLab_Variable_Misuse]^constructors.add ( qualifiedName ) ;^107^^^^^99^109^constructors.add ( functionName ) ;^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  gramps  n  parent  List  constructors  newNodes  requires  String  functionName  qualifiedName  JSDocInfo  info  
[BugLab_Variable_Misuse]^info =  ( JSDocInfo )  parent.getProp ( Node.JSDOC_INFO_PROP ) ;^105^^^^^99^109^info =  ( JSDocInfo )  gramps.getProp ( Node.JSDOC_INFO_PROP ) ;^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  gramps  n  parent  List  constructors  newNodes  requires  String  functionName  qualifiedName  JSDocInfo  info  
[BugLab_Variable_Misuse]^Node gramps = n.getParent (  ) ;^102^^^^^99^109^Node gramps = parent.getParent (  ) ;^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  gramps  n  parent  List  constructors  newNodes  requires  String  functionName  qualifiedName  JSDocInfo  info  
[BugLab_Variable_Misuse]^Preconditions.checkState ( parent != null && gramps.getType (  )  == Token.VAR ) ;^103^104^^^^99^109^Preconditions.checkState ( gramps != null && gramps.getType (  )  == Token.VAR ) ;^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  gramps  n  parent  List  constructors  newNodes  requires  String  functionName  qualifiedName  JSDocInfo  info  
[BugLab_Wrong_Operator]^Preconditions.checkState ( gramps != null || gramps.getType (  )  == Token.VAR ) ;^103^104^^^^99^109^Preconditions.checkState ( gramps != null && gramps.getType (  )  == Token.VAR ) ;^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  gramps  n  parent  List  constructors  newNodes  requires  String  functionName  qualifiedName  JSDocInfo  info  
[BugLab_Wrong_Operator]^Preconditions.checkState ( gramps == null && gramps.getType (  )  == Token.VAR ) ;^103^104^^^^99^109^Preconditions.checkState ( gramps != null && gramps.getType (  )  == Token.VAR ) ;^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  gramps  n  parent  List  constructors  newNodes  requires  String  functionName  qualifiedName  JSDocInfo  info  
[BugLab_Wrong_Operator]^Preconditions.checkState ( gramps != null && gramps.getType (  )  != Token.VAR ) ;^103^104^^^^99^109^Preconditions.checkState ( gramps != null && gramps.getType (  )  == Token.VAR ) ;^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  gramps  n  parent  List  constructors  newNodes  requires  String  functionName  qualifiedName  JSDocInfo  info  
[BugLab_Variable_Misuse]^gramps != null && parent.getType (  )  == Token.VAR ) ;^104^^^^^99^109^gramps != null && gramps.getType (  )  == Token.VAR ) ;^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  gramps  n  parent  List  constructors  newNodes  requires  String  functionName  qualifiedName  JSDocInfo  info  
[BugLab_Variable_Misuse]^constructors.add ( qualifiedName ) ;^100^^^^^85^115^constructors.add ( functionName ) ;^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  gramps  n  parent  List  constructors  newNodes  requires  String  functionName  qualifiedName  JSDocInfo  info  
[BugLab_Wrong_Operator]^if  ( info != null || info.isConstructor (  )  )  {^106^^^^^91^121^if  ( info != null && info.isConstructor (  )  )  {^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  gramps  n  parent  List  constructors  newNodes  requires  String  functionName  qualifiedName  JSDocInfo  info  
[BugLab_Wrong_Operator]^if  ( info == null && info.isConstructor (  )  )  {^106^^^^^91^121^if  ( info != null && info.isConstructor (  )  )  {^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  gramps  n  parent  List  constructors  newNodes  requires  String  functionName  qualifiedName  JSDocInfo  info  
[BugLab_Variable_Misuse]^constructors.add ( qualifiedName ) ;^107^^^^^92^122^constructors.add ( functionName ) ;^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  gramps  n  parent  List  constructors  newNodes  requires  String  functionName  qualifiedName  JSDocInfo  info  
[BugLab_Variable_Misuse]^info =  ( JSDocInfo )  n.getProp ( Node.JSDOC_INFO_PROP ) ;^98^^^^^83^113^info =  ( JSDocInfo )  parent.getProp ( Node.JSDOC_INFO_PROP ) ;^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  gramps  n  parent  List  constructors  newNodes  requires  String  functionName  qualifiedName  JSDocInfo  info  
[BugLab_Variable_Misuse]^info =  ( JSDocInfo )  parent.getProp ( Node.JSDOC_INFO_PROP ) ;^105^^^^^90^120^info =  ( JSDocInfo )  gramps.getProp ( Node.JSDOC_INFO_PROP ) ;^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  gramps  n  parent  List  constructors  newNodes  requires  String  functionName  qualifiedName  JSDocInfo  info  
[BugLab_Variable_Misuse]^String functionName = n.getString (  ) ;^97^^^^^82^112^String functionName = parent.getString (  ) ;^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  gramps  n  parent  List  constructors  newNodes  requires  String  functionName  qualifiedName  JSDocInfo  info  
[BugLab_Variable_Misuse]^Node gramps = n.getParent (  ) ;^102^^^^^87^117^Node gramps = parent.getParent (  ) ;^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  gramps  n  parent  List  constructors  newNodes  requires  String  functionName  qualifiedName  JSDocInfo  info  
[BugLab_Variable_Misuse]^Preconditions.checkState ( parent != null && gramps.getType (  )  == Token.VAR ) ;^103^104^^^^88^118^Preconditions.checkState ( gramps != null && gramps.getType (  )  == Token.VAR ) ;^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  gramps  n  parent  List  constructors  newNodes  requires  String  functionName  qualifiedName  JSDocInfo  info  
[BugLab_Wrong_Operator]^Preconditions.checkState ( gramps != null || gramps.getType (  )  == Token.VAR ) ;^103^104^^^^88^118^Preconditions.checkState ( gramps != null && gramps.getType (  )  == Token.VAR ) ;^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  gramps  n  parent  List  constructors  newNodes  requires  String  functionName  qualifiedName  JSDocInfo  info  
[BugLab_Wrong_Operator]^Preconditions.checkState ( gramps == null && gramps.getType (  )  == Token.VAR ) ;^103^104^^^^88^118^Preconditions.checkState ( gramps != null && gramps.getType (  )  == Token.VAR ) ;^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  gramps  n  parent  List  constructors  newNodes  requires  String  functionName  qualifiedName  JSDocInfo  info  
[BugLab_Wrong_Operator]^Preconditions.checkState ( gramps != null && gramps.getType (  )  != Token.VAR ) ;^103^104^^^^88^118^Preconditions.checkState ( gramps != null && gramps.getType (  )  == Token.VAR ) ;^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  gramps  n  parent  List  constructors  newNodes  requires  String  functionName  qualifiedName  JSDocInfo  info  
[BugLab_Variable_Misuse]^gramps != null && parent.getType (  )  == Token.VAR ) ;^104^^^^^89^119^gramps != null && gramps.getType (  )  == Token.VAR ) ;^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  gramps  n  parent  List  constructors  newNodes  requires  String  functionName  qualifiedName  JSDocInfo  info  
[BugLab_Wrong_Operator]^if  ( parent.getType (  )  <= Token.NAME )  {^96^^^^^81^111^if  ( parent.getType (  )  == Token.NAME )  {^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  gramps  n  parent  List  constructors  newNodes  requires  String  functionName  qualifiedName  JSDocInfo  info  
[BugLab_Variable_Misuse]^Preconditions.checkState ( gramps != null && gramps.getType (  )  == Token.null ) ;^103^104^^^^88^118^Preconditions.checkState ( gramps != null && gramps.getType (  )  == Token.VAR ) ;^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  gramps  n  parent  List  constructors  newNodes  requires  String  functionName  qualifiedName  JSDocInfo  info  
[BugLab_Variable_Misuse]^if  ( info != parentull && info.isConstructor (  )  )  {^113^^^^^98^128^if  ( info != null && info.isConstructor (  )  )  {^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  gramps  n  parent  List  constructors  newNodes  requires  String  functionName  qualifiedName  JSDocInfo  info  
[BugLab_Wrong_Operator]^if  ( info != null || info.isConstructor (  )  )  {^113^^^^^98^128^if  ( info != null && info.isConstructor (  )  )  {^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  gramps  n  parent  List  constructors  newNodes  requires  String  functionName  qualifiedName  JSDocInfo  info  
[BugLab_Wrong_Operator]^if  ( info == null && info.isConstructor (  )  )  {^113^^^^^98^128^if  ( info != null && info.isConstructor (  )  )  {^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  gramps  n  parent  List  constructors  newNodes  requires  String  functionName  qualifiedName  JSDocInfo  info  
[BugLab_Variable_Misuse]^String functionName = parent.getFirstChild (  ) .getString (  ) ;^114^^^^^99^129^String functionName = n.getFirstChild (  ) .getString (  ) ;^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  gramps  n  parent  List  constructors  newNodes  requires  String  functionName  qualifiedName  JSDocInfo  info  
[BugLab_Variable_Misuse]^constructors.add ( qualifiedName ) ;^115^^^^^100^130^constructors.add ( functionName ) ;^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  gramps  n  parent  List  constructors  newNodes  requires  String  functionName  qualifiedName  JSDocInfo  info  
[BugLab_Variable_Misuse]^info =  ( JSDocInfo )  parent.getProp ( Node.JSDOC_INFO_PROP ) ;^112^^^^^97^127^info =  ( JSDocInfo )  n.getProp ( Node.JSDOC_INFO_PROP ) ;^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  gramps  n  parent  List  constructors  newNodes  requires  String  functionName  qualifiedName  JSDocInfo  info  
[BugLab_Variable_Misuse]^switch  ( parent.getType (  )  )  {^86^^^^^71^101^switch  ( n.getType (  )  )  {^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  gramps  n  parent  List  constructors  newNodes  requires  String  functionName  qualifiedName  JSDocInfo  info  
[BugLab_Variable_Misuse]^info =  ( JSDocInfo )  parent.getProp ( Node.JSDOC_INFO_PROP ) ;^88^^^^^73^103^info =  ( JSDocInfo )  n.getProp ( Node.JSDOC_INFO_PROP ) ;^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  gramps  n  parent  List  constructors  newNodes  requires  String  functionName  qualifiedName  JSDocInfo  info  
[BugLab_Variable_Misuse]^visitCallNode ( gramps, parent ) ;^120^^^^^105^135^visitCallNode ( n, parent ) ;^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  gramps  n  parent  List  constructors  newNodes  requires  String  functionName  qualifiedName  JSDocInfo  info  
[BugLab_Variable_Misuse]^visitCallNode ( n, gramps ) ;^120^^^^^105^135^visitCallNode ( n, parent ) ;^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  gramps  n  parent  List  constructors  newNodes  requires  String  functionName  qualifiedName  JSDocInfo  info  
[BugLab_Argument_Swapping]^visitCallNode ( parent, n ) ;^120^^^^^105^135^visitCallNode ( n, parent ) ;^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  gramps  n  parent  List  constructors  newNodes  requires  String  functionName  qualifiedName  JSDocInfo  info  
[BugLab_Variable_Misuse]^visitNewNode ( t, parent ) ;^126^^^^^111^141^visitNewNode ( t, n ) ;^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  gramps  n  parent  List  constructors  newNodes  requires  String  functionName  qualifiedName  JSDocInfo  info  
[BugLab_Argument_Swapping]^visitNewNode ( n, t ) ;^126^^^^^111^141^visitNewNode ( t, n ) ;^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  gramps  n  parent  List  constructors  newNodes  requires  String  functionName  qualifiedName  JSDocInfo  info  
[BugLab_Argument_Swapping]^if  (  ( requires == null || !constructors.contains ( className )  ) &&  ( constructors == null || !requires.contains ( className )  ) && !classNames.contains ( className )  )  {^134^135^136^^^130^147^if  (  ( constructors == null || !constructors.contains ( className )  ) &&  ( requires == null || !requires.contains ( className )  ) && !classNames.contains ( className )  )  {^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visitScriptNode [RETURN_TYPE] void   NodeTraversal t [VARIABLES] AbstractCompiler  compiler  Set  classNames  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  node  List  constructors  newNodes  requires  String  className  
[BugLab_Wrong_Operator]^if  (  ( constructors == null || !constructors.contains ( className )  ) ||  ( requires == null || !requires.contains ( className )  ) && !classNames.contains ( className )  )  {^134^135^136^^^130^147^if  (  ( constructors == null || !constructors.contains ( className )  ) &&  ( requires == null || !requires.contains ( className )  ) && !classNames.contains ( className )  )  {^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visitScriptNode [RETURN_TYPE] void   NodeTraversal t [VARIABLES] AbstractCompiler  compiler  Set  classNames  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  node  List  constructors  newNodes  requires  String  className  
[BugLab_Wrong_Operator]^if  (  ( constructors == null && !constructors.contains ( className )  ) &&  ( requires == null || !requires.contains ( className )  ) && !classNames.contains ( className )  )  {^134^135^136^^^130^147^if  (  ( constructors == null || !constructors.contains ( className )  ) &&  ( requires == null || !requires.contains ( className )  ) && !classNames.contains ( className )  )  {^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visitScriptNode [RETURN_TYPE] void   NodeTraversal t [VARIABLES] AbstractCompiler  compiler  Set  classNames  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  node  List  constructors  newNodes  requires  String  className  
[BugLab_Wrong_Operator]^if  (  ( constructors != null || !constructors.contains ( className )  ) &&  ( requires == null || !requires.contains ( className )  ) && !classNames.contains ( className )  )  {^134^135^136^^^130^147^if  (  ( constructors == null || !constructors.contains ( className )  ) &&  ( requires == null || !requires.contains ( className )  ) && !classNames.contains ( className )  )  {^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visitScriptNode [RETURN_TYPE] void   NodeTraversal t [VARIABLES] AbstractCompiler  compiler  Set  classNames  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  node  List  constructors  newNodes  requires  String  className  
[BugLab_Wrong_Operator]^if  (  ( constructors == null || !constructors.contains ( className )  ) &&  ( requires != null || !requires.contains ( className )  ) && !classNames.contains ( className )  )  {^134^135^136^^^130^147^if  (  ( constructors == null || !constructors.contains ( className )  ) &&  ( requires == null || !requires.contains ( className )  ) && !classNames.contains ( className )  )  {^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visitScriptNode [RETURN_TYPE] void   NodeTraversal t [VARIABLES] AbstractCompiler  compiler  Set  classNames  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  node  List  constructors  newNodes  requires  String  className  
[BugLab_Argument_Swapping]^compiler.report ( JSError.make ( level, node, t, MISSING_REQUIRE_WARNING, className )  ) ;^137^138^^^^130^147^compiler.report ( JSError.make ( t, node, level, MISSING_REQUIRE_WARNING, className )  ) ;^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visitScriptNode [RETURN_TYPE] void   NodeTraversal t [VARIABLES] AbstractCompiler  compiler  Set  classNames  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  node  List  constructors  newNodes  requires  String  className  
[BugLab_Argument_Swapping]^compiler.report ( JSError.make ( node, t, level, MISSING_REQUIRE_WARNING, className )  ) ;^137^138^^^^130^147^compiler.report ( JSError.make ( t, node, level, MISSING_REQUIRE_WARNING, className )  ) ;^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visitScriptNode [RETURN_TYPE] void   NodeTraversal t [VARIABLES] AbstractCompiler  compiler  Set  classNames  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  node  List  constructors  newNodes  requires  String  className  
[BugLab_Argument_Swapping]^compiler.report ( JSError.make ( className, node, level, MISSING_REQUIRE_WARNING, t )  ) ;^137^138^^^^130^147^compiler.report ( JSError.make ( t, node, level, MISSING_REQUIRE_WARNING, className )  ) ;^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visitScriptNode [RETURN_TYPE] void   NodeTraversal t [VARIABLES] AbstractCompiler  compiler  Set  classNames  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  node  List  constructors  newNodes  requires  String  className  
[BugLab_Argument_Swapping]^compiler.report ( JSError.make ( t, node, MISSING_REQUIRE_WARNING, level, className )  ) ;^137^138^^^^130^147^compiler.report ( JSError.make ( t, node, level, MISSING_REQUIRE_WARNING, className )  ) ;^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visitScriptNode [RETURN_TYPE] void   NodeTraversal t [VARIABLES] AbstractCompiler  compiler  Set  classNames  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  node  List  constructors  newNodes  requires  String  className  
[BugLab_Argument_Swapping]^JSError.make ( MISSING_REQUIRE_WARNING, node, level, t, className )  ) ;^138^^^^^130^147^JSError.make ( t, node, level, MISSING_REQUIRE_WARNING, className )  ) ;^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visitScriptNode [RETURN_TYPE] void   NodeTraversal t [VARIABLES] AbstractCompiler  compiler  Set  classNames  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  node  List  constructors  newNodes  requires  String  className  
[BugLab_Argument_Swapping]^JSError.make ( t, className, level, MISSING_REQUIRE_WARNING, node )  ) ;^138^^^^^130^147^JSError.make ( t, node, level, MISSING_REQUIRE_WARNING, className )  ) ;^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visitScriptNode [RETURN_TYPE] void   NodeTraversal t [VARIABLES] AbstractCompiler  compiler  Set  classNames  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  node  List  constructors  newNodes  requires  String  className  
[BugLab_Argument_Swapping]^JSError.make ( t, node, className, MISSING_REQUIRE_WARNING, level )  ) ;^138^^^^^130^147^JSError.make ( t, node, level, MISSING_REQUIRE_WARNING, className )  ) ;^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visitScriptNode [RETURN_TYPE] void   NodeTraversal t [VARIABLES] AbstractCompiler  compiler  Set  classNames  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  node  List  constructors  newNodes  requires  String  className  
[BugLab_Argument_Swapping]^JSError.make ( t, MISSING_REQUIRE_WARNING, level, node, className )  ) ;^138^^^^^130^147^JSError.make ( t, node, level, MISSING_REQUIRE_WARNING, className )  ) ;^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visitScriptNode [RETURN_TYPE] void   NodeTraversal t [VARIABLES] AbstractCompiler  compiler  Set  classNames  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  node  List  constructors  newNodes  requires  String  className  
[BugLab_Argument_Swapping]^if  (  ( className == null || !constructors.contains ( constructors )  ) &&  ( requires == null || !requires.contains ( className )  ) && !classNames.contains ( className )  )  {^134^135^136^^^130^147^if  (  ( constructors == null || !constructors.contains ( className )  ) &&  ( requires == null || !requires.contains ( className )  ) && !classNames.contains ( className )  )  {^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visitScriptNode [RETURN_TYPE] void   NodeTraversal t [VARIABLES] AbstractCompiler  compiler  Set  classNames  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  node  List  constructors  newNodes  requires  String  className  
[BugLab_Argument_Swapping]^&&  ( className == null || !requires.contains ( requires )  ) && !classNames.contains ( className )  )  {^135^136^^^^130^147^&&  ( requires == null || !requires.contains ( className )  ) && !classNames.contains ( className )  )  {^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visitScriptNode [RETURN_TYPE] void   NodeTraversal t [VARIABLES] AbstractCompiler  compiler  Set  classNames  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  node  List  constructors  newNodes  requires  String  className  
[BugLab_Argument_Swapping]^compiler.report ( JSError.make ( t, MISSING_REQUIRE_WARNING, level, node, className )  ) ;^137^138^^^^130^147^compiler.report ( JSError.make ( t, node, level, MISSING_REQUIRE_WARNING, className )  ) ;^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visitScriptNode [RETURN_TYPE] void   NodeTraversal t [VARIABLES] AbstractCompiler  compiler  Set  classNames  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  node  List  constructors  newNodes  requires  String  className  
[BugLab_Argument_Swapping]^compiler.report ( JSError.make ( t, node, level, className, MISSING_REQUIRE_WARNING )  ) ;^137^138^^^^130^147^compiler.report ( JSError.make ( t, node, level, MISSING_REQUIRE_WARNING, className )  ) ;^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visitScriptNode [RETURN_TYPE] void   NodeTraversal t [VARIABLES] AbstractCompiler  compiler  Set  classNames  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  node  List  constructors  newNodes  requires  String  className  
[BugLab_Argument_Swapping]^JSError.make ( t, level, node, MISSING_REQUIRE_WARNING, className )  ) ;^138^^^^^130^147^JSError.make ( t, node, level, MISSING_REQUIRE_WARNING, className )  ) ;^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visitScriptNode [RETURN_TYPE] void   NodeTraversal t [VARIABLES] AbstractCompiler  compiler  Set  classNames  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  node  List  constructors  newNodes  requires  String  className  
[BugLab_Variable_Misuse]^String required = codingConvention.extractClassNameIfRequire ( parent, parent ) ;^150^^^^^149^154^String required = codingConvention.extractClassNameIfRequire ( n, parent ) ;^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visitCallNode [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  n  parent  List  constructors  newNodes  requires  String  required  
[BugLab_Variable_Misuse]^String required = codingConvention.extractClassNameIfRequire ( n, n ) ;^150^^^^^149^154^String required = codingConvention.extractClassNameIfRequire ( n, parent ) ;^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visitCallNode [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  n  parent  List  constructors  newNodes  requires  String  required  
[BugLab_Argument_Swapping]^String required = codingConvention.extractClassNameIfRequire ( parent, n ) ;^150^^^^^149^154^String required = codingConvention.extractClassNameIfRequire ( n, parent ) ;^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visitCallNode [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  n  parent  List  constructors  newNodes  requires  String  required  
[BugLab_Argument_Swapping]^String required = parent.extractClassNameIfRequire ( n, codingConvention ) ;^150^^^^^149^154^String required = codingConvention.extractClassNameIfRequire ( n, parent ) ;^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visitCallNode [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  n  parent  List  constructors  newNodes  requires  String  required  
[BugLab_Argument_Swapping]^String required = n.extractClassNameIfRequire ( codingConvention, parent ) ;^150^^^^^149^154^String required = codingConvention.extractClassNameIfRequire ( n, parent ) ;^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visitCallNode [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  n  parent  List  constructors  newNodes  requires  String  required  
[BugLab_Wrong_Operator]^if  ( required == null )  {^151^^^^^149^154^if  ( required != null )  {^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visitCallNode [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  n  parent  List  constructors  newNodes  requires  String  required  
[BugLab_Variable_Misuse]^Node qNameNode = nameNode.getFirstChild (  ) ;^157^^^^^156^181^Node qNameNode = n.getFirstChild (  ) ;^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visitNewNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  Var  var  CodingConvention  codingConvention  Node  n  nameNode  qNameNode  List  constructors  newNodes  requires  String  name  qName  
[BugLab_Variable_Misuse]^String qName = nameNode.getQualifiedName (  ) ;^158^^^^^156^181^String qName = qNameNode.getQualifiedName (  ) ;^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visitNewNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  Var  var  CodingConvention  codingConvention  Node  n  nameNode  qNameNode  List  constructors  newNodes  requires  String  name  qName  
[BugLab_Variable_Misuse]^if  ( name == null || qName.isEmpty (  )  )  {^161^^^^^156^181^if  ( qName == null || qName.isEmpty (  )  )  {^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visitNewNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  Var  var  CodingConvention  codingConvention  Node  n  nameNode  qNameNode  List  constructors  newNodes  requires  String  name  qName  
[BugLab_Wrong_Operator]^if  ( qName == null && qName.isEmpty (  )  )  {^161^^^^^156^181^if  ( qName == null || qName.isEmpty (  )  )  {^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visitNewNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  Var  var  CodingConvention  codingConvention  Node  n  nameNode  qNameNode  List  constructors  newNodes  requires  String  name  qName  
[BugLab_Wrong_Operator]^if  ( qName != null || qName.isEmpty (  )  )  {^161^^^^^156^181^if  ( qName == null || qName.isEmpty (  )  )  {^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visitNewNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  Var  var  CodingConvention  codingConvention  Node  n  nameNode  qNameNode  List  constructors  newNodes  requires  String  name  qName  
[BugLab_Variable_Misuse]^Node nameNode = n;^166^^^^^156^181^Node nameNode = qNameNode;^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visitNewNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  Var  var  CodingConvention  codingConvention  Node  n  nameNode  qNameNode  List  constructors  newNodes  requires  String  name  qName  
[BugLab_Variable_Misuse]^for  ( ; qNameNode.hasChildren (  ) ; nameNode = nameNode.getFirstChild (  )  )  {}^167^^^^^156^181^for  ( ; nameNode.hasChildren (  ) ; nameNode = nameNode.getFirstChild (  )  )  {}^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visitNewNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  Var  var  CodingConvention  codingConvention  Node  n  nameNode  qNameNode  List  constructors  newNodes  requires  String  name  qName  
[BugLab_Variable_Misuse]^if  ( qNameNode.getType (  )  != Token.NAME )  {^171^^^^^156^181^if  ( nameNode.getType (  )  != Token.NAME )  {^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visitNewNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  Var  var  CodingConvention  codingConvention  Node  n  nameNode  qNameNode  List  constructors  newNodes  requires  String  name  qName  
[BugLab_Wrong_Operator]^if  ( nameNode.getType (  )  > Token.NAME )  {^171^^^^^156^181^if  ( nameNode.getType (  )  != Token.NAME )  {^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visitNewNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  Var  var  CodingConvention  codingConvention  Node  n  nameNode  qNameNode  List  constructors  newNodes  requires  String  name  qName  
[BugLab_Variable_Misuse]^String name = qNameNode.getString (  ) ;^175^^^^^156^181^String name = nameNode.getString (  ) ;^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visitNewNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  Var  var  CodingConvention  codingConvention  Node  n  nameNode  qNameNode  List  constructors  newNodes  requires  String  name  qName  
[BugLab_Variable_Misuse]^Scope.Var var = t.getScope (  ) .getVar ( qName ) ;^176^^^^^156^181^Scope.Var var = t.getScope (  ) .getVar ( name ) ;^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visitNewNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  Var  var  CodingConvention  codingConvention  Node  n  nameNode  qNameNode  List  constructors  newNodes  requires  String  name  qName  
[BugLab_Argument_Swapping]^Scope.Var var = name.getScope (  ) .getVar ( t ) ;^176^^^^^156^181^Scope.Var var = t.getScope (  ) .getVar ( name ) ;^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visitNewNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  Var  var  CodingConvention  codingConvention  Node  n  nameNode  qNameNode  List  constructors  newNodes  requires  String  name  qName  
[BugLab_Wrong_Operator]^if  ( var == null && var.isLocal (  )  || var.isExtern (  )  )  {^177^^^^^156^181^if  ( var == null || var.isLocal (  )  || var.isExtern (  )  )  {^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visitNewNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  Var  var  CodingConvention  codingConvention  Node  n  nameNode  qNameNode  List  constructors  newNodes  requires  String  name  qName  
[BugLab_Wrong_Operator]^if  ( var != null || var.isLocal (  )  || var.isExtern (  )  )  {^177^^^^^156^181^if  ( var == null || var.isLocal (  )  || var.isExtern (  )  )  {^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visitNewNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  Var  var  CodingConvention  codingConvention  Node  n  nameNode  qNameNode  List  constructors  newNodes  requires  String  name  qName  
[BugLab_Variable_Misuse]^newNodes.add ( qNameNode ) ;^180^^^^^156^181^newNodes.add ( n ) ;^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visitNewNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  Var  var  CodingConvention  codingConvention  Node  n  nameNode  qNameNode  List  constructors  newNodes  requires  String  name  qName  
[BugLab_Variable_Misuse]^return n == null || parent.getType (  )  != Token.SCRIPT || !t.getInput (  ) .isExtern (  ) ;^79^80^^^^78^81^return parent == null || parent.getType (  )  != Token.SCRIPT || !t.getInput (  ) .isExtern (  ) ;^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] List  constructors  newNodes  requires  boolean  NodeTraversal  t  Node  n  parent  
[BugLab_Wrong_Operator]^return parent == null && parent.getType (  )  != Token.SCRIPT || !t.getInput (  ) .isExtern (  ) ;^79^80^^^^78^81^return parent == null || parent.getType (  )  != Token.SCRIPT || !t.getInput (  ) .isExtern (  ) ;^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] List  constructors  newNodes  requires  boolean  NodeTraversal  t  Node  n  parent  
[BugLab_Wrong_Operator]^return parent != null || parent.getType (  )  != Token.SCRIPT || !t.getInput (  ) .isExtern (  ) ;^79^80^^^^78^81^return parent == null || parent.getType (  )  != Token.SCRIPT || !t.getInput (  ) .isExtern (  ) ;^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] List  constructors  newNodes  requires  boolean  NodeTraversal  t  Node  n  parent  
[BugLab_Wrong_Operator]^return parent == null || parent.getType (  )  == Token.SCRIPT || !t.getInput (  ) .isExtern (  ) ;^79^80^^^^78^81^return parent == null || parent.getType (  )  != Token.SCRIPT || !t.getInput (  ) .isExtern (  ) ;^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] List  constructors  newNodes  requires  boolean  NodeTraversal  t  Node  n  parent  
[BugLab_Variable_Misuse]^if  ( info != parentull && info.isConstructor (  )  )  {^89^^^^^74^104^if  ( info != null && info.isConstructor (  )  )  {^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] List  constructors  newNodes  requires  String  functionName  qualifiedName  boolean  JSDocInfo  info  NodeTraversal  t  Node  gramps  n  parent  
[BugLab_Wrong_Operator]^if  ( info != null || info.isConstructor (  )  )  {^89^^^^^74^104^if  ( info != null && info.isConstructor (  )  )  {^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] List  constructors  newNodes  requires  String  functionName  qualifiedName  boolean  JSDocInfo  info  NodeTraversal  t  Node  gramps  n  parent  
[BugLab_Wrong_Operator]^if  ( info == null && info.isConstructor (  )  )  {^89^^^^^74^104^if  ( info != null && info.isConstructor (  )  )  {^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] List  constructors  newNodes  requires  String  functionName  qualifiedName  boolean  JSDocInfo  info  NodeTraversal  t  Node  gramps  n  parent  
[BugLab_Variable_Misuse]^String qualifiedName = parent.getFirstChild (  ) .getQualifiedName (  ) ;^90^^^^^75^105^String qualifiedName = n.getFirstChild (  ) .getQualifiedName (  ) ;^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] List  constructors  newNodes  requires  String  functionName  qualifiedName  boolean  JSDocInfo  info  NodeTraversal  t  Node  gramps  n  parent  
[BugLab_Variable_Misuse]^constructors.add ( functionName ) ;^91^^^^^76^106^constructors.add ( qualifiedName ) ;^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] List  constructors  newNodes  requires  String  functionName  qualifiedName  boolean  JSDocInfo  info  NodeTraversal  t  Node  gramps  n  parent  
[BugLab_Variable_Misuse]^if  ( NodeUtil.isFunctionAnonymous ( parent )  )  {^95^^^^^80^110^if  ( NodeUtil.isFunctionAnonymous ( n )  )  {^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] List  constructors  newNodes  requires  String  functionName  qualifiedName  boolean  JSDocInfo  info  NodeTraversal  t  Node  gramps  n  parent  
[BugLab_Variable_Misuse]^if  ( info != parentull && info.isConstructor (  )  )  {^113^^^^^95^117^if  ( info != null && info.isConstructor (  )  )  {^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] List  constructors  newNodes  requires  String  functionName  qualifiedName  boolean  JSDocInfo  info  NodeTraversal  t  Node  gramps  n  parent  
[BugLab_Wrong_Operator]^if  ( info != null || info.isConstructor (  )  )  {^113^^^^^95^117^if  ( info != null && info.isConstructor (  )  )  {^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] List  constructors  newNodes  requires  String  functionName  qualifiedName  boolean  JSDocInfo  info  NodeTraversal  t  Node  gramps  n  parent  
[BugLab_Wrong_Operator]^if  ( info == null && info.isConstructor (  )  )  {^113^^^^^95^117^if  ( info != null && info.isConstructor (  )  )  {^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] List  constructors  newNodes  requires  String  functionName  qualifiedName  boolean  JSDocInfo  info  NodeTraversal  t  Node  gramps  n  parent  
[BugLab_Variable_Misuse]^String functionName = parent.getFirstChild (  ) .getString (  ) ;^114^^^^^95^117^String functionName = n.getFirstChild (  ) .getString (  ) ;^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] List  constructors  newNodes  requires  String  functionName  qualifiedName  boolean  JSDocInfo  info  NodeTraversal  t  Node  gramps  n  parent  
[BugLab_Variable_Misuse]^constructors.add ( qualifiedName ) ;^115^^^^^95^117^constructors.add ( functionName ) ;^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] List  constructors  newNodes  requires  String  functionName  qualifiedName  boolean  JSDocInfo  info  NodeTraversal  t  Node  gramps  n  parent  
[BugLab_Variable_Misuse]^info =  ( JSDocInfo )  parent.getProp ( Node.JSDOC_INFO_PROP ) ;^112^^^^^95^117^info =  ( JSDocInfo )  n.getProp ( Node.JSDOC_INFO_PROP ) ;^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] List  constructors  newNodes  requires  String  functionName  qualifiedName  boolean  JSDocInfo  info  NodeTraversal  t  Node  gramps  n  parent  
[BugLab_Variable_Misuse]^if  ( n.getType (  )  == Token.NAME )  {^96^^^^^81^111^if  ( parent.getType (  )  == Token.NAME )  {^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] List  constructors  newNodes  requires  String  functionName  qualifiedName  boolean  JSDocInfo  info  NodeTraversal  t  Node  gramps  n  parent  
[BugLab_Wrong_Operator]^if  ( parent.getType (  )  != Token.NAME )  {^96^^^^^81^111^if  ( parent.getType (  )  == Token.NAME )  {^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] List  constructors  newNodes  requires  String  functionName  qualifiedName  boolean  JSDocInfo  info  NodeTraversal  t  Node  gramps  n  parent  
[BugLab_Wrong_Operator]^if  ( info != null || info.isConstructor (  )  )  {^99^^^^^84^114^if  ( info != null && info.isConstructor (  )  )  {^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] List  constructors  newNodes  requires  String  functionName  qualifiedName  boolean  JSDocInfo  info  NodeTraversal  t  Node  gramps  n  parent  
[BugLab_Wrong_Operator]^if  ( info == null && info.isConstructor (  )  )  {^99^^^^^84^114^if  ( info != null && info.isConstructor (  )  )  {^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] List  constructors  newNodes  requires  String  functionName  qualifiedName  boolean  JSDocInfo  info  NodeTraversal  t  Node  gramps  n  parent  
[BugLab_Wrong_Operator]^if  ( info != null || info.isConstructor (  )  )  {^106^^^^^99^109^if  ( info != null && info.isConstructor (  )  )  {^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] List  constructors  newNodes  requires  String  functionName  qualifiedName  boolean  JSDocInfo  info  NodeTraversal  t  Node  gramps  n  parent  
[BugLab_Wrong_Operator]^if  ( info == null && info.isConstructor (  )  )  {^106^^^^^99^109^if  ( info != null && info.isConstructor (  )  )  {^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] List  constructors  newNodes  requires  String  functionName  qualifiedName  boolean  JSDocInfo  info  NodeTraversal  t  Node  gramps  n  parent  
[BugLab_Variable_Misuse]^constructors.add ( qualifiedName ) ;^107^^^^^99^109^constructors.add ( functionName ) ;^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] List  constructors  newNodes  requires  String  functionName  qualifiedName  boolean  JSDocInfo  info  NodeTraversal  t  Node  gramps  n  parent  
[BugLab_Variable_Misuse]^info =  ( JSDocInfo )  parent.getProp ( Node.JSDOC_INFO_PROP ) ;^105^^^^^99^109^info =  ( JSDocInfo )  gramps.getProp ( Node.JSDOC_INFO_PROP ) ;^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] List  constructors  newNodes  requires  String  functionName  qualifiedName  boolean  JSDocInfo  info  NodeTraversal  t  Node  gramps  n  parent  
[BugLab_Variable_Misuse]^Node gramps = n.getParent (  ) ;^102^^^^^99^109^Node gramps = parent.getParent (  ) ;^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] List  constructors  newNodes  requires  String  functionName  qualifiedName  boolean  JSDocInfo  info  NodeTraversal  t  Node  gramps  n  parent  
[BugLab_Variable_Misuse]^Preconditions.checkState ( parent != null && gramps.getType (  )  == Token.VAR ) ;^103^104^^^^99^109^Preconditions.checkState ( gramps != null && gramps.getType (  )  == Token.VAR ) ;^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] List  constructors  newNodes  requires  String  functionName  qualifiedName  boolean  JSDocInfo  info  NodeTraversal  t  Node  gramps  n  parent  
[BugLab_Wrong_Operator]^Preconditions.checkState ( gramps != null || gramps.getType (  )  == Token.VAR ) ;^103^104^^^^99^109^Preconditions.checkState ( gramps != null && gramps.getType (  )  == Token.VAR ) ;^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] List  constructors  newNodes  requires  String  functionName  qualifiedName  boolean  JSDocInfo  info  NodeTraversal  t  Node  gramps  n  parent  
[BugLab_Wrong_Operator]^Preconditions.checkState ( gramps == null && gramps.getType (  )  == Token.VAR ) ;^103^104^^^^99^109^Preconditions.checkState ( gramps != null && gramps.getType (  )  == Token.VAR ) ;^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] List  constructors  newNodes  requires  String  functionName  qualifiedName  boolean  JSDocInfo  info  NodeTraversal  t  Node  gramps  n  parent  
[BugLab_Wrong_Operator]^Preconditions.checkState ( gramps != null && gramps.getType (  )  != Token.VAR ) ;^103^104^^^^99^109^Preconditions.checkState ( gramps != null && gramps.getType (  )  == Token.VAR ) ;^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] List  constructors  newNodes  requires  String  functionName  qualifiedName  boolean  JSDocInfo  info  NodeTraversal  t  Node  gramps  n  parent  
[BugLab_Variable_Misuse]^gramps != null && parent.getType (  )  == Token.VAR ) ;^104^^^^^99^109^gramps != null && gramps.getType (  )  == Token.VAR ) ;^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] List  constructors  newNodes  requires  String  functionName  qualifiedName  boolean  JSDocInfo  info  NodeTraversal  t  Node  gramps  n  parent  
[BugLab_Variable_Misuse]^constructors.add ( qualifiedName ) ;^100^^^^^85^115^constructors.add ( functionName ) ;^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] List  constructors  newNodes  requires  String  functionName  qualifiedName  boolean  JSDocInfo  info  NodeTraversal  t  Node  gramps  n  parent  
[BugLab_Wrong_Operator]^if  ( info != null || info.isConstructor (  )  )  {^106^^^^^91^121^if  ( info != null && info.isConstructor (  )  )  {^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] List  constructors  newNodes  requires  String  functionName  qualifiedName  boolean  JSDocInfo  info  NodeTraversal  t  Node  gramps  n  parent  
[BugLab_Wrong_Operator]^if  ( info == null && info.isConstructor (  )  )  {^106^^^^^91^121^if  ( info != null && info.isConstructor (  )  )  {^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] List  constructors  newNodes  requires  String  functionName  qualifiedName  boolean  JSDocInfo  info  NodeTraversal  t  Node  gramps  n  parent  
[BugLab_Variable_Misuse]^constructors.add ( qualifiedName ) ;^107^^^^^92^122^constructors.add ( functionName ) ;^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] List  constructors  newNodes  requires  String  functionName  qualifiedName  boolean  JSDocInfo  info  NodeTraversal  t  Node  gramps  n  parent  
[BugLab_Variable_Misuse]^info =  ( JSDocInfo )  n.getProp ( Node.JSDOC_INFO_PROP ) ;^98^^^^^83^113^info =  ( JSDocInfo )  parent.getProp ( Node.JSDOC_INFO_PROP ) ;^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] List  constructors  newNodes  requires  String  functionName  qualifiedName  boolean  JSDocInfo  info  NodeTraversal  t  Node  gramps  n  parent  
[BugLab_Variable_Misuse]^info =  ( JSDocInfo )  parent.getProp ( Node.JSDOC_INFO_PROP ) ;^105^^^^^90^120^info =  ( JSDocInfo )  gramps.getProp ( Node.JSDOC_INFO_PROP ) ;^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] List  constructors  newNodes  requires  String  functionName  qualifiedName  boolean  JSDocInfo  info  NodeTraversal  t  Node  gramps  n  parent  
[BugLab_Variable_Misuse]^String functionName = n.getString (  ) ;^97^^^^^82^112^String functionName = parent.getString (  ) ;^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] List  constructors  newNodes  requires  String  functionName  qualifiedName  boolean  JSDocInfo  info  NodeTraversal  t  Node  gramps  n  parent  
[BugLab_Variable_Misuse]^Node gramps = n.getParent (  ) ;^102^^^^^87^117^Node gramps = parent.getParent (  ) ;^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] List  constructors  newNodes  requires  String  functionName  qualifiedName  boolean  JSDocInfo  info  NodeTraversal  t  Node  gramps  n  parent  
[BugLab_Variable_Misuse]^Preconditions.checkState ( parent != null && gramps.getType (  )  == Token.VAR ) ;^103^104^^^^88^118^Preconditions.checkState ( gramps != null && gramps.getType (  )  == Token.VAR ) ;^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] List  constructors  newNodes  requires  String  functionName  qualifiedName  boolean  JSDocInfo  info  NodeTraversal  t  Node  gramps  n  parent  
[BugLab_Wrong_Operator]^Preconditions.checkState ( gramps != null || gramps.getType (  )  == Token.VAR ) ;^103^104^^^^88^118^Preconditions.checkState ( gramps != null && gramps.getType (  )  == Token.VAR ) ;^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] List  constructors  newNodes  requires  String  functionName  qualifiedName  boolean  JSDocInfo  info  NodeTraversal  t  Node  gramps  n  parent  
[BugLab_Wrong_Operator]^Preconditions.checkState ( gramps == null && gramps.getType (  )  == Token.VAR ) ;^103^104^^^^88^118^Preconditions.checkState ( gramps != null && gramps.getType (  )  == Token.VAR ) ;^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] List  constructors  newNodes  requires  String  functionName  qualifiedName  boolean  JSDocInfo  info  NodeTraversal  t  Node  gramps  n  parent  
[BugLab_Wrong_Operator]^Preconditions.checkState ( gramps != null && gramps.getType (  )  != Token.VAR ) ;^103^104^^^^88^118^Preconditions.checkState ( gramps != null && gramps.getType (  )  == Token.VAR ) ;^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] List  constructors  newNodes  requires  String  functionName  qualifiedName  boolean  JSDocInfo  info  NodeTraversal  t  Node  gramps  n  parent  
[BugLab_Variable_Misuse]^gramps != null && parent.getType (  )  == Token.VAR ) ;^104^^^^^89^119^gramps != null && gramps.getType (  )  == Token.VAR ) ;^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] List  constructors  newNodes  requires  String  functionName  qualifiedName  boolean  JSDocInfo  info  NodeTraversal  t  Node  gramps  n  parent  
[BugLab_Wrong_Operator]^if  ( parent.getType (  )  < Token.NAME )  {^96^^^^^81^111^if  ( parent.getType (  )  == Token.NAME )  {^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] List  constructors  newNodes  requires  String  functionName  qualifiedName  boolean  JSDocInfo  info  NodeTraversal  t  Node  gramps  n  parent  
[BugLab_Variable_Misuse]^Preconditions.checkState ( gramps != null && gramps.getType (  )  == Token.null ) ;^103^104^^^^88^118^Preconditions.checkState ( gramps != null && gramps.getType (  )  == Token.VAR ) ;^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] List  constructors  newNodes  requires  String  functionName  qualifiedName  boolean  JSDocInfo  info  NodeTraversal  t  Node  gramps  n  parent  
[BugLab_Variable_Misuse]^Preconditions.checkState ( gramps != null && gramps.getType (  )  == Token.this ) ;^103^104^^^^99^109^Preconditions.checkState ( gramps != null && gramps.getType (  )  == Token.VAR ) ;^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] List  constructors  newNodes  requires  String  functionName  qualifiedName  boolean  JSDocInfo  info  NodeTraversal  t  Node  gramps  n  parent  
[BugLab_Variable_Misuse]^if  ( info != parentull && info.isConstructor (  )  )  {^113^^^^^98^128^if  ( info != null && info.isConstructor (  )  )  {^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] List  constructors  newNodes  requires  String  functionName  qualifiedName  boolean  JSDocInfo  info  NodeTraversal  t  Node  gramps  n  parent  
[BugLab_Wrong_Operator]^if  ( info != null || info.isConstructor (  )  )  {^113^^^^^98^128^if  ( info != null && info.isConstructor (  )  )  {^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] List  constructors  newNodes  requires  String  functionName  qualifiedName  boolean  JSDocInfo  info  NodeTraversal  t  Node  gramps  n  parent  
[BugLab_Wrong_Operator]^if  ( info == null && info.isConstructor (  )  )  {^113^^^^^98^128^if  ( info != null && info.isConstructor (  )  )  {^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] List  constructors  newNodes  requires  String  functionName  qualifiedName  boolean  JSDocInfo  info  NodeTraversal  t  Node  gramps  n  parent  
[BugLab_Variable_Misuse]^String functionName = parent.getFirstChild (  ) .getString (  ) ;^114^^^^^99^129^String functionName = n.getFirstChild (  ) .getString (  ) ;^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] List  constructors  newNodes  requires  String  functionName  qualifiedName  boolean  JSDocInfo  info  NodeTraversal  t  Node  gramps  n  parent  
[BugLab_Variable_Misuse]^constructors.add ( qualifiedName ) ;^115^^^^^100^130^constructors.add ( functionName ) ;^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] List  constructors  newNodes  requires  String  functionName  qualifiedName  boolean  JSDocInfo  info  NodeTraversal  t  Node  gramps  n  parent  
[BugLab_Variable_Misuse]^info =  ( JSDocInfo )  parent.getProp ( Node.JSDOC_INFO_PROP ) ;^88^^^^^73^103^info =  ( JSDocInfo )  n.getProp ( Node.JSDOC_INFO_PROP ) ;^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] List  constructors  newNodes  requires  String  functionName  qualifiedName  boolean  JSDocInfo  info  NodeTraversal  t  Node  gramps  n  parent  
[BugLab_Variable_Misuse]^info =  ( JSDocInfo )  parent.getProp ( Node.JSDOC_INFO_PROP ) ;^112^^^^^97^127^info =  ( JSDocInfo )  n.getProp ( Node.JSDOC_INFO_PROP ) ;^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] List  constructors  newNodes  requires  String  functionName  qualifiedName  boolean  JSDocInfo  info  NodeTraversal  t  Node  gramps  n  parent  
[BugLab_Variable_Misuse]^switch  ( parent.getType (  )  )  {^86^^^^^71^101^switch  ( n.getType (  )  )  {^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] List  constructors  newNodes  requires  String  functionName  qualifiedName  boolean  JSDocInfo  info  NodeTraversal  t  Node  gramps  n  parent  
[BugLab_Variable_Misuse]^visitCallNode ( gramps, parent ) ;^120^^^^^105^135^visitCallNode ( n, parent ) ;^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] List  constructors  newNodes  requires  String  functionName  qualifiedName  boolean  JSDocInfo  info  NodeTraversal  t  Node  gramps  n  parent  
[BugLab_Variable_Misuse]^visitCallNode ( n, gramps ) ;^120^^^^^105^135^visitCallNode ( n, parent ) ;^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] List  constructors  newNodes  requires  String  functionName  qualifiedName  boolean  JSDocInfo  info  NodeTraversal  t  Node  gramps  n  parent  
[BugLab_Argument_Swapping]^visitCallNode ( parent, n ) ;^120^^^^^105^135^visitCallNode ( n, parent ) ;^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] List  constructors  newNodes  requires  String  functionName  qualifiedName  boolean  JSDocInfo  info  NodeTraversal  t  Node  gramps  n  parent  
[BugLab_Variable_Misuse]^visitNewNode ( t, parent ) ;^126^^^^^111^141^visitNewNode ( t, n ) ;^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] List  constructors  newNodes  requires  String  functionName  qualifiedName  boolean  JSDocInfo  info  NodeTraversal  t  Node  gramps  n  parent  
[BugLab_Argument_Swapping]^visitNewNode ( n, t ) ;^126^^^^^111^141^visitNewNode ( t, n ) ;^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] List  constructors  newNodes  requires  String  functionName  qualifiedName  boolean  JSDocInfo  info  NodeTraversal  t  Node  gramps  n  parent  
[BugLab_Argument_Swapping]^if  (  ( requires == null || !constructors.contains ( className )  ) &&  ( constructors == null || !requires.contains ( className )  ) && !classNames.contains ( className )  )  {^134^135^136^^^130^147^if  (  ( constructors == null || !constructors.contains ( className )  ) &&  ( requires == null || !requires.contains ( className )  ) && !classNames.contains ( className )  )  {^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visitScriptNode [RETURN_TYPE] void   NodeTraversal t [VARIABLES] List  constructors  newNodes  requires  Set  classNames  String  className  boolean  NodeTraversal  t  Node  node  
[BugLab_Argument_Swapping]^if  (  ( constructors == null || !constructors.contains ( requires )  ) &&  ( className == null || !requires.contains ( className )  ) && !classNames.contains ( className )  )  {^134^135^136^^^130^147^if  (  ( constructors == null || !constructors.contains ( className )  ) &&  ( requires == null || !requires.contains ( className )  ) && !classNames.contains ( className )  )  {^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visitScriptNode [RETURN_TYPE] void   NodeTraversal t [VARIABLES] List  constructors  newNodes  requires  Set  classNames  String  className  boolean  NodeTraversal  t  Node  node  
[BugLab_Wrong_Operator]^if  (  ( constructors == null || !constructors.contains ( className )  ) ||  ( requires == null || !requires.contains ( className )  ) && !classNames.contains ( className )  )  {^134^135^136^^^130^147^if  (  ( constructors == null || !constructors.contains ( className )  ) &&  ( requires == null || !requires.contains ( className )  ) && !classNames.contains ( className )  )  {^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visitScriptNode [RETURN_TYPE] void   NodeTraversal t [VARIABLES] List  constructors  newNodes  requires  Set  classNames  String  className  boolean  NodeTraversal  t  Node  node  
[BugLab_Wrong_Operator]^if  (  ( constructors == null && !constructors.contains ( className )  ) &&  ( requires == null || !requires.contains ( className )  ) && !classNames.contains ( className )  )  {^134^135^136^^^130^147^if  (  ( constructors == null || !constructors.contains ( className )  ) &&  ( requires == null || !requires.contains ( className )  ) && !classNames.contains ( className )  )  {^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visitScriptNode [RETURN_TYPE] void   NodeTraversal t [VARIABLES] List  constructors  newNodes  requires  Set  classNames  String  className  boolean  NodeTraversal  t  Node  node  
[BugLab_Wrong_Operator]^if  (  ( constructors != null || !constructors.contains ( className )  ) &&  ( requires == null || !requires.contains ( className )  ) && !classNames.contains ( className )  )  {^134^135^136^^^130^147^if  (  ( constructors == null || !constructors.contains ( className )  ) &&  ( requires == null || !requires.contains ( className )  ) && !classNames.contains ( className )  )  {^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visitScriptNode [RETURN_TYPE] void   NodeTraversal t [VARIABLES] List  constructors  newNodes  requires  Set  classNames  String  className  boolean  NodeTraversal  t  Node  node  
[BugLab_Wrong_Operator]^if  (  ( constructors == null || !constructors.contains ( className )  ) &&  ( requires != null || !requires.contains ( className )  ) && !classNames.contains ( className )  )  {^134^135^136^^^130^147^if  (  ( constructors == null || !constructors.contains ( className )  ) &&  ( requires == null || !requires.contains ( className )  ) && !classNames.contains ( className )  )  {^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visitScriptNode [RETURN_TYPE] void   NodeTraversal t [VARIABLES] List  constructors  newNodes  requires  Set  classNames  String  className  boolean  NodeTraversal  t  Node  node  
[BugLab_Variable_Misuse]^compiler.report ( JSError.make ( t, node, 3, MISSING_REQUIRE_WARNING, className )  ) ;^137^138^^^^130^147^compiler.report ( JSError.make ( t, node, level, MISSING_REQUIRE_WARNING, className )  ) ;^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visitScriptNode [RETURN_TYPE] void   NodeTraversal t [VARIABLES] List  constructors  newNodes  requires  Set  classNames  String  className  boolean  NodeTraversal  t  Node  node  
[BugLab_Argument_Swapping]^compiler.report ( JSError.make ( className, node, level, MISSING_REQUIRE_WARNING, t )  ) ;^137^138^^^^130^147^compiler.report ( JSError.make ( t, node, level, MISSING_REQUIRE_WARNING, className )  ) ;^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visitScriptNode [RETURN_TYPE] void   NodeTraversal t [VARIABLES] List  constructors  newNodes  requires  Set  classNames  String  className  boolean  NodeTraversal  t  Node  node  
[BugLab_Argument_Swapping]^compiler.report ( JSError.make ( t, node, className, MISSING_REQUIRE_WARNING, level )  ) ;^137^138^^^^130^147^compiler.report ( JSError.make ( t, node, level, MISSING_REQUIRE_WARNING, className )  ) ;^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visitScriptNode [RETURN_TYPE] void   NodeTraversal t [VARIABLES] List  constructors  newNodes  requires  Set  classNames  String  className  boolean  NodeTraversal  t  Node  node  
[BugLab_Variable_Misuse]^JSError.make ( t, node, level, null, className )  ) ;^138^^^^^130^147^JSError.make ( t, node, level, MISSING_REQUIRE_WARNING, className )  ) ;^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visitScriptNode [RETURN_TYPE] void   NodeTraversal t [VARIABLES] List  constructors  newNodes  requires  Set  classNames  String  className  boolean  NodeTraversal  t  Node  node  
[BugLab_Argument_Swapping]^JSError.make ( className, node, level, MISSING_REQUIRE_WARNING, t )  ) ;^138^^^^^130^147^JSError.make ( t, node, level, MISSING_REQUIRE_WARNING, className )  ) ;^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visitScriptNode [RETURN_TYPE] void   NodeTraversal t [VARIABLES] List  constructors  newNodes  requires  Set  classNames  String  className  boolean  NodeTraversal  t  Node  node  
[BugLab_Argument_Swapping]^JSError.make ( t, className, level, MISSING_REQUIRE_WARNING, node )  ) ;^138^^^^^130^147^JSError.make ( t, node, level, MISSING_REQUIRE_WARNING, className )  ) ;^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visitScriptNode [RETURN_TYPE] void   NodeTraversal t [VARIABLES] List  constructors  newNodes  requires  Set  classNames  String  className  boolean  NodeTraversal  t  Node  node  
[BugLab_Argument_Swapping]^JSError.make ( t, node, level, className, MISSING_REQUIRE_WARNING )  ) ;^138^^^^^130^147^JSError.make ( t, node, level, MISSING_REQUIRE_WARNING, className )  ) ;^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visitScriptNode [RETURN_TYPE] void   NodeTraversal t [VARIABLES] List  constructors  newNodes  requires  Set  classNames  String  className  boolean  NodeTraversal  t  Node  node  
[BugLab_Argument_Swapping]^JSError.make ( t, node, className, MISSING_REQUIRE_WARNING, level )  ) ;^138^^^^^130^147^JSError.make ( t, node, level, MISSING_REQUIRE_WARNING, className )  ) ;^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visitScriptNode [RETURN_TYPE] void   NodeTraversal t [VARIABLES] List  constructors  newNodes  requires  Set  classNames  String  className  boolean  NodeTraversal  t  Node  node  
[BugLab_Argument_Swapping]^JSError.make ( t, node, MISSING_REQUIRE_WARNING, level, className )  ) ;^138^^^^^130^147^JSError.make ( t, node, level, MISSING_REQUIRE_WARNING, className )  ) ;^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visitScriptNode [RETURN_TYPE] void   NodeTraversal t [VARIABLES] List  constructors  newNodes  requires  Set  classNames  String  className  boolean  NodeTraversal  t  Node  node  
[BugLab_Argument_Swapping]^if  (  ( className == null || !constructors.contains ( constructors )  ) &&  ( requires == null || !requires.contains ( className )  ) && !classNames.contains ( className )  )  {^134^135^136^^^130^147^if  (  ( constructors == null || !constructors.contains ( className )  ) &&  ( requires == null || !requires.contains ( className )  ) && !classNames.contains ( className )  )  {^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visitScriptNode [RETURN_TYPE] void   NodeTraversal t [VARIABLES] List  constructors  newNodes  requires  Set  classNames  String  className  boolean  NodeTraversal  t  Node  node  
[BugLab_Argument_Swapping]^&&  ( className == null || !requires.contains ( requires )  ) && !classNames.contains ( className )  )  {^135^136^^^^130^147^&&  ( requires == null || !requires.contains ( className )  ) && !classNames.contains ( className )  )  {^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visitScriptNode [RETURN_TYPE] void   NodeTraversal t [VARIABLES] List  constructors  newNodes  requires  Set  classNames  String  className  boolean  NodeTraversal  t  Node  node  
[BugLab_Argument_Swapping]^compiler.report ( JSError.make ( MISSING_REQUIRE_WARNING, node, level, t, className )  ) ;^137^138^^^^130^147^compiler.report ( JSError.make ( t, node, level, MISSING_REQUIRE_WARNING, className )  ) ;^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visitScriptNode [RETURN_TYPE] void   NodeTraversal t [VARIABLES] List  constructors  newNodes  requires  Set  classNames  String  className  boolean  NodeTraversal  t  Node  node  
[BugLab_Argument_Swapping]^compiler.report ( JSError.make ( t, MISSING_REQUIRE_WARNING, level, node, className )  ) ;^137^138^^^^130^147^compiler.report ( JSError.make ( t, node, level, MISSING_REQUIRE_WARNING, className )  ) ;^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visitScriptNode [RETURN_TYPE] void   NodeTraversal t [VARIABLES] List  constructors  newNodes  requires  Set  classNames  String  className  boolean  NodeTraversal  t  Node  node  
[BugLab_Argument_Swapping]^compiler.report ( JSError.make ( t, node, level, className, MISSING_REQUIRE_WARNING )  ) ;^137^138^^^^130^147^compiler.report ( JSError.make ( t, node, level, MISSING_REQUIRE_WARNING, className )  ) ;^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visitScriptNode [RETURN_TYPE] void   NodeTraversal t [VARIABLES] List  constructors  newNodes  requires  Set  classNames  String  className  boolean  NodeTraversal  t  Node  node  
[BugLab_Argument_Swapping]^JSError.make ( node, t, level, MISSING_REQUIRE_WARNING, className )  ) ;^138^^^^^130^147^JSError.make ( t, node, level, MISSING_REQUIRE_WARNING, className )  ) ;^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visitScriptNode [RETURN_TYPE] void   NodeTraversal t [VARIABLES] List  constructors  newNodes  requires  Set  classNames  String  className  boolean  NodeTraversal  t  Node  node  
[BugLab_Argument_Swapping]^JSError.make ( t, level, node, MISSING_REQUIRE_WARNING, className )  ) ;^138^^^^^130^147^JSError.make ( t, node, level, MISSING_REQUIRE_WARNING, className )  ) ;^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visitScriptNode [RETURN_TYPE] void   NodeTraversal t [VARIABLES] List  constructors  newNodes  requires  Set  classNames  String  className  boolean  NodeTraversal  t  Node  node  
[BugLab_Argument_Swapping]^JSError.make ( t, MISSING_REQUIRE_WARNING, level, node, className )  ) ;^138^^^^^130^147^JSError.make ( t, node, level, MISSING_REQUIRE_WARNING, className )  ) ;^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visitScriptNode [RETURN_TYPE] void   NodeTraversal t [VARIABLES] List  constructors  newNodes  requires  Set  classNames  String  className  boolean  NodeTraversal  t  Node  node  
[BugLab_Variable_Misuse]^String required = codingConvention.extractClassNameIfRequire ( parent, parent ) ;^150^^^^^149^154^String required = codingConvention.extractClassNameIfRequire ( n, parent ) ;^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visitCallNode [RETURN_TYPE] void   Node n Node parent [VARIABLES] List  constructors  newNodes  requires  String  required  boolean  Node  n  parent  
[BugLab_Variable_Misuse]^String required = codingConvention.extractClassNameIfRequire ( n, n ) ;^150^^^^^149^154^String required = codingConvention.extractClassNameIfRequire ( n, parent ) ;^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visitCallNode [RETURN_TYPE] void   Node n Node parent [VARIABLES] List  constructors  newNodes  requires  String  required  boolean  Node  n  parent  
[BugLab_Argument_Swapping]^String required = n.extractClassNameIfRequire ( codingConvention, parent ) ;^150^^^^^149^154^String required = codingConvention.extractClassNameIfRequire ( n, parent ) ;^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visitCallNode [RETURN_TYPE] void   Node n Node parent [VARIABLES] List  constructors  newNodes  requires  String  required  boolean  Node  n  parent  
[BugLab_Argument_Swapping]^String required = parent.extractClassNameIfRequire ( n, codingConvention ) ;^150^^^^^149^154^String required = codingConvention.extractClassNameIfRequire ( n, parent ) ;^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visitCallNode [RETURN_TYPE] void   Node n Node parent [VARIABLES] List  constructors  newNodes  requires  String  required  boolean  Node  n  parent  
[BugLab_Argument_Swapping]^String required = codingConvention.extractClassNameIfRequire ( parent, n ) ;^150^^^^^149^154^String required = codingConvention.extractClassNameIfRequire ( n, parent ) ;^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visitCallNode [RETURN_TYPE] void   Node n Node parent [VARIABLES] List  constructors  newNodes  requires  String  required  boolean  Node  n  parent  
[BugLab_Wrong_Operator]^if  ( required == null )  {^151^^^^^149^154^if  ( required != null )  {^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visitCallNode [RETURN_TYPE] void   Node n Node parent [VARIABLES] List  constructors  newNodes  requires  String  required  boolean  Node  n  parent  
[BugLab_Variable_Misuse]^Node qNameNode = nameNode.getFirstChild (  ) ;^157^^^^^156^181^Node qNameNode = n.getFirstChild (  ) ;^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visitNewNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] List  constructors  newNodes  requires  String  name  qName  boolean  NodeTraversal  t  Var  var  Node  n  nameNode  qNameNode  
[BugLab_Variable_Misuse]^Node qNameNode = qNameNode.getFirstChild (  ) ;^157^^^^^156^181^Node qNameNode = n.getFirstChild (  ) ;^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visitNewNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] List  constructors  newNodes  requires  String  name  qName  boolean  NodeTraversal  t  Var  var  Node  n  nameNode  qNameNode  
[BugLab_Variable_Misuse]^String qName = nameNode.getQualifiedName (  ) ;^158^^^^^156^181^String qName = qNameNode.getQualifiedName (  ) ;^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visitNewNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] List  constructors  newNodes  requires  String  name  qName  boolean  NodeTraversal  t  Var  var  Node  n  nameNode  qNameNode  
[BugLab_Variable_Misuse]^if  ( name == null || qName.isEmpty (  )  )  {^161^^^^^156^181^if  ( qName == null || qName.isEmpty (  )  )  {^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visitNewNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] List  constructors  newNodes  requires  String  name  qName  boolean  NodeTraversal  t  Var  var  Node  n  nameNode  qNameNode  
[BugLab_Wrong_Operator]^if  ( qName == null && qName.isEmpty (  )  )  {^161^^^^^156^181^if  ( qName == null || qName.isEmpty (  )  )  {^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visitNewNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] List  constructors  newNodes  requires  String  name  qName  boolean  NodeTraversal  t  Var  var  Node  n  nameNode  qNameNode  
[BugLab_Wrong_Operator]^if  ( qName != null || qName.isEmpty (  )  )  {^161^^^^^156^181^if  ( qName == null || qName.isEmpty (  )  )  {^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visitNewNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] List  constructors  newNodes  requires  String  name  qName  boolean  NodeTraversal  t  Var  var  Node  n  nameNode  qNameNode  
[BugLab_Variable_Misuse]^Node nameNode = n;^166^^^^^156^181^Node nameNode = qNameNode;^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visitNewNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] List  constructors  newNodes  requires  String  name  qName  boolean  NodeTraversal  t  Var  var  Node  n  nameNode  qNameNode  
[BugLab_Variable_Misuse]^for  ( ; qNameNode.hasChildren (  ) ; nameNode = nameNode.getFirstChild (  )  )  {}^167^^^^^156^181^for  ( ; nameNode.hasChildren (  ) ; nameNode = nameNode.getFirstChild (  )  )  {}^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visitNewNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] List  constructors  newNodes  requires  String  name  qName  boolean  NodeTraversal  t  Var  var  Node  n  nameNode  qNameNode  
[BugLab_Variable_Misuse]^if  ( qNameNode.getType (  )  != Token.NAME )  {^171^^^^^156^181^if  ( nameNode.getType (  )  != Token.NAME )  {^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visitNewNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] List  constructors  newNodes  requires  String  name  qName  boolean  NodeTraversal  t  Var  var  Node  n  nameNode  qNameNode  
[BugLab_Wrong_Operator]^if  ( nameNode.getType (  )  == Token.NAME )  {^171^^^^^156^181^if  ( nameNode.getType (  )  != Token.NAME )  {^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visitNewNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] List  constructors  newNodes  requires  String  name  qName  boolean  NodeTraversal  t  Var  var  Node  n  nameNode  qNameNode  
[BugLab_Variable_Misuse]^String name = qNameNode.getString (  ) ;^175^^^^^156^181^String name = nameNode.getString (  ) ;^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visitNewNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] List  constructors  newNodes  requires  String  name  qName  boolean  NodeTraversal  t  Var  var  Node  n  nameNode  qNameNode  
[BugLab_Variable_Misuse]^Scope.Var var = t.getScope (  ) .getVar ( qName ) ;^176^^^^^156^181^Scope.Var var = t.getScope (  ) .getVar ( name ) ;^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visitNewNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] List  constructors  newNodes  requires  String  name  qName  boolean  NodeTraversal  t  Var  var  Node  n  nameNode  qNameNode  
[BugLab_Argument_Swapping]^Scope.Var var = name.getScope (  ) .getVar ( t ) ;^176^^^^^156^181^Scope.Var var = t.getScope (  ) .getVar ( name ) ;^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visitNewNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] List  constructors  newNodes  requires  String  name  qName  boolean  NodeTraversal  t  Var  var  Node  n  nameNode  qNameNode  
[BugLab_Wrong_Operator]^if  ( var == null && var.isLocal (  )  || var.isExtern (  )  )  {^177^^^^^156^181^if  ( var == null || var.isLocal (  )  || var.isExtern (  )  )  {^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visitNewNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] List  constructors  newNodes  requires  String  name  qName  boolean  NodeTraversal  t  Var  var  Node  n  nameNode  qNameNode  
[BugLab_Wrong_Operator]^if  ( var != null || var.isLocal (  )  || var.isExtern (  )  )  {^177^^^^^156^181^if  ( var == null || var.isLocal (  )  || var.isExtern (  )  )  {^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visitNewNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] List  constructors  newNodes  requires  String  name  qName  boolean  NodeTraversal  t  Var  var  Node  n  nameNode  qNameNode  
[BugLab_Variable_Misuse]^if  ( null == null || var.isLocal (  )  || var.isExtern (  )  )  {^177^^^^^156^181^if  ( var == null || var.isLocal (  )  || var.isExtern (  )  )  {^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visitNewNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] List  constructors  newNodes  requires  String  name  qName  boolean  NodeTraversal  t  Var  var  Node  n  nameNode  qNameNode  
[BugLab_Variable_Misuse]^newNodes.add ( qNameNode ) ;^180^^^^^156^181^newNodes.add ( n ) ;^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visitNewNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] List  constructors  newNodes  requires  String  name  qName  boolean  NodeTraversal  t  Var  var  Node  n  nameNode  qNameNode  
