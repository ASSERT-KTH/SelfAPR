[BugLab_Wrong_Operator]^for  ( int i = 0; i <= callbacks.length; i++ )  {^60^^^^^56^63^for  ( int i = 0; i < callbacks.length; i++ )  {^[CLASS] CombinedCompilerPass CallbackWrapper  [METHOD] <init> [RETURN_TYPE] Callback[])   AbstractCompiler compiler  callbacks [VARIABLES] Callback[]  callbacks  ScopedCallback  scopedCallback  AbstractCompiler  compiler  Callback  callback  boolean  CallbackWrapper[]  callbacks  Node  waiting  int  i  
[BugLab_Wrong_Literal]^for  ( int i = i; i < callbacks.length; i++ )  {^60^^^^^56^63^for  ( int i = 0; i < callbacks.length; i++ )  {^[CLASS] CombinedCompilerPass CallbackWrapper  [METHOD] <init> [RETURN_TYPE] Callback[])   AbstractCompiler compiler  callbacks [VARIABLES] Callback[]  callbacks  ScopedCallback  scopedCallback  AbstractCompiler  compiler  Callback  callback  boolean  CallbackWrapper[]  callbacks  Node  waiting  int  i  
[BugLab_Wrong_Operator]^if  ( callback  >=  ScopedCallback )  {^94^^^^^92^99^if  ( callback instanceof ScopedCallback )  {^[CLASS] CombinedCompilerPass CallbackWrapper  [METHOD] <init> [RETURN_TYPE] Callback)   Callback callback [VARIABLES] ScopedCallback  scopedCallback  AbstractCompiler  compiler  Callback  callback  boolean  CallbackWrapper[]  callbacks  Node  waiting  
[BugLab_Variable_Misuse]^} else if  ( waiting == parent )  {^108^^^^^105^111^} else if  ( waiting == n )  {^[CLASS] CombinedCompilerPass CallbackWrapper  [METHOD] visitOrMaybeActivate [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ScopedCallback  scopedCallback  AbstractCompiler  compiler  Callback  callback  boolean  CallbackWrapper[]  callbacks  NodeTraversal  t  Node  n  parent  waiting  
[BugLab_Variable_Misuse]^} else if  ( parent == n )  {^108^^^^^105^111^} else if  ( waiting == n )  {^[CLASS] CombinedCompilerPass CallbackWrapper  [METHOD] visitOrMaybeActivate [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ScopedCallback  scopedCallback  AbstractCompiler  compiler  Callback  callback  boolean  CallbackWrapper[]  callbacks  NodeTraversal  t  Node  n  parent  waiting  
[BugLab_Argument_Swapping]^} else if  ( n == waiting )  {^108^^^^^105^111^} else if  ( waiting == n )  {^[CLASS] CombinedCompilerPass CallbackWrapper  [METHOD] visitOrMaybeActivate [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ScopedCallback  scopedCallback  AbstractCompiler  compiler  Callback  callback  boolean  CallbackWrapper[]  callbacks  NodeTraversal  t  Node  n  parent  waiting  
[BugLab_Wrong_Operator]^} else if  ( waiting != n )  {^108^^^^^105^111^} else if  ( waiting == n )  {^[CLASS] CombinedCompilerPass CallbackWrapper  [METHOD] visitOrMaybeActivate [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ScopedCallback  scopedCallback  AbstractCompiler  compiler  Callback  callback  boolean  CallbackWrapper[]  callbacks  NodeTraversal  t  Node  n  parent  waiting  
[BugLab_Variable_Misuse]^callback.visit ( t, n, waiting ) ;^107^^^^^105^111^callback.visit ( t, n, parent ) ;^[CLASS] CombinedCompilerPass CallbackWrapper  [METHOD] visitOrMaybeActivate [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ScopedCallback  scopedCallback  AbstractCompiler  compiler  Callback  callback  boolean  CallbackWrapper[]  callbacks  NodeTraversal  t  Node  n  parent  waiting  
[BugLab_Argument_Swapping]^callback.visit ( parent, n, t ) ;^107^^^^^105^111^callback.visit ( t, n, parent ) ;^[CLASS] CombinedCompilerPass CallbackWrapper  [METHOD] visitOrMaybeActivate [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ScopedCallback  scopedCallback  AbstractCompiler  compiler  Callback  callback  boolean  CallbackWrapper[]  callbacks  NodeTraversal  t  Node  n  parent  waiting  
[BugLab_Argument_Swapping]^callback.visit ( t, parent, n ) ;^107^^^^^105^111^callback.visit ( t, n, parent ) ;^[CLASS] CombinedCompilerPass CallbackWrapper  [METHOD] visitOrMaybeActivate [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ScopedCallback  scopedCallback  AbstractCompiler  compiler  Callback  callback  boolean  CallbackWrapper[]  callbacks  NodeTraversal  t  Node  n  parent  waiting  
[BugLab_Variable_Misuse]^callback.visit ( t, waiting, parent ) ;^107^^^^^105^111^callback.visit ( t, n, parent ) ;^[CLASS] CombinedCompilerPass CallbackWrapper  [METHOD] visitOrMaybeActivate [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ScopedCallback  scopedCallback  AbstractCompiler  compiler  Callback  callback  boolean  CallbackWrapper[]  callbacks  NodeTraversal  t  Node  n  parent  waiting  
[BugLab_Variable_Misuse]^if  ( isActive (  )  && !callback.shouldTraverse ( t, waiting, parent )  )  {^114^^^^^113^117^if  ( isActive (  )  && !callback.shouldTraverse ( t, n, parent )  )  {^[CLASS] CombinedCompilerPass CallbackWrapper  [METHOD] shouldTraverseIfActive [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ScopedCallback  scopedCallback  AbstractCompiler  compiler  Callback  callback  boolean  CallbackWrapper[]  callbacks  NodeTraversal  t  Node  n  parent  waiting  
[BugLab_Variable_Misuse]^if  ( isActive (  )  && !callback.shouldTraverse ( t, n, waiting )  )  {^114^^^^^113^117^if  ( isActive (  )  && !callback.shouldTraverse ( t, n, parent )  )  {^[CLASS] CombinedCompilerPass CallbackWrapper  [METHOD] shouldTraverseIfActive [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ScopedCallback  scopedCallback  AbstractCompiler  compiler  Callback  callback  boolean  CallbackWrapper[]  callbacks  NodeTraversal  t  Node  n  parent  waiting  
[BugLab_Argument_Swapping]^if  ( isActive (  )  && !callback.shouldTraverse ( parent, n, t )  )  {^114^^^^^113^117^if  ( isActive (  )  && !callback.shouldTraverse ( t, n, parent )  )  {^[CLASS] CombinedCompilerPass CallbackWrapper  [METHOD] shouldTraverseIfActive [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ScopedCallback  scopedCallback  AbstractCompiler  compiler  Callback  callback  boolean  CallbackWrapper[]  callbacks  NodeTraversal  t  Node  n  parent  waiting  
[BugLab_Argument_Swapping]^if  ( isActive (  )  && !callback.shouldTraverse ( t, parent, n )  )  {^114^^^^^113^117^if  ( isActive (  )  && !callback.shouldTraverse ( t, n, parent )  )  {^[CLASS] CombinedCompilerPass CallbackWrapper  [METHOD] shouldTraverseIfActive [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ScopedCallback  scopedCallback  AbstractCompiler  compiler  Callback  callback  boolean  CallbackWrapper[]  callbacks  NodeTraversal  t  Node  n  parent  waiting  
[BugLab_Wrong_Operator]^if  ( isActive (  )  || !callback.shouldTraverse ( t, n, parent )  )  {^114^^^^^113^117^if  ( isActive (  )  && !callback.shouldTraverse ( t, n, parent )  )  {^[CLASS] CombinedCompilerPass CallbackWrapper  [METHOD] shouldTraverseIfActive [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ScopedCallback  scopedCallback  AbstractCompiler  compiler  Callback  callback  boolean  CallbackWrapper[]  callbacks  NodeTraversal  t  Node  n  parent  waiting  
[BugLab_Variable_Misuse]^waiting = waiting;^115^^^^^113^117^waiting = n;^[CLASS] CombinedCompilerPass CallbackWrapper  [METHOD] shouldTraverseIfActive [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ScopedCallback  scopedCallback  AbstractCompiler  compiler  Callback  callback  boolean  CallbackWrapper[]  callbacks  NodeTraversal  t  Node  n  parent  waiting  
[BugLab_Wrong_Operator]^if  ( isActive (  )  || scopedCallback != null )  {^120^^^^^119^123^if  ( isActive (  )  && scopedCallback != null )  {^[CLASS] CombinedCompilerPass CallbackWrapper  [METHOD] enterScopeIfActive [RETURN_TYPE] void   NodeTraversal t [VARIABLES] ScopedCallback  scopedCallback  AbstractCompiler  compiler  Callback  callback  boolean  CallbackWrapper[]  callbacks  NodeTraversal  t  Node  n  parent  waiting  
[BugLab_Wrong_Operator]^if  ( isActive (  )  && scopedCallback == null )  {^120^^^^^119^123^if  ( isActive (  )  && scopedCallback != null )  {^[CLASS] CombinedCompilerPass CallbackWrapper  [METHOD] enterScopeIfActive [RETURN_TYPE] void   NodeTraversal t [VARIABLES] ScopedCallback  scopedCallback  AbstractCompiler  compiler  Callback  callback  boolean  CallbackWrapper[]  callbacks  NodeTraversal  t  Node  n  parent  waiting  
[BugLab_Wrong_Operator]^if  ( isActive (  )  || scopedCallback != null )  {^126^^^^^125^129^if  ( isActive (  )  && scopedCallback != null )  {^[CLASS] CombinedCompilerPass CallbackWrapper  [METHOD] exitScopeIfActive [RETURN_TYPE] void   NodeTraversal t [VARIABLES] ScopedCallback  scopedCallback  AbstractCompiler  compiler  Callback  callback  boolean  CallbackWrapper[]  callbacks  NodeTraversal  t  Node  n  parent  waiting  
[BugLab_Wrong_Operator]^if  ( isActive (  )  && scopedCallback == null )  {^126^^^^^125^129^if  ( isActive (  )  && scopedCallback != null )  {^[CLASS] CombinedCompilerPass CallbackWrapper  [METHOD] exitScopeIfActive [RETURN_TYPE] void   NodeTraversal t [VARIABLES] ScopedCallback  scopedCallback  AbstractCompiler  compiler  Callback  callback  boolean  CallbackWrapper[]  callbacks  NodeTraversal  t  Node  n  parent  waiting  
[BugLab_Variable_Misuse]^return parent == null;^132^^^^^131^133^return waiting == null;^[CLASS] CombinedCompilerPass CallbackWrapper  [METHOD] isActive [RETURN_TYPE] boolean   [VARIABLES] ScopedCallback  scopedCallback  AbstractCompiler  compiler  Callback  callback  boolean  CallbackWrapper[]  callbacks  Node  n  parent  waiting  
[BugLab_Wrong_Operator]^return waiting != null;^132^^^^^131^133^return waiting == null;^[CLASS] CombinedCompilerPass CallbackWrapper  [METHOD] isActive [RETURN_TYPE] boolean   [VARIABLES] ScopedCallback  scopedCallback  AbstractCompiler  compiler  Callback  callback  boolean  CallbackWrapper[]  callbacks  Node  n  parent  waiting  
[BugLab_Variable_Misuse]^NodeTraversal.traverse ( compiler, waiting, this ) ;^138^^^^^137^139^NodeTraversal.traverse ( compiler, root, this ) ;^[CLASS] CombinedCompilerPass CallbackWrapper  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] ScopedCallback  scopedCallback  AbstractCompiler  compiler  Callback  callback  boolean  CallbackWrapper[]  callbacks  Node  externs  n  parent  root  waiting  
[BugLab_Argument_Swapping]^NodeTraversal.traverse ( root, compiler, this ) ;^138^^^^^137^139^NodeTraversal.traverse ( compiler, root, this ) ;^[CLASS] CombinedCompilerPass CallbackWrapper  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] ScopedCallback  scopedCallback  AbstractCompiler  compiler  Callback  callback  boolean  CallbackWrapper[]  callbacks  Node  externs  n  parent  root  waiting  
[BugLab_Variable_Misuse]^callback.shouldTraverseIfActive ( t, waiting, parent ) ;^144^^^^^142^152^callback.shouldTraverseIfActive ( t, n, parent ) ;^[CLASS] CombinedCompilerPass CallbackWrapper  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] ScopedCallback  scopedCallback  AbstractCompiler  compiler  Callback  callback  boolean  CallbackWrapper[]  callbacks  NodeTraversal  t  Node  externs  n  parent  root  waiting  CallbackWrapper  callback  
[BugLab_Variable_Misuse]^callback.shouldTraverseIfActive ( t, n, root ) ;^144^^^^^142^152^callback.shouldTraverseIfActive ( t, n, parent ) ;^[CLASS] CombinedCompilerPass CallbackWrapper  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] ScopedCallback  scopedCallback  AbstractCompiler  compiler  Callback  callback  boolean  CallbackWrapper[]  callbacks  NodeTraversal  t  Node  externs  n  parent  root  waiting  CallbackWrapper  callback  
[BugLab_Argument_Swapping]^callback.shouldTraverseIfActive ( n, t, parent ) ;^144^^^^^142^152^callback.shouldTraverseIfActive ( t, n, parent ) ;^[CLASS] CombinedCompilerPass CallbackWrapper  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] ScopedCallback  scopedCallback  AbstractCompiler  compiler  Callback  callback  boolean  CallbackWrapper[]  callbacks  NodeTraversal  t  Node  externs  n  parent  root  waiting  CallbackWrapper  callback  
[BugLab_Argument_Swapping]^callback.shouldTraverseIfActive ( t, parent, n ) ;^144^^^^^142^152^callback.shouldTraverseIfActive ( t, n, parent ) ;^[CLASS] CombinedCompilerPass CallbackWrapper  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] ScopedCallback  scopedCallback  AbstractCompiler  compiler  Callback  callback  boolean  CallbackWrapper[]  callbacks  NodeTraversal  t  Node  externs  n  parent  root  waiting  CallbackWrapper  callback  
[BugLab_Wrong_Literal]^return false;^151^^^^^142^152^return true;^[CLASS] CombinedCompilerPass CallbackWrapper  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] ScopedCallback  scopedCallback  AbstractCompiler  compiler  Callback  callback  boolean  CallbackWrapper[]  callbacks  NodeTraversal  t  Node  externs  n  parent  root  waiting  CallbackWrapper  callback  
[BugLab_Variable_Misuse]^callback.visitOrMaybeActivate ( t, waiting, parent ) ;^157^^^^^155^159^callback.visitOrMaybeActivate ( t, n, parent ) ;^[CLASS] CombinedCompilerPass CallbackWrapper  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ScopedCallback  scopedCallback  AbstractCompiler  compiler  Callback  callback  boolean  CallbackWrapper[]  callbacks  NodeTraversal  t  Node  externs  n  parent  root  waiting  CallbackWrapper  callback  
[BugLab_Variable_Misuse]^callback.visitOrMaybeActivate ( t, n, waiting ) ;^157^^^^^155^159^callback.visitOrMaybeActivate ( t, n, parent ) ;^[CLASS] CombinedCompilerPass CallbackWrapper  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ScopedCallback  scopedCallback  AbstractCompiler  compiler  Callback  callback  boolean  CallbackWrapper[]  callbacks  NodeTraversal  t  Node  externs  n  parent  root  waiting  CallbackWrapper  callback  
[BugLab_Argument_Swapping]^callback.visitOrMaybeActivate ( n, t, parent ) ;^157^^^^^155^159^callback.visitOrMaybeActivate ( t, n, parent ) ;^[CLASS] CombinedCompilerPass CallbackWrapper  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ScopedCallback  scopedCallback  AbstractCompiler  compiler  Callback  callback  boolean  CallbackWrapper[]  callbacks  NodeTraversal  t  Node  externs  n  parent  root  waiting  CallbackWrapper  callback  
[BugLab_Argument_Swapping]^callback.visitOrMaybeActivate ( parent, n, t ) ;^157^^^^^155^159^callback.visitOrMaybeActivate ( t, n, parent ) ;^[CLASS] CombinedCompilerPass CallbackWrapper  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ScopedCallback  scopedCallback  AbstractCompiler  compiler  Callback  callback  boolean  CallbackWrapper[]  callbacks  NodeTraversal  t  Node  externs  n  parent  root  waiting  CallbackWrapper  callback  
[BugLab_Wrong_Operator]^if  ( callback  >=  ScopedCallback )  {^94^^^^^92^99^if  ( callback instanceof ScopedCallback )  {^[CLASS] CallbackWrapper  [METHOD] <init> [RETURN_TYPE] Callback)   Callback callback [VARIABLES] ScopedCallback  scopedCallback  Callback  callback  boolean  Node  waiting  
[BugLab_Variable_Misuse]^} else if  ( waiting == parent )  {^108^^^^^105^111^} else if  ( waiting == n )  {^[CLASS] CallbackWrapper  [METHOD] visitOrMaybeActivate [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ScopedCallback  scopedCallback  Callback  callback  boolean  NodeTraversal  t  Node  n  parent  waiting  
[BugLab_Variable_Misuse]^} else if  ( parent == n )  {^108^^^^^105^111^} else if  ( waiting == n )  {^[CLASS] CallbackWrapper  [METHOD] visitOrMaybeActivate [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ScopedCallback  scopedCallback  Callback  callback  boolean  NodeTraversal  t  Node  n  parent  waiting  
[BugLab_Argument_Swapping]^} else if  ( n == waiting )  {^108^^^^^105^111^} else if  ( waiting == n )  {^[CLASS] CallbackWrapper  [METHOD] visitOrMaybeActivate [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ScopedCallback  scopedCallback  Callback  callback  boolean  NodeTraversal  t  Node  n  parent  waiting  
[BugLab_Wrong_Operator]^} else if  ( waiting > n )  {^108^^^^^105^111^} else if  ( waiting == n )  {^[CLASS] CallbackWrapper  [METHOD] visitOrMaybeActivate [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ScopedCallback  scopedCallback  Callback  callback  boolean  NodeTraversal  t  Node  n  parent  waiting  
[BugLab_Variable_Misuse]^callback.visit ( t, waiting, parent ) ;^107^^^^^105^111^callback.visit ( t, n, parent ) ;^[CLASS] CallbackWrapper  [METHOD] visitOrMaybeActivate [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ScopedCallback  scopedCallback  Callback  callback  boolean  NodeTraversal  t  Node  n  parent  waiting  
[BugLab_Variable_Misuse]^callback.visit ( t, n, waiting ) ;^107^^^^^105^111^callback.visit ( t, n, parent ) ;^[CLASS] CallbackWrapper  [METHOD] visitOrMaybeActivate [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ScopedCallback  scopedCallback  Callback  callback  boolean  NodeTraversal  t  Node  n  parent  waiting  
[BugLab_Argument_Swapping]^callback.visit ( n, t, parent ) ;^107^^^^^105^111^callback.visit ( t, n, parent ) ;^[CLASS] CallbackWrapper  [METHOD] visitOrMaybeActivate [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ScopedCallback  scopedCallback  Callback  callback  boolean  NodeTraversal  t  Node  n  parent  waiting  
[BugLab_Argument_Swapping]^callback.visit ( parent, n, t ) ;^107^^^^^105^111^callback.visit ( t, n, parent ) ;^[CLASS] CallbackWrapper  [METHOD] visitOrMaybeActivate [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ScopedCallback  scopedCallback  Callback  callback  boolean  NodeTraversal  t  Node  n  parent  waiting  
[BugLab_Argument_Swapping]^callback.visit ( t, parent, n ) ;^107^^^^^105^111^callback.visit ( t, n, parent ) ;^[CLASS] CallbackWrapper  [METHOD] visitOrMaybeActivate [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ScopedCallback  scopedCallback  Callback  callback  boolean  NodeTraversal  t  Node  n  parent  waiting  
[BugLab_Variable_Misuse]^if  ( isActive (  )  && !callback.shouldTraverse ( t, waiting, parent )  )  {^114^^^^^113^117^if  ( isActive (  )  && !callback.shouldTraverse ( t, n, parent )  )  {^[CLASS] CallbackWrapper  [METHOD] shouldTraverseIfActive [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ScopedCallback  scopedCallback  Callback  callback  boolean  NodeTraversal  t  Node  n  parent  waiting  
[BugLab_Variable_Misuse]^if  ( isActive (  )  && !callback.shouldTraverse ( t, n, waiting )  )  {^114^^^^^113^117^if  ( isActive (  )  && !callback.shouldTraverse ( t, n, parent )  )  {^[CLASS] CallbackWrapper  [METHOD] shouldTraverseIfActive [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ScopedCallback  scopedCallback  Callback  callback  boolean  NodeTraversal  t  Node  n  parent  waiting  
[BugLab_Argument_Swapping]^if  ( isActive (  )  && !callback.shouldTraverse ( n, t, parent )  )  {^114^^^^^113^117^if  ( isActive (  )  && !callback.shouldTraverse ( t, n, parent )  )  {^[CLASS] CallbackWrapper  [METHOD] shouldTraverseIfActive [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ScopedCallback  scopedCallback  Callback  callback  boolean  NodeTraversal  t  Node  n  parent  waiting  
[BugLab_Argument_Swapping]^if  ( isActive (  )  && !callback.shouldTraverse ( parent, n, t )  )  {^114^^^^^113^117^if  ( isActive (  )  && !callback.shouldTraverse ( t, n, parent )  )  {^[CLASS] CallbackWrapper  [METHOD] shouldTraverseIfActive [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ScopedCallback  scopedCallback  Callback  callback  boolean  NodeTraversal  t  Node  n  parent  waiting  
[BugLab_Wrong_Operator]^if  ( isActive (  )  || !callback.shouldTraverse ( t, n, parent )  )  {^114^^^^^113^117^if  ( isActive (  )  && !callback.shouldTraverse ( t, n, parent )  )  {^[CLASS] CallbackWrapper  [METHOD] shouldTraverseIfActive [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ScopedCallback  scopedCallback  Callback  callback  boolean  NodeTraversal  t  Node  n  parent  waiting  
[BugLab_Variable_Misuse]^waiting = waiting;^115^^^^^113^117^waiting = n;^[CLASS] CallbackWrapper  [METHOD] shouldTraverseIfActive [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ScopedCallback  scopedCallback  Callback  callback  boolean  NodeTraversal  t  Node  n  parent  waiting  
[BugLab_Wrong_Operator]^if  ( isActive (  )  || scopedCallback != null )  {^120^^^^^119^123^if  ( isActive (  )  && scopedCallback != null )  {^[CLASS] CallbackWrapper  [METHOD] enterScopeIfActive [RETURN_TYPE] void   NodeTraversal t [VARIABLES] ScopedCallback  scopedCallback  Callback  callback  boolean  NodeTraversal  t  Node  n  parent  waiting  
[BugLab_Wrong_Operator]^if  ( isActive (  )  && scopedCallback == null )  {^120^^^^^119^123^if  ( isActive (  )  && scopedCallback != null )  {^[CLASS] CallbackWrapper  [METHOD] enterScopeIfActive [RETURN_TYPE] void   NodeTraversal t [VARIABLES] ScopedCallback  scopedCallback  Callback  callback  boolean  NodeTraversal  t  Node  n  parent  waiting  
[BugLab_Wrong_Operator]^if  ( isActive (  )  || scopedCallback != null )  {^126^^^^^125^129^if  ( isActive (  )  && scopedCallback != null )  {^[CLASS] CallbackWrapper  [METHOD] exitScopeIfActive [RETURN_TYPE] void   NodeTraversal t [VARIABLES] ScopedCallback  scopedCallback  Callback  callback  boolean  NodeTraversal  t  Node  n  parent  waiting  
[BugLab_Wrong_Operator]^if  ( isActive (  )  && scopedCallback == null )  {^126^^^^^125^129^if  ( isActive (  )  && scopedCallback != null )  {^[CLASS] CallbackWrapper  [METHOD] exitScopeIfActive [RETURN_TYPE] void   NodeTraversal t [VARIABLES] ScopedCallback  scopedCallback  Callback  callback  boolean  NodeTraversal  t  Node  n  parent  waiting  
[BugLab_Variable_Misuse]^return parent == null;^132^^^^^131^133^return waiting == null;^[CLASS] CallbackWrapper  [METHOD] isActive [RETURN_TYPE] boolean   [VARIABLES] ScopedCallback  scopedCallback  Callback  callback  boolean  Node  n  parent  waiting  
[BugLab_Wrong_Operator]^return waiting != null;^132^^^^^131^133^return waiting == null;^[CLASS] CallbackWrapper  [METHOD] isActive [RETURN_TYPE] boolean   [VARIABLES] ScopedCallback  scopedCallback  Callback  callback  boolean  Node  n  parent  waiting  
