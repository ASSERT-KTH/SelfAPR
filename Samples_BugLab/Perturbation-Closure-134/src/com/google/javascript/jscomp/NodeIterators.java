[BugLab_Wrong_Operator]^Preconditions.checkArgument ( ancestors.length == 0 ) ;^52^^^^^51^61^Preconditions.checkArgument ( ancestors.length > 0 ) ;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] <init> [RETURN_TYPE] Node[])    ancestors [VARIABLES] Node[]  ancestors  boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  lookAhead  n  Stack  ancestors  
[BugLab_Wrong_Literal]^Preconditions.checkArgument ( ancestors.length > 1 ) ;^52^^^^^51^61^Preconditions.checkArgument ( ancestors.length > 0 ) ;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] <init> [RETURN_TYPE] Node[])    ancestors [VARIABLES] Node[]  ancestors  boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  lookAhead  n  Stack  ancestors  
[BugLab_Variable_Misuse]^if  ( lookAhead.getType (  )  == Token.FUNCTION )  {^55^^^^^51^61^if  ( n.getType (  )  == Token.FUNCTION )  {^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] <init> [RETURN_TYPE] Node[])    ancestors [VARIABLES] Node[]  ancestors  boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  lookAhead  n  Stack  ancestors  
[BugLab_Variable_Misuse]^if  ( n.getType (  )  == Token.iterator )  {^55^^^^^51^61^if  ( n.getType (  )  == Token.FUNCTION )  {^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] <init> [RETURN_TYPE] Node[])    ancestors [VARIABLES] Node[]  ancestors  boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  lookAhead  n  Stack  ancestors  
[BugLab_Wrong_Operator]^if  ( n.getType (  )  <= Token.FUNCTION )  {^55^^^^^51^61^if  ( n.getType (  )  == Token.FUNCTION )  {^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] <init> [RETURN_TYPE] Node[])    ancestors [VARIABLES] Node[]  ancestors  boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  lookAhead  n  Stack  ancestors  
[BugLab_Variable_Misuse]^this.ancestors.add ( 0, lookAhead ) ;^59^^^^^51^61^this.ancestors.add ( 0, n ) ;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] <init> [RETURN_TYPE] Node[])    ancestors [VARIABLES] Node[]  ancestors  boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  lookAhead  n  Stack  ancestors  
[BugLab_Wrong_Literal]^this.ancestors.add ( 1, n ) ;^59^^^^^51^61^this.ancestors.add ( 0, n ) ;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] <init> [RETURN_TYPE] Node[])    ancestors [VARIABLES] Node[]  ancestors  boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  lookAhead  n  Stack  ancestors  
[BugLab_Variable_Misuse]^Preconditions.checkArgument ( valueNode.getType (  )  == Token.NAME ) ;^194^^^^^193^201^Preconditions.checkArgument ( nameNode.getType (  )  == Token.NAME ) ;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] <init> [RETURN_TYPE] NodeIterators$FunctionlessLocalScope)   Node nameNode FunctionlessLocalScope iterator [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  lookAhead  n  nameNode  valueNode  Stack  ancestors  
[BugLab_Wrong_Operator]^Preconditions.checkArgument ( nameNode.getType (  )  != Token.NAME ) ;^194^^^^^193^201^Preconditions.checkArgument ( nameNode.getType (  )  == Token.NAME ) ;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] <init> [RETURN_TYPE] NodeIterators$FunctionlessLocalScope)   Node nameNode FunctionlessLocalScope iterator [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  lookAhead  n  nameNode  valueNode  Stack  ancestors  
[BugLab_Variable_Misuse]^Node valueNode = NodeUtil.getAssignedValue ( n ) ;^195^^^^^193^201^Node valueNode = NodeUtil.getAssignedValue ( nameNode ) ;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] <init> [RETURN_TYPE] NodeIterators$FunctionlessLocalScope)   Node nameNode FunctionlessLocalScope iterator [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  lookAhead  n  nameNode  valueNode  Stack  ancestors  
[BugLab_Variable_Misuse]^Node valueNode = NodeUtil.getAssignedValue ( valueNode ) ;^195^^^^^193^201^Node valueNode = NodeUtil.getAssignedValue ( nameNode ) ;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] <init> [RETURN_TYPE] NodeIterators$FunctionlessLocalScope)   Node nameNode FunctionlessLocalScope iterator [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  lookAhead  n  nameNode  valueNode  Stack  ancestors  
[BugLab_Variable_Misuse]^this.varName = valueNode.getString (  ) ;^196^^^^^193^201^this.varName = nameNode.getString (  ) ;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] <init> [RETURN_TYPE] NodeIterators$FunctionlessLocalScope)   Node nameNode FunctionlessLocalScope iterator [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  lookAhead  n  nameNode  valueNode  Stack  ancestors  
[BugLab_Wrong_Operator]^this.valueHasSideEffects = valueNode != null || NodeUtil.mayHaveSideEffects ( valueNode ) ;^197^198^^^^193^201^this.valueHasSideEffects = valueNode != null && NodeUtil.mayHaveSideEffects ( valueNode ) ;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] <init> [RETURN_TYPE] NodeIterators$FunctionlessLocalScope)   Node nameNode FunctionlessLocalScope iterator [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  lookAhead  n  nameNode  valueNode  Stack  ancestors  
[BugLab_Wrong_Operator]^this.valueHasSideEffects = valueNode == null && NodeUtil.mayHaveSideEffects ( valueNode ) ;^197^198^^^^193^201^this.valueHasSideEffects = valueNode != null && NodeUtil.mayHaveSideEffects ( valueNode ) ;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] <init> [RETURN_TYPE] NodeIterators$FunctionlessLocalScope)   Node nameNode FunctionlessLocalScope iterator [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  lookAhead  n  nameNode  valueNode  Stack  ancestors  
[BugLab_Variable_Misuse]^NodeUtil.mayHaveSideEffects ( nameNode ) ;^198^^^^^193^201^NodeUtil.mayHaveSideEffects ( valueNode ) ;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] <init> [RETURN_TYPE] NodeIterators$FunctionlessLocalScope)   Node nameNode FunctionlessLocalScope iterator [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  lookAhead  n  nameNode  valueNode  Stack  ancestors  
[BugLab_Wrong_Literal]^advanceLookAhead ( false ) ;^200^^^^^193^201^advanceLookAhead ( true ) ;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] <init> [RETURN_TYPE] NodeIterators$FunctionlessLocalScope)   Node nameNode FunctionlessLocalScope iterator [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  lookAhead  n  nameNode  valueNode  Stack  ancestors  
[BugLab_Wrong_Operator]^return ! ( ancestors.size (  )  == 1 || ancestors.peek (  ) .getNext (  )  == null ) ;^66^^^^^64^67^return ! ( ancestors.size (  )  == 1 && ancestors.peek (  ) .getNext (  )  == null ) ;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] hasNext [RETURN_TYPE] boolean   [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  lookAhead  n  nameNode  valueNode  Stack  ancestors  
[BugLab_Wrong_Operator]^return ! ( ancestors.size (  )  != 1 && ancestors.peek (  ) .getNext (  )  == null ) ;^66^^^^^64^67^return ! ( ancestors.size (  )  == 1 && ancestors.peek (  ) .getNext (  )  == null ) ;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] hasNext [RETURN_TYPE] boolean   [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  lookAhead  n  nameNode  valueNode  Stack  ancestors  
[BugLab_Wrong_Operator]^return ! ( ancestors.size (  )  == 1 && ancestors.peek (  ) .getNext (  )  != null ) ;^66^^^^^64^67^return ! ( ancestors.size (  )  == 1 && ancestors.peek (  ) .getNext (  )  == null ) ;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] hasNext [RETURN_TYPE] boolean   [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  lookAhead  n  nameNode  valueNode  Stack  ancestors  
[BugLab_Wrong_Literal]^return ! ( ancestors.size (  )  == 0 && ancestors.peek (  ) .getNext (  )  == null ) ;^66^^^^^64^67^return ! ( ancestors.size (  )  == 1 && ancestors.peek (  ) .getNext (  )  == null ) ;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] hasNext [RETURN_TYPE] boolean   [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  lookAhead  n  nameNode  valueNode  Stack  ancestors  
[BugLab_Variable_Misuse]^if  ( nameNode.getType (  )  == Token.FUNCTION )  {^93^^^^^70^100^if  ( current.getType (  )  == Token.FUNCTION )  {^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] next [RETURN_TYPE] Node   [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  current  lookAhead  n  nameNode  valueNode  Stack  ancestors  
[BugLab_Variable_Misuse]^if  ( current.getType (  )  == Token.iterator )  {^93^^^^^70^100^if  ( current.getType (  )  == Token.FUNCTION )  {^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] next [RETURN_TYPE] Node   [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  current  lookAhead  n  nameNode  valueNode  Stack  ancestors  
[BugLab_Wrong_Operator]^if  ( current.getType (  )  != Token.FUNCTION )  {^93^^^^^70^100^if  ( current.getType (  )  == Token.FUNCTION )  {^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] next [RETURN_TYPE] Node   [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  current  lookAhead  n  nameNode  valueNode  Stack  ancestors  
[BugLab_Variable_Misuse]^current = valueNode.getFirstChild (  ) ;^89^^^^^70^100^current = current.getFirstChild (  ) ;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] next [RETURN_TYPE] Node   [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  current  lookAhead  n  nameNode  valueNode  Stack  ancestors  
[BugLab_Variable_Misuse]^ancestors.push ( valueNode ) ;^90^^^^^70^100^ancestors.push ( current ) ;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] next [RETURN_TYPE] Node   [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  current  lookAhead  n  nameNode  valueNode  Stack  ancestors  
[BugLab_Variable_Misuse]^if  ( valueNode.getType (  )  == Token.FUNCTION )  {^93^^^^^70^100^if  ( current.getType (  )  == Token.FUNCTION )  {^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] next [RETURN_TYPE] Node   [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  current  lookAhead  n  nameNode  valueNode  Stack  ancestors  
[BugLab_Variable_Misuse]^if  ( nameNode.getNext (  )  == null )  {^72^^^^^70^100^if  ( current.getNext (  )  == null )  {^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] next [RETURN_TYPE] Node   [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  current  lookAhead  n  nameNode  valueNode  Stack  ancestors  
[BugLab_Wrong_Operator]^if  ( current.getNext (  )  != null )  {^72^^^^^70^100^if  ( current.getNext (  )  == null )  {^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] next [RETURN_TYPE] Node   [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  current  lookAhead  n  nameNode  valueNode  Stack  ancestors  
[BugLab_Variable_Misuse]^while  ( valueNode.hasChildren (  )  )  {^88^^^^^72^97^while  ( current.hasChildren (  )  )  {^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] next [RETURN_TYPE] Node   [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  current  lookAhead  n  nameNode  valueNode  Stack  ancestors  
[BugLab_Variable_Misuse]^if  ( valueNode.getType (  )  == Token.FUNCTION )  {^93^^^^^72^97^if  ( current.getType (  )  == Token.FUNCTION )  {^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] next [RETURN_TYPE] Node   [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  current  lookAhead  n  nameNode  valueNode  Stack  ancestors  
[BugLab_Wrong_Operator]^if  ( current.getType (  )  != Token.FUNCTION )  {^93^^^^^72^97^if  ( current.getType (  )  == Token.FUNCTION )  {^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] next [RETURN_TYPE] Node   [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  current  lookAhead  n  nameNode  valueNode  Stack  ancestors  
[BugLab_Variable_Misuse]^current = nameNode.getFirstChild (  ) ;^89^^^^^72^97^current = current.getFirstChild (  ) ;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] next [RETURN_TYPE] Node   [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  current  lookAhead  n  nameNode  valueNode  Stack  ancestors  
[BugLab_Variable_Misuse]^current = valueNode.getFirstChild (  ) ;^89^^^^^72^97^current = current.getFirstChild (  ) ;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] next [RETURN_TYPE] Node   [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  current  lookAhead  n  nameNode  valueNode  Stack  ancestors  
[BugLab_Variable_Misuse]^ancestors.push ( valueNode ) ;^90^^^^^72^97^ancestors.push ( current ) ;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] next [RETURN_TYPE] Node   [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  current  lookAhead  n  nameNode  valueNode  Stack  ancestors  
[BugLab_Variable_Misuse]^if  ( valueNode.getType (  )  == Token.FUNCTION )  {^84^^^^^72^97^if  ( current.getType (  )  == Token.FUNCTION )  {^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] next [RETURN_TYPE] Node   [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  current  lookAhead  n  nameNode  valueNode  Stack  ancestors  
[BugLab_Variable_Misuse]^if  ( current.getType (  )  == Token.iterator )  {^84^^^^^72^97^if  ( current.getType (  )  == Token.FUNCTION )  {^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] next [RETURN_TYPE] Node   [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  current  lookAhead  n  nameNode  valueNode  Stack  ancestors  
[BugLab_Wrong_Operator]^if  ( current.getType (  )  != Token.FUNCTION )  {^84^^^^^72^97^if  ( current.getType (  )  == Token.FUNCTION )  {^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] next [RETURN_TYPE] Node   [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  current  lookAhead  n  nameNode  valueNode  Stack  ancestors  
[BugLab_Variable_Misuse]^if  ( current.getType (  )  == Token.iterator )  {^93^^^^^72^97^if  ( current.getType (  )  == Token.FUNCTION )  {^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] next [RETURN_TYPE] Node   [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  current  lookAhead  n  nameNode  valueNode  Stack  ancestors  
[BugLab_Variable_Misuse]^current = nameNode.getNext (  ) ;^80^^^^^72^97^current = current.getNext (  ) ;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] next [RETURN_TYPE] Node   [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  current  lookAhead  n  nameNode  valueNode  Stack  ancestors  
[BugLab_Variable_Misuse]^ancestors.push ( valueNode ) ;^81^^^^^72^97^ancestors.push ( current ) ;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] next [RETURN_TYPE] Node   [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  current  lookAhead  n  nameNode  valueNode  Stack  ancestors  
[BugLab_Variable_Misuse]^if  ( nameNode.getType (  )  == Token.FUNCTION )  {^93^^^^^72^97^if  ( current.getType (  )  == Token.FUNCTION )  {^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] next [RETURN_TYPE] Node   [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  current  lookAhead  n  nameNode  valueNode  Stack  ancestors  
[BugLab_Variable_Misuse]^if  ( valueNode.getType (  )  == Token.FUNCTION )  {^76^^^^^70^100^if  ( current.getType (  )  == Token.FUNCTION )  {^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] next [RETURN_TYPE] Node   [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  current  lookAhead  n  nameNode  valueNode  Stack  ancestors  
[BugLab_Variable_Misuse]^if  ( current.getType (  )  == Token.iterator )  {^76^^^^^70^100^if  ( current.getType (  )  == Token.FUNCTION )  {^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] next [RETURN_TYPE] Node   [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  current  lookAhead  n  nameNode  valueNode  Stack  ancestors  
[BugLab_Wrong_Operator]^if  ( current.getType (  )  < Token.FUNCTION )  {^76^^^^^70^100^if  ( current.getType (  )  == Token.FUNCTION )  {^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] next [RETURN_TYPE] Node   [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  current  lookAhead  n  nameNode  valueNode  Stack  ancestors  
[BugLab_Wrong_Operator]^if  ( current.getType (  )  >= Token.FUNCTION )  {^76^^^^^70^100^if  ( current.getType (  )  == Token.FUNCTION )  {^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] next [RETURN_TYPE] Node   [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  current  lookAhead  n  nameNode  valueNode  Stack  ancestors  
[BugLab_Variable_Misuse]^if  ( nameNode.getType (  )  == Token.FUNCTION )  {^84^^^^^70^100^if  ( current.getType (  )  == Token.FUNCTION )  {^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] next [RETURN_TYPE] Node   [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  current  lookAhead  n  nameNode  valueNode  Stack  ancestors  
[BugLab_Variable_Misuse]^if  ( current.getType (  )  == Token.iterator )  {^84^^^^^70^100^if  ( current.getType (  )  == Token.FUNCTION )  {^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] next [RETURN_TYPE] Node   [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  current  lookAhead  n  nameNode  valueNode  Stack  ancestors  
[BugLab_Wrong_Operator]^if  ( current.getType (  )  != Token.FUNCTION )  {^84^^^^^70^100^if  ( current.getType (  )  == Token.FUNCTION )  {^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] next [RETURN_TYPE] Node   [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  current  lookAhead  n  nameNode  valueNode  Stack  ancestors  
[BugLab_Wrong_Operator]^if  ( current.getType (  )  >= Token.FUNCTION )  {^93^^^^^70^100^if  ( current.getType (  )  == Token.FUNCTION )  {^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] next [RETURN_TYPE] Node   [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  current  lookAhead  n  nameNode  valueNode  Stack  ancestors  
[BugLab_Variable_Misuse]^current = valueNode.getNext (  ) ;^80^^^^^70^100^current = current.getNext (  ) ;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] next [RETURN_TYPE] Node   [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  current  lookAhead  n  nameNode  valueNode  Stack  ancestors  
[BugLab_Variable_Misuse]^if  ( valueNode.getNext (  )  == null )  {^72^^^^^70^100^if  ( current.getNext (  )  == null )  {^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] next [RETURN_TYPE] Node   [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  current  lookAhead  n  nameNode  valueNode  Stack  ancestors  
[BugLab_Variable_Misuse]^if  ( nameNode.getType (  )  == Token.FUNCTION )  {^76^^^^^70^100^if  ( current.getType (  )  == Token.FUNCTION )  {^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] next [RETURN_TYPE] Node   [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  current  lookAhead  n  nameNode  valueNode  Stack  ancestors  
[BugLab_Variable_Misuse]^while  ( valueNode.hasChildren (  )  )  {^88^^^^^70^100^while  ( current.hasChildren (  )  )  {^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] next [RETURN_TYPE] Node   [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  current  lookAhead  n  nameNode  valueNode  Stack  ancestors  
[BugLab_Variable_Misuse]^current = nameNode.getFirstChild (  ) ;^89^^^^^70^100^current = current.getFirstChild (  ) ;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] next [RETURN_TYPE] Node   [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  current  lookAhead  n  nameNode  valueNode  Stack  ancestors  
[BugLab_Variable_Misuse]^ancestors.push ( nameNode ) ;^90^^^^^70^100^ancestors.push ( current ) ;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] next [RETURN_TYPE] Node   [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  current  lookAhead  n  nameNode  valueNode  Stack  ancestors  
[BugLab_Variable_Misuse]^return nameNode;^99^^^^^70^100^return current;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] next [RETURN_TYPE] Node   [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  current  lookAhead  n  nameNode  valueNode  Stack  ancestors  
[BugLab_Wrong_Operator]^return ancestors.size (  )  < 2 ? ancestors.get ( ancestors.size (  )  - 2 )  : null;^118^119^^^^117^120^return ancestors.size (  )  >= 2 ? ancestors.get ( ancestors.size (  )  - 2 )  : null;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] currentParent [RETURN_TYPE] Node   [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  current  lookAhead  n  nameNode  valueNode  Stack  ancestors  
[BugLab_Wrong_Operator]^return ancestors.size (  )  >= 2 ? ancestors.get ( ancestors.size (  )   &  2 )  : null;^118^119^^^^117^120^return ancestors.size (  )  >= 2 ? ancestors.get ( ancestors.size (  )  - 2 )  : null;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] currentParent [RETURN_TYPE] Node   [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  current  lookAhead  n  nameNode  valueNode  Stack  ancestors  
[BugLab_Wrong_Literal]^return ancestors.size (  )  >= 2 ? ancestors.get ( ancestors.size (  )   )  : null;^118^119^^^^117^120^return ancestors.size (  )  >= 2 ? ancestors.get ( ancestors.size (  )  - 2 )  : null;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] currentParent [RETURN_TYPE] Node   [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  current  lookAhead  n  nameNode  valueNode  Stack  ancestors  
[BugLab_Wrong_Operator]^ancestors.get ( ancestors.size (  )   <=  2 )  : null;^119^^^^^117^120^ancestors.get ( ancestors.size (  )  - 2 )  : null;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] currentParent [RETURN_TYPE] Node   [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  current  lookAhead  n  nameNode  valueNode  Stack  ancestors  
[BugLab_Wrong_Literal]^ancestors.get ( ancestors.size (  )   )  : null;^119^^^^^117^120^ancestors.get ( ancestors.size (  )  - 2 )  : null;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] currentParent [RETURN_TYPE] Node   [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  current  lookAhead  n  nameNode  valueNode  Stack  ancestors  
[BugLab_Variable_Misuse]^Preconditions.checkArgument ( name.getType (  )  == Token.VAR ) ;^165^^^^^163^173^Preconditions.checkArgument ( var.getType (  )  == Token.VAR ) ;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] forVar [RETURN_TYPE] NodeIterators$LocalVarMotion   Node name Node var Node block [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  block  current  lookAhead  n  name  nameNode  valueNode  var  Stack  ancestors  
[BugLab_Variable_Misuse]^Preconditions.checkArgument ( var.getType (  )  == Token.null ) ;^165^^^^^163^173^Preconditions.checkArgument ( var.getType (  )  == Token.VAR ) ;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] forVar [RETURN_TYPE] NodeIterators$LocalVarMotion   Node name Node var Node block [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  block  current  lookAhead  n  name  nameNode  valueNode  var  Stack  ancestors  
[BugLab_Wrong_Operator]^Preconditions.checkArgument ( var.getType (  )  != Token.VAR ) ;^165^^^^^163^173^Preconditions.checkArgument ( var.getType (  )  == Token.VAR ) ;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] forVar [RETURN_TYPE] NodeIterators$LocalVarMotion   Node name Node var Node block [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  block  current  lookAhead  n  name  nameNode  valueNode  var  Stack  ancestors  
[BugLab_Variable_Misuse]^Preconditions.checkArgument ( NodeUtil.isStatement ( valueNode )  ) ;^166^^^^^163^173^Preconditions.checkArgument ( NodeUtil.isStatement ( var )  ) ;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] forVar [RETURN_TYPE] NodeIterators$LocalVarMotion   Node name Node var Node block [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  block  current  lookAhead  n  name  nameNode  valueNode  var  Stack  ancestors  
[BugLab_Variable_Misuse]^return new LocalVarMotion ( valueNode, new FunctionlessLocalScope ( name, var, block )  ) ;^171^172^^^^163^173^return new LocalVarMotion ( name, new FunctionlessLocalScope ( name, var, block )  ) ;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] forVar [RETURN_TYPE] NodeIterators$LocalVarMotion   Node name Node var Node block [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  block  current  lookAhead  n  name  nameNode  valueNode  var  Stack  ancestors  
[BugLab_Variable_Misuse]^return new LocalVarMotion ( name, new FunctionlessLocalScope ( name, var, valueNode )  ) ;^171^172^^^^163^173^return new LocalVarMotion ( name, new FunctionlessLocalScope ( name, var, block )  ) ;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] forVar [RETURN_TYPE] NodeIterators$LocalVarMotion   Node name Node var Node block [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  block  current  lookAhead  n  name  nameNode  valueNode  var  Stack  ancestors  
[BugLab_Argument_Swapping]^return new LocalVarMotion ( block, new FunctionlessLocalScope ( name, var, name )  ) ;^171^172^^^^163^173^return new LocalVarMotion ( name, new FunctionlessLocalScope ( name, var, block )  ) ;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] forVar [RETURN_TYPE] NodeIterators$LocalVarMotion   Node name Node var Node block [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  block  current  lookAhead  n  name  nameNode  valueNode  var  Stack  ancestors  
[BugLab_Argument_Swapping]^return new LocalVarMotion ( name, new FunctionlessLocalScope ( name, block, var )  ) ;^171^172^^^^163^173^return new LocalVarMotion ( name, new FunctionlessLocalScope ( name, var, block )  ) ;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] forVar [RETURN_TYPE] NodeIterators$LocalVarMotion   Node name Node var Node block [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  block  current  lookAhead  n  name  nameNode  valueNode  var  Stack  ancestors  
[BugLab_Variable_Misuse]^return new LocalVarMotion ( name, new FunctionlessLocalScope ( name, valueNode, block )  ) ;^171^172^^^^163^173^return new LocalVarMotion ( name, new FunctionlessLocalScope ( name, var, block )  ) ;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] forVar [RETURN_TYPE] NodeIterators$LocalVarMotion   Node name Node var Node block [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  block  current  lookAhead  n  name  nameNode  valueNode  var  Stack  ancestors  
[BugLab_Variable_Misuse]^name, new FunctionlessLocalScope ( valueNode, var, block )  ) ;^172^^^^^163^173^name, new FunctionlessLocalScope ( name, var, block )  ) ;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] forVar [RETURN_TYPE] NodeIterators$LocalVarMotion   Node name Node var Node block [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  block  current  lookAhead  n  name  nameNode  valueNode  var  Stack  ancestors  
[BugLab_Variable_Misuse]^name, new FunctionlessLocalScope ( name, valueNode, block )  ) ;^172^^^^^163^173^name, new FunctionlessLocalScope ( name, var, block )  ) ;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] forVar [RETURN_TYPE] NodeIterators$LocalVarMotion   Node name Node var Node block [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  block  current  lookAhead  n  name  nameNode  valueNode  var  Stack  ancestors  
[BugLab_Variable_Misuse]^name, new FunctionlessLocalScope ( name, var, var )  ) ;^172^^^^^163^173^name, new FunctionlessLocalScope ( name, var, block )  ) ;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] forVar [RETURN_TYPE] NodeIterators$LocalVarMotion   Node name Node var Node block [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  block  current  lookAhead  n  name  nameNode  valueNode  var  Stack  ancestors  
[BugLab_Argument_Swapping]^name, new FunctionlessLocalScope ( block, var, name )  ) ;^172^^^^^163^173^name, new FunctionlessLocalScope ( name, var, block )  ) ;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] forVar [RETURN_TYPE] NodeIterators$LocalVarMotion   Node name Node var Node block [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  block  current  lookAhead  n  name  nameNode  valueNode  var  Stack  ancestors  
[BugLab_Argument_Swapping]^name, new FunctionlessLocalScope ( name, block, var )  ) ;^172^^^^^163^173^name, new FunctionlessLocalScope ( name, var, block )  ) ;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] forVar [RETURN_TYPE] NodeIterators$LocalVarMotion   Node name Node var Node block [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  block  current  lookAhead  n  name  nameNode  valueNode  var  Stack  ancestors  
[BugLab_Variable_Misuse]^Preconditions.checkArgument ( nameNode.getType (  )  == Token.ASSIGN ) ;^181^^^^^179^187^Preconditions.checkArgument ( assign.getType (  )  == Token.ASSIGN ) ;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] forAssign [RETURN_TYPE] NodeIterators$LocalVarMotion   Node name Node assign Node expr Node block [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  assign  block  current  expr  lookAhead  n  name  nameNode  valueNode  var  Stack  ancestors  
[BugLab_Wrong_Operator]^Preconditions.checkArgument ( assign.getType (  )  != Token.ASSIGN ) ;^181^^^^^179^187^Preconditions.checkArgument ( assign.getType (  )  == Token.ASSIGN ) ;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] forAssign [RETURN_TYPE] NodeIterators$LocalVarMotion   Node name Node assign Node expr Node block [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  assign  block  current  expr  lookAhead  n  name  nameNode  valueNode  var  Stack  ancestors  
[BugLab_Variable_Misuse]^Preconditions.checkArgument ( nameNode.getType (  )  == Token.EXPR_RESULT ) ;^182^^^^^179^187^Preconditions.checkArgument ( expr.getType (  )  == Token.EXPR_RESULT ) ;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] forAssign [RETURN_TYPE] NodeIterators$LocalVarMotion   Node name Node assign Node expr Node block [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  assign  block  current  expr  lookAhead  n  name  nameNode  valueNode  var  Stack  ancestors  
[BugLab_Wrong_Operator]^Preconditions.checkArgument ( expr.getType (  )  != Token.EXPR_RESULT ) ;^182^^^^^179^187^Preconditions.checkArgument ( expr.getType (  )  == Token.EXPR_RESULT ) ;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] forAssign [RETURN_TYPE] NodeIterators$LocalVarMotion   Node name Node assign Node expr Node block [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  assign  block  current  expr  lookAhead  n  name  nameNode  valueNode  var  Stack  ancestors  
[BugLab_Variable_Misuse]^Preconditions.checkArgument ( valueNode.getType (  )  == Token.EXPR_RESULT ) ;^182^^^^^179^187^Preconditions.checkArgument ( expr.getType (  )  == Token.EXPR_RESULT ) ;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] forAssign [RETURN_TYPE] NodeIterators$LocalVarMotion   Node name Node assign Node expr Node block [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  assign  block  current  expr  lookAhead  n  name  nameNode  valueNode  var  Stack  ancestors  
[BugLab_Variable_Misuse]^return new LocalVarMotion ( valueNode, new FunctionlessLocalScope ( assign, expr, block )  ) ;^185^186^^^^179^187^return new LocalVarMotion ( name, new FunctionlessLocalScope ( assign, expr, block )  ) ;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] forAssign [RETURN_TYPE] NodeIterators$LocalVarMotion   Node name Node assign Node expr Node block [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  assign  block  current  expr  lookAhead  n  name  nameNode  valueNode  var  Stack  ancestors  
[BugLab_Variable_Misuse]^return new LocalVarMotion ( name, new FunctionlessLocalScope ( var, expr, block )  ) ;^185^186^^^^179^187^return new LocalVarMotion ( name, new FunctionlessLocalScope ( assign, expr, block )  ) ;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] forAssign [RETURN_TYPE] NodeIterators$LocalVarMotion   Node name Node assign Node expr Node block [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  assign  block  current  expr  lookAhead  n  name  nameNode  valueNode  var  Stack  ancestors  
[BugLab_Variable_Misuse]^return new LocalVarMotion ( name, new FunctionlessLocalScope ( assign, nameNode, block )  ) ;^185^186^^^^179^187^return new LocalVarMotion ( name, new FunctionlessLocalScope ( assign, expr, block )  ) ;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] forAssign [RETURN_TYPE] NodeIterators$LocalVarMotion   Node name Node assign Node expr Node block [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  assign  block  current  expr  lookAhead  n  name  nameNode  valueNode  var  Stack  ancestors  
[BugLab_Variable_Misuse]^return new LocalVarMotion ( name, new FunctionlessLocalScope ( assign, expr, valueNode )  ) ;^185^186^^^^179^187^return new LocalVarMotion ( name, new FunctionlessLocalScope ( assign, expr, block )  ) ;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] forAssign [RETURN_TYPE] NodeIterators$LocalVarMotion   Node name Node assign Node expr Node block [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  assign  block  current  expr  lookAhead  n  name  nameNode  valueNode  var  Stack  ancestors  
[BugLab_Argument_Swapping]^return new LocalVarMotion ( block, new FunctionlessLocalScope ( assign, expr, name )  ) ;^185^186^^^^179^187^return new LocalVarMotion ( name, new FunctionlessLocalScope ( assign, expr, block )  ) ;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] forAssign [RETURN_TYPE] NodeIterators$LocalVarMotion   Node name Node assign Node expr Node block [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  assign  block  current  expr  lookAhead  n  name  nameNode  valueNode  var  Stack  ancestors  
[BugLab_Argument_Swapping]^return new LocalVarMotion ( name, new FunctionlessLocalScope ( block, expr, assign )  ) ;^185^186^^^^179^187^return new LocalVarMotion ( name, new FunctionlessLocalScope ( assign, expr, block )  ) ;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] forAssign [RETURN_TYPE] NodeIterators$LocalVarMotion   Node name Node assign Node expr Node block [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  assign  block  current  expr  lookAhead  n  name  nameNode  valueNode  var  Stack  ancestors  
[BugLab_Argument_Swapping]^return new LocalVarMotion ( expr, new FunctionlessLocalScope ( assign, name, block )  ) ;^185^186^^^^179^187^return new LocalVarMotion ( name, new FunctionlessLocalScope ( assign, expr, block )  ) ;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] forAssign [RETURN_TYPE] NodeIterators$LocalVarMotion   Node name Node assign Node expr Node block [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  assign  block  current  expr  lookAhead  n  name  nameNode  valueNode  var  Stack  ancestors  
[BugLab_Argument_Swapping]^return new LocalVarMotion ( name, new FunctionlessLocalScope ( assign, block, expr )  ) ;^185^186^^^^179^187^return new LocalVarMotion ( name, new FunctionlessLocalScope ( assign, expr, block )  ) ;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] forAssign [RETURN_TYPE] NodeIterators$LocalVarMotion   Node name Node assign Node expr Node block [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  assign  block  current  expr  lookAhead  n  name  nameNode  valueNode  var  Stack  ancestors  
[BugLab_Variable_Misuse]^return new LocalVarMotion ( var, new FunctionlessLocalScope ( assign, expr, block )  ) ;^185^186^^^^179^187^return new LocalVarMotion ( name, new FunctionlessLocalScope ( assign, expr, block )  ) ;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] forAssign [RETURN_TYPE] NodeIterators$LocalVarMotion   Node name Node assign Node expr Node block [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  assign  block  current  expr  lookAhead  n  name  nameNode  valueNode  var  Stack  ancestors  
[BugLab_Variable_Misuse]^return new LocalVarMotion ( name, new FunctionlessLocalScope ( valueNode, expr, block )  ) ;^185^186^^^^179^187^return new LocalVarMotion ( name, new FunctionlessLocalScope ( assign, expr, block )  ) ;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] forAssign [RETURN_TYPE] NodeIterators$LocalVarMotion   Node name Node assign Node expr Node block [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  assign  block  current  expr  lookAhead  n  name  nameNode  valueNode  var  Stack  ancestors  
[BugLab_Variable_Misuse]^return new LocalVarMotion ( name, new FunctionlessLocalScope ( assign, expr, nameNode )  ) ;^185^186^^^^179^187^return new LocalVarMotion ( name, new FunctionlessLocalScope ( assign, expr, block )  ) ;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] forAssign [RETURN_TYPE] NodeIterators$LocalVarMotion   Node name Node assign Node expr Node block [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  assign  block  current  expr  lookAhead  n  name  nameNode  valueNode  var  Stack  ancestors  
[BugLab_Argument_Swapping]^return new LocalVarMotion ( assign, new FunctionlessLocalScope ( name, expr, block )  ) ;^185^186^^^^179^187^return new LocalVarMotion ( name, new FunctionlessLocalScope ( assign, expr, block )  ) ;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] forAssign [RETURN_TYPE] NodeIterators$LocalVarMotion   Node name Node assign Node expr Node block [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  assign  block  current  expr  lookAhead  n  name  nameNode  valueNode  var  Stack  ancestors  
[BugLab_Variable_Misuse]^name, new FunctionlessLocalScope ( valueNode, expr, block )  ) ;^186^^^^^179^187^name, new FunctionlessLocalScope ( assign, expr, block )  ) ;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] forAssign [RETURN_TYPE] NodeIterators$LocalVarMotion   Node name Node assign Node expr Node block [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  assign  block  current  expr  lookAhead  n  name  nameNode  valueNode  var  Stack  ancestors  
[BugLab_Variable_Misuse]^name, new FunctionlessLocalScope ( assign, var, block )  ) ;^186^^^^^179^187^name, new FunctionlessLocalScope ( assign, expr, block )  ) ;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] forAssign [RETURN_TYPE] NodeIterators$LocalVarMotion   Node name Node assign Node expr Node block [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  assign  block  current  expr  lookAhead  n  name  nameNode  valueNode  var  Stack  ancestors  
[BugLab_Variable_Misuse]^name, new FunctionlessLocalScope ( assign, expr, var )  ) ;^186^^^^^179^187^name, new FunctionlessLocalScope ( assign, expr, block )  ) ;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] forAssign [RETURN_TYPE] NodeIterators$LocalVarMotion   Node name Node assign Node expr Node block [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  assign  block  current  expr  lookAhead  n  name  nameNode  valueNode  var  Stack  ancestors  
[BugLab_Argument_Swapping]^name, new FunctionlessLocalScope ( expr, assign, block )  ) ;^186^^^^^179^187^name, new FunctionlessLocalScope ( assign, expr, block )  ) ;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] forAssign [RETURN_TYPE] NodeIterators$LocalVarMotion   Node name Node assign Node expr Node block [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  assign  block  current  expr  lookAhead  n  name  nameNode  valueNode  var  Stack  ancestors  
[BugLab_Argument_Swapping]^name, new FunctionlessLocalScope ( assign, block, expr )  ) ;^186^^^^^179^187^name, new FunctionlessLocalScope ( assign, expr, block )  ) ;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] forAssign [RETURN_TYPE] NodeIterators$LocalVarMotion   Node name Node assign Node expr Node block [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  assign  block  current  expr  lookAhead  n  name  nameNode  valueNode  var  Stack  ancestors  
[BugLab_Variable_Misuse]^return var != null;^205^^^^^204^206^return lookAhead != null;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] hasNext [RETURN_TYPE] boolean   [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  assign  block  current  expr  lookAhead  n  name  nameNode  valueNode  var  Stack  ancestors  
[BugLab_Wrong_Operator]^return lookAhead == null;^205^^^^^204^206^return lookAhead != null;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] hasNext [RETURN_TYPE] boolean   [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  assign  block  current  expr  lookAhead  n  name  nameNode  valueNode  var  Stack  ancestors  
[BugLab_Variable_Misuse]^Node next = var;^210^^^^^209^213^Node next = lookAhead;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] next [RETURN_TYPE] Node   [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  assign  block  current  expr  lookAhead  n  name  nameNode  next  valueNode  var  Stack  ancestors  
[BugLab_Wrong_Literal]^advanceLookAhead ( true ) ;^211^^^^^209^213^advanceLookAhead ( false ) ;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] next [RETURN_TYPE] Node   [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  assign  block  current  expr  lookAhead  n  name  nameNode  next  valueNode  var  Stack  ancestors  
[BugLab_Variable_Misuse]^return nameNode;^212^^^^^209^213^return next;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] next [RETURN_TYPE] Node   [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  assign  block  current  expr  lookAhead  n  name  nameNode  next  valueNode  var  Stack  ancestors  
[BugLab_Variable_Misuse]^if  ( !valueHasSideEffects )  {^221^^^^^206^236^if  ( !atStart )  {^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  Stack  ancestors  
[BugLab_Variable_Misuse]^if  ( nextParent == null )  {^222^^^^^207^237^if  ( lookAhead == null )  {^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  Stack  ancestors  
[BugLab_Wrong_Operator]^if  ( lookAhead != null )  {^222^^^^^207^237^if  ( lookAhead == null )  {^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  Stack  ancestors  
[BugLab_Variable_Misuse]^if  ( nameNode.getType (  )  == Token.NAME && varName.equals ( curNode.getString (  )  )  )  {^229^230^^^^214^244^if  ( curNode.getType (  )  == Token.NAME && varName.equals ( curNode.getString (  )  )  )  {^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  Stack  ancestors  
[BugLab_Argument_Swapping]^if  ( varName.getType (  )  == Token.NAME && curNode.equals ( curNode.getString (  )  )  )  {^229^230^^^^214^244^if  ( curNode.getType (  )  == Token.NAME && varName.equals ( curNode.getString (  )  )  )  {^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  Stack  ancestors  
[BugLab_Wrong_Operator]^if  ( curNode.getType (  )  == Token.NAME || varName.equals ( curNode.getString (  )  )  )  {^229^230^^^^214^244^if  ( curNode.getType (  )  == Token.NAME && varName.equals ( curNode.getString (  )  )  )  {^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  Stack  ancestors  
[BugLab_Wrong_Operator]^if  ( curNode.getType (  )  != Token.NAME && varName.equals ( curNode.getString (  )  )  )  {^229^230^^^^214^244^if  ( curNode.getType (  )  == Token.NAME && varName.equals ( curNode.getString (  )  )  )  {^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  Stack  ancestors  
[BugLab_Variable_Misuse]^if  ( var.getType (  )  == Token.NAME && varName.equals ( curNode.getString (  )  )  )  {^229^230^^^^214^244^if  ( curNode.getType (  )  == Token.NAME && varName.equals ( curNode.getString (  )  )  )  {^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  Stack  ancestors  
[BugLab_Variable_Misuse]^varName.equals ( nameNode.getString (  )  )  )  {^230^^^^^215^245^varName.equals ( curNode.getString (  )  )  )  {^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  Stack  ancestors  
[BugLab_Variable_Misuse]^varName.equals ( nextNode.getString (  )  )  )  {^230^^^^^215^245^varName.equals ( curNode.getString (  )  )  )  {^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  Stack  ancestors  
[BugLab_Variable_Misuse]^if  ( nextNode == null )  {^222^^^^^207^237^if  ( lookAhead == null )  {^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  Stack  ancestors  
[BugLab_Variable_Misuse]^if  ( next.getType (  )  == Token.NAME && varName.equals ( curNode.getString (  )  )  )  {^229^230^^^^214^244^if  ( curNode.getType (  )  == Token.NAME && varName.equals ( curNode.getString (  )  )  )  {^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  Stack  ancestors  
[BugLab_Variable_Misuse]^varName.equals ( next.getString (  )  )  )  {^230^^^^^215^245^varName.equals ( curNode.getString (  )  )  )  {^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  Stack  ancestors  
[BugLab_Variable_Misuse]^int type = name.getType (  ) ;^243^^^^^228^258^int type = nextNode.getType (  ) ;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  Stack  ancestors  
[BugLab_Variable_Misuse]^int type = nameNode.getType (  ) ;^243^^^^^228^258^int type = nextNode.getType (  ) ;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  Stack  ancestors  
[BugLab_Variable_Misuse]^if  ( isVarDeclaration )  {^245^^^^^230^260^if  ( valueHasSideEffects )  {^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  Stack  ancestors  
[BugLab_Variable_Misuse]^if  ( type == Token.NAME && !varName.equals ( name.getString (  )  )  )  {^249^^^^^234^264^if  ( type == Token.NAME && !varName.equals ( nextNode.getString (  )  )  )  {^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  Stack  ancestors  
[BugLab_Wrong_Operator]^if  ( type == Token.NAME || !varName.equals ( nextNode.getString (  )  )  )  {^249^^^^^234^264^if  ( type == Token.NAME && !varName.equals ( nextNode.getString (  )  )  )  {^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  Stack  ancestors  
[BugLab_Wrong_Operator]^if  ( type <= Token.NAME && !varName.equals ( nextNode.getString (  )  )  )  {^249^^^^^234^264^if  ( type == Token.NAME && !varName.equals ( nextNode.getString (  )  )  )  {^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  Stack  ancestors  
[BugLab_Wrong_Operator]^if  ( type >= Token.NAME && !varName.equals ( nextNode.getString (  )  )  )  {^249^^^^^234^264^if  ( type == Token.NAME && !varName.equals ( nextNode.getString (  )  )  )  {^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  Stack  ancestors  
[BugLab_Wrong_Operator]^if  ( type != Token.NAME && !varName.equals ( nextNode.getString (  )  )  )  {^249^^^^^234^264^if  ( type == Token.NAME && !varName.equals ( nextNode.getString (  )  )  )  {^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  Stack  ancestors  
[BugLab_Variable_Misuse]^if  ( nameNode == null )  {^251^^^^^236^266^if  ( nextParent == null )  {^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  Stack  ancestors  
[BugLab_Wrong_Operator]^if  ( nextParent != null )  {^251^^^^^236^266^if  ( nextParent == null )  {^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  Stack  ancestors  
[BugLab_Variable_Misuse]^if  ( !valueHasSideEffects && !isVarDeclaration )  {^258^^^^^251^261^if  ( !assignsName && !isVarDeclaration )  {^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  Stack  ancestors  
[BugLab_Variable_Misuse]^if  ( !assignsName && !valueHasSideEffects )  {^258^^^^^251^261^if  ( !assignsName && !isVarDeclaration )  {^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  Stack  ancestors  
[BugLab_Wrong_Operator]^if  ( !assignsName || !isVarDeclaration )  {^258^^^^^251^261^if  ( !assignsName && !isVarDeclaration )  {^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  Stack  ancestors  
[BugLab_Wrong_Literal]^blocked = false;^259^^^^^251^261^blocked = true;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  Stack  ancestors  
[BugLab_Variable_Misuse]^boolean assignsName =  ( nameNode.getType (  )  == Token.ASSIGN && nextNode == nextParent.getFirstChild (  )  ) ;^254^255^^^^251^261^boolean assignsName =  ( nextParent.getType (  )  == Token.ASSIGN && nextNode == nextParent.getFirstChild (  )  ) ;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  Stack  ancestors  
[BugLab_Variable_Misuse]^boolean assignsName =  ( nextParent.getType (  )  == Token.ASSIGN && nameNode == nextParent.getFirstChild (  )  ) ;^254^255^^^^251^261^boolean assignsName =  ( nextParent.getType (  )  == Token.ASSIGN && nextNode == nextParent.getFirstChild (  )  ) ;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  Stack  ancestors  
[BugLab_Argument_Swapping]^boolean assignsName =  ( nextNode.getType (  )  == Token.ASSIGN && nextParent == nextParent.getFirstChild (  )  ) ;^254^255^^^^251^261^boolean assignsName =  ( nextParent.getType (  )  == Token.ASSIGN && nextNode == nextParent.getFirstChild (  )  ) ;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  Stack  ancestors  
[BugLab_Wrong_Operator]^boolean assignsName =  ( nextParent.getType (  )  == Token.ASSIGN || nextNode == nextParent.getFirstChild (  )  ) ;^254^255^^^^251^261^boolean assignsName =  ( nextParent.getType (  )  == Token.ASSIGN && nextNode == nextParent.getFirstChild (  )  ) ;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  Stack  ancestors  
[BugLab_Wrong_Operator]^boolean assignsName =  ( nextParent.getType (  )  <= Token.ASSIGN && nextNode == nextParent.getFirstChild (  )  ) ;^254^255^^^^251^261^boolean assignsName =  ( nextParent.getType (  )  == Token.ASSIGN && nextNode == nextParent.getFirstChild (  )  ) ;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  Stack  ancestors  
[BugLab_Wrong_Operator]^boolean assignsName =  ( nextParent.getType (  )  == Token.ASSIGN && nextNode <= nextParent.getFirstChild (  )  ) ;^254^255^^^^251^261^boolean assignsName =  ( nextParent.getType (  )  == Token.ASSIGN && nextNode == nextParent.getFirstChild (  )  ) ;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  Stack  ancestors  
[BugLab_Variable_Misuse]^boolean isVarDeclaration =  ( var.getType (  )  == Token.VAR ) ;^256^^^^^251^261^boolean isVarDeclaration =  ( nextParent.getType (  )  == Token.VAR ) ;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  Stack  ancestors  
[BugLab_Wrong_Operator]^boolean isVarDeclaration =  ( nextParent.getType (  )  <= Token.VAR ) ;^256^^^^^251^261^boolean isVarDeclaration =  ( nextParent.getType (  )  == Token.VAR ) ;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  Stack  ancestors  
[BugLab_Variable_Misuse]^&& nextNode == nextNode.getFirstChild (  )  ) ;^255^^^^^251^261^&& nextNode == nextParent.getFirstChild (  )  ) ;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  Stack  ancestors  
[BugLab_Variable_Misuse]^boolean isVarDeclaration =  ( nameNode.getType (  )  == Token.VAR ) ;^256^^^^^251^261^boolean isVarDeclaration =  ( nextParent.getType (  )  == Token.VAR ) ;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  Stack  ancestors  
[BugLab_Wrong_Literal]^blocked = false;^252^^^^^237^267^blocked = true;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  Stack  ancestors  
[BugLab_Variable_Misuse]^if  ( !valueHasSideEffects && !isVarDeclaration )  {^258^^^^^243^273^if  ( !assignsName && !isVarDeclaration )  {^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  Stack  ancestors  
[BugLab_Variable_Misuse]^if  ( !assignsName && !valueHasSideEffects )  {^258^^^^^243^273^if  ( !assignsName && !isVarDeclaration )  {^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  Stack  ancestors  
[BugLab_Wrong_Operator]^if  ( !assignsName || !isVarDeclaration )  {^258^^^^^243^273^if  ( !assignsName && !isVarDeclaration )  {^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  Stack  ancestors  
[BugLab_Wrong_Literal]^blocked = false;^259^^^^^244^274^blocked = true;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  Stack  ancestors  
[BugLab_Variable_Misuse]^if  ( valueHasSideEffects )  {^263^^^^^248^278^if  ( blocked )  {^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  Stack  ancestors  
[BugLab_Wrong_Literal]^boolean blocked = true;^250^^^^^235^265^boolean blocked = false;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  Stack  ancestors  
[BugLab_Variable_Misuse]^boolean assignsName =  ( name.getType (  )  == Token.ASSIGN && nextNode == nextParent.getFirstChild (  )  ) ;^254^255^^^^239^269^boolean assignsName =  ( nextParent.getType (  )  == Token.ASSIGN && nextNode == nextParent.getFirstChild (  )  ) ;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  Stack  ancestors  
[BugLab_Variable_Misuse]^boolean assignsName =  ( nextParent.getType (  )  == Token.ASSIGN && nextParent == nextParent.getFirstChild (  )  ) ;^254^255^^^^239^269^boolean assignsName =  ( nextParent.getType (  )  == Token.ASSIGN && nextNode == nextParent.getFirstChild (  )  ) ;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  Stack  ancestors  
[BugLab_Argument_Swapping]^boolean assignsName =  ( nextNode.getType (  )  == Token.ASSIGN && nextParent == nextParent.getFirstChild (  )  ) ;^254^255^^^^239^269^boolean assignsName =  ( nextParent.getType (  )  == Token.ASSIGN && nextNode == nextParent.getFirstChild (  )  ) ;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  Stack  ancestors  
[BugLab_Wrong_Operator]^boolean assignsName =  ( nextParent.getType (  )  == Token.ASSIGN || nextNode == nextParent.getFirstChild (  )  ) ;^254^255^^^^239^269^boolean assignsName =  ( nextParent.getType (  )  == Token.ASSIGN && nextNode == nextParent.getFirstChild (  )  ) ;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  Stack  ancestors  
[BugLab_Wrong_Operator]^boolean assignsName =  ( nextParent.getType (  )  < Token.ASSIGN && nextNode == nextParent.getFirstChild (  )  ) ;^254^255^^^^239^269^boolean assignsName =  ( nextParent.getType (  )  == Token.ASSIGN && nextNode == nextParent.getFirstChild (  )  ) ;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  Stack  ancestors  
[BugLab_Wrong_Operator]^boolean assignsName =  ( nextParent.getType (  )  == Token.ASSIGN && nextNode <= nextParent.getFirstChild (  )  ) ;^254^255^^^^239^269^boolean assignsName =  ( nextParent.getType (  )  == Token.ASSIGN && nextNode == nextParent.getFirstChild (  )  ) ;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  Stack  ancestors  
[BugLab_Variable_Misuse]^boolean isVarDeclaration =  ( name.getType (  )  == Token.VAR ) ;^256^^^^^241^271^boolean isVarDeclaration =  ( nextParent.getType (  )  == Token.VAR ) ;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  Stack  ancestors  
[BugLab_Wrong_Operator]^boolean isVarDeclaration =  ( nextParent.getType (  )  != Token.VAR ) ;^256^^^^^241^271^boolean isVarDeclaration =  ( nextParent.getType (  )  == Token.VAR ) ;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  Stack  ancestors  
[BugLab_Variable_Misuse]^boolean assignsName =  ( next.getType (  )  == Token.ASSIGN && nextNode == nextParent.getFirstChild (  )  ) ;^254^255^^^^239^269^boolean assignsName =  ( nextParent.getType (  )  == Token.ASSIGN && nextNode == nextParent.getFirstChild (  )  ) ;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  Stack  ancestors  
[BugLab_Variable_Misuse]^boolean isVarDeclaration =  ( var.getType (  )  == Token.VAR ) ;^256^^^^^241^271^boolean isVarDeclaration =  ( nextParent.getType (  )  == Token.VAR ) ;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  Stack  ancestors  
[BugLab_Variable_Misuse]^boolean assignsName =  ( var.getType (  )  == Token.ASSIGN && nextNode == nextParent.getFirstChild (  )  ) ;^254^255^^^^251^261^boolean assignsName =  ( nextParent.getType (  )  == Token.ASSIGN && nextNode == nextParent.getFirstChild (  )  ) ;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  Stack  ancestors  
[BugLab_Variable_Misuse]^boolean assignsName =  ( nextParent.getType (  )  == Token.ASSIGN && next == nextParent.getFirstChild (  )  ) ;^254^255^^^^251^261^boolean assignsName =  ( nextParent.getType (  )  == Token.ASSIGN && nextNode == nextParent.getFirstChild (  )  ) ;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  Stack  ancestors  
[BugLab_Wrong_Operator]^boolean assignsName =  ( nextParent.getType (  )  >= Token.ASSIGN && nextNode == nextParent.getFirstChild (  )  ) ;^254^255^^^^251^261^boolean assignsName =  ( nextParent.getType (  )  == Token.ASSIGN && nextNode == nextParent.getFirstChild (  )  ) ;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  Stack  ancestors  
[BugLab_Variable_Misuse]^boolean isVarDeclaration =  ( valueNode.getType (  )  == Token.VAR ) ;^256^^^^^251^261^boolean isVarDeclaration =  ( nextParent.getType (  )  == Token.VAR ) ;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  Stack  ancestors  
[BugLab_Wrong_Operator]^boolean isVarDeclaration =  ( nextParent.getType (  )  != Token.VAR ) ;^256^^^^^251^261^boolean isVarDeclaration =  ( nextParent.getType (  )  == Token.VAR ) ;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  Stack  ancestors  
[BugLab_Variable_Misuse]^&& nextNode == name.getFirstChild (  )  ) ;^255^^^^^251^261^&& nextNode == nextParent.getFirstChild (  )  ) ;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  Stack  ancestors  
[BugLab_Variable_Misuse]^boolean assignsName =  ( nextParent.getType (  )  == Token.ASSIGN && nameNode == nextParent.getFirstChild (  )  ) ;^254^255^^^^239^269^boolean assignsName =  ( nextParent.getType (  )  == Token.ASSIGN && nextNode == nextParent.getFirstChild (  )  ) ;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  Stack  ancestors  
[BugLab_Wrong_Operator]^boolean assignsName =  ( nextParent.getType (  )  == Token.ASSIGN && nextNode > nextParent.getFirstChild (  )  ) ;^254^255^^^^239^269^boolean assignsName =  ( nextParent.getType (  )  == Token.ASSIGN && nextNode == nextParent.getFirstChild (  )  ) ;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  Stack  ancestors  
[BugLab_Wrong_Operator]^boolean isVarDeclaration =  ( nextParent.getType (  )  >= Token.VAR ) ;^256^^^^^241^271^boolean isVarDeclaration =  ( nextParent.getType (  )  == Token.VAR ) ;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  Stack  ancestors  
[BugLab_Variable_Misuse]^if  ( type == Token.NAME && !varName.equals ( next.getString (  )  )  )  {^249^^^^^234^264^if  ( type == Token.NAME && !varName.equals ( nextNode.getString (  )  )  )  {^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  Stack  ancestors  
[BugLab_Variable_Misuse]^if  ( type == Token.NAME && !varName.equals ( nextParent.getString (  )  )  )  {^249^^^^^234^264^if  ( type == Token.NAME && !varName.equals ( nextNode.getString (  )  )  )  {^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  Stack  ancestors  
[BugLab_Variable_Misuse]^boolean assignsName =  ( var.getType (  )  == Token.ASSIGN && nextNode == nextParent.getFirstChild (  )  ) ;^254^255^^^^239^269^boolean assignsName =  ( nextParent.getType (  )  == Token.ASSIGN && nextNode == nextParent.getFirstChild (  )  ) ;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  Stack  ancestors  
[BugLab_Variable_Misuse]^if  ( type == Token.NAME && !varName.equals ( nameNode.getString (  )  )  )  {^249^^^^^234^264^if  ( type == Token.NAME && !varName.equals ( nextNode.getString (  )  )  )  {^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  Stack  ancestors  
[BugLab_Wrong_Operator]^if  ( type > Token.NAME && !varName.equals ( nextNode.getString (  )  )  )  {^249^^^^^234^264^if  ( type == Token.NAME && !varName.equals ( nextNode.getString (  )  )  )  {^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  Stack  ancestors  
[BugLab_Variable_Misuse]^if  ( var == null )  {^251^^^^^236^266^if  ( nextParent == null )  {^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  Stack  ancestors  
[BugLab_Variable_Misuse]^boolean assignsName =  ( nextParent.getType (  )  == Token.ASSIGN && name == nextParent.getFirstChild (  )  ) ;^254^255^^^^251^261^boolean assignsName =  ( nextParent.getType (  )  == Token.ASSIGN && nextNode == nextParent.getFirstChild (  )  ) ;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  Stack  ancestors  
[BugLab_Variable_Misuse]^boolean isVarDeclaration =  ( name.getType (  )  == Token.VAR ) ;^256^^^^^251^261^boolean isVarDeclaration =  ( nextParent.getType (  )  == Token.VAR ) ;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  Stack  ancestors  
[BugLab_Variable_Misuse]^boolean assignsName =  ( nextNode.getType (  )  == Token.ASSIGN && nextNode == nextParent.getFirstChild (  )  ) ;^254^255^^^^251^261^boolean assignsName =  ( nextParent.getType (  )  == Token.ASSIGN && nextNode == nextParent.getFirstChild (  )  ) ;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  Stack  ancestors  
[BugLab_Variable_Misuse]^boolean isVarDeclaration =  ( nextNode.getType (  )  == Token.VAR ) ;^256^^^^^251^261^boolean isVarDeclaration =  ( nextParent.getType (  )  == Token.VAR ) ;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  Stack  ancestors  
[BugLab_Variable_Misuse]^if  ( isVarDeclaration )  {^263^^^^^248^278^if  ( blocked )  {^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  Stack  ancestors  
[BugLab_Variable_Misuse]^boolean assignsName =  ( nextParent.getType (  )  == Token.ASSIGN && next == nextParent.getFirstChild (  )  ) ;^254^255^^^^239^269^boolean assignsName =  ( nextParent.getType (  )  == Token.ASSIGN && nextNode == nextParent.getFirstChild (  )  ) ;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  Stack  ancestors  
[BugLab_Wrong_Operator]^boolean assignsName =  ( nextParent.getType (  )  != Token.ASSIGN && nextNode == nextParent.getFirstChild (  )  ) ;^254^255^^^^239^269^boolean assignsName =  ( nextParent.getType (  )  == Token.ASSIGN && nextNode == nextParent.getFirstChild (  )  ) ;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  Stack  ancestors  
[BugLab_Wrong_Operator]^boolean assignsName =  ( nextParent.getType (  )  == Token.ASSIGN && nextNode >= nextParent.getFirstChild (  )  ) ;^254^255^^^^239^269^boolean assignsName =  ( nextParent.getType (  )  == Token.ASSIGN && nextNode == nextParent.getFirstChild (  )  ) ;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  Stack  ancestors  
[BugLab_Variable_Misuse]^&& nextNode == nameNode.getFirstChild (  )  ) ;^255^^^^^240^270^&& nextNode == nextParent.getFirstChild (  )  ) ;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  Stack  ancestors  
[BugLab_Variable_Misuse]^if  ( name == null )  {^251^^^^^236^266^if  ( nextParent == null )  {^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  Stack  ancestors  
[BugLab_Wrong_Operator]^boolean assignsName =  ( nextParent.getType (  )  != Token.ASSIGN && nextNode == nextParent.getFirstChild (  )  ) ;^254^255^^^^251^261^boolean assignsName =  ( nextParent.getType (  )  == Token.ASSIGN && nextNode == nextParent.getFirstChild (  )  ) ;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  Stack  ancestors  
[BugLab_Wrong_Operator]^boolean assignsName =  ( nextParent.getType (  )  == Token.ASSIGN && nextNode > nextParent.getFirstChild (  )  ) ;^254^255^^^^251^261^boolean assignsName =  ( nextParent.getType (  )  == Token.ASSIGN && nextNode == nextParent.getFirstChild (  )  ) ;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  Stack  ancestors  
[BugLab_Variable_Misuse]^boolean isVarDeclaration =  ( nextParent.getType (  )  == Token.this ) ;^256^^^^^251^261^boolean isVarDeclaration =  ( nextParent.getType (  )  == Token.VAR ) ;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  Stack  ancestors  
[BugLab_Variable_Misuse]^boolean assignsName =  ( next.getType (  )  == Token.ASSIGN && nextNode == nextParent.getFirstChild (  )  ) ;^254^255^^^^251^261^boolean assignsName =  ( nextParent.getType (  )  == Token.ASSIGN && nextNode == nextParent.getFirstChild (  )  ) ;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  Stack  ancestors  
[BugLab_Variable_Misuse]^boolean assignsName =  ( nextNode.getType (  )  == Token.ASSIGN && nextNode == nextParent.getFirstChild (  )  ) ;^254^255^^^^239^269^boolean assignsName =  ( nextParent.getType (  )  == Token.ASSIGN && nextNode == nextParent.getFirstChild (  )  ) ;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  Stack  ancestors  
[BugLab_Variable_Misuse]^boolean assignsName =  ( nextParent.getType (  )  == Token.ASSIGN && name == nextParent.getFirstChild (  )  ) ;^254^255^^^^239^269^boolean assignsName =  ( nextParent.getType (  )  == Token.ASSIGN && nextNode == nextParent.getFirstChild (  )  ) ;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  Stack  ancestors  
[BugLab_Wrong_Operator]^boolean assignsName =  ( nextParent.getType (  )  <= Token.ASSIGN && nextNode == nextParent.getFirstChild (  )  ) ;^254^255^^^^239^269^boolean assignsName =  ( nextParent.getType (  )  == Token.ASSIGN && nextNode == nextParent.getFirstChild (  )  ) ;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  Stack  ancestors  
[BugLab_Wrong_Operator]^boolean assignsName =  ( nextParent.getType (  )  == Token.ASSIGN && nextNode != nextParent.getFirstChild (  )  ) ;^254^255^^^^239^269^boolean assignsName =  ( nextParent.getType (  )  == Token.ASSIGN && nextNode == nextParent.getFirstChild (  )  ) ;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  Stack  ancestors  
[BugLab_Variable_Misuse]^boolean isVarDeclaration =  ( nextNode.getType (  )  == Token.VAR ) ;^256^^^^^241^271^boolean isVarDeclaration =  ( nextParent.getType (  )  == Token.VAR ) ;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  Stack  ancestors  
[BugLab_Wrong_Operator]^boolean isVarDeclaration =  ( nextParent.getType (  )  > Token.VAR ) ;^256^^^^^241^271^boolean isVarDeclaration =  ( nextParent.getType (  )  == Token.VAR ) ;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  Stack  ancestors  
[BugLab_Variable_Misuse]^if  ( type == Token.NAME && !varName.equals ( var.getString (  )  )  )  {^249^^^^^234^264^if  ( type == Token.NAME && !varName.equals ( nextNode.getString (  )  )  )  {^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  Stack  ancestors  
[BugLab_Variable_Misuse]^&& nextNode == name.getFirstChild (  )  ) ;^255^^^^^240^270^&& nextNode == nextParent.getFirstChild (  )  ) ;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  Stack  ancestors  
[BugLab_Variable_Misuse]^if  ( NodeUtil.nodeTypeMayHaveSideEffects ( name )  && type != Token.NAME || type == Token.NAME && nextParent.getType (  )  == Token.CATCH )  {^276^277^^^^261^291^if  ( NodeUtil.nodeTypeMayHaveSideEffects ( nextNode )  && type != Token.NAME || type == Token.NAME && nextParent.getType (  )  == Token.CATCH )  {^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  Stack  ancestors  
[BugLab_Variable_Misuse]^if  ( NodeUtil.nodeTypeMayHaveSideEffects ( nextNode )  && type != Token.NAME || type == Token.NAME && nameNode.getType (  )  == Token.CATCH )  {^276^277^^^^261^291^if  ( NodeUtil.nodeTypeMayHaveSideEffects ( nextNode )  && type != Token.NAME || type == Token.NAME && nextParent.getType (  )  == Token.CATCH )  {^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  Stack  ancestors  
[BugLab_Argument_Swapping]^if  ( NodeUtil.nodeTypeMayHaveSideEffects ( nextNode )  && nextParent != Token.NAME || type == Token.NAME && type.getType (  )  == Token.CATCH )  {^276^277^^^^261^291^if  ( NodeUtil.nodeTypeMayHaveSideEffects ( nextNode )  && type != Token.NAME || type == Token.NAME && nextParent.getType (  )  == Token.CATCH )  {^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  Stack  ancestors  
[BugLab_Wrong_Operator]^if  ( NodeUtil.nodeTypeMayHaveSideEffects ( nextNode )  && type != Token.NAME && type == Token.NAME && nextParent.getType (  )  == Token.CATCH )  {^276^277^^^^261^291^if  ( NodeUtil.nodeTypeMayHaveSideEffects ( nextNode )  && type != Token.NAME || type == Token.NAME && nextParent.getType (  )  == Token.CATCH )  {^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  Stack  ancestors  
[BugLab_Wrong_Operator]^if  ( NodeUtil.nodeTypeMayHaveSideEffects ( nextNode )  || type != Token.NAME || type == Token.NAME && nextParent.getType (  )  == Token.CATCH )  {^276^277^^^^261^291^if  ( NodeUtil.nodeTypeMayHaveSideEffects ( nextNode )  && type != Token.NAME || type == Token.NAME && nextParent.getType (  )  == Token.CATCH )  {^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  Stack  ancestors  
[BugLab_Wrong_Operator]^if  ( NodeUtil.nodeTypeMayHaveSideEffects ( nextNode )  && type < Token.NAME || type == Token.NAME && nextParent.getType (  )  == Token.CATCH )  {^276^277^^^^261^291^if  ( NodeUtil.nodeTypeMayHaveSideEffects ( nextNode )  && type != Token.NAME || type == Token.NAME && nextParent.getType (  )  == Token.CATCH )  {^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  Stack  ancestors  
[BugLab_Wrong_Operator]^if  ( NodeUtil.nodeTypeMayHaveSideEffects ( nextNode )  && type != Token.NAME || type != Token.NAME && nextParent.getType (  )  == Token.CATCH )  {^276^277^^^^261^291^if  ( NodeUtil.nodeTypeMayHaveSideEffects ( nextNode )  && type != Token.NAME || type == Token.NAME && nextParent.getType (  )  == Token.CATCH )  {^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  Stack  ancestors  
[BugLab_Wrong_Operator]^if  ( NodeUtil.nodeTypeMayHaveSideEffects ( nextNode )  && type != Token.NAME || type <= Token.NAME && nextParent.getType (  )  == Token.CATCH )  {^276^277^^^^261^291^if  ( NodeUtil.nodeTypeMayHaveSideEffects ( nextNode )  && type != Token.NAME || type == Token.NAME && nextParent.getType (  )  == Token.CATCH )  {^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  Stack  ancestors  
[BugLab_Variable_Misuse]^|| type == Token.NAME && nameNode.getType (  )  == Token.CATCH )  {^277^^^^^262^292^|| type == Token.NAME && nextParent.getType (  )  == Token.CATCH )  {^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  Stack  ancestors  
[BugLab_Variable_Misuse]^lookAhead = nameNode;^282^^^^^267^297^lookAhead = nextNode;^[CLASS] NodeIterators FunctionlessLocalScope LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  current  expr  lookAhead  n  name  nameNode  next  nextNode  nextParent  valueNode  var  Stack  ancestors  
[BugLab_Wrong_Operator]^Preconditions.checkArgument ( ancestors.length >= 0 ) ;^52^^^^^51^61^Preconditions.checkArgument ( ancestors.length > 0 ) ;^[CLASS] FunctionlessLocalScope  [METHOD] <init> [RETURN_TYPE] Node[])    ancestors [VARIABLES] Node[]  ancestors  boolean  Stack  ancestors  Node  n  
[BugLab_Wrong_Operator]^if  ( n.getType (  )  != Token.FUNCTION )  {^55^^^^^51^61^if  ( n.getType (  )  == Token.FUNCTION )  {^[CLASS] FunctionlessLocalScope  [METHOD] <init> [RETURN_TYPE] Node[])    ancestors [VARIABLES] Node[]  ancestors  boolean  Stack  ancestors  Node  n  
[BugLab_Wrong_Operator]^return ! ( ancestors.size (  )  == 1 || ancestors.peek (  ) .getNext (  )  == null ) ;^66^^^^^64^67^return ! ( ancestors.size (  )  == 1 && ancestors.peek (  ) .getNext (  )  == null ) ;^[CLASS] FunctionlessLocalScope  [METHOD] hasNext [RETURN_TYPE] boolean   [VARIABLES] Stack  ancestors  boolean  
[BugLab_Wrong_Operator]^return ! ( ancestors.size (  )  != 1 && ancestors.peek (  ) .getNext (  )  == null ) ;^66^^^^^64^67^return ! ( ancestors.size (  )  == 1 && ancestors.peek (  ) .getNext (  )  == null ) ;^[CLASS] FunctionlessLocalScope  [METHOD] hasNext [RETURN_TYPE] boolean   [VARIABLES] Stack  ancestors  boolean  
[BugLab_Wrong_Operator]^return ! ( ancestors.size (  )  == 1 && ancestors.peek (  ) .getNext (  )  != null ) ;^66^^^^^64^67^return ! ( ancestors.size (  )  == 1 && ancestors.peek (  ) .getNext (  )  == null ) ;^[CLASS] FunctionlessLocalScope  [METHOD] hasNext [RETURN_TYPE] boolean   [VARIABLES] Stack  ancestors  boolean  
[BugLab_Wrong_Literal]^return ! ( ancestors.size (  )  == 2 && ancestors.peek (  ) .getNext (  )  == null ) ;^66^^^^^64^67^return ! ( ancestors.size (  )  == 1 && ancestors.peek (  ) .getNext (  )  == null ) ;^[CLASS] FunctionlessLocalScope  [METHOD] hasNext [RETURN_TYPE] boolean   [VARIABLES] Stack  ancestors  boolean  
[BugLab_Variable_Misuse]^return ! ( null.size (  )  == 1 && ancestors.peek (  ) .getNext (  )  == null ) ;^66^^^^^64^67^return ! ( ancestors.size (  )  == 1 && ancestors.peek (  ) .getNext (  )  == null ) ;^[CLASS] FunctionlessLocalScope  [METHOD] hasNext [RETURN_TYPE] boolean   [VARIABLES] Stack  ancestors  boolean  
[BugLab_Wrong_Operator]^if  ( current.getType (  )  >= Token.FUNCTION )  {^93^^^^^70^100^if  ( current.getType (  )  == Token.FUNCTION )  {^[CLASS] FunctionlessLocalScope  [METHOD] next [RETURN_TYPE] Node   [VARIABLES] Stack  ancestors  Node  current  boolean  
[BugLab_Wrong_Operator]^if  ( current.getNext (  )  != null )  {^72^^^^^70^100^if  ( current.getNext (  )  == null )  {^[CLASS] FunctionlessLocalScope  [METHOD] next [RETURN_TYPE] Node   [VARIABLES] Stack  ancestors  Node  current  boolean  
[BugLab_Wrong_Operator]^if  ( current.getType (  )  != Token.FUNCTION )  {^93^^^^^72^97^if  ( current.getType (  )  == Token.FUNCTION )  {^[CLASS] FunctionlessLocalScope  [METHOD] next [RETURN_TYPE] Node   [VARIABLES] Stack  ancestors  Node  current  boolean  
[BugLab_Wrong_Operator]^if  ( current.getType (  )  != Token.FUNCTION )  {^84^^^^^72^97^if  ( current.getType (  )  == Token.FUNCTION )  {^[CLASS] FunctionlessLocalScope  [METHOD] next [RETURN_TYPE] Node   [VARIABLES] Stack  ancestors  Node  current  boolean  
[BugLab_Wrong_Operator]^if  ( current.getType (  )  != Token.FUNCTION )  {^76^^^^^70^100^if  ( current.getType (  )  == Token.FUNCTION )  {^[CLASS] FunctionlessLocalScope  [METHOD] next [RETURN_TYPE] Node   [VARIABLES] Stack  ancestors  Node  current  boolean  
[BugLab_Wrong_Operator]^if  ( current.getType (  )  != Token.FUNCTION )  {^84^^^^^70^100^if  ( current.getType (  )  == Token.FUNCTION )  {^[CLASS] FunctionlessLocalScope  [METHOD] next [RETURN_TYPE] Node   [VARIABLES] Stack  ancestors  Node  current  boolean  
[BugLab_Wrong_Operator]^if  ( current.getType (  )  < Token.FUNCTION )  {^93^^^^^70^100^if  ( current.getType (  )  == Token.FUNCTION )  {^[CLASS] FunctionlessLocalScope  [METHOD] next [RETURN_TYPE] Node   [VARIABLES] Stack  ancestors  Node  current  boolean  
[BugLab_Variable_Misuse]^return 0.size (  )  >= 2 ? ancestors.get ( ancestors.size (  )  - 2 )  : null;^118^119^^^^117^120^return ancestors.size (  )  >= 2 ? ancestors.get ( ancestors.size (  )  - 2 )  : null;^[CLASS] FunctionlessLocalScope  [METHOD] currentParent [RETURN_TYPE] Node   [VARIABLES] Stack  ancestors  boolean  
[BugLab_Wrong_Operator]^return ancestors.size (  )  > 2 ? ancestors.get ( ancestors.size (  )  - 2 )  : null;^118^119^^^^117^120^return ancestors.size (  )  >= 2 ? ancestors.get ( ancestors.size (  )  - 2 )  : null;^[CLASS] FunctionlessLocalScope  [METHOD] currentParent [RETURN_TYPE] Node   [VARIABLES] Stack  ancestors  boolean  
[BugLab_Wrong_Operator]^return ancestors.size (  )  >= 2 ? ancestors.get ( ancestors.size (  )    instanceof   2 )  : null;^118^119^^^^117^120^return ancestors.size (  )  >= 2 ? ancestors.get ( ancestors.size (  )  - 2 )  : null;^[CLASS] FunctionlessLocalScope  [METHOD] currentParent [RETURN_TYPE] Node   [VARIABLES] Stack  ancestors  boolean  
[BugLab_Wrong_Literal]^return ancestors.size (  )  >= 2 ? ancestors.get ( ancestors.size (  )   )  : null;^118^119^^^^117^120^return ancestors.size (  )  >= 2 ? ancestors.get ( ancestors.size (  )  - 2 )  : null;^[CLASS] FunctionlessLocalScope  [METHOD] currentParent [RETURN_TYPE] Node   [VARIABLES] Stack  ancestors  boolean  
[BugLab_Wrong_Operator]^ancestors.get ( ancestors.size (  )   &  2 )  : null;^119^^^^^117^120^ancestors.get ( ancestors.size (  )  - 2 )  : null;^[CLASS] FunctionlessLocalScope  [METHOD] currentParent [RETURN_TYPE] Node   [VARIABLES] Stack  ancestors  boolean  
[BugLab_Wrong_Literal]^ancestors.get ( ancestors.size (  )   )  : null;^119^^^^^117^120^ancestors.get ( ancestors.size (  )  - 2 )  : null;^[CLASS] FunctionlessLocalScope  [METHOD] currentParent [RETURN_TYPE] Node   [VARIABLES] Stack  ancestors  boolean  
[BugLab_Variable_Misuse]^Preconditions.checkArgument ( valueNode.getType (  )  == Token.NAME ) ;^194^^^^^193^201^Preconditions.checkArgument ( nameNode.getType (  )  == Token.NAME ) ;^[CLASS] LocalVarMotion  [METHOD] <init> [RETURN_TYPE] NodeIterators$FunctionlessLocalScope)   Node nameNode FunctionlessLocalScope iterator [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  lookAhead  nameNode  valueNode  
[BugLab_Variable_Misuse]^Preconditions.checkArgument ( nameNode.getType (  )  == Token.0 ) ;^194^^^^^193^201^Preconditions.checkArgument ( nameNode.getType (  )  == Token.NAME ) ;^[CLASS] LocalVarMotion  [METHOD] <init> [RETURN_TYPE] NodeIterators$FunctionlessLocalScope)   Node nameNode FunctionlessLocalScope iterator [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  lookAhead  nameNode  valueNode  
[BugLab_Wrong_Operator]^Preconditions.checkArgument ( nameNode.getType (  )  != Token.NAME ) ;^194^^^^^193^201^Preconditions.checkArgument ( nameNode.getType (  )  == Token.NAME ) ;^[CLASS] LocalVarMotion  [METHOD] <init> [RETURN_TYPE] NodeIterators$FunctionlessLocalScope)   Node nameNode FunctionlessLocalScope iterator [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  lookAhead  nameNode  valueNode  
[BugLab_Variable_Misuse]^Node valueNode = NodeUtil.getAssignedValue ( lookAhead ) ;^195^^^^^193^201^Node valueNode = NodeUtil.getAssignedValue ( nameNode ) ;^[CLASS] LocalVarMotion  [METHOD] <init> [RETURN_TYPE] NodeIterators$FunctionlessLocalScope)   Node nameNode FunctionlessLocalScope iterator [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  lookAhead  nameNode  valueNode  
[BugLab_Variable_Misuse]^Node valueNode = NodeUtil.getAssignedValue ( valueNode ) ;^195^^^^^193^201^Node valueNode = NodeUtil.getAssignedValue ( nameNode ) ;^[CLASS] LocalVarMotion  [METHOD] <init> [RETURN_TYPE] NodeIterators$FunctionlessLocalScope)   Node nameNode FunctionlessLocalScope iterator [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  lookAhead  nameNode  valueNode  
[BugLab_Variable_Misuse]^this.varName = valueNode.getString (  ) ;^196^^^^^193^201^this.varName = nameNode.getString (  ) ;^[CLASS] LocalVarMotion  [METHOD] <init> [RETURN_TYPE] NodeIterators$FunctionlessLocalScope)   Node nameNode FunctionlessLocalScope iterator [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  lookAhead  nameNode  valueNode  
[BugLab_Variable_Misuse]^this.valueHasSideEffects = nameNode != null && NodeUtil.mayHaveSideEffects ( valueNode ) ;^197^198^^^^193^201^this.valueHasSideEffects = valueNode != null && NodeUtil.mayHaveSideEffects ( valueNode ) ;^[CLASS] LocalVarMotion  [METHOD] <init> [RETURN_TYPE] NodeIterators$FunctionlessLocalScope)   Node nameNode FunctionlessLocalScope iterator [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  lookAhead  nameNode  valueNode  
[BugLab_Wrong_Operator]^this.valueHasSideEffects = valueNode != null || NodeUtil.mayHaveSideEffects ( valueNode ) ;^197^198^^^^193^201^this.valueHasSideEffects = valueNode != null && NodeUtil.mayHaveSideEffects ( valueNode ) ;^[CLASS] LocalVarMotion  [METHOD] <init> [RETURN_TYPE] NodeIterators$FunctionlessLocalScope)   Node nameNode FunctionlessLocalScope iterator [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  lookAhead  nameNode  valueNode  
[BugLab_Wrong_Operator]^this.valueHasSideEffects = valueNode == null && NodeUtil.mayHaveSideEffects ( valueNode ) ;^197^198^^^^193^201^this.valueHasSideEffects = valueNode != null && NodeUtil.mayHaveSideEffects ( valueNode ) ;^[CLASS] LocalVarMotion  [METHOD] <init> [RETURN_TYPE] NodeIterators$FunctionlessLocalScope)   Node nameNode FunctionlessLocalScope iterator [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  lookAhead  nameNode  valueNode  
[BugLab_Variable_Misuse]^NodeUtil.mayHaveSideEffects ( nameNode ) ;^198^^^^^193^201^NodeUtil.mayHaveSideEffects ( valueNode ) ;^[CLASS] LocalVarMotion  [METHOD] <init> [RETURN_TYPE] NodeIterators$FunctionlessLocalScope)   Node nameNode FunctionlessLocalScope iterator [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  lookAhead  nameNode  valueNode  
[BugLab_Wrong_Literal]^advanceLookAhead ( false ) ;^200^^^^^193^201^advanceLookAhead ( true ) ;^[CLASS] LocalVarMotion  [METHOD] <init> [RETURN_TYPE] NodeIterators$FunctionlessLocalScope)   Node nameNode FunctionlessLocalScope iterator [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  lookAhead  nameNode  valueNode  
[BugLab_Variable_Misuse]^Preconditions.checkArgument ( nameNode.getType (  )  == Token.VAR ) ;^165^^^^^163^173^Preconditions.checkArgument ( var.getType (  )  == Token.VAR ) ;^[CLASS] LocalVarMotion  [METHOD] forVar [RETURN_TYPE] NodeIterators$LocalVarMotion   Node name Node var Node block [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  block  lookAhead  name  nameNode  valueNode  var  
[BugLab_Wrong_Operator]^Preconditions.checkArgument ( var.getType (  )  <= Token.VAR ) ;^165^^^^^163^173^Preconditions.checkArgument ( var.getType (  )  == Token.VAR ) ;^[CLASS] LocalVarMotion  [METHOD] forVar [RETURN_TYPE] NodeIterators$LocalVarMotion   Node name Node var Node block [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  block  lookAhead  name  nameNode  valueNode  var  
[BugLab_Variable_Misuse]^Preconditions.checkArgument ( NodeUtil.isStatement ( valueNode )  ) ;^166^^^^^163^173^Preconditions.checkArgument ( NodeUtil.isStatement ( var )  ) ;^[CLASS] LocalVarMotion  [METHOD] forVar [RETURN_TYPE] NodeIterators$LocalVarMotion   Node name Node var Node block [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  block  lookAhead  name  nameNode  valueNode  var  
[BugLab_Variable_Misuse]^return new LocalVarMotion ( valueNode, new FunctionlessLocalScope ( name, var, block )  ) ;^171^172^^^^163^173^return new LocalVarMotion ( name, new FunctionlessLocalScope ( name, var, block )  ) ;^[CLASS] LocalVarMotion  [METHOD] forVar [RETURN_TYPE] NodeIterators$LocalVarMotion   Node name Node var Node block [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  block  lookAhead  name  nameNode  valueNode  var  
[BugLab_Variable_Misuse]^return new LocalVarMotion ( name, new FunctionlessLocalScope ( name, valueNode, block )  ) ;^171^172^^^^163^173^return new LocalVarMotion ( name, new FunctionlessLocalScope ( name, var, block )  ) ;^[CLASS] LocalVarMotion  [METHOD] forVar [RETURN_TYPE] NodeIterators$LocalVarMotion   Node name Node var Node block [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  block  lookAhead  name  nameNode  valueNode  var  
[BugLab_Variable_Misuse]^return new LocalVarMotion ( name, new FunctionlessLocalScope ( name, var, var )  ) ;^171^172^^^^163^173^return new LocalVarMotion ( name, new FunctionlessLocalScope ( name, var, block )  ) ;^[CLASS] LocalVarMotion  [METHOD] forVar [RETURN_TYPE] NodeIterators$LocalVarMotion   Node name Node var Node block [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  block  lookAhead  name  nameNode  valueNode  var  
[BugLab_Argument_Swapping]^return new LocalVarMotion ( block, new FunctionlessLocalScope ( name, var, name )  ) ;^171^172^^^^163^173^return new LocalVarMotion ( name, new FunctionlessLocalScope ( name, var, block )  ) ;^[CLASS] LocalVarMotion  [METHOD] forVar [RETURN_TYPE] NodeIterators$LocalVarMotion   Node name Node var Node block [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  block  lookAhead  name  nameNode  valueNode  var  
[BugLab_Argument_Swapping]^return new LocalVarMotion ( var, new FunctionlessLocalScope ( name, name, block )  ) ;^171^172^^^^163^173^return new LocalVarMotion ( name, new FunctionlessLocalScope ( name, var, block )  ) ;^[CLASS] LocalVarMotion  [METHOD] forVar [RETURN_TYPE] NodeIterators$LocalVarMotion   Node name Node var Node block [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  block  lookAhead  name  nameNode  valueNode  var  
[BugLab_Variable_Misuse]^return new LocalVarMotion ( var, new FunctionlessLocalScope ( name, var, block )  ) ;^171^172^^^^163^173^return new LocalVarMotion ( name, new FunctionlessLocalScope ( name, var, block )  ) ;^[CLASS] LocalVarMotion  [METHOD] forVar [RETURN_TYPE] NodeIterators$LocalVarMotion   Node name Node var Node block [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  block  lookAhead  name  nameNode  valueNode  var  
[BugLab_Variable_Misuse]^return new LocalVarMotion ( name, new FunctionlessLocalScope ( name, var, valueNode )  ) ;^171^172^^^^163^173^return new LocalVarMotion ( name, new FunctionlessLocalScope ( name, var, block )  ) ;^[CLASS] LocalVarMotion  [METHOD] forVar [RETURN_TYPE] NodeIterators$LocalVarMotion   Node name Node var Node block [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  block  lookAhead  name  nameNode  valueNode  var  
[BugLab_Variable_Misuse]^name, new FunctionlessLocalScope ( name, valueNode, block )  ) ;^172^^^^^163^173^name, new FunctionlessLocalScope ( name, var, block )  ) ;^[CLASS] LocalVarMotion  [METHOD] forVar [RETURN_TYPE] NodeIterators$LocalVarMotion   Node name Node var Node block [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  block  lookAhead  name  nameNode  valueNode  var  
[BugLab_Variable_Misuse]^name, new FunctionlessLocalScope ( name, var, var )  ) ;^172^^^^^163^173^name, new FunctionlessLocalScope ( name, var, block )  ) ;^[CLASS] LocalVarMotion  [METHOD] forVar [RETURN_TYPE] NodeIterators$LocalVarMotion   Node name Node var Node block [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  block  lookAhead  name  nameNode  valueNode  var  
[BugLab_Argument_Swapping]^name, new FunctionlessLocalScope ( block, var, name )  ) ;^172^^^^^163^173^name, new FunctionlessLocalScope ( name, var, block )  ) ;^[CLASS] LocalVarMotion  [METHOD] forVar [RETURN_TYPE] NodeIterators$LocalVarMotion   Node name Node var Node block [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  block  lookAhead  name  nameNode  valueNode  var  
[BugLab_Argument_Swapping]^name, new FunctionlessLocalScope ( var, name, block )  ) ;^172^^^^^163^173^name, new FunctionlessLocalScope ( name, var, block )  ) ;^[CLASS] LocalVarMotion  [METHOD] forVar [RETURN_TYPE] NodeIterators$LocalVarMotion   Node name Node var Node block [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  block  lookAhead  name  nameNode  valueNode  var  
[BugLab_Variable_Misuse]^Preconditions.checkArgument ( nameNode.getType (  )  == Token.ASSIGN ) ;^181^^^^^179^187^Preconditions.checkArgument ( assign.getType (  )  == Token.ASSIGN ) ;^[CLASS] LocalVarMotion  [METHOD] forAssign [RETURN_TYPE] NodeIterators$LocalVarMotion   Node name Node assign Node expr Node block [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  assign  block  expr  lookAhead  name  nameNode  valueNode  var  
[BugLab_Wrong_Operator]^Preconditions.checkArgument ( assign.getType (  )  != Token.ASSIGN ) ;^181^^^^^179^187^Preconditions.checkArgument ( assign.getType (  )  == Token.ASSIGN ) ;^[CLASS] LocalVarMotion  [METHOD] forAssign [RETURN_TYPE] NodeIterators$LocalVarMotion   Node name Node assign Node expr Node block [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  assign  block  expr  lookAhead  name  nameNode  valueNode  var  
[BugLab_Variable_Misuse]^Preconditions.checkArgument ( nameNode.getType (  )  == Token.EXPR_RESULT ) ;^182^^^^^179^187^Preconditions.checkArgument ( expr.getType (  )  == Token.EXPR_RESULT ) ;^[CLASS] LocalVarMotion  [METHOD] forAssign [RETURN_TYPE] NodeIterators$LocalVarMotion   Node name Node assign Node expr Node block [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  assign  block  expr  lookAhead  name  nameNode  valueNode  var  
[BugLab_Wrong_Operator]^Preconditions.checkArgument ( expr.getType (  )  < Token.EXPR_RESULT ) ;^182^^^^^179^187^Preconditions.checkArgument ( expr.getType (  )  == Token.EXPR_RESULT ) ;^[CLASS] LocalVarMotion  [METHOD] forAssign [RETURN_TYPE] NodeIterators$LocalVarMotion   Node name Node assign Node expr Node block [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  assign  block  expr  lookAhead  name  nameNode  valueNode  var  
[BugLab_Variable_Misuse]^return new LocalVarMotion ( name, new FunctionlessLocalScope ( valueNode, expr, block )  ) ;^185^186^^^^179^187^return new LocalVarMotion ( name, new FunctionlessLocalScope ( assign, expr, block )  ) ;^[CLASS] LocalVarMotion  [METHOD] forAssign [RETURN_TYPE] NodeIterators$LocalVarMotion   Node name Node assign Node expr Node block [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  assign  block  expr  lookAhead  name  nameNode  valueNode  var  
[BugLab_Variable_Misuse]^return new LocalVarMotion ( name, new FunctionlessLocalScope ( assign, var, block )  ) ;^185^186^^^^179^187^return new LocalVarMotion ( name, new FunctionlessLocalScope ( assign, expr, block )  ) ;^[CLASS] LocalVarMotion  [METHOD] forAssign [RETURN_TYPE] NodeIterators$LocalVarMotion   Node name Node assign Node expr Node block [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  assign  block  expr  lookAhead  name  nameNode  valueNode  var  
[BugLab_Argument_Swapping]^return new LocalVarMotion ( block, new FunctionlessLocalScope ( assign, expr, name )  ) ;^185^186^^^^179^187^return new LocalVarMotion ( name, new FunctionlessLocalScope ( assign, expr, block )  ) ;^[CLASS] LocalVarMotion  [METHOD] forAssign [RETURN_TYPE] NodeIterators$LocalVarMotion   Node name Node assign Node expr Node block [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  assign  block  expr  lookAhead  name  nameNode  valueNode  var  
[BugLab_Argument_Swapping]^return new LocalVarMotion ( assign, new FunctionlessLocalScope ( name, expr, block )  ) ;^185^186^^^^179^187^return new LocalVarMotion ( name, new FunctionlessLocalScope ( assign, expr, block )  ) ;^[CLASS] LocalVarMotion  [METHOD] forAssign [RETURN_TYPE] NodeIterators$LocalVarMotion   Node name Node assign Node expr Node block [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  assign  block  expr  lookAhead  name  nameNode  valueNode  var  
[BugLab_Argument_Swapping]^return new LocalVarMotion ( name, new FunctionlessLocalScope ( expr, assign, block )  ) ;^185^186^^^^179^187^return new LocalVarMotion ( name, new FunctionlessLocalScope ( assign, expr, block )  ) ;^[CLASS] LocalVarMotion  [METHOD] forAssign [RETURN_TYPE] NodeIterators$LocalVarMotion   Node name Node assign Node expr Node block [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  assign  block  expr  lookAhead  name  nameNode  valueNode  var  
[BugLab_Variable_Misuse]^return new LocalVarMotion ( var, new FunctionlessLocalScope ( assign, expr, block )  ) ;^185^186^^^^179^187^return new LocalVarMotion ( name, new FunctionlessLocalScope ( assign, expr, block )  ) ;^[CLASS] LocalVarMotion  [METHOD] forAssign [RETURN_TYPE] NodeIterators$LocalVarMotion   Node name Node assign Node expr Node block [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  assign  block  expr  lookAhead  name  nameNode  valueNode  var  
[BugLab_Variable_Misuse]^return new LocalVarMotion ( name, new FunctionlessLocalScope ( var, expr, block )  ) ;^185^186^^^^179^187^return new LocalVarMotion ( name, new FunctionlessLocalScope ( assign, expr, block )  ) ;^[CLASS] LocalVarMotion  [METHOD] forAssign [RETURN_TYPE] NodeIterators$LocalVarMotion   Node name Node assign Node expr Node block [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  assign  block  expr  lookAhead  name  nameNode  valueNode  var  
[BugLab_Argument_Swapping]^return new LocalVarMotion ( expr, new FunctionlessLocalScope ( assign, name, block )  ) ;^185^186^^^^179^187^return new LocalVarMotion ( name, new FunctionlessLocalScope ( assign, expr, block )  ) ;^[CLASS] LocalVarMotion  [METHOD] forAssign [RETURN_TYPE] NodeIterators$LocalVarMotion   Node name Node assign Node expr Node block [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  assign  block  expr  lookAhead  name  nameNode  valueNode  var  
[BugLab_Argument_Swapping]^return new LocalVarMotion ( name, new FunctionlessLocalScope ( block, expr, assign )  ) ;^185^186^^^^179^187^return new LocalVarMotion ( name, new FunctionlessLocalScope ( assign, expr, block )  ) ;^[CLASS] LocalVarMotion  [METHOD] forAssign [RETURN_TYPE] NodeIterators$LocalVarMotion   Node name Node assign Node expr Node block [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  assign  block  expr  lookAhead  name  nameNode  valueNode  var  
[BugLab_Variable_Misuse]^name, new FunctionlessLocalScope ( var, expr, block )  ) ;^186^^^^^179^187^name, new FunctionlessLocalScope ( assign, expr, block )  ) ;^[CLASS] LocalVarMotion  [METHOD] forAssign [RETURN_TYPE] NodeIterators$LocalVarMotion   Node name Node assign Node expr Node block [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  assign  block  expr  lookAhead  name  nameNode  valueNode  var  
[BugLab_Variable_Misuse]^name, new FunctionlessLocalScope ( assign, var, block )  ) ;^186^^^^^179^187^name, new FunctionlessLocalScope ( assign, expr, block )  ) ;^[CLASS] LocalVarMotion  [METHOD] forAssign [RETURN_TYPE] NodeIterators$LocalVarMotion   Node name Node assign Node expr Node block [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  assign  block  expr  lookAhead  name  nameNode  valueNode  var  
[BugLab_Variable_Misuse]^name, new FunctionlessLocalScope ( assign, expr, valueNode )  ) ;^186^^^^^179^187^name, new FunctionlessLocalScope ( assign, expr, block )  ) ;^[CLASS] LocalVarMotion  [METHOD] forAssign [RETURN_TYPE] NodeIterators$LocalVarMotion   Node name Node assign Node expr Node block [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  assign  block  expr  lookAhead  name  nameNode  valueNode  var  
[BugLab_Argument_Swapping]^name, new FunctionlessLocalScope ( block, expr, assign )  ) ;^186^^^^^179^187^name, new FunctionlessLocalScope ( assign, expr, block )  ) ;^[CLASS] LocalVarMotion  [METHOD] forAssign [RETURN_TYPE] NodeIterators$LocalVarMotion   Node name Node assign Node expr Node block [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  assign  block  expr  lookAhead  name  nameNode  valueNode  var  
[BugLab_Argument_Swapping]^name, new FunctionlessLocalScope ( expr, assign, block )  ) ;^186^^^^^179^187^name, new FunctionlessLocalScope ( assign, expr, block )  ) ;^[CLASS] LocalVarMotion  [METHOD] forAssign [RETURN_TYPE] NodeIterators$LocalVarMotion   Node name Node assign Node expr Node block [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  assign  block  expr  lookAhead  name  nameNode  valueNode  var  
[BugLab_Variable_Misuse]^return nameNode != null;^205^^^^^204^206^return lookAhead != null;^[CLASS] LocalVarMotion  [METHOD] hasNext [RETURN_TYPE] boolean   [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  assign  block  expr  lookAhead  name  nameNode  valueNode  var  
[BugLab_Wrong_Operator]^return lookAhead == null;^205^^^^^204^206^return lookAhead != null;^[CLASS] LocalVarMotion  [METHOD] hasNext [RETURN_TYPE] boolean   [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  assign  block  expr  lookAhead  name  nameNode  valueNode  var  
[BugLab_Variable_Misuse]^Node next = var;^210^^^^^209^213^Node next = lookAhead;^[CLASS] LocalVarMotion  [METHOD] next [RETURN_TYPE] Node   [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  assign  block  expr  lookAhead  name  nameNode  next  valueNode  var  
[BugLab_Wrong_Literal]^advanceLookAhead ( true ) ;^211^^^^^209^213^advanceLookAhead ( false ) ;^[CLASS] LocalVarMotion  [METHOD] next [RETURN_TYPE] Node   [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  assign  block  expr  lookAhead  name  nameNode  next  valueNode  var  
[BugLab_Variable_Misuse]^return valueNode;^212^^^^^209^213^return next;^[CLASS] LocalVarMotion  [METHOD] next [RETURN_TYPE] Node   [VARIABLES] boolean  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  Node  assign  block  expr  lookAhead  name  nameNode  next  valueNode  var  
[BugLab_Variable_Misuse]^if  ( !isVarDeclaration )  {^221^^^^^206^236^if  ( !atStart )  {^[CLASS] LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var  
[BugLab_Variable_Misuse]^if  ( nextNode == null )  {^222^^^^^207^237^if  ( lookAhead == null )  {^[CLASS] LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var  
[BugLab_Wrong_Operator]^if  ( lookAhead != null )  {^222^^^^^207^237^if  ( lookAhead == null )  {^[CLASS] LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var  
[BugLab_Variable_Misuse]^if  ( var.getType (  )  == Token.NAME && varName.equals ( curNode.getString (  )  )  )  {^229^230^^^^214^244^if  ( curNode.getType (  )  == Token.NAME && varName.equals ( curNode.getString (  )  )  )  {^[CLASS] LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var  
[BugLab_Variable_Misuse]^if  ( curNode.getType (  )  == Token.3 && varName.equals ( curNode.getString (  )  )  )  {^229^230^^^^214^244^if  ( curNode.getType (  )  == Token.NAME && varName.equals ( curNode.getString (  )  )  )  {^[CLASS] LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var  
[BugLab_Argument_Swapping]^if  ( varName.getType (  )  == Token.NAME && curNode.equals ( curNode.getString (  )  )  )  {^229^230^^^^214^244^if  ( curNode.getType (  )  == Token.NAME && varName.equals ( curNode.getString (  )  )  )  {^[CLASS] LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var  
[BugLab_Wrong_Operator]^if  ( curNode.getType (  )  == Token.NAME || varName.equals ( curNode.getString (  )  )  )  {^229^230^^^^214^244^if  ( curNode.getType (  )  == Token.NAME && varName.equals ( curNode.getString (  )  )  )  {^[CLASS] LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var  
[BugLab_Wrong_Operator]^if  ( curNode.getType (  )  > Token.NAME && varName.equals ( curNode.getString (  )  )  )  {^229^230^^^^214^244^if  ( curNode.getType (  )  == Token.NAME && varName.equals ( curNode.getString (  )  )  )  {^[CLASS] LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var  
[BugLab_Variable_Misuse]^if  ( nextParent.getType (  )  == Token.NAME && varName.equals ( curNode.getString (  )  )  )  {^229^230^^^^214^244^if  ( curNode.getType (  )  == Token.NAME && varName.equals ( curNode.getString (  )  )  )  {^[CLASS] LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var  
[BugLab_Variable_Misuse]^varName.equals ( next.getString (  )  )  )  {^230^^^^^215^245^varName.equals ( curNode.getString (  )  )  )  {^[CLASS] LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var  
[BugLab_Variable_Misuse]^varName.equals ( var.getString (  )  )  )  {^230^^^^^215^245^varName.equals ( curNode.getString (  )  )  )  {^[CLASS] LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var  
[BugLab_Variable_Misuse]^if  ( next == null )  {^222^^^^^207^237^if  ( lookAhead == null )  {^[CLASS] LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var  
[BugLab_Wrong_Operator]^if  ( curNode.getType (  )  >= Token.NAME && varName.equals ( curNode.getString (  )  )  )  {^229^230^^^^214^244^if  ( curNode.getType (  )  == Token.NAME && varName.equals ( curNode.getString (  )  )  )  {^[CLASS] LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var  
[BugLab_Variable_Misuse]^varName.equals ( nextNode.getString (  )  )  )  {^230^^^^^215^245^varName.equals ( curNode.getString (  )  )  )  {^[CLASS] LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var  
[BugLab_Variable_Misuse]^int type = nameNode.getType (  ) ;^243^^^^^228^258^int type = nextNode.getType (  ) ;^[CLASS] LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var  
[BugLab_Variable_Misuse]^int type = valueNode.getType (  ) ;^243^^^^^228^258^int type = nextNode.getType (  ) ;^[CLASS] LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var  
[BugLab_Variable_Misuse]^if  ( isVarDeclaration )  {^245^^^^^230^260^if  ( valueHasSideEffects )  {^[CLASS] LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var  
[BugLab_Variable_Misuse]^if  ( type == Token.NAME && !varName.equals ( valueNode.getString (  )  )  )  {^249^^^^^234^264^if  ( type == Token.NAME && !varName.equals ( nextNode.getString (  )  )  )  {^[CLASS] LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var  
[BugLab_Wrong_Operator]^if  ( type == Token.NAME || !varName.equals ( nextNode.getString (  )  )  )  {^249^^^^^234^264^if  ( type == Token.NAME && !varName.equals ( nextNode.getString (  )  )  )  {^[CLASS] LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var  
[BugLab_Wrong_Operator]^if  ( type < Token.NAME && !varName.equals ( nextNode.getString (  )  )  )  {^249^^^^^234^264^if  ( type == Token.NAME && !varName.equals ( nextNode.getString (  )  )  )  {^[CLASS] LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var  
[BugLab_Wrong_Operator]^if  ( type != Token.NAME && !varName.equals ( nextNode.getString (  )  )  )  {^249^^^^^234^264^if  ( type == Token.NAME && !varName.equals ( nextNode.getString (  )  )  )  {^[CLASS] LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var  
[BugLab_Wrong_Operator]^if  ( type <= Token.NAME && !varName.equals ( nextNode.getString (  )  )  )  {^249^^^^^234^264^if  ( type == Token.NAME && !varName.equals ( nextNode.getString (  )  )  )  {^[CLASS] LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var  
[BugLab_Variable_Misuse]^if  ( nameNode == null )  {^251^^^^^236^266^if  ( nextParent == null )  {^[CLASS] LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var  
[BugLab_Wrong_Operator]^if  ( nextParent != null )  {^251^^^^^236^266^if  ( nextParent == null )  {^[CLASS] LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var  
[BugLab_Variable_Misuse]^if  ( !valueHasSideEffects && !isVarDeclaration )  {^258^^^^^251^261^if  ( !assignsName && !isVarDeclaration )  {^[CLASS] LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var  
[BugLab_Variable_Misuse]^if  ( !assignsName && !valueHasSideEffects )  {^258^^^^^251^261^if  ( !assignsName && !isVarDeclaration )  {^[CLASS] LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var  
[BugLab_Wrong_Operator]^if  ( !assignsName || !isVarDeclaration )  {^258^^^^^251^261^if  ( !assignsName && !isVarDeclaration )  {^[CLASS] LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var  
[BugLab_Wrong_Literal]^blocked = false;^259^^^^^251^261^blocked = true;^[CLASS] LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var  
[BugLab_Variable_Misuse]^boolean assignsName =  ( nameNode.getType (  )  == Token.ASSIGN && nextNode == nextParent.getFirstChild (  )  ) ;^254^255^^^^251^261^boolean assignsName =  ( nextParent.getType (  )  == Token.ASSIGN && nextNode == nextParent.getFirstChild (  )  ) ;^[CLASS] LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var  
[BugLab_Variable_Misuse]^boolean assignsName =  ( nextParent.getType (  )  == Token.ASSIGN && next == nextParent.getFirstChild (  )  ) ;^254^255^^^^251^261^boolean assignsName =  ( nextParent.getType (  )  == Token.ASSIGN && nextNode == nextParent.getFirstChild (  )  ) ;^[CLASS] LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var  
[BugLab_Argument_Swapping]^boolean assignsName =  ( nextNode.getType (  )  == Token.ASSIGN && nextParent == nextParent.getFirstChild (  )  ) ;^254^255^^^^251^261^boolean assignsName =  ( nextParent.getType (  )  == Token.ASSIGN && nextNode == nextParent.getFirstChild (  )  ) ;^[CLASS] LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var  
[BugLab_Wrong_Operator]^boolean assignsName =  ( nextParent.getType (  )  == Token.ASSIGN || nextNode == nextParent.getFirstChild (  )  ) ;^254^255^^^^251^261^boolean assignsName =  ( nextParent.getType (  )  == Token.ASSIGN && nextNode == nextParent.getFirstChild (  )  ) ;^[CLASS] LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var  
[BugLab_Wrong_Operator]^boolean assignsName =  ( nextParent.getType (  )  >= Token.ASSIGN && nextNode == nextParent.getFirstChild (  )  ) ;^254^255^^^^251^261^boolean assignsName =  ( nextParent.getType (  )  == Token.ASSIGN && nextNode == nextParent.getFirstChild (  )  ) ;^[CLASS] LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var  
[BugLab_Wrong_Operator]^boolean assignsName =  ( nextParent.getType (  )  == Token.ASSIGN && nextNode >= nextParent.getFirstChild (  )  ) ;^254^255^^^^251^261^boolean assignsName =  ( nextParent.getType (  )  == Token.ASSIGN && nextNode == nextParent.getFirstChild (  )  ) ;^[CLASS] LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var  
[BugLab_Variable_Misuse]^boolean isVarDeclaration =  ( nextNode.getType (  )  == Token.VAR ) ;^256^^^^^251^261^boolean isVarDeclaration =  ( nextParent.getType (  )  == Token.VAR ) ;^[CLASS] LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var  
[BugLab_Variable_Misuse]^boolean isVarDeclaration =  ( nextParent.getType (  )  == Token.null ) ;^256^^^^^251^261^boolean isVarDeclaration =  ( nextParent.getType (  )  == Token.VAR ) ;^[CLASS] LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var  
[BugLab_Wrong_Operator]^boolean isVarDeclaration =  ( nextParent.getType (  )  <= Token.VAR ) ;^256^^^^^251^261^boolean isVarDeclaration =  ( nextParent.getType (  )  == Token.VAR ) ;^[CLASS] LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var  
[BugLab_Variable_Misuse]^&& nextNode == var.getFirstChild (  )  ) ;^255^^^^^251^261^&& nextNode == nextParent.getFirstChild (  )  ) ;^[CLASS] LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var  
[BugLab_Wrong_Literal]^blocked = false;^252^^^^^237^267^blocked = true;^[CLASS] LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var  
[BugLab_Variable_Misuse]^if  ( !assignsName && !valueHasSideEffects )  {^258^^^^^243^273^if  ( !assignsName && !isVarDeclaration )  {^[CLASS] LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var  
[BugLab_Wrong_Operator]^if  ( !assignsName || !isVarDeclaration )  {^258^^^^^243^273^if  ( !assignsName && !isVarDeclaration )  {^[CLASS] LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var  
[BugLab_Wrong_Literal]^blocked = false;^259^^^^^244^274^blocked = true;^[CLASS] LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var  
[BugLab_Variable_Misuse]^if  ( isVarDeclaration )  {^263^^^^^248^278^if  ( blocked )  {^[CLASS] LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var  
[BugLab_Wrong_Literal]^boolean blocked = true;^250^^^^^235^265^boolean blocked = false;^[CLASS] LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var  
[BugLab_Variable_Misuse]^boolean assignsName =  ( next.getType (  )  == Token.ASSIGN && nextNode == nextParent.getFirstChild (  )  ) ;^254^255^^^^239^269^boolean assignsName =  ( nextParent.getType (  )  == Token.ASSIGN && nextNode == nextParent.getFirstChild (  )  ) ;^[CLASS] LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var  
[BugLab_Variable_Misuse]^boolean assignsName =  ( nextParent.getType (  )  == Token.ASSIGN && next == nextParent.getFirstChild (  )  ) ;^254^255^^^^239^269^boolean assignsName =  ( nextParent.getType (  )  == Token.ASSIGN && nextNode == nextParent.getFirstChild (  )  ) ;^[CLASS] LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var  
[BugLab_Wrong_Operator]^boolean assignsName =  ( nextParent.getType (  )  == Token.ASSIGN || nextNode == nextParent.getFirstChild (  )  ) ;^254^255^^^^239^269^boolean assignsName =  ( nextParent.getType (  )  == Token.ASSIGN && nextNode == nextParent.getFirstChild (  )  ) ;^[CLASS] LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var  
[BugLab_Wrong_Operator]^boolean assignsName =  ( nextParent.getType (  )  > Token.ASSIGN && nextNode == nextParent.getFirstChild (  )  ) ;^254^255^^^^239^269^boolean assignsName =  ( nextParent.getType (  )  == Token.ASSIGN && nextNode == nextParent.getFirstChild (  )  ) ;^[CLASS] LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var  
[BugLab_Wrong_Operator]^boolean assignsName =  ( nextParent.getType (  )  == Token.ASSIGN && nextNode != nextParent.getFirstChild (  )  ) ;^254^255^^^^239^269^boolean assignsName =  ( nextParent.getType (  )  == Token.ASSIGN && nextNode == nextParent.getFirstChild (  )  ) ;^[CLASS] LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var  
[BugLab_Variable_Misuse]^boolean isVarDeclaration =  ( nameNode.getType (  )  == Token.VAR ) ;^256^^^^^241^271^boolean isVarDeclaration =  ( nextParent.getType (  )  == Token.VAR ) ;^[CLASS] LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var  
[BugLab_Wrong_Operator]^boolean isVarDeclaration =  ( nextParent.getType (  )  != Token.VAR ) ;^256^^^^^241^271^boolean isVarDeclaration =  ( nextParent.getType (  )  == Token.VAR ) ;^[CLASS] LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var  
[BugLab_Variable_Misuse]^boolean assignsName =  ( nameNode.getType (  )  == Token.ASSIGN && nextNode == nextParent.getFirstChild (  )  ) ;^254^255^^^^239^269^boolean assignsName =  ( nextParent.getType (  )  == Token.ASSIGN && nextNode == nextParent.getFirstChild (  )  ) ;^[CLASS] LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var  
[BugLab_Variable_Misuse]^boolean isVarDeclaration =  ( nextNode.getType (  )  == Token.VAR ) ;^256^^^^^241^271^boolean isVarDeclaration =  ( nextParent.getType (  )  == Token.VAR ) ;^[CLASS] LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var  
[BugLab_Variable_Misuse]^boolean assignsName =  ( nextNode.getType (  )  == Token.ASSIGN && nextNode == nextParent.getFirstChild (  )  ) ;^254^255^^^^251^261^boolean assignsName =  ( nextParent.getType (  )  == Token.ASSIGN && nextNode == nextParent.getFirstChild (  )  ) ;^[CLASS] LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var  
[BugLab_Variable_Misuse]^boolean assignsName =  ( nextParent.getType (  )  == Token.ASSIGN && valueNode == nextParent.getFirstChild (  )  ) ;^254^255^^^^251^261^boolean assignsName =  ( nextParent.getType (  )  == Token.ASSIGN && nextNode == nextParent.getFirstChild (  )  ) ;^[CLASS] LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var  
[BugLab_Wrong_Operator]^boolean assignsName =  ( nextParent.getType (  )  != Token.ASSIGN && nextNode == nextParent.getFirstChild (  )  ) ;^254^255^^^^251^261^boolean assignsName =  ( nextParent.getType (  )  == Token.ASSIGN && nextNode == nextParent.getFirstChild (  )  ) ;^[CLASS] LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var  
[BugLab_Wrong_Operator]^boolean assignsName =  ( nextParent.getType (  )  == Token.ASSIGN && nextNode <= nextParent.getFirstChild (  )  ) ;^254^255^^^^251^261^boolean assignsName =  ( nextParent.getType (  )  == Token.ASSIGN && nextNode == nextParent.getFirstChild (  )  ) ;^[CLASS] LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var  
[BugLab_Wrong_Operator]^boolean isVarDeclaration =  ( nextParent.getType (  )  != Token.VAR ) ;^256^^^^^251^261^boolean isVarDeclaration =  ( nextParent.getType (  )  == Token.VAR ) ;^[CLASS] LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var  
[BugLab_Variable_Misuse]^boolean assignsName =  ( var.getType (  )  == Token.ASSIGN && nextNode == nextParent.getFirstChild (  )  ) ;^254^255^^^^251^261^boolean assignsName =  ( nextParent.getType (  )  == Token.ASSIGN && nextNode == nextParent.getFirstChild (  )  ) ;^[CLASS] LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var  
[BugLab_Variable_Misuse]^boolean isVarDeclaration =  ( var.getType (  )  == Token.VAR ) ;^256^^^^^251^261^boolean isVarDeclaration =  ( nextParent.getType (  )  == Token.VAR ) ;^[CLASS] LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var  
[BugLab_Variable_Misuse]^if  ( !valueHasSideEffects && !isVarDeclaration )  {^258^^^^^243^273^if  ( !assignsName && !isVarDeclaration )  {^[CLASS] LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var  
[BugLab_Variable_Misuse]^boolean assignsName =  ( var.getType (  )  == Token.ASSIGN && nextNode == nextParent.getFirstChild (  )  ) ;^254^255^^^^239^269^boolean assignsName =  ( nextParent.getType (  )  == Token.ASSIGN && nextNode == nextParent.getFirstChild (  )  ) ;^[CLASS] LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var  
[BugLab_Argument_Swapping]^boolean assignsName =  ( nextNode.getType (  )  == Token.ASSIGN && nextParent == nextParent.getFirstChild (  )  ) ;^254^255^^^^239^269^boolean assignsName =  ( nextParent.getType (  )  == Token.ASSIGN && nextNode == nextParent.getFirstChild (  )  ) ;^[CLASS] LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var  
[BugLab_Wrong_Operator]^boolean assignsName =  ( nextParent.getType (  )  != Token.ASSIGN && nextNode == nextParent.getFirstChild (  )  ) ;^254^255^^^^239^269^boolean assignsName =  ( nextParent.getType (  )  == Token.ASSIGN && nextNode == nextParent.getFirstChild (  )  ) ;^[CLASS] LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var  
[BugLab_Variable_Misuse]^boolean isVarDeclaration =  ( next.getType (  )  == Token.VAR ) ;^256^^^^^241^271^boolean isVarDeclaration =  ( nextParent.getType (  )  == Token.VAR ) ;^[CLASS] LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var  
[BugLab_Wrong_Operator]^boolean isVarDeclaration =  ( nextParent.getType (  )  >= Token.VAR ) ;^256^^^^^241^271^boolean isVarDeclaration =  ( nextParent.getType (  )  == Token.VAR ) ;^[CLASS] LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var  
[BugLab_Variable_Misuse]^if  ( type == Token.NAME && !varName.equals ( nextParent.getString (  )  )  )  {^249^^^^^234^264^if  ( type == Token.NAME && !varName.equals ( nextNode.getString (  )  )  )  {^[CLASS] LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var  
[BugLab_Variable_Misuse]^if  ( type == Token.NAME && !varName.equals ( nameNode.getString (  )  )  )  {^249^^^^^234^264^if  ( type == Token.NAME && !varName.equals ( nextNode.getString (  )  )  )  {^[CLASS] LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var  
[BugLab_Variable_Misuse]^&& nextNode == nextNode.getFirstChild (  )  ) ;^255^^^^^240^270^&& nextNode == nextParent.getFirstChild (  )  ) ;^[CLASS] LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var  
[BugLab_Variable_Misuse]^if  ( type == Token.NAME && !varName.equals ( var.getString (  )  )  )  {^249^^^^^234^264^if  ( type == Token.NAME && !varName.equals ( nextNode.getString (  )  )  )  {^[CLASS] LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var  
[BugLab_Wrong_Operator]^if  ( type >= Token.NAME && !varName.equals ( nextNode.getString (  )  )  )  {^249^^^^^234^264^if  ( type == Token.NAME && !varName.equals ( nextNode.getString (  )  )  )  {^[CLASS] LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var  
[BugLab_Variable_Misuse]^boolean assignsName =  ( nextParent.getType (  )  == Token.ASSIGN && var == nextParent.getFirstChild (  )  ) ;^254^255^^^^251^261^boolean assignsName =  ( nextParent.getType (  )  == Token.ASSIGN && nextNode == nextParent.getFirstChild (  )  ) ;^[CLASS] LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var  
[BugLab_Wrong_Operator]^boolean assignsName =  ( nextParent.getType (  )  == Token.ASSIGN && nextNode < nextParent.getFirstChild (  )  ) ;^254^255^^^^251^261^boolean assignsName =  ( nextParent.getType (  )  == Token.ASSIGN && nextNode == nextParent.getFirstChild (  )  ) ;^[CLASS] LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var  
[BugLab_Variable_Misuse]^boolean isVarDeclaration =  ( nextParent.getType (  )  == Token.this ) ;^256^^^^^251^261^boolean isVarDeclaration =  ( nextParent.getType (  )  == Token.VAR ) ;^[CLASS] LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var  
[BugLab_Variable_Misuse]^boolean assignsName =  ( valueNode.getType (  )  == Token.ASSIGN && nextNode == nextParent.getFirstChild (  )  ) ;^254^255^^^^251^261^boolean assignsName =  ( nextParent.getType (  )  == Token.ASSIGN && nextNode == nextParent.getFirstChild (  )  ) ;^[CLASS] LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var  
[BugLab_Variable_Misuse]^&& nextNode == valueNode.getFirstChild (  )  ) ;^255^^^^^251^261^&& nextNode == nextParent.getFirstChild (  )  ) ;^[CLASS] LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var  
[BugLab_Variable_Misuse]^if  ( valueHasSideEffects )  {^263^^^^^248^278^if  ( blocked )  {^[CLASS] LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var  
[BugLab_Variable_Misuse]^&& nextNode == var.getFirstChild (  )  ) ;^255^^^^^240^270^&& nextNode == nextParent.getFirstChild (  )  ) ;^[CLASS] LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var  
[BugLab_Variable_Misuse]^boolean isVarDeclaration =  ( var.getType (  )  == Token.VAR ) ;^256^^^^^241^271^boolean isVarDeclaration =  ( nextParent.getType (  )  == Token.VAR ) ;^[CLASS] LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var  
[BugLab_Variable_Misuse]^if  ( next == null )  {^251^^^^^236^266^if  ( nextParent == null )  {^[CLASS] LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var  
[BugLab_Variable_Misuse]^boolean assignsName =  ( next.getType (  )  == Token.ASSIGN && nextNode == nextParent.getFirstChild (  )  ) ;^254^255^^^^251^261^boolean assignsName =  ( nextParent.getType (  )  == Token.ASSIGN && nextNode == nextParent.getFirstChild (  )  ) ;^[CLASS] LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var  
[BugLab_Variable_Misuse]^boolean assignsName =  ( nextParent.getType (  )  == Token.ASSIGN && nameNode == nextParent.getFirstChild (  )  ) ;^254^255^^^^251^261^boolean assignsName =  ( nextParent.getType (  )  == Token.ASSIGN && nextNode == nextParent.getFirstChild (  )  ) ;^[CLASS] LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var  
[BugLab_Wrong_Operator]^boolean assignsName =  ( nextParent.getType (  )  == Token.ASSIGN && nextNode != nextParent.getFirstChild (  )  ) ;^254^255^^^^251^261^boolean assignsName =  ( nextParent.getType (  )  == Token.ASSIGN && nextNode == nextParent.getFirstChild (  )  ) ;^[CLASS] LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var  
[BugLab_Wrong_Operator]^boolean isVarDeclaration =  ( nextParent.getType (  )  < Token.VAR ) ;^256^^^^^251^261^boolean isVarDeclaration =  ( nextParent.getType (  )  == Token.VAR ) ;^[CLASS] LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var  
[BugLab_Variable_Misuse]^&& nextNode == next.getFirstChild (  )  ) ;^255^^^^^251^261^&& nextNode == nextParent.getFirstChild (  )  ) ;^[CLASS] LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var  
[BugLab_Variable_Misuse]^boolean isVarDeclaration =  ( nameNode.getType (  )  == Token.VAR ) ;^256^^^^^251^261^boolean isVarDeclaration =  ( nextParent.getType (  )  == Token.VAR ) ;^[CLASS] LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var  
[BugLab_Variable_Misuse]^boolean assignsName =  ( nextParent.getType (  )  == Token.ASSIGN && var == nextParent.getFirstChild (  )  ) ;^254^255^^^^239^269^boolean assignsName =  ( nextParent.getType (  )  == Token.ASSIGN && nextNode == nextParent.getFirstChild (  )  ) ;^[CLASS] LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var  
[BugLab_Wrong_Operator]^boolean assignsName =  ( nextParent.getType (  )  <= Token.ASSIGN && nextNode == nextParent.getFirstChild (  )  ) ;^254^255^^^^239^269^boolean assignsName =  ( nextParent.getType (  )  == Token.ASSIGN && nextNode == nextParent.getFirstChild (  )  ) ;^[CLASS] LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var  
[BugLab_Wrong_Operator]^boolean assignsName =  ( nextParent.getType (  )  == Token.ASSIGN && nextNode >= nextParent.getFirstChild (  )  ) ;^254^255^^^^239^269^boolean assignsName =  ( nextParent.getType (  )  == Token.ASSIGN && nextNode == nextParent.getFirstChild (  )  ) ;^[CLASS] LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var  
[BugLab_Variable_Misuse]^boolean assignsName =  ( valueNode.getType (  )  == Token.ASSIGN && nextNode == nextParent.getFirstChild (  )  ) ;^254^255^^^^239^269^boolean assignsName =  ( nextParent.getType (  )  == Token.ASSIGN && nextNode == nextParent.getFirstChild (  )  ) ;^[CLASS] LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var  
[BugLab_Variable_Misuse]^&& nextNode == nameNode.getFirstChild (  )  ) ;^255^^^^^240^270^&& nextNode == nextParent.getFirstChild (  )  ) ;^[CLASS] LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var  
[BugLab_Variable_Misuse]^if  ( NodeUtil.nodeTypeMayHaveSideEffects ( nextNode )  && type != Token.NAME || type == Token.NAME && var.getType (  )  == Token.CATCH )  {^276^277^^^^261^291^if  ( NodeUtil.nodeTypeMayHaveSideEffects ( nextNode )  && type != Token.NAME || type == Token.NAME && nextParent.getType (  )  == Token.CATCH )  {^[CLASS] LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var  
[BugLab_Argument_Swapping]^if  ( NodeUtil.nodeTypeMayHaveSideEffects ( nextParent )  && type != Token.NAME || type == Token.NAME && nextNode.getType (  )  == Token.CATCH )  {^276^277^^^^261^291^if  ( NodeUtil.nodeTypeMayHaveSideEffects ( nextNode )  && type != Token.NAME || type == Token.NAME && nextParent.getType (  )  == Token.CATCH )  {^[CLASS] LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var  
[BugLab_Argument_Swapping]^if  ( NodeUtil.nodeTypeMayHaveSideEffects ( type )  && nextNode != Token.NAME || type == Token.NAME && nextParent.getType (  )  == Token.CATCH )  {^276^277^^^^261^291^if  ( NodeUtil.nodeTypeMayHaveSideEffects ( nextNode )  && type != Token.NAME || type == Token.NAME && nextParent.getType (  )  == Token.CATCH )  {^[CLASS] LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var  
[BugLab_Argument_Swapping]^if  ( NodeUtil.nodeTypeMayHaveSideEffects ( nextNode )  && nextParent != Token.NAME || type == Token.NAME && type.getType (  )  == Token.CATCH )  {^276^277^^^^261^291^if  ( NodeUtil.nodeTypeMayHaveSideEffects ( nextNode )  && type != Token.NAME || type == Token.NAME && nextParent.getType (  )  == Token.CATCH )  {^[CLASS] LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var  
[BugLab_Wrong_Operator]^if  ( NodeUtil.nodeTypeMayHaveSideEffects ( nextNode )  && type != Token.NAME && type == Token.NAME && nextParent.getType (  )  == Token.CATCH )  {^276^277^^^^261^291^if  ( NodeUtil.nodeTypeMayHaveSideEffects ( nextNode )  && type != Token.NAME || type == Token.NAME && nextParent.getType (  )  == Token.CATCH )  {^[CLASS] LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var  
[BugLab_Wrong_Operator]^if  ( NodeUtil.nodeTypeMayHaveSideEffects ( nextNode )  || type != Token.NAME || type == Token.NAME && nextParent.getType (  )  == Token.CATCH )  {^276^277^^^^261^291^if  ( NodeUtil.nodeTypeMayHaveSideEffects ( nextNode )  && type != Token.NAME || type == Token.NAME && nextParent.getType (  )  == Token.CATCH )  {^[CLASS] LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var  
[BugLab_Wrong_Operator]^if  ( NodeUtil.nodeTypeMayHaveSideEffects ( nextNode )  && type == Token.NAME || type == Token.NAME && nextParent.getType (  )  == Token.CATCH )  {^276^277^^^^261^291^if  ( NodeUtil.nodeTypeMayHaveSideEffects ( nextNode )  && type != Token.NAME || type == Token.NAME && nextParent.getType (  )  == Token.CATCH )  {^[CLASS] LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var  
[BugLab_Wrong_Operator]^if  ( NodeUtil.nodeTypeMayHaveSideEffects ( nextNode )  && type != Token.NAME || type != Token.NAME && nextParent.getType (  )  == Token.CATCH )  {^276^277^^^^261^291^if  ( NodeUtil.nodeTypeMayHaveSideEffects ( nextNode )  && type != Token.NAME || type == Token.NAME && nextParent.getType (  )  == Token.CATCH )  {^[CLASS] LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var  
[BugLab_Variable_Misuse]^if  ( NodeUtil.nodeTypeMayHaveSideEffects ( valueNode )  && type != Token.NAME || type == Token.NAME && nextParent.getType (  )  == Token.CATCH )  {^276^277^^^^261^291^if  ( NodeUtil.nodeTypeMayHaveSideEffects ( nextNode )  && type != Token.NAME || type == Token.NAME && nextParent.getType (  )  == Token.CATCH )  {^[CLASS] LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var  
[BugLab_Variable_Misuse]^|| type == Token.NAME && nameNode.getType (  )  == Token.CATCH )  {^277^^^^^262^292^|| type == Token.NAME && nextParent.getType (  )  == Token.CATCH )  {^[CLASS] LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var  
[BugLab_Variable_Misuse]^lookAhead = var;^282^^^^^267^297^lookAhead = nextNode;^[CLASS] LocalVarMotion  [METHOD] advanceLookAhead [RETURN_TYPE] void   boolean atStart [VARIABLES] boolean  assignsName  atStart  blocked  isVarDeclaration  valueHasSideEffects  String  varName  FunctionlessLocalScope  iterator  int  type  Node  assign  block  curNode  expr  lookAhead  name  nameNode  next  nextNode  nextParent  valueNode  var  
