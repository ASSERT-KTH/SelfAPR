[buglab_swap_variables]^gc.process ( root, externs ) ;^58^^^^^55^64^gc.process ( externs, root ) ;^[CLASS] AnalyzeNameReferences PropagateReferences NameInfo  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  referenced  Node  externs  root  JSModule  deepestCommonModuleRef  NameReferenceGraphConstruction  gc  FixedPointGraphTraversal  t  NameReferenceGraph  graph  JSModuleGraph  moduleGraph  
[buglab_swap_variables]^gc.process (  root ) ;^58^^^^^55^64^gc.process ( externs, root ) ;^[CLASS] AnalyzeNameReferences PropagateReferences NameInfo  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  referenced  Node  externs  root  JSModule  deepestCommonModuleRef  NameReferenceGraphConstruction  gc  FixedPointGraphTraversal  t  NameReferenceGraph  graph  JSModuleGraph  moduleGraph  
[buglab_swap_variables]^gc.process ( externs ) ;^58^^^^^55^64^gc.process ( externs, root ) ;^[CLASS] AnalyzeNameReferences PropagateReferences NameInfo  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  referenced  Node  externs  root  JSModule  deepestCommonModuleRef  NameReferenceGraphConstruction  gc  FixedPointGraphTraversal  t  NameReferenceGraph  graph  JSModuleGraph  moduleGraph  
[buglab_swap_variables]^if  ( edge != null && moduleGraph.dependsOn ( startModule, startModule.getModule (  )  )  )  {^76^77^^^^71^84^if  ( startModule != null && moduleGraph.dependsOn ( startModule, edge.getModule (  )  )  )  {^[CLASS] AnalyzeNameReferences PropagateReferences NameInfo  [METHOD] traverseEdge [RETURN_TYPE] boolean   Name start Reference edge Name dest [VARIABLES] AbstractCompiler  compiler  boolean  referenced  NameInfo  destInfo  startInfo  Reference  edge  JSModule  deepestCommonModuleRef  startModule  NameReferenceGraph  graph  JSModuleGraph  moduleGraph  Name  dest  start  
[buglab_swap_variables]^if  ( startModule != null && moduleGraph.dependsOn (  edge.getModule (  )  )  )  {^76^77^^^^71^84^if  ( startModule != null && moduleGraph.dependsOn ( startModule, edge.getModule (  )  )  )  {^[CLASS] AnalyzeNameReferences PropagateReferences NameInfo  [METHOD] traverseEdge [RETURN_TYPE] boolean   Name start Reference edge Name dest [VARIABLES] AbstractCompiler  compiler  boolean  referenced  NameInfo  destInfo  startInfo  Reference  edge  JSModule  deepestCommonModuleRef  startModule  NameReferenceGraph  graph  JSModuleGraph  moduleGraph  Name  dest  start  
[buglab_swap_variables]^if  ( startModule != null && moduleGraph.dependsOn ( startModule.getModule (  )  )  )  {^76^77^^^^71^84^if  ( startModule != null && moduleGraph.dependsOn ( startModule, edge.getModule (  )  )  )  {^[CLASS] AnalyzeNameReferences PropagateReferences NameInfo  [METHOD] traverseEdge [RETURN_TYPE] boolean   Name start Reference edge Name dest [VARIABLES] AbstractCompiler  compiler  boolean  referenced  NameInfo  destInfo  startInfo  Reference  edge  JSModule  deepestCommonModuleRef  startModule  NameReferenceGraph  graph  JSModuleGraph  moduleGraph  Name  dest  start  
[buglab_swap_variables]^return edge.markReference ( destInfo.getModule (  )  ) ;^80^^^^^71^84^return destInfo.markReference ( edge.getModule (  )  ) ;^[CLASS] AnalyzeNameReferences PropagateReferences NameInfo  [METHOD] traverseEdge [RETURN_TYPE] boolean   Name start Reference edge Name dest [VARIABLES] AbstractCompiler  compiler  boolean  referenced  NameInfo  destInfo  startInfo  Reference  edge  JSModule  deepestCommonModuleRef  startModule  NameReferenceGraph  graph  JSModuleGraph  moduleGraph  Name  dest  start  
[buglab_swap_variables]^return startModule.markReference ( destInfo ) ;^78^^^^^71^84^return destInfo.markReference ( startModule ) ;^[CLASS] AnalyzeNameReferences PropagateReferences NameInfo  [METHOD] traverseEdge [RETURN_TYPE] boolean   Name start Reference edge Name dest [VARIABLES] AbstractCompiler  compiler  boolean  referenced  NameInfo  destInfo  startInfo  Reference  edge  JSModule  deepestCommonModuleRef  startModule  NameReferenceGraph  graph  JSModuleGraph  moduleGraph  Name  dest  start  
[buglab_swap_variables]^moduleGraph.dependsOn ( edge, startModule.getModule (  )  )  )  {^77^^^^^71^84^moduleGraph.dependsOn ( startModule, edge.getModule (  )  )  )  {^[CLASS] AnalyzeNameReferences PropagateReferences NameInfo  [METHOD] traverseEdge [RETURN_TYPE] boolean   Name start Reference edge Name dest [VARIABLES] AbstractCompiler  compiler  boolean  referenced  NameInfo  destInfo  startInfo  Reference  edge  JSModule  deepestCommonModuleRef  startModule  NameReferenceGraph  graph  JSModuleGraph  moduleGraph  Name  dest  start  
[buglab_swap_variables]^moduleGraph.dependsOn (  edge.getModule (  )  )  )  {^77^^^^^71^84^moduleGraph.dependsOn ( startModule, edge.getModule (  )  )  )  {^[CLASS] AnalyzeNameReferences PropagateReferences NameInfo  [METHOD] traverseEdge [RETURN_TYPE] boolean   Name start Reference edge Name dest [VARIABLES] AbstractCompiler  compiler  boolean  referenced  NameInfo  destInfo  startInfo  Reference  edge  JSModule  deepestCommonModuleRef  startModule  NameReferenceGraph  graph  JSModuleGraph  moduleGraph  Name  dest  start  
[buglab_swap_variables]^moduleGraph.dependsOn ( startModule.getModule (  )  )  )  {^77^^^^^71^84^moduleGraph.dependsOn ( startModule, edge.getModule (  )  )  )  {^[CLASS] AnalyzeNameReferences PropagateReferences NameInfo  [METHOD] traverseEdge [RETURN_TYPE] boolean   Name start Reference edge Name dest [VARIABLES] AbstractCompiler  compiler  boolean  referenced  NameInfo  destInfo  startInfo  Reference  edge  JSModule  deepestCommonModuleRef  startModule  NameReferenceGraph  graph  JSModuleGraph  moduleGraph  Name  dest  start  
[buglab_swap_variables]^if  ( startModule != null && edge.dependsOn ( startModule, moduleGraph.getModule (  )  )  )  {^76^77^^^^71^84^if  ( startModule != null && moduleGraph.dependsOn ( startModule, edge.getModule (  )  )  )  {^[CLASS] AnalyzeNameReferences PropagateReferences NameInfo  [METHOD] traverseEdge [RETURN_TYPE] boolean   Name start Reference edge Name dest [VARIABLES] AbstractCompiler  compiler  boolean  referenced  NameInfo  destInfo  startInfo  Reference  edge  JSModule  deepestCommonModuleRef  startModule  NameReferenceGraph  graph  JSModuleGraph  moduleGraph  Name  dest  start  
[buglab_swap_variables]^if  ( moduleGraph != null && startModule.dependsOn ( startModule, edge.getModule (  )  )  )  {^76^77^^^^71^84^if  ( startModule != null && moduleGraph.dependsOn ( startModule, edge.getModule (  )  )  )  {^[CLASS] AnalyzeNameReferences PropagateReferences NameInfo  [METHOD] traverseEdge [RETURN_TYPE] boolean   Name start Reference edge Name dest [VARIABLES] AbstractCompiler  compiler  boolean  referenced  NameInfo  destInfo  startInfo  Reference  edge  JSModule  deepestCommonModuleRef  startModule  NameReferenceGraph  graph  JSModuleGraph  moduleGraph  Name  dest  start  
[buglab_swap_variables]^GraphNode<Name, Reference> name = symbol.getNode ( graph ) ;^88^^^^^87^95^GraphNode<Name, Reference> name = graph.getNode ( symbol ) ;^[CLASS] AnalyzeNameReferences PropagateReferences NameInfo  [METHOD] getInfo [RETURN_TYPE] AnalyzeNameReferences$NameInfo   Name symbol [VARIABLES] AbstractCompiler  compiler  boolean  referenced  NameInfo  info  JSModule  deepestCommonModuleRef  startModule  GraphNode  name  NameReferenceGraph  graph  JSModuleGraph  moduleGraph  Name  symbol  
[buglab_swap_variables]^if  ( module != null )  {^127^^^^^120^143^if  ( moduleGraph != null )  {^[CLASS] AnalyzeNameReferences PropagateReferences NameInfo  [METHOD] markReference [RETURN_TYPE] boolean   JSModule module [VARIABLES] JSModule  deepestCommonModuleRef  module  originalDeepestCommon  startModule  AbstractCompiler  compiler  boolean  hasChanged  referenced  NameReferenceGraph  graph  JSModuleGraph  moduleGraph  
[buglab_swap_variables]^deepestCommonModuleRef = moduleGraphGraph.getDeepestCommonDependencyInclusive ( deepestCommonModuleRef, module ) ;^133^134^135^^^120^143^deepestCommonModuleRef = moduleGraph.getDeepestCommonDependencyInclusive ( deepestCommonModuleRef, module ) ;^[CLASS] AnalyzeNameReferences PropagateReferences NameInfo  [METHOD] markReference [RETURN_TYPE] boolean   JSModule module [VARIABLES] JSModule  deepestCommonModuleRef  module  originalDeepestCommon  startModule  AbstractCompiler  compiler  boolean  hasChanged  referenced  NameReferenceGraph  graph  JSModuleGraph  moduleGraph  
[buglab_swap_variables]^deepestCommonModuleRef = moduleGraph.getDeepestCommonDependencyInclusive ( deepestCommonModuleRef ) ;^133^134^135^^^120^143^deepestCommonModuleRef = moduleGraph.getDeepestCommonDependencyInclusive ( deepestCommonModuleRef, module ) ;^[CLASS] AnalyzeNameReferences PropagateReferences NameInfo  [METHOD] markReference [RETURN_TYPE] boolean   JSModule module [VARIABLES] JSModule  deepestCommonModuleRef  module  originalDeepestCommon  startModule  AbstractCompiler  compiler  boolean  hasChanged  referenced  NameReferenceGraph  graph  JSModuleGraph  moduleGraph  
[buglab_swap_variables]^deepestCommonModuleRef = deepestCommonModuleRef.getDeepestCommonDependencyInclusive ( moduleGraph, module ) ;^133^134^135^^^120^143^deepestCommonModuleRef = moduleGraph.getDeepestCommonDependencyInclusive ( deepestCommonModuleRef, module ) ;^[CLASS] AnalyzeNameReferences PropagateReferences NameInfo  [METHOD] markReference [RETURN_TYPE] boolean   JSModule module [VARIABLES] JSModule  deepestCommonModuleRef  module  originalDeepestCommon  startModule  AbstractCompiler  compiler  boolean  hasChanged  referenced  NameReferenceGraph  graph  JSModuleGraph  moduleGraph  
[buglab_swap_variables]^deepestCommonModuleRef = deepestCommonModuleRefGraph.getDeepestCommonDependencyInclusive ( module, module ) ;^133^134^135^^^120^143^deepestCommonModuleRef = moduleGraph.getDeepestCommonDependencyInclusive ( deepestCommonModuleRef, module ) ;^[CLASS] AnalyzeNameReferences PropagateReferences NameInfo  [METHOD] markReference [RETURN_TYPE] boolean   JSModule module [VARIABLES] JSModule  deepestCommonModuleRef  module  originalDeepestCommon  startModule  AbstractCompiler  compiler  boolean  hasChanged  referenced  NameReferenceGraph  graph  JSModuleGraph  moduleGraph  
[buglab_swap_variables]^deepestCommonModuleRef = moduleGraph.getDeepestCommonDependencyInclusive (  module ) ;^133^134^135^^^120^143^deepestCommonModuleRef = moduleGraph.getDeepestCommonDependencyInclusive ( deepestCommonModuleRef, module ) ;^[CLASS] AnalyzeNameReferences PropagateReferences NameInfo  [METHOD] markReference [RETURN_TYPE] boolean   JSModule module [VARIABLES] JSModule  deepestCommonModuleRef  module  originalDeepestCommon  startModule  AbstractCompiler  compiler  boolean  hasChanged  referenced  NameReferenceGraph  graph  JSModuleGraph  moduleGraph  
[buglab_swap_variables]^moduleGraph.getDeepestCommonDependencyInclusive ( module, deepestCommonModuleRef ) ;^134^135^^^^120^143^moduleGraph.getDeepestCommonDependencyInclusive ( deepestCommonModuleRef, module ) ;^[CLASS] AnalyzeNameReferences PropagateReferences NameInfo  [METHOD] markReference [RETURN_TYPE] boolean   JSModule module [VARIABLES] JSModule  deepestCommonModuleRef  module  originalDeepestCommon  startModule  AbstractCompiler  compiler  boolean  hasChanged  referenced  NameReferenceGraph  graph  JSModuleGraph  moduleGraph  
[buglab_swap_variables]^moduleGraph.getDeepestCommonDependencyInclusive ( deepestCommonModuleRef ) ;^134^135^^^^120^143^moduleGraph.getDeepestCommonDependencyInclusive ( deepestCommonModuleRef, module ) ;^[CLASS] AnalyzeNameReferences PropagateReferences NameInfo  [METHOD] markReference [RETURN_TYPE] boolean   JSModule module [VARIABLES] JSModule  deepestCommonModuleRef  module  originalDeepestCommon  startModule  AbstractCompiler  compiler  boolean  hasChanged  referenced  NameReferenceGraph  graph  JSModuleGraph  moduleGraph  
[buglab_swap_variables]^moduleGraph.getDeepestCommonDependencyInclusive (  module ) ;^134^135^^^^120^143^moduleGraph.getDeepestCommonDependencyInclusive ( deepestCommonModuleRef, module ) ;^[CLASS] AnalyzeNameReferences PropagateReferences NameInfo  [METHOD] markReference [RETURN_TYPE] boolean   JSModule module [VARIABLES] JSModule  deepestCommonModuleRef  module  originalDeepestCommon  startModule  AbstractCompiler  compiler  boolean  hasChanged  referenced  NameReferenceGraph  graph  JSModuleGraph  moduleGraph  
[buglab_swap_variables]^if  ( deepestCommonModuleRef != originalDeepestCommon )  {^138^^^^^120^143^if  ( originalDeepestCommon != deepestCommonModuleRef )  {^[CLASS] AnalyzeNameReferences PropagateReferences NameInfo  [METHOD] markReference [RETURN_TYPE] boolean   JSModule module [VARIABLES] JSModule  deepestCommonModuleRef  module  originalDeepestCommon  startModule  AbstractCompiler  compiler  boolean  hasChanged  referenced  NameReferenceGraph  graph  JSModuleGraph  moduleGraph  
[buglab_swap_variables]^deepestCommonModuleRef = module.getDeepestCommonDependencyInclusive ( deepestCommonModuleRef, moduleGraph ) ;^133^134^135^^^120^143^deepestCommonModuleRef = moduleGraph.getDeepestCommonDependencyInclusive ( deepestCommonModuleRef, module ) ;^[CLASS] AnalyzeNameReferences PropagateReferences NameInfo  [METHOD] markReference [RETURN_TYPE] boolean   JSModule module [VARIABLES] JSModule  deepestCommonModuleRef  module  originalDeepestCommon  startModule  AbstractCompiler  compiler  boolean  hasChanged  referenced  NameReferenceGraph  graph  JSModuleGraph  moduleGraph  
[buglab_swap_variables]^if  ( startModule != null && moduleGraph.dependsOn (  edge.getModule (  )  )  )  {^76^77^^^^71^84^if  ( startModule != null && moduleGraph.dependsOn ( startModule, edge.getModule (  )  )  )  {^[CLASS] PropagateReferences  [METHOD] traverseEdge [RETURN_TYPE] boolean   Name start Reference edge Name dest [VARIABLES] NameInfo  destInfo  startInfo  boolean  Reference  edge  JSModule  startModule  Name  dest  start  
[buglab_swap_variables]^if  ( startModule != null && edge.dependsOn ( startModule, moduleGraph.getModule (  )  )  )  {^76^77^^^^71^84^if  ( startModule != null && moduleGraph.dependsOn ( startModule, edge.getModule (  )  )  )  {^[CLASS] PropagateReferences  [METHOD] traverseEdge [RETURN_TYPE] boolean   Name start Reference edge Name dest [VARIABLES] NameInfo  destInfo  startInfo  boolean  Reference  edge  JSModule  startModule  Name  dest  start  
[buglab_swap_variables]^if  ( startModule != null && moduleGraph.dependsOn ( startModule.getModule (  )  )  )  {^76^77^^^^71^84^if  ( startModule != null && moduleGraph.dependsOn ( startModule, edge.getModule (  )  )  )  {^[CLASS] PropagateReferences  [METHOD] traverseEdge [RETURN_TYPE] boolean   Name start Reference edge Name dest [VARIABLES] NameInfo  destInfo  startInfo  boolean  Reference  edge  JSModule  startModule  Name  dest  start  
[buglab_swap_variables]^return edge.markReference ( destInfo.getModule (  )  ) ;^80^^^^^71^84^return destInfo.markReference ( edge.getModule (  )  ) ;^[CLASS] PropagateReferences  [METHOD] traverseEdge [RETURN_TYPE] boolean   Name start Reference edge Name dest [VARIABLES] NameInfo  destInfo  startInfo  boolean  Reference  edge  JSModule  startModule  Name  dest  start  
[buglab_swap_variables]^return startModule.markReference ( destInfo ) ;^78^^^^^71^84^return destInfo.markReference ( startModule ) ;^[CLASS] PropagateReferences  [METHOD] traverseEdge [RETURN_TYPE] boolean   Name start Reference edge Name dest [VARIABLES] NameInfo  destInfo  startInfo  boolean  Reference  edge  JSModule  startModule  Name  dest  start  
[buglab_swap_variables]^moduleGraph.dependsOn (  edge.getModule (  )  )  )  {^77^^^^^71^84^moduleGraph.dependsOn ( startModule, edge.getModule (  )  )  )  {^[CLASS] PropagateReferences  [METHOD] traverseEdge [RETURN_TYPE] boolean   Name start Reference edge Name dest [VARIABLES] NameInfo  destInfo  startInfo  boolean  Reference  edge  JSModule  startModule  Name  dest  start  
[buglab_swap_variables]^moduleGraph.dependsOn ( edge, startModule.getModule (  )  )  )  {^77^^^^^71^84^moduleGraph.dependsOn ( startModule, edge.getModule (  )  )  )  {^[CLASS] PropagateReferences  [METHOD] traverseEdge [RETURN_TYPE] boolean   Name start Reference edge Name dest [VARIABLES] NameInfo  destInfo  startInfo  boolean  Reference  edge  JSModule  startModule  Name  dest  start  
[buglab_swap_variables]^moduleGraph.dependsOn ( startModule.getModule (  )  )  )  {^77^^^^^71^84^moduleGraph.dependsOn ( startModule, edge.getModule (  )  )  )  {^[CLASS] PropagateReferences  [METHOD] traverseEdge [RETURN_TYPE] boolean   Name start Reference edge Name dest [VARIABLES] NameInfo  destInfo  startInfo  boolean  Reference  edge  JSModule  startModule  Name  dest  start  
[buglab_swap_variables]^if  ( moduleGraph != null && startModule.dependsOn ( startModule, edge.getModule (  )  )  )  {^76^77^^^^71^84^if  ( startModule != null && moduleGraph.dependsOn ( startModule, edge.getModule (  )  )  )  {^[CLASS] PropagateReferences  [METHOD] traverseEdge [RETURN_TYPE] boolean   Name start Reference edge Name dest [VARIABLES] NameInfo  destInfo  startInfo  boolean  Reference  edge  JSModule  startModule  Name  dest  start  
[buglab_swap_variables]^if  ( moduleGraphGraph != null )  {^127^^^^^120^143^if  ( moduleGraph != null )  {^[CLASS] NameInfo  [METHOD] markReference [RETURN_TYPE] boolean   JSModule module [VARIABLES] JSModule  deepestCommonModuleRef  module  originalDeepestCommon  boolean  hasChanged  referenced  
[buglab_swap_variables]^if  ( module != null )  {^127^^^^^120^143^if  ( moduleGraph != null )  {^[CLASS] NameInfo  [METHOD] markReference [RETURN_TYPE] boolean   JSModule module [VARIABLES] JSModule  deepestCommonModuleRef  module  originalDeepestCommon  boolean  hasChanged  referenced  
[buglab_swap_variables]^deepestCommonModuleRef = deepestCommonModuleRefGraph.getDeepestCommonDependencyInclusive ( module, module ) ;^133^134^135^^^120^143^deepestCommonModuleRef = moduleGraph.getDeepestCommonDependencyInclusive ( deepestCommonModuleRef, module ) ;^[CLASS] NameInfo  [METHOD] markReference [RETURN_TYPE] boolean   JSModule module [VARIABLES] JSModule  deepestCommonModuleRef  module  originalDeepestCommon  boolean  hasChanged  referenced  
[buglab_swap_variables]^deepestCommonModuleRef = moduleGraph.getDeepestCommonDependencyInclusive ( deepestCommonModuleRef ) ;^133^134^135^^^120^143^deepestCommonModuleRef = moduleGraph.getDeepestCommonDependencyInclusive ( deepestCommonModuleRef, module ) ;^[CLASS] NameInfo  [METHOD] markReference [RETURN_TYPE] boolean   JSModule module [VARIABLES] JSModule  deepestCommonModuleRef  module  originalDeepestCommon  boolean  hasChanged  referenced  
[buglab_swap_variables]^deepestCommonModuleRef = deepestCommonModuleRef.getDeepestCommonDependencyInclusive ( moduleGraph, module ) ;^133^134^135^^^120^143^deepestCommonModuleRef = moduleGraph.getDeepestCommonDependencyInclusive ( deepestCommonModuleRef, module ) ;^[CLASS] NameInfo  [METHOD] markReference [RETURN_TYPE] boolean   JSModule module [VARIABLES] JSModule  deepestCommonModuleRef  module  originalDeepestCommon  boolean  hasChanged  referenced  
[buglab_swap_variables]^deepestCommonModuleRef = moduleGraph.getDeepestCommonDependencyInclusive (  module ) ;^133^134^135^^^120^143^deepestCommonModuleRef = moduleGraph.getDeepestCommonDependencyInclusive ( deepestCommonModuleRef, module ) ;^[CLASS] NameInfo  [METHOD] markReference [RETURN_TYPE] boolean   JSModule module [VARIABLES] JSModule  deepestCommonModuleRef  module  originalDeepestCommon  boolean  hasChanged  referenced  
[buglab_swap_variables]^moduleGraph.getDeepestCommonDependencyInclusive ( deepestCommonModuleRef ) ;^134^135^^^^120^143^moduleGraph.getDeepestCommonDependencyInclusive ( deepestCommonModuleRef, module ) ;^[CLASS] NameInfo  [METHOD] markReference [RETURN_TYPE] boolean   JSModule module [VARIABLES] JSModule  deepestCommonModuleRef  module  originalDeepestCommon  boolean  hasChanged  referenced  
[buglab_swap_variables]^moduleGraph.getDeepestCommonDependencyInclusive ( module, deepestCommonModuleRef ) ;^134^135^^^^120^143^moduleGraph.getDeepestCommonDependencyInclusive ( deepestCommonModuleRef, module ) ;^[CLASS] NameInfo  [METHOD] markReference [RETURN_TYPE] boolean   JSModule module [VARIABLES] JSModule  deepestCommonModuleRef  module  originalDeepestCommon  boolean  hasChanged  referenced  
[buglab_swap_variables]^moduleGraph.getDeepestCommonDependencyInclusive (  module ) ;^134^135^^^^120^143^moduleGraph.getDeepestCommonDependencyInclusive ( deepestCommonModuleRef, module ) ;^[CLASS] NameInfo  [METHOD] markReference [RETURN_TYPE] boolean   JSModule module [VARIABLES] JSModule  deepestCommonModuleRef  module  originalDeepestCommon  boolean  hasChanged  referenced  
[buglab_swap_variables]^if  ( deepestCommonModuleRef != originalDeepestCommon )  {^138^^^^^120^143^if  ( originalDeepestCommon != deepestCommonModuleRef )  {^[CLASS] NameInfo  [METHOD] markReference [RETURN_TYPE] boolean   JSModule module [VARIABLES] JSModule  deepestCommonModuleRef  module  originalDeepestCommon  boolean  hasChanged  referenced  
[buglab_swap_variables]^deepestCommonModuleRef = moduleGraphGraph.getDeepestCommonDependencyInclusive ( deepestCommonModuleRef, module ) ;^133^134^135^^^120^143^deepestCommonModuleRef = moduleGraph.getDeepestCommonDependencyInclusive ( deepestCommonModuleRef, module ) ;^[CLASS] NameInfo  [METHOD] markReference [RETURN_TYPE] boolean   JSModule module [VARIABLES] JSModule  deepestCommonModuleRef  module  originalDeepestCommon  boolean  hasChanged  referenced  
