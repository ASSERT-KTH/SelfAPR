[BugLab_Wrong_Literal]^private boolean referenced = true;^98^^^^^93^103^private boolean referenced = false;^[CLASS] AnalyzeNameReferences PropagateReferences NameInfo   [VARIABLES] 
[BugLab_Argument_Swapping]^gc.process ( root, externs ) ;^58^^^^^55^64^gc.process ( externs, root ) ;^[CLASS] AnalyzeNameReferences PropagateReferences NameInfo  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  referenced  Node  externs  root  JSModule  deepestCommonModuleRef  NameReferenceGraphConstruction  gc  FixedPointGraphTraversal  t  NameReferenceGraph  graph  JSModuleGraph  moduleGraph  
[BugLab_Variable_Misuse]^NameInfo destInfo = getInfo ( start ) ;^72^^^^^71^84^NameInfo startInfo = getInfo ( start ) ;^[CLASS] AnalyzeNameReferences PropagateReferences NameInfo  [METHOD] traverseEdge [RETURN_TYPE] boolean   Name start Reference edge Name dest [VARIABLES] AbstractCompiler  compiler  boolean  referenced  NameInfo  destInfo  startInfo  Reference  edge  JSModule  deepestCommonModuleRef  startModule  NameReferenceGraph  graph  JSModuleGraph  moduleGraph  Name  dest  start  
[BugLab_Variable_Misuse]^NameInfo startInfo = getInfo ( dest ) ;^73^^^^^71^84^NameInfo destInfo = getInfo ( dest ) ;^[CLASS] AnalyzeNameReferences PropagateReferences NameInfo  [METHOD] traverseEdge [RETURN_TYPE] boolean   Name start Reference edge Name dest [VARIABLES] AbstractCompiler  compiler  boolean  referenced  NameInfo  destInfo  startInfo  Reference  edge  JSModule  deepestCommonModuleRef  startModule  NameReferenceGraph  graph  JSModuleGraph  moduleGraph  Name  dest  start  
[BugLab_Variable_Misuse]^if  ( destInfo.isReferenced (  )  )  {^74^^^^^71^84^if  ( startInfo.isReferenced (  )  )  {^[CLASS] AnalyzeNameReferences PropagateReferences NameInfo  [METHOD] traverseEdge [RETURN_TYPE] boolean   Name start Reference edge Name dest [VARIABLES] AbstractCompiler  compiler  boolean  referenced  NameInfo  destInfo  startInfo  Reference  edge  JSModule  deepestCommonModuleRef  startModule  NameReferenceGraph  graph  JSModuleGraph  moduleGraph  Name  dest  start  
[BugLab_Variable_Misuse]^if  ( deepestCommonModuleRef != null && moduleGraph.dependsOn ( startModule, edge.getModule (  )  )  )  {^76^77^^^^71^84^if  ( startModule != null && moduleGraph.dependsOn ( startModule, edge.getModule (  )  )  )  {^[CLASS] AnalyzeNameReferences PropagateReferences NameInfo  [METHOD] traverseEdge [RETURN_TYPE] boolean   Name start Reference edge Name dest [VARIABLES] AbstractCompiler  compiler  boolean  referenced  NameInfo  destInfo  startInfo  Reference  edge  JSModule  deepestCommonModuleRef  startModule  NameReferenceGraph  graph  JSModuleGraph  moduleGraph  Name  dest  start  
[BugLab_Argument_Swapping]^if  ( edge != null && moduleGraph.dependsOn ( startModule, startModule.getModule (  )  )  )  {^76^77^^^^71^84^if  ( startModule != null && moduleGraph.dependsOn ( startModule, edge.getModule (  )  )  )  {^[CLASS] AnalyzeNameReferences PropagateReferences NameInfo  [METHOD] traverseEdge [RETURN_TYPE] boolean   Name start Reference edge Name dest [VARIABLES] AbstractCompiler  compiler  boolean  referenced  NameInfo  destInfo  startInfo  Reference  edge  JSModule  deepestCommonModuleRef  startModule  NameReferenceGraph  graph  JSModuleGraph  moduleGraph  Name  dest  start  
[BugLab_Argument_Swapping]^if  ( startModule != null && edge.dependsOn ( startModule, moduleGraph.getModule (  )  )  )  {^76^77^^^^71^84^if  ( startModule != null && moduleGraph.dependsOn ( startModule, edge.getModule (  )  )  )  {^[CLASS] AnalyzeNameReferences PropagateReferences NameInfo  [METHOD] traverseEdge [RETURN_TYPE] boolean   Name start Reference edge Name dest [VARIABLES] AbstractCompiler  compiler  boolean  referenced  NameInfo  destInfo  startInfo  Reference  edge  JSModule  deepestCommonModuleRef  startModule  NameReferenceGraph  graph  JSModuleGraph  moduleGraph  Name  dest  start  
[BugLab_Wrong_Operator]^if  ( startModule != null || moduleGraph.dependsOn ( startModule, edge.getModule (  )  )  )  {^76^77^^^^71^84^if  ( startModule != null && moduleGraph.dependsOn ( startModule, edge.getModule (  )  )  )  {^[CLASS] AnalyzeNameReferences PropagateReferences NameInfo  [METHOD] traverseEdge [RETURN_TYPE] boolean   Name start Reference edge Name dest [VARIABLES] AbstractCompiler  compiler  boolean  referenced  NameInfo  destInfo  startInfo  Reference  edge  JSModule  deepestCommonModuleRef  startModule  NameReferenceGraph  graph  JSModuleGraph  moduleGraph  Name  dest  start  
[BugLab_Wrong_Operator]^if  ( startModule == null && moduleGraph.dependsOn ( startModule, edge.getModule (  )  )  )  {^76^77^^^^71^84^if  ( startModule != null && moduleGraph.dependsOn ( startModule, edge.getModule (  )  )  )  {^[CLASS] AnalyzeNameReferences PropagateReferences NameInfo  [METHOD] traverseEdge [RETURN_TYPE] boolean   Name start Reference edge Name dest [VARIABLES] AbstractCompiler  compiler  boolean  referenced  NameInfo  destInfo  startInfo  Reference  edge  JSModule  deepestCommonModuleRef  startModule  NameReferenceGraph  graph  JSModuleGraph  moduleGraph  Name  dest  start  
[BugLab_Variable_Misuse]^return startInfo.markReference ( edge.getModule (  )  ) ;^80^^^^^71^84^return destInfo.markReference ( edge.getModule (  )  ) ;^[CLASS] AnalyzeNameReferences PropagateReferences NameInfo  [METHOD] traverseEdge [RETURN_TYPE] boolean   Name start Reference edge Name dest [VARIABLES] AbstractCompiler  compiler  boolean  referenced  NameInfo  destInfo  startInfo  Reference  edge  JSModule  deepestCommonModuleRef  startModule  NameReferenceGraph  graph  JSModuleGraph  moduleGraph  Name  dest  start  
[BugLab_Argument_Swapping]^return edge.markReference ( destInfo.getModule (  )  ) ;^80^^^^^71^84^return destInfo.markReference ( edge.getModule (  )  ) ;^[CLASS] AnalyzeNameReferences PropagateReferences NameInfo  [METHOD] traverseEdge [RETURN_TYPE] boolean   Name start Reference edge Name dest [VARIABLES] AbstractCompiler  compiler  boolean  referenced  NameInfo  destInfo  startInfo  Reference  edge  JSModule  deepestCommonModuleRef  startModule  NameReferenceGraph  graph  JSModuleGraph  moduleGraph  Name  dest  start  
[BugLab_Variable_Misuse]^return startInfo.markReference ( startModule ) ;^78^^^^^71^84^return destInfo.markReference ( startModule ) ;^[CLASS] AnalyzeNameReferences PropagateReferences NameInfo  [METHOD] traverseEdge [RETURN_TYPE] boolean   Name start Reference edge Name dest [VARIABLES] AbstractCompiler  compiler  boolean  referenced  NameInfo  destInfo  startInfo  Reference  edge  JSModule  deepestCommonModuleRef  startModule  NameReferenceGraph  graph  JSModuleGraph  moduleGraph  Name  dest  start  
[BugLab_Variable_Misuse]^return destInfo.markReference ( deepestCommonModuleRef ) ;^78^^^^^71^84^return destInfo.markReference ( startModule ) ;^[CLASS] AnalyzeNameReferences PropagateReferences NameInfo  [METHOD] traverseEdge [RETURN_TYPE] boolean   Name start Reference edge Name dest [VARIABLES] AbstractCompiler  compiler  boolean  referenced  NameInfo  destInfo  startInfo  Reference  edge  JSModule  deepestCommonModuleRef  startModule  NameReferenceGraph  graph  JSModuleGraph  moduleGraph  Name  dest  start  
[BugLab_Argument_Swapping]^return startModule.markReference ( destInfo ) ;^78^^^^^71^84^return destInfo.markReference ( startModule ) ;^[CLASS] AnalyzeNameReferences PropagateReferences NameInfo  [METHOD] traverseEdge [RETURN_TYPE] boolean   Name start Reference edge Name dest [VARIABLES] AbstractCompiler  compiler  boolean  referenced  NameInfo  destInfo  startInfo  Reference  edge  JSModule  deepestCommonModuleRef  startModule  NameReferenceGraph  graph  JSModuleGraph  moduleGraph  Name  dest  start  
[BugLab_Variable_Misuse]^JSModule startModule = destInfo.getDeepestCommonModuleRef (  ) ;^75^^^^^71^84^JSModule startModule = startInfo.getDeepestCommonModuleRef (  ) ;^[CLASS] AnalyzeNameReferences PropagateReferences NameInfo  [METHOD] traverseEdge [RETURN_TYPE] boolean   Name start Reference edge Name dest [VARIABLES] AbstractCompiler  compiler  boolean  referenced  NameInfo  destInfo  startInfo  Reference  edge  JSModule  deepestCommonModuleRef  startModule  NameReferenceGraph  graph  JSModuleGraph  moduleGraph  Name  dest  start  
[BugLab_Variable_Misuse]^moduleGraph.dependsOn ( deepestCommonModuleRef, edge.getModule (  )  )  )  {^77^^^^^71^84^moduleGraph.dependsOn ( startModule, edge.getModule (  )  )  )  {^[CLASS] AnalyzeNameReferences PropagateReferences NameInfo  [METHOD] traverseEdge [RETURN_TYPE] boolean   Name start Reference edge Name dest [VARIABLES] AbstractCompiler  compiler  boolean  referenced  NameInfo  destInfo  startInfo  Reference  edge  JSModule  deepestCommonModuleRef  startModule  NameReferenceGraph  graph  JSModuleGraph  moduleGraph  Name  dest  start  
[BugLab_Argument_Swapping]^moduleGraph.dependsOn ( edge, startModule.getModule (  )  )  )  {^77^^^^^71^84^moduleGraph.dependsOn ( startModule, edge.getModule (  )  )  )  {^[CLASS] AnalyzeNameReferences PropagateReferences NameInfo  [METHOD] traverseEdge [RETURN_TYPE] boolean   Name start Reference edge Name dest [VARIABLES] AbstractCompiler  compiler  boolean  referenced  NameInfo  destInfo  startInfo  Reference  edge  JSModule  deepestCommonModuleRef  startModule  NameReferenceGraph  graph  JSModuleGraph  moduleGraph  Name  dest  start  
[BugLab_Wrong_Literal]^return true;^83^^^^^71^84^return false;^[CLASS] AnalyzeNameReferences PropagateReferences NameInfo  [METHOD] traverseEdge [RETURN_TYPE] boolean   Name start Reference edge Name dest [VARIABLES] AbstractCompiler  compiler  boolean  referenced  NameInfo  destInfo  startInfo  Reference  edge  JSModule  deepestCommonModuleRef  startModule  NameReferenceGraph  graph  JSModuleGraph  moduleGraph  Name  dest  start  
[BugLab_Argument_Swapping]^GraphNode<Name, Reference> name = symbol.getNode ( graph ) ;^88^^^^^87^95^GraphNode<Name, Reference> name = graph.getNode ( symbol ) ;^[CLASS] AnalyzeNameReferences PropagateReferences NameInfo  [METHOD] getInfo [RETURN_TYPE] AnalyzeNameReferences$NameInfo   Name symbol [VARIABLES] AbstractCompiler  compiler  boolean  referenced  NameInfo  info  JSModule  deepestCommonModuleRef  startModule  GraphNode  name  NameReferenceGraph  graph  JSModuleGraph  moduleGraph  Name  symbol  
[BugLab_Wrong_Operator]^if  ( info != null )  {^90^^^^^87^95^if  ( info == null )  {^[CLASS] AnalyzeNameReferences PropagateReferences NameInfo  [METHOD] getInfo [RETURN_TYPE] AnalyzeNameReferences$NameInfo   Name symbol [VARIABLES] AbstractCompiler  compiler  boolean  referenced  NameInfo  info  JSModule  deepestCommonModuleRef  startModule  GraphNode  name  NameReferenceGraph  graph  JSModuleGraph  moduleGraph  Name  symbol  
[BugLab_Variable_Misuse]^return startModule;^111^^^^^110^112^return deepestCommonModuleRef;^[CLASS] AnalyzeNameReferences PropagateReferences NameInfo  [METHOD] getDeepestCommonModuleRef [RETURN_TYPE] JSModule   [VARIABLES] JSModule  deepestCommonModuleRef  startModule  AbstractCompiler  compiler  boolean  referenced  NameReferenceGraph  graph  JSModuleGraph  moduleGraph  
[BugLab_Wrong_Literal]^boolean hasChanged = true;^121^^^^^120^143^boolean hasChanged = false;^[CLASS] AnalyzeNameReferences PropagateReferences NameInfo  [METHOD] markReference [RETURN_TYPE] boolean   JSModule module [VARIABLES] JSModule  deepestCommonModuleRef  module  originalDeepestCommon  startModule  AbstractCompiler  compiler  boolean  hasChanged  referenced  NameReferenceGraph  graph  JSModuleGraph  moduleGraph  
[BugLab_Variable_Misuse]^if  ( !hasChanged )  {^122^^^^^120^143^if  ( !referenced )  {^[CLASS] AnalyzeNameReferences PropagateReferences NameInfo  [METHOD] markReference [RETURN_TYPE] boolean   JSModule module [VARIABLES] JSModule  deepestCommonModuleRef  module  originalDeepestCommon  startModule  AbstractCompiler  compiler  boolean  hasChanged  referenced  NameReferenceGraph  graph  JSModuleGraph  moduleGraph  
[BugLab_Wrong_Literal]^referenced = false;^123^^^^^120^143^referenced = true;^[CLASS] AnalyzeNameReferences PropagateReferences NameInfo  [METHOD] markReference [RETURN_TYPE] boolean   JSModule module [VARIABLES] JSModule  deepestCommonModuleRef  module  originalDeepestCommon  startModule  AbstractCompiler  compiler  boolean  hasChanged  referenced  NameReferenceGraph  graph  JSModuleGraph  moduleGraph  
[BugLab_Wrong_Literal]^hasChanged = false;^124^^^^^120^143^hasChanged = true;^[CLASS] AnalyzeNameReferences PropagateReferences NameInfo  [METHOD] markReference [RETURN_TYPE] boolean   JSModule module [VARIABLES] JSModule  deepestCommonModuleRef  module  originalDeepestCommon  startModule  AbstractCompiler  compiler  boolean  hasChanged  referenced  NameReferenceGraph  graph  JSModuleGraph  moduleGraph  
[BugLab_Variable_Misuse]^if  ( startModuleGraph != null )  {^127^^^^^120^143^if  ( moduleGraph != null )  {^[CLASS] AnalyzeNameReferences PropagateReferences NameInfo  [METHOD] markReference [RETURN_TYPE] boolean   JSModule module [VARIABLES] JSModule  deepestCommonModuleRef  module  originalDeepestCommon  startModule  AbstractCompiler  compiler  boolean  hasChanged  referenced  NameReferenceGraph  graph  JSModuleGraph  moduleGraph  
[BugLab_Argument_Swapping]^if  ( module != null )  {^127^^^^^120^143^if  ( moduleGraph != null )  {^[CLASS] AnalyzeNameReferences PropagateReferences NameInfo  [METHOD] markReference [RETURN_TYPE] boolean   JSModule module [VARIABLES] JSModule  deepestCommonModuleRef  module  originalDeepestCommon  startModule  AbstractCompiler  compiler  boolean  hasChanged  referenced  NameReferenceGraph  graph  JSModuleGraph  moduleGraph  
[BugLab_Wrong_Operator]^if  ( moduleGraph == null )  {^127^^^^^120^143^if  ( moduleGraph != null )  {^[CLASS] AnalyzeNameReferences PropagateReferences NameInfo  [METHOD] markReference [RETURN_TYPE] boolean   JSModule module [VARIABLES] JSModule  deepestCommonModuleRef  module  originalDeepestCommon  startModule  AbstractCompiler  compiler  boolean  hasChanged  referenced  NameReferenceGraph  graph  JSModuleGraph  moduleGraph  
[BugLab_Variable_Misuse]^if  ( startModule == null )  {^130^^^^^120^143^if  ( deepestCommonModuleRef == null )  {^[CLASS] AnalyzeNameReferences PropagateReferences NameInfo  [METHOD] markReference [RETURN_TYPE] boolean   JSModule module [VARIABLES] JSModule  deepestCommonModuleRef  module  originalDeepestCommon  startModule  AbstractCompiler  compiler  boolean  hasChanged  referenced  NameReferenceGraph  graph  JSModuleGraph  moduleGraph  
[BugLab_Wrong_Operator]^if  ( deepestCommonModuleRef != null )  {^130^^^^^120^143^if  ( deepestCommonModuleRef == null )  {^[CLASS] AnalyzeNameReferences PropagateReferences NameInfo  [METHOD] markReference [RETURN_TYPE] boolean   JSModule module [VARIABLES] JSModule  deepestCommonModuleRef  module  originalDeepestCommon  startModule  AbstractCompiler  compiler  boolean  hasChanged  referenced  NameReferenceGraph  graph  JSModuleGraph  moduleGraph  
[BugLab_Variable_Misuse]^deepestCommonModuleRef = startModuleGraph.getDeepestCommonDependencyInclusive ( deepestCommonModuleRef, module ) ;^133^134^135^^^120^143^deepestCommonModuleRef = moduleGraph.getDeepestCommonDependencyInclusive ( deepestCommonModuleRef, module ) ;^[CLASS] AnalyzeNameReferences PropagateReferences NameInfo  [METHOD] markReference [RETURN_TYPE] boolean   JSModule module [VARIABLES] JSModule  deepestCommonModuleRef  module  originalDeepestCommon  startModule  AbstractCompiler  compiler  boolean  hasChanged  referenced  NameReferenceGraph  graph  JSModuleGraph  moduleGraph  
[BugLab_Variable_Misuse]^deepestCommonModuleRef = moduleGraph.getDeepestCommonDependencyInclusive ( startModule, module ) ;^133^134^135^^^120^143^deepestCommonModuleRef = moduleGraph.getDeepestCommonDependencyInclusive ( deepestCommonModuleRef, module ) ;^[CLASS] AnalyzeNameReferences PropagateReferences NameInfo  [METHOD] markReference [RETURN_TYPE] boolean   JSModule module [VARIABLES] JSModule  deepestCommonModuleRef  module  originalDeepestCommon  startModule  AbstractCompiler  compiler  boolean  hasChanged  referenced  NameReferenceGraph  graph  JSModuleGraph  moduleGraph  
[BugLab_Argument_Swapping]^deepestCommonModuleRef = deepestCommonModuleRefGraph.getDeepestCommonDependencyInclusive ( module, module ) ;^133^134^135^^^120^143^deepestCommonModuleRef = moduleGraph.getDeepestCommonDependencyInclusive ( deepestCommonModuleRef, module ) ;^[CLASS] AnalyzeNameReferences PropagateReferences NameInfo  [METHOD] markReference [RETURN_TYPE] boolean   JSModule module [VARIABLES] JSModule  deepestCommonModuleRef  module  originalDeepestCommon  startModule  AbstractCompiler  compiler  boolean  hasChanged  referenced  NameReferenceGraph  graph  JSModuleGraph  moduleGraph  
[BugLab_Argument_Swapping]^deepestCommonModuleRef = module.getDeepestCommonDependencyInclusive ( deepestCommonModuleRef, moduleGraph ) ;^133^134^135^^^120^143^deepestCommonModuleRef = moduleGraph.getDeepestCommonDependencyInclusive ( deepestCommonModuleRef, module ) ;^[CLASS] AnalyzeNameReferences PropagateReferences NameInfo  [METHOD] markReference [RETURN_TYPE] boolean   JSModule module [VARIABLES] JSModule  deepestCommonModuleRef  module  originalDeepestCommon  startModule  AbstractCompiler  compiler  boolean  hasChanged  referenced  NameReferenceGraph  graph  JSModuleGraph  moduleGraph  
[BugLab_Argument_Swapping]^deepestCommonModuleRef = deepestCommonModuleRef.getDeepestCommonDependencyInclusive ( moduleGraph, module ) ;^133^134^135^^^120^143^deepestCommonModuleRef = moduleGraph.getDeepestCommonDependencyInclusive ( deepestCommonModuleRef, module ) ;^[CLASS] AnalyzeNameReferences PropagateReferences NameInfo  [METHOD] markReference [RETURN_TYPE] boolean   JSModule module [VARIABLES] JSModule  deepestCommonModuleRef  module  originalDeepestCommon  startModule  AbstractCompiler  compiler  boolean  hasChanged  referenced  NameReferenceGraph  graph  JSModuleGraph  moduleGraph  
[BugLab_Variable_Misuse]^moduleGraph.getDeepestCommonDependencyInclusive ( deepestCommonModuleRef, startModule ) ;^134^135^^^^120^143^moduleGraph.getDeepestCommonDependencyInclusive ( deepestCommonModuleRef, module ) ;^[CLASS] AnalyzeNameReferences PropagateReferences NameInfo  [METHOD] markReference [RETURN_TYPE] boolean   JSModule module [VARIABLES] JSModule  deepestCommonModuleRef  module  originalDeepestCommon  startModule  AbstractCompiler  compiler  boolean  hasChanged  referenced  NameReferenceGraph  graph  JSModuleGraph  moduleGraph  
[BugLab_Variable_Misuse]^moduleGraph.getDeepestCommonDependencyInclusive ( startModule, module ) ;^134^135^^^^120^143^moduleGraph.getDeepestCommonDependencyInclusive ( deepestCommonModuleRef, module ) ;^[CLASS] AnalyzeNameReferences PropagateReferences NameInfo  [METHOD] markReference [RETURN_TYPE] boolean   JSModule module [VARIABLES] JSModule  deepestCommonModuleRef  module  originalDeepestCommon  startModule  AbstractCompiler  compiler  boolean  hasChanged  referenced  NameReferenceGraph  graph  JSModuleGraph  moduleGraph  
[BugLab_Variable_Misuse]^deepestCommonModuleRef = startModule;^131^^^^^120^143^deepestCommonModuleRef = module;^[CLASS] AnalyzeNameReferences PropagateReferences NameInfo  [METHOD] markReference [RETURN_TYPE] boolean   JSModule module [VARIABLES] JSModule  deepestCommonModuleRef  module  originalDeepestCommon  startModule  AbstractCompiler  compiler  boolean  hasChanged  referenced  NameReferenceGraph  graph  JSModuleGraph  moduleGraph  
[BugLab_Variable_Misuse]^if  ( startModule != deepestCommonModuleRef )  {^138^^^^^120^143^if  ( originalDeepestCommon != deepestCommonModuleRef )  {^[CLASS] AnalyzeNameReferences PropagateReferences NameInfo  [METHOD] markReference [RETURN_TYPE] boolean   JSModule module [VARIABLES] JSModule  deepestCommonModuleRef  module  originalDeepestCommon  startModule  AbstractCompiler  compiler  boolean  hasChanged  referenced  NameReferenceGraph  graph  JSModuleGraph  moduleGraph  
[BugLab_Variable_Misuse]^if  ( originalDeepestCommon != startModule )  {^138^^^^^120^143^if  ( originalDeepestCommon != deepestCommonModuleRef )  {^[CLASS] AnalyzeNameReferences PropagateReferences NameInfo  [METHOD] markReference [RETURN_TYPE] boolean   JSModule module [VARIABLES] JSModule  deepestCommonModuleRef  module  originalDeepestCommon  startModule  AbstractCompiler  compiler  boolean  hasChanged  referenced  NameReferenceGraph  graph  JSModuleGraph  moduleGraph  
[BugLab_Argument_Swapping]^if  ( deepestCommonModuleRef != originalDeepestCommon )  {^138^^^^^120^143^if  ( originalDeepestCommon != deepestCommonModuleRef )  {^[CLASS] AnalyzeNameReferences PropagateReferences NameInfo  [METHOD] markReference [RETURN_TYPE] boolean   JSModule module [VARIABLES] JSModule  deepestCommonModuleRef  module  originalDeepestCommon  startModule  AbstractCompiler  compiler  boolean  hasChanged  referenced  NameReferenceGraph  graph  JSModuleGraph  moduleGraph  
[BugLab_Wrong_Operator]^if  ( originalDeepestCommon == deepestCommonModuleRef )  {^138^^^^^120^143^if  ( originalDeepestCommon != deepestCommonModuleRef )  {^[CLASS] AnalyzeNameReferences PropagateReferences NameInfo  [METHOD] markReference [RETURN_TYPE] boolean   JSModule module [VARIABLES] JSModule  deepestCommonModuleRef  module  originalDeepestCommon  startModule  AbstractCompiler  compiler  boolean  hasChanged  referenced  NameReferenceGraph  graph  JSModuleGraph  moduleGraph  
[BugLab_Wrong_Literal]^hasChanged = false;^139^^^^^120^143^hasChanged = true;^[CLASS] AnalyzeNameReferences PropagateReferences NameInfo  [METHOD] markReference [RETURN_TYPE] boolean   JSModule module [VARIABLES] JSModule  deepestCommonModuleRef  module  originalDeepestCommon  startModule  AbstractCompiler  compiler  boolean  hasChanged  referenced  NameReferenceGraph  graph  JSModuleGraph  moduleGraph  
[BugLab_Variable_Misuse]^JSModule originalDeepestCommon = startModule;^128^^^^^120^143^JSModule originalDeepestCommon = deepestCommonModuleRef;^[CLASS] AnalyzeNameReferences PropagateReferences NameInfo  [METHOD] markReference [RETURN_TYPE] boolean   JSModule module [VARIABLES] JSModule  deepestCommonModuleRef  module  originalDeepestCommon  startModule  AbstractCompiler  compiler  boolean  hasChanged  referenced  NameReferenceGraph  graph  JSModuleGraph  moduleGraph  
[BugLab_Argument_Swapping]^moduleGraph.getDeepestCommonDependencyInclusive ( module, deepestCommonModuleRef ) ;^134^135^^^^120^143^moduleGraph.getDeepestCommonDependencyInclusive ( deepestCommonModuleRef, module ) ;^[CLASS] AnalyzeNameReferences PropagateReferences NameInfo  [METHOD] markReference [RETURN_TYPE] boolean   JSModule module [VARIABLES] JSModule  deepestCommonModuleRef  module  originalDeepestCommon  startModule  AbstractCompiler  compiler  boolean  hasChanged  referenced  NameReferenceGraph  graph  JSModuleGraph  moduleGraph  
[BugLab_Argument_Swapping]^deepestCommonModuleRef = moduleGraphGraph.getDeepestCommonDependencyInclusive ( deepestCommonModuleRef, module ) ;^133^134^135^^^120^143^deepestCommonModuleRef = moduleGraph.getDeepestCommonDependencyInclusive ( deepestCommonModuleRef, module ) ;^[CLASS] AnalyzeNameReferences PropagateReferences NameInfo  [METHOD] markReference [RETURN_TYPE] boolean   JSModule module [VARIABLES] JSModule  deepestCommonModuleRef  module  originalDeepestCommon  startModule  AbstractCompiler  compiler  boolean  hasChanged  referenced  NameReferenceGraph  graph  JSModuleGraph  moduleGraph  
[BugLab_Wrong_Operator]^if  ( originalDeepestCommon < deepestCommonModuleRef )  {^138^^^^^120^143^if  ( originalDeepestCommon != deepestCommonModuleRef )  {^[CLASS] AnalyzeNameReferences PropagateReferences NameInfo  [METHOD] markReference [RETURN_TYPE] boolean   JSModule module [VARIABLES] JSModule  deepestCommonModuleRef  module  originalDeepestCommon  startModule  AbstractCompiler  compiler  boolean  hasChanged  referenced  NameReferenceGraph  graph  JSModuleGraph  moduleGraph  
[BugLab_Variable_Misuse]^return referenced;^142^^^^^120^143^return hasChanged;^[CLASS] AnalyzeNameReferences PropagateReferences NameInfo  [METHOD] markReference [RETURN_TYPE] boolean   JSModule module [VARIABLES] JSModule  deepestCommonModuleRef  module  originalDeepestCommon  startModule  AbstractCompiler  compiler  boolean  hasChanged  referenced  NameReferenceGraph  graph  JSModuleGraph  moduleGraph  
[BugLab_Variable_Misuse]^NameInfo destInfo = getInfo ( start ) ;^72^^^^^71^84^NameInfo startInfo = getInfo ( start ) ;^[CLASS] PropagateReferences  [METHOD] traverseEdge [RETURN_TYPE] boolean   Name start Reference edge Name dest [VARIABLES] NameInfo  destInfo  startInfo  boolean  Reference  edge  JSModule  startModule  Name  dest  start  
[BugLab_Variable_Misuse]^NameInfo startInfo = getInfo ( dest ) ;^73^^^^^71^84^NameInfo destInfo = getInfo ( dest ) ;^[CLASS] PropagateReferences  [METHOD] traverseEdge [RETURN_TYPE] boolean   Name start Reference edge Name dest [VARIABLES] NameInfo  destInfo  startInfo  boolean  Reference  edge  JSModule  startModule  Name  dest  start  
[BugLab_Variable_Misuse]^if  ( destInfo.isReferenced (  )  )  {^74^^^^^71^84^if  ( startInfo.isReferenced (  )  )  {^[CLASS] PropagateReferences  [METHOD] traverseEdge [RETURN_TYPE] boolean   Name start Reference edge Name dest [VARIABLES] NameInfo  destInfo  startInfo  boolean  Reference  edge  JSModule  startModule  Name  dest  start  
[BugLab_Variable_Misuse]^if  ( startModule != null && 0.dependsOn ( startModule, edge.getModule (  )  )  )  {^76^77^^^^71^84^if  ( startModule != null && moduleGraph.dependsOn ( startModule, edge.getModule (  )  )  )  {^[CLASS] PropagateReferences  [METHOD] traverseEdge [RETURN_TYPE] boolean   Name start Reference edge Name dest [VARIABLES] NameInfo  destInfo  startInfo  boolean  Reference  edge  JSModule  startModule  Name  dest  start  
[BugLab_Argument_Swapping]^if  ( moduleGraph != null && startModule.dependsOn ( startModule, edge.getModule (  )  )  )  {^76^77^^^^71^84^if  ( startModule != null && moduleGraph.dependsOn ( startModule, edge.getModule (  )  )  )  {^[CLASS] PropagateReferences  [METHOD] traverseEdge [RETURN_TYPE] boolean   Name start Reference edge Name dest [VARIABLES] NameInfo  destInfo  startInfo  boolean  Reference  edge  JSModule  startModule  Name  dest  start  
[BugLab_Wrong_Operator]^if  ( startModule != null || moduleGraph.dependsOn ( startModule, edge.getModule (  )  )  )  {^76^77^^^^71^84^if  ( startModule != null && moduleGraph.dependsOn ( startModule, edge.getModule (  )  )  )  {^[CLASS] PropagateReferences  [METHOD] traverseEdge [RETURN_TYPE] boolean   Name start Reference edge Name dest [VARIABLES] NameInfo  destInfo  startInfo  boolean  Reference  edge  JSModule  startModule  Name  dest  start  
[BugLab_Wrong_Operator]^if  ( startModule == null && moduleGraph.dependsOn ( startModule, edge.getModule (  )  )  )  {^76^77^^^^71^84^if  ( startModule != null && moduleGraph.dependsOn ( startModule, edge.getModule (  )  )  )  {^[CLASS] PropagateReferences  [METHOD] traverseEdge [RETURN_TYPE] boolean   Name start Reference edge Name dest [VARIABLES] NameInfo  destInfo  startInfo  boolean  Reference  edge  JSModule  startModule  Name  dest  start  
[BugLab_Variable_Misuse]^return startInfo.markReference ( edge.getModule (  )  ) ;^80^^^^^71^84^return destInfo.markReference ( edge.getModule (  )  ) ;^[CLASS] PropagateReferences  [METHOD] traverseEdge [RETURN_TYPE] boolean   Name start Reference edge Name dest [VARIABLES] NameInfo  destInfo  startInfo  boolean  Reference  edge  JSModule  startModule  Name  dest  start  
[BugLab_Argument_Swapping]^return edge.markReference ( destInfo.getModule (  )  ) ;^80^^^^^71^84^return destInfo.markReference ( edge.getModule (  )  ) ;^[CLASS] PropagateReferences  [METHOD] traverseEdge [RETURN_TYPE] boolean   Name start Reference edge Name dest [VARIABLES] NameInfo  destInfo  startInfo  boolean  Reference  edge  JSModule  startModule  Name  dest  start  
[BugLab_Variable_Misuse]^return startInfo.markReference ( startModule ) ;^78^^^^^71^84^return destInfo.markReference ( startModule ) ;^[CLASS] PropagateReferences  [METHOD] traverseEdge [RETURN_TYPE] boolean   Name start Reference edge Name dest [VARIABLES] NameInfo  destInfo  startInfo  boolean  Reference  edge  JSModule  startModule  Name  dest  start  
[BugLab_Argument_Swapping]^return startModule.markReference ( destInfo ) ;^78^^^^^71^84^return destInfo.markReference ( startModule ) ;^[CLASS] PropagateReferences  [METHOD] traverseEdge [RETURN_TYPE] boolean   Name start Reference edge Name dest [VARIABLES] NameInfo  destInfo  startInfo  boolean  Reference  edge  JSModule  startModule  Name  dest  start  
[BugLab_Variable_Misuse]^JSModule startModule = destInfo.getDeepestCommonModuleRef (  ) ;^75^^^^^71^84^JSModule startModule = startInfo.getDeepestCommonModuleRef (  ) ;^[CLASS] PropagateReferences  [METHOD] traverseEdge [RETURN_TYPE] boolean   Name start Reference edge Name dest [VARIABLES] NameInfo  destInfo  startInfo  boolean  Reference  edge  JSModule  startModule  Name  dest  start  
[BugLab_Argument_Swapping]^moduleGraph.dependsOn ( edge, startModule.getModule (  )  )  )  {^77^^^^^71^84^moduleGraph.dependsOn ( startModule, edge.getModule (  )  )  )  {^[CLASS] PropagateReferences  [METHOD] traverseEdge [RETURN_TYPE] boolean   Name start Reference edge Name dest [VARIABLES] NameInfo  destInfo  startInfo  boolean  Reference  edge  JSModule  startModule  Name  dest  start  
[BugLab_Argument_Swapping]^if  ( edge != null && moduleGraph.dependsOn ( startModule, startModule.getModule (  )  )  )  {^76^77^^^^71^84^if  ( startModule != null && moduleGraph.dependsOn ( startModule, edge.getModule (  )  )  )  {^[CLASS] PropagateReferences  [METHOD] traverseEdge [RETURN_TYPE] boolean   Name start Reference edge Name dest [VARIABLES] NameInfo  destInfo  startInfo  boolean  Reference  edge  JSModule  startModule  Name  dest  start  
[BugLab_Wrong_Literal]^return true;^83^^^^^71^84^return false;^[CLASS] PropagateReferences  [METHOD] traverseEdge [RETURN_TYPE] boolean   Name start Reference edge Name dest [VARIABLES] NameInfo  destInfo  startInfo  boolean  Reference  edge  JSModule  startModule  Name  dest  start  
[BugLab_Wrong_Literal]^private boolean referenced = true;^98^^^^^93^103^private boolean referenced = false;^[CLASS] NameInfo  [METHOD] traverseEdge [RETURN_TYPE] boolean   Name start Reference edge Name dest [VARIABLES] NameInfo  destInfo  startInfo  boolean  Reference  edge  JSModule  startModule  Name  dest  start  
[BugLab_Wrong_Literal]^boolean hasChanged = true;^121^^^^^120^143^boolean hasChanged = false;^[CLASS] NameInfo  [METHOD] markReference [RETURN_TYPE] boolean   JSModule module [VARIABLES] JSModule  deepestCommonModuleRef  module  originalDeepestCommon  boolean  hasChanged  referenced  
[BugLab_Variable_Misuse]^if  ( !hasChanged )  {^122^^^^^120^143^if  ( !referenced )  {^[CLASS] NameInfo  [METHOD] markReference [RETURN_TYPE] boolean   JSModule module [VARIABLES] JSModule  deepestCommonModuleRef  module  originalDeepestCommon  boolean  hasChanged  referenced  
[BugLab_Wrong_Literal]^referenced = false;^123^^^^^120^143^referenced = true;^[CLASS] NameInfo  [METHOD] markReference [RETURN_TYPE] boolean   JSModule module [VARIABLES] JSModule  deepestCommonModuleRef  module  originalDeepestCommon  boolean  hasChanged  referenced  
[BugLab_Wrong_Literal]^hasChanged = false;^124^^^^^120^143^hasChanged = true;^[CLASS] NameInfo  [METHOD] markReference [RETURN_TYPE] boolean   JSModule module [VARIABLES] JSModule  deepestCommonModuleRef  module  originalDeepestCommon  boolean  hasChanged  referenced  
[BugLab_Variable_Misuse]^if  ( deepestCommonModuleRefGraph != null )  {^127^^^^^120^143^if  ( moduleGraph != null )  {^[CLASS] NameInfo  [METHOD] markReference [RETURN_TYPE] boolean   JSModule module [VARIABLES] JSModule  deepestCommonModuleRef  module  originalDeepestCommon  boolean  hasChanged  referenced  
[BugLab_Wrong_Operator]^if  ( moduleGraph == null )  {^127^^^^^120^143^if  ( moduleGraph != null )  {^[CLASS] NameInfo  [METHOD] markReference [RETURN_TYPE] boolean   JSModule module [VARIABLES] JSModule  deepestCommonModuleRef  module  originalDeepestCommon  boolean  hasChanged  referenced  
[BugLab_Variable_Misuse]^if  ( originalDeepestCommon == null )  {^130^^^^^120^143^if  ( deepestCommonModuleRef == null )  {^[CLASS] NameInfo  [METHOD] markReference [RETURN_TYPE] boolean   JSModule module [VARIABLES] JSModule  deepestCommonModuleRef  module  originalDeepestCommon  boolean  hasChanged  referenced  
[BugLab_Wrong_Operator]^if  ( deepestCommonModuleRef != null )  {^130^^^^^120^143^if  ( deepestCommonModuleRef == null )  {^[CLASS] NameInfo  [METHOD] markReference [RETURN_TYPE] boolean   JSModule module [VARIABLES] JSModule  deepestCommonModuleRef  module  originalDeepestCommon  boolean  hasChanged  referenced  
[BugLab_Variable_Misuse]^deepestCommonModuleRef = originalDeepestCommonGraph.getDeepestCommonDependencyInclusive ( deepestCommonModuleRef, module ) ;^133^134^135^^^120^143^deepestCommonModuleRef = moduleGraph.getDeepestCommonDependencyInclusive ( deepestCommonModuleRef, module ) ;^[CLASS] NameInfo  [METHOD] markReference [RETURN_TYPE] boolean   JSModule module [VARIABLES] JSModule  deepestCommonModuleRef  module  originalDeepestCommon  boolean  hasChanged  referenced  
[BugLab_Variable_Misuse]^deepestCommonModuleRef = moduleGraph.getDeepestCommonDependencyInclusive ( originalDeepestCommon, module ) ;^133^134^135^^^120^143^deepestCommonModuleRef = moduleGraph.getDeepestCommonDependencyInclusive ( deepestCommonModuleRef, module ) ;^[CLASS] NameInfo  [METHOD] markReference [RETURN_TYPE] boolean   JSModule module [VARIABLES] JSModule  deepestCommonModuleRef  module  originalDeepestCommon  boolean  hasChanged  referenced  
[BugLab_Argument_Swapping]^deepestCommonModuleRef = moduleGraphGraph.getDeepestCommonDependencyInclusive ( deepestCommonModuleRef, module ) ;^133^134^135^^^120^143^deepestCommonModuleRef = moduleGraph.getDeepestCommonDependencyInclusive ( deepestCommonModuleRef, module ) ;^[CLASS] NameInfo  [METHOD] markReference [RETURN_TYPE] boolean   JSModule module [VARIABLES] JSModule  deepestCommonModuleRef  module  originalDeepestCommon  boolean  hasChanged  referenced  
[BugLab_Argument_Swapping]^deepestCommonModuleRef = module.getDeepestCommonDependencyInclusive ( deepestCommonModuleRef, moduleGraph ) ;^133^134^135^^^120^143^deepestCommonModuleRef = moduleGraph.getDeepestCommonDependencyInclusive ( deepestCommonModuleRef, module ) ;^[CLASS] NameInfo  [METHOD] markReference [RETURN_TYPE] boolean   JSModule module [VARIABLES] JSModule  deepestCommonModuleRef  module  originalDeepestCommon  boolean  hasChanged  referenced  
[BugLab_Argument_Swapping]^deepestCommonModuleRef = deepestCommonModuleRef.getDeepestCommonDependencyInclusive ( moduleGraph, module ) ;^133^134^135^^^120^143^deepestCommonModuleRef = moduleGraph.getDeepestCommonDependencyInclusive ( deepestCommonModuleRef, module ) ;^[CLASS] NameInfo  [METHOD] markReference [RETURN_TYPE] boolean   JSModule module [VARIABLES] JSModule  deepestCommonModuleRef  module  originalDeepestCommon  boolean  hasChanged  referenced  
[BugLab_Variable_Misuse]^moduleGraph.getDeepestCommonDependencyInclusive ( deepestCommonModuleRef, originalDeepestCommon ) ;^134^135^^^^120^143^moduleGraph.getDeepestCommonDependencyInclusive ( deepestCommonModuleRef, module ) ;^[CLASS] NameInfo  [METHOD] markReference [RETURN_TYPE] boolean   JSModule module [VARIABLES] JSModule  deepestCommonModuleRef  module  originalDeepestCommon  boolean  hasChanged  referenced  
[BugLab_Variable_Misuse]^moduleGraph.getDeepestCommonDependencyInclusive ( originalDeepestCommon, module ) ;^134^135^^^^120^143^moduleGraph.getDeepestCommonDependencyInclusive ( deepestCommonModuleRef, module ) ;^[CLASS] NameInfo  [METHOD] markReference [RETURN_TYPE] boolean   JSModule module [VARIABLES] JSModule  deepestCommonModuleRef  module  originalDeepestCommon  boolean  hasChanged  referenced  
[BugLab_Argument_Swapping]^moduleGraph.getDeepestCommonDependencyInclusive ( module, deepestCommonModuleRef ) ;^134^135^^^^120^143^moduleGraph.getDeepestCommonDependencyInclusive ( deepestCommonModuleRef, module ) ;^[CLASS] NameInfo  [METHOD] markReference [RETURN_TYPE] boolean   JSModule module [VARIABLES] JSModule  deepestCommonModuleRef  module  originalDeepestCommon  boolean  hasChanged  referenced  
[BugLab_Variable_Misuse]^deepestCommonModuleRef = originalDeepestCommon;^131^^^^^120^143^deepestCommonModuleRef = module;^[CLASS] NameInfo  [METHOD] markReference [RETURN_TYPE] boolean   JSModule module [VARIABLES] JSModule  deepestCommonModuleRef  module  originalDeepestCommon  boolean  hasChanged  referenced  
[BugLab_Variable_Misuse]^if  ( module != deepestCommonModuleRef )  {^138^^^^^120^143^if  ( originalDeepestCommon != deepestCommonModuleRef )  {^[CLASS] NameInfo  [METHOD] markReference [RETURN_TYPE] boolean   JSModule module [VARIABLES] JSModule  deepestCommonModuleRef  module  originalDeepestCommon  boolean  hasChanged  referenced  
[BugLab_Argument_Swapping]^if  ( deepestCommonModuleRef != originalDeepestCommon )  {^138^^^^^120^143^if  ( originalDeepestCommon != deepestCommonModuleRef )  {^[CLASS] NameInfo  [METHOD] markReference [RETURN_TYPE] boolean   JSModule module [VARIABLES] JSModule  deepestCommonModuleRef  module  originalDeepestCommon  boolean  hasChanged  referenced  
[BugLab_Wrong_Operator]^if  ( originalDeepestCommon == deepestCommonModuleRef )  {^138^^^^^120^143^if  ( originalDeepestCommon != deepestCommonModuleRef )  {^[CLASS] NameInfo  [METHOD] markReference [RETURN_TYPE] boolean   JSModule module [VARIABLES] JSModule  deepestCommonModuleRef  module  originalDeepestCommon  boolean  hasChanged  referenced  
[BugLab_Wrong_Literal]^hasChanged = false;^139^^^^^120^143^hasChanged = true;^[CLASS] NameInfo  [METHOD] markReference [RETURN_TYPE] boolean   JSModule module [VARIABLES] JSModule  deepestCommonModuleRef  module  originalDeepestCommon  boolean  hasChanged  referenced  
[BugLab_Argument_Swapping]^deepestCommonModuleRef = deepestCommonModuleRefGraph.getDeepestCommonDependencyInclusive ( module, module ) ;^133^134^135^^^120^143^deepestCommonModuleRef = moduleGraph.getDeepestCommonDependencyInclusive ( deepestCommonModuleRef, module ) ;^[CLASS] NameInfo  [METHOD] markReference [RETURN_TYPE] boolean   JSModule module [VARIABLES] JSModule  deepestCommonModuleRef  module  originalDeepestCommon  boolean  hasChanged  referenced  
[BugLab_Variable_Misuse]^if  ( originalDeepestCommon != module )  {^138^^^^^120^143^if  ( originalDeepestCommon != deepestCommonModuleRef )  {^[CLASS] NameInfo  [METHOD] markReference [RETURN_TYPE] boolean   JSModule module [VARIABLES] JSModule  deepestCommonModuleRef  module  originalDeepestCommon  boolean  hasChanged  referenced  
[BugLab_Variable_Misuse]^JSModule originalDeepestCommon = module;^128^^^^^120^143^JSModule originalDeepestCommon = deepestCommonModuleRef;^[CLASS] NameInfo  [METHOD] markReference [RETURN_TYPE] boolean   JSModule module [VARIABLES] JSModule  deepestCommonModuleRef  module  originalDeepestCommon  boolean  hasChanged  referenced  
[BugLab_Variable_Misuse]^return referenced;^142^^^^^120^143^return hasChanged;^[CLASS] NameInfo  [METHOD] markReference [RETURN_TYPE] boolean   JSModule module [VARIABLES] JSModule  deepestCommonModuleRef  module  originalDeepestCommon  boolean  hasChanged  referenced  
