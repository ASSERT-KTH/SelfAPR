[buglab_swap_variables]^NodeTraversal.traverse ( root, compiler, new Traversal (  )  ) ;^51^^^^^50^52^NodeTraversal.traverse ( compiler, root, new Traversal (  )  ) ;^[CLASS] IgnoreCajaProperties Traversal  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  int  counter  Node  externs  root  
[buglab_swap_variables]^NodeTraversal.traverse ( compiler,  new Traversal (  )  ) ;^51^^^^^50^52^NodeTraversal.traverse ( compiler, root, new Traversal (  )  ) ;^[CLASS] IgnoreCajaProperties Traversal  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  int  counter  Node  externs  root  
[buglab_swap_variables]^NodeTraversal.traverse (  root, new Traversal (  )  ) ;^51^^^^^50^52^NodeTraversal.traverse ( compiler, root, new Traversal (  )  ) ;^[CLASS] IgnoreCajaProperties Traversal  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  int  counter  Node  externs  root  
[buglab_swap_variables]^ifBody = new Node ( Token. new Node ( Token.EXPR_RESULT,^99^100^101^102^^84^114^ifBody = new Node ( Token.BLOCK, new Node ( Token.EXPR_RESULT,^[CLASS] IgnoreCajaProperties Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  counter  Node  assignment  body  ifBody  key  n  newBody  parent  tmp  
[buglab_swap_variables]^ifBody = new Node ( Token.BLOCK, new Node ( Token.^99^100^101^102^^84^114^ifBody = new Node ( Token.BLOCK, new Node ( Token.EXPR_RESULT,^[CLASS] IgnoreCajaProperties Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  counter  Node  assignment  body  ifBody  key  n  newBody  parent  tmp  
[buglab_swap_variables]^new Node ( Token. new Node ( Token.ASSIGN,^101^102^103^104^^86^116^new Node ( Token.EXPR_RESULT, new Node ( Token.ASSIGN,^[CLASS] IgnoreCajaProperties Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  counter  Node  assignment  body  ifBody  key  n  newBody  parent  tmp  
[buglab_swap_variables]^new Node ( Token.EXPR_RESULT, new Node ( Token.^101^102^103^104^^86^116^new Node ( Token.EXPR_RESULT, new Node ( Token.ASSIGN,^[CLASS] IgnoreCajaProperties Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  counter  Node  assignment  body  ifBody  key  n  newBody  parent  tmp  
[buglab_swap_variables]^new Node ( Token.ASSIGN,  tmp.cloneTree (  )  )  ) ,^103^104^105^106^^88^118^new Node ( Token.ASSIGN, key, tmp.cloneTree (  )  )  ) ,^[CLASS] IgnoreCajaProperties Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  counter  Node  assignment  body  ifBody  key  n  newBody  parent  tmp  
[buglab_swap_variables]^new Node ( Token.ASSIGN, tmp, key.cloneTree (  )  )  ) ,^103^104^105^106^^88^118^new Node ( Token.ASSIGN, key, tmp.cloneTree (  )  )  ) ,^[CLASS] IgnoreCajaProperties Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  counter  Node  assignment  body  ifBody  key  n  newBody  parent  tmp  
[buglab_swap_variables]^new Node ( Token.ASSIGN, key.cloneTree (  )  )  ) ,^103^104^105^106^^88^118^new Node ( Token.ASSIGN, key, tmp.cloneTree (  )  )  ) ,^[CLASS] IgnoreCajaProperties Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  counter  Node  assignment  body  ifBody  key  n  newBody  parent  tmp  
[buglab_swap_variables]^new Node ( Token. key, tmp.cloneTree (  )  )  ) ,^103^104^105^106^^88^118^new Node ( Token.ASSIGN, key, tmp.cloneTree (  )  )  ) ,^[CLASS] IgnoreCajaProperties Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  counter  Node  assignment  body  ifBody  key  n  newBody  parent  tmp  
[buglab_swap_variables]^ifBody = new Node ( Token.BLOCK,  new Node (^80^81^82^83^^65^95^ifBody = new Node ( Token.BLOCK, key, new Node (^[CLASS] IgnoreCajaProperties Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  counter  Node  assignment  body  ifBody  key  n  newBody  parent  tmp  
[buglab_swap_variables]^ifBody = new Node ( Token. key, new Node (^80^81^82^83^^65^95^ifBody = new Node ( Token.BLOCK, key, new Node (^[CLASS] IgnoreCajaProperties Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  counter  Node  assignment  body  ifBody  key  n  newBody  parent  tmp  
[buglab_swap_variables]^new Node ( Token. new Node ( Token.ASSIGN,^83^84^85^86^^68^98^new Node ( Token.EXPR_RESULT, new Node ( Token.ASSIGN,^[CLASS] IgnoreCajaProperties Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  counter  Node  assignment  body  ifBody  key  n  newBody  parent  tmp  
[buglab_swap_variables]^new Node ( Token.EXPR_RESULT, new Node ( Token.^83^84^85^86^^68^98^new Node ( Token.EXPR_RESULT, new Node ( Token.ASSIGN,^[CLASS] IgnoreCajaProperties Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  counter  Node  assignment  body  ifBody  key  n  newBody  parent  tmp  
[buglab_swap_variables]^new Node ( Token.ASSIGN, tmp.getFirstChild (  ) .cloneNode (  ) , key.cloneTree (  )  )  ) ,^85^86^87^88^^70^100^new Node ( Token.ASSIGN, key.getFirstChild (  ) .cloneNode (  ) , tmp.cloneTree (  )  )  ) ,^[CLASS] IgnoreCajaProperties Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  counter  Node  assignment  body  ifBody  key  n  newBody  parent  tmp  
[buglab_swap_variables]^new Node ( Token.ASSIGN.getFirstChild (  ) .cloneNode (  ) , tmp.cloneTree (  )  )  ) ,^85^86^87^88^^70^100^new Node ( Token.ASSIGN, key.getFirstChild (  ) .cloneNode (  ) , tmp.cloneTree (  )  )  ) ,^[CLASS] IgnoreCajaProperties Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  counter  Node  assignment  body  ifBody  key  n  newBody  parent  tmp  
[buglab_swap_variables]^new Node ( Token.ASSIGN, key.getFirstChild (  ) .cloneNode (  ) .cloneTree (  )  )  ) ,^85^86^87^88^^70^100^new Node ( Token.ASSIGN, key.getFirstChild (  ) .cloneNode (  ) , tmp.cloneTree (  )  )  ) ,^[CLASS] IgnoreCajaProperties Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  counter  Node  assignment  body  ifBody  key  n  newBody  parent  tmp  
[buglab_swap_variables]^new Node ( Token. key.getFirstChild (  ) .cloneNode (  ) , tmp.cloneTree (  )  )  ) ,^85^86^87^88^^70^100^new Node ( Token.ASSIGN, key.getFirstChild (  ) .cloneNode (  ) , tmp.cloneTree (  )  )  ) ,^[CLASS] IgnoreCajaProperties Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  counter  Node  assignment  body  ifBody  key  n  newBody  parent  tmp  
[buglab_swap_variables]^n.addChildToFront ( new Node ( Token.VAR )  ) ;^65^^^^^50^80^n.addChildToFront ( new Node ( Token.VAR, tmp )  ) ;^[CLASS] IgnoreCajaProperties Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  counter  Node  assignment  body  ifBody  key  n  newBody  parent  tmp  
[buglab_swap_variables]^n.addChildToFront ( new Node ( Token. tmp )  ) ;^65^^^^^50^80^n.addChildToFront ( new Node ( Token.VAR, tmp )  ) ;^[CLASS] IgnoreCajaProperties Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  counter  Node  assignment  body  ifBody  key  n  newBody  parent  tmp  
[buglab_swap_variables]^Node newBody = new Node ( Token. new Node ( Token.IF,^111^112^113^114^^96^126^Node newBody = new Node ( Token.BLOCK, new Node ( Token.IF,^[CLASS] IgnoreCajaProperties Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  counter  Node  assignment  body  ifBody  key  n  newBody  parent  tmp  
[buglab_swap_variables]^Node newBody = new Node ( Token.BLOCK, new Node ( Token.^111^112^113^114^^96^126^Node newBody = new Node ( Token.BLOCK, new Node ( Token.IF,^[CLASS] IgnoreCajaProperties Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  counter  Node  assignment  body  ifBody  key  n  newBody  parent  tmp  
[buglab_swap_variables]^new Node ( Token. new Node ( Token.NOT,^113^114^115^116^^98^128^new Node ( Token.IF, new Node ( Token.NOT,^[CLASS] IgnoreCajaProperties Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  counter  Node  assignment  body  ifBody  key  n  newBody  parent  tmp  
[buglab_swap_variables]^new Node ( Token.IF, new Node ( Token.^113^114^115^116^^98^128^new Node ( Token.IF, new Node ( Token.NOT,^[CLASS] IgnoreCajaProperties Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  counter  Node  assignment  body  ifBody  key  n  newBody  parent  tmp  
[buglab_swap_variables]^new Node ( Token. new Node ( Token.CALL,^115^116^117^118^^100^130^new Node ( Token.NOT, new Node ( Token.CALL,^[CLASS] IgnoreCajaProperties Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  counter  Node  assignment  body  ifBody  key  n  newBody  parent  tmp  
[buglab_swap_variables]^new Node ( Token.NOT, new Node ( Token.^115^116^117^118^^100^130^new Node ( Token.NOT, new Node ( Token.CALL,^[CLASS] IgnoreCajaProperties Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  counter  Node  assignment  body  ifBody  key  n  newBody  parent  tmp  
[buglab_swap_variables]^new Node ( Token. new Node ( Token.GETPROP,^117^118^119^120^^102^132^new Node ( Token.CALL, new Node ( Token.GETPROP,^[CLASS] IgnoreCajaProperties Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  counter  Node  assignment  body  ifBody  key  n  newBody  parent  tmp  
[buglab_swap_variables]^new Node ( Token.CALL, new Node ( Token.^117^118^119^120^^102^132^new Node ( Token.CALL, new Node ( Token.GETPROP,^[CLASS] IgnoreCajaProperties Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  counter  Node  assignment  body  ifBody  key  n  newBody  parent  tmp  
[buglab_swap_variables]^new Node ( Token.GETPROP.cloneTree (  ) , Node.newString ( "match" )  ) ,^119^120^121^122^^104^134^new Node ( Token.GETPROP, tmp.cloneTree (  ) , Node.newString ( "match" )  ) ,^[CLASS] IgnoreCajaProperties Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  counter  Node  assignment  body  ifBody  key  n  newBody  parent  tmp  
[buglab_swap_variables]^new Node ( Token. tmp.cloneTree (  ) , Node.newString ( "match" )  ) ,^119^120^121^122^^104^134^new Node ( Token.GETPROP, tmp.cloneTree (  ) , Node.newString ( "match" )  ) ,^[CLASS] IgnoreCajaProperties Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  counter  Node  assignment  body  ifBody  key  n  newBody  parent  tmp  
[buglab_swap_variables]^n.addChildToFront ( tmpew Node ( Token.VAR, n )  ) ;^65^^^^^50^80^n.addChildToFront ( new Node ( Token.VAR, tmp )  ) ;^[CLASS] IgnoreCajaProperties Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  counter  Node  assignment  body  ifBody  key  n  newBody  parent  tmp  
[buglab_swap_variables]^n.addChildToBack ( newBodyewBody ) ;^127^^^^^112^142^n.addChildToBack ( newBody ) ;^[CLASS] IgnoreCajaProperties Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  counter  Node  assignment  body  ifBody  key  n  newBody  parent  tmp  
[buglab_swap_variables]^n.addChildToBack ( n ) ;^127^^^^^112^142^n.addChildToBack ( newBody ) ;^[CLASS] IgnoreCajaProperties Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  int  counter  Node  assignment  body  ifBody  key  n  newBody  parent  tmp  
[buglab_swap_variables]^ifBody = new Node ( Token. new Node ( Token.EXPR_RESULT,^99^100^101^102^^84^114^ifBody = new Node ( Token.BLOCK, new Node ( Token.EXPR_RESULT,^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  assignment  body  ifBody  key  n  newBody  parent  tmp  
[buglab_swap_variables]^ifBody = new Node ( Token.BLOCK, new Node ( Token.^99^100^101^102^^84^114^ifBody = new Node ( Token.BLOCK, new Node ( Token.EXPR_RESULT,^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  assignment  body  ifBody  key  n  newBody  parent  tmp  
[buglab_swap_variables]^new Node ( Token. new Node ( Token.ASSIGN,^101^102^103^104^^86^116^new Node ( Token.EXPR_RESULT, new Node ( Token.ASSIGN,^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  assignment  body  ifBody  key  n  newBody  parent  tmp  
[buglab_swap_variables]^new Node ( Token.EXPR_RESULT, new Node ( Token.^101^102^103^104^^86^116^new Node ( Token.EXPR_RESULT, new Node ( Token.ASSIGN,^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  assignment  body  ifBody  key  n  newBody  parent  tmp  
[buglab_swap_variables]^new Node ( Token.ASSIGN,  tmp.cloneTree (  )  )  ) ,^103^104^105^106^^88^118^new Node ( Token.ASSIGN, key, tmp.cloneTree (  )  )  ) ,^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  assignment  body  ifBody  key  n  newBody  parent  tmp  
[buglab_swap_variables]^new Node ( Token.ASSIGN, tmp, key.cloneTree (  )  )  ) ,^103^104^105^106^^88^118^new Node ( Token.ASSIGN, key, tmp.cloneTree (  )  )  ) ,^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  assignment  body  ifBody  key  n  newBody  parent  tmp  
[buglab_swap_variables]^new Node ( Token.ASSIGN, key.cloneTree (  )  )  ) ,^103^104^105^106^^88^118^new Node ( Token.ASSIGN, key, tmp.cloneTree (  )  )  ) ,^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  assignment  body  ifBody  key  n  newBody  parent  tmp  
[buglab_swap_variables]^new Node ( Token. key, tmp.cloneTree (  )  )  ) ,^103^104^105^106^^88^118^new Node ( Token.ASSIGN, key, tmp.cloneTree (  )  )  ) ,^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  assignment  body  ifBody  key  n  newBody  parent  tmp  
[buglab_swap_variables]^ifBody = new Node ( Token.BLOCK,  new Node (^80^81^82^83^^65^95^ifBody = new Node ( Token.BLOCK, key, new Node (^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  assignment  body  ifBody  key  n  newBody  parent  tmp  
[buglab_swap_variables]^ifBody = new Node ( Token. key, new Node (^80^81^82^83^^65^95^ifBody = new Node ( Token.BLOCK, key, new Node (^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  assignment  body  ifBody  key  n  newBody  parent  tmp  
[buglab_swap_variables]^new Node ( Token. new Node ( Token.ASSIGN,^83^84^85^86^^68^98^new Node ( Token.EXPR_RESULT, new Node ( Token.ASSIGN,^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  assignment  body  ifBody  key  n  newBody  parent  tmp  
[buglab_swap_variables]^new Node ( Token.EXPR_RESULT, new Node ( Token.^83^84^85^86^^68^98^new Node ( Token.EXPR_RESULT, new Node ( Token.ASSIGN,^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  assignment  body  ifBody  key  n  newBody  parent  tmp  
[buglab_swap_variables]^new Node ( Token.ASSIGN, tmp.getFirstChild (  ) .cloneNode (  ) , key.cloneTree (  )  )  ) ,^85^86^87^88^^70^100^new Node ( Token.ASSIGN, key.getFirstChild (  ) .cloneNode (  ) , tmp.cloneTree (  )  )  ) ,^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  assignment  body  ifBody  key  n  newBody  parent  tmp  
[buglab_swap_variables]^new Node ( Token.ASSIGN.getFirstChild (  ) .cloneNode (  ) , tmp.cloneTree (  )  )  ) ,^85^86^87^88^^70^100^new Node ( Token.ASSIGN, key.getFirstChild (  ) .cloneNode (  ) , tmp.cloneTree (  )  )  ) ,^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  assignment  body  ifBody  key  n  newBody  parent  tmp  
[buglab_swap_variables]^new Node ( Token.ASSIGN, key.getFirstChild (  ) .cloneNode (  ) .cloneTree (  )  )  ) ,^85^86^87^88^^70^100^new Node ( Token.ASSIGN, key.getFirstChild (  ) .cloneNode (  ) , tmp.cloneTree (  )  )  ) ,^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  assignment  body  ifBody  key  n  newBody  parent  tmp  
[buglab_swap_variables]^new Node ( Token. key.getFirstChild (  ) .cloneNode (  ) , tmp.cloneTree (  )  )  ) ,^85^86^87^88^^70^100^new Node ( Token.ASSIGN, key.getFirstChild (  ) .cloneNode (  ) , tmp.cloneTree (  )  )  ) ,^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  assignment  body  ifBody  key  n  newBody  parent  tmp  
[buglab_swap_variables]^n.addChildToFront ( new Node ( Token.VAR )  ) ;^65^^^^^50^80^n.addChildToFront ( new Node ( Token.VAR, tmp )  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  assignment  body  ifBody  key  n  newBody  parent  tmp  
[buglab_swap_variables]^n.addChildToFront ( new Node ( Token. tmp )  ) ;^65^^^^^50^80^n.addChildToFront ( new Node ( Token.VAR, tmp )  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  assignment  body  ifBody  key  n  newBody  parent  tmp  
[buglab_swap_variables]^Node newBody = new Node ( Token. new Node ( Token.IF,^111^112^113^114^^96^126^Node newBody = new Node ( Token.BLOCK, new Node ( Token.IF,^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  assignment  body  ifBody  key  n  newBody  parent  tmp  
[buglab_swap_variables]^Node newBody = new Node ( Token.BLOCK, new Node ( Token.^111^112^113^114^^96^126^Node newBody = new Node ( Token.BLOCK, new Node ( Token.IF,^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  assignment  body  ifBody  key  n  newBody  parent  tmp  
[buglab_swap_variables]^new Node ( Token. new Node ( Token.NOT,^113^114^115^116^^98^128^new Node ( Token.IF, new Node ( Token.NOT,^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  assignment  body  ifBody  key  n  newBody  parent  tmp  
[buglab_swap_variables]^new Node ( Token.IF, new Node ( Token.^113^114^115^116^^98^128^new Node ( Token.IF, new Node ( Token.NOT,^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  assignment  body  ifBody  key  n  newBody  parent  tmp  
[buglab_swap_variables]^new Node ( Token. new Node ( Token.CALL,^115^116^117^118^^100^130^new Node ( Token.NOT, new Node ( Token.CALL,^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  assignment  body  ifBody  key  n  newBody  parent  tmp  
[buglab_swap_variables]^new Node ( Token.NOT, new Node ( Token.^115^116^117^118^^100^130^new Node ( Token.NOT, new Node ( Token.CALL,^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  assignment  body  ifBody  key  n  newBody  parent  tmp  
[buglab_swap_variables]^new Node ( Token. new Node ( Token.GETPROP,^117^118^119^120^^102^132^new Node ( Token.CALL, new Node ( Token.GETPROP,^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  assignment  body  ifBody  key  n  newBody  parent  tmp  
[buglab_swap_variables]^new Node ( Token.CALL, new Node ( Token.^117^118^119^120^^102^132^new Node ( Token.CALL, new Node ( Token.GETPROP,^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  assignment  body  ifBody  key  n  newBody  parent  tmp  
[buglab_swap_variables]^new Node ( Token.GETPROP.cloneTree (  ) , Node.newString ( "match" )  ) ,^119^120^121^122^^104^134^new Node ( Token.GETPROP, tmp.cloneTree (  ) , Node.newString ( "match" )  ) ,^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  assignment  body  ifBody  key  n  newBody  parent  tmp  
[buglab_swap_variables]^new Node ( Token. tmp.cloneTree (  ) , Node.newString ( "match" )  ) ,^119^120^121^122^^104^134^new Node ( Token.GETPROP, tmp.cloneTree (  ) , Node.newString ( "match" )  ) ,^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  assignment  body  ifBody  key  n  newBody  parent  tmp  
[buglab_swap_variables]^n.addChildToBack ( newBodyewBody ) ;^127^^^^^112^142^n.addChildToBack ( newBody ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  assignment  body  ifBody  key  n  newBody  parent  tmp  
[buglab_swap_variables]^n.addChildToBack ( n ) ;^127^^^^^112^142^n.addChildToBack ( newBody ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  assignment  body  ifBody  key  n  newBody  parent  tmp  
[buglab_swap_variables]^n.addChildToFront ( tmpew Node ( Token.VAR, n )  ) ;^65^^^^^50^80^n.addChildToFront ( new Node ( Token.VAR, tmp )  ) ;^[CLASS] Traversal  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  assignment  body  ifBody  key  n  newBody  parent  tmp  
