[buglab_swap_variables]^if  ( NodeUtil.isNameReferenced ( fnName, block )  )  {^117^^^^^112^141^if  ( NodeUtil.isNameReferenced ( block, fnName )  )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] doesFunctionMeetMinimumRequirements [RETURN_TYPE] boolean   String fnName Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  Set  knownConstants  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  fnNode  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  fnRecursionName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[buglab_swap_variables]^if  ( NodeUtil.isNameReferenced (  fnName )  )  {^117^^^^^112^141^if  ( NodeUtil.isNameReferenced ( block, fnName )  )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] doesFunctionMeetMinimumRequirements [RETURN_TYPE] boolean   String fnName Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  Set  knownConstants  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  fnNode  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  fnRecursionName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[buglab_swap_variables]^if  ( NodeUtil.isNameReferenced ( block )  )  {^117^^^^^112^141^if  ( NodeUtil.isNameReferenced ( block, fnName )  )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] doesFunctionMeetMinimumRequirements [RETURN_TYPE] boolean   String fnName Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  Set  knownConstants  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  fnNode  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  fnRecursionName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[buglab_swap_variables]^if  ( block != null && !fnRecursionName.isEmpty (  ) && !fnRecursionName.equals ( fnName ) && NodeUtil.isNameReferenced ( fnRecursionName, fnRecursionName )  )  {^122^123^124^125^^112^141^if  ( fnRecursionName != null && !fnRecursionName.isEmpty (  ) && !fnRecursionName.equals ( fnName ) && NodeUtil.isNameReferenced ( block, fnRecursionName )  )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] doesFunctionMeetMinimumRequirements [RETURN_TYPE] boolean   String fnName Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  Set  knownConstants  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  fnNode  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  fnRecursionName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[buglab_swap_variables]^if  ( fnRecursionName != null && !fnRecursionName.isEmpty (  ) && !fnRecursionName.equals ( fnName ) && NodeUtil.isNameReferenced ( block )  )  {^122^123^124^125^^112^141^if  ( fnRecursionName != null && !fnRecursionName.isEmpty (  ) && !fnRecursionName.equals ( fnName ) && NodeUtil.isNameReferenced ( block, fnRecursionName )  )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] doesFunctionMeetMinimumRequirements [RETURN_TYPE] boolean   String fnName Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  Set  knownConstants  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  fnNode  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  fnRecursionName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[buglab_swap_variables]^if  ( fnRecursionName != null && !fnRecursionName.isEmpty (  ) && !fnRecursionName.equals ( block ) && NodeUtil.isNameReferenced ( fnName, fnRecursionName )  )  {^122^123^124^125^^112^141^if  ( fnRecursionName != null && !fnRecursionName.isEmpty (  ) && !fnRecursionName.equals ( fnName ) && NodeUtil.isNameReferenced ( block, fnRecursionName )  )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] doesFunctionMeetMinimumRequirements [RETURN_TYPE] boolean   String fnName Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  Set  knownConstants  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  fnNode  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  fnRecursionName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[buglab_swap_variables]^if  ( fnRecursionName != null && !fnRecursionName.isEmpty (  ) && !fnRecursionName.equals ( fnName ) && NodeUtil.isNameReferenced (  fnRecursionName )  )  {^122^123^124^125^^112^141^if  ( fnRecursionName != null && !fnRecursionName.isEmpty (  ) && !fnRecursionName.equals ( fnName ) && NodeUtil.isNameReferenced ( block, fnRecursionName )  )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] doesFunctionMeetMinimumRequirements [RETURN_TYPE] boolean   String fnName Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  Set  knownConstants  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  fnNode  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  fnRecursionName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[buglab_swap_variables]^&& !fnRecursionName.equals ( fnRecursionName ) && NodeUtil.isNameReferenced ( block, fnName )  )  {^124^125^^^^112^141^&& !fnRecursionName.equals ( fnName ) && NodeUtil.isNameReferenced ( block, fnRecursionName )  )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] doesFunctionMeetMinimumRequirements [RETURN_TYPE] boolean   String fnName Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  Set  knownConstants  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  fnNode  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  fnRecursionName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[buglab_swap_variables]^&& !fnRecursionName.equals ( fnName ) && NodeUtil.isNameReferenced ( block )  )  {^124^125^^^^112^141^&& !fnRecursionName.equals ( fnName ) && NodeUtil.isNameReferenced ( block, fnRecursionName )  )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] doesFunctionMeetMinimumRequirements [RETURN_TYPE] boolean   String fnName Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  Set  knownConstants  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  fnNode  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  fnRecursionName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[buglab_swap_variables]^&& NodeUtil.isNameReferenced ( fnRecursionName, block )  )  {^125^^^^^112^141^&& NodeUtil.isNameReferenced ( block, fnRecursionName )  )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] doesFunctionMeetMinimumRequirements [RETURN_TYPE] boolean   String fnName Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  Set  knownConstants  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  fnNode  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  fnRecursionName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[buglab_swap_variables]^&& NodeUtil.isNameReferenced (  fnRecursionName )  )  {^125^^^^^112^141^&& NodeUtil.isNameReferenced ( block, fnRecursionName )  )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] doesFunctionMeetMinimumRequirements [RETURN_TYPE] boolean   String fnName Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  Set  knownConstants  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  fnNode  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  fnRecursionName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[buglab_swap_variables]^&& NodeUtil.isNameReferenced ( block )  )  {^125^^^^^112^141^&& NodeUtil.isNameReferenced ( block, fnRecursionName )  )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] doesFunctionMeetMinimumRequirements [RETURN_TYPE] boolean   String fnName Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  Set  knownConstants  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  fnNode  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  fnRecursionName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[buglab_swap_variables]^return canInlineReferenceAsStatementBlock ( callNode, t, fnNode, needAliases ) ;^171^172^^^^152^174^return canInlineReferenceAsStatementBlock ( t, callNode, fnNode, needAliases ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceToFunction [RETURN_TYPE] FunctionInjector$CanInlineResult   NodeTraversal t Node callNode Node fnNode String> needAliases InliningMode mode boolean referencesThis [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  NodeTraversal  t  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  fnNode  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[buglab_swap_variables]^return canInlineReferenceAsStatementBlock (  callNode, fnNode, needAliases ) ;^171^172^^^^152^174^return canInlineReferenceAsStatementBlock ( t, callNode, fnNode, needAliases ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceToFunction [RETURN_TYPE] FunctionInjector$CanInlineResult   NodeTraversal t Node callNode Node fnNode String> needAliases InliningMode mode boolean referencesThis [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  NodeTraversal  t  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  fnNode  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[buglab_swap_variables]^return canInlineReferenceAsStatementBlock ( t, needAliases, fnNode, callNode ) ;^171^172^^^^152^174^return canInlineReferenceAsStatementBlock ( t, callNode, fnNode, needAliases ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceToFunction [RETURN_TYPE] FunctionInjector$CanInlineResult   NodeTraversal t Node callNode Node fnNode String> needAliases InliningMode mode boolean referencesThis [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  NodeTraversal  t  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  fnNode  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[buglab_swap_variables]^return canInlineReferenceAsStatementBlock ( t,  fnNode, needAliases ) ;^171^172^^^^152^174^return canInlineReferenceAsStatementBlock ( t, callNode, fnNode, needAliases ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceToFunction [RETURN_TYPE] FunctionInjector$CanInlineResult   NodeTraversal t Node callNode Node fnNode String> needAliases InliningMode mode boolean referencesThis [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  NodeTraversal  t  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  fnNode  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[buglab_swap_variables]^return canInlineReferenceAsStatementBlock ( t, fnNode, callNode, needAliases ) ;^171^172^^^^152^174^return canInlineReferenceAsStatementBlock ( t, callNode, fnNode, needAliases ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceToFunction [RETURN_TYPE] FunctionInjector$CanInlineResult   NodeTraversal t Node callNode Node fnNode String> needAliases InliningMode mode boolean referencesThis [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  NodeTraversal  t  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  fnNode  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[buglab_swap_variables]^return canInlineReferenceAsStatementBlock ( t, callNode,  needAliases ) ;^171^172^^^^152^174^return canInlineReferenceAsStatementBlock ( t, callNode, fnNode, needAliases ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceToFunction [RETURN_TYPE] FunctionInjector$CanInlineResult   NodeTraversal t Node callNode Node fnNode String> needAliases InliningMode mode boolean referencesThis [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  NodeTraversal  t  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  fnNode  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[buglab_swap_variables]^return canInlineReferenceAsStatementBlock ( t, callNode, needAliases, fnNode ) ;^171^172^^^^152^174^return canInlineReferenceAsStatementBlock ( t, callNode, fnNode, needAliases ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceToFunction [RETURN_TYPE] FunctionInjector$CanInlineResult   NodeTraversal t Node callNode Node fnNode String> needAliases InliningMode mode boolean referencesThis [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  NodeTraversal  t  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  fnNode  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[buglab_swap_variables]^return canInlineReferenceAsStatementBlock ( t, callNode, fnNode ) ;^171^172^^^^152^174^return canInlineReferenceAsStatementBlock ( t, callNode, fnNode, needAliases ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceToFunction [RETURN_TYPE] FunctionInjector$CanInlineResult   NodeTraversal t Node callNode Node fnNode String> needAliases InliningMode mode boolean referencesThis [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  NodeTraversal  t  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  fnNode  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[buglab_swap_variables]^return canInlineReferenceAsStatementBlock ( fnNode, callNode, t, needAliases ) ;^171^172^^^^152^174^return canInlineReferenceAsStatementBlock ( t, callNode, fnNode, needAliases ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceToFunction [RETURN_TYPE] FunctionInjector$CanInlineResult   NodeTraversal t Node callNode Node fnNode String> needAliases InliningMode mode boolean referencesThis [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  NodeTraversal  t  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  fnNode  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[buglab_swap_variables]^return canInlineReferenceAsStatementBlock ( needAliases, callNode, fnNode, t ) ;^171^172^^^^152^174^return canInlineReferenceAsStatementBlock ( t, callNode, fnNode, needAliases ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceToFunction [RETURN_TYPE] FunctionInjector$CanInlineResult   NodeTraversal t Node callNode Node fnNode String> needAliases InliningMode mode boolean referencesThis [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  NodeTraversal  t  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  fnNode  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[buglab_swap_variables]^return canInlineReferenceDirectly ( fnNode, callNode ) ;^169^^^^^152^174^return canInlineReferenceDirectly ( callNode, fnNode ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceToFunction [RETURN_TYPE] FunctionInjector$CanInlineResult   NodeTraversal t Node callNode Node fnNode String> needAliases InliningMode mode boolean referencesThis [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  NodeTraversal  t  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  fnNode  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[buglab_swap_variables]^return canInlineReferenceDirectly (  fnNode ) ;^169^^^^^152^174^return canInlineReferenceDirectly ( callNode, fnNode ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceToFunction [RETURN_TYPE] FunctionInjector$CanInlineResult   NodeTraversal t Node callNode Node fnNode String> needAliases InliningMode mode boolean referencesThis [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  NodeTraversal  t  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  fnNode  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[buglab_swap_variables]^return canInlineReferenceDirectly ( callNode ) ;^169^^^^^152^174^return canInlineReferenceDirectly ( callNode, fnNode ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceToFunction [RETURN_TYPE] FunctionInjector$CanInlineResult   NodeTraversal t Node callNode Node fnNode String> needAliases InliningMode mode boolean referencesThis [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  NodeTraversal  t  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  fnNode  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[buglab_swap_variables]^return inlineFunction ( fnNode, callNode, fnName ) ;^207^^^^^199^209^return inlineFunction ( callNode, fnNode, fnName ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inline [RETURN_TYPE] Node   NodeTraversal t Node callNode String fnName Node fnNode InliningMode mode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  NodeTraversal  t  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  fnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[buglab_swap_variables]^return inlineFunction (  fnNode, fnName ) ;^207^^^^^199^209^return inlineFunction ( callNode, fnNode, fnName ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inline [RETURN_TYPE] Node   NodeTraversal t Node callNode String fnName Node fnNode InliningMode mode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  NodeTraversal  t  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  fnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[buglab_swap_variables]^return inlineFunction ( callNode,  fnName ) ;^207^^^^^199^209^return inlineFunction ( callNode, fnNode, fnName ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inline [RETURN_TYPE] Node   NodeTraversal t Node callNode String fnName Node fnNode InliningMode mode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  NodeTraversal  t  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  fnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[buglab_swap_variables]^return inlineFunction ( fnName, fnNode, callNode ) ;^207^^^^^199^209^return inlineFunction ( callNode, fnNode, fnName ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inline [RETURN_TYPE] Node   NodeTraversal t Node callNode String fnName Node fnNode InliningMode mode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  NodeTraversal  t  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  fnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[buglab_swap_variables]^return inlineFunction ( callNode, fnNode ) ;^207^^^^^199^209^return inlineFunction ( callNode, fnNode, fnName ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inline [RETURN_TYPE] Node   NodeTraversal t Node callNode String fnName Node fnNode InliningMode mode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  NodeTraversal  t  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  fnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[buglab_swap_variables]^return inlineFunction ( callNode, fnName, fnNode ) ;^207^^^^^199^209^return inlineFunction ( callNode, fnNode, fnName ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inline [RETURN_TYPE] Node   NodeTraversal t Node callNode String fnName Node fnNode InliningMode mode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  NodeTraversal  t  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  fnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[buglab_swap_variables]^return inlineReturnValue ( fnNode, callNode ) ;^205^^^^^199^209^return inlineReturnValue ( callNode, fnNode ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inline [RETURN_TYPE] Node   NodeTraversal t Node callNode String fnName Node fnNode InliningMode mode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  NodeTraversal  t  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  fnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[buglab_swap_variables]^return inlineReturnValue (  fnNode ) ;^205^^^^^199^209^return inlineReturnValue ( callNode, fnNode ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inline [RETURN_TYPE] Node   NodeTraversal t Node callNode String fnName Node fnNode InliningMode mode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  NodeTraversal  t  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  fnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[buglab_swap_variables]^return inlineReturnValue ( callNode ) ;^205^^^^^199^209^return inlineReturnValue ( callNode, fnNode ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inline [RETURN_TYPE] Node   NodeTraversal t Node callNode String fnName Node fnNode InliningMode mode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  NodeTraversal  t  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  fnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[buglab_swap_variables]^Map<String, Node> argMap = FunctionArgumentInjector.getFunctionCallParameterMap ( callNode, fnNode, this.safeNameIdSupplier ) ;^225^226^227^^^216^246^Map<String, Node> argMap = FunctionArgumentInjector.getFunctionCallParameterMap ( fnNode, callNode, this.safeNameIdSupplier ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineReturnValue [RETURN_TYPE] Node   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  fnNode  inlineResult  newExpression  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  Map  argMap  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[buglab_swap_variables]^Map<String, Node> argMap = FunctionArgumentInjector.getFunctionCallParameterMap (  callNode, this.safeNameIdSupplier ) ;^225^226^227^^^216^246^Map<String, Node> argMap = FunctionArgumentInjector.getFunctionCallParameterMap ( fnNode, callNode, this.safeNameIdSupplier ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineReturnValue [RETURN_TYPE] Node   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  fnNode  inlineResult  newExpression  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  Map  argMap  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[buglab_swap_variables]^Map<String, Node> argMap = FunctionArgumentInjector.getFunctionCallParameterMap ( fnNode,  this.safeNameIdSupplier ) ;^225^226^227^^^216^246^Map<String, Node> argMap = FunctionArgumentInjector.getFunctionCallParameterMap ( fnNode, callNode, this.safeNameIdSupplier ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineReturnValue [RETURN_TYPE] Node   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  fnNode  inlineResult  newExpression  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  Map  argMap  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[buglab_swap_variables]^Map<String, Node> argMap = FunctionArgumentInjector.getFunctionCallParameterMap ( this.safeNameIdSupplier, callNode, fnNode ) ;^225^226^227^^^216^246^Map<String, Node> argMap = FunctionArgumentInjector.getFunctionCallParameterMap ( fnNode, callNode, this.safeNameIdSupplier ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineReturnValue [RETURN_TYPE] Node   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  fnNode  inlineResult  newExpression  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  Map  argMap  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[buglab_swap_variables]^Map<String, Node> argMap = FunctionArgumentInjector.getFunctionCallParameterMap ( fnNode, callNode ) ;^225^226^227^^^216^246^Map<String, Node> argMap = FunctionArgumentInjector.getFunctionCallParameterMap ( fnNode, callNode, this.safeNameIdSupplier ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineReturnValue [RETURN_TYPE] Node   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  fnNode  inlineResult  newExpression  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  Map  argMap  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[buglab_swap_variables]^FunctionArgumentInjector.getFunctionCallParameterMap ( callNode, fnNode, this.safeNameIdSupplier ) ;^226^227^^^^216^246^FunctionArgumentInjector.getFunctionCallParameterMap ( fnNode, callNode, this.safeNameIdSupplier ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineReturnValue [RETURN_TYPE] Node   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  fnNode  inlineResult  newExpression  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  Map  argMap  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[buglab_swap_variables]^FunctionArgumentInjector.getFunctionCallParameterMap (  callNode, this.safeNameIdSupplier ) ;^226^227^^^^216^246^FunctionArgumentInjector.getFunctionCallParameterMap ( fnNode, callNode, this.safeNameIdSupplier ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineReturnValue [RETURN_TYPE] Node   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  fnNode  inlineResult  newExpression  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  Map  argMap  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[buglab_swap_variables]^FunctionArgumentInjector.getFunctionCallParameterMap ( fnNode, this.safeNameIdSupplier, callNode ) ;^226^227^^^^216^246^FunctionArgumentInjector.getFunctionCallParameterMap ( fnNode, callNode, this.safeNameIdSupplier ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineReturnValue [RETURN_TYPE] Node   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  fnNode  inlineResult  newExpression  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  Map  argMap  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[buglab_swap_variables]^FunctionArgumentInjector.getFunctionCallParameterMap ( fnNode,  this.safeNameIdSupplier ) ;^226^227^^^^216^246^FunctionArgumentInjector.getFunctionCallParameterMap ( fnNode, callNode, this.safeNameIdSupplier ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineReturnValue [RETURN_TYPE] Node   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  fnNode  inlineResult  newExpression  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  Map  argMap  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[buglab_swap_variables]^FunctionArgumentInjector.getFunctionCallParameterMap ( fnNode, callNode ) ;^226^227^^^^216^246^FunctionArgumentInjector.getFunctionCallParameterMap ( fnNode, callNode, this.safeNameIdSupplier ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineReturnValue [RETURN_TYPE] Node   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  fnNode  inlineResult  newExpression  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  Map  argMap  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[buglab_swap_variables]^Node inlineResult = FunctionArgumentInjector.inject ( argMap, null, safeReturnNode ) ;^238^239^^^^230^242^Node inlineResult = FunctionArgumentInjector.inject ( safeReturnNode, null, argMap ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineReturnValue [RETURN_TYPE] Node   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  fnNode  inlineResult  newExpression  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  Map  argMap  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[buglab_swap_variables]^Node inlineResult = FunctionArgumentInjector.inject (  null, argMap ) ;^238^239^^^^230^242^Node inlineResult = FunctionArgumentInjector.inject ( safeReturnNode, null, argMap ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineReturnValue [RETURN_TYPE] Node   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  fnNode  inlineResult  newExpression  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  Map  argMap  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[buglab_swap_variables]^Node inlineResult = FunctionArgumentInjector.inject ( safeReturnNode, null ) ;^238^239^^^^230^242^Node inlineResult = FunctionArgumentInjector.inject ( safeReturnNode, null, argMap ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineReturnValue [RETURN_TYPE] Node   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  fnNode  inlineResult  newExpression  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  Map  argMap  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[buglab_swap_variables]^Preconditions.checkArgument ( inlineResult == safeReturnNode ) ;^240^^^^^230^242^Preconditions.checkArgument ( safeReturnNode == inlineResult ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineReturnValue [RETURN_TYPE] Node   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  fnNode  inlineResult  newExpression  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  Map  argMap  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[buglab_swap_variables]^Node inlineResult = FunctionArgumentInjector.inject ( argMap, null, safeReturnNode ) ;^238^239^^^^216^246^Node inlineResult = FunctionArgumentInjector.inject ( safeReturnNode, null, argMap ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineReturnValue [RETURN_TYPE] Node   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  fnNode  inlineResult  newExpression  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  Map  argMap  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[buglab_swap_variables]^Node inlineResult = FunctionArgumentInjector.inject (  null, argMap ) ;^238^239^^^^216^246^Node inlineResult = FunctionArgumentInjector.inject ( safeReturnNode, null, argMap ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineReturnValue [RETURN_TYPE] Node   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  fnNode  inlineResult  newExpression  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  Map  argMap  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[buglab_swap_variables]^Node inlineResult = FunctionArgumentInjector.inject ( safeReturnNode, null ) ;^238^239^^^^216^246^Node inlineResult = FunctionArgumentInjector.inject ( safeReturnNode, null, argMap ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineReturnValue [RETURN_TYPE] Node   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  fnNode  inlineResult  newExpression  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  Map  argMap  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[buglab_swap_variables]^Preconditions.checkArgument ( inlineResult == safeReturnNode ) ;^240^^^^^216^246^Preconditions.checkArgument ( safeReturnNode == inlineResult ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineReturnValue [RETURN_TYPE] Node   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  fnNode  inlineResult  newExpression  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  Map  argMap  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[buglab_swap_variables]^callParentNode.replaceChild (  newExpression ) ;^244^^^^^216^246^callParentNode.replaceChild ( callNode, newExpression ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineReturnValue [RETURN_TYPE] Node   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  fnNode  inlineResult  newExpression  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  Map  argMap  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[buglab_swap_variables]^callParentNode.replaceChild ( newExpression, callNode ) ;^244^^^^^216^246^callParentNode.replaceChild ( callNode, newExpression ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineReturnValue [RETURN_TYPE] Node   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  fnNode  inlineResult  newExpression  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  Map  argMap  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[buglab_swap_variables]^callParentNode.replaceChild ( callNode ) ;^244^^^^^216^246^callParentNode.replaceChild ( callNode, newExpression ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineReturnValue [RETURN_TYPE] Node   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  fnNode  inlineResult  newExpression  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  Map  argMap  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[buglab_swap_variables]^} else if  ( NodeUtil.isExprAssign ( parent ) && !NodeUtil.isLhs ( callNode, grandParent ) && parent.getFirstChild (  ) .getType (  )  == Token.NAME && !NodeUtil.isConstantName ( parent.getFirstChild (  )  )  )  {^321^322^323^324^^306^336^} else if  ( NodeUtil.isExprAssign ( grandParent ) && !NodeUtil.isLhs ( callNode, parent ) && parent.getFirstChild (  ) .getType (  )  == Token.NAME && !NodeUtil.isConstantName ( parent.getFirstChild (  )  )  )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] classifyCallSite [RETURN_TYPE] FunctionInjector$CallSiteType   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  DecompositionType  type  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  inlineResult  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  ExpressionDecomposer  decomposer  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[buglab_swap_variables]^} else if  ( NodeUtil.isExprAssign ( grandParent ) && !NodeUtil.isLhs ( parent, callNode ) && parent.getFirstChild (  ) .getType (  )  == Token.NAME && !NodeUtil.isConstantName ( parent.getFirstChild (  )  )  )  {^321^322^323^324^^306^336^} else if  ( NodeUtil.isExprAssign ( grandParent ) && !NodeUtil.isLhs ( callNode, parent ) && parent.getFirstChild (  ) .getType (  )  == Token.NAME && !NodeUtil.isConstantName ( parent.getFirstChild (  )  )  )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] classifyCallSite [RETURN_TYPE] FunctionInjector$CallSiteType   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  DecompositionType  type  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  inlineResult  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  ExpressionDecomposer  decomposer  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[buglab_swap_variables]^} else if  ( NodeUtil.isExprAssign ( grandParent ) && !NodeUtil.isLhs (  parent ) && parent.getFirstChild (  ) .getType (  )  == Token.NAME && !NodeUtil.isConstantName ( parent.getFirstChild (  )  )  )  {^321^322^323^324^^306^336^} else if  ( NodeUtil.isExprAssign ( grandParent ) && !NodeUtil.isLhs ( callNode, parent ) && parent.getFirstChild (  ) .getType (  )  == Token.NAME && !NodeUtil.isConstantName ( parent.getFirstChild (  )  )  )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] classifyCallSite [RETURN_TYPE] FunctionInjector$CallSiteType   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  DecompositionType  type  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  inlineResult  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  ExpressionDecomposer  decomposer  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[buglab_swap_variables]^} else if  ( NodeUtil.isExprAssign ( grandParent ) && !NodeUtil.isLhs ( callNode ) && parent.getFirstChild (  ) .getType (  )  == Token.NAME && !NodeUtil.isConstantName ( parent.getFirstChild (  )  )  )  {^321^322^323^324^^306^336^} else if  ( NodeUtil.isExprAssign ( grandParent ) && !NodeUtil.isLhs ( callNode, parent ) && parent.getFirstChild (  ) .getType (  )  == Token.NAME && !NodeUtil.isConstantName ( parent.getFirstChild (  )  )  )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] classifyCallSite [RETURN_TYPE] FunctionInjector$CallSiteType   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  DecompositionType  type  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  inlineResult  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  ExpressionDecomposer  decomposer  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[buglab_swap_variables]^ExpressionDecomposer decomposer = new ExpressionDecomposer ( knownConstants, safeNameIdSupplier, compiler ) ;^338^339^^^^327^350^ExpressionDecomposer decomposer = new ExpressionDecomposer ( compiler, safeNameIdSupplier, knownConstants ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] classifyCallSite [RETURN_TYPE] FunctionInjector$CallSiteType   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  DecompositionType  type  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  inlineResult  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  ExpressionDecomposer  decomposer  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[buglab_swap_variables]^ExpressionDecomposer decomposer = new ExpressionDecomposer (  safeNameIdSupplier, knownConstants ) ;^338^339^^^^327^350^ExpressionDecomposer decomposer = new ExpressionDecomposer ( compiler, safeNameIdSupplier, knownConstants ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] classifyCallSite [RETURN_TYPE] FunctionInjector$CallSiteType   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  DecompositionType  type  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  inlineResult  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  ExpressionDecomposer  decomposer  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[buglab_swap_variables]^ExpressionDecomposer decomposer = new ExpressionDecomposer ( compiler, knownConstants, safeNameIdSupplier ) ;^338^339^^^^327^350^ExpressionDecomposer decomposer = new ExpressionDecomposer ( compiler, safeNameIdSupplier, knownConstants ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] classifyCallSite [RETURN_TYPE] FunctionInjector$CallSiteType   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  DecompositionType  type  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  inlineResult  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  ExpressionDecomposer  decomposer  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[buglab_swap_variables]^ExpressionDecomposer decomposer = new ExpressionDecomposer ( compiler,  knownConstants ) ;^338^339^^^^327^350^ExpressionDecomposer decomposer = new ExpressionDecomposer ( compiler, safeNameIdSupplier, knownConstants ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] classifyCallSite [RETURN_TYPE] FunctionInjector$CallSiteType   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  DecompositionType  type  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  inlineResult  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  ExpressionDecomposer  decomposer  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[buglab_swap_variables]^ExpressionDecomposer decomposer = new ExpressionDecomposer ( compiler, safeNameIdSupplier ) ;^338^339^^^^327^350^ExpressionDecomposer decomposer = new ExpressionDecomposer ( compiler, safeNameIdSupplier, knownConstants ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] classifyCallSite [RETURN_TYPE] FunctionInjector$CallSiteType   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  DecompositionType  type  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  inlineResult  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  ExpressionDecomposer  decomposer  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[buglab_swap_variables]^ExpressionDecomposer decomposer = new ExpressionDecomposer ( safeNameIdSupplier, compiler, knownConstants ) ;^338^339^^^^327^350^ExpressionDecomposer decomposer = new ExpressionDecomposer ( compiler, safeNameIdSupplier, knownConstants ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] classifyCallSite [RETURN_TYPE] FunctionInjector$CallSiteType   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  DecompositionType  type  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  inlineResult  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  ExpressionDecomposer  decomposer  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[buglab_swap_variables]^DecompositionType type = callNode.canExposeExpression ( decomposer ) ;^340^341^^^^327^350^DecompositionType type = decomposer.canExposeExpression ( callNode ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] classifyCallSite [RETURN_TYPE] FunctionInjector$CallSiteType   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  DecompositionType  type  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  inlineResult  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  ExpressionDecomposer  decomposer  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[buglab_swap_variables]^ExpressionDecomposer decomposer = new ExpressionDecomposer ( knownConstants, safeNameIdSupplier, compiler ) ;^338^339^^^^323^353^ExpressionDecomposer decomposer = new ExpressionDecomposer ( compiler, safeNameIdSupplier, knownConstants ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] classifyCallSite [RETURN_TYPE] FunctionInjector$CallSiteType   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  DecompositionType  type  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  inlineResult  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  ExpressionDecomposer  decomposer  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[buglab_swap_variables]^ExpressionDecomposer decomposer = new ExpressionDecomposer (  safeNameIdSupplier, knownConstants ) ;^338^339^^^^323^353^ExpressionDecomposer decomposer = new ExpressionDecomposer ( compiler, safeNameIdSupplier, knownConstants ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] classifyCallSite [RETURN_TYPE] FunctionInjector$CallSiteType   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  DecompositionType  type  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  inlineResult  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  ExpressionDecomposer  decomposer  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[buglab_swap_variables]^ExpressionDecomposer decomposer = new ExpressionDecomposer ( compiler, knownConstants, safeNameIdSupplier ) ;^338^339^^^^323^353^ExpressionDecomposer decomposer = new ExpressionDecomposer ( compiler, safeNameIdSupplier, knownConstants ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] classifyCallSite [RETURN_TYPE] FunctionInjector$CallSiteType   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  DecompositionType  type  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  inlineResult  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  ExpressionDecomposer  decomposer  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[buglab_swap_variables]^ExpressionDecomposer decomposer = new ExpressionDecomposer ( compiler,  knownConstants ) ;^338^339^^^^323^353^ExpressionDecomposer decomposer = new ExpressionDecomposer ( compiler, safeNameIdSupplier, knownConstants ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] classifyCallSite [RETURN_TYPE] FunctionInjector$CallSiteType   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  DecompositionType  type  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  inlineResult  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  ExpressionDecomposer  decomposer  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[buglab_swap_variables]^ExpressionDecomposer decomposer = new ExpressionDecomposer ( compiler, safeNameIdSupplier ) ;^338^339^^^^323^353^ExpressionDecomposer decomposer = new ExpressionDecomposer ( compiler, safeNameIdSupplier, knownConstants ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] classifyCallSite [RETURN_TYPE] FunctionInjector$CallSiteType   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  DecompositionType  type  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  inlineResult  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  ExpressionDecomposer  decomposer  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[buglab_swap_variables]^ExpressionDecomposer decomposer = new ExpressionDecomposer ( safeNameIdSupplier, compiler, knownConstants ) ;^338^339^^^^323^353^ExpressionDecomposer decomposer = new ExpressionDecomposer ( compiler, safeNameIdSupplier, knownConstants ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] classifyCallSite [RETURN_TYPE] FunctionInjector$CallSiteType   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  DecompositionType  type  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  inlineResult  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  ExpressionDecomposer  decomposer  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[buglab_swap_variables]^DecompositionType type = callNode.canExposeExpression ( decomposer ) ;^340^341^^^^325^355^DecompositionType type = decomposer.canExposeExpression ( callNode ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] classifyCallSite [RETURN_TYPE] FunctionInjector$CallSiteType   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  DecompositionType  type  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  inlineResult  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  ExpressionDecomposer  decomposer  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[buglab_swap_variables]^} else if  ( grandParent.getType (  )  == Token.NAME && !NodeUtil.isConstantName ( parent ) && parent.getType (  )  == Token.VAR && grandParent.hasOneChild (  )  )  {^327^328^329^330^^312^342^} else if  ( parent.getType (  )  == Token.NAME && !NodeUtil.isConstantName ( parent ) && grandParent.getType (  )  == Token.VAR && grandParent.hasOneChild (  )  )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] classifyCallSite [RETURN_TYPE] FunctionInjector$CallSiteType   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  DecompositionType  type  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  inlineResult  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  ExpressionDecomposer  decomposer  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[buglab_swap_variables]^&& !NodeUtil.isLhs ( parent, callNode ) && parent.getFirstChild (  ) .getType (  )  == Token.NAME && !NodeUtil.isConstantName ( parent.getFirstChild (  )  )  )  {^322^323^324^^^307^337^&& !NodeUtil.isLhs ( callNode, parent ) && parent.getFirstChild (  ) .getType (  )  == Token.NAME && !NodeUtil.isConstantName ( parent.getFirstChild (  )  )  )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] classifyCallSite [RETURN_TYPE] FunctionInjector$CallSiteType   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  DecompositionType  type  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  inlineResult  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  ExpressionDecomposer  decomposer  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[buglab_swap_variables]^&& !NodeUtil.isLhs (  parent ) && parent.getFirstChild (  ) .getType (  )  == Token.NAME && !NodeUtil.isConstantName ( parent.getFirstChild (  )  )  )  {^322^323^324^^^307^337^&& !NodeUtil.isLhs ( callNode, parent ) && parent.getFirstChild (  ) .getType (  )  == Token.NAME && !NodeUtil.isConstantName ( parent.getFirstChild (  )  )  )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] classifyCallSite [RETURN_TYPE] FunctionInjector$CallSiteType   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  DecompositionType  type  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  inlineResult  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  ExpressionDecomposer  decomposer  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[buglab_swap_variables]^&& !NodeUtil.isLhs ( callNode ) && parent.getFirstChild (  ) .getType (  )  == Token.NAME && !NodeUtil.isConstantName ( parent.getFirstChild (  )  )  )  {^322^323^324^^^307^337^&& !NodeUtil.isLhs ( callNode, parent ) && parent.getFirstChild (  ) .getType (  )  == Token.NAME && !NodeUtil.isConstantName ( parent.getFirstChild (  )  )  )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] classifyCallSite [RETURN_TYPE] FunctionInjector$CallSiteType   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  DecompositionType  type  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  inlineResult  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  ExpressionDecomposer  decomposer  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[buglab_swap_variables]^} else if  ( NodeUtil.isExprAssign ( callNode ) && !NodeUtil.isLhs ( grandParent, parent ) && parent.getFirstChild (  ) .getType (  )  == Token.NAME && !NodeUtil.isConstantName ( parent.getFirstChild (  )  )  )  {^321^322^323^324^^306^336^} else if  ( NodeUtil.isExprAssign ( grandParent ) && !NodeUtil.isLhs ( callNode, parent ) && parent.getFirstChild (  ) .getType (  )  == Token.NAME && !NodeUtil.isConstantName ( parent.getFirstChild (  )  )  )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] classifyCallSite [RETURN_TYPE] FunctionInjector$CallSiteType   Node callNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  DecompositionType  type  boolean  allowDecomposition  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  inlineResult  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  ExpressionDecomposer  decomposer  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[buglab_swap_variables]^FunctionToBlockMutator mutator = new FunctionToBlockMutator ( this.safeNameIdSupplier, compiler ) ;^405^406^^^^390^420^FunctionToBlockMutator mutator = new FunctionToBlockMutator ( compiler, this.safeNameIdSupplier ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineFunction [RETURN_TYPE] Node   Node callNode Node fnNode String fnName [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  resultName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  FunctionToBlockMutator  mutator  
[buglab_swap_variables]^FunctionToBlockMutator mutator = new FunctionToBlockMutator (  this.safeNameIdSupplier ) ;^405^406^^^^390^420^FunctionToBlockMutator mutator = new FunctionToBlockMutator ( compiler, this.safeNameIdSupplier ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineFunction [RETURN_TYPE] Node   Node callNode Node fnNode String fnName [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  resultName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  FunctionToBlockMutator  mutator  
[buglab_swap_variables]^FunctionToBlockMutator mutator = new FunctionToBlockMutator ( compiler ) ;^405^406^^^^390^420^FunctionToBlockMutator mutator = new FunctionToBlockMutator ( compiler, this.safeNameIdSupplier ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineFunction [RETURN_TYPE] Node   Node callNode Node fnNode String fnName [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  resultName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  FunctionToBlockMutator  mutator  
[buglab_swap_variables]^Node newBlock = callNode.mutate ( fnName, fnNode, mutator, resultName, needsDefaultReturnResult, isCallInLoop ) ;^408^409^410^^^393^423^Node newBlock = mutator.mutate ( fnName, fnNode, callNode, resultName, needsDefaultReturnResult, isCallInLoop ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineFunction [RETURN_TYPE] Node   Node callNode Node fnNode String fnName [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  resultName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  FunctionToBlockMutator  mutator  
[buglab_swap_variables]^Node newBlock = mutator.mutate ( resultName, fnNode, callNode, fnName, needsDefaultReturnResult, isCallInLoop ) ;^408^409^410^^^393^423^Node newBlock = mutator.mutate ( fnName, fnNode, callNode, resultName, needsDefaultReturnResult, isCallInLoop ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineFunction [RETURN_TYPE] Node   Node callNode Node fnNode String fnName [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  resultName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  FunctionToBlockMutator  mutator  
[buglab_swap_variables]^Node newBlock = mutator.mutate (  fnNode, callNode, resultName, needsDefaultReturnResult, isCallInLoop ) ;^408^409^410^^^393^423^Node newBlock = mutator.mutate ( fnName, fnNode, callNode, resultName, needsDefaultReturnResult, isCallInLoop ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineFunction [RETURN_TYPE] Node   Node callNode Node fnNode String fnName [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  resultName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  FunctionToBlockMutator  mutator  
[buglab_swap_variables]^Node newBlock = mutator.mutate ( fnName, callNode, fnNode, resultName, needsDefaultReturnResult, isCallInLoop ) ;^408^409^410^^^393^423^Node newBlock = mutator.mutate ( fnName, fnNode, callNode, resultName, needsDefaultReturnResult, isCallInLoop ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineFunction [RETURN_TYPE] Node   Node callNode Node fnNode String fnName [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  resultName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  FunctionToBlockMutator  mutator  
[buglab_swap_variables]^Node newBlock = mutator.mutate ( fnName,  callNode, resultName, needsDefaultReturnResult, isCallInLoop ) ;^408^409^410^^^393^423^Node newBlock = mutator.mutate ( fnName, fnNode, callNode, resultName, needsDefaultReturnResult, isCallInLoop ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineFunction [RETURN_TYPE] Node   Node callNode Node fnNode String fnName [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  resultName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  FunctionToBlockMutator  mutator  
[buglab_swap_variables]^Node newBlock = mutator.mutate ( fnName, fnNode,  resultName, needsDefaultReturnResult, isCallInLoop ) ;^408^409^410^^^393^423^Node newBlock = mutator.mutate ( fnName, fnNode, callNode, resultName, needsDefaultReturnResult, isCallInLoop ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineFunction [RETURN_TYPE] Node   Node callNode Node fnNode String fnName [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  resultName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  FunctionToBlockMutator  mutator  
[buglab_swap_variables]^Node newBlock = mutator.mutate ( fnName, fnNode, callNode, isCallInLoop, needsDefaultReturnResult, resultName ) ;^408^409^410^^^393^423^Node newBlock = mutator.mutate ( fnName, fnNode, callNode, resultName, needsDefaultReturnResult, isCallInLoop ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineFunction [RETURN_TYPE] Node   Node callNode Node fnNode String fnName [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  resultName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  FunctionToBlockMutator  mutator  
[buglab_swap_variables]^Node newBlock = mutator.mutate ( fnName, fnNode, callNode,  needsDefaultReturnResult, isCallInLoop ) ;^408^409^410^^^393^423^Node newBlock = mutator.mutate ( fnName, fnNode, callNode, resultName, needsDefaultReturnResult, isCallInLoop ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineFunction [RETURN_TYPE] Node   Node callNode Node fnNode String fnName [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  resultName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  FunctionToBlockMutator  mutator  
[buglab_swap_variables]^Node newBlock = mutator.mutate ( fnName, fnNode, callNode, resultName, isCallInLoop, needsDefaultReturnResult ) ;^408^409^410^^^393^423^Node newBlock = mutator.mutate ( fnName, fnNode, callNode, resultName, needsDefaultReturnResult, isCallInLoop ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineFunction [RETURN_TYPE] Node   Node callNode Node fnNode String fnName [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  resultName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  FunctionToBlockMutator  mutator  
[buglab_swap_variables]^Node newBlock = mutator.mutate ( fnName, fnNode, callNode, resultName,  isCallInLoop ) ;^408^409^410^^^393^423^Node newBlock = mutator.mutate ( fnName, fnNode, callNode, resultName, needsDefaultReturnResult, isCallInLoop ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineFunction [RETURN_TYPE] Node   Node callNode Node fnNode String fnName [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  resultName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  FunctionToBlockMutator  mutator  
[buglab_swap_variables]^Node newBlock = mutator.mutate ( fnName, fnNode, callNode, resultName, needsDefaultReturnResult ) ;^408^409^410^^^393^423^Node newBlock = mutator.mutate ( fnName, fnNode, callNode, resultName, needsDefaultReturnResult, isCallInLoop ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineFunction [RETURN_TYPE] Node   Node callNode Node fnNode String fnName [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  resultName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  FunctionToBlockMutator  mutator  
[buglab_swap_variables]^Node newBlock = fnNode.mutate ( fnName, mutator, callNode, resultName, needsDefaultReturnResult, isCallInLoop ) ;^408^409^410^^^393^423^Node newBlock = mutator.mutate ( fnName, fnNode, callNode, resultName, needsDefaultReturnResult, isCallInLoop ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineFunction [RETURN_TYPE] Node   Node callNode Node fnNode String fnName [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  resultName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  FunctionToBlockMutator  mutator  
[buglab_swap_variables]^Node newBlock = mutator.mutate ( fnName, fnNode, needsDefaultReturnResult, resultName, callNode, isCallInLoop ) ;^408^409^410^^^393^423^Node newBlock = mutator.mutate ( fnName, fnNode, callNode, resultName, needsDefaultReturnResult, isCallInLoop ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineFunction [RETURN_TYPE] Node   Node callNode Node fnNode String fnName [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  resultName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  FunctionToBlockMutator  mutator  
[buglab_swap_variables]^Node newBlock = mutator.mutate ( fnName, resultName, callNode, fnNode, needsDefaultReturnResult, isCallInLoop ) ;^408^409^410^^^393^423^Node newBlock = mutator.mutate ( fnName, fnNode, callNode, resultName, needsDefaultReturnResult, isCallInLoop ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineFunction [RETURN_TYPE] Node   Node callNode Node fnNode String fnName [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  resultName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  FunctionToBlockMutator  mutator  
[buglab_swap_variables]^Node newBlock = isCallInLoop.mutate ( fnName, fnNode, callNode, resultName, needsDefaultReturnResult, mutator ) ;^408^409^410^^^393^423^Node newBlock = mutator.mutate ( fnName, fnNode, callNode, resultName, needsDefaultReturnResult, isCallInLoop ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineFunction [RETURN_TYPE] Node   Node callNode Node fnNode String fnName [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  resultName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  FunctionToBlockMutator  mutator  
[buglab_swap_variables]^greatGrandParent.addChildAfter (  grandParent ) ;^422^^^^^407^437^greatGrandParent.addChildAfter ( newBlock, grandParent ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineFunction [RETURN_TYPE] Node   Node callNode Node fnNode String fnName [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  resultName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  FunctionToBlockMutator  mutator  
[buglab_swap_variables]^greatGrandParent.addChildAfter ( grandParent, newBlock ) ;^422^^^^^407^437^greatGrandParent.addChildAfter ( newBlock, grandParent ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineFunction [RETURN_TYPE] Node   Node callNode Node fnNode String fnName [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  resultName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  FunctionToBlockMutator  mutator  
[buglab_swap_variables]^greatGrandParent.addChildAfter ( newBlock ) ;^422^^^^^407^437^greatGrandParent.addChildAfter ( newBlock, grandParent ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineFunction [RETURN_TYPE] Node   Node callNode Node fnNode String fnName [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  resultName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  FunctionToBlockMutator  mutator  
[buglab_swap_variables]^greatGrandParent.replaceChild (  newBlock ) ;^429^^^^^414^444^greatGrandParent.replaceChild ( grandParent, newBlock ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineFunction [RETURN_TYPE] Node   Node callNode Node fnNode String fnName [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  resultName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  FunctionToBlockMutator  mutator  
[buglab_swap_variables]^greatGrandParent.replaceChild ( newBlock, grandParent ) ;^429^^^^^414^444^greatGrandParent.replaceChild ( grandParent, newBlock ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineFunction [RETURN_TYPE] Node   Node callNode Node fnNode String fnName [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  resultName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  FunctionToBlockMutator  mutator  
[buglab_swap_variables]^greatGrandParent.replaceChild ( grandParent ) ;^429^^^^^414^444^greatGrandParent.replaceChild ( grandParent, newBlock ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineFunction [RETURN_TYPE] Node   Node callNode Node fnNode String fnName [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  resultName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  FunctionToBlockMutator  mutator  
[buglab_swap_variables]^grandParent.replaceChild ( newBlock, parent ) ;^435^^^^^420^450^grandParent.replaceChild ( parent, newBlock ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineFunction [RETURN_TYPE] Node   Node callNode Node fnNode String fnName [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  resultName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  FunctionToBlockMutator  mutator  
[buglab_swap_variables]^grandParent.replaceChild (  newBlock ) ;^435^^^^^420^450^grandParent.replaceChild ( parent, newBlock ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineFunction [RETURN_TYPE] Node   Node callNode Node fnNode String fnName [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  resultName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  FunctionToBlockMutator  mutator  
[buglab_swap_variables]^grandParent.replaceChild ( parent ) ;^435^^^^^420^450^grandParent.replaceChild ( parent, newBlock ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineFunction [RETURN_TYPE] Node   Node callNode Node fnNode String fnName [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  resultName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  FunctionToBlockMutator  mutator  
[buglab_swap_variables]^newBlock.addChildrenToFront ( NodeUtil.newVarNode (  null )  ) ;^451^^^^^436^466^newBlock.addChildrenToFront ( NodeUtil.newVarNode ( resultName, null )  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineFunction [RETURN_TYPE] Node   Node callNode Node fnNode String fnName [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  resultName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  FunctionToBlockMutator  mutator  
[buglab_swap_variables]^injectionPointParent.addChildBefore ( injectionPoint, newBlock ) ;^454^^^^^439^469^injectionPointParent.addChildBefore ( newBlock, injectionPoint ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineFunction [RETURN_TYPE] Node   Node callNode Node fnNode String fnName [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  resultName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  FunctionToBlockMutator  mutator  
[buglab_swap_variables]^injectionPointParent.addChildBefore (  injectionPoint ) ;^454^^^^^439^469^injectionPointParent.addChildBefore ( newBlock, injectionPoint ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineFunction [RETURN_TYPE] Node   Node callNode Node fnNode String fnName [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  resultName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  FunctionToBlockMutator  mutator  
[buglab_swap_variables]^injectionPointParent.addChildBefore ( newBlock ) ;^454^^^^^439^469^injectionPointParent.addChildBefore ( newBlock, injectionPoint ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineFunction [RETURN_TYPE] Node   Node callNode Node fnNode String fnName [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  resultName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  FunctionToBlockMutator  mutator  
[buglab_swap_variables]^parent.replaceChild (  Node.newString ( Token.NAME, resultName )  ) ;^457^^^^^442^472^parent.replaceChild ( callNode, Node.newString ( Token.NAME, resultName )  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineFunction [RETURN_TYPE] Node   Node callNode Node fnNode String fnName [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  resultName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  FunctionToBlockMutator  mutator  
[buglab_swap_variables]^parent.replaceChild ( callNode, Node.newString ( Token.NAME )  ) ;^457^^^^^442^472^parent.replaceChild ( callNode, Node.newString ( Token.NAME, resultName )  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineFunction [RETURN_TYPE] Node   Node callNode Node fnNode String fnName [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  String  fnName  resultName  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  FunctionToBlockMutator  mutator  
[buglab_swap_variables]^if  ( !callMeetsBlockInliningRequirements (  callNode, fnNode, namesToAlias )  )  {^538^539^^^^526^548^if  ( !callMeetsBlockInliningRequirements ( t, callNode, fnNode, namesToAlias )  )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceAsStatementBlock [RETURN_TYPE] FunctionInjector$CanInlineResult   NodeTraversal t Node callNode Node fnNode String> namesToAlias [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  namesToAlias  needAliases  NodeTraversal  t  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[buglab_swap_variables]^if  ( !callMeetsBlockInliningRequirements ( t, fnNode, callNode, namesToAlias )  )  {^538^539^^^^526^548^if  ( !callMeetsBlockInliningRequirements ( t, callNode, fnNode, namesToAlias )  )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceAsStatementBlock [RETURN_TYPE] FunctionInjector$CanInlineResult   NodeTraversal t Node callNode Node fnNode String> namesToAlias [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  namesToAlias  needAliases  NodeTraversal  t  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[buglab_swap_variables]^if  ( !callMeetsBlockInliningRequirements ( t,  fnNode, namesToAlias )  )  {^538^539^^^^526^548^if  ( !callMeetsBlockInliningRequirements ( t, callNode, fnNode, namesToAlias )  )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceAsStatementBlock [RETURN_TYPE] FunctionInjector$CanInlineResult   NodeTraversal t Node callNode Node fnNode String> namesToAlias [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  namesToAlias  needAliases  NodeTraversal  t  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[buglab_swap_variables]^if  ( !callMeetsBlockInliningRequirements ( t, callNode, namesToAlias, fnNode )  )  {^538^539^^^^526^548^if  ( !callMeetsBlockInliningRequirements ( t, callNode, fnNode, namesToAlias )  )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceAsStatementBlock [RETURN_TYPE] FunctionInjector$CanInlineResult   NodeTraversal t Node callNode Node fnNode String> namesToAlias [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  namesToAlias  needAliases  NodeTraversal  t  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[buglab_swap_variables]^if  ( !callMeetsBlockInliningRequirements ( t, callNode,  namesToAlias )  )  {^538^539^^^^526^548^if  ( !callMeetsBlockInliningRequirements ( t, callNode, fnNode, namesToAlias )  )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceAsStatementBlock [RETURN_TYPE] FunctionInjector$CanInlineResult   NodeTraversal t Node callNode Node fnNode String> namesToAlias [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  namesToAlias  needAliases  NodeTraversal  t  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[buglab_swap_variables]^if  ( !callMeetsBlockInliningRequirements ( t, callNode, fnNode )  )  {^538^539^^^^526^548^if  ( !callMeetsBlockInliningRequirements ( t, callNode, fnNode, namesToAlias )  )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceAsStatementBlock [RETURN_TYPE] FunctionInjector$CanInlineResult   NodeTraversal t Node callNode Node fnNode String> namesToAlias [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  namesToAlias  needAliases  NodeTraversal  t  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[buglab_swap_variables]^if  ( !callMeetsBlockInliningRequirements ( fnNode, callNode, t, namesToAlias )  )  {^538^539^^^^526^548^if  ( !callMeetsBlockInliningRequirements ( t, callNode, fnNode, namesToAlias )  )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceAsStatementBlock [RETURN_TYPE] FunctionInjector$CanInlineResult   NodeTraversal t Node callNode Node fnNode String> namesToAlias [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  namesToAlias  needAliases  NodeTraversal  t  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[buglab_swap_variables]^if  ( !callMeetsBlockInliningRequirements ( namesToAlias, callNode, fnNode, t )  )  {^538^539^^^^526^548^if  ( !callMeetsBlockInliningRequirements ( t, callNode, fnNode, namesToAlias )  )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceAsStatementBlock [RETURN_TYPE] FunctionInjector$CanInlineResult   NodeTraversal t Node callNode Node fnNode String> namesToAlias [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  knownConstants  namesToAlias  needAliases  NodeTraversal  t  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[buglab_swap_variables]^if  ( callerContainsFunction && fnContainsVars )  {^578^^^^^563^593^if  ( fnContainsVars && callerContainsFunction )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] callMeetsBlockInliningRequirements [RETURN_TYPE] boolean   NodeTraversal t Node callNode Node fnNode String> namesToAlias [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  NodeTraversal  t  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  Map  args  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[buglab_swap_variables]^FunctionArgumentInjector.maybeAddTempsForCallArguments ( args, fnNode, allNamesToAlias, compiler.getCodingConvention (  )  ) ;^592^593^^^^577^607^FunctionArgumentInjector.maybeAddTempsForCallArguments ( fnNode, args, allNamesToAlias, compiler.getCodingConvention (  )  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] callMeetsBlockInliningRequirements [RETURN_TYPE] boolean   NodeTraversal t Node callNode Node fnNode String> namesToAlias [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  NodeTraversal  t  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  Map  args  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[buglab_swap_variables]^FunctionArgumentInjector.maybeAddTempsForCallArguments (  args, allNamesToAlias, compiler.getCodingConvention (  )  ) ;^592^593^^^^577^607^FunctionArgumentInjector.maybeAddTempsForCallArguments ( fnNode, args, allNamesToAlias, compiler.getCodingConvention (  )  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] callMeetsBlockInliningRequirements [RETURN_TYPE] boolean   NodeTraversal t Node callNode Node fnNode String> namesToAlias [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  NodeTraversal  t  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  Map  args  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[buglab_swap_variables]^FunctionArgumentInjector.maybeAddTempsForCallArguments ( fnNode,  allNamesToAlias, compiler.getCodingConvention (  )  ) ;^592^593^^^^577^607^FunctionArgumentInjector.maybeAddTempsForCallArguments ( fnNode, args, allNamesToAlias, compiler.getCodingConvention (  )  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] callMeetsBlockInliningRequirements [RETURN_TYPE] boolean   NodeTraversal t Node callNode Node fnNode String> namesToAlias [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  NodeTraversal  t  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  Map  args  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[buglab_swap_variables]^FunctionArgumentInjector.maybeAddTempsForCallArguments ( fnNode, allNamesToAlias, args, compiler.getCodingConvention (  )  ) ;^592^593^^^^577^607^FunctionArgumentInjector.maybeAddTempsForCallArguments ( fnNode, args, allNamesToAlias, compiler.getCodingConvention (  )  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] callMeetsBlockInliningRequirements [RETURN_TYPE] boolean   NodeTraversal t Node callNode Node fnNode String> namesToAlias [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  NodeTraversal  t  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  Map  args  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[buglab_swap_variables]^FunctionArgumentInjector.maybeAddTempsForCallArguments ( fnNode, args,  compiler.getCodingConvention (  )  ) ;^592^593^^^^577^607^FunctionArgumentInjector.maybeAddTempsForCallArguments ( fnNode, args, allNamesToAlias, compiler.getCodingConvention (  )  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] callMeetsBlockInliningRequirements [RETURN_TYPE] boolean   NodeTraversal t Node callNode Node fnNode String> namesToAlias [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  NodeTraversal  t  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  Map  args  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[buglab_swap_variables]^FunctionArgumentInjector.maybeAddTempsForCallArguments ( fnNode, compiler, allNamesToAlias, args.getCodingConvention (  )  ) ;^592^593^^^^577^607^FunctionArgumentInjector.maybeAddTempsForCallArguments ( fnNode, args, allNamesToAlias, compiler.getCodingConvention (  )  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] callMeetsBlockInliningRequirements [RETURN_TYPE] boolean   NodeTraversal t Node callNode Node fnNode String> namesToAlias [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  NodeTraversal  t  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  Map  args  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[buglab_swap_variables]^FunctionArgumentInjector.maybeAddTempsForCallArguments ( fnNode, args, allNamesToAlias.getCodingConvention (  )  ) ;^592^593^^^^577^607^FunctionArgumentInjector.maybeAddTempsForCallArguments ( fnNode, args, allNamesToAlias, compiler.getCodingConvention (  )  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] callMeetsBlockInliningRequirements [RETURN_TYPE] boolean   NodeTraversal t Node callNode Node fnNode String> namesToAlias [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  NodeTraversal  t  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  Map  args  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[buglab_swap_variables]^Map<String, Node> args = FunctionArgumentInjector.getFunctionCallParameterMap ( this.safeNameIdSupplier, callNode, fnNode ) ;^585^586^587^^^570^600^Map<String, Node> args = FunctionArgumentInjector.getFunctionCallParameterMap ( fnNode, callNode, this.safeNameIdSupplier ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] callMeetsBlockInliningRequirements [RETURN_TYPE] boolean   NodeTraversal t Node callNode Node fnNode String> namesToAlias [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  NodeTraversal  t  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  Map  args  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[buglab_swap_variables]^Map<String, Node> args = FunctionArgumentInjector.getFunctionCallParameterMap (  callNode, this.safeNameIdSupplier ) ;^585^586^587^^^570^600^Map<String, Node> args = FunctionArgumentInjector.getFunctionCallParameterMap ( fnNode, callNode, this.safeNameIdSupplier ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] callMeetsBlockInliningRequirements [RETURN_TYPE] boolean   NodeTraversal t Node callNode Node fnNode String> namesToAlias [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  NodeTraversal  t  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  Map  args  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[buglab_swap_variables]^Map<String, Node> args = FunctionArgumentInjector.getFunctionCallParameterMap ( fnNode, this.safeNameIdSupplier, callNode ) ;^585^586^587^^^570^600^Map<String, Node> args = FunctionArgumentInjector.getFunctionCallParameterMap ( fnNode, callNode, this.safeNameIdSupplier ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] callMeetsBlockInliningRequirements [RETURN_TYPE] boolean   NodeTraversal t Node callNode Node fnNode String> namesToAlias [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  NodeTraversal  t  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  Map  args  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[buglab_swap_variables]^Map<String, Node> args = FunctionArgumentInjector.getFunctionCallParameterMap ( fnNode,  this.safeNameIdSupplier ) ;^585^586^587^^^570^600^Map<String, Node> args = FunctionArgumentInjector.getFunctionCallParameterMap ( fnNode, callNode, this.safeNameIdSupplier ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] callMeetsBlockInliningRequirements [RETURN_TYPE] boolean   NodeTraversal t Node callNode Node fnNode String> namesToAlias [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  NodeTraversal  t  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  Map  args  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[buglab_swap_variables]^Map<String, Node> args = FunctionArgumentInjector.getFunctionCallParameterMap ( fnNode, callNode ) ;^585^586^587^^^570^600^Map<String, Node> args = FunctionArgumentInjector.getFunctionCallParameterMap ( fnNode, callNode, this.safeNameIdSupplier ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] callMeetsBlockInliningRequirements [RETURN_TYPE] boolean   NodeTraversal t Node callNode Node fnNode String> namesToAlias [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  NodeTraversal  t  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  Map  args  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[buglab_swap_variables]^FunctionArgumentInjector.getFunctionCallParameterMap ( callNode, fnNode, this.safeNameIdSupplier ) ;^586^587^^^^571^601^FunctionArgumentInjector.getFunctionCallParameterMap ( fnNode, callNode, this.safeNameIdSupplier ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] callMeetsBlockInliningRequirements [RETURN_TYPE] boolean   NodeTraversal t Node callNode Node fnNode String> namesToAlias [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  NodeTraversal  t  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  Map  args  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[buglab_swap_variables]^FunctionArgumentInjector.getFunctionCallParameterMap (  callNode, this.safeNameIdSupplier ) ;^586^587^^^^571^601^FunctionArgumentInjector.getFunctionCallParameterMap ( fnNode, callNode, this.safeNameIdSupplier ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] callMeetsBlockInliningRequirements [RETURN_TYPE] boolean   NodeTraversal t Node callNode Node fnNode String> namesToAlias [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  NodeTraversal  t  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  Map  args  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[buglab_swap_variables]^FunctionArgumentInjector.getFunctionCallParameterMap ( fnNode, this.safeNameIdSupplier, callNode ) ;^586^587^^^^571^601^FunctionArgumentInjector.getFunctionCallParameterMap ( fnNode, callNode, this.safeNameIdSupplier ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] callMeetsBlockInliningRequirements [RETURN_TYPE] boolean   NodeTraversal t Node callNode Node fnNode String> namesToAlias [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  NodeTraversal  t  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  Map  args  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[buglab_swap_variables]^FunctionArgumentInjector.getFunctionCallParameterMap ( fnNode,  this.safeNameIdSupplier ) ;^586^587^^^^571^601^FunctionArgumentInjector.getFunctionCallParameterMap ( fnNode, callNode, this.safeNameIdSupplier ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] callMeetsBlockInliningRequirements [RETURN_TYPE] boolean   NodeTraversal t Node callNode Node fnNode String> namesToAlias [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  NodeTraversal  t  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  Map  args  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[buglab_swap_variables]^FunctionArgumentInjector.getFunctionCallParameterMap ( this.safeNameIdSupplier, callNode, fnNode ) ;^586^587^^^^571^601^FunctionArgumentInjector.getFunctionCallParameterMap ( fnNode, callNode, this.safeNameIdSupplier ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] callMeetsBlockInliningRequirements [RETURN_TYPE] boolean   NodeTraversal t Node callNode Node fnNode String> namesToAlias [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  NodeTraversal  t  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  Map  args  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[buglab_swap_variables]^FunctionArgumentInjector.getFunctionCallParameterMap ( fnNode, callNode ) ;^586^587^^^^571^601^FunctionArgumentInjector.getFunctionCallParameterMap ( fnNode, callNode, this.safeNameIdSupplier ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] callMeetsBlockInliningRequirements [RETURN_TYPE] boolean   NodeTraversal t Node callNode Node fnNode String> namesToAlias [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  NodeTraversal  t  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  Map  args  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[buglab_swap_variables]^FunctionArgumentInjector.maybeAddTempsForCallArguments ( allNamesToAlias, args, fnNode, compiler.getCodingConvention (  )  ) ;^592^593^^^^577^607^FunctionArgumentInjector.maybeAddTempsForCallArguments ( fnNode, args, allNamesToAlias, compiler.getCodingConvention (  )  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] callMeetsBlockInliningRequirements [RETURN_TYPE] boolean   NodeTraversal t Node callNode Node fnNode String> namesToAlias [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  NodeTraversal  t  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  Map  args  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[buglab_swap_variables]^FunctionArgumentInjector.maybeAddTempsForCallArguments ( fnNode, args, compiler, allNamesToAlias.getCodingConvention (  )  ) ;^592^593^^^^577^607^FunctionArgumentInjector.maybeAddTempsForCallArguments ( fnNode, args, allNamesToAlias, compiler.getCodingConvention (  )  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] callMeetsBlockInliningRequirements [RETURN_TYPE] boolean   NodeTraversal t Node callNode Node fnNode String> namesToAlias [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  NodeTraversal  t  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  Map  args  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[buglab_swap_variables]^FunctionArgumentInjector.maybeAddTempsForCallArguments ( compiler, args, allNamesToAlias, fnNode.getCodingConvention (  )  ) ;^592^593^^^^577^607^FunctionArgumentInjector.maybeAddTempsForCallArguments ( fnNode, args, allNamesToAlias, compiler.getCodingConvention (  )  ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] callMeetsBlockInliningRequirements [RETURN_TYPE] boolean   NodeTraversal t Node callNode Node fnNode String> namesToAlias [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  NodeTraversal  t  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  Map  args  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[buglab_swap_variables]^Map<String, Node> args = FunctionArgumentInjector.getFunctionCallParameterMap ( callNode, fnNode, this.safeNameIdSupplier ) ;^585^586^587^^^570^600^Map<String, Node> args = FunctionArgumentInjector.getFunctionCallParameterMap ( fnNode, callNode, this.safeNameIdSupplier ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] callMeetsBlockInliningRequirements [RETURN_TYPE] boolean   NodeTraversal t Node callNode Node fnNode String> namesToAlias [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  NodeTraversal  t  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  Map  args  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[buglab_swap_variables]^if  ( NodeUtil.mayEffectMutableState ( cArg ) && NodeUtil.getNameReferenceCount ( fnParam, block.getString (  )  )  > 1 )  {^650^651^652^^^635^665^if  ( NodeUtil.mayEffectMutableState ( cArg ) && NodeUtil.getNameReferenceCount ( block, fnParam.getString (  )  )  > 1 )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceDirectly [RETURN_TYPE] FunctionInjector$CanInlineResult   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[buglab_swap_variables]^if  ( NodeUtil.mayEffectMutableState ( cArg ) && NodeUtil.getNameReferenceCount (  fnParam.getString (  )  )  > 1 )  {^650^651^652^^^635^665^if  ( NodeUtil.mayEffectMutableState ( cArg ) && NodeUtil.getNameReferenceCount ( block, fnParam.getString (  )  )  > 1 )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceDirectly [RETURN_TYPE] FunctionInjector$CanInlineResult   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[buglab_swap_variables]^if  ( NodeUtil.mayEffectMutableState ( fnParam ) && NodeUtil.getNameReferenceCount ( block, cArg.getString (  )  )  > 1 )  {^650^651^652^^^635^665^if  ( NodeUtil.mayEffectMutableState ( cArg ) && NodeUtil.getNameReferenceCount ( block, fnParam.getString (  )  )  > 1 )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceDirectly [RETURN_TYPE] FunctionInjector$CanInlineResult   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[buglab_swap_variables]^if  ( NodeUtil.mayEffectMutableState ( cArg ) && NodeUtil.getNameReferenceCount ( block.getString (  )  )  > 1 )  {^650^651^652^^^635^665^if  ( NodeUtil.mayEffectMutableState ( cArg ) && NodeUtil.getNameReferenceCount ( block, fnParam.getString (  )  )  > 1 )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceDirectly [RETURN_TYPE] FunctionInjector$CanInlineResult   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[buglab_swap_variables]^&& NodeUtil.getNameReferenceCount ( fnParam, block.getString (  )  )  > 1 )  {^651^652^^^^636^666^&& NodeUtil.getNameReferenceCount ( block, fnParam.getString (  )  )  > 1 )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceDirectly [RETURN_TYPE] FunctionInjector$CanInlineResult   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[buglab_swap_variables]^&& NodeUtil.getNameReferenceCount (  fnParam.getString (  )  )  > 1 )  {^651^652^^^^636^666^&& NodeUtil.getNameReferenceCount ( block, fnParam.getString (  )  )  > 1 )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceDirectly [RETURN_TYPE] FunctionInjector$CanInlineResult   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[buglab_swap_variables]^&& NodeUtil.getNameReferenceCount ( block.getString (  )  )  > 1 )  {^651^652^^^^636^666^&& NodeUtil.getNameReferenceCount ( block, fnParam.getString (  )  )  > 1 )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceDirectly [RETURN_TYPE] FunctionInjector$CanInlineResult   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[buglab_swap_variables]^if  ( NodeUtil.mayEffectMutableState ( block ) && NodeUtil.getNameReferenceCount ( cArg, fnParam.getString (  )  )  > 1 )  {^650^651^652^^^635^665^if  ( NodeUtil.mayEffectMutableState ( cArg ) && NodeUtil.getNameReferenceCount ( block, fnParam.getString (  )  )  > 1 )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] canInlineReferenceDirectly [RETURN_TYPE] FunctionInjector$CanInlineResult   Node callNode Node fnNode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  fnContainsVars  hasArgs  isCallInLoop  needsDefaultReturnResult  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  
[buglab_swap_variables]^boolean checkModules = fnModule && isRemovable != null;^695^^^^^680^710^boolean checkModules = isRemovable && fnModule != null;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inliningLowersCost [RETURN_TYPE] boolean   JSModule fnModule Node fnNode Reference> refs String> namesToAlias boolean isRemovable boolean referencesThis [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Reference  ref  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  callCost  costDeltaBlock  costDeltaDirect  overallCallCost  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  JSModuleGraph  moduleGraph  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  InliningMode  BLOCK  DIRECT  mode  JSModule  fnModule  module  Collection  refs  Supplier  safeNameIdSupplier  
[buglab_swap_variables]^if  ( ref.mode.mode == InliningMode.BLOCK )  {^699^^^^^684^714^if  ( ref.mode == InliningMode.BLOCK )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inliningLowersCost [RETURN_TYPE] boolean   JSModule fnModule Node fnNode Reference> refs String> namesToAlias boolean isRemovable boolean referencesThis [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Reference  ref  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  callCost  costDeltaBlock  costDeltaDirect  overallCallCost  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  JSModuleGraph  moduleGraph  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  InliningMode  BLOCK  DIRECT  mode  JSModule  fnModule  module  Collection  refs  Supplier  safeNameIdSupplier  
[buglab_swap_variables]^if  ( ref == InliningMode.BLOCK )  {^699^^^^^684^714^if  ( ref.mode == InliningMode.BLOCK )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inliningLowersCost [RETURN_TYPE] boolean   JSModule fnModule Node fnNode Reference> refs String> namesToAlias boolean isRemovable boolean referencesThis [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Reference  ref  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  callCost  costDeltaBlock  costDeltaDirect  overallCallCost  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  JSModuleGraph  moduleGraph  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  InliningMode  BLOCK  DIRECT  mode  JSModule  fnModule  module  Collection  refs  Supplier  safeNameIdSupplier  
[buglab_swap_variables]^if  ( fnModule != ref.module && !moduleGraph.dependsOn ( ref.module, fnModule )  )  {^705^706^^^^690^720^if  ( ref.module != fnModule && !moduleGraph.dependsOn ( ref.module, fnModule )  )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inliningLowersCost [RETURN_TYPE] boolean   JSModule fnModule Node fnNode Reference> refs String> namesToAlias boolean isRemovable boolean referencesThis [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Reference  ref  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  callCost  costDeltaBlock  costDeltaDirect  overallCallCost  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  JSModuleGraph  moduleGraph  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  InliningMode  BLOCK  DIRECT  mode  JSModule  fnModule  module  Collection  refs  Supplier  safeNameIdSupplier  
[buglab_swap_variables]^if  ( ref.module != fnModule && !moduleGraph.dependsOn ( ref.module )  )  {^705^706^^^^690^720^if  ( ref.module != fnModule && !moduleGraph.dependsOn ( ref.module, fnModule )  )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inliningLowersCost [RETURN_TYPE] boolean   JSModule fnModule Node fnNode Reference> refs String> namesToAlias boolean isRemovable boolean referencesThis [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Reference  ref  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  callCost  costDeltaBlock  costDeltaDirect  overallCallCost  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  JSModuleGraph  moduleGraph  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  InliningMode  BLOCK  DIRECT  mode  JSModule  fnModule  module  Collection  refs  Supplier  safeNameIdSupplier  
[buglab_swap_variables]^if  ( ref.module != fnModule && !moduleGraph.dependsOn (  fnModule )  )  {^705^706^^^^690^720^if  ( ref.module != fnModule && !moduleGraph.dependsOn ( ref.module, fnModule )  )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inliningLowersCost [RETURN_TYPE] boolean   JSModule fnModule Node fnNode Reference> refs String> namesToAlias boolean isRemovable boolean referencesThis [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Reference  ref  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  callCost  costDeltaBlock  costDeltaDirect  overallCallCost  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  JSModuleGraph  moduleGraph  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  InliningMode  BLOCK  DIRECT  mode  JSModule  fnModule  module  Collection  refs  Supplier  safeNameIdSupplier  
[buglab_swap_variables]^!moduleGraph.dependsOn ( fnModule.module, ref )  )  {^706^^^^^691^721^!moduleGraph.dependsOn ( ref.module, fnModule )  )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inliningLowersCost [RETURN_TYPE] boolean   JSModule fnModule Node fnNode Reference> refs String> namesToAlias boolean isRemovable boolean referencesThis [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Reference  ref  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  callCost  costDeltaBlock  costDeltaDirect  overallCallCost  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  JSModuleGraph  moduleGraph  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  InliningMode  BLOCK  DIRECT  mode  JSModule  fnModule  module  Collection  refs  Supplier  safeNameIdSupplier  
[buglab_swap_variables]^!moduleGraph.dependsOn ( fnModule, ref.module )  )  {^706^^^^^691^721^!moduleGraph.dependsOn ( ref.module, fnModule )  )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inliningLowersCost [RETURN_TYPE] boolean   JSModule fnModule Node fnNode Reference> refs String> namesToAlias boolean isRemovable boolean referencesThis [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Reference  ref  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  callCost  costDeltaBlock  costDeltaDirect  overallCallCost  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  JSModuleGraph  moduleGraph  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  InliningMode  BLOCK  DIRECT  mode  JSModule  fnModule  module  Collection  refs  Supplier  safeNameIdSupplier  
[buglab_swap_variables]^!moduleGraph.dependsOn ( ref.module )  )  {^706^^^^^691^721^!moduleGraph.dependsOn ( ref.module, fnModule )  )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inliningLowersCost [RETURN_TYPE] boolean   JSModule fnModule Node fnNode Reference> refs String> namesToAlias boolean isRemovable boolean referencesThis [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Reference  ref  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  callCost  costDeltaBlock  costDeltaDirect  overallCallCost  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  JSModuleGraph  moduleGraph  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  InliningMode  BLOCK  DIRECT  mode  JSModule  fnModule  module  Collection  refs  Supplier  safeNameIdSupplier  
[buglab_swap_variables]^!moduleGraph.dependsOn ( ref, fnModule )  )  {^706^^^^^691^721^!moduleGraph.dependsOn ( ref.module, fnModule )  )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inliningLowersCost [RETURN_TYPE] boolean   JSModule fnModule Node fnNode Reference> refs String> namesToAlias boolean isRemovable boolean referencesThis [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Reference  ref  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  callCost  costDeltaBlock  costDeltaDirect  overallCallCost  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  JSModuleGraph  moduleGraph  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  InliningMode  BLOCK  DIRECT  mode  JSModule  fnModule  module  Collection  refs  Supplier  safeNameIdSupplier  
[buglab_swap_variables]^!moduleGraph.dependsOn (  fnModule )  )  {^706^^^^^691^721^!moduleGraph.dependsOn ( ref.module, fnModule )  )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inliningLowersCost [RETURN_TYPE] boolean   JSModule fnModule Node fnNode Reference> refs String> namesToAlias boolean isRemovable boolean referencesThis [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Reference  ref  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  callCost  costDeltaBlock  costDeltaDirect  overallCallCost  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  JSModuleGraph  moduleGraph  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  InliningMode  BLOCK  DIRECT  mode  JSModule  fnModule  module  Collection  refs  Supplier  safeNameIdSupplier  
[buglab_swap_variables]^if  ( ref.module.module != fnModule && !moduleGraph.dependsOn ( ref, fnModule )  )  {^705^706^^^^690^720^if  ( ref.module != fnModule && !moduleGraph.dependsOn ( ref.module, fnModule )  )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inliningLowersCost [RETURN_TYPE] boolean   JSModule fnModule Node fnNode Reference> refs String> namesToAlias boolean isRemovable boolean referencesThis [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Reference  ref  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  callCost  costDeltaBlock  costDeltaDirect  overallCallCost  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  JSModuleGraph  moduleGraph  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  InliningMode  BLOCK  DIRECT  mode  JSModule  fnModule  module  Collection  refs  Supplier  safeNameIdSupplier  
[buglab_swap_variables]^int referencesUsingDirectInlining = referencesUsingBlockInlining - referenceCount;^715^716^^^^700^730^int referencesUsingDirectInlining = referenceCount - referencesUsingBlockInlining;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inliningLowersCost [RETURN_TYPE] boolean   JSModule fnModule Node fnNode Reference> refs String> namesToAlias boolean isRemovable boolean referencesThis [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Reference  ref  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  callCost  costDeltaBlock  costDeltaDirect  overallCallCost  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  JSModuleGraph  moduleGraph  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  InliningMode  BLOCK  DIRECT  mode  JSModule  fnModule  module  Collection  refs  Supplier  safeNameIdSupplier  
[buglab_swap_variables]^if  ( referencesUsingDirectInlining == 1 && isRemovable && referenceCount == 1 )  {^724^725^^^^709^739^if  ( referenceCount == 1 && isRemovable && referencesUsingDirectInlining == 1 )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inliningLowersCost [RETURN_TYPE] boolean   JSModule fnModule Node fnNode Reference> refs String> namesToAlias boolean isRemovable boolean referencesThis [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Reference  ref  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  callCost  costDeltaBlock  costDeltaDirect  overallCallCost  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  JSModuleGraph  moduleGraph  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  InliningMode  BLOCK  DIRECT  mode  JSModule  fnModule  module  Collection  refs  Supplier  safeNameIdSupplier  
[buglab_swap_variables]^if  ( referenceCount == 1 && referencesUsingDirectInlining && isRemovable == 1 )  {^724^725^^^^709^739^if  ( referenceCount == 1 && isRemovable && referencesUsingDirectInlining == 1 )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inliningLowersCost [RETURN_TYPE] boolean   JSModule fnModule Node fnNode Reference> refs String> namesToAlias boolean isRemovable boolean referencesThis [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Reference  ref  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  callCost  costDeltaBlock  costDeltaDirect  overallCallCost  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  JSModuleGraph  moduleGraph  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  InliningMode  BLOCK  DIRECT  mode  JSModule  fnModule  module  Collection  refs  Supplier  safeNameIdSupplier  
[buglab_swap_variables]^int callCost = estimateCallCost ( referencesThis, fnNode ) ;^729^^^^^714^744^int callCost = estimateCallCost ( fnNode, referencesThis ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inliningLowersCost [RETURN_TYPE] boolean   JSModule fnModule Node fnNode Reference> refs String> namesToAlias boolean isRemovable boolean referencesThis [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Reference  ref  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  callCost  costDeltaBlock  costDeltaDirect  overallCallCost  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  JSModuleGraph  moduleGraph  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  InliningMode  BLOCK  DIRECT  mode  JSModule  fnModule  module  Collection  refs  Supplier  safeNameIdSupplier  
[buglab_swap_variables]^int callCost = estimateCallCost (  referencesThis ) ;^729^^^^^714^744^int callCost = estimateCallCost ( fnNode, referencesThis ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inliningLowersCost [RETURN_TYPE] boolean   JSModule fnModule Node fnNode Reference> refs String> namesToAlias boolean isRemovable boolean referencesThis [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Reference  ref  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  callCost  costDeltaBlock  costDeltaDirect  overallCallCost  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  JSModuleGraph  moduleGraph  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  InliningMode  BLOCK  DIRECT  mode  JSModule  fnModule  module  Collection  refs  Supplier  safeNameIdSupplier  
[buglab_swap_variables]^int callCost = estimateCallCost ( fnNode ) ;^729^^^^^714^744^int callCost = estimateCallCost ( fnNode, referencesThis ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inliningLowersCost [RETURN_TYPE] boolean   JSModule fnModule Node fnNode Reference> refs String> namesToAlias boolean isRemovable boolean referencesThis [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Reference  ref  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  callCost  costDeltaBlock  costDeltaDirect  overallCallCost  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  JSModuleGraph  moduleGraph  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  InliningMode  BLOCK  DIRECT  mode  JSModule  fnModule  module  Collection  refs  Supplier  safeNameIdSupplier  
[buglab_swap_variables]^int overallCallCost = referenceCount * callCost;^730^^^^^715^745^int overallCallCost = callCost * referenceCount;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inliningLowersCost [RETURN_TYPE] boolean   JSModule fnModule Node fnNode Reference> refs String> namesToAlias boolean isRemovable boolean referencesThis [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Reference  ref  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  callCost  costDeltaBlock  costDeltaDirect  overallCallCost  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  JSModuleGraph  moduleGraph  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  InliningMode  BLOCK  DIRECT  mode  JSModule  fnModule  module  Collection  refs  Supplier  safeNameIdSupplier  
[buglab_swap_variables]^int costDeltaDirect = inlineCostDelta ( namesToAlias, fnNode, InliningMode.DIRECT ) ;^732^733^^^^717^747^int costDeltaDirect = inlineCostDelta ( fnNode, namesToAlias, InliningMode.DIRECT ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inliningLowersCost [RETURN_TYPE] boolean   JSModule fnModule Node fnNode Reference> refs String> namesToAlias boolean isRemovable boolean referencesThis [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Reference  ref  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  callCost  costDeltaBlock  costDeltaDirect  overallCallCost  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  JSModuleGraph  moduleGraph  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  InliningMode  BLOCK  DIRECT  mode  JSModule  fnModule  module  Collection  refs  Supplier  safeNameIdSupplier  
[buglab_swap_variables]^int costDeltaDirect = inlineCostDelta (  namesToAlias, InliningMode.DIRECT ) ;^732^733^^^^717^747^int costDeltaDirect = inlineCostDelta ( fnNode, namesToAlias, InliningMode.DIRECT ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inliningLowersCost [RETURN_TYPE] boolean   JSModule fnModule Node fnNode Reference> refs String> namesToAlias boolean isRemovable boolean referencesThis [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Reference  ref  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  callCost  costDeltaBlock  costDeltaDirect  overallCallCost  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  JSModuleGraph  moduleGraph  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  InliningMode  BLOCK  DIRECT  mode  JSModule  fnModule  module  Collection  refs  Supplier  safeNameIdSupplier  
[buglab_swap_variables]^int costDeltaDirect = inlineCostDelta ( fnNode,  InliningMode.DIRECT ) ;^732^733^^^^717^747^int costDeltaDirect = inlineCostDelta ( fnNode, namesToAlias, InliningMode.DIRECT ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inliningLowersCost [RETURN_TYPE] boolean   JSModule fnModule Node fnNode Reference> refs String> namesToAlias boolean isRemovable boolean referencesThis [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Reference  ref  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  callCost  costDeltaBlock  costDeltaDirect  overallCallCost  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  JSModuleGraph  moduleGraph  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  InliningMode  BLOCK  DIRECT  mode  JSModule  fnModule  module  Collection  refs  Supplier  safeNameIdSupplier  
[buglab_swap_variables]^int costDeltaBlock = inlineCostDelta (  namesToAlias, InliningMode.BLOCK ) ;^734^735^^^^719^749^int costDeltaBlock = inlineCostDelta ( fnNode, namesToAlias, InliningMode.BLOCK ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inliningLowersCost [RETURN_TYPE] boolean   JSModule fnModule Node fnNode Reference> refs String> namesToAlias boolean isRemovable boolean referencesThis [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Reference  ref  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  callCost  costDeltaBlock  costDeltaDirect  overallCallCost  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  JSModuleGraph  moduleGraph  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  InliningMode  BLOCK  DIRECT  mode  JSModule  fnModule  module  Collection  refs  Supplier  safeNameIdSupplier  
[buglab_swap_variables]^int costDeltaBlock = inlineCostDelta ( fnNode,  InliningMode.BLOCK ) ;^734^735^^^^719^749^int costDeltaBlock = inlineCostDelta ( fnNode, namesToAlias, InliningMode.BLOCK ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inliningLowersCost [RETURN_TYPE] boolean   JSModule fnModule Node fnNode Reference> refs String> namesToAlias boolean isRemovable boolean referencesThis [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Reference  ref  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  callCost  costDeltaBlock  costDeltaDirect  overallCallCost  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  JSModuleGraph  moduleGraph  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  InliningMode  BLOCK  DIRECT  mode  JSModule  fnModule  module  Collection  refs  Supplier  safeNameIdSupplier  
[buglab_swap_variables]^return doesLowerCost ( referencesUsingBlockInlining, overallCallCost, referencesUsingDirectInlining, costDeltaDirect, fnNode, costDeltaBlock, isRemovable ) ;^737^738^739^740^^722^752^return doesLowerCost ( fnNode, overallCallCost, referencesUsingDirectInlining, costDeltaDirect, referencesUsingBlockInlining, costDeltaBlock, isRemovable ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inliningLowersCost [RETURN_TYPE] boolean   JSModule fnModule Node fnNode Reference> refs String> namesToAlias boolean isRemovable boolean referencesThis [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Reference  ref  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  callCost  costDeltaBlock  costDeltaDirect  overallCallCost  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  JSModuleGraph  moduleGraph  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  InliningMode  BLOCK  DIRECT  mode  JSModule  fnModule  module  Collection  refs  Supplier  safeNameIdSupplier  
[buglab_swap_variables]^return doesLowerCost (  overallCallCost, referencesUsingDirectInlining, costDeltaDirect, referencesUsingBlockInlining, costDeltaBlock, isRemovable ) ;^737^738^739^740^^722^752^return doesLowerCost ( fnNode, overallCallCost, referencesUsingDirectInlining, costDeltaDirect, referencesUsingBlockInlining, costDeltaBlock, isRemovable ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inliningLowersCost [RETURN_TYPE] boolean   JSModule fnModule Node fnNode Reference> refs String> namesToAlias boolean isRemovable boolean referencesThis [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Reference  ref  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  callCost  costDeltaBlock  costDeltaDirect  overallCallCost  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  JSModuleGraph  moduleGraph  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  InliningMode  BLOCK  DIRECT  mode  JSModule  fnModule  module  Collection  refs  Supplier  safeNameIdSupplier  
[buglab_swap_variables]^return doesLowerCost ( fnNode, costDeltaDirect, referencesUsingDirectInlining, overallCallCost, referencesUsingBlockInlining, costDeltaBlock, isRemovable ) ;^737^738^739^740^^722^752^return doesLowerCost ( fnNode, overallCallCost, referencesUsingDirectInlining, costDeltaDirect, referencesUsingBlockInlining, costDeltaBlock, isRemovable ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inliningLowersCost [RETURN_TYPE] boolean   JSModule fnModule Node fnNode Reference> refs String> namesToAlias boolean isRemovable boolean referencesThis [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Reference  ref  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  callCost  costDeltaBlock  costDeltaDirect  overallCallCost  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  JSModuleGraph  moduleGraph  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  InliningMode  BLOCK  DIRECT  mode  JSModule  fnModule  module  Collection  refs  Supplier  safeNameIdSupplier  
[buglab_swap_variables]^return doesLowerCost ( fnNode,  referencesUsingDirectInlining, costDeltaDirect, referencesUsingBlockInlining, costDeltaBlock, isRemovable ) ;^737^738^739^740^^722^752^return doesLowerCost ( fnNode, overallCallCost, referencesUsingDirectInlining, costDeltaDirect, referencesUsingBlockInlining, costDeltaBlock, isRemovable ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inliningLowersCost [RETURN_TYPE] boolean   JSModule fnModule Node fnNode Reference> refs String> namesToAlias boolean isRemovable boolean referencesThis [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Reference  ref  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  callCost  costDeltaBlock  costDeltaDirect  overallCallCost  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  JSModuleGraph  moduleGraph  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  InliningMode  BLOCK  DIRECT  mode  JSModule  fnModule  module  Collection  refs  Supplier  safeNameIdSupplier  
[buglab_swap_variables]^return doesLowerCost ( fnNode, overallCallCost, costDeltaDirect, referencesUsingDirectInlining, referencesUsingBlockInlining, costDeltaBlock, isRemovable ) ;^737^738^739^740^^722^752^return doesLowerCost ( fnNode, overallCallCost, referencesUsingDirectInlining, costDeltaDirect, referencesUsingBlockInlining, costDeltaBlock, isRemovable ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inliningLowersCost [RETURN_TYPE] boolean   JSModule fnModule Node fnNode Reference> refs String> namesToAlias boolean isRemovable boolean referencesThis [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Reference  ref  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  callCost  costDeltaBlock  costDeltaDirect  overallCallCost  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  JSModuleGraph  moduleGraph  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  InliningMode  BLOCK  DIRECT  mode  JSModule  fnModule  module  Collection  refs  Supplier  safeNameIdSupplier  
[buglab_swap_variables]^return doesLowerCost ( fnNode, overallCallCost,  costDeltaDirect, referencesUsingBlockInlining, costDeltaBlock, isRemovable ) ;^737^738^739^740^^722^752^return doesLowerCost ( fnNode, overallCallCost, referencesUsingDirectInlining, costDeltaDirect, referencesUsingBlockInlining, costDeltaBlock, isRemovable ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inliningLowersCost [RETURN_TYPE] boolean   JSModule fnModule Node fnNode Reference> refs String> namesToAlias boolean isRemovable boolean referencesThis [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Reference  ref  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  callCost  costDeltaBlock  costDeltaDirect  overallCallCost  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  JSModuleGraph  moduleGraph  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  InliningMode  BLOCK  DIRECT  mode  JSModule  fnModule  module  Collection  refs  Supplier  safeNameIdSupplier  
[buglab_swap_variables]^return doesLowerCost ( fnNode, overallCallCost, referencesUsingDirectInlining, referencesUsingBlockInlining, costDeltaDirect, costDeltaBlock, isRemovable ) ;^737^738^739^740^^722^752^return doesLowerCost ( fnNode, overallCallCost, referencesUsingDirectInlining, costDeltaDirect, referencesUsingBlockInlining, costDeltaBlock, isRemovable ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inliningLowersCost [RETURN_TYPE] boolean   JSModule fnModule Node fnNode Reference> refs String> namesToAlias boolean isRemovable boolean referencesThis [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Reference  ref  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  callCost  costDeltaBlock  costDeltaDirect  overallCallCost  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  JSModuleGraph  moduleGraph  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  InliningMode  BLOCK  DIRECT  mode  JSModule  fnModule  module  Collection  refs  Supplier  safeNameIdSupplier  
[buglab_swap_variables]^return doesLowerCost ( fnNode, overallCallCost, referencesUsingDirectInlining,  referencesUsingBlockInlining, costDeltaBlock, isRemovable ) ;^737^738^739^740^^722^752^return doesLowerCost ( fnNode, overallCallCost, referencesUsingDirectInlining, costDeltaDirect, referencesUsingBlockInlining, costDeltaBlock, isRemovable ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inliningLowersCost [RETURN_TYPE] boolean   JSModule fnModule Node fnNode Reference> refs String> namesToAlias boolean isRemovable boolean referencesThis [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Reference  ref  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  callCost  costDeltaBlock  costDeltaDirect  overallCallCost  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  JSModuleGraph  moduleGraph  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  InliningMode  BLOCK  DIRECT  mode  JSModule  fnModule  module  Collection  refs  Supplier  safeNameIdSupplier  
[buglab_swap_variables]^return doesLowerCost ( fnNode, referencesUsingBlockInlining, referencesUsingDirectInlining, costDeltaDirect, overallCallCost, costDeltaBlock, isRemovable ) ;^737^738^739^740^^722^752^return doesLowerCost ( fnNode, overallCallCost, referencesUsingDirectInlining, costDeltaDirect, referencesUsingBlockInlining, costDeltaBlock, isRemovable ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inliningLowersCost [RETURN_TYPE] boolean   JSModule fnModule Node fnNode Reference> refs String> namesToAlias boolean isRemovable boolean referencesThis [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Reference  ref  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  callCost  costDeltaBlock  costDeltaDirect  overallCallCost  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  JSModuleGraph  moduleGraph  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  InliningMode  BLOCK  DIRECT  mode  JSModule  fnModule  module  Collection  refs  Supplier  safeNameIdSupplier  
[buglab_swap_variables]^return doesLowerCost ( fnNode, overallCallCost, referencesUsingDirectInlining, costDeltaDirect,  costDeltaBlock, isRemovable ) ;^737^738^739^740^^722^752^return doesLowerCost ( fnNode, overallCallCost, referencesUsingDirectInlining, costDeltaDirect, referencesUsingBlockInlining, costDeltaBlock, isRemovable ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inliningLowersCost [RETURN_TYPE] boolean   JSModule fnModule Node fnNode Reference> refs String> namesToAlias boolean isRemovable boolean referencesThis [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Reference  ref  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  callCost  costDeltaBlock  costDeltaDirect  overallCallCost  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  JSModuleGraph  moduleGraph  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  InliningMode  BLOCK  DIRECT  mode  JSModule  fnModule  module  Collection  refs  Supplier  safeNameIdSupplier  
[buglab_swap_variables]^return doesLowerCost ( fnNode, overallCallCost, referencesUsingDirectInlining, costDeltaDirect, costDeltaBlock, referencesUsingBlockInlining, isRemovable ) ;^737^738^739^740^^722^752^return doesLowerCost ( fnNode, overallCallCost, referencesUsingDirectInlining, costDeltaDirect, referencesUsingBlockInlining, costDeltaBlock, isRemovable ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inliningLowersCost [RETURN_TYPE] boolean   JSModule fnModule Node fnNode Reference> refs String> namesToAlias boolean isRemovable boolean referencesThis [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Reference  ref  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  callCost  costDeltaBlock  costDeltaDirect  overallCallCost  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  JSModuleGraph  moduleGraph  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  InliningMode  BLOCK  DIRECT  mode  JSModule  fnModule  module  Collection  refs  Supplier  safeNameIdSupplier  
[buglab_swap_variables]^return doesLowerCost ( fnNode, overallCallCost, referencesUsingDirectInlining, costDeltaDirect, referencesUsingBlockInlining,  isRemovable ) ;^737^738^739^740^^722^752^return doesLowerCost ( fnNode, overallCallCost, referencesUsingDirectInlining, costDeltaDirect, referencesUsingBlockInlining, costDeltaBlock, isRemovable ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inliningLowersCost [RETURN_TYPE] boolean   JSModule fnModule Node fnNode Reference> refs String> namesToAlias boolean isRemovable boolean referencesThis [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Reference  ref  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  callCost  costDeltaBlock  costDeltaDirect  overallCallCost  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  JSModuleGraph  moduleGraph  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  InliningMode  BLOCK  DIRECT  mode  JSModule  fnModule  module  Collection  refs  Supplier  safeNameIdSupplier  
[buglab_swap_variables]^return doesLowerCost ( fnNode, isRemovable, referencesUsingDirectInlining, costDeltaDirect, referencesUsingBlockInlining, costDeltaBlock, overallCallCost ) ;^737^738^739^740^^722^752^return doesLowerCost ( fnNode, overallCallCost, referencesUsingDirectInlining, costDeltaDirect, referencesUsingBlockInlining, costDeltaBlock, isRemovable ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inliningLowersCost [RETURN_TYPE] boolean   JSModule fnModule Node fnNode Reference> refs String> namesToAlias boolean isRemovable boolean referencesThis [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Reference  ref  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  callCost  costDeltaBlock  costDeltaDirect  overallCallCost  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  JSModuleGraph  moduleGraph  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  InliningMode  BLOCK  DIRECT  mode  JSModule  fnModule  module  Collection  refs  Supplier  safeNameIdSupplier  
[buglab_swap_variables]^return doesLowerCost ( fnNode, overallCallCost, referencesUsingDirectInlining, costDeltaDirect, referencesUsingBlockInlining, costDeltaBlock ) ;^737^738^739^740^^722^752^return doesLowerCost ( fnNode, overallCallCost, referencesUsingDirectInlining, costDeltaDirect, referencesUsingBlockInlining, costDeltaBlock, isRemovable ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inliningLowersCost [RETURN_TYPE] boolean   JSModule fnModule Node fnNode Reference> refs String> namesToAlias boolean isRemovable boolean referencesThis [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Reference  ref  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  callCost  costDeltaBlock  costDeltaDirect  overallCallCost  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  JSModuleGraph  moduleGraph  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  InliningMode  BLOCK  DIRECT  mode  JSModule  fnModule  module  Collection  refs  Supplier  safeNameIdSupplier  
[buglab_swap_variables]^return doesLowerCost ( referencesUsingDirectInlining, overallCallCost, fnNode, costDeltaDirect, referencesUsingBlockInlining, costDeltaBlock, isRemovable ) ;^737^738^739^740^^722^752^return doesLowerCost ( fnNode, overallCallCost, referencesUsingDirectInlining, costDeltaDirect, referencesUsingBlockInlining, costDeltaBlock, isRemovable ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inliningLowersCost [RETURN_TYPE] boolean   JSModule fnModule Node fnNode Reference> refs String> namesToAlias boolean isRemovable boolean referencesThis [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Reference  ref  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  callCost  costDeltaBlock  costDeltaDirect  overallCallCost  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  JSModuleGraph  moduleGraph  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  InliningMode  BLOCK  DIRECT  mode  JSModule  fnModule  module  Collection  refs  Supplier  safeNameIdSupplier  
[buglab_swap_variables]^return doesLowerCost ( fnNode, overallCallCost, costDeltaBlock, costDeltaDirect, referencesUsingBlockInlining, referencesUsingDirectInlining, isRemovable ) ;^737^738^739^740^^722^752^return doesLowerCost ( fnNode, overallCallCost, referencesUsingDirectInlining, costDeltaDirect, referencesUsingBlockInlining, costDeltaBlock, isRemovable ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inliningLowersCost [RETURN_TYPE] boolean   JSModule fnModule Node fnNode Reference> refs String> namesToAlias boolean isRemovable boolean referencesThis [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Reference  ref  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  callCost  costDeltaBlock  costDeltaDirect  overallCallCost  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  JSModuleGraph  moduleGraph  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  InliningMode  BLOCK  DIRECT  mode  JSModule  fnModule  module  Collection  refs  Supplier  safeNameIdSupplier  
[buglab_swap_variables]^return doesLowerCost ( fnNode, overallCallCost, referencesUsingBlockInlining, costDeltaDirect, referencesUsingDirectInlining, costDeltaBlock, isRemovable ) ;^737^738^739^740^^722^752^return doesLowerCost ( fnNode, overallCallCost, referencesUsingDirectInlining, costDeltaDirect, referencesUsingBlockInlining, costDeltaBlock, isRemovable ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inliningLowersCost [RETURN_TYPE] boolean   JSModule fnModule Node fnNode Reference> refs String> namesToAlias boolean isRemovable boolean referencesThis [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Reference  ref  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  callCost  costDeltaBlock  costDeltaDirect  overallCallCost  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  JSModuleGraph  moduleGraph  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  InliningMode  BLOCK  DIRECT  mode  JSModule  fnModule  module  Collection  refs  Supplier  safeNameIdSupplier  
[buglab_swap_variables]^return doesLowerCost ( fnNode, costDeltaBlock, referencesUsingDirectInlining, costDeltaDirect, referencesUsingBlockInlining, overallCallCost, isRemovable ) ;^737^738^739^740^^722^752^return doesLowerCost ( fnNode, overallCallCost, referencesUsingDirectInlining, costDeltaDirect, referencesUsingBlockInlining, costDeltaBlock, isRemovable ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inliningLowersCost [RETURN_TYPE] boolean   JSModule fnModule Node fnNode Reference> refs String> namesToAlias boolean isRemovable boolean referencesThis [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Reference  ref  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  callCost  costDeltaBlock  costDeltaDirect  overallCallCost  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  JSModuleGraph  moduleGraph  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  InliningMode  BLOCK  DIRECT  mode  JSModule  fnModule  module  Collection  refs  Supplier  safeNameIdSupplier  
[buglab_swap_variables]^return doesLowerCost ( fnNode, overallCallCost, referencesUsingDirectInlining, isRemovable, referencesUsingBlockInlining, costDeltaBlock, costDeltaDirect ) ;^737^738^739^740^^722^752^return doesLowerCost ( fnNode, overallCallCost, referencesUsingDirectInlining, costDeltaDirect, referencesUsingBlockInlining, costDeltaBlock, isRemovable ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inliningLowersCost [RETURN_TYPE] boolean   JSModule fnModule Node fnNode Reference> refs String> namesToAlias boolean isRemovable boolean referencesThis [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Reference  ref  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  callCost  costDeltaBlock  costDeltaDirect  overallCallCost  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  JSModuleGraph  moduleGraph  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  InliningMode  BLOCK  DIRECT  mode  JSModule  fnModule  module  Collection  refs  Supplier  safeNameIdSupplier  
[buglab_swap_variables]^int fnInstanceCount = removable + blockInlines -  ( directInlines ? 1 : 0 ) ;^757^^^^^750^774^int fnInstanceCount = directInlines + blockInlines -  ( removable ? 1 : 0 ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] doesLowerCost [RETURN_TYPE] boolean   Node fnNode int callCost int directInlines int costDeltaDirect int blockInlines int costDeltaBlock boolean removable [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  removable  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  fnModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  blockInlines  callCost  costDelta  costDeltaBlock  costDeltaDirect  directInlines  fnInstanceCount  overallCallCost  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  threshold  
[buglab_swap_variables]^int fnInstanceCount = directInlines + removable -  ( blockInlines ? 1 : 0 ) ;^757^^^^^750^774^int fnInstanceCount = directInlines + blockInlines -  ( removable ? 1 : 0 ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] doesLowerCost [RETURN_TYPE] boolean   Node fnNode int callCost int directInlines int costDeltaDirect int blockInlines int costDeltaBlock boolean removable [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  removable  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  fnModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  blockInlines  callCost  costDelta  costDeltaBlock  costDeltaDirect  directInlines  fnInstanceCount  overallCallCost  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  threshold  
[buglab_swap_variables]^if  ( costDeltaBlock > 0 && blockInlines > 0 )  {^763^^^^^750^774^if  ( blockInlines > 0 && costDeltaBlock > 0 )  {^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] doesLowerCost [RETURN_TYPE] boolean   Node fnNode int callCost int directInlines int costDeltaDirect int blockInlines int costDeltaBlock boolean removable [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  removable  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  fnModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  blockInlines  callCost  costDelta  costDeltaBlock  costDeltaDirect  directInlines  fnInstanceCount  overallCallCost  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  threshold  
[buglab_swap_variables]^int costDelta =  ( costDeltaDirect * directInlines )  + ( blockInlines * costDeltaBlock ) ;^769^770^^^^750^774^int costDelta =  ( directInlines * costDeltaDirect )  + ( blockInlines * costDeltaBlock ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] doesLowerCost [RETURN_TYPE] boolean   Node fnNode int callCost int directInlines int costDeltaDirect int blockInlines int costDeltaBlock boolean removable [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  removable  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  fnModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  blockInlines  callCost  costDelta  costDeltaBlock  costDeltaDirect  directInlines  fnInstanceCount  overallCallCost  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  threshold  
[buglab_swap_variables]^int costDelta =  ( directInlines * costDeltaDirect )  + ( costDeltaBlock * blockInlines ) ;^769^770^^^^750^774^int costDelta =  ( directInlines * costDeltaDirect )  + ( blockInlines * costDeltaBlock ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] doesLowerCost [RETURN_TYPE] boolean   Node fnNode int callCost int directInlines int costDeltaDirect int blockInlines int costDeltaBlock boolean removable [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  removable  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  fnModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  blockInlines  callCost  costDelta  costDeltaBlock  costDeltaDirect  directInlines  fnInstanceCount  overallCallCost  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  threshold  
[buglab_swap_variables]^int threshold =  ( fnInstanceCount - costDelta )  / callCost;^771^^^^^750^774^int threshold =  ( callCost - costDelta )  / fnInstanceCount;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] doesLowerCost [RETURN_TYPE] boolean   Node fnNode int callCost int directInlines int costDeltaDirect int blockInlines int costDeltaBlock boolean removable [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  removable  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  fnModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  blockInlines  callCost  costDelta  costDeltaBlock  costDeltaDirect  directInlines  fnInstanceCount  overallCallCost  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  threshold  
[buglab_swap_variables]^int threshold =  ( costDelta - callCost )  / fnInstanceCount;^771^^^^^750^774^int threshold =  ( callCost - costDelta )  / fnInstanceCount;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] doesLowerCost [RETURN_TYPE] boolean   Node fnNode int callCost int directInlines int costDeltaDirect int blockInlines int costDeltaBlock boolean removable [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  removable  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  fnModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  blockInlines  callCost  costDelta  costDeltaBlock  costDeltaDirect  directInlines  fnInstanceCount  overallCallCost  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  threshold  
[buglab_swap_variables]^int threshold =  ( callCost - fnInstanceCount )  / costDelta;^771^^^^^750^774^int threshold =  ( callCost - costDelta )  / fnInstanceCount;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] doesLowerCost [RETURN_TYPE] boolean   Node fnNode int callCost int directInlines int costDeltaDirect int blockInlines int costDeltaBlock boolean removable [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  removable  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  fnModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  blockInlines  callCost  costDelta  costDeltaBlock  costDeltaDirect  directInlines  fnInstanceCount  overallCallCost  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  threshold  
[buglab_swap_variables]^return InlineCostEstimator.getCost ( threshold, fnNode + 1 )  <= threshold;^773^^^^^750^774^return InlineCostEstimator.getCost ( fnNode, threshold + 1 )  <= threshold;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] doesLowerCost [RETURN_TYPE] boolean   Node fnNode int callCost int directInlines int costDeltaDirect int blockInlines int costDeltaBlock boolean removable [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  removable  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  fnModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  blockInlines  callCost  costDelta  costDeltaBlock  costDeltaDirect  directInlines  fnInstanceCount  overallCallCost  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  threshold  
[buglab_swap_variables]^return InlineCostEstimator.getCost (  threshold + 1 )  <= threshold;^773^^^^^750^774^return InlineCostEstimator.getCost ( fnNode, threshold + 1 )  <= threshold;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] doesLowerCost [RETURN_TYPE] boolean   Node fnNode int callCost int directInlines int costDeltaDirect int blockInlines int costDeltaBlock boolean removable [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  removable  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  fnModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  blockInlines  callCost  costDelta  costDeltaBlock  costDeltaDirect  directInlines  fnInstanceCount  overallCallCost  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  threshold  
[buglab_swap_variables]^return InlineCostEstimator.getCost ( fnNode + 1 )  <= threshold;^773^^^^^750^774^return InlineCostEstimator.getCost ( fnNode, threshold + 1 )  <= threshold;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] doesLowerCost [RETURN_TYPE] boolean   Node fnNode int callCost int directInlines int costDeltaDirect int blockInlines int costDeltaBlock boolean removable [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  removable  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  fnModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  blockInlines  callCost  costDelta  costDeltaBlock  costDeltaDirect  directInlines  fnInstanceCount  overallCallCost  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  threshold  
[buglab_swap_variables]^int callCost = PAREN_COST + NAME_COST_ESTIMATE;^785^^^^^781^799^int callCost = NAME_COST_ESTIMATE + PAREN_COST;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] estimateCallCost [RETURN_TYPE] int   Node fnNode boolean referencesThis [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  removable  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  argsNode  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  fnModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  blockInlines  callCost  costDelta  costDeltaBlock  costDeltaDirect  directInlines  fnInstanceCount  numArgs  overallCallCost  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  threshold  
[buglab_swap_variables]^callCost +=  ( NAME_COST_ESTIMATE * numArgs )  +  (  ( numArgs - 1 )  * COMMA_COST ) ;^787^^^^^781^799^callCost +=  ( numArgs * NAME_COST_ESTIMATE )  +  (  ( numArgs - 1 )  * COMMA_COST ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] estimateCallCost [RETURN_TYPE] int   Node fnNode boolean referencesThis [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  removable  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  argsNode  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  fnModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  blockInlines  callCost  costDelta  costDeltaBlock  costDeltaDirect  directInlines  fnInstanceCount  numArgs  overallCallCost  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  threshold  
[buglab_swap_variables]^callCost +=  ( numArgs * COMMA_COST )  +  (  ( numArgs - 1 )  * NAME_COST_ESTIMATE ) ;^787^^^^^781^799^callCost +=  ( numArgs * NAME_COST_ESTIMATE )  +  (  ( numArgs - 1 )  * COMMA_COST ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] estimateCallCost [RETURN_TYPE] int   Node fnNode boolean referencesThis [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  removable  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  argsNode  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  fnModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  blockInlines  callCost  costDelta  costDeltaBlock  costDeltaDirect  directInlines  fnInstanceCount  numArgs  overallCallCost  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  threshold  
[buglab_swap_variables]^callCost +=  ( COMMA_COST * NAME_COST_ESTIMATE )  +  (  ( numArgs - 1 )  * numArgs ) ;^787^^^^^781^799^callCost +=  ( numArgs * NAME_COST_ESTIMATE )  +  (  ( numArgs - 1 )  * COMMA_COST ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] estimateCallCost [RETURN_TYPE] int   Node fnNode boolean referencesThis [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  removable  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  argsNode  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  fnModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  blockInlines  callCost  costDelta  costDeltaBlock  costDeltaDirect  directInlines  fnInstanceCount  numArgs  overallCallCost  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  threshold  
[buglab_swap_variables]^int costDeltaFunctionOverhead = 15 + InlineCostEstimator.ESTIMATED_IDENTIFIER_COST + ( paramCount * commaCount ) ;^811^812^^^^796^826^int costDeltaFunctionOverhead = 15 + commaCount + ( paramCount * InlineCostEstimator.ESTIMATED_IDENTIFIER_COST ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineCostDelta [RETURN_TYPE] int   Node fnNode String> namesToAlias InliningMode mode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  removable  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  argsNode  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  fnModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  INLINE_BLOCK_OVERHEAD  NAME_COST_ESTIMATE  PAREN_COST  PER_ALIAS_OVERHEAD  PER_RETURN_OVERHEAD  PER_RETURN_RESULT_OVERHEAD  aliasCount  baseOverhead  blockInlines  callCost  commaCount  costDelta  costDeltaBlock  costDeltaDirect  costDeltaFunctionOverhead  directInlines  fnInstanceCount  numArgs  overallCallCost  overhead  paramCount  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  resultCount  returnCount  threshold  
[buglab_swap_variables]^int costDeltaFunctionOverhead = 15 + paramCount + ( commaCount * InlineCostEstimator.ESTIMATED_IDENTIFIER_COST ) ;^811^812^^^^796^826^int costDeltaFunctionOverhead = 15 + commaCount + ( paramCount * InlineCostEstimator.ESTIMATED_IDENTIFIER_COST ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineCostDelta [RETURN_TYPE] int   Node fnNode String> namesToAlias InliningMode mode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  removable  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  argsNode  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  fnModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  INLINE_BLOCK_OVERHEAD  NAME_COST_ESTIMATE  PAREN_COST  PER_ALIAS_OVERHEAD  PER_RETURN_OVERHEAD  PER_RETURN_RESULT_OVERHEAD  aliasCount  baseOverhead  blockInlines  callCost  commaCount  costDelta  costDeltaBlock  costDeltaDirect  costDeltaFunctionOverhead  directInlines  fnInstanceCount  numArgs  overallCallCost  overhead  paramCount  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  resultCount  returnCount  threshold  
[buglab_swap_variables]^return  ( costDeltaFunctionOverhead - overhead ) ;^853^^^^^838^868^return  ( overhead - costDeltaFunctionOverhead ) ;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineCostDelta [RETURN_TYPE] int   Node fnNode String> namesToAlias InliningMode mode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  removable  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  argsNode  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  fnModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  INLINE_BLOCK_OVERHEAD  NAME_COST_ESTIMATE  PAREN_COST  PER_ALIAS_OVERHEAD  PER_RETURN_OVERHEAD  PER_RETURN_RESULT_OVERHEAD  aliasCount  baseOverhead  blockInlines  callCost  commaCount  costDelta  costDeltaBlock  costDeltaDirect  costDeltaFunctionOverhead  directInlines  fnInstanceCount  numArgs  overallCallCost  overhead  paramCount  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  resultCount  returnCount  threshold  
[buglab_swap_variables]^int baseOverhead =  ( INLINE_BLOCK_OVERHEAD > 0 )  ? returnCount : 0;^846^^^^^831^861^int baseOverhead =  ( returnCount > 0 )  ? INLINE_BLOCK_OVERHEAD : 0;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineCostDelta [RETURN_TYPE] int   Node fnNode String> namesToAlias InliningMode mode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  removable  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  argsNode  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  fnModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  INLINE_BLOCK_OVERHEAD  NAME_COST_ESTIMATE  PAREN_COST  PER_ALIAS_OVERHEAD  PER_RETURN_OVERHEAD  PER_RETURN_RESULT_OVERHEAD  aliasCount  baseOverhead  blockInlines  callCost  commaCount  costDelta  costDeltaBlock  costDeltaDirect  costDeltaFunctionOverhead  directInlines  fnInstanceCount  numArgs  overallCallCost  overhead  paramCount  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  resultCount  returnCount  threshold  
[buglab_swap_variables]^int overhead = returnCount + baseOverhead * PER_RETURN_OVERHEAD + resultCount * PER_RETURN_RESULT_OVERHEAD + aliasCount * PER_ALIAS_OVERHEAD;^848^849^850^851^^833^863^int overhead = baseOverhead + returnCount * PER_RETURN_OVERHEAD + resultCount * PER_RETURN_RESULT_OVERHEAD + aliasCount * PER_ALIAS_OVERHEAD;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineCostDelta [RETURN_TYPE] int   Node fnNode String> namesToAlias InliningMode mode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  removable  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  argsNode  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  fnModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  INLINE_BLOCK_OVERHEAD  NAME_COST_ESTIMATE  PAREN_COST  PER_ALIAS_OVERHEAD  PER_RETURN_OVERHEAD  PER_RETURN_RESULT_OVERHEAD  aliasCount  baseOverhead  blockInlines  callCost  commaCount  costDelta  costDeltaBlock  costDeltaDirect  costDeltaFunctionOverhead  directInlines  fnInstanceCount  numArgs  overallCallCost  overhead  paramCount  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  resultCount  returnCount  threshold  
[buglab_swap_variables]^int overhead = baseOverhead + PER_RETURN_RESULT_OVERHEAD * PER_RETURN_OVERHEAD + resultCount * returnCount + aliasCount * PER_ALIAS_OVERHEAD;^848^849^850^851^^833^863^int overhead = baseOverhead + returnCount * PER_RETURN_OVERHEAD + resultCount * PER_RETURN_RESULT_OVERHEAD + aliasCount * PER_ALIAS_OVERHEAD;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineCostDelta [RETURN_TYPE] int   Node fnNode String> namesToAlias InliningMode mode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  removable  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  argsNode  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  fnModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  INLINE_BLOCK_OVERHEAD  NAME_COST_ESTIMATE  PAREN_COST  PER_ALIAS_OVERHEAD  PER_RETURN_OVERHEAD  PER_RETURN_RESULT_OVERHEAD  aliasCount  baseOverhead  blockInlines  callCost  commaCount  costDelta  costDeltaBlock  costDeltaDirect  costDeltaFunctionOverhead  directInlines  fnInstanceCount  numArgs  overallCallCost  overhead  paramCount  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  resultCount  returnCount  threshold  
[buglab_swap_variables]^int overhead = baseOverhead + returnCount * PER_ALIAS_OVERHEAD + resultCount * PER_RETURN_RESULT_OVERHEAD + aliasCount * PER_RETURN_OVERHEAD;^848^849^850^851^^833^863^int overhead = baseOverhead + returnCount * PER_RETURN_OVERHEAD + resultCount * PER_RETURN_RESULT_OVERHEAD + aliasCount * PER_ALIAS_OVERHEAD;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineCostDelta [RETURN_TYPE] int   Node fnNode String> namesToAlias InliningMode mode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  removable  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  argsNode  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  fnModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  INLINE_BLOCK_OVERHEAD  NAME_COST_ESTIMATE  PAREN_COST  PER_ALIAS_OVERHEAD  PER_RETURN_OVERHEAD  PER_RETURN_RESULT_OVERHEAD  aliasCount  baseOverhead  blockInlines  callCost  commaCount  costDelta  costDeltaBlock  costDeltaDirect  costDeltaFunctionOverhead  directInlines  fnInstanceCount  numArgs  overallCallCost  overhead  paramCount  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  resultCount  returnCount  threshold  
[buglab_swap_variables]^int overhead = baseOverhead + returnCount * PER_RETURN_OVERHEAD + PER_ALIAS_OVERHEAD * PER_RETURN_RESULT_OVERHEAD + aliasCount * resultCount;^848^849^850^851^^833^863^int overhead = baseOverhead + returnCount * PER_RETURN_OVERHEAD + resultCount * PER_RETURN_RESULT_OVERHEAD + aliasCount * PER_ALIAS_OVERHEAD;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineCostDelta [RETURN_TYPE] int   Node fnNode String> namesToAlias InliningMode mode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  removable  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  argsNode  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  fnModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  INLINE_BLOCK_OVERHEAD  NAME_COST_ESTIMATE  PAREN_COST  PER_ALIAS_OVERHEAD  PER_RETURN_OVERHEAD  PER_RETURN_RESULT_OVERHEAD  aliasCount  baseOverhead  blockInlines  callCost  commaCount  costDelta  costDeltaBlock  costDeltaDirect  costDeltaFunctionOverhead  directInlines  fnInstanceCount  numArgs  overallCallCost  overhead  paramCount  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  resultCount  returnCount  threshold  
[buglab_swap_variables]^int overhead = PER_RETURN_RESULT_OVERHEAD + returnCount * PER_RETURN_OVERHEAD + resultCount * baseOverhead + aliasCount * PER_ALIAS_OVERHEAD;^848^849^850^851^^833^863^int overhead = baseOverhead + returnCount * PER_RETURN_OVERHEAD + resultCount * PER_RETURN_RESULT_OVERHEAD + aliasCount * PER_ALIAS_OVERHEAD;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineCostDelta [RETURN_TYPE] int   Node fnNode String> namesToAlias InliningMode mode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  removable  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  argsNode  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  fnModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  INLINE_BLOCK_OVERHEAD  NAME_COST_ESTIMATE  PAREN_COST  PER_ALIAS_OVERHEAD  PER_RETURN_OVERHEAD  PER_RETURN_RESULT_OVERHEAD  aliasCount  baseOverhead  blockInlines  callCost  commaCount  costDelta  costDeltaBlock  costDeltaDirect  costDeltaFunctionOverhead  directInlines  fnInstanceCount  numArgs  overallCallCost  overhead  paramCount  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  resultCount  returnCount  threshold  
[buglab_swap_variables]^int overhead = aliasCount + returnCount * PER_RETURN_OVERHEAD + resultCount * PER_RETURN_RESULT_OVERHEAD + baseOverhead * PER_ALIAS_OVERHEAD;^848^849^850^851^^833^863^int overhead = baseOverhead + returnCount * PER_RETURN_OVERHEAD + resultCount * PER_RETURN_RESULT_OVERHEAD + aliasCount * PER_ALIAS_OVERHEAD;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineCostDelta [RETURN_TYPE] int   Node fnNode String> namesToAlias InliningMode mode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  removable  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  argsNode  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  fnModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  INLINE_BLOCK_OVERHEAD  NAME_COST_ESTIMATE  PAREN_COST  PER_ALIAS_OVERHEAD  PER_RETURN_OVERHEAD  PER_RETURN_RESULT_OVERHEAD  aliasCount  baseOverhead  blockInlines  callCost  commaCount  costDelta  costDeltaBlock  costDeltaDirect  costDeltaFunctionOverhead  directInlines  fnInstanceCount  numArgs  overallCallCost  overhead  paramCount  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  resultCount  returnCount  threshold  
[buglab_swap_variables]^int overhead = baseOverhead + returnCount * PER_RETURN_OVERHEAD + resultCount * PER_RETURN_RESULT_OVERHEAD + PER_ALIAS_OVERHEAD * aliasCount;^848^849^850^851^^833^863^int overhead = baseOverhead + returnCount * PER_RETURN_OVERHEAD + resultCount * PER_RETURN_RESULT_OVERHEAD + aliasCount * PER_ALIAS_OVERHEAD;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineCostDelta [RETURN_TYPE] int   Node fnNode String> namesToAlias InliningMode mode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  removable  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  argsNode  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  fnModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  INLINE_BLOCK_OVERHEAD  NAME_COST_ESTIMATE  PAREN_COST  PER_ALIAS_OVERHEAD  PER_RETURN_OVERHEAD  PER_RETURN_RESULT_OVERHEAD  aliasCount  baseOverhead  blockInlines  callCost  commaCount  costDelta  costDeltaBlock  costDeltaDirect  costDeltaFunctionOverhead  directInlines  fnInstanceCount  numArgs  overallCallCost  overhead  paramCount  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  resultCount  returnCount  threshold  
[buglab_swap_variables]^int overhead = baseOverhead + PER_ALIAS_OVERHEAD * PER_RETURN_OVERHEAD + resultCount * PER_RETURN_RESULT_OVERHEAD + aliasCount * returnCount;^848^849^850^851^^833^863^int overhead = baseOverhead + returnCount * PER_RETURN_OVERHEAD + resultCount * PER_RETURN_RESULT_OVERHEAD + aliasCount * PER_ALIAS_OVERHEAD;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineCostDelta [RETURN_TYPE] int   Node fnNode String> namesToAlias InliningMode mode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  removable  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  argsNode  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  fnModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  INLINE_BLOCK_OVERHEAD  NAME_COST_ESTIMATE  PAREN_COST  PER_ALIAS_OVERHEAD  PER_RETURN_OVERHEAD  PER_RETURN_RESULT_OVERHEAD  aliasCount  baseOverhead  blockInlines  callCost  commaCount  costDelta  costDeltaBlock  costDeltaDirect  costDeltaFunctionOverhead  directInlines  fnInstanceCount  numArgs  overallCallCost  overhead  paramCount  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  resultCount  returnCount  threshold  
[buglab_swap_variables]^int overhead = PER_RETURN_OVERHEAD + returnCount * baseOverhead + resultCount * PER_RETURN_RESULT_OVERHEAD + aliasCount * PER_ALIAS_OVERHEAD;^848^849^850^851^^833^863^int overhead = baseOverhead + returnCount * PER_RETURN_OVERHEAD + resultCount * PER_RETURN_RESULT_OVERHEAD + aliasCount * PER_ALIAS_OVERHEAD;^[CLASS] FunctionInjector InliningMode Reference CallSiteType CanInlineResult  [METHOD] inlineCostDelta [RETURN_TYPE] int   Node fnNode String> namesToAlias InliningMode mode [VARIABLES] CanInlineResult  AFTER_DECOMPOSITION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  callerContainsFunction  checkModules  fnContainsVars  hasArgs  isCallInLoop  isRemovable  needsDefaultReturnResult  referencesThis  removable  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  argsNode  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  injectionPoint  injectionPointParent  inlineResult  newBlock  newExpression  parent  returnNode  safeReturnNode  thisValue  JSModule  fnModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  INLINE_BLOCK_OVERHEAD  NAME_COST_ESTIMATE  PAREN_COST  PER_ALIAS_OVERHEAD  PER_RETURN_OVERHEAD  PER_RETURN_RESULT_OVERHEAD  aliasCount  baseOverhead  blockInlines  callCost  commaCount  costDelta  costDeltaBlock  costDeltaDirect  costDeltaFunctionOverhead  directInlines  fnInstanceCount  numArgs  overallCallCost  overhead  paramCount  referenceCount  referencesUsingBlockInlining  referencesUsingDirectInlining  resultCount  returnCount  threshold  
