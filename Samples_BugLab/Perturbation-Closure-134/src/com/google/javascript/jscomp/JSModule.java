[buglab_swap_variables]^inputs.add ( 0 ) ;^81^^^^^80^83^inputs.add ( 0, input ) ;^[CLASS] JSModule  [METHOD] addFirst [RETURN_TYPE] void   CompilerInput input [VARIABLES] List  deps  inputs  CompilerInput  input  String  name  boolean  
[buglab_swap_variables]^Preconditions.checkState ( other.contains ( inputs )  ) ;^87^^^^^86^90^Preconditions.checkState ( inputs.contains ( other )  ) ;^[CLASS] JSModule  [METHOD] addAfter [RETURN_TYPE] void   CompilerInput input CompilerInput other [VARIABLES] List  deps  inputs  CompilerInput  input  other  String  name  boolean  
[buglab_swap_variables]^inputs.add ( others.indexOf ( input ) , input ) ;^88^^^^^86^90^inputs.add ( inputs.indexOf ( other ) , input ) ;^[CLASS] JSModule  [METHOD] addAfter [RETURN_TYPE] void   CompilerInput input CompilerInput other [VARIABLES] List  deps  inputs  CompilerInput  input  other  String  name  boolean  
[buglab_swap_variables]^inputs.add ( inputss.indexOf ( other ) , input ) ;^88^^^^^86^90^inputs.add ( inputs.indexOf ( other ) , input ) ;^[CLASS] JSModule  [METHOD] addAfter [RETURN_TYPE] void   CompilerInput input CompilerInput other [VARIABLES] List  deps  inputs  CompilerInput  input  other  String  name  boolean  
[buglab_swap_variables]^inputs.add ( inputs.indexOf ( other )  ) ;^88^^^^^86^90^inputs.add ( inputs.indexOf ( other ) , input ) ;^[CLASS] JSModule  [METHOD] addAfter [RETURN_TYPE] void   CompilerInput input CompilerInput other [VARIABLES] List  deps  inputs  CompilerInput  input  other  String  name  boolean  
[buglab_swap_variables]^inputs.add ( input.indexOf ( other ) , inputs ) ;^88^^^^^86^90^inputs.add ( inputs.indexOf ( other ) , input ) ;^[CLASS] JSModule  [METHOD] addAfter [RETURN_TYPE] void   CompilerInput input CompilerInput other [VARIABLES] List  deps  inputs  CompilerInput  input  other  String  name  boolean  
[buglab_swap_variables]^inputs.add ( other.indexOf ( inputs ) , input ) ;^88^^^^^86^90^inputs.add ( inputs.indexOf ( other ) , input ) ;^[CLASS] JSModule  [METHOD] addAfter [RETURN_TYPE] void   CompilerInput input CompilerInput other [VARIABLES] List  deps  inputs  CompilerInput  input  other  String  name  boolean  
[buglab_swap_variables]^if  ( dep.add ( allDeps )  )  {^125^^^^^119^131^if  ( allDeps.add ( dep )  )  {^[CLASS] JSModule  [METHOD] getAllDependencies [RETURN_TYPE] Set   [VARIABLES] JSModule  dep  module  List  deps  inputs  workList  String  name  Set  allDeps  boolean  
[buglab_swap_variables]^if  ( input.equals ( name.getName (  )  )  )  {^152^^^^^150^157^if  ( name.equals ( input.getName (  )  )  )  {^[CLASS] JSModule  [METHOD] getByName [RETURN_TYPE] CompilerInput   String name [VARIABLES] List  deps  inputs  workList  CompilerInput  input  String  name  boolean  
[buglab_swap_variables]^if  ( file.equals ( name.getName (  )  )  )  {^167^^^^^162^174^if  ( name.equals ( file.getName (  )  )  )  {^[CLASS] JSModule  [METHOD] removeByName [RETURN_TYPE] boolean   String name [VARIABLES] Iterator  iter  List  deps  inputs  workList  CompilerInput  file  String  name  boolean  found  
[buglab_swap_variables]^for  ( String provide : compiler.getProvides ( input )  )  {^199^^^^^195^219^for  ( String provide : input.getProvides ( compiler )  )  {^[CLASS] JSModule  [METHOD] sortInputsByDeps [RETURN_TYPE] void   Compiler compiler [VARIABLES] Compiler  compiler  CompilerInput  input  Set  set  boolean  List  deps  inputs  list  workList  String  name  provide  Map  provides  
[buglab_swap_variables]^provides.put ( input, provide ) ;^200^^^^^195^219^provides.put ( provide, input ) ;^[CLASS] JSModule  [METHOD] sortInputsByDeps [RETURN_TYPE] void   Compiler compiler [VARIABLES] Compiler  compiler  CompilerInput  input  Set  set  boolean  List  deps  inputs  list  workList  String  name  provide  Map  provides  
[buglab_swap_variables]^provides.put (  input ) ;^200^^^^^195^219^provides.put ( provide, input ) ;^[CLASS] JSModule  [METHOD] sortInputsByDeps [RETURN_TYPE] void   Compiler compiler [VARIABLES] Compiler  compiler  CompilerInput  input  Set  set  boolean  List  deps  inputs  list  workList  String  name  provide  Map  provides  
[buglab_swap_variables]^provides.put ( provide ) ;^200^^^^^195^219^provides.put ( provide, input ) ;^[CLASS] JSModule  [METHOD] sortInputsByDeps [RETURN_TYPE] void   Compiler compiler [VARIABLES] Compiler  compiler  CompilerInput  input  Set  set  boolean  List  deps  inputs  list  workList  String  name  provide  Map  provides  
[buglab_swap_variables]^addInputAndDeps ( list, provides, compiler, input, set, Sets.<CompilerInput>newHashSet (  )  ) ;^211^212^^^^195^219^addInputAndDeps ( input, provides, compiler, list, set, Sets.<CompilerInput>newHashSet (  )  ) ;^[CLASS] JSModule  [METHOD] sortInputsByDeps [RETURN_TYPE] void   Compiler compiler [VARIABLES] Compiler  compiler  CompilerInput  input  Set  set  boolean  List  deps  inputs  list  workList  String  name  provide  Map  provides  
[buglab_swap_variables]^addInputAndDeps (  provides, compiler, list, set, Sets.<CompilerInput>newHashSet (  )  ) ;^211^212^^^^195^219^addInputAndDeps ( input, provides, compiler, list, set, Sets.<CompilerInput>newHashSet (  )  ) ;^[CLASS] JSModule  [METHOD] sortInputsByDeps [RETURN_TYPE] void   Compiler compiler [VARIABLES] Compiler  compiler  CompilerInput  input  Set  set  boolean  List  deps  inputs  list  workList  String  name  provide  Map  provides  
[buglab_swap_variables]^addInputAndDeps ( input, set, compiler, list, provides, Sets.<CompilerInput>newHashSet (  )  ) ;^211^212^^^^195^219^addInputAndDeps ( input, provides, compiler, list, set, Sets.<CompilerInput>newHashSet (  )  ) ;^[CLASS] JSModule  [METHOD] sortInputsByDeps [RETURN_TYPE] void   Compiler compiler [VARIABLES] Compiler  compiler  CompilerInput  input  Set  set  boolean  List  deps  inputs  list  workList  String  name  provide  Map  provides  
[buglab_swap_variables]^addInputAndDeps ( input,  compiler, list, set, Sets.<CompilerInput>newHashSet (  )  ) ;^211^212^^^^195^219^addInputAndDeps ( input, provides, compiler, list, set, Sets.<CompilerInput>newHashSet (  )  ) ;^[CLASS] JSModule  [METHOD] sortInputsByDeps [RETURN_TYPE] void   Compiler compiler [VARIABLES] Compiler  compiler  CompilerInput  input  Set  set  boolean  List  deps  inputs  list  workList  String  name  provide  Map  provides  
[buglab_swap_variables]^addInputAndDeps ( input, provides, set, list, compiler, Sets.<CompilerInput>newHashSet (  )  ) ;^211^212^^^^195^219^addInputAndDeps ( input, provides, compiler, list, set, Sets.<CompilerInput>newHashSet (  )  ) ;^[CLASS] JSModule  [METHOD] sortInputsByDeps [RETURN_TYPE] void   Compiler compiler [VARIABLES] Compiler  compiler  CompilerInput  input  Set  set  boolean  List  deps  inputs  list  workList  String  name  provide  Map  provides  
[buglab_swap_variables]^addInputAndDeps ( input, provides,  list, set, Sets.<CompilerInput>newHashSet (  )  ) ;^211^212^^^^195^219^addInputAndDeps ( input, provides, compiler, list, set, Sets.<CompilerInput>newHashSet (  )  ) ;^[CLASS] JSModule  [METHOD] sortInputsByDeps [RETURN_TYPE] void   Compiler compiler [VARIABLES] Compiler  compiler  CompilerInput  input  Set  set  boolean  List  deps  inputs  list  workList  String  name  provide  Map  provides  
[buglab_swap_variables]^addInputAndDeps ( input, provides, compiler, set, list, Sets.<CompilerInput>newHashSet (  )  ) ;^211^212^^^^195^219^addInputAndDeps ( input, provides, compiler, list, set, Sets.<CompilerInput>newHashSet (  )  ) ;^[CLASS] JSModule  [METHOD] sortInputsByDeps [RETURN_TYPE] void   Compiler compiler [VARIABLES] Compiler  compiler  CompilerInput  input  Set  set  boolean  List  deps  inputs  list  workList  String  name  provide  Map  provides  
[buglab_swap_variables]^addInputAndDeps ( input, provides, compiler,  set, Sets.<CompilerInput>newHashSet (  )  ) ;^211^212^^^^195^219^addInputAndDeps ( input, provides, compiler, list, set, Sets.<CompilerInput>newHashSet (  )  ) ;^[CLASS] JSModule  [METHOD] sortInputsByDeps [RETURN_TYPE] void   Compiler compiler [VARIABLES] Compiler  compiler  CompilerInput  input  Set  set  boolean  List  deps  inputs  list  workList  String  name  provide  Map  provides  
[buglab_swap_variables]^addInputAndDeps ( set, provides, compiler, list, input, Sets.<CompilerInput>newHashSet (  )  ) ;^211^212^^^^195^219^addInputAndDeps ( input, provides, compiler, list, set, Sets.<CompilerInput>newHashSet (  )  ) ;^[CLASS] JSModule  [METHOD] sortInputsByDeps [RETURN_TYPE] void   Compiler compiler [VARIABLES] Compiler  compiler  CompilerInput  input  Set  set  boolean  List  deps  inputs  list  workList  String  name  provide  Map  provides  
[buglab_swap_variables]^addInputAndDeps ( input, provides, compiler, list,  Sets.<CompilerInput>newHashSet (  )  ) ;^211^212^^^^195^219^addInputAndDeps ( input, provides, compiler, list, set, Sets.<CompilerInput>newHashSet (  )  ) ;^[CLASS] JSModule  [METHOD] sortInputsByDeps [RETURN_TYPE] void   Compiler compiler [VARIABLES] Compiler  compiler  CompilerInput  input  Set  set  boolean  List  deps  inputs  list  workList  String  name  provide  Map  provides  
[buglab_swap_variables]^Preconditions.checkState ( list.size (  )  == inputs.size (  )  ) ;^216^^^^^195^219^Preconditions.checkState ( inputs.size (  )  == list.size (  )  ) ;^[CLASS] JSModule  [METHOD] sortInputsByDeps [RETURN_TYPE] void   Compiler compiler [VARIABLES] Compiler  compiler  CompilerInput  input  Set  set  boolean  List  deps  inputs  list  workList  String  name  provide  Map  provides  
[buglab_swap_variables]^addModuleAndDeps ( set, list, module, Sets.<JSModule>newHashSet (  )  ) ;^233^^^^^229^236^addModuleAndDeps ( module, list, set, Sets.<JSModule>newHashSet (  )  ) ;^[CLASS] JSModule  [METHOD] sortJsModules [RETURN_TYPE] JSModule[]   JSModule> modules [VARIABLES] Collection  modules  JSModule  module  List  deps  inputs  list  workList  String  name  provide  Set  set  boolean  
[buglab_swap_variables]^addModuleAndDeps (  list, set, Sets.<JSModule>newHashSet (  )  ) ;^233^^^^^229^236^addModuleAndDeps ( module, list, set, Sets.<JSModule>newHashSet (  )  ) ;^[CLASS] JSModule  [METHOD] sortJsModules [RETURN_TYPE] JSModule[]   JSModule> modules [VARIABLES] Collection  modules  JSModule  module  List  deps  inputs  list  workList  String  name  provide  Set  set  boolean  
[buglab_swap_variables]^addModuleAndDeps ( list, module, set, Sets.<JSModule>newHashSet (  )  ) ;^233^^^^^229^236^addModuleAndDeps ( module, list, set, Sets.<JSModule>newHashSet (  )  ) ;^[CLASS] JSModule  [METHOD] sortJsModules [RETURN_TYPE] JSModule[]   JSModule> modules [VARIABLES] Collection  modules  JSModule  module  List  deps  inputs  list  workList  String  name  provide  Set  set  boolean  
[buglab_swap_variables]^addModuleAndDeps ( module,  set, Sets.<JSModule>newHashSet (  )  ) ;^233^^^^^229^236^addModuleAndDeps ( module, list, set, Sets.<JSModule>newHashSet (  )  ) ;^[CLASS] JSModule  [METHOD] sortJsModules [RETURN_TYPE] JSModule[]   JSModule> modules [VARIABLES] Collection  modules  JSModule  module  List  deps  inputs  list  workList  String  name  provide  Set  set  boolean  
[buglab_swap_variables]^addModuleAndDeps ( module, list,  Sets.<JSModule>newHashSet (  )  ) ;^233^^^^^229^236^addModuleAndDeps ( module, list, set, Sets.<JSModule>newHashSet (  )  ) ;^[CLASS] JSModule  [METHOD] sortJsModules [RETURN_TYPE] JSModule[]   JSModule> modules [VARIABLES] Collection  modules  JSModule  module  List  deps  inputs  list  workList  String  name  provide  Set  set  boolean  
[buglab_swap_variables]^if  ( input.contains ( inProgress )  )  {^247^^^^^242^263^if  ( inProgress.contains ( input )  )  {^[CLASS] JSModule  [METHOD] addInputAndDeps [RETURN_TYPE] void   CompilerInput input CompilerInput> provides Compiler compiler CompilerInput> list CompilerInput> set CompilerInput> inProgress [VARIABLES] Compiler  compiler  CompilerInput  input  Set  inProgress  set  boolean  List  deps  inputs  list  workList  String  name  provide  require  Map  provides  
[buglab_swap_variables]^addInputAndDeps ( require.get ( provides ) , provides, compiler, list, set, inProgress ) ;^255^256^^^^242^263^addInputAndDeps ( provides.get ( require ) , provides, compiler, list, set, inProgress ) ;^[CLASS] JSModule  [METHOD] addInputAndDeps [RETURN_TYPE] void   CompilerInput input CompilerInput> provides Compiler compiler CompilerInput> list CompilerInput> set CompilerInput> inProgress [VARIABLES] Compiler  compiler  CompilerInput  input  Set  inProgress  set  boolean  List  deps  inputs  list  workList  String  name  provide  require  Map  provides  
[buglab_swap_variables]^addInputAndDeps ( provides.get ( require ) ,  compiler, list, set, inProgress ) ;^255^256^^^^242^263^addInputAndDeps ( provides.get ( require ) , provides, compiler, list, set, inProgress ) ;^[CLASS] JSModule  [METHOD] addInputAndDeps [RETURN_TYPE] void   CompilerInput input CompilerInput> provides Compiler compiler CompilerInput> list CompilerInput> set CompilerInput> inProgress [VARIABLES] Compiler  compiler  CompilerInput  input  Set  inProgress  set  boolean  List  deps  inputs  list  workList  String  name  provide  require  Map  provides  
[buglab_swap_variables]^addInputAndDeps ( provides.get ( list ) , provides, compiler, require, set, inProgress ) ;^255^256^^^^242^263^addInputAndDeps ( provides.get ( require ) , provides, compiler, list, set, inProgress ) ;^[CLASS] JSModule  [METHOD] addInputAndDeps [RETURN_TYPE] void   CompilerInput input CompilerInput> provides Compiler compiler CompilerInput> list CompilerInput> set CompilerInput> inProgress [VARIABLES] Compiler  compiler  CompilerInput  input  Set  inProgress  set  boolean  List  deps  inputs  list  workList  String  name  provide  require  Map  provides  
[buglab_swap_variables]^addInputAndDeps ( compiler.get ( require ) , provides, provides, list, set, inProgress ) ;^255^256^^^^242^263^addInputAndDeps ( provides.get ( require ) , provides, compiler, list, set, inProgress ) ;^[CLASS] JSModule  [METHOD] addInputAndDeps [RETURN_TYPE] void   CompilerInput input CompilerInput> provides Compiler compiler CompilerInput> list CompilerInput> set CompilerInput> inProgress [VARIABLES] Compiler  compiler  CompilerInput  input  Set  inProgress  set  boolean  List  deps  inputs  list  workList  String  name  provide  require  Map  provides  
[buglab_swap_variables]^addInputAndDeps ( provides.get ( require ) , provides,  list, set, inProgress ) ;^255^256^^^^242^263^addInputAndDeps ( provides.get ( require ) , provides, compiler, list, set, inProgress ) ;^[CLASS] JSModule  [METHOD] addInputAndDeps [RETURN_TYPE] void   CompilerInput input CompilerInput> provides Compiler compiler CompilerInput> list CompilerInput> set CompilerInput> inProgress [VARIABLES] Compiler  compiler  CompilerInput  input  Set  inProgress  set  boolean  List  deps  inputs  list  workList  String  name  provide  require  Map  provides  
[buglab_swap_variables]^addInputAndDeps ( provides.get ( require ) , provides, compiler, set, list, inProgress ) ;^255^256^^^^242^263^addInputAndDeps ( provides.get ( require ) , provides, compiler, list, set, inProgress ) ;^[CLASS] JSModule  [METHOD] addInputAndDeps [RETURN_TYPE] void   CompilerInput input CompilerInput> provides Compiler compiler CompilerInput> list CompilerInput> set CompilerInput> inProgress [VARIABLES] Compiler  compiler  CompilerInput  input  Set  inProgress  set  boolean  List  deps  inputs  list  workList  String  name  provide  require  Map  provides  
[buglab_swap_variables]^addInputAndDeps ( provides.get ( require ) , provides, compiler,  set, inProgress ) ;^255^256^^^^242^263^addInputAndDeps ( provides.get ( require ) , provides, compiler, list, set, inProgress ) ;^[CLASS] JSModule  [METHOD] addInputAndDeps [RETURN_TYPE] void   CompilerInput input CompilerInput> provides Compiler compiler CompilerInput> list CompilerInput> set CompilerInput> inProgress [VARIABLES] Compiler  compiler  CompilerInput  input  Set  inProgress  set  boolean  List  deps  inputs  list  workList  String  name  provide  require  Map  provides  
[buglab_swap_variables]^addInputAndDeps ( provides.get ( require ) , provides, compiler, list, inProgress, set ) ;^255^256^^^^242^263^addInputAndDeps ( provides.get ( require ) , provides, compiler, list, set, inProgress ) ;^[CLASS] JSModule  [METHOD] addInputAndDeps [RETURN_TYPE] void   CompilerInput input CompilerInput> provides Compiler compiler CompilerInput> list CompilerInput> set CompilerInput> inProgress [VARIABLES] Compiler  compiler  CompilerInput  input  Set  inProgress  set  boolean  List  deps  inputs  list  workList  String  name  provide  require  Map  provides  
[buglab_swap_variables]^addInputAndDeps ( provides.get ( require ) , provides, compiler, list,  inProgress ) ;^255^256^^^^242^263^addInputAndDeps ( provides.get ( require ) , provides, compiler, list, set, inProgress ) ;^[CLASS] JSModule  [METHOD] addInputAndDeps [RETURN_TYPE] void   CompilerInput input CompilerInput> provides Compiler compiler CompilerInput> list CompilerInput> set CompilerInput> inProgress [VARIABLES] Compiler  compiler  CompilerInput  input  Set  inProgress  set  boolean  List  deps  inputs  list  workList  String  name  provide  require  Map  provides  
[buglab_swap_variables]^addInputAndDeps ( provides.get ( require ) , provides, compiler, list, set ) ;^255^256^^^^242^263^addInputAndDeps ( provides.get ( require ) , provides, compiler, list, set, inProgress ) ;^[CLASS] JSModule  [METHOD] addInputAndDeps [RETURN_TYPE] void   CompilerInput input CompilerInput> provides Compiler compiler CompilerInput> list CompilerInput> set CompilerInput> inProgress [VARIABLES] Compiler  compiler  CompilerInput  input  Set  inProgress  set  boolean  List  deps  inputs  list  workList  String  name  provide  require  Map  provides  
[buglab_swap_variables]^for  ( String require : compiler.getRequires ( input )  )  {^253^^^^^242^263^for  ( String require : input.getRequires ( compiler )  )  {^[CLASS] JSModule  [METHOD] addInputAndDeps [RETURN_TYPE] void   CompilerInput input CompilerInput> provides Compiler compiler CompilerInput> list CompilerInput> set CompilerInput> inProgress [VARIABLES] Compiler  compiler  CompilerInput  input  Set  inProgress  set  boolean  List  deps  inputs  list  workList  String  name  provide  require  Map  provides  
[buglab_swap_variables]^if  ( require.containsKey ( provides )  )  {^254^^^^^242^263^if  ( provides.containsKey ( require )  )  {^[CLASS] JSModule  [METHOD] addInputAndDeps [RETURN_TYPE] void   CompilerInput input CompilerInput> provides Compiler compiler CompilerInput> list CompilerInput> set CompilerInput> inProgress [VARIABLES] Compiler  compiler  CompilerInput  input  Set  inProgress  set  boolean  List  deps  inputs  list  workList  String  name  provide  require  Map  provides  
[buglab_swap_variables]^addInputAndDeps ( inProgress.get ( require ) , provides, compiler, list, set, provides ) ;^255^256^^^^242^263^addInputAndDeps ( provides.get ( require ) , provides, compiler, list, set, inProgress ) ;^[CLASS] JSModule  [METHOD] addInputAndDeps [RETURN_TYPE] void   CompilerInput input CompilerInput> provides Compiler compiler CompilerInput> list CompilerInput> set CompilerInput> inProgress [VARIABLES] Compiler  compiler  CompilerInput  input  Set  inProgress  set  boolean  List  deps  inputs  list  workList  String  name  provide  require  Map  provides  
[buglab_swap_variables]^addInputAndDeps ( provides.get ( require ) , provides, list, compiler, set, inProgress ) ;^255^256^^^^242^263^addInputAndDeps ( provides.get ( require ) , provides, compiler, list, set, inProgress ) ;^[CLASS] JSModule  [METHOD] addInputAndDeps [RETURN_TYPE] void   CompilerInput input CompilerInput> provides Compiler compiler CompilerInput> list CompilerInput> set CompilerInput> inProgress [VARIABLES] Compiler  compiler  CompilerInput  input  Set  inProgress  set  boolean  List  deps  inputs  list  workList  String  name  provide  require  Map  provides  
[buglab_swap_variables]^addInputAndDeps ( list.get ( require ) , provides, compiler, provides, set, inProgress ) ;^255^256^^^^242^263^addInputAndDeps ( provides.get ( require ) , provides, compiler, list, set, inProgress ) ;^[CLASS] JSModule  [METHOD] addInputAndDeps [RETURN_TYPE] void   CompilerInput input CompilerInput> provides Compiler compiler CompilerInput> list CompilerInput> set CompilerInput> inProgress [VARIABLES] Compiler  compiler  CompilerInput  input  Set  inProgress  set  boolean  List  deps  inputs  list  workList  String  name  provide  require  Map  provides  
[buglab_swap_variables]^addInputAndDeps ( provides.get ( inProgress ) , provides, compiler, list, set, require ) ;^255^256^^^^242^263^addInputAndDeps ( provides.get ( require ) , provides, compiler, list, set, inProgress ) ;^[CLASS] JSModule  [METHOD] addInputAndDeps [RETURN_TYPE] void   CompilerInput input CompilerInput> provides Compiler compiler CompilerInput> list CompilerInput> set CompilerInput> inProgress [VARIABLES] Compiler  compiler  CompilerInput  input  Set  inProgress  set  boolean  List  deps  inputs  list  workList  String  name  provide  require  Map  provides  
[buglab_swap_variables]^addInputAndDeps ( provides.get ( require ) , provides, inProgress, list, set, compiler ) ;^255^256^^^^242^263^addInputAndDeps ( provides.get ( require ) , provides, compiler, list, set, inProgress ) ;^[CLASS] JSModule  [METHOD] addInputAndDeps [RETURN_TYPE] void   CompilerInput input CompilerInput> provides Compiler compiler CompilerInput> list CompilerInput> set CompilerInput> inProgress [VARIABLES] Compiler  compiler  CompilerInput  input  Set  inProgress  set  boolean  List  deps  inputs  list  workList  String  name  provide  require  Map  provides  
[buglab_swap_variables]^addInputAndDeps ( provides.get ( require ) , provides, compiler, inProgress, set, list ) ;^255^256^^^^242^263^addInputAndDeps ( provides.get ( require ) , provides, compiler, list, set, inProgress ) ;^[CLASS] JSModule  [METHOD] addInputAndDeps [RETURN_TYPE] void   CompilerInput input CompilerInput> provides Compiler compiler CompilerInput> list CompilerInput> set CompilerInput> inProgress [VARIABLES] Compiler  compiler  CompilerInput  input  Set  inProgress  set  boolean  List  deps  inputs  list  workList  String  name  provide  require  Map  provides  
[buglab_swap_variables]^addInputAndDeps ( provides.get ( compiler ) , provides, require, list, set, inProgress ) ;^255^256^^^^242^263^addInputAndDeps ( provides.get ( require ) , provides, compiler, list, set, inProgress ) ;^[CLASS] JSModule  [METHOD] addInputAndDeps [RETURN_TYPE] void   CompilerInput input CompilerInput> provides Compiler compiler CompilerInput> list CompilerInput> set CompilerInput> inProgress [VARIABLES] Compiler  compiler  CompilerInput  input  Set  inProgress  set  boolean  List  deps  inputs  list  workList  String  name  provide  require  Map  provides  
[buglab_swap_variables]^addInputAndDeps ( set.get ( require ) , provides, compiler, list, provides, inProgress ) ;^255^256^^^^242^263^addInputAndDeps ( provides.get ( require ) , provides, compiler, list, set, inProgress ) ;^[CLASS] JSModule  [METHOD] addInputAndDeps [RETURN_TYPE] void   CompilerInput input CompilerInput> provides Compiler compiler CompilerInput> list CompilerInput> set CompilerInput> inProgress [VARIABLES] Compiler  compiler  CompilerInput  input  Set  inProgress  set  boolean  List  deps  inputs  list  workList  String  name  provide  require  Map  provides  
[buglab_swap_variables]^if  ( module.contains ( inProgress )  )  {^273^^^^^269^286^if  ( inProgress.contains ( module )  )  {^[CLASS] JSModule  [METHOD] addModuleAndDeps [RETURN_TYPE] void   JSModule module JSModule> list JSModule> set JSModule> inProgress [VARIABLES] JSModule  dep  module  List  deps  inputs  list  workList  String  name  provide  require  Set  inProgress  set  boolean  
[buglab_swap_variables]^addModuleAndDeps ( inProgress, list, set, dep ) ;^280^^^^^269^286^addModuleAndDeps ( dep, list, set, inProgress ) ;^[CLASS] JSModule  [METHOD] addModuleAndDeps [RETURN_TYPE] void   JSModule module JSModule> list JSModule> set JSModule> inProgress [VARIABLES] JSModule  dep  module  List  deps  inputs  list  workList  String  name  provide  require  Set  inProgress  set  boolean  
[buglab_swap_variables]^addModuleAndDeps (  list, set, inProgress ) ;^280^^^^^269^286^addModuleAndDeps ( dep, list, set, inProgress ) ;^[CLASS] JSModule  [METHOD] addModuleAndDeps [RETURN_TYPE] void   JSModule module JSModule> list JSModule> set JSModule> inProgress [VARIABLES] JSModule  dep  module  List  deps  inputs  list  workList  String  name  provide  require  Set  inProgress  set  boolean  
[buglab_swap_variables]^addModuleAndDeps ( dep, inProgress, set, list ) ;^280^^^^^269^286^addModuleAndDeps ( dep, list, set, inProgress ) ;^[CLASS] JSModule  [METHOD] addModuleAndDeps [RETURN_TYPE] void   JSModule module JSModule> list JSModule> set JSModule> inProgress [VARIABLES] JSModule  dep  module  List  deps  inputs  list  workList  String  name  provide  require  Set  inProgress  set  boolean  
[buglab_swap_variables]^addModuleAndDeps ( dep,  set, inProgress ) ;^280^^^^^269^286^addModuleAndDeps ( dep, list, set, inProgress ) ;^[CLASS] JSModule  [METHOD] addModuleAndDeps [RETURN_TYPE] void   JSModule module JSModule> list JSModule> set JSModule> inProgress [VARIABLES] JSModule  dep  module  List  deps  inputs  list  workList  String  name  provide  require  Set  inProgress  set  boolean  
[buglab_swap_variables]^addModuleAndDeps ( set, list, dep, inProgress ) ;^280^^^^^269^286^addModuleAndDeps ( dep, list, set, inProgress ) ;^[CLASS] JSModule  [METHOD] addModuleAndDeps [RETURN_TYPE] void   JSModule module JSModule> list JSModule> set JSModule> inProgress [VARIABLES] JSModule  dep  module  List  deps  inputs  list  workList  String  name  provide  require  Set  inProgress  set  boolean  
[buglab_swap_variables]^addModuleAndDeps ( dep, list,  inProgress ) ;^280^^^^^269^286^addModuleAndDeps ( dep, list, set, inProgress ) ;^[CLASS] JSModule  [METHOD] addModuleAndDeps [RETURN_TYPE] void   JSModule module JSModule> list JSModule> set JSModule> inProgress [VARIABLES] JSModule  dep  module  List  deps  inputs  list  workList  String  name  provide  require  Set  inProgress  set  boolean  
[buglab_swap_variables]^addModuleAndDeps ( dep, list, inProgress, set ) ;^280^^^^^269^286^addModuleAndDeps ( dep, list, set, inProgress ) ;^[CLASS] JSModule  [METHOD] addModuleAndDeps [RETURN_TYPE] void   JSModule module JSModule> list JSModule> set JSModule> inProgress [VARIABLES] JSModule  dep  module  List  deps  inputs  list  workList  String  name  provide  require  Set  inProgress  set  boolean  
[buglab_swap_variables]^addModuleAndDeps ( dep, list, set ) ;^280^^^^^269^286^addModuleAndDeps ( dep, list, set, inProgress ) ;^[CLASS] JSModule  [METHOD] addModuleAndDeps [RETURN_TYPE] void   JSModule module JSModule> list JSModule> set JSModule> inProgress [VARIABLES] JSModule  dep  module  List  deps  inputs  list  workList  String  name  provide  require  Set  inProgress  set  boolean  
[buglab_swap_variables]^addModuleAndDeps ( list, dep, set, inProgress ) ;^280^^^^^269^286^addModuleAndDeps ( dep, list, set, inProgress ) ;^[CLASS] JSModule  [METHOD] addModuleAndDeps [RETURN_TYPE] void   JSModule module JSModule> list JSModule> set JSModule> inProgress [VARIABLES] JSModule  dep  module  List  deps  inputs  list  workList  String  name  provide  require  Set  inProgress  set  boolean  
[buglab_swap_variables]^addModuleAndDeps ( dep, set, list, inProgress ) ;^280^^^^^269^286^addModuleAndDeps ( dep, list, set, inProgress ) ;^[CLASS] JSModule  [METHOD] addModuleAndDeps [RETURN_TYPE] void   JSModule module JSModule> list JSModule> set JSModule> inProgress [VARIABLES] JSModule  dep  module  List  deps  inputs  list  workList  String  name  provide  require  Set  inProgress  set  boolean  
