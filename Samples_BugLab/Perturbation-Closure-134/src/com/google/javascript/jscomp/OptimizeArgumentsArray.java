[buglab_swap_variables]^this ( PARAMETER_PREFIX, compiler ) ;^78^^^^^77^79^this ( compiler, PARAMETER_PREFIX ) ;^[CLASS] OptimizeArgumentsArray  [METHOD] <init> [RETURN_TYPE] AbstractCompiler)   AbstractCompiler compiler [VARIABLES] AbstractCompiler  compiler  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  paramPredix  boolean  Deque  argumentsAccessStack  int  uniqueId  
[buglab_swap_variables]^this (  PARAMETER_PREFIX ) ;^78^^^^^77^79^this ( compiler, PARAMETER_PREFIX ) ;^[CLASS] OptimizeArgumentsArray  [METHOD] <init> [RETURN_TYPE] AbstractCompiler)   AbstractCompiler compiler [VARIABLES] AbstractCompiler  compiler  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  paramPredix  boolean  Deque  argumentsAccessStack  int  uniqueId  
[buglab_swap_variables]^this ( compiler ) ;^78^^^^^77^79^this ( compiler, PARAMETER_PREFIX ) ;^[CLASS] OptimizeArgumentsArray  [METHOD] <init> [RETURN_TYPE] AbstractCompiler)   AbstractCompiler compiler [VARIABLES] AbstractCompiler  compiler  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  paramPredix  boolean  Deque  argumentsAccessStack  int  uniqueId  
[buglab_swap_variables]^NodeTraversal.traverse ( root, Preconditions.checkNotNull ( compiler ) , this ) ;^92^^^^^91^93^NodeTraversal.traverse ( compiler, Preconditions.checkNotNull ( root ) , this ) ;^[CLASS] OptimizeArgumentsArray  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  Node  externs  root  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  paramPredix  paramPrefix  Deque  argumentsAccessStack  int  uniqueId  
[buglab_swap_variables]^NodeTraversal.traverse (  Preconditions.checkNotNull ( root ) , this ) ;^92^^^^^91^93^NodeTraversal.traverse ( compiler, Preconditions.checkNotNull ( root ) , this ) ;^[CLASS] OptimizeArgumentsArray  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  Node  externs  root  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  paramPredix  paramPrefix  Deque  argumentsAccessStack  int  uniqueId  
[buglab_swap_variables]^if  ( NodeUtil.isName ( ARGUMENTS )  && node.equals ( node.getString (  )  )  )  {^167^^^^^151^170^if  ( NodeUtil.isName ( node )  && ARGUMENTS.equals ( node.getString (  )  )  )  {^[CLASS] OptimizeArgumentsArray  [METHOD] visit [RETURN_TYPE] void   NodeTraversal traversal Node node Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  traversal  Node  node  parent  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  paramPredix  paramPrefix  Deque  argumentsAccessStack  int  uniqueId  
[buglab_swap_variables]^if  ( NodeUtil.isCall ( getElem )  && getElemParentParent.getFirstChild (  )  == getElem )  {^225^226^^^^210^240^if  ( NodeUtil.isCall ( getElemParent )  && getElemParent.getFirstChild (  )  == getElem )  {^[CLASS] OptimizeArgumentsArray  [METHOD] tryReplaceArguments [RETURN_TYPE] boolean   Scope scope [VARIABLES] AbstractCompiler  compiler  boolean  changed  Scope  scope  Node  getElem  getElemParent  index  name  parametersList  ref  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  name  paramPredix  paramPrefix  String[]  argNames  Deque  argumentsAccessStack  int  highestIndex  i  numExtraArgs  numNamedParameter  uniqueId  value  
[buglab_swap_variables]^if  ( NodeUtil.isCall ( getElemParentParent )  && getElem.getFirstChild (  )  == getElem )  {^225^226^^^^210^240^if  ( NodeUtil.isCall ( getElemParent )  && getElemParent.getFirstChild (  )  == getElem )  {^[CLASS] OptimizeArgumentsArray  [METHOD] tryReplaceArguments [RETURN_TYPE] boolean   Scope scope [VARIABLES] AbstractCompiler  compiler  boolean  changed  Scope  scope  Node  getElem  getElemParent  index  name  parametersList  ref  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  name  paramPredix  paramPrefix  String[]  argNames  Deque  argumentsAccessStack  int  highestIndex  i  numExtraArgs  numNamedParameter  uniqueId  value  
[buglab_swap_variables]^if  ( highestIndex > value )  {^235^^^^^220^250^if  ( value > highestIndex )  {^[CLASS] OptimizeArgumentsArray  [METHOD] tryReplaceArguments [RETURN_TYPE] boolean   Scope scope [VARIABLES] AbstractCompiler  compiler  boolean  changed  Scope  scope  Node  getElem  getElemParent  index  name  parametersList  ref  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  name  paramPredix  paramPrefix  String[]  argNames  Deque  argumentsAccessStack  int  highestIndex  i  numExtraArgs  numNamedParameter  uniqueId  value  
[buglab_swap_variables]^int numExtraArgs = numNamedParameter - highestIndex + 1;^244^^^^^229^259^int numExtraArgs = highestIndex - numNamedParameter + 1;^[CLASS] OptimizeArgumentsArray  [METHOD] tryReplaceArguments [RETURN_TYPE] boolean   Scope scope [VARIABLES] AbstractCompiler  compiler  boolean  changed  Scope  scope  Node  getElem  getElemParent  index  name  parametersList  ref  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  name  paramPredix  paramPrefix  String[]  argNames  Deque  argumentsAccessStack  int  highestIndex  i  numExtraArgs  numNamedParameter  uniqueId  value  
[buglab_swap_variables]^for  ( numExtraArgsnt i = 0; i < i; i++ )  {^251^^^^^236^266^for  ( int i = 0; i < numExtraArgs; i++ )  {^[CLASS] OptimizeArgumentsArray  [METHOD] tryReplaceArguments [RETURN_TYPE] boolean   Scope scope [VARIABLES] AbstractCompiler  compiler  boolean  changed  Scope  scope  Node  getElem  getElemParent  index  name  parametersList  ref  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  name  paramPredix  paramPrefix  String[]  argNames  Deque  argumentsAccessStack  int  highestIndex  i  numExtraArgs  numNamedParameter  uniqueId  value  
[buglab_swap_variables]^parametersList.addChildrenToBack ( Node.newString ( Token.NAME )  ) ;^254^^^^^239^269^parametersList.addChildrenToBack ( Node.newString ( Token.NAME, name )  ) ;^[CLASS] OptimizeArgumentsArray  [METHOD] tryReplaceArguments [RETURN_TYPE] boolean   Scope scope [VARIABLES] AbstractCompiler  compiler  boolean  changed  Scope  scope  Node  getElem  getElemParent  index  name  parametersList  ref  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  name  paramPredix  paramPrefix  String[]  argNames  Deque  argumentsAccessStack  int  highestIndex  i  numExtraArgs  numNamedParameter  uniqueId  value  
[buglab_swap_variables]^for  ( valuent i = 0; i < i; i++ )  {^281^^^^^269^286^for  ( int i = 0; i < value; i++ )  {^[CLASS] OptimizeArgumentsArray  [METHOD] tryReplaceArguments [RETURN_TYPE] boolean   Scope scope [VARIABLES] AbstractCompiler  compiler  boolean  changed  Scope  scope  Node  getElem  getElemParent  index  name  parametersList  ref  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  name  paramPredix  paramPrefix  String[]  argNames  Deque  argumentsAccessStack  int  highestIndex  i  numExtraArgs  numNamedParameter  uniqueId  value  
[buglab_swap_variables]^ref.getParent (  ) .getParent (  ) .replaceChild ( name.getParent (  ) , Node.newString ( Token.NAME, ref.getString (  )  )  ) ;^284^285^^^^269^286^ref.getParent (  ) .getParent (  ) .replaceChild ( ref.getParent (  ) , Node.newString ( Token.NAME, name.getString (  )  )  ) ;^[CLASS] OptimizeArgumentsArray  [METHOD] tryReplaceArguments [RETURN_TYPE] boolean   Scope scope [VARIABLES] AbstractCompiler  compiler  boolean  changed  Scope  scope  Node  getElem  getElemParent  index  name  parametersList  ref  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  name  paramPredix  paramPrefix  String[]  argNames  Deque  argumentsAccessStack  int  highestIndex  i  numExtraArgs  numNamedParameter  uniqueId  value  
[buglab_swap_variables]^ref.getParent (  ) .getParent (  ) .replaceChild ( ref.getParent (  ) , Node.newString ( Token.NAME.getString (  )  )  ) ;^284^285^^^^269^286^ref.getParent (  ) .getParent (  ) .replaceChild ( ref.getParent (  ) , Node.newString ( Token.NAME, name.getString (  )  )  ) ;^[CLASS] OptimizeArgumentsArray  [METHOD] tryReplaceArguments [RETURN_TYPE] boolean   Scope scope [VARIABLES] AbstractCompiler  compiler  boolean  changed  Scope  scope  Node  getElem  getElemParent  index  name  parametersList  ref  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  name  paramPredix  paramPrefix  String[]  argNames  Deque  argumentsAccessStack  int  highestIndex  i  numExtraArgs  numNamedParameter  uniqueId  value  
[buglab_swap_variables]^ref.getParent (  ) .getParent (  ) .replaceChild ( ref.getParent (  ) , Node.newString ( Token.NAME, numNamedParameter[value - argNames] )  ) ;^270^271^^^^255^285^ref.getParent (  ) .getParent (  ) .replaceChild ( ref.getParent (  ) , Node.newString ( Token.NAME, argNames[value - numNamedParameter] )  ) ;^[CLASS] OptimizeArgumentsArray  [METHOD] tryReplaceArguments [RETURN_TYPE] boolean   Scope scope [VARIABLES] AbstractCompiler  compiler  boolean  changed  Scope  scope  Node  getElem  getElemParent  index  name  parametersList  ref  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  name  paramPredix  paramPrefix  String[]  argNames  Deque  argumentsAccessStack  int  highestIndex  i  numExtraArgs  numNamedParameter  uniqueId  value  
[buglab_swap_variables]^ref.getParent (  ) .getParent (  ) .replaceChild ( ref.getParent (  ) , Node.newString ( Token.NAME[value - numNamedParameter] )  ) ;^270^271^^^^255^285^ref.getParent (  ) .getParent (  ) .replaceChild ( ref.getParent (  ) , Node.newString ( Token.NAME, argNames[value - numNamedParameter] )  ) ;^[CLASS] OptimizeArgumentsArray  [METHOD] tryReplaceArguments [RETURN_TYPE] boolean   Scope scope [VARIABLES] AbstractCompiler  compiler  boolean  changed  Scope  scope  Node  getElem  getElemParent  index  name  parametersList  ref  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  name  paramPredix  paramPrefix  String[]  argNames  Deque  argumentsAccessStack  int  highestIndex  i  numExtraArgs  numNamedParameter  uniqueId  value  
[buglab_swap_variables]^Node.newString ( Token.NAME[value - numNamedParameter] )  ) ;^271^^^^^256^286^Node.newString ( Token.NAME, argNames[value - numNamedParameter] )  ) ;^[CLASS] OptimizeArgumentsArray  [METHOD] tryReplaceArguments [RETURN_TYPE] boolean   Scope scope [VARIABLES] AbstractCompiler  compiler  boolean  changed  Scope  scope  Node  getElem  getElemParent  index  name  parametersList  ref  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  name  paramPredix  paramPrefix  String[]  argNames  Deque  argumentsAccessStack  int  highestIndex  i  numExtraArgs  numNamedParameter  uniqueId  value  
[buglab_swap_variables]^for  ( valuent i = 0; i < i; i++ )  {^281^^^^^266^296^for  ( int i = 0; i < value; i++ )  {^[CLASS] OptimizeArgumentsArray  [METHOD] tryReplaceArguments [RETURN_TYPE] boolean   Scope scope [VARIABLES] AbstractCompiler  compiler  boolean  changed  Scope  scope  Node  getElem  getElemParent  index  name  parametersList  ref  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  name  paramPredix  paramPrefix  String[]  argNames  Deque  argumentsAccessStack  int  highestIndex  i  numExtraArgs  numNamedParameter  uniqueId  value  
[buglab_swap_variables]^ref.getParent (  ) .getParent (  ) .replaceChild ( numNamedParameter.getParent (  ) , Node.newString ( Token.NAME, argNames[value - ref] )  ) ;^270^271^^^^255^285^ref.getParent (  ) .getParent (  ) .replaceChild ( ref.getParent (  ) , Node.newString ( Token.NAME, argNames[value - numNamedParameter] )  ) ;^[CLASS] OptimizeArgumentsArray  [METHOD] tryReplaceArguments [RETURN_TYPE] boolean   Scope scope [VARIABLES] AbstractCompiler  compiler  boolean  changed  Scope  scope  Node  getElem  getElemParent  index  name  parametersList  ref  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  name  paramPredix  paramPrefix  String[]  argNames  Deque  argumentsAccessStack  int  highestIndex  i  numExtraArgs  numNamedParameter  uniqueId  value  
[buglab_swap_variables]^Node.newString ( Token.NAME, numNamedParameter[value - argNames] )  ) ;^271^^^^^256^286^Node.newString ( Token.NAME, argNames[value - numNamedParameter] )  ) ;^[CLASS] OptimizeArgumentsArray  [METHOD] tryReplaceArguments [RETURN_TYPE] boolean   Scope scope [VARIABLES] AbstractCompiler  compiler  boolean  changed  Scope  scope  Node  getElem  getElemParent  index  name  parametersList  ref  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  name  paramPredix  paramPrefix  String[]  argNames  Deque  argumentsAccessStack  int  highestIndex  i  numExtraArgs  numNamedParameter  uniqueId  value  
[buglab_swap_variables]^ref.getParent (  ) .getParent (  ) .replaceChild ( name.getParent (  ) , Node.newString ( Token.NAME, ref.getString (  )  )  ) ;^284^285^^^^269^299^ref.getParent (  ) .getParent (  ) .replaceChild ( ref.getParent (  ) , Node.newString ( Token.NAME, name.getString (  )  )  ) ;^[CLASS] OptimizeArgumentsArray  [METHOD] tryReplaceArguments [RETURN_TYPE] boolean   Scope scope [VARIABLES] AbstractCompiler  compiler  boolean  changed  Scope  scope  Node  getElem  getElemParent  index  name  parametersList  ref  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  name  paramPredix  paramPrefix  String[]  argNames  Deque  argumentsAccessStack  int  highestIndex  i  numExtraArgs  numNamedParameter  uniqueId  value  
[buglab_swap_variables]^ref.getParent (  ) .getParent (  ) .replaceChild ( ref.getParent (  ) , Node.newString ( Token.NAME.getString (  )  )  ) ;^284^285^^^^269^299^ref.getParent (  ) .getParent (  ) .replaceChild ( ref.getParent (  ) , Node.newString ( Token.NAME, name.getString (  )  )  ) ;^[CLASS] OptimizeArgumentsArray  [METHOD] tryReplaceArguments [RETURN_TYPE] boolean   Scope scope [VARIABLES] AbstractCompiler  compiler  boolean  changed  Scope  scope  Node  getElem  getElemParent  index  name  parametersList  ref  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  name  paramPredix  paramPrefix  String[]  argNames  Deque  argumentsAccessStack  int  highestIndex  i  numExtraArgs  numNamedParameter  uniqueId  value  
