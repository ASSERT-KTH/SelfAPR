[BugLab_Variable_Misuse]^this ( compiler, paramPredix ) ;^78^^^^^77^79^this ( compiler, PARAMETER_PREFIX ) ;^[CLASS] OptimizeArgumentsArray  [METHOD] <init> [RETURN_TYPE] AbstractCompiler)   AbstractCompiler compiler [VARIABLES] AbstractCompiler  compiler  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  paramPredix  boolean  Deque  argumentsAccessStack  int  uniqueId  
[BugLab_Argument_Swapping]^this ( PARAMETER_PREFIX, compiler ) ;^78^^^^^77^79^this ( compiler, PARAMETER_PREFIX ) ;^[CLASS] OptimizeArgumentsArray  [METHOD] <init> [RETURN_TYPE] AbstractCompiler)   AbstractCompiler compiler [VARIABLES] AbstractCompiler  compiler  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  paramPredix  boolean  Deque  argumentsAccessStack  int  uniqueId  
[BugLab_Variable_Misuse]^this.paramPredix = Preconditions.checkNotNull ( paramPredix ) ;^87^^^^^85^88^this.paramPredix = Preconditions.checkNotNull ( paramPrefix ) ;^[CLASS] OptimizeArgumentsArray  [METHOD] <init> [RETURN_TYPE] String)   AbstractCompiler compiler String paramPrefix [VARIABLES] AbstractCompiler  compiler  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  paramPredix  paramPrefix  boolean  Deque  argumentsAccessStack  int  uniqueId  
[BugLab_Argument_Swapping]^NodeTraversal.traverse ( root, Preconditions.checkNotNull ( compiler ) , this ) ;^92^^^^^91^93^NodeTraversal.traverse ( compiler, Preconditions.checkNotNull ( root ) , this ) ;^[CLASS] OptimizeArgumentsArray  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  Node  externs  root  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  paramPredix  paramPrefix  Deque  argumentsAccessStack  int  uniqueId  
[BugLab_Variable_Misuse]^NodeTraversal.traverse ( compiler, Preconditions.checkNotNull ( externs ) , this ) ;^92^^^^^91^93^NodeTraversal.traverse ( compiler, Preconditions.checkNotNull ( root ) , this ) ;^[CLASS] OptimizeArgumentsArray  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  Node  externs  root  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  paramPredix  paramPrefix  Deque  argumentsAccessStack  int  uniqueId  
[BugLab_Wrong_Operator]^if  ( currentArgumentsAccess == null )  {^108^^^^^96^112^if  ( currentArgumentsAccess != null )  {^[CLASS] OptimizeArgumentsArray  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal traversal [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  traversal  Node  function  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  paramPredix  paramPrefix  Deque  argumentsAccessStack  int  uniqueId  
[BugLab_Wrong_Operator]^if  ( currentArgumentsAccess != null )  {^121^^^^^115^141^if  ( currentArgumentsAccess == null )  {^[CLASS] OptimizeArgumentsArray  [METHOD] exitScope [RETURN_TYPE] void   NodeTraversal traversal [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  traversal  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  paramPredix  paramPrefix  Deque  argumentsAccessStack  int  uniqueId  
[BugLab_Wrong_Literal]^return false;^147^^^^^144^148^return true;^[CLASS] OptimizeArgumentsArray  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node node Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  nodeTraversal  Node  node  parent  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  paramPredix  paramPrefix  Deque  argumentsAccessStack  int  uniqueId  
[BugLab_Variable_Misuse]^Preconditions.checkNotNull ( parent ) ;^153^^^^^151^170^Preconditions.checkNotNull ( node ) ;^[CLASS] OptimizeArgumentsArray  [METHOD] visit [RETURN_TYPE] void   NodeTraversal traversal Node node Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  traversal  Node  node  parent  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  paramPredix  paramPrefix  Deque  argumentsAccessStack  int  uniqueId  
[BugLab_Wrong_Operator]^if  ( currentArgumentsAccess != null )  {^161^^^^^151^170^if  ( currentArgumentsAccess == null )  {^[CLASS] OptimizeArgumentsArray  [METHOD] visit [RETURN_TYPE] void   NodeTraversal traversal Node node Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  traversal  Node  node  parent  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  paramPredix  paramPrefix  Deque  argumentsAccessStack  int  uniqueId  
[BugLab_Variable_Misuse]^if  ( NodeUtil.isName ( parent )  && ARGUMENTS.equals ( node.getString (  )  )  )  {^167^^^^^151^170^if  ( NodeUtil.isName ( node )  && ARGUMENTS.equals ( node.getString (  )  )  )  {^[CLASS] OptimizeArgumentsArray  [METHOD] visit [RETURN_TYPE] void   NodeTraversal traversal Node node Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  traversal  Node  node  parent  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  paramPredix  paramPrefix  Deque  argumentsAccessStack  int  uniqueId  
[BugLab_Variable_Misuse]^if  ( NodeUtil.isName ( node )  && paramPrefix.equals ( node.getString (  )  )  )  {^167^^^^^151^170^if  ( NodeUtil.isName ( node )  && ARGUMENTS.equals ( node.getString (  )  )  )  {^[CLASS] OptimizeArgumentsArray  [METHOD] visit [RETURN_TYPE] void   NodeTraversal traversal Node node Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  traversal  Node  node  parent  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  paramPredix  paramPrefix  Deque  argumentsAccessStack  int  uniqueId  
[BugLab_Argument_Swapping]^if  ( NodeUtil.isName ( ARGUMENTS )  && node.equals ( node.getString (  )  )  )  {^167^^^^^151^170^if  ( NodeUtil.isName ( node )  && ARGUMENTS.equals ( node.getString (  )  )  )  {^[CLASS] OptimizeArgumentsArray  [METHOD] visit [RETURN_TYPE] void   NodeTraversal traversal Node node Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  traversal  Node  node  parent  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  paramPredix  paramPrefix  Deque  argumentsAccessStack  int  uniqueId  
[BugLab_Wrong_Operator]^if  ( NodeUtil.isName ( node )  || ARGUMENTS.equals ( node.getString (  )  )  )  {^167^^^^^151^170^if  ( NodeUtil.isName ( node )  && ARGUMENTS.equals ( node.getString (  )  )  )  {^[CLASS] OptimizeArgumentsArray  [METHOD] visit [RETURN_TYPE] void   NodeTraversal traversal Node node Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  traversal  Node  node  parent  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  paramPredix  paramPrefix  Deque  argumentsAccessStack  int  uniqueId  
[BugLab_Variable_Misuse]^currentArgumentsAccess.add ( parent ) ;^168^^^^^151^170^currentArgumentsAccess.add ( node ) ;^[CLASS] OptimizeArgumentsArray  [METHOD] visit [RETURN_TYPE] void   NodeTraversal traversal Node node Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  traversal  Node  node  parent  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  paramPredix  paramPrefix  Deque  argumentsAccessStack  int  uniqueId  
[BugLab_Variable_Misuse]^Preconditions.checkState ( ref.getType (  )  == Token.LP ) ;^182^^^^^167^197^Preconditions.checkState ( parametersList.getType (  )  == Token.LP ) ;^[CLASS] OptimizeArgumentsArray  [METHOD] tryReplaceArguments [RETURN_TYPE] boolean   Scope scope [VARIABLES] AbstractCompiler  compiler  boolean  changed  Scope  scope  Node  getElem  getElemParent  index  name  parametersList  ref  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  name  paramPredix  paramPrefix  String[]  argNames  Deque  argumentsAccessStack  int  highestIndex  i  numExtraArgs  numNamedParameter  uniqueId  value  
[BugLab_Wrong_Operator]^Preconditions.checkState ( parametersList.getType (  )  >= Token.LP ) ;^182^^^^^167^197^Preconditions.checkState ( parametersList.getType (  )  == Token.LP ) ;^[CLASS] OptimizeArgumentsArray  [METHOD] tryReplaceArguments [RETURN_TYPE] boolean   Scope scope [VARIABLES] AbstractCompiler  compiler  boolean  changed  Scope  scope  Node  getElem  getElemParent  index  name  parametersList  ref  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  name  paramPredix  paramPrefix  String[]  argNames  Deque  argumentsAccessStack  int  highestIndex  i  numExtraArgs  numNamedParameter  uniqueId  value  
[BugLab_Wrong_Literal]^boolean changed = true;^186^^^^^171^201^boolean changed = false;^[CLASS] OptimizeArgumentsArray  [METHOD] tryReplaceArguments [RETURN_TYPE] boolean   Scope scope [VARIABLES] AbstractCompiler  compiler  boolean  changed  Scope  scope  Node  getElem  getElemParent  index  name  parametersList  ref  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  name  paramPredix  paramPrefix  String[]  argNames  Deque  argumentsAccessStack  int  highestIndex  i  numExtraArgs  numNamedParameter  uniqueId  value  
[BugLab_Variable_Misuse]^int numNamedParameter = ref.getChildCount (  ) ;^190^^^^^175^205^int numNamedParameter = parametersList.getChildCount (  ) ;^[CLASS] OptimizeArgumentsArray  [METHOD] tryReplaceArguments [RETURN_TYPE] boolean   Scope scope [VARIABLES] AbstractCompiler  compiler  boolean  changed  Scope  scope  Node  getElem  getElemParent  index  name  parametersList  ref  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  name  paramPredix  paramPrefix  String[]  argNames  Deque  argumentsAccessStack  int  highestIndex  i  numExtraArgs  numNamedParameter  uniqueId  value  
[BugLab_Variable_Misuse]^int numNamedParameter = name.getChildCount (  ) ;^190^^^^^175^205^int numNamedParameter = parametersList.getChildCount (  ) ;^[CLASS] OptimizeArgumentsArray  [METHOD] tryReplaceArguments [RETURN_TYPE] boolean   Scope scope [VARIABLES] AbstractCompiler  compiler  boolean  changed  Scope  scope  Node  getElem  getElemParent  index  name  parametersList  ref  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  name  paramPredix  paramPrefix  String[]  argNames  Deque  argumentsAccessStack  int  highestIndex  i  numExtraArgs  numNamedParameter  uniqueId  value  
[BugLab_Variable_Misuse]^int highestIndex = value - 1;^195^^^^^180^210^int highestIndex = numNamedParameter - 1;^[CLASS] OptimizeArgumentsArray  [METHOD] tryReplaceArguments [RETURN_TYPE] boolean   Scope scope [VARIABLES] AbstractCompiler  compiler  boolean  changed  Scope  scope  Node  getElem  getElemParent  index  name  parametersList  ref  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  name  paramPredix  paramPrefix  String[]  argNames  Deque  argumentsAccessStack  int  highestIndex  i  numExtraArgs  numNamedParameter  uniqueId  value  
[BugLab_Wrong_Operator]^int highestIndex = numNamedParameter  <=  1;^195^^^^^180^210^int highestIndex = numNamedParameter - 1;^[CLASS] OptimizeArgumentsArray  [METHOD] tryReplaceArguments [RETURN_TYPE] boolean   Scope scope [VARIABLES] AbstractCompiler  compiler  boolean  changed  Scope  scope  Node  getElem  getElemParent  index  name  parametersList  ref  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  name  paramPredix  paramPrefix  String[]  argNames  Deque  argumentsAccessStack  int  highestIndex  i  numExtraArgs  numNamedParameter  uniqueId  value  
[BugLab_Wrong_Literal]^int highestIndex = numNamedParameter - i;^195^^^^^180^210^int highestIndex = numNamedParameter - 1;^[CLASS] OptimizeArgumentsArray  [METHOD] tryReplaceArguments [RETURN_TYPE] boolean   Scope scope [VARIABLES] AbstractCompiler  compiler  boolean  changed  Scope  scope  Node  getElem  getElemParent  index  name  parametersList  ref  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  name  paramPredix  paramPrefix  String[]  argNames  Deque  argumentsAccessStack  int  highestIndex  i  numExtraArgs  numNamedParameter  uniqueId  value  
[BugLab_Variable_Misuse]^if  ( ref.getType (  )  != Token.GETELEM )  {^206^^^^^191^221^if  ( getElem.getType (  )  != Token.GETELEM )  {^[CLASS] OptimizeArgumentsArray  [METHOD] tryReplaceArguments [RETURN_TYPE] boolean   Scope scope [VARIABLES] AbstractCompiler  compiler  boolean  changed  Scope  scope  Node  getElem  getElemParent  index  name  parametersList  ref  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  name  paramPredix  paramPrefix  String[]  argNames  Deque  argumentsAccessStack  int  highestIndex  i  numExtraArgs  numNamedParameter  uniqueId  value  
[BugLab_Wrong_Operator]^if  ( getElem.getType (  )  == Token.GETELEM )  {^206^^^^^191^221^if  ( getElem.getType (  )  != Token.GETELEM )  {^[CLASS] OptimizeArgumentsArray  [METHOD] tryReplaceArguments [RETURN_TYPE] boolean   Scope scope [VARIABLES] AbstractCompiler  compiler  boolean  changed  Scope  scope  Node  getElem  getElemParent  index  name  parametersList  ref  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  name  paramPredix  paramPrefix  String[]  argNames  Deque  argumentsAccessStack  int  highestIndex  i  numExtraArgs  numNamedParameter  uniqueId  value  
[BugLab_Wrong_Literal]^return true;^207^^^^^192^222^return false;^[CLASS] OptimizeArgumentsArray  [METHOD] tryReplaceArguments [RETURN_TYPE] boolean   Scope scope [VARIABLES] AbstractCompiler  compiler  boolean  changed  Scope  scope  Node  getElem  getElemParent  index  name  parametersList  ref  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  name  paramPredix  paramPrefix  String[]  argNames  Deque  argumentsAccessStack  int  highestIndex  i  numExtraArgs  numNamedParameter  uniqueId  value  
[BugLab_Variable_Misuse]^if  ( parametersList.getType (  )  != Token.NUMBER )  {^214^^^^^199^229^if  ( index.getType (  )  != Token.NUMBER )  {^[CLASS] OptimizeArgumentsArray  [METHOD] tryReplaceArguments [RETURN_TYPE] boolean   Scope scope [VARIABLES] AbstractCompiler  compiler  boolean  changed  Scope  scope  Node  getElem  getElemParent  index  name  parametersList  ref  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  name  paramPredix  paramPrefix  String[]  argNames  Deque  argumentsAccessStack  int  highestIndex  i  numExtraArgs  numNamedParameter  uniqueId  value  
[BugLab_Wrong_Operator]^if  ( index.getType (  )  == Token.NUMBER )  {^214^^^^^199^229^if  ( index.getType (  )  != Token.NUMBER )  {^[CLASS] OptimizeArgumentsArray  [METHOD] tryReplaceArguments [RETURN_TYPE] boolean   Scope scope [VARIABLES] AbstractCompiler  compiler  boolean  changed  Scope  scope  Node  getElem  getElemParent  index  name  parametersList  ref  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  name  paramPredix  paramPrefix  String[]  argNames  Deque  argumentsAccessStack  int  highestIndex  i  numExtraArgs  numNamedParameter  uniqueId  value  
[BugLab_Wrong_Literal]^return true;^219^^^^^204^234^return false;^[CLASS] OptimizeArgumentsArray  [METHOD] tryReplaceArguments [RETURN_TYPE] boolean   Scope scope [VARIABLES] AbstractCompiler  compiler  boolean  changed  Scope  scope  Node  getElem  getElemParent  index  name  parametersList  ref  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  name  paramPredix  paramPrefix  String[]  argNames  Deque  argumentsAccessStack  int  highestIndex  i  numExtraArgs  numNamedParameter  uniqueId  value  
[BugLab_Variable_Misuse]^if  ( NodeUtil.isCall ( ref )  && getElemParent.getFirstChild (  )  == getElem )  {^225^226^^^^210^240^if  ( NodeUtil.isCall ( getElemParent )  && getElemParent.getFirstChild (  )  == getElem )  {^[CLASS] OptimizeArgumentsArray  [METHOD] tryReplaceArguments [RETURN_TYPE] boolean   Scope scope [VARIABLES] AbstractCompiler  compiler  boolean  changed  Scope  scope  Node  getElem  getElemParent  index  name  parametersList  ref  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  name  paramPredix  paramPrefix  String[]  argNames  Deque  argumentsAccessStack  int  highestIndex  i  numExtraArgs  numNamedParameter  uniqueId  value  
[BugLab_Variable_Misuse]^if  ( NodeUtil.isCall ( refParent )  && getElemParent.getFirstChild (  )  == getElem )  {^225^226^^^^210^240^if  ( NodeUtil.isCall ( getElemParent )  && getElemParent.getFirstChild (  )  == getElem )  {^[CLASS] OptimizeArgumentsArray  [METHOD] tryReplaceArguments [RETURN_TYPE] boolean   Scope scope [VARIABLES] AbstractCompiler  compiler  boolean  changed  Scope  scope  Node  getElem  getElemParent  index  name  parametersList  ref  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  name  paramPredix  paramPrefix  String[]  argNames  Deque  argumentsAccessStack  int  highestIndex  i  numExtraArgs  numNamedParameter  uniqueId  value  
[BugLab_Argument_Swapping]^if  ( NodeUtil.isCall ( getElem )  && getElemParentParent.getFirstChild (  )  == getElem )  {^225^226^^^^210^240^if  ( NodeUtil.isCall ( getElemParent )  && getElemParent.getFirstChild (  )  == getElem )  {^[CLASS] OptimizeArgumentsArray  [METHOD] tryReplaceArguments [RETURN_TYPE] boolean   Scope scope [VARIABLES] AbstractCompiler  compiler  boolean  changed  Scope  scope  Node  getElem  getElemParent  index  name  parametersList  ref  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  name  paramPredix  paramPrefix  String[]  argNames  Deque  argumentsAccessStack  int  highestIndex  i  numExtraArgs  numNamedParameter  uniqueId  value  
[BugLab_Argument_Swapping]^if  ( NodeUtil.isCall ( getElemParentParent )  && getElem.getFirstChild (  )  == getElem )  {^225^226^^^^210^240^if  ( NodeUtil.isCall ( getElemParent )  && getElemParent.getFirstChild (  )  == getElem )  {^[CLASS] OptimizeArgumentsArray  [METHOD] tryReplaceArguments [RETURN_TYPE] boolean   Scope scope [VARIABLES] AbstractCompiler  compiler  boolean  changed  Scope  scope  Node  getElem  getElemParent  index  name  parametersList  ref  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  name  paramPredix  paramPrefix  String[]  argNames  Deque  argumentsAccessStack  int  highestIndex  i  numExtraArgs  numNamedParameter  uniqueId  value  
[BugLab_Wrong_Operator]^if  ( NodeUtil.isCall ( getElemParent )  || getElemParent.getFirstChild (  )  == getElem )  {^225^226^^^^210^240^if  ( NodeUtil.isCall ( getElemParent )  && getElemParent.getFirstChild (  )  == getElem )  {^[CLASS] OptimizeArgumentsArray  [METHOD] tryReplaceArguments [RETURN_TYPE] boolean   Scope scope [VARIABLES] AbstractCompiler  compiler  boolean  changed  Scope  scope  Node  getElem  getElemParent  index  name  parametersList  ref  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  name  paramPredix  paramPrefix  String[]  argNames  Deque  argumentsAccessStack  int  highestIndex  i  numExtraArgs  numNamedParameter  uniqueId  value  
[BugLab_Wrong_Operator]^if  ( NodeUtil.isCall ( getElemParent )  && getElemParent.getFirstChild (  )  <= getElem )  {^225^226^^^^210^240^if  ( NodeUtil.isCall ( getElemParent )  && getElemParent.getFirstChild (  )  == getElem )  {^[CLASS] OptimizeArgumentsArray  [METHOD] tryReplaceArguments [RETURN_TYPE] boolean   Scope scope [VARIABLES] AbstractCompiler  compiler  boolean  changed  Scope  scope  Node  getElem  getElemParent  index  name  parametersList  ref  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  name  paramPredix  paramPrefix  String[]  argNames  Deque  argumentsAccessStack  int  highestIndex  i  numExtraArgs  numNamedParameter  uniqueId  value  
[BugLab_Wrong_Literal]^return true;^229^^^^^225^230^return false;^[CLASS] OptimizeArgumentsArray  [METHOD] tryReplaceArguments [RETURN_TYPE] boolean   Scope scope [VARIABLES] AbstractCompiler  compiler  boolean  changed  Scope  scope  Node  getElem  getElemParent  index  name  parametersList  ref  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  name  paramPredix  paramPrefix  String[]  argNames  Deque  argumentsAccessStack  int  highestIndex  i  numExtraArgs  numNamedParameter  uniqueId  value  
[BugLab_Variable_Misuse]^if  ( uniqueId > highestIndex )  {^235^^^^^220^250^if  ( value > highestIndex )  {^[CLASS] OptimizeArgumentsArray  [METHOD] tryReplaceArguments [RETURN_TYPE] boolean   Scope scope [VARIABLES] AbstractCompiler  compiler  boolean  changed  Scope  scope  Node  getElem  getElemParent  index  name  parametersList  ref  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  name  paramPredix  paramPrefix  String[]  argNames  Deque  argumentsAccessStack  int  highestIndex  i  numExtraArgs  numNamedParameter  uniqueId  value  
[BugLab_Variable_Misuse]^if  ( value > uniqueId )  {^235^^^^^220^250^if  ( value > highestIndex )  {^[CLASS] OptimizeArgumentsArray  [METHOD] tryReplaceArguments [RETURN_TYPE] boolean   Scope scope [VARIABLES] AbstractCompiler  compiler  boolean  changed  Scope  scope  Node  getElem  getElemParent  index  name  parametersList  ref  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  name  paramPredix  paramPrefix  String[]  argNames  Deque  argumentsAccessStack  int  highestIndex  i  numExtraArgs  numNamedParameter  uniqueId  value  
[BugLab_Argument_Swapping]^if  ( highestIndex > value )  {^235^^^^^220^250^if  ( value > highestIndex )  {^[CLASS] OptimizeArgumentsArray  [METHOD] tryReplaceArguments [RETURN_TYPE] boolean   Scope scope [VARIABLES] AbstractCompiler  compiler  boolean  changed  Scope  scope  Node  getElem  getElemParent  index  name  parametersList  ref  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  name  paramPredix  paramPrefix  String[]  argNames  Deque  argumentsAccessStack  int  highestIndex  i  numExtraArgs  numNamedParameter  uniqueId  value  
[BugLab_Wrong_Operator]^if  ( value < highestIndex )  {^235^^^^^220^250^if  ( value > highestIndex )  {^[CLASS] OptimizeArgumentsArray  [METHOD] tryReplaceArguments [RETURN_TYPE] boolean   Scope scope [VARIABLES] AbstractCompiler  compiler  boolean  changed  Scope  scope  Node  getElem  getElemParent  index  name  parametersList  ref  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  name  paramPredix  paramPrefix  String[]  argNames  Deque  argumentsAccessStack  int  highestIndex  i  numExtraArgs  numNamedParameter  uniqueId  value  
[BugLab_Variable_Misuse]^highestIndex = uniqueId;^236^^^^^221^251^highestIndex = value;^[CLASS] OptimizeArgumentsArray  [METHOD] tryReplaceArguments [RETURN_TYPE] boolean   Scope scope [VARIABLES] AbstractCompiler  compiler  boolean  changed  Scope  scope  Node  getElem  getElemParent  index  name  parametersList  ref  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  name  paramPredix  paramPrefix  String[]  argNames  Deque  argumentsAccessStack  int  highestIndex  i  numExtraArgs  numNamedParameter  uniqueId  value  
[BugLab_Wrong_Literal]^return true;^229^^^^^214^244^return false;^[CLASS] OptimizeArgumentsArray  [METHOD] tryReplaceArguments [RETURN_TYPE] boolean   Scope scope [VARIABLES] AbstractCompiler  compiler  boolean  changed  Scope  scope  Node  getElem  getElemParent  index  name  parametersList  ref  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  name  paramPredix  paramPrefix  String[]  argNames  Deque  argumentsAccessStack  int  highestIndex  i  numExtraArgs  numNamedParameter  uniqueId  value  
[BugLab_Variable_Misuse]^Node getElem = parametersList.getParent (  ) ;^201^^^^^186^216^Node getElem = ref.getParent (  ) ;^[CLASS] OptimizeArgumentsArray  [METHOD] tryReplaceArguments [RETURN_TYPE] boolean   Scope scope [VARIABLES] AbstractCompiler  compiler  boolean  changed  Scope  scope  Node  getElem  getElemParent  index  name  parametersList  ref  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  name  paramPredix  paramPrefix  String[]  argNames  Deque  argumentsAccessStack  int  highestIndex  i  numExtraArgs  numNamedParameter  uniqueId  value  
[BugLab_Variable_Misuse]^Node index = parametersList.getNext (  ) ;^210^^^^^195^225^Node index = ref.getNext (  ) ;^[CLASS] OptimizeArgumentsArray  [METHOD] tryReplaceArguments [RETURN_TYPE] boolean   Scope scope [VARIABLES] AbstractCompiler  compiler  boolean  changed  Scope  scope  Node  getElem  getElemParent  index  name  parametersList  ref  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  name  paramPredix  paramPrefix  String[]  argNames  Deque  argumentsAccessStack  int  highestIndex  i  numExtraArgs  numNamedParameter  uniqueId  value  
[BugLab_Variable_Misuse]^Node refParent = getElem.getParent (  ) ;^222^^^^^207^237^Node getElemParent = getElem.getParent (  ) ;^[CLASS] OptimizeArgumentsArray  [METHOD] tryReplaceArguments [RETURN_TYPE] boolean   Scope scope [VARIABLES] AbstractCompiler  compiler  boolean  changed  Scope  scope  Node  getElem  getElemParent  index  name  parametersList  ref  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  name  paramPredix  paramPrefix  String[]  argNames  Deque  argumentsAccessStack  int  highestIndex  i  numExtraArgs  numNamedParameter  uniqueId  value  
[BugLab_Variable_Misuse]^Node getElem = name.getParent (  ) ;^201^^^^^186^216^Node getElem = ref.getParent (  ) ;^[CLASS] OptimizeArgumentsArray  [METHOD] tryReplaceArguments [RETURN_TYPE] boolean   Scope scope [VARIABLES] AbstractCompiler  compiler  boolean  changed  Scope  scope  Node  getElem  getElemParent  index  name  parametersList  ref  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  name  paramPredix  paramPrefix  String[]  argNames  Deque  argumentsAccessStack  int  highestIndex  i  numExtraArgs  numNamedParameter  uniqueId  value  
[BugLab_Variable_Misuse]^int numExtraArgs = value - numNamedParameter + 1;^244^^^^^229^259^int numExtraArgs = highestIndex - numNamedParameter + 1;^[CLASS] OptimizeArgumentsArray  [METHOD] tryReplaceArguments [RETURN_TYPE] boolean   Scope scope [VARIABLES] AbstractCompiler  compiler  boolean  changed  Scope  scope  Node  getElem  getElemParent  index  name  parametersList  ref  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  name  paramPredix  paramPrefix  String[]  argNames  Deque  argumentsAccessStack  int  highestIndex  i  numExtraArgs  numNamedParameter  uniqueId  value  
[BugLab_Variable_Misuse]^int numExtraArgs = highestIndex - value + 1;^244^^^^^229^259^int numExtraArgs = highestIndex - numNamedParameter + 1;^[CLASS] OptimizeArgumentsArray  [METHOD] tryReplaceArguments [RETURN_TYPE] boolean   Scope scope [VARIABLES] AbstractCompiler  compiler  boolean  changed  Scope  scope  Node  getElem  getElemParent  index  name  parametersList  ref  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  name  paramPredix  paramPrefix  String[]  argNames  Deque  argumentsAccessStack  int  highestIndex  i  numExtraArgs  numNamedParameter  uniqueId  value  
[BugLab_Argument_Swapping]^int numExtraArgs = numNamedParameter - highestIndex + 1;^244^^^^^229^259^int numExtraArgs = highestIndex - numNamedParameter + 1;^[CLASS] OptimizeArgumentsArray  [METHOD] tryReplaceArguments [RETURN_TYPE] boolean   Scope scope [VARIABLES] AbstractCompiler  compiler  boolean  changed  Scope  scope  Node  getElem  getElemParent  index  name  parametersList  ref  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  name  paramPredix  paramPrefix  String[]  argNames  Deque  argumentsAccessStack  int  highestIndex  i  numExtraArgs  numNamedParameter  uniqueId  value  
[BugLab_Wrong_Operator]^int numExtraArgs = highestIndex  !=  numNamedParameter + 1;^244^^^^^229^259^int numExtraArgs = highestIndex - numNamedParameter + 1;^[CLASS] OptimizeArgumentsArray  [METHOD] tryReplaceArguments [RETURN_TYPE] boolean   Scope scope [VARIABLES] AbstractCompiler  compiler  boolean  changed  Scope  scope  Node  getElem  getElemParent  index  name  parametersList  ref  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  name  paramPredix  paramPrefix  String[]  argNames  Deque  argumentsAccessStack  int  highestIndex  i  numExtraArgs  numNamedParameter  uniqueId  value  
[BugLab_Wrong_Literal]^int numExtraArgs = highestIndex - numNamedParameter + i;^244^^^^^229^259^int numExtraArgs = highestIndex - numNamedParameter + 1;^[CLASS] OptimizeArgumentsArray  [METHOD] tryReplaceArguments [RETURN_TYPE] boolean   Scope scope [VARIABLES] AbstractCompiler  compiler  boolean  changed  Scope  scope  Node  getElem  getElemParent  index  name  parametersList  ref  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  name  paramPredix  paramPrefix  String[]  argNames  Deque  argumentsAccessStack  int  highestIndex  i  numExtraArgs  numNamedParameter  uniqueId  value  
[BugLab_Variable_Misuse]^for  ( valuent i = 0; i < numExtraArgs; i++ )  {^251^^^^^236^266^for  ( int i = 0; i < numExtraArgs; i++ )  {^[CLASS] OptimizeArgumentsArray  [METHOD] tryReplaceArguments [RETURN_TYPE] boolean   Scope scope [VARIABLES] AbstractCompiler  compiler  boolean  changed  Scope  scope  Node  getElem  getElemParent  index  name  parametersList  ref  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  name  paramPredix  paramPrefix  String[]  argNames  Deque  argumentsAccessStack  int  highestIndex  i  numExtraArgs  numNamedParameter  uniqueId  value  
[BugLab_Variable_Misuse]^for  ( int i = 0; i < value; i++ )  {^251^^^^^236^266^for  ( int i = 0; i < numExtraArgs; i++ )  {^[CLASS] OptimizeArgumentsArray  [METHOD] tryReplaceArguments [RETURN_TYPE] boolean   Scope scope [VARIABLES] AbstractCompiler  compiler  boolean  changed  Scope  scope  Node  getElem  getElemParent  index  name  parametersList  ref  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  name  paramPredix  paramPrefix  String[]  argNames  Deque  argumentsAccessStack  int  highestIndex  i  numExtraArgs  numNamedParameter  uniqueId  value  
[BugLab_Argument_Swapping]^for  ( numExtraArgsnt i = 0; i < i; i++ )  {^251^^^^^236^266^for  ( int i = 0; i < numExtraArgs; i++ )  {^[CLASS] OptimizeArgumentsArray  [METHOD] tryReplaceArguments [RETURN_TYPE] boolean   Scope scope [VARIABLES] AbstractCompiler  compiler  boolean  changed  Scope  scope  Node  getElem  getElemParent  index  name  parametersList  ref  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  name  paramPredix  paramPrefix  String[]  argNames  Deque  argumentsAccessStack  int  highestIndex  i  numExtraArgs  numNamedParameter  uniqueId  value  
[BugLab_Wrong_Operator]^for  ( int i = 0; i <= numExtraArgs; i++ )  {^251^^^^^236^266^for  ( int i = 0; i < numExtraArgs; i++ )  {^[CLASS] OptimizeArgumentsArray  [METHOD] tryReplaceArguments [RETURN_TYPE] boolean   Scope scope [VARIABLES] AbstractCompiler  compiler  boolean  changed  Scope  scope  Node  getElem  getElemParent  index  name  parametersList  ref  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  name  paramPredix  paramPrefix  String[]  argNames  Deque  argumentsAccessStack  int  highestIndex  i  numExtraArgs  numNamedParameter  uniqueId  value  
[BugLab_Variable_Misuse]^argNames[i] = paramPrefix;^253^^^^^238^268^argNames[i] = name;^[CLASS] OptimizeArgumentsArray  [METHOD] tryReplaceArguments [RETURN_TYPE] boolean   Scope scope [VARIABLES] AbstractCompiler  compiler  boolean  changed  Scope  scope  Node  getElem  getElemParent  index  name  parametersList  ref  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  name  paramPredix  paramPrefix  String[]  argNames  Deque  argumentsAccessStack  int  highestIndex  i  numExtraArgs  numNamedParameter  uniqueId  value  
[BugLab_Wrong_Literal]^changed = false;^255^^^^^240^270^changed = true;^[CLASS] OptimizeArgumentsArray  [METHOD] tryReplaceArguments [RETURN_TYPE] boolean   Scope scope [VARIABLES] AbstractCompiler  compiler  boolean  changed  Scope  scope  Node  getElem  getElemParent  index  name  parametersList  ref  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  name  paramPredix  paramPrefix  String[]  argNames  Deque  argumentsAccessStack  int  highestIndex  i  numExtraArgs  numNamedParameter  uniqueId  value  
[BugLab_Variable_Misuse]^parametersList.addChildrenToBack ( Node.newString ( Token.NAME, paramPredix )  ) ;^254^^^^^239^269^parametersList.addChildrenToBack ( Node.newString ( Token.NAME, name )  ) ;^[CLASS] OptimizeArgumentsArray  [METHOD] tryReplaceArguments [RETURN_TYPE] boolean   Scope scope [VARIABLES] AbstractCompiler  compiler  boolean  changed  Scope  scope  Node  getElem  getElemParent  index  name  parametersList  ref  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  name  paramPredix  paramPrefix  String[]  argNames  Deque  argumentsAccessStack  int  highestIndex  i  numExtraArgs  numNamedParameter  uniqueId  value  
[BugLab_Variable_Misuse]^parametersList.addChildrenToBack ( Node.newString ( Token.NAME, paramPrefix )  ) ;^254^^^^^239^269^parametersList.addChildrenToBack ( Node.newString ( Token.NAME, name )  ) ;^[CLASS] OptimizeArgumentsArray  [METHOD] tryReplaceArguments [RETURN_TYPE] boolean   Scope scope [VARIABLES] AbstractCompiler  compiler  boolean  changed  Scope  scope  Node  getElem  getElemParent  index  name  parametersList  ref  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  name  paramPredix  paramPrefix  String[]  argNames  Deque  argumentsAccessStack  int  highestIndex  i  numExtraArgs  numNamedParameter  uniqueId  value  
[BugLab_Variable_Misuse]^argNames[i] = paramPredix;^253^^^^^238^268^argNames[i] = name;^[CLASS] OptimizeArgumentsArray  [METHOD] tryReplaceArguments [RETURN_TYPE] boolean   Scope scope [VARIABLES] AbstractCompiler  compiler  boolean  changed  Scope  scope  Node  getElem  getElemParent  index  name  parametersList  ref  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  name  paramPredix  paramPrefix  String[]  argNames  Deque  argumentsAccessStack  int  highestIndex  i  numExtraArgs  numNamedParameter  uniqueId  value  
[BugLab_Wrong_Literal]^for  ( int i = -1; i < numExtraArgs; i++ )  {^251^^^^^236^266^for  ( int i = 0; i < numExtraArgs; i++ )  {^[CLASS] OptimizeArgumentsArray  [METHOD] tryReplaceArguments [RETURN_TYPE] boolean   Scope scope [VARIABLES] AbstractCompiler  compiler  boolean  changed  Scope  scope  Node  getElem  getElemParent  index  name  parametersList  ref  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  name  paramPredix  paramPrefix  String[]  argNames  Deque  argumentsAccessStack  int  highestIndex  i  numExtraArgs  numNamedParameter  uniqueId  value  
[BugLab_Variable_Misuse]^if  ( ref.getType (  )  != Token.NUMBER )  {^263^^^^^248^278^if  ( index.getType (  )  != Token.NUMBER )  {^[CLASS] OptimizeArgumentsArray  [METHOD] tryReplaceArguments [RETURN_TYPE] boolean   Scope scope [VARIABLES] AbstractCompiler  compiler  boolean  changed  Scope  scope  Node  getElem  getElemParent  index  name  parametersList  ref  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  name  paramPredix  paramPrefix  String[]  argNames  Deque  argumentsAccessStack  int  highestIndex  i  numExtraArgs  numNamedParameter  uniqueId  value  
[BugLab_Wrong_Operator]^if  ( index.getType (  )  == Token.NUMBER )  {^263^^^^^248^278^if  ( index.getType (  )  != Token.NUMBER )  {^[CLASS] OptimizeArgumentsArray  [METHOD] tryReplaceArguments [RETURN_TYPE] boolean   Scope scope [VARIABLES] AbstractCompiler  compiler  boolean  changed  Scope  scope  Node  getElem  getElemParent  index  name  parametersList  ref  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  name  paramPredix  paramPrefix  String[]  argNames  Deque  argumentsAccessStack  int  highestIndex  i  numExtraArgs  numNamedParameter  uniqueId  value  
[BugLab_Variable_Misuse]^if  ( uniqueId >= numNamedParameter )  {^269^^^^^254^284^if  ( value >= numNamedParameter )  {^[CLASS] OptimizeArgumentsArray  [METHOD] tryReplaceArguments [RETURN_TYPE] boolean   Scope scope [VARIABLES] AbstractCompiler  compiler  boolean  changed  Scope  scope  Node  getElem  getElemParent  index  name  parametersList  ref  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  name  paramPredix  paramPrefix  String[]  argNames  Deque  argumentsAccessStack  int  highestIndex  i  numExtraArgs  numNamedParameter  uniqueId  value  
[BugLab_Argument_Swapping]^if  ( numNamedParameter >= value )  {^269^^^^^254^284^if  ( value >= numNamedParameter )  {^[CLASS] OptimizeArgumentsArray  [METHOD] tryReplaceArguments [RETURN_TYPE] boolean   Scope scope [VARIABLES] AbstractCompiler  compiler  boolean  changed  Scope  scope  Node  getElem  getElemParent  index  name  parametersList  ref  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  name  paramPredix  paramPrefix  String[]  argNames  Deque  argumentsAccessStack  int  highestIndex  i  numExtraArgs  numNamedParameter  uniqueId  value  
[BugLab_Wrong_Operator]^if  ( value > numNamedParameter )  {^269^^^^^254^284^if  ( value >= numNamedParameter )  {^[CLASS] OptimizeArgumentsArray  [METHOD] tryReplaceArguments [RETURN_TYPE] boolean   Scope scope [VARIABLES] AbstractCompiler  compiler  boolean  changed  Scope  scope  Node  getElem  getElemParent  index  name  parametersList  ref  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  name  paramPredix  paramPrefix  String[]  argNames  Deque  argumentsAccessStack  int  highestIndex  i  numExtraArgs  numNamedParameter  uniqueId  value  
[BugLab_Variable_Misuse]^for  ( uniqueIdnt i = 0; i < value; i++ )  {^281^^^^^269^286^for  ( int i = 0; i < value; i++ )  {^[CLASS] OptimizeArgumentsArray  [METHOD] tryReplaceArguments [RETURN_TYPE] boolean   Scope scope [VARIABLES] AbstractCompiler  compiler  boolean  changed  Scope  scope  Node  getElem  getElemParent  index  name  parametersList  ref  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  name  paramPredix  paramPrefix  String[]  argNames  Deque  argumentsAccessStack  int  highestIndex  i  numExtraArgs  numNamedParameter  uniqueId  value  
[BugLab_Variable_Misuse]^for  ( int i = 0; i < uniqueId; i++ )  {^281^^^^^269^286^for  ( int i = 0; i < value; i++ )  {^[CLASS] OptimizeArgumentsArray  [METHOD] tryReplaceArguments [RETURN_TYPE] boolean   Scope scope [VARIABLES] AbstractCompiler  compiler  boolean  changed  Scope  scope  Node  getElem  getElemParent  index  name  parametersList  ref  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  name  paramPredix  paramPrefix  String[]  argNames  Deque  argumentsAccessStack  int  highestIndex  i  numExtraArgs  numNamedParameter  uniqueId  value  
[BugLab_Argument_Swapping]^for  ( valuent i = 0; i < i; i++ )  {^281^^^^^269^286^for  ( int i = 0; i < value; i++ )  {^[CLASS] OptimizeArgumentsArray  [METHOD] tryReplaceArguments [RETURN_TYPE] boolean   Scope scope [VARIABLES] AbstractCompiler  compiler  boolean  changed  Scope  scope  Node  getElem  getElemParent  index  name  parametersList  ref  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  name  paramPredix  paramPrefix  String[]  argNames  Deque  argumentsAccessStack  int  highestIndex  i  numExtraArgs  numNamedParameter  uniqueId  value  
[BugLab_Wrong_Operator]^for  ( int i = 0; i <= value; i++ )  {^281^^^^^269^286^for  ( int i = 0; i < value; i++ )  {^[CLASS] OptimizeArgumentsArray  [METHOD] tryReplaceArguments [RETURN_TYPE] boolean   Scope scope [VARIABLES] AbstractCompiler  compiler  boolean  changed  Scope  scope  Node  getElem  getElemParent  index  name  parametersList  ref  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  name  paramPredix  paramPrefix  String[]  argNames  Deque  argumentsAccessStack  int  highestIndex  i  numExtraArgs  numNamedParameter  uniqueId  value  
[BugLab_Variable_Misuse]^name = parametersList.getNext (  ) ;^282^^^^^269^286^name = name.getNext (  ) ;^[CLASS] OptimizeArgumentsArray  [METHOD] tryReplaceArguments [RETURN_TYPE] boolean   Scope scope [VARIABLES] AbstractCompiler  compiler  boolean  changed  Scope  scope  Node  getElem  getElemParent  index  name  parametersList  ref  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  name  paramPredix  paramPrefix  String[]  argNames  Deque  argumentsAccessStack  int  highestIndex  i  numExtraArgs  numNamedParameter  uniqueId  value  
[BugLab_Variable_Misuse]^name = ref.getNext (  ) ;^282^^^^^269^286^name = name.getNext (  ) ;^[CLASS] OptimizeArgumentsArray  [METHOD] tryReplaceArguments [RETURN_TYPE] boolean   Scope scope [VARIABLES] AbstractCompiler  compiler  boolean  changed  Scope  scope  Node  getElem  getElemParent  index  name  parametersList  ref  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  name  paramPredix  paramPrefix  String[]  argNames  Deque  argumentsAccessStack  int  highestIndex  i  numExtraArgs  numNamedParameter  uniqueId  value  
[BugLab_Variable_Misuse]^Node name = ref.getFirstChild (  ) ;^276^^^^^269^286^Node name = parametersList.getFirstChild (  ) ;^[CLASS] OptimizeArgumentsArray  [METHOD] tryReplaceArguments [RETURN_TYPE] boolean   Scope scope [VARIABLES] AbstractCompiler  compiler  boolean  changed  Scope  scope  Node  getElem  getElemParent  index  name  parametersList  ref  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  name  paramPredix  paramPrefix  String[]  argNames  Deque  argumentsAccessStack  int  highestIndex  i  numExtraArgs  numNamedParameter  uniqueId  value  
[BugLab_Wrong_Literal]^for  ( int i = -1; i < value; i++ )  {^281^^^^^269^286^for  ( int i = 0; i < value; i++ )  {^[CLASS] OptimizeArgumentsArray  [METHOD] tryReplaceArguments [RETURN_TYPE] boolean   Scope scope [VARIABLES] AbstractCompiler  compiler  boolean  changed  Scope  scope  Node  getElem  getElemParent  index  name  parametersList  ref  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  name  paramPredix  paramPrefix  String[]  argNames  Deque  argumentsAccessStack  int  highestIndex  i  numExtraArgs  numNamedParameter  uniqueId  value  
[BugLab_Variable_Misuse]^ref.getParent (  ) .getParent (  ) .replaceChild ( parametersList.getParent (  ) , Node.newString ( Token.NAME, name.getString (  )  )  ) ;^284^285^^^^269^286^ref.getParent (  ) .getParent (  ) .replaceChild ( ref.getParent (  ) , Node.newString ( Token.NAME, name.getString (  )  )  ) ;^[CLASS] OptimizeArgumentsArray  [METHOD] tryReplaceArguments [RETURN_TYPE] boolean   Scope scope [VARIABLES] AbstractCompiler  compiler  boolean  changed  Scope  scope  Node  getElem  getElemParent  index  name  parametersList  ref  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  name  paramPredix  paramPrefix  String[]  argNames  Deque  argumentsAccessStack  int  highestIndex  i  numExtraArgs  numNamedParameter  uniqueId  value  
[BugLab_Variable_Misuse]^ref.getParent (  ) .getParent (  ) .replaceChild ( ref.getParent (  ) , Node.newString ( Token.NAME, parametersList.getString (  )  )  ) ;^284^285^^^^269^286^ref.getParent (  ) .getParent (  ) .replaceChild ( ref.getParent (  ) , Node.newString ( Token.NAME, name.getString (  )  )  ) ;^[CLASS] OptimizeArgumentsArray  [METHOD] tryReplaceArguments [RETURN_TYPE] boolean   Scope scope [VARIABLES] AbstractCompiler  compiler  boolean  changed  Scope  scope  Node  getElem  getElemParent  index  name  parametersList  ref  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  name  paramPredix  paramPrefix  String[]  argNames  Deque  argumentsAccessStack  int  highestIndex  i  numExtraArgs  numNamedParameter  uniqueId  value  
[BugLab_Argument_Swapping]^ref.getParent (  ) .getParent (  ) .replaceChild ( name.getParent (  ) , Node.newString ( Token.NAME, ref.getString (  )  )  ) ;^284^285^^^^269^286^ref.getParent (  ) .getParent (  ) .replaceChild ( ref.getParent (  ) , Node.newString ( Token.NAME, name.getString (  )  )  ) ;^[CLASS] OptimizeArgumentsArray  [METHOD] tryReplaceArguments [RETURN_TYPE] boolean   Scope scope [VARIABLES] AbstractCompiler  compiler  boolean  changed  Scope  scope  Node  getElem  getElemParent  index  name  parametersList  ref  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  name  paramPredix  paramPrefix  String[]  argNames  Deque  argumentsAccessStack  int  highestIndex  i  numExtraArgs  numNamedParameter  uniqueId  value  
[BugLab_Variable_Misuse]^Node.newString ( Token.NAME, ref.getString (  )  )  ) ;^285^^^^^269^286^Node.newString ( Token.NAME, name.getString (  )  )  ) ;^[CLASS] OptimizeArgumentsArray  [METHOD] tryReplaceArguments [RETURN_TYPE] boolean   Scope scope [VARIABLES] AbstractCompiler  compiler  boolean  changed  Scope  scope  Node  getElem  getElemParent  index  name  parametersList  ref  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  name  paramPredix  paramPrefix  String[]  argNames  Deque  argumentsAccessStack  int  highestIndex  i  numExtraArgs  numNamedParameter  uniqueId  value  
[BugLab_Variable_Misuse]^Node.newString ( Token.NAME, parametersList.getString (  )  )  ) ;^285^^^^^269^286^Node.newString ( Token.NAME, name.getString (  )  )  ) ;^[CLASS] OptimizeArgumentsArray  [METHOD] tryReplaceArguments [RETURN_TYPE] boolean   Scope scope [VARIABLES] AbstractCompiler  compiler  boolean  changed  Scope  scope  Node  getElem  getElemParent  index  name  parametersList  ref  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  name  paramPredix  paramPrefix  String[]  argNames  Deque  argumentsAccessStack  int  highestIndex  i  numExtraArgs  numNamedParameter  uniqueId  value  
[BugLab_Variable_Misuse]^ref.getParent (  ) .getParent (  ) .replaceChild ( parametersList.getParent (  ) , Node.newString ( Token.NAME, argNames[value - numNamedParameter] )  ) ;^270^271^^^^255^285^ref.getParent (  ) .getParent (  ) .replaceChild ( ref.getParent (  ) , Node.newString ( Token.NAME, argNames[value - numNamedParameter] )  ) ;^[CLASS] OptimizeArgumentsArray  [METHOD] tryReplaceArguments [RETURN_TYPE] boolean   Scope scope [VARIABLES] AbstractCompiler  compiler  boolean  changed  Scope  scope  Node  getElem  getElemParent  index  name  parametersList  ref  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  name  paramPredix  paramPrefix  String[]  argNames  Deque  argumentsAccessStack  int  highestIndex  i  numExtraArgs  numNamedParameter  uniqueId  value  
[BugLab_Variable_Misuse]^ref.getParent (  ) .getParent (  ) .replaceChild ( ref.getParent (  ) , Node.newString ( Token.NAME, argNames[uniqueId - numNamedParameter] )  ) ;^270^271^^^^255^285^ref.getParent (  ) .getParent (  ) .replaceChild ( ref.getParent (  ) , Node.newString ( Token.NAME, argNames[value - numNamedParameter] )  ) ;^[CLASS] OptimizeArgumentsArray  [METHOD] tryReplaceArguments [RETURN_TYPE] boolean   Scope scope [VARIABLES] AbstractCompiler  compiler  boolean  changed  Scope  scope  Node  getElem  getElemParent  index  name  parametersList  ref  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  name  paramPredix  paramPrefix  String[]  argNames  Deque  argumentsAccessStack  int  highestIndex  i  numExtraArgs  numNamedParameter  uniqueId  value  
[BugLab_Variable_Misuse]^ref.getParent (  ) .getParent (  ) .replaceChild ( ref.getParent (  ) , Node.newString ( Token.NAME, argNames[value - uniqueId] )  ) ;^270^271^^^^255^285^ref.getParent (  ) .getParent (  ) .replaceChild ( ref.getParent (  ) , Node.newString ( Token.NAME, argNames[value - numNamedParameter] )  ) ;^[CLASS] OptimizeArgumentsArray  [METHOD] tryReplaceArguments [RETURN_TYPE] boolean   Scope scope [VARIABLES] AbstractCompiler  compiler  boolean  changed  Scope  scope  Node  getElem  getElemParent  index  name  parametersList  ref  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  name  paramPredix  paramPrefix  String[]  argNames  Deque  argumentsAccessStack  int  highestIndex  i  numExtraArgs  numNamedParameter  uniqueId  value  
[BugLab_Argument_Swapping]^ref.getParent (  ) .getParent (  ) .replaceChild ( ref.getParent (  ) , Node.newString ( Token.NAME, numNamedParameter[value - argNames] )  ) ;^270^271^^^^255^285^ref.getParent (  ) .getParent (  ) .replaceChild ( ref.getParent (  ) , Node.newString ( Token.NAME, argNames[value - numNamedParameter] )  ) ;^[CLASS] OptimizeArgumentsArray  [METHOD] tryReplaceArguments [RETURN_TYPE] boolean   Scope scope [VARIABLES] AbstractCompiler  compiler  boolean  changed  Scope  scope  Node  getElem  getElemParent  index  name  parametersList  ref  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  name  paramPredix  paramPrefix  String[]  argNames  Deque  argumentsAccessStack  int  highestIndex  i  numExtraArgs  numNamedParameter  uniqueId  value  
[BugLab_Wrong_Operator]^ref.getParent (  ) .getParent (  ) .replaceChild ( ref.getParent (  ) , Node.newString ( Token.NAME, argNames[value   instanceof   numNamedParameter] )  ) ;^270^271^^^^255^285^ref.getParent (  ) .getParent (  ) .replaceChild ( ref.getParent (  ) , Node.newString ( Token.NAME, argNames[value - numNamedParameter] )  ) ;^[CLASS] OptimizeArgumentsArray  [METHOD] tryReplaceArguments [RETURN_TYPE] boolean   Scope scope [VARIABLES] AbstractCompiler  compiler  boolean  changed  Scope  scope  Node  getElem  getElemParent  index  name  parametersList  ref  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  name  paramPredix  paramPrefix  String[]  argNames  Deque  argumentsAccessStack  int  highestIndex  i  numExtraArgs  numNamedParameter  uniqueId  value  
[BugLab_Variable_Misuse]^ref.getParent (  ) .getParent (  ) .replaceChild ( name.getParent (  ) , Node.newString ( Token.NAME, argNames[value - numNamedParameter] )  ) ;^270^271^^^^255^285^ref.getParent (  ) .getParent (  ) .replaceChild ( ref.getParent (  ) , Node.newString ( Token.NAME, argNames[value - numNamedParameter] )  ) ;^[CLASS] OptimizeArgumentsArray  [METHOD] tryReplaceArguments [RETURN_TYPE] boolean   Scope scope [VARIABLES] AbstractCompiler  compiler  boolean  changed  Scope  scope  Node  getElem  getElemParent  index  name  parametersList  ref  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  name  paramPredix  paramPrefix  String[]  argNames  Deque  argumentsAccessStack  int  highestIndex  i  numExtraArgs  numNamedParameter  uniqueId  value  
[BugLab_Variable_Misuse]^Node.newString ( Token.NAME, argNames[uniqueId - numNamedParameter] )  ) ;^271^^^^^256^286^Node.newString ( Token.NAME, argNames[value - numNamedParameter] )  ) ;^[CLASS] OptimizeArgumentsArray  [METHOD] tryReplaceArguments [RETURN_TYPE] boolean   Scope scope [VARIABLES] AbstractCompiler  compiler  boolean  changed  Scope  scope  Node  getElem  getElemParent  index  name  parametersList  ref  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  name  paramPredix  paramPrefix  String[]  argNames  Deque  argumentsAccessStack  int  highestIndex  i  numExtraArgs  numNamedParameter  uniqueId  value  
[BugLab_Variable_Misuse]^Node.newString ( Token.NAME, argNames[value - uniqueId] )  ) ;^271^^^^^256^286^Node.newString ( Token.NAME, argNames[value - numNamedParameter] )  ) ;^[CLASS] OptimizeArgumentsArray  [METHOD] tryReplaceArguments [RETURN_TYPE] boolean   Scope scope [VARIABLES] AbstractCompiler  compiler  boolean  changed  Scope  scope  Node  getElem  getElemParent  index  name  parametersList  ref  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  name  paramPredix  paramPrefix  String[]  argNames  Deque  argumentsAccessStack  int  highestIndex  i  numExtraArgs  numNamedParameter  uniqueId  value  
[BugLab_Argument_Swapping]^Node.newString ( Token.NAME, numNamedParameter[value - argNames] )  ) ;^271^^^^^256^286^Node.newString ( Token.NAME, argNames[value - numNamedParameter] )  ) ;^[CLASS] OptimizeArgumentsArray  [METHOD] tryReplaceArguments [RETURN_TYPE] boolean   Scope scope [VARIABLES] AbstractCompiler  compiler  boolean  changed  Scope  scope  Node  getElem  getElemParent  index  name  parametersList  ref  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  name  paramPredix  paramPrefix  String[]  argNames  Deque  argumentsAccessStack  int  highestIndex  i  numExtraArgs  numNamedParameter  uniqueId  value  
[BugLab_Wrong_Operator]^Node.newString ( Token.NAME, argNames[value  >>  numNamedParameter] )  ) ;^271^^^^^256^286^Node.newString ( Token.NAME, argNames[value - numNamedParameter] )  ) ;^[CLASS] OptimizeArgumentsArray  [METHOD] tryReplaceArguments [RETURN_TYPE] boolean   Scope scope [VARIABLES] AbstractCompiler  compiler  boolean  changed  Scope  scope  Node  getElem  getElemParent  index  name  parametersList  ref  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  name  paramPredix  paramPrefix  String[]  argNames  Deque  argumentsAccessStack  int  highestIndex  i  numExtraArgs  numNamedParameter  uniqueId  value  
[BugLab_Variable_Misuse]^for  ( valuent i = 0; i < value; i++ )  {^281^^^^^266^296^for  ( int i = 0; i < value; i++ )  {^[CLASS] OptimizeArgumentsArray  [METHOD] tryReplaceArguments [RETURN_TYPE] boolean   Scope scope [VARIABLES] AbstractCompiler  compiler  boolean  changed  Scope  scope  Node  getElem  getElemParent  index  name  parametersList  ref  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  name  paramPredix  paramPrefix  String[]  argNames  Deque  argumentsAccessStack  int  highestIndex  i  numExtraArgs  numNamedParameter  uniqueId  value  
[BugLab_Variable_Misuse]^for  ( int i = 0; i < uniqueId; i++ )  {^281^^^^^266^296^for  ( int i = 0; i < value; i++ )  {^[CLASS] OptimizeArgumentsArray  [METHOD] tryReplaceArguments [RETURN_TYPE] boolean   Scope scope [VARIABLES] AbstractCompiler  compiler  boolean  changed  Scope  scope  Node  getElem  getElemParent  index  name  parametersList  ref  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  name  paramPredix  paramPrefix  String[]  argNames  Deque  argumentsAccessStack  int  highestIndex  i  numExtraArgs  numNamedParameter  uniqueId  value  
[BugLab_Argument_Swapping]^for  ( valuent i = 0; i < i; i++ )  {^281^^^^^266^296^for  ( int i = 0; i < value; i++ )  {^[CLASS] OptimizeArgumentsArray  [METHOD] tryReplaceArguments [RETURN_TYPE] boolean   Scope scope [VARIABLES] AbstractCompiler  compiler  boolean  changed  Scope  scope  Node  getElem  getElemParent  index  name  parametersList  ref  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  name  paramPredix  paramPrefix  String[]  argNames  Deque  argumentsAccessStack  int  highestIndex  i  numExtraArgs  numNamedParameter  uniqueId  value  
[BugLab_Wrong_Operator]^for  ( int i = 0; i <= value; i++ )  {^281^^^^^266^296^for  ( int i = 0; i < value; i++ )  {^[CLASS] OptimizeArgumentsArray  [METHOD] tryReplaceArguments [RETURN_TYPE] boolean   Scope scope [VARIABLES] AbstractCompiler  compiler  boolean  changed  Scope  scope  Node  getElem  getElemParent  index  name  parametersList  ref  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  name  paramPredix  paramPrefix  String[]  argNames  Deque  argumentsAccessStack  int  highestIndex  i  numExtraArgs  numNamedParameter  uniqueId  value  
[BugLab_Variable_Misuse]^name = ref.getNext (  ) ;^282^^^^^267^297^name = name.getNext (  ) ;^[CLASS] OptimizeArgumentsArray  [METHOD] tryReplaceArguments [RETURN_TYPE] boolean   Scope scope [VARIABLES] AbstractCompiler  compiler  boolean  changed  Scope  scope  Node  getElem  getElemParent  index  name  parametersList  ref  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  name  paramPredix  paramPrefix  String[]  argNames  Deque  argumentsAccessStack  int  highestIndex  i  numExtraArgs  numNamedParameter  uniqueId  value  
[BugLab_Wrong_Literal]^changed = false;^287^^^^^272^302^changed = true;^[CLASS] OptimizeArgumentsArray  [METHOD] tryReplaceArguments [RETURN_TYPE] boolean   Scope scope [VARIABLES] AbstractCompiler  compiler  boolean  changed  Scope  scope  Node  getElem  getElemParent  index  name  parametersList  ref  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  name  paramPredix  paramPrefix  String[]  argNames  Deque  argumentsAccessStack  int  highestIndex  i  numExtraArgs  numNamedParameter  uniqueId  value  
[BugLab_Variable_Misuse]^Node index = parametersList.getNext (  ) ;^260^^^^^245^275^Node index = ref.getNext (  ) ;^[CLASS] OptimizeArgumentsArray  [METHOD] tryReplaceArguments [RETURN_TYPE] boolean   Scope scope [VARIABLES] AbstractCompiler  compiler  boolean  changed  Scope  scope  Node  getElem  getElemParent  index  name  parametersList  ref  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  name  paramPredix  paramPrefix  String[]  argNames  Deque  argumentsAccessStack  int  highestIndex  i  numExtraArgs  numNamedParameter  uniqueId  value  
[BugLab_Variable_Misuse]^int value =  ( int )  ref.getDouble (  ) ;^266^^^^^251^281^int value =  ( int )  index.getDouble (  ) ;^[CLASS] OptimizeArgumentsArray  [METHOD] tryReplaceArguments [RETURN_TYPE] boolean   Scope scope [VARIABLES] AbstractCompiler  compiler  boolean  changed  Scope  scope  Node  getElem  getElemParent  index  name  parametersList  ref  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  name  paramPredix  paramPrefix  String[]  argNames  Deque  argumentsAccessStack  int  highestIndex  i  numExtraArgs  numNamedParameter  uniqueId  value  
[BugLab_Wrong_Literal]^for  ( int i = value; i < value; i++ )  {^281^^^^^266^296^for  ( int i = 0; i < value; i++ )  {^[CLASS] OptimizeArgumentsArray  [METHOD] tryReplaceArguments [RETURN_TYPE] boolean   Scope scope [VARIABLES] AbstractCompiler  compiler  boolean  changed  Scope  scope  Node  getElem  getElemParent  index  name  parametersList  ref  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  name  paramPredix  paramPrefix  String[]  argNames  Deque  argumentsAccessStack  int  highestIndex  i  numExtraArgs  numNamedParameter  uniqueId  value  
[BugLab_Variable_Misuse]^Node index = name.getNext (  ) ;^260^^^^^245^275^Node index = ref.getNext (  ) ;^[CLASS] OptimizeArgumentsArray  [METHOD] tryReplaceArguments [RETURN_TYPE] boolean   Scope scope [VARIABLES] AbstractCompiler  compiler  boolean  changed  Scope  scope  Node  getElem  getElemParent  index  name  parametersList  ref  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  name  paramPredix  paramPrefix  String[]  argNames  Deque  argumentsAccessStack  int  highestIndex  i  numExtraArgs  numNamedParameter  uniqueId  value  
[BugLab_Argument_Swapping]^ref.getParent (  ) .getParent (  ) .replaceChild ( numNamedParameter.getParent (  ) , Node.newString ( Token.NAME, argNames[value - ref] )  ) ;^270^271^^^^255^285^ref.getParent (  ) .getParent (  ) .replaceChild ( ref.getParent (  ) , Node.newString ( Token.NAME, argNames[value - numNamedParameter] )  ) ;^[CLASS] OptimizeArgumentsArray  [METHOD] tryReplaceArguments [RETURN_TYPE] boolean   Scope scope [VARIABLES] AbstractCompiler  compiler  boolean  changed  Scope  scope  Node  getElem  getElemParent  index  name  parametersList  ref  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  name  paramPredix  paramPrefix  String[]  argNames  Deque  argumentsAccessStack  int  highestIndex  i  numExtraArgs  numNamedParameter  uniqueId  value  
[BugLab_Argument_Swapping]^ref.getParent (  ) .getParent (  ) .replaceChild ( argNames.getParent (  ) , Node.newString ( Token.NAME, ref[value - numNamedParameter] )  ) ;^270^271^^^^255^285^ref.getParent (  ) .getParent (  ) .replaceChild ( ref.getParent (  ) , Node.newString ( Token.NAME, argNames[value - numNamedParameter] )  ) ;^[CLASS] OptimizeArgumentsArray  [METHOD] tryReplaceArguments [RETURN_TYPE] boolean   Scope scope [VARIABLES] AbstractCompiler  compiler  boolean  changed  Scope  scope  Node  getElem  getElemParent  index  name  parametersList  ref  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  name  paramPredix  paramPrefix  String[]  argNames  Deque  argumentsAccessStack  int  highestIndex  i  numExtraArgs  numNamedParameter  uniqueId  value  
[BugLab_Wrong_Operator]^ref.getParent (  ) .getParent (  ) .replaceChild ( ref.getParent (  ) , Node.newString ( Token.NAME, argNames[value  ==  numNamedParameter] )  ) ;^270^271^^^^255^285^ref.getParent (  ) .getParent (  ) .replaceChild ( ref.getParent (  ) , Node.newString ( Token.NAME, argNames[value - numNamedParameter] )  ) ;^[CLASS] OptimizeArgumentsArray  [METHOD] tryReplaceArguments [RETURN_TYPE] boolean   Scope scope [VARIABLES] AbstractCompiler  compiler  boolean  changed  Scope  scope  Node  getElem  getElemParent  index  name  parametersList  ref  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  name  paramPredix  paramPrefix  String[]  argNames  Deque  argumentsAccessStack  int  highestIndex  i  numExtraArgs  numNamedParameter  uniqueId  value  
[BugLab_Wrong_Operator]^Node.newString ( Token.NAME, argNames[value  |  numNamedParameter] )  ) ;^271^^^^^256^286^Node.newString ( Token.NAME, argNames[value - numNamedParameter] )  ) ;^[CLASS] OptimizeArgumentsArray  [METHOD] tryReplaceArguments [RETURN_TYPE] boolean   Scope scope [VARIABLES] AbstractCompiler  compiler  boolean  changed  Scope  scope  Node  getElem  getElemParent  index  name  parametersList  ref  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  name  paramPredix  paramPrefix  String[]  argNames  Deque  argumentsAccessStack  int  highestIndex  i  numExtraArgs  numNamedParameter  uniqueId  value  
[BugLab_Variable_Misuse]^name = parametersList.getNext (  ) ;^282^^^^^267^297^name = name.getNext (  ) ;^[CLASS] OptimizeArgumentsArray  [METHOD] tryReplaceArguments [RETURN_TYPE] boolean   Scope scope [VARIABLES] AbstractCompiler  compiler  boolean  changed  Scope  scope  Node  getElem  getElemParent  index  name  parametersList  ref  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  name  paramPredix  paramPrefix  String[]  argNames  Deque  argumentsAccessStack  int  highestIndex  i  numExtraArgs  numNamedParameter  uniqueId  value  
[BugLab_Variable_Misuse]^ref.getParent (  ) .getParent (  ) .replaceChild ( parametersList.getParent (  ) , Node.newString ( Token.NAME, name.getString (  )  )  ) ;^284^285^^^^269^299^ref.getParent (  ) .getParent (  ) .replaceChild ( ref.getParent (  ) , Node.newString ( Token.NAME, name.getString (  )  )  ) ;^[CLASS] OptimizeArgumentsArray  [METHOD] tryReplaceArguments [RETURN_TYPE] boolean   Scope scope [VARIABLES] AbstractCompiler  compiler  boolean  changed  Scope  scope  Node  getElem  getElemParent  index  name  parametersList  ref  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  name  paramPredix  paramPrefix  String[]  argNames  Deque  argumentsAccessStack  int  highestIndex  i  numExtraArgs  numNamedParameter  uniqueId  value  
[BugLab_Argument_Swapping]^ref.getParent (  ) .getParent (  ) .replaceChild ( name.getParent (  ) , Node.newString ( Token.NAME, ref.getString (  )  )  ) ;^284^285^^^^269^299^ref.getParent (  ) .getParent (  ) .replaceChild ( ref.getParent (  ) , Node.newString ( Token.NAME, name.getString (  )  )  ) ;^[CLASS] OptimizeArgumentsArray  [METHOD] tryReplaceArguments [RETURN_TYPE] boolean   Scope scope [VARIABLES] AbstractCompiler  compiler  boolean  changed  Scope  scope  Node  getElem  getElemParent  index  name  parametersList  ref  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  name  paramPredix  paramPrefix  String[]  argNames  Deque  argumentsAccessStack  int  highestIndex  i  numExtraArgs  numNamedParameter  uniqueId  value  
[BugLab_Variable_Misuse]^ref.getParent (  ) .getParent (  ) .replaceChild ( name.getParent (  ) , Node.newString ( Token.NAME, name.getString (  )  )  ) ;^284^285^^^^269^299^ref.getParent (  ) .getParent (  ) .replaceChild ( ref.getParent (  ) , Node.newString ( Token.NAME, name.getString (  )  )  ) ;^[CLASS] OptimizeArgumentsArray  [METHOD] tryReplaceArguments [RETURN_TYPE] boolean   Scope scope [VARIABLES] AbstractCompiler  compiler  boolean  changed  Scope  scope  Node  getElem  getElemParent  index  name  parametersList  ref  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  name  paramPredix  paramPrefix  String[]  argNames  Deque  argumentsAccessStack  int  highestIndex  i  numExtraArgs  numNamedParameter  uniqueId  value  
[BugLab_Variable_Misuse]^Node.newString ( Token.NAME, ref.getString (  )  )  ) ;^285^^^^^270^300^Node.newString ( Token.NAME, name.getString (  )  )  ) ;^[CLASS] OptimizeArgumentsArray  [METHOD] tryReplaceArguments [RETURN_TYPE] boolean   Scope scope [VARIABLES] AbstractCompiler  compiler  boolean  changed  Scope  scope  Node  getElem  getElemParent  index  name  parametersList  ref  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  name  paramPredix  paramPrefix  String[]  argNames  Deque  argumentsAccessStack  int  highestIndex  i  numExtraArgs  numNamedParameter  uniqueId  value  
[BugLab_Variable_Misuse]^return paramPrefix + uniqueId++;^297^^^^^296^298^return paramPredix + uniqueId++;^[CLASS] OptimizeArgumentsArray  [METHOD] getNewName [RETURN_TYPE] String   [VARIABLES] AbstractCompiler  compiler  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  name  paramPredix  paramPrefix  boolean  Deque  argumentsAccessStack  int  highestIndex  i  numExtraArgs  numNamedParameter  uniqueId  value  
