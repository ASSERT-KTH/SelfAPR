[BugLab_Argument_Swapping]^super ( typeRegistry, convention ) ;^116^^^^^114^117^super ( convention, typeRegistry ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] <init> [RETURN_TYPE] JSTypeRegistry)   CodingConvention convention JSTypeRegistry typeRegistry [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  JSTypeRegistry  typeRegistry  boolean  CodingConvention  convention  
[BugLab_Wrong_Operator]^if  ( p.first == null && p.second == null )  {^50^^^^^49^54^if  ( p.first == null || p.second == null )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] apply [RETURN_TYPE] Pair   JSType> p [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  Pair  p  
[BugLab_Wrong_Operator]^if  ( p.first != null || p.second == null )  {^50^^^^^49^54^if  ( p.first == null || p.second == null )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] apply [RETURN_TYPE] Pair   JSType> p [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  Pair  p  
[BugLab_Wrong_Operator]^if  ( p.first == null || p.second != null )  {^50^^^^^49^54^if  ( p.first == null || p.second == null )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] apply [RETURN_TYPE] Pair   JSType> p [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  Pair  p  
[BugLab_Wrong_Operator]^if  ( p.first == null && p.second == null )  {^63^^^^^62^67^if  ( p.first == null || p.second == null )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] apply [RETURN_TYPE] Pair   JSType> p [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  Pair  p  
[BugLab_Wrong_Operator]^if  ( p.first != null || p.second == null )  {^63^^^^^62^67^if  ( p.first == null || p.second == null )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] apply [RETURN_TYPE] Pair   JSType> p [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  Pair  p  
[BugLab_Wrong_Operator]^if  ( p.first == null || p.second != null )  {^63^^^^^62^67^if  ( p.first == null || p.second == null )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] apply [RETURN_TYPE] Pair   JSType> p [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  Pair  p  
[BugLab_Wrong_Operator]^if  ( p.first == null && p.second == null )  {^77^^^^^76^81^if  ( p.first == null || p.second == null )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] apply [RETURN_TYPE] Pair   JSType> p [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  Pair  p  
[BugLab_Wrong_Operator]^if  ( p.first != null || p.second == null )  {^77^^^^^76^81^if  ( p.first == null || p.second == null )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] apply [RETURN_TYPE] Pair   JSType> p [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  Pair  p  
[BugLab_Wrong_Operator]^if  ( p.first == null || p.second != null )  {^77^^^^^76^81^if  ( p.first == null || p.second == null )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] apply [RETURN_TYPE] Pair   JSType> p [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  Pair  p  
[BugLab_Wrong_Operator]^if  ( p.first == null && p.second == null )  {^91^^^^^90^95^if  ( p.first == null || p.second == null )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] apply [RETURN_TYPE] Pair   JSType> p [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  Pair  p  
[BugLab_Wrong_Operator]^if  ( p.first != null || p.second == null )  {^91^^^^^90^95^if  ( p.first == null || p.second == null )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] apply [RETURN_TYPE] Pair   JSType> p [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  Pair  p  
[BugLab_Wrong_Operator]^if  ( p.first == null || p.second != null )  {^91^^^^^90^95^if  ( p.first == null || p.second == null )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] apply [RETURN_TYPE] Pair   JSType> p [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  Pair  p  
[BugLab_Variable_Misuse]^if  ( typeOfNode.getType (  )  == Token.TYPEOF && right.getType (  )  == Token.STRING )  {^131^^^^^116^146^if  ( left.getType (  )  == Token.TYPEOF && right.getType (  )  == Token.STRING )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[BugLab_Variable_Misuse]^if  ( left.getType (  )  == Token.TYPEOF && typeOfNode.getType (  )  == Token.STRING )  {^131^^^^^116^146^if  ( left.getType (  )  == Token.TYPEOF && right.getType (  )  == Token.STRING )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[BugLab_Argument_Swapping]^if  ( right.getType (  )  == Token.TYPEOF && left.getType (  )  == Token.STRING )  {^131^^^^^116^146^if  ( left.getType (  )  == Token.TYPEOF && right.getType (  )  == Token.STRING )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[BugLab_Wrong_Operator]^if  ( left.getType (  )  == Token.TYPEOF || right.getType (  )  == Token.STRING )  {^131^^^^^116^146^if  ( left.getType (  )  == Token.TYPEOF && right.getType (  )  == Token.STRING )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[BugLab_Wrong_Operator]^if  ( left.getType (  )  >= Token.TYPEOF && right.getType (  )  == Token.STRING )  {^131^^^^^116^146^if  ( left.getType (  )  == Token.TYPEOF && right.getType (  )  == Token.STRING )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[BugLab_Wrong_Operator]^if  ( left.getType (  )  <= Token.TYPEOF && right.getType (  )  == Token.STRING )  {^131^^^^^116^146^if  ( left.getType (  )  == Token.TYPEOF && right.getType (  )  == Token.STRING )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[BugLab_Wrong_Operator]^if  ( left.getType (  )  != Token.TYPEOF && right.getType (  )  == Token.STRING )  {^131^^^^^116^146^if  ( left.getType (  )  == Token.TYPEOF && right.getType (  )  == Token.STRING )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[BugLab_Variable_Misuse]^} else if  ( typeOfNode.getType (  )  == Token.TYPEOF && left.getType (  )  == Token.STRING )  {^134^135^^^^119^149^} else if  ( right.getType (  )  == Token.TYPEOF && left.getType (  )  == Token.STRING )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[BugLab_Variable_Misuse]^} else if  ( right.getType (  )  == Token.TYPEOF && typeOfNode.getType (  )  == Token.STRING )  {^134^135^^^^119^149^} else if  ( right.getType (  )  == Token.TYPEOF && left.getType (  )  == Token.STRING )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[BugLab_Argument_Swapping]^} else if  ( left.getType (  )  == Token.TYPEOF && right.getType (  )  == Token.STRING )  {^134^135^^^^119^149^} else if  ( right.getType (  )  == Token.TYPEOF && left.getType (  )  == Token.STRING )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[BugLab_Wrong_Operator]^} else if  ( right.getType (  )  == Token.TYPEOF || left.getType (  )  == Token.STRING )  {^134^135^^^^119^149^} else if  ( right.getType (  )  == Token.TYPEOF && left.getType (  )  == Token.STRING )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[BugLab_Wrong_Operator]^} else if  ( right.getType (  )  > Token.TYPEOF && left.getType (  )  == Token.STRING )  {^134^135^^^^119^149^} else if  ( right.getType (  )  == Token.TYPEOF && left.getType (  )  == Token.STRING )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[BugLab_Wrong_Operator]^} else if  ( right.getType (  )  != Token.TYPEOF && left.getType (  )  == Token.STRING )  {^134^135^^^^119^149^} else if  ( right.getType (  )  == Token.TYPEOF && left.getType (  )  == Token.STRING )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[BugLab_Variable_Misuse]^typeOfNode = typeOfNode;^136^^^^^134^138^typeOfNode = right;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[BugLab_Variable_Misuse]^stringNode = typeOfNode;^137^^^^^134^138^stringNode = left;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[BugLab_Variable_Misuse]^typeOfNode = stringNode;^136^^^^^121^151^typeOfNode = right;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[BugLab_Variable_Misuse]^stringNode = typeOfNode;^137^^^^^122^152^stringNode = left;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[BugLab_Variable_Misuse]^typeOfNode = typeOfNode;^132^^^^^117^147^typeOfNode = left;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[BugLab_Wrong_Operator]^} else if  ( right.getType (  )  >= Token.TYPEOF && left.getType (  )  == Token.STRING )  {^134^135^^^^119^149^} else if  ( right.getType (  )  == Token.TYPEOF && left.getType (  )  == Token.STRING )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[BugLab_Variable_Misuse]^if  ( typeOfNode != null && typeOfNode != null )  {^139^^^^^124^154^if  ( typeOfNode != null && stringNode != null )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[BugLab_Wrong_Operator]^if  ( typeOfNode != null || stringNode != null )  {^139^^^^^124^154^if  ( typeOfNode != null && stringNode != null )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[BugLab_Wrong_Operator]^if  ( typeOfNode == null && stringNode != null )  {^139^^^^^124^154^if  ( typeOfNode != null && stringNode != null )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[BugLab_Wrong_Operator]^if  ( typeOfNode != null && stringNode == null )  {^139^^^^^124^154^if  ( typeOfNode != null && stringNode != null )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[BugLab_Wrong_Operator]^if  ( operandType == null )  {^142^^^^^127^157^if  ( operandType != null )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[BugLab_Variable_Misuse]^outcome = !resultEqualsValue;^146^^^^^131^161^resultEqualsValue = !resultEqualsValue;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[BugLab_Variable_Misuse]^return caseTypeOf ( typeOfNode, operandType, stringNode.getString (  ) , resultEqualsValue, blindScope ) ;^148^149^^^^133^163^return caseTypeOf ( operandNode, operandType, stringNode.getString (  ) , resultEqualsValue, blindScope ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[BugLab_Variable_Misuse]^return caseTypeOf ( operandNode, operandType, typeOfNode.getString (  ) , resultEqualsValue, blindScope ) ;^148^149^^^^133^163^return caseTypeOf ( operandNode, operandType, stringNode.getString (  ) , resultEqualsValue, blindScope ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[BugLab_Variable_Misuse]^return caseTypeOf ( operandNode, operandType, stringNode.getString (  ) , outcome, blindScope ) ;^148^149^^^^133^163^return caseTypeOf ( operandNode, operandType, stringNode.getString (  ) , resultEqualsValue, blindScope ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[BugLab_Argument_Swapping]^return caseTypeOf ( stringNode, operandType, operandNode.getString (  ) , resultEqualsValue, blindScope ) ;^148^149^^^^133^163^return caseTypeOf ( operandNode, operandType, stringNode.getString (  ) , resultEqualsValue, blindScope ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[BugLab_Argument_Swapping]^return caseTypeOf ( operandNode, resultEqualsValue, stringNode.getString (  ) , operandType, blindScope ) ;^148^149^^^^133^163^return caseTypeOf ( operandNode, operandType, stringNode.getString (  ) , resultEqualsValue, blindScope ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[BugLab_Argument_Swapping]^return caseTypeOf ( operandNode, blindScope, stringNode.getString (  ) , resultEqualsValue, operandType ) ;^148^149^^^^133^163^return caseTypeOf ( operandNode, operandType, stringNode.getString (  ) , resultEqualsValue, blindScope ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[BugLab_Variable_Misuse]^boolean resultEqualsValue = typeOfNode.getType (  )  == Token.EQ || condition.getType (  )  == Token.SHEQ;^143^144^^^^128^158^boolean resultEqualsValue = condition.getType (  )  == Token.EQ || condition.getType (  )  == Token.SHEQ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[BugLab_Wrong_Operator]^boolean resultEqualsValue = condition.getType (  )  == Token.EQ && condition.getType (  )  == Token.SHEQ;^143^144^^^^128^158^boolean resultEqualsValue = condition.getType (  )  == Token.EQ || condition.getType (  )  == Token.SHEQ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[BugLab_Wrong_Operator]^boolean resultEqualsValue = condition.getType (  )  > Token.EQ || condition.getType (  )  == Token.SHEQ;^143^144^^^^128^158^boolean resultEqualsValue = condition.getType (  )  == Token.EQ || condition.getType (  )  == Token.SHEQ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[BugLab_Wrong_Operator]^boolean resultEqualsValue = condition.getType (  )  != Token.EQ || condition.getType (  )  == Token.SHEQ;^143^144^^^^128^158^boolean resultEqualsValue = condition.getType (  )  == Token.EQ || condition.getType (  )  == Token.SHEQ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[BugLab_Variable_Misuse]^boolean resultEqualsValue = stringNode.getType (  )  == Token.EQ || condition.getType (  )  == Token.SHEQ;^143^144^^^^128^158^boolean resultEqualsValue = condition.getType (  )  == Token.EQ || condition.getType (  )  == Token.SHEQ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[BugLab_Variable_Misuse]^return caseTypeOf ( stringNode, operandType, stringNode.getString (  ) , resultEqualsValue, blindScope ) ;^148^149^^^^133^163^return caseTypeOf ( operandNode, operandType, stringNode.getString (  ) , resultEqualsValue, blindScope ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[BugLab_Variable_Misuse]^return caseTypeOf ( operandNode, operandType, right.getString (  ) , resultEqualsValue, blindScope ) ;^148^149^^^^133^163^return caseTypeOf ( operandNode, operandType, stringNode.getString (  ) , resultEqualsValue, blindScope ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[BugLab_Argument_Swapping]^return caseTypeOf ( operandNode, operandType, resultEqualsValue.getString (  ) , stringNode, blindScope ) ;^148^149^^^^133^163^return caseTypeOf ( operandNode, operandType, stringNode.getString (  ) , resultEqualsValue, blindScope ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[BugLab_Argument_Swapping]^return caseTypeOf ( operandNode, stringNode, operandType.getString (  ) , resultEqualsValue, blindScope ) ;^148^149^^^^133^163^return caseTypeOf ( operandNode, operandType, stringNode.getString (  ) , resultEqualsValue, blindScope ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[BugLab_Variable_Misuse]^JSType operandType = getTypeIfRefinable ( stringNode, blindScope ) ;^141^^^^^126^156^JSType operandType = getTypeIfRefinable ( operandNode, blindScope ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[BugLab_Argument_Swapping]^JSType operandType = getTypeIfRefinable ( blindScope, operandNode ) ;^141^^^^^126^156^JSType operandType = getTypeIfRefinable ( operandNode, blindScope ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[BugLab_Variable_Misuse]^boolean resultEqualsValue = condition.getType (  )  == Token.null || condition.getType (  )  == Token.SHEQ;^143^144^^^^128^158^boolean resultEqualsValue = condition.getType (  )  == Token.EQ || condition.getType (  )  == Token.SHEQ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[BugLab_Wrong_Operator]^boolean resultEqualsValue = condition.getType (  )  < Token.EQ || condition.getType (  )  == Token.SHEQ;^143^144^^^^128^158^boolean resultEqualsValue = condition.getType (  )  == Token.EQ || condition.getType (  )  == Token.SHEQ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[BugLab_Wrong_Operator]^boolean resultEqualsValue = condition.getType (  )  <= Token.EQ || condition.getType (  )  == Token.SHEQ;^143^144^^^^128^158^boolean resultEqualsValue = condition.getType (  )  == Token.EQ || condition.getType (  )  == Token.SHEQ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[BugLab_Variable_Misuse]^Node operandNode = stringNode.getFirstChild (  ) ;^140^^^^^125^155^Node operandNode = typeOfNode.getFirstChild (  ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[BugLab_Variable_Misuse]^JSType operandType = getTypeIfRefinable ( typeOfNode, blindScope ) ;^141^^^^^126^156^JSType operandType = getTypeIfRefinable ( operandNode, blindScope ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[BugLab_Argument_Swapping]^return caseTypeOf ( operandType, operandNode, stringNode.getString (  ) , resultEqualsValue, blindScope ) ;^148^149^^^^133^163^return caseTypeOf ( operandNode, operandType, stringNode.getString (  ) , resultEqualsValue, blindScope ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[BugLab_Argument_Swapping]^return caseTypeOf ( blindScope, operandType, stringNode.getString (  ) , resultEqualsValue, operandNode ) ;^148^149^^^^133^163^return caseTypeOf ( operandNode, operandType, stringNode.getString (  ) , resultEqualsValue, blindScope ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[BugLab_Argument_Swapping]^return caseTypeOf ( resultEqualsValue, operandType, stringNode.getString (  ) , operandNode, blindScope ) ;^148^149^^^^133^163^return caseTypeOf ( operandNode, operandType, stringNode.getString (  ) , resultEqualsValue, blindScope ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[BugLab_Argument_Swapping]^return caseTypeOf ( operandNode, operandType, blindScope.getString (  ) , resultEqualsValue, stringNode ) ;^148^149^^^^133^163^return caseTypeOf ( operandNode, operandType, stringNode.getString (  ) , resultEqualsValue, blindScope ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[BugLab_Argument_Swapping]^return caseTypeOf ( operandNode, operandType, stringNode.getString (  ) , blindScope, resultEqualsValue ) ;^148^149^^^^133^163^return caseTypeOf ( operandNode, operandType, stringNode.getString (  ) , resultEqualsValue, blindScope ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[BugLab_Variable_Misuse]^stringNode = typeOfNode;^133^^^^^118^148^stringNode = right;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[BugLab_Variable_Misuse]^Node left = typeOfNode.getFirstChild (  ) ;^127^^^^^112^142^Node left = condition.getFirstChild (  ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[BugLab_Variable_Misuse]^Node right = typeOfNode.getLastChild (  ) ;^128^^^^^113^143^Node right = condition.getLastChild (  ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[BugLab_Wrong_Operator]^boolean resultEqualsValue = condition.getType (  )  >= Token.EQ || condition.getType (  )  == Token.SHEQ;^143^144^^^^128^158^boolean resultEqualsValue = condition.getType (  )  == Token.EQ || condition.getType (  )  == Token.SHEQ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[BugLab_Variable_Misuse]^switch  ( typeOfNode.getType (  )  )  {^122^^^^^107^137^switch  ( condition.getType (  )  )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[BugLab_Variable_Misuse]^if  ( resultEqualsValue )  {^155^^^^^140^170^if  ( outcome )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[BugLab_Variable_Misuse]^return caseAndOrMaybeShortCircuiting ( typeOfNode.getFirstChild (  ) , condition.getLastChild (  ) , blindScope, true ) ;^159^160^^^^155^161^return caseAndOrMaybeShortCircuiting ( condition.getFirstChild (  ) , condition.getLastChild (  ) , blindScope, true ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[BugLab_Argument_Swapping]^return caseAndOrMaybeShortCircuiting ( blindScope.getFirstChild (  ) , condition.getLastChild (  ) , condition, true ) ;^159^160^^^^155^161^return caseAndOrMaybeShortCircuiting ( condition.getFirstChild (  ) , condition.getLastChild (  ) , blindScope, true ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[BugLab_Wrong_Literal]^return caseAndOrMaybeShortCircuiting ( condition.getFirstChild (  ) , condition.getLastChild (  ) , blindScope, false ) ;^159^160^^^^155^161^return caseAndOrMaybeShortCircuiting ( condition.getFirstChild (  ) , condition.getLastChild (  ) , blindScope, true ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[BugLab_Variable_Misuse]^return caseAndOrMaybeShortCircuiting ( stringNode.getFirstChild (  ) , condition.getLastChild (  ) , blindScope, true ) ;^159^160^^^^155^161^return caseAndOrMaybeShortCircuiting ( condition.getFirstChild (  ) , condition.getLastChild (  ) , blindScope, true ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[BugLab_Variable_Misuse]^return caseAndOrNotShortCircuiting ( typeOfNode.getFirstChild (  ) , condition.getLastChild (  ) , blindScope, true ) ;^156^157^^^^141^171^return caseAndOrNotShortCircuiting ( condition.getFirstChild (  ) , condition.getLastChild (  ) , blindScope, true ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[BugLab_Argument_Swapping]^return caseAndOrNotShortCircuiting ( blindScope.getFirstChild (  ) , condition.getLastChild (  ) , condition, true ) ;^156^157^^^^141^171^return caseAndOrNotShortCircuiting ( condition.getFirstChild (  ) , condition.getLastChild (  ) , blindScope, true ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[BugLab_Wrong_Literal]^return caseAndOrNotShortCircuiting ( condition.getFirstChild (  ) , condition.getLastChild (  ) , blindScope, false ) ;^156^157^^^^141^171^return caseAndOrNotShortCircuiting ( condition.getFirstChild (  ) , condition.getLastChild (  ) , blindScope, true ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[BugLab_Variable_Misuse]^return caseAndOrNotShortCircuiting ( stringNode.getFirstChild (  ) , condition.getLastChild (  ) , blindScope, true ) ;^156^157^^^^141^171^return caseAndOrNotShortCircuiting ( condition.getFirstChild (  ) , condition.getLastChild (  ) , blindScope, true ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[BugLab_Variable_Misuse]^if  ( !resultEqualsValue )  {^164^^^^^149^179^if  ( !outcome )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[BugLab_Variable_Misuse]^return caseAndOrMaybeShortCircuiting ( typeOfNode.getFirstChild (  ) , condition.getLastChild (  ) , blindScope, false ) ;^168^169^^^^164^170^return caseAndOrMaybeShortCircuiting ( condition.getFirstChild (  ) , condition.getLastChild (  ) , blindScope, false ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[BugLab_Argument_Swapping]^return caseAndOrMaybeShortCircuiting ( blindScope.getFirstChild (  ) , condition.getLastChild (  ) , condition, false ) ;^168^169^^^^164^170^return caseAndOrMaybeShortCircuiting ( condition.getFirstChild (  ) , condition.getLastChild (  ) , blindScope, false ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[BugLab_Wrong_Literal]^return caseAndOrMaybeShortCircuiting ( condition.getFirstChild (  ) , condition.getLastChild (  ) , blindScope, true ) ;^168^169^^^^164^170^return caseAndOrMaybeShortCircuiting ( condition.getFirstChild (  ) , condition.getLastChild (  ) , blindScope, false ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[BugLab_Variable_Misuse]^return caseAndOrMaybeShortCircuiting ( stringNode.getFirstChild (  ) , condition.getLastChild (  ) , blindScope, false ) ;^168^169^^^^164^170^return caseAndOrMaybeShortCircuiting ( condition.getFirstChild (  ) , condition.getLastChild (  ) , blindScope, false ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[BugLab_Variable_Misuse]^return caseAndOrNotShortCircuiting ( typeOfNode.getFirstChild (  ) , condition.getLastChild (  ) , blindScope, false ) ;^165^166^^^^150^180^return caseAndOrNotShortCircuiting ( condition.getFirstChild (  ) , condition.getLastChild (  ) , blindScope, false ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[BugLab_Argument_Swapping]^return caseAndOrNotShortCircuiting ( blindScope.getFirstChild (  ) , condition.getLastChild (  ) , condition, false ) ;^165^166^^^^150^180^return caseAndOrNotShortCircuiting ( condition.getFirstChild (  ) , condition.getLastChild (  ) , blindScope, false ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[BugLab_Wrong_Literal]^return caseAndOrNotShortCircuiting ( condition.getFirstChild (  ) , condition.getLastChild (  ) , blindScope, true ) ;^165^166^^^^150^180^return caseAndOrNotShortCircuiting ( condition.getFirstChild (  ) , condition.getLastChild (  ) , blindScope, false ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[BugLab_Variable_Misuse]^if  ( resultEqualsValue )  {^173^^^^^158^188^if  ( outcome )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[BugLab_Variable_Misuse]^return caseEquality ( stringNode, blindScope, NE ) ;^176^^^^^173^177^return caseEquality ( condition, blindScope, NE ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[BugLab_Variable_Misuse]^return caseEquality ( condition, blindScope, 2 ) ;^176^^^^^173^177^return caseEquality ( condition, blindScope, NE ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[BugLab_Argument_Swapping]^return caseEquality ( blindScope, condition, NE ) ;^176^^^^^173^177^return caseEquality ( condition, blindScope, NE ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[BugLab_Argument_Swapping]^return caseEquality ( condition, NE, blindScope ) ;^176^^^^^173^177^return caseEquality ( condition, blindScope, NE ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[BugLab_Variable_Misuse]^return caseEquality ( typeOfNode, blindScope, EQ ) ;^174^^^^^159^189^return caseEquality ( condition, blindScope, EQ ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[BugLab_Argument_Swapping]^return caseEquality ( EQ, blindScope, condition ) ;^174^^^^^159^189^return caseEquality ( condition, blindScope, EQ ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[BugLab_Argument_Swapping]^return caseEquality ( condition, EQ, blindScope ) ;^174^^^^^159^189^return caseEquality ( condition, blindScope, EQ ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[BugLab_Variable_Misuse]^return caseEquality ( condition, blindScope, null ) ;^174^^^^^159^189^return caseEquality ( condition, blindScope, EQ ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[BugLab_Argument_Swapping]^return caseEquality ( blindScope, condition, EQ ) ;^174^^^^^159^189^return caseEquality ( condition, blindScope, EQ ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[BugLab_Variable_Misuse]^return caseEquality ( typeOfNode, blindScope, EQ ) ;^183^^^^^180^184^return caseEquality ( condition, blindScope, EQ ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[BugLab_Argument_Swapping]^return caseEquality ( blindScope, condition, EQ ) ;^183^^^^^180^184^return caseEquality ( condition, blindScope, EQ ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[BugLab_Argument_Swapping]^return caseEquality ( condition, EQ, blindScope ) ;^183^^^^^180^184^return caseEquality ( condition, blindScope, EQ ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[BugLab_Variable_Misuse]^return caseEquality ( stringNode, blindScope, EQ ) ;^183^^^^^180^184^return caseEquality ( condition, blindScope, EQ ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[BugLab_Variable_Misuse]^return caseEquality ( typeOfNode, blindScope, NE ) ;^181^^^^^166^196^return caseEquality ( condition, blindScope, NE ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[BugLab_Argument_Swapping]^return caseEquality ( blindScope, condition, NE ) ;^181^^^^^166^196^return caseEquality ( condition, blindScope, NE ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[BugLab_Argument_Swapping]^return caseEquality ( condition, NE, blindScope ) ;^181^^^^^166^196^return caseEquality ( condition, blindScope, NE ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[BugLab_Argument_Swapping]^return caseEquality ( NE, blindScope, condition ) ;^181^^^^^166^196^return caseEquality ( condition, blindScope, NE ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[BugLab_Variable_Misuse]^if  ( resultEqualsValue )  {^187^^^^^172^202^if  ( outcome )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[BugLab_Variable_Misuse]^return caseEquality ( typeOfNode, blindScope, SHNE ) ;^190^^^^^187^191^return caseEquality ( condition, blindScope, SHNE ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[BugLab_Argument_Swapping]^return caseEquality ( blindScope, condition, SHNE ) ;^190^^^^^187^191^return caseEquality ( condition, blindScope, SHNE ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[BugLab_Argument_Swapping]^return caseEquality ( condition, SHNE, blindScope ) ;^190^^^^^187^191^return caseEquality ( condition, blindScope, SHNE ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[BugLab_Variable_Misuse]^return caseEquality ( condition, blindScope, this ) ;^190^^^^^187^191^return caseEquality ( condition, blindScope, SHNE ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[BugLab_Argument_Swapping]^return caseEquality ( SHNE, blindScope, condition ) ;^190^^^^^187^191^return caseEquality ( condition, blindScope, SHNE ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[BugLab_Variable_Misuse]^return caseEquality ( typeOfNode, blindScope, SHEQ ) ;^188^^^^^173^203^return caseEquality ( condition, blindScope, SHEQ ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[BugLab_Argument_Swapping]^return caseEquality ( blindScope, condition, SHEQ ) ;^188^^^^^173^203^return caseEquality ( condition, blindScope, SHEQ ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[BugLab_Argument_Swapping]^return caseEquality ( SHEQ, blindScope, condition ) ;^188^^^^^173^203^return caseEquality ( condition, blindScope, SHEQ ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[BugLab_Variable_Misuse]^if  ( resultEqualsValue )  {^194^^^^^179^209^if  ( outcome )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[BugLab_Variable_Misuse]^return caseEquality ( typeOfNode, blindScope, SHEQ ) ;^197^^^^^194^198^return caseEquality ( condition, blindScope, SHEQ ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[BugLab_Argument_Swapping]^return caseEquality ( blindScope, condition, SHEQ ) ;^197^^^^^194^198^return caseEquality ( condition, blindScope, SHEQ ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[BugLab_Argument_Swapping]^return caseEquality ( condition, SHEQ, blindScope ) ;^197^^^^^194^198^return caseEquality ( condition, blindScope, SHEQ ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[BugLab_Argument_Swapping]^return caseEquality ( SHEQ, blindScope, condition ) ;^197^^^^^194^198^return caseEquality ( condition, blindScope, SHEQ ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[BugLab_Variable_Misuse]^return caseEquality ( stringNode, blindScope, SHEQ ) ;^197^^^^^194^198^return caseEquality ( condition, blindScope, SHEQ ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[BugLab_Variable_Misuse]^return caseEquality ( condition, blindScope, null ) ;^197^^^^^194^198^return caseEquality ( condition, blindScope, SHEQ ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[BugLab_Variable_Misuse]^return caseEquality ( stringNode, blindScope, SHNE ) ;^195^^^^^180^210^return caseEquality ( condition, blindScope, SHNE ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[BugLab_Argument_Swapping]^return caseEquality ( blindScope, condition, SHNE ) ;^195^^^^^180^210^return caseEquality ( condition, blindScope, SHNE ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[BugLab_Argument_Swapping]^return caseEquality ( SHNE, blindScope, condition ) ;^195^^^^^180^210^return caseEquality ( condition, blindScope, SHNE ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[BugLab_Variable_Misuse]^return caseEquality ( condition, blindScope, 1 ) ;^195^^^^^180^210^return caseEquality ( condition, blindScope, SHNE ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[BugLab_Variable_Misuse]^return caseEquality ( stringNode, blindScope, INEQ ) ;^220^^^^^205^235^return caseEquality ( condition, blindScope, INEQ ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[BugLab_Argument_Swapping]^return caseEquality ( blindScope, condition, INEQ ) ;^220^^^^^205^235^return caseEquality ( condition, blindScope, INEQ ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[BugLab_Argument_Swapping]^return caseEquality ( condition, INEQ, blindScope ) ;^220^^^^^205^235^return caseEquality ( condition, blindScope, INEQ ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[BugLab_Variable_Misuse]^return caseEquality ( typeOfNode, blindScope, INEQ ) ;^220^^^^^205^235^return caseEquality ( condition, blindScope, INEQ ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[BugLab_Argument_Swapping]^return caseEquality ( INEQ, blindScope, condition ) ;^220^^^^^205^235^return caseEquality ( condition, blindScope, INEQ ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[BugLab_Variable_Misuse]^if  ( resultEqualsValue && condition.getFirstChild (  ) .getType (  )  == Token.STRING )  {^230^^^^^215^245^if  ( outcome && condition.getFirstChild (  ) .getType (  )  == Token.STRING )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[BugLab_Variable_Misuse]^if  ( outcome && stringNode.getFirstChild (  ) .getType (  )  == Token.STRING )  {^230^^^^^215^245^if  ( outcome && condition.getFirstChild (  ) .getType (  )  == Token.STRING )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[BugLab_Argument_Swapping]^if  ( condition && outcome.getFirstChild (  ) .getType (  )  == Token.STRING )  {^230^^^^^215^245^if  ( outcome && condition.getFirstChild (  ) .getType (  )  == Token.STRING )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[BugLab_Wrong_Operator]^if  ( outcome || condition.getFirstChild (  ) .getType (  )  == Token.STRING )  {^230^^^^^215^245^if  ( outcome && condition.getFirstChild (  ) .getType (  )  == Token.STRING )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[BugLab_Wrong_Operator]^if  ( outcome && condition.getFirstChild (  ) .getType (  )  != Token.STRING )  {^230^^^^^215^245^if  ( outcome && condition.getFirstChild (  ) .getType (  )  == Token.STRING )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[BugLab_Variable_Misuse]^return caseIn ( stringNode.getLastChild (  ) , condition.getFirstChild (  ) .getString (  ) , blindScope ) ;^231^232^^^^216^246^return caseIn ( condition.getLastChild (  ) , condition.getFirstChild (  ) .getString (  ) , blindScope ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[BugLab_Argument_Swapping]^return caseIn ( blindScope.getLastChild (  ) , condition.getFirstChild (  ) .getString (  ) , condition ) ;^231^232^^^^216^246^return caseIn ( condition.getLastChild (  ) , condition.getFirstChild (  ) .getString (  ) , blindScope ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[BugLab_Variable_Misuse]^return caseIn ( typeOfNode.getLastChild (  ) , condition.getFirstChild (  ) .getString (  ) , blindScope ) ;^231^232^^^^216^246^return caseIn ( condition.getLastChild (  ) , condition.getFirstChild (  ) .getString (  ) , blindScope ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[BugLab_Variable_Misuse]^return caseAndOrMaybeShortCircuiting ( typeOfNode.getFirstChild (  ) , condition.getLastChild (  ) , blindScope, true ) ;^159^160^^^^144^174^return caseAndOrMaybeShortCircuiting ( condition.getFirstChild (  ) , condition.getLastChild (  ) , blindScope, true ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[BugLab_Argument_Swapping]^return caseAndOrMaybeShortCircuiting ( blindScope.getFirstChild (  ) , condition.getLastChild (  ) , condition, true ) ;^159^160^^^^144^174^return caseAndOrMaybeShortCircuiting ( condition.getFirstChild (  ) , condition.getLastChild (  ) , blindScope, true ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[BugLab_Wrong_Literal]^return caseAndOrMaybeShortCircuiting ( condition.getFirstChild (  ) , condition.getLastChild (  ) , blindScope, false ) ;^159^160^^^^144^174^return caseAndOrMaybeShortCircuiting ( condition.getFirstChild (  ) , condition.getLastChild (  ) , blindScope, true ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[BugLab_Argument_Swapping]^return caseAndOrMaybeShortCircuiting ( blindScope.getFirstChild (  ) , condition.getLastChild (  ) , condition, false ) ;^168^169^^^^153^183^return caseAndOrMaybeShortCircuiting ( condition.getFirstChild (  ) , condition.getLastChild (  ) , blindScope, false ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[BugLab_Wrong_Literal]^return caseAndOrMaybeShortCircuiting ( condition.getFirstChild (  ) , condition.getLastChild (  ) , blindScope, true ) ;^168^169^^^^153^183^return caseAndOrMaybeShortCircuiting ( condition.getFirstChild (  ) , condition.getLastChild (  ) , blindScope, false ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[BugLab_Variable_Misuse]^return caseEquality ( stringNode, blindScope, EQ ) ;^174^^^^^159^189^return caseEquality ( condition, blindScope, EQ ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[BugLab_Variable_Misuse]^return caseEquality ( typeOfNode, blindScope, NE ) ;^176^^^^^161^191^return caseEquality ( condition, blindScope, NE ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[BugLab_Argument_Swapping]^return caseEquality ( blindScope, condition, NE ) ;^176^^^^^161^191^return caseEquality ( condition, blindScope, NE ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[BugLab_Argument_Swapping]^return caseEquality ( condition, NE, blindScope ) ;^176^^^^^161^191^return caseEquality ( condition, blindScope, NE ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[BugLab_Argument_Swapping]^return caseEquality ( NE, blindScope, condition ) ;^176^^^^^161^191^return caseEquality ( condition, blindScope, NE ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[BugLab_Variable_Misuse]^return caseEquality ( stringNode, blindScope, NE ) ;^181^^^^^166^196^return caseEquality ( condition, blindScope, NE ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[BugLab_Argument_Swapping]^return caseEquality ( EQ, blindScope, condition ) ;^183^^^^^168^198^return caseEquality ( condition, blindScope, EQ ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[BugLab_Argument_Swapping]^return caseEquality ( blindScope, condition, EQ ) ;^183^^^^^168^198^return caseEquality ( condition, blindScope, EQ ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[BugLab_Argument_Swapping]^return caseEquality ( condition, EQ, blindScope ) ;^183^^^^^168^198^return caseEquality ( condition, blindScope, EQ ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[BugLab_Variable_Misuse]^return caseEquality ( typeOfNode, blindScope, SHNE ) ;^190^^^^^175^205^return caseEquality ( condition, blindScope, SHNE ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[BugLab_Argument_Swapping]^return caseEquality ( SHNE, blindScope, condition ) ;^190^^^^^175^205^return caseEquality ( condition, blindScope, SHNE ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[BugLab_Argument_Swapping]^return caseEquality ( condition, SHNE, blindScope ) ;^190^^^^^175^205^return caseEquality ( condition, blindScope, SHNE ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[BugLab_Variable_Misuse]^return caseEquality ( typeOfNode, blindScope, SHNE ) ;^195^^^^^180^210^return caseEquality ( condition, blindScope, SHNE ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[BugLab_Argument_Swapping]^return caseEquality ( condition, SHNE, blindScope ) ;^195^^^^^180^210^return caseEquality ( condition, blindScope, SHNE ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[BugLab_Variable_Misuse]^return caseEquality ( stringNode, blindScope, SHEQ ) ;^197^^^^^182^212^return caseEquality ( condition, blindScope, SHEQ ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[BugLab_Argument_Swapping]^return caseEquality ( SHEQ, blindScope, condition ) ;^197^^^^^182^212^return caseEquality ( condition, blindScope, SHEQ ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[BugLab_Argument_Swapping]^return caseEquality ( blindScope, condition, SHEQ ) ;^197^^^^^182^212^return caseEquality ( condition, blindScope, SHEQ ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[BugLab_Argument_Swapping]^return caseEquality ( condition, SHEQ, blindScope ) ;^197^^^^^182^212^return caseEquality ( condition, blindScope, SHEQ ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[BugLab_Variable_Misuse]^return caseNameOrGetProp ( typeOfNode, blindScope, outcome ) ;^202^^^^^187^217^return caseNameOrGetProp ( condition, blindScope, outcome ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[BugLab_Variable_Misuse]^return caseNameOrGetProp ( condition, blindScope, resultEqualsValue ) ;^202^^^^^187^217^return caseNameOrGetProp ( condition, blindScope, outcome ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[BugLab_Argument_Swapping]^return caseNameOrGetProp ( outcome, blindScope, condition ) ;^202^^^^^187^217^return caseNameOrGetProp ( condition, blindScope, outcome ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[BugLab_Argument_Swapping]^return caseNameOrGetProp ( blindScope, condition, outcome ) ;^202^^^^^187^217^return caseNameOrGetProp ( condition, blindScope, outcome ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[BugLab_Variable_Misuse]^return firstPreciserScopeKnowingConditionOutcome ( typeOfNode.getFirstChild (  ) , firstPreciserScopeKnowingConditionOutcome ( condition.getFirstChild (  ) .getNext (  ) , blindScope, outcome ) ,^205^206^207^208^^190^220^return firstPreciserScopeKnowingConditionOutcome ( condition.getFirstChild (  ) , firstPreciserScopeKnowingConditionOutcome ( condition.getFirstChild (  ) .getNext (  ) , blindScope, outcome ) ,^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[BugLab_Variable_Misuse]^return firstPreciserScopeKnowingConditionOutcome ( condition.getFirstChild (  ) , firstPreciserScopeKnowingConditionOutcome ( condition.getFirstChild (  ) .getNext (  ) , blindScope, resultEqualsValue ) ,^205^206^207^208^^190^220^return firstPreciserScopeKnowingConditionOutcome ( condition.getFirstChild (  ) , firstPreciserScopeKnowingConditionOutcome ( condition.getFirstChild (  ) .getNext (  ) , blindScope, outcome ) ,^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[BugLab_Argument_Swapping]^return firstPreciserScopeKnowingConditionOutcome ( outcome.getFirstChild (  ) , firstPreciserScopeKnowingConditionOutcome ( condition.getFirstChild (  ) .getNext (  ) , blindScope, condition ) ,^205^206^207^208^^190^220^return firstPreciserScopeKnowingConditionOutcome ( condition.getFirstChild (  ) , firstPreciserScopeKnowingConditionOutcome ( condition.getFirstChild (  ) .getNext (  ) , blindScope, outcome ) ,^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[BugLab_Argument_Swapping]^return firstPreciserScopeKnowingConditionOutcome ( condition.getFirstChild (  ) , firstPreciserScopeKnowingConditionOutcome ( condition.getFirstChild (  ) .getNext (  ) , outcome, blindScope ) ,^205^206^207^208^^190^220^return firstPreciserScopeKnowingConditionOutcome ( condition.getFirstChild (  ) , firstPreciserScopeKnowingConditionOutcome ( condition.getFirstChild (  ) .getNext (  ) , blindScope, outcome ) ,^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[BugLab_Variable_Misuse]^return firstPreciserScopeKnowingConditionOutcome ( typeOfNode.getFirstChild (  ) , blindScope, !outcome ) ;^212^213^^^^197^227^return firstPreciserScopeKnowingConditionOutcome ( condition.getFirstChild (  ) , blindScope, !outcome ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[BugLab_Variable_Misuse]^return firstPreciserScopeKnowingConditionOutcome ( condition.getFirstChild (  ) , blindScope, !resultEqualsValue ) ;^212^213^^^^197^227^return firstPreciserScopeKnowingConditionOutcome ( condition.getFirstChild (  ) , blindScope, !outcome ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[BugLab_Argument_Swapping]^return firstPreciserScopeKnowingConditionOutcome ( blindScope.getFirstChild (  ) , condition, !outcome ) ;^212^213^^^^197^227^return firstPreciserScopeKnowingConditionOutcome ( condition.getFirstChild (  ) , blindScope, !outcome ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[BugLab_Variable_Misuse]^return caseInstanceOf ( typeOfNode.getFirstChild (  ) , condition.getLastChild (  ) , blindScope, outcome ) ;^225^226^227^^^210^240^return caseInstanceOf ( condition.getFirstChild (  ) , condition.getLastChild (  ) , blindScope, outcome ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[BugLab_Variable_Misuse]^return caseInstanceOf ( condition.getFirstChild (  ) , condition.getLastChild (  ) , blindScope, resultEqualsValue ) ;^225^226^227^^^210^240^return caseInstanceOf ( condition.getFirstChild (  ) , condition.getLastChild (  ) , blindScope, outcome ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[BugLab_Argument_Swapping]^return caseInstanceOf ( blindScope.getFirstChild (  ) , condition.getLastChild (  ) , condition, outcome ) ;^225^226^227^^^210^240^return caseInstanceOf ( condition.getFirstChild (  ) , condition.getLastChild (  ) , blindScope, outcome ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[BugLab_Argument_Swapping]^return caseInstanceOf ( condition.getFirstChild (  ) , condition.getLastChild (  ) , outcome, blindScope ) ;^225^226^227^^^210^240^return caseInstanceOf ( condition.getFirstChild (  ) , condition.getLastChild (  ) , blindScope, outcome ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[BugLab_Variable_Misuse]^switch  ( typeOfNode.getType (  )  )  {^153^^^^^138^168^switch  ( condition.getType (  )  )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[BugLab_Variable_Misuse]^return caseAndOrMaybeShortCircuiting ( stringNode.getFirstChild (  ) , condition.getLastChild (  ) , blindScope, true ) ;^159^160^^^^144^174^return caseAndOrMaybeShortCircuiting ( condition.getFirstChild (  ) , condition.getLastChild (  ) , blindScope, true ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[BugLab_Variable_Misuse]^return caseAndOrMaybeShortCircuiting ( typeOfNode.getFirstChild (  ) , condition.getLastChild (  ) , blindScope, false ) ;^168^169^^^^153^183^return caseAndOrMaybeShortCircuiting ( condition.getFirstChild (  ) , condition.getLastChild (  ) , blindScope, false ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[BugLab_Variable_Misuse]^return caseAndOrMaybeShortCircuiting ( stringNode.getFirstChild (  ) , condition.getLastChild (  ) , blindScope, false ) ;^168^169^^^^153^183^return caseAndOrMaybeShortCircuiting ( condition.getFirstChild (  ) , condition.getLastChild (  ) , blindScope, false ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[BugLab_Argument_Swapping]^return caseEquality ( condition, SHEQ, blindScope ) ;^188^^^^^173^203^return caseEquality ( condition, blindScope, SHEQ ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[BugLab_Argument_Swapping]^return caseEquality ( blindScope, condition, SHNE ) ;^190^^^^^175^205^return caseEquality ( condition, blindScope, SHNE ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[BugLab_Argument_Swapping]^return caseNameOrGetProp ( condition, outcome, blindScope ) ;^202^^^^^187^217^return caseNameOrGetProp ( condition, blindScope, outcome ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[BugLab_Variable_Misuse]^condition.getFirstChild (  ) , firstPreciserScopeKnowingConditionOutcome ( typeOfNode.getFirstChild (  ) .getNext (  ) , blindScope, outcome ) , outcome ) ;^206^207^208^209^^191^221^condition.getFirstChild (  ) , firstPreciserScopeKnowingConditionOutcome ( condition.getFirstChild (  ) .getNext (  ) , blindScope, outcome ) , outcome ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[BugLab_Variable_Misuse]^firstPreciserScopeKnowingConditionOutcome ( typeOfNode.getFirstChild (  ) .getNext (  ) , blindScope, outcome ) , outcome ) ;^207^208^209^^^192^222^firstPreciserScopeKnowingConditionOutcome ( condition.getFirstChild (  ) .getNext (  ) , blindScope, outcome ) , outcome ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[BugLab_Variable_Misuse]^firstPreciserScopeKnowingConditionOutcome ( condition.getFirstChild (  ) .getNext (  ) , blindScope, resultEqualsValue ) , outcome ) ;^207^208^209^^^192^222^firstPreciserScopeKnowingConditionOutcome ( condition.getFirstChild (  ) .getNext (  ) , blindScope, outcome ) , outcome ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[BugLab_Argument_Swapping]^firstPreciserScopeKnowingConditionOutcome ( outcome.getFirstChild (  ) .getNext (  ) , blindScope, condition ) , outcome ) ;^207^208^209^^^192^222^firstPreciserScopeKnowingConditionOutcome ( condition.getFirstChild (  ) .getNext (  ) , blindScope, outcome ) , outcome ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[BugLab_Argument_Swapping]^firstPreciserScopeKnowingConditionOutcome ( condition.getFirstChild (  ) .getNext (  ) , outcome, blindScope ) , outcome ) ;^207^208^209^^^192^222^firstPreciserScopeKnowingConditionOutcome ( condition.getFirstChild (  ) .getNext (  ) , blindScope, outcome ) , outcome ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[BugLab_Variable_Misuse]^return caseEquality ( condition, blindScope, 3 ) ;^220^^^^^205^235^return caseEquality ( condition, blindScope, INEQ ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[BugLab_Variable_Misuse]^return caseInstanceOf ( stringNode.getFirstChild (  ) , condition.getLastChild (  ) , blindScope, outcome ) ;^225^226^227^^^210^240^return caseInstanceOf ( condition.getFirstChild (  ) , condition.getLastChild (  ) , blindScope, outcome ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[BugLab_Variable_Misuse]^condition.getFirstChild (  ) , typeOfNode.getLastChild (  ) , blindScope, outcome ) ;^226^227^^^^211^241^condition.getFirstChild (  ) , condition.getLastChild (  ) , blindScope, outcome ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[BugLab_Variable_Misuse]^if  ( outcome && typeOfNode.getFirstChild (  ) .getType (  )  == Token.STRING )  {^230^^^^^215^245^if  ( outcome && condition.getFirstChild (  ) .getType (  )  == Token.STRING )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[BugLab_Variable_Misuse]^return nextPreciserScopeKnowingConditionOutcome ( typeOfNode, blindScope, outcome ) ;^236^237^^^^221^251^return nextPreciserScopeKnowingConditionOutcome ( condition, blindScope, outcome ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[BugLab_Argument_Swapping]^return nextPreciserScopeKnowingConditionOutcome ( blindScope, condition, outcome ) ;^236^237^^^^221^251^return nextPreciserScopeKnowingConditionOutcome ( condition, blindScope, outcome ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[BugLab_Argument_Swapping]^return nextPreciserScopeKnowingConditionOutcome ( outcome, blindScope, condition ) ;^236^237^^^^221^251^return nextPreciserScopeKnowingConditionOutcome ( condition, blindScope, outcome ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[BugLab_Variable_Misuse]^return nextPreciserScopeKnowingConditionOutcome ( condition, blindScope, resultEqualsValue ) ;^236^237^^^^221^251^return nextPreciserScopeKnowingConditionOutcome ( condition, blindScope, outcome ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[BugLab_Argument_Swapping]^return nextPreciserScopeKnowingConditionOutcome ( condition, outcome, blindScope ) ;^236^237^^^^221^251^return nextPreciserScopeKnowingConditionOutcome ( condition, blindScope, outcome ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[BugLab_Variable_Misuse]^Node left = right.getFirstChild (  ) ;^242^^^^^227^257^Node left = condition.getFirstChild (  ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseEquality [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope JSType>> merging [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  JSType  leftType  rightType  boolean  leftIsRefineable  rightIsRefineable  Node  condition  left  right  FlowScope  blindScope  informed  Pair  merged  
[BugLab_Variable_Misuse]^Node right = left.getLastChild (  ) ;^243^^^^^228^258^Node right = condition.getLastChild (  ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseEquality [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope JSType>> merging [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  JSType  leftType  rightType  boolean  leftIsRefineable  rightIsRefineable  Node  condition  left  right  FlowScope  blindScope  informed  Pair  merged  
[BugLab_Variable_Misuse]^Node right = right.getLastChild (  ) ;^243^^^^^228^258^Node right = condition.getLastChild (  ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseEquality [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope JSType>> merging [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  JSType  leftType  rightType  boolean  leftIsRefineable  rightIsRefineable  Node  condition  left  right  FlowScope  blindScope  informed  Pair  merged  
[BugLab_Variable_Misuse]^JSType rightType = getTypeIfRefinable ( left, blindScope ) ;^246^^^^^231^261^JSType leftType = getTypeIfRefinable ( left, blindScope ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseEquality [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope JSType>> merging [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  JSType  leftType  rightType  boolean  leftIsRefineable  rightIsRefineable  Node  condition  left  right  FlowScope  blindScope  informed  Pair  merged  
[BugLab_Variable_Misuse]^JSType leftType = getTypeIfRefinable ( left, informed ) ;^246^^^^^231^261^JSType leftType = getTypeIfRefinable ( left, blindScope ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseEquality [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope JSType>> merging [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  JSType  leftType  rightType  boolean  leftIsRefineable  rightIsRefineable  Node  condition  left  right  FlowScope  blindScope  informed  Pair  merged  
[BugLab_Argument_Swapping]^JSType blindScopeType = getTypeIfRefinable ( left, left ) ;^246^^^^^231^261^JSType leftType = getTypeIfRefinable ( left, blindScope ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseEquality [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope JSType>> merging [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  JSType  leftType  rightType  boolean  leftIsRefineable  rightIsRefineable  Node  condition  left  right  FlowScope  blindScope  informed  Pair  merged  
[BugLab_Variable_Misuse]^if  ( rightType != null )  {^248^^^^^233^263^if  ( leftType != null )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseEquality [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope JSType>> merging [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  JSType  leftType  rightType  boolean  leftIsRefineable  rightIsRefineable  Node  condition  left  right  FlowScope  blindScope  informed  Pair  merged  
[BugLab_Argument_Swapping]^if  ( left != null )  {^248^^^^^233^263^if  ( leftType != null )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseEquality [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope JSType>> merging [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  JSType  leftType  rightType  boolean  leftIsRefineable  rightIsRefineable  Node  condition  left  right  FlowScope  blindScope  informed  Pair  merged  
[BugLab_Argument_Swapping]^if  ( leftTypeType != null )  {^248^^^^^233^263^if  ( leftType != null )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseEquality [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope JSType>> merging [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  JSType  leftType  rightType  boolean  leftIsRefineable  rightIsRefineable  Node  condition  left  right  FlowScope  blindScope  informed  Pair  merged  
[BugLab_Wrong_Operator]^if  ( leftType == null )  {^248^^^^^233^263^if  ( leftType != null )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseEquality [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope JSType>> merging [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  JSType  leftType  rightType  boolean  leftIsRefineable  rightIsRefineable  Node  condition  left  right  FlowScope  blindScope  informed  Pair  merged  
[BugLab_Wrong_Literal]^leftIsRefineable = true;^251^^^^^248^253^leftIsRefineable = false;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseEquality [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope JSType>> merging [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  JSType  leftType  rightType  boolean  leftIsRefineable  rightIsRefineable  Node  condition  left  right  FlowScope  blindScope  informed  Pair  merged  
[BugLab_Variable_Misuse]^leftType = right.getJSType (  ) ;^252^^^^^248^253^leftType = left.getJSType (  ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseEquality [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope JSType>> merging [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  JSType  leftType  rightType  boolean  leftIsRefineable  rightIsRefineable  Node  condition  left  right  FlowScope  blindScope  informed  Pair  merged  
[BugLab_Wrong_Literal]^leftIsRefineable = false;^249^^^^^234^264^leftIsRefineable = true;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseEquality [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope JSType>> merging [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  JSType  leftType  rightType  boolean  leftIsRefineable  rightIsRefineable  Node  condition  left  right  FlowScope  blindScope  informed  Pair  merged  
[BugLab_Wrong_Literal]^leftIsRefineable = true;^251^^^^^236^266^leftIsRefineable = false;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseEquality [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope JSType>> merging [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  JSType  leftType  rightType  boolean  leftIsRefineable  rightIsRefineable  Node  condition  left  right  FlowScope  blindScope  informed  Pair  merged  
[BugLab_Variable_Misuse]^leftType = right.getJSType (  ) ;^252^^^^^237^267^leftType = left.getJSType (  ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseEquality [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope JSType>> merging [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  JSType  leftType  rightType  boolean  leftIsRefineable  rightIsRefineable  Node  condition  left  right  FlowScope  blindScope  informed  Pair  merged  
[BugLab_Variable_Misuse]^JSType leftType = getTypeIfRefinable ( right, blindScope ) ;^256^^^^^241^271^JSType rightType = getTypeIfRefinable ( right, blindScope ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseEquality [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope JSType>> merging [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  JSType  leftType  rightType  boolean  leftIsRefineable  rightIsRefineable  Node  condition  left  right  FlowScope  blindScope  informed  Pair  merged  
[BugLab_Variable_Misuse]^JSType rightType = getTypeIfRefinable ( right, informed ) ;^256^^^^^241^271^JSType rightType = getTypeIfRefinable ( right, blindScope ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseEquality [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope JSType>> merging [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  JSType  leftType  rightType  boolean  leftIsRefineable  rightIsRefineable  Node  condition  left  right  FlowScope  blindScope  informed  Pair  merged  
[BugLab_Argument_Swapping]^JSType blindScopeType = getTypeIfRefinable ( right, right ) ;^256^^^^^241^271^JSType rightType = getTypeIfRefinable ( right, blindScope ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseEquality [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope JSType>> merging [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  JSType  leftType  rightType  boolean  leftIsRefineable  rightIsRefineable  Node  condition  left  right  FlowScope  blindScope  informed  Pair  merged  
[BugLab_Variable_Misuse]^if  ( leftType != null )  {^258^^^^^243^273^if  ( rightType != null )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseEquality [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope JSType>> merging [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  JSType  leftType  rightType  boolean  leftIsRefineable  rightIsRefineable  Node  condition  left  right  FlowScope  blindScope  informed  Pair  merged  
[BugLab_Argument_Swapping]^if  ( right != null )  {^258^^^^^243^273^if  ( rightType != null )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseEquality [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope JSType>> merging [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  JSType  leftType  rightType  boolean  leftIsRefineable  rightIsRefineable  Node  condition  left  right  FlowScope  blindScope  informed  Pair  merged  
[BugLab_Argument_Swapping]^if  ( rightTypeType != null )  {^258^^^^^243^273^if  ( rightType != null )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseEquality [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope JSType>> merging [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  JSType  leftType  rightType  boolean  leftIsRefineable  rightIsRefineable  Node  condition  left  right  FlowScope  blindScope  informed  Pair  merged  
[BugLab_Wrong_Operator]^if  ( rightType == null )  {^258^^^^^243^273^if  ( rightType != null )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseEquality [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope JSType>> merging [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  JSType  leftType  rightType  boolean  leftIsRefineable  rightIsRefineable  Node  condition  left  right  FlowScope  blindScope  informed  Pair  merged  
[BugLab_Wrong_Literal]^rightIsRefineable = true;^261^^^^^258^263^rightIsRefineable = false;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseEquality [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope JSType>> merging [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  JSType  leftType  rightType  boolean  leftIsRefineable  rightIsRefineable  Node  condition  left  right  FlowScope  blindScope  informed  Pair  merged  
[BugLab_Variable_Misuse]^rightType = left.getJSType (  ) ;^262^^^^^258^263^rightType = right.getJSType (  ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseEquality [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope JSType>> merging [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  JSType  leftType  rightType  boolean  leftIsRefineable  rightIsRefineable  Node  condition  left  right  FlowScope  blindScope  informed  Pair  merged  
[BugLab_Wrong_Literal]^rightIsRefineable = false;^259^^^^^244^274^rightIsRefineable = true;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseEquality [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope JSType>> merging [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  JSType  leftType  rightType  boolean  leftIsRefineable  rightIsRefineable  Node  condition  left  right  FlowScope  blindScope  informed  Pair  merged  
[BugLab_Wrong_Literal]^rightIsRefineable = true;^261^^^^^246^276^rightIsRefineable = false;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseEquality [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope JSType>> merging [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  JSType  leftType  rightType  boolean  leftIsRefineable  rightIsRefineable  Node  condition  left  right  FlowScope  blindScope  informed  Pair  merged  
[BugLab_Variable_Misuse]^rightType = left.getJSType (  ) ;^262^^^^^247^277^rightType = right.getJSType (  ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseEquality [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope JSType>> merging [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  JSType  leftType  rightType  boolean  leftIsRefineable  rightIsRefineable  Node  condition  left  right  FlowScope  blindScope  informed  Pair  merged  
[BugLab_Variable_Misuse]^Pair<JSType, JSType> merged = merging.apply ( Pair.of ( rightType, rightType )  ) ;^266^^^^^251^281^Pair<JSType, JSType> merged = merging.apply ( Pair.of ( leftType, rightType )  ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseEquality [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope JSType>> merging [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  JSType  leftType  rightType  boolean  leftIsRefineable  rightIsRefineable  Node  condition  left  right  FlowScope  blindScope  informed  Pair  merged  
[BugLab_Variable_Misuse]^Pair<JSType, JSType> merged = merging.apply ( Pair.of ( leftType, leftType )  ) ;^266^^^^^251^281^Pair<JSType, JSType> merged = merging.apply ( Pair.of ( leftType, rightType )  ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseEquality [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope JSType>> merging [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  JSType  leftType  rightType  boolean  leftIsRefineable  rightIsRefineable  Node  condition  left  right  FlowScope  blindScope  informed  Pair  merged  
[BugLab_Argument_Swapping]^Pair<JSType, JSType> merged = rightType.apply ( Pair.of ( leftType, merging )  ) ;^266^^^^^251^281^Pair<JSType, JSType> merged = merging.apply ( Pair.of ( leftType, rightType )  ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseEquality [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope JSType>> merging [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  JSType  leftType  rightType  boolean  leftIsRefineable  rightIsRefineable  Node  condition  left  right  FlowScope  blindScope  informed  Pair  merged  
[BugLab_Argument_Swapping]^Pair<JSType, JSType> merged = merging.apply ( Pair.of ( rightType, leftType )  ) ;^266^^^^^251^281^Pair<JSType, JSType> merged = merging.apply ( Pair.of ( leftType, rightType )  ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseEquality [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope JSType>> merging [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  JSType  leftType  rightType  boolean  leftIsRefineable  rightIsRefineable  Node  condition  left  right  FlowScope  blindScope  informed  Pair  merged  
[BugLab_Argument_Swapping]^Pair<JSType, JSType> merged = leftType.apply ( Pair.of ( merging, rightType )  ) ;^266^^^^^251^281^Pair<JSType, JSType> merged = merging.apply ( Pair.of ( leftType, rightType )  ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseEquality [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope JSType>> merging [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  JSType  leftType  rightType  boolean  leftIsRefineable  rightIsRefineable  Node  condition  left  right  FlowScope  blindScope  informed  Pair  merged  
[BugLab_Wrong_Operator]^if  ( merged != null || (  ( leftIsRefineable && merged.first != null )  || ( rightIsRefineable && merged.second != null )  )  )  {^269^270^271^^^254^284^if  ( merged != null && (  ( leftIsRefineable && merged.first != null )  || ( rightIsRefineable && merged.second != null )  )  )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseEquality [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope JSType>> merging [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  JSType  leftType  rightType  boolean  leftIsRefineable  rightIsRefineable  Node  condition  left  right  FlowScope  blindScope  informed  Pair  merged  
[BugLab_Wrong_Operator]^if  ( merged == null && (  ( leftIsRefineable && merged.first != null )  || ( rightIsRefineable && merged.second != null )  )  )  {^269^270^271^^^254^284^if  ( merged != null && (  ( leftIsRefineable && merged.first != null )  || ( rightIsRefineable && merged.second != null )  )  )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseEquality [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope JSType>> merging [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  JSType  leftType  rightType  boolean  leftIsRefineable  rightIsRefineable  Node  condition  left  right  FlowScope  blindScope  informed  Pair  merged  
[BugLab_Wrong_Operator]^if  ( merged != null && (  ( leftIsRefineable && merged.first != null )  && ( rightIsRefineable && merged.second != null )  )  )  {^269^270^271^^^254^284^if  ( merged != null && (  ( leftIsRefineable && merged.first != null )  || ( rightIsRefineable && merged.second != null )  )  )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseEquality [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope JSType>> merging [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  JSType  leftType  rightType  boolean  leftIsRefineable  rightIsRefineable  Node  condition  left  right  FlowScope  blindScope  informed  Pair  merged  
[BugLab_Wrong_Operator]^if  ( merged != null && (  ( leftIsRefineable && merged.first == null )  || ( rightIsRefineable && merged.second != null )  )  )  {^269^270^271^^^254^284^if  ( merged != null && (  ( leftIsRefineable && merged.first != null )  || ( rightIsRefineable && merged.second != null )  )  )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseEquality [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope JSType>> merging [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  JSType  leftType  rightType  boolean  leftIsRefineable  rightIsRefineable  Node  condition  left  right  FlowScope  blindScope  informed  Pair  merged  
[BugLab_Wrong_Operator]^if  ( merged != null && (  ( leftIsRefineable && merged.first != null )  || ( rightIsRefineable && merged.second == null )  )  )  {^269^270^271^^^254^284^if  ( merged != null && (  ( leftIsRefineable && merged.first != null )  || ( rightIsRefineable && merged.second != null )  )  )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseEquality [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope JSType>> merging [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  JSType  leftType  rightType  boolean  leftIsRefineable  rightIsRefineable  Node  condition  left  right  FlowScope  blindScope  informed  Pair  merged  
[BugLab_Wrong_Operator]^if  ( merged != null && (  ( leftIsRefineable || merged.first != null )  || ( rightIsRefineable && merged.second != null )  )  )  {^269^270^271^^^254^284^if  ( merged != null && (  ( leftIsRefineable && merged.first != null )  || ( rightIsRefineable && merged.second != null )  )  )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseEquality [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope JSType>> merging [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  JSType  leftType  rightType  boolean  leftIsRefineable  rightIsRefineable  Node  condition  left  right  FlowScope  blindScope  informed  Pair  merged  
[BugLab_Wrong_Operator]^if  ( merged != null && (  ( leftIsRefineable && merged.first != null )  || ( rightIsRefineable || merged.second != null )  )  )  {^269^270^271^^^254^284^if  ( merged != null && (  ( leftIsRefineable && merged.first != null )  || ( rightIsRefineable && merged.second != null )  )  )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseEquality [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope JSType>> merging [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  JSType  leftType  rightType  boolean  leftIsRefineable  rightIsRefineable  Node  condition  left  right  FlowScope  blindScope  informed  Pair  merged  
[BugLab_Wrong_Operator]^if  ( leftIsRefineable || merged.first != null )  {^273^^^^^269^280^if  ( leftIsRefineable && merged.first != null )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseEquality [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope JSType>> merging [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  JSType  leftType  rightType  boolean  leftIsRefineable  rightIsRefineable  Node  condition  left  right  FlowScope  blindScope  informed  Pair  merged  
[BugLab_Wrong_Operator]^if  ( leftIsRefineable && merged.first == null )  {^273^^^^^269^280^if  ( leftIsRefineable && merged.first != null )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseEquality [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope JSType>> merging [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  JSType  leftType  rightType  boolean  leftIsRefineable  rightIsRefineable  Node  condition  left  right  FlowScope  blindScope  informed  Pair  merged  
[BugLab_Wrong_Operator]^if  ( rightIsRefineable || merged.second != null )  {^276^^^^^269^280^if  ( rightIsRefineable && merged.second != null )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseEquality [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope JSType>> merging [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  JSType  leftType  rightType  boolean  leftIsRefineable  rightIsRefineable  Node  condition  left  right  FlowScope  blindScope  informed  Pair  merged  
[BugLab_Wrong_Operator]^if  ( rightIsRefineable && merged.second == null )  {^276^^^^^269^280^if  ( rightIsRefineable && merged.second != null )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseEquality [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope JSType>> merging [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  JSType  leftType  rightType  boolean  leftIsRefineable  rightIsRefineable  Node  condition  left  right  FlowScope  blindScope  informed  Pair  merged  
[BugLab_Variable_Misuse]^return blindScope;^279^^^^^269^280^return informed;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseEquality [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope JSType>> merging [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  JSType  leftType  rightType  boolean  leftIsRefineable  rightIsRefineable  Node  condition  left  right  FlowScope  blindScope  informed  Pair  merged  
[BugLab_Variable_Misuse]^FlowScope informed = informed.createChildFlowScope (  ) ;^272^^^^^269^280^FlowScope informed = blindScope.createChildFlowScope (  ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseEquality [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope JSType>> merging [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  JSType  leftType  rightType  boolean  leftIsRefineable  rightIsRefineable  Node  condition  left  right  FlowScope  blindScope  informed  Pair  merged  
[BugLab_Wrong_Operator]^if  ( leftIsRefineable || merged.first != null )  {^273^^^^^258^288^if  ( leftIsRefineable && merged.first != null )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseEquality [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope JSType>> merging [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  JSType  leftType  rightType  boolean  leftIsRefineable  rightIsRefineable  Node  condition  left  right  FlowScope  blindScope  informed  Pair  merged  
[BugLab_Wrong_Operator]^if  ( leftIsRefineable && merged.first == null )  {^273^^^^^258^288^if  ( leftIsRefineable && merged.first != null )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseEquality [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope JSType>> merging [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  JSType  leftType  rightType  boolean  leftIsRefineable  rightIsRefineable  Node  condition  left  right  FlowScope  blindScope  informed  Pair  merged  
[BugLab_Wrong_Operator]^if  ( rightIsRefineable || merged.second != null )  {^276^^^^^261^291^if  ( rightIsRefineable && merged.second != null )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseEquality [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope JSType>> merging [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  JSType  leftType  rightType  boolean  leftIsRefineable  rightIsRefineable  Node  condition  left  right  FlowScope  blindScope  informed  Pair  merged  
[BugLab_Wrong_Operator]^if  ( rightIsRefineable && merged.second == null )  {^276^^^^^261^291^if  ( rightIsRefineable && merged.second != null )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseEquality [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope JSType>> merging [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  JSType  leftType  rightType  boolean  leftIsRefineable  rightIsRefineable  Node  condition  left  right  FlowScope  blindScope  informed  Pair  merged  
[BugLab_Variable_Misuse]^return blindScope;^279^^^^^264^294^return informed;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseEquality [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope JSType>> merging [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  JSType  leftType  rightType  boolean  leftIsRefineable  rightIsRefineable  Node  condition  left  right  FlowScope  blindScope  informed  Pair  merged  
[BugLab_Variable_Misuse]^FlowScope informed = informed.createChildFlowScope (  ) ;^272^^^^^257^287^FlowScope informed = blindScope.createChildFlowScope (  ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseEquality [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope JSType>> merging [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  JSType  leftType  rightType  boolean  leftIsRefineable  rightIsRefineable  Node  condition  left  right  FlowScope  blindScope  informed  Pair  merged  
[BugLab_Variable_Misuse]^JSType leftType = getTypeIfRefinable ( left, informed ) ;^287^^^^^272^302^JSType leftType = getTypeIfRefinable ( left, blindScope ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[BugLab_Argument_Swapping]^JSType blindScopeType = getTypeIfRefinable ( left, left ) ;^287^^^^^272^302^JSType leftType = getTypeIfRefinable ( left, blindScope ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[BugLab_Variable_Misuse]^JSType rightType = getTypeIfRefinable ( left, blindScope ) ;^287^^^^^272^302^JSType leftType = getTypeIfRefinable ( left, blindScope ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[BugLab_Variable_Misuse]^if  ( rightType != null )  {^289^^^^^274^304^if  ( leftType != null )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[BugLab_Wrong_Operator]^if  ( leftType == null )  {^289^^^^^274^304^if  ( leftType != null )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[BugLab_Wrong_Literal]^leftIsRefineable = true;^292^^^^^289^296^leftIsRefineable = false;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[BugLab_Variable_Misuse]^leftType = right.getJSType (  ) ;^293^^^^^289^296^leftType = left.getJSType (  ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[BugLab_Variable_Misuse]^blindScope = firstPreciserScopeKnowingConditionOutcome ( right, blindScope, condition ) ;^294^295^^^^289^296^blindScope = firstPreciserScopeKnowingConditionOutcome ( left, blindScope, condition ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[BugLab_Variable_Misuse]^blindScope = firstPreciserScopeKnowingConditionOutcome ( left, informed, condition ) ;^294^295^^^^289^296^blindScope = firstPreciserScopeKnowingConditionOutcome ( left, blindScope, condition ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[BugLab_Variable_Misuse]^blindScope = firstPreciserScopeKnowingConditionOutcome ( left, blindScope, rightIsRefineable ) ;^294^295^^^^289^296^blindScope = firstPreciserScopeKnowingConditionOutcome ( left, blindScope, condition ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[BugLab_Argument_Swapping]^blindScope = firstPreciserScopeKnowingConditionOutcome ( blindScope, left, condition ) ;^294^295^^^^289^296^blindScope = firstPreciserScopeKnowingConditionOutcome ( left, blindScope, condition ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[BugLab_Argument_Swapping]^blindScope = firstPreciserScopeKnowingConditionOutcome ( left, condition, blindScope ) ;^294^295^^^^289^296^blindScope = firstPreciserScopeKnowingConditionOutcome ( left, blindScope, condition ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[BugLab_Wrong_Literal]^leftIsRefineable = false;^290^^^^^275^305^leftIsRefineable = true;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[BugLab_Wrong_Literal]^leftIsRefineable = true;^292^^^^^277^307^leftIsRefineable = false;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[BugLab_Variable_Misuse]^leftType = right.getJSType (  ) ;^293^^^^^278^308^leftType = left.getJSType (  ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[BugLab_Variable_Misuse]^blindScope = firstPreciserScopeKnowingConditionOutcome ( right, blindScope, condition ) ;^294^295^^^^279^309^blindScope = firstPreciserScopeKnowingConditionOutcome ( left, blindScope, condition ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[BugLab_Variable_Misuse]^blindScope = firstPreciserScopeKnowingConditionOutcome ( left, informed, condition ) ;^294^295^^^^279^309^blindScope = firstPreciserScopeKnowingConditionOutcome ( left, blindScope, condition ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[BugLab_Variable_Misuse]^blindScope = firstPreciserScopeKnowingConditionOutcome ( left, blindScope, rightIsRefineable ) ;^294^295^^^^279^309^blindScope = firstPreciserScopeKnowingConditionOutcome ( left, blindScope, condition ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[BugLab_Argument_Swapping]^blindScope = firstPreciserScopeKnowingConditionOutcome ( blindScope, left, condition ) ;^294^295^^^^279^309^blindScope = firstPreciserScopeKnowingConditionOutcome ( left, blindScope, condition ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[BugLab_Argument_Swapping]^blindScope = firstPreciserScopeKnowingConditionOutcome ( left, condition, blindScope ) ;^294^295^^^^279^309^blindScope = firstPreciserScopeKnowingConditionOutcome ( left, blindScope, condition ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[BugLab_Argument_Swapping]^blindScope = firstPreciserScopeKnowingConditionOutcome ( condition, blindScope, left ) ;^294^295^^^^279^309^blindScope = firstPreciserScopeKnowingConditionOutcome ( left, blindScope, condition ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[BugLab_Variable_Misuse]^leftType =  ( rightType == null )  ? null : leftType.getRestrictedTypeGivenToBooleanOutcome ( condition ) ;^299^300^^^^284^314^leftType =  ( leftType == null )  ? null : leftType.getRestrictedTypeGivenToBooleanOutcome ( condition ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[BugLab_Variable_Misuse]^leftType =  ( leftType == null )  ? null : leftType.getRestrictedTypeGivenToBooleanOutcome ( rightIsRefineable ) ;^299^300^^^^284^314^leftType =  ( leftType == null )  ? null : leftType.getRestrictedTypeGivenToBooleanOutcome ( condition ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[BugLab_Argument_Swapping]^leftType =  ( condition == null )  ? null : leftType.getRestrictedTypeGivenToBooleanOutcome ( leftType ) ;^299^300^^^^284^314^leftType =  ( leftType == null )  ? null : leftType.getRestrictedTypeGivenToBooleanOutcome ( condition ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[BugLab_Wrong_Operator]^leftType =  ( leftType != null )  ? null : leftType.getRestrictedTypeGivenToBooleanOutcome ( condition ) ;^299^300^^^^284^314^leftType =  ( leftType == null )  ? null : leftType.getRestrictedTypeGivenToBooleanOutcome ( condition ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[BugLab_Variable_Misuse]^if  ( rightType == null )  {^301^^^^^286^316^if  ( leftType == null )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[BugLab_Wrong_Operator]^if  ( leftType != null )  {^301^^^^^286^316^if  ( leftType == null )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[BugLab_Variable_Misuse]^return firstPreciserScopeKnowingConditionOutcome ( left, blindScope, condition ) ;^302^303^^^^287^317^return firstPreciserScopeKnowingConditionOutcome ( right, blindScope, condition ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[BugLab_Variable_Misuse]^return firstPreciserScopeKnowingConditionOutcome ( right, informed, condition ) ;^302^303^^^^287^317^return firstPreciserScopeKnowingConditionOutcome ( right, blindScope, condition ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[BugLab_Variable_Misuse]^return firstPreciserScopeKnowingConditionOutcome ( right, blindScope, rightIsRefineable ) ;^302^303^^^^287^317^return firstPreciserScopeKnowingConditionOutcome ( right, blindScope, condition ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[BugLab_Argument_Swapping]^return firstPreciserScopeKnowingConditionOutcome ( blindScope, right, condition ) ;^302^303^^^^287^317^return firstPreciserScopeKnowingConditionOutcome ( right, blindScope, condition ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[BugLab_Argument_Swapping]^return firstPreciserScopeKnowingConditionOutcome ( condition, blindScope, right ) ;^302^303^^^^287^317^return firstPreciserScopeKnowingConditionOutcome ( right, blindScope, condition ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[BugLab_Argument_Swapping]^return firstPreciserScopeKnowingConditionOutcome ( right, condition, blindScope ) ;^302^303^^^^287^317^return firstPreciserScopeKnowingConditionOutcome ( right, blindScope, condition ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[BugLab_Variable_Misuse]^JSType leftType = getTypeIfRefinable ( right, blindScope ) ;^307^^^^^292^322^JSType rightType = getTypeIfRefinable ( right, blindScope ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[BugLab_Variable_Misuse]^JSType rightType = getTypeIfRefinable ( right, informed ) ;^307^^^^^292^322^JSType rightType = getTypeIfRefinable ( right, blindScope ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[BugLab_Argument_Swapping]^JSType blindScopeType = getTypeIfRefinable ( right, right ) ;^307^^^^^292^322^JSType rightType = getTypeIfRefinable ( right, blindScope ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[BugLab_Variable_Misuse]^if  ( leftType != null )  {^309^^^^^294^324^if  ( rightType != null )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[BugLab_Argument_Swapping]^if  ( right != null )  {^309^^^^^294^324^if  ( rightType != null )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[BugLab_Wrong_Operator]^if  ( rightType == null )  {^309^^^^^294^324^if  ( rightType != null )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[BugLab_Wrong_Literal]^rightIsRefineable = true;^312^^^^^309^316^rightIsRefineable = false;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[BugLab_Variable_Misuse]^rightType = left.getJSType (  ) ;^313^^^^^309^316^rightType = right.getJSType (  ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[BugLab_Variable_Misuse]^blindScope = firstPreciserScopeKnowingConditionOutcome ( left, blindScope, condition ) ;^314^315^^^^309^316^blindScope = firstPreciserScopeKnowingConditionOutcome ( right, blindScope, condition ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[BugLab_Variable_Misuse]^blindScope = firstPreciserScopeKnowingConditionOutcome ( right, informed, condition ) ;^314^315^^^^309^316^blindScope = firstPreciserScopeKnowingConditionOutcome ( right, blindScope, condition ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[BugLab_Variable_Misuse]^blindScope = firstPreciserScopeKnowingConditionOutcome ( right, blindScope, rightIsRefineable ) ;^314^315^^^^309^316^blindScope = firstPreciserScopeKnowingConditionOutcome ( right, blindScope, condition ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[BugLab_Argument_Swapping]^blindScope = firstPreciserScopeKnowingConditionOutcome ( blindScope, right, condition ) ;^314^315^^^^309^316^blindScope = firstPreciserScopeKnowingConditionOutcome ( right, blindScope, condition ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[BugLab_Argument_Swapping]^blindScope = firstPreciserScopeKnowingConditionOutcome ( condition, blindScope, right ) ;^314^315^^^^309^316^blindScope = firstPreciserScopeKnowingConditionOutcome ( right, blindScope, condition ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[BugLab_Wrong_Literal]^rightIsRefineable = false;^310^^^^^295^325^rightIsRefineable = true;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[BugLab_Wrong_Literal]^rightIsRefineable = true;^312^^^^^297^327^rightIsRefineable = false;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[BugLab_Variable_Misuse]^rightType = left.getJSType (  ) ;^313^^^^^298^328^rightType = right.getJSType (  ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[BugLab_Variable_Misuse]^blindScope = firstPreciserScopeKnowingConditionOutcome ( right, informed, condition ) ;^314^315^^^^299^329^blindScope = firstPreciserScopeKnowingConditionOutcome ( right, blindScope, condition ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[BugLab_Variable_Misuse]^blindScope = firstPreciserScopeKnowingConditionOutcome ( right, blindScope, rightIsRefineable ) ;^314^315^^^^299^329^blindScope = firstPreciserScopeKnowingConditionOutcome ( right, blindScope, condition ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[BugLab_Argument_Swapping]^blindScope = firstPreciserScopeKnowingConditionOutcome ( blindScope, right, condition ) ;^314^315^^^^299^329^blindScope = firstPreciserScopeKnowingConditionOutcome ( right, blindScope, condition ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[BugLab_Argument_Swapping]^blindScope = firstPreciserScopeKnowingConditionOutcome ( right, condition, blindScope ) ;^314^315^^^^299^329^blindScope = firstPreciserScopeKnowingConditionOutcome ( right, blindScope, condition ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[BugLab_Argument_Swapping]^blindScope = firstPreciserScopeKnowingConditionOutcome ( condition, blindScope, right ) ;^314^315^^^^299^329^blindScope = firstPreciserScopeKnowingConditionOutcome ( right, blindScope, condition ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[BugLab_Variable_Misuse]^blindScope = firstPreciserScopeKnowingConditionOutcome ( left, blindScope, condition ) ;^314^315^^^^299^329^blindScope = firstPreciserScopeKnowingConditionOutcome ( right, blindScope, condition ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[BugLab_Variable_Misuse]^if  ( rightIsRefineable )  {^318^^^^^303^333^if  ( condition )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[BugLab_Variable_Misuse]^if  (  ( rightType != null && leftIsRefineable )  || ( rightType != null && rightIsRefineable )  )  {^323^324^^^^308^338^if  (  ( leftType != null && leftIsRefineable )  || ( rightType != null && rightIsRefineable )  )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[BugLab_Variable_Misuse]^if  (  ( leftType != null && rightIsRefineable )  || ( rightType != null && rightIsRefineable )  )  {^323^324^^^^308^338^if  (  ( leftType != null && leftIsRefineable )  || ( rightType != null && rightIsRefineable )  )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[BugLab_Variable_Misuse]^if  (  ( leftType != null && leftIsRefineable )  || ( leftType != null && rightIsRefineable )  )  {^323^324^^^^308^338^if  (  ( leftType != null && leftIsRefineable )  || ( rightType != null && rightIsRefineable )  )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[BugLab_Variable_Misuse]^if  (  ( leftType != null && leftIsRefineable )  || ( rightType != null && leftIsRefineable )  )  {^323^324^^^^308^338^if  (  ( leftType != null && leftIsRefineable )  || ( rightType != null && rightIsRefineable )  )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[BugLab_Argument_Swapping]^if  (  ( rightType != null && leftIsRefineable )  || ( leftType != null && rightIsRefineable )  )  {^323^324^^^^308^338^if  (  ( leftType != null && leftIsRefineable )  || ( rightType != null && rightIsRefineable )  )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[BugLab_Argument_Swapping]^if  (  ( leftIsRefineable != null && leftType )  || ( rightType != null && rightIsRefineable )  )  {^323^324^^^^308^338^if  (  ( leftType != null && leftIsRefineable )  || ( rightType != null && rightIsRefineable )  )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[BugLab_Argument_Swapping]^if  (  ( rightTypeType != null && leftIsRefineable )  || ( left != null && rightIsRefineable )  )  {^323^324^^^^308^338^if  (  ( leftType != null && leftIsRefineable )  || ( rightType != null && rightIsRefineable )  )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[BugLab_Argument_Swapping]^if  (  ( leftType != null && rightIsRefineable )  || ( rightType != null && leftIsRefineable )  )  {^323^324^^^^308^338^if  (  ( leftType != null && leftIsRefineable )  || ( rightType != null && rightIsRefineable )  )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[BugLab_Wrong_Operator]^if  (  ( leftType != null && leftIsRefineable )  && ( rightType != null && rightIsRefineable )  )  {^323^324^^^^308^338^if  (  ( leftType != null && leftIsRefineable )  || ( rightType != null && rightIsRefineable )  )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[BugLab_Wrong_Operator]^if  (  ( leftType != null || leftIsRefineable )  || ( rightType != null && rightIsRefineable )  )  {^323^324^^^^308^338^if  (  ( leftType != null && leftIsRefineable )  || ( rightType != null && rightIsRefineable )  )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[BugLab_Wrong_Operator]^if  (  ( leftType == null && leftIsRefineable )  || ( rightType != null && rightIsRefineable )  )  {^323^324^^^^308^338^if  (  ( leftType != null && leftIsRefineable )  || ( rightType != null && rightIsRefineable )  )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[BugLab_Wrong_Operator]^if  (  ( leftType != null && leftIsRefineable )  || ( rightType == null && rightIsRefineable )  )  {^323^324^^^^308^338^if  (  ( leftType != null && leftIsRefineable )  || ( rightType != null && rightIsRefineable )  )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[BugLab_Variable_Misuse]^if  ( rightIsRefineable && leftType != null )  {^326^^^^^323^333^if  ( leftIsRefineable && leftType != null )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[BugLab_Variable_Misuse]^if  ( leftIsRefineable && rightType != null )  {^326^^^^^323^333^if  ( leftIsRefineable && leftType != null )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[BugLab_Argument_Swapping]^if  ( leftType && leftIsRefineable != null )  {^326^^^^^323^333^if  ( leftIsRefineable && leftType != null )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[BugLab_Argument_Swapping]^if  ( leftTypeIsRefineable && left != null )  {^326^^^^^323^333^if  ( leftIsRefineable && leftType != null )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[BugLab_Wrong_Operator]^if  ( leftIsRefineable || leftType != null )  {^326^^^^^323^333^if  ( leftIsRefineable && leftType != null )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[BugLab_Wrong_Operator]^if  ( leftIsRefineable && leftType == null )  {^326^^^^^323^333^if  ( leftIsRefineable && leftType != null )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[BugLab_Variable_Misuse]^declareNameInScope ( blindScope, left, leftType ) ;^327^^^^^323^333^declareNameInScope ( informed, left, leftType ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[BugLab_Variable_Misuse]^declareNameInScope ( informed, right, leftType ) ;^327^^^^^323^333^declareNameInScope ( informed, left, leftType ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[BugLab_Variable_Misuse]^declareNameInScope ( informed, left, rightType ) ;^327^^^^^323^333^declareNameInScope ( informed, left, leftType ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[BugLab_Argument_Swapping]^declareNameInScope ( leftType, left, informed ) ;^327^^^^^323^333^declareNameInScope ( informed, left, leftType ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[BugLab_Argument_Swapping]^declareNameInScope ( informed, leftType, left ) ;^327^^^^^323^333^declareNameInScope ( informed, left, leftType ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[BugLab_Variable_Misuse]^if  ( leftIsRefineable && rightType != null )  {^329^^^^^323^333^if  ( rightIsRefineable && rightType != null )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[BugLab_Variable_Misuse]^if  ( rightIsRefineable && leftType != null )  {^329^^^^^323^333^if  ( rightIsRefineable && rightType != null )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[BugLab_Argument_Swapping]^if  ( rightTypeIsRefineable && right != null )  {^329^^^^^323^333^if  ( rightIsRefineable && rightType != null )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[BugLab_Wrong_Operator]^if  ( rightIsRefineable || rightType != null )  {^329^^^^^323^333^if  ( rightIsRefineable && rightType != null )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[BugLab_Wrong_Operator]^if  ( rightIsRefineable && rightType == null )  {^329^^^^^323^333^if  ( rightIsRefineable && rightType != null )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[BugLab_Variable_Misuse]^declareNameInScope ( informed, left, rightType ) ;^330^^^^^323^333^declareNameInScope ( informed, right, rightType ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[BugLab_Variable_Misuse]^declareNameInScope ( informed, right, leftType ) ;^330^^^^^323^333^declareNameInScope ( informed, right, rightType ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[BugLab_Argument_Swapping]^declareNameInScope ( right, informed, rightType ) ;^330^^^^^323^333^declareNameInScope ( informed, right, rightType ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[BugLab_Argument_Swapping]^declareNameInScope ( informed, rightType, right ) ;^330^^^^^323^333^declareNameInScope ( informed, right, rightType ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[BugLab_Argument_Swapping]^declareNameInScope ( rightType, right, informed ) ;^330^^^^^323^333^declareNameInScope ( informed, right, rightType ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[BugLab_Variable_Misuse]^return blindScope;^332^^^^^323^333^return informed;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[BugLab_Variable_Misuse]^FlowScope informed = informed.createChildFlowScope (  ) ;^325^^^^^323^333^FlowScope informed = blindScope.createChildFlowScope (  ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[BugLab_Argument_Swapping]^declareNameInScope ( left, informed, leftType ) ;^327^^^^^323^333^declareNameInScope ( informed, left, leftType ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[BugLab_Variable_Misuse]^declareNameInScope ( blindScope, right, rightType ) ;^330^^^^^323^333^declareNameInScope ( informed, right, rightType ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[BugLab_Variable_Misuse]^if  ( rightIsRefineable && leftType != null )  {^326^^^^^311^341^if  ( leftIsRefineable && leftType != null )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[BugLab_Variable_Misuse]^if  ( leftIsRefineable && rightType != null )  {^326^^^^^311^341^if  ( leftIsRefineable && leftType != null )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[BugLab_Argument_Swapping]^if  ( leftType && leftIsRefineable != null )  {^326^^^^^311^341^if  ( leftIsRefineable && leftType != null )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[BugLab_Argument_Swapping]^if  ( leftIsRefineableIsRefineable && leftType != null )  {^326^^^^^311^341^if  ( leftIsRefineable && leftType != null )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[BugLab_Wrong_Operator]^if  ( leftIsRefineable || leftType != null )  {^326^^^^^311^341^if  ( leftIsRefineable && leftType != null )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[BugLab_Wrong_Operator]^if  ( leftIsRefineable && leftType == null )  {^326^^^^^311^341^if  ( leftIsRefineable && leftType != null )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[BugLab_Variable_Misuse]^declareNameInScope ( blindScope, left, leftType ) ;^327^^^^^312^342^declareNameInScope ( informed, left, leftType ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[BugLab_Variable_Misuse]^declareNameInScope ( informed, right, leftType ) ;^327^^^^^312^342^declareNameInScope ( informed, left, leftType ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[BugLab_Variable_Misuse]^declareNameInScope ( informed, left, rightType ) ;^327^^^^^312^342^declareNameInScope ( informed, left, leftType ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[BugLab_Argument_Swapping]^declareNameInScope ( left, informed, leftType ) ;^327^^^^^312^342^declareNameInScope ( informed, left, leftType ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[BugLab_Argument_Swapping]^declareNameInScope ( informed, leftType, left ) ;^327^^^^^312^342^declareNameInScope ( informed, left, leftType ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[BugLab_Variable_Misuse]^if  ( rightIsRefineable && leftType != null )  {^329^^^^^314^344^if  ( rightIsRefineable && rightType != null )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[BugLab_Argument_Swapping]^if  ( rightTypeIsRefineable && right != null )  {^329^^^^^314^344^if  ( rightIsRefineable && rightType != null )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[BugLab_Wrong_Operator]^if  ( rightIsRefineable || rightType != null )  {^329^^^^^314^344^if  ( rightIsRefineable && rightType != null )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[BugLab_Wrong_Operator]^if  ( rightIsRefineable && rightType == null )  {^329^^^^^314^344^if  ( rightIsRefineable && rightType != null )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[BugLab_Variable_Misuse]^declareNameInScope ( blindScope, right, rightType ) ;^330^^^^^315^345^declareNameInScope ( informed, right, rightType ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[BugLab_Variable_Misuse]^declareNameInScope ( informed, left, rightType ) ;^330^^^^^315^345^declareNameInScope ( informed, right, rightType ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[BugLab_Variable_Misuse]^declareNameInScope ( informed, right, leftType ) ;^330^^^^^315^345^declareNameInScope ( informed, right, rightType ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[BugLab_Argument_Swapping]^declareNameInScope ( rightType, right, informed ) ;^330^^^^^315^345^declareNameInScope ( informed, right, rightType ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[BugLab_Argument_Swapping]^declareNameInScope ( informed, rightType, right ) ;^330^^^^^315^345^declareNameInScope ( informed, right, rightType ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[BugLab_Variable_Misuse]^rightType =  ( rightType == null )  ? null : rightType.getRestrictedTypeGivenToBooleanOutcome ( rightIsRefineable ) ;^319^320^^^^304^334^rightType =  ( rightType == null )  ? null : rightType.getRestrictedTypeGivenToBooleanOutcome ( condition ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[BugLab_Argument_Swapping]^rightType =  ( condition == null )  ? null : rightType.getRestrictedTypeGivenToBooleanOutcome ( rightType ) ;^319^320^^^^304^334^rightType =  ( rightType == null )  ? null : rightType.getRestrictedTypeGivenToBooleanOutcome ( condition ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[BugLab_Wrong_Operator]^rightType =  ( rightType != null )  ? null : rightType.getRestrictedTypeGivenToBooleanOutcome ( condition ) ;^319^320^^^^304^334^rightType =  ( rightType == null )  ? null : rightType.getRestrictedTypeGivenToBooleanOutcome ( condition ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[BugLab_Variable_Misuse]^rightType.getRestrictedTypeGivenToBooleanOutcome ( rightIsRefineable ) ;^320^^^^^305^335^rightType.getRestrictedTypeGivenToBooleanOutcome ( condition ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[BugLab_Variable_Misuse]^FlowScope informed = informed.createChildFlowScope (  ) ;^325^^^^^310^340^FlowScope informed = blindScope.createChildFlowScope (  ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[BugLab_Argument_Swapping]^declareNameInScope ( leftType, left, informed ) ;^327^^^^^312^342^declareNameInScope ( informed, left, leftType ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[BugLab_Argument_Swapping]^declareNameInScope ( right, informed, rightType ) ;^330^^^^^315^345^declareNameInScope ( informed, right, rightType ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[BugLab_Argument_Swapping]^if  (  ( leftType != null && rightType )  || ( leftIsRefineable != null && rightIsRefineable )  )  {^323^324^^^^308^338^if  (  ( leftType != null && leftIsRefineable )  || ( rightType != null && rightIsRefineable )  )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[BugLab_Argument_Swapping]^if  ( right && rightIsRefineableType != null )  {^329^^^^^323^333^if  ( rightIsRefineable && rightType != null )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[BugLab_Argument_Swapping]^if  ( leftTypeIsRefineable && left != null )  {^326^^^^^311^341^if  ( leftIsRefineable && leftType != null )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[BugLab_Variable_Misuse]^if  ( leftIsRefineable && rightType != null )  {^329^^^^^314^344^if  ( rightIsRefineable && rightType != null )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[BugLab_Argument_Swapping]^if  ( right && rightIsRefineableType != null )  {^329^^^^^314^344^if  ( rightIsRefineable && rightType != null )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[BugLab_Variable_Misuse]^rightType =  ( leftType == null )  ? null : rightType.getRestrictedTypeGivenToBooleanOutcome ( condition ) ;^319^320^^^^304^334^rightType =  ( rightType == null )  ? null : rightType.getRestrictedTypeGivenToBooleanOutcome ( condition ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[BugLab_Variable_Misuse]^return blindScope;^332^^^^^317^347^return informed;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[BugLab_Variable_Misuse]^return informed;^335^^^^^320^350^return blindScope;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[BugLab_Variable_Misuse]^FlowScope rightScope = firstPreciserScopeKnowingConditionOutcome ( left, blindScope, !condition ) ;^340^341^^^^338^358^FlowScope leftScope = firstPreciserScopeKnowingConditionOutcome ( left, blindScope, !condition ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrMaybeShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  StaticSlot  leftVar  rightVar  boolean  condition  JSType  type  Node  left  right  FlowScope  blindScope  informed  leftScope  rightScope  
[BugLab_Variable_Misuse]^FlowScope leftScope = firstPreciserScopeKnowingConditionOutcome ( left, rightScope, !condition ) ;^340^341^^^^338^358^FlowScope leftScope = firstPreciserScopeKnowingConditionOutcome ( left, blindScope, !condition ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrMaybeShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  StaticSlot  leftVar  rightVar  boolean  condition  JSType  type  Node  left  right  FlowScope  blindScope  informed  leftScope  rightScope  
[BugLab_Argument_Swapping]^FlowScope blindScopeScope = firstPreciserScopeKnowingConditionOutcome ( left, left, !condition ) ;^340^341^^^^338^358^FlowScope leftScope = firstPreciserScopeKnowingConditionOutcome ( left, blindScope, !condition ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrMaybeShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  StaticSlot  leftVar  rightVar  boolean  condition  JSType  type  Node  left  right  FlowScope  blindScope  informed  leftScope  rightScope  
[BugLab_Variable_Misuse]^StaticSlot<JSType> leftVar = rightScope.findUniqueRefinedSlot ( blindScope ) ;^342^^^^^338^358^StaticSlot<JSType> leftVar = leftScope.findUniqueRefinedSlot ( blindScope ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrMaybeShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  StaticSlot  leftVar  rightVar  boolean  condition  JSType  type  Node  left  right  FlowScope  blindScope  informed  leftScope  rightScope  
[BugLab_Variable_Misuse]^StaticSlot<JSType> leftVar = leftScope.findUniqueRefinedSlot ( rightScope ) ;^342^^^^^338^358^StaticSlot<JSType> leftVar = leftScope.findUniqueRefinedSlot ( blindScope ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrMaybeShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  StaticSlot  leftVar  rightVar  boolean  condition  JSType  type  Node  left  right  FlowScope  blindScope  informed  leftScope  rightScope  
[BugLab_Argument_Swapping]^StaticSlot<JSType> leftVar = blindScope.findUniqueRefinedSlot ( leftScope ) ;^342^^^^^338^358^StaticSlot<JSType> leftVar = leftScope.findUniqueRefinedSlot ( blindScope ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrMaybeShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  StaticSlot  leftVar  rightVar  boolean  condition  JSType  type  Node  left  right  FlowScope  blindScope  informed  leftScope  rightScope  
[BugLab_Variable_Misuse]^if  ( 0 == null )  {^343^^^^^338^358^if  ( leftVar == null )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrMaybeShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  StaticSlot  leftVar  rightVar  boolean  condition  JSType  type  Node  left  right  FlowScope  blindScope  informed  leftScope  rightScope  
[BugLab_Wrong_Operator]^if  ( leftVar != null )  {^343^^^^^338^358^if  ( leftVar == null )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrMaybeShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  StaticSlot  leftVar  rightVar  boolean  condition  JSType  type  Node  left  right  FlowScope  blindScope  informed  leftScope  rightScope  
[BugLab_Variable_Misuse]^return rightScope;^344^^^^^338^358^return blindScope;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrMaybeShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  StaticSlot  leftVar  rightVar  boolean  condition  JSType  type  Node  left  right  FlowScope  blindScope  informed  leftScope  rightScope  
[BugLab_Variable_Misuse]^FlowScope rightScope = firstPreciserScopeKnowingConditionOutcome ( right, blindScope, condition ) ;^346^347^^^^338^358^FlowScope rightScope = firstPreciserScopeKnowingConditionOutcome ( left, blindScope, condition ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrMaybeShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  StaticSlot  leftVar  rightVar  boolean  condition  JSType  type  Node  left  right  FlowScope  blindScope  informed  leftScope  rightScope  
[BugLab_Variable_Misuse]^FlowScope rightScope = firstPreciserScopeKnowingConditionOutcome ( left, leftScope, condition ) ;^346^347^^^^338^358^FlowScope rightScope = firstPreciserScopeKnowingConditionOutcome ( left, blindScope, condition ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrMaybeShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  StaticSlot  leftVar  rightVar  boolean  condition  JSType  type  Node  left  right  FlowScope  blindScope  informed  leftScope  rightScope  
[BugLab_Argument_Swapping]^FlowScope rightScope = firstPreciserScopeKnowingConditionOutcome ( blindScope, left, condition ) ;^346^347^^^^338^358^FlowScope rightScope = firstPreciserScopeKnowingConditionOutcome ( left, blindScope, condition ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrMaybeShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  StaticSlot  leftVar  rightVar  boolean  condition  JSType  type  Node  left  right  FlowScope  blindScope  informed  leftScope  rightScope  
[BugLab_Argument_Swapping]^FlowScope rightScope = firstPreciserScopeKnowingConditionOutcome ( condition, blindScope, left ) ;^346^347^^^^338^358^FlowScope rightScope = firstPreciserScopeKnowingConditionOutcome ( left, blindScope, condition ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrMaybeShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  StaticSlot  leftVar  rightVar  boolean  condition  JSType  type  Node  left  right  FlowScope  blindScope  informed  leftScope  rightScope  
[BugLab_Variable_Misuse]^FlowScope rightScope = firstPreciserScopeKnowingConditionOutcome ( left, rightScope, condition ) ;^346^347^^^^338^358^FlowScope rightScope = firstPreciserScopeKnowingConditionOutcome ( left, blindScope, condition ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrMaybeShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  StaticSlot  leftVar  rightVar  boolean  condition  JSType  type  Node  left  right  FlowScope  blindScope  informed  leftScope  rightScope  
[BugLab_Argument_Swapping]^FlowScope rightScope = firstPreciserScopeKnowingConditionOutcome ( left, condition, blindScope ) ;^346^347^^^^338^358^FlowScope rightScope = firstPreciserScopeKnowingConditionOutcome ( left, blindScope, condition ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrMaybeShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  StaticSlot  leftVar  rightVar  boolean  condition  JSType  type  Node  left  right  FlowScope  blindScope  informed  leftScope  rightScope  
[BugLab_Variable_Misuse]^rightScope = firstPreciserScopeKnowingConditionOutcome ( left, rightScope, !condition ) ;^348^349^^^^338^358^rightScope = firstPreciserScopeKnowingConditionOutcome ( right, rightScope, !condition ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrMaybeShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  StaticSlot  leftVar  rightVar  boolean  condition  JSType  type  Node  left  right  FlowScope  blindScope  informed  leftScope  rightScope  
[BugLab_Variable_Misuse]^rightScope = firstPreciserScopeKnowingConditionOutcome ( right, leftScope, !condition ) ;^348^349^^^^338^358^rightScope = firstPreciserScopeKnowingConditionOutcome ( right, rightScope, !condition ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrMaybeShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  StaticSlot  leftVar  rightVar  boolean  condition  JSType  type  Node  left  right  FlowScope  blindScope  informed  leftScope  rightScope  
[BugLab_Argument_Swapping]^rightScope = firstPreciserScopeKnowingConditionOutcome ( rightScope, right, !condition ) ;^348^349^^^^338^358^rightScope = firstPreciserScopeKnowingConditionOutcome ( right, rightScope, !condition ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrMaybeShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  StaticSlot  leftVar  rightVar  boolean  condition  JSType  type  Node  left  right  FlowScope  blindScope  informed  leftScope  rightScope  
[BugLab_Variable_Misuse]^StaticSlot<JSType> rightVar = leftScope.findUniqueRefinedSlot ( blindScope ) ;^350^^^^^338^358^StaticSlot<JSType> rightVar = rightScope.findUniqueRefinedSlot ( blindScope ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrMaybeShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  StaticSlot  leftVar  rightVar  boolean  condition  JSType  type  Node  left  right  FlowScope  blindScope  informed  leftScope  rightScope  
[BugLab_Variable_Misuse]^StaticSlot<JSType> rightVar = rightScope.findUniqueRefinedSlot ( rightScope ) ;^350^^^^^338^358^StaticSlot<JSType> rightVar = rightScope.findUniqueRefinedSlot ( blindScope ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrMaybeShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  StaticSlot  leftVar  rightVar  boolean  condition  JSType  type  Node  left  right  FlowScope  blindScope  informed  leftScope  rightScope  
[BugLab_Argument_Swapping]^StaticSlot<JSType> rightVar = blindScope.findUniqueRefinedSlot ( rightScope ) ;^350^^^^^338^358^StaticSlot<JSType> rightVar = rightScope.findUniqueRefinedSlot ( blindScope ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrMaybeShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  StaticSlot  leftVar  rightVar  boolean  condition  JSType  type  Node  left  right  FlowScope  blindScope  informed  leftScope  rightScope  
[BugLab_Variable_Misuse]^StaticSlot<JSType> rightVar = rightScope.findUniqueRefinedSlot ( leftScope ) ;^350^^^^^338^358^StaticSlot<JSType> rightVar = rightScope.findUniqueRefinedSlot ( blindScope ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrMaybeShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  StaticSlot  leftVar  rightVar  boolean  condition  JSType  type  Node  left  right  FlowScope  blindScope  informed  leftScope  rightScope  
[BugLab_Wrong_Operator]^if  ( rightVar == null && !leftVar.getName (  ) .equals ( rightVar.getName (  )  )  )  {^351^^^^^338^358^if  ( rightVar == null || !leftVar.getName (  ) .equals ( rightVar.getName (  )  )  )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrMaybeShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  StaticSlot  leftVar  rightVar  boolean  condition  JSType  type  Node  left  right  FlowScope  blindScope  informed  leftScope  rightScope  
[BugLab_Wrong_Operator]^if  ( rightVar != null || !leftVar.getName (  ) .equals ( rightVar.getName (  )  )  )  {^351^^^^^338^358^if  ( rightVar == null || !leftVar.getName (  ) .equals ( rightVar.getName (  )  )  )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrMaybeShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  StaticSlot  leftVar  rightVar  boolean  condition  JSType  type  Node  left  right  FlowScope  blindScope  informed  leftScope  rightScope  
[BugLab_Variable_Misuse]^return rightScope;^352^^^^^338^358^return blindScope;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrMaybeShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  StaticSlot  leftVar  rightVar  boolean  condition  JSType  type  Node  left  right  FlowScope  blindScope  informed  leftScope  rightScope  
[BugLab_Argument_Swapping]^JSType type = rightVar.getType (  ) .getLeastSupertype ( leftVar.getType (  )  ) ;^354^^^^^338^358^JSType type = leftVar.getType (  ) .getLeastSupertype ( rightVar.getType (  )  ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrMaybeShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  StaticSlot  leftVar  rightVar  boolean  condition  JSType  type  Node  left  right  FlowScope  blindScope  informed  leftScope  rightScope  
[BugLab_Variable_Misuse]^FlowScope informed = rightScope.createChildFlowScope (  ) ;^355^^^^^338^358^FlowScope informed = blindScope.createChildFlowScope (  ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrMaybeShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  StaticSlot  leftVar  rightVar  boolean  condition  JSType  type  Node  left  right  FlowScope  blindScope  informed  leftScope  rightScope  
[BugLab_Argument_Swapping]^informed.inferSlotType ( type.getName (  ) , leftVar ) ;^356^^^^^338^358^informed.inferSlotType ( leftVar.getName (  ) , type ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrMaybeShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  StaticSlot  leftVar  rightVar  boolean  condition  JSType  type  Node  left  right  FlowScope  blindScope  informed  leftScope  rightScope  
[BugLab_Variable_Misuse]^return rightScope;^357^^^^^338^358^return informed;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrMaybeShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  StaticSlot  leftVar  rightVar  boolean  condition  JSType  type  Node  left  right  FlowScope  blindScope  informed  leftScope  rightScope  
[BugLab_Variable_Misuse]^JSType type = getTypeIfRefinable ( name, informed ) ;^362^^^^^360^371^JSType type = getTypeIfRefinable ( name, blindScope ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseNameOrGetProp [RETURN_TYPE] FlowScope   Node name FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  outcome  JSType  restrictedType  type  Node  name  FlowScope  blindScope  informed  
[BugLab_Argument_Swapping]^JSType type = getTypeIfRefinable ( blindScope, name ) ;^362^^^^^360^371^JSType type = getTypeIfRefinable ( name, blindScope ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseNameOrGetProp [RETURN_TYPE] FlowScope   Node name FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  outcome  JSType  restrictedType  type  Node  name  FlowScope  blindScope  informed  
[BugLab_Wrong_Operator]^if  ( type == null )  {^363^^^^^360^371^if  ( type != null )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseNameOrGetProp [RETURN_TYPE] FlowScope   Node name FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  outcome  JSType  restrictedType  type  Node  name  FlowScope  blindScope  informed  
[BugLab_Variable_Misuse]^return blindScope;^368^^^^^360^371^return informed;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseNameOrGetProp [RETURN_TYPE] FlowScope   Node name FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  outcome  JSType  restrictedType  type  Node  name  FlowScope  blindScope  informed  
[BugLab_Argument_Swapping]^JSType restrictedType = outcome.getRestrictedTypeGivenToBooleanOutcome ( type ) ;^364^365^^^^360^371^JSType restrictedType = type.getRestrictedTypeGivenToBooleanOutcome ( outcome ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseNameOrGetProp [RETURN_TYPE] FlowScope   Node name FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  outcome  JSType  restrictedType  type  Node  name  FlowScope  blindScope  informed  
[BugLab_Variable_Misuse]^FlowScope informed = informed.createChildFlowScope (  ) ;^366^^^^^360^371^FlowScope informed = blindScope.createChildFlowScope (  ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseNameOrGetProp [RETURN_TYPE] FlowScope   Node name FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  outcome  JSType  restrictedType  type  Node  name  FlowScope  blindScope  informed  
[BugLab_Variable_Misuse]^declareNameInScope ( blindScope, name, restrictedType ) ;^367^^^^^360^371^declareNameInScope ( informed, name, restrictedType ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseNameOrGetProp [RETURN_TYPE] FlowScope   Node name FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  outcome  JSType  restrictedType  type  Node  name  FlowScope  blindScope  informed  
[BugLab_Variable_Misuse]^declareNameInScope ( informed, name, type ) ;^367^^^^^360^371^declareNameInScope ( informed, name, restrictedType ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseNameOrGetProp [RETURN_TYPE] FlowScope   Node name FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  outcome  JSType  restrictedType  type  Node  name  FlowScope  blindScope  informed  
[BugLab_Argument_Swapping]^declareNameInScope ( name, informed, restrictedType ) ;^367^^^^^360^371^declareNameInScope ( informed, name, restrictedType ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseNameOrGetProp [RETURN_TYPE] FlowScope   Node name FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  outcome  JSType  restrictedType  type  Node  name  FlowScope  blindScope  informed  
[BugLab_Argument_Swapping]^declareNameInScope ( informed, restrictedType, name ) ;^367^^^^^360^371^declareNameInScope ( informed, name, restrictedType ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseNameOrGetProp [RETURN_TYPE] FlowScope   Node name FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  outcome  JSType  restrictedType  type  Node  name  FlowScope  blindScope  informed  
[BugLab_Argument_Swapping]^declareNameInScope ( restrictedType, name, informed ) ;^367^^^^^360^371^declareNameInScope ( informed, name, restrictedType ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseNameOrGetProp [RETURN_TYPE] FlowScope   Node name FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  outcome  JSType  restrictedType  type  Node  name  FlowScope  blindScope  informed  
[BugLab_Variable_Misuse]^return informed;^370^^^^^360^371^return blindScope;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseNameOrGetProp [RETURN_TYPE] FlowScope   Node name FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  outcome  JSType  restrictedType  type  Node  name  FlowScope  blindScope  informed  
[BugLab_Argument_Swapping]^JSType restrictedType = getRestrictedByTypeOfResult ( value, type, resultEqualsValue ) ;^375^376^^^^373^383^JSType restrictedType = getRestrictedByTypeOfResult ( type, value, resultEqualsValue ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseTypeOf [RETURN_TYPE] FlowScope   Node node JSType type String value boolean resultEqualsValue FlowScope blindScope [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  JSType  restrictedType  type  boolean  resultEqualsValue  Node  node  String  value  FlowScope  blindScope  informed  
[BugLab_Argument_Swapping]^JSType restrictedType = getRestrictedByTypeOfResult ( resultEqualsValue, value, type ) ;^375^376^^^^373^383^JSType restrictedType = getRestrictedByTypeOfResult ( type, value, resultEqualsValue ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseTypeOf [RETURN_TYPE] FlowScope   Node node JSType type String value boolean resultEqualsValue FlowScope blindScope [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  JSType  restrictedType  type  boolean  resultEqualsValue  Node  node  String  value  FlowScope  blindScope  informed  
[BugLab_Variable_Misuse]^getRestrictedByTypeOfResult ( restrictedType, value, resultEqualsValue ) ;^376^^^^^373^383^getRestrictedByTypeOfResult ( type, value, resultEqualsValue ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseTypeOf [RETURN_TYPE] FlowScope   Node node JSType type String value boolean resultEqualsValue FlowScope blindScope [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  JSType  restrictedType  type  boolean  resultEqualsValue  Node  node  String  value  FlowScope  blindScope  informed  
[BugLab_Argument_Swapping]^getRestrictedByTypeOfResult ( value, type, resultEqualsValue ) ;^376^^^^^373^383^getRestrictedByTypeOfResult ( type, value, resultEqualsValue ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseTypeOf [RETURN_TYPE] FlowScope   Node node JSType type String value boolean resultEqualsValue FlowScope blindScope [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  JSType  restrictedType  type  boolean  resultEqualsValue  Node  node  String  value  FlowScope  blindScope  informed  
[BugLab_Argument_Swapping]^getRestrictedByTypeOfResult ( resultEqualsValue, value, type ) ;^376^^^^^373^383^getRestrictedByTypeOfResult ( type, value, resultEqualsValue ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseTypeOf [RETURN_TYPE] FlowScope   Node node JSType type String value boolean resultEqualsValue FlowScope blindScope [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  JSType  restrictedType  type  boolean  resultEqualsValue  Node  node  String  value  FlowScope  blindScope  informed  
[BugLab_Variable_Misuse]^if  ( type == null )  {^377^^^^^373^383^if  ( restrictedType == null )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseTypeOf [RETURN_TYPE] FlowScope   Node node JSType type String value boolean resultEqualsValue FlowScope blindScope [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  JSType  restrictedType  type  boolean  resultEqualsValue  Node  node  String  value  FlowScope  blindScope  informed  
[BugLab_Wrong_Operator]^if  ( restrictedType != null )  {^377^^^^^373^383^if  ( restrictedType == null )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseTypeOf [RETURN_TYPE] FlowScope   Node node JSType type String value boolean resultEqualsValue FlowScope blindScope [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  JSType  restrictedType  type  boolean  resultEqualsValue  Node  node  String  value  FlowScope  blindScope  informed  
[BugLab_Variable_Misuse]^return informed;^378^^^^^373^383^return blindScope;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseTypeOf [RETURN_TYPE] FlowScope   Node node JSType type String value boolean resultEqualsValue FlowScope blindScope [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  JSType  restrictedType  type  boolean  resultEqualsValue  Node  node  String  value  FlowScope  blindScope  informed  
[BugLab_Variable_Misuse]^FlowScope informed = informed.createChildFlowScope (  ) ;^380^^^^^373^383^FlowScope informed = blindScope.createChildFlowScope (  ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseTypeOf [RETURN_TYPE] FlowScope   Node node JSType type String value boolean resultEqualsValue FlowScope blindScope [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  JSType  restrictedType  type  boolean  resultEqualsValue  Node  node  String  value  FlowScope  blindScope  informed  
[BugLab_Variable_Misuse]^declareNameInScope ( blindScope, node, restrictedType ) ;^381^^^^^373^383^declareNameInScope ( informed, node, restrictedType ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseTypeOf [RETURN_TYPE] FlowScope   Node node JSType type String value boolean resultEqualsValue FlowScope blindScope [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  JSType  restrictedType  type  boolean  resultEqualsValue  Node  node  String  value  FlowScope  blindScope  informed  
[BugLab_Argument_Swapping]^declareNameInScope ( node, informed, restrictedType ) ;^381^^^^^373^383^declareNameInScope ( informed, node, restrictedType ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseTypeOf [RETURN_TYPE] FlowScope   Node node JSType type String value boolean resultEqualsValue FlowScope blindScope [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  JSType  restrictedType  type  boolean  resultEqualsValue  Node  node  String  value  FlowScope  blindScope  informed  
[BugLab_Argument_Swapping]^declareNameInScope ( informed, restrictedType, node ) ;^381^^^^^373^383^declareNameInScope ( informed, node, restrictedType ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseTypeOf [RETURN_TYPE] FlowScope   Node node JSType type String value boolean resultEqualsValue FlowScope blindScope [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  JSType  restrictedType  type  boolean  resultEqualsValue  Node  node  String  value  FlowScope  blindScope  informed  
[BugLab_Variable_Misuse]^return blindScope;^382^^^^^373^383^return informed;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseTypeOf [RETURN_TYPE] FlowScope   Node node JSType type String value boolean resultEqualsValue FlowScope blindScope [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  JSType  restrictedType  type  boolean  resultEqualsValue  Node  node  String  value  FlowScope  blindScope  informed  
[BugLab_Variable_Misuse]^JSType rightType = getTypeIfRefinable ( left, blindScope ) ;^387^^^^^385^410^JSType leftType = getTypeIfRefinable ( left, blindScope ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseInstanceOf [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  targetType  boolean  outcome  JSType  leftType  restrictedLeftType  rightType  Visitor  visitor  Node  left  right  FlowScope  blindScope  informed  
[BugLab_Variable_Misuse]^JSType leftType = getTypeIfRefinable ( left, informed ) ;^387^^^^^385^410^JSType leftType = getTypeIfRefinable ( left, blindScope ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseInstanceOf [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  targetType  boolean  outcome  JSType  leftType  restrictedLeftType  rightType  Visitor  visitor  Node  left  right  FlowScope  blindScope  informed  
[BugLab_Argument_Swapping]^JSType blindScopeType = getTypeIfRefinable ( left, left ) ;^387^^^^^385^410^JSType leftType = getTypeIfRefinable ( left, blindScope ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseInstanceOf [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  targetType  boolean  outcome  JSType  leftType  restrictedLeftType  rightType  Visitor  visitor  Node  left  right  FlowScope  blindScope  informed  
[BugLab_Variable_Misuse]^if  ( rightType == null )  {^388^^^^^385^410^if  ( leftType == null )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseInstanceOf [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  targetType  boolean  outcome  JSType  leftType  restrictedLeftType  rightType  Visitor  visitor  Node  left  right  FlowScope  blindScope  informed  
[BugLab_Wrong_Operator]^if  ( leftType != null )  {^388^^^^^385^410^if  ( leftType == null )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseInstanceOf [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  targetType  boolean  outcome  JSType  leftType  restrictedLeftType  rightType  Visitor  visitor  Node  left  right  FlowScope  blindScope  informed  
[BugLab_Variable_Misuse]^return informed;^389^^^^^385^410^return blindScope;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseInstanceOf [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  targetType  boolean  outcome  JSType  leftType  restrictedLeftType  rightType  Visitor  visitor  Node  left  right  FlowScope  blindScope  informed  
[BugLab_Variable_Misuse]^JSType leftType = right.getJSType (  ) ;^391^^^^^385^410^JSType rightType = right.getJSType (  ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseInstanceOf [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  targetType  boolean  outcome  JSType  leftType  restrictedLeftType  rightType  Visitor  visitor  Node  left  right  FlowScope  blindScope  informed  
[BugLab_Variable_Misuse]^if  ( restrictedLeftType instanceof FunctionType )  {^394^^^^^385^410^if  ( rightType instanceof FunctionType )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseInstanceOf [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  targetType  boolean  outcome  JSType  leftType  restrictedLeftType  rightType  Visitor  visitor  Node  left  right  FlowScope  blindScope  informed  
[BugLab_Wrong_Operator]^if  ( rightType  ==  FunctionType )  {^394^^^^^385^410^if  ( rightType instanceof FunctionType )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseInstanceOf [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  targetType  boolean  outcome  JSType  leftType  restrictedLeftType  rightType  Visitor  visitor  Node  left  right  FlowScope  blindScope  informed  
[BugLab_Variable_Misuse]^visitor = new RestrictByFalseInstanceOfResultVisitor ( target ) ;^401^^^^^385^410^visitor = new RestrictByFalseInstanceOfResultVisitor ( targetType ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseInstanceOf [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  targetType  boolean  outcome  JSType  leftType  restrictedLeftType  rightType  Visitor  visitor  Node  left  right  FlowScope  blindScope  informed  
[BugLab_Variable_Misuse]^visitor = new RestrictByTrueInstanceOfResultVisitor ( target ) ;^399^^^^^385^410^visitor = new RestrictByTrueInstanceOfResultVisitor ( targetType ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseInstanceOf [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  targetType  boolean  outcome  JSType  leftType  restrictedLeftType  rightType  Visitor  visitor  Node  left  right  FlowScope  blindScope  informed  
[BugLab_Variable_Misuse]^JSType restrictedLeftType = rightType.visit ( visitor ) ;^403^^^^^385^410^JSType restrictedLeftType = leftType.visit ( visitor ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseInstanceOf [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  targetType  boolean  outcome  JSType  leftType  restrictedLeftType  rightType  Visitor  visitor  Node  left  right  FlowScope  blindScope  informed  
[BugLab_Argument_Swapping]^JSType restrictedLeftType = visitor.visit ( leftType ) ;^403^^^^^385^410^JSType restrictedLeftType = leftType.visit ( visitor ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseInstanceOf [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  targetType  boolean  outcome  JSType  leftType  restrictedLeftType  rightType  Visitor  visitor  Node  left  right  FlowScope  blindScope  informed  
[BugLab_Variable_Misuse]^if  ( rightType != null && !restrictedLeftType.equals ( leftType )  )  {^404^^^^^385^410^if  ( restrictedLeftType != null && !restrictedLeftType.equals ( leftType )  )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseInstanceOf [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  targetType  boolean  outcome  JSType  leftType  restrictedLeftType  rightType  Visitor  visitor  Node  left  right  FlowScope  blindScope  informed  
[BugLab_Variable_Misuse]^if  ( restrictedLeftType != null && !restrictedLeftType.equals ( rightType )  )  {^404^^^^^385^410^if  ( restrictedLeftType != null && !restrictedLeftType.equals ( leftType )  )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseInstanceOf [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  targetType  boolean  outcome  JSType  leftType  restrictedLeftType  rightType  Visitor  visitor  Node  left  right  FlowScope  blindScope  informed  
[BugLab_Argument_Swapping]^if  ( leftType != null && !restrictedLeftType.equals ( restrictedLeftType )  )  {^404^^^^^385^410^if  ( restrictedLeftType != null && !restrictedLeftType.equals ( leftType )  )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseInstanceOf [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  targetType  boolean  outcome  JSType  leftType  restrictedLeftType  rightType  Visitor  visitor  Node  left  right  FlowScope  blindScope  informed  
[BugLab_Argument_Swapping]^if  ( left != null && !restrictedLeftType.equals ( restrictedLeftTypeType )  )  {^404^^^^^385^410^if  ( restrictedLeftType != null && !restrictedLeftType.equals ( leftType )  )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseInstanceOf [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  targetType  boolean  outcome  JSType  leftType  restrictedLeftType  rightType  Visitor  visitor  Node  left  right  FlowScope  blindScope  informed  
[BugLab_Wrong_Operator]^if  ( restrictedLeftType != null || !restrictedLeftType.equals ( leftType )  )  {^404^^^^^385^410^if  ( restrictedLeftType != null && !restrictedLeftType.equals ( leftType )  )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseInstanceOf [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  targetType  boolean  outcome  JSType  leftType  restrictedLeftType  rightType  Visitor  visitor  Node  left  right  FlowScope  blindScope  informed  
[BugLab_Wrong_Operator]^if  ( restrictedLeftType == null && !restrictedLeftType.equals ( leftType )  )  {^404^^^^^385^410^if  ( restrictedLeftType != null && !restrictedLeftType.equals ( leftType )  )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseInstanceOf [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  targetType  boolean  outcome  JSType  leftType  restrictedLeftType  rightType  Visitor  visitor  Node  left  right  FlowScope  blindScope  informed  
[BugLab_Variable_Misuse]^return blindScope;^407^^^^^385^410^return informed;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseInstanceOf [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  targetType  boolean  outcome  JSType  leftType  restrictedLeftType  rightType  Visitor  visitor  Node  left  right  FlowScope  blindScope  informed  
[BugLab_Variable_Misuse]^FlowScope informed = informed.createChildFlowScope (  ) ;^405^^^^^385^410^FlowScope informed = blindScope.createChildFlowScope (  ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseInstanceOf [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  targetType  boolean  outcome  JSType  leftType  restrictedLeftType  rightType  Visitor  visitor  Node  left  right  FlowScope  blindScope  informed  
[BugLab_Variable_Misuse]^declareNameInScope ( blindScope, left, restrictedLeftType ) ;^406^^^^^385^410^declareNameInScope ( informed, left, restrictedLeftType ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseInstanceOf [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  targetType  boolean  outcome  JSType  leftType  restrictedLeftType  rightType  Visitor  visitor  Node  left  right  FlowScope  blindScope  informed  
[BugLab_Variable_Misuse]^declareNameInScope ( informed, right, restrictedLeftType ) ;^406^^^^^385^410^declareNameInScope ( informed, left, restrictedLeftType ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseInstanceOf [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  targetType  boolean  outcome  JSType  leftType  restrictedLeftType  rightType  Visitor  visitor  Node  left  right  FlowScope  blindScope  informed  
[BugLab_Variable_Misuse]^declareNameInScope ( informed, left, rightType ) ;^406^^^^^385^410^declareNameInScope ( informed, left, restrictedLeftType ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseInstanceOf [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  targetType  boolean  outcome  JSType  leftType  restrictedLeftType  rightType  Visitor  visitor  Node  left  right  FlowScope  blindScope  informed  
[BugLab_Argument_Swapping]^declareNameInScope ( left, informed, restrictedLeftType ) ;^406^^^^^385^410^declareNameInScope ( informed, left, restrictedLeftType ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseInstanceOf [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  targetType  boolean  outcome  JSType  leftType  restrictedLeftType  rightType  Visitor  visitor  Node  left  right  FlowScope  blindScope  informed  
[BugLab_Argument_Swapping]^declareNameInScope ( informed, restrictedLeftType, left ) ;^406^^^^^385^410^declareNameInScope ( informed, left, restrictedLeftType ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseInstanceOf [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  targetType  boolean  outcome  JSType  leftType  restrictedLeftType  rightType  Visitor  visitor  Node  left  right  FlowScope  blindScope  informed  
[BugLab_Argument_Swapping]^declareNameInScope ( restrictedLeftType, left, informed ) ;^406^^^^^385^410^declareNameInScope ( informed, left, restrictedLeftType ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseInstanceOf [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  targetType  boolean  outcome  JSType  leftType  restrictedLeftType  rightType  Visitor  visitor  Node  left  right  FlowScope  blindScope  informed  
[BugLab_Variable_Misuse]^return informed;^409^^^^^385^410^return blindScope;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseInstanceOf [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  targetType  boolean  outcome  JSType  leftType  restrictedLeftType  rightType  Visitor  visitor  Node  left  right  FlowScope  blindScope  informed  
[BugLab_Variable_Misuse]^jsType = this.getRestrictedWithoutNull ( unknownType ) ;^421^^^^^419^444^jsType = this.getRestrictedWithoutNull ( jsType ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseIn [RETURN_TYPE] FlowScope   Node object String propertyName FlowScope blindScope [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  objectType  target  targetType  JSType  jsType  unknownType  boolean  hasProperty  Node  object  String  propertyName  propertyQualifiedName  qualifiedName  FlowScope  blindScope  informed  
[BugLab_Variable_Misuse]^jsType = this.getRestrictedWithoutUndefined ( unknownType ) ;^422^^^^^419^444^jsType = this.getRestrictedWithoutUndefined ( jsType ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseIn [RETURN_TYPE] FlowScope   Node object String propertyName FlowScope blindScope [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  objectType  target  targetType  JSType  jsType  unknownType  boolean  hasProperty  Node  object  String  propertyName  propertyQualifiedName  qualifiedName  FlowScope  blindScope  informed  
[BugLab_Wrong_Literal]^boolean hasProperty = true;^424^^^^^419^444^boolean hasProperty = false;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseIn [RETURN_TYPE] FlowScope   Node object String propertyName FlowScope blindScope [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  objectType  target  targetType  JSType  jsType  unknownType  boolean  hasProperty  Node  object  String  propertyName  propertyQualifiedName  qualifiedName  FlowScope  blindScope  informed  
[BugLab_Variable_Misuse]^ObjectType objectType = ObjectType.cast ( unknownType ) ;^425^^^^^419^444^ObjectType objectType = ObjectType.cast ( jsType ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseIn [RETURN_TYPE] FlowScope   Node object String propertyName FlowScope blindScope [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  objectType  target  targetType  JSType  jsType  unknownType  boolean  hasProperty  Node  object  String  propertyName  propertyQualifiedName  qualifiedName  FlowScope  blindScope  informed  
[BugLab_Variable_Misuse]^if  ( targetType != null )  {^426^^^^^419^444^if  ( objectType != null )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseIn [RETURN_TYPE] FlowScope   Node object String propertyName FlowScope blindScope [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  objectType  target  targetType  JSType  jsType  unknownType  boolean  hasProperty  Node  object  String  propertyName  propertyQualifiedName  qualifiedName  FlowScope  blindScope  informed  
[BugLab_Wrong_Operator]^if  ( objectType == null )  {^426^^^^^419^444^if  ( objectType != null )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseIn [RETURN_TYPE] FlowScope   Node object String propertyName FlowScope blindScope [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  objectType  target  targetType  JSType  jsType  unknownType  boolean  hasProperty  Node  object  String  propertyName  propertyQualifiedName  qualifiedName  FlowScope  blindScope  informed  
[BugLab_Variable_Misuse]^hasProperty = targetType.hasProperty ( propertyName ) ;^427^^^^^419^444^hasProperty = objectType.hasProperty ( propertyName ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseIn [RETURN_TYPE] FlowScope   Node object String propertyName FlowScope blindScope [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  objectType  target  targetType  JSType  jsType  unknownType  boolean  hasProperty  Node  object  String  propertyName  propertyQualifiedName  qualifiedName  FlowScope  blindScope  informed  
[BugLab_Argument_Swapping]^hasProperty = propertyName.hasProperty ( objectType ) ;^427^^^^^419^444^hasProperty = objectType.hasProperty ( propertyName ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseIn [RETURN_TYPE] FlowScope   Node object String propertyName FlowScope blindScope [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  objectType  target  targetType  JSType  jsType  unknownType  boolean  hasProperty  Node  object  String  propertyName  propertyQualifiedName  qualifiedName  FlowScope  blindScope  informed  
[BugLab_Variable_Misuse]^hasProperty = objectType.hasProperty ( qualifiedName ) ;^427^^^^^419^444^hasProperty = objectType.hasProperty ( propertyName ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseIn [RETURN_TYPE] FlowScope   Node object String propertyName FlowScope blindScope [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  objectType  target  targetType  JSType  jsType  unknownType  boolean  hasProperty  Node  object  String  propertyName  propertyQualifiedName  qualifiedName  FlowScope  blindScope  informed  
[BugLab_Variable_Misuse]^if  ( propertyName != null )  {^431^^^^^419^444^if  ( qualifiedName != null )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseIn [RETURN_TYPE] FlowScope   Node object String propertyName FlowScope blindScope [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  objectType  target  targetType  JSType  jsType  unknownType  boolean  hasProperty  Node  object  String  propertyName  propertyQualifiedName  qualifiedName  FlowScope  blindScope  informed  
[BugLab_Wrong_Operator]^if  ( qualifiedName == null )  {^431^^^^^419^444^if  ( qualifiedName != null )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseIn [RETURN_TYPE] FlowScope   Node object String propertyName FlowScope blindScope [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  objectType  target  targetType  JSType  jsType  unknownType  boolean  hasProperty  Node  object  String  propertyName  propertyQualifiedName  qualifiedName  FlowScope  blindScope  informed  
[BugLab_Variable_Misuse]^if  ( blindScope.getSlot ( qualifiedName )  == null )  {^433^^^^^419^444^if  ( blindScope.getSlot ( propertyQualifiedName )  == null )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseIn [RETURN_TYPE] FlowScope   Node object String propertyName FlowScope blindScope [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  objectType  target  targetType  JSType  jsType  unknownType  boolean  hasProperty  Node  object  String  propertyName  propertyQualifiedName  qualifiedName  FlowScope  blindScope  informed  
[BugLab_Wrong_Operator]^if  ( blindScope.getSlot ( propertyQualifiedName )  != null )  {^433^^^^^419^444^if  ( blindScope.getSlot ( propertyQualifiedName )  == null )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseIn [RETURN_TYPE] FlowScope   Node object String propertyName FlowScope blindScope [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  objectType  target  targetType  JSType  jsType  unknownType  boolean  hasProperty  Node  object  String  propertyName  propertyQualifiedName  qualifiedName  FlowScope  blindScope  informed  
[BugLab_Variable_Misuse]^return blindScope;^439^^^^^419^444^return informed;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseIn [RETURN_TYPE] FlowScope   Node object String propertyName FlowScope blindScope [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  objectType  target  targetType  JSType  jsType  unknownType  boolean  hasProperty  Node  object  String  propertyName  propertyQualifiedName  qualifiedName  FlowScope  blindScope  informed  
[BugLab_Variable_Misuse]^FlowScope informed = informed.createChildFlowScope (  ) ;^434^^^^^419^444^FlowScope informed = blindScope.createChildFlowScope (  ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseIn [RETURN_TYPE] FlowScope   Node object String propertyName FlowScope blindScope [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  objectType  target  targetType  JSType  jsType  unknownType  boolean  hasProperty  Node  object  String  propertyName  propertyQualifiedName  qualifiedName  FlowScope  blindScope  informed  
[BugLab_Variable_Misuse]^informed.inferQualifiedSlot ( qualifiedName, unknownType, unknownType ) ;^437^438^^^^419^444^informed.inferQualifiedSlot ( propertyQualifiedName, unknownType, unknownType ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseIn [RETURN_TYPE] FlowScope   Node object String propertyName FlowScope blindScope [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  objectType  target  targetType  JSType  jsType  unknownType  boolean  hasProperty  Node  object  String  propertyName  propertyQualifiedName  qualifiedName  FlowScope  blindScope  informed  
[BugLab_Argument_Swapping]^informed.inferQualifiedSlot ( unknownType, propertyQualifiedName, unknownType ) ;^437^438^^^^419^444^informed.inferQualifiedSlot ( propertyQualifiedName, unknownType, unknownType ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseIn [RETURN_TYPE] FlowScope   Node object String propertyName FlowScope blindScope [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  objectType  target  targetType  JSType  jsType  unknownType  boolean  hasProperty  Node  object  String  propertyName  propertyQualifiedName  qualifiedName  FlowScope  blindScope  informed  
[BugLab_Variable_Misuse]^String propertyQualifiedName = propertyName + "." + propertyName;^432^^^^^419^444^String propertyQualifiedName = qualifiedName + "." + propertyName;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseIn [RETURN_TYPE] FlowScope   Node object String propertyName FlowScope blindScope [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  objectType  target  targetType  JSType  jsType  unknownType  boolean  hasProperty  Node  object  String  propertyName  propertyQualifiedName  qualifiedName  FlowScope  blindScope  informed  
[BugLab_Variable_Misuse]^String propertyQualifiedName = qualifiedName + "." + qualifiedName;^432^^^^^419^444^String propertyQualifiedName = qualifiedName + "." + propertyName;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseIn [RETURN_TYPE] FlowScope   Node object String propertyName FlowScope blindScope [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  objectType  target  targetType  JSType  jsType  unknownType  boolean  hasProperty  Node  object  String  propertyName  propertyQualifiedName  qualifiedName  FlowScope  blindScope  informed  
[BugLab_Argument_Swapping]^String propertyQualifiedName = propertyName + "." + qualifiedName;^432^^^^^419^444^String propertyQualifiedName = qualifiedName + "." + propertyName;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseIn [RETURN_TYPE] FlowScope   Node object String propertyName FlowScope blindScope [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  objectType  target  targetType  JSType  jsType  unknownType  boolean  hasProperty  Node  object  String  propertyName  propertyQualifiedName  qualifiedName  FlowScope  blindScope  informed  
[BugLab_Wrong_Operator]^String propertyQualifiedName = qualifiedName  ^  "." + propertyName;^432^^^^^419^444^String propertyQualifiedName = qualifiedName + "." + propertyName;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseIn [RETURN_TYPE] FlowScope   Node object String propertyName FlowScope blindScope [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  objectType  target  targetType  JSType  jsType  unknownType  boolean  hasProperty  Node  object  String  propertyName  propertyQualifiedName  qualifiedName  FlowScope  blindScope  informed  
[BugLab_Variable_Misuse]^if  ( informed.getSlot ( propertyQualifiedName )  == null )  {^433^^^^^419^444^if  ( blindScope.getSlot ( propertyQualifiedName )  == null )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseIn [RETURN_TYPE] FlowScope   Node object String propertyName FlowScope blindScope [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  objectType  target  targetType  JSType  jsType  unknownType  boolean  hasProperty  Node  object  String  propertyName  propertyQualifiedName  qualifiedName  FlowScope  blindScope  informed  
[BugLab_Argument_Swapping]^if  ( propertyQualifiedName.getSlot ( blindScope )  == null )  {^433^^^^^419^444^if  ( blindScope.getSlot ( propertyQualifiedName )  == null )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseIn [RETURN_TYPE] FlowScope   Node object String propertyName FlowScope blindScope [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  objectType  target  targetType  JSType  jsType  unknownType  boolean  hasProperty  Node  object  String  propertyName  propertyQualifiedName  qualifiedName  FlowScope  blindScope  informed  
[BugLab_Variable_Misuse]^informed.inferQualifiedSlot ( propertyQualifiedName, jsType, unknownType ) ;^437^438^^^^419^444^informed.inferQualifiedSlot ( propertyQualifiedName, unknownType, unknownType ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseIn [RETURN_TYPE] FlowScope   Node object String propertyName FlowScope blindScope [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  objectType  target  targetType  JSType  jsType  unknownType  boolean  hasProperty  Node  object  String  propertyName  propertyQualifiedName  qualifiedName  FlowScope  blindScope  informed  
[BugLab_Wrong_Operator]^String propertyQualifiedName = qualifiedName  >>  "." + propertyName;^432^^^^^419^444^String propertyQualifiedName = qualifiedName + "." + propertyName;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseIn [RETURN_TYPE] FlowScope   Node object String propertyName FlowScope blindScope [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  objectType  target  targetType  JSType  jsType  unknownType  boolean  hasProperty  Node  object  String  propertyName  propertyQualifiedName  qualifiedName  FlowScope  blindScope  informed  
[BugLab_Wrong_Operator]^String propertyQualifiedName = qualifiedName  <<  "." + propertyName;^432^^^^^419^444^String propertyQualifiedName = qualifiedName + "." + propertyName;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseIn [RETURN_TYPE] FlowScope   Node object String propertyName FlowScope blindScope [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  objectType  target  targetType  JSType  jsType  unknownType  boolean  hasProperty  Node  object  String  propertyName  propertyQualifiedName  qualifiedName  FlowScope  blindScope  informed  
[BugLab_Wrong_Operator]^String propertyQualifiedName = qualifiedName  >=  "." + propertyName;^432^^^^^419^444^String propertyQualifiedName = qualifiedName + "." + propertyName;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseIn [RETURN_TYPE] FlowScope   Node object String propertyName FlowScope blindScope [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  objectType  target  targetType  JSType  jsType  unknownType  boolean  hasProperty  Node  object  String  propertyName  propertyQualifiedName  qualifiedName  FlowScope  blindScope  informed  
[BugLab_Variable_Misuse]^return informed;^443^^^^^419^444^return blindScope;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseIn [RETURN_TYPE] FlowScope   Node object String propertyName FlowScope blindScope [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  objectType  target  targetType  JSType  jsType  unknownType  boolean  hasProperty  Node  object  String  propertyName  propertyQualifiedName  qualifiedName  FlowScope  blindScope  informed  
[BugLab_Variable_Misuse]^if  ( targetType instanceof FunctionType )  {^464^^^^^463^471^if  ( target instanceof FunctionType )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseUnknownType [RETURN_TYPE] JSType   [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  objectType  target  targetType  boolean  FunctionType  funcTarget  
[BugLab_Wrong_Operator]^if  ( target  <<  FunctionType )  {^464^^^^^463^471^if  ( target instanceof FunctionType )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseUnknownType [RETURN_TYPE] JSType   [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  objectType  target  targetType  boolean  FunctionType  funcTarget  
[BugLab_Variable_Misuse]^return applyCommonRestriction ( targetType ) ;^475^^^^^474^476^return applyCommonRestriction ( type ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseObjectType [RETURN_TYPE] JSType   ObjectType type [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  objectType  target  targetType  type  boolean  
[BugLab_Variable_Misuse]^if  ( targetType.isUnknownType (  )  )  {^489^^^^^488^499^if  ( target.isUnknownType (  )  )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] applyCommonRestriction [RETURN_TYPE] JSType   JSType type [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  objectType  target  targetType  type  JSType  type  boolean  FunctionType  funcTarget  
[BugLab_Variable_Misuse]^if  ( type.isUnknownType (  )  )  {^489^^^^^488^499^if  ( target.isUnknownType (  )  )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] applyCommonRestriction [RETURN_TYPE] JSType   JSType type [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  objectType  target  targetType  type  JSType  type  boolean  FunctionType  funcTarget  
[BugLab_Argument_Swapping]^return funcTarget.getGreatestSubtype ( type.getInstanceType (  )  ) ;^495^^^^^488^499^return type.getGreatestSubtype ( funcTarget.getInstanceType (  )  ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] applyCommonRestriction [RETURN_TYPE] JSType   JSType type [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  objectType  target  targetType  type  JSType  type  boolean  FunctionType  funcTarget  
[BugLab_Variable_Misuse]^if  ( targetType.isUnknownType (  )  )  {^515^^^^^514^529^if  ( target.isUnknownType (  )  )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseObjectType [RETURN_TYPE] JSType   ObjectType type [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  objectType  target  targetType  type  boolean  FunctionType  funcTarget  
[BugLab_Variable_Misuse]^return targetType;^516^^^^^514^529^return type;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseObjectType [RETURN_TYPE] JSType   ObjectType type [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  objectType  target  targetType  type  boolean  FunctionType  funcTarget  
[BugLab_Variable_Misuse]^if  ( type.isUnknownType (  )  )  {^515^^^^^514^529^if  ( target.isUnknownType (  )  )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseObjectType [RETURN_TYPE] JSType   ObjectType type [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  objectType  target  targetType  type  boolean  FunctionType  funcTarget  
[BugLab_Argument_Swapping]^if  ( funcTarget.isSubtype ( type.getInstanceType (  )  )  )  {^521^^^^^514^529^if  ( type.isSubtype ( funcTarget.getInstanceType (  )  )  )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseObjectType [RETURN_TYPE] JSType   ObjectType type [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  objectType  target  targetType  type  boolean  FunctionType  funcTarget  
[BugLab_Variable_Misuse]^if  ( targetType.isSubtype ( funcTarget.getInstanceType (  )  )  )  {^521^^^^^514^529^if  ( type.isSubtype ( funcTarget.getInstanceType (  )  )  )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseObjectType [RETURN_TYPE] JSType   ObjectType type [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  objectType  target  targetType  type  boolean  FunctionType  funcTarget  
[BugLab_Variable_Misuse]^return targetType;^525^^^^^514^529^return type;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseObjectType [RETURN_TYPE] JSType   ObjectType type [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  objectType  target  targetType  type  boolean  FunctionType  funcTarget  
[BugLab_Variable_Misuse]^if  ( targetType.isUnknownType (  )  )  {^533^^^^^532^543^if  ( target.isUnknownType (  )  )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseUnionType [RETURN_TYPE] JSType   UnionType type [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  objectType  target  targetType  type  UnionType  type  boolean  FunctionType  funcTarget  
[BugLab_Variable_Misuse]^if  ( type.isUnknownType (  )  )  {^533^^^^^532^543^if  ( target.isUnknownType (  )  )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseUnionType [RETURN_TYPE] JSType   UnionType type [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  objectType  target  targetType  type  UnionType  type  boolean  FunctionType  funcTarget  
[BugLab_Argument_Swapping]^return funcTarget.getRestrictedUnion ( type.getInstanceType (  )  ) ;^539^^^^^532^543^return type.getRestrictedUnion ( funcTarget.getInstanceType (  )  ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseUnionType [RETURN_TYPE] JSType   UnionType type [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  objectType  target  targetType  type  UnionType  type  boolean  FunctionType  funcTarget  
[BugLab_Wrong_Operator]^if  ( p.first == null && p.second == null )  {^50^^^^^49^54^if  ( p.first == null || p.second == null )  {^[CLASS] 1  [METHOD] apply [RETURN_TYPE] Pair   JSType> p [VARIABLES] boolean  Pair  p  
[BugLab_Wrong_Operator]^if  ( p.first != null || p.second == null )  {^50^^^^^49^54^if  ( p.first == null || p.second == null )  {^[CLASS] 1  [METHOD] apply [RETURN_TYPE] Pair   JSType> p [VARIABLES] boolean  Pair  p  
[BugLab_Wrong_Operator]^if  ( p.first == null || p.second != null )  {^50^^^^^49^54^if  ( p.first == null || p.second == null )  {^[CLASS] 1  [METHOD] apply [RETURN_TYPE] Pair   JSType> p [VARIABLES] boolean  Pair  p  
[BugLab_Wrong_Operator]^if  ( p.first == null && p.second == null )  {^63^^^^^62^67^if  ( p.first == null || p.second == null )  {^[CLASS] 2  [METHOD] apply [RETURN_TYPE] Pair   JSType> p [VARIABLES] boolean  Pair  p  
[BugLab_Wrong_Operator]^if  ( p.first != null || p.second == null )  {^63^^^^^62^67^if  ( p.first == null || p.second == null )  {^[CLASS] 2  [METHOD] apply [RETURN_TYPE] Pair   JSType> p [VARIABLES] boolean  Pair  p  
[BugLab_Wrong_Operator]^if  ( p.first == null || p.second != null )  {^63^^^^^62^67^if  ( p.first == null || p.second == null )  {^[CLASS] 2  [METHOD] apply [RETURN_TYPE] Pair   JSType> p [VARIABLES] boolean  Pair  p  
[BugLab_Wrong_Operator]^if  ( p.first == null && p.second == null )  {^77^^^^^76^81^if  ( p.first == null || p.second == null )  {^[CLASS] 3  [METHOD] apply [RETURN_TYPE] Pair   JSType> p [VARIABLES] boolean  Pair  p  
[BugLab_Wrong_Operator]^if  ( p.first != null || p.second == null )  {^77^^^^^76^81^if  ( p.first == null || p.second == null )  {^[CLASS] 3  [METHOD] apply [RETURN_TYPE] Pair   JSType> p [VARIABLES] boolean  Pair  p  
[BugLab_Wrong_Operator]^if  ( p.first == null || p.second != null )  {^77^^^^^76^81^if  ( p.first == null || p.second == null )  {^[CLASS] 3  [METHOD] apply [RETURN_TYPE] Pair   JSType> p [VARIABLES] boolean  Pair  p  
[BugLab_Wrong_Operator]^if  ( p.first == null && p.second == null )  {^91^^^^^90^95^if  ( p.first == null || p.second == null )  {^[CLASS] 4  [METHOD] apply [RETURN_TYPE] Pair   JSType> p [VARIABLES] boolean  Pair  p  
[BugLab_Wrong_Operator]^if  ( p.first != null || p.second == null )  {^91^^^^^90^95^if  ( p.first == null || p.second == null )  {^[CLASS] 4  [METHOD] apply [RETURN_TYPE] Pair   JSType> p [VARIABLES] boolean  Pair  p  
[BugLab_Wrong_Operator]^if  ( p.first == null || p.second != null )  {^91^^^^^90^95^if  ( p.first == null || p.second == null )  {^[CLASS] 4  [METHOD] apply [RETURN_TYPE] Pair   JSType> p [VARIABLES] boolean  Pair  p  
[BugLab_Wrong_Operator]^if  ( target  &  FunctionType )  {^464^^^^^463^471^if  ( target instanceof FunctionType )  {^[CLASS] RestrictByTrueInstanceOfResultVisitor  [METHOD] caseUnknownType [RETURN_TYPE] JSType   [VARIABLES] ObjectType  target  FunctionType  funcTarget  boolean  
[BugLab_Variable_Misuse]^return applyCommonRestriction ( target ) ;^475^^^^^474^476^return applyCommonRestriction ( type ) ;^[CLASS] RestrictByTrueInstanceOfResultVisitor  [METHOD] caseObjectType [RETURN_TYPE] JSType   ObjectType type [VARIABLES] ObjectType  target  type  boolean  
[BugLab_Variable_Misuse]^if  ( type.isUnknownType (  )  )  {^489^^^^^488^499^if  ( target.isUnknownType (  )  )  {^[CLASS] RestrictByTrueInstanceOfResultVisitor  [METHOD] applyCommonRestriction [RETURN_TYPE] JSType   JSType type [VARIABLES] ObjectType  target  type  JSType  type  boolean  FunctionType  funcTarget  
[BugLab_Argument_Swapping]^return funcTarget.getGreatestSubtype ( type.getInstanceType (  )  ) ;^495^^^^^488^499^return type.getGreatestSubtype ( funcTarget.getInstanceType (  )  ) ;^[CLASS] RestrictByTrueInstanceOfResultVisitor  [METHOD] applyCommonRestriction [RETURN_TYPE] JSType   JSType type [VARIABLES] ObjectType  target  type  JSType  type  boolean  FunctionType  funcTarget  
[BugLab_Variable_Misuse]^return target;^516^^^^^514^529^return type;^[CLASS] RestrictByFalseInstanceOfResultVisitor  [METHOD] caseObjectType [RETURN_TYPE] JSType   ObjectType type [VARIABLES] ObjectType  target  type  FunctionType  funcTarget  boolean  
[BugLab_Variable_Misuse]^if  ( type.isUnknownType (  )  )  {^515^^^^^514^529^if  ( target.isUnknownType (  )  )  {^[CLASS] RestrictByFalseInstanceOfResultVisitor  [METHOD] caseObjectType [RETURN_TYPE] JSType   ObjectType type [VARIABLES] ObjectType  target  type  FunctionType  funcTarget  boolean  
[BugLab_Variable_Misuse]^if  ( target.isSubtype ( funcTarget.getInstanceType (  )  )  )  {^521^^^^^514^529^if  ( type.isSubtype ( funcTarget.getInstanceType (  )  )  )  {^[CLASS] RestrictByFalseInstanceOfResultVisitor  [METHOD] caseObjectType [RETURN_TYPE] JSType   ObjectType type [VARIABLES] ObjectType  target  type  FunctionType  funcTarget  boolean  
[BugLab_Argument_Swapping]^if  ( funcTarget.isSubtype ( type.getInstanceType (  )  )  )  {^521^^^^^514^529^if  ( type.isSubtype ( funcTarget.getInstanceType (  )  )  )  {^[CLASS] RestrictByFalseInstanceOfResultVisitor  [METHOD] caseObjectType [RETURN_TYPE] JSType   ObjectType type [VARIABLES] ObjectType  target  type  FunctionType  funcTarget  boolean  
[BugLab_Variable_Misuse]^return target;^525^^^^^514^529^return type;^[CLASS] RestrictByFalseInstanceOfResultVisitor  [METHOD] caseObjectType [RETURN_TYPE] JSType   ObjectType type [VARIABLES] ObjectType  target  type  FunctionType  funcTarget  boolean  
[BugLab_Variable_Misuse]^if  ( type.isUnknownType (  )  )  {^533^^^^^532^543^if  ( target.isUnknownType (  )  )  {^[CLASS] RestrictByFalseInstanceOfResultVisitor  [METHOD] caseUnionType [RETURN_TYPE] JSType   UnionType type [VARIABLES] ObjectType  target  type  UnionType  type  boolean  FunctionType  funcTarget  
[BugLab_Argument_Swapping]^return funcTarget.getRestrictedUnion ( type.getInstanceType (  )  ) ;^539^^^^^532^543^return type.getRestrictedUnion ( funcTarget.getInstanceType (  )  ) ;^[CLASS] RestrictByFalseInstanceOfResultVisitor  [METHOD] caseUnionType [RETURN_TYPE] JSType   UnionType type [VARIABLES] ObjectType  target  type  UnionType  type  boolean  FunctionType  funcTarget  
