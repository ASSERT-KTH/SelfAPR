[buglab_swap_variables]^super ( typeRegistry, convention ) ;^116^^^^^114^117^super ( convention, typeRegistry ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] <init> [RETURN_TYPE] JSTypeRegistry)   CodingConvention convention JSTypeRegistry typeRegistry [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  JSTypeRegistry  typeRegistry  boolean  CodingConvention  convention  
[buglab_swap_variables]^super (  typeRegistry ) ;^116^^^^^114^117^super ( convention, typeRegistry ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] <init> [RETURN_TYPE] JSTypeRegistry)   CodingConvention convention JSTypeRegistry typeRegistry [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  JSTypeRegistry  typeRegistry  boolean  CodingConvention  convention  
[buglab_swap_variables]^super ( convention ) ;^116^^^^^114^117^super ( convention, typeRegistry ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] <init> [RETURN_TYPE] JSTypeRegistry)   CodingConvention convention JSTypeRegistry typeRegistry [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  JSTypeRegistry  typeRegistry  boolean  CodingConvention  convention  
[buglab_swap_variables]^if  ( right.getType (  )  == Token.TYPEOF && left.getType (  )  == Token.STRING )  {^131^^^^^116^146^if  ( left.getType (  )  == Token.TYPEOF && right.getType (  )  == Token.STRING )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[buglab_swap_variables]^} else if  ( left.getType (  )  == Token.TYPEOF && right.getType (  )  == Token.STRING )  {^134^135^^^^119^149^} else if  ( right.getType (  )  == Token.TYPEOF && left.getType (  )  == Token.STRING )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[buglab_swap_variables]^return caseTypeOf ( stringNode, operandType, operandNode.getString (  ) , resultEqualsValue, blindScope ) ;^148^149^^^^133^163^return caseTypeOf ( operandNode, operandType, stringNode.getString (  ) , resultEqualsValue, blindScope ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[buglab_swap_variables]^return caseTypeOf (  operandType, stringNode.getString (  ) , resultEqualsValue, blindScope ) ;^148^149^^^^133^163^return caseTypeOf ( operandNode, operandType, stringNode.getString (  ) , resultEqualsValue, blindScope ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[buglab_swap_variables]^return caseTypeOf ( operandNode, blindScope, stringNode.getString (  ) , resultEqualsValue, operandType ) ;^148^149^^^^133^163^return caseTypeOf ( operandNode, operandType, stringNode.getString (  ) , resultEqualsValue, blindScope ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[buglab_swap_variables]^return caseTypeOf ( operandNode,  stringNode.getString (  ) , resultEqualsValue, blindScope ) ;^148^149^^^^133^163^return caseTypeOf ( operandNode, operandType, stringNode.getString (  ) , resultEqualsValue, blindScope ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[buglab_swap_variables]^return caseTypeOf ( operandNode, operandType.getString (  ) , resultEqualsValue, blindScope ) ;^148^149^^^^133^163^return caseTypeOf ( operandNode, operandType, stringNode.getString (  ) , resultEqualsValue, blindScope ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[buglab_swap_variables]^return caseTypeOf ( resultEqualsValue, operandType, stringNode.getString (  ) , operandNode, blindScope ) ;^148^149^^^^133^163^return caseTypeOf ( operandNode, operandType, stringNode.getString (  ) , resultEqualsValue, blindScope ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[buglab_swap_variables]^return caseTypeOf ( operandNode, operandType, stringNode.getString (  ) ,  blindScope ) ;^148^149^^^^133^163^return caseTypeOf ( operandNode, operandType, stringNode.getString (  ) , resultEqualsValue, blindScope ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[buglab_swap_variables]^return caseTypeOf ( blindScope, operandType, stringNode.getString (  ) , resultEqualsValue, operandNode ) ;^148^149^^^^133^163^return caseTypeOf ( operandNode, operandType, stringNode.getString (  ) , resultEqualsValue, blindScope ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[buglab_swap_variables]^return caseTypeOf ( operandNode, operandType, stringNode.getString (  ) , resultEqualsValue ) ;^148^149^^^^133^163^return caseTypeOf ( operandNode, operandType, stringNode.getString (  ) , resultEqualsValue, blindScope ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[buglab_swap_variables]^return caseTypeOf ( operandNode, stringNode, operandType.getString (  ) , resultEqualsValue, blindScope ) ;^148^149^^^^133^163^return caseTypeOf ( operandNode, operandType, stringNode.getString (  ) , resultEqualsValue, blindScope ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[buglab_swap_variables]^return caseTypeOf ( operandNode, operandType, stringNode.getString (  ) , blindScope, resultEqualsValue ) ;^148^149^^^^133^163^return caseTypeOf ( operandNode, operandType, stringNode.getString (  ) , resultEqualsValue, blindScope ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[buglab_swap_variables]^return caseTypeOf ( operandNode, resultEqualsValue, stringNode.getString (  ) , operandType, blindScope ) ;^148^149^^^^133^163^return caseTypeOf ( operandNode, operandType, stringNode.getString (  ) , resultEqualsValue, blindScope ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[buglab_swap_variables]^JSType operandType = getTypeIfRefinable ( blindScope, operandNode ) ;^141^^^^^126^156^JSType operandType = getTypeIfRefinable ( operandNode, blindScope ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[buglab_swap_variables]^JSType operandType = getTypeIfRefinable (  blindScope ) ;^141^^^^^126^156^JSType operandType = getTypeIfRefinable ( operandNode, blindScope ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[buglab_swap_variables]^JSType operandType = getTypeIfRefinable ( operandNode ) ;^141^^^^^126^156^JSType operandType = getTypeIfRefinable ( operandNode, blindScope ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[buglab_swap_variables]^return caseTypeOf ( operandType, operandNode, stringNode.getString (  ) , resultEqualsValue, blindScope ) ;^148^149^^^^133^163^return caseTypeOf ( operandNode, operandType, stringNode.getString (  ) , resultEqualsValue, blindScope ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[buglab_swap_variables]^return caseTypeOf ( operandNode, operandType, blindScope.getString (  ) , resultEqualsValue, stringNode ) ;^148^149^^^^133^163^return caseTypeOf ( operandNode, operandType, stringNode.getString (  ) , resultEqualsValue, blindScope ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[buglab_swap_variables]^return caseTypeOf ( operandNode, operandType, resultEqualsValue.getString (  ) , stringNode, blindScope ) ;^148^149^^^^133^163^return caseTypeOf ( operandNode, operandType, stringNode.getString (  ) , resultEqualsValue, blindScope ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[buglab_swap_variables]^return caseAndOrMaybeShortCircuiting ( blindScope.getFirstChild (  ) , condition.getLastChild (  ) , condition, true ) ;^159^160^^^^155^161^return caseAndOrMaybeShortCircuiting ( condition.getFirstChild (  ) , condition.getLastChild (  ) , blindScope, true ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[buglab_swap_variables]^return caseAndOrMaybeShortCircuiting ( condition.getFirstChild (  ) .getLastChild (  ) , blindScope, true ) ;^159^160^^^^155^161^return caseAndOrMaybeShortCircuiting ( condition.getFirstChild (  ) , condition.getLastChild (  ) , blindScope, true ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[buglab_swap_variables]^return caseAndOrMaybeShortCircuiting ( condition.getFirstChild (  ) , condition.getLastChild (  ) ,  true ) ;^159^160^^^^155^161^return caseAndOrMaybeShortCircuiting ( condition.getFirstChild (  ) , condition.getLastChild (  ) , blindScope, true ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[buglab_swap_variables]^return caseAndOrNotShortCircuiting ( blindScope.getFirstChild (  ) , condition.getLastChild (  ) , condition, true ) ;^156^157^^^^141^171^return caseAndOrNotShortCircuiting ( condition.getFirstChild (  ) , condition.getLastChild (  ) , blindScope, true ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[buglab_swap_variables]^return caseAndOrNotShortCircuiting ( condition.getFirstChild (  ) .getLastChild (  ) , blindScope, true ) ;^156^157^^^^141^171^return caseAndOrNotShortCircuiting ( condition.getFirstChild (  ) , condition.getLastChild (  ) , blindScope, true ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[buglab_swap_variables]^return caseAndOrNotShortCircuiting ( condition.getFirstChild (  ) , condition.getLastChild (  ) ,  true ) ;^156^157^^^^141^171^return caseAndOrNotShortCircuiting ( condition.getFirstChild (  ) , condition.getLastChild (  ) , blindScope, true ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[buglab_swap_variables]^return caseAndOrMaybeShortCircuiting ( blindScope.getFirstChild (  ) , condition.getLastChild (  ) , condition, false ) ;^168^169^^^^164^170^return caseAndOrMaybeShortCircuiting ( condition.getFirstChild (  ) , condition.getLastChild (  ) , blindScope, false ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[buglab_swap_variables]^return caseAndOrMaybeShortCircuiting ( condition.getFirstChild (  ) .getLastChild (  ) , blindScope, false ) ;^168^169^^^^164^170^return caseAndOrMaybeShortCircuiting ( condition.getFirstChild (  ) , condition.getLastChild (  ) , blindScope, false ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[buglab_swap_variables]^return caseAndOrMaybeShortCircuiting ( condition.getFirstChild (  ) , condition.getLastChild (  ) ,  false ) ;^168^169^^^^164^170^return caseAndOrMaybeShortCircuiting ( condition.getFirstChild (  ) , condition.getLastChild (  ) , blindScope, false ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[buglab_swap_variables]^return caseAndOrNotShortCircuiting ( blindScope.getFirstChild (  ) , condition.getLastChild (  ) , condition, false ) ;^165^166^^^^150^180^return caseAndOrNotShortCircuiting ( condition.getFirstChild (  ) , condition.getLastChild (  ) , blindScope, false ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[buglab_swap_variables]^return caseAndOrNotShortCircuiting ( condition.getFirstChild (  ) .getLastChild (  ) , blindScope, false ) ;^165^166^^^^150^180^return caseAndOrNotShortCircuiting ( condition.getFirstChild (  ) , condition.getLastChild (  ) , blindScope, false ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[buglab_swap_variables]^return caseAndOrNotShortCircuiting ( condition.getFirstChild (  ) , condition.getLastChild (  ) ,  false ) ;^165^166^^^^150^180^return caseAndOrNotShortCircuiting ( condition.getFirstChild (  ) , condition.getLastChild (  ) , blindScope, false ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[buglab_swap_variables]^return caseEquality ( blindScope, condition, NE ) ;^176^^^^^173^177^return caseEquality ( condition, blindScope, NE ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[buglab_swap_variables]^return caseEquality (  blindScope, NE ) ;^176^^^^^173^177^return caseEquality ( condition, blindScope, NE ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[buglab_swap_variables]^return caseEquality ( condition,  NE ) ;^176^^^^^173^177^return caseEquality ( condition, blindScope, NE ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[buglab_swap_variables]^return caseEquality ( NE, blindScope, condition ) ;^176^^^^^173^177^return caseEquality ( condition, blindScope, NE ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[buglab_swap_variables]^return caseEquality ( condition, blindScope ) ;^176^^^^^173^177^return caseEquality ( condition, blindScope, NE ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[buglab_swap_variables]^return caseEquality ( condition, NE, blindScope ) ;^176^^^^^173^177^return caseEquality ( condition, blindScope, NE ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[buglab_swap_variables]^return caseEquality ( blindScope, condition, EQ ) ;^174^^^^^159^189^return caseEquality ( condition, blindScope, EQ ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[buglab_swap_variables]^return caseEquality (  blindScope, EQ ) ;^174^^^^^159^189^return caseEquality ( condition, blindScope, EQ ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[buglab_swap_variables]^return caseEquality ( condition,  EQ ) ;^174^^^^^159^189^return caseEquality ( condition, blindScope, EQ ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[buglab_swap_variables]^return caseEquality ( condition, EQ, blindScope ) ;^174^^^^^159^189^return caseEquality ( condition, blindScope, EQ ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[buglab_swap_variables]^return caseEquality ( condition, blindScope ) ;^174^^^^^159^189^return caseEquality ( condition, blindScope, EQ ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[buglab_swap_variables]^return caseEquality ( EQ, blindScope, condition ) ;^174^^^^^159^189^return caseEquality ( condition, blindScope, EQ ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[buglab_swap_variables]^return caseEquality ( EQ, blindScope, condition ) ;^183^^^^^180^184^return caseEquality ( condition, blindScope, EQ ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[buglab_swap_variables]^return caseEquality (  blindScope, EQ ) ;^183^^^^^180^184^return caseEquality ( condition, blindScope, EQ ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[buglab_swap_variables]^return caseEquality ( condition, EQ, blindScope ) ;^183^^^^^180^184^return caseEquality ( condition, blindScope, EQ ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[buglab_swap_variables]^return caseEquality ( condition,  EQ ) ;^183^^^^^180^184^return caseEquality ( condition, blindScope, EQ ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[buglab_swap_variables]^return caseEquality ( condition, blindScope ) ;^183^^^^^180^184^return caseEquality ( condition, blindScope, EQ ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[buglab_swap_variables]^return caseEquality ( NE, blindScope, condition ) ;^181^^^^^166^196^return caseEquality ( condition, blindScope, NE ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[buglab_swap_variables]^return caseEquality (  blindScope, NE ) ;^181^^^^^166^196^return caseEquality ( condition, blindScope, NE ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[buglab_swap_variables]^return caseEquality ( condition, NE, blindScope ) ;^181^^^^^166^196^return caseEquality ( condition, blindScope, NE ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[buglab_swap_variables]^return caseEquality ( condition,  NE ) ;^181^^^^^166^196^return caseEquality ( condition, blindScope, NE ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[buglab_swap_variables]^return caseEquality ( condition, blindScope ) ;^181^^^^^166^196^return caseEquality ( condition, blindScope, NE ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[buglab_swap_variables]^return caseEquality ( blindScope, condition, SHNE ) ;^190^^^^^187^191^return caseEquality ( condition, blindScope, SHNE ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[buglab_swap_variables]^return caseEquality (  blindScope, SHNE ) ;^190^^^^^187^191^return caseEquality ( condition, blindScope, SHNE ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[buglab_swap_variables]^return caseEquality ( condition,  SHNE ) ;^190^^^^^187^191^return caseEquality ( condition, blindScope, SHNE ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[buglab_swap_variables]^return caseEquality ( SHNE, blindScope, condition ) ;^190^^^^^187^191^return caseEquality ( condition, blindScope, SHNE ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[buglab_swap_variables]^return caseEquality ( condition, blindScope ) ;^190^^^^^187^191^return caseEquality ( condition, blindScope, SHNE ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[buglab_swap_variables]^return caseEquality ( blindScope, condition, SHEQ ) ;^188^^^^^173^203^return caseEquality ( condition, blindScope, SHEQ ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[buglab_swap_variables]^return caseEquality (  blindScope, SHEQ ) ;^188^^^^^173^203^return caseEquality ( condition, blindScope, SHEQ ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[buglab_swap_variables]^return caseEquality ( condition, SHEQ, blindScope ) ;^188^^^^^173^203^return caseEquality ( condition, blindScope, SHEQ ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[buglab_swap_variables]^return caseEquality ( condition,  SHEQ ) ;^188^^^^^173^203^return caseEquality ( condition, blindScope, SHEQ ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[buglab_swap_variables]^return caseEquality ( SHEQ, blindScope, condition ) ;^188^^^^^173^203^return caseEquality ( condition, blindScope, SHEQ ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[buglab_swap_variables]^return caseEquality ( condition, blindScope ) ;^188^^^^^173^203^return caseEquality ( condition, blindScope, SHEQ ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[buglab_swap_variables]^return caseEquality ( SHEQ, blindScope, condition ) ;^197^^^^^194^198^return caseEquality ( condition, blindScope, SHEQ ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[buglab_swap_variables]^return caseEquality (  blindScope, SHEQ ) ;^197^^^^^194^198^return caseEquality ( condition, blindScope, SHEQ ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[buglab_swap_variables]^return caseEquality ( blindScope, condition, SHEQ ) ;^197^^^^^194^198^return caseEquality ( condition, blindScope, SHEQ ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[buglab_swap_variables]^return caseEquality ( condition,  SHEQ ) ;^197^^^^^194^198^return caseEquality ( condition, blindScope, SHEQ ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[buglab_swap_variables]^return caseEquality ( condition, blindScope ) ;^197^^^^^194^198^return caseEquality ( condition, blindScope, SHEQ ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[buglab_swap_variables]^return caseEquality ( blindScope, condition, SHNE ) ;^195^^^^^180^210^return caseEquality ( condition, blindScope, SHNE ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[buglab_swap_variables]^return caseEquality (  blindScope, SHNE ) ;^195^^^^^180^210^return caseEquality ( condition, blindScope, SHNE ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[buglab_swap_variables]^return caseEquality ( condition,  SHNE ) ;^195^^^^^180^210^return caseEquality ( condition, blindScope, SHNE ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[buglab_swap_variables]^return caseEquality ( condition, SHNE, blindScope ) ;^195^^^^^180^210^return caseEquality ( condition, blindScope, SHNE ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[buglab_swap_variables]^return caseEquality ( condition, blindScope ) ;^195^^^^^180^210^return caseEquality ( condition, blindScope, SHNE ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[buglab_swap_variables]^return caseEquality ( SHNE, blindScope, condition ) ;^195^^^^^180^210^return caseEquality ( condition, blindScope, SHNE ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[buglab_swap_variables]^return caseEquality ( blindScope, condition, INEQ ) ;^220^^^^^205^235^return caseEquality ( condition, blindScope, INEQ ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[buglab_swap_variables]^return caseEquality (  blindScope, INEQ ) ;^220^^^^^205^235^return caseEquality ( condition, blindScope, INEQ ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[buglab_swap_variables]^return caseEquality ( condition,  INEQ ) ;^220^^^^^205^235^return caseEquality ( condition, blindScope, INEQ ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[buglab_swap_variables]^return caseEquality ( condition, INEQ, blindScope ) ;^220^^^^^205^235^return caseEquality ( condition, blindScope, INEQ ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[buglab_swap_variables]^return caseEquality ( condition, blindScope ) ;^220^^^^^205^235^return caseEquality ( condition, blindScope, INEQ ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[buglab_swap_variables]^if  ( condition && outcome.getFirstChild (  ) .getType (  )  == Token.STRING )  {^230^^^^^215^245^if  ( outcome && condition.getFirstChild (  ) .getType (  )  == Token.STRING )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[buglab_swap_variables]^return caseIn ( blindScope.getLastChild (  ) , condition.getFirstChild (  ) .getString (  ) , condition ) ;^231^232^^^^216^246^return caseIn ( condition.getLastChild (  ) , condition.getFirstChild (  ) .getString (  ) , blindScope ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[buglab_swap_variables]^return caseIn ( condition.getLastChild (  ) .getFirstChild (  ) .getString (  ) , blindScope ) ;^231^232^^^^216^246^return caseIn ( condition.getLastChild (  ) , condition.getFirstChild (  ) .getString (  ) , blindScope ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[buglab_swap_variables]^return caseIn ( condition.getLastChild (  ) , condition.getFirstChild (  ) .getString (  )  ) ;^231^232^^^^216^246^return caseIn ( condition.getLastChild (  ) , condition.getFirstChild (  ) .getString (  ) , blindScope ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[buglab_swap_variables]^return caseAndOrMaybeShortCircuiting ( blindScope.getFirstChild (  ) , condition.getLastChild (  ) , condition, true ) ;^159^160^^^^144^174^return caseAndOrMaybeShortCircuiting ( condition.getFirstChild (  ) , condition.getLastChild (  ) , blindScope, true ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[buglab_swap_variables]^return caseAndOrMaybeShortCircuiting ( condition.getFirstChild (  ) .getLastChild (  ) , blindScope, true ) ;^159^160^^^^144^174^return caseAndOrMaybeShortCircuiting ( condition.getFirstChild (  ) , condition.getLastChild (  ) , blindScope, true ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[buglab_swap_variables]^return caseAndOrMaybeShortCircuiting ( condition.getFirstChild (  ) , condition.getLastChild (  ) ,  true ) ;^159^160^^^^144^174^return caseAndOrMaybeShortCircuiting ( condition.getFirstChild (  ) , condition.getLastChild (  ) , blindScope, true ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[buglab_swap_variables]^return caseAndOrMaybeShortCircuiting ( blindScope.getFirstChild (  ) , condition.getLastChild (  ) , condition, false ) ;^168^169^^^^153^183^return caseAndOrMaybeShortCircuiting ( condition.getFirstChild (  ) , condition.getLastChild (  ) , blindScope, false ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[buglab_swap_variables]^return caseAndOrMaybeShortCircuiting ( condition.getFirstChild (  ) .getLastChild (  ) , blindScope, false ) ;^168^169^^^^153^183^return caseAndOrMaybeShortCircuiting ( condition.getFirstChild (  ) , condition.getLastChild (  ) , blindScope, false ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[buglab_swap_variables]^return caseAndOrMaybeShortCircuiting ( condition.getFirstChild (  ) , condition.getLastChild (  ) ,  false ) ;^168^169^^^^153^183^return caseAndOrMaybeShortCircuiting ( condition.getFirstChild (  ) , condition.getLastChild (  ) , blindScope, false ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[buglab_swap_variables]^return caseEquality ( NE, blindScope, condition ) ;^176^^^^^161^191^return caseEquality ( condition, blindScope, NE ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[buglab_swap_variables]^return caseEquality (  blindScope, NE ) ;^176^^^^^161^191^return caseEquality ( condition, blindScope, NE ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[buglab_swap_variables]^return caseEquality ( condition, NE, blindScope ) ;^176^^^^^161^191^return caseEquality ( condition, blindScope, NE ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[buglab_swap_variables]^return caseEquality ( condition,  NE ) ;^176^^^^^161^191^return caseEquality ( condition, blindScope, NE ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[buglab_swap_variables]^return caseEquality ( condition, blindScope ) ;^176^^^^^161^191^return caseEquality ( condition, blindScope, NE ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[buglab_swap_variables]^return caseEquality ( blindScope, condition, EQ ) ;^183^^^^^168^198^return caseEquality ( condition, blindScope, EQ ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[buglab_swap_variables]^return caseEquality (  blindScope, EQ ) ;^183^^^^^168^198^return caseEquality ( condition, blindScope, EQ ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[buglab_swap_variables]^return caseEquality ( condition,  EQ ) ;^183^^^^^168^198^return caseEquality ( condition, blindScope, EQ ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[buglab_swap_variables]^return caseEquality ( EQ, blindScope, condition ) ;^183^^^^^168^198^return caseEquality ( condition, blindScope, EQ ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[buglab_swap_variables]^return caseEquality ( condition, blindScope ) ;^183^^^^^168^198^return caseEquality ( condition, blindScope, EQ ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[buglab_swap_variables]^return caseEquality ( SHNE, blindScope, condition ) ;^190^^^^^175^205^return caseEquality ( condition, blindScope, SHNE ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[buglab_swap_variables]^return caseEquality (  blindScope, SHNE ) ;^190^^^^^175^205^return caseEquality ( condition, blindScope, SHNE ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[buglab_swap_variables]^return caseEquality ( blindScope, condition, SHNE ) ;^190^^^^^175^205^return caseEquality ( condition, blindScope, SHNE ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[buglab_swap_variables]^return caseEquality ( condition,  SHNE ) ;^190^^^^^175^205^return caseEquality ( condition, blindScope, SHNE ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[buglab_swap_variables]^return caseEquality ( condition, blindScope ) ;^190^^^^^175^205^return caseEquality ( condition, blindScope, SHNE ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[buglab_swap_variables]^return caseEquality ( blindScope, condition, SHEQ ) ;^197^^^^^182^212^return caseEquality ( condition, blindScope, SHEQ ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[buglab_swap_variables]^return caseEquality (  blindScope, SHEQ ) ;^197^^^^^182^212^return caseEquality ( condition, blindScope, SHEQ ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[buglab_swap_variables]^return caseEquality ( condition,  SHEQ ) ;^197^^^^^182^212^return caseEquality ( condition, blindScope, SHEQ ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[buglab_swap_variables]^return caseEquality ( condition, SHEQ, blindScope ) ;^197^^^^^182^212^return caseEquality ( condition, blindScope, SHEQ ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[buglab_swap_variables]^return caseEquality ( condition, blindScope ) ;^197^^^^^182^212^return caseEquality ( condition, blindScope, SHEQ ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[buglab_swap_variables]^return caseNameOrGetProp ( blindScope, condition, outcome ) ;^202^^^^^187^217^return caseNameOrGetProp ( condition, blindScope, outcome ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[buglab_swap_variables]^return caseNameOrGetProp (  blindScope, outcome ) ;^202^^^^^187^217^return caseNameOrGetProp ( condition, blindScope, outcome ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[buglab_swap_variables]^return caseNameOrGetProp ( condition,  outcome ) ;^202^^^^^187^217^return caseNameOrGetProp ( condition, blindScope, outcome ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[buglab_swap_variables]^return caseNameOrGetProp ( outcome, blindScope, condition ) ;^202^^^^^187^217^return caseNameOrGetProp ( condition, blindScope, outcome ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[buglab_swap_variables]^return caseNameOrGetProp ( condition, blindScope ) ;^202^^^^^187^217^return caseNameOrGetProp ( condition, blindScope, outcome ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[buglab_swap_variables]^return firstPreciserScopeKnowingConditionOutcome ( outcome.getFirstChild (  ) , firstPreciserScopeKnowingConditionOutcome ( condition.getFirstChild (  ) .getNext (  ) , blindScope, condition ) ,^205^206^207^208^^190^220^return firstPreciserScopeKnowingConditionOutcome ( condition.getFirstChild (  ) , firstPreciserScopeKnowingConditionOutcome ( condition.getFirstChild (  ) .getNext (  ) , blindScope, outcome ) ,^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[buglab_swap_variables]^return firstPreciserScopeKnowingConditionOutcome ( condition.getFirstChild (  ) , firstPreciserScopeKnowingConditionOutcome ( condition.getFirstChild (  ) .getNext (  ) , outcome, blindScope ) ,^205^206^207^208^^190^220^return firstPreciserScopeKnowingConditionOutcome ( condition.getFirstChild (  ) , firstPreciserScopeKnowingConditionOutcome ( condition.getFirstChild (  ) .getNext (  ) , blindScope, outcome ) ,^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[buglab_swap_variables]^return firstPreciserScopeKnowingConditionOutcome ( condition.getFirstChild (  ) , firstPreciserScopeKnowingConditionOutcome ( condition.getFirstChild (  ) .getNext (  ) ,  outcome ) ,^205^206^207^208^^190^220^return firstPreciserScopeKnowingConditionOutcome ( condition.getFirstChild (  ) , firstPreciserScopeKnowingConditionOutcome ( condition.getFirstChild (  ) .getNext (  ) , blindScope, outcome ) ,^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[buglab_swap_variables]^return firstPreciserScopeKnowingConditionOutcome ( condition.getFirstChild (  ) , firstPreciserScopeKnowingConditionOutcome ( condition.getFirstChild (  ) .getNext (  ) , blindScope ) ,^205^206^207^208^^190^220^return firstPreciserScopeKnowingConditionOutcome ( condition.getFirstChild (  ) , firstPreciserScopeKnowingConditionOutcome ( condition.getFirstChild (  ) .getNext (  ) , blindScope, outcome ) ,^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[buglab_swap_variables]^return firstPreciserScopeKnowingConditionOutcome ( blindScope.getFirstChild (  ) , condition, !outcome ) ;^212^213^^^^197^227^return firstPreciserScopeKnowingConditionOutcome ( condition.getFirstChild (  ) , blindScope, !outcome ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[buglab_swap_variables]^return firstPreciserScopeKnowingConditionOutcome ( condition.getFirstChild (  ) ,  !outcome ) ;^212^213^^^^197^227^return firstPreciserScopeKnowingConditionOutcome ( condition.getFirstChild (  ) , blindScope, !outcome ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[buglab_swap_variables]^return caseEquality ( INEQ, blindScope, condition ) ;^220^^^^^205^235^return caseEquality ( condition, blindScope, INEQ ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[buglab_swap_variables]^return caseInstanceOf ( blindScope.getFirstChild (  ) , condition.getLastChild (  ) , condition, outcome ) ;^225^226^227^^^210^240^return caseInstanceOf ( condition.getFirstChild (  ) , condition.getLastChild (  ) , blindScope, outcome ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[buglab_swap_variables]^return caseInstanceOf ( condition.getFirstChild (  ) .getLastChild (  ) , blindScope, outcome ) ;^225^226^227^^^210^240^return caseInstanceOf ( condition.getFirstChild (  ) , condition.getLastChild (  ) , blindScope, outcome ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[buglab_swap_variables]^return caseInstanceOf ( condition.getFirstChild (  ) , condition.getLastChild (  ) , outcome, blindScope ) ;^225^226^227^^^210^240^return caseInstanceOf ( condition.getFirstChild (  ) , condition.getLastChild (  ) , blindScope, outcome ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[buglab_swap_variables]^return caseInstanceOf ( condition.getFirstChild (  ) , condition.getLastChild (  ) ,  outcome ) ;^225^226^227^^^210^240^return caseInstanceOf ( condition.getFirstChild (  ) , condition.getLastChild (  ) , blindScope, outcome ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[buglab_swap_variables]^return caseInstanceOf ( condition.getFirstChild (  ) , condition.getLastChild (  ) , blindScope ) ;^225^226^227^^^210^240^return caseInstanceOf ( condition.getFirstChild (  ) , condition.getLastChild (  ) , blindScope, outcome ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[buglab_swap_variables]^return caseEquality ( blindScope, condition, NE ) ;^176^^^^^161^191^return caseEquality ( condition, blindScope, NE ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[buglab_swap_variables]^return caseEquality ( blindScope, condition, NE ) ;^181^^^^^166^196^return caseEquality ( condition, blindScope, NE ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[buglab_swap_variables]^return caseEquality ( condition, SHNE, blindScope ) ;^190^^^^^175^205^return caseEquality ( condition, blindScope, SHNE ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[buglab_swap_variables]^return caseEquality ( SHEQ, blindScope, condition ) ;^197^^^^^182^212^return caseEquality ( condition, blindScope, SHEQ ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[buglab_swap_variables]^return caseNameOrGetProp ( condition, outcome, blindScope ) ;^202^^^^^187^217^return caseNameOrGetProp ( condition, blindScope, outcome ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[buglab_swap_variables]^firstPreciserScopeKnowingConditionOutcome ( outcome.getFirstChild (  ) .getNext (  ) , blindScope, condition ) , outcome ) ;^207^208^209^^^192^222^firstPreciserScopeKnowingConditionOutcome ( condition.getFirstChild (  ) .getNext (  ) , blindScope, outcome ) , outcome ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[buglab_swap_variables]^firstPreciserScopeKnowingConditionOutcome ( condition.getFirstChild (  ) .getNext (  ) , outcome, blindScope ) , outcome ) ;^207^208^209^^^192^222^firstPreciserScopeKnowingConditionOutcome ( condition.getFirstChild (  ) .getNext (  ) , blindScope, outcome ) , outcome ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[buglab_swap_variables]^firstPreciserScopeKnowingConditionOutcome ( condition.getFirstChild (  ) .getNext (  ) ,  outcome ) , outcome ) ;^207^208^209^^^192^222^firstPreciserScopeKnowingConditionOutcome ( condition.getFirstChild (  ) .getNext (  ) , blindScope, outcome ) , outcome ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[buglab_swap_variables]^firstPreciserScopeKnowingConditionOutcome ( condition.getFirstChild (  ) .getNext (  ) , blindScope ) , outcome ) ;^207^208^209^^^192^222^firstPreciserScopeKnowingConditionOutcome ( condition.getFirstChild (  ) .getNext (  ) , blindScope, outcome ) , outcome ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[buglab_swap_variables]^return nextPreciserScopeKnowingConditionOutcome ( blindScope, condition, outcome ) ;^236^237^^^^221^251^return nextPreciserScopeKnowingConditionOutcome ( condition, blindScope, outcome ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[buglab_swap_variables]^return nextPreciserScopeKnowingConditionOutcome (  blindScope, outcome ) ;^236^237^^^^221^251^return nextPreciserScopeKnowingConditionOutcome ( condition, blindScope, outcome ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[buglab_swap_variables]^return nextPreciserScopeKnowingConditionOutcome ( condition,  outcome ) ;^236^237^^^^221^251^return nextPreciserScopeKnowingConditionOutcome ( condition, blindScope, outcome ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[buglab_swap_variables]^return nextPreciserScopeKnowingConditionOutcome ( outcome, blindScope, condition ) ;^236^237^^^^221^251^return nextPreciserScopeKnowingConditionOutcome ( condition, blindScope, outcome ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[buglab_swap_variables]^return nextPreciserScopeKnowingConditionOutcome ( condition, blindScope ) ;^236^237^^^^221^251^return nextPreciserScopeKnowingConditionOutcome ( condition, blindScope, outcome ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[buglab_swap_variables]^return nextPreciserScopeKnowingConditionOutcome ( condition, outcome, blindScope ) ;^236^237^^^^221^251^return nextPreciserScopeKnowingConditionOutcome ( condition, blindScope, outcome ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] getPreciserScopeKnowingConditionOutcome [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  ObjectType  target  boolean  outcome  resultEqualsValue  JSType  operandType  Node  condition  left  operandNode  right  stringNode  typeOfNode  FlowScope  blindScope  
[buglab_swap_variables]^JSType blindScopeType = getTypeIfRefinable ( left, left ) ;^246^^^^^231^261^JSType leftType = getTypeIfRefinable ( left, blindScope ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseEquality [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope JSType>> merging [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  JSType  leftType  rightType  boolean  leftIsRefineable  rightIsRefineable  Node  condition  left  right  FlowScope  blindScope  informed  Pair  merged  
[buglab_swap_variables]^JSType leftType = getTypeIfRefinable (  blindScope ) ;^246^^^^^231^261^JSType leftType = getTypeIfRefinable ( left, blindScope ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseEquality [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope JSType>> merging [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  JSType  leftType  rightType  boolean  leftIsRefineable  rightIsRefineable  Node  condition  left  right  FlowScope  blindScope  informed  Pair  merged  
[buglab_swap_variables]^JSType leftType = getTypeIfRefinable ( left ) ;^246^^^^^231^261^JSType leftType = getTypeIfRefinable ( left, blindScope ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseEquality [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope JSType>> merging [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  JSType  leftType  rightType  boolean  leftIsRefineable  rightIsRefineable  Node  condition  left  right  FlowScope  blindScope  informed  Pair  merged  
[buglab_swap_variables]^if  ( left != null )  {^248^^^^^233^263^if  ( leftType != null )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseEquality [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope JSType>> merging [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  JSType  leftType  rightType  boolean  leftIsRefineable  rightIsRefineable  Node  condition  left  right  FlowScope  blindScope  informed  Pair  merged  
[buglab_swap_variables]^if  ( leftTypeType != null )  {^248^^^^^233^263^if  ( leftType != null )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseEquality [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope JSType>> merging [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  JSType  leftType  rightType  boolean  leftIsRefineable  rightIsRefineable  Node  condition  left  right  FlowScope  blindScope  informed  Pair  merged  
[buglab_swap_variables]^JSType blindScopeType = getTypeIfRefinable ( right, right ) ;^256^^^^^241^271^JSType rightType = getTypeIfRefinable ( right, blindScope ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseEquality [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope JSType>> merging [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  JSType  leftType  rightType  boolean  leftIsRefineable  rightIsRefineable  Node  condition  left  right  FlowScope  blindScope  informed  Pair  merged  
[buglab_swap_variables]^JSType rightType = getTypeIfRefinable (  blindScope ) ;^256^^^^^241^271^JSType rightType = getTypeIfRefinable ( right, blindScope ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseEquality [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope JSType>> merging [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  JSType  leftType  rightType  boolean  leftIsRefineable  rightIsRefineable  Node  condition  left  right  FlowScope  blindScope  informed  Pair  merged  
[buglab_swap_variables]^JSType rightType = getTypeIfRefinable ( right ) ;^256^^^^^241^271^JSType rightType = getTypeIfRefinable ( right, blindScope ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseEquality [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope JSType>> merging [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  JSType  leftType  rightType  boolean  leftIsRefineable  rightIsRefineable  Node  condition  left  right  FlowScope  blindScope  informed  Pair  merged  
[buglab_swap_variables]^if  ( right != null )  {^258^^^^^243^273^if  ( rightType != null )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseEquality [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope JSType>> merging [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  JSType  leftType  rightType  boolean  leftIsRefineable  rightIsRefineable  Node  condition  left  right  FlowScope  blindScope  informed  Pair  merged  
[buglab_swap_variables]^if  ( rightTypeType != null )  {^258^^^^^243^273^if  ( rightType != null )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseEquality [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope JSType>> merging [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  JSType  leftType  rightType  boolean  leftIsRefineable  rightIsRefineable  Node  condition  left  right  FlowScope  blindScope  informed  Pair  merged  
[buglab_swap_variables]^Pair<JSType, JSType> merged = rightType.apply ( Pair.of ( leftType, merging )  ) ;^266^^^^^251^281^Pair<JSType, JSType> merged = merging.apply ( Pair.of ( leftType, rightType )  ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseEquality [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope JSType>> merging [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  JSType  leftType  rightType  boolean  leftIsRefineable  rightIsRefineable  Node  condition  left  right  FlowScope  blindScope  informed  Pair  merged  
[buglab_swap_variables]^Pair<JSType, JSType> merged = merging.apply ( Pair.of ( rightType, leftType )  ) ;^266^^^^^251^281^Pair<JSType, JSType> merged = merging.apply ( Pair.of ( leftType, rightType )  ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseEquality [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope JSType>> merging [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  JSType  leftType  rightType  boolean  leftIsRefineable  rightIsRefineable  Node  condition  left  right  FlowScope  blindScope  informed  Pair  merged  
[buglab_swap_variables]^Pair<JSType, JSType> merged = merging.apply ( Pair.of (  rightType )  ) ;^266^^^^^251^281^Pair<JSType, JSType> merged = merging.apply ( Pair.of ( leftType, rightType )  ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseEquality [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope JSType>> merging [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  JSType  leftType  rightType  boolean  leftIsRefineable  rightIsRefineable  Node  condition  left  right  FlowScope  blindScope  informed  Pair  merged  
[buglab_swap_variables]^Pair<JSType, JSType> merged = merging.apply ( Pair.of ( leftType )  ) ;^266^^^^^251^281^Pair<JSType, JSType> merged = merging.apply ( Pair.of ( leftType, rightType )  ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseEquality [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope JSType>> merging [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  JSType  leftType  rightType  boolean  leftIsRefineable  rightIsRefineable  Node  condition  left  right  FlowScope  blindScope  informed  Pair  merged  
[buglab_swap_variables]^Pair<JSType, JSType> merged = leftType.apply ( Pair.of ( merging, rightType )  ) ;^266^^^^^251^281^Pair<JSType, JSType> merged = merging.apply ( Pair.of ( leftType, rightType )  ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseEquality [RETURN_TYPE] FlowScope   Node condition FlowScope blindScope JSType>> merging [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  JSType  leftType  rightType  boolean  leftIsRefineable  rightIsRefineable  Node  condition  left  right  FlowScope  blindScope  informed  Pair  merged  
[buglab_swap_variables]^JSType blindScopeType = getTypeIfRefinable ( left, left ) ;^287^^^^^272^302^JSType leftType = getTypeIfRefinable ( left, blindScope ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[buglab_swap_variables]^JSType leftType = getTypeIfRefinable (  blindScope ) ;^287^^^^^272^302^JSType leftType = getTypeIfRefinable ( left, blindScope ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[buglab_swap_variables]^JSType leftType = getTypeIfRefinable ( left ) ;^287^^^^^272^302^JSType leftType = getTypeIfRefinable ( left, blindScope ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[buglab_swap_variables]^blindScope = firstPreciserScopeKnowingConditionOutcome ( condition, blindScope, left ) ;^294^295^^^^289^296^blindScope = firstPreciserScopeKnowingConditionOutcome ( left, blindScope, condition ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[buglab_swap_variables]^blindScope = firstPreciserScopeKnowingConditionOutcome (  blindScope, condition ) ;^294^295^^^^289^296^blindScope = firstPreciserScopeKnowingConditionOutcome ( left, blindScope, condition ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[buglab_swap_variables]^blindScope = firstPreciserScopeKnowingConditionOutcome ( blindScope, left, condition ) ;^294^295^^^^289^296^blindScope = firstPreciserScopeKnowingConditionOutcome ( left, blindScope, condition ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[buglab_swap_variables]^blindScope = firstPreciserScopeKnowingConditionOutcome ( left,  condition ) ;^294^295^^^^289^296^blindScope = firstPreciserScopeKnowingConditionOutcome ( left, blindScope, condition ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[buglab_swap_variables]^blindScope = firstPreciserScopeKnowingConditionOutcome ( left, condition, blindScope ) ;^294^295^^^^289^296^blindScope = firstPreciserScopeKnowingConditionOutcome ( left, blindScope, condition ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[buglab_swap_variables]^blindScope = firstPreciserScopeKnowingConditionOutcome ( left, blindScope ) ;^294^295^^^^289^296^blindScope = firstPreciserScopeKnowingConditionOutcome ( left, blindScope, condition ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[buglab_swap_variables]^blindScope = firstPreciserScopeKnowingConditionOutcome ( condition, blindScope, left ) ;^294^295^^^^279^309^blindScope = firstPreciserScopeKnowingConditionOutcome ( left, blindScope, condition ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[buglab_swap_variables]^blindScope = firstPreciserScopeKnowingConditionOutcome (  blindScope, condition ) ;^294^295^^^^279^309^blindScope = firstPreciserScopeKnowingConditionOutcome ( left, blindScope, condition ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[buglab_swap_variables]^blindScope = firstPreciserScopeKnowingConditionOutcome ( blindScope, left, condition ) ;^294^295^^^^279^309^blindScope = firstPreciserScopeKnowingConditionOutcome ( left, blindScope, condition ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[buglab_swap_variables]^blindScope = firstPreciserScopeKnowingConditionOutcome ( left,  condition ) ;^294^295^^^^279^309^blindScope = firstPreciserScopeKnowingConditionOutcome ( left, blindScope, condition ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[buglab_swap_variables]^blindScope = firstPreciserScopeKnowingConditionOutcome ( left, condition, blindScope ) ;^294^295^^^^279^309^blindScope = firstPreciserScopeKnowingConditionOutcome ( left, blindScope, condition ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[buglab_swap_variables]^blindScope = firstPreciserScopeKnowingConditionOutcome ( left, blindScope ) ;^294^295^^^^279^309^blindScope = firstPreciserScopeKnowingConditionOutcome ( left, blindScope, condition ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[buglab_swap_variables]^leftType =  ( condition == null )  ? null : leftType.getRestrictedTypeGivenToBooleanOutcome ( leftType ) ;^299^300^^^^284^314^leftType =  ( leftType == null )  ? null : leftType.getRestrictedTypeGivenToBooleanOutcome ( condition ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[buglab_swap_variables]^return firstPreciserScopeKnowingConditionOutcome ( condition, blindScope, right ) ;^302^303^^^^287^317^return firstPreciserScopeKnowingConditionOutcome ( right, blindScope, condition ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[buglab_swap_variables]^return firstPreciserScopeKnowingConditionOutcome (  blindScope, condition ) ;^302^303^^^^287^317^return firstPreciserScopeKnowingConditionOutcome ( right, blindScope, condition ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[buglab_swap_variables]^return firstPreciserScopeKnowingConditionOutcome ( blindScope, right, condition ) ;^302^303^^^^287^317^return firstPreciserScopeKnowingConditionOutcome ( right, blindScope, condition ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[buglab_swap_variables]^return firstPreciserScopeKnowingConditionOutcome ( right,  condition ) ;^302^303^^^^287^317^return firstPreciserScopeKnowingConditionOutcome ( right, blindScope, condition ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[buglab_swap_variables]^return firstPreciserScopeKnowingConditionOutcome ( right, blindScope ) ;^302^303^^^^287^317^return firstPreciserScopeKnowingConditionOutcome ( right, blindScope, condition ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[buglab_swap_variables]^return firstPreciserScopeKnowingConditionOutcome ( right, condition, blindScope ) ;^302^303^^^^287^317^return firstPreciserScopeKnowingConditionOutcome ( right, blindScope, condition ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[buglab_swap_variables]^JSType blindScopeType = getTypeIfRefinable ( right, right ) ;^307^^^^^292^322^JSType rightType = getTypeIfRefinable ( right, blindScope ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[buglab_swap_variables]^JSType rightType = getTypeIfRefinable (  blindScope ) ;^307^^^^^292^322^JSType rightType = getTypeIfRefinable ( right, blindScope ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[buglab_swap_variables]^JSType rightType = getTypeIfRefinable ( right ) ;^307^^^^^292^322^JSType rightType = getTypeIfRefinable ( right, blindScope ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[buglab_swap_variables]^if  ( rightTypeType != null )  {^309^^^^^294^324^if  ( rightType != null )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[buglab_swap_variables]^blindScope = firstPreciserScopeKnowingConditionOutcome ( blindScope, right, condition ) ;^314^315^^^^309^316^blindScope = firstPreciserScopeKnowingConditionOutcome ( right, blindScope, condition ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[buglab_swap_variables]^blindScope = firstPreciserScopeKnowingConditionOutcome (  blindScope, condition ) ;^314^315^^^^309^316^blindScope = firstPreciserScopeKnowingConditionOutcome ( right, blindScope, condition ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[buglab_swap_variables]^blindScope = firstPreciserScopeKnowingConditionOutcome ( right,  condition ) ;^314^315^^^^309^316^blindScope = firstPreciserScopeKnowingConditionOutcome ( right, blindScope, condition ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[buglab_swap_variables]^blindScope = firstPreciserScopeKnowingConditionOutcome ( right, condition, blindScope ) ;^314^315^^^^309^316^blindScope = firstPreciserScopeKnowingConditionOutcome ( right, blindScope, condition ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[buglab_swap_variables]^blindScope = firstPreciserScopeKnowingConditionOutcome ( right, blindScope ) ;^314^315^^^^309^316^blindScope = firstPreciserScopeKnowingConditionOutcome ( right, blindScope, condition ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[buglab_swap_variables]^blindScope = firstPreciserScopeKnowingConditionOutcome ( condition, blindScope, right ) ;^314^315^^^^309^316^blindScope = firstPreciserScopeKnowingConditionOutcome ( right, blindScope, condition ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[buglab_swap_variables]^blindScope = firstPreciserScopeKnowingConditionOutcome ( condition, blindScope, right ) ;^314^315^^^^299^329^blindScope = firstPreciserScopeKnowingConditionOutcome ( right, blindScope, condition ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[buglab_swap_variables]^blindScope = firstPreciserScopeKnowingConditionOutcome (  blindScope, condition ) ;^314^315^^^^299^329^blindScope = firstPreciserScopeKnowingConditionOutcome ( right, blindScope, condition ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[buglab_swap_variables]^blindScope = firstPreciserScopeKnowingConditionOutcome ( blindScope, right, condition ) ;^314^315^^^^299^329^blindScope = firstPreciserScopeKnowingConditionOutcome ( right, blindScope, condition ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[buglab_swap_variables]^blindScope = firstPreciserScopeKnowingConditionOutcome ( right,  condition ) ;^314^315^^^^299^329^blindScope = firstPreciserScopeKnowingConditionOutcome ( right, blindScope, condition ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[buglab_swap_variables]^blindScope = firstPreciserScopeKnowingConditionOutcome ( right, condition, blindScope ) ;^314^315^^^^299^329^blindScope = firstPreciserScopeKnowingConditionOutcome ( right, blindScope, condition ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[buglab_swap_variables]^blindScope = firstPreciserScopeKnowingConditionOutcome ( right, blindScope ) ;^314^315^^^^299^329^blindScope = firstPreciserScopeKnowingConditionOutcome ( right, blindScope, condition ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[buglab_swap_variables]^if  (  ( leftType != null && rightIsRefineable )  || ( rightType != null && leftIsRefineable )  )  {^323^324^^^^308^338^if  (  ( leftType != null && leftIsRefineable )  || ( rightType != null && rightIsRefineable )  )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[buglab_swap_variables]^if  (  ( rightType != null && leftIsRefineable )  || ( leftType != null && rightIsRefineable )  )  {^323^324^^^^308^338^if  (  ( leftType != null && leftIsRefineable )  || ( rightType != null && rightIsRefineable )  )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[buglab_swap_variables]^if  (  ( rightIsRefineableType != null && leftIsRefineable )  || ( rightType != null && left )  )  {^323^324^^^^308^338^if  (  ( leftType != null && leftIsRefineable )  || ( rightType != null && rightIsRefineable )  )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[buglab_swap_variables]^if  ( leftTypeIsRefineable && left != null )  {^326^^^^^323^333^if  ( leftIsRefineable && leftType != null )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[buglab_swap_variables]^declareNameInScope ( left, informed, leftType ) ;^327^^^^^323^333^declareNameInScope ( informed, left, leftType ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[buglab_swap_variables]^declareNameInScope (  left, leftType ) ;^327^^^^^323^333^declareNameInScope ( informed, left, leftType ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[buglab_swap_variables]^declareNameInScope ( informed, leftType, left ) ;^327^^^^^323^333^declareNameInScope ( informed, left, leftType ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[buglab_swap_variables]^declareNameInScope ( informed,  leftType ) ;^327^^^^^323^333^declareNameInScope ( informed, left, leftType ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[buglab_swap_variables]^declareNameInScope ( informed, left ) ;^327^^^^^323^333^declareNameInScope ( informed, left, leftType ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[buglab_swap_variables]^if  ( rightType && rightIsRefineable != null )  {^329^^^^^323^333^if  ( rightIsRefineable && rightType != null )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[buglab_swap_variables]^if  ( rightIsRefineableIsRefineable && rightType != null )  {^329^^^^^323^333^if  ( rightIsRefineable && rightType != null )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[buglab_swap_variables]^declareNameInScope ( right, informed, rightType ) ;^330^^^^^323^333^declareNameInScope ( informed, right, rightType ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[buglab_swap_variables]^declareNameInScope (  right, rightType ) ;^330^^^^^323^333^declareNameInScope ( informed, right, rightType ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[buglab_swap_variables]^declareNameInScope ( informed, rightType, right ) ;^330^^^^^323^333^declareNameInScope ( informed, right, rightType ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[buglab_swap_variables]^declareNameInScope ( informed,  rightType ) ;^330^^^^^323^333^declareNameInScope ( informed, right, rightType ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[buglab_swap_variables]^declareNameInScope ( informed, right ) ;^330^^^^^323^333^declareNameInScope ( informed, right, rightType ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[buglab_swap_variables]^declareNameInScope ( rightType, right, informed ) ;^330^^^^^323^333^declareNameInScope ( informed, right, rightType ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[buglab_swap_variables]^if  ( leftType && leftIsRefineable != null )  {^326^^^^^311^341^if  ( leftIsRefineable && leftType != null )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[buglab_swap_variables]^if  ( leftTypeIsRefineable && left != null )  {^326^^^^^311^341^if  ( leftIsRefineable && leftType != null )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[buglab_swap_variables]^declareNameInScope ( left, informed, leftType ) ;^327^^^^^312^342^declareNameInScope ( informed, left, leftType ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[buglab_swap_variables]^declareNameInScope (  left, leftType ) ;^327^^^^^312^342^declareNameInScope ( informed, left, leftType ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[buglab_swap_variables]^declareNameInScope ( informed,  leftType ) ;^327^^^^^312^342^declareNameInScope ( informed, left, leftType ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[buglab_swap_variables]^declareNameInScope ( leftType, left, informed ) ;^327^^^^^312^342^declareNameInScope ( informed, left, leftType ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[buglab_swap_variables]^declareNameInScope ( informed, left ) ;^327^^^^^312^342^declareNameInScope ( informed, left, leftType ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[buglab_swap_variables]^if  ( right && rightIsRefineableType != null )  {^329^^^^^314^344^if  ( rightIsRefineable && rightType != null )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[buglab_swap_variables]^if  ( rightType && rightIsRefineable != null )  {^329^^^^^314^344^if  ( rightIsRefineable && rightType != null )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[buglab_swap_variables]^if  ( rightTypeIsRefineable && right != null )  {^329^^^^^314^344^if  ( rightIsRefineable && rightType != null )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[buglab_swap_variables]^declareNameInScope ( right, informed, rightType ) ;^330^^^^^315^345^declareNameInScope ( informed, right, rightType ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[buglab_swap_variables]^declareNameInScope (  right, rightType ) ;^330^^^^^315^345^declareNameInScope ( informed, right, rightType ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[buglab_swap_variables]^declareNameInScope ( informed, rightType, right ) ;^330^^^^^315^345^declareNameInScope ( informed, right, rightType ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[buglab_swap_variables]^declareNameInScope ( informed,  rightType ) ;^330^^^^^315^345^declareNameInScope ( informed, right, rightType ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[buglab_swap_variables]^declareNameInScope ( rightType, right, informed ) ;^330^^^^^315^345^declareNameInScope ( informed, right, rightType ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[buglab_swap_variables]^declareNameInScope ( informed, right ) ;^330^^^^^315^345^declareNameInScope ( informed, right, rightType ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[buglab_swap_variables]^rightType =  ( condition == null )  ? null : rightType.getRestrictedTypeGivenToBooleanOutcome ( rightType ) ;^319^320^^^^304^334^rightType =  ( rightType == null )  ? null : rightType.getRestrictedTypeGivenToBooleanOutcome ( condition ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[buglab_swap_variables]^declareNameInScope ( informed, leftType, left ) ;^327^^^^^312^342^declareNameInScope ( informed, left, leftType ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[buglab_swap_variables]^if  (  ( leftType != null && leftIsRefineable )  || ( rightIsRefineable != null && rightType )  )  {^323^324^^^^308^338^if  (  ( leftType != null && leftIsRefineable )  || ( rightType != null && rightIsRefineable )  )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[buglab_swap_variables]^if  ( left && leftIsRefineableType != null )  {^326^^^^^323^333^if  ( leftIsRefineable && leftType != null )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[buglab_swap_variables]^declareNameInScope ( leftType, left, informed ) ;^327^^^^^323^333^declareNameInScope ( informed, left, leftType ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[buglab_swap_variables]^if  ( right && rightIsRefineableType != null )  {^329^^^^^323^333^if  ( rightIsRefineable && rightType != null )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[buglab_swap_variables]^if  ( rightTypeIsRefineable && right != null )  {^329^^^^^323^333^if  ( rightIsRefineable && rightType != null )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[buglab_swap_variables]^if  ( left && leftIsRefineableType != null )  {^326^^^^^311^341^if  ( leftIsRefineable && leftType != null )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[buglab_swap_variables]^if  ( rightIsRefineableIsRefineable && rightType != null )  {^329^^^^^314^344^if  ( rightIsRefineable && rightType != null )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrNotShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  condition  leftIsRefineable  rightIsRefineable  JSType  leftType  rightType  Node  left  right  FlowScope  blindScope  informed  
[buglab_swap_variables]^FlowScope leftScope = firstPreciserScopeKnowingConditionOutcome (  blindScope, !condition ) ;^340^341^^^^338^358^FlowScope leftScope = firstPreciserScopeKnowingConditionOutcome ( left, blindScope, !condition ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrMaybeShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  StaticSlot  leftVar  rightVar  boolean  condition  JSType  type  Node  left  right  FlowScope  blindScope  informed  leftScope  rightScope  
[buglab_swap_variables]^FlowScope blindScopeScope = firstPreciserScopeKnowingConditionOutcome ( left, left, !condition ) ;^340^341^^^^338^358^FlowScope leftScope = firstPreciserScopeKnowingConditionOutcome ( left, blindScope, !condition ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrMaybeShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  StaticSlot  leftVar  rightVar  boolean  condition  JSType  type  Node  left  right  FlowScope  blindScope  informed  leftScope  rightScope  
[buglab_swap_variables]^FlowScope leftScope = firstPreciserScopeKnowingConditionOutcome ( left,  !condition ) ;^340^341^^^^338^358^FlowScope leftScope = firstPreciserScopeKnowingConditionOutcome ( left, blindScope, !condition ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrMaybeShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  StaticSlot  leftVar  rightVar  boolean  condition  JSType  type  Node  left  right  FlowScope  blindScope  informed  leftScope  rightScope  
[buglab_swap_variables]^StaticSlot<JSType> leftVar = blindScope.findUniqueRefinedSlot ( leftScope ) ;^342^^^^^338^358^StaticSlot<JSType> leftVar = leftScope.findUniqueRefinedSlot ( blindScope ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrMaybeShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  StaticSlot  leftVar  rightVar  boolean  condition  JSType  type  Node  left  right  FlowScope  blindScope  informed  leftScope  rightScope  
[buglab_swap_variables]^FlowScope rightScope = firstPreciserScopeKnowingConditionOutcome ( condition, blindScope, left ) ;^346^347^^^^338^358^FlowScope rightScope = firstPreciserScopeKnowingConditionOutcome ( left, blindScope, condition ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrMaybeShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  StaticSlot  leftVar  rightVar  boolean  condition  JSType  type  Node  left  right  FlowScope  blindScope  informed  leftScope  rightScope  
[buglab_swap_variables]^FlowScope rightScope = firstPreciserScopeKnowingConditionOutcome (  blindScope, condition ) ;^346^347^^^^338^358^FlowScope rightScope = firstPreciserScopeKnowingConditionOutcome ( left, blindScope, condition ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrMaybeShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  StaticSlot  leftVar  rightVar  boolean  condition  JSType  type  Node  left  right  FlowScope  blindScope  informed  leftScope  rightScope  
[buglab_swap_variables]^FlowScope rightScope = firstPreciserScopeKnowingConditionOutcome ( blindScope, left, condition ) ;^346^347^^^^338^358^FlowScope rightScope = firstPreciserScopeKnowingConditionOutcome ( left, blindScope, condition ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrMaybeShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  StaticSlot  leftVar  rightVar  boolean  condition  JSType  type  Node  left  right  FlowScope  blindScope  informed  leftScope  rightScope  
[buglab_swap_variables]^FlowScope rightScope = firstPreciserScopeKnowingConditionOutcome ( left,  condition ) ;^346^347^^^^338^358^FlowScope rightScope = firstPreciserScopeKnowingConditionOutcome ( left, blindScope, condition ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrMaybeShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  StaticSlot  leftVar  rightVar  boolean  condition  JSType  type  Node  left  right  FlowScope  blindScope  informed  leftScope  rightScope  
[buglab_swap_variables]^FlowScope rightScope = firstPreciserScopeKnowingConditionOutcome ( left, blindScope ) ;^346^347^^^^338^358^FlowScope rightScope = firstPreciserScopeKnowingConditionOutcome ( left, blindScope, condition ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrMaybeShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  StaticSlot  leftVar  rightVar  boolean  condition  JSType  type  Node  left  right  FlowScope  blindScope  informed  leftScope  rightScope  
[buglab_swap_variables]^FlowScope rightScope = firstPreciserScopeKnowingConditionOutcome ( left, condition, blindScope ) ;^346^347^^^^338^358^FlowScope rightScope = firstPreciserScopeKnowingConditionOutcome ( left, blindScope, condition ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrMaybeShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  StaticSlot  leftVar  rightVar  boolean  condition  JSType  type  Node  left  right  FlowScope  blindScope  informed  leftScope  rightScope  
[buglab_swap_variables]^rightScope = firstPreciserScopeKnowingConditionOutcome (  rightScope, !condition ) ;^348^349^^^^338^358^rightScope = firstPreciserScopeKnowingConditionOutcome ( right, rightScope, !condition ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrMaybeShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  StaticSlot  leftVar  rightVar  boolean  condition  JSType  type  Node  left  right  FlowScope  blindScope  informed  leftScope  rightScope  
[buglab_swap_variables]^rightScope = firstPreciserScopeKnowingConditionOutcome ( right,  !condition ) ;^348^349^^^^338^358^rightScope = firstPreciserScopeKnowingConditionOutcome ( right, rightScope, !condition ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrMaybeShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  StaticSlot  leftVar  rightVar  boolean  condition  JSType  type  Node  left  right  FlowScope  blindScope  informed  leftScope  rightScope  
[buglab_swap_variables]^StaticSlot<JSType> rightVar = blindScope.findUniqueRefinedSlot ( rightScope ) ;^350^^^^^338^358^StaticSlot<JSType> rightVar = rightScope.findUniqueRefinedSlot ( blindScope ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrMaybeShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  StaticSlot  leftVar  rightVar  boolean  condition  JSType  type  Node  left  right  FlowScope  blindScope  informed  leftScope  rightScope  
[buglab_swap_variables]^JSType type = rightVar.getType (  ) .getLeastSupertype ( leftVar.getType (  )  ) ;^354^^^^^338^358^JSType type = leftVar.getType (  ) .getLeastSupertype ( rightVar.getType (  )  ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrMaybeShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  StaticSlot  leftVar  rightVar  boolean  condition  JSType  type  Node  left  right  FlowScope  blindScope  informed  leftScope  rightScope  
[buglab_swap_variables]^informed.inferSlotType ( type.getName (  ) , leftVar ) ;^356^^^^^338^358^informed.inferSlotType ( leftVar.getName (  ) , type ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrMaybeShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  StaticSlot  leftVar  rightVar  boolean  condition  JSType  type  Node  left  right  FlowScope  blindScope  informed  leftScope  rightScope  
[buglab_swap_variables]^informed.inferSlotType ( leftVar.getName (  )  ) ;^356^^^^^338^358^informed.inferSlotType ( leftVar.getName (  ) , type ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseAndOrMaybeShortCircuiting [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean condition [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  StaticSlot  leftVar  rightVar  boolean  condition  JSType  type  Node  left  right  FlowScope  blindScope  informed  leftScope  rightScope  
[buglab_swap_variables]^JSType type = getTypeIfRefinable ( blindScope, name ) ;^362^^^^^360^371^JSType type = getTypeIfRefinable ( name, blindScope ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseNameOrGetProp [RETURN_TYPE] FlowScope   Node name FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  outcome  JSType  restrictedType  type  Node  name  FlowScope  blindScope  informed  
[buglab_swap_variables]^JSType type = getTypeIfRefinable (  blindScope ) ;^362^^^^^360^371^JSType type = getTypeIfRefinable ( name, blindScope ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseNameOrGetProp [RETURN_TYPE] FlowScope   Node name FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  outcome  JSType  restrictedType  type  Node  name  FlowScope  blindScope  informed  
[buglab_swap_variables]^JSType type = getTypeIfRefinable ( name ) ;^362^^^^^360^371^JSType type = getTypeIfRefinable ( name, blindScope ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseNameOrGetProp [RETURN_TYPE] FlowScope   Node name FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  outcome  JSType  restrictedType  type  Node  name  FlowScope  blindScope  informed  
[buglab_swap_variables]^JSType restrictedType = outcome.getRestrictedTypeGivenToBooleanOutcome ( type ) ;^364^365^^^^360^371^JSType restrictedType = type.getRestrictedTypeGivenToBooleanOutcome ( outcome ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseNameOrGetProp [RETURN_TYPE] FlowScope   Node name FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  outcome  JSType  restrictedType  type  Node  name  FlowScope  blindScope  informed  
[buglab_swap_variables]^declareNameInScope ( name, informed, restrictedType ) ;^367^^^^^360^371^declareNameInScope ( informed, name, restrictedType ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseNameOrGetProp [RETURN_TYPE] FlowScope   Node name FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  outcome  JSType  restrictedType  type  Node  name  FlowScope  blindScope  informed  
[buglab_swap_variables]^declareNameInScope (  name, restrictedType ) ;^367^^^^^360^371^declareNameInScope ( informed, name, restrictedType ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseNameOrGetProp [RETURN_TYPE] FlowScope   Node name FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  outcome  JSType  restrictedType  type  Node  name  FlowScope  blindScope  informed  
[buglab_swap_variables]^declareNameInScope ( informed,  restrictedType ) ;^367^^^^^360^371^declareNameInScope ( informed, name, restrictedType ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseNameOrGetProp [RETURN_TYPE] FlowScope   Node name FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  outcome  JSType  restrictedType  type  Node  name  FlowScope  blindScope  informed  
[buglab_swap_variables]^declareNameInScope ( informed, restrictedType, name ) ;^367^^^^^360^371^declareNameInScope ( informed, name, restrictedType ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseNameOrGetProp [RETURN_TYPE] FlowScope   Node name FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  outcome  JSType  restrictedType  type  Node  name  FlowScope  blindScope  informed  
[buglab_swap_variables]^declareNameInScope ( informed, name ) ;^367^^^^^360^371^declareNameInScope ( informed, name, restrictedType ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseNameOrGetProp [RETURN_TYPE] FlowScope   Node name FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  outcome  JSType  restrictedType  type  Node  name  FlowScope  blindScope  informed  
[buglab_swap_variables]^declareNameInScope ( restrictedType, name, informed ) ;^367^^^^^360^371^declareNameInScope ( informed, name, restrictedType ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseNameOrGetProp [RETURN_TYPE] FlowScope   Node name FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  boolean  outcome  JSType  restrictedType  type  Node  name  FlowScope  blindScope  informed  
[buglab_swap_variables]^JSType restrictedType = getRestrictedByTypeOfResult ( resultEqualsValue, value, type ) ;^375^376^^^^373^383^JSType restrictedType = getRestrictedByTypeOfResult ( type, value, resultEqualsValue ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseTypeOf [RETURN_TYPE] FlowScope   Node node JSType type String value boolean resultEqualsValue FlowScope blindScope [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  JSType  restrictedType  type  boolean  resultEqualsValue  Node  node  String  value  FlowScope  blindScope  informed  
[buglab_swap_variables]^JSType restrictedType = getRestrictedByTypeOfResult (  value, resultEqualsValue ) ;^375^376^^^^373^383^JSType restrictedType = getRestrictedByTypeOfResult ( type, value, resultEqualsValue ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseTypeOf [RETURN_TYPE] FlowScope   Node node JSType type String value boolean resultEqualsValue FlowScope blindScope [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  JSType  restrictedType  type  boolean  resultEqualsValue  Node  node  String  value  FlowScope  blindScope  informed  
[buglab_swap_variables]^JSType restrictedType = getRestrictedByTypeOfResult ( type, resultEqualsValue, value ) ;^375^376^^^^373^383^JSType restrictedType = getRestrictedByTypeOfResult ( type, value, resultEqualsValue ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseTypeOf [RETURN_TYPE] FlowScope   Node node JSType type String value boolean resultEqualsValue FlowScope blindScope [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  JSType  restrictedType  type  boolean  resultEqualsValue  Node  node  String  value  FlowScope  blindScope  informed  
[buglab_swap_variables]^JSType restrictedType = getRestrictedByTypeOfResult ( type,  resultEqualsValue ) ;^375^376^^^^373^383^JSType restrictedType = getRestrictedByTypeOfResult ( type, value, resultEqualsValue ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseTypeOf [RETURN_TYPE] FlowScope   Node node JSType type String value boolean resultEqualsValue FlowScope blindScope [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  JSType  restrictedType  type  boolean  resultEqualsValue  Node  node  String  value  FlowScope  blindScope  informed  
[buglab_swap_variables]^JSType restrictedType = getRestrictedByTypeOfResult ( type, value ) ;^375^376^^^^373^383^JSType restrictedType = getRestrictedByTypeOfResult ( type, value, resultEqualsValue ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseTypeOf [RETURN_TYPE] FlowScope   Node node JSType type String value boolean resultEqualsValue FlowScope blindScope [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  JSType  restrictedType  type  boolean  resultEqualsValue  Node  node  String  value  FlowScope  blindScope  informed  
[buglab_swap_variables]^getRestrictedByTypeOfResult ( resultEqualsValue, value, type ) ;^376^^^^^373^383^getRestrictedByTypeOfResult ( type, value, resultEqualsValue ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseTypeOf [RETURN_TYPE] FlowScope   Node node JSType type String value boolean resultEqualsValue FlowScope blindScope [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  JSType  restrictedType  type  boolean  resultEqualsValue  Node  node  String  value  FlowScope  blindScope  informed  
[buglab_swap_variables]^getRestrictedByTypeOfResult (  value, resultEqualsValue ) ;^376^^^^^373^383^getRestrictedByTypeOfResult ( type, value, resultEqualsValue ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseTypeOf [RETURN_TYPE] FlowScope   Node node JSType type String value boolean resultEqualsValue FlowScope blindScope [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  JSType  restrictedType  type  boolean  resultEqualsValue  Node  node  String  value  FlowScope  blindScope  informed  
[buglab_swap_variables]^getRestrictedByTypeOfResult ( type, resultEqualsValue, value ) ;^376^^^^^373^383^getRestrictedByTypeOfResult ( type, value, resultEqualsValue ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseTypeOf [RETURN_TYPE] FlowScope   Node node JSType type String value boolean resultEqualsValue FlowScope blindScope [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  JSType  restrictedType  type  boolean  resultEqualsValue  Node  node  String  value  FlowScope  blindScope  informed  
[buglab_swap_variables]^getRestrictedByTypeOfResult ( type,  resultEqualsValue ) ;^376^^^^^373^383^getRestrictedByTypeOfResult ( type, value, resultEqualsValue ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseTypeOf [RETURN_TYPE] FlowScope   Node node JSType type String value boolean resultEqualsValue FlowScope blindScope [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  JSType  restrictedType  type  boolean  resultEqualsValue  Node  node  String  value  FlowScope  blindScope  informed  
[buglab_swap_variables]^getRestrictedByTypeOfResult ( type, value ) ;^376^^^^^373^383^getRestrictedByTypeOfResult ( type, value, resultEqualsValue ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseTypeOf [RETURN_TYPE] FlowScope   Node node JSType type String value boolean resultEqualsValue FlowScope blindScope [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  JSType  restrictedType  type  boolean  resultEqualsValue  Node  node  String  value  FlowScope  blindScope  informed  
[buglab_swap_variables]^declareNameInScope ( node, informed, restrictedType ) ;^381^^^^^373^383^declareNameInScope ( informed, node, restrictedType ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseTypeOf [RETURN_TYPE] FlowScope   Node node JSType type String value boolean resultEqualsValue FlowScope blindScope [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  JSType  restrictedType  type  boolean  resultEqualsValue  Node  node  String  value  FlowScope  blindScope  informed  
[buglab_swap_variables]^declareNameInScope (  node, restrictedType ) ;^381^^^^^373^383^declareNameInScope ( informed, node, restrictedType ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseTypeOf [RETURN_TYPE] FlowScope   Node node JSType type String value boolean resultEqualsValue FlowScope blindScope [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  JSType  restrictedType  type  boolean  resultEqualsValue  Node  node  String  value  FlowScope  blindScope  informed  
[buglab_swap_variables]^declareNameInScope ( informed,  restrictedType ) ;^381^^^^^373^383^declareNameInScope ( informed, node, restrictedType ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseTypeOf [RETURN_TYPE] FlowScope   Node node JSType type String value boolean resultEqualsValue FlowScope blindScope [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  JSType  restrictedType  type  boolean  resultEqualsValue  Node  node  String  value  FlowScope  blindScope  informed  
[buglab_swap_variables]^declareNameInScope ( informed, restrictedType, node ) ;^381^^^^^373^383^declareNameInScope ( informed, node, restrictedType ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseTypeOf [RETURN_TYPE] FlowScope   Node node JSType type String value boolean resultEqualsValue FlowScope blindScope [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  JSType  restrictedType  type  boolean  resultEqualsValue  Node  node  String  value  FlowScope  blindScope  informed  
[buglab_swap_variables]^declareNameInScope ( informed, node ) ;^381^^^^^373^383^declareNameInScope ( informed, node, restrictedType ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseTypeOf [RETURN_TYPE] FlowScope   Node node JSType type String value boolean resultEqualsValue FlowScope blindScope [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  JSType  restrictedType  type  boolean  resultEqualsValue  Node  node  String  value  FlowScope  blindScope  informed  
[buglab_swap_variables]^JSType blindScopeType = getTypeIfRefinable ( left, left ) ;^387^^^^^385^410^JSType leftType = getTypeIfRefinable ( left, blindScope ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseInstanceOf [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  targetType  boolean  outcome  JSType  leftType  restrictedLeftType  rightType  Visitor  visitor  Node  left  right  FlowScope  blindScope  informed  
[buglab_swap_variables]^JSType leftType = getTypeIfRefinable (  blindScope ) ;^387^^^^^385^410^JSType leftType = getTypeIfRefinable ( left, blindScope ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseInstanceOf [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  targetType  boolean  outcome  JSType  leftType  restrictedLeftType  rightType  Visitor  visitor  Node  left  right  FlowScope  blindScope  informed  
[buglab_swap_variables]^JSType leftType = getTypeIfRefinable ( left ) ;^387^^^^^385^410^JSType leftType = getTypeIfRefinable ( left, blindScope ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseInstanceOf [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  targetType  boolean  outcome  JSType  leftType  restrictedLeftType  rightType  Visitor  visitor  Node  left  right  FlowScope  blindScope  informed  
[buglab_swap_variables]^JSType restrictedLeftType = visitor.visit ( leftType ) ;^403^^^^^385^410^JSType restrictedLeftType = leftType.visit ( visitor ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseInstanceOf [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  targetType  boolean  outcome  JSType  leftType  restrictedLeftType  rightType  Visitor  visitor  Node  left  right  FlowScope  blindScope  informed  
[buglab_swap_variables]^if  ( left != null && !restrictedLeftType.equals ( restrictedLeftTypeType )  )  {^404^^^^^385^410^if  ( restrictedLeftType != null && !restrictedLeftType.equals ( leftType )  )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseInstanceOf [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  targetType  boolean  outcome  JSType  leftType  restrictedLeftType  rightType  Visitor  visitor  Node  left  right  FlowScope  blindScope  informed  
[buglab_swap_variables]^if  ( leftType != null && !restrictedLeftType.equals ( restrictedLeftType )  )  {^404^^^^^385^410^if  ( restrictedLeftType != null && !restrictedLeftType.equals ( leftType )  )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseInstanceOf [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  targetType  boolean  outcome  JSType  leftType  restrictedLeftType  rightType  Visitor  visitor  Node  left  right  FlowScope  blindScope  informed  
[buglab_swap_variables]^declareNameInScope ( restrictedLeftType, left, informed ) ;^406^^^^^385^410^declareNameInScope ( informed, left, restrictedLeftType ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseInstanceOf [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  targetType  boolean  outcome  JSType  leftType  restrictedLeftType  rightType  Visitor  visitor  Node  left  right  FlowScope  blindScope  informed  
[buglab_swap_variables]^declareNameInScope (  left, restrictedLeftType ) ;^406^^^^^385^410^declareNameInScope ( informed, left, restrictedLeftType ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseInstanceOf [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  targetType  boolean  outcome  JSType  leftType  restrictedLeftType  rightType  Visitor  visitor  Node  left  right  FlowScope  blindScope  informed  
[buglab_swap_variables]^declareNameInScope ( informed, restrictedLeftType, left ) ;^406^^^^^385^410^declareNameInScope ( informed, left, restrictedLeftType ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseInstanceOf [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  targetType  boolean  outcome  JSType  leftType  restrictedLeftType  rightType  Visitor  visitor  Node  left  right  FlowScope  blindScope  informed  
[buglab_swap_variables]^declareNameInScope ( informed,  restrictedLeftType ) ;^406^^^^^385^410^declareNameInScope ( informed, left, restrictedLeftType ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseInstanceOf [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  targetType  boolean  outcome  JSType  leftType  restrictedLeftType  rightType  Visitor  visitor  Node  left  right  FlowScope  blindScope  informed  
[buglab_swap_variables]^declareNameInScope ( informed, left ) ;^406^^^^^385^410^declareNameInScope ( informed, left, restrictedLeftType ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseInstanceOf [RETURN_TYPE] FlowScope   Node left Node right FlowScope blindScope boolean outcome [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  target  targetType  boolean  outcome  JSType  leftType  restrictedLeftType  rightType  Visitor  visitor  Node  left  right  FlowScope  blindScope  informed  
[buglab_swap_variables]^hasProperty = propertyName.hasProperty ( objectType ) ;^427^^^^^419^444^hasProperty = objectType.hasProperty ( propertyName ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseIn [RETURN_TYPE] FlowScope   Node object String propertyName FlowScope blindScope [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  objectType  target  targetType  JSType  jsType  unknownType  boolean  hasProperty  Node  object  String  propertyName  propertyQualifiedName  qualifiedName  FlowScope  blindScope  informed  
[buglab_swap_variables]^informed.inferQualifiedSlot (  unknownType, unknownType ) ;^437^438^^^^419^444^informed.inferQualifiedSlot ( propertyQualifiedName, unknownType, unknownType ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseIn [RETURN_TYPE] FlowScope   Node object String propertyName FlowScope blindScope [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  objectType  target  targetType  JSType  jsType  unknownType  boolean  hasProperty  Node  object  String  propertyName  propertyQualifiedName  qualifiedName  FlowScope  blindScope  informed  
[buglab_swap_variables]^informed.inferQualifiedSlot ( propertyQualifiedName,  unknownType ) ;^437^438^^^^419^444^informed.inferQualifiedSlot ( propertyQualifiedName, unknownType, unknownType ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseIn [RETURN_TYPE] FlowScope   Node object String propertyName FlowScope blindScope [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  objectType  target  targetType  JSType  jsType  unknownType  boolean  hasProperty  Node  object  String  propertyName  propertyQualifiedName  qualifiedName  FlowScope  blindScope  informed  
[buglab_swap_variables]^String propertyQualifiedName = propertyName + "." + qualifiedName;^432^^^^^419^444^String propertyQualifiedName = qualifiedName + "." + propertyName;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseIn [RETURN_TYPE] FlowScope   Node object String propertyName FlowScope blindScope [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  objectType  target  targetType  JSType  jsType  unknownType  boolean  hasProperty  Node  object  String  propertyName  propertyQualifiedName  qualifiedName  FlowScope  blindScope  informed  
[buglab_swap_variables]^if  ( propertyQualifiedName.getSlot ( blindScope )  == null )  {^433^^^^^419^444^if  ( blindScope.getSlot ( propertyQualifiedName )  == null )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseIn [RETURN_TYPE] FlowScope   Node object String propertyName FlowScope blindScope [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  objectType  target  targetType  JSType  jsType  unknownType  boolean  hasProperty  Node  object  String  propertyName  propertyQualifiedName  qualifiedName  FlowScope  blindScope  informed  
[buglab_swap_variables]^informed.inferQualifiedSlot ( unknownType, propertyQualifiedName, unknownType ) ;^437^438^^^^419^444^informed.inferQualifiedSlot ( propertyQualifiedName, unknownType, unknownType ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseIn [RETURN_TYPE] FlowScope   Node object String propertyName FlowScope blindScope [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  objectType  target  targetType  JSType  jsType  unknownType  boolean  hasProperty  Node  object  String  propertyName  propertyQualifiedName  qualifiedName  FlowScope  blindScope  informed  
[buglab_swap_variables]^return funcTarget.getGreatestSubtype ( type.getInstanceType (  )  ) ;^495^^^^^488^499^return type.getGreatestSubtype ( funcTarget.getInstanceType (  )  ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] applyCommonRestriction [RETURN_TYPE] JSType   JSType type [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  objectType  target  targetType  type  JSType  type  boolean  FunctionType  funcTarget  
[buglab_swap_variables]^if  ( funcTarget.isSubtype ( type.getInstanceType (  )  )  )  {^521^^^^^514^529^if  ( type.isSubtype ( funcTarget.getInstanceType (  )  )  )  {^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseObjectType [RETURN_TYPE] JSType   ObjectType type [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  objectType  target  targetType  type  boolean  FunctionType  funcTarget  
[buglab_swap_variables]^return funcTarget.getRestrictedUnion ( type.getInstanceType (  )  ) ;^539^^^^^532^543^return type.getRestrictedUnion ( funcTarget.getInstanceType (  )  ) ;^[CLASS] SemanticReverseAbstractInterpreter 1 2 3 4 5 RestrictByTrueInstanceOfResultVisitor RestrictByFalseInstanceOfResultVisitor  [METHOD] caseUnionType [RETURN_TYPE] JSType   UnionType type [VARIABLES] Function  EQ  INEQ  NE  SHEQ  SHNE  merging  ObjectType  objectType  target  targetType  type  UnionType  type  boolean  FunctionType  funcTarget  
[buglab_swap_variables]^return funcTarget.getGreatestSubtype ( type.getInstanceType (  )  ) ;^495^^^^^488^499^return type.getGreatestSubtype ( funcTarget.getInstanceType (  )  ) ;^[CLASS] RestrictByTrueInstanceOfResultVisitor  [METHOD] applyCommonRestriction [RETURN_TYPE] JSType   JSType type [VARIABLES] ObjectType  target  type  JSType  type  boolean  FunctionType  funcTarget  
[buglab_swap_variables]^if  ( funcTarget.isSubtype ( type.getInstanceType (  )  )  )  {^521^^^^^514^529^if  ( type.isSubtype ( funcTarget.getInstanceType (  )  )  )  {^[CLASS] RestrictByFalseInstanceOfResultVisitor  [METHOD] caseObjectType [RETURN_TYPE] JSType   ObjectType type [VARIABLES] ObjectType  target  type  FunctionType  funcTarget  boolean  
[buglab_swap_variables]^return funcTarget.getRestrictedUnion ( type.getInstanceType (  )  ) ;^539^^^^^532^543^return type.getRestrictedUnion ( funcTarget.getInstanceType (  )  ) ;^[CLASS] RestrictByFalseInstanceOfResultVisitor  [METHOD] caseUnionType [RETURN_TYPE] JSType   UnionType type [VARIABLES] ObjectType  target  type  UnionType  type  boolean  FunctionType  funcTarget  
