[buglab_swap_variables]^analyzer.process ( root, externRoot ) ;^52^^^^^49^54^analyzer.process ( externRoot, root ) ;^[CLASS] RemoveUnusedNames  [METHOD] process [RETURN_TYPE] void   Node externRoot Node root [VARIABLES] AnalyzeNameReferences  analyzer  AbstractCompiler  compiler  boolean  Logger  logger  Node  externRoot  root  
[buglab_swap_variables]^analyzer.process (  root ) ;^52^^^^^49^54^analyzer.process ( externRoot, root ) ;^[CLASS] RemoveUnusedNames  [METHOD] process [RETURN_TYPE] void   Node externRoot Node root [VARIABLES] AnalyzeNameReferences  analyzer  AbstractCompiler  compiler  boolean  Logger  logger  Node  externRoot  root  
[buglab_swap_variables]^analyzer.process ( externRoot ) ;^52^^^^^49^54^analyzer.process ( externRoot, root ) ;^[CLASS] RemoveUnusedNames  [METHOD] process [RETURN_TYPE] void   Node externRoot Node root [VARIABLES] AnalyzeNameReferences  analyzer  AbstractCompiler  compiler  boolean  Logger  logger  Node  externRoot  root  
[buglab_swap_variables]^if  ( name == null || !nameInfo.isReferenced (  )  )  {^64^^^^^60^70^if  ( nameInfo == null || !nameInfo.isReferenced (  )  )  {^[CLASS] RemoveUnusedNames  [METHOD] removeUnusedProperties [RETURN_TYPE] void   NameReferenceGraph graph [VARIABLES] AbstractCompiler  compiler  NameInfo  nameInfo  boolean  GraphNode  node  Logger  logger  NameReferenceGraph  graph  Name  name  
