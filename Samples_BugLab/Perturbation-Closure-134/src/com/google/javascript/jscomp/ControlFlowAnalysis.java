[buglab_swap_variables]^return bstPosition.get ( a.getValue (  )  )  - astPosition.get ( a.getValue (  )  ) ;^76^^^^^74^77^return astPosition.get ( a.getValue (  )  )  - astPosition.get ( b.getValue (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] compare [RETURN_TYPE] int   Branch> a Branch> b [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  DiGraphNode  a  b  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  entry  root  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[buglab_swap_variables]^return a.get ( astPosition.getValue (  )  )  - astPosition.get ( b.getValue (  )  ) ;^76^^^^^74^77^return astPosition.get ( a.getValue (  )  )  - astPosition.get ( b.getValue (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] compare [RETURN_TYPE] int   Branch> a Branch> b [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  DiGraphNode  a  b  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  entry  root  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[buglab_swap_variables]^return astPositionstPosition.get ( a.getValue (  )  )  - a.get ( b.getValue (  )  ) ;^76^^^^^74^77^return astPosition.get ( a.getValue (  )  )  - astPosition.get ( b.getValue (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] compare [RETURN_TYPE] int   Branch> a Branch> b [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  DiGraphNode  a  b  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  entry  root  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[buglab_swap_variables]^return b.get ( a.getValue (  )  )  - astPosition.get ( astPosition.getValue (  )  ) ;^76^^^^^74^77^return astPosition.get ( a.getValue (  )  )  - astPosition.get ( b.getValue (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] compare [RETURN_TYPE] int   Branch> a Branch> b [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  DiGraphNode  a  b  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  entry  root  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[buglab_swap_variables]^cfg = new AstControlFlowGraph ( computeFallThrough ( nodePriorities ) , root ) ;^151^^^^^136^166^cfg = new AstControlFlowGraph ( computeFallThrough ( root ) , nodePriorities ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  DiGraphNode  candidate  entry  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  entry  externs  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[buglab_swap_variables]^cfg = new AstControlFlowGraph ( computeFallThrough ( root )  ) ;^151^^^^^136^166^cfg = new AstControlFlowGraph ( computeFallThrough ( root ) , nodePriorities ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  DiGraphNode  candidate  entry  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  entry  externs  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[buglab_swap_variables]^NodeTraversal.traverse ( root, compiler, this ) ;^152^^^^^137^167^NodeTraversal.traverse ( compiler, root, this ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  DiGraphNode  candidate  entry  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  entry  externs  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[buglab_swap_variables]^NodeTraversal.traverse ( compiler,  this ) ;^152^^^^^137^167^NodeTraversal.traverse ( compiler, root, this ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  DiGraphNode  candidate  entry  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  entry  externs  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[buglab_swap_variables]^NodeTraversal.traverse (  root, this ) ;^152^^^^^137^167^NodeTraversal.traverse ( compiler, root, this ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  DiGraphNode  candidate  entry  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  entry  externs  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[buglab_swap_variables]^Preconditions.checkState ( !nodePriorities.containsKey ( entry )  || candidate == candidate ) ;^167^168^^^^152^182^Preconditions.checkState ( !nodePriorities.containsKey ( candidate )  || candidate == entry ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  DiGraphNode  candidate  entry  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  entry  externs  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[buglab_swap_variables]^nodePriorities.put (  ++priorityCounter ) ;^180^^^^^165^195^nodePriorities.put ( candidate, ++priorityCounter ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  DiGraphNode  candidate  entry  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  entry  externs  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[buglab_swap_variables]^if  ( current.containsKey ( nodePriorities )  )  {^199^^^^^192^211^if  ( nodePriorities.containsKey ( current )  )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] prioritizeFromEntryNode [RETURN_TYPE] void   Branch> entry [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  DiGraphNode  candidate  current  entry  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  entry  externs  root  value  List  successors  PriorityQueue  worklist  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[buglab_swap_variables]^List<DiGraphNode<Node, Branch>> successors = current.getDirectedSuccNodes ( cfg ) ;^205^206^^^^192^211^List<DiGraphNode<Node, Branch>> successors = cfg.getDirectedSuccNodes ( current ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] prioritizeFromEntryNode [RETURN_TYPE] void   Branch> entry [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  DiGraphNode  candidate  current  entry  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  entry  externs  root  value  List  successors  PriorityQueue  worklist  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[buglab_swap_variables]^nodePriorities.put (  ++priorityCounter ) ;^203^^^^^192^211^nodePriorities.put ( current, ++priorityCounter ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] prioritizeFromEntryNode [RETURN_TYPE] void   Branch> entry [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  DiGraphNode  candidate  current  entry  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  entry  externs  root  value  List  successors  PriorityQueue  worklist  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[buglab_swap_variables]^astPosition.put ( astPosition, nCounter++ ) ;^216^^^^^201^231^astPosition.put ( n, astPositionCounter++ ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[buglab_swap_variables]^astPosition.put (  astPositionCounter++ ) ;^216^^^^^201^231^astPosition.put ( n, astPositionCounter++ ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[buglab_swap_variables]^astPosition.put ( nCounter++ ) ;^216^^^^^201^231^astPosition.put ( n, astPositionCounter++ ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[buglab_swap_variables]^if  ( n || shouldTraverseFunctions == cfg.getEntry (  ) .getValue (  )  )  {^220^^^^^205^235^if  ( shouldTraverseFunctions || n == cfg.getEntry (  ) .getValue (  )  )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[buglab_swap_variables]^Preconditions.checkState ( parent.peek (  )  == exceptionHandler ) ;^282^^^^^267^297^Preconditions.checkState ( exceptionHandler.peek (  )  == parent ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[buglab_swap_variables]^return parent == n.getLastChild (  ) ;^250^^^^^235^265^return n == parent.getLastChild (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[buglab_swap_variables]^return parent != n.getFirstChild (  ) ;^256^^^^^241^271^return n != parent.getFirstChild (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[buglab_swap_variables]^return parent != n.getFirstChild (  ) .getNext (  ) ;^258^^^^^243^273^return n != parent.getFirstChild (  ) .getNext (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[buglab_swap_variables]^return parent != n.getFirstChild (  ) ;^264^^^^^249^279^return n != parent.getFirstChild (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[buglab_swap_variables]^return parent == n.getFirstChild (  ) .getNext (  ) .getNext (  ) ;^266^^^^^251^281^return n == parent.getFirstChild (  ) .getNext (  ) .getNext (  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[buglab_swap_variables]^if  ( parent == n.getFirstChild (  ) .getNext (  )  )  {^281^^^^^266^296^if  ( n == parent.getFirstChild (  ) .getNext (  )  )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node n Node parent [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[buglab_swap_variables]^createEdge ( thenBlock, Branch.ON_TRUE, computeFallThrough ( node )  ) ;^356^^^^^353^366^createEdge ( node, Branch.ON_TRUE, computeFallThrough ( thenBlock )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleIf [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  elseBlock  entry  externs  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[buglab_swap_variables]^createEdge (  Branch.ON_TRUE, computeFallThrough ( thenBlock )  ) ;^356^^^^^353^366^createEdge ( node, Branch.ON_TRUE, computeFallThrough ( thenBlock )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleIf [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  elseBlock  entry  externs  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[buglab_swap_variables]^createEdge ( elseBlock, Branch.ON_FALSE, computeFallThrough ( node )  ) ;^362^^^^^353^366^createEdge ( node, Branch.ON_FALSE, computeFallThrough ( elseBlock )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleIf [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  elseBlock  entry  externs  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[buglab_swap_variables]^createEdge (  Branch.ON_FALSE, computeFallThrough ( elseBlock )  ) ;^362^^^^^353^366^createEdge ( node, Branch.ON_FALSE, computeFallThrough ( elseBlock )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleIf [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  elseBlock  entry  externs  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[buglab_swap_variables]^createEdge ( body, Branch.ON_TRUE, computeFallThrough ( forNode )  ) ;^420^^^^^405^435^createEdge ( forNode, Branch.ON_TRUE, computeFallThrough ( body )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFor [RETURN_TYPE] void   Node forNode [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[buglab_swap_variables]^createEdge (  Branch.ON_TRUE, computeFallThrough ( body )  ) ;^420^^^^^405^435^createEdge ( forNode, Branch.ON_TRUE, computeFallThrough ( body )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFor [RETURN_TYPE] void   Node forNode [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[buglab_swap_variables]^connectToPossibleExceptionHandler ( collection, forNode ) ;^424^^^^^409^439^connectToPossibleExceptionHandler ( forNode, collection ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFor [RETURN_TYPE] void   Node forNode [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[buglab_swap_variables]^connectToPossibleExceptionHandler (  collection ) ;^424^^^^^409^439^connectToPossibleExceptionHandler ( forNode, collection ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFor [RETURN_TYPE] void   Node forNode [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[buglab_swap_variables]^connectToPossibleExceptionHandler ( forNode ) ;^424^^^^^409^439^connectToPossibleExceptionHandler ( forNode, collection ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFor [RETURN_TYPE] void   Node forNode [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[buglab_swap_variables]^createEdge ( forNode, Branch.UNCOND, init ) ;^400^^^^^385^415^createEdge ( init, Branch.UNCOND, forNode ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFor [RETURN_TYPE] void   Node forNode [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[buglab_swap_variables]^createEdge (  Branch.UNCOND, forNode ) ;^400^^^^^385^415^createEdge ( init, Branch.UNCOND, forNode ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFor [RETURN_TYPE] void   Node forNode [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[buglab_swap_variables]^createEdge ( init, Branch.UNCOND ) ;^400^^^^^385^415^createEdge ( init, Branch.UNCOND, forNode ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFor [RETURN_TYPE] void   Node forNode [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[buglab_swap_variables]^createEdge ( body, Branch.ON_TRUE, computeFallThrough ( forNode )  ) ;^402^^^^^387^417^createEdge ( forNode, Branch.ON_TRUE, computeFallThrough ( body )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFor [RETURN_TYPE] void   Node forNode [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[buglab_swap_variables]^createEdge (  Branch.ON_TRUE, computeFallThrough ( body )  ) ;^402^^^^^387^417^createEdge ( forNode, Branch.ON_TRUE, computeFallThrough ( body )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFor [RETURN_TYPE] void   Node forNode [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[buglab_swap_variables]^createEdge ( forNode, Branch.UNCOND, iter ) ;^410^^^^^395^425^createEdge ( iter, Branch.UNCOND, forNode ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFor [RETURN_TYPE] void   Node forNode [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[buglab_swap_variables]^createEdge (  Branch.UNCOND, forNode ) ;^410^^^^^395^425^createEdge ( iter, Branch.UNCOND, forNode ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFor [RETURN_TYPE] void   Node forNode [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[buglab_swap_variables]^createEdge ( iter, Branch.UNCOND ) ;^410^^^^^395^425^createEdge ( iter, Branch.UNCOND, forNode ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFor [RETURN_TYPE] void   Node forNode [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[buglab_swap_variables]^connectToPossibleExceptionHandler ( cond, forNode ) ;^412^^^^^397^427^connectToPossibleExceptionHandler ( forNode, cond ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFor [RETURN_TYPE] void   Node forNode [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[buglab_swap_variables]^connectToPossibleExceptionHandler (  cond ) ;^412^^^^^397^427^connectToPossibleExceptionHandler ( forNode, cond ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFor [RETURN_TYPE] void   Node forNode [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[buglab_swap_variables]^connectToPossibleExceptionHandler ( forNode ) ;^412^^^^^397^427^connectToPossibleExceptionHandler ( forNode, cond ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFor [RETURN_TYPE] void   Node forNode [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[buglab_swap_variables]^createEdge ( next, Branch.UNCOND, node ) ;^434^^^^^428^443^createEdge ( node, Branch.UNCOND, next ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleSwitch [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[buglab_swap_variables]^createEdge (  Branch.UNCOND, next ) ;^434^^^^^428^443^createEdge ( node, Branch.UNCOND, next ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleSwitch [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[buglab_swap_variables]^createEdge ( node, Branch.UNCOND ) ;^434^^^^^428^443^createEdge ( node, Branch.UNCOND, next ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleSwitch [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[buglab_swap_variables]^createEdge ( deflt, Branch.ON_FALSE, node ) ;^459^^^^^445^465^createEdge ( node, Branch.ON_FALSE, deflt ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleCase [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[buglab_swap_variables]^createEdge (  Branch.ON_FALSE, deflt ) ;^459^^^^^445^465^createEdge ( node, Branch.ON_FALSE, deflt ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleCase [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[buglab_swap_variables]^createEdge ( node, Branch.ON_FALSE ) ;^459^^^^^445^465^createEdge ( node, Branch.ON_FALSE, deflt ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleCase [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[buglab_swap_variables]^createEdge ( next, Branch.ON_FALSE, node ) ;^453^^^^^445^465^createEdge ( node, Branch.ON_FALSE, next ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleCase [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[buglab_swap_variables]^createEdge (  Branch.ON_FALSE, next ) ;^453^^^^^445^465^createEdge ( node, Branch.ON_FALSE, next ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleCase [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[buglab_swap_variables]^createEdge ( node, Branch.ON_FALSE ) ;^453^^^^^445^465^createEdge ( node, Branch.ON_FALSE, next ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleCase [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[buglab_swap_variables]^if  ( parent.getType (  )  == Token.BLOCK && node != null && parent.getType (  )  == Token.TRY && NodeUtil.getCatchBlock ( parent )  == node && !NodeUtil.hasCatchHandler ( node )  )  {^481^482^483^484^^466^496^if  ( node.getType (  )  == Token.BLOCK && parent != null && parent.getType (  )  == Token.TRY && NodeUtil.getCatchBlock ( parent )  == node && !NodeUtil.hasCatchHandler ( node )  )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleStmtList [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[buglab_swap_variables]^createEdge ( child, Branch.UNCOND, computeFallThrough ( node )  ) ;^498^^^^^483^513^createEdge ( node, Branch.UNCOND, computeFallThrough ( child )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleStmtList [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[buglab_swap_variables]^createEdge (  Branch.UNCOND, computeFallThrough ( child )  ) ;^498^^^^^483^513^createEdge ( node, Branch.UNCOND, computeFallThrough ( child )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleStmtList [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[buglab_swap_variables]^createEdge ( next, Branch.SYN_BLOCK, computeFallThrough ( node )  ) ;^514^^^^^499^529^createEdge ( node, Branch.SYN_BLOCK, computeFallThrough ( next )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleStmtList [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[buglab_swap_variables]^createEdge (  Branch.SYN_BLOCK, computeFallThrough ( next )  ) ;^514^^^^^499^529^createEdge ( node, Branch.SYN_BLOCK, computeFallThrough ( next )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleStmtList [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[buglab_swap_variables]^Preconditions.checkState ( node.peek (  )  == exceptionHandler ) ;^527^^^^^522^529^Preconditions.checkState ( exceptionHandler.peek (  )  == node ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleFunction [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  deflt  elseBlock  entry  externs  forNode  init  item  iter  n  next  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[buglab_swap_variables]^if  ( node == lastJump )  {^570^^^^^555^585^if  ( lastJump == node )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleBreak [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[buglab_swap_variables]^finallyMap.put (  computeFallThrough ( cur.getLastChild (  )  )  ) ;^574^^^^^570^575^finallyMap.put ( lastJump, computeFallThrough ( cur.getLastChild (  )  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleBreak [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[buglab_swap_variables]^finallyMap.put ( cur, computeFallThrough ( lastJump.getLastChild (  )  )  ) ;^574^^^^^570^575^finallyMap.put ( lastJump, computeFallThrough ( cur.getLastChild (  )  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleBreak [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[buglab_swap_variables]^createEdge ( cur, Branch.UNCOND, computeFallThrough ( lastJump.getLastChild (  )  )  ) ;^571^572^^^^556^586^createEdge ( lastJump, Branch.UNCOND, computeFallThrough ( cur.getLastChild (  )  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleBreak [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[buglab_swap_variables]^createEdge (  Branch.UNCOND, computeFallThrough ( cur.getLastChild (  )  )  ) ;^571^572^^^^556^586^createEdge ( lastJump, Branch.UNCOND, computeFallThrough ( cur.getLastChild (  )  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleBreak [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[buglab_swap_variables]^finallyMap.put (  computeFallThrough ( cur.getLastChild (  )  )  ) ;^574^^^^^559^589^finallyMap.put ( lastJump, computeFallThrough ( cur.getLastChild (  )  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleBreak [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[buglab_swap_variables]^for  ( node = cur, lastJump = node;^566^^^^^551^581^for  ( cur = node, lastJump = node;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleBreak [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[buglab_swap_variables]^for  ( cur =  lastJump = node;^566^^^^^551^581^for  ( cur = node, lastJump = node;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleBreak [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[buglab_swap_variables]^for  ( cur = node = node;^566^^^^^551^581^for  ( cur = node, lastJump = node;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleBreak [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[buglab_swap_variables]^if  ( node == lastJump )  {^570^^^^^566^579^if  ( lastJump == node )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleBreak [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[buglab_swap_variables]^finallyMap.put (  computeFallThrough ( cur.getLastChild (  )  )  ) ;^574^^^^^566^579^finallyMap.put ( lastJump, computeFallThrough ( cur.getLastChild (  )  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleBreak [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[buglab_swap_variables]^finallyMap.put ( cur, computeFallThrough ( lastJump.getLastChild (  )  )  ) ;^574^^^^^566^579^finallyMap.put ( lastJump, computeFallThrough ( cur.getLastChild (  )  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleBreak [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[buglab_swap_variables]^createEdge ( cur, Branch.UNCOND, computeFallThrough ( lastJump.getLastChild (  )  )  ) ;^571^572^^^^566^579^createEdge ( lastJump, Branch.UNCOND, computeFallThrough ( cur.getLastChild (  )  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleBreak [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[buglab_swap_variables]^createEdge (  Branch.UNCOND, computeFallThrough ( cur.getLastChild (  )  )  ) ;^571^572^^^^566^579^createEdge ( lastJump, Branch.UNCOND, computeFallThrough ( cur.getLastChild (  )  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleBreak [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[buglab_swap_variables]^!isBreakTarget ( label, parent, cur ) ;^567^^^^^552^582^!isBreakTarget ( cur, parent, label ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleBreak [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[buglab_swap_variables]^!isBreakTarget (  parent, label ) ;^567^^^^^552^582^!isBreakTarget ( cur, parent, label ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleBreak [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[buglab_swap_variables]^!isBreakTarget ( parent, cur, label ) ;^567^^^^^552^582^!isBreakTarget ( cur, parent, label ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleBreak [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[buglab_swap_variables]^!isBreakTarget ( cur,  label ) ;^567^^^^^552^582^!isBreakTarget ( cur, parent, label ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleBreak [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[buglab_swap_variables]^!isBreakTarget ( cur, label, parent ) ;^567^^^^^552^582^!isBreakTarget ( cur, parent, label ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleBreak [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[buglab_swap_variables]^!isBreakTarget ( cur, parent ) ;^567^^^^^552^582^!isBreakTarget ( cur, parent, label ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleBreak [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[buglab_swap_variables]^finallyMap.put ( cur, computeFallThrough ( lastJump.getLastChild (  )  )  ) ;^574^^^^^559^589^finallyMap.put ( lastJump, computeFallThrough ( cur.getLastChild (  )  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleBreak [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[buglab_swap_variables]^finallyMap.put (  computeFollowNode ( cur )  ) ;^583^^^^^580^584^finallyMap.put ( lastJump, computeFollowNode ( cur )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleBreak [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[buglab_swap_variables]^createEdge ( cur, Branch.UNCOND, computeFollowNode ( lastJump )  ) ;^581^^^^^566^596^createEdge ( lastJump, Branch.UNCOND, computeFollowNode ( cur )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleBreak [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[buglab_swap_variables]^createEdge (  Branch.UNCOND, computeFollowNode ( cur )  ) ;^581^^^^^566^596^createEdge ( lastJump, Branch.UNCOND, computeFollowNode ( cur )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleBreak [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[buglab_swap_variables]^finallyMap.put ( cur, computeFollowNode ( lastJump )  ) ;^583^^^^^568^598^finallyMap.put ( lastJump, computeFollowNode ( cur )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleBreak [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[buglab_swap_variables]^finallyMap.put (  computeFollowNode ( cur )  ) ;^583^^^^^568^598^finallyMap.put ( lastJump, computeFollowNode ( cur )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleBreak [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[buglab_swap_variables]^if  ( node == lastJump )  {^600^^^^^585^615^if  ( lastJump == node )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[buglab_swap_variables]^finallyMap.put (  computeFallThrough ( cur.getLastChild (  )  )  ) ;^603^^^^^600^604^finallyMap.put ( lastJump, computeFallThrough ( cur.getLastChild (  )  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[buglab_swap_variables]^finallyMap.put ( cur, computeFallThrough ( lastJump.getLastChild (  )  )  ) ;^603^^^^^600^604^finallyMap.put ( lastJump, computeFallThrough ( cur.getLastChild (  )  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[buglab_swap_variables]^createEdge ( cur, Branch.UNCOND, lastJump.getLastChild (  )  ) ;^601^^^^^586^616^createEdge ( lastJump, Branch.UNCOND, cur.getLastChild (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[buglab_swap_variables]^createEdge (  Branch.UNCOND, cur.getLastChild (  )  ) ;^601^^^^^586^616^createEdge ( lastJump, Branch.UNCOND, cur.getLastChild (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[buglab_swap_variables]^createEdge ( lastJump, Branch.UNCOND.getLastChild (  )  ) ;^601^^^^^586^616^createEdge ( lastJump, Branch.UNCOND, cur.getLastChild (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[buglab_swap_variables]^finallyMap.put ( cur, computeFallThrough ( lastJump.getLastChild (  )  )  ) ;^603^^^^^588^618^finallyMap.put ( lastJump, computeFallThrough ( cur.getLastChild (  )  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[buglab_swap_variables]^finallyMap.put (  computeFallThrough ( cur.getLastChild (  )  )  ) ;^603^^^^^588^618^finallyMap.put ( lastJump, computeFallThrough ( cur.getLastChild (  )  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[buglab_swap_variables]^for  ( cur =  lastJump = node;^596^^^^^581^611^for  ( cur = node, lastJump = node;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[buglab_swap_variables]^for  ( cur = node = node;^596^^^^^581^611^for  ( cur = node, lastJump = node;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[buglab_swap_variables]^if  ( node == lastJump )  {^600^^^^^596^608^if  ( lastJump == node )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[buglab_swap_variables]^finallyMap.put ( cur, computeFallThrough ( lastJump.getLastChild (  )  )  ) ;^603^^^^^596^608^finallyMap.put ( lastJump, computeFallThrough ( cur.getLastChild (  )  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[buglab_swap_variables]^finallyMap.put (  computeFallThrough ( cur.getLastChild (  )  )  ) ;^603^^^^^596^608^finallyMap.put ( lastJump, computeFallThrough ( cur.getLastChild (  )  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[buglab_swap_variables]^createEdge ( cur, Branch.UNCOND, lastJump.getLastChild (  )  ) ;^601^^^^^596^608^createEdge ( lastJump, Branch.UNCOND, cur.getLastChild (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[buglab_swap_variables]^createEdge (  Branch.UNCOND, cur.getLastChild (  )  ) ;^601^^^^^596^608^createEdge ( lastJump, Branch.UNCOND, cur.getLastChild (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[buglab_swap_variables]^createEdge ( lastJump, Branch.UNCOND.getLastChild (  )  ) ;^601^^^^^596^608^createEdge ( lastJump, Branch.UNCOND, cur.getLastChild (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[buglab_swap_variables]^!isContinueTarget ( parent, cur, label ) ;^597^^^^^582^612^!isContinueTarget ( cur, parent, label ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[buglab_swap_variables]^!isContinueTarget (  parent, label ) ;^597^^^^^582^612^!isContinueTarget ( cur, parent, label ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[buglab_swap_variables]^!isContinueTarget ( cur,  label ) ;^597^^^^^582^612^!isContinueTarget ( cur, parent, label ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[buglab_swap_variables]^!isContinueTarget ( cur, label, parent ) ;^597^^^^^582^612^!isContinueTarget ( cur, parent, label ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[buglab_swap_variables]^!isContinueTarget ( cur, parent ) ;^597^^^^^582^612^!isContinueTarget ( cur, parent, label ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[buglab_swap_variables]^if  ( node == lastJump )  {^614^^^^^599^629^if  ( lastJump == node )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[buglab_swap_variables]^finallyMap.put ( iter, lastJump ) ;^617^^^^^614^618^finallyMap.put ( lastJump, iter ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[buglab_swap_variables]^finallyMap.put (  iter ) ;^617^^^^^614^618^finallyMap.put ( lastJump, iter ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[buglab_swap_variables]^finallyMap.put ( lastJump ) ;^617^^^^^614^618^finallyMap.put ( lastJump, iter ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[buglab_swap_variables]^createEdge ( iter, Branch.UNCOND, node ) ;^615^^^^^600^630^createEdge ( node, Branch.UNCOND, iter ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[buglab_swap_variables]^createEdge (  Branch.UNCOND, iter ) ;^615^^^^^600^630^createEdge ( node, Branch.UNCOND, iter ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[buglab_swap_variables]^createEdge ( node, Branch.UNCOND ) ;^615^^^^^600^630^createEdge ( node, Branch.UNCOND, iter ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[buglab_swap_variables]^finallyMap.put ( iter, lastJump ) ;^617^^^^^602^632^finallyMap.put ( lastJump, iter ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[buglab_swap_variables]^finallyMap.put (  iter ) ;^617^^^^^602^632^finallyMap.put ( lastJump, iter ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[buglab_swap_variables]^finallyMap.put ( lastJump ) ;^617^^^^^602^632^finallyMap.put ( lastJump, iter ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleContinue [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[buglab_swap_variables]^finallyMap.put ( curHandler, computeFallThrough ( lastJump.getLastChild (  )  )  ) ;^632^633^^^^629^634^finallyMap.put ( lastJump, computeFallThrough ( curHandler.getLastChild (  )  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleReturn [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[buglab_swap_variables]^finallyMap.put (  computeFallThrough ( curHandler.getLastChild (  )  )  ) ;^632^633^^^^629^634^finallyMap.put ( lastJump, computeFallThrough ( curHandler.getLastChild (  )  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleReturn [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[buglab_swap_variables]^createEdge ( curHandler, Branch.UNCOND, node.getLastChild (  )  ) ;^630^^^^^621^648^createEdge ( node, Branch.UNCOND, curHandler.getLastChild (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleReturn [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[buglab_swap_variables]^createEdge (  Branch.UNCOND, curHandler.getLastChild (  )  ) ;^630^^^^^621^648^createEdge ( node, Branch.UNCOND, curHandler.getLastChild (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleReturn [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[buglab_swap_variables]^createEdge ( node, Branch.UNCOND.getLastChild (  )  ) ;^630^^^^^621^648^createEdge ( node, Branch.UNCOND, curHandler.getLastChild (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleReturn [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[buglab_swap_variables]^finallyMap.put ( curHandler, computeFallThrough ( lastJump.getLastChild (  )  )  ) ;^632^633^^^^621^648^finallyMap.put ( lastJump, computeFallThrough ( curHandler.getLastChild (  )  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleReturn [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[buglab_swap_variables]^finallyMap.put (  computeFallThrough ( curHandler.getLastChild (  )  )  ) ;^632^633^^^^621^648^finallyMap.put ( lastJump, computeFallThrough ( curHandler.getLastChild (  )  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleReturn [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[buglab_swap_variables]^finallyMap.put (  null ) ;^646^^^^^643^647^finallyMap.put ( lastJump, null ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleReturn [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[buglab_swap_variables]^finallyMap.put (  null ) ;^646^^^^^621^648^finallyMap.put ( lastJump, null ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] handleReturn [RETURN_TYPE] void   Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  forNode  init  item  iter  lastJump  n  next  node  parent  root  thenBlock  value  Iterator  iter  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[buglab_swap_variables]^if  ( node == null || parent.getType (  )  == Token.FUNCTION || parent == root )  {^690^^^^^675^705^if  ( parent == null || parent.getType (  )  == Token.FUNCTION || node == root )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[buglab_swap_variables]^if  ( parent == null || parent.getType (  )  == Token.FUNCTION || root == node )  {^690^^^^^675^705^if  ( parent == null || parent.getType (  )  == Token.FUNCTION || node == root )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[buglab_swap_variables]^return computeFollowNode ( parent, fromNode ) ;^712^^^^^703^713^return computeFollowNode ( fromNode, parent ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[buglab_swap_variables]^return computeFollowNode (  parent ) ;^712^^^^^703^713^return computeFollowNode ( fromNode, parent ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[buglab_swap_variables]^return computeFollowNode ( fromNode ) ;^712^^^^^703^713^return computeFollowNode ( fromNode, parent ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[buglab_swap_variables]^return computeFollowNode ( parent, fromNode ) ;^744^^^^^729^759^return computeFollowNode ( fromNode, parent ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[buglab_swap_variables]^return computeFollowNode (  parent ) ;^744^^^^^729^759^return computeFollowNode ( fromNode, parent ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[buglab_swap_variables]^return computeFollowNode ( fromNode ) ;^744^^^^^729^759^return computeFollowNode ( fromNode, parent ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[buglab_swap_variables]^for  ( Node finallyNode : parent.get ( finallyMap )  )  {^741^^^^^726^756^for  ( Node finallyNode : finallyMap.get ( parent )  )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[buglab_swap_variables]^createEdge ( finallyNode, Branch.UNCOND, fromNode ) ;^742^^^^^727^757^createEdge ( fromNode, Branch.UNCOND, finallyNode ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[buglab_swap_variables]^createEdge (  Branch.UNCOND, finallyNode ) ;^742^^^^^727^757^createEdge ( fromNode, Branch.UNCOND, finallyNode ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[buglab_swap_variables]^createEdge ( fromNode, Branch.UNCOND ) ;^742^^^^^727^757^createEdge ( fromNode, Branch.UNCOND, finallyNode ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[buglab_swap_variables]^return computeFollowNode ( parent, fromNode ) ;^737^^^^^734^738^return computeFollowNode ( fromNode, parent ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[buglab_swap_variables]^return computeFollowNode (  parent ) ;^737^^^^^734^738^return computeFollowNode ( fromNode, parent ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[buglab_swap_variables]^return computeFollowNode ( fromNode ) ;^737^^^^^734^738^return computeFollowNode ( fromNode, parent ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[buglab_swap_variables]^return computeFollowNode ( parent, fromNode ) ;^737^^^^^722^752^return computeFollowNode ( fromNode, parent ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[buglab_swap_variables]^return computeFollowNode (  parent ) ;^737^^^^^722^752^return computeFollowNode ( fromNode, parent ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[buglab_swap_variables]^return computeFollowNode ( fromNode ) ;^737^^^^^722^752^return computeFollowNode ( fromNode, parent ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[buglab_swap_variables]^return computeFollowNode ( parent, fromNode ) ;^730^^^^^727^731^return computeFollowNode ( fromNode, parent ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[buglab_swap_variables]^return computeFollowNode (  parent ) ;^730^^^^^727^731^return computeFollowNode ( fromNode, parent ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[buglab_swap_variables]^return computeFollowNode ( fromNode ) ;^730^^^^^727^731^return computeFollowNode ( fromNode, parent ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[buglab_swap_variables]^return computeFollowNode ( parent, fromNode ) ;^730^^^^^715^745^return computeFollowNode ( fromNode, parent ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[buglab_swap_variables]^return computeFollowNode (  parent ) ;^730^^^^^715^745^return computeFollowNode ( fromNode, parent ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[buglab_swap_variables]^return computeFollowNode ( fromNode ) ;^730^^^^^715^745^return computeFollowNode ( fromNode, parent ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[buglab_swap_variables]^return computeFollowNode ( parent, fromNode ) ;^698^^^^^683^713^return computeFollowNode ( fromNode, parent ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[buglab_swap_variables]^return computeFollowNode (  parent ) ;^698^^^^^683^713^return computeFollowNode ( fromNode, parent ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[buglab_swap_variables]^return computeFollowNode ( fromNode ) ;^698^^^^^683^713^return computeFollowNode ( fromNode, parent ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[buglab_swap_variables]^return computeFollowNode ( parent, fromNode ) ;^712^^^^^697^727^return computeFollowNode ( fromNode, parent ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[buglab_swap_variables]^return computeFollowNode (  parent ) ;^712^^^^^697^727^return computeFollowNode ( fromNode, parent ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[buglab_swap_variables]^return computeFollowNode ( fromNode ) ;^712^^^^^697^727^return computeFollowNode ( fromNode, parent ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[buglab_swap_variables]^return computeFollowNode ( parent, fromNode ) ;^761^^^^^757^762^return computeFollowNode ( fromNode, parent ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[buglab_swap_variables]^return computeFollowNode (  parent ) ;^761^^^^^757^762^return computeFollowNode ( fromNode, parent ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[buglab_swap_variables]^return computeFollowNode ( fromNode ) ;^761^^^^^757^762^return computeFollowNode ( fromNode, parent ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[buglab_swap_variables]^return computeFollowNode ( parent, fromNode ) ;^761^^^^^746^776^return computeFollowNode ( fromNode, parent ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[buglab_swap_variables]^return computeFollowNode (  parent ) ;^761^^^^^746^776^return computeFollowNode ( fromNode, parent ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[buglab_swap_variables]^return computeFollowNode ( fromNode ) ;^761^^^^^746^776^return computeFollowNode ( fromNode, parent ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] computeFollowNode [RETURN_TYPE] Node   Node fromNode Node node [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[buglab_swap_variables]^cfg.connectIfNotFound ( toNode, branch, fromNode ) ;^796^^^^^792^797^cfg.connectIfNotFound ( fromNode, branch, toNode ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] createEdge [RETURN_TYPE] void   Node fromNode Branch branch Node toNode [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  Branch  branch  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[buglab_swap_variables]^cfg.connectIfNotFound (  branch, toNode ) ;^796^^^^^792^797^cfg.connectIfNotFound ( fromNode, branch, toNode ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] createEdge [RETURN_TYPE] void   Node fromNode Branch branch Node toNode [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  Branch  branch  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[buglab_swap_variables]^cfg.connectIfNotFound ( fromNode, toNode, branch ) ;^796^^^^^792^797^cfg.connectIfNotFound ( fromNode, branch, toNode ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] createEdge [RETURN_TYPE] void   Node fromNode Branch branch Node toNode [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  Branch  branch  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[buglab_swap_variables]^cfg.connectIfNotFound ( fromNode,  toNode ) ;^796^^^^^792^797^cfg.connectIfNotFound ( fromNode, branch, toNode ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] createEdge [RETURN_TYPE] void   Node fromNode Branch branch Node toNode [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  Branch  branch  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[buglab_swap_variables]^cfg.connectIfNotFound ( fromNode, branch ) ;^796^^^^^792^797^cfg.connectIfNotFound ( fromNode, branch, toNode ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] createEdge [RETURN_TYPE] void   Node fromNode Branch branch Node toNode [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  Branch  branch  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[buglab_swap_variables]^if  ( cfgNode == lastJump )  {^821^^^^^814^827^if  ( lastJump == cfgNode )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] connectToPossibleExceptionHandler [RETURN_TYPE] void   Node cfgNode Node target [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[buglab_swap_variables]^finallyMap.put ( catchBlock, lastJump ) ;^825^^^^^814^827^finallyMap.put ( lastJump, catchBlock ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] connectToPossibleExceptionHandler [RETURN_TYPE] void   Node cfgNode Node target [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[buglab_swap_variables]^finallyMap.put (  catchBlock ) ;^825^^^^^814^827^finallyMap.put ( lastJump, catchBlock ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] connectToPossibleExceptionHandler [RETURN_TYPE] void   Node cfgNode Node target [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[buglab_swap_variables]^finallyMap.put ( lastJump ) ;^825^^^^^814^827^finallyMap.put ( lastJump, catchBlock ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] connectToPossibleExceptionHandler [RETURN_TYPE] void   Node cfgNode Node target [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[buglab_swap_variables]^createEdge ( catchBlock, Branch.ON_EX, cfgNode ) ;^822^^^^^814^827^createEdge ( cfgNode, Branch.ON_EX, catchBlock ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] connectToPossibleExceptionHandler [RETURN_TYPE] void   Node cfgNode Node target [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[buglab_swap_variables]^createEdge (  Branch.ON_EX, catchBlock ) ;^822^^^^^814^827^createEdge ( cfgNode, Branch.ON_EX, catchBlock ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] connectToPossibleExceptionHandler [RETURN_TYPE] void   Node cfgNode Node target [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[buglab_swap_variables]^createEdge ( cfgNode, Branch.ON_EX ) ;^822^^^^^814^827^createEdge ( cfgNode, Branch.ON_EX, catchBlock ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] connectToPossibleExceptionHandler [RETURN_TYPE] void   Node cfgNode Node target [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[buglab_swap_variables]^finallyMap.put ( handler, lastJump.getLastChild (  )  ) ;^818^^^^^815^819^finallyMap.put ( lastJump, handler.getLastChild (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] connectToPossibleExceptionHandler [RETURN_TYPE] void   Node cfgNode Node target [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[buglab_swap_variables]^finallyMap.put (  handler.getLastChild (  )  ) ;^818^^^^^815^819^finallyMap.put ( lastJump, handler.getLastChild (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] connectToPossibleExceptionHandler [RETURN_TYPE] void   Node cfgNode Node target [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[buglab_swap_variables]^finallyMap.put ( lastJump.getLastChild (  )  ) ;^818^^^^^815^819^finallyMap.put ( lastJump, handler.getLastChild (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] connectToPossibleExceptionHandler [RETURN_TYPE] void   Node cfgNode Node target [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[buglab_swap_variables]^createEdge ( handler, Branch.ON_EX, cfgNode.getLastChild (  )  ) ;^816^^^^^804^831^createEdge ( cfgNode, Branch.ON_EX, handler.getLastChild (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] connectToPossibleExceptionHandler [RETURN_TYPE] void   Node cfgNode Node target [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[buglab_swap_variables]^createEdge (  Branch.ON_EX, handler.getLastChild (  )  ) ;^816^^^^^804^831^createEdge ( cfgNode, Branch.ON_EX, handler.getLastChild (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] connectToPossibleExceptionHandler [RETURN_TYPE] void   Node cfgNode Node target [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[buglab_swap_variables]^createEdge ( cfgNode, Branch.ON_EX.getLastChild (  )  ) ;^816^^^^^804^831^createEdge ( cfgNode, Branch.ON_EX, handler.getLastChild (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] connectToPossibleExceptionHandler [RETURN_TYPE] void   Node cfgNode Node target [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[buglab_swap_variables]^finallyMap.put ( handler, lastJump.getLastChild (  )  ) ;^818^^^^^804^831^finallyMap.put ( lastJump, handler.getLastChild (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] connectToPossibleExceptionHandler [RETURN_TYPE] void   Node cfgNode Node target [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[buglab_swap_variables]^finallyMap.put (  handler.getLastChild (  )  ) ;^818^^^^^804^831^finallyMap.put ( lastJump, handler.getLastChild (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] connectToPossibleExceptionHandler [RETURN_TYPE] void   Node cfgNode Node target [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[buglab_swap_variables]^finallyMap.put ( lastJump.getLastChild (  )  ) ;^818^^^^^804^831^finallyMap.put ( lastJump, handler.getLastChild (  )  ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] connectToPossibleExceptionHandler [RETURN_TYPE] void   Node cfgNode Node target [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[buglab_swap_variables]^if  ( cfgNode == lastJump )  {^821^^^^^804^831^if  ( lastJump == cfgNode )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] connectToPossibleExceptionHandler [RETURN_TYPE] void   Node cfgNode Node target [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[buglab_swap_variables]^finallyMap.put (  catchBlock ) ;^825^^^^^821^826^finallyMap.put ( lastJump, catchBlock ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] connectToPossibleExceptionHandler [RETURN_TYPE] void   Node cfgNode Node target [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[buglab_swap_variables]^finallyMap.put ( catchBlock, lastJump ) ;^825^^^^^821^826^finallyMap.put ( lastJump, catchBlock ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] connectToPossibleExceptionHandler [RETURN_TYPE] void   Node cfgNode Node target [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[buglab_swap_variables]^finallyMap.put ( lastJump ) ;^825^^^^^821^826^finallyMap.put ( lastJump, catchBlock ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] connectToPossibleExceptionHandler [RETURN_TYPE] void   Node cfgNode Node target [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[buglab_swap_variables]^createEdge ( catchBlock, Branch.ON_EX, cfgNode ) ;^822^^^^^804^831^createEdge ( cfgNode, Branch.ON_EX, catchBlock ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] connectToPossibleExceptionHandler [RETURN_TYPE] void   Node cfgNode Node target [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[buglab_swap_variables]^createEdge (  Branch.ON_EX, catchBlock ) ;^822^^^^^804^831^createEdge ( cfgNode, Branch.ON_EX, catchBlock ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] connectToPossibleExceptionHandler [RETURN_TYPE] void   Node cfgNode Node target [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[buglab_swap_variables]^createEdge ( cfgNode, Branch.ON_EX ) ;^822^^^^^804^831^createEdge ( cfgNode, Branch.ON_EX, catchBlock ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] connectToPossibleExceptionHandler [RETURN_TYPE] void   Node cfgNode Node target [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[buglab_swap_variables]^finallyMap.put ( catchBlock, lastJump ) ;^825^^^^^804^831^finallyMap.put ( lastJump, catchBlock ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] connectToPossibleExceptionHandler [RETURN_TYPE] void   Node cfgNode Node target [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[buglab_swap_variables]^finallyMap.put (  catchBlock ) ;^825^^^^^804^831^finallyMap.put ( lastJump, catchBlock ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] connectToPossibleExceptionHandler [RETURN_TYPE] void   Node cfgNode Node target [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[buglab_swap_variables]^finallyMap.put ( lastJump ) ;^825^^^^^804^831^finallyMap.put ( lastJump, catchBlock ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] connectToPossibleExceptionHandler [RETURN_TYPE] void   Node cfgNode Node target [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[buglab_swap_variables]^if  ( cfgNode == lastJump )  {^815^^^^^804^831^if  ( lastJump == cfgNode )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] connectToPossibleExceptionHandler [RETURN_TYPE] void   Node cfgNode Node target [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  
[buglab_swap_variables]^if  ( type.getType (  )  == c )  {^839^^^^^836^845^if  ( c.getType (  )  == type )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] getNextSiblingOfType [RETURN_TYPE] Node   Node first  types [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  c  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  first  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  int[]  types  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  type  Comparator  priorityComparator  
[buglab_swap_variables]^for  ( Node first = c; c != null; c = c.getNext (  )  )  {^837^^^^^836^845^for  ( Node c = first; c != null; c = c.getNext (  )  )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] getNextSiblingOfType [RETURN_TYPE] Node   Node first  types [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  c  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  first  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  int[]  types  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  type  Comparator  priorityComparator  
[buglab_swap_variables]^return isBreakStructure ( parent, label != null )  && matchLabel ( target, label ) ;^853^^^^^851^854^return isBreakStructure ( target, label != null )  && matchLabel ( parent, label ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] isBreakTarget [RETURN_TYPE] boolean   Node target Node parent String label [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  c  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  first  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  type  Comparator  priorityComparator  
[buglab_swap_variables]^return isBreakStructure (  label != null )  && matchLabel ( parent, label ) ;^853^^^^^851^854^return isBreakStructure ( target, label != null )  && matchLabel ( parent, label ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] isBreakTarget [RETURN_TYPE] boolean   Node target Node parent String label [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  c  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  first  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  type  Comparator  priorityComparator  
[buglab_swap_variables]^return isBreakStructure ( label, target != null )  && matchLabel ( parent, label ) ;^853^^^^^851^854^return isBreakStructure ( target, label != null )  && matchLabel ( parent, label ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] isBreakTarget [RETURN_TYPE] boolean   Node target Node parent String label [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  c  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  first  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  type  Comparator  priorityComparator  
[buglab_swap_variables]^return isBreakStructure ( target != null )  && matchLabel ( parent, label ) ;^853^^^^^851^854^return isBreakStructure ( target, label != null )  && matchLabel ( parent, label ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] isBreakTarget [RETURN_TYPE] boolean   Node target Node parent String label [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  c  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  first  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  type  Comparator  priorityComparator  
[buglab_swap_variables]^return isBreakStructure ( target, parent != null )  && matchLabel ( label, label ) ;^853^^^^^851^854^return isBreakStructure ( target, label != null )  && matchLabel ( parent, label ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] isBreakTarget [RETURN_TYPE] boolean   Node target Node parent String label [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  c  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  first  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  type  Comparator  priorityComparator  
[buglab_swap_variables]^return isBreakStructure ( target, label != null )  && matchLabel (  label ) ;^853^^^^^851^854^return isBreakStructure ( target, label != null )  && matchLabel ( parent, label ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] isBreakTarget [RETURN_TYPE] boolean   Node target Node parent String label [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  c  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  first  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  type  Comparator  priorityComparator  
[buglab_swap_variables]^return isContinueStructure ( parent )  && matchLabel ( target, label ) ;^862^^^^^860^863^return isContinueStructure ( target )  && matchLabel ( parent, label ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] isContinueTarget [RETURN_TYPE] boolean   Node target Node parent String label [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  c  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  first  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  type  Comparator  priorityComparator  
[buglab_swap_variables]^return isContinueStructure ( target )  && matchLabel ( label, parent ) ;^862^^^^^860^863^return isContinueStructure ( target )  && matchLabel ( parent, label ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] isContinueTarget [RETURN_TYPE] boolean   Node target Node parent String label [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  c  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  first  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  type  Comparator  priorityComparator  
[buglab_swap_variables]^return isContinueStructure ( target )  && matchLabel (  label ) ;^862^^^^^860^863^return isContinueStructure ( target )  && matchLabel ( parent, label ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] isContinueTarget [RETURN_TYPE] boolean   Node target Node parent String label [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  c  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  first  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  type  Comparator  priorityComparator  
[buglab_swap_variables]^return isContinueStructure ( label )  && matchLabel ( parent, target ) ;^862^^^^^860^863^return isContinueStructure ( target )  && matchLabel ( parent, label ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] isContinueTarget [RETURN_TYPE] boolean   Node target Node parent String label [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  c  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  first  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  type  Comparator  priorityComparator  
[buglab_swap_variables]^return isContinueStructure ( target )  && matchLabel ( parent ) ;^862^^^^^860^863^return isContinueStructure ( target )  && matchLabel ( parent, label ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] isContinueTarget [RETURN_TYPE] boolean   Node target Node parent String label [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  c  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  first  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  type  Comparator  priorityComparator  
[buglab_swap_variables]^if  ( label.getFirstChild (  ) .getString (  ) .equals ( target )  )  {^873^^^^^868^879^if  ( target.getFirstChild (  ) .getString (  ) .equals ( label )  )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] matchLabel [RETURN_TYPE] boolean   Node target String label [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  c  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  first  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  String  label  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  type  Comparator  priorityComparator  
[buglab_swap_variables]^for  ( Node n = c.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  {^898^^^^^884^904^for  ( Node c = n.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  {^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] mayThrowException [RETURN_TYPE] boolean   Node n [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  c  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  first  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  type  Comparator  priorityComparator  
[buglab_swap_variables]^return getPosition ( n1 )  - getPosition ( n2 ) ;^979^^^^^964^983^return getPosition ( n2 )  - getPosition ( n1 ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] getOptionalNodeComparator [RETURN_TYPE] Comparator   boolean isForward [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  DiGraphNode  n1  n2  boolean  isForward  labeled  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  c  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  first  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  type  Comparator  priorityComparator  
[buglab_swap_variables]^return getPosition ( n2 )  - getPosition ( n1 ) ;^971^^^^^964^983^return getPosition ( n1 )  - getPosition ( n2 ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] getOptionalNodeComparator [RETURN_TYPE] Comparator   boolean isForward [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  DiGraphNode  n1  n2  boolean  isForward  labeled  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  c  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  first  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  type  Comparator  priorityComparator  
[buglab_swap_variables]^return getPosition ( n2 )  - getPosition ( n1 ) ;^971^^^^^969^972^return getPosition ( n1 )  - getPosition ( n2 ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] compare [RETURN_TYPE] int   Branch> n1 Branch> n2 [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  DiGraphNode  n1  n2  boolean  isForward  labeled  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  c  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  first  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  type  Comparator  priorityComparator  
[buglab_swap_variables]^return getPosition ( n1 )  - getPosition ( n2 ) ;^979^^^^^977^980^return getPosition ( n2 )  - getPosition ( n1 ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] compare [RETURN_TYPE] int   Branch> n1 Branch> n2 [VARIABLES] Multimap  finallyMap  AbstractCompiler  compiler  DiGraphNode  n1  n2  boolean  isForward  labeled  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  c  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  first  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  type  Comparator  priorityComparator  
[buglab_swap_variables]^Integer priority = n.get ( priorities ) ;^990^^^^^989^993^Integer priority = priorities.get ( n ) ;^[CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2  [METHOD] getPosition [RETURN_TYPE] int   Branch> n [VARIABLES] Integer  priority  Multimap  finallyMap  AbstractCompiler  compiler  DiGraphNode  n  boolean  isForward  labeled  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  c  catchBlock  cfgNode  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  first  forNode  fromNode  handler  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  target  thenBlock  toNode  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  type  Comparator  priorityComparator  
[buglab_swap_variables]^return bstPosition.get ( a.getValue (  )  )  - astPosition.get ( a.getValue (  )  ) ;^76^^^^^74^77^return astPosition.get ( a.getValue (  )  )  - astPosition.get ( b.getValue (  )  ) ;^[CLASS] 1  [METHOD] compare [RETURN_TYPE] int   Branch> a Branch> b [VARIABLES] DiGraphNode  a  b  boolean  
[buglab_swap_variables]^return b.get ( a.getValue (  )  )  - astPosition.get ( astPosition.getValue (  )  ) ;^76^^^^^74^77^return astPosition.get ( a.getValue (  )  )  - astPosition.get ( b.getValue (  )  ) ;^[CLASS] 1  [METHOD] compare [RETURN_TYPE] int   Branch> a Branch> b [VARIABLES] DiGraphNode  a  b  boolean  
[buglab_swap_variables]^return astPositionstPosition.get ( a.getValue (  )  )  - a.get ( b.getValue (  )  ) ;^76^^^^^74^77^return astPosition.get ( a.getValue (  )  )  - astPosition.get ( b.getValue (  )  ) ;^[CLASS] 1  [METHOD] compare [RETURN_TYPE] int   Branch> a Branch> b [VARIABLES] DiGraphNode  a  b  boolean  
[buglab_swap_variables]^return a.get ( astPosition.getValue (  )  )  - astPosition.get ( b.getValue (  )  ) ;^76^^^^^74^77^return astPosition.get ( a.getValue (  )  )  - astPosition.get ( b.getValue (  )  ) ;^[CLASS] 1  [METHOD] compare [RETURN_TYPE] int   Branch> a Branch> b [VARIABLES] DiGraphNode  a  b  boolean  
[buglab_swap_variables]^return getPosition ( n1 )  - getPosition ( n2 ) ;^979^^^^^964^983^return getPosition ( n2 )  - getPosition ( n1 ) ;^[CLASS] AstControlFlowGraph 1 2  [METHOD] getOptionalNodeComparator [RETURN_TYPE] Comparator   boolean isForward [VARIABLES] Map  priorities  DiGraphNode  n1  n2  boolean  isForward  
[buglab_swap_variables]^return getPosition ( n2 )  - getPosition ( n1 ) ;^971^^^^^964^983^return getPosition ( n1 )  - getPosition ( n2 ) ;^[CLASS] AstControlFlowGraph 1 2  [METHOD] getOptionalNodeComparator [RETURN_TYPE] Comparator   boolean isForward [VARIABLES] Map  priorities  DiGraphNode  n1  n2  boolean  isForward  
[buglab_swap_variables]^return getPosition ( n2 )  - getPosition ( n1 ) ;^971^^^^^969^972^return getPosition ( n1 )  - getPosition ( n2 ) ;^[CLASS] AstControlFlowGraph 1 2  [METHOD] compare [RETURN_TYPE] int   Branch> n1 Branch> n2 [VARIABLES] Map  priorities  DiGraphNode  n1  n2  boolean  
[buglab_swap_variables]^return getPosition ( n1 )  - getPosition ( n2 ) ;^979^^^^^977^980^return getPosition ( n2 )  - getPosition ( n1 ) ;^[CLASS] AstControlFlowGraph 1 2  [METHOD] compare [RETURN_TYPE] int   Branch> n1 Branch> n2 [VARIABLES] Map  priorities  DiGraphNode  n1  n2  boolean  
[buglab_swap_variables]^Integer priority = n.get ( priorities ) ;^990^^^^^989^993^Integer priority = priorities.get ( n ) ;^[CLASS] AstControlFlowGraph 1 2  [METHOD] getPosition [RETURN_TYPE] int   Branch> n [VARIABLES] Integer  priority  DiGraphNode  n  boolean  Map  priorities  
[buglab_swap_variables]^return getPosition ( n2 )  - getPosition ( n1 ) ;^971^^^^^969^972^return getPosition ( n1 )  - getPosition ( n2 ) ;^[CLASS] 1  [METHOD] compare [RETURN_TYPE] int   Branch> n1 Branch> n2 [VARIABLES] DiGraphNode  n1  n2  boolean  
[buglab_swap_variables]^return getPosition ( n1 )  - getPosition ( n2 ) ;^979^^^^^977^980^return getPosition ( n2 )  - getPosition ( n1 ) ;^[CLASS] 2  [METHOD] compare [RETURN_TYPE] int   Branch> n1 Branch> n2 [VARIABLES] DiGraphNode  n1  n2  boolean  
