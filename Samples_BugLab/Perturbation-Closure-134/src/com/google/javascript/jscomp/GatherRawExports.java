[BugLab_Variable_Misuse]^NodeTraversal.traverse ( compiler, externs, this ) ;^49^^^^^47^50^NodeTraversal.traverse ( compiler, root, this ) ;^[CLASS] GatherRawExports  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Set  exportedVariables  String  GLOBAL_THIS_NAME  boolean  Node  externs  root  
[BugLab_Argument_Swapping]^NodeTraversal.traverse ( root, compiler, this ) ;^49^^^^^47^50^NodeTraversal.traverse ( compiler, root, this ) ;^[CLASS] GatherRawExports  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Set  exportedVariables  String  GLOBAL_THIS_NAME  boolean  Node  externs  root  
[BugLab_Variable_Misuse]^Node sibling = parent.getNext (  ) ;^54^^^^^53^64^Node sibling = n.getNext (  ) ;^[CLASS] GatherRawExports  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  exportedVariables  String  GLOBAL_THIS_NAME  boolean  NodeTraversal  t  Node  n  parent  sibling  
[BugLab_Variable_Misuse]^if  ( parent != null && sibling.getType (  )  == Token.STRING && NodeUtil.isGet ( parent )  )  {^55^56^57^^^53^64^if  ( sibling != null && sibling.getType (  )  == Token.STRING && NodeUtil.isGet ( parent )  )  {^[CLASS] GatherRawExports  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  exportedVariables  String  GLOBAL_THIS_NAME  boolean  NodeTraversal  t  Node  n  parent  sibling  
[BugLab_Variable_Misuse]^if  ( sibling != null && sibling.getType (  )  == Token.STRING && NodeUtil.isGet ( n )  )  {^55^56^57^^^53^64^if  ( sibling != null && sibling.getType (  )  == Token.STRING && NodeUtil.isGet ( parent )  )  {^[CLASS] GatherRawExports  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  exportedVariables  String  GLOBAL_THIS_NAME  boolean  NodeTraversal  t  Node  n  parent  sibling  
[BugLab_Variable_Misuse]^if  ( sibling != parentull && sibling.getType (  )  == Token.STRING && NodeUtil.isGet ( parent )  )  {^55^56^57^^^53^64^if  ( sibling != null && sibling.getType (  )  == Token.STRING && NodeUtil.isGet ( parent )  )  {^[CLASS] GatherRawExports  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  exportedVariables  String  GLOBAL_THIS_NAME  boolean  NodeTraversal  t  Node  n  parent  sibling  
[BugLab_Argument_Swapping]^if  ( parent != null && sibling.getType (  )  == Token.STRING && NodeUtil.isGet ( sibling )  )  {^55^56^57^^^53^64^if  ( sibling != null && sibling.getType (  )  == Token.STRING && NodeUtil.isGet ( parent )  )  {^[CLASS] GatherRawExports  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  exportedVariables  String  GLOBAL_THIS_NAME  boolean  NodeTraversal  t  Node  n  parent  sibling  
[BugLab_Argument_Swapping]^if  ( sibling != parentull && sibling.getType (  )  == Token.STRING && NodeUtil.isGet ( n )  )  {^55^56^57^^^53^64^if  ( sibling != null && sibling.getType (  )  == Token.STRING && NodeUtil.isGet ( parent )  )  {^[CLASS] GatherRawExports  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  exportedVariables  String  GLOBAL_THIS_NAME  boolean  NodeTraversal  t  Node  n  parent  sibling  
[BugLab_Wrong_Operator]^if  ( sibling != null || sibling.getType (  )  == Token.STRING && NodeUtil.isGet ( parent )  )  {^55^56^57^^^53^64^if  ( sibling != null && sibling.getType (  )  == Token.STRING && NodeUtil.isGet ( parent )  )  {^[CLASS] GatherRawExports  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  exportedVariables  String  GLOBAL_THIS_NAME  boolean  NodeTraversal  t  Node  n  parent  sibling  
[BugLab_Wrong_Operator]^if  ( sibling == null && sibling.getType (  )  == Token.STRING && NodeUtil.isGet ( parent )  )  {^55^56^57^^^53^64^if  ( sibling != null && sibling.getType (  )  == Token.STRING && NodeUtil.isGet ( parent )  )  {^[CLASS] GatherRawExports  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  exportedVariables  String  GLOBAL_THIS_NAME  boolean  NodeTraversal  t  Node  n  parent  sibling  
[BugLab_Wrong_Operator]^if  ( sibling != null && sibling.getType (  )  != Token.STRING && NodeUtil.isGet ( parent )  )  {^55^56^57^^^53^64^if  ( sibling != null && sibling.getType (  )  == Token.STRING && NodeUtil.isGet ( parent )  )  {^[CLASS] GatherRawExports  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  exportedVariables  String  GLOBAL_THIS_NAME  boolean  NodeTraversal  t  Node  n  parent  sibling  
[BugLab_Variable_Misuse]^exportedVariables.add ( parent.getString (  )  ) ;^61^^^^^53^64^exportedVariables.add ( sibling.getString (  )  ) ;^[CLASS] GatherRawExports  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  exportedVariables  String  GLOBAL_THIS_NAME  boolean  NodeTraversal  t  Node  n  parent  sibling  
[BugLab_Variable_Misuse]^if  ( isGlobalThisObject ( t, sibling )  )  {^60^^^^^53^64^if  ( isGlobalThisObject ( t, n )  )  {^[CLASS] GatherRawExports  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  exportedVariables  String  GLOBAL_THIS_NAME  boolean  NodeTraversal  t  Node  n  parent  sibling  
[BugLab_Argument_Swapping]^if  ( isGlobalThisObject ( n, t )  )  {^60^^^^^53^64^if  ( isGlobalThisObject ( t, n )  )  {^[CLASS] GatherRawExports  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  exportedVariables  String  GLOBAL_THIS_NAME  boolean  NodeTraversal  t  Node  n  parent  sibling  
[BugLab_Variable_Misuse]^if  ( isGlobalThisObject ( t, parent )  )  {^60^^^^^53^64^if  ( isGlobalThisObject ( t, n )  )  {^[CLASS] GatherRawExports  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  exportedVariables  String  GLOBAL_THIS_NAME  boolean  NodeTraversal  t  Node  n  parent  sibling  
[BugLab_Variable_Misuse]^&& parent.getType (  )  == Token.STRING && NodeUtil.isGet ( parent )  )  {^56^57^^^^53^64^&& sibling.getType (  )  == Token.STRING && NodeUtil.isGet ( parent )  )  {^[CLASS] GatherRawExports  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  exportedVariables  String  GLOBAL_THIS_NAME  boolean  NodeTraversal  t  Node  n  parent  sibling  
[BugLab_Variable_Misuse]^&& NodeUtil.isGet ( sibling )  )  {^57^^^^^53^64^&& NodeUtil.isGet ( parent )  )  {^[CLASS] GatherRawExports  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  exportedVariables  String  GLOBAL_THIS_NAME  boolean  NodeTraversal  t  Node  n  parent  sibling  
[BugLab_Wrong_Operator]^if  ( n.getType (  )  != Token.THIS )  {^67^^^^^66^76^if  ( n.getType (  )  == Token.THIS )  {^[CLASS] GatherRawExports  [METHOD] isGlobalThisObject [RETURN_TYPE] boolean   NodeTraversal t Node n [VARIABLES] AbstractCompiler  compiler  Set  exportedVariables  String  GLOBAL_THIS_NAME  varName  boolean  NodeTraversal  t  Node  n  
[BugLab_Wrong_Operator]^if  ( n.getType (  )  >= Token.THIS )  {^67^^^^^66^76^if  ( n.getType (  )  == Token.THIS )  {^[CLASS] GatherRawExports  [METHOD] isGlobalThisObject [RETURN_TYPE] boolean   NodeTraversal t Node n [VARIABLES] AbstractCompiler  compiler  Set  exportedVariables  String  GLOBAL_THIS_NAME  varName  boolean  NodeTraversal  t  Node  n  
[BugLab_Wrong_Operator]^} else if  ( n.getType (  )  == Token.NAME || !NodeUtil.isLabelName ( n )  )  {^69^^^^^66^76^} else if  ( n.getType (  )  == Token.NAME && !NodeUtil.isLabelName ( n )  )  {^[CLASS] GatherRawExports  [METHOD] isGlobalThisObject [RETURN_TYPE] boolean   NodeTraversal t Node n [VARIABLES] AbstractCompiler  compiler  Set  exportedVariables  String  GLOBAL_THIS_NAME  varName  boolean  NodeTraversal  t  Node  n  
[BugLab_Wrong_Operator]^} else if  ( n.getType (  )  <= Token.NAME && !NodeUtil.isLabelName ( n )  )  {^69^^^^^66^76^} else if  ( n.getType (  )  == Token.NAME && !NodeUtil.isLabelName ( n )  )  {^[CLASS] GatherRawExports  [METHOD] isGlobalThisObject [RETURN_TYPE] boolean   NodeTraversal t Node n [VARIABLES] AbstractCompiler  compiler  Set  exportedVariables  String  GLOBAL_THIS_NAME  varName  boolean  NodeTraversal  t  Node  n  
[BugLab_Argument_Swapping]^if  ( GLOBAL_THIS_NAME.equals ( varName )  )  {^71^^^^^66^76^if  ( varName.equals ( GLOBAL_THIS_NAME )  )  {^[CLASS] GatherRawExports  [METHOD] isGlobalThisObject [RETURN_TYPE] boolean   NodeTraversal t Node n [VARIABLES] AbstractCompiler  compiler  Set  exportedVariables  String  GLOBAL_THIS_NAME  varName  boolean  NodeTraversal  t  Node  n  
[BugLab_Wrong_Literal]^return false;^72^^^^^66^76^return true;^[CLASS] GatherRawExports  [METHOD] isGlobalThisObject [RETURN_TYPE] boolean   NodeTraversal t Node n [VARIABLES] AbstractCompiler  compiler  Set  exportedVariables  String  GLOBAL_THIS_NAME  varName  boolean  NodeTraversal  t  Node  n  
[BugLab_Wrong_Operator]^} else if  ( n.getType (  )  >= Token.NAME && !NodeUtil.isLabelName ( n )  )  {^69^^^^^66^76^} else if  ( n.getType (  )  == Token.NAME && !NodeUtil.isLabelName ( n )  )  {^[CLASS] GatherRawExports  [METHOD] isGlobalThisObject [RETURN_TYPE] boolean   NodeTraversal t Node n [VARIABLES] AbstractCompiler  compiler  Set  exportedVariables  String  GLOBAL_THIS_NAME  varName  boolean  NodeTraversal  t  Node  n  
[BugLab_Wrong_Literal]^return true;^75^^^^^66^76^return false;^[CLASS] GatherRawExports  [METHOD] isGlobalThisObject [RETURN_TYPE] boolean   NodeTraversal t Node n [VARIABLES] AbstractCompiler  compiler  Set  exportedVariables  String  GLOBAL_THIS_NAME  varName  boolean  NodeTraversal  t  Node  n  
