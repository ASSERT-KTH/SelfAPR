[BugLab_Wrong_Literal]^private static int totalNodes = 1;^347^^^^^342^352^private static int totalNodes = 0;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge   [VARIABLES] 
[BugLab_Variable_Misuse]^this.value = value;^355^^^^^354^357^this.value = nodeValue;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] <init> [RETURN_TYPE] LinkedDirectedGraph$LinkedDirectedGraphNode(N)   N nodeValue [VARIABLES] DiGraphNode  destNode  sourceNode  boolean  E  value  Iterator  in  out  List  inEdgeList  outEdgeList  Map  nodes  N  nodeValue  value  Annotation  annotation  int  id  totalNodes  
[BugLab_Variable_Misuse]^this.value = value;^456^^^^^454^459^this.value = edgeValue;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] <init> [RETURN_TYPE] DiGraphNode)   DiGraphNode<N, E> sourceNode E edgeValue DiGraphNode<N, E> destNode [VARIABLES] DiGraphNode  destNode  sourceNode  boolean  E  edgeValue  value  Iterator  in  out  List  inEdgeList  outEdgeList  Map  nodes  N  nodeValue  value  Annotation  annotation  int  id  totalNodes  
[BugLab_Variable_Misuse]^DiGraphNode<N, E> node = getDirectedGraphNode ( value ) ;^50^^^^^49^67^DiGraphNode<N, E> node = getDirectedGraphNode ( srcValue ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] connect [RETURN_TYPE] GraphEdge   N srcValue E edgeValue N destValue [VARIABLES] LinkedDirectedGraphEdge  edge  LinkedDirectedGraphNode  dest  src  DiGraphNode  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  in  out  List  inEdgeList  outEdgeList  Map  nodes  N  destValue  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[BugLab_Wrong_Operator]^if  ( node != null )  {^51^^^^^49^67^if  ( node == null )  {^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] connect [RETURN_TYPE] GraphEdge   N srcValue E edgeValue N destValue [VARIABLES] LinkedDirectedGraphEdge  edge  LinkedDirectedGraphNode  dest  src  DiGraphNode  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  in  out  List  inEdgeList  outEdgeList  Map  nodes  N  destValue  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[BugLab_Variable_Misuse]^throw new IllegalArgumentException ( value + " does not exist in graph" ) ;^52^53^^^^49^67^throw new IllegalArgumentException ( srcValue + " does not exist in graph" ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] connect [RETURN_TYPE] GraphEdge   N srcValue E edgeValue N destValue [VARIABLES] LinkedDirectedGraphEdge  edge  LinkedDirectedGraphNode  dest  src  DiGraphNode  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  in  out  List  inEdgeList  outEdgeList  Map  nodes  N  destValue  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[BugLab_Wrong_Operator]^throw new IllegalArgumentException ( srcValue   instanceof   " does not exist in graph" ) ;^52^53^^^^49^67^throw new IllegalArgumentException ( srcValue + " does not exist in graph" ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] connect [RETURN_TYPE] GraphEdge   N srcValue E edgeValue N destValue [VARIABLES] LinkedDirectedGraphEdge  edge  LinkedDirectedGraphNode  dest  src  DiGraphNode  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  in  out  List  inEdgeList  outEdgeList  Map  nodes  N  destValue  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[BugLab_Wrong_Operator]^throw new IllegalArgumentException ( srcValue  |  " does not exist in graph" ) ;^52^53^^^^49^67^throw new IllegalArgumentException ( srcValue + " does not exist in graph" ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] connect [RETURN_TYPE] GraphEdge   N srcValue E edgeValue N destValue [VARIABLES] LinkedDirectedGraphEdge  edge  LinkedDirectedGraphNode  dest  src  DiGraphNode  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  in  out  List  inEdgeList  outEdgeList  Map  nodes  N  destValue  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[BugLab_Wrong_Operator]^throw new IllegalArgumentException ( srcValue  ||  " does not exist in graph" ) ;^52^53^^^^49^67^throw new IllegalArgumentException ( srcValue + " does not exist in graph" ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] connect [RETURN_TYPE] GraphEdge   N srcValue E edgeValue N destValue [VARIABLES] LinkedDirectedGraphEdge  edge  LinkedDirectedGraphNode  dest  src  DiGraphNode  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  in  out  List  inEdgeList  outEdgeList  Map  nodes  N  destValue  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[BugLab_Wrong_Operator]^throw new IllegalArgumentException ( srcValue  &  " does not exist in graph" ) ;^52^53^^^^49^67^throw new IllegalArgumentException ( srcValue + " does not exist in graph" ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] connect [RETURN_TYPE] GraphEdge   N srcValue E edgeValue N destValue [VARIABLES] LinkedDirectedGraphEdge  edge  LinkedDirectedGraphNode  dest  src  DiGraphNode  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  in  out  List  inEdgeList  outEdgeList  Map  nodes  N  destValue  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[BugLab_Variable_Misuse]^node = getDirectedGraphNode ( value ) ;^56^^^^^49^67^node = getDirectedGraphNode ( destValue ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] connect [RETURN_TYPE] GraphEdge   N srcValue E edgeValue N destValue [VARIABLES] LinkedDirectedGraphEdge  edge  LinkedDirectedGraphNode  dest  src  DiGraphNode  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  in  out  List  inEdgeList  outEdgeList  Map  nodes  N  destValue  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[BugLab_Wrong_Operator]^if  ( node != null )  {^57^^^^^49^67^if  ( node == null )  {^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] connect [RETURN_TYPE] GraphEdge   N srcValue E edgeValue N destValue [VARIABLES] LinkedDirectedGraphEdge  edge  LinkedDirectedGraphNode  dest  src  DiGraphNode  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  in  out  List  inEdgeList  outEdgeList  Map  nodes  N  destValue  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[BugLab_Wrong_Operator]^throw new IllegalArgumentException ( destValue  <=  " does not exist in graph" ) ;^58^59^^^^49^67^throw new IllegalArgumentException ( destValue + " does not exist in graph" ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] connect [RETURN_TYPE] GraphEdge   N srcValue E edgeValue N destValue [VARIABLES] LinkedDirectedGraphEdge  edge  LinkedDirectedGraphNode  dest  src  DiGraphNode  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  in  out  List  inEdgeList  outEdgeList  Map  nodes  N  destValue  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[BugLab_Variable_Misuse]^throw new IllegalArgumentException ( value + " does not exist in graph" ) ;^58^59^^^^49^67^throw new IllegalArgumentException ( destValue + " does not exist in graph" ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] connect [RETURN_TYPE] GraphEdge   N srcValue E edgeValue N destValue [VARIABLES] LinkedDirectedGraphEdge  edge  LinkedDirectedGraphNode  dest  src  DiGraphNode  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  in  out  List  inEdgeList  outEdgeList  Map  nodes  N  destValue  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[BugLab_Wrong_Operator]^throw new IllegalArgumentException ( destValue  >  " does not exist in graph" ) ;^58^59^^^^49^67^throw new IllegalArgumentException ( destValue + " does not exist in graph" ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] connect [RETURN_TYPE] GraphEdge   N srcValue E edgeValue N destValue [VARIABLES] LinkedDirectedGraphEdge  edge  LinkedDirectedGraphNode  dest  src  DiGraphNode  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  in  out  List  inEdgeList  outEdgeList  Map  nodes  N  destValue  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[BugLab_Wrong_Operator]^throw new IllegalArgumentException ( destValue  <  " does not exist in graph" ) ;^58^59^^^^49^67^throw new IllegalArgumentException ( destValue + " does not exist in graph" ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] connect [RETURN_TYPE] GraphEdge   N srcValue E edgeValue N destValue [VARIABLES] LinkedDirectedGraphEdge  edge  LinkedDirectedGraphNode  dest  src  DiGraphNode  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  in  out  List  inEdgeList  outEdgeList  Map  nodes  N  destValue  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[BugLab_Wrong_Operator]^throw new IllegalArgumentException ( destValue  ==  " does not exist in graph" ) ;^58^59^^^^49^67^throw new IllegalArgumentException ( destValue + " does not exist in graph" ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] connect [RETURN_TYPE] GraphEdge   N srcValue E edgeValue N destValue [VARIABLES] LinkedDirectedGraphEdge  edge  LinkedDirectedGraphNode  dest  src  DiGraphNode  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  in  out  List  inEdgeList  outEdgeList  Map  nodes  N  destValue  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[BugLab_Variable_Misuse]^new LinkedDirectedGraphEdge<N, E> ( src, value, dest ) ;^63^^^^^49^67^new LinkedDirectedGraphEdge<N, E> ( src, edgeValue, dest ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] connect [RETURN_TYPE] GraphEdge   N srcValue E edgeValue N destValue [VARIABLES] LinkedDirectedGraphEdge  edge  LinkedDirectedGraphNode  dest  src  DiGraphNode  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  in  out  List  inEdgeList  outEdgeList  Map  nodes  N  destValue  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[BugLab_Argument_Swapping]^new LinkedDirectedGraphEdge<N, E> ( dest, edgeValue, src ) ;^63^^^^^49^67^new LinkedDirectedGraphEdge<N, E> ( src, edgeValue, dest ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] connect [RETURN_TYPE] GraphEdge   N srcValue E edgeValue N destValue [VARIABLES] LinkedDirectedGraphEdge  edge  LinkedDirectedGraphNode  dest  src  DiGraphNode  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  in  out  List  inEdgeList  outEdgeList  Map  nodes  N  destValue  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[BugLab_Argument_Swapping]^new LinkedDirectedGraphEdge<N, E> ( edgeValue, src, dest ) ;^63^^^^^49^67^new LinkedDirectedGraphEdge<N, E> ( src, edgeValue, dest ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] connect [RETURN_TYPE] GraphEdge   N srcValue E edgeValue N destValue [VARIABLES] LinkedDirectedGraphEdge  edge  LinkedDirectedGraphNode  dest  src  DiGraphNode  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  in  out  List  inEdgeList  outEdgeList  Map  nodes  N  destValue  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[BugLab_Variable_Misuse]^LinkedDirectedGraphEdge<N, E> edge = new LinkedDirectedGraphEdge<N, E> ( src, value, dest ) ;^62^63^^^^49^67^LinkedDirectedGraphEdge<N, E> edge = new LinkedDirectedGraphEdge<N, E> ( src, edgeValue, dest ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] connect [RETURN_TYPE] GraphEdge   N srcValue E edgeValue N destValue [VARIABLES] LinkedDirectedGraphEdge  edge  LinkedDirectedGraphNode  dest  src  DiGraphNode  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  in  out  List  inEdgeList  outEdgeList  Map  nodes  N  destValue  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[BugLab_Argument_Swapping]^LinkedDirectedGraphEdge<N, E> edge = new LinkedDirectedGraphEdge<N, E> ( dest, edgeValue, src ) ;^62^63^^^^49^67^LinkedDirectedGraphEdge<N, E> edge = new LinkedDirectedGraphEdge<N, E> ( src, edgeValue, dest ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] connect [RETURN_TYPE] GraphEdge   N srcValue E edgeValue N destValue [VARIABLES] LinkedDirectedGraphEdge  edge  LinkedDirectedGraphNode  dest  src  DiGraphNode  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  in  out  List  inEdgeList  outEdgeList  Map  nodes  N  destValue  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[BugLab_Argument_Swapping]^LinkedDirectedGraphEdge<N, E> edge = new LinkedDirectedGraphEdge<N, E> ( src, dest, edgeValue ) ;^62^63^^^^49^67^LinkedDirectedGraphEdge<N, E> edge = new LinkedDirectedGraphEdge<N, E> ( src, edgeValue, dest ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] connect [RETURN_TYPE] GraphEdge   N srcValue E edgeValue N destValue [VARIABLES] LinkedDirectedGraphEdge  edge  LinkedDirectedGraphNode  dest  src  DiGraphNode  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  in  out  List  inEdgeList  outEdgeList  Map  nodes  N  destValue  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[BugLab_Variable_Misuse]^disconnectInDirection ( value, n2 ) ;^71^^^^^70^73^disconnectInDirection ( n1, n2 ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] disconnect [RETURN_TYPE] void   N n1 N n2 [VARIABLES] DiGraphNode  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  in  out  List  inEdgeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[BugLab_Variable_Misuse]^disconnectInDirection ( n1, value ) ;^71^^^^^70^73^disconnectInDirection ( n1, n2 ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] disconnect [RETURN_TYPE] void   N n1 N n2 [VARIABLES] DiGraphNode  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  in  out  List  inEdgeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[BugLab_Argument_Swapping]^disconnectInDirection ( n2, n1 ) ;^71^^^^^70^73^disconnectInDirection ( n1, n2 ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] disconnect [RETURN_TYPE] void   N n1 N n2 [VARIABLES] DiGraphNode  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  in  out  List  inEdgeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[BugLab_Variable_Misuse]^disconnectInDirection ( n2, value ) ;^72^^^^^70^73^disconnectInDirection ( n2, n1 ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] disconnect [RETURN_TYPE] void   N n1 N n2 [VARIABLES] DiGraphNode  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  in  out  List  inEdgeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[BugLab_Argument_Swapping]^disconnectInDirection ( n1, n2 ) ;^72^^^^^70^73^disconnectInDirection ( n2, n1 ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] disconnect [RETURN_TYPE] void   N n1 N n2 [VARIABLES] DiGraphNode  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  in  out  List  inEdgeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[BugLab_Variable_Misuse]^DiGraphNode<N, E> node = getDirectedGraphNode ( value ) ;^77^^^^^76^93^DiGraphNode<N, E> node = getDirectedGraphNode ( srcValue ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] disconnectInDirection [RETURN_TYPE] void   N srcValue N destValue [VARIABLES] LinkedDirectedGraphNode  dest  src  DiGraphNode  destNode  node  sourceNode  DiGraphEdge  edge  boolean  E  edgeValue  value  Iterator  in  out  List  inEdgeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[BugLab_Wrong_Operator]^if  ( node != null )  {^78^^^^^76^93^if  ( node == null )  {^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] disconnectInDirection [RETURN_TYPE] void   N srcValue N destValue [VARIABLES] LinkedDirectedGraphNode  dest  src  DiGraphNode  destNode  node  sourceNode  DiGraphEdge  edge  boolean  E  edgeValue  value  Iterator  in  out  List  inEdgeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[BugLab_Variable_Misuse]^throw new IllegalArgumentException ( nodeValue + " does not exist in graph" ) ;^79^80^^^^76^93^throw new IllegalArgumentException ( srcValue + " does not exist in graph" ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] disconnectInDirection [RETURN_TYPE] void   N srcValue N destValue [VARIABLES] LinkedDirectedGraphNode  dest  src  DiGraphNode  destNode  node  sourceNode  DiGraphEdge  edge  boolean  E  edgeValue  value  Iterator  in  out  List  inEdgeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[BugLab_Wrong_Operator]^throw new IllegalArgumentException ( srcValue  ^  " does not exist in graph" ) ;^79^80^^^^76^93^throw new IllegalArgumentException ( srcValue + " does not exist in graph" ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] disconnectInDirection [RETURN_TYPE] void   N srcValue N destValue [VARIABLES] LinkedDirectedGraphNode  dest  src  DiGraphNode  destNode  node  sourceNode  DiGraphEdge  edge  boolean  E  edgeValue  value  Iterator  in  out  List  inEdgeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[BugLab_Wrong_Operator]^throw new IllegalArgumentException ( srcValue  <<  " does not exist in graph" ) ;^79^80^^^^76^93^throw new IllegalArgumentException ( srcValue + " does not exist in graph" ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] disconnectInDirection [RETURN_TYPE] void   N srcValue N destValue [VARIABLES] LinkedDirectedGraphNode  dest  src  DiGraphNode  destNode  node  sourceNode  DiGraphEdge  edge  boolean  E  edgeValue  value  Iterator  in  out  List  inEdgeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[BugLab_Variable_Misuse]^throw new IllegalArgumentException ( value + " does not exist in graph" ) ;^79^80^^^^76^93^throw new IllegalArgumentException ( srcValue + " does not exist in graph" ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] disconnectInDirection [RETURN_TYPE] void   N srcValue N destValue [VARIABLES] LinkedDirectedGraphNode  dest  src  DiGraphNode  destNode  node  sourceNode  DiGraphEdge  edge  boolean  E  edgeValue  value  Iterator  in  out  List  inEdgeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[BugLab_Wrong_Operator]^throw new IllegalArgumentException ( srcValue  ==  " does not exist in graph" ) ;^79^80^^^^76^93^throw new IllegalArgumentException ( srcValue + " does not exist in graph" ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] disconnectInDirection [RETURN_TYPE] void   N srcValue N destValue [VARIABLES] LinkedDirectedGraphNode  dest  src  DiGraphNode  destNode  node  sourceNode  DiGraphEdge  edge  boolean  E  edgeValue  value  Iterator  in  out  List  inEdgeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[BugLab_Variable_Misuse]^node = getDirectedGraphNode ( value ) ;^83^^^^^76^93^node = getDirectedGraphNode ( destValue ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] disconnectInDirection [RETURN_TYPE] void   N srcValue N destValue [VARIABLES] LinkedDirectedGraphNode  dest  src  DiGraphNode  destNode  node  sourceNode  DiGraphEdge  edge  boolean  E  edgeValue  value  Iterator  in  out  List  inEdgeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[BugLab_Wrong_Operator]^if  ( node != null )  {^84^^^^^76^93^if  ( node == null )  {^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] disconnectInDirection [RETURN_TYPE] void   N srcValue N destValue [VARIABLES] LinkedDirectedGraphNode  dest  src  DiGraphNode  destNode  node  sourceNode  DiGraphEdge  edge  boolean  E  edgeValue  value  Iterator  in  out  List  inEdgeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[BugLab_Wrong_Operator]^throw new IllegalArgumentException ( destValue  ||  " does not exist in graph" ) ;^85^86^^^^76^93^throw new IllegalArgumentException ( destValue + " does not exist in graph" ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] disconnectInDirection [RETURN_TYPE] void   N srcValue N destValue [VARIABLES] LinkedDirectedGraphNode  dest  src  DiGraphNode  destNode  node  sourceNode  DiGraphEdge  edge  boolean  E  edgeValue  value  Iterator  in  out  List  inEdgeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[BugLab_Variable_Misuse]^throw new IllegalArgumentException ( value + " does not exist in graph" ) ;^85^86^^^^76^93^throw new IllegalArgumentException ( destValue + " does not exist in graph" ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] disconnectInDirection [RETURN_TYPE] void   N srcValue N destValue [VARIABLES] LinkedDirectedGraphNode  dest  src  DiGraphNode  destNode  node  sourceNode  DiGraphEdge  edge  boolean  E  edgeValue  value  Iterator  in  out  List  inEdgeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[BugLab_Wrong_Operator]^throw new IllegalArgumentException ( destValue  ==  " does not exist in graph" ) ;^85^86^^^^76^93^throw new IllegalArgumentException ( destValue + " does not exist in graph" ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] disconnectInDirection [RETURN_TYPE] void   N srcValue N destValue [VARIABLES] LinkedDirectedGraphNode  dest  src  DiGraphNode  destNode  node  sourceNode  DiGraphEdge  edge  boolean  E  edgeValue  value  Iterator  in  out  List  inEdgeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[BugLab_Wrong_Operator]^throw new IllegalArgumentException ( destValue  >=  " does not exist in graph" ) ;^85^86^^^^76^93^throw new IllegalArgumentException ( destValue + " does not exist in graph" ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] disconnectInDirection [RETURN_TYPE] void   N srcValue N destValue [VARIABLES] LinkedDirectedGraphNode  dest  src  DiGraphNode  destNode  node  sourceNode  DiGraphEdge  edge  boolean  E  edgeValue  value  Iterator  in  out  List  inEdgeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[BugLab_Variable_Misuse]^throw new IllegalArgumentException ( srcValue + " does not exist in graph" ) ;^85^86^^^^76^93^throw new IllegalArgumentException ( destValue + " does not exist in graph" ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] disconnectInDirection [RETURN_TYPE] void   N srcValue N destValue [VARIABLES] LinkedDirectedGraphNode  dest  src  DiGraphNode  destNode  node  sourceNode  DiGraphEdge  edge  boolean  E  edgeValue  value  Iterator  in  out  List  inEdgeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[BugLab_Wrong_Operator]^throw new IllegalArgumentException ( destValue  <  " does not exist in graph" ) ;^85^86^^^^76^93^throw new IllegalArgumentException ( destValue + " does not exist in graph" ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] disconnectInDirection [RETURN_TYPE] void   N srcValue N destValue [VARIABLES] LinkedDirectedGraphNode  dest  src  DiGraphNode  destNode  node  sourceNode  DiGraphEdge  edge  boolean  E  edgeValue  value  Iterator  in  out  List  inEdgeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[BugLab_Variable_Misuse]^for  ( DiGraphEdge<?, E> edge : getDirectedGraphEdges ( value, destValue )  )  {^89^^^^^76^93^for  ( DiGraphEdge<?, E> edge : getDirectedGraphEdges ( srcValue, destValue )  )  {^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] disconnectInDirection [RETURN_TYPE] void   N srcValue N destValue [VARIABLES] LinkedDirectedGraphNode  dest  src  DiGraphNode  destNode  node  sourceNode  DiGraphEdge  edge  boolean  E  edgeValue  value  Iterator  in  out  List  inEdgeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[BugLab_Variable_Misuse]^for  ( DiGraphEdge<?, E> edge : getDirectedGraphEdges ( srcValue, value )  )  {^89^^^^^76^93^for  ( DiGraphEdge<?, E> edge : getDirectedGraphEdges ( srcValue, destValue )  )  {^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] disconnectInDirection [RETURN_TYPE] void   N srcValue N destValue [VARIABLES] LinkedDirectedGraphNode  dest  src  DiGraphNode  destNode  node  sourceNode  DiGraphEdge  edge  boolean  E  edgeValue  value  Iterator  in  out  List  inEdgeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[BugLab_Argument_Swapping]^for  ( DiGraphEdge<?, E> edge : getDirectedGraphEdges ( destValue, srcValue )  )  {^89^^^^^76^93^for  ( DiGraphEdge<?, E> edge : getDirectedGraphEdges ( srcValue, destValue )  )  {^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] disconnectInDirection [RETURN_TYPE] void   N srcValue N destValue [VARIABLES] LinkedDirectedGraphNode  dest  src  DiGraphNode  destNode  node  sourceNode  DiGraphEdge  edge  boolean  E  edgeValue  value  Iterator  in  out  List  inEdgeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[BugLab_Variable_Misuse]^return nodes.get ( srcValue ) ;^104^^^^^103^105^return nodes.get ( nodeValue ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getDirectedGraphNode [RETURN_TYPE] DiGraphNode   N nodeValue [VARIABLES] DiGraphNode  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  in  out  List  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[BugLab_Argument_Swapping]^return nodeValue.get ( nodes ) ;^104^^^^^103^105^return nodes.get ( nodeValue ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getDirectedGraphNode [RETURN_TYPE] DiGraphNode   N nodeValue [VARIABLES] DiGraphNode  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  in  out  List  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[BugLab_Variable_Misuse]^return nodes.get ( value ) ;^104^^^^^103^105^return nodes.get ( nodeValue ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getDirectedGraphNode [RETURN_TYPE] DiGraphNode   N nodeValue [VARIABLES] DiGraphNode  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  in  out  List  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[BugLab_Variable_Misuse]^return getDirectedGraphNode ( srcValue ) ;^109^^^^^108^110^return getDirectedGraphNode ( nodeValue ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getNode [RETURN_TYPE] GraphNode   N nodeValue [VARIABLES] DiGraphNode  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  in  out  List  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[BugLab_Variable_Misuse]^return getDirectedGraphNode ( value ) ;^109^^^^^108^110^return getDirectedGraphNode ( nodeValue ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getNode [RETURN_TYPE] GraphNode   N nodeValue [VARIABLES] DiGraphNode  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  in  out  List  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[BugLab_Variable_Misuse]^LinkedDirectedGraphNode<N, E> node = nodes.get ( srcValue ) ;^114^^^^^113^125^LinkedDirectedGraphNode<N, E> node = nodes.get ( nodeValue ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getInEdges [RETURN_TYPE] List   N nodeValue [VARIABLES] LinkedDirectedGraphNode  node  DiGraphNode  destNode  node  sourceNode  DiGraphEdge  edge  boolean  E  edgeValue  value  Iterator  in  out  List  edgeList  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[BugLab_Argument_Swapping]^LinkedDirectedGraphNode<N, E> node = nodeValue.get ( nodes ) ;^114^^^^^113^125^LinkedDirectedGraphNode<N, E> node = nodes.get ( nodeValue ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getInEdges [RETURN_TYPE] List   N nodeValue [VARIABLES] LinkedDirectedGraphNode  node  DiGraphNode  destNode  node  sourceNode  DiGraphEdge  edge  boolean  E  edgeValue  value  Iterator  in  out  List  edgeList  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[BugLab_Variable_Misuse]^LinkedDirectedGraphNode<N, E> node = nodes.get ( value ) ;^114^^^^^113^125^LinkedDirectedGraphNode<N, E> node = nodes.get ( nodeValue ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getInEdges [RETURN_TYPE] List   N nodeValue [VARIABLES] LinkedDirectedGraphNode  node  DiGraphNode  destNode  node  sourceNode  DiGraphEdge  edge  boolean  E  edgeValue  value  Iterator  in  out  List  edgeList  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[BugLab_Wrong_Operator]^if  ( node != null )  {^115^^^^^113^125^if  ( node == null )  {^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getInEdges [RETURN_TYPE] List   N nodeValue [VARIABLES] LinkedDirectedGraphNode  node  DiGraphNode  destNode  node  sourceNode  DiGraphEdge  edge  boolean  E  edgeValue  value  Iterator  in  out  List  edgeList  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[BugLab_Variable_Misuse]^throw new IllegalArgumentException ( value + " does not exist in graph" ) ;^116^117^^^^113^125^throw new IllegalArgumentException ( nodeValue + " does not exist in graph" ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getInEdges [RETURN_TYPE] List   N nodeValue [VARIABLES] LinkedDirectedGraphNode  node  DiGraphNode  destNode  node  sourceNode  DiGraphEdge  edge  boolean  E  edgeValue  value  Iterator  in  out  List  edgeList  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[BugLab_Wrong_Operator]^throw new IllegalArgumentException ( nodeValue  <=  " does not exist in graph" ) ;^116^117^^^^113^125^throw new IllegalArgumentException ( nodeValue + " does not exist in graph" ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getInEdges [RETURN_TYPE] List   N nodeValue [VARIABLES] LinkedDirectedGraphNode  node  DiGraphNode  destNode  node  sourceNode  DiGraphEdge  edge  boolean  E  edgeValue  value  Iterator  in  out  List  edgeList  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[BugLab_Variable_Misuse]^throw new IllegalArgumentException ( srcValue + " does not exist in graph" ) ;^116^117^^^^113^125^throw new IllegalArgumentException ( nodeValue + " does not exist in graph" ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getInEdges [RETURN_TYPE] List   N nodeValue [VARIABLES] LinkedDirectedGraphNode  node  DiGraphNode  destNode  node  sourceNode  DiGraphEdge  edge  boolean  E  edgeValue  value  Iterator  in  out  List  edgeList  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[BugLab_Wrong_Operator]^throw new IllegalArgumentException ( nodeValue  ==  " does not exist in graph" ) ;^116^117^^^^113^125^throw new IllegalArgumentException ( nodeValue + " does not exist in graph" ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getInEdges [RETURN_TYPE] List   N nodeValue [VARIABLES] LinkedDirectedGraphNode  node  DiGraphNode  destNode  node  sourceNode  DiGraphEdge  edge  boolean  E  edgeValue  value  Iterator  in  out  List  edgeList  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[BugLab_Wrong_Operator]^throw new IllegalArgumentException ( nodeValue  >=  " does not exist in graph" ) ;^116^117^^^^113^125^throw new IllegalArgumentException ( nodeValue + " does not exist in graph" ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getInEdges [RETURN_TYPE] List   N nodeValue [VARIABLES] LinkedDirectedGraphNode  node  DiGraphNode  destNode  node  sourceNode  DiGraphEdge  edge  boolean  E  edgeValue  value  Iterator  in  out  List  edgeList  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[BugLab_Wrong_Operator]^throw new IllegalArgumentException ( nodeValue  >  " does not exist in graph" ) ;^116^117^^^^113^125^throw new IllegalArgumentException ( nodeValue + " does not exist in graph" ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getInEdges [RETURN_TYPE] List   N nodeValue [VARIABLES] LinkedDirectedGraphNode  node  DiGraphNode  destNode  node  sourceNode  DiGraphEdge  edge  boolean  E  edgeValue  value  Iterator  in  out  List  edgeList  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[BugLab_Variable_Misuse]^LinkedDirectedGraphNode<N, E> node = nodes.get ( value ) ;^129^^^^^128^139^LinkedDirectedGraphNode<N, E> node = nodes.get ( nodeValue ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getOutEdges [RETURN_TYPE] List   N nodeValue [VARIABLES] LinkedDirectedGraphNode  node  DiGraphNode  destNode  node  sourceNode  DiGraphEdge  edge  boolean  E  edgeValue  value  Iterator  in  out  List  edgeList  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[BugLab_Argument_Swapping]^LinkedDirectedGraphNode<N, E> node = nodeValue.get ( nodes ) ;^129^^^^^128^139^LinkedDirectedGraphNode<N, E> node = nodes.get ( nodeValue ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getOutEdges [RETURN_TYPE] List   N nodeValue [VARIABLES] LinkedDirectedGraphNode  node  DiGraphNode  destNode  node  sourceNode  DiGraphEdge  edge  boolean  E  edgeValue  value  Iterator  in  out  List  edgeList  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[BugLab_Wrong_Operator]^if  ( node != null )  {^130^^^^^128^139^if  ( node == null )  {^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getOutEdges [RETURN_TYPE] List   N nodeValue [VARIABLES] LinkedDirectedGraphNode  node  DiGraphNode  destNode  node  sourceNode  DiGraphEdge  edge  boolean  E  edgeValue  value  Iterator  in  out  List  edgeList  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[BugLab_Variable_Misuse]^throw new IllegalArgumentException ( srcValue + " does not exist in graph" ) ;^131^132^^^^128^139^throw new IllegalArgumentException ( nodeValue + " does not exist in graph" ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getOutEdges [RETURN_TYPE] List   N nodeValue [VARIABLES] LinkedDirectedGraphNode  node  DiGraphNode  destNode  node  sourceNode  DiGraphEdge  edge  boolean  E  edgeValue  value  Iterator  in  out  List  edgeList  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[BugLab_Wrong_Operator]^throw new IllegalArgumentException ( nodeValue  >  " does not exist in graph" ) ;^131^132^^^^128^139^throw new IllegalArgumentException ( nodeValue + " does not exist in graph" ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getOutEdges [RETURN_TYPE] List   N nodeValue [VARIABLES] LinkedDirectedGraphNode  node  DiGraphNode  destNode  node  sourceNode  DiGraphEdge  edge  boolean  E  edgeValue  value  Iterator  in  out  List  edgeList  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[BugLab_Variable_Misuse]^throw new IllegalArgumentException ( value + " does not exist in graph" ) ;^131^132^^^^128^139^throw new IllegalArgumentException ( nodeValue + " does not exist in graph" ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getOutEdges [RETURN_TYPE] List   N nodeValue [VARIABLES] LinkedDirectedGraphNode  node  DiGraphNode  destNode  node  sourceNode  DiGraphEdge  edge  boolean  E  edgeValue  value  Iterator  in  out  List  edgeList  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[BugLab_Wrong_Operator]^throw new IllegalArgumentException ( nodeValue  &  " does not exist in graph" ) ;^131^132^^^^128^139^throw new IllegalArgumentException ( nodeValue + " does not exist in graph" ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getOutEdges [RETURN_TYPE] List   N nodeValue [VARIABLES] LinkedDirectedGraphNode  node  DiGraphNode  destNode  node  sourceNode  DiGraphEdge  edge  boolean  E  edgeValue  value  Iterator  in  out  List  edgeList  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[BugLab_Wrong_Operator]^throw new IllegalArgumentException ( nodeValue  |  " does not exist in graph" ) ;^131^132^^^^128^139^throw new IllegalArgumentException ( nodeValue + " does not exist in graph" ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getOutEdges [RETURN_TYPE] List   N nodeValue [VARIABLES] LinkedDirectedGraphNode  node  DiGraphNode  destNode  node  sourceNode  DiGraphEdge  edge  boolean  E  edgeValue  value  Iterator  in  out  List  edgeList  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[BugLab_Wrong_Operator]^throw new IllegalArgumentException ( nodeValue  ||  " does not exist in graph" ) ;^131^132^^^^128^139^throw new IllegalArgumentException ( nodeValue + " does not exist in graph" ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getOutEdges [RETURN_TYPE] List   N nodeValue [VARIABLES] LinkedDirectedGraphNode  node  DiGraphNode  destNode  node  sourceNode  DiGraphEdge  edge  boolean  E  edgeValue  value  Iterator  in  out  List  edgeList  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[BugLab_Variable_Misuse]^LinkedDirectedGraphNode<N, E> node = nodes.get ( value ) ;^143^^^^^142^149^LinkedDirectedGraphNode<N, E> node = nodes.get ( nodeValue ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] createDirectedGraphNode [RETURN_TYPE] DiGraphNode   N nodeValue [VARIABLES] LinkedDirectedGraphNode  node  DiGraphNode  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  in  out  List  edgeList  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[BugLab_Argument_Swapping]^LinkedDirectedGraphNode<N, E> node = nodeValue.get ( nodes ) ;^143^^^^^142^149^LinkedDirectedGraphNode<N, E> node = nodes.get ( nodeValue ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] createDirectedGraphNode [RETURN_TYPE] DiGraphNode   N nodeValue [VARIABLES] LinkedDirectedGraphNode  node  DiGraphNode  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  in  out  List  edgeList  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[BugLab_Wrong_Operator]^if  ( node != null )  {^144^^^^^142^149^if  ( node == null )  {^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] createDirectedGraphNode [RETURN_TYPE] DiGraphNode   N nodeValue [VARIABLES] LinkedDirectedGraphNode  node  DiGraphNode  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  in  out  List  edgeList  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[BugLab_Variable_Misuse]^node = new LinkedDirectedGraphNode<N, E> ( value ) ;^145^^^^^142^149^node = new LinkedDirectedGraphNode<N, E> ( nodeValue ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] createDirectedGraphNode [RETURN_TYPE] DiGraphNode   N nodeValue [VARIABLES] LinkedDirectedGraphNode  node  DiGraphNode  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  in  out  List  edgeList  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[BugLab_Variable_Misuse]^nodes.put ( value, node ) ;^146^^^^^142^149^nodes.put ( nodeValue, node ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] createDirectedGraphNode [RETURN_TYPE] DiGraphNode   N nodeValue [VARIABLES] LinkedDirectedGraphNode  node  DiGraphNode  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  in  out  List  edgeList  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[BugLab_Variable_Misuse]^node = new LinkedDirectedGraphNode<N, E> ( srcValue ) ;^145^^^^^142^149^node = new LinkedDirectedGraphNode<N, E> ( nodeValue ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] createDirectedGraphNode [RETURN_TYPE] DiGraphNode   N nodeValue [VARIABLES] LinkedDirectedGraphNode  node  DiGraphNode  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  in  out  List  edgeList  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  
[BugLab_Variable_Misuse]^List<DiGraphEdge<N, E>> forwardEdges = getDirectedGraphEdges ( srcValue, n2 ) ;^155^^^^^152^162^List<DiGraphEdge<N, E>> forwardEdges = getDirectedGraphEdges ( n1, n2 ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getEdges [RETURN_TYPE] List   N n1 N n2 [VARIABLES] DiGraphNode  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[BugLab_Variable_Misuse]^List<DiGraphEdge<N, E>> forwardEdges = getDirectedGraphEdges ( n1, value ) ;^155^^^^^152^162^List<DiGraphEdge<N, E>> forwardEdges = getDirectedGraphEdges ( n1, n2 ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getEdges [RETURN_TYPE] List   N n1 N n2 [VARIABLES] DiGraphNode  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[BugLab_Argument_Swapping]^List<DiGraphEdge<N, E>> forwardEdges = getDirectedGraphEdges ( n2, n1 ) ;^155^^^^^152^162^List<DiGraphEdge<N, E>> forwardEdges = getDirectedGraphEdges ( n1, n2 ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getEdges [RETURN_TYPE] List   N n1 N n2 [VARIABLES] DiGraphNode  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[BugLab_Variable_Misuse]^List<DiGraphEdge<N, E>> forwardEdges = getDirectedGraphEdges ( value, n2 ) ;^155^^^^^152^162^List<DiGraphEdge<N, E>> forwardEdges = getDirectedGraphEdges ( n1, n2 ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getEdges [RETURN_TYPE] List   N n1 N n2 [VARIABLES] DiGraphNode  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[BugLab_Variable_Misuse]^List<DiGraphEdge<N, E>> backwardEdges = getDirectedGraphEdges ( value, n1 ) ;^156^^^^^152^162^List<DiGraphEdge<N, E>> backwardEdges = getDirectedGraphEdges ( n2, n1 ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getEdges [RETURN_TYPE] List   N n1 N n2 [VARIABLES] DiGraphNode  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[BugLab_Variable_Misuse]^List<DiGraphEdge<N, E>> backwardEdges = getDirectedGraphEdges ( n2, srcValue ) ;^156^^^^^152^162^List<DiGraphEdge<N, E>> backwardEdges = getDirectedGraphEdges ( n2, n1 ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getEdges [RETURN_TYPE] List   N n1 N n2 [VARIABLES] DiGraphNode  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[BugLab_Argument_Swapping]^List<DiGraphEdge<N, E>> backwardEdges = getDirectedGraphEdges ( n1, n2 ) ;^156^^^^^152^162^List<DiGraphEdge<N, E>> backwardEdges = getDirectedGraphEdges ( n2, n1 ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getEdges [RETURN_TYPE] List   N n1 N n2 [VARIABLES] DiGraphNode  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[BugLab_Variable_Misuse]^List<DiGraphEdge<N, E>> backwardEdges = getDirectedGraphEdges ( n2, value ) ;^156^^^^^152^162^List<DiGraphEdge<N, E>> backwardEdges = getDirectedGraphEdges ( n2, n1 ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getEdges [RETURN_TYPE] List   N n1 N n2 [VARIABLES] DiGraphNode  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[BugLab_Argument_Swapping]^int totalSize = backwardEdges.size (  )  + forwardEdges.size (  ) ;^157^^^^^152^162^int totalSize = forwardEdges.size (  )  + backwardEdges.size (  ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getEdges [RETURN_TYPE] List   N n1 N n2 [VARIABLES] DiGraphNode  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[BugLab_Wrong_Operator]^int totalSize = forwardEdges.size (   instanceof   )  + backwardEdges.size (  ) ;^157^^^^^152^162^int totalSize = forwardEdges.size (  )  + backwardEdges.size (  ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getEdges [RETURN_TYPE] List   N n1 N n2 [VARIABLES] DiGraphNode  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[BugLab_Variable_Misuse]^List<GraphEdge<N, E>> edges = Lists.newArrayListWithCapacity ( totalNodes ) ;^158^^^^^152^162^List<GraphEdge<N, E>> edges = Lists.newArrayListWithCapacity ( totalSize ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getEdges [RETURN_TYPE] List   N n1 N n2 [VARIABLES] DiGraphNode  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[BugLab_Variable_Misuse]^return createDirectedGraphNode ( srcValue ) ;^166^^^^^165^167^return createDirectedGraphNode ( value ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] createNode [RETURN_TYPE] GraphNode   N value [VARIABLES] DiGraphNode  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[BugLab_Variable_Misuse]^DiGraphNode<N, E> dNode1 = nodes.get ( value ) ;^171^^^^^170^186^DiGraphNode<N, E> dNode1 = nodes.get ( n1 ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getDirectedGraphEdges [RETURN_TYPE] List   N n1 N n2 [VARIABLES] DiGraphNode  dNode1  dNode2  destNode  node  sourceNode  DiGraphEdge  outEdge  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[BugLab_Argument_Swapping]^DiGraphNode<N, E> dNode1 = n1.get ( nodes ) ;^171^^^^^170^186^DiGraphNode<N, E> dNode1 = nodes.get ( n1 ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getDirectedGraphEdges [RETURN_TYPE] List   N n1 N n2 [VARIABLES] DiGraphNode  dNode1  dNode2  destNode  node  sourceNode  DiGraphEdge  outEdge  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[BugLab_Variable_Misuse]^DiGraphNode<N, E> dNode1 = nodes.get ( srcValue ) ;^171^^^^^170^186^DiGraphNode<N, E> dNode1 = nodes.get ( n1 ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getDirectedGraphEdges [RETURN_TYPE] List   N n1 N n2 [VARIABLES] DiGraphNode  dNode1  dNode2  destNode  node  sourceNode  DiGraphEdge  outEdge  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[BugLab_Variable_Misuse]^if  ( 4 == null )  {^172^^^^^170^186^if  ( dNode1 == null )  {^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getDirectedGraphEdges [RETURN_TYPE] List   N n1 N n2 [VARIABLES] DiGraphNode  dNode1  dNode2  destNode  node  sourceNode  DiGraphEdge  outEdge  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[BugLab_Wrong_Operator]^if  ( dNode1 != null )  {^172^^^^^170^186^if  ( dNode1 == null )  {^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getDirectedGraphEdges [RETURN_TYPE] List   N n1 N n2 [VARIABLES] DiGraphNode  dNode1  dNode2  destNode  node  sourceNode  DiGraphEdge  outEdge  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[BugLab_Argument_Swapping]^DiGraphNode<N, E> dNode2 = n2.get ( nodes ) ;^175^^^^^170^186^DiGraphNode<N, E> dNode2 = nodes.get ( n2 ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getDirectedGraphEdges [RETURN_TYPE] List   N n1 N n2 [VARIABLES] DiGraphNode  dNode1  dNode2  destNode  node  sourceNode  DiGraphEdge  outEdge  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[BugLab_Variable_Misuse]^DiGraphNode<N, E> dNode2 = nodes.get ( value ) ;^175^^^^^170^186^DiGraphNode<N, E> dNode2 = nodes.get ( n2 ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getDirectedGraphEdges [RETURN_TYPE] List   N n1 N n2 [VARIABLES] DiGraphNode  dNode1  dNode2  destNode  node  sourceNode  DiGraphEdge  outEdge  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[BugLab_Wrong_Operator]^if  ( dNode2 != null )  {^176^^^^^170^186^if  ( dNode2 == null )  {^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getDirectedGraphEdges [RETURN_TYPE] List   N n1 N n2 [VARIABLES] DiGraphNode  dNode1  dNode2  destNode  node  sourceNode  DiGraphEdge  outEdge  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[BugLab_Variable_Misuse]^if  ( outEdge.getDestination (  )  == null )  {^181^^^^^170^186^if  ( outEdge.getDestination (  )  == dNode2 )  {^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getDirectedGraphEdges [RETURN_TYPE] List   N n1 N n2 [VARIABLES] DiGraphNode  dNode1  dNode2  destNode  node  sourceNode  DiGraphEdge  outEdge  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[BugLab_Argument_Swapping]^if  ( dNode2.getDestination (  )  == outEdge )  {^181^^^^^170^186^if  ( outEdge.getDestination (  )  == dNode2 )  {^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getDirectedGraphEdges [RETURN_TYPE] List   N n1 N n2 [VARIABLES] DiGraphNode  dNode1  dNode2  destNode  node  sourceNode  DiGraphEdge  outEdge  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[BugLab_Wrong_Operator]^if  ( outEdge.getDestination (  )  < dNode2 )  {^181^^^^^170^186^if  ( outEdge.getDestination (  )  == dNode2 )  {^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getDirectedGraphEdges [RETURN_TYPE] List   N n1 N n2 [VARIABLES] DiGraphNode  dNode1  dNode2  destNode  node  sourceNode  DiGraphEdge  outEdge  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[BugLab_Variable_Misuse]^DiGraphNode<N, E> dNode1 = nodes.get ( srcValue ) ;^191^^^^^189^207^DiGraphNode<N, E> dNode1 = nodes.get ( n1 ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] isConnectedInDirection [RETURN_TYPE] boolean   N n1 N n2 [VARIABLES] DiGraphNode  dNode1  dNode2  destNode  node  sourceNode  DiGraphEdge  outEdge  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[BugLab_Argument_Swapping]^DiGraphNode<N, E> dNode1 = n1.get ( nodes ) ;^191^^^^^189^207^DiGraphNode<N, E> dNode1 = nodes.get ( n1 ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] isConnectedInDirection [RETURN_TYPE] boolean   N n1 N n2 [VARIABLES] DiGraphNode  dNode1  dNode2  destNode  node  sourceNode  DiGraphEdge  outEdge  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[BugLab_Wrong_Operator]^if  ( dNode1 != null )  {^192^^^^^189^207^if  ( dNode1 == null )  {^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] isConnectedInDirection [RETURN_TYPE] boolean   N n1 N n2 [VARIABLES] DiGraphNode  dNode1  dNode2  destNode  node  sourceNode  DiGraphEdge  outEdge  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[BugLab_Variable_Misuse]^DiGraphNode<N, E> dNode2 = nodes.get ( value ) ;^195^^^^^189^207^DiGraphNode<N, E> dNode2 = nodes.get ( n2 ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] isConnectedInDirection [RETURN_TYPE] boolean   N n1 N n2 [VARIABLES] DiGraphNode  dNode1  dNode2  destNode  node  sourceNode  DiGraphEdge  outEdge  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[BugLab_Argument_Swapping]^DiGraphNode<N, E> dNode2 = n2.get ( nodes ) ;^195^^^^^189^207^DiGraphNode<N, E> dNode2 = nodes.get ( n2 ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] isConnectedInDirection [RETURN_TYPE] boolean   N n1 N n2 [VARIABLES] DiGraphNode  dNode1  dNode2  destNode  node  sourceNode  DiGraphEdge  outEdge  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[BugLab_Variable_Misuse]^DiGraphNode<N, E> dNode2 = null.get ( n2 ) ;^195^^^^^189^207^DiGraphNode<N, E> dNode2 = nodes.get ( n2 ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] isConnectedInDirection [RETURN_TYPE] boolean   N n1 N n2 [VARIABLES] DiGraphNode  dNode1  dNode2  destNode  node  sourceNode  DiGraphEdge  outEdge  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[BugLab_Wrong_Operator]^if  ( dNode2 != null )  {^196^^^^^189^207^if  ( dNode2 == null )  {^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] isConnectedInDirection [RETURN_TYPE] boolean   N n1 N n2 [VARIABLES] DiGraphNode  dNode1  dNode2  destNode  node  sourceNode  DiGraphEdge  outEdge  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[BugLab_Argument_Swapping]^if  ( dNode2.getDestination (  )  == outEdge )  {^201^^^^^189^207^if  ( outEdge.getDestination (  )  == dNode2 )  {^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] isConnectedInDirection [RETURN_TYPE] boolean   N n1 N n2 [VARIABLES] DiGraphNode  dNode1  dNode2  destNode  node  sourceNode  DiGraphEdge  outEdge  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[BugLab_Wrong_Operator]^if  ( outEdge.getDestination (  )  > dNode2 )  {^201^^^^^189^207^if  ( outEdge.getDestination (  )  == dNode2 )  {^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] isConnectedInDirection [RETURN_TYPE] boolean   N n1 N n2 [VARIABLES] DiGraphNode  dNode1  dNode2  destNode  node  sourceNode  DiGraphEdge  outEdge  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[BugLab_Wrong_Literal]^return false;^202^^^^^189^207^return true;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] isConnectedInDirection [RETURN_TYPE] boolean   N n1 N n2 [VARIABLES] DiGraphNode  dNode1  dNode2  destNode  node  sourceNode  DiGraphEdge  outEdge  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[BugLab_Variable_Misuse]^if  ( null.getDestination (  )  == dNode2 )  {^201^^^^^189^207^if  ( outEdge.getDestination (  )  == dNode2 )  {^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] isConnectedInDirection [RETURN_TYPE] boolean   N n1 N n2 [VARIABLES] DiGraphNode  dNode1  dNode2  destNode  node  sourceNode  DiGraphEdge  outEdge  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[BugLab_Wrong_Literal]^return true;^206^^^^^189^207^return false;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] isConnectedInDirection [RETURN_TYPE] boolean   N n1 N n2 [VARIABLES] DiGraphNode  dNode1  dNode2  destNode  node  sourceNode  DiGraphEdge  outEdge  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[BugLab_Variable_Misuse]^return getDirectedPredNodes ( nodes.get ( value )  ) ;^211^^^^^210^212^return getDirectedPredNodes ( nodes.get ( nodeValue )  ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getDirectedPredNodes [RETURN_TYPE] List   N nodeValue [VARIABLES] DiGraphNode  dNode1  dNode2  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[BugLab_Argument_Swapping]^return getDirectedPredNodes ( nodeValue.get ( nodes )  ) ;^211^^^^^210^212^return getDirectedPredNodes ( nodes.get ( nodeValue )  ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getDirectedPredNodes [RETURN_TYPE] List   N nodeValue [VARIABLES] DiGraphNode  dNode1  dNode2  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[BugLab_Variable_Misuse]^return getDirectedPredNodes ( nodes.get ( srcValue )  ) ;^211^^^^^210^212^return getDirectedPredNodes ( nodes.get ( nodeValue )  ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getDirectedPredNodes [RETURN_TYPE] List   N nodeValue [VARIABLES] DiGraphNode  dNode1  dNode2  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[BugLab_Variable_Misuse]^return getDirectedSuccNodes ( nodes.get ( value )  ) ;^216^^^^^215^217^return getDirectedSuccNodes ( nodes.get ( nodeValue )  ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getDirectedSuccNodes [RETURN_TYPE] List   N nodeValue [VARIABLES] DiGraphNode  dNode1  dNode2  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[BugLab_Argument_Swapping]^return getDirectedSuccNodes ( nodeValue.get ( nodes )  ) ;^216^^^^^215^217^return getDirectedSuccNodes ( nodes.get ( nodeValue )  ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getDirectedSuccNodes [RETURN_TYPE] List   N nodeValue [VARIABLES] DiGraphNode  dNode1  dNode2  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[BugLab_Wrong_Operator]^if  ( dNode != null )  {^222^^^^^220^230^if  ( dNode == null )  {^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getDirectedPredNodes [RETURN_TYPE] List   DiGraphNode<N, E> dNode [VARIABLES] DiGraphNode  dNode  dNode1  dNode2  destNode  node  sourceNode  DiGraphEdge  edge  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[BugLab_Variable_Misuse]^if  ( 3 == null )  {^235^^^^^233^243^if  ( dNode == null )  {^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getDirectedSuccNodes [RETURN_TYPE] List   DiGraphNode<N, E> dNode [VARIABLES] DiGraphNode  dNode  dNode1  dNode2  destNode  node  sourceNode  DiGraphEdge  edge  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[BugLab_Wrong_Operator]^if  ( dNode != null )  {^235^^^^^233^243^if  ( dNode == null )  {^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getDirectedSuccNodes [RETURN_TYPE] List   DiGraphNode<N, E> dNode [VARIABLES] DiGraphNode  dNode  dNode1  dNode2  destNode  node  sourceNode  DiGraphEdge  edge  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[BugLab_Variable_Misuse]^return isConnectedInDirection ( n1, value )  || isConnectedInDirection ( n2, n1 ) ;^247^^^^^246^248^return isConnectedInDirection ( n1, n2 )  || isConnectedInDirection ( n2, n1 ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] isConnected [RETURN_TYPE] boolean   N n1 N n2 [VARIABLES] DiGraphNode  dNode  dNode1  dNode2  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[BugLab_Argument_Swapping]^return isConnectedInDirection ( n2, n1 )  || isConnectedInDirection ( n2, n1 ) ;^247^^^^^246^248^return isConnectedInDirection ( n1, n2 )  || isConnectedInDirection ( n2, n1 ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] isConnected [RETURN_TYPE] boolean   N n1 N n2 [VARIABLES] DiGraphNode  dNode  dNode1  dNode2  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[BugLab_Wrong_Operator]^return isConnectedInDirection ( n1, n2 )  && isConnectedInDirection ( n2, n1 ) ;^247^^^^^246^248^return isConnectedInDirection ( n1, n2 )  || isConnectedInDirection ( n2, n1 ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] isConnected [RETURN_TYPE] boolean   N n1 N n2 [VARIABLES] DiGraphNode  dNode  dNode1  dNode2  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[BugLab_Variable_Misuse]^return isConnectedInDirection ( value, n2 )  || isConnectedInDirection ( n2, n1 ) ;^247^^^^^246^248^return isConnectedInDirection ( n1, n2 )  || isConnectedInDirection ( n2, n1 ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] isConnected [RETURN_TYPE] boolean   N n1 N n2 [VARIABLES] DiGraphNode  dNode  dNode1  dNode2  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[BugLab_Wrong_Literal]^return false;^278^^^^^277^279^return true;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] isDirected [RETURN_TYPE] boolean   [VARIABLES] DiGraphNode  dNode  dNode1  dNode2  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[BugLab_Variable_Misuse]^DiGraphNode<N, E> node = getDirectedGraphNode ( srcValue ) ;^290^^^^^289^292^DiGraphNode<N, E> node = getDirectedGraphNode ( value ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getNeighborNodes [RETURN_TYPE] List   N value [VARIABLES] DiGraphNode  dNode  dNode1  dNode2  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  list  nodeList  outEdgeList  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[BugLab_Variable_Misuse]^result.add ( 0.next (  )  ) ;^298^^^^^294^301^result.add ( i.next (  )  ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getNeighborNodes [RETURN_TYPE] List   DiGraphNode<N, E> node [VARIABLES] DiGraphNode  dNode  dNode1  dNode2  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  i  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  list  nodeList  outEdgeList  result  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[BugLab_Variable_Misuse]^result.add ( this.next (  )  ) ;^298^^^^^294^301^result.add ( i.next (  )  ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getNeighborNodes [RETURN_TYPE] List   DiGraphNode<N, E> node [VARIABLES] DiGraphNode  dNode  dNode1  dNode2  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  i  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  list  nodeList  outEdgeList  result  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[BugLab_Variable_Misuse]^LinkedDirectedGraphNode<N, E> node = nodes.get ( srcValue ) ;^305^^^^^304^308^LinkedDirectedGraphNode<N, E> node = nodes.get ( value ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getNeighborNodesIterator [RETURN_TYPE] Iterator   N value [VARIABLES] LinkedDirectedGraphNode  node  DiGraphNode  dNode  dNode1  dNode2  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  i  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  list  nodeList  outEdgeList  result  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[BugLab_Argument_Swapping]^LinkedDirectedGraphNode<N, E> node = value.get ( nodes ) ;^305^^^^^304^308^LinkedDirectedGraphNode<N, E> node = nodes.get ( value ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getNeighborNodesIterator [RETURN_TYPE] Iterator   N value [VARIABLES] LinkedDirectedGraphNode  node  DiGraphNode  dNode  dNode1  dNode2  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  i  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  list  nodeList  outEdgeList  result  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[BugLab_Variable_Misuse]^DiGraphNode<N, E> node = getDirectedGraphNode ( nodeValue ) ;^323^^^^^322^328^DiGraphNode<N, E> node = getDirectedGraphNode ( value ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getNodeDegree [RETURN_TYPE] int   N value [VARIABLES] DiGraphNode  dNode  dNode1  dNode2  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  i  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  list  nodeList  outEdgeList  result  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[BugLab_Variable_Misuse]^DiGraphNode<N, E> node = getDirectedGraphNode ( srcValue ) ;^323^^^^^322^328^DiGraphNode<N, E> node = getDirectedGraphNode ( value ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getNodeDegree [RETURN_TYPE] int   N value [VARIABLES] DiGraphNode  dNode  dNode1  dNode2  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  i  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  list  nodeList  outEdgeList  result  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[BugLab_Wrong_Operator]^if  ( node != null )  {^324^^^^^322^328^if  ( node == null )  {^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getNodeDegree [RETURN_TYPE] int   N value [VARIABLES] DiGraphNode  dNode  dNode1  dNode2  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  i  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  list  nodeList  outEdgeList  result  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[BugLab_Wrong_Operator]^return node.getInEdges (  <=  ) .size (  )  + node.getOutEdges (  ) .size (  ) ;^327^^^^^322^328^return node.getInEdges (  ) .size (  )  + node.getOutEdges (  ) .size (  ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getNodeDegree [RETURN_TYPE] int   N value [VARIABLES] DiGraphNode  dNode  dNode1  dNode2  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  i  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  list  nodeList  outEdgeList  result  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[BugLab_Variable_Misuse]^return nodeValue;^361^^^^^360^362^return value;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getValue [RETURN_TYPE] N   [VARIABLES] DiGraphNode  dNode  dNode1  dNode2  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  i  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  list  nodeList  outEdgeList  result  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  int  id  totalNodes  totalSize  
[BugLab_Variable_Misuse]^return "LDN" + totalSize;^382^^^^^381^383^return "LDN" + id;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getId [RETURN_TYPE] String   [VARIABLES] DiGraphNode  dNode  dNode1  dNode2  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  i  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  list  nodeList  outEdgeList  result  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  data  int  id  totalNodes  totalSize  
[BugLab_Wrong_Operator]^return value == null ? value.toString (  )  : "null";^387^^^^^386^388^return value != null ? value.toString (  )  : "null";^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getLabel [RETURN_TYPE] String   [VARIABLES] DiGraphNode  dNode  dNode1  dNode2  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  i  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  list  nodeList  outEdgeList  result  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  data  int  id  totalNodes  totalSize  
[BugLab_Variable_Misuse]^return srcValue != null ? value.toString (  )  : "null";^387^^^^^386^388^return value != null ? value.toString (  )  : "null";^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getLabel [RETURN_TYPE] String   [VARIABLES] DiGraphNode  dNode  dNode1  dNode2  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  i  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  list  nodeList  outEdgeList  result  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  data  int  id  totalNodes  totalSize  
[BugLab_Variable_Misuse]^return null.hasNext (  )  || out.hasNext (  ) ;^416^^^^^415^417^return in.hasNext (  )  || out.hasNext (  ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] hasNext [RETURN_TYPE] boolean   [VARIABLES] DiGraphNode  dNode  dNode1  dNode2  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  i  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  list  nodeList  outEdgeList  result  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  data  int  id  totalNodes  totalSize  
[BugLab_Argument_Swapping]^return out.hasNext (  )  || in.hasNext (  ) ;^416^^^^^415^417^return in.hasNext (  )  || out.hasNext (  ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] hasNext [RETURN_TYPE] boolean   [VARIABLES] DiGraphNode  dNode  dNode1  dNode2  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  i  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  list  nodeList  outEdgeList  result  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  data  int  id  totalNodes  totalSize  
[BugLab_Wrong_Operator]^return in.hasNext (  )  && out.hasNext (  ) ;^416^^^^^415^417^return in.hasNext (  )  || out.hasNext (  ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] hasNext [RETURN_TYPE] boolean   [VARIABLES] DiGraphNode  dNode  dNode1  dNode2  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  i  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  list  nodeList  outEdgeList  result  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  data  int  id  totalNodes  totalSize  
[BugLab_Variable_Misuse]^Iterator<DiGraphEdge<N, E>> curIterator =  isOut ? out : null;^422^^^^^420^425^Iterator<DiGraphEdge<N, E>> curIterator =  isOut ? out : in;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] next [RETURN_TYPE] GraphNode   [VARIABLES] DiGraphNode  dNode  dNode1  dNode2  destNode  node  sourceNode  boolean  isOut  DiGraphEdge  s  E  edgeValue  value  Iterator  curIterator  i  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  list  nodeList  outEdgeList  result  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  data  int  id  totalNodes  totalSize  
[BugLab_Argument_Swapping]^Iterator<DiGraphEdge<N, E>> curIterator =  in ? out : isOut;^422^^^^^420^425^Iterator<DiGraphEdge<N, E>> curIterator =  isOut ? out : in;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] next [RETURN_TYPE] GraphNode   [VARIABLES] DiGraphNode  dNode  dNode1  dNode2  destNode  node  sourceNode  boolean  isOut  DiGraphEdge  s  E  edgeValue  value  Iterator  curIterator  i  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  list  nodeList  outEdgeList  result  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  data  int  id  totalNodes  totalSize  
[BugLab_Argument_Swapping]^Iterator<DiGraphEdge<N, E>> curIterator =  out ? isOut : in;^422^^^^^420^425^Iterator<DiGraphEdge<N, E>> curIterator =  isOut ? out : in;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] next [RETURN_TYPE] GraphNode   [VARIABLES] DiGraphNode  dNode  dNode1  dNode2  destNode  node  sourceNode  boolean  isOut  DiGraphEdge  s  E  edgeValue  value  Iterator  curIterator  i  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  list  nodeList  outEdgeList  result  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  data  int  id  totalNodes  totalSize  
[BugLab_Argument_Swapping]^return s ? isOut.getDestination (  )  : s.getSource (  ) ;^424^^^^^420^425^return isOut ? s.getDestination (  )  : s.getSource (  ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] next [RETURN_TYPE] GraphNode   [VARIABLES] DiGraphNode  dNode  dNode1  dNode2  destNode  node  sourceNode  boolean  isOut  DiGraphEdge  s  E  edgeValue  value  Iterator  curIterator  i  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  list  nodeList  outEdgeList  result  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  data  int  id  totalNodes  totalSize  
[BugLab_Variable_Misuse]^annotation = annotation;^494^^^^^493^495^annotation = data;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] setAnnotation [RETURN_TYPE] void   Annotation data [VARIABLES] DiGraphNode  dNode  dNode1  dNode2  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  curIterator  i  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  list  nodeList  outEdgeList  result  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  data  int  id  totalNodes  totalSize  
[BugLab_Variable_Misuse]^return edgeValue != null ? value.toString (  )  : "null";^504^^^^^503^505^return value != null ? value.toString (  )  : "null";^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getLabel [RETURN_TYPE] String   [VARIABLES] DiGraphNode  dNode  dNode1  dNode2  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  curIterator  i  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  list  nodeList  outEdgeList  result  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  data  int  id  totalNodes  totalSize  
[BugLab_Wrong_Operator]^return value == null ? value.toString (  )  : "null";^504^^^^^503^505^return value != null ? value.toString (  )  : "null";^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] getLabel [RETURN_TYPE] String   [VARIABLES] DiGraphNode  dNode  dNode1  dNode2  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  curIterator  i  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  list  nodeList  outEdgeList  result  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  data  int  id  totalNodes  totalSize  
[BugLab_Argument_Swapping]^return destNode.toString (  )  + " -> " + sourceNode.toString (  ) ;^519^^^^^518^520^return sourceNode.toString (  )  + " -> " + destNode.toString (  ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] DiGraphNode  dNode  dNode1  dNode2  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  curIterator  i  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  list  nodeList  outEdgeList  result  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  data  int  id  totalNodes  totalSize  
[BugLab_Wrong_Operator]^return sourceNode.toString (  <  )  + " -> " + destNode.toString (  ) ;^519^^^^^518^520^return sourceNode.toString (  )  + " -> " + destNode.toString (  ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] DiGraphNode  dNode  dNode1  dNode2  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  curIterator  i  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  list  nodeList  outEdgeList  result  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  data  int  id  totalNodes  totalSize  
[BugLab_Wrong_Operator]^return sourceNode.toString (  )   &  " -> " + destNode.toString (  ) ;^519^^^^^518^520^return sourceNode.toString (  )  + " -> " + destNode.toString (  ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] DiGraphNode  dNode  dNode1  dNode2  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  curIterator  i  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  list  nodeList  outEdgeList  result  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  data  int  id  totalNodes  totalSize  
[BugLab_Variable_Misuse]^return 3.toString (  )  + " -> " + destNode.toString (  ) ;^519^^^^^518^520^return sourceNode.toString (  )  + " -> " + destNode.toString (  ) ;^[CLASS] LinkedDirectedGraph LinkedDirectedGraphNode NeighborIterator LinkedDirectedGraphEdge  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] DiGraphNode  dNode  dNode1  dNode2  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  curIterator  i  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  list  nodeList  outEdgeList  result  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  data  int  id  totalNodes  totalSize  
[BugLab_Wrong_Literal]^private static int totalNodes = id;^347^^^^^342^352^private static int totalNodes = 0;^[CLASS] LinkedDirectedGraphNode NeighborIterator  [METHOD] getNodeB [RETURN_TYPE] GraphNode   [VARIABLES] DiGraphNode  dNode  dNode1  dNode2  destNode  node  sourceNode  boolean  E  edgeValue  value  Iterator  curIterator  i  in  out  List  backwardEdges  edgeList  edges  forwardEdges  inEdgeList  list  nodeList  outEdgeList  result  Map  nodes  N  destValue  n1  n2  nodeValue  srcValue  value  Annotation  annotation  data  int  id  totalNodes  totalSize  
[BugLab_Variable_Misuse]^this.value = value;^355^^^^^354^357^this.value = nodeValue;^[CLASS] LinkedDirectedGraphNode NeighborIterator  [METHOD] <init> [RETURN_TYPE] LinkedDirectedGraph$LinkedDirectedGraphNode(N)   N nodeValue [VARIABLES] Iterator  in  out  List  inEdgeList  outEdgeList  boolean  N  nodeValue  value  Annotation  annotation  int  id  totalNodes  
[BugLab_Variable_Misuse]^return nodeValue;^361^^^^^360^362^return value;^[CLASS] LinkedDirectedGraphNode NeighborIterator  [METHOD] getValue [RETURN_TYPE] N   [VARIABLES] Iterator  in  out  List  inEdgeList  outEdgeList  boolean  N  nodeValue  value  Annotation  annotation  int  id  totalNodes  
[BugLab_Variable_Misuse]^return "LDN" + totalNodes;^382^^^^^381^383^return "LDN" + id;^[CLASS] LinkedDirectedGraphNode NeighborIterator  [METHOD] getId [RETURN_TYPE] String   [VARIABLES] Iterator  in  out  List  inEdgeList  outEdgeList  boolean  N  nodeValue  value  Annotation  annotation  data  int  id  totalNodes  
[BugLab_Variable_Misuse]^return nodeValue != null ? value.toString (  )  : "null";^387^^^^^386^388^return value != null ? value.toString (  )  : "null";^[CLASS] LinkedDirectedGraphNode NeighborIterator  [METHOD] getLabel [RETURN_TYPE] String   [VARIABLES] Iterator  in  out  List  inEdgeList  outEdgeList  boolean  N  nodeValue  value  Annotation  annotation  data  int  id  totalNodes  
[BugLab_Wrong_Operator]^return value == null ? value.toString (  )  : "null";^387^^^^^386^388^return value != null ? value.toString (  )  : "null";^[CLASS] LinkedDirectedGraphNode NeighborIterator  [METHOD] getLabel [RETURN_TYPE] String   [VARIABLES] Iterator  in  out  List  inEdgeList  outEdgeList  boolean  N  nodeValue  value  Annotation  annotation  data  int  id  totalNodes  
[BugLab_Argument_Swapping]^return out.hasNext (  )  || in.hasNext (  ) ;^416^^^^^415^417^return in.hasNext (  )  || out.hasNext (  ) ;^[CLASS] LinkedDirectedGraphNode NeighborIterator  [METHOD] hasNext [RETURN_TYPE] boolean   [VARIABLES] Iterator  in  out  List  inEdgeList  outEdgeList  boolean  N  nodeValue  value  Annotation  annotation  data  int  id  totalNodes  
[BugLab_Wrong_Operator]^return in.hasNext (  )  && out.hasNext (  ) ;^416^^^^^415^417^return in.hasNext (  )  || out.hasNext (  ) ;^[CLASS] LinkedDirectedGraphNode NeighborIterator  [METHOD] hasNext [RETURN_TYPE] boolean   [VARIABLES] Iterator  in  out  List  inEdgeList  outEdgeList  boolean  N  nodeValue  value  Annotation  annotation  data  int  id  totalNodes  
[BugLab_Argument_Swapping]^Iterator<DiGraphEdge<N, E>> curIterator =  in ? out : isOut;^422^^^^^420^425^Iterator<DiGraphEdge<N, E>> curIterator =  isOut ? out : in;^[CLASS] LinkedDirectedGraphNode NeighborIterator  [METHOD] next [RETURN_TYPE] GraphNode   [VARIABLES] boolean  isOut  DiGraphEdge  s  Iterator  curIterator  in  out  List  inEdgeList  outEdgeList  N  nodeValue  value  Annotation  annotation  data  int  id  totalNodes  
[BugLab_Argument_Swapping]^Iterator<DiGraphEdge<N, E>> curIterator =  isOut ? in : out;^422^^^^^420^425^Iterator<DiGraphEdge<N, E>> curIterator =  isOut ? out : in;^[CLASS] LinkedDirectedGraphNode NeighborIterator  [METHOD] next [RETURN_TYPE] GraphNode   [VARIABLES] boolean  isOut  DiGraphEdge  s  Iterator  curIterator  in  out  List  inEdgeList  outEdgeList  N  nodeValue  value  Annotation  annotation  data  int  id  totalNodes  
[BugLab_Argument_Swapping]^return s ? isOut.getDestination (  )  : s.getSource (  ) ;^424^^^^^420^425^return isOut ? s.getDestination (  )  : s.getSource (  ) ;^[CLASS] LinkedDirectedGraphNode NeighborIterator  [METHOD] next [RETURN_TYPE] GraphNode   [VARIABLES] boolean  isOut  DiGraphEdge  s  Iterator  curIterator  in  out  List  inEdgeList  outEdgeList  N  nodeValue  value  Annotation  annotation  data  int  id  totalNodes  
[BugLab_Variable_Misuse]^return isOut ? 0.getDestination (  )  : s.getSource (  ) ;^424^^^^^420^425^return isOut ? s.getDestination (  )  : s.getSource (  ) ;^[CLASS] LinkedDirectedGraphNode NeighborIterator  [METHOD] next [RETURN_TYPE] GraphNode   [VARIABLES] boolean  isOut  DiGraphEdge  s  Iterator  curIterator  in  out  List  inEdgeList  outEdgeList  N  nodeValue  value  Annotation  annotation  data  int  id  totalNodes  
[BugLab_Variable_Misuse]^private final Iterator<DiGraphEdge<N, E>> out = 3.iterator (  ) ;^412^^^^^407^417^private final Iterator<DiGraphEdge<N, E>> out = outEdgeList.iterator (  ) ;^[CLASS] NeighborIterator  [METHOD] remove [RETURN_TYPE] void   [VARIABLES] Iterator  curIterator  in  out  List  inEdgeList  outEdgeList  boolean  N  nodeValue  value  Annotation  annotation  data  int  id  totalNodes  
[BugLab_Argument_Swapping]^return out.hasNext (  )  || in.hasNext (  ) ;^416^^^^^415^417^return in.hasNext (  )  || out.hasNext (  ) ;^[CLASS] NeighborIterator  [METHOD] hasNext [RETURN_TYPE] boolean   [VARIABLES] Iterator  in  out  boolean  
[BugLab_Wrong_Operator]^return in.hasNext (  )  && out.hasNext (  ) ;^416^^^^^415^417^return in.hasNext (  )  || out.hasNext (  ) ;^[CLASS] NeighborIterator  [METHOD] hasNext [RETURN_TYPE] boolean   [VARIABLES] Iterator  in  out  boolean  
[BugLab_Argument_Swapping]^Iterator<DiGraphEdge<N, E>> curIterator =  out ? isOut : in;^422^^^^^420^425^Iterator<DiGraphEdge<N, E>> curIterator =  isOut ? out : in;^[CLASS] NeighborIterator  [METHOD] next [RETURN_TYPE] GraphNode   [VARIABLES] Iterator  curIterator  in  out  boolean  isOut  DiGraphEdge  s  
[BugLab_Argument_Swapping]^Iterator<DiGraphEdge<N, E>> curIterator =  isOut ? in : out;^422^^^^^420^425^Iterator<DiGraphEdge<N, E>> curIterator =  isOut ? out : in;^[CLASS] NeighborIterator  [METHOD] next [RETURN_TYPE] GraphNode   [VARIABLES] Iterator  curIterator  in  out  boolean  isOut  DiGraphEdge  s  
[BugLab_Argument_Swapping]^return s ? isOut.getDestination (  )  : s.getSource (  ) ;^424^^^^^420^425^return isOut ? s.getDestination (  )  : s.getSource (  ) ;^[CLASS] NeighborIterator  [METHOD] next [RETURN_TYPE] GraphNode   [VARIABLES] Iterator  curIterator  in  out  boolean  isOut  DiGraphEdge  s  
[BugLab_Variable_Misuse]^return isOut ? this.getDestination (  )  : s.getSource (  ) ;^424^^^^^420^425^return isOut ? s.getDestination (  )  : s.getSource (  ) ;^[CLASS] NeighborIterator  [METHOD] next [RETURN_TYPE] GraphNode   [VARIABLES] Iterator  curIterator  in  out  boolean  isOut  DiGraphEdge  s  
[BugLab_Variable_Misuse]^this.value = value;^456^^^^^454^459^this.value = edgeValue;^[CLASS] LinkedDirectedGraphEdge  [METHOD] <init> [RETURN_TYPE] DiGraphNode)   DiGraphNode<N, E> sourceNode E edgeValue DiGraphNode<N, E> destNode [VARIABLES] DiGraphNode  destNode  sourceNode  boolean  E  edgeValue  value  Annotation  annotation  
[BugLab_Variable_Misuse]^this.sourceNode = null;^457^^^^^454^459^this.sourceNode = sourceNode;^[CLASS] LinkedDirectedGraphEdge  [METHOD] <init> [RETURN_TYPE] DiGraphNode)   DiGraphNode<N, E> sourceNode E edgeValue DiGraphNode<N, E> destNode [VARIABLES] DiGraphNode  destNode  sourceNode  boolean  E  edgeValue  value  Annotation  annotation  
[BugLab_Variable_Misuse]^return edgeValue;^483^^^^^482^484^return value;^[CLASS] LinkedDirectedGraphEdge  [METHOD] getValue [RETURN_TYPE] E   [VARIABLES] DiGraphNode  destNode  node  sourceNode  boolean  E  edgeValue  value  Annotation  annotation  
[BugLab_Variable_Misuse]^annotation = annotation;^494^^^^^493^495^annotation = data;^[CLASS] LinkedDirectedGraphEdge  [METHOD] setAnnotation [RETURN_TYPE] void   Annotation data [VARIABLES] DiGraphNode  destNode  node  sourceNode  boolean  E  edgeValue  value  Annotation  annotation  data  
[BugLab_Variable_Misuse]^return edgeValue != null ? value.toString (  )  : "null";^504^^^^^503^505^return value != null ? value.toString (  )  : "null";^[CLASS] LinkedDirectedGraphEdge  [METHOD] getLabel [RETURN_TYPE] String   [VARIABLES] DiGraphNode  destNode  node  sourceNode  boolean  E  edgeValue  value  Annotation  annotation  data  
[BugLab_Wrong_Operator]^return value == null ? value.toString (  )  : "null";^504^^^^^503^505^return value != null ? value.toString (  )  : "null";^[CLASS] LinkedDirectedGraphEdge  [METHOD] getLabel [RETURN_TYPE] String   [VARIABLES] DiGraphNode  destNode  node  sourceNode  boolean  E  edgeValue  value  Annotation  annotation  data  
[BugLab_Argument_Swapping]^return destNode.toString (  )  + " -> " + sourceNode.toString (  ) ;^519^^^^^518^520^return sourceNode.toString (  )  + " -> " + destNode.toString (  ) ;^[CLASS] LinkedDirectedGraphEdge  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] DiGraphNode  destNode  node  sourceNode  boolean  E  edgeValue  value  Annotation  annotation  data  
[BugLab_Wrong_Operator]^return sourceNode.toString (  &&  )  + " -> " + destNode.toString (  ) ;^519^^^^^518^520^return sourceNode.toString (  )  + " -> " + destNode.toString (  ) ;^[CLASS] LinkedDirectedGraphEdge  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] DiGraphNode  destNode  node  sourceNode  boolean  E  edgeValue  value  Annotation  annotation  data  
[BugLab_Wrong_Operator]^return sourceNode.toString (  )   !=  " -> " + destNode.toString (  ) ;^519^^^^^518^520^return sourceNode.toString (  )  + " -> " + destNode.toString (  ) ;^[CLASS] LinkedDirectedGraphEdge  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] DiGraphNode  destNode  node  sourceNode  boolean  E  edgeValue  value  Annotation  annotation  data  
