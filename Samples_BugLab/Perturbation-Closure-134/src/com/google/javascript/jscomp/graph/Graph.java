[buglab_swap_variables]^super ( annotation, annotatable ) ;^69^^^^^68^70^super ( annotatable, annotation ) ;^[CLASS] Graph AnnotationState GraphAnnotationState SimpleSubGraph  [METHOD] <init> [RETURN_TYPE] Annotation)   Annotatable annotatable Annotation annotation [VARIABLES] Annotatable  annotatable  Graph  graph  boolean  List  nodes  Deque  edgeAnnotationStack  nodeAnnotationStack  long  serialVersionUID  Annotation  annotation  
[buglab_swap_variables]^super (  annotation ) ;^69^^^^^68^70^super ( annotatable, annotation ) ;^[CLASS] Graph AnnotationState GraphAnnotationState SimpleSubGraph  [METHOD] <init> [RETURN_TYPE] Annotation)   Annotatable annotatable Annotation annotation [VARIABLES] Annotatable  annotatable  Graph  graph  boolean  List  nodes  Deque  edgeAnnotationStack  nodeAnnotationStack  long  serialVersionUID  Annotation  annotation  
[buglab_swap_variables]^super ( annotatable ) ;^69^^^^^68^70^super ( annotatable, annotation ) ;^[CLASS] Graph AnnotationState GraphAnnotationState SimpleSubGraph  [METHOD] <init> [RETURN_TYPE] Annotation)   Annotatable annotatable Annotation annotation [VARIABLES] Annotatable  annotatable  Graph  graph  boolean  List  nodes  Deque  edgeAnnotationStack  nodeAnnotationStack  long  serialVersionUID  Annotation  annotation  
[buglab_swap_variables]^List<GraphEdge<N, E>> edgeList = getEdges ( n2, n1 ) ;^130^^^^^121^138^List<GraphEdge<N, E>> edgeList = getEdges ( n1, n2 ) ;^[CLASS] Graph AnnotationState GraphAnnotationState SimpleSubGraph  [METHOD] connectIfNotFound [RETURN_TYPE] void   N n1 E edge N n2 [VARIABLES] Graph  graph  boolean  E  edge  List  edgeList  nodes  GraphNode  node1  node2  Deque  edgeAnnotationStack  nodeAnnotationStack  GraphEdge  e  long  serialVersionUID  N  n1  n2  
[buglab_swap_variables]^List<GraphEdge<N, E>> edgeList = getEdges (  n2 ) ;^130^^^^^121^138^List<GraphEdge<N, E>> edgeList = getEdges ( n1, n2 ) ;^[CLASS] Graph AnnotationState GraphAnnotationState SimpleSubGraph  [METHOD] connectIfNotFound [RETURN_TYPE] void   N n1 E edge N n2 [VARIABLES] Graph  graph  boolean  E  edge  List  edgeList  nodes  GraphNode  node1  node2  Deque  edgeAnnotationStack  nodeAnnotationStack  GraphEdge  e  long  serialVersionUID  N  n1  n2  
[buglab_swap_variables]^List<GraphEdge<N, E>> edgeList = getEdges ( n1 ) ;^130^^^^^121^138^List<GraphEdge<N, E>> edgeList = getEdges ( n1, n2 ) ;^[CLASS] Graph AnnotationState GraphAnnotationState SimpleSubGraph  [METHOD] connectIfNotFound [RETURN_TYPE] void   N n1 E edge N n2 [VARIABLES] Graph  graph  boolean  E  edge  List  edgeList  nodes  GraphNode  node1  node2  Deque  edgeAnnotationStack  nodeAnnotationStack  GraphEdge  e  long  serialVersionUID  N  n1  n2  
[buglab_swap_variables]^if  ( edge.getValue (  )  == e || e.getValue (  ) .equals ( edge )  )  {^133^^^^^121^138^if  ( e.getValue (  )  == edge || e.getValue (  ) .equals ( edge )  )  {^[CLASS] Graph AnnotationState GraphAnnotationState SimpleSubGraph  [METHOD] connectIfNotFound [RETURN_TYPE] void   N n1 E edge N n2 [VARIABLES] Graph  graph  boolean  E  edge  List  edgeList  nodes  GraphNode  node1  node2  Deque  edgeAnnotationStack  nodeAnnotationStack  GraphEdge  e  long  serialVersionUID  N  n1  n2  
[buglab_swap_variables]^connect ( n2, edge, n1 ) ;^137^^^^^121^138^connect ( n1, edge, n2 ) ;^[CLASS] Graph AnnotationState GraphAnnotationState SimpleSubGraph  [METHOD] connectIfNotFound [RETURN_TYPE] void   N n1 E edge N n2 [VARIABLES] Graph  graph  boolean  E  edge  List  edgeList  nodes  GraphNode  node1  node2  Deque  edgeAnnotationStack  nodeAnnotationStack  GraphEdge  e  long  serialVersionUID  N  n1  n2  
[buglab_swap_variables]^connect (  edge, n2 ) ;^137^^^^^121^138^connect ( n1, edge, n2 ) ;^[CLASS] Graph AnnotationState GraphAnnotationState SimpleSubGraph  [METHOD] connectIfNotFound [RETURN_TYPE] void   N n1 E edge N n2 [VARIABLES] Graph  graph  boolean  E  edge  List  edgeList  nodes  GraphNode  node1  node2  Deque  edgeAnnotationStack  nodeAnnotationStack  GraphEdge  e  long  serialVersionUID  N  n1  n2  
[buglab_swap_variables]^connect ( n1, n2, edge ) ;^137^^^^^121^138^connect ( n1, edge, n2 ) ;^[CLASS] Graph AnnotationState GraphAnnotationState SimpleSubGraph  [METHOD] connectIfNotFound [RETURN_TYPE] void   N n1 E edge N n2 [VARIABLES] Graph  graph  boolean  E  edge  List  edgeList  nodes  GraphNode  node1  node2  Deque  edgeAnnotationStack  nodeAnnotationStack  GraphEdge  e  long  serialVersionUID  N  n1  n2  
[buglab_swap_variables]^connect ( n1,  n2 ) ;^137^^^^^121^138^connect ( n1, edge, n2 ) ;^[CLASS] Graph AnnotationState GraphAnnotationState SimpleSubGraph  [METHOD] connectIfNotFound [RETURN_TYPE] void   N n1 E edge N n2 [VARIABLES] Graph  graph  boolean  E  edge  List  edgeList  nodes  GraphNode  node1  node2  Deque  edgeAnnotationStack  nodeAnnotationStack  GraphEdge  e  long  serialVersionUID  N  n1  n2  
[buglab_swap_variables]^connect ( n1, edge ) ;^137^^^^^121^138^connect ( n1, edge, n2 ) ;^[CLASS] Graph AnnotationState GraphAnnotationState SimpleSubGraph  [METHOD] connectIfNotFound [RETURN_TYPE] void   N n1 E edge N n2 [VARIABLES] Graph  graph  boolean  E  edge  List  edgeList  nodes  GraphNode  node1  node2  Deque  edgeAnnotationStack  nodeAnnotationStack  GraphEdge  e  long  serialVersionUID  N  n1  n2  
[buglab_swap_variables]^GraphNode<N, E> node = value.getNode ( graph ) ;^294^^^^^293^301^GraphNode<N, E> node = graph.getNode ( value ) ;^[CLASS] Graph AnnotationState GraphAnnotationState SimpleSubGraph  [METHOD] isIndependentOf [RETURN_TYPE] boolean   N value [VARIABLES] Graph  graph  boolean  List  edgeList  nodes  GraphNode  n  node  Deque  edgeAnnotationStack  nodeAnnotationStack  long  serialVersionUID  N  value  
[buglab_swap_variables]^if  ( graph.getNeighborNodes ( node.getValue (  )  ) .contains ( n )  )  {^296^^^^^293^301^if  ( graph.getNeighborNodes ( n.getValue (  )  ) .contains ( node )  )  {^[CLASS] Graph AnnotationState GraphAnnotationState SimpleSubGraph  [METHOD] isIndependentOf [RETURN_TYPE] boolean   N value [VARIABLES] Graph  graph  boolean  List  edgeList  nodes  GraphNode  n  node  Deque  edgeAnnotationStack  nodeAnnotationStack  long  serialVersionUID  N  value  
[buglab_swap_variables]^if  ( n.getNeighborNodes ( graph.getValue (  )  ) .contains ( node )  )  {^296^^^^^293^301^if  ( graph.getNeighborNodes ( n.getValue (  )  ) .contains ( node )  )  {^[CLASS] Graph AnnotationState GraphAnnotationState SimpleSubGraph  [METHOD] isIndependentOf [RETURN_TYPE] boolean   N value [VARIABLES] Graph  graph  boolean  List  edgeList  nodes  GraphNode  n  node  Deque  edgeAnnotationStack  nodeAnnotationStack  long  serialVersionUID  N  value  
[buglab_swap_variables]^if  ( node.getNeighborNodes ( n.getValue (  )  ) .contains ( graph )  )  {^296^^^^^293^301^if  ( graph.getNeighborNodes ( n.getValue (  )  ) .contains ( node )  )  {^[CLASS] Graph AnnotationState GraphAnnotationState SimpleSubGraph  [METHOD] isIndependentOf [RETURN_TYPE] boolean   N value [VARIABLES] Graph  graph  boolean  List  edgeList  nodes  GraphNode  n  node  Deque  edgeAnnotationStack  nodeAnnotationStack  long  serialVersionUID  N  value  
[buglab_swap_variables]^nodes.add ( value.getNode ( graph )  ) ;^307^^^^^303^308^nodes.add ( graph.getNode ( value )  ) ;^[CLASS] Graph AnnotationState GraphAnnotationState SimpleSubGraph  [METHOD] addNode [RETURN_TYPE] void   N value [VARIABLES] List  edgeList  nodes  Graph  graph  boolean  Deque  edgeAnnotationStack  nodeAnnotationStack  long  serialVersionUID  N  value  
[buglab_swap_variables]^stack.peek (  ) .add ( new AnnotationState (  h.getAnnotation (  )  )  ) ;^320^^^^^315^323^stack.peek (  ) .add ( new AnnotationState ( h, h.getAnnotation (  )  )  ) ;^[CLASS] Graph AnnotationState GraphAnnotationState SimpleSubGraph  [METHOD] pushAnnotations [RETURN_TYPE] void   GraphAnnotationState> stack Annotatable> haveAnnotations [VARIABLES] Annotatable  h  Graph  graph  boolean  Collection  haveAnnotations  List  edgeList  nodes  Deque  edgeAnnotationStack  nodeAnnotationStack  stack  long  serialVersionUID  
[buglab_swap_variables]^super ( annotation, annotatable ) ;^69^^^^^68^70^super ( annotatable, annotation ) ;^[CLASS] AnnotationState  [METHOD] <init> [RETURN_TYPE] Annotation)   Annotatable annotatable Annotation annotation [VARIABLES] Annotatable  annotatable  boolean  long  serialVersionUID  Annotation  annotation  
[buglab_swap_variables]^super (  annotation ) ;^69^^^^^68^70^super ( annotatable, annotation ) ;^[CLASS] AnnotationState  [METHOD] <init> [RETURN_TYPE] Annotation)   Annotatable annotatable Annotation annotation [VARIABLES] Annotatable  annotatable  boolean  long  serialVersionUID  Annotation  annotation  
[buglab_swap_variables]^super ( annotatable ) ;^69^^^^^68^70^super ( annotatable, annotation ) ;^[CLASS] AnnotationState  [METHOD] <init> [RETURN_TYPE] Annotation)   Annotatable annotatable Annotation annotation [VARIABLES] Annotatable  annotatable  boolean  long  serialVersionUID  Annotation  annotation  
[buglab_swap_variables]^GraphNode<N, E> node = value.getNode ( graph ) ;^294^^^^^293^301^GraphNode<N, E> node = graph.getNode ( value ) ;^[CLASS] SimpleSubGraph  [METHOD] isIndependentOf [RETURN_TYPE] boolean   N value [VARIABLES] List  nodes  GraphNode  n  node  Graph  graph  boolean  N  value  
[buglab_swap_variables]^if  ( graph.getNeighborNodes ( node.getValue (  )  ) .contains ( n )  )  {^296^^^^^293^301^if  ( graph.getNeighborNodes ( n.getValue (  )  ) .contains ( node )  )  {^[CLASS] SimpleSubGraph  [METHOD] isIndependentOf [RETURN_TYPE] boolean   N value [VARIABLES] List  nodes  GraphNode  n  node  Graph  graph  boolean  N  value  
[buglab_swap_variables]^if  ( node.getNeighborNodes ( n.getValue (  )  ) .contains ( graph )  )  {^296^^^^^293^301^if  ( graph.getNeighborNodes ( n.getValue (  )  ) .contains ( node )  )  {^[CLASS] SimpleSubGraph  [METHOD] isIndependentOf [RETURN_TYPE] boolean   N value [VARIABLES] List  nodes  GraphNode  n  node  Graph  graph  boolean  N  value  
[buglab_swap_variables]^if  ( n.getNeighborNodes ( graph.getValue (  )  ) .contains ( node )  )  {^296^^^^^293^301^if  ( graph.getNeighborNodes ( n.getValue (  )  ) .contains ( node )  )  {^[CLASS] SimpleSubGraph  [METHOD] isIndependentOf [RETURN_TYPE] boolean   N value [VARIABLES] List  nodes  GraphNode  n  node  Graph  graph  boolean  N  value  
[buglab_swap_variables]^nodes.add ( value.getNode ( graph )  ) ;^307^^^^^303^308^nodes.add ( graph.getNode ( value )  ) ;^[CLASS] SimpleSubGraph  [METHOD] addNode [RETURN_TYPE] void   N value [VARIABLES] List  nodes  Graph  graph  boolean  N  value  
