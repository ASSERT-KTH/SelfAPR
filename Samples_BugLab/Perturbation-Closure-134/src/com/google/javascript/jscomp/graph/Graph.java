[BugLab_Argument_Swapping]^super ( annotation, annotatable ) ;^69^^^^^68^70^super ( annotatable, annotation ) ;^[CLASS] Graph AnnotationState GraphAnnotationState SimpleSubGraph  [METHOD] <init> [RETURN_TYPE] Annotation)   Annotatable annotatable Annotation annotation [VARIABLES] Annotatable  annotatable  Graph  graph  boolean  List  nodes  Deque  edgeAnnotationStack  nodeAnnotationStack  long  serialVersionUID  Annotation  annotation  
[BugLab_Variable_Misuse]^GraphNode<N, E> node1 = getNode ( n2 ) ;^122^^^^^121^138^GraphNode<N, E> node1 = getNode ( n1 ) ;^[CLASS] Graph AnnotationState GraphAnnotationState SimpleSubGraph  [METHOD] connectIfNotFound [RETURN_TYPE] void   N n1 E edge N n2 [VARIABLES] Graph  graph  boolean  E  edge  List  edgeList  nodes  GraphNode  node1  node2  Deque  edgeAnnotationStack  nodeAnnotationStack  GraphEdge  e  long  serialVersionUID  N  n1  n2  
[BugLab_Variable_Misuse]^GraphNode<N, E> node2 = getNode ( n1 ) ;^123^^^^^121^138^GraphNode<N, E> node2 = getNode ( n2 ) ;^[CLASS] Graph AnnotationState GraphAnnotationState SimpleSubGraph  [METHOD] connectIfNotFound [RETURN_TYPE] void   N n1 E edge N n2 [VARIABLES] Graph  graph  boolean  E  edge  List  edgeList  nodes  GraphNode  node1  node2  Deque  edgeAnnotationStack  nodeAnnotationStack  GraphEdge  e  long  serialVersionUID  N  n1  n2  
[BugLab_Wrong_Operator]^if  ( node1 != null )  {^124^^^^^121^138^if  ( node1 == null )  {^[CLASS] Graph AnnotationState GraphAnnotationState SimpleSubGraph  [METHOD] connectIfNotFound [RETURN_TYPE] void   N n1 E edge N n2 [VARIABLES] Graph  graph  boolean  E  edge  List  edgeList  nodes  GraphNode  node1  node2  Deque  edgeAnnotationStack  nodeAnnotationStack  GraphEdge  e  long  serialVersionUID  N  n1  n2  
[BugLab_Wrong_Operator]^if  ( node2 != null )  {^127^^^^^121^138^if  ( node2 == null )  {^[CLASS] Graph AnnotationState GraphAnnotationState SimpleSubGraph  [METHOD] connectIfNotFound [RETURN_TYPE] void   N n1 E edge N n2 [VARIABLES] Graph  graph  boolean  E  edge  List  edgeList  nodes  GraphNode  node1  node2  Deque  edgeAnnotationStack  nodeAnnotationStack  GraphEdge  e  long  serialVersionUID  N  n1  n2  
[BugLab_Variable_Misuse]^List<GraphEdge<N, E>> edgeList = getEdges ( n2, n2 ) ;^130^^^^^121^138^List<GraphEdge<N, E>> edgeList = getEdges ( n1, n2 ) ;^[CLASS] Graph AnnotationState GraphAnnotationState SimpleSubGraph  [METHOD] connectIfNotFound [RETURN_TYPE] void   N n1 E edge N n2 [VARIABLES] Graph  graph  boolean  E  edge  List  edgeList  nodes  GraphNode  node1  node2  Deque  edgeAnnotationStack  nodeAnnotationStack  GraphEdge  e  long  serialVersionUID  N  n1  n2  
[BugLab_Variable_Misuse]^List<GraphEdge<N, E>> edgeList = getEdges ( n1, n1 ) ;^130^^^^^121^138^List<GraphEdge<N, E>> edgeList = getEdges ( n1, n2 ) ;^[CLASS] Graph AnnotationState GraphAnnotationState SimpleSubGraph  [METHOD] connectIfNotFound [RETURN_TYPE] void   N n1 E edge N n2 [VARIABLES] Graph  graph  boolean  E  edge  List  edgeList  nodes  GraphNode  node1  node2  Deque  edgeAnnotationStack  nodeAnnotationStack  GraphEdge  e  long  serialVersionUID  N  n1  n2  
[BugLab_Argument_Swapping]^List<GraphEdge<N, E>> edgeList = getEdges ( n2, n1 ) ;^130^^^^^121^138^List<GraphEdge<N, E>> edgeList = getEdges ( n1, n2 ) ;^[CLASS] Graph AnnotationState GraphAnnotationState SimpleSubGraph  [METHOD] connectIfNotFound [RETURN_TYPE] void   N n1 E edge N n2 [VARIABLES] Graph  graph  boolean  E  edge  List  edgeList  nodes  GraphNode  node1  node2  Deque  edgeAnnotationStack  nodeAnnotationStack  GraphEdge  e  long  serialVersionUID  N  n1  n2  
[BugLab_Argument_Swapping]^if  ( edge.getValue (  )  == e || e.getValue (  ) .equals ( edge )  )  {^133^^^^^121^138^if  ( e.getValue (  )  == edge || e.getValue (  ) .equals ( edge )  )  {^[CLASS] Graph AnnotationState GraphAnnotationState SimpleSubGraph  [METHOD] connectIfNotFound [RETURN_TYPE] void   N n1 E edge N n2 [VARIABLES] Graph  graph  boolean  E  edge  List  edgeList  nodes  GraphNode  node1  node2  Deque  edgeAnnotationStack  nodeAnnotationStack  GraphEdge  e  long  serialVersionUID  N  n1  n2  
[BugLab_Wrong_Operator]^if  ( e.getValue (  )  == edge && e.getValue (  ) .equals ( edge )  )  {^133^^^^^121^138^if  ( e.getValue (  )  == edge || e.getValue (  ) .equals ( edge )  )  {^[CLASS] Graph AnnotationState GraphAnnotationState SimpleSubGraph  [METHOD] connectIfNotFound [RETURN_TYPE] void   N n1 E edge N n2 [VARIABLES] Graph  graph  boolean  E  edge  List  edgeList  nodes  GraphNode  node1  node2  Deque  edgeAnnotationStack  nodeAnnotationStack  GraphEdge  e  long  serialVersionUID  N  n1  n2  
[BugLab_Wrong_Operator]^if  ( e.getValue (  )  <= edge || e.getValue (  ) .equals ( edge )  )  {^133^^^^^121^138^if  ( e.getValue (  )  == edge || e.getValue (  ) .equals ( edge )  )  {^[CLASS] Graph AnnotationState GraphAnnotationState SimpleSubGraph  [METHOD] connectIfNotFound [RETURN_TYPE] void   N n1 E edge N n2 [VARIABLES] Graph  graph  boolean  E  edge  List  edgeList  nodes  GraphNode  node1  node2  Deque  edgeAnnotationStack  nodeAnnotationStack  GraphEdge  e  long  serialVersionUID  N  n1  n2  
[BugLab_Variable_Misuse]^connect ( n1, edge, n1 ) ;^137^^^^^121^138^connect ( n1, edge, n2 ) ;^[CLASS] Graph AnnotationState GraphAnnotationState SimpleSubGraph  [METHOD] connectIfNotFound [RETURN_TYPE] void   N n1 E edge N n2 [VARIABLES] Graph  graph  boolean  E  edge  List  edgeList  nodes  GraphNode  node1  node2  Deque  edgeAnnotationStack  nodeAnnotationStack  GraphEdge  e  long  serialVersionUID  N  n1  n2  
[BugLab_Argument_Swapping]^connect ( n2, edge, n1 ) ;^137^^^^^121^138^connect ( n1, edge, n2 ) ;^[CLASS] Graph AnnotationState GraphAnnotationState SimpleSubGraph  [METHOD] connectIfNotFound [RETURN_TYPE] void   N n1 E edge N n2 [VARIABLES] Graph  graph  boolean  E  edge  List  edgeList  nodes  GraphNode  node1  node2  Deque  edgeAnnotationStack  nodeAnnotationStack  GraphEdge  e  long  serialVersionUID  N  n1  n2  
[BugLab_Argument_Swapping]^connect ( n1, n2, edge ) ;^137^^^^^121^138^connect ( n1, edge, n2 ) ;^[CLASS] Graph AnnotationState GraphAnnotationState SimpleSubGraph  [METHOD] connectIfNotFound [RETURN_TYPE] void   N n1 E edge N n2 [VARIABLES] Graph  graph  boolean  E  edge  List  edgeList  nodes  GraphNode  node1  node2  Deque  edgeAnnotationStack  nodeAnnotationStack  GraphEdge  e  long  serialVersionUID  N  n1  n2  
[BugLab_Wrong_Operator]^return getNode ( n )  == null;^195^^^^^194^196^return getNode ( n )  != null;^[CLASS] Graph AnnotationState GraphAnnotationState SimpleSubGraph  [METHOD] hasNode [RETURN_TYPE] boolean   N n [VARIABLES] List  edgeList  nodes  Graph  graph  boolean  Deque  edgeAnnotationStack  nodeAnnotationStack  long  serialVersionUID  N  n  
[BugLab_Wrong_Operator]^if  ( nodeAnnotationStack != null )  {^225^^^^^224^229^if  ( nodeAnnotationStack == null )  {^[CLASS] Graph AnnotationState GraphAnnotationState SimpleSubGraph  [METHOD] pushNodeAnnotations [RETURN_TYPE] void   [VARIABLES] List  edgeList  nodes  Graph  graph  boolean  Deque  edgeAnnotationStack  nodeAnnotationStack  long  serialVersionUID  
[BugLab_Wrong_Operator]^if  ( edgeAnnotationStack != null )  {^246^^^^^245^250^if  ( edgeAnnotationStack == null )  {^[CLASS] Graph AnnotationState GraphAnnotationState SimpleSubGraph  [METHOD] pushEdgeAnnotations [RETURN_TYPE] void   [VARIABLES] List  edgeList  nodes  Graph  graph  boolean  Deque  edgeAnnotationStack  nodeAnnotationStack  long  serialVersionUID  
[BugLab_Argument_Swapping]^GraphNode<N, E> node = value.getNode ( graph ) ;^294^^^^^293^301^GraphNode<N, E> node = graph.getNode ( value ) ;^[CLASS] Graph AnnotationState GraphAnnotationState SimpleSubGraph  [METHOD] isIndependentOf [RETURN_TYPE] boolean   N value [VARIABLES] Graph  graph  boolean  List  edgeList  nodes  GraphNode  n  node  Deque  edgeAnnotationStack  nodeAnnotationStack  long  serialVersionUID  N  value  
[BugLab_Argument_Swapping]^if  ( n.getNeighborNodes ( graph.getValue (  )  ) .contains ( node )  )  {^296^^^^^293^301^if  ( graph.getNeighborNodes ( n.getValue (  )  ) .contains ( node )  )  {^[CLASS] Graph AnnotationState GraphAnnotationState SimpleSubGraph  [METHOD] isIndependentOf [RETURN_TYPE] boolean   N value [VARIABLES] Graph  graph  boolean  List  edgeList  nodes  GraphNode  n  node  Deque  edgeAnnotationStack  nodeAnnotationStack  long  serialVersionUID  N  value  
[BugLab_Argument_Swapping]^if  ( node.getNeighborNodes ( n.getValue (  )  ) .contains ( graph )  )  {^296^^^^^293^301^if  ( graph.getNeighborNodes ( n.getValue (  )  ) .contains ( node )  )  {^[CLASS] Graph AnnotationState GraphAnnotationState SimpleSubGraph  [METHOD] isIndependentOf [RETURN_TYPE] boolean   N value [VARIABLES] Graph  graph  boolean  List  edgeList  nodes  GraphNode  n  node  Deque  edgeAnnotationStack  nodeAnnotationStack  long  serialVersionUID  N  value  
[BugLab_Wrong_Literal]^return true;^297^^^^^293^301^return false;^[CLASS] Graph AnnotationState GraphAnnotationState SimpleSubGraph  [METHOD] isIndependentOf [RETURN_TYPE] boolean   N value [VARIABLES] Graph  graph  boolean  List  edgeList  nodes  GraphNode  n  node  Deque  edgeAnnotationStack  nodeAnnotationStack  long  serialVersionUID  N  value  
[BugLab_Variable_Misuse]^if  ( graph.getNeighborNodes ( this.getValue (  )  ) .contains ( node )  )  {^296^^^^^293^301^if  ( graph.getNeighborNodes ( n.getValue (  )  ) .contains ( node )  )  {^[CLASS] Graph AnnotationState GraphAnnotationState SimpleSubGraph  [METHOD] isIndependentOf [RETURN_TYPE] boolean   N value [VARIABLES] Graph  graph  boolean  List  edgeList  nodes  GraphNode  n  node  Deque  edgeAnnotationStack  nodeAnnotationStack  long  serialVersionUID  N  value  
[BugLab_Argument_Swapping]^if  ( graph.getNeighborNodes ( node.getValue (  )  ) .contains ( n )  )  {^296^^^^^293^301^if  ( graph.getNeighborNodes ( n.getValue (  )  ) .contains ( node )  )  {^[CLASS] Graph AnnotationState GraphAnnotationState SimpleSubGraph  [METHOD] isIndependentOf [RETURN_TYPE] boolean   N value [VARIABLES] Graph  graph  boolean  List  edgeList  nodes  GraphNode  n  node  Deque  edgeAnnotationStack  nodeAnnotationStack  long  serialVersionUID  N  value  
[BugLab_Wrong_Literal]^return false;^300^^^^^293^301^return true;^[CLASS] Graph AnnotationState GraphAnnotationState SimpleSubGraph  [METHOD] isIndependentOf [RETURN_TYPE] boolean   N value [VARIABLES] Graph  graph  boolean  List  edgeList  nodes  GraphNode  n  node  Deque  edgeAnnotationStack  nodeAnnotationStack  long  serialVersionUID  N  value  
[BugLab_Variable_Misuse]^nodes.add ( null.getNode ( value )  ) ;^307^^^^^303^308^nodes.add ( graph.getNode ( value )  ) ;^[CLASS] Graph AnnotationState GraphAnnotationState SimpleSubGraph  [METHOD] addNode [RETURN_TYPE] void   N value [VARIABLES] List  edgeList  nodes  Graph  graph  boolean  Deque  edgeAnnotationStack  nodeAnnotationStack  long  serialVersionUID  N  value  
[BugLab_Argument_Swapping]^nodes.add ( value.getNode ( graph )  ) ;^307^^^^^303^308^nodes.add ( graph.getNode ( value )  ) ;^[CLASS] Graph AnnotationState GraphAnnotationState SimpleSubGraph  [METHOD] addNode [RETURN_TYPE] void   N value [VARIABLES] List  edgeList  nodes  Graph  graph  boolean  Deque  edgeAnnotationStack  nodeAnnotationStack  long  serialVersionUID  N  value  
[BugLab_Argument_Swapping]^super ( annotation, annotatable ) ;^69^^^^^68^70^super ( annotatable, annotation ) ;^[CLASS] AnnotationState  [METHOD] <init> [RETURN_TYPE] Annotation)   Annotatable annotatable Annotation annotation [VARIABLES] Annotatable  annotatable  boolean  long  serialVersionUID  Annotation  annotation  
[BugLab_Argument_Swapping]^GraphNode<N, E> node = value.getNode ( graph ) ;^294^^^^^293^301^GraphNode<N, E> node = graph.getNode ( value ) ;^[CLASS] SimpleSubGraph  [METHOD] isIndependentOf [RETURN_TYPE] boolean   N value [VARIABLES] List  nodes  GraphNode  n  node  Graph  graph  boolean  N  value  
[BugLab_Argument_Swapping]^if  ( n.getNeighborNodes ( graph.getValue (  )  ) .contains ( node )  )  {^296^^^^^293^301^if  ( graph.getNeighborNodes ( n.getValue (  )  ) .contains ( node )  )  {^[CLASS] SimpleSubGraph  [METHOD] isIndependentOf [RETURN_TYPE] boolean   N value [VARIABLES] List  nodes  GraphNode  n  node  Graph  graph  boolean  N  value  
[BugLab_Argument_Swapping]^if  ( graph.getNeighborNodes ( node.getValue (  )  ) .contains ( n )  )  {^296^^^^^293^301^if  ( graph.getNeighborNodes ( n.getValue (  )  ) .contains ( node )  )  {^[CLASS] SimpleSubGraph  [METHOD] isIndependentOf [RETURN_TYPE] boolean   N value [VARIABLES] List  nodes  GraphNode  n  node  Graph  graph  boolean  N  value  
[BugLab_Argument_Swapping]^if  ( node.getNeighborNodes ( n.getValue (  )  ) .contains ( graph )  )  {^296^^^^^293^301^if  ( graph.getNeighborNodes ( n.getValue (  )  ) .contains ( node )  )  {^[CLASS] SimpleSubGraph  [METHOD] isIndependentOf [RETURN_TYPE] boolean   N value [VARIABLES] List  nodes  GraphNode  n  node  Graph  graph  boolean  N  value  
[BugLab_Wrong_Literal]^return true;^297^^^^^293^301^return false;^[CLASS] SimpleSubGraph  [METHOD] isIndependentOf [RETURN_TYPE] boolean   N value [VARIABLES] List  nodes  GraphNode  n  node  Graph  graph  boolean  N  value  
[BugLab_Wrong_Literal]^return false;^300^^^^^293^301^return true;^[CLASS] SimpleSubGraph  [METHOD] isIndependentOf [RETURN_TYPE] boolean   N value [VARIABLES] List  nodes  GraphNode  n  node  Graph  graph  boolean  N  value  
[BugLab_Argument_Swapping]^nodes.add ( value.getNode ( graph )  ) ;^307^^^^^303^308^nodes.add ( graph.getNode ( value )  ) ;^[CLASS] SimpleSubGraph  [METHOD] addNode [RETURN_TYPE] void   N value [VARIABLES] List  nodes  Graph  graph  boolean  N  value  
