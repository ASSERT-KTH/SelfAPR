[BugLab_Argument_Swapping]^computeFixedPoint ( nodes, graph ) ;^74^^^^^69^75^computeFixedPoint ( graph, nodes ) ;^[CLASS] FixedPointGraphTraversal  [METHOD] computeFixedPoint [RETURN_TYPE] void   DiGraph<N, E> graph [VARIABLES] EdgeCallback  callback  DiGraphNode  node  String  NON_HALTING_ERROR_MSG  DiGraph  graph  Set  nodes  boolean  
[BugLab_Variable_Misuse]^computeFixedPoint ( graph, this ) ;^85^^^^^82^86^computeFixedPoint ( graph, entrySet ) ;^[CLASS] FixedPointGraphTraversal  [METHOD] computeFixedPoint [RETURN_TYPE] void   DiGraph<N, E> graph N entry [VARIABLES] EdgeCallback  callback  String  NON_HALTING_ERROR_MSG  DiGraph  graph  Set  entrySet  boolean  N  entry  
[BugLab_Argument_Swapping]^computeFixedPoint ( entrySet, graph ) ;^85^^^^^82^86^computeFixedPoint ( graph, entrySet ) ;^[CLASS] FixedPointGraphTraversal  [METHOD] computeFixedPoint [RETURN_TYPE] void   DiGraph<N, E> graph N entry [VARIABLES] EdgeCallback  callback  String  NON_HALTING_ERROR_MSG  DiGraph  graph  Set  entrySet  boolean  N  entry  
[BugLab_Wrong_Literal]^int cycleCount = cycleCount;^94^^^^^79^109^int cycleCount = 0;^[CLASS] FixedPointGraphTraversal  [METHOD] computeFixedPoint [RETURN_TYPE] void   DiGraph<N, E> graph Set<N> entrySet [VARIABLES] LinkedHashSet  workSet  DiGraphNode  source  Set  entrySet  DiGraphEdge  edge  boolean  EdgeCallback  callback  List  outEdges  String  NON_HALTING_ERROR_MSG  DiGraph  graph  int  cycleCount  long  maxIterations  nodeCount  N  destNode  n  sourceValue  
[BugLab_Wrong_Operator]^long - maxIterations = Math.max ( nodeCount * nodeCount * nodeCount, 100 ) ;^99^^^^^84^114^long maxIterations = Math.max ( nodeCount * nodeCount * nodeCount, 100 ) ;^[CLASS] FixedPointGraphTraversal  [METHOD] computeFixedPoint [RETURN_TYPE] void   DiGraph<N, E> graph Set<N> entrySet [VARIABLES] LinkedHashSet  workSet  DiGraphNode  source  Set  entrySet  DiGraphEdge  edge  boolean  EdgeCallback  callback  List  outEdges  String  NON_HALTING_ERROR_MSG  DiGraph  graph  int  cycleCount  long  maxIterations  nodeCount  N  destNode  n  sourceValue  
[BugLab_Wrong_Operator]^long maxIterations = Math.max ( nodeCount / nodeCount * nodeCount, 100 ) ;^99^^^^^84^114^long maxIterations = Math.max ( nodeCount * nodeCount * nodeCount, 100 ) ;^[CLASS] FixedPointGraphTraversal  [METHOD] computeFixedPoint [RETURN_TYPE] void   DiGraph<N, E> graph Set<N> entrySet [VARIABLES] LinkedHashSet  workSet  DiGraphNode  source  Set  entrySet  DiGraphEdge  edge  boolean  EdgeCallback  callback  List  outEdges  String  NON_HALTING_ERROR_MSG  DiGraph  graph  int  cycleCount  long  maxIterations  nodeCount  N  destNode  n  sourceValue  
[BugLab_Variable_Misuse]^long maxIterations = Math.max ( maxIterations * nodeCount * nodeCount, 100 ) ;^99^^^^^84^114^long maxIterations = Math.max ( nodeCount * nodeCount * nodeCount, 100 ) ;^[CLASS] FixedPointGraphTraversal  [METHOD] computeFixedPoint [RETURN_TYPE] void   DiGraph<N, E> graph Set<N> entrySet [VARIABLES] LinkedHashSet  workSet  DiGraphNode  source  Set  entrySet  DiGraphEdge  edge  boolean  EdgeCallback  callback  List  outEdges  String  NON_HALTING_ERROR_MSG  DiGraph  graph  int  cycleCount  long  maxIterations  nodeCount  N  destNode  n  sourceValue  
[BugLab_Wrong_Operator]^long maxIterations = Math.max ( nodeCount - nodeCount * nodeCount, 100 ) ;^99^^^^^84^114^long maxIterations = Math.max ( nodeCount * nodeCount * nodeCount, 100 ) ;^[CLASS] FixedPointGraphTraversal  [METHOD] computeFixedPoint [RETURN_TYPE] void   DiGraph<N, E> graph Set<N> entrySet [VARIABLES] LinkedHashSet  workSet  DiGraphNode  source  Set  entrySet  DiGraphEdge  edge  boolean  EdgeCallback  callback  List  outEdges  String  NON_HALTING_ERROR_MSG  DiGraph  graph  int  cycleCount  long  maxIterations  nodeCount  N  destNode  n  sourceValue  
[BugLab_Variable_Misuse]^workSet.add ( graph.getDirectedGraphNode ( sourceValue )  ) ;^105^^^^^90^120^workSet.add ( graph.getDirectedGraphNode ( n )  ) ;^[CLASS] FixedPointGraphTraversal  [METHOD] computeFixedPoint [RETURN_TYPE] void   DiGraph<N, E> graph Set<N> entrySet [VARIABLES] LinkedHashSet  workSet  DiGraphNode  source  Set  entrySet  DiGraphEdge  edge  boolean  EdgeCallback  callback  List  outEdges  String  NON_HALTING_ERROR_MSG  DiGraph  graph  int  cycleCount  long  maxIterations  nodeCount  N  destNode  n  sourceValue  
[BugLab_Argument_Swapping]^workSet.add ( n.getDirectedGraphNode ( graph )  ) ;^105^^^^^90^120^workSet.add ( graph.getDirectedGraphNode ( n )  ) ;^[CLASS] FixedPointGraphTraversal  [METHOD] computeFixedPoint [RETURN_TYPE] void   DiGraph<N, E> graph Set<N> entrySet [VARIABLES] LinkedHashSet  workSet  DiGraphNode  source  Set  entrySet  DiGraphEdge  edge  boolean  EdgeCallback  callback  List  outEdges  String  NON_HALTING_ERROR_MSG  DiGraph  graph  int  cycleCount  long  maxIterations  nodeCount  N  destNode  n  sourceValue  
[BugLab_Variable_Misuse]^workSet.add ( null.getDirectedGraphNode ( n )  ) ;^105^^^^^90^120^workSet.add ( graph.getDirectedGraphNode ( n )  ) ;^[CLASS] FixedPointGraphTraversal  [METHOD] computeFixedPoint [RETURN_TYPE] void   DiGraph<N, E> graph Set<N> entrySet [VARIABLES] LinkedHashSet  workSet  DiGraphNode  source  Set  entrySet  DiGraphEdge  edge  boolean  EdgeCallback  callback  List  outEdges  String  NON_HALTING_ERROR_MSG  DiGraph  graph  int  cycleCount  long  maxIterations  nodeCount  N  destNode  n  sourceValue  
[BugLab_Variable_Misuse]^if  ( callback.traverseEdge ( n, edge.getValue (  ) , destNode )  )  {^120^^^^^105^135^if  ( callback.traverseEdge ( sourceValue, edge.getValue (  ) , destNode )  )  {^[CLASS] FixedPointGraphTraversal  [METHOD] computeFixedPoint [RETURN_TYPE] void   DiGraph<N, E> graph Set<N> entrySet [VARIABLES] LinkedHashSet  workSet  DiGraphNode  source  Set  entrySet  DiGraphEdge  edge  boolean  EdgeCallback  callback  List  outEdges  String  NON_HALTING_ERROR_MSG  DiGraph  graph  int  cycleCount  long  maxIterations  nodeCount  N  destNode  n  sourceValue  
[BugLab_Variable_Misuse]^if  ( callback.traverseEdge ( sourceValue, 2.getValue (  ) , destNode )  )  {^120^^^^^105^135^if  ( callback.traverseEdge ( sourceValue, edge.getValue (  ) , destNode )  )  {^[CLASS] FixedPointGraphTraversal  [METHOD] computeFixedPoint [RETURN_TYPE] void   DiGraph<N, E> graph Set<N> entrySet [VARIABLES] LinkedHashSet  workSet  DiGraphNode  source  Set  entrySet  DiGraphEdge  edge  boolean  EdgeCallback  callback  List  outEdges  String  NON_HALTING_ERROR_MSG  DiGraph  graph  int  cycleCount  long  maxIterations  nodeCount  N  destNode  n  sourceValue  
[BugLab_Variable_Misuse]^if  ( callback.traverseEdge ( sourceValue, edge.getValue (  ) , sourceValue )  )  {^120^^^^^105^135^if  ( callback.traverseEdge ( sourceValue, edge.getValue (  ) , destNode )  )  {^[CLASS] FixedPointGraphTraversal  [METHOD] computeFixedPoint [RETURN_TYPE] void   DiGraph<N, E> graph Set<N> entrySet [VARIABLES] LinkedHashSet  workSet  DiGraphNode  source  Set  entrySet  DiGraphEdge  edge  boolean  EdgeCallback  callback  List  outEdges  String  NON_HALTING_ERROR_MSG  DiGraph  graph  int  cycleCount  long  maxIterations  nodeCount  N  destNode  n  sourceValue  
[BugLab_Argument_Swapping]^if  ( callback.traverseEdge ( destNode, edge.getValue (  ) , sourceValue )  )  {^120^^^^^105^135^if  ( callback.traverseEdge ( sourceValue, edge.getValue (  ) , destNode )  )  {^[CLASS] FixedPointGraphTraversal  [METHOD] computeFixedPoint [RETURN_TYPE] void   DiGraph<N, E> graph Set<N> entrySet [VARIABLES] LinkedHashSet  workSet  DiGraphNode  source  Set  entrySet  DiGraphEdge  edge  boolean  EdgeCallback  callback  List  outEdges  String  NON_HALTING_ERROR_MSG  DiGraph  graph  int  cycleCount  long  maxIterations  nodeCount  N  destNode  n  sourceValue  
[BugLab_Argument_Swapping]^if  ( callback.traverseEdge ( edge, sourceValue.getValue (  ) , destNode )  )  {^120^^^^^105^135^if  ( callback.traverseEdge ( sourceValue, edge.getValue (  ) , destNode )  )  {^[CLASS] FixedPointGraphTraversal  [METHOD] computeFixedPoint [RETURN_TYPE] void   DiGraph<N, E> graph Set<N> entrySet [VARIABLES] LinkedHashSet  workSet  DiGraphNode  source  Set  entrySet  DiGraphEdge  edge  boolean  EdgeCallback  callback  List  outEdges  String  NON_HALTING_ERROR_MSG  DiGraph  graph  int  cycleCount  long  maxIterations  nodeCount  N  destNode  n  sourceValue  
[BugLab_Argument_Swapping]^if  ( destNode.traverseEdge ( sourceValue, edge.getValue (  ) , callback )  )  {^120^^^^^105^135^if  ( callback.traverseEdge ( sourceValue, edge.getValue (  ) , destNode )  )  {^[CLASS] FixedPointGraphTraversal  [METHOD] computeFixedPoint [RETURN_TYPE] void   DiGraph<N, E> graph Set<N> entrySet [VARIABLES] LinkedHashSet  workSet  DiGraphNode  source  Set  entrySet  DiGraphEdge  edge  boolean  EdgeCallback  callback  List  outEdges  String  NON_HALTING_ERROR_MSG  DiGraph  graph  int  cycleCount  long  maxIterations  nodeCount  N  destNode  n  sourceValue  
[BugLab_Variable_Misuse]^for  ( ; !workSet.isEmpty (  )  && cycleCount < nodeCount; cycleCount++ )  {^107^^^^^92^122^for  ( ; !workSet.isEmpty (  )  && cycleCount < maxIterations; cycleCount++ )  {^[CLASS] FixedPointGraphTraversal  [METHOD] computeFixedPoint [RETURN_TYPE] void   DiGraph<N, E> graph Set<N> entrySet [VARIABLES] LinkedHashSet  workSet  DiGraphNode  source  Set  entrySet  DiGraphEdge  edge  boolean  EdgeCallback  callback  List  outEdges  String  NON_HALTING_ERROR_MSG  DiGraph  graph  int  cycleCount  long  maxIterations  nodeCount  N  destNode  n  sourceValue  
[BugLab_Wrong_Operator]^for  ( ; !workSet.isEmpty (  )  || cycleCount < maxIterations; cycleCount++ )  {^107^^^^^92^122^for  ( ; !workSet.isEmpty (  )  && cycleCount < maxIterations; cycleCount++ )  {^[CLASS] FixedPointGraphTraversal  [METHOD] computeFixedPoint [RETURN_TYPE] void   DiGraph<N, E> graph Set<N> entrySet [VARIABLES] LinkedHashSet  workSet  DiGraphNode  source  Set  entrySet  DiGraphEdge  edge  boolean  EdgeCallback  callback  List  outEdges  String  NON_HALTING_ERROR_MSG  DiGraph  graph  int  cycleCount  long  maxIterations  nodeCount  N  destNode  n  sourceValue  
[BugLab_Wrong_Operator]^for  ( ; !workSet.isEmpty (  )  && cycleCount <= maxIterations; cycleCount++ )  {^107^^^^^92^122^for  ( ; !workSet.isEmpty (  )  && cycleCount < maxIterations; cycleCount++ )  {^[CLASS] FixedPointGraphTraversal  [METHOD] computeFixedPoint [RETURN_TYPE] void   DiGraph<N, E> graph Set<N> entrySet [VARIABLES] LinkedHashSet  workSet  DiGraphNode  source  Set  entrySet  DiGraphEdge  edge  boolean  EdgeCallback  callback  List  outEdges  String  NON_HALTING_ERROR_MSG  DiGraph  graph  int  cycleCount  long  maxIterations  nodeCount  N  destNode  n  sourceValue  
[BugLab_Variable_Misuse]^if  ( callback.traverseEdge ( sourceValue, edge.getValue (  ) , n )  )  {^120^^^^^105^135^if  ( callback.traverseEdge ( sourceValue, edge.getValue (  ) , destNode )  )  {^[CLASS] FixedPointGraphTraversal  [METHOD] computeFixedPoint [RETURN_TYPE] void   DiGraph<N, E> graph Set<N> entrySet [VARIABLES] LinkedHashSet  workSet  DiGraphNode  source  Set  entrySet  DiGraphEdge  edge  boolean  EdgeCallback  callback  List  outEdges  String  NON_HALTING_ERROR_MSG  DiGraph  graph  int  cycleCount  long  maxIterations  nodeCount  N  destNode  n  sourceValue  
[BugLab_Variable_Misuse]^List<DiGraphEdge<N, E>> outEdges = 0.getOutEdges (  ) ;^117^^^^^102^132^List<DiGraphEdge<N, E>> outEdges = source.getOutEdges (  ) ;^[CLASS] FixedPointGraphTraversal  [METHOD] computeFixedPoint [RETURN_TYPE] void   DiGraph<N, E> graph Set<N> entrySet [VARIABLES] LinkedHashSet  workSet  DiGraphNode  source  Set  entrySet  DiGraphEdge  edge  boolean  EdgeCallback  callback  List  outEdges  String  NON_HALTING_ERROR_MSG  DiGraph  graph  int  cycleCount  long  maxIterations  nodeCount  N  destNode  n  sourceValue  
[BugLab_Variable_Misuse]^if  ( 1.traverseEdge ( sourceValue, edge.getValue (  ) , destNode )  )  {^120^^^^^105^135^if  ( callback.traverseEdge ( sourceValue, edge.getValue (  ) , destNode )  )  {^[CLASS] FixedPointGraphTraversal  [METHOD] computeFixedPoint [RETURN_TYPE] void   DiGraph<N, E> graph Set<N> entrySet [VARIABLES] LinkedHashSet  workSet  DiGraphNode  source  Set  entrySet  DiGraphEdge  edge  boolean  EdgeCallback  callback  List  outEdges  String  NON_HALTING_ERROR_MSG  DiGraph  graph  int  cycleCount  long  maxIterations  nodeCount  N  destNode  n  sourceValue  
[BugLab_Argument_Swapping]^if  ( callback.traverseEdge ( sourceValue, destNode.getValue (  ) , edge )  )  {^120^^^^^105^135^if  ( callback.traverseEdge ( sourceValue, edge.getValue (  ) , destNode )  )  {^[CLASS] FixedPointGraphTraversal  [METHOD] computeFixedPoint [RETURN_TYPE] void   DiGraph<N, E> graph Set<N> entrySet [VARIABLES] LinkedHashSet  workSet  DiGraphNode  source  Set  entrySet  DiGraphEdge  edge  boolean  EdgeCallback  callback  List  outEdges  String  NON_HALTING_ERROR_MSG  DiGraph  graph  int  cycleCount  long  maxIterations  nodeCount  N  destNode  n  sourceValue  
[BugLab_Argument_Swapping]^if  ( sourceValue.traverseEdge ( callback, edge.getValue (  ) , destNode )  )  {^120^^^^^105^135^if  ( callback.traverseEdge ( sourceValue, edge.getValue (  ) , destNode )  )  {^[CLASS] FixedPointGraphTraversal  [METHOD] computeFixedPoint [RETURN_TYPE] void   DiGraph<N, E> graph Set<N> entrySet [VARIABLES] LinkedHashSet  workSet  DiGraphNode  source  Set  entrySet  DiGraphEdge  edge  boolean  EdgeCallback  callback  List  outEdges  String  NON_HALTING_ERROR_MSG  DiGraph  graph  int  cycleCount  long  maxIterations  nodeCount  N  destNode  n  sourceValue  
[BugLab_Variable_Misuse]^workSet.add ( 1.getDestination (  )  ) ;^121^^^^^106^136^workSet.add ( edge.getDestination (  )  ) ;^[CLASS] FixedPointGraphTraversal  [METHOD] computeFixedPoint [RETURN_TYPE] void   DiGraph<N, E> graph Set<N> entrySet [VARIABLES] LinkedHashSet  workSet  DiGraphNode  source  Set  entrySet  DiGraphEdge  edge  boolean  EdgeCallback  callback  List  outEdges  String  NON_HALTING_ERROR_MSG  DiGraph  graph  int  cycleCount  long  maxIterations  nodeCount  N  destNode  n  sourceValue  
[BugLab_Variable_Misuse]^N thisValue = source.getValue (  ) ;^113^^^^^98^128^N sourceValue = source.getValue (  ) ;^[CLASS] FixedPointGraphTraversal  [METHOD] computeFixedPoint [RETURN_TYPE] void   DiGraph<N, E> graph Set<N> entrySet [VARIABLES] LinkedHashSet  workSet  DiGraphNode  source  Set  entrySet  DiGraphEdge  edge  boolean  EdgeCallback  callback  List  outEdges  String  NON_HALTING_ERROR_MSG  DiGraph  graph  int  cycleCount  long  maxIterations  nodeCount  N  destNode  n  sourceValue  
[BugLab_Argument_Swapping]^if  ( edge.traverseEdge ( sourceValue, callback.getValue (  ) , destNode )  )  {^120^^^^^105^135^if  ( callback.traverseEdge ( sourceValue, edge.getValue (  ) , destNode )  )  {^[CLASS] FixedPointGraphTraversal  [METHOD] computeFixedPoint [RETURN_TYPE] void   DiGraph<N, E> graph Set<N> entrySet [VARIABLES] LinkedHashSet  workSet  DiGraphNode  source  Set  entrySet  DiGraphEdge  edge  boolean  EdgeCallback  callback  List  outEdges  String  NON_HALTING_ERROR_MSG  DiGraph  graph  int  cycleCount  long  maxIterations  nodeCount  N  destNode  n  sourceValue  
[BugLab_Variable_Misuse]^workSet.add ( this.getDestination (  )  ) ;^121^^^^^106^136^workSet.add ( edge.getDestination (  )  ) ;^[CLASS] FixedPointGraphTraversal  [METHOD] computeFixedPoint [RETURN_TYPE] void   DiGraph<N, E> graph Set<N> entrySet [VARIABLES] LinkedHashSet  workSet  DiGraphNode  source  Set  entrySet  DiGraphEdge  edge  boolean  EdgeCallback  callback  List  outEdges  String  NON_HALTING_ERROR_MSG  DiGraph  graph  int  cycleCount  long  maxIterations  nodeCount  N  destNode  n  sourceValue  
[BugLab_Variable_Misuse]^Preconditions.checkState ( cycleCount != nodeCount, NON_HALTING_ERROR_MSG ) ;^126^127^^^^111^141^Preconditions.checkState ( cycleCount != maxIterations, NON_HALTING_ERROR_MSG ) ;^[CLASS] FixedPointGraphTraversal  [METHOD] computeFixedPoint [RETURN_TYPE] void   DiGraph<N, E> graph Set<N> entrySet [VARIABLES] LinkedHashSet  workSet  DiGraphNode  source  Set  entrySet  DiGraphEdge  edge  boolean  EdgeCallback  callback  List  outEdges  String  NON_HALTING_ERROR_MSG  DiGraph  graph  int  cycleCount  long  maxIterations  nodeCount  N  destNode  n  sourceValue  
[BugLab_Argument_Swapping]^Preconditions.checkState ( maxIterations != cycleCount, NON_HALTING_ERROR_MSG ) ;^126^127^^^^111^141^Preconditions.checkState ( cycleCount != maxIterations, NON_HALTING_ERROR_MSG ) ;^[CLASS] FixedPointGraphTraversal  [METHOD] computeFixedPoint [RETURN_TYPE] void   DiGraph<N, E> graph Set<N> entrySet [VARIABLES] LinkedHashSet  workSet  DiGraphNode  source  Set  entrySet  DiGraphEdge  edge  boolean  EdgeCallback  callback  List  outEdges  String  NON_HALTING_ERROR_MSG  DiGraph  graph  int  cycleCount  long  maxIterations  nodeCount  N  destNode  n  sourceValue  
[BugLab_Argument_Swapping]^Preconditions.checkState ( cycleCount != NON_HALTING_ERROR_MSG, maxIterations ) ;^126^127^^^^111^141^Preconditions.checkState ( cycleCount != maxIterations, NON_HALTING_ERROR_MSG ) ;^[CLASS] FixedPointGraphTraversal  [METHOD] computeFixedPoint [RETURN_TYPE] void   DiGraph<N, E> graph Set<N> entrySet [VARIABLES] LinkedHashSet  workSet  DiGraphNode  source  Set  entrySet  DiGraphEdge  edge  boolean  EdgeCallback  callback  List  outEdges  String  NON_HALTING_ERROR_MSG  DiGraph  graph  int  cycleCount  long  maxIterations  nodeCount  N  destNode  n  sourceValue  
[BugLab_Wrong_Operator]^Preconditions.checkState ( cycleCount == maxIterations, NON_HALTING_ERROR_MSG ) ;^126^127^^^^111^141^Preconditions.checkState ( cycleCount != maxIterations, NON_HALTING_ERROR_MSG ) ;^[CLASS] FixedPointGraphTraversal  [METHOD] computeFixedPoint [RETURN_TYPE] void   DiGraph<N, E> graph Set<N> entrySet [VARIABLES] LinkedHashSet  workSet  DiGraphNode  source  Set  entrySet  DiGraphEdge  edge  boolean  EdgeCallback  callback  List  outEdges  String  NON_HALTING_ERROR_MSG  DiGraph  graph  int  cycleCount  long  maxIterations  nodeCount  N  destNode  n  sourceValue  
