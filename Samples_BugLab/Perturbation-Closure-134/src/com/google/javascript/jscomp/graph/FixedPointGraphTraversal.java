[buglab_swap_variables]^computeFixedPoint ( nodes, graph ) ;^74^^^^^69^75^computeFixedPoint ( graph, nodes ) ;^[CLASS] FixedPointGraphTraversal  [METHOD] computeFixedPoint [RETURN_TYPE] void   DiGraph<N, E> graph [VARIABLES] EdgeCallback  callback  DiGraphNode  node  String  NON_HALTING_ERROR_MSG  DiGraph  graph  Set  nodes  boolean  
[buglab_swap_variables]^computeFixedPoint (  nodes ) ;^74^^^^^69^75^computeFixedPoint ( graph, nodes ) ;^[CLASS] FixedPointGraphTraversal  [METHOD] computeFixedPoint [RETURN_TYPE] void   DiGraph<N, E> graph [VARIABLES] EdgeCallback  callback  DiGraphNode  node  String  NON_HALTING_ERROR_MSG  DiGraph  graph  Set  nodes  boolean  
[buglab_swap_variables]^computeFixedPoint ( graph ) ;^74^^^^^69^75^computeFixedPoint ( graph, nodes ) ;^[CLASS] FixedPointGraphTraversal  [METHOD] computeFixedPoint [RETURN_TYPE] void   DiGraph<N, E> graph [VARIABLES] EdgeCallback  callback  DiGraphNode  node  String  NON_HALTING_ERROR_MSG  DiGraph  graph  Set  nodes  boolean  
[buglab_swap_variables]^computeFixedPoint ( entrySet, graph ) ;^85^^^^^82^86^computeFixedPoint ( graph, entrySet ) ;^[CLASS] FixedPointGraphTraversal  [METHOD] computeFixedPoint [RETURN_TYPE] void   DiGraph<N, E> graph N entry [VARIABLES] EdgeCallback  callback  String  NON_HALTING_ERROR_MSG  DiGraph  graph  Set  entrySet  boolean  N  entry  
[buglab_swap_variables]^computeFixedPoint (  entrySet ) ;^85^^^^^82^86^computeFixedPoint ( graph, entrySet ) ;^[CLASS] FixedPointGraphTraversal  [METHOD] computeFixedPoint [RETURN_TYPE] void   DiGraph<N, E> graph N entry [VARIABLES] EdgeCallback  callback  String  NON_HALTING_ERROR_MSG  DiGraph  graph  Set  entrySet  boolean  N  entry  
[buglab_swap_variables]^computeFixedPoint ( graph ) ;^85^^^^^82^86^computeFixedPoint ( graph, entrySet ) ;^[CLASS] FixedPointGraphTraversal  [METHOD] computeFixedPoint [RETURN_TYPE] void   DiGraph<N, E> graph N entry [VARIABLES] EdgeCallback  callback  String  NON_HALTING_ERROR_MSG  DiGraph  graph  Set  entrySet  boolean  N  entry  
[buglab_swap_variables]^workSet.add ( n.getDirectedGraphNode ( graph )  ) ;^105^^^^^90^120^workSet.add ( graph.getDirectedGraphNode ( n )  ) ;^[CLASS] FixedPointGraphTraversal  [METHOD] computeFixedPoint [RETURN_TYPE] void   DiGraph<N, E> graph Set<N> entrySet [VARIABLES] LinkedHashSet  workSet  DiGraphNode  source  Set  entrySet  DiGraphEdge  edge  boolean  EdgeCallback  callback  List  outEdges  String  NON_HALTING_ERROR_MSG  DiGraph  graph  int  cycleCount  long  maxIterations  nodeCount  N  destNode  n  sourceValue  
[buglab_swap_variables]^if  ( callback.traverseEdge ( destNode, edge.getValue (  ) , sourceValue )  )  {^120^^^^^105^135^if  ( callback.traverseEdge ( sourceValue, edge.getValue (  ) , destNode )  )  {^[CLASS] FixedPointGraphTraversal  [METHOD] computeFixedPoint [RETURN_TYPE] void   DiGraph<N, E> graph Set<N> entrySet [VARIABLES] LinkedHashSet  workSet  DiGraphNode  source  Set  entrySet  DiGraphEdge  edge  boolean  EdgeCallback  callback  List  outEdges  String  NON_HALTING_ERROR_MSG  DiGraph  graph  int  cycleCount  long  maxIterations  nodeCount  N  destNode  n  sourceValue  
[buglab_swap_variables]^if  ( callback.traverseEdge (  edge.getValue (  ) , destNode )  )  {^120^^^^^105^135^if  ( callback.traverseEdge ( sourceValue, edge.getValue (  ) , destNode )  )  {^[CLASS] FixedPointGraphTraversal  [METHOD] computeFixedPoint [RETURN_TYPE] void   DiGraph<N, E> graph Set<N> entrySet [VARIABLES] LinkedHashSet  workSet  DiGraphNode  source  Set  entrySet  DiGraphEdge  edge  boolean  EdgeCallback  callback  List  outEdges  String  NON_HALTING_ERROR_MSG  DiGraph  graph  int  cycleCount  long  maxIterations  nodeCount  N  destNode  n  sourceValue  
[buglab_swap_variables]^if  ( callback.traverseEdge ( sourceValue, destNode.getValue (  ) , edge )  )  {^120^^^^^105^135^if  ( callback.traverseEdge ( sourceValue, edge.getValue (  ) , destNode )  )  {^[CLASS] FixedPointGraphTraversal  [METHOD] computeFixedPoint [RETURN_TYPE] void   DiGraph<N, E> graph Set<N> entrySet [VARIABLES] LinkedHashSet  workSet  DiGraphNode  source  Set  entrySet  DiGraphEdge  edge  boolean  EdgeCallback  callback  List  outEdges  String  NON_HALTING_ERROR_MSG  DiGraph  graph  int  cycleCount  long  maxIterations  nodeCount  N  destNode  n  sourceValue  
[buglab_swap_variables]^if  ( callback.traverseEdge ( sourceValue.getValue (  ) , destNode )  )  {^120^^^^^105^135^if  ( callback.traverseEdge ( sourceValue, edge.getValue (  ) , destNode )  )  {^[CLASS] FixedPointGraphTraversal  [METHOD] computeFixedPoint [RETURN_TYPE] void   DiGraph<N, E> graph Set<N> entrySet [VARIABLES] LinkedHashSet  workSet  DiGraphNode  source  Set  entrySet  DiGraphEdge  edge  boolean  EdgeCallback  callback  List  outEdges  String  NON_HALTING_ERROR_MSG  DiGraph  graph  int  cycleCount  long  maxIterations  nodeCount  N  destNode  n  sourceValue  
[buglab_swap_variables]^if  ( callback.traverseEdge ( sourceValue, edge.getValue (  )  )  )  {^120^^^^^105^135^if  ( callback.traverseEdge ( sourceValue, edge.getValue (  ) , destNode )  )  {^[CLASS] FixedPointGraphTraversal  [METHOD] computeFixedPoint [RETURN_TYPE] void   DiGraph<N, E> graph Set<N> entrySet [VARIABLES] LinkedHashSet  workSet  DiGraphNode  source  Set  entrySet  DiGraphEdge  edge  boolean  EdgeCallback  callback  List  outEdges  String  NON_HALTING_ERROR_MSG  DiGraph  graph  int  cycleCount  long  maxIterations  nodeCount  N  destNode  n  sourceValue  
[buglab_swap_variables]^if  ( sourceValue.traverseEdge ( callback, edge.getValue (  ) , destNode )  )  {^120^^^^^105^135^if  ( callback.traverseEdge ( sourceValue, edge.getValue (  ) , destNode )  )  {^[CLASS] FixedPointGraphTraversal  [METHOD] computeFixedPoint [RETURN_TYPE] void   DiGraph<N, E> graph Set<N> entrySet [VARIABLES] LinkedHashSet  workSet  DiGraphNode  source  Set  entrySet  DiGraphEdge  edge  boolean  EdgeCallback  callback  List  outEdges  String  NON_HALTING_ERROR_MSG  DiGraph  graph  int  cycleCount  long  maxIterations  nodeCount  N  destNode  n  sourceValue  
[buglab_swap_variables]^for  ( ; !workSet.isEmpty (  )  && maxIterations < cycleCount; cycleCount++ )  {^107^^^^^92^122^for  ( ; !workSet.isEmpty (  )  && cycleCount < maxIterations; cycleCount++ )  {^[CLASS] FixedPointGraphTraversal  [METHOD] computeFixedPoint [RETURN_TYPE] void   DiGraph<N, E> graph Set<N> entrySet [VARIABLES] LinkedHashSet  workSet  DiGraphNode  source  Set  entrySet  DiGraphEdge  edge  boolean  EdgeCallback  callback  List  outEdges  String  NON_HALTING_ERROR_MSG  DiGraph  graph  int  cycleCount  long  maxIterations  nodeCount  N  destNode  n  sourceValue  
[buglab_swap_variables]^if  ( edge.traverseEdge ( sourceValue, callback.getValue (  ) , destNode )  )  {^120^^^^^105^135^if  ( callback.traverseEdge ( sourceValue, edge.getValue (  ) , destNode )  )  {^[CLASS] FixedPointGraphTraversal  [METHOD] computeFixedPoint [RETURN_TYPE] void   DiGraph<N, E> graph Set<N> entrySet [VARIABLES] LinkedHashSet  workSet  DiGraphNode  source  Set  entrySet  DiGraphEdge  edge  boolean  EdgeCallback  callback  List  outEdges  String  NON_HALTING_ERROR_MSG  DiGraph  graph  int  cycleCount  long  maxIterations  nodeCount  N  destNode  n  sourceValue  
[buglab_swap_variables]^if  ( callback.traverseEdge ( edge, sourceValue.getValue (  ) , destNode )  )  {^120^^^^^105^135^if  ( callback.traverseEdge ( sourceValue, edge.getValue (  ) , destNode )  )  {^[CLASS] FixedPointGraphTraversal  [METHOD] computeFixedPoint [RETURN_TYPE] void   DiGraph<N, E> graph Set<N> entrySet [VARIABLES] LinkedHashSet  workSet  DiGraphNode  source  Set  entrySet  DiGraphEdge  edge  boolean  EdgeCallback  callback  List  outEdges  String  NON_HALTING_ERROR_MSG  DiGraph  graph  int  cycleCount  long  maxIterations  nodeCount  N  destNode  n  sourceValue  
[buglab_swap_variables]^if  ( destNode.traverseEdge ( sourceValue, edge.getValue (  ) , callback )  )  {^120^^^^^105^135^if  ( callback.traverseEdge ( sourceValue, edge.getValue (  ) , destNode )  )  {^[CLASS] FixedPointGraphTraversal  [METHOD] computeFixedPoint [RETURN_TYPE] void   DiGraph<N, E> graph Set<N> entrySet [VARIABLES] LinkedHashSet  workSet  DiGraphNode  source  Set  entrySet  DiGraphEdge  edge  boolean  EdgeCallback  callback  List  outEdges  String  NON_HALTING_ERROR_MSG  DiGraph  graph  int  cycleCount  long  maxIterations  nodeCount  N  destNode  n  sourceValue  
[buglab_swap_variables]^Preconditions.checkState ( NON_HALTING_ERROR_MSG != maxIterations, cycleCount ) ;^126^127^^^^111^141^Preconditions.checkState ( cycleCount != maxIterations, NON_HALTING_ERROR_MSG ) ;^[CLASS] FixedPointGraphTraversal  [METHOD] computeFixedPoint [RETURN_TYPE] void   DiGraph<N, E> graph Set<N> entrySet [VARIABLES] LinkedHashSet  workSet  DiGraphNode  source  Set  entrySet  DiGraphEdge  edge  boolean  EdgeCallback  callback  List  outEdges  String  NON_HALTING_ERROR_MSG  DiGraph  graph  int  cycleCount  long  maxIterations  nodeCount  N  destNode  n  sourceValue  
[buglab_swap_variables]^Preconditions.checkState ( maxIterations != cycleCount, NON_HALTING_ERROR_MSG ) ;^126^127^^^^111^141^Preconditions.checkState ( cycleCount != maxIterations, NON_HALTING_ERROR_MSG ) ;^[CLASS] FixedPointGraphTraversal  [METHOD] computeFixedPoint [RETURN_TYPE] void   DiGraph<N, E> graph Set<N> entrySet [VARIABLES] LinkedHashSet  workSet  DiGraphNode  source  Set  entrySet  DiGraphEdge  edge  boolean  EdgeCallback  callback  List  outEdges  String  NON_HALTING_ERROR_MSG  DiGraph  graph  int  cycleCount  long  maxIterations  nodeCount  N  destNode  n  sourceValue  
[buglab_swap_variables]^Preconditions.checkState ( cycleCount !=  NON_HALTING_ERROR_MSG ) ;^126^127^^^^111^141^Preconditions.checkState ( cycleCount != maxIterations, NON_HALTING_ERROR_MSG ) ;^[CLASS] FixedPointGraphTraversal  [METHOD] computeFixedPoint [RETURN_TYPE] void   DiGraph<N, E> graph Set<N> entrySet [VARIABLES] LinkedHashSet  workSet  DiGraphNode  source  Set  entrySet  DiGraphEdge  edge  boolean  EdgeCallback  callback  List  outEdges  String  NON_HALTING_ERROR_MSG  DiGraph  graph  int  cycleCount  long  maxIterations  nodeCount  N  destNode  n  sourceValue  
[buglab_swap_variables]^Preconditions.checkState ( cycleCount != maxIterations ) ;^126^127^^^^111^141^Preconditions.checkState ( cycleCount != maxIterations, NON_HALTING_ERROR_MSG ) ;^[CLASS] FixedPointGraphTraversal  [METHOD] computeFixedPoint [RETURN_TYPE] void   DiGraph<N, E> graph Set<N> entrySet [VARIABLES] LinkedHashSet  workSet  DiGraphNode  source  Set  entrySet  DiGraphEdge  edge  boolean  EdgeCallback  callback  List  outEdges  String  NON_HALTING_ERROR_MSG  DiGraph  graph  int  cycleCount  long  maxIterations  nodeCount  N  destNode  n  sourceValue  
