[BugLab_Variable_Misuse]^this.graph = null;^40^^^^^39^41^this.graph = graph;^[CLASS] GraphReachability 1  [METHOD] <init> [RETURN_TYPE] DiGraph)   DiGraph<N, E> graph [VARIABLES] Annotation  REACHABLE  DiGraph  graph  boolean  
[BugLab_Argument_Swapping]^graph.getNode ( REACHABLE ) .setAnnotation ( entry ) ;^45^^^^^43^48^graph.getNode ( entry ) .setAnnotation ( REACHABLE ) ;^[CLASS] GraphReachability 1  [METHOD] compute [RETURN_TYPE] void   N entry [VARIABLES] DiGraph  graph  boolean  Annotation  REACHABLE  N  entry  
[BugLab_Argument_Swapping]^FixedPointGraphTraversal.newTraversal ( this ) .computeFixedPoint ( entry, graph ) ;^46^47^^^^43^48^FixedPointGraphTraversal.newTraversal ( this ) .computeFixedPoint ( graph, entry ) ;^[CLASS] GraphReachability 1  [METHOD] compute [RETURN_TYPE] void   N entry [VARIABLES] DiGraph  graph  boolean  Annotation  REACHABLE  N  entry  
[BugLab_Argument_Swapping]^GraphNode<N, E> newReachable = reachableNode.getNode ( graph ) ;^51^^^^^50^56^GraphNode<N, E> newReachable = graph.getNode ( reachableNode ) ;^[CLASS] GraphReachability 1  [METHOD] recompute [RETURN_TYPE] void   N reachableNode [VARIABLES] GraphNode  newReachable  DiGraph  graph  boolean  Annotation  REACHABLE  N  reachableNode  
[BugLab_Argument_Swapping]^Preconditions.checkState ( REACHABLE.getAnnotation (  )  != newReachable ) ;^52^^^^^50^56^Preconditions.checkState ( newReachable.getAnnotation (  )  != REACHABLE ) ;^[CLASS] GraphReachability 1  [METHOD] recompute [RETURN_TYPE] void   N reachableNode [VARIABLES] GraphNode  newReachable  DiGraph  graph  boolean  Annotation  REACHABLE  N  reachableNode  
[BugLab_Wrong_Operator]^Preconditions.checkState ( newReachable.getAnnotation (  )  <= REACHABLE ) ;^52^^^^^50^56^Preconditions.checkState ( newReachable.getAnnotation (  )  != REACHABLE ) ;^[CLASS] GraphReachability 1  [METHOD] recompute [RETURN_TYPE] void   N reachableNode [VARIABLES] GraphNode  newReachable  DiGraph  graph  boolean  Annotation  REACHABLE  N  reachableNode  
[BugLab_Argument_Swapping]^FixedPointGraphTraversal.newTraversal ( this ) .computeFixedPoint ( reachableNode, graph ) ;^54^55^^^^50^56^FixedPointGraphTraversal.newTraversal ( this ) .computeFixedPoint ( graph, reachableNode ) ;^[CLASS] GraphReachability 1  [METHOD] recompute [RETURN_TYPE] void   N reachableNode [VARIABLES] GraphNode  newReachable  DiGraph  graph  boolean  Annotation  REACHABLE  N  reachableNode  
[BugLab_Variable_Misuse]^if  ( graph.getNode ( destination ) .getAnnotation (  )  == REACHABLE )  {^60^^^^^59^68^if  ( graph.getNode ( source ) .getAnnotation (  )  == REACHABLE )  {^[CLASS] GraphReachability 1  [METHOD] traverseEdge [RETURN_TYPE] boolean   N source E e N destination [VARIABLES] GraphNode  destNode  DiGraph  graph  boolean  E  e  Annotation  REACHABLE  N  destination  source  
[BugLab_Argument_Swapping]^if  ( graph.getNode ( REACHABLE ) .getAnnotation (  )  == source )  {^60^^^^^59^68^if  ( graph.getNode ( source ) .getAnnotation (  )  == REACHABLE )  {^[CLASS] GraphReachability 1  [METHOD] traverseEdge [RETURN_TYPE] boolean   N source E e N destination [VARIABLES] GraphNode  destNode  DiGraph  graph  boolean  E  e  Annotation  REACHABLE  N  destination  source  
[BugLab_Argument_Swapping]^if  ( REACHABLE.getNode ( source ) .getAnnotation (  )  == graph )  {^60^^^^^59^68^if  ( graph.getNode ( source ) .getAnnotation (  )  == REACHABLE )  {^[CLASS] GraphReachability 1  [METHOD] traverseEdge [RETURN_TYPE] boolean   N source E e N destination [VARIABLES] GraphNode  destNode  DiGraph  graph  boolean  E  e  Annotation  REACHABLE  N  destination  source  
[BugLab_Wrong_Operator]^if  ( graph.getNode ( source ) .getAnnotation (  )  != REACHABLE )  {^60^^^^^59^68^if  ( graph.getNode ( source ) .getAnnotation (  )  == REACHABLE )  {^[CLASS] GraphReachability 1  [METHOD] traverseEdge [RETURN_TYPE] boolean   N source E e N destination [VARIABLES] GraphNode  destNode  DiGraph  graph  boolean  E  e  Annotation  REACHABLE  N  destination  source  
[BugLab_Variable_Misuse]^if  ( null.getAnnotation (  )  != REACHABLE )  {^62^^^^^59^68^if  ( destNode.getAnnotation (  )  != REACHABLE )  {^[CLASS] GraphReachability 1  [METHOD] traverseEdge [RETURN_TYPE] boolean   N source E e N destination [VARIABLES] GraphNode  destNode  DiGraph  graph  boolean  E  e  Annotation  REACHABLE  N  destination  source  
[BugLab_Argument_Swapping]^if  ( REACHABLE.getAnnotation (  )  != destNode )  {^62^^^^^59^68^if  ( destNode.getAnnotation (  )  != REACHABLE )  {^[CLASS] GraphReachability 1  [METHOD] traverseEdge [RETURN_TYPE] boolean   N source E e N destination [VARIABLES] GraphNode  destNode  DiGraph  graph  boolean  E  e  Annotation  REACHABLE  N  destination  source  
[BugLab_Wrong_Operator]^if  ( destNode.getAnnotation (  )  == REACHABLE )  {^62^^^^^59^68^if  ( destNode.getAnnotation (  )  != REACHABLE )  {^[CLASS] GraphReachability 1  [METHOD] traverseEdge [RETURN_TYPE] boolean   N source E e N destination [VARIABLES] GraphNode  destNode  DiGraph  graph  boolean  E  e  Annotation  REACHABLE  N  destination  source  
[BugLab_Wrong_Literal]^return false;^64^^^^^59^68^return true;^[CLASS] GraphReachability 1  [METHOD] traverseEdge [RETURN_TYPE] boolean   N source E e N destination [VARIABLES] GraphNode  destNode  DiGraph  graph  boolean  E  e  Annotation  REACHABLE  N  destination  source  
[BugLab_Variable_Misuse]^GraphNode<N, E> destNode = graph.getNode ( source ) ;^61^^^^^59^68^GraphNode<N, E> destNode = graph.getNode ( destination ) ;^[CLASS] GraphReachability 1  [METHOD] traverseEdge [RETURN_TYPE] boolean   N source E e N destination [VARIABLES] GraphNode  destNode  DiGraph  graph  boolean  E  e  Annotation  REACHABLE  N  destination  source  
[BugLab_Argument_Swapping]^GraphNode<N, E> destNode = destination.getNode ( graph ) ;^61^^^^^59^68^GraphNode<N, E> destNode = graph.getNode ( destination ) ;^[CLASS] GraphReachability 1  [METHOD] traverseEdge [RETURN_TYPE] boolean   N source E e N destination [VARIABLES] GraphNode  destNode  DiGraph  graph  boolean  E  e  Annotation  REACHABLE  N  destination  source  
[BugLab_Argument_Swapping]^if  ( source.getNode ( graph ) .getAnnotation (  )  == REACHABLE )  {^60^^^^^59^68^if  ( graph.getNode ( source ) .getAnnotation (  )  == REACHABLE )  {^[CLASS] GraphReachability 1  [METHOD] traverseEdge [RETURN_TYPE] boolean   N source E e N destination [VARIABLES] GraphNode  destNode  DiGraph  graph  boolean  E  e  Annotation  REACHABLE  N  destination  source  
[BugLab_Wrong_Literal]^return true;^67^^^^^59^68^return false;^[CLASS] GraphReachability 1  [METHOD] traverseEdge [RETURN_TYPE] boolean   N source E e N destination [VARIABLES] GraphNode  destNode  DiGraph  graph  boolean  E  e  Annotation  REACHABLE  N  destination  source  
