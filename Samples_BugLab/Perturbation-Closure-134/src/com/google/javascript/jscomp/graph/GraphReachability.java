[buglab_swap_variables]^graph.getNode ( REACHABLE ) .setAnnotation ( entry ) ;^45^^^^^43^48^graph.getNode ( entry ) .setAnnotation ( REACHABLE ) ;^[CLASS] GraphReachability 1  [METHOD] compute [RETURN_TYPE] void   N entry [VARIABLES] DiGraph  graph  boolean  Annotation  REACHABLE  N  entry  
[buglab_swap_variables]^FixedPointGraphTraversal.newTraversal ( this ) .computeFixedPoint ( entry, graph ) ;^46^47^^^^43^48^FixedPointGraphTraversal.newTraversal ( this ) .computeFixedPoint ( graph, entry ) ;^[CLASS] GraphReachability 1  [METHOD] compute [RETURN_TYPE] void   N entry [VARIABLES] DiGraph  graph  boolean  Annotation  REACHABLE  N  entry  
[buglab_swap_variables]^FixedPointGraphTraversal.newTraversal ( this ) .computeFixedPoint ( graph ) ;^46^47^^^^43^48^FixedPointGraphTraversal.newTraversal ( this ) .computeFixedPoint ( graph, entry ) ;^[CLASS] GraphReachability 1  [METHOD] compute [RETURN_TYPE] void   N entry [VARIABLES] DiGraph  graph  boolean  Annotation  REACHABLE  N  entry  
[buglab_swap_variables]^FixedPointGraphTraversal.newTraversal ( this ) .computeFixedPoint (  entry ) ;^46^47^^^^43^48^FixedPointGraphTraversal.newTraversal ( this ) .computeFixedPoint ( graph, entry ) ;^[CLASS] GraphReachability 1  [METHOD] compute [RETURN_TYPE] void   N entry [VARIABLES] DiGraph  graph  boolean  Annotation  REACHABLE  N  entry  
[buglab_swap_variables]^GraphNode<N, E> newReachable = reachableNode.getNode ( graph ) ;^51^^^^^50^56^GraphNode<N, E> newReachable = graph.getNode ( reachableNode ) ;^[CLASS] GraphReachability 1  [METHOD] recompute [RETURN_TYPE] void   N reachableNode [VARIABLES] GraphNode  newReachable  DiGraph  graph  boolean  Annotation  REACHABLE  N  reachableNode  
[buglab_swap_variables]^Preconditions.checkState ( REACHABLE.getAnnotation (  )  != newReachable ) ;^52^^^^^50^56^Preconditions.checkState ( newReachable.getAnnotation (  )  != REACHABLE ) ;^[CLASS] GraphReachability 1  [METHOD] recompute [RETURN_TYPE] void   N reachableNode [VARIABLES] GraphNode  newReachable  DiGraph  graph  boolean  Annotation  REACHABLE  N  reachableNode  
[buglab_swap_variables]^FixedPointGraphTraversal.newTraversal ( this ) .computeFixedPoint ( reachableNode, graph ) ;^54^55^^^^50^56^FixedPointGraphTraversal.newTraversal ( this ) .computeFixedPoint ( graph, reachableNode ) ;^[CLASS] GraphReachability 1  [METHOD] recompute [RETURN_TYPE] void   N reachableNode [VARIABLES] GraphNode  newReachable  DiGraph  graph  boolean  Annotation  REACHABLE  N  reachableNode  
[buglab_swap_variables]^FixedPointGraphTraversal.newTraversal ( this ) .computeFixedPoint ( graph ) ;^54^55^^^^50^56^FixedPointGraphTraversal.newTraversal ( this ) .computeFixedPoint ( graph, reachableNode ) ;^[CLASS] GraphReachability 1  [METHOD] recompute [RETURN_TYPE] void   N reachableNode [VARIABLES] GraphNode  newReachable  DiGraph  graph  boolean  Annotation  REACHABLE  N  reachableNode  
[buglab_swap_variables]^FixedPointGraphTraversal.newTraversal ( this ) .computeFixedPoint (  reachableNode ) ;^54^55^^^^50^56^FixedPointGraphTraversal.newTraversal ( this ) .computeFixedPoint ( graph, reachableNode ) ;^[CLASS] GraphReachability 1  [METHOD] recompute [RETURN_TYPE] void   N reachableNode [VARIABLES] GraphNode  newReachable  DiGraph  graph  boolean  Annotation  REACHABLE  N  reachableNode  
[buglab_swap_variables]^if  ( REACHABLE.getNode ( source ) .getAnnotation (  )  == graph )  {^60^^^^^59^68^if  ( graph.getNode ( source ) .getAnnotation (  )  == REACHABLE )  {^[CLASS] GraphReachability 1  [METHOD] traverseEdge [RETURN_TYPE] boolean   N source E e N destination [VARIABLES] GraphNode  destNode  DiGraph  graph  boolean  E  e  Annotation  REACHABLE  N  destination  source  
[buglab_swap_variables]^if  ( REACHABLE.getAnnotation (  )  != destNode )  {^62^^^^^59^68^if  ( destNode.getAnnotation (  )  != REACHABLE )  {^[CLASS] GraphReachability 1  [METHOD] traverseEdge [RETURN_TYPE] boolean   N source E e N destination [VARIABLES] GraphNode  destNode  DiGraph  graph  boolean  E  e  Annotation  REACHABLE  N  destination  source  
[buglab_swap_variables]^GraphNode<N, E> destNode = destination.getNode ( graph ) ;^61^^^^^59^68^GraphNode<N, E> destNode = graph.getNode ( destination ) ;^[CLASS] GraphReachability 1  [METHOD] traverseEdge [RETURN_TYPE] boolean   N source E e N destination [VARIABLES] GraphNode  destNode  DiGraph  graph  boolean  E  e  Annotation  REACHABLE  N  destination  source  
[buglab_swap_variables]^if  ( source.getNode ( graph ) .getAnnotation (  )  == REACHABLE )  {^60^^^^^59^68^if  ( graph.getNode ( source ) .getAnnotation (  )  == REACHABLE )  {^[CLASS] GraphReachability 1  [METHOD] traverseEdge [RETURN_TYPE] boolean   N source E e N destination [VARIABLES] GraphNode  destNode  DiGraph  graph  boolean  E  e  Annotation  REACHABLE  N  destination  source  
