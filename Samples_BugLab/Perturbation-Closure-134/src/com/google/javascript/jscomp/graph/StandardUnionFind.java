[buglab_swap_variables]^Node<E> nodeForValue = value.get ( elmap ) ;^170^^^^^165^175^Node<E> nodeForValue = elmap.get ( value ) ;^[CLASS] StandardUnionFind 1 2 Node   [VARIABLES] 
[buglab_swap_variables]^union ( other, elem.find ( elem )  ) ;^73^^^^^71^75^union ( elem, other.find ( elem )  ) ;^[CLASS] StandardUnionFind 1 2 Node  [METHOD] <init> [RETURN_TYPE] UnionFind)   UnionFind<E> other [VARIABLES] boolean  E  elem  element  Node  nodeForValue  parent  UnionFind  other  Map  elmap  long  serialVersionUID  int  rank  size  
[buglab_swap_variables]^union (  other.find ( elem )  ) ;^73^^^^^71^75^union ( elem, other.find ( elem )  ) ;^[CLASS] StandardUnionFind 1 2 Node  [METHOD] <init> [RETURN_TYPE] UnionFind)   UnionFind<E> other [VARIABLES] boolean  E  elem  element  Node  nodeForValue  parent  UnionFind  other  Map  elmap  long  serialVersionUID  int  rank  size  
[buglab_swap_variables]^union ( elem.find ( elem )  ) ;^73^^^^^71^75^union ( elem, other.find ( elem )  ) ;^[CLASS] StandardUnionFind 1 2 Node  [METHOD] <init> [RETURN_TYPE] UnionFind)   UnionFind<E> other [VARIABLES] boolean  E  elem  element  Node  nodeForValue  parent  UnionFind  other  Map  elmap  long  serialVersionUID  int  rank  size  
[buglab_swap_variables]^if  ( nodeB == nodeA )  {^85^^^^^81^99^if  ( nodeA == nodeB )  {^[CLASS] StandardUnionFind 1 2 Node  [METHOD] union [RETURN_TYPE] E   E a E b [VARIABLES] boolean  E  a  b  e  elem  element  Map  elmap  long  serialVersionUID  int  rank  size  Node  nodeA  nodeB  nodeForValue  parent  
[buglab_swap_variables]^return nodeA.element.element;^86^^^^^81^99^return nodeA.element;^[CLASS] StandardUnionFind 1 2 Node  [METHOD] union [RETURN_TYPE] E   E a E b [VARIABLES] boolean  E  a  b  e  elem  element  Map  elmap  long  serialVersionUID  int  rank  size  Node  nodeA  nodeB  nodeForValue  parent  
[buglab_swap_variables]^return nodeA;^86^^^^^81^99^return nodeA.element;^[CLASS] StandardUnionFind 1 2 Node  [METHOD] union [RETURN_TYPE] E   E a E b [VARIABLES] boolean  E  a  b  e  elem  element  Map  elmap  long  serialVersionUID  int  rank  size  Node  nodeA  nodeB  nodeForValue  parent  
[buglab_swap_variables]^if  ( nodeB.rank > nodeA.rank )  {^88^^^^^81^99^if  ( nodeA.rank > nodeB.rank )  {^[CLASS] StandardUnionFind 1 2 Node  [METHOD] union [RETURN_TYPE] E   E a E b [VARIABLES] boolean  E  a  b  e  elem  element  Map  elmap  long  serialVersionUID  int  rank  size  Node  nodeA  nodeB  nodeForValue  parent  
[buglab_swap_variables]^if  ( nodeA > nodeB.rank )  {^88^^^^^81^99^if  ( nodeA.rank > nodeB.rank )  {^[CLASS] StandardUnionFind 1 2 Node  [METHOD] union [RETURN_TYPE] E   E a E b [VARIABLES] boolean  E  a  b  e  elem  element  Map  elmap  long  serialVersionUID  int  rank  size  Node  nodeA  nodeB  nodeForValue  parent  
[buglab_swap_variables]^nodeA.size += nodeB;^90^^^^^81^99^nodeA.size += nodeB.size;^[CLASS] StandardUnionFind 1 2 Node  [METHOD] union [RETURN_TYPE] E   E a E b [VARIABLES] boolean  E  a  b  e  elem  element  Map  elmap  long  serialVersionUID  int  rank  size  Node  nodeA  nodeB  nodeForValue  parent  
[buglab_swap_variables]^return nodeA.element.element;^91^^^^^81^99^return nodeA.element;^[CLASS] StandardUnionFind 1 2 Node  [METHOD] union [RETURN_TYPE] E   E a E b [VARIABLES] boolean  E  a  b  e  elem  element  Map  elmap  long  serialVersionUID  int  rank  size  Node  nodeA  nodeB  nodeForValue  parent  
[buglab_swap_variables]^return nodeA;^91^^^^^81^99^return nodeA.element;^[CLASS] StandardUnionFind 1 2 Node  [METHOD] union [RETURN_TYPE] E   E a E b [VARIABLES] boolean  E  a  b  e  elem  element  Map  elmap  long  serialVersionUID  int  rank  size  Node  nodeA  nodeB  nodeForValue  parent  
[buglab_swap_variables]^if  ( nodeB.rank == nodeA.rank )  {^94^^^^^81^99^if  ( nodeA.rank == nodeB.rank )  {^[CLASS] StandardUnionFind 1 2 Node  [METHOD] union [RETURN_TYPE] E   E a E b [VARIABLES] boolean  E  a  b  e  elem  element  Map  elmap  long  serialVersionUID  int  rank  size  Node  nodeA  nodeB  nodeForValue  parent  
[buglab_swap_variables]^if  ( nodeB == nodeA.rank.rank )  {^94^^^^^81^99^if  ( nodeA.rank == nodeB.rank )  {^[CLASS] StandardUnionFind 1 2 Node  [METHOD] union [RETURN_TYPE] E   E a E b [VARIABLES] boolean  E  a  b  e  elem  element  Map  elmap  long  serialVersionUID  int  rank  size  Node  nodeA  nodeB  nodeForValue  parent  
[buglab_swap_variables]^if  ( nodeA.rank == nodeB )  {^94^^^^^81^99^if  ( nodeA.rank == nodeB.rank )  {^[CLASS] StandardUnionFind 1 2 Node  [METHOD] union [RETURN_TYPE] E   E a E b [VARIABLES] boolean  E  a  b  e  elem  element  Map  elmap  long  serialVersionUID  int  rank  size  Node  nodeA  nodeB  nodeForValue  parent  
[buglab_swap_variables]^return nodeB.element.element;^98^^^^^81^99^return nodeB.element;^[CLASS] StandardUnionFind 1 2 Node  [METHOD] union [RETURN_TYPE] E   E a E b [VARIABLES] boolean  E  a  b  e  elem  element  Map  elmap  long  serialVersionUID  int  rank  size  Node  nodeA  nodeB  nodeForValue  parent  
[buglab_swap_variables]^return nodeB;^98^^^^^81^99^return nodeB.element;^[CLASS] StandardUnionFind 1 2 Node  [METHOD] union [RETURN_TYPE] E   E a E b [VARIABLES] boolean  E  a  b  e  elem  element  Map  elmap  long  serialVersionUID  int  rank  size  Node  nodeA  nodeB  nodeForValue  parent  
[buglab_swap_variables]^checkArgument ( elmaplmap.containsKey ( e ) , "Element does not exist: %s", e ) ;^102^^^^^101^104^checkArgument ( elmap.containsKey ( e ) , "Element does not exist: %s", e ) ;^[CLASS] StandardUnionFind 1 2 Node  [METHOD] find [RETURN_TYPE] E   E e [VARIABLES] boolean  E  a  b  e  elem  element  Map  elmap  long  serialVersionUID  int  rank  size  Node  nodeA  nodeB  nodeForValue  parent  
[buglab_swap_variables]^checkArgument ( elmap.containsKey ( e ) , "Element does not exist: %s" ) ;^102^^^^^101^104^checkArgument ( elmap.containsKey ( e ) , "Element does not exist: %s", e ) ;^[CLASS] StandardUnionFind 1 2 Node  [METHOD] find [RETURN_TYPE] E   E e [VARIABLES] boolean  E  a  b  e  elem  element  Map  elmap  long  serialVersionUID  int  rank  size  Node  nodeA  nodeB  nodeForValue  parent  
[buglab_swap_variables]^checkArgument ( e.containsKey ( elmap ) , "Element does not exist: %s", e ) ;^102^^^^^101^104^checkArgument ( elmap.containsKey ( e ) , "Element does not exist: %s", e ) ;^[CLASS] StandardUnionFind 1 2 Node  [METHOD] find [RETURN_TYPE] E   E e [VARIABLES] boolean  E  a  b  e  elem  element  Map  elmap  long  serialVersionUID  int  rank  size  Node  nodeA  nodeB  nodeForValue  parent  
[buglab_swap_variables]^return findRoot ( e.get ( elmap )  ) .element;^103^^^^^101^104^return findRoot ( elmap.get ( e )  ) .element;^[CLASS] StandardUnionFind 1 2 Node  [METHOD] find [RETURN_TYPE] E   E e [VARIABLES] boolean  E  a  b  e  elem  element  Map  elmap  long  serialVersionUID  int  rank  size  Node  nodeA  nodeB  nodeForValue  parent  
[buglab_swap_variables]^return findRoot ( elmaplmap.get ( e )  ) .element;^103^^^^^101^104^return findRoot ( elmap.get ( e )  ) .element;^[CLASS] StandardUnionFind 1 2 Node  [METHOD] find [RETURN_TYPE] E   E e [VARIABLES] boolean  E  a  b  e  elem  element  Map  elmap  long  serialVersionUID  int  rank  size  Node  nodeA  nodeB  nodeForValue  parent  
[buglab_swap_variables]^return bRep == aRep;^109^^^^^106^110^return aRep == bRep;^[CLASS] StandardUnionFind 1 2 Node  [METHOD] areEquivalent [RETURN_TYPE] boolean   E a E b [VARIABLES] boolean  E  a  aRep  b  bRep  e  elem  element  Map  elmap  long  serialVersionUID  int  rank  size  Node  nodeA  nodeB  nodeForValue  parent  
[buglab_swap_variables]^Node<E> node = elmaplmap.get ( e ) ;^141^^^^^140^148^Node<E> node = elmap.get ( e ) ;^[CLASS] StandardUnionFind 1 2 Node  [METHOD] findRootOrCreateNode [RETURN_TYPE] StandardUnionFind$Node   E e [VARIABLES] boolean  E  a  aRep  b  bRep  e  elem  element  Map  elmap  groupsTmp  long  serialVersionUID  int  rank  size  Node  elem  node  nodeA  nodeB  nodeForValue  parent  root  
[buglab_swap_variables]^Node<E> node = e.get ( elmap ) ;^141^^^^^140^148^Node<E> node = elmap.get ( e ) ;^[CLASS] StandardUnionFind 1 2 Node  [METHOD] findRootOrCreateNode [RETURN_TYPE] StandardUnionFind$Node   E e [VARIABLES] boolean  E  a  aRep  b  bRep  e  elem  element  Map  elmap  groupsTmp  long  serialVersionUID  int  rank  size  Node  elem  node  nodeA  nodeB  nodeForValue  parent  root  
[buglab_swap_variables]^elmap.put (  node ) ;^146^^^^^140^148^elmap.put ( e, node ) ;^[CLASS] StandardUnionFind 1 2 Node  [METHOD] findRootOrCreateNode [RETURN_TYPE] StandardUnionFind$Node   E e [VARIABLES] boolean  E  a  aRep  b  bRep  e  elem  element  Map  elmap  groupsTmp  long  serialVersionUID  int  rank  size  Node  elem  node  nodeA  nodeB  nodeForValue  parent  root  
[buglab_swap_variables]^elmap.put ( e ) ;^146^^^^^140^148^elmap.put ( e, node ) ;^[CLASS] StandardUnionFind 1 2 Node  [METHOD] findRootOrCreateNode [RETURN_TYPE] StandardUnionFind$Node   E e [VARIABLES] boolean  E  a  aRep  b  bRep  e  elem  element  Map  elmap  groupsTmp  long  serialVersionUID  int  rank  size  Node  elem  node  nodeA  nodeB  nodeForValue  parent  root  
[buglab_swap_variables]^if  ( node.parent.parent != node )  {^158^^^^^157^162^if  ( node.parent != node )  {^[CLASS] StandardUnionFind 1 2 Node  [METHOD] findRoot [RETURN_TYPE] StandardUnionFind$Node   Node<E> node [VARIABLES] boolean  E  a  aRep  b  bRep  e  elem  element  Map  elmap  groupsTmp  long  serialVersionUID  int  rank  size  Node  elem  node  nodeA  nodeB  nodeForValue  parent  root  
[buglab_swap_variables]^if  ( node != node.parent )  {^158^^^^^157^162^if  ( node.parent != node )  {^[CLASS] StandardUnionFind 1 2 Node  [METHOD] findRoot [RETURN_TYPE] StandardUnionFind$Node   Node<E> node [VARIABLES] boolean  E  a  aRep  b  bRep  e  elem  element  Map  elmap  groupsTmp  long  serialVersionUID  int  rank  size  Node  elem  node  nodeA  nodeB  nodeForValue  parent  root  
[buglab_swap_variables]^node.parent = findRoot ( node.parent.parent ) ;^159^^^^^157^162^node.parent = findRoot ( node.parent ) ;^[CLASS] StandardUnionFind 1 2 Node  [METHOD] findRoot [RETURN_TYPE] StandardUnionFind$Node   Node<E> node [VARIABLES] boolean  E  a  aRep  b  bRep  e  elem  element  Map  elmap  groupsTmp  long  serialVersionUID  int  rank  size  Node  elem  node  nodeA  nodeB  nodeForValue  parent  root  
[buglab_swap_variables]^node.parent = findRoot ( node ) ;^159^^^^^157^162^node.parent = findRoot ( node.parent ) ;^[CLASS] StandardUnionFind 1 2 Node  [METHOD] findRoot [RETURN_TYPE] StandardUnionFind$Node   Node<E> node [VARIABLES] boolean  E  a  aRep  b  bRep  e  elem  element  Map  elmap  groupsTmp  long  serialVersionUID  int  rank  size  Node  elem  node  nodeA  nodeB  nodeForValue  parent  root  
[buglab_swap_variables]^return node.parent.parent;^161^^^^^157^162^return node.parent;^[CLASS] StandardUnionFind 1 2 Node  [METHOD] findRoot [RETURN_TYPE] StandardUnionFind$Node   Node<E> node [VARIABLES] boolean  E  a  aRep  b  bRep  e  elem  element  Map  elmap  groupsTmp  long  serialVersionUID  int  rank  size  Node  elem  node  nodeA  nodeB  nodeForValue  parent  root  
[buglab_swap_variables]^return node;^161^^^^^157^162^return node.parent;^[CLASS] StandardUnionFind 1 2 Node  [METHOD] findRoot [RETURN_TYPE] StandardUnionFind$Node   Node<E> node [VARIABLES] boolean  E  a  aRep  b  bRep  e  elem  element  Map  elmap  groupsTmp  long  serialVersionUID  int  rank  size  Node  elem  node  nodeA  nodeB  nodeForValue  parent  root  
[buglab_swap_variables]^checkArgument ( value.containsKey ( elmap ) , "Element does not exist: " + value ) ;^165^^^^^150^180^checkArgument ( elmap.containsKey ( value ) , "Element does not exist: " + value ) ;^[CLASS] StandardUnionFind 1 2 Node  [METHOD] findAll [RETURN_TYPE] Set   final E value [VARIABLES] boolean  E  a  aRep  b  bRep  e  elem  element  value  Node  elem  node  nodeA  nodeB  nodeForB  nodeForValue  parent  root  Object  b  o  Map  elmap  groupsTmp  long  serialVersionUID  int  rank  size  Predicate  isSameRoot  
[buglab_swap_variables]^if  ( Objects.equal ( b, value )  )  {^173^^^^^158^188^if  ( Objects.equal ( value, b )  )  {^[CLASS] StandardUnionFind 1 2 Node  [METHOD] findAll [RETURN_TYPE] Set   final E value [VARIABLES] boolean  E  a  aRep  b  bRep  e  elem  element  value  Node  elem  node  nodeA  nodeB  nodeForB  nodeForValue  parent  root  Object  b  o  Map  elmap  groupsTmp  long  serialVersionUID  int  rank  size  Predicate  isSameRoot  
[buglab_swap_variables]^if  ( Objects.equal (  b )  )  {^173^^^^^158^188^if  ( Objects.equal ( value, b )  )  {^[CLASS] StandardUnionFind 1 2 Node  [METHOD] findAll [RETURN_TYPE] Set   final E value [VARIABLES] boolean  E  a  aRep  b  bRep  e  elem  element  value  Node  elem  node  nodeA  nodeB  nodeForB  nodeForValue  parent  root  Object  b  o  Map  elmap  groupsTmp  long  serialVersionUID  int  rank  size  Predicate  isSameRoot  
[buglab_swap_variables]^if  ( Objects.equal ( value )  )  {^173^^^^^158^188^if  ( Objects.equal ( value, b )  )  {^[CLASS] StandardUnionFind 1 2 Node  [METHOD] findAll [RETURN_TYPE] Set   final E value [VARIABLES] boolean  E  a  aRep  b  bRep  e  elem  element  value  Node  elem  node  nodeA  nodeB  nodeForB  nodeForValue  parent  root  Object  b  o  Map  elmap  groupsTmp  long  serialVersionUID  int  rank  size  Predicate  isSameRoot  
[buglab_swap_variables]^return findRoot ( nodeForValue )  == nodeForB;^181^^^^^166^196^return findRoot ( nodeForB )  == nodeForValue;^[CLASS] StandardUnionFind 1 2 Node  [METHOD] findAll [RETURN_TYPE] Set   final E value [VARIABLES] boolean  E  a  aRep  b  bRep  e  elem  element  value  Node  elem  node  nodeA  nodeB  nodeForB  nodeForValue  parent  root  Object  b  o  Map  elmap  groupsTmp  long  serialVersionUID  int  rank  size  Predicate  isSameRoot  
[buglab_swap_variables]^Node<E> nodeForB = b.get ( elmap ) ;^176^^^^^161^191^Node<E> nodeForB = elmap.get ( b ) ;^[CLASS] StandardUnionFind 1 2 Node  [METHOD] findAll [RETURN_TYPE] Set   final E value [VARIABLES] boolean  E  a  aRep  b  bRep  e  elem  element  value  Node  elem  node  nodeA  nodeB  nodeForB  nodeForValue  parent  root  Object  b  o  Map  elmap  groupsTmp  long  serialVersionUID  int  rank  size  Predicate  isSameRoot  
[buglab_swap_variables]^Node<E> nodeForValue = value.get ( elmap ) ;^170^^^^^155^185^Node<E> nodeForValue = elmap.get ( value ) ;^[CLASS] StandardUnionFind 1 2 Node  [METHOD] findAll [RETURN_TYPE] Set   final E value [VARIABLES] boolean  E  a  aRep  b  bRep  e  elem  element  value  Node  elem  node  nodeA  nodeB  nodeForB  nodeForValue  parent  root  Object  b  o  Map  elmap  groupsTmp  long  serialVersionUID  int  rank  size  Predicate  isSameRoot  
[buglab_swap_variables]^return o.apply ( isSameRoot ) ;^188^^^^^173^203^return isSameRoot.apply ( o ) ;^[CLASS] StandardUnionFind 1 2 Node  [METHOD] findAll [RETURN_TYPE] Set   final E value [VARIABLES] boolean  E  a  aRep  b  bRep  e  elem  element  value  Node  elem  node  nodeA  nodeB  nodeForB  nodeForValue  parent  root  Object  b  o  Map  elmap  groupsTmp  long  serialVersionUID  int  rank  size  Predicate  isSameRoot  
[buglab_swap_variables]^return unmodifiableIterator ( filter ( isSameRoot.keySet (  ) .iterator (  ) , elmap )  ) ;^192^193^^^^177^207^return unmodifiableIterator ( filter ( elmap.keySet (  ) .iterator (  ) , isSameRoot )  ) ;^[CLASS] StandardUnionFind 1 2 Node  [METHOD] findAll [RETURN_TYPE] Set   final E value [VARIABLES] boolean  E  a  aRep  b  bRep  e  elem  element  value  Node  elem  node  nodeA  nodeB  nodeForB  nodeForValue  parent  root  Object  b  o  Map  elmap  groupsTmp  long  serialVersionUID  int  rank  size  Predicate  isSameRoot  
[buglab_swap_variables]^return unmodifiableIterator ( filter ( elmap.keySet (  ) .iterator (  )  )  ) ;^192^193^^^^177^207^return unmodifiableIterator ( filter ( elmap.keySet (  ) .iterator (  ) , isSameRoot )  ) ;^[CLASS] StandardUnionFind 1 2 Node  [METHOD] findAll [RETURN_TYPE] Set   final E value [VARIABLES] boolean  E  a  aRep  b  bRep  e  elem  element  value  Node  elem  node  nodeA  nodeB  nodeForB  nodeForValue  parent  root  Object  b  o  Map  elmap  groupsTmp  long  serialVersionUID  int  rank  size  Predicate  isSameRoot  
[buglab_swap_variables]^return findRoot ( value.get ( elmap )  ) .size;^197^^^^^182^212^return findRoot ( elmap.get ( value )  ) .size;^[CLASS] StandardUnionFind 1 2 Node  [METHOD] findAll [RETURN_TYPE] Set   final E value [VARIABLES] boolean  E  a  aRep  b  bRep  e  elem  element  value  Node  elem  node  nodeA  nodeB  nodeForB  nodeForValue  parent  root  Object  b  o  Map  elmap  groupsTmp  long  serialVersionUID  int  rank  size  Predicate  isSameRoot  
[buglab_swap_variables]^if  ( Objects.equal ( b, value )  )  {^173^^^^^172^182^if  ( Objects.equal ( value, b )  )  {^[CLASS] StandardUnionFind 1 2 Node  [METHOD] apply [RETURN_TYPE] boolean   Object b [VARIABLES] boolean  E  a  aRep  b  bRep  e  elem  element  value  Node  elem  node  nodeA  nodeB  nodeForB  nodeForValue  parent  root  Object  b  Map  elmap  groupsTmp  long  serialVersionUID  int  rank  size  
[buglab_swap_variables]^if  ( Objects.equal (  b )  )  {^173^^^^^172^182^if  ( Objects.equal ( value, b )  )  {^[CLASS] StandardUnionFind 1 2 Node  [METHOD] apply [RETURN_TYPE] boolean   Object b [VARIABLES] boolean  E  a  aRep  b  bRep  e  elem  element  value  Node  elem  node  nodeA  nodeB  nodeForB  nodeForValue  parent  root  Object  b  Map  elmap  groupsTmp  long  serialVersionUID  int  rank  size  
[buglab_swap_variables]^if  ( Objects.equal ( value )  )  {^173^^^^^172^182^if  ( Objects.equal ( value, b )  )  {^[CLASS] StandardUnionFind 1 2 Node  [METHOD] apply [RETURN_TYPE] boolean   Object b [VARIABLES] boolean  E  a  aRep  b  bRep  e  elem  element  value  Node  elem  node  nodeA  nodeB  nodeForB  nodeForValue  parent  root  Object  b  Map  elmap  groupsTmp  long  serialVersionUID  int  rank  size  
[buglab_swap_variables]^Node<E> nodeForB = b.get ( elmap ) ;^176^^^^^172^182^Node<E> nodeForB = elmap.get ( b ) ;^[CLASS] StandardUnionFind 1 2 Node  [METHOD] apply [RETURN_TYPE] boolean   Object b [VARIABLES] boolean  E  a  aRep  b  bRep  e  elem  element  value  Node  elem  node  nodeA  nodeB  nodeForB  nodeForValue  parent  root  Object  b  Map  elmap  groupsTmp  long  serialVersionUID  int  rank  size  
[buglab_swap_variables]^return findRoot ( nodeForValue )  == nodeForB;^181^^^^^172^182^return findRoot ( nodeForB )  == nodeForValue;^[CLASS] StandardUnionFind 1 2 Node  [METHOD] apply [RETURN_TYPE] boolean   Object b [VARIABLES] boolean  E  a  aRep  b  bRep  e  elem  element  value  Node  elem  node  nodeA  nodeB  nodeForB  nodeForValue  parent  root  Object  b  Map  elmap  groupsTmp  long  serialVersionUID  int  rank  size  
[buglab_swap_variables]^return o.apply ( isSameRoot ) ;^188^^^^^187^189^return isSameRoot.apply ( o ) ;^[CLASS] StandardUnionFind 1 2 Node  [METHOD] contains [RETURN_TYPE] boolean   Object o [VARIABLES] boolean  E  a  aRep  b  bRep  e  elem  element  value  Node  elem  node  nodeA  nodeB  nodeForB  nodeForValue  parent  root  Object  o  Map  elmap  groupsTmp  long  serialVersionUID  int  rank  size  
[buglab_swap_variables]^return unmodifiableIterator ( filter ( isSameRoot.keySet (  ) .iterator (  ) , elmap )  ) ;^192^193^^^^191^194^return unmodifiableIterator ( filter ( elmap.keySet (  ) .iterator (  ) , isSameRoot )  ) ;^[CLASS] StandardUnionFind 1 2 Node  [METHOD] iterator [RETURN_TYPE] Iterator   [VARIABLES] boolean  E  a  aRep  b  bRep  e  elem  element  value  Map  elmap  groupsTmp  long  serialVersionUID  int  rank  size  Node  elem  node  nodeA  nodeB  nodeForB  nodeForValue  parent  root  
[buglab_swap_variables]^return unmodifiableIterator ( filter ( elmap.keySet (  ) .iterator (  )  )  ) ;^192^193^^^^191^194^return unmodifiableIterator ( filter ( elmap.keySet (  ) .iterator (  ) , isSameRoot )  ) ;^[CLASS] StandardUnionFind 1 2 Node  [METHOD] iterator [RETURN_TYPE] Iterator   [VARIABLES] boolean  E  a  aRep  b  bRep  e  elem  element  value  Map  elmap  groupsTmp  long  serialVersionUID  int  rank  size  Node  elem  node  nodeA  nodeB  nodeForB  nodeForValue  parent  root  
[buglab_swap_variables]^return findRoot ( value.get ( elmap )  ) .size;^197^^^^^196^198^return findRoot ( elmap.get ( value )  ) .size;^[CLASS] StandardUnionFind 1 2 Node  [METHOD] size [RETURN_TYPE] int   [VARIABLES] boolean  E  a  aRep  b  bRep  e  elem  element  value  Map  elmap  groupsTmp  long  serialVersionUID  int  rank  size  Node  elem  node  nodeA  nodeB  nodeForB  nodeForValue  parent  root  
[buglab_swap_variables]^Node<E> nodeForValue = value.get ( elmap ) ;^170^^^^^165^175^Node<E> nodeForValue = elmap.get ( value ) ;^[CLASS] 1  [METHOD] size [RETURN_TYPE] int   [VARIABLES] boolean  E  a  aRep  b  bRep  e  elem  element  value  Map  elmap  groupsTmp  long  serialVersionUID  int  rank  size  Node  elem  node  nodeA  nodeB  nodeForB  nodeForValue  parent  root  
[buglab_swap_variables]^if  ( Objects.equal ( b, value )  )  {^173^^^^^172^182^if  ( Objects.equal ( value, b )  )  {^[CLASS] 1  [METHOD] apply [RETURN_TYPE] boolean   Object b [VARIABLES] Object  b  Node  nodeForB  nodeForValue  boolean  
[buglab_swap_variables]^if  ( Objects.equal (  b )  )  {^173^^^^^172^182^if  ( Objects.equal ( value, b )  )  {^[CLASS] 1  [METHOD] apply [RETURN_TYPE] boolean   Object b [VARIABLES] Object  b  Node  nodeForB  nodeForValue  boolean  
[buglab_swap_variables]^if  ( Objects.equal ( value )  )  {^173^^^^^172^182^if  ( Objects.equal ( value, b )  )  {^[CLASS] 1  [METHOD] apply [RETURN_TYPE] boolean   Object b [VARIABLES] Object  b  Node  nodeForB  nodeForValue  boolean  
[buglab_swap_variables]^Node<E> nodeForB = b.get ( elmap ) ;^176^^^^^172^182^Node<E> nodeForB = elmap.get ( b ) ;^[CLASS] 1  [METHOD] apply [RETURN_TYPE] boolean   Object b [VARIABLES] Object  b  Node  nodeForB  nodeForValue  boolean  
[buglab_swap_variables]^return findRoot ( nodeForValue )  == nodeForB;^181^^^^^172^182^return findRoot ( nodeForB )  == nodeForValue;^[CLASS] 1  [METHOD] apply [RETURN_TYPE] boolean   Object b [VARIABLES] Object  b  Node  nodeForB  nodeForValue  boolean  
[buglab_swap_variables]^return o.apply ( isSameRoot ) ;^188^^^^^187^189^return isSameRoot.apply ( o ) ;^[CLASS] 2  [METHOD] contains [RETURN_TYPE] boolean   Object o [VARIABLES] boolean  Object  o  
[buglab_swap_variables]^return unmodifiableIterator ( filter ( isSameRoot.keySet (  ) .iterator (  ) , elmap )  ) ;^192^193^^^^191^194^return unmodifiableIterator ( filter ( elmap.keySet (  ) .iterator (  ) , isSameRoot )  ) ;^[CLASS] 2  [METHOD] iterator [RETURN_TYPE] Iterator   [VARIABLES] boolean  
[buglab_swap_variables]^return unmodifiableIterator ( filter ( elmap.keySet (  ) .iterator (  )  )  ) ;^192^193^^^^191^194^return unmodifiableIterator ( filter ( elmap.keySet (  ) .iterator (  ) , isSameRoot )  ) ;^[CLASS] 2  [METHOD] iterator [RETURN_TYPE] Iterator   [VARIABLES] boolean  
[buglab_swap_variables]^return findRoot ( value.get ( elmap )  ) .size;^197^^^^^196^198^return findRoot ( elmap.get ( value )  ) .size;^[CLASS] 2  [METHOD] size [RETURN_TYPE] int   [VARIABLES] boolean  
