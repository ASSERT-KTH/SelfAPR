[BugLab_Argument_Swapping]^Node<E> nodeForValue = value.get ( elmap ) ;^170^^^^^165^175^Node<E> nodeForValue = elmap.get ( value ) ;^[CLASS] StandardUnionFind 1 2 Node   [VARIABLES] 
[BugLab_Variable_Misuse]^union ( element, other.find ( elem )  ) ;^73^^^^^71^75^union ( elem, other.find ( elem )  ) ;^[CLASS] StandardUnionFind 1 2 Node  [METHOD] <init> [RETURN_TYPE] UnionFind)   UnionFind<E> other [VARIABLES] boolean  E  elem  element  Node  nodeForValue  parent  UnionFind  other  Map  elmap  long  serialVersionUID  int  rank  size  
[BugLab_Argument_Swapping]^union ( other, elem.find ( elem )  ) ;^73^^^^^71^75^union ( elem, other.find ( elem )  ) ;^[CLASS] StandardUnionFind 1 2 Node  [METHOD] <init> [RETURN_TYPE] UnionFind)   UnionFind<E> other [VARIABLES] boolean  E  elem  element  Node  nodeForValue  parent  UnionFind  other  Map  elmap  long  serialVersionUID  int  rank  size  
[BugLab_Variable_Misuse]^this.element = elem;^221^^^^^219^222^this.element = element;^[CLASS] StandardUnionFind 1 2 Node  [METHOD] <init> [RETURN_TYPE] StandardUnionFind$Node(E)   E element [VARIABLES] boolean  E  elem  element  Map  elmap  long  serialVersionUID  int  rank  size  Node  nodeForValue  parent  
[BugLab_Variable_Misuse]^Node<E> nodeA = findRootOrCreateNode ( elem ) ;^82^^^^^81^99^Node<E> nodeA = findRootOrCreateNode ( a ) ;^[CLASS] StandardUnionFind 1 2 Node  [METHOD] union [RETURN_TYPE] E   E a E b [VARIABLES] boolean  E  a  b  e  elem  element  Map  elmap  long  serialVersionUID  int  rank  size  Node  nodeA  nodeB  nodeForValue  parent  
[BugLab_Variable_Misuse]^Node<E> nodeA = findRootOrCreateNode ( element ) ;^82^^^^^81^99^Node<E> nodeA = findRootOrCreateNode ( a ) ;^[CLASS] StandardUnionFind 1 2 Node  [METHOD] union [RETURN_TYPE] E   E a E b [VARIABLES] boolean  E  a  b  e  elem  element  Map  elmap  long  serialVersionUID  int  rank  size  Node  nodeA  nodeB  nodeForValue  parent  
[BugLab_Variable_Misuse]^Node<E> nodeB = findRootOrCreateNode ( element ) ;^83^^^^^81^99^Node<E> nodeB = findRootOrCreateNode ( b ) ;^[CLASS] StandardUnionFind 1 2 Node  [METHOD] union [RETURN_TYPE] E   E a E b [VARIABLES] boolean  E  a  b  e  elem  element  Map  elmap  long  serialVersionUID  int  rank  size  Node  nodeA  nodeB  nodeForValue  parent  
[BugLab_Argument_Swapping]^if  ( nodeB == nodeA )  {^85^^^^^81^99^if  ( nodeA == nodeB )  {^[CLASS] StandardUnionFind 1 2 Node  [METHOD] union [RETURN_TYPE] E   E a E b [VARIABLES] boolean  E  a  b  e  elem  element  Map  elmap  long  serialVersionUID  int  rank  size  Node  nodeA  nodeB  nodeForValue  parent  
[BugLab_Wrong_Operator]^if  ( nodeA >= nodeB )  {^85^^^^^81^99^if  ( nodeA == nodeB )  {^[CLASS] StandardUnionFind 1 2 Node  [METHOD] union [RETURN_TYPE] E   E a E b [VARIABLES] boolean  E  a  b  e  elem  element  Map  elmap  long  serialVersionUID  int  rank  size  Node  nodeA  nodeB  nodeForValue  parent  
[BugLab_Argument_Swapping]^return nodeA.element.element;^86^^^^^81^99^return nodeA.element;^[CLASS] StandardUnionFind 1 2 Node  [METHOD] union [RETURN_TYPE] E   E a E b [VARIABLES] boolean  E  a  b  e  elem  element  Map  elmap  long  serialVersionUID  int  rank  size  Node  nodeA  nodeB  nodeForValue  parent  
[BugLab_Argument_Swapping]^return nodeA;^86^^^^^81^99^return nodeA.element;^[CLASS] StandardUnionFind 1 2 Node  [METHOD] union [RETURN_TYPE] E   E a E b [VARIABLES] boolean  E  a  b  e  elem  element  Map  elmap  long  serialVersionUID  int  rank  size  Node  nodeA  nodeB  nodeForValue  parent  
[BugLab_Variable_Misuse]^if  ( size > nodeB.rank )  {^88^^^^^81^99^if  ( nodeA.rank > nodeB.rank )  {^[CLASS] StandardUnionFind 1 2 Node  [METHOD] union [RETURN_TYPE] E   E a E b [VARIABLES] boolean  E  a  b  e  elem  element  Map  elmap  long  serialVersionUID  int  rank  size  Node  nodeA  nodeB  nodeForValue  parent  
[BugLab_Variable_Misuse]^if  ( nodeA.rank > size )  {^88^^^^^81^99^if  ( nodeA.rank > nodeB.rank )  {^[CLASS] StandardUnionFind 1 2 Node  [METHOD] union [RETURN_TYPE] E   E a E b [VARIABLES] boolean  E  a  b  e  elem  element  Map  elmap  long  serialVersionUID  int  rank  size  Node  nodeA  nodeB  nodeForValue  parent  
[BugLab_Argument_Swapping]^if  ( nodeB.rank > nodeA.rank )  {^88^^^^^81^99^if  ( nodeA.rank > nodeB.rank )  {^[CLASS] StandardUnionFind 1 2 Node  [METHOD] union [RETURN_TYPE] E   E a E b [VARIABLES] boolean  E  a  b  e  elem  element  Map  elmap  long  serialVersionUID  int  rank  size  Node  nodeA  nodeB  nodeForValue  parent  
[BugLab_Wrong_Operator]^if  ( nodeA.rank >= nodeB.rank )  {^88^^^^^81^99^if  ( nodeA.rank > nodeB.rank )  {^[CLASS] StandardUnionFind 1 2 Node  [METHOD] union [RETURN_TYPE] E   E a E b [VARIABLES] boolean  E  a  b  e  elem  element  Map  elmap  long  serialVersionUID  int  rank  size  Node  nodeA  nodeB  nodeForValue  parent  
[BugLab_Variable_Misuse]^nodeA.size += size;^90^^^^^81^99^nodeA.size += nodeB.size;^[CLASS] StandardUnionFind 1 2 Node  [METHOD] union [RETURN_TYPE] E   E a E b [VARIABLES] boolean  E  a  b  e  elem  element  Map  elmap  long  serialVersionUID  int  rank  size  Node  nodeA  nodeB  nodeForValue  parent  
[BugLab_Argument_Swapping]^nodeA.size += nodeB.size.size;^90^^^^^81^99^nodeA.size += nodeB.size;^[CLASS] StandardUnionFind 1 2 Node  [METHOD] union [RETURN_TYPE] E   E a E b [VARIABLES] boolean  E  a  b  e  elem  element  Map  elmap  long  serialVersionUID  int  rank  size  Node  nodeA  nodeB  nodeForValue  parent  
[BugLab_Variable_Misuse]^return e;^91^^^^^81^99^return nodeA.element;^[CLASS] StandardUnionFind 1 2 Node  [METHOD] union [RETURN_TYPE] E   E a E b [VARIABLES] boolean  E  a  b  e  elem  element  Map  elmap  long  serialVersionUID  int  rank  size  Node  nodeA  nodeB  nodeForValue  parent  
[BugLab_Argument_Swapping]^return nodeA.element.element;^91^^^^^81^99^return nodeA.element;^[CLASS] StandardUnionFind 1 2 Node  [METHOD] union [RETURN_TYPE] E   E a E b [VARIABLES] boolean  E  a  b  e  elem  element  Map  elmap  long  serialVersionUID  int  rank  size  Node  nodeA  nodeB  nodeForValue  parent  
[BugLab_Argument_Swapping]^return nodeA;^91^^^^^81^99^return nodeA.element;^[CLASS] StandardUnionFind 1 2 Node  [METHOD] union [RETURN_TYPE] E   E a E b [VARIABLES] boolean  E  a  b  e  elem  element  Map  elmap  long  serialVersionUID  int  rank  size  Node  nodeA  nodeB  nodeForValue  parent  
[BugLab_Variable_Misuse]^nodeA.size += null.size;^90^^^^^81^99^nodeA.size += nodeB.size;^[CLASS] StandardUnionFind 1 2 Node  [METHOD] union [RETURN_TYPE] E   E a E b [VARIABLES] boolean  E  a  b  e  elem  element  Map  elmap  long  serialVersionUID  int  rank  size  Node  nodeA  nodeB  nodeForValue  parent  
[BugLab_Argument_Swapping]^nodeA.size += nodeB;^90^^^^^81^99^nodeA.size += nodeB.size;^[CLASS] StandardUnionFind 1 2 Node  [METHOD] union [RETURN_TYPE] E   E a E b [VARIABLES] boolean  E  a  b  e  elem  element  Map  elmap  long  serialVersionUID  int  rank  size  Node  nodeA  nodeB  nodeForValue  parent  
[BugLab_Variable_Misuse]^if  ( size == nodeB.rank )  {^94^^^^^81^99^if  ( nodeA.rank == nodeB.rank )  {^[CLASS] StandardUnionFind 1 2 Node  [METHOD] union [RETURN_TYPE] E   E a E b [VARIABLES] boolean  E  a  b  e  elem  element  Map  elmap  long  serialVersionUID  int  rank  size  Node  nodeA  nodeB  nodeForValue  parent  
[BugLab_Variable_Misuse]^if  ( nodeA.rank == size )  {^94^^^^^81^99^if  ( nodeA.rank == nodeB.rank )  {^[CLASS] StandardUnionFind 1 2 Node  [METHOD] union [RETURN_TYPE] E   E a E b [VARIABLES] boolean  E  a  b  e  elem  element  Map  elmap  long  serialVersionUID  int  rank  size  Node  nodeA  nodeB  nodeForValue  parent  
[BugLab_Argument_Swapping]^if  ( nodeB.rank == nodeA.rank )  {^94^^^^^81^99^if  ( nodeA.rank == nodeB.rank )  {^[CLASS] StandardUnionFind 1 2 Node  [METHOD] union [RETURN_TYPE] E   E a E b [VARIABLES] boolean  E  a  b  e  elem  element  Map  elmap  long  serialVersionUID  int  rank  size  Node  nodeA  nodeB  nodeForValue  parent  
[BugLab_Wrong_Operator]^if  ( nodeA.rank < nodeB.rank )  {^94^^^^^81^99^if  ( nodeA.rank == nodeB.rank )  {^[CLASS] StandardUnionFind 1 2 Node  [METHOD] union [RETURN_TYPE] E   E a E b [VARIABLES] boolean  E  a  b  e  elem  element  Map  elmap  long  serialVersionUID  int  rank  size  Node  nodeA  nodeB  nodeForValue  parent  
[BugLab_Argument_Swapping]^nodeB.size += nodeA;^97^^^^^81^99^nodeB.size += nodeA.size;^[CLASS] StandardUnionFind 1 2 Node  [METHOD] union [RETURN_TYPE] E   E a E b [VARIABLES] boolean  E  a  b  e  elem  element  Map  elmap  long  serialVersionUID  int  rank  size  Node  nodeA  nodeB  nodeForValue  parent  
[BugLab_Variable_Misuse]^return element;^98^^^^^81^99^return nodeB.element;^[CLASS] StandardUnionFind 1 2 Node  [METHOD] union [RETURN_TYPE] E   E a E b [VARIABLES] boolean  E  a  b  e  elem  element  Map  elmap  long  serialVersionUID  int  rank  size  Node  nodeA  nodeB  nodeForValue  parent  
[BugLab_Argument_Swapping]^return nodeB.element.element;^98^^^^^81^99^return nodeB.element;^[CLASS] StandardUnionFind 1 2 Node  [METHOD] union [RETURN_TYPE] E   E a E b [VARIABLES] boolean  E  a  b  e  elem  element  Map  elmap  long  serialVersionUID  int  rank  size  Node  nodeA  nodeB  nodeForValue  parent  
[BugLab_Argument_Swapping]^return nodeB;^98^^^^^81^99^return nodeB.element;^[CLASS] StandardUnionFind 1 2 Node  [METHOD] union [RETURN_TYPE] E   E a E b [VARIABLES] boolean  E  a  b  e  elem  element  Map  elmap  long  serialVersionUID  int  rank  size  Node  nodeA  nodeB  nodeForValue  parent  
[BugLab_Variable_Misuse]^checkArgument ( elementlmap.containsKey ( e ) , "Element does not exist: %s", e ) ;^102^^^^^101^104^checkArgument ( elmap.containsKey ( e ) , "Element does not exist: %s", e ) ;^[CLASS] StandardUnionFind 1 2 Node  [METHOD] find [RETURN_TYPE] E   E e [VARIABLES] boolean  E  a  b  e  elem  element  Map  elmap  long  serialVersionUID  int  rank  size  Node  nodeA  nodeB  nodeForValue  parent  
[BugLab_Argument_Swapping]^checkArgument ( elmaplmap.containsKey ( e ) , "Element does not exist: %s", e ) ;^102^^^^^101^104^checkArgument ( elmap.containsKey ( e ) , "Element does not exist: %s", e ) ;^[CLASS] StandardUnionFind 1 2 Node  [METHOD] find [RETURN_TYPE] E   E e [VARIABLES] boolean  E  a  b  e  elem  element  Map  elmap  long  serialVersionUID  int  rank  size  Node  nodeA  nodeB  nodeForValue  parent  
[BugLab_Argument_Swapping]^checkArgument ( e.containsKey ( elmap ) , "Element does not exist: %s", e ) ;^102^^^^^101^104^checkArgument ( elmap.containsKey ( e ) , "Element does not exist: %s", e ) ;^[CLASS] StandardUnionFind 1 2 Node  [METHOD] find [RETURN_TYPE] E   E e [VARIABLES] boolean  E  a  b  e  elem  element  Map  elmap  long  serialVersionUID  int  rank  size  Node  nodeA  nodeB  nodeForValue  parent  
[BugLab_Variable_Misuse]^return findRoot ( elemlmap.get ( e )  ) .element;^103^^^^^101^104^return findRoot ( elmap.get ( e )  ) .element;^[CLASS] StandardUnionFind 1 2 Node  [METHOD] find [RETURN_TYPE] E   E e [VARIABLES] boolean  E  a  b  e  elem  element  Map  elmap  long  serialVersionUID  int  rank  size  Node  nodeA  nodeB  nodeForValue  parent  
[BugLab_Variable_Misuse]^return findRoot ( this.get ( e )  ) .element;^103^^^^^101^104^return findRoot ( elmap.get ( e )  ) .element;^[CLASS] StandardUnionFind 1 2 Node  [METHOD] find [RETURN_TYPE] E   E e [VARIABLES] boolean  E  a  b  e  elem  element  Map  elmap  long  serialVersionUID  int  rank  size  Node  nodeA  nodeB  nodeForValue  parent  
[BugLab_Argument_Swapping]^return findRoot ( elmaplmap.get ( e )  ) .element;^103^^^^^101^104^return findRoot ( elmap.get ( e )  ) .element;^[CLASS] StandardUnionFind 1 2 Node  [METHOD] find [RETURN_TYPE] E   E e [VARIABLES] boolean  E  a  b  e  elem  element  Map  elmap  long  serialVersionUID  int  rank  size  Node  nodeA  nodeB  nodeForValue  parent  
[BugLab_Argument_Swapping]^return findRoot ( e.get ( elmap )  ) .element;^103^^^^^101^104^return findRoot ( elmap.get ( e )  ) .element;^[CLASS] StandardUnionFind 1 2 Node  [METHOD] find [RETURN_TYPE] E   E e [VARIABLES] boolean  E  a  b  e  elem  element  Map  elmap  long  serialVersionUID  int  rank  size  Node  nodeA  nodeB  nodeForValue  parent  
[BugLab_Variable_Misuse]^return findRoot ( elementlmap.get ( e )  ) .element;^103^^^^^101^104^return findRoot ( elmap.get ( e )  ) .element;^[CLASS] StandardUnionFind 1 2 Node  [METHOD] find [RETURN_TYPE] E   E e [VARIABLES] boolean  E  a  b  e  elem  element  Map  elmap  long  serialVersionUID  int  rank  size  Node  nodeA  nodeB  nodeForValue  parent  
[BugLab_Variable_Misuse]^E elementRep = find ( a ) ;^107^^^^^106^110^E aRep = find ( a ) ;^[CLASS] StandardUnionFind 1 2 Node  [METHOD] areEquivalent [RETURN_TYPE] boolean   E a E b [VARIABLES] boolean  E  a  aRep  b  bRep  e  elem  element  Map  elmap  long  serialVersionUID  int  rank  size  Node  nodeA  nodeB  nodeForValue  parent  
[BugLab_Variable_Misuse]^E elemRep = find ( b ) ;^108^^^^^106^110^E bRep = find ( b ) ;^[CLASS] StandardUnionFind 1 2 Node  [METHOD] areEquivalent [RETURN_TYPE] boolean   E a E b [VARIABLES] boolean  E  a  aRep  b  bRep  e  elem  element  Map  elmap  long  serialVersionUID  int  rank  size  Node  nodeA  nodeB  nodeForValue  parent  
[BugLab_Variable_Misuse]^E eRep = find ( b ) ;^108^^^^^106^110^E bRep = find ( b ) ;^[CLASS] StandardUnionFind 1 2 Node  [METHOD] areEquivalent [RETURN_TYPE] boolean   E a E b [VARIABLES] boolean  E  a  aRep  b  bRep  e  elem  element  Map  elmap  long  serialVersionUID  int  rank  size  Node  nodeA  nodeB  nodeForValue  parent  
[BugLab_Variable_Misuse]^return element == bRep;^109^^^^^106^110^return aRep == bRep;^[CLASS] StandardUnionFind 1 2 Node  [METHOD] areEquivalent [RETURN_TYPE] boolean   E a E b [VARIABLES] boolean  E  a  aRep  b  bRep  e  elem  element  Map  elmap  long  serialVersionUID  int  rank  size  Node  nodeA  nodeB  nodeForValue  parent  
[BugLab_Variable_Misuse]^return aRep == element;^109^^^^^106^110^return aRep == bRep;^[CLASS] StandardUnionFind 1 2 Node  [METHOD] areEquivalent [RETURN_TYPE] boolean   E a E b [VARIABLES] boolean  E  a  aRep  b  bRep  e  elem  element  Map  elmap  long  serialVersionUID  int  rank  size  Node  nodeA  nodeB  nodeForValue  parent  
[BugLab_Argument_Swapping]^return bRep == aRep;^109^^^^^106^110^return aRep == bRep;^[CLASS] StandardUnionFind 1 2 Node  [METHOD] areEquivalent [RETURN_TYPE] boolean   E a E b [VARIABLES] boolean  E  a  aRep  b  bRep  e  elem  element  Map  elmap  long  serialVersionUID  int  rank  size  Node  nodeA  nodeB  nodeForValue  parent  
[BugLab_Wrong_Operator]^return aRep != bRep;^109^^^^^106^110^return aRep == bRep;^[CLASS] StandardUnionFind 1 2 Node  [METHOD] areEquivalent [RETURN_TYPE] boolean   E a E b [VARIABLES] boolean  E  a  aRep  b  bRep  e  elem  element  Map  elmap  long  serialVersionUID  int  rank  size  Node  nodeA  nodeB  nodeForValue  parent  
[BugLab_Variable_Misuse]^return Collections.unmodifiableSet ( 0.keySet (  )  ) ;^113^^^^^112^114^return Collections.unmodifiableSet ( elmap.keySet (  )  ) ;^[CLASS] StandardUnionFind 1 2 Node  [METHOD] elements [RETURN_TYPE] Set   [VARIABLES] boolean  E  a  aRep  b  bRep  e  elem  element  Map  elmap  long  serialVersionUID  int  rank  size  Node  nodeA  nodeB  nodeForValue  parent  
[BugLab_Wrong_Operator]^if  ( builder != null )  {^121^^^^^116^132^if  ( builder == null )  {^[CLASS] StandardUnionFind 1 2 Node  [METHOD] allEquivalenceClasses [RETURN_TYPE] Collection   [VARIABLES] boolean  E  a  aRep  b  bRep  e  elem  element  Node  elem  nodeA  nodeB  nodeForValue  parent  root  Builder  builder  group  result  Map  elmap  groupsTmp  long  serialVersionUID  int  rank  size  
[BugLab_Variable_Misuse]^Node<E> root = findRoot ( null ) ;^119^^^^^116^132^Node<E> root = findRoot ( elem ) ;^[CLASS] StandardUnionFind 1 2 Node  [METHOD] allEquivalenceClasses [RETURN_TYPE] Collection   [VARIABLES] boolean  E  a  aRep  b  bRep  e  elem  element  Node  elem  nodeA  nodeB  nodeForValue  parent  root  Builder  builder  group  result  Map  elmap  groupsTmp  long  serialVersionUID  int  rank  size  
[BugLab_Variable_Misuse]^Node<E> node = bReplmap.get ( e ) ;^141^^^^^140^148^Node<E> node = elmap.get ( e ) ;^[CLASS] StandardUnionFind 1 2 Node  [METHOD] findRootOrCreateNode [RETURN_TYPE] StandardUnionFind$Node   E e [VARIABLES] boolean  E  a  aRep  b  bRep  e  elem  element  Map  elmap  groupsTmp  long  serialVersionUID  int  rank  size  Node  elem  node  nodeA  nodeB  nodeForValue  parent  root  
[BugLab_Argument_Swapping]^Node<E> node = elmaplmap.get ( e ) ;^141^^^^^140^148^Node<E> node = elmap.get ( e ) ;^[CLASS] StandardUnionFind 1 2 Node  [METHOD] findRootOrCreateNode [RETURN_TYPE] StandardUnionFind$Node   E e [VARIABLES] boolean  E  a  aRep  b  bRep  e  elem  element  Map  elmap  groupsTmp  long  serialVersionUID  int  rank  size  Node  elem  node  nodeA  nodeB  nodeForValue  parent  root  
[BugLab_Argument_Swapping]^Node<E> node = e.get ( elmap ) ;^141^^^^^140^148^Node<E> node = elmap.get ( e ) ;^[CLASS] StandardUnionFind 1 2 Node  [METHOD] findRootOrCreateNode [RETURN_TYPE] StandardUnionFind$Node   E e [VARIABLES] boolean  E  a  aRep  b  bRep  e  elem  element  Map  elmap  groupsTmp  long  serialVersionUID  int  rank  size  Node  elem  node  nodeA  nodeB  nodeForValue  parent  root  
[BugLab_Variable_Misuse]^Node<E> node = elementlmap.get ( e ) ;^141^^^^^140^148^Node<E> node = elmap.get ( e ) ;^[CLASS] StandardUnionFind 1 2 Node  [METHOD] findRootOrCreateNode [RETURN_TYPE] StandardUnionFind$Node   E e [VARIABLES] boolean  E  a  aRep  b  bRep  e  elem  element  Map  elmap  groupsTmp  long  serialVersionUID  int  rank  size  Node  elem  node  nodeA  nodeB  nodeForValue  parent  root  
[BugLab_Variable_Misuse]^if  ( 3 != null )  {^142^^^^^140^148^if  ( node != null )  {^[CLASS] StandardUnionFind 1 2 Node  [METHOD] findRootOrCreateNode [RETURN_TYPE] StandardUnionFind$Node   E e [VARIABLES] boolean  E  a  aRep  b  bRep  e  elem  element  Map  elmap  groupsTmp  long  serialVersionUID  int  rank  size  Node  elem  node  nodeA  nodeB  nodeForValue  parent  root  
[BugLab_Wrong_Operator]^if  ( node == null )  {^142^^^^^140^148^if  ( node != null )  {^[CLASS] StandardUnionFind 1 2 Node  [METHOD] findRootOrCreateNode [RETURN_TYPE] StandardUnionFind$Node   E e [VARIABLES] boolean  E  a  aRep  b  bRep  e  elem  element  Map  elmap  groupsTmp  long  serialVersionUID  int  rank  size  Node  elem  node  nodeA  nodeB  nodeForValue  parent  root  
[BugLab_Variable_Misuse]^return findRoot ( this ) ;^143^^^^^140^148^return findRoot ( node ) ;^[CLASS] StandardUnionFind 1 2 Node  [METHOD] findRootOrCreateNode [RETURN_TYPE] StandardUnionFind$Node   E e [VARIABLES] boolean  E  a  aRep  b  bRep  e  elem  element  Map  elmap  groupsTmp  long  serialVersionUID  int  rank  size  Node  elem  node  nodeA  nodeB  nodeForValue  parent  root  
[BugLab_Variable_Misuse]^node = new Node<E> ( bRep ) ;^145^^^^^140^148^node = new Node<E> ( e ) ;^[CLASS] StandardUnionFind 1 2 Node  [METHOD] findRootOrCreateNode [RETURN_TYPE] StandardUnionFind$Node   E e [VARIABLES] boolean  E  a  aRep  b  bRep  e  elem  element  Map  elmap  groupsTmp  long  serialVersionUID  int  rank  size  Node  elem  node  nodeA  nodeB  nodeForValue  parent  root  
[BugLab_Variable_Misuse]^elmap.put ( element, node ) ;^146^^^^^140^148^elmap.put ( e, node ) ;^[CLASS] StandardUnionFind 1 2 Node  [METHOD] findRootOrCreateNode [RETURN_TYPE] StandardUnionFind$Node   E e [VARIABLES] boolean  E  a  aRep  b  bRep  e  elem  element  Map  elmap  groupsTmp  long  serialVersionUID  int  rank  size  Node  elem  node  nodeA  nodeB  nodeForValue  parent  root  
[BugLab_Argument_Swapping]^elmap.put ( node, e ) ;^146^^^^^140^148^elmap.put ( e, node ) ;^[CLASS] StandardUnionFind 1 2 Node  [METHOD] findRootOrCreateNode [RETURN_TYPE] StandardUnionFind$Node   E e [VARIABLES] boolean  E  a  aRep  b  bRep  e  elem  element  Map  elmap  groupsTmp  long  serialVersionUID  int  rank  size  Node  elem  node  nodeA  nodeB  nodeForValue  parent  root  
[BugLab_Argument_Swapping]^if  ( node.parent.parent != node )  {^158^^^^^157^162^if  ( node.parent != node )  {^[CLASS] StandardUnionFind 1 2 Node  [METHOD] findRoot [RETURN_TYPE] StandardUnionFind$Node   Node<E> node [VARIABLES] boolean  E  a  aRep  b  bRep  e  elem  element  Map  elmap  groupsTmp  long  serialVersionUID  int  rank  size  Node  elem  node  nodeA  nodeB  nodeForValue  parent  root  
[BugLab_Argument_Swapping]^if  ( node != node.parent )  {^158^^^^^157^162^if  ( node.parent != node )  {^[CLASS] StandardUnionFind 1 2 Node  [METHOD] findRoot [RETURN_TYPE] StandardUnionFind$Node   Node<E> node [VARIABLES] boolean  E  a  aRep  b  bRep  e  elem  element  Map  elmap  groupsTmp  long  serialVersionUID  int  rank  size  Node  elem  node  nodeA  nodeB  nodeForValue  parent  root  
[BugLab_Wrong_Operator]^if  ( node.parent == node )  {^158^^^^^157^162^if  ( node.parent != node )  {^[CLASS] StandardUnionFind 1 2 Node  [METHOD] findRoot [RETURN_TYPE] StandardUnionFind$Node   Node<E> node [VARIABLES] boolean  E  a  aRep  b  bRep  e  elem  element  Map  elmap  groupsTmp  long  serialVersionUID  int  rank  size  Node  elem  node  nodeA  nodeB  nodeForValue  parent  root  
[BugLab_Variable_Misuse]^node.parent = findRoot ( this.parent ) ;^159^^^^^157^162^node.parent = findRoot ( node.parent ) ;^[CLASS] StandardUnionFind 1 2 Node  [METHOD] findRoot [RETURN_TYPE] StandardUnionFind$Node   Node<E> node [VARIABLES] boolean  E  a  aRep  b  bRep  e  elem  element  Map  elmap  groupsTmp  long  serialVersionUID  int  rank  size  Node  elem  node  nodeA  nodeB  nodeForValue  parent  root  
[BugLab_Variable_Misuse]^node.parent = findRoot ( 2 ) ;^159^^^^^157^162^node.parent = findRoot ( node.parent ) ;^[CLASS] StandardUnionFind 1 2 Node  [METHOD] findRoot [RETURN_TYPE] StandardUnionFind$Node   Node<E> node [VARIABLES] boolean  E  a  aRep  b  bRep  e  elem  element  Map  elmap  groupsTmp  long  serialVersionUID  int  rank  size  Node  elem  node  nodeA  nodeB  nodeForValue  parent  root  
[BugLab_Argument_Swapping]^node.parent = findRoot ( node.parent.parent ) ;^159^^^^^157^162^node.parent = findRoot ( node.parent ) ;^[CLASS] StandardUnionFind 1 2 Node  [METHOD] findRoot [RETURN_TYPE] StandardUnionFind$Node   Node<E> node [VARIABLES] boolean  E  a  aRep  b  bRep  e  elem  element  Map  elmap  groupsTmp  long  serialVersionUID  int  rank  size  Node  elem  node  nodeA  nodeB  nodeForValue  parent  root  
[BugLab_Argument_Swapping]^node.parent = findRoot ( node ) ;^159^^^^^157^162^node.parent = findRoot ( node.parent ) ;^[CLASS] StandardUnionFind 1 2 Node  [METHOD] findRoot [RETURN_TYPE] StandardUnionFind$Node   Node<E> node [VARIABLES] boolean  E  a  aRep  b  bRep  e  elem  element  Map  elmap  groupsTmp  long  serialVersionUID  int  rank  size  Node  elem  node  nodeA  nodeB  nodeForValue  parent  root  
[BugLab_Argument_Swapping]^return node.parent.parent;^161^^^^^157^162^return node.parent;^[CLASS] StandardUnionFind 1 2 Node  [METHOD] findRoot [RETURN_TYPE] StandardUnionFind$Node   Node<E> node [VARIABLES] boolean  E  a  aRep  b  bRep  e  elem  element  Map  elmap  groupsTmp  long  serialVersionUID  int  rank  size  Node  elem  node  nodeA  nodeB  nodeForValue  parent  root  
[BugLab_Argument_Swapping]^return node;^161^^^^^157^162^return node.parent;^[CLASS] StandardUnionFind 1 2 Node  [METHOD] findRoot [RETURN_TYPE] StandardUnionFind$Node   Node<E> node [VARIABLES] boolean  E  a  aRep  b  bRep  e  elem  element  Map  elmap  groupsTmp  long  serialVersionUID  int  rank  size  Node  elem  node  nodeA  nodeB  nodeForValue  parent  root  
[BugLab_Variable_Misuse]^checkArgument ( elmap.containsKey ( element ) , "Element does not exist: " + value ) ;^165^^^^^150^180^checkArgument ( elmap.containsKey ( value ) , "Element does not exist: " + value ) ;^[CLASS] StandardUnionFind 1 2 Node  [METHOD] findAll [RETURN_TYPE] Set   final E value [VARIABLES] boolean  E  a  aRep  b  bRep  e  elem  element  value  Node  elem  node  nodeA  nodeB  nodeForB  nodeForValue  parent  root  Object  b  o  Map  elmap  groupsTmp  long  serialVersionUID  int  rank  size  Predicate  isSameRoot  
[BugLab_Argument_Swapping]^checkArgument ( value.containsKey ( elmap ) , "Element does not exist: " + value ) ;^165^^^^^150^180^checkArgument ( elmap.containsKey ( value ) , "Element does not exist: " + value ) ;^[CLASS] StandardUnionFind 1 2 Node  [METHOD] findAll [RETURN_TYPE] Set   final E value [VARIABLES] boolean  E  a  aRep  b  bRep  e  elem  element  value  Node  elem  node  nodeA  nodeB  nodeForB  nodeForValue  parent  root  Object  b  o  Map  elmap  groupsTmp  long  serialVersionUID  int  rank  size  Predicate  isSameRoot  
[BugLab_Wrong_Operator]^checkArgument ( elmap.containsKey ( value ) , "Element does not exist: "  >>  value ) ;^165^^^^^150^180^checkArgument ( elmap.containsKey ( value ) , "Element does not exist: " + value ) ;^[CLASS] StandardUnionFind 1 2 Node  [METHOD] findAll [RETURN_TYPE] Set   final E value [VARIABLES] boolean  E  a  aRep  b  bRep  e  elem  element  value  Node  elem  node  nodeA  nodeB  nodeForB  nodeForValue  parent  root  Object  b  o  Map  elmap  groupsTmp  long  serialVersionUID  int  rank  size  Predicate  isSameRoot  
[BugLab_Variable_Misuse]^if  ( Objects.equal ( elem, b )  )  {^173^^^^^158^188^if  ( Objects.equal ( value, b )  )  {^[CLASS] StandardUnionFind 1 2 Node  [METHOD] findAll [RETURN_TYPE] Set   final E value [VARIABLES] boolean  E  a  aRep  b  bRep  e  elem  element  value  Node  elem  node  nodeA  nodeB  nodeForB  nodeForValue  parent  root  Object  b  o  Map  elmap  groupsTmp  long  serialVersionUID  int  rank  size  Predicate  isSameRoot  
[BugLab_Variable_Misuse]^if  ( Objects.equal ( value, o )  )  {^173^^^^^158^188^if  ( Objects.equal ( value, b )  )  {^[CLASS] StandardUnionFind 1 2 Node  [METHOD] findAll [RETURN_TYPE] Set   final E value [VARIABLES] boolean  E  a  aRep  b  bRep  e  elem  element  value  Node  elem  node  nodeA  nodeB  nodeForB  nodeForValue  parent  root  Object  b  o  Map  elmap  groupsTmp  long  serialVersionUID  int  rank  size  Predicate  isSameRoot  
[BugLab_Argument_Swapping]^if  ( Objects.equal ( b, value )  )  {^173^^^^^158^188^if  ( Objects.equal ( value, b )  )  {^[CLASS] StandardUnionFind 1 2 Node  [METHOD] findAll [RETURN_TYPE] Set   final E value [VARIABLES] boolean  E  a  aRep  b  bRep  e  elem  element  value  Node  elem  node  nodeA  nodeB  nodeForB  nodeForValue  parent  root  Object  b  o  Map  elmap  groupsTmp  long  serialVersionUID  int  rank  size  Predicate  isSameRoot  
[BugLab_Wrong_Literal]^return false;^174^^^^^159^189^return true;^[CLASS] StandardUnionFind 1 2 Node  [METHOD] findAll [RETURN_TYPE] Set   final E value [VARIABLES] boolean  E  a  aRep  b  bRep  e  elem  element  value  Node  elem  node  nodeA  nodeB  nodeForB  nodeForValue  parent  root  Object  b  o  Map  elmap  groupsTmp  long  serialVersionUID  int  rank  size  Predicate  isSameRoot  
[BugLab_Wrong_Operator]^if  ( nodeForB != null )  {^177^^^^^162^192^if  ( nodeForB == null )  {^[CLASS] StandardUnionFind 1 2 Node  [METHOD] findAll [RETURN_TYPE] Set   final E value [VARIABLES] boolean  E  a  aRep  b  bRep  e  elem  element  value  Node  elem  node  nodeA  nodeB  nodeForB  nodeForValue  parent  root  Object  b  o  Map  elmap  groupsTmp  long  serialVersionUID  int  rank  size  Predicate  isSameRoot  
[BugLab_Wrong_Literal]^return true;^178^^^^^163^193^return false;^[CLASS] StandardUnionFind 1 2 Node  [METHOD] findAll [RETURN_TYPE] Set   final E value [VARIABLES] boolean  E  a  aRep  b  bRep  e  elem  element  value  Node  elem  node  nodeA  nodeB  nodeForB  nodeForValue  parent  root  Object  b  o  Map  elmap  groupsTmp  long  serialVersionUID  int  rank  size  Predicate  isSameRoot  
[BugLab_Argument_Swapping]^return findRoot ( nodeForValue )  == nodeForB;^181^^^^^166^196^return findRoot ( nodeForB )  == nodeForValue;^[CLASS] StandardUnionFind 1 2 Node  [METHOD] findAll [RETURN_TYPE] Set   final E value [VARIABLES] boolean  E  a  aRep  b  bRep  e  elem  element  value  Node  elem  node  nodeA  nodeB  nodeForB  nodeForValue  parent  root  Object  b  o  Map  elmap  groupsTmp  long  serialVersionUID  int  rank  size  Predicate  isSameRoot  
[BugLab_Wrong_Operator]^return findRoot ( nodeForB )  > nodeForValue;^181^^^^^166^196^return findRoot ( nodeForB )  == nodeForValue;^[CLASS] StandardUnionFind 1 2 Node  [METHOD] findAll [RETURN_TYPE] Set   final E value [VARIABLES] boolean  E  a  aRep  b  bRep  e  elem  element  value  Node  elem  node  nodeA  nodeB  nodeForB  nodeForValue  parent  root  Object  b  o  Map  elmap  groupsTmp  long  serialVersionUID  int  rank  size  Predicate  isSameRoot  
[BugLab_Variable_Misuse]^Node<E> nodeForB = elmap.get ( o ) ;^176^^^^^161^191^Node<E> nodeForB = elmap.get ( b ) ;^[CLASS] StandardUnionFind 1 2 Node  [METHOD] findAll [RETURN_TYPE] Set   final E value [VARIABLES] boolean  E  a  aRep  b  bRep  e  elem  element  value  Node  elem  node  nodeA  nodeB  nodeForB  nodeForValue  parent  root  Object  b  o  Map  elmap  groupsTmp  long  serialVersionUID  int  rank  size  Predicate  isSameRoot  
[BugLab_Argument_Swapping]^Node<E> nodeForB = b.get ( elmap ) ;^176^^^^^161^191^Node<E> nodeForB = elmap.get ( b ) ;^[CLASS] StandardUnionFind 1 2 Node  [METHOD] findAll [RETURN_TYPE] Set   final E value [VARIABLES] boolean  E  a  aRep  b  bRep  e  elem  element  value  Node  elem  node  nodeA  nodeB  nodeForB  nodeForValue  parent  root  Object  b  o  Map  elmap  groupsTmp  long  serialVersionUID  int  rank  size  Predicate  isSameRoot  
[BugLab_Variable_Misuse]^Node<E> nodeForValue = elmap.get ( e ) ;^170^^^^^155^185^Node<E> nodeForValue = elmap.get ( value ) ;^[CLASS] StandardUnionFind 1 2 Node  [METHOD] findAll [RETURN_TYPE] Set   final E value [VARIABLES] boolean  E  a  aRep  b  bRep  e  elem  element  value  Node  elem  node  nodeA  nodeB  nodeForB  nodeForValue  parent  root  Object  b  o  Map  elmap  groupsTmp  long  serialVersionUID  int  rank  size  Predicate  isSameRoot  
[BugLab_Argument_Swapping]^Node<E> nodeForValue = value.get ( elmap ) ;^170^^^^^155^185^Node<E> nodeForValue = elmap.get ( value ) ;^[CLASS] StandardUnionFind 1 2 Node  [METHOD] findAll [RETURN_TYPE] Set   final E value [VARIABLES] boolean  E  a  aRep  b  bRep  e  elem  element  value  Node  elem  node  nodeA  nodeB  nodeForB  nodeForValue  parent  root  Object  b  o  Map  elmap  groupsTmp  long  serialVersionUID  int  rank  size  Predicate  isSameRoot  
[BugLab_Variable_Misuse]^nodeForValue = findRoot ( null ) ;^180^^^^^165^195^nodeForValue = findRoot ( nodeForValue ) ;^[CLASS] StandardUnionFind 1 2 Node  [METHOD] findAll [RETURN_TYPE] Set   final E value [VARIABLES] boolean  E  a  aRep  b  bRep  e  elem  element  value  Node  elem  node  nodeA  nodeB  nodeForB  nodeForValue  parent  root  Object  b  o  Map  elmap  groupsTmp  long  serialVersionUID  int  rank  size  Predicate  isSameRoot  
[BugLab_Variable_Misuse]^return isSameRoot.apply ( b ) ;^188^^^^^173^203^return isSameRoot.apply ( o ) ;^[CLASS] StandardUnionFind 1 2 Node  [METHOD] findAll [RETURN_TYPE] Set   final E value [VARIABLES] boolean  E  a  aRep  b  bRep  e  elem  element  value  Node  elem  node  nodeA  nodeB  nodeForB  nodeForValue  parent  root  Object  b  o  Map  elmap  groupsTmp  long  serialVersionUID  int  rank  size  Predicate  isSameRoot  
[BugLab_Argument_Swapping]^return o.apply ( isSameRoot ) ;^188^^^^^173^203^return isSameRoot.apply ( o ) ;^[CLASS] StandardUnionFind 1 2 Node  [METHOD] findAll [RETURN_TYPE] Set   final E value [VARIABLES] boolean  E  a  aRep  b  bRep  e  elem  element  value  Node  elem  node  nodeA  nodeB  nodeForB  nodeForValue  parent  root  Object  b  o  Map  elmap  groupsTmp  long  serialVersionUID  int  rank  size  Predicate  isSameRoot  
[BugLab_Argument_Swapping]^return unmodifiableIterator ( filter ( isSameRoot.keySet (  ) .iterator (  ) , elmap )  ) ;^192^193^^^^177^207^return unmodifiableIterator ( filter ( elmap.keySet (  ) .iterator (  ) , isSameRoot )  ) ;^[CLASS] StandardUnionFind 1 2 Node  [METHOD] findAll [RETURN_TYPE] Set   final E value [VARIABLES] boolean  E  a  aRep  b  bRep  e  elem  element  value  Node  elem  node  nodeA  nodeB  nodeForB  nodeForValue  parent  root  Object  b  o  Map  elmap  groupsTmp  long  serialVersionUID  int  rank  size  Predicate  isSameRoot  
[BugLab_Variable_Misuse]^return findRoot ( elmap.get ( element )  ) .size;^197^^^^^182^212^return findRoot ( elmap.get ( value )  ) .size;^[CLASS] StandardUnionFind 1 2 Node  [METHOD] findAll [RETURN_TYPE] Set   final E value [VARIABLES] boolean  E  a  aRep  b  bRep  e  elem  element  value  Node  elem  node  nodeA  nodeB  nodeForB  nodeForValue  parent  root  Object  b  o  Map  elmap  groupsTmp  long  serialVersionUID  int  rank  size  Predicate  isSameRoot  
[BugLab_Argument_Swapping]^return findRoot ( value.get ( elmap )  ) .size;^197^^^^^182^212^return findRoot ( elmap.get ( value )  ) .size;^[CLASS] StandardUnionFind 1 2 Node  [METHOD] findAll [RETURN_TYPE] Set   final E value [VARIABLES] boolean  E  a  aRep  b  bRep  e  elem  element  value  Node  elem  node  nodeA  nodeB  nodeForB  nodeForValue  parent  root  Object  b  o  Map  elmap  groupsTmp  long  serialVersionUID  int  rank  size  Predicate  isSameRoot  
[BugLab_Variable_Misuse]^return unmodifiableIterator ( filter ( elmap.keySet (  ) .iterator (  ) , 3 )  ) ;^192^193^^^^177^207^return unmodifiableIterator ( filter ( elmap.keySet (  ) .iterator (  ) , isSameRoot )  ) ;^[CLASS] StandardUnionFind 1 2 Node  [METHOD] findAll [RETURN_TYPE] Set   final E value [VARIABLES] boolean  E  a  aRep  b  bRep  e  elem  element  value  Node  elem  node  nodeA  nodeB  nodeForB  nodeForValue  parent  root  Object  b  o  Map  elmap  groupsTmp  long  serialVersionUID  int  rank  size  Predicate  isSameRoot  
[BugLab_Variable_Misuse]^return findRoot ( elmap.get ( elem )  ) .size;^197^^^^^182^212^return findRoot ( elmap.get ( value )  ) .size;^[CLASS] StandardUnionFind 1 2 Node  [METHOD] findAll [RETURN_TYPE] Set   final E value [VARIABLES] boolean  E  a  aRep  b  bRep  e  elem  element  value  Node  elem  node  nodeA  nodeB  nodeForB  nodeForValue  parent  root  Object  b  o  Map  elmap  groupsTmp  long  serialVersionUID  int  rank  size  Predicate  isSameRoot  
[BugLab_Argument_Swapping]^if  ( Objects.equal ( b, value )  )  {^173^^^^^172^182^if  ( Objects.equal ( value, b )  )  {^[CLASS] StandardUnionFind 1 2 Node  [METHOD] apply [RETURN_TYPE] boolean   Object b [VARIABLES] boolean  E  a  aRep  b  bRep  e  elem  element  value  Node  elem  node  nodeA  nodeB  nodeForB  nodeForValue  parent  root  Object  b  Map  elmap  groupsTmp  long  serialVersionUID  int  rank  size  
[BugLab_Wrong_Literal]^return false;^174^^^^^172^182^return true;^[CLASS] StandardUnionFind 1 2 Node  [METHOD] apply [RETURN_TYPE] boolean   Object b [VARIABLES] boolean  E  a  aRep  b  bRep  e  elem  element  value  Node  elem  node  nodeA  nodeB  nodeForB  nodeForValue  parent  root  Object  b  Map  elmap  groupsTmp  long  serialVersionUID  int  rank  size  
[BugLab_Variable_Misuse]^if  ( Objects.equal ( element, b )  )  {^173^^^^^172^182^if  ( Objects.equal ( value, b )  )  {^[CLASS] StandardUnionFind 1 2 Node  [METHOD] apply [RETURN_TYPE] boolean   Object b [VARIABLES] boolean  E  a  aRep  b  bRep  e  elem  element  value  Node  elem  node  nodeA  nodeB  nodeForB  nodeForValue  parent  root  Object  b  Map  elmap  groupsTmp  long  serialVersionUID  int  rank  size  
[BugLab_Argument_Swapping]^Node<E> nodeForB = b.get ( elmap ) ;^176^^^^^172^182^Node<E> nodeForB = elmap.get ( b ) ;^[CLASS] StandardUnionFind 1 2 Node  [METHOD] apply [RETURN_TYPE] boolean   Object b [VARIABLES] boolean  E  a  aRep  b  bRep  e  elem  element  value  Node  elem  node  nodeA  nodeB  nodeForB  nodeForValue  parent  root  Object  b  Map  elmap  groupsTmp  long  serialVersionUID  int  rank  size  
[BugLab_Wrong_Operator]^if  ( nodeForB != null )  {^177^^^^^172^182^if  ( nodeForB == null )  {^[CLASS] StandardUnionFind 1 2 Node  [METHOD] apply [RETURN_TYPE] boolean   Object b [VARIABLES] boolean  E  a  aRep  b  bRep  e  elem  element  value  Node  elem  node  nodeA  nodeB  nodeForB  nodeForValue  parent  root  Object  b  Map  elmap  groupsTmp  long  serialVersionUID  int  rank  size  
[BugLab_Wrong_Literal]^return true;^178^^^^^172^182^return false;^[CLASS] StandardUnionFind 1 2 Node  [METHOD] apply [RETURN_TYPE] boolean   Object b [VARIABLES] boolean  E  a  aRep  b  bRep  e  elem  element  value  Node  elem  node  nodeA  nodeB  nodeForB  nodeForValue  parent  root  Object  b  Map  elmap  groupsTmp  long  serialVersionUID  int  rank  size  
[BugLab_Variable_Misuse]^return findRoot ( nodeForB )  == null;^181^^^^^172^182^return findRoot ( nodeForB )  == nodeForValue;^[CLASS] StandardUnionFind 1 2 Node  [METHOD] apply [RETURN_TYPE] boolean   Object b [VARIABLES] boolean  E  a  aRep  b  bRep  e  elem  element  value  Node  elem  node  nodeA  nodeB  nodeForB  nodeForValue  parent  root  Object  b  Map  elmap  groupsTmp  long  serialVersionUID  int  rank  size  
[BugLab_Argument_Swapping]^return findRoot ( nodeForValue )  == nodeForB;^181^^^^^172^182^return findRoot ( nodeForB )  == nodeForValue;^[CLASS] StandardUnionFind 1 2 Node  [METHOD] apply [RETURN_TYPE] boolean   Object b [VARIABLES] boolean  E  a  aRep  b  bRep  e  elem  element  value  Node  elem  node  nodeA  nodeB  nodeForB  nodeForValue  parent  root  Object  b  Map  elmap  groupsTmp  long  serialVersionUID  int  rank  size  
[BugLab_Wrong_Operator]^return findRoot ( nodeForB )  != nodeForValue;^181^^^^^172^182^return findRoot ( nodeForB )  == nodeForValue;^[CLASS] StandardUnionFind 1 2 Node  [METHOD] apply [RETURN_TYPE] boolean   Object b [VARIABLES] boolean  E  a  aRep  b  bRep  e  elem  element  value  Node  elem  node  nodeA  nodeB  nodeForB  nodeForValue  parent  root  Object  b  Map  elmap  groupsTmp  long  serialVersionUID  int  rank  size  
[BugLab_Argument_Swapping]^return o.apply ( isSameRoot ) ;^188^^^^^187^189^return isSameRoot.apply ( o ) ;^[CLASS] StandardUnionFind 1 2 Node  [METHOD] contains [RETURN_TYPE] boolean   Object o [VARIABLES] boolean  E  a  aRep  b  bRep  e  elem  element  value  Node  elem  node  nodeA  nodeB  nodeForB  nodeForValue  parent  root  Object  o  Map  elmap  groupsTmp  long  serialVersionUID  int  rank  size  
[BugLab_Variable_Misuse]^return 3.apply ( o ) ;^188^^^^^187^189^return isSameRoot.apply ( o ) ;^[CLASS] StandardUnionFind 1 2 Node  [METHOD] contains [RETURN_TYPE] boolean   Object o [VARIABLES] boolean  E  a  aRep  b  bRep  e  elem  element  value  Node  elem  node  nodeA  nodeB  nodeForB  nodeForValue  parent  root  Object  o  Map  elmap  groupsTmp  long  serialVersionUID  int  rank  size  
[BugLab_Argument_Swapping]^return unmodifiableIterator ( filter ( isSameRoot.keySet (  ) .iterator (  ) , elmap )  ) ;^192^193^^^^191^194^return unmodifiableIterator ( filter ( elmap.keySet (  ) .iterator (  ) , isSameRoot )  ) ;^[CLASS] StandardUnionFind 1 2 Node  [METHOD] iterator [RETURN_TYPE] Iterator   [VARIABLES] boolean  E  a  aRep  b  bRep  e  elem  element  value  Map  elmap  groupsTmp  long  serialVersionUID  int  rank  size  Node  elem  node  nodeA  nodeB  nodeForB  nodeForValue  parent  root  
[BugLab_Argument_Swapping]^return findRoot ( value.get ( elmap )  ) .size;^197^^^^^196^198^return findRoot ( elmap.get ( value )  ) .size;^[CLASS] StandardUnionFind 1 2 Node  [METHOD] size [RETURN_TYPE] int   [VARIABLES] boolean  E  a  aRep  b  bRep  e  elem  element  value  Map  elmap  groupsTmp  long  serialVersionUID  int  rank  size  Node  elem  node  nodeA  nodeB  nodeForB  nodeForValue  parent  root  
[BugLab_Variable_Misuse]^return findRoot ( elmap.get ( e )  ) .size;^197^^^^^196^198^return findRoot ( elmap.get ( value )  ) .size;^[CLASS] StandardUnionFind 1 2 Node  [METHOD] size [RETURN_TYPE] int   [VARIABLES] boolean  E  a  aRep  b  bRep  e  elem  element  value  Map  elmap  groupsTmp  long  serialVersionUID  int  rank  size  Node  elem  node  nodeA  nodeB  nodeForB  nodeForValue  parent  root  
[BugLab_Variable_Misuse]^return findRoot ( elmap.get ( element )  ) .size;^197^^^^^196^198^return findRoot ( elmap.get ( value )  ) .size;^[CLASS] StandardUnionFind 1 2 Node  [METHOD] size [RETURN_TYPE] int   [VARIABLES] boolean  E  a  aRep  b  bRep  e  elem  element  value  Map  elmap  groupsTmp  long  serialVersionUID  int  rank  size  Node  elem  node  nodeA  nodeB  nodeForB  nodeForValue  parent  root  
[BugLab_Variable_Misuse]^Node<E> nodeForValue = elmap.get ( elem ) ;^170^^^^^165^175^Node<E> nodeForValue = elmap.get ( value ) ;^[CLASS] 1  [METHOD] size [RETURN_TYPE] int   [VARIABLES] boolean  E  a  aRep  b  bRep  e  elem  element  value  Map  elmap  groupsTmp  long  serialVersionUID  int  rank  size  Node  elem  node  nodeA  nodeB  nodeForB  nodeForValue  parent  root  
[BugLab_Argument_Swapping]^Node<E> nodeForValue = value.get ( elmap ) ;^170^^^^^165^175^Node<E> nodeForValue = elmap.get ( value ) ;^[CLASS] 1  [METHOD] size [RETURN_TYPE] int   [VARIABLES] boolean  E  a  aRep  b  bRep  e  elem  element  value  Map  elmap  groupsTmp  long  serialVersionUID  int  rank  size  Node  elem  node  nodeA  nodeB  nodeForB  nodeForValue  parent  root  
[BugLab_Argument_Swapping]^if  ( Objects.equal ( b, value )  )  {^173^^^^^172^182^if  ( Objects.equal ( value, b )  )  {^[CLASS] 1  [METHOD] apply [RETURN_TYPE] boolean   Object b [VARIABLES] Object  b  Node  nodeForB  nodeForValue  boolean  
[BugLab_Wrong_Literal]^return false;^174^^^^^172^182^return true;^[CLASS] 1  [METHOD] apply [RETURN_TYPE] boolean   Object b [VARIABLES] Object  b  Node  nodeForB  nodeForValue  boolean  
[BugLab_Argument_Swapping]^Node<E> nodeForB = b.get ( elmap ) ;^176^^^^^172^182^Node<E> nodeForB = elmap.get ( b ) ;^[CLASS] 1  [METHOD] apply [RETURN_TYPE] boolean   Object b [VARIABLES] Object  b  Node  nodeForB  nodeForValue  boolean  
[BugLab_Wrong_Operator]^if  ( nodeForB != null )  {^177^^^^^172^182^if  ( nodeForB == null )  {^[CLASS] 1  [METHOD] apply [RETURN_TYPE] boolean   Object b [VARIABLES] Object  b  Node  nodeForB  nodeForValue  boolean  
[BugLab_Wrong_Literal]^return true;^178^^^^^172^182^return false;^[CLASS] 1  [METHOD] apply [RETURN_TYPE] boolean   Object b [VARIABLES] Object  b  Node  nodeForB  nodeForValue  boolean  
[BugLab_Variable_Misuse]^return findRoot ( nodeForB )  == 3;^181^^^^^172^182^return findRoot ( nodeForB )  == nodeForValue;^[CLASS] 1  [METHOD] apply [RETURN_TYPE] boolean   Object b [VARIABLES] Object  b  Node  nodeForB  nodeForValue  boolean  
[BugLab_Argument_Swapping]^return findRoot ( nodeForValue )  == nodeForB;^181^^^^^172^182^return findRoot ( nodeForB )  == nodeForValue;^[CLASS] 1  [METHOD] apply [RETURN_TYPE] boolean   Object b [VARIABLES] Object  b  Node  nodeForB  nodeForValue  boolean  
[BugLab_Wrong_Operator]^return findRoot ( nodeForB )  != nodeForValue;^181^^^^^172^182^return findRoot ( nodeForB )  == nodeForValue;^[CLASS] 1  [METHOD] apply [RETURN_TYPE] boolean   Object b [VARIABLES] Object  b  Node  nodeForB  nodeForValue  boolean  
[BugLab_Variable_Misuse]^return this.apply ( o ) ;^188^^^^^187^189^return isSameRoot.apply ( o ) ;^[CLASS] 2  [METHOD] contains [RETURN_TYPE] boolean   Object o [VARIABLES] boolean  Object  o  
[BugLab_Argument_Swapping]^return o.apply ( isSameRoot ) ;^188^^^^^187^189^return isSameRoot.apply ( o ) ;^[CLASS] 2  [METHOD] contains [RETURN_TYPE] boolean   Object o [VARIABLES] boolean  Object  o  
[BugLab_Argument_Swapping]^return unmodifiableIterator ( filter ( isSameRoot.keySet (  ) .iterator (  ) , elmap )  ) ;^192^193^^^^191^194^return unmodifiableIterator ( filter ( elmap.keySet (  ) .iterator (  ) , isSameRoot )  ) ;^[CLASS] 2  [METHOD] iterator [RETURN_TYPE] Iterator   [VARIABLES] boolean  
[BugLab_Variable_Misuse]^return unmodifiableIterator ( filter ( elmap.keySet (  ) .iterator (  ) , 1 )  ) ;^192^193^^^^191^194^return unmodifiableIterator ( filter ( elmap.keySet (  ) .iterator (  ) , isSameRoot )  ) ;^[CLASS] 2  [METHOD] iterator [RETURN_TYPE] Iterator   [VARIABLES] boolean  
[BugLab_Argument_Swapping]^return findRoot ( value.get ( elmap )  ) .size;^197^^^^^196^198^return findRoot ( elmap.get ( value )  ) .size;^[CLASS] 2  [METHOD] size [RETURN_TYPE] int   [VARIABLES] boolean  
[BugLab_Wrong_Literal]^int rank = 1;^211^^^^^206^216^int rank = 0;^[CLASS] Node  [METHOD] size [RETURN_TYPE] int   [VARIABLES] boolean  
