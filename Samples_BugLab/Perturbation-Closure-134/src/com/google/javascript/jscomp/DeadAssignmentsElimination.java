[buglab_swap_variables]^NodeTraversal.traverse ( root, compiler, this ) ;^54^^^^^51^55^NodeTraversal.traverse ( compiler, root, this ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Node  externs  root  
[buglab_swap_variables]^NodeTraversal.traverse ( compiler,  this ) ;^54^^^^^51^55^NodeTraversal.traverse ( compiler, root, this ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Node  externs  root  
[buglab_swap_variables]^NodeTraversal.traverse (  root, this ) ;^54^^^^^51^55^NodeTraversal.traverse ( compiler, root, this ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Node  externs  root  
[buglab_swap_variables]^liveness = new LiveVariablesAnalysis ( compiler, scope, cfg ) ;^74^^^^^58^78^liveness = new LiveVariablesAnalysis ( cfg, scope, compiler ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] AbstractCompiler  compiler  boolean  Scope  scope  NodeTraversal  t  ControlFlowGraph  cfg  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[buglab_swap_variables]^liveness = new LiveVariablesAnalysis (  scope, compiler ) ;^74^^^^^58^78^liveness = new LiveVariablesAnalysis ( cfg, scope, compiler ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] AbstractCompiler  compiler  boolean  Scope  scope  NodeTraversal  t  ControlFlowGraph  cfg  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[buglab_swap_variables]^liveness = new LiveVariablesAnalysis ( scope, cfg, compiler ) ;^74^^^^^58^78^liveness = new LiveVariablesAnalysis ( cfg, scope, compiler ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] AbstractCompiler  compiler  boolean  Scope  scope  NodeTraversal  t  ControlFlowGraph  cfg  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[buglab_swap_variables]^liveness = new LiveVariablesAnalysis ( cfg,  compiler ) ;^74^^^^^58^78^liveness = new LiveVariablesAnalysis ( cfg, scope, compiler ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] AbstractCompiler  compiler  boolean  Scope  scope  NodeTraversal  t  ControlFlowGraph  cfg  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[buglab_swap_variables]^liveness = new LiveVariablesAnalysis ( cfg, compiler, scope ) ;^74^^^^^58^78^liveness = new LiveVariablesAnalysis ( cfg, scope, compiler ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] AbstractCompiler  compiler  boolean  Scope  scope  NodeTraversal  t  ControlFlowGraph  cfg  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[buglab_swap_variables]^liveness = new LiveVariablesAnalysis ( cfg, scope ) ;^74^^^^^58^78^liveness = new LiveVariablesAnalysis ( cfg, scope, compiler ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] AbstractCompiler  compiler  boolean  Scope  scope  NodeTraversal  t  ControlFlowGraph  cfg  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[buglab_swap_variables]^tryRemoveDeadAssignments ( cfg, t ) ;^76^^^^^58^78^tryRemoveDeadAssignments ( t, cfg ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] AbstractCompiler  compiler  boolean  Scope  scope  NodeTraversal  t  ControlFlowGraph  cfg  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[buglab_swap_variables]^tryRemoveDeadAssignments (  cfg ) ;^76^^^^^58^78^tryRemoveDeadAssignments ( t, cfg ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] AbstractCompiler  compiler  boolean  Scope  scope  NodeTraversal  t  ControlFlowGraph  cfg  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[buglab_swap_variables]^tryRemoveDeadAssignments ( t ) ;^76^^^^^58^78^tryRemoveDeadAssignments ( t, cfg ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] AbstractCompiler  compiler  boolean  Scope  scope  NodeTraversal  t  ControlFlowGraph  cfg  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[buglab_swap_variables]^tryRemoveAssignment ( state, NodeUtil.getConditionExpression ( n ) , t ) ;^115^116^^^^100^130^tryRemoveAssignment ( t, NodeUtil.getConditionExpression ( n ) , state ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveDeadAssignments [RETURN_TYPE] void   NodeTraversal t Node> cfg [VARIABLES] AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  List  nodes  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[buglab_swap_variables]^tryRemoveAssignment (  NodeUtil.getConditionExpression ( n ) , state ) ;^115^116^^^^100^130^tryRemoveAssignment ( t, NodeUtil.getConditionExpression ( n ) , state ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveDeadAssignments [RETURN_TYPE] void   NodeTraversal t Node> cfg [VARIABLES] AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  List  nodes  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[buglab_swap_variables]^tryRemoveAssignment ( n, NodeUtil.getConditionExpression ( t ) , state ) ;^115^116^^^^100^130^tryRemoveAssignment ( t, NodeUtil.getConditionExpression ( n ) , state ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveDeadAssignments [RETURN_TYPE] void   NodeTraversal t Node> cfg [VARIABLES] AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  List  nodes  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[buglab_swap_variables]^tryRemoveAssignment ( t, NodeUtil.getConditionExpression ( state ) , n ) ;^115^116^^^^100^130^tryRemoveAssignment ( t, NodeUtil.getConditionExpression ( n ) , state ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveDeadAssignments [RETURN_TYPE] void   NodeTraversal t Node> cfg [VARIABLES] AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  List  nodes  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[buglab_swap_variables]^tryRemoveAssignment ( t, NodeUtil.getConditionExpression ( n )  ) ;^115^116^^^^100^130^tryRemoveAssignment ( t, NodeUtil.getConditionExpression ( n ) , state ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveDeadAssignments [RETURN_TYPE] void   NodeTraversal t Node> cfg [VARIABLES] AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  List  nodes  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[buglab_swap_variables]^tryRemoveAssignment ( state, n.getFirstChild (  ) , t ) ;^123^^^^^108^138^tryRemoveAssignment ( t, n.getFirstChild (  ) , state ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveDeadAssignments [RETURN_TYPE] void   NodeTraversal t Node> cfg [VARIABLES] AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  List  nodes  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[buglab_swap_variables]^tryRemoveAssignment (  n.getFirstChild (  ) , state ) ;^123^^^^^108^138^tryRemoveAssignment ( t, n.getFirstChild (  ) , state ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveDeadAssignments [RETURN_TYPE] void   NodeTraversal t Node> cfg [VARIABLES] AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  List  nodes  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[buglab_swap_variables]^tryRemoveAssignment ( n, t.getFirstChild (  ) , state ) ;^123^^^^^108^138^tryRemoveAssignment ( t, n.getFirstChild (  ) , state ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveDeadAssignments [RETURN_TYPE] void   NodeTraversal t Node> cfg [VARIABLES] AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  List  nodes  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[buglab_swap_variables]^tryRemoveAssignment ( t.getFirstChild (  ) , state ) ;^123^^^^^108^138^tryRemoveAssignment ( t, n.getFirstChild (  ) , state ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveDeadAssignments [RETURN_TYPE] void   NodeTraversal t Node> cfg [VARIABLES] AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  List  nodes  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[buglab_swap_variables]^tryRemoveAssignment ( t, state.getFirstChild (  ) , n ) ;^123^^^^^108^138^tryRemoveAssignment ( t, n.getFirstChild (  ) , state ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveDeadAssignments [RETURN_TYPE] void   NodeTraversal t Node> cfg [VARIABLES] AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  List  nodes  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[buglab_swap_variables]^tryRemoveAssignment ( t, n.getFirstChild (  )  ) ;^123^^^^^108^138^tryRemoveAssignment ( t, n.getFirstChild (  ) , state ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveDeadAssignments [RETURN_TYPE] void   NodeTraversal t Node> cfg [VARIABLES] AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  List  nodes  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[buglab_swap_variables]^tryRemoveAssignment ( state, NodeUtil.getConditionExpression ( n ) , t ) ;^111^^^^^96^126^tryRemoveAssignment ( t, NodeUtil.getConditionExpression ( n ) , state ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveDeadAssignments [RETURN_TYPE] void   NodeTraversal t Node> cfg [VARIABLES] AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  List  nodes  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[buglab_swap_variables]^tryRemoveAssignment (  NodeUtil.getConditionExpression ( n ) , state ) ;^111^^^^^96^126^tryRemoveAssignment ( t, NodeUtil.getConditionExpression ( n ) , state ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveDeadAssignments [RETURN_TYPE] void   NodeTraversal t Node> cfg [VARIABLES] AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  List  nodes  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[buglab_swap_variables]^tryRemoveAssignment ( t, NodeUtil.getConditionExpression ( state ) , n ) ;^111^^^^^96^126^tryRemoveAssignment ( t, NodeUtil.getConditionExpression ( n ) , state ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveDeadAssignments [RETURN_TYPE] void   NodeTraversal t Node> cfg [VARIABLES] AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  List  nodes  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[buglab_swap_variables]^tryRemoveAssignment ( t, NodeUtil.getConditionExpression ( n )  ) ;^111^^^^^96^126^tryRemoveAssignment ( t, NodeUtil.getConditionExpression ( n ) , state ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveDeadAssignments [RETURN_TYPE] void   NodeTraversal t Node> cfg [VARIABLES] AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  List  nodes  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[buglab_swap_variables]^tryRemoveAssignment ( n, t, state ) ;^129^^^^^114^144^tryRemoveAssignment ( t, n, state ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveDeadAssignments [RETURN_TYPE] void   NodeTraversal t Node> cfg [VARIABLES] AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  List  nodes  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[buglab_swap_variables]^tryRemoveAssignment (  n, state ) ;^129^^^^^114^144^tryRemoveAssignment ( t, n, state ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveDeadAssignments [RETURN_TYPE] void   NodeTraversal t Node> cfg [VARIABLES] AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  List  nodes  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[buglab_swap_variables]^tryRemoveAssignment ( t, state, n ) ;^129^^^^^114^144^tryRemoveAssignment ( t, n, state ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveDeadAssignments [RETURN_TYPE] void   NodeTraversal t Node> cfg [VARIABLES] AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  List  nodes  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[buglab_swap_variables]^tryRemoveAssignment ( t,  state ) ;^129^^^^^114^144^tryRemoveAssignment ( t, n, state ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveDeadAssignments [RETURN_TYPE] void   NodeTraversal t Node> cfg [VARIABLES] AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  List  nodes  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[buglab_swap_variables]^tryRemoveAssignment ( t, n ) ;^129^^^^^114^144^tryRemoveAssignment ( t, n, state ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveDeadAssignments [RETURN_TYPE] void   NodeTraversal t Node> cfg [VARIABLES] AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  List  nodes  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[buglab_swap_variables]^tryRemoveAssignment ( state, n, n, t ) ;^135^^^^^133^136^tryRemoveAssignment ( t, n, n, state ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  NodeTraversal  t  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[buglab_swap_variables]^tryRemoveAssignment (  n, n, state ) ;^135^^^^^133^136^tryRemoveAssignment ( t, n, n, state ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  NodeTraversal  t  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[buglab_swap_variables]^tryRemoveAssignment ( n, t, n, state ) ;^135^^^^^133^136^tryRemoveAssignment ( t, n, n, state ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  NodeTraversal  t  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[buglab_swap_variables]^tryRemoveAssignment ( t,  n, state ) ;^135^^^^^133^136^tryRemoveAssignment ( t, n, n, state ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  NodeTraversal  t  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[buglab_swap_variables]^tryRemoveAssignment ( t, state, n, n ) ;^135^^^^^133^136^tryRemoveAssignment ( t, n, n, state ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  NodeTraversal  t  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[buglab_swap_variables]^tryRemoveAssignment ( t, n, n ) ;^135^^^^^133^136^tryRemoveAssignment ( t, n, n, state ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  NodeTraversal  t  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[buglab_swap_variables]^tryRemoveAssignment ( state, c, exprRoot, t ) ;^229^^^^^214^244^tryRemoveAssignment ( t, c, exprRoot, state ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[buglab_swap_variables]^tryRemoveAssignment (  c, exprRoot, state ) ;^229^^^^^214^244^tryRemoveAssignment ( t, c, exprRoot, state ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[buglab_swap_variables]^tryRemoveAssignment ( t, exprRoot, c, state ) ;^229^^^^^214^244^tryRemoveAssignment ( t, c, exprRoot, state ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[buglab_swap_variables]^tryRemoveAssignment ( t,  exprRoot, state ) ;^229^^^^^214^244^tryRemoveAssignment ( t, c, exprRoot, state ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[buglab_swap_variables]^tryRemoveAssignment ( t, c,  state ) ;^229^^^^^214^244^tryRemoveAssignment ( t, c, exprRoot, state ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[buglab_swap_variables]^tryRemoveAssignment ( t, c, state, exprRoot ) ;^229^^^^^214^244^tryRemoveAssignment ( t, c, exprRoot, state ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[buglab_swap_variables]^tryRemoveAssignment ( t, c, exprRoot ) ;^229^^^^^214^244^tryRemoveAssignment ( t, c, exprRoot, state ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[buglab_swap_variables]^tryRemoveAssignment ( t, state, exprRoot, c ) ;^229^^^^^214^244^tryRemoveAssignment ( t, c, exprRoot, state ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[buglab_swap_variables]^tryRemoveAssignment ( c, t, exprRoot, state ) ;^229^^^^^214^244^tryRemoveAssignment ( t, c, exprRoot, state ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[buglab_swap_variables]^tryRemoveAssignment ( rhs, t, exprRoot, state ) ;^162^^^^^147^177^tryRemoveAssignment ( t, rhs, exprRoot, state ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[buglab_swap_variables]^tryRemoveAssignment (  rhs, exprRoot, state ) ;^162^^^^^147^177^tryRemoveAssignment ( t, rhs, exprRoot, state ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[buglab_swap_variables]^tryRemoveAssignment ( t, exprRoot, rhs, state ) ;^162^^^^^147^177^tryRemoveAssignment ( t, rhs, exprRoot, state ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[buglab_swap_variables]^tryRemoveAssignment ( t,  exprRoot, state ) ;^162^^^^^147^177^tryRemoveAssignment ( t, rhs, exprRoot, state ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[buglab_swap_variables]^tryRemoveAssignment ( t, rhs,  state ) ;^162^^^^^147^177^tryRemoveAssignment ( t, rhs, exprRoot, state ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[buglab_swap_variables]^tryRemoveAssignment ( t, state, exprRoot, rhs ) ;^162^^^^^147^177^tryRemoveAssignment ( t, rhs, exprRoot, state ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[buglab_swap_variables]^tryRemoveAssignment ( t, rhs, exprRoot ) ;^162^^^^^147^177^tryRemoveAssignment ( t, rhs, exprRoot, state ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[buglab_swap_variables]^if  ( !scope.isDeclared (  false )  )  {^171^^^^^156^186^if  ( !scope.isDeclared ( name, false )  )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[buglab_swap_variables]^if  ( var.getEscapedLocals (  ) .contains ( liveness )  )  {^175^^^^^160^190^if  ( liveness.getEscapedLocals (  ) .contains ( var )  )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[buglab_swap_variables]^if  ( var.getOut (  ) .isLive ( state )  )  {^178^^^^^163^193^if  ( state.getOut (  ) .isLive ( var )  )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[buglab_swap_variables]^} else if ( parent.getType (  )  == Token.COMMA && n != n.getLastChild (  )  )  {^207^^^^^192^222^} else if ( n.getType (  )  == Token.COMMA && n != parent.getLastChild (  )  )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[buglab_swap_variables]^} else if  ( n.getType (  )  == Token.FOR && !NodeUtil.isForIn ( parent )  && NodeUtil.getConditionExpression ( parent )  != parent )  {^209^210^^^^194^224^} else if  ( parent.getType (  )  == Token.FOR && !NodeUtil.isForIn ( parent )  && NodeUtil.getConditionExpression ( parent )  != n )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[buglab_swap_variables]^parent.replaceChild (  new Node ( Token.EMPTY )  ) ;^211^^^^^209^216^parent.replaceChild ( n, new Node ( Token.EMPTY )  ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[buglab_swap_variables]^parent.replaceChild (  new Node ( Token.EMPTY )  ) ;^211^^^^^196^226^parent.replaceChild ( n, new Node ( Token.EMPTY )  ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[buglab_swap_variables]^parent.replaceChild (  new Node ( Token.VOID, Node.newNumber ( 0 )  )  ) ;^206^^^^^191^221^parent.replaceChild ( n, new Node ( Token.VOID, Node.newNumber ( 0 )  )  ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[buglab_swap_variables]^parent.replaceChild ( n, new Node ( Token. Node.newNumber ( 0 )  )  ) ;^206^^^^^191^221^parent.replaceChild ( n, new Node ( Token.VOID, Node.newNumber ( 0 )  )  ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[buglab_swap_variables]^Node op = lhsew Node ( NodeUtil.getOpFromAssignmentOp ( n ) , n, rhs ) ;^202^^^^^187^217^Node op = new Node ( NodeUtil.getOpFromAssignmentOp ( n ) , lhs, rhs ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[buglab_swap_variables]^Node op = new Node ( NodeUtil.getOpFromAssignmentOp ( n ) ,  rhs ) ;^202^^^^^187^217^Node op = new Node ( NodeUtil.getOpFromAssignmentOp ( n ) , lhs, rhs ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[buglab_swap_variables]^Node op = new Node ( NodeUtil.getOpFromAssignmentOp ( n ) , rhs, lhs ) ;^202^^^^^187^217^Node op = new Node ( NodeUtil.getOpFromAssignmentOp ( n ) , lhs, rhs ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[buglab_swap_variables]^Node op = new Node ( NodeUtil.getOpFromAssignmentOp ( n ) , lhs ) ;^202^^^^^187^217^Node op = new Node ( NodeUtil.getOpFromAssignmentOp ( n ) , lhs, rhs ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[buglab_swap_variables]^Node op = rhsew Node ( NodeUtil.getOpFromAssignmentOp ( n ) , lhs, n ) ;^202^^^^^187^217^Node op = new Node ( NodeUtil.getOpFromAssignmentOp ( n ) , lhs, rhs ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[buglab_swap_variables]^parent.replaceChild ( op, n ) ;^203^^^^^188^218^parent.replaceChild ( n, op ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[buglab_swap_variables]^parent.replaceChild (  op ) ;^203^^^^^188^218^parent.replaceChild ( n, op ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[buglab_swap_variables]^parent.replaceChild ( n ) ;^203^^^^^188^218^parent.replaceChild ( n, op ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[buglab_swap_variables]^n.getParent (  ) .replaceChild ( rhs, n ) ;^198^^^^^183^213^n.getParent (  ) .replaceChild ( n, rhs ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[buglab_swap_variables]^n.getParent (  ) .replaceChild (  rhs ) ;^198^^^^^183^213^n.getParent (  ) .replaceChild ( n, rhs ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[buglab_swap_variables]^n.getParent (  ) .replaceChild ( n ) ;^198^^^^^183^213^n.getParent (  ) .replaceChild ( n, rhs ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[buglab_swap_variables]^Var var = name.getVar ( scope ) ;^174^^^^^159^189^Var var = scope.getVar ( name ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[buglab_swap_variables]^tryRemoveAssignment ( state, rhs, exprRoot, t ) ;^162^^^^^147^177^tryRemoveAssignment ( t, rhs, exprRoot, state ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[buglab_swap_variables]^if  ( var.getIn (  ) .isLive ( state )  && isVariableStillLiveWithinExpression ( n, exprRoot, var.name )  )  {^181^182^^^^166^196^if  ( state.getIn (  ) .isLive ( var )  && isVariableStillLiveWithinExpression ( n, exprRoot, var.name )  )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[buglab_swap_variables]^if  ( state.getIn (  ) .isLive ( var )  && isVariableStillLiveWithinExpression ( n, exprRoot.name )  )  {^181^182^^^^166^196^if  ( state.getIn (  ) .isLive ( var )  && isVariableStillLiveWithinExpression ( n, exprRoot, var.name )  )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[buglab_swap_variables]^for  ( Node n = c.getFirstChild (  ) ; c != null; )  {^226^^^^^211^241^for  ( Node c = n.getFirstChild (  ) ; c != null; )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[buglab_swap_variables]^tryRemoveAssignment ( exprRoot, c, t, state ) ;^229^^^^^214^244^tryRemoveAssignment ( t, c, exprRoot, state ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[buglab_swap_variables]^tryRemoveAssignment ( exprRoot, rhs, t, state ) ;^162^^^^^147^177^tryRemoveAssignment ( t, rhs, exprRoot, state ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[buglab_swap_variables]^while  ( exprRoot != n )  {^254^^^^^252^271^while  ( n != exprRoot )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] isVariableStillLiveWithinExpression [RETURN_TYPE] boolean   Node n Node exprRoot String variable [VARIABLES] AbstractCompiler  compiler  String  variable  boolean  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Node  exprRoot  n  sibling  
[buglab_swap_variables]^VariableLiveness state = readVariableBeforeKilling ( variable, sibling ) ;^258^^^^^252^271^VariableLiveness state = readVariableBeforeKilling ( sibling, variable ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] isVariableStillLiveWithinExpression [RETURN_TYPE] boolean   Node n Node exprRoot String variable [VARIABLES] AbstractCompiler  compiler  String  variable  boolean  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Node  exprRoot  n  sibling  
[buglab_swap_variables]^VariableLiveness state = readVariableBeforeKilling (  variable ) ;^258^^^^^252^271^VariableLiveness state = readVariableBeforeKilling ( sibling, variable ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] isVariableStillLiveWithinExpression [RETURN_TYPE] boolean   Node n Node exprRoot String variable [VARIABLES] AbstractCompiler  compiler  String  variable  boolean  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Node  exprRoot  n  sibling  
[buglab_swap_variables]^VariableLiveness state = readVariableBeforeKilling ( sibling ) ;^258^^^^^252^271^VariableLiveness state = readVariableBeforeKilling ( sibling, variable ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] isVariableStillLiveWithinExpression [RETURN_TYPE] boolean   Node n Node exprRoot String variable [VARIABLES] AbstractCompiler  compiler  String  variable  boolean  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Node  exprRoot  n  sibling  
[buglab_swap_variables]^for ( Node n = sibling.getNext (  ) ; sibling != null;^255^^^^^252^271^for ( Node sibling = n.getNext (  ) ; sibling != null;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] isVariableStillLiveWithinExpression [RETURN_TYPE] boolean   Node n Node exprRoot String variable [VARIABLES] AbstractCompiler  compiler  String  variable  boolean  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Node  exprRoot  n  sibling  
[buglab_swap_variables]^if  ( NodeUtil.isLhs (  n.getParent (  )  )  )  {^290^^^^^288^306^if  ( NodeUtil.isLhs ( n, n.getParent (  )  )  )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] readVariableBeforeKilling [RETURN_TYPE] DeadAssignmentsElimination$VariableLiveness   Node n String variable [VARIABLES] AbstractCompiler  compiler  String  variable  boolean  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Node  child  n  
[buglab_swap_variables]^if  ( NodeUtil.isName ( variable )  && n.equals ( n.getString (  )  )  )  {^289^^^^^288^306^if  ( NodeUtil.isName ( n )  && variable.equals ( n.getString (  )  )  )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] readVariableBeforeKilling [RETURN_TYPE] DeadAssignmentsElimination$VariableLiveness   Node n String variable [VARIABLES] AbstractCompiler  compiler  String  variable  boolean  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Node  child  n  
[buglab_swap_variables]^VariableLiveness state = readVariableBeforeKilling ( variable, child ) ;^299^^^^^288^306^VariableLiveness state = readVariableBeforeKilling ( child, variable ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] readVariableBeforeKilling [RETURN_TYPE] DeadAssignmentsElimination$VariableLiveness   Node n String variable [VARIABLES] AbstractCompiler  compiler  String  variable  boolean  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Node  child  n  
[buglab_swap_variables]^VariableLiveness state = readVariableBeforeKilling (  variable ) ;^299^^^^^288^306^VariableLiveness state = readVariableBeforeKilling ( child, variable ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] readVariableBeforeKilling [RETURN_TYPE] DeadAssignmentsElimination$VariableLiveness   Node n String variable [VARIABLES] AbstractCompiler  compiler  String  variable  boolean  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Node  child  n  
[buglab_swap_variables]^VariableLiveness state = readVariableBeforeKilling ( child ) ;^299^^^^^288^306^VariableLiveness state = readVariableBeforeKilling ( child, variable ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] readVariableBeforeKilling [RETURN_TYPE] DeadAssignmentsElimination$VariableLiveness   Node n String variable [VARIABLES] AbstractCompiler  compiler  String  variable  boolean  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Node  child  n  
[buglab_swap_variables]^for  ( Node n = child.getFirstChild (  ) ;^296^^^^^288^306^for  ( Node child = n.getFirstChild (  ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] readVariableBeforeKilling [RETURN_TYPE] DeadAssignmentsElimination$VariableLiveness   Node n String variable [VARIABLES] AbstractCompiler  compiler  String  variable  boolean  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Node  child  n  
