[BugLab_Variable_Misuse]^Preconditions.checkNotNull ( root ) ;^52^^^^^51^55^Preconditions.checkNotNull ( externs ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Node  externs  root  
[BugLab_Variable_Misuse]^Preconditions.checkNotNull ( externs ) ;^53^^^^^51^55^Preconditions.checkNotNull ( root ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Node  externs  root  
[BugLab_Variable_Misuse]^NodeTraversal.traverse ( compiler, externs, this ) ;^54^^^^^51^55^NodeTraversal.traverse ( compiler, root, this ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Node  externs  root  
[BugLab_Argument_Swapping]^NodeTraversal.traverse ( root, compiler, this ) ;^54^^^^^51^55^NodeTraversal.traverse ( compiler, root, this ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Node  externs  root  
[BugLab_Variable_Misuse]^liveness = new LiveVariablesAnalysis ( null, scope, compiler ) ;^74^^^^^58^78^liveness = new LiveVariablesAnalysis ( cfg, scope, compiler ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] AbstractCompiler  compiler  boolean  Scope  scope  NodeTraversal  t  ControlFlowGraph  cfg  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[BugLab_Argument_Swapping]^liveness = new LiveVariablesAnalysis ( scope, cfg, compiler ) ;^74^^^^^58^78^liveness = new LiveVariablesAnalysis ( cfg, scope, compiler ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] AbstractCompiler  compiler  boolean  Scope  scope  NodeTraversal  t  ControlFlowGraph  cfg  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[BugLab_Argument_Swapping]^liveness = new LiveVariablesAnalysis ( cfg, compiler, scope ) ;^74^^^^^58^78^liveness = new LiveVariablesAnalysis ( cfg, scope, compiler ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] AbstractCompiler  compiler  boolean  Scope  scope  NodeTraversal  t  ControlFlowGraph  cfg  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[BugLab_Argument_Swapping]^liveness = new LiveVariablesAnalysis ( compiler, scope, cfg ) ;^74^^^^^58^78^liveness = new LiveVariablesAnalysis ( cfg, scope, compiler ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] AbstractCompiler  compiler  boolean  Scope  scope  NodeTraversal  t  ControlFlowGraph  cfg  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[BugLab_Argument_Swapping]^tryRemoveDeadAssignments ( cfg, t ) ;^76^^^^^58^78^tryRemoveDeadAssignments ( t, cfg ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] AbstractCompiler  compiler  boolean  Scope  scope  NodeTraversal  t  ControlFlowGraph  cfg  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[BugLab_Wrong_Operator]^if  ( n != null )  {^104^^^^^89^119^if  ( n == null )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveDeadAssignments [RETURN_TYPE] void   NodeTraversal t Node> cfg [VARIABLES] AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  List  nodes  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[BugLab_Argument_Swapping]^tryRemoveAssignment ( state, NodeUtil.getConditionExpression ( n ) , t ) ;^115^116^^^^100^130^tryRemoveAssignment ( t, NodeUtil.getConditionExpression ( n ) , state ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveDeadAssignments [RETURN_TYPE] void   NodeTraversal t Node> cfg [VARIABLES] AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  List  nodes  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[BugLab_Argument_Swapping]^tryRemoveAssignment ( t, NodeUtil.getConditionExpression ( state ) , n ) ;^115^116^^^^100^130^tryRemoveAssignment ( t, NodeUtil.getConditionExpression ( n ) , state ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveDeadAssignments [RETURN_TYPE] void   NodeTraversal t Node> cfg [VARIABLES] AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  List  nodes  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[BugLab_Argument_Swapping]^tryRemoveAssignment ( state, n.getFirstChild (  ) , t ) ;^123^^^^^108^138^tryRemoveAssignment ( t, n.getFirstChild (  ) , state ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveDeadAssignments [RETURN_TYPE] void   NodeTraversal t Node> cfg [VARIABLES] AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  List  nodes  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[BugLab_Argument_Swapping]^tryRemoveAssignment ( n, t.getFirstChild (  ) , state ) ;^123^^^^^108^138^tryRemoveAssignment ( t, n.getFirstChild (  ) , state ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveDeadAssignments [RETURN_TYPE] void   NodeTraversal t Node> cfg [VARIABLES] AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  List  nodes  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[BugLab_Argument_Swapping]^tryRemoveAssignment ( t, state.getFirstChild (  ) , n ) ;^123^^^^^108^138^tryRemoveAssignment ( t, n.getFirstChild (  ) , state ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveDeadAssignments [RETURN_TYPE] void   NodeTraversal t Node> cfg [VARIABLES] AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  List  nodes  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[BugLab_Argument_Swapping]^tryRemoveAssignment ( n, NodeUtil.getConditionExpression ( t ) , state ) ;^111^^^^^96^126^tryRemoveAssignment ( t, NodeUtil.getConditionExpression ( n ) , state ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveDeadAssignments [RETURN_TYPE] void   NodeTraversal t Node> cfg [VARIABLES] AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  List  nodes  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[BugLab_Argument_Swapping]^tryRemoveAssignment ( t, NodeUtil.getConditionExpression ( state ) , n ) ;^111^^^^^96^126^tryRemoveAssignment ( t, NodeUtil.getConditionExpression ( n ) , state ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveDeadAssignments [RETURN_TYPE] void   NodeTraversal t Node> cfg [VARIABLES] AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  List  nodes  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[BugLab_Variable_Misuse]^tryRemoveAssignment ( t, n.getFirstChild (  ) , this ) ;^123^^^^^108^138^tryRemoveAssignment ( t, n.getFirstChild (  ) , state ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveDeadAssignments [RETURN_TYPE] void   NodeTraversal t Node> cfg [VARIABLES] AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  List  nodes  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[BugLab_Argument_Swapping]^tryRemoveAssignment ( n, t, state ) ;^129^^^^^114^144^tryRemoveAssignment ( t, n, state ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveDeadAssignments [RETURN_TYPE] void   NodeTraversal t Node> cfg [VARIABLES] AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  List  nodes  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[BugLab_Argument_Swapping]^tryRemoveAssignment ( t, state, n ) ;^129^^^^^114^144^tryRemoveAssignment ( t, n, state ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveDeadAssignments [RETURN_TYPE] void   NodeTraversal t Node> cfg [VARIABLES] AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  List  nodes  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[BugLab_Argument_Swapping]^tryRemoveAssignment ( state, n, t ) ;^129^^^^^114^144^tryRemoveAssignment ( t, n, state ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveDeadAssignments [RETURN_TYPE] void   NodeTraversal t Node> cfg [VARIABLES] AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  List  nodes  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[BugLab_Argument_Swapping]^tryRemoveAssignment ( n, t, n, state ) ;^135^^^^^133^136^tryRemoveAssignment ( t, n, n, state ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  NodeTraversal  t  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[BugLab_Argument_Swapping]^tryRemoveAssignment ( t, state, n, n ) ;^135^^^^^133^136^tryRemoveAssignment ( t, n, n, state ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  NodeTraversal  t  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[BugLab_Variable_Misuse]^Node parent = op.getParent (  ) ;^151^^^^^136^166^Node parent = n.getParent (  ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[BugLab_Wrong_Operator]^if  ( NodeUtil.isAssignmentOp ( n )  && n.getType (  )  == Token.INC || n.getType (  )  == Token.DEC )  {^153^154^^^^138^168^if  ( NodeUtil.isAssignmentOp ( n )  || n.getType (  )  == Token.INC || n.getType (  )  == Token.DEC )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[BugLab_Wrong_Operator]^if  ( NodeUtil.isAssignmentOp ( n )  || n.getType (  )  != Token.INC || n.getType (  )  == Token.DEC )  {^153^154^^^^138^168^if  ( NodeUtil.isAssignmentOp ( n )  || n.getType (  )  == Token.INC || n.getType (  )  == Token.DEC )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[BugLab_Wrong_Operator]^if  ( NodeUtil.isAssignmentOp ( n )  || n.getType (  )  >= Token.INC || n.getType (  )  == Token.DEC )  {^153^154^^^^138^168^if  ( NodeUtil.isAssignmentOp ( n )  || n.getType (  )  == Token.INC || n.getType (  )  == Token.DEC )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[BugLab_Wrong_Operator]^if  ( NodeUtil.isAssignmentOp ( n )  || n.getType (  )  <= Token.INC || n.getType (  )  == Token.DEC )  {^153^154^^^^138^168^if  ( NodeUtil.isAssignmentOp ( n )  || n.getType (  )  == Token.INC || n.getType (  )  == Token.DEC )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[BugLab_Wrong_Operator]^if  ( NodeUtil.isAssignmentOp ( n )  || n.getType (  )  > Token.INC || n.getType (  )  == Token.DEC )  {^153^154^^^^138^168^if  ( NodeUtil.isAssignmentOp ( n )  || n.getType (  )  == Token.INC || n.getType (  )  == Token.DEC )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[BugLab_Variable_Misuse]^if  ( !ControlFlowGraph.isEnteringNewCfgNode ( rhs )  )  {^228^^^^^213^243^if  ( !ControlFlowGraph.isEnteringNewCfgNode ( c )  )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[BugLab_Variable_Misuse]^tryRemoveAssignment ( t, c, rhs, state ) ;^229^^^^^214^244^tryRemoveAssignment ( t, c, exprRoot, state ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[BugLab_Argument_Swapping]^tryRemoveAssignment ( state, c, exprRoot, t ) ;^229^^^^^214^244^tryRemoveAssignment ( t, c, exprRoot, state ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[BugLab_Argument_Swapping]^tryRemoveAssignment ( t, exprRoot, c, state ) ;^229^^^^^214^244^tryRemoveAssignment ( t, c, exprRoot, state ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[BugLab_Argument_Swapping]^tryRemoveAssignment ( t, c, state, exprRoot ) ;^229^^^^^214^244^tryRemoveAssignment ( t, c, exprRoot, state ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[BugLab_Variable_Misuse]^for  ( Node op = n.getFirstChild (  ) ; c != null; )  {^226^^^^^211^241^for  ( Node c = n.getFirstChild (  ) ; c != null; )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[BugLab_Wrong_Operator]^for  ( Node c = n.getFirstChild (  ) ; c == null; )  {^226^^^^^211^241^for  ( Node c = n.getFirstChild (  ) ; c != null; )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[BugLab_Variable_Misuse]^tryRemoveAssignment ( t, rhs, exprRoot, state ) ;^229^^^^^214^244^tryRemoveAssignment ( t, c, exprRoot, state ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[BugLab_Argument_Swapping]^tryRemoveAssignment ( c, t, exprRoot, state ) ;^229^^^^^214^244^tryRemoveAssignment ( t, c, exprRoot, state ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[BugLab_Argument_Swapping]^tryRemoveAssignment ( t, state, exprRoot, c ) ;^229^^^^^214^244^tryRemoveAssignment ( t, c, exprRoot, state ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[BugLab_Variable_Misuse]^Node next = rhs.getNext (  ) ;^227^^^^^212^242^Node next = c.getNext (  ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[BugLab_Variable_Misuse]^Node next = parent.getNext (  ) ;^227^^^^^212^242^Node next = c.getNext (  ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[BugLab_Variable_Misuse]^if  ( !ControlFlowGraph.isEnteringNewCfgNode ( op )  )  {^228^^^^^213^243^if  ( !ControlFlowGraph.isEnteringNewCfgNode ( c )  )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[BugLab_Variable_Misuse]^tryRemoveAssignment ( t, parent, exprRoot, state ) ;^229^^^^^214^244^tryRemoveAssignment ( t, c, exprRoot, state ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[BugLab_Variable_Misuse]^tryRemoveAssignment ( t, c, op, state ) ;^229^^^^^214^244^tryRemoveAssignment ( t, c, exprRoot, state ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[BugLab_Variable_Misuse]^c = parent;^231^^^^^216^246^c = next;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[BugLab_Variable_Misuse]^for  ( Node c = parent.getFirstChild (  ) ; c != null; )  {^226^^^^^211^241^for  ( Node c = n.getFirstChild (  ) ; c != null; )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[BugLab_Variable_Misuse]^for  ( Node c = rhs.getFirstChild (  ) ; c != null; )  {^226^^^^^211^241^for  ( Node c = n.getFirstChild (  ) ; c != null; )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[BugLab_Argument_Swapping]^tryRemoveAssignment ( exprRoot, c, t, state ) ;^229^^^^^214^244^tryRemoveAssignment ( t, c, exprRoot, state ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[BugLab_Variable_Misuse]^if  ( parent != null )  {^161^^^^^146^176^if  ( rhs != null )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[BugLab_Wrong_Operator]^if  ( rhs == null )  {^161^^^^^146^176^if  ( rhs != null )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[BugLab_Variable_Misuse]^rhs = op.getNext (  ) ;^163^^^^^148^178^rhs = lhs.getNext (  ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[BugLab_Variable_Misuse]^tryRemoveAssignment ( t, parent, exprRoot, state ) ;^162^^^^^147^177^tryRemoveAssignment ( t, rhs, exprRoot, state ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[BugLab_Variable_Misuse]^tryRemoveAssignment ( t, rhs, parent, state ) ;^162^^^^^147^177^tryRemoveAssignment ( t, rhs, exprRoot, state ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[BugLab_Argument_Swapping]^tryRemoveAssignment ( exprRoot, rhs, t, state ) ;^162^^^^^147^177^tryRemoveAssignment ( t, rhs, exprRoot, state ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[BugLab_Argument_Swapping]^tryRemoveAssignment ( t, state, exprRoot, rhs ) ;^162^^^^^147^177^tryRemoveAssignment ( t, rhs, exprRoot, state ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[BugLab_Argument_Swapping]^tryRemoveAssignment ( t, rhs, state, exprRoot ) ;^162^^^^^147^177^tryRemoveAssignment ( t, rhs, exprRoot, state ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[BugLab_Variable_Misuse]^if  ( !NodeUtil.isName ( rhs )  )  {^167^^^^^152^182^if  ( !NodeUtil.isName ( lhs )  )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[BugLab_Wrong_Literal]^if  ( !scope.isDeclared ( name, true )  )  {^171^^^^^156^186^if  ( !scope.isDeclared ( name, false )  )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[BugLab_Argument_Swapping]^if  ( var.getEscapedLocals (  ) .contains ( liveness )  )  {^175^^^^^160^190^if  ( liveness.getEscapedLocals (  ) .contains ( var )  )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[BugLab_Argument_Swapping]^if  ( var.getOut (  ) .isLive ( state )  )  {^178^^^^^163^193^if  ( state.getOut (  ) .isLive ( var )  )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[BugLab_Wrong_Operator]^if  ( state.getIn (  ) .isLive ( var )  || isVariableStillLiveWithinExpression ( n, exprRoot, var.name )  )  {^181^182^^^^166^196^if  ( state.getIn (  ) .isLive ( var )  && isVariableStillLiveWithinExpression ( n, exprRoot, var.name )  )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[BugLab_Variable_Misuse]^if  ( NodeUtil.isAssign ( rhs )  )  {^196^^^^^181^211^if  ( NodeUtil.isAssign ( n )  )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[BugLab_Variable_Misuse]^} else if  ( NodeUtil.isAssignmentOp ( parent )  )  {^199^^^^^184^214^} else if  ( NodeUtil.isAssignmentOp ( n )  )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[BugLab_Wrong_Operator]^} else if  ( n.getType (  )  == Token.INC && n.getType (  )  == Token.DEC )  {^204^^^^^189^219^} else if  ( n.getType (  )  == Token.INC || n.getType (  )  == Token.DEC )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[BugLab_Wrong_Operator]^} else if  ( n.getType (  )  <= Token.INC || n.getType (  )  == Token.DEC )  {^204^^^^^189^219^} else if  ( n.getType (  )  == Token.INC || n.getType (  )  == Token.DEC )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[BugLab_Wrong_Operator]^} else if  ( n.getType (  )  != Token.INC || n.getType (  )  == Token.DEC )  {^204^^^^^189^219^} else if  ( n.getType (  )  == Token.INC || n.getType (  )  == Token.DEC )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[BugLab_Wrong_Literal]^Preconditions.checkState ( true, "Unknown statement" ) ;^219^^^^^204^220^Preconditions.checkState ( false, "Unknown statement" ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[BugLab_Variable_Misuse]^if  ( NodeUtil.isExpressionNode ( op )  )  {^205^^^^^190^220^if  ( NodeUtil.isExpressionNode ( parent )  )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[BugLab_Argument_Swapping]^} else if ( parent.getType (  )  == Token.COMMA && n != n.getLastChild (  )  )  {^207^^^^^192^222^} else if ( n.getType (  )  == Token.COMMA && n != parent.getLastChild (  )  )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[BugLab_Wrong_Operator]^} else if ( n.getType (  )  == Token.COMMA || n != parent.getLastChild (  )  )  {^207^^^^^192^222^} else if ( n.getType (  )  == Token.COMMA && n != parent.getLastChild (  )  )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[BugLab_Wrong_Operator]^} else if ( n.getType (  )  <= Token.COMMA && n != parent.getLastChild (  )  )  {^207^^^^^192^222^} else if ( n.getType (  )  == Token.COMMA && n != parent.getLastChild (  )  )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[BugLab_Wrong_Operator]^} else if ( n.getType (  )  == Token.COMMA && n == parent.getLastChild (  )  )  {^207^^^^^192^222^} else if ( n.getType (  )  == Token.COMMA && n != parent.getLastChild (  )  )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[BugLab_Wrong_Operator]^} else if ( n.getType (  )  >= Token.COMMA && n != parent.getLastChild (  )  )  {^207^^^^^192^222^} else if ( n.getType (  )  == Token.COMMA && n != parent.getLastChild (  )  )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[BugLab_Variable_Misuse]^} else if  ( rhs.getType (  )  == Token.FOR && !NodeUtil.isForIn ( parent )  && NodeUtil.getConditionExpression ( parent )  != n )  {^209^210^^^^194^224^} else if  ( parent.getType (  )  == Token.FOR && !NodeUtil.isForIn ( parent )  && NodeUtil.getConditionExpression ( parent )  != n )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[BugLab_Variable_Misuse]^} else if  ( parent.getType (  )  == Token.FOR && !NodeUtil.isForIn ( parent )  && NodeUtil.getConditionExpression ( parent )  != rhs )  {^209^210^^^^194^224^} else if  ( parent.getType (  )  == Token.FOR && !NodeUtil.isForIn ( parent )  && NodeUtil.getConditionExpression ( parent )  != n )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[BugLab_Argument_Swapping]^} else if  ( n.getType (  )  == Token.FOR && !NodeUtil.isForIn ( parent )  && NodeUtil.getConditionExpression ( parent )  != parent )  {^209^210^^^^194^224^} else if  ( parent.getType (  )  == Token.FOR && !NodeUtil.isForIn ( parent )  && NodeUtil.getConditionExpression ( parent )  != n )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[BugLab_Wrong_Operator]^} else if  ( parent.getType (  )  == Token.FOR || !NodeUtil.isForIn ( parent )  && NodeUtil.getConditionExpression ( parent )  != n )  {^209^210^^^^194^224^} else if  ( parent.getType (  )  == Token.FOR && !NodeUtil.isForIn ( parent )  && NodeUtil.getConditionExpression ( parent )  != n )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[BugLab_Wrong_Operator]^} else if  ( parent.getType (  )  >= Token.FOR && !NodeUtil.isForIn ( parent )  && NodeUtil.getConditionExpression ( parent )  != n )  {^209^210^^^^194^224^} else if  ( parent.getType (  )  == Token.FOR && !NodeUtil.isForIn ( parent )  && NodeUtil.getConditionExpression ( parent )  != n )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[BugLab_Wrong_Operator]^} else if  ( parent.getType (  )  == Token.FOR && !NodeUtil.isForIn ( parent )  && NodeUtil.getConditionExpression ( parent )  >= n )  {^209^210^^^^194^224^} else if  ( parent.getType (  )  == Token.FOR && !NodeUtil.isForIn ( parent )  && NodeUtil.getConditionExpression ( parent )  != n )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[BugLab_Variable_Misuse]^parent.replaceChild ( rhs, new Node ( Token.EMPTY )  ) ;^211^^^^^209^216^parent.replaceChild ( n, new Node ( Token.EMPTY )  ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[BugLab_Variable_Misuse]^parent.replaceChild ( n, new Node ( Token.1 )  ) ;^211^^^^^196^226^parent.replaceChild ( n, new Node ( Token.EMPTY )  ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[BugLab_Variable_Misuse]^} else if  ( op.getType (  )  == Token.FOR && !NodeUtil.isForIn ( parent )  && NodeUtil.getConditionExpression ( parent )  != n )  {^209^210^^^^194^224^} else if  ( parent.getType (  )  == Token.FOR && !NodeUtil.isForIn ( parent )  && NodeUtil.getConditionExpression ( parent )  != n )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[BugLab_Variable_Misuse]^NodeUtil.getConditionExpression ( rhs )  != n )  {^210^^^^^195^225^NodeUtil.getConditionExpression ( parent )  != n )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[BugLab_Variable_Misuse]^parent.replaceChild ( rhs, new Node ( Token.EMPTY )  ) ;^211^^^^^196^226^parent.replaceChild ( n, new Node ( Token.EMPTY )  ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[BugLab_Variable_Misuse]^parent.removeChild ( rhs ) ;^208^^^^^193^223^parent.removeChild ( n ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[BugLab_Wrong_Operator]^} else if  ( parent.getType (  )  <= Token.FOR && !NodeUtil.isForIn ( parent )  && NodeUtil.getConditionExpression ( parent )  != n )  {^209^210^^^^194^224^} else if  ( parent.getType (  )  == Token.FOR && !NodeUtil.isForIn ( parent )  && NodeUtil.getConditionExpression ( parent )  != n )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[BugLab_Variable_Misuse]^} else if ( n.getType (  )  == Token.COMMA && n != op.getLastChild (  )  )  {^207^^^^^192^222^} else if ( n.getType (  )  == Token.COMMA && n != parent.getLastChild (  )  )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[BugLab_Variable_Misuse]^} else if  ( next.getType (  )  == Token.FOR && !NodeUtil.isForIn ( parent )  && NodeUtil.getConditionExpression ( parent )  != n )  {^209^210^^^^194^224^} else if  ( parent.getType (  )  == Token.FOR && !NodeUtil.isForIn ( parent )  && NodeUtil.getConditionExpression ( parent )  != n )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[BugLab_Variable_Misuse]^NodeUtil.getConditionExpression ( next )  != n )  {^210^^^^^195^225^NodeUtil.getConditionExpression ( parent )  != n )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[BugLab_Variable_Misuse]^parent.replaceChild ( rhs, new Node ( Token.VOID, Node.newNumber ( 0 )  )  ) ;^206^^^^^191^221^parent.replaceChild ( n, new Node ( Token.VOID, Node.newNumber ( 0 )  )  ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[BugLab_Variable_Misuse]^} else if ( rhs.getType (  )  == Token.COMMA && n != parent.getLastChild (  )  )  {^207^^^^^192^222^} else if ( n.getType (  )  == Token.COMMA && n != parent.getLastChild (  )  )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[BugLab_Variable_Misuse]^} else if ( n.getType (  )  == Token.COMMA && n != rhs.getLastChild (  )  )  {^207^^^^^192^222^} else if ( n.getType (  )  == Token.COMMA && n != parent.getLastChild (  )  )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[BugLab_Wrong_Operator]^} else if ( n.getType (  )  == Token.COMMA && n > parent.getLastChild (  )  )  {^207^^^^^192^222^} else if ( n.getType (  )  == Token.COMMA && n != parent.getLastChild (  )  )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[BugLab_Wrong_Operator]^} else if ( n.getType (  )  == Token.COMMA && n >= parent.getLastChild (  )  )  {^207^^^^^192^222^} else if ( n.getType (  )  == Token.COMMA && n != parent.getLastChild (  )  )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[BugLab_Variable_Misuse]^} else if  ( parent.getType (  )  == Token.FOR && !NodeUtil.isForIn ( parent )  && NodeUtil.getConditionExpression ( parent )  != op )  {^209^210^^^^194^224^} else if  ( parent.getType (  )  == Token.FOR && !NodeUtil.isForIn ( parent )  && NodeUtil.getConditionExpression ( parent )  != n )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[BugLab_Wrong_Operator]^} else if  ( parent.getType (  )  < Token.FOR && !NodeUtil.isForIn ( parent )  && NodeUtil.getConditionExpression ( parent )  != n )  {^209^210^^^^194^224^} else if  ( parent.getType (  )  == Token.FOR && !NodeUtil.isForIn ( parent )  && NodeUtil.getConditionExpression ( parent )  != n )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[BugLab_Wrong_Operator]^} else if  ( parent.getType (  )  == Token.FOR && !NodeUtil.isForIn ( parent )  && NodeUtil.getConditionExpression ( parent )  == n )  {^209^210^^^^194^224^} else if  ( parent.getType (  )  == Token.FOR && !NodeUtil.isForIn ( parent )  && NodeUtil.getConditionExpression ( parent )  != n )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[BugLab_Variable_Misuse]^} else if  ( parent.getType (  )  == Token.this && !NodeUtil.isForIn ( parent )  && NodeUtil.getConditionExpression ( parent )  != n )  {^209^210^^^^194^224^} else if  ( parent.getType (  )  == Token.FOR && !NodeUtil.isForIn ( parent )  && NodeUtil.getConditionExpression ( parent )  != n )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[BugLab_Variable_Misuse]^if  ( NodeUtil.isExpressionNode ( rhs )  )  {^205^^^^^190^220^if  ( NodeUtil.isExpressionNode ( parent )  )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[BugLab_Wrong_Literal]^parent.replaceChild ( n, new Node ( Token.VOID, Node.newNumber ( 3 )  )  ) ;^206^^^^^191^221^parent.replaceChild ( n, new Node ( Token.VOID, Node.newNumber ( 0 )  )  ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[BugLab_Wrong_Literal]^parent.replaceChild ( n, new Node ( Token.VOID, Node.newNumber ( -1 )  )  ) ;^206^^^^^191^221^parent.replaceChild ( n, new Node ( Token.VOID, Node.newNumber ( 0 )  )  ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[BugLab_Variable_Misuse]^} else if ( parent.getType (  )  == Token.COMMA && n != parent.getLastChild (  )  )  {^207^^^^^192^222^} else if ( n.getType (  )  == Token.COMMA && n != parent.getLastChild (  )  )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[BugLab_Variable_Misuse]^} else if ( n.getType (  )  == Token.COMMA && n != next.getLastChild (  )  )  {^207^^^^^192^222^} else if ( n.getType (  )  == Token.COMMA && n != parent.getLastChild (  )  )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[BugLab_Variable_Misuse]^parent.replaceChild ( op, new Node ( Token.EMPTY )  ) ;^211^^^^^196^226^parent.replaceChild ( n, new Node ( Token.EMPTY )  ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[BugLab_Variable_Misuse]^parent.replaceChild ( n, new Node ( Token.this )  ) ;^211^^^^^196^226^parent.replaceChild ( n, new Node ( Token.EMPTY )  ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[BugLab_Wrong_Operator]^} else if ( n.getType (  )  != Token.COMMA && n != parent.getLastChild (  )  )  {^207^^^^^192^222^} else if ( n.getType (  )  == Token.COMMA && n != parent.getLastChild (  )  )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[BugLab_Variable_Misuse]^NodeUtil.getConditionExpression ( op )  != n )  {^210^^^^^195^225^NodeUtil.getConditionExpression ( parent )  != n )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[BugLab_Variable_Misuse]^parent.removeChild ( op ) ;^208^^^^^193^223^parent.removeChild ( n ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[BugLab_Wrong_Operator]^} else if  ( parent.getType (  )  != Token.FOR && !NodeUtil.isForIn ( parent )  && NodeUtil.getConditionExpression ( parent )  != n )  {^209^210^^^^194^224^} else if  ( parent.getType (  )  == Token.FOR && !NodeUtil.isForIn ( parent )  && NodeUtil.getConditionExpression ( parent )  != n )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[BugLab_Variable_Misuse]^parent.replaceChild ( n, new Node ( Token.4 )  ) ;^211^^^^^209^216^parent.replaceChild ( n, new Node ( Token.EMPTY )  ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[BugLab_Variable_Misuse]^parent.replaceChild ( op, new Node ( Token.EMPTY )  ) ;^211^^^^^209^216^parent.replaceChild ( n, new Node ( Token.EMPTY )  ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[BugLab_Variable_Misuse]^parent.replaceChild ( n, new Node ( Token.3 )  ) ;^211^^^^^196^226^parent.replaceChild ( n, new Node ( Token.EMPTY )  ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[BugLab_Variable_Misuse]^parent.replaceChild ( op, new Node ( Token.VOID, Node.newNumber ( 0 )  )  ) ;^206^^^^^191^221^parent.replaceChild ( n, new Node ( Token.VOID, Node.newNumber ( 0 )  )  ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[BugLab_Wrong_Operator]^} else if ( n.getType (  )  == Token.COMMA && n <= parent.getLastChild (  )  )  {^207^^^^^192^222^} else if ( n.getType (  )  == Token.COMMA && n != parent.getLastChild (  )  )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[BugLab_Wrong_Operator]^} else if  ( parent.getType (  )  == Token.FOR && !NodeUtil.isForIn ( parent )  && NodeUtil.getConditionExpression ( parent )  <= n )  {^209^210^^^^194^224^} else if  ( parent.getType (  )  == Token.FOR && !NodeUtil.isForIn ( parent )  && NodeUtil.getConditionExpression ( parent )  != n )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[BugLab_Variable_Misuse]^} else if  ( op.getType (  )  == Token.INC || n.getType (  )  == Token.DEC )  {^204^^^^^189^219^} else if  ( n.getType (  )  == Token.INC || n.getType (  )  == Token.DEC )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[BugLab_Variable_Misuse]^} else if  ( rhs.getType (  )  == Token.INC || n.getType (  )  == Token.DEC )  {^204^^^^^189^219^} else if  ( n.getType (  )  == Token.INC || n.getType (  )  == Token.DEC )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[BugLab_Variable_Misuse]^parent.replaceChild ( parent, new Node ( Token.VOID, Node.newNumber ( 0 )  )  ) ;^206^^^^^191^221^parent.replaceChild ( n, new Node ( Token.VOID, Node.newNumber ( 0 )  )  ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[BugLab_Wrong_Literal]^parent.replaceChild ( n, new Node ( Token.VOID, Node.newNumber ( 1 )  )  ) ;^206^^^^^191^221^parent.replaceChild ( n, new Node ( Token.VOID, Node.newNumber ( 0 )  )  ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[BugLab_Wrong_Literal]^parent.replaceChild ( n, new Node ( Token.VOID, Node.newNumber ( 2 )  )  ) ;^206^^^^^191^221^parent.replaceChild ( n, new Node ( Token.VOID, Node.newNumber ( 0 )  )  ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[BugLab_Wrong_Literal]^Preconditions.checkState ( true, "Unknown statement" ) ;^219^^^^^204^234^Preconditions.checkState ( false, "Unknown statement" ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[BugLab_Variable_Misuse]^Node op = parentew Node ( NodeUtil.getOpFromAssignmentOp ( n ) , lhs, rhs ) ;^202^^^^^187^217^Node op = new Node ( NodeUtil.getOpFromAssignmentOp ( n ) , lhs, rhs ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[BugLab_Variable_Misuse]^Node op = new Node ( NodeUtil.getOpFromAssignmentOp ( n ) , parent, rhs ) ;^202^^^^^187^217^Node op = new Node ( NodeUtil.getOpFromAssignmentOp ( n ) , lhs, rhs ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[BugLab_Variable_Misuse]^Node op = new Node ( NodeUtil.getOpFromAssignmentOp ( n ) , lhs, op ) ;^202^^^^^187^217^Node op = new Node ( NodeUtil.getOpFromAssignmentOp ( n ) , lhs, rhs ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[BugLab_Argument_Swapping]^Node op = lhsew Node ( NodeUtil.getOpFromAssignmentOp ( n ) , n, rhs ) ;^202^^^^^187^217^Node op = new Node ( NodeUtil.getOpFromAssignmentOp ( n ) , lhs, rhs ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[BugLab_Argument_Swapping]^Node op = new Node ( NodeUtil.getOpFromAssignmentOp ( n ) , rhs, lhs ) ;^202^^^^^187^217^Node op = new Node ( NodeUtil.getOpFromAssignmentOp ( n ) , lhs, rhs ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[BugLab_Variable_Misuse]^Node op = new Node ( NodeUtil.getOpFromAssignmentOp ( n ) , rhs, rhs ) ;^202^^^^^187^217^Node op = new Node ( NodeUtil.getOpFromAssignmentOp ( n ) , lhs, rhs ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[BugLab_Variable_Misuse]^Node op = new Node ( NodeUtil.getOpFromAssignmentOp ( n ) , lhs, next ) ;^202^^^^^187^217^Node op = new Node ( NodeUtil.getOpFromAssignmentOp ( n ) , lhs, rhs ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[BugLab_Argument_Swapping]^Node op = rhsew Node ( NodeUtil.getOpFromAssignmentOp ( n ) , lhs, n ) ;^202^^^^^187^217^Node op = new Node ( NodeUtil.getOpFromAssignmentOp ( n ) , lhs, rhs ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[BugLab_Variable_Misuse]^n.removeChild ( op ) ;^200^^^^^185^215^n.removeChild ( rhs ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[BugLab_Variable_Misuse]^n.removeChild ( parent ) ;^201^^^^^186^216^n.removeChild ( lhs ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[BugLab_Variable_Misuse]^Node op = rhsew Node ( NodeUtil.getOpFromAssignmentOp ( n ) , lhs, rhs ) ;^202^^^^^187^217^Node op = new Node ( NodeUtil.getOpFromAssignmentOp ( n ) , lhs, rhs ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[BugLab_Variable_Misuse]^parent.replaceChild ( rhs, op ) ;^203^^^^^188^218^parent.replaceChild ( n, op ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[BugLab_Argument_Swapping]^parent.replaceChild ( op, n ) ;^203^^^^^188^218^parent.replaceChild ( n, op ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[BugLab_Wrong_Operator]^} else if  ( n.getType (  )  >= Token.INC || n.getType (  )  == Token.DEC )  {^204^^^^^189^219^} else if  ( n.getType (  )  == Token.INC || n.getType (  )  == Token.DEC )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[BugLab_Wrong_Operator]^} else if  ( n.getType (  )  > Token.INC || n.getType (  )  == Token.DEC )  {^204^^^^^189^219^} else if  ( n.getType (  )  == Token.INC || n.getType (  )  == Token.DEC )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[BugLab_Variable_Misuse]^if  ( NodeUtil.isExpressionNode ( next )  )  {^205^^^^^190^220^if  ( NodeUtil.isExpressionNode ( parent )  )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[BugLab_Variable_Misuse]^parent.replaceChild ( n, new Node ( Token.2 )  ) ;^211^^^^^209^216^parent.replaceChild ( n, new Node ( Token.EMPTY )  ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[BugLab_Variable_Misuse]^} else if ( op.getType (  )  == Token.COMMA && n != parent.getLastChild (  )  )  {^207^^^^^192^222^} else if ( n.getType (  )  == Token.COMMA && n != parent.getLastChild (  )  )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[BugLab_Wrong_Operator]^} else if  ( parent.getType (  )  == Token.FOR && !NodeUtil.isForIn ( parent )  && NodeUtil.getConditionExpression ( parent )  > n )  {^209^210^^^^194^224^} else if  ( parent.getType (  )  == Token.FOR && !NodeUtil.isForIn ( parent )  && NodeUtil.getConditionExpression ( parent )  != n )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[BugLab_Wrong_Operator]^} else if ( n.getType (  )  > Token.COMMA && n != parent.getLastChild (  )  )  {^207^^^^^192^222^} else if ( n.getType (  )  == Token.COMMA && n != parent.getLastChild (  )  )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[BugLab_Variable_Misuse]^Node op = opew Node ( NodeUtil.getOpFromAssignmentOp ( n ) , lhs, rhs ) ;^202^^^^^187^217^Node op = new Node ( NodeUtil.getOpFromAssignmentOp ( n ) , lhs, rhs ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[BugLab_Variable_Misuse]^Node op = new Node ( NodeUtil.getOpFromAssignmentOp ( n ) , lhs, parent ) ;^202^^^^^187^217^Node op = new Node ( NodeUtil.getOpFromAssignmentOp ( n ) , lhs, rhs ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[BugLab_Variable_Misuse]^} else if  ( NodeUtil.isAssignmentOp ( op )  )  {^199^^^^^184^214^} else if  ( NodeUtil.isAssignmentOp ( n )  )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[BugLab_Variable_Misuse]^n.removeChild ( parent ) ;^200^^^^^185^215^n.removeChild ( rhs ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[BugLab_Variable_Misuse]^n.removeChild ( rhs ) ;^201^^^^^186^216^n.removeChild ( lhs ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[BugLab_Variable_Misuse]^parent.replaceChild ( parent, op ) ;^203^^^^^188^218^parent.replaceChild ( n, op ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[BugLab_Variable_Misuse]^parent.replaceChild ( n, rhs ) ;^203^^^^^188^218^parent.replaceChild ( n, op ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[BugLab_Variable_Misuse]^} else if  ( parent.getType (  )  == Token.INC || n.getType (  )  == Token.DEC )  {^204^^^^^189^219^} else if  ( n.getType (  )  == Token.INC || n.getType (  )  == Token.DEC )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[BugLab_Variable_Misuse]^n.removeChild ( parent ) ;^197^^^^^182^212^n.removeChild ( rhs ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[BugLab_Variable_Misuse]^n.getParent (  ) .replaceChild ( parent, rhs ) ;^198^^^^^183^213^n.getParent (  ) .replaceChild ( n, rhs ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[BugLab_Variable_Misuse]^n.getParent (  ) .replaceChild ( n, op ) ;^198^^^^^183^213^n.getParent (  ) .replaceChild ( n, rhs ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[BugLab_Argument_Swapping]^n.getParent (  ) .replaceChild ( rhs, n ) ;^198^^^^^183^213^n.getParent (  ) .replaceChild ( n, rhs ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[BugLab_Variable_Misuse]^n.getParent (  ) .replaceChild ( op, rhs ) ;^198^^^^^183^213^n.getParent (  ) .replaceChild ( n, rhs ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[BugLab_Variable_Misuse]^} else if  ( NodeUtil.isAssignmentOp ( rhs )  )  {^199^^^^^184^214^} else if  ( NodeUtil.isAssignmentOp ( n )  )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[BugLab_Variable_Misuse]^} else if  ( n.getType (  )  == Token.INC || n.getType (  )  == Token.2 )  {^204^^^^^189^219^} else if  ( n.getType (  )  == Token.INC || n.getType (  )  == Token.DEC )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[BugLab_Wrong_Literal]^parent.replaceChild ( n, new Node ( Token.VOID, Node.newNumber ( null )  )  ) ;^206^^^^^191^221^parent.replaceChild ( n, new Node ( Token.VOID, Node.newNumber ( 0 )  )  ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[BugLab_Variable_Misuse]^parent.replaceChild ( n, new Node ( Token.null )  ) ;^211^^^^^196^226^parent.replaceChild ( n, new Node ( Token.EMPTY )  ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[BugLab_Wrong_Operator]^} else if ( n.getType (  )  < Token.COMMA && n != parent.getLastChild (  )  )  {^207^^^^^192^222^} else if ( n.getType (  )  == Token.COMMA && n != parent.getLastChild (  )  )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[BugLab_Variable_Misuse]^parent.replaceChild ( n, new Node ( Token.0 )  ) ;^211^^^^^209^216^parent.replaceChild ( n, new Node ( Token.EMPTY )  ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[BugLab_Variable_Misuse]^parent.replaceChild ( n, parent ) ;^203^^^^^188^218^parent.replaceChild ( n, op ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[BugLab_Wrong_Operator]^} else if  ( n.getType (  )  < Token.INC || n.getType (  )  == Token.DEC )  {^204^^^^^189^219^} else if  ( n.getType (  )  == Token.INC || n.getType (  )  == Token.DEC )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[BugLab_Variable_Misuse]^parent.replaceChild ( n, new Node ( Token.this )  ) ;^211^^^^^209^216^parent.replaceChild ( n, new Node ( Token.EMPTY )  ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[BugLab_Wrong_Operator]^} else if  ( parent.getType (  )  > Token.FOR && !NodeUtil.isForIn ( parent )  && NodeUtil.getConditionExpression ( parent )  != n )  {^209^210^^^^194^224^} else if  ( parent.getType (  )  == Token.FOR && !NodeUtil.isForIn ( parent )  && NodeUtil.getConditionExpression ( parent )  != n )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[BugLab_Variable_Misuse]^parent.replaceChild ( n, new Node ( Token.1 )  ) ;^211^^^^^209^216^parent.replaceChild ( n, new Node ( Token.EMPTY )  ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[BugLab_Variable_Misuse]^} else if  ( parent.getType (  )  == Token.FOR && !NodeUtil.isForIn ( parent )  && NodeUtil.getConditionExpression ( parent )  != parent )  {^209^210^^^^194^224^} else if  ( parent.getType (  )  == Token.FOR && !NodeUtil.isForIn ( parent )  && NodeUtil.getConditionExpression ( parent )  != n )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[BugLab_Wrong_Literal]^parent.replaceChild ( n, new Node ( Token.VOID, Node.newNumber (  )  )  ) ;^206^^^^^191^221^parent.replaceChild ( n, new Node ( Token.VOID, Node.newNumber ( 0 )  )  ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[BugLab_Variable_Misuse]^parent.replaceChild ( parent, new Node ( Token.EMPTY )  ) ;^211^^^^^196^226^parent.replaceChild ( n, new Node ( Token.EMPTY )  ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[BugLab_Variable_Misuse]^Node lhs = rhs.getFirstChild (  ) ;^156^^^^^141^171^Node lhs = n.getFirstChild (  ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[BugLab_Variable_Misuse]^Node rhs = parent.getNext (  ) ;^157^^^^^142^172^Node rhs = lhs.getNext (  ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[BugLab_Argument_Swapping]^Var var = name.getVar ( scope ) ;^174^^^^^159^189^Var var = scope.getVar ( name ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[BugLab_Variable_Misuse]^Node rhs = rhs.getNext (  ) ;^157^^^^^142^172^Node rhs = lhs.getNext (  ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[BugLab_Argument_Swapping]^tryRemoveAssignment ( state, rhs, exprRoot, t ) ;^162^^^^^147^177^tryRemoveAssignment ( t, rhs, exprRoot, state ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[BugLab_Argument_Swapping]^tryRemoveAssignment ( t, exprRoot, rhs, state ) ;^162^^^^^147^177^tryRemoveAssignment ( t, rhs, exprRoot, state ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[BugLab_Variable_Misuse]^rhs = parent.getNext (  ) ;^163^^^^^148^178^rhs = lhs.getNext (  ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[BugLab_Variable_Misuse]^if  ( !NodeUtil.isName ( op )  )  {^167^^^^^152^182^if  ( !NodeUtil.isName ( lhs )  )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[BugLab_Variable_Misuse]^String name = rhs.getString (  ) ;^170^^^^^155^185^String name = lhs.getString (  ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[BugLab_Argument_Swapping]^if  ( var.getIn (  ) .isLive ( state )  && isVariableStillLiveWithinExpression ( n, exprRoot, var.name )  )  {^181^182^^^^166^196^if  ( state.getIn (  ) .isLive ( var )  && isVariableStillLiveWithinExpression ( n, exprRoot, var.name )  )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[BugLab_Variable_Misuse]^n.getParent (  ) .replaceChild ( rhs, rhs ) ;^198^^^^^183^213^n.getParent (  ) .replaceChild ( n, rhs ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[BugLab_Variable_Misuse]^parent.replaceChild ( op, op ) ;^203^^^^^188^218^parent.replaceChild ( n, op ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[BugLab_Variable_Misuse]^tryRemoveAssignment ( t, op, exprRoot, state ) ;^162^^^^^147^177^tryRemoveAssignment ( t, rhs, exprRoot, state ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[BugLab_Variable_Misuse]^tryRemoveAssignment ( t, rhs, op, state ) ;^162^^^^^147^177^tryRemoveAssignment ( t, rhs, exprRoot, state ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[BugLab_Variable_Misuse]^tryRemoveAssignment ( t, rhs, exprRoot, 4 ) ;^162^^^^^147^177^tryRemoveAssignment ( t, rhs, exprRoot, state ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[BugLab_Variable_Misuse]^rhs = rhs.getNext (  ) ;^163^^^^^148^178^rhs = lhs.getNext (  ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[BugLab_Variable_Misuse]^if  ( NodeUtil.isAssign ( parent )  )  {^196^^^^^181^211^if  ( NodeUtil.isAssign ( n )  )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[BugLab_Wrong_Operator]^} else if  ( parent.getType (  )  == Token.FOR && !NodeUtil.isForIn ( parent )  && NodeUtil.getConditionExpression ( parent )  < n )  {^209^210^^^^194^224^} else if  ( parent.getType (  )  == Token.FOR && !NodeUtil.isForIn ( parent )  && NodeUtil.getConditionExpression ( parent )  != n )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[BugLab_Variable_Misuse]^parent.replaceChild ( parent, new Node ( Token.EMPTY )  ) ;^211^^^^^209^216^parent.replaceChild ( n, new Node ( Token.EMPTY )  ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[BugLab_Wrong_Literal]^parent.replaceChild ( n, new Node ( Token.VOID, Node.newNumber ( this )  )  ) ;^206^^^^^191^221^parent.replaceChild ( n, new Node ( Token.VOID, Node.newNumber ( 0 )  )  ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[BugLab_Variable_Misuse]^parent.replaceChild ( n, new Node ( Token.null )  ) ;^211^^^^^209^216^parent.replaceChild ( n, new Node ( Token.EMPTY )  ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[BugLab_Wrong_Literal]^parent.replaceChild ( n, new Node ( Token.VOID, Node.newNumber ( 4 )  )  ) ;^206^^^^^191^221^parent.replaceChild ( n, new Node ( Token.VOID, Node.newNumber ( 0 )  )  ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[BugLab_Variable_Misuse]^} else if ( n.getType (  )  == Token.1 && n != parent.getLastChild (  )  )  {^207^^^^^192^222^} else if ( n.getType (  )  == Token.COMMA && n != parent.getLastChild (  )  )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[BugLab_Wrong_Operator]^} else if ( n.getType (  )  == Token.COMMA && n < parent.getLastChild (  )  )  {^207^^^^^192^222^} else if ( n.getType (  )  == Token.COMMA && n != parent.getLastChild (  )  )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[BugLab_Variable_Misuse]^Node op = new Node ( NodeUtil.getOpFromAssignmentOp ( n ) , op, rhs ) ;^202^^^^^187^217^Node op = new Node ( NodeUtil.getOpFromAssignmentOp ( n ) , lhs, rhs ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[BugLab_Variable_Misuse]^n.removeChild ( op ) ;^197^^^^^182^212^n.removeChild ( rhs ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[BugLab_Variable_Misuse]^n.getParent (  ) .replaceChild ( n, parent ) ;^198^^^^^183^213^n.getParent (  ) .replaceChild ( n, rhs ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[BugLab_Variable_Misuse]^} else if  ( n.getType (  )  == Token.0 || n.getType (  )  == Token.DEC )  {^204^^^^^189^219^} else if  ( n.getType (  )  == Token.INC || n.getType (  )  == Token.DEC )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[BugLab_Variable_Misuse]^parent.replaceChild ( n, new Node ( Token.3 )  ) ;^211^^^^^209^216^parent.replaceChild ( n, new Node ( Token.EMPTY )  ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[BugLab_Variable_Misuse]^} else if  ( n.getType (  )  == Token.3 || n.getType (  )  == Token.DEC )  {^204^^^^^189^219^} else if  ( n.getType (  )  == Token.INC || n.getType (  )  == Token.DEC )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[BugLab_Variable_Misuse]^parent.replaceChild ( n, new Node ( Token.2 )  ) ;^211^^^^^196^226^parent.replaceChild ( n, new Node ( Token.EMPTY )  ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[BugLab_Variable_Misuse]^tryRemoveAssignment ( t, c, parent, state ) ;^229^^^^^214^244^tryRemoveAssignment ( t, c, exprRoot, state ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[BugLab_Variable_Misuse]^for  ( Node rhs = n.getFirstChild (  ) ; c != null; )  {^226^^^^^211^241^for  ( Node c = n.getFirstChild (  ) ; c != null; )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[BugLab_Variable_Misuse]^c = rhs;^231^^^^^216^246^c = next;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[BugLab_Variable_Misuse]^String name = parent.getString (  ) ;^170^^^^^155^185^String name = lhs.getString (  ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[BugLab_Variable_Misuse]^if  ( NodeUtil.isAssignmentOp ( rhs )  || n.getType (  )  == Token.INC || n.getType (  )  == Token.DEC )  {^153^154^^^^138^168^if  ( NodeUtil.isAssignmentOp ( n )  || n.getType (  )  == Token.INC || n.getType (  )  == Token.DEC )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[BugLab_Variable_Misuse]^n.getType (  )  == Token.INC || rhs.getType (  )  == Token.DEC )  {^154^^^^^139^169^n.getType (  )  == Token.INC || n.getType (  )  == Token.DEC )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[BugLab_Variable_Misuse]^n.getType (  )  == Token.INC || parent.getType (  )  == Token.DEC )  {^154^^^^^139^169^n.getType (  )  == Token.INC || n.getType (  )  == Token.DEC )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[BugLab_Variable_Misuse]^Node lhs = op.getFirstChild (  ) ;^156^^^^^141^171^Node lhs = n.getFirstChild (  ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[BugLab_Argument_Swapping]^tryRemoveAssignment ( rhs, t, exprRoot, state ) ;^162^^^^^147^177^tryRemoveAssignment ( t, rhs, exprRoot, state ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[BugLab_Variable_Misuse]^if  ( NodeUtil.isAssign ( op )  )  {^196^^^^^181^211^if  ( NodeUtil.isAssign ( n )  )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[BugLab_Variable_Misuse]^for  ( Node c = op.getFirstChild (  ) ; c != null; )  {^226^^^^^211^241^for  ( Node c = n.getFirstChild (  ) ; c != null; )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[BugLab_Variable_Misuse]^while  ( exprRoot != exprRoot )  {^254^^^^^252^271^while  ( n != exprRoot )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] isVariableStillLiveWithinExpression [RETURN_TYPE] boolean   Node n Node exprRoot String variable [VARIABLES] AbstractCompiler  compiler  String  variable  boolean  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Node  exprRoot  n  sibling  
[BugLab_Variable_Misuse]^while  ( n != n )  {^254^^^^^252^271^while  ( n != exprRoot )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] isVariableStillLiveWithinExpression [RETURN_TYPE] boolean   Node n Node exprRoot String variable [VARIABLES] AbstractCompiler  compiler  String  variable  boolean  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Node  exprRoot  n  sibling  
[BugLab_Argument_Swapping]^while  ( exprRoot != n )  {^254^^^^^252^271^while  ( n != exprRoot )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] isVariableStillLiveWithinExpression [RETURN_TYPE] boolean   Node n Node exprRoot String variable [VARIABLES] AbstractCompiler  compiler  String  variable  boolean  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Node  exprRoot  n  sibling  
[BugLab_Wrong_Operator]^while  ( n == exprRoot )  {^254^^^^^252^271^while  ( n != exprRoot )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] isVariableStillLiveWithinExpression [RETURN_TYPE] boolean   Node n Node exprRoot String variable [VARIABLES] AbstractCompiler  compiler  String  variable  boolean  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Node  exprRoot  n  sibling  
[BugLab_Wrong_Operator]^while  ( n <= exprRoot )  {^254^^^^^252^271^while  ( n != exprRoot )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] isVariableStillLiveWithinExpression [RETURN_TYPE] boolean   Node n Node exprRoot String variable [VARIABLES] AbstractCompiler  compiler  String  variable  boolean  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Node  exprRoot  n  sibling  
[BugLab_Variable_Misuse]^if  ( !ControlFlowGraph.isEnteringNewCfgNode ( n )  )  {^257^^^^^252^271^if  ( !ControlFlowGraph.isEnteringNewCfgNode ( sibling )  )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] isVariableStillLiveWithinExpression [RETURN_TYPE] boolean   Node n Node exprRoot String variable [VARIABLES] AbstractCompiler  compiler  String  variable  boolean  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Node  exprRoot  n  sibling  
[BugLab_Variable_Misuse]^if  ( READ == VariableLiveness.READ )  {^261^^^^^252^271^if  ( state == VariableLiveness.READ )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] isVariableStillLiveWithinExpression [RETURN_TYPE] boolean   Node n Node exprRoot String variable [VARIABLES] AbstractCompiler  compiler  String  variable  boolean  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Node  exprRoot  n  sibling  
[BugLab_Variable_Misuse]^if  ( state == VariableLiveness.state )  {^261^^^^^252^271^if  ( state == VariableLiveness.READ )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] isVariableStillLiveWithinExpression [RETURN_TYPE] boolean   Node n Node exprRoot String variable [VARIABLES] AbstractCompiler  compiler  String  variable  boolean  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Node  exprRoot  n  sibling  
[BugLab_Wrong_Operator]^if  ( state < VariableLiveness.READ )  {^261^^^^^252^271^if  ( state == VariableLiveness.READ )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] isVariableStillLiveWithinExpression [RETURN_TYPE] boolean   Node n Node exprRoot String variable [VARIABLES] AbstractCompiler  compiler  String  variable  boolean  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Node  exprRoot  n  sibling  
[BugLab_Wrong_Operator]^if  ( state != VariableLiveness.READ )  {^261^^^^^252^271^if  ( state == VariableLiveness.READ )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] isVariableStillLiveWithinExpression [RETURN_TYPE] boolean   Node n Node exprRoot String variable [VARIABLES] AbstractCompiler  compiler  String  variable  boolean  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Node  exprRoot  n  sibling  
[BugLab_Variable_Misuse]^} else if  ( READ == VariableLiveness.KILL )  {^263^^^^^252^271^} else if  ( state == VariableLiveness.KILL )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] isVariableStillLiveWithinExpression [RETURN_TYPE] boolean   Node n Node exprRoot String variable [VARIABLES] AbstractCompiler  compiler  String  variable  boolean  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Node  exprRoot  n  sibling  
[BugLab_Variable_Misuse]^} else if  ( state == VariableLiveness.READ )  {^263^^^^^252^271^} else if  ( state == VariableLiveness.KILL )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] isVariableStillLiveWithinExpression [RETURN_TYPE] boolean   Node n Node exprRoot String variable [VARIABLES] AbstractCompiler  compiler  String  variable  boolean  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Node  exprRoot  n  sibling  
[BugLab_Wrong_Operator]^} else if  ( state <= VariableLiveness.KILL )  {^263^^^^^252^271^} else if  ( state == VariableLiveness.KILL )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] isVariableStillLiveWithinExpression [RETURN_TYPE] boolean   Node n Node exprRoot String variable [VARIABLES] AbstractCompiler  compiler  String  variable  boolean  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Node  exprRoot  n  sibling  
[BugLab_Wrong_Literal]^return true;^264^^^^^252^271^return false;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] isVariableStillLiveWithinExpression [RETURN_TYPE] boolean   Node n Node exprRoot String variable [VARIABLES] AbstractCompiler  compiler  String  variable  boolean  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Node  exprRoot  n  sibling  
[BugLab_Wrong_Literal]^return false;^262^^^^^252^271^return true;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] isVariableStillLiveWithinExpression [RETURN_TYPE] boolean   Node n Node exprRoot String variable [VARIABLES] AbstractCompiler  compiler  String  variable  boolean  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Node  exprRoot  n  sibling  
[BugLab_Wrong_Operator]^} else if  ( state != VariableLiveness.KILL )  {^263^^^^^252^271^} else if  ( state == VariableLiveness.KILL )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] isVariableStillLiveWithinExpression [RETURN_TYPE] boolean   Node n Node exprRoot String variable [VARIABLES] AbstractCompiler  compiler  String  variable  boolean  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Node  exprRoot  n  sibling  
[BugLab_Argument_Swapping]^VariableLiveness state = readVariableBeforeKilling ( variable, sibling ) ;^258^^^^^252^271^VariableLiveness state = readVariableBeforeKilling ( sibling, variable ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] isVariableStillLiveWithinExpression [RETURN_TYPE] boolean   Node n Node exprRoot String variable [VARIABLES] AbstractCompiler  compiler  String  variable  boolean  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Node  exprRoot  n  sibling  
[BugLab_Variable_Misuse]^VariableLiveness state = readVariableBeforeKilling ( n, variable ) ;^258^^^^^252^271^VariableLiveness state = readVariableBeforeKilling ( sibling, variable ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] isVariableStillLiveWithinExpression [RETURN_TYPE] boolean   Node n Node exprRoot String variable [VARIABLES] AbstractCompiler  compiler  String  variable  boolean  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Node  exprRoot  n  sibling  
[BugLab_Wrong_Operator]^} else if  ( state >= VariableLiveness.KILL )  {^263^^^^^252^271^} else if  ( state == VariableLiveness.KILL )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] isVariableStillLiveWithinExpression [RETURN_TYPE] boolean   Node n Node exprRoot String variable [VARIABLES] AbstractCompiler  compiler  String  variable  boolean  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Node  exprRoot  n  sibling  
[BugLab_Variable_Misuse]^for ( Node sibling = exprRoot.getNext (  ) ; sibling != null;^255^^^^^252^271^for ( Node sibling = n.getNext (  ) ; sibling != null;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] isVariableStillLiveWithinExpression [RETURN_TYPE] boolean   Node n Node exprRoot String variable [VARIABLES] AbstractCompiler  compiler  String  variable  boolean  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Node  exprRoot  n  sibling  
[BugLab_Variable_Misuse]^for ( Node n = n.getNext (  ) ; sibling != null;^255^^^^^252^271^for ( Node sibling = n.getNext (  ) ; sibling != null;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] isVariableStillLiveWithinExpression [RETURN_TYPE] boolean   Node n Node exprRoot String variable [VARIABLES] AbstractCompiler  compiler  String  variable  boolean  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Node  exprRoot  n  sibling  
[BugLab_Argument_Swapping]^for ( Node n = sibling.getNext (  ) ; sibling != null;^255^^^^^252^271^for ( Node sibling = n.getNext (  ) ; sibling != null;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] isVariableStillLiveWithinExpression [RETURN_TYPE] boolean   Node n Node exprRoot String variable [VARIABLES] AbstractCompiler  compiler  String  variable  boolean  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Node  exprRoot  n  sibling  
[BugLab_Wrong_Operator]^for ( Node sibling = n.getNext (  ) ; sibling == null;^255^^^^^252^271^for ( Node sibling = n.getNext (  ) ; sibling != null;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] isVariableStillLiveWithinExpression [RETURN_TYPE] boolean   Node n Node exprRoot String variable [VARIABLES] AbstractCompiler  compiler  String  variable  boolean  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Node  exprRoot  n  sibling  
[BugLab_Wrong_Operator]^} else if  ( state > VariableLiveness.KILL )  {^263^^^^^252^271^} else if  ( state == VariableLiveness.KILL )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] isVariableStillLiveWithinExpression [RETURN_TYPE] boolean   Node n Node exprRoot String variable [VARIABLES] AbstractCompiler  compiler  String  variable  boolean  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Node  exprRoot  n  sibling  
[BugLab_Variable_Misuse]^if  ( MAYBE_LIVE == VariableLiveness.READ )  {^261^^^^^252^271^if  ( state == VariableLiveness.READ )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] isVariableStillLiveWithinExpression [RETURN_TYPE] boolean   Node n Node exprRoot String variable [VARIABLES] AbstractCompiler  compiler  String  variable  boolean  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Node  exprRoot  n  sibling  
[BugLab_Variable_Misuse]^if  ( state == VariableLiveness.MAYBE_LIVE )  {^261^^^^^252^271^if  ( state == VariableLiveness.READ )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] isVariableStillLiveWithinExpression [RETURN_TYPE] boolean   Node n Node exprRoot String variable [VARIABLES] AbstractCompiler  compiler  String  variable  boolean  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Node  exprRoot  n  sibling  
[BugLab_Variable_Misuse]^sibling = n.getNext (  )  )  {^256^^^^^252^271^sibling = sibling.getNext (  )  )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] isVariableStillLiveWithinExpression [RETURN_TYPE] boolean   Node n Node exprRoot String variable [VARIABLES] AbstractCompiler  compiler  String  variable  boolean  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Node  exprRoot  n  sibling  
[BugLab_Variable_Misuse]^n = sibling.getParent (  ) ;^268^^^^^252^271^n = n.getParent (  ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] isVariableStillLiveWithinExpression [RETURN_TYPE] boolean   Node n Node exprRoot String variable [VARIABLES] AbstractCompiler  compiler  String  variable  boolean  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Node  exprRoot  n  sibling  
[BugLab_Variable_Misuse]^for ( Node sibling = sibling.getNext (  ) ; sibling != null;^255^^^^^252^271^for ( Node sibling = n.getNext (  ) ; sibling != null;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] isVariableStillLiveWithinExpression [RETURN_TYPE] boolean   Node n Node exprRoot String variable [VARIABLES] AbstractCompiler  compiler  String  variable  boolean  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Node  exprRoot  n  sibling  
[BugLab_Wrong_Operator]^if  ( state <= VariableLiveness.READ )  {^261^^^^^252^271^if  ( state == VariableLiveness.READ )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] isVariableStillLiveWithinExpression [RETURN_TYPE] boolean   Node n Node exprRoot String variable [VARIABLES] AbstractCompiler  compiler  String  variable  boolean  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Node  exprRoot  n  sibling  
[BugLab_Wrong_Operator]^if  ( state > VariableLiveness.READ )  {^261^^^^^252^271^if  ( state == VariableLiveness.READ )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] isVariableStillLiveWithinExpression [RETURN_TYPE] boolean   Node n Node exprRoot String variable [VARIABLES] AbstractCompiler  compiler  String  variable  boolean  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Node  exprRoot  n  sibling  
[BugLab_Wrong_Literal]^return true;^270^^^^^252^271^return false;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] isVariableStillLiveWithinExpression [RETURN_TYPE] boolean   Node n Node exprRoot String variable [VARIABLES] AbstractCompiler  compiler  String  variable  boolean  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Node  exprRoot  n  sibling  
[BugLab_Variable_Misuse]^if  ( NodeUtil.isName ( child )  && variable.equals ( n.getString (  )  )  )  {^289^^^^^288^306^if  ( NodeUtil.isName ( n )  && variable.equals ( n.getString (  )  )  )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] readVariableBeforeKilling [RETURN_TYPE] DeadAssignmentsElimination$VariableLiveness   Node n String variable [VARIABLES] AbstractCompiler  compiler  String  variable  boolean  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Node  child  n  
[BugLab_Wrong_Operator]^if  ( NodeUtil.isName ( n )  || variable.equals ( n.getString (  )  )  )  {^289^^^^^288^306^if  ( NodeUtil.isName ( n )  && variable.equals ( n.getString (  )  )  )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] readVariableBeforeKilling [RETURN_TYPE] DeadAssignmentsElimination$VariableLiveness   Node n String variable [VARIABLES] AbstractCompiler  compiler  String  variable  boolean  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Node  child  n  
[BugLab_Variable_Misuse]^if  ( NodeUtil.isLhs ( child, n.getParent (  )  )  )  {^290^^^^^288^306^if  ( NodeUtil.isLhs ( n, n.getParent (  )  )  )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] readVariableBeforeKilling [RETURN_TYPE] DeadAssignmentsElimination$VariableLiveness   Node n String variable [VARIABLES] AbstractCompiler  compiler  String  variable  boolean  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Node  child  n  
[BugLab_Argument_Swapping]^if  ( NodeUtil.isName ( variable )  && n.equals ( n.getString (  )  )  )  {^289^^^^^288^306^if  ( NodeUtil.isName ( n )  && variable.equals ( n.getString (  )  )  )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] readVariableBeforeKilling [RETURN_TYPE] DeadAssignmentsElimination$VariableLiveness   Node n String variable [VARIABLES] AbstractCompiler  compiler  String  variable  boolean  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Node  child  n  
[BugLab_Variable_Misuse]^if  ( !ControlFlowGraph.isEnteringNewCfgNode ( n )  )  {^298^^^^^288^306^if  ( !ControlFlowGraph.isEnteringNewCfgNode ( child )  )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] readVariableBeforeKilling [RETURN_TYPE] DeadAssignmentsElimination$VariableLiveness   Node n String variable [VARIABLES] AbstractCompiler  compiler  String  variable  boolean  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Node  child  n  
[BugLab_Variable_Misuse]^if  ( READ != VariableLiveness.MAYBE_LIVE )  {^300^^^^^288^306^if  ( state != VariableLiveness.MAYBE_LIVE )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] readVariableBeforeKilling [RETURN_TYPE] DeadAssignmentsElimination$VariableLiveness   Node n String variable [VARIABLES] AbstractCompiler  compiler  String  variable  boolean  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Node  child  n  
[BugLab_Variable_Misuse]^if  ( state != VariableLiveness.READ )  {^300^^^^^288^306^if  ( state != VariableLiveness.MAYBE_LIVE )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] readVariableBeforeKilling [RETURN_TYPE] DeadAssignmentsElimination$VariableLiveness   Node n String variable [VARIABLES] AbstractCompiler  compiler  String  variable  boolean  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Node  child  n  
[BugLab_Wrong_Operator]^if  ( state == VariableLiveness.MAYBE_LIVE )  {^300^^^^^288^306^if  ( state != VariableLiveness.MAYBE_LIVE )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] readVariableBeforeKilling [RETURN_TYPE] DeadAssignmentsElimination$VariableLiveness   Node n String variable [VARIABLES] AbstractCompiler  compiler  String  variable  boolean  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Node  child  n  
[BugLab_Variable_Misuse]^return READ;^301^^^^^288^306^return state;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] readVariableBeforeKilling [RETURN_TYPE] DeadAssignmentsElimination$VariableLiveness   Node n String variable [VARIABLES] AbstractCompiler  compiler  String  variable  boolean  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Node  child  n  
[BugLab_Variable_Misuse]^VariableLiveness state = readVariableBeforeKilling ( n, variable ) ;^299^^^^^288^306^VariableLiveness state = readVariableBeforeKilling ( child, variable ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] readVariableBeforeKilling [RETURN_TYPE] DeadAssignmentsElimination$VariableLiveness   Node n String variable [VARIABLES] AbstractCompiler  compiler  String  variable  boolean  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Node  child  n  
[BugLab_Argument_Swapping]^VariableLiveness state = readVariableBeforeKilling ( variable, child ) ;^299^^^^^288^306^VariableLiveness state = readVariableBeforeKilling ( child, variable ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] readVariableBeforeKilling [RETURN_TYPE] DeadAssignmentsElimination$VariableLiveness   Node n String variable [VARIABLES] AbstractCompiler  compiler  String  variable  boolean  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Node  child  n  
[BugLab_Variable_Misuse]^for  ( Node n = n.getFirstChild (  ) ;^296^^^^^288^306^for  ( Node child = n.getFirstChild (  ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] readVariableBeforeKilling [RETURN_TYPE] DeadAssignmentsElimination$VariableLiveness   Node n String variable [VARIABLES] AbstractCompiler  compiler  String  variable  boolean  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Node  child  n  
[BugLab_Argument_Swapping]^for  ( Node n = child.getFirstChild (  ) ;^296^^^^^288^306^for  ( Node child = n.getFirstChild (  ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] readVariableBeforeKilling [RETURN_TYPE] DeadAssignmentsElimination$VariableLiveness   Node n String variable [VARIABLES] AbstractCompiler  compiler  String  variable  boolean  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Node  child  n  
[BugLab_Wrong_Operator]^if  ( state <= VariableLiveness.MAYBE_LIVE )  {^300^^^^^288^306^if  ( state != VariableLiveness.MAYBE_LIVE )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] readVariableBeforeKilling [RETURN_TYPE] DeadAssignmentsElimination$VariableLiveness   Node n String variable [VARIABLES] AbstractCompiler  compiler  String  variable  boolean  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Node  child  n  
[BugLab_Variable_Misuse]^child != null; n = child.getNext (  )  )  {^297^^^^^288^306^child != null; child = child.getNext (  )  )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] readVariableBeforeKilling [RETURN_TYPE] DeadAssignmentsElimination$VariableLiveness   Node n String variable [VARIABLES] AbstractCompiler  compiler  String  variable  boolean  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Node  child  n  
