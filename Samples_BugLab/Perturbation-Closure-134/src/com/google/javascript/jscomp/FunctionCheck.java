[BugLab_Variable_Misuse]^this.args = optionalArgs;^86^^^^^85^89^this.args = args;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] <init> [RETURN_TYPE] FunctionCheck$FunctionInfo(int,int,boolean)   int args int optionalArgs boolean hasVarArgs [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Map  functionInfos  int  args  optionalArgs  
[BugLab_Variable_Misuse]^this.optionalArgs = args;^87^^^^^85^89^this.optionalArgs = optionalArgs;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] <init> [RETURN_TYPE] FunctionCheck$FunctionInfo(int,int,boolean)   int args int optionalArgs boolean hasVarArgs [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Map  functionInfos  int  args  optionalArgs  
[BugLab_Argument_Swapping]^NodeTraversal.traverseRoots ( compiler, Lists.newArrayList ( root, externs ) , new ArgCheck (  )  ) ;^73^74^^^^72^75^NodeTraversal.traverseRoots ( compiler, Lists.newArrayList ( externs, root ) , new ArgCheck (  )  ) ;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Node  externs  root  Map  functionInfos  int  args  optionalArgs  
[BugLab_Argument_Swapping]^NodeTraversal.traverseRoots ( root, Lists.newArrayList ( externs, compiler ) , new ArgCheck (  )  ) ;^73^74^^^^72^75^NodeTraversal.traverseRoots ( compiler, Lists.newArrayList ( externs, root ) , new ArgCheck (  )  ) ;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Node  externs  root  Map  functionInfos  int  args  optionalArgs  
[BugLab_Argument_Swapping]^Lists.newArrayList ( root, externs ) , new ArgCheck (  )  ) ;^74^^^^^72^75^Lists.newArrayList ( externs, root ) , new ArgCheck (  )  ) ;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Node  externs  root  Map  functionInfos  int  args  optionalArgs  
[BugLab_Wrong_Operator]^if  ( ! ( other  ^  FunctionInfo )  )  {^92^^^^^91^101^if  ( ! ( other instanceof FunctionInfo )  )  {^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] equals [RETURN_TYPE] boolean   Object other [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  FunctionInfo  o  Object  other  Map  functionInfos  int  args  optionalArgs  
[BugLab_Wrong_Literal]^return true;^93^^^^^91^101^return false;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] equals [RETURN_TYPE] boolean   Object other [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  FunctionInfo  o  Object  other  Map  functionInfos  int  args  optionalArgs  
[BugLab_Variable_Misuse]^return args == args && o.optionalArgs == optionalArgs && o.hasVarArgs == hasVarArgs;^98^99^100^^^91^101^return o.args == args && o.optionalArgs == optionalArgs && o.hasVarArgs == hasVarArgs;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] equals [RETURN_TYPE] boolean   Object other [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  FunctionInfo  o  Object  other  Map  functionInfos  int  args  optionalArgs  
[BugLab_Variable_Misuse]^return o.args == optionalArgs && o.optionalArgs == optionalArgs && o.hasVarArgs == hasVarArgs;^98^99^100^^^91^101^return o.args == args && o.optionalArgs == optionalArgs && o.hasVarArgs == hasVarArgs;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] equals [RETURN_TYPE] boolean   Object other [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  FunctionInfo  o  Object  other  Map  functionInfos  int  args  optionalArgs  
[BugLab_Variable_Misuse]^return o.args == args && optionalArgs == optionalArgs && o.hasVarArgs == hasVarArgs;^98^99^100^^^91^101^return o.args == args && o.optionalArgs == optionalArgs && o.hasVarArgs == hasVarArgs;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] equals [RETURN_TYPE] boolean   Object other [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  FunctionInfo  o  Object  other  Map  functionInfos  int  args  optionalArgs  
[BugLab_Variable_Misuse]^return o.args == args && o.optionalArgs == optionalArgs && hasVarArgs == hasVarArgs;^98^99^100^^^91^101^return o.args == args && o.optionalArgs == optionalArgs && o.hasVarArgs == hasVarArgs;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] equals [RETURN_TYPE] boolean   Object other [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  FunctionInfo  o  Object  other  Map  functionInfos  int  args  optionalArgs  
[BugLab_Argument_Swapping]^return hasVarArgs.args == args && o.optionalArgs == optionalArgs && o.hasVarArgs == o;^98^99^100^^^91^101^return o.args == args && o.optionalArgs == optionalArgs && o.hasVarArgs == hasVarArgs;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] equals [RETURN_TYPE] boolean   Object other [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  FunctionInfo  o  Object  other  Map  functionInfos  int  args  optionalArgs  
[BugLab_Argument_Swapping]^return args == o.args && o.optionalArgs == optionalArgs && o.hasVarArgs == hasVarArgs;^98^99^100^^^91^101^return o.args == args && o.optionalArgs == optionalArgs && o.hasVarArgs == hasVarArgs;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] equals [RETURN_TYPE] boolean   Object other [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  FunctionInfo  o  Object  other  Map  functionInfos  int  args  optionalArgs  
[BugLab_Argument_Swapping]^return o.args == o.optionalArgs && args == optionalArgs && o.hasVarArgs == hasVarArgs;^98^99^100^^^91^101^return o.args == args && o.optionalArgs == optionalArgs && o.hasVarArgs == hasVarArgs;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] equals [RETURN_TYPE] boolean   Object other [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  FunctionInfo  o  Object  other  Map  functionInfos  int  args  optionalArgs  
[BugLab_Argument_Swapping]^return o.args == args && optionalArgs == o.optionalArgs && o.hasVarArgs == hasVarArgs;^98^99^100^^^91^101^return o.args == args && o.optionalArgs == optionalArgs && o.hasVarArgs == hasVarArgs;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] equals [RETURN_TYPE] boolean   Object other [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  FunctionInfo  o  Object  other  Map  functionInfos  int  args  optionalArgs  
[BugLab_Argument_Swapping]^return o.args == args && o.optionalArgs == optionalArgs && hasVarArgs == o.hasVarArgs;^98^99^100^^^91^101^return o.args == args && o.optionalArgs == optionalArgs && o.hasVarArgs == hasVarArgs;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] equals [RETURN_TYPE] boolean   Object other [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  FunctionInfo  o  Object  other  Map  functionInfos  int  args  optionalArgs  
[BugLab_Argument_Swapping]^return hasVarArgs == args && o.optionalArgs == optionalArgs && o.hasVarArgs == o.args;^98^99^100^^^91^101^return o.args == args && o.optionalArgs == optionalArgs && o.hasVarArgs == hasVarArgs;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] equals [RETURN_TYPE] boolean   Object other [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  FunctionInfo  o  Object  other  Map  functionInfos  int  args  optionalArgs  
[BugLab_Wrong_Operator]^return o.args == args || o.optionalArgs == optionalArgs && o.hasVarArgs == hasVarArgs;^98^99^100^^^91^101^return o.args == args && o.optionalArgs == optionalArgs && o.hasVarArgs == hasVarArgs;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] equals [RETURN_TYPE] boolean   Object other [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  FunctionInfo  o  Object  other  Map  functionInfos  int  args  optionalArgs  
[BugLab_Wrong_Operator]^return o.args != args && o.optionalArgs == optionalArgs && o.hasVarArgs == hasVarArgs;^98^99^100^^^91^101^return o.args == args && o.optionalArgs == optionalArgs && o.hasVarArgs == hasVarArgs;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] equals [RETURN_TYPE] boolean   Object other [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  FunctionInfo  o  Object  other  Map  functionInfos  int  args  optionalArgs  
[BugLab_Wrong_Operator]^return o.args == args && o.optionalArgs != optionalArgs && o.hasVarArgs == hasVarArgs;^98^99^100^^^91^101^return o.args == args && o.optionalArgs == optionalArgs && o.hasVarArgs == hasVarArgs;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] equals [RETURN_TYPE] boolean   Object other [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  FunctionInfo  o  Object  other  Map  functionInfos  int  args  optionalArgs  
[BugLab_Wrong_Operator]^return o.args >= args && o.optionalArgs == optionalArgs && o.hasVarArgs == hasVarArgs;^98^99^100^^^91^101^return o.args == args && o.optionalArgs == optionalArgs && o.hasVarArgs == hasVarArgs;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] equals [RETURN_TYPE] boolean   Object other [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  FunctionInfo  o  Object  other  Map  functionInfos  int  args  optionalArgs  
[BugLab_Wrong_Literal]^int result = 16;^104^^^^^103^109^int result = 17;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] hashCode [RETURN_TYPE] int   [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Map  functionInfos  int  args  optionalArgs  result  
[BugLab_Variable_Misuse]^result = 37 * optionalArgs + args;^105^^^^^103^109^result = 37 * result + args;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] hashCode [RETURN_TYPE] int   [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Map  functionInfos  int  args  optionalArgs  result  
[BugLab_Argument_Swapping]^result = 37 * args + result;^105^^^^^103^109^result = 37 * result + args;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] hashCode [RETURN_TYPE] int   [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Map  functionInfos  int  args  optionalArgs  result  
[BugLab_Wrong_Operator]^result = 37 - result + args;^105^^^^^103^109^result = 37 * result + args;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] hashCode [RETURN_TYPE] int   [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Map  functionInfos  int  args  optionalArgs  result  
[BugLab_Wrong_Literal]^result = result * result + args;^105^^^^^103^109^result = 37 * result + args;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] hashCode [RETURN_TYPE] int   [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Map  functionInfos  int  args  optionalArgs  result  
[BugLab_Variable_Misuse]^result = 37 * args + optionalArgs;^106^^^^^103^109^result = 37 * result + optionalArgs;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] hashCode [RETURN_TYPE] int   [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Map  functionInfos  int  args  optionalArgs  result  
[BugLab_Argument_Swapping]^result = 37 * optionalArgs + result;^106^^^^^103^109^result = 37 * result + optionalArgs;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] hashCode [RETURN_TYPE] int   [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Map  functionInfos  int  args  optionalArgs  result  
[BugLab_Wrong_Operator]^result = 37 + result + optionalArgs;^106^^^^^103^109^result = 37 * result + optionalArgs;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] hashCode [RETURN_TYPE] int   [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Map  functionInfos  int  args  optionalArgs  result  
[BugLab_Wrong_Literal]^result = 38 * result + optionalArgs;^106^^^^^103^109^result = 37 * result + optionalArgs;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] hashCode [RETURN_TYPE] int   [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Map  functionInfos  int  args  optionalArgs  result  
[BugLab_Variable_Misuse]^result = 37 * optionalArgs +  ( hasVarArgs ? 1 : 0 ) ;^107^^^^^103^109^result = 37 * result +  ( hasVarArgs ? 1 : 0 ) ;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] hashCode [RETURN_TYPE] int   [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Map  functionInfos  int  args  optionalArgs  result  
[BugLab_Argument_Swapping]^result = 37 * hasVarArgs +  ( result ? 1 : 0 ) ;^107^^^^^103^109^result = 37 * result +  ( hasVarArgs ? 1 : 0 ) ;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] hashCode [RETURN_TYPE] int   [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Map  functionInfos  int  args  optionalArgs  result  
[BugLab_Wrong_Operator]^result = 37 * result +  <<  ( hasVarArgs ? 1 : 0 ) ;^107^^^^^103^109^result = 37 * result +  ( hasVarArgs ? 1 : 0 ) ;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] hashCode [RETURN_TYPE] int   [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Map  functionInfos  int  args  optionalArgs  result  
[BugLab_Wrong_Operator]^result = 37 - result +  ( hasVarArgs ? 1 : 0 ) ;^107^^^^^103^109^result = 37 * result +  ( hasVarArgs ? 1 : 0 ) ;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] hashCode [RETURN_TYPE] int   [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Map  functionInfos  int  args  optionalArgs  result  
[BugLab_Wrong_Literal]^result = result * result +  ( hasVarArgs ? 1 : 0 ) ;^107^^^^^103^109^result = 37 * result +  ( hasVarArgs ? 1 : 0 ) ;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] hashCode [RETURN_TYPE] int   [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Map  functionInfos  int  args  optionalArgs  result  
[BugLab_Wrong_Literal]^result = 37 * result +  ( hasVarArgs ? result : 0 ) ;^107^^^^^103^109^result = 37 * result +  ( hasVarArgs ? 1 : 0 ) ;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] hashCode [RETURN_TYPE] int   [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Map  functionInfos  int  args  optionalArgs  result  
[BugLab_Wrong_Literal]^result = 37 * result +  ( hasVarArgs ? 1 : result ) ;^107^^^^^103^109^result = 37 * result +  ( hasVarArgs ? 1 : 0 ) ;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] hashCode [RETURN_TYPE] int   [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Map  functionInfos  int  args  optionalArgs  result  
[BugLab_Variable_Misuse]^return optionalArgs;^108^^^^^103^109^return result;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] hashCode [RETURN_TYPE] int   [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Map  functionInfos  int  args  optionalArgs  result  
[BugLab_Variable_Misuse]^return result + " total argument ( s )  " + "of which " + optionalArgs + " is/are optional" + ( hasVarArgs ? ", var_args supported" : "" ) ;^112^113^114^^^111^115^return args + " total argument ( s )  " + "of which " + optionalArgs + " is/are optional" + ( hasVarArgs ? ", var_args supported" : "" ) ;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Map  functionInfos  int  args  optionalArgs  result  
[BugLab_Variable_Misuse]^return args + " total argument ( s )  " + "of which " + result + " is/are optional" + ( hasVarArgs ? ", var_args supported" : "" ) ;^112^113^114^^^111^115^return args + " total argument ( s )  " + "of which " + optionalArgs + " is/are optional" + ( hasVarArgs ? ", var_args supported" : "" ) ;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Map  functionInfos  int  args  optionalArgs  result  
[BugLab_Argument_Swapping]^return optionalArgs + " total argument ( s )  " + "of which " + args + " is/are optional" + ( hasVarArgs ? ", var_args supported" : "" ) ;^112^113^114^^^111^115^return args + " total argument ( s )  " + "of which " + optionalArgs + " is/are optional" + ( hasVarArgs ? ", var_args supported" : "" ) ;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Map  functionInfos  int  args  optionalArgs  result  
[BugLab_Argument_Swapping]^return args + " total argument ( s )  " + "of which " + hasVarArgs + " is/are optional" + ( optionalArgs ? ", var_args supported" : "" ) ;^112^113^114^^^111^115^return args + " total argument ( s )  " + "of which " + optionalArgs + " is/are optional" + ( hasVarArgs ? ", var_args supported" : "" ) ;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Map  functionInfos  int  args  optionalArgs  result  
[BugLab_Wrong_Operator]^return args + " total argument ( s )  <  " + "of which " + optionalArgs + " is/are optional" + ( hasVarArgs ? ", var_args supported" : "" ) ;^112^113^114^^^111^115^return args + " total argument ( s )  " + "of which " + optionalArgs + " is/are optional" + ( hasVarArgs ? ", var_args supported" : "" ) ;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Map  functionInfos  int  args  optionalArgs  result  
[BugLab_Wrong_Operator]^return args + " total argument ( s )  !=  " + "of which " + optionalArgs + " is/are optional" + ( hasVarArgs ? ", var_args supported" : "" ) ;^112^113^114^^^111^115^return args + " total argument ( s )  " + "of which " + optionalArgs + " is/are optional" + ( hasVarArgs ? ", var_args supported" : "" ) ;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Map  functionInfos  int  args  optionalArgs  result  
[BugLab_Wrong_Operator]^return args + " total argument ( s )  >>  " + "of which " + optionalArgs + " is/are optional" + ( hasVarArgs ? ", var_args supported" : "" ) ;^112^113^114^^^111^115^return args + " total argument ( s )  " + "of which " + optionalArgs + " is/are optional" + ( hasVarArgs ? ", var_args supported" : "" ) ;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Map  functionInfos  int  args  optionalArgs  result  
[BugLab_Wrong_Operator]^return args + " total argument ( s )  <<  " + "of which " + optionalArgs + " is/are optional" + ( hasVarArgs ? ", var_args supported" : "" ) ;^112^113^114^^^111^115^return args + " total argument ( s )  " + "of which " + optionalArgs + " is/are optional" + ( hasVarArgs ? ", var_args supported" : "" ) ;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Map  functionInfos  int  args  optionalArgs  result  
[BugLab_Wrong_Operator]^return args  !=  " total argument ( s )  " + "of which " + optionalArgs + " is/are optional" + ( hasVarArgs ? ", var_args supported" : "" ) ;^112^113^114^^^111^115^return args + " total argument ( s )  " + "of which " + optionalArgs + " is/are optional" + ( hasVarArgs ? ", var_args supported" : "" ) ;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Map  functionInfos  int  args  optionalArgs  result  
[BugLab_Variable_Misuse]^if  ( parent.getType (  )  == Token.NAME )  {^129^^^^^114^144^if  ( fn.getType (  )  == Token.NAME )  {^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  NodeTraversal  t  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Var  v  Node  fn  fnDef  n  parent  FunctionInfo  f  String  fnName  Map  functionInfos  int  args  optionalArgs  result  
[BugLab_Wrong_Operator]^if  ( fn.getType (  )  >= Token.NAME )  {^129^^^^^114^144^if  ( fn.getType (  )  == Token.NAME )  {^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  NodeTraversal  t  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Var  v  Node  fn  fnDef  n  parent  FunctionInfo  f  String  fnName  Map  functionInfos  int  args  optionalArgs  result  
[BugLab_Wrong_Operator]^if  ( fn.getType (  )  != Token.NAME )  {^129^^^^^114^144^if  ( fn.getType (  )  == Token.NAME )  {^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  NodeTraversal  t  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Var  v  Node  fn  fnDef  n  parent  FunctionInfo  f  String  fnName  Map  functionInfos  int  args  optionalArgs  result  
[BugLab_Wrong_Operator]^if  ( v != null )  {^137^^^^^122^152^if  ( v == null )  {^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  NodeTraversal  t  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Var  v  Node  fn  fnDef  n  parent  FunctionInfo  f  String  fnName  Map  functionInfos  int  args  optionalArgs  result  
[BugLab_Variable_Misuse]^if  ( fnDef == null || fnDef.getType (  )  != Token.this )  {^142^143^^^^127^157^if  ( fnDef == null || fnDef.getType (  )  != Token.FUNCTION )  {^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  NodeTraversal  t  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Var  v  Node  fn  fnDef  n  parent  FunctionInfo  f  String  fnName  Map  functionInfos  int  args  optionalArgs  result  
[BugLab_Wrong_Operator]^if  ( fnDef == null && fnDef.getType (  )  != Token.FUNCTION )  {^142^143^^^^127^157^if  ( fnDef == null || fnDef.getType (  )  != Token.FUNCTION )  {^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  NodeTraversal  t  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Var  v  Node  fn  fnDef  n  parent  FunctionInfo  f  String  fnName  Map  functionInfos  int  args  optionalArgs  result  
[BugLab_Wrong_Operator]^if  ( fnDef != null || fnDef.getType (  )  != Token.FUNCTION )  {^142^143^^^^127^157^if  ( fnDef == null || fnDef.getType (  )  != Token.FUNCTION )  {^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  NodeTraversal  t  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Var  v  Node  fn  fnDef  n  parent  FunctionInfo  f  String  fnName  Map  functionInfos  int  args  optionalArgs  result  
[BugLab_Wrong_Operator]^if  ( fnDef == null || fnDef.getType (  )  == Token.FUNCTION )  {^142^143^^^^127^157^if  ( fnDef == null || fnDef.getType (  )  != Token.FUNCTION )  {^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  NodeTraversal  t  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Var  v  Node  fn  fnDef  n  parent  FunctionInfo  f  String  fnName  Map  functionInfos  int  args  optionalArgs  result  
[BugLab_Variable_Misuse]^String parentName = fn.getString (  ) ;^131^^^^^116^146^String fnName = fn.getString (  ) ;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  NodeTraversal  t  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Var  v  Node  fn  fnDef  n  parent  FunctionInfo  f  String  fnName  Map  functionInfos  int  args  optionalArgs  result  
[BugLab_Argument_Swapping]^Scope.Var v = fnName.getScope (  ) .getVar ( t ) ;^134^^^^^119^149^Scope.Var v = t.getScope (  ) .getVar ( fnName ) ;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  NodeTraversal  t  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Var  v  Node  fn  fnDef  n  parent  FunctionInfo  f  String  fnName  Map  functionInfos  int  args  optionalArgs  result  
[BugLab_Variable_Misuse]^FunctionInfo f = getFunctionInfo ( parent, v.getInputName (  )  ) ;^148^^^^^133^163^FunctionInfo f = getFunctionInfo ( fnDef, v.getInputName (  )  ) ;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  NodeTraversal  t  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Var  v  Node  fn  fnDef  n  parent  FunctionInfo  f  String  fnName  Map  functionInfos  int  args  optionalArgs  result  
[BugLab_Variable_Misuse]^FunctionInfo f = getFunctionInfo ( fnDef, 3.getInputName (  )  ) ;^148^^^^^133^163^FunctionInfo f = getFunctionInfo ( fnDef, v.getInputName (  )  ) ;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  NodeTraversal  t  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Var  v  Node  fn  fnDef  n  parent  FunctionInfo  f  String  fnName  Map  functionInfos  int  args  optionalArgs  result  
[BugLab_Argument_Swapping]^FunctionInfo f = getFunctionInfo ( v, fnDef.getInputName (  )  ) ;^148^^^^^133^163^FunctionInfo f = getFunctionInfo ( fnDef, v.getInputName (  )  ) ;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  NodeTraversal  t  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Var  v  Node  fn  fnDef  n  parent  FunctionInfo  f  String  fnName  Map  functionInfos  int  args  optionalArgs  result  
[BugLab_Variable_Misuse]^checkCall ( parent, fnName, Collections.singletonList ( f ) , t, level ) ;^150^^^^^135^165^checkCall ( n, fnName, Collections.singletonList ( f ) , t, level ) ;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  NodeTraversal  t  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Var  v  Node  fn  fnDef  n  parent  FunctionInfo  f  String  fnName  Map  functionInfos  int  args  optionalArgs  result  
[BugLab_Argument_Swapping]^checkCall ( level, fnName, Collections.singletonList ( f ) , t, n ) ;^150^^^^^135^165^checkCall ( n, fnName, Collections.singletonList ( f ) , t, level ) ;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  NodeTraversal  t  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Var  v  Node  fn  fnDef  n  parent  FunctionInfo  f  String  fnName  Map  functionInfos  int  args  optionalArgs  result  
[BugLab_Argument_Swapping]^checkCall ( n, t, Collections.singletonList ( f ) , fnName, level ) ;^150^^^^^135^165^checkCall ( n, fnName, Collections.singletonList ( f ) , t, level ) ;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  NodeTraversal  t  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Var  v  Node  fn  fnDef  n  parent  FunctionInfo  f  String  fnName  Map  functionInfos  int  args  optionalArgs  result  
[BugLab_Argument_Swapping]^checkCall ( n, tnName, Collections.singletonList ( f ) , f, level ) ;^150^^^^^135^165^checkCall ( n, fnName, Collections.singletonList ( f ) , t, level ) ;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  NodeTraversal  t  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Var  v  Node  fn  fnDef  n  parent  FunctionInfo  f  String  fnName  Map  functionInfos  int  args  optionalArgs  result  
[BugLab_Argument_Swapping]^checkCall ( n, levelnName, Collections.singletonList ( f ) , t, f ) ;^150^^^^^135^165^checkCall ( n, fnName, Collections.singletonList ( f ) , t, level ) ;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  NodeTraversal  t  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Var  v  Node  fn  fnDef  n  parent  FunctionInfo  f  String  fnName  Map  functionInfos  int  args  optionalArgs  result  
[BugLab_Variable_Misuse]^if  ( parent == null || fnDef.getType (  )  != Token.FUNCTION )  {^142^143^^^^127^157^if  ( fnDef == null || fnDef.getType (  )  != Token.FUNCTION )  {^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  NodeTraversal  t  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Var  v  Node  fn  fnDef  n  parent  FunctionInfo  f  String  fnName  Map  functionInfos  int  args  optionalArgs  result  
[BugLab_Variable_Misuse]^Node fn = parent.getFirstChild (  ) ;^128^^^^^113^143^Node fn = n.getFirstChild (  ) ;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  NodeTraversal  t  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Var  v  Node  fn  fnDef  n  parent  FunctionInfo  f  String  fnName  Map  functionInfos  int  args  optionalArgs  result  
[BugLab_Variable_Misuse]^switch  ( parent.getType (  )  )  {^124^^^^^109^139^switch  ( n.getType (  )  )  {^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  NodeTraversal  t  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Var  v  Node  fn  fnDef  n  parent  FunctionInfo  f  String  fnName  Map  functionInfos  int  args  optionalArgs  result  
[BugLab_Argument_Swapping]^checkCall ( fnName, n, Collections.singletonList ( f ) , t, level ) ;^150^^^^^135^165^checkCall ( n, fnName, Collections.singletonList ( f ) , t, level ) ;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  NodeTraversal  t  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Var  v  Node  fn  fnDef  n  parent  FunctionInfo  f  String  fnName  Map  functionInfos  int  args  optionalArgs  result  
[BugLab_Argument_Swapping]^checkCall ( f, nnName, Collections.singletonList ( f ) , t, level ) ;^150^^^^^135^165^checkCall ( n, fnName, Collections.singletonList ( f ) , t, level ) ;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  NodeTraversal  t  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Var  v  Node  fn  fnDef  n  parent  FunctionInfo  f  String  fnName  Map  functionInfos  int  args  optionalArgs  result  
[BugLab_Argument_Swapping]^checkCall ( n, fnName, Collections.singletonList ( f ) , level, t ) ;^150^^^^^135^165^checkCall ( n, fnName, Collections.singletonList ( f ) , t, level ) ;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  NodeTraversal  t  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Var  v  Node  fn  fnDef  n  parent  FunctionInfo  f  String  fnName  Map  functionInfos  int  args  optionalArgs  result  
[BugLab_Wrong_Operator]^int count = n.getChildCount (  )    instanceof   1;^162^^^^^161^189^int count = n.getChildCount (  )  - 1;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] checkCall [RETURN_TYPE] void   Node n String fnName FunctionInfo> infos NodeTraversal t CheckLevel level [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  matched  Iterable  infos  NodeTraversal  t  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Node  n  FunctionInfo  f  String  fnName  Map  functionInfos  int  args  count  maxArgs  minArgs  optionalArgs  requiredCount  result  
[BugLab_Wrong_Literal]^int count = n.getChildCount (  )  ;^162^^^^^161^189^int count = n.getChildCount (  )  - 1;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] checkCall [RETURN_TYPE] void   Node n String fnName FunctionInfo> infos NodeTraversal t CheckLevel level [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  matched  Iterable  infos  NodeTraversal  t  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Node  n  FunctionInfo  f  String  fnName  Map  functionInfos  int  args  count  maxArgs  minArgs  optionalArgs  requiredCount  result  
[BugLab_Wrong_Literal]^boolean matched = true;^163^^^^^161^189^boolean matched = false;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] checkCall [RETURN_TYPE] void   Node n String fnName FunctionInfo> infos NodeTraversal t CheckLevel level [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  matched  Iterable  infos  NodeTraversal  t  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Node  n  FunctionInfo  f  String  fnName  Map  functionInfos  int  args  count  maxArgs  minArgs  optionalArgs  requiredCount  result  
[BugLab_Variable_Misuse]^if  ( optionalArgs >= requiredCount &&  ( count <= f.args || f.hasVarArgs )  )  {^170^^^^^161^189^if  ( count >= requiredCount &&  ( count <= f.args || f.hasVarArgs )  )  {^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] checkCall [RETURN_TYPE] void   Node n String fnName FunctionInfo> infos NodeTraversal t CheckLevel level [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  matched  Iterable  infos  NodeTraversal  t  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Node  n  FunctionInfo  f  String  fnName  Map  functionInfos  int  args  count  maxArgs  minArgs  optionalArgs  requiredCount  result  
[BugLab_Variable_Misuse]^if  ( count >= result &&  ( count <= f.args || f.hasVarArgs )  )  {^170^^^^^161^189^if  ( count >= requiredCount &&  ( count <= f.args || f.hasVarArgs )  )  {^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] checkCall [RETURN_TYPE] void   Node n String fnName FunctionInfo> infos NodeTraversal t CheckLevel level [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  matched  Iterable  infos  NodeTraversal  t  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Node  n  FunctionInfo  f  String  fnName  Map  functionInfos  int  args  count  maxArgs  minArgs  optionalArgs  requiredCount  result  
[BugLab_Variable_Misuse]^if  ( count >= requiredCount &&  ( count <= result || f.hasVarArgs )  )  {^170^^^^^161^189^if  ( count >= requiredCount &&  ( count <= f.args || f.hasVarArgs )  )  {^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] checkCall [RETURN_TYPE] void   Node n String fnName FunctionInfo> infos NodeTraversal t CheckLevel level [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  matched  Iterable  infos  NodeTraversal  t  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Node  n  FunctionInfo  f  String  fnName  Map  functionInfos  int  args  count  maxArgs  minArgs  optionalArgs  requiredCount  result  
[BugLab_Variable_Misuse]^if  ( count >= requiredCount &&  ( count <= f.args || matched )  )  {^170^^^^^161^189^if  ( count >= requiredCount &&  ( count <= f.args || f.hasVarArgs )  )  {^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] checkCall [RETURN_TYPE] void   Node n String fnName FunctionInfo> infos NodeTraversal t CheckLevel level [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  matched  Iterable  infos  NodeTraversal  t  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Node  n  FunctionInfo  f  String  fnName  Map  functionInfos  int  args  count  maxArgs  minArgs  optionalArgs  requiredCount  result  
[BugLab_Argument_Swapping]^if  ( requiredCount >= count &&  ( count <= f.args || f.hasVarArgs )  )  {^170^^^^^161^189^if  ( count >= requiredCount &&  ( count <= f.args || f.hasVarArgs )  )  {^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] checkCall [RETURN_TYPE] void   Node n String fnName FunctionInfo> infos NodeTraversal t CheckLevel level [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  matched  Iterable  infos  NodeTraversal  t  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Node  n  FunctionInfo  f  String  fnName  Map  functionInfos  int  args  count  maxArgs  minArgs  optionalArgs  requiredCount  result  
[BugLab_Argument_Swapping]^if  ( count >= f.args &&  ( count <= requiredCount || f.hasVarArgs )  )  {^170^^^^^161^189^if  ( count >= requiredCount &&  ( count <= f.args || f.hasVarArgs )  )  {^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] checkCall [RETURN_TYPE] void   Node n String fnName FunctionInfo> infos NodeTraversal t CheckLevel level [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  matched  Iterable  infos  NodeTraversal  t  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Node  n  FunctionInfo  f  String  fnName  Map  functionInfos  int  args  count  maxArgs  minArgs  optionalArgs  requiredCount  result  
[BugLab_Argument_Swapping]^if  ( count >= requiredCount &&  ( count <= f.hasVarArgs.args || f )  )  {^170^^^^^161^189^if  ( count >= requiredCount &&  ( count <= f.args || f.hasVarArgs )  )  {^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] checkCall [RETURN_TYPE] void   Node n String fnName FunctionInfo> infos NodeTraversal t CheckLevel level [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  matched  Iterable  infos  NodeTraversal  t  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Node  n  FunctionInfo  f  String  fnName  Map  functionInfos  int  args  count  maxArgs  minArgs  optionalArgs  requiredCount  result  
[BugLab_Argument_Swapping]^if  ( f.args >= requiredCount &&  ( count <= count || f.hasVarArgs )  )  {^170^^^^^161^189^if  ( count >= requiredCount &&  ( count <= f.args || f.hasVarArgs )  )  {^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] checkCall [RETURN_TYPE] void   Node n String fnName FunctionInfo> infos NodeTraversal t CheckLevel level [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  matched  Iterable  infos  NodeTraversal  t  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Node  n  FunctionInfo  f  String  fnName  Map  functionInfos  int  args  count  maxArgs  minArgs  optionalArgs  requiredCount  result  
[BugLab_Argument_Swapping]^if  ( count >= f.hasVarArgs &&  ( count <= f.args || requiredCount )  )  {^170^^^^^161^189^if  ( count >= requiredCount &&  ( count <= f.args || f.hasVarArgs )  )  {^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] checkCall [RETURN_TYPE] void   Node n String fnName FunctionInfo> infos NodeTraversal t CheckLevel level [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  matched  Iterable  infos  NodeTraversal  t  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Node  n  FunctionInfo  f  String  fnName  Map  functionInfos  int  args  count  maxArgs  minArgs  optionalArgs  requiredCount  result  
[BugLab_Wrong_Operator]^if  ( count >= requiredCount ||  ( count <= f.args || f.hasVarArgs )  )  {^170^^^^^161^189^if  ( count >= requiredCount &&  ( count <= f.args || f.hasVarArgs )  )  {^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] checkCall [RETURN_TYPE] void   Node n String fnName FunctionInfo> infos NodeTraversal t CheckLevel level [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  matched  Iterable  infos  NodeTraversal  t  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Node  n  FunctionInfo  f  String  fnName  Map  functionInfos  int  args  count  maxArgs  minArgs  optionalArgs  requiredCount  result  
[BugLab_Wrong_Operator]^if  ( count > requiredCount &&  ( count <= f.args || f.hasVarArgs )  )  {^170^^^^^161^189^if  ( count >= requiredCount &&  ( count <= f.args || f.hasVarArgs )  )  {^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] checkCall [RETURN_TYPE] void   Node n String fnName FunctionInfo> infos NodeTraversal t CheckLevel level [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  matched  Iterable  infos  NodeTraversal  t  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Node  n  FunctionInfo  f  String  fnName  Map  functionInfos  int  args  count  maxArgs  minArgs  optionalArgs  requiredCount  result  
[BugLab_Wrong_Operator]^if  ( count >= requiredCount &&  ( count <= f.args && f.hasVarArgs )  )  {^170^^^^^161^189^if  ( count >= requiredCount &&  ( count <= f.args || f.hasVarArgs )  )  {^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] checkCall [RETURN_TYPE] void   Node n String fnName FunctionInfo> infos NodeTraversal t CheckLevel level [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  matched  Iterable  infos  NodeTraversal  t  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Node  n  FunctionInfo  f  String  fnName  Map  functionInfos  int  args  count  maxArgs  minArgs  optionalArgs  requiredCount  result  
[BugLab_Wrong_Operator]^if  ( count >= requiredCount &&  ( count < f.args || f.hasVarArgs )  )  {^170^^^^^161^189^if  ( count >= requiredCount &&  ( count <= f.args || f.hasVarArgs )  )  {^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] checkCall [RETURN_TYPE] void   Node n String fnName FunctionInfo> infos NodeTraversal t CheckLevel level [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  matched  Iterable  infos  NodeTraversal  t  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Node  n  FunctionInfo  f  String  fnName  Map  functionInfos  int  args  count  maxArgs  minArgs  optionalArgs  requiredCount  result  
[BugLab_Wrong_Literal]^matched = false;^171^^^^^161^189^matched = true;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] checkCall [RETURN_TYPE] void   Node n String fnName FunctionInfo> infos NodeTraversal t CheckLevel level [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  matched  Iterable  infos  NodeTraversal  t  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Node  n  FunctionInfo  f  String  fnName  Map  functionInfos  int  args  count  maxArgs  minArgs  optionalArgs  requiredCount  result  
[BugLab_Variable_Misuse]^minArgs = Math.min ( optionalArgs, requiredCount ) ;^175^^^^^161^189^minArgs = Math.min ( minArgs, requiredCount ) ;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] checkCall [RETURN_TYPE] void   Node n String fnName FunctionInfo> infos NodeTraversal t CheckLevel level [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  matched  Iterable  infos  NodeTraversal  t  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Node  n  FunctionInfo  f  String  fnName  Map  functionInfos  int  args  count  maxArgs  minArgs  optionalArgs  requiredCount  result  
[BugLab_Variable_Misuse]^minArgs = Math.min ( minArgs, optionalArgs ) ;^175^^^^^161^189^minArgs = Math.min ( minArgs, requiredCount ) ;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] checkCall [RETURN_TYPE] void   Node n String fnName FunctionInfo> infos NodeTraversal t CheckLevel level [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  matched  Iterable  infos  NodeTraversal  t  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Node  n  FunctionInfo  f  String  fnName  Map  functionInfos  int  args  count  maxArgs  minArgs  optionalArgs  requiredCount  result  
[BugLab_Argument_Swapping]^minArgs = Math.min ( requiredCount, minArgs ) ;^175^^^^^161^189^minArgs = Math.min ( minArgs, requiredCount ) ;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] checkCall [RETURN_TYPE] void   Node n String fnName FunctionInfo> infos NodeTraversal t CheckLevel level [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  matched  Iterable  infos  NodeTraversal  t  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Node  n  FunctionInfo  f  String  fnName  Map  functionInfos  int  args  count  maxArgs  minArgs  optionalArgs  requiredCount  result  
[BugLab_Variable_Misuse]^maxArgs = Math.max ( requiredCount, f.hasVarArgs ? Integer.MAX_VALUE : f.args ) ;^176^^^^^161^189^maxArgs = Math.max ( maxArgs, f.hasVarArgs ? Integer.MAX_VALUE : f.args ) ;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] checkCall [RETURN_TYPE] void   Node n String fnName FunctionInfo> infos NodeTraversal t CheckLevel level [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  matched  Iterable  infos  NodeTraversal  t  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Node  n  FunctionInfo  f  String  fnName  Map  functionInfos  int  args  count  maxArgs  minArgs  optionalArgs  requiredCount  result  
[BugLab_Variable_Misuse]^maxArgs = Math.max ( maxArgs, matched ? Integer.MAX_VALUE : f.args ) ;^176^^^^^161^189^maxArgs = Math.max ( maxArgs, f.hasVarArgs ? Integer.MAX_VALUE : f.args ) ;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] checkCall [RETURN_TYPE] void   Node n String fnName FunctionInfo> infos NodeTraversal t CheckLevel level [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  matched  Iterable  infos  NodeTraversal  t  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Node  n  FunctionInfo  f  String  fnName  Map  functionInfos  int  args  count  maxArgs  minArgs  optionalArgs  requiredCount  result  
[BugLab_Variable_Misuse]^maxArgs = Math.max ( maxArgs, f.hasVarArgs ? Integer.result : f.args ) ;^176^^^^^161^189^maxArgs = Math.max ( maxArgs, f.hasVarArgs ? Integer.MAX_VALUE : f.args ) ;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] checkCall [RETURN_TYPE] void   Node n String fnName FunctionInfo> infos NodeTraversal t CheckLevel level [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  matched  Iterable  infos  NodeTraversal  t  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Node  n  FunctionInfo  f  String  fnName  Map  functionInfos  int  args  count  maxArgs  minArgs  optionalArgs  requiredCount  result  
[BugLab_Variable_Misuse]^maxArgs = Math.max ( maxArgs, f.hasVarArgs ? Integer.MAX_VALUE : result ) ;^176^^^^^161^189^maxArgs = Math.max ( maxArgs, f.hasVarArgs ? Integer.MAX_VALUE : f.args ) ;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] checkCall [RETURN_TYPE] void   Node n String fnName FunctionInfo> infos NodeTraversal t CheckLevel level [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  matched  Iterable  infos  NodeTraversal  t  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Node  n  FunctionInfo  f  String  fnName  Map  functionInfos  int  args  count  maxArgs  minArgs  optionalArgs  requiredCount  result  
[BugLab_Argument_Swapping]^maxArgs = Math.max ( f.args, f.hasVarArgs ? Integer.MAX_VALUE : maxArgs ) ;^176^^^^^161^189^maxArgs = Math.max ( maxArgs, f.hasVarArgs ? Integer.MAX_VALUE : f.args ) ;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] checkCall [RETURN_TYPE] void   Node n String fnName FunctionInfo> infos NodeTraversal t CheckLevel level [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  matched  Iterable  infos  NodeTraversal  t  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Node  n  FunctionInfo  f  String  fnName  Map  functionInfos  int  args  count  maxArgs  minArgs  optionalArgs  requiredCount  result  
[BugLab_Argument_Swapping]^maxArgs = Math.max ( f, maxArgs.hasVarArgs ? Integer.MAX_VALUE : f.args ) ;^176^^^^^161^189^maxArgs = Math.max ( maxArgs, f.hasVarArgs ? Integer.MAX_VALUE : f.args ) ;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] checkCall [RETURN_TYPE] void   Node n String fnName FunctionInfo> infos NodeTraversal t CheckLevel level [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  matched  Iterable  infos  NodeTraversal  t  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Node  n  FunctionInfo  f  String  fnName  Map  functionInfos  int  args  count  maxArgs  minArgs  optionalArgs  requiredCount  result  
[BugLab_Argument_Swapping]^maxArgs = Math.max ( maxArgs, f.args ? Integer.MAX_VALUE : f.hasVarArgs ) ;^176^^^^^161^189^maxArgs = Math.max ( maxArgs, f.hasVarArgs ? Integer.MAX_VALUE : f.args ) ;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] checkCall [RETURN_TYPE] void   Node n String fnName FunctionInfo> infos NodeTraversal t CheckLevel level [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  matched  Iterable  infos  NodeTraversal  t  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Node  n  FunctionInfo  f  String  fnName  Map  functionInfos  int  args  count  maxArgs  minArgs  optionalArgs  requiredCount  result  
[BugLab_Argument_Swapping]^maxArgs = Math.max ( maxArgs, f.args.hasVarArgs ? Integer.MAX_VALUE : f ) ;^176^^^^^161^189^maxArgs = Math.max ( maxArgs, f.hasVarArgs ? Integer.MAX_VALUE : f.args ) ;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] checkCall [RETURN_TYPE] void   Node n String fnName FunctionInfo> infos NodeTraversal t CheckLevel level [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  matched  Iterable  infos  NodeTraversal  t  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Node  n  FunctionInfo  f  String  fnName  Map  functionInfos  int  args  count  maxArgs  minArgs  optionalArgs  requiredCount  result  
[BugLab_Variable_Misuse]^int requiredCount = result - f.optionalArgs;^169^^^^^161^189^int requiredCount = f.args - f.optionalArgs;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] checkCall [RETURN_TYPE] void   Node n String fnName FunctionInfo> infos NodeTraversal t CheckLevel level [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  matched  Iterable  infos  NodeTraversal  t  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Node  n  FunctionInfo  f  String  fnName  Map  functionInfos  int  args  count  maxArgs  minArgs  optionalArgs  requiredCount  result  
[BugLab_Variable_Misuse]^int requiredCount = f.args - result;^169^^^^^161^189^int requiredCount = f.args - f.optionalArgs;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] checkCall [RETURN_TYPE] void   Node n String fnName FunctionInfo> infos NodeTraversal t CheckLevel level [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  matched  Iterable  infos  NodeTraversal  t  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Node  n  FunctionInfo  f  String  fnName  Map  functionInfos  int  args  count  maxArgs  minArgs  optionalArgs  requiredCount  result  
[BugLab_Argument_Swapping]^int requiredCount = f.args.args - f.optionalArgs;^169^^^^^161^189^int requiredCount = f.args - f.optionalArgs;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] checkCall [RETURN_TYPE] void   Node n String fnName FunctionInfo> infos NodeTraversal t CheckLevel level [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  matched  Iterable  infos  NodeTraversal  t  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Node  n  FunctionInfo  f  String  fnName  Map  functionInfos  int  args  count  maxArgs  minArgs  optionalArgs  requiredCount  result  
[BugLab_Argument_Swapping]^int requiredCount = f - f.args.optionalArgs;^169^^^^^161^189^int requiredCount = f.args - f.optionalArgs;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] checkCall [RETURN_TYPE] void   Node n String fnName FunctionInfo> infos NodeTraversal t CheckLevel level [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  matched  Iterable  infos  NodeTraversal  t  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Node  n  FunctionInfo  f  String  fnName  Map  functionInfos  int  args  count  maxArgs  minArgs  optionalArgs  requiredCount  result  
[BugLab_Argument_Swapping]^int requiredCount = f.optionalArgs.args - f;^169^^^^^161^189^int requiredCount = f.args - f.optionalArgs;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] checkCall [RETURN_TYPE] void   Node n String fnName FunctionInfo> infos NodeTraversal t CheckLevel level [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  matched  Iterable  infos  NodeTraversal  t  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Node  n  FunctionInfo  f  String  fnName  Map  functionInfos  int  args  count  maxArgs  minArgs  optionalArgs  requiredCount  result  
[BugLab_Wrong_Operator]^int requiredCount = f.args   instanceof   f.optionalArgs;^169^^^^^161^189^int requiredCount = f.args - f.optionalArgs;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] checkCall [RETURN_TYPE] void   Node n String fnName FunctionInfo> infos NodeTraversal t CheckLevel level [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  matched  Iterable  infos  NodeTraversal  t  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Node  n  FunctionInfo  f  String  fnName  Map  functionInfos  int  args  count  maxArgs  minArgs  optionalArgs  requiredCount  result  
[BugLab_Variable_Misuse]^minArgs = Math.min ( minArgs, result ) ;^175^^^^^161^189^minArgs = Math.min ( minArgs, requiredCount ) ;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] checkCall [RETURN_TYPE] void   Node n String fnName FunctionInfo> infos NodeTraversal t CheckLevel level [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  matched  Iterable  infos  NodeTraversal  t  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Node  n  FunctionInfo  f  String  fnName  Map  functionInfos  int  args  count  maxArgs  minArgs  optionalArgs  requiredCount  result  
[BugLab_Variable_Misuse]^maxArgs = Math.max ( result, f.hasVarArgs ? Integer.MAX_VALUE : f.args ) ;^176^^^^^161^189^maxArgs = Math.max ( maxArgs, f.hasVarArgs ? Integer.MAX_VALUE : f.args ) ;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] checkCall [RETURN_TYPE] void   Node n String fnName FunctionInfo> infos NodeTraversal t CheckLevel level [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  matched  Iterable  infos  NodeTraversal  t  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Node  n  FunctionInfo  f  String  fnName  Map  functionInfos  int  args  count  maxArgs  minArgs  optionalArgs  requiredCount  result  
[BugLab_Variable_Misuse]^maxArgs = Math.max ( maxArgs, f.hasVarArgs ? Integer.MAX_VALUE : requiredCount ) ;^176^^^^^161^189^maxArgs = Math.max ( maxArgs, f.hasVarArgs ? Integer.MAX_VALUE : f.args ) ;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] checkCall [RETURN_TYPE] void   Node n String fnName FunctionInfo> infos NodeTraversal t CheckLevel level [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  matched  Iterable  infos  NodeTraversal  t  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Node  n  FunctionInfo  f  String  fnName  Map  functionInfos  int  args  count  maxArgs  minArgs  optionalArgs  requiredCount  result  
[BugLab_Variable_Misuse]^if  ( !hasVarArgs )  {^179^^^^^161^189^if  ( !matched )  {^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] checkCall [RETURN_TYPE] void   Node n String fnName FunctionInfo> infos NodeTraversal t CheckLevel level [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  matched  Iterable  infos  NodeTraversal  t  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Node  n  FunctionInfo  f  String  fnName  Map  functionInfos  int  args  count  maxArgs  minArgs  optionalArgs  requiredCount  result  
[BugLab_Variable_Misuse]^t.getCompiler (  ) .report ( JSError.make ( t, n, level, VAR_ARGS_ERROR, fnName,^180^181^182^183^^161^189^t.getCompiler (  ) .report ( JSError.make ( t, n, level, WRONG_ARGUMENT_COUNT_ERROR, fnName,^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] checkCall [RETURN_TYPE] void   Node n String fnName FunctionInfo> infos NodeTraversal t CheckLevel level [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  matched  Iterable  infos  NodeTraversal  t  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Node  n  FunctionInfo  f  String  fnName  Map  functionInfos  int  args  count  maxArgs  minArgs  optionalArgs  requiredCount  result  
[BugLab_Argument_Swapping]^t.getCompiler (  ) .report ( JSError.make ( t, n, WRONG_ARGUMENT_COUNT_ERROR, level, fnName,^180^181^182^183^^161^189^t.getCompiler (  ) .report ( JSError.make ( t, n, level, WRONG_ARGUMENT_COUNT_ERROR, fnName,^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] checkCall [RETURN_TYPE] void   Node n String fnName FunctionInfo> infos NodeTraversal t CheckLevel level [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  matched  Iterable  infos  NodeTraversal  t  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Node  n  FunctionInfo  f  String  fnName  Map  functionInfos  int  args  count  maxArgs  minArgs  optionalArgs  requiredCount  result  
[BugLab_Argument_Swapping]^t.getCompiler (  ) .report ( JSError.make ( t, n, level, fnName, WRONG_ARGUMENT_COUNT_ERROR,^180^181^182^183^^161^189^t.getCompiler (  ) .report ( JSError.make ( t, n, level, WRONG_ARGUMENT_COUNT_ERROR, fnName,^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] checkCall [RETURN_TYPE] void   Node n String fnName FunctionInfo> infos NodeTraversal t CheckLevel level [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  matched  Iterable  infos  NodeTraversal  t  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Node  n  FunctionInfo  f  String  fnName  Map  functionInfos  int  args  count  maxArgs  minArgs  optionalArgs  requiredCount  result  
[BugLab_Variable_Misuse]^JSError.make ( t, n, level, WRONG_ARGUMENT_COUNT_ERROR, fnName, String.valueOf ( result ) , String.valueOf ( minArgs ) ,^181^182^183^184^^161^189^JSError.make ( t, n, level, WRONG_ARGUMENT_COUNT_ERROR, fnName, String.valueOf ( count ) , String.valueOf ( minArgs ) ,^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] checkCall [RETURN_TYPE] void   Node n String fnName FunctionInfo> infos NodeTraversal t CheckLevel level [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  matched  Iterable  infos  NodeTraversal  t  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Node  n  FunctionInfo  f  String  fnName  Map  functionInfos  int  args  count  maxArgs  minArgs  optionalArgs  requiredCount  result  
[BugLab_Variable_Misuse]^JSError.make ( t, n, level, WRONG_ARGUMENT_COUNT_ERROR, fnName, String.valueOf ( count ) , String.valueOf ( result ) ,^181^182^183^184^^161^189^JSError.make ( t, n, level, WRONG_ARGUMENT_COUNT_ERROR, fnName, String.valueOf ( count ) , String.valueOf ( minArgs ) ,^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] checkCall [RETURN_TYPE] void   Node n String fnName FunctionInfo> infos NodeTraversal t CheckLevel level [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  matched  Iterable  infos  NodeTraversal  t  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Node  n  FunctionInfo  f  String  fnName  Map  functionInfos  int  args  count  maxArgs  minArgs  optionalArgs  requiredCount  result  
[BugLab_Variable_Misuse]^JSError.make ( t, n, level, VAR_ARGS_ERROR, fnName, String.valueOf ( count ) , String.valueOf ( minArgs ) ,^181^182^183^184^^161^189^JSError.make ( t, n, level, WRONG_ARGUMENT_COUNT_ERROR, fnName, String.valueOf ( count ) , String.valueOf ( minArgs ) ,^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] checkCall [RETURN_TYPE] void   Node n String fnName FunctionInfo> infos NodeTraversal t CheckLevel level [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  matched  Iterable  infos  NodeTraversal  t  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Node  n  FunctionInfo  f  String  fnName  Map  functionInfos  int  args  count  maxArgs  minArgs  optionalArgs  requiredCount  result  
[BugLab_Argument_Swapping]^JSError.make ( n, t, level, WRONG_ARGUMENT_COUNT_ERROR, fnName, String.valueOf ( count ) , String.valueOf ( minArgs ) ,^181^182^183^184^^161^189^JSError.make ( t, n, level, WRONG_ARGUMENT_COUNT_ERROR, fnName, String.valueOf ( count ) , String.valueOf ( minArgs ) ,^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] checkCall [RETURN_TYPE] void   Node n String fnName FunctionInfo> infos NodeTraversal t CheckLevel level [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  matched  Iterable  infos  NodeTraversal  t  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Node  n  FunctionInfo  f  String  fnName  Map  functionInfos  int  args  count  maxArgs  minArgs  optionalArgs  requiredCount  result  
[BugLab_Argument_Swapping]^JSError.make ( t, n, fnName, WRONG_ARGUMENT_COUNT_ERROR, level, String.valueOf ( count ) , String.valueOf ( minArgs ) ,^181^182^183^184^^161^189^JSError.make ( t, n, level, WRONG_ARGUMENT_COUNT_ERROR, fnName, String.valueOf ( count ) , String.valueOf ( minArgs ) ,^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] checkCall [RETURN_TYPE] void   Node n String fnName FunctionInfo> infos NodeTraversal t CheckLevel level [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  matched  Iterable  infos  NodeTraversal  t  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Node  n  FunctionInfo  f  String  fnName  Map  functionInfos  int  args  count  maxArgs  minArgs  optionalArgs  requiredCount  result  
[BugLab_Argument_Swapping]^JSError.make ( t, n, level, fnName, WRONG_ARGUMENT_COUNT_ERROR, String.valueOf ( count ) , String.valueOf ( minArgs ) ,^181^182^183^184^^161^189^JSError.make ( t, n, level, WRONG_ARGUMENT_COUNT_ERROR, fnName, String.valueOf ( count ) , String.valueOf ( minArgs ) ,^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] checkCall [RETURN_TYPE] void   Node n String fnName FunctionInfo> infos NodeTraversal t CheckLevel level [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  matched  Iterable  infos  NodeTraversal  t  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Node  n  FunctionInfo  f  String  fnName  Map  functionInfos  int  args  count  maxArgs  minArgs  optionalArgs  requiredCount  result  
[BugLab_Argument_Swapping]^JSError.make ( t, n, level, WRONG_ARGUMENT_COUNT_ERROR, fnName, String.valueOf ( minArgs ) , String.valueOf ( count ) ,^181^182^183^184^^161^189^JSError.make ( t, n, level, WRONG_ARGUMENT_COUNT_ERROR, fnName, String.valueOf ( count ) , String.valueOf ( minArgs ) ,^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] checkCall [RETURN_TYPE] void   Node n String fnName FunctionInfo> infos NodeTraversal t CheckLevel level [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  matched  Iterable  infos  NodeTraversal  t  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Node  n  FunctionInfo  f  String  fnName  Map  functionInfos  int  args  count  maxArgs  minArgs  optionalArgs  requiredCount  result  
[BugLab_Variable_Misuse]^String.valueOf ( result ) , String.valueOf ( minArgs ) , maxArgs != Integer.MAX_VALUE ? " and no more than " + maxArgs + " argument ( s ) " : "" )  ) ;^184^185^186^187^^161^189^String.valueOf ( count ) , String.valueOf ( minArgs ) , maxArgs != Integer.MAX_VALUE ? " and no more than " + maxArgs + " argument ( s ) " : "" )  ) ;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] checkCall [RETURN_TYPE] void   Node n String fnName FunctionInfo> infos NodeTraversal t CheckLevel level [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  matched  Iterable  infos  NodeTraversal  t  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Node  n  FunctionInfo  f  String  fnName  Map  functionInfos  int  args  count  maxArgs  minArgs  optionalArgs  requiredCount  result  
[BugLab_Variable_Misuse]^String.valueOf ( count ) , String.valueOf ( optionalArgs ) , maxArgs != Integer.MAX_VALUE ? " and no more than " + maxArgs + " argument ( s ) " : "" )  ) ;^184^185^186^187^^161^189^String.valueOf ( count ) , String.valueOf ( minArgs ) , maxArgs != Integer.MAX_VALUE ? " and no more than " + maxArgs + " argument ( s ) " : "" )  ) ;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] checkCall [RETURN_TYPE] void   Node n String fnName FunctionInfo> infos NodeTraversal t CheckLevel level [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  matched  Iterable  infos  NodeTraversal  t  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Node  n  FunctionInfo  f  String  fnName  Map  functionInfos  int  args  count  maxArgs  minArgs  optionalArgs  requiredCount  result  
[BugLab_Argument_Swapping]^t.getCompiler (  ) .report ( JSError.make ( WRONG_ARGUMENT_COUNT_ERROR, n, level, t, fnName,^180^181^182^183^^161^189^t.getCompiler (  ) .report ( JSError.make ( t, n, level, WRONG_ARGUMENT_COUNT_ERROR, fnName,^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] checkCall [RETURN_TYPE] void   Node n String fnName FunctionInfo> infos NodeTraversal t CheckLevel level [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  matched  Iterable  infos  NodeTraversal  t  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Node  n  FunctionInfo  f  String  fnName  Map  functionInfos  int  args  count  maxArgs  minArgs  optionalArgs  requiredCount  result  
[BugLab_Argument_Swapping]^t.getCompiler (  ) .report ( JSError.make ( t, WRONG_ARGUMENT_COUNT_ERROR, level, n, fnName,^180^181^182^183^^161^189^t.getCompiler (  ) .report ( JSError.make ( t, n, level, WRONG_ARGUMENT_COUNT_ERROR, fnName,^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] checkCall [RETURN_TYPE] void   Node n String fnName FunctionInfo> infos NodeTraversal t CheckLevel level [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  matched  Iterable  infos  NodeTraversal  t  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Node  n  FunctionInfo  f  String  fnName  Map  functionInfos  int  args  count  maxArgs  minArgs  optionalArgs  requiredCount  result  
[BugLab_Variable_Misuse]^JSError.make ( t, n, level, WRONG_ARGUMENT_COUNT_ERROR, fnName, String.valueOf ( requiredCount ) , String.valueOf ( minArgs ) ,^181^182^183^184^^161^189^JSError.make ( t, n, level, WRONG_ARGUMENT_COUNT_ERROR, fnName, String.valueOf ( count ) , String.valueOf ( minArgs ) ,^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] checkCall [RETURN_TYPE] void   Node n String fnName FunctionInfo> infos NodeTraversal t CheckLevel level [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  matched  Iterable  infos  NodeTraversal  t  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Node  n  FunctionInfo  f  String  fnName  Map  functionInfos  int  args  count  maxArgs  minArgs  optionalArgs  requiredCount  result  
[BugLab_Argument_Swapping]^JSError.make ( level, n, t, WRONG_ARGUMENT_COUNT_ERROR, fnName, String.valueOf ( count ) , String.valueOf ( minArgs ) ,^181^182^183^184^^161^189^JSError.make ( t, n, level, WRONG_ARGUMENT_COUNT_ERROR, fnName, String.valueOf ( count ) , String.valueOf ( minArgs ) ,^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] checkCall [RETURN_TYPE] void   Node n String fnName FunctionInfo> infos NodeTraversal t CheckLevel level [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  matched  Iterable  infos  NodeTraversal  t  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Node  n  FunctionInfo  f  String  fnName  Map  functionInfos  int  args  count  maxArgs  minArgs  optionalArgs  requiredCount  result  
[BugLab_Argument_Swapping]^JSError.make ( t, count, level, WRONG_ARGUMENT_COUNT_ERROR, fnName, String.valueOf ( n ) , String.valueOf ( minArgs ) ,^181^182^183^184^^161^189^JSError.make ( t, n, level, WRONG_ARGUMENT_COUNT_ERROR, fnName, String.valueOf ( count ) , String.valueOf ( minArgs ) ,^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] checkCall [RETURN_TYPE] void   Node n String fnName FunctionInfo> infos NodeTraversal t CheckLevel level [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  matched  Iterable  infos  NodeTraversal  t  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Node  n  FunctionInfo  f  String  fnName  Map  functionInfos  int  args  count  maxArgs  minArgs  optionalArgs  requiredCount  result  
[BugLab_Argument_Swapping]^JSError.make ( t, n, WRONG_ARGUMENT_COUNT_ERROR, level, fnName, String.valueOf ( count ) , String.valueOf ( minArgs ) ,^181^182^183^184^^161^189^JSError.make ( t, n, level, WRONG_ARGUMENT_COUNT_ERROR, fnName, String.valueOf ( count ) , String.valueOf ( minArgs ) ,^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] checkCall [RETURN_TYPE] void   Node n String fnName FunctionInfo> infos NodeTraversal t CheckLevel level [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  matched  Iterable  infos  NodeTraversal  t  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Node  n  FunctionInfo  f  String  fnName  Map  functionInfos  int  args  count  maxArgs  minArgs  optionalArgs  requiredCount  result  
[BugLab_Argument_Swapping]^JSError.make ( t, n, level, WRONG_ARGUMENT_COUNT_ERROR, minArgs, String.valueOf ( count ) , String.valueOf ( fnName ) ,^181^182^183^184^^161^189^JSError.make ( t, n, level, WRONG_ARGUMENT_COUNT_ERROR, fnName, String.valueOf ( count ) , String.valueOf ( minArgs ) ,^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] checkCall [RETURN_TYPE] void   Node n String fnName FunctionInfo> infos NodeTraversal t CheckLevel level [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  matched  Iterable  infos  NodeTraversal  t  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Node  n  FunctionInfo  f  String  fnName  Map  functionInfos  int  args  count  maxArgs  minArgs  optionalArgs  requiredCount  result  
[BugLab_Argument_Swapping]^FunctionInfo fi = fn.get ( functionInfos ) ;^201^^^^^200^207^FunctionInfo fi = functionInfos.get ( fn ) ;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] getFunctionInfo [RETURN_TYPE] FunctionCheck$FunctionInfo   Node fn String fnSourceName [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  matched  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Node  fn  FunctionInfo  fi  String  fnSourceName  Map  functionInfos  int  args  count  maxArgs  minArgs  optionalArgs  requiredCount  result  
[BugLab_Wrong_Operator]^if  ( fi != null )  {^202^^^^^200^207^if  ( fi == null )  {^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] getFunctionInfo [RETURN_TYPE] FunctionCheck$FunctionInfo   Node fn String fnSourceName [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  matched  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Node  fn  FunctionInfo  fi  String  fnSourceName  Map  functionInfos  int  args  count  maxArgs  minArgs  optionalArgs  requiredCount  result  
[BugLab_Argument_Swapping]^fi = createFunctionInfo ( compiler, fnSourceName, fn ) ;^203^^^^^200^207^fi = createFunctionInfo ( compiler, fn, fnSourceName ) ;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] getFunctionInfo [RETURN_TYPE] FunctionCheck$FunctionInfo   Node fn String fnSourceName [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  matched  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Node  fn  FunctionInfo  fi  String  fnSourceName  Map  functionInfos  int  args  count  maxArgs  minArgs  optionalArgs  requiredCount  result  
[BugLab_Argument_Swapping]^fi = createFunctionInfo ( fnSourceName, fn, compiler ) ;^203^^^^^200^207^fi = createFunctionInfo ( compiler, fn, fnSourceName ) ;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] getFunctionInfo [RETURN_TYPE] FunctionCheck$FunctionInfo   Node fn String fnSourceName [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  matched  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Node  fn  FunctionInfo  fi  String  fnSourceName  Map  functionInfos  int  args  count  maxArgs  minArgs  optionalArgs  requiredCount  result  
[BugLab_Argument_Swapping]^fi = createFunctionInfo ( fn, compiler, fnSourceName ) ;^203^^^^^200^207^fi = createFunctionInfo ( compiler, fn, fnSourceName ) ;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] getFunctionInfo [RETURN_TYPE] FunctionCheck$FunctionInfo   Node fn String fnSourceName [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  matched  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Node  fn  FunctionInfo  fi  String  fnSourceName  Map  functionInfos  int  args  count  maxArgs  minArgs  optionalArgs  requiredCount  result  
[BugLab_Argument_Swapping]^functionInfos.put ( fi, fn ) ;^204^^^^^200^207^functionInfos.put ( fn, fi ) ;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] getFunctionInfo [RETURN_TYPE] FunctionCheck$FunctionInfo   Node fn String fnSourceName [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  matched  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Node  fn  FunctionInfo  fi  String  fnSourceName  Map  functionInfos  int  args  count  maxArgs  minArgs  optionalArgs  requiredCount  result  
[BugLab_Wrong_Operator]^Preconditions.checkState ( fn.getType (  )  != Token.FUNCTION ) ;^220^^^^^205^235^Preconditions.checkState ( fn.getType (  )  == Token.FUNCTION ) ;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] createFunctionInfo [RETURN_TYPE] FunctionCheck$FunctionInfo   AbstractCompiler compiler Node fn String fnSourceName [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  matched  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Node  a  args  fn  varArg  String  argName  fnSourceName  Map  functionInfos  int  args  count  maxArgs  minArgs  numArgs  optArgs  optionalArgs  requiredCount  result  
[BugLab_Variable_Misuse]^Preconditions.checkState ( varArg.getType (  )  == Token.FUNCTION ) ;^220^^^^^205^235^Preconditions.checkState ( fn.getType (  )  == Token.FUNCTION ) ;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] createFunctionInfo [RETURN_TYPE] FunctionCheck$FunctionInfo   AbstractCompiler compiler Node fn String fnSourceName [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  matched  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Node  a  args  fn  varArg  String  argName  fnSourceName  Map  functionInfos  int  args  count  maxArgs  minArgs  numArgs  optArgs  optionalArgs  requiredCount  result  
[BugLab_Wrong_Literal]^int numArgs = count, optArgs = count;^224^^^^^209^239^int numArgs = 0, optArgs = 0;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] createFunctionInfo [RETURN_TYPE] FunctionCheck$FunctionInfo   AbstractCompiler compiler Node fn String fnSourceName [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  matched  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Node  a  args  fn  varArg  String  argName  fnSourceName  Map  functionInfos  int  args  count  maxArgs  minArgs  numArgs  optArgs  optionalArgs  requiredCount  result  
[BugLab_Wrong_Literal]^boolean hasVarArgs = true;^225^^^^^210^240^boolean hasVarArgs = false;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] createFunctionInfo [RETURN_TYPE] FunctionCheck$FunctionInfo   AbstractCompiler compiler Node fn String fnSourceName [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  matched  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Node  a  args  fn  varArg  String  argName  fnSourceName  Map  functionInfos  int  args  count  maxArgs  minArgs  numArgs  optArgs  optionalArgs  requiredCount  result  
[BugLab_Variable_Misuse]^Node args = varArg.getFirstChild (  ) .getNext (  ) ;^226^^^^^211^241^Node args = fn.getFirstChild (  ) .getNext (  ) ;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] createFunctionInfo [RETURN_TYPE] FunctionCheck$FunctionInfo   AbstractCompiler compiler Node fn String fnSourceName [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  matched  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Node  a  args  fn  varArg  String  argName  fnSourceName  Map  functionInfos  int  args  count  maxArgs  minArgs  numArgs  optArgs  optionalArgs  requiredCount  result  
[BugLab_Variable_Misuse]^if  ( matched )  {^232^^^^^217^247^if  ( hasVarArgs )  {^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] createFunctionInfo [RETURN_TYPE] FunctionCheck$FunctionInfo   AbstractCompiler compiler Node fn String fnSourceName [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  matched  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Node  a  args  fn  varArg  String  argName  fnSourceName  Map  functionInfos  int  args  count  maxArgs  minArgs  numArgs  optArgs  optionalArgs  requiredCount  result  
[BugLab_Variable_Misuse]^compiler.report ( JSError.make ( argName, a, VAR_ARGS_ERROR )  ) ;^234^^^^^219^249^compiler.report ( JSError.make ( fnSourceName, a, VAR_ARGS_ERROR )  ) ;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] createFunctionInfo [RETURN_TYPE] FunctionCheck$FunctionInfo   AbstractCompiler compiler Node fn String fnSourceName [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  matched  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Node  a  args  fn  varArg  String  argName  fnSourceName  Map  functionInfos  int  args  count  maxArgs  minArgs  numArgs  optArgs  optionalArgs  requiredCount  result  
[BugLab_Variable_Misuse]^compiler.report ( JSError.make ( fnSourceName, varArg, VAR_ARGS_ERROR )  ) ;^234^^^^^219^249^compiler.report ( JSError.make ( fnSourceName, a, VAR_ARGS_ERROR )  ) ;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] createFunctionInfo [RETURN_TYPE] FunctionCheck$FunctionInfo   AbstractCompiler compiler Node fn String fnSourceName [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  matched  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Node  a  args  fn  varArg  String  argName  fnSourceName  Map  functionInfos  int  args  count  maxArgs  minArgs  numArgs  optArgs  optionalArgs  requiredCount  result  
[BugLab_Variable_Misuse]^compiler.report ( JSError.make ( fnSourceName, a, WRONG_ARGUMENT_COUNT_ERROR )  ) ;^234^^^^^219^249^compiler.report ( JSError.make ( fnSourceName, a, VAR_ARGS_ERROR )  ) ;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] createFunctionInfo [RETURN_TYPE] FunctionCheck$FunctionInfo   AbstractCompiler compiler Node fn String fnSourceName [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  matched  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Node  a  args  fn  varArg  String  argName  fnSourceName  Map  functionInfos  int  args  count  maxArgs  minArgs  numArgs  optArgs  optionalArgs  requiredCount  result  
[BugLab_Argument_Swapping]^compiler.report ( JSError.make ( VAR_ARGS_ERROR, a, fnSourceName )  ) ;^234^^^^^219^249^compiler.report ( JSError.make ( fnSourceName, a, VAR_ARGS_ERROR )  ) ;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] createFunctionInfo [RETURN_TYPE] FunctionCheck$FunctionInfo   AbstractCompiler compiler Node fn String fnSourceName [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  matched  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Node  a  args  fn  varArg  String  argName  fnSourceName  Map  functionInfos  int  args  count  maxArgs  minArgs  numArgs  optArgs  optionalArgs  requiredCount  result  
[BugLab_Argument_Swapping]^compiler.report ( JSError.make ( a, fnSourceName, VAR_ARGS_ERROR )  ) ;^234^^^^^219^249^compiler.report ( JSError.make ( fnSourceName, a, VAR_ARGS_ERROR )  ) ;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] createFunctionInfo [RETURN_TYPE] FunctionCheck$FunctionInfo   AbstractCompiler compiler Node fn String fnSourceName [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  matched  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Node  a  args  fn  varArg  String  argName  fnSourceName  Map  functionInfos  int  args  count  maxArgs  minArgs  numArgs  optArgs  optionalArgs  requiredCount  result  
[BugLab_Argument_Swapping]^compiler.report ( JSError.make ( fnSourceName, VAR_ARGS_ERROR, a )  ) ;^234^^^^^219^249^compiler.report ( JSError.make ( fnSourceName, a, VAR_ARGS_ERROR )  ) ;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] createFunctionInfo [RETURN_TYPE] FunctionCheck$FunctionInfo   AbstractCompiler compiler Node fn String fnSourceName [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  matched  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Node  a  args  fn  varArg  String  argName  fnSourceName  Map  functionInfos  int  args  count  maxArgs  minArgs  numArgs  optArgs  optionalArgs  requiredCount  result  
[BugLab_Variable_Misuse]^if  ( varArg.getBooleanProp ( Node.IS_VAR_ARGS_PARAM )  )  {^237^^^^^222^252^if  ( a.getBooleanProp ( Node.IS_VAR_ARGS_PARAM )  )  {^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] createFunctionInfo [RETURN_TYPE] FunctionCheck$FunctionInfo   AbstractCompiler compiler Node fn String fnSourceName [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  matched  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Node  a  args  fn  varArg  String  argName  fnSourceName  Map  functionInfos  int  args  count  maxArgs  minArgs  numArgs  optArgs  optionalArgs  requiredCount  result  
[BugLab_Variable_Misuse]^} else if  ( varArg.getBooleanProp ( Node.IS_OPTIONAL_PARAM )  )  {^242^^^^^227^257^} else if  ( a.getBooleanProp ( Node.IS_OPTIONAL_PARAM )  )  {^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] createFunctionInfo [RETURN_TYPE] FunctionCheck$FunctionInfo   AbstractCompiler compiler Node fn String fnSourceName [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  matched  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Node  a  args  fn  varArg  String  argName  fnSourceName  Map  functionInfos  int  args  count  maxArgs  minArgs  numArgs  optArgs  optionalArgs  requiredCount  result  
[BugLab_Variable_Misuse]^} else if  ( result > 0 )  {^244^^^^^229^259^} else if  ( optArgs > 0 )  {^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] createFunctionInfo [RETURN_TYPE] FunctionCheck$FunctionInfo   AbstractCompiler compiler Node fn String fnSourceName [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  matched  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Node  a  args  fn  varArg  String  argName  fnSourceName  Map  functionInfos  int  args  count  maxArgs  minArgs  numArgs  optArgs  optionalArgs  requiredCount  result  
[BugLab_Wrong_Operator]^} else if  ( optArgs >= 0 )  {^244^^^^^229^259^} else if  ( optArgs > 0 )  {^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] createFunctionInfo [RETURN_TYPE] FunctionCheck$FunctionInfo   AbstractCompiler compiler Node fn String fnSourceName [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  matched  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Node  a  args  fn  varArg  String  argName  fnSourceName  Map  functionInfos  int  args  count  maxArgs  minArgs  numArgs  optArgs  optionalArgs  requiredCount  result  
[BugLab_Wrong_Literal]^} else if  ( optArgs > -1 )  {^244^^^^^229^259^} else if  ( optArgs > 0 )  {^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] createFunctionInfo [RETURN_TYPE] FunctionCheck$FunctionInfo   AbstractCompiler compiler Node fn String fnSourceName [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  matched  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Node  a  args  fn  varArg  String  argName  fnSourceName  Map  functionInfos  int  args  count  maxArgs  minArgs  numArgs  optArgs  optionalArgs  requiredCount  result  
[BugLab_Variable_Misuse]^compiler.report ( JSError.make ( argName, a, OPTIONAL_ARGS_ERROR )  ) ;^246^^^^^231^261^compiler.report ( JSError.make ( fnSourceName, a, OPTIONAL_ARGS_ERROR )  ) ;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] createFunctionInfo [RETURN_TYPE] FunctionCheck$FunctionInfo   AbstractCompiler compiler Node fn String fnSourceName [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  matched  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Node  a  args  fn  varArg  String  argName  fnSourceName  Map  functionInfos  int  args  count  maxArgs  minArgs  numArgs  optArgs  optionalArgs  requiredCount  result  
[BugLab_Variable_Misuse]^compiler.report ( JSError.make ( fnSourceName, varArg, OPTIONAL_ARGS_ERROR )  ) ;^246^^^^^231^261^compiler.report ( JSError.make ( fnSourceName, a, OPTIONAL_ARGS_ERROR )  ) ;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] createFunctionInfo [RETURN_TYPE] FunctionCheck$FunctionInfo   AbstractCompiler compiler Node fn String fnSourceName [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  matched  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Node  a  args  fn  varArg  String  argName  fnSourceName  Map  functionInfos  int  args  count  maxArgs  minArgs  numArgs  optArgs  optionalArgs  requiredCount  result  
[BugLab_Variable_Misuse]^compiler.report ( JSError.make ( fnSourceName, a, WRONG_ARGUMENT_COUNT_ERROR )  ) ;^246^^^^^231^261^compiler.report ( JSError.make ( fnSourceName, a, OPTIONAL_ARGS_ERROR )  ) ;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] createFunctionInfo [RETURN_TYPE] FunctionCheck$FunctionInfo   AbstractCompiler compiler Node fn String fnSourceName [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  matched  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Node  a  args  fn  varArg  String  argName  fnSourceName  Map  functionInfos  int  args  count  maxArgs  minArgs  numArgs  optArgs  optionalArgs  requiredCount  result  
[BugLab_Argument_Swapping]^compiler.report ( JSError.make ( fnSourceName, OPTIONAL_ARGS_ERROR, a )  ) ;^246^^^^^231^261^compiler.report ( JSError.make ( fnSourceName, a, OPTIONAL_ARGS_ERROR )  ) ;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] createFunctionInfo [RETURN_TYPE] FunctionCheck$FunctionInfo   AbstractCompiler compiler Node fn String fnSourceName [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  matched  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Node  a  args  fn  varArg  String  argName  fnSourceName  Map  functionInfos  int  args  count  maxArgs  minArgs  numArgs  optArgs  optionalArgs  requiredCount  result  
[BugLab_Argument_Swapping]^compiler.report ( JSError.make ( OPTIONAL_ARGS_ERROR, a, fnSourceName )  ) ;^246^^^^^231^261^compiler.report ( JSError.make ( fnSourceName, a, OPTIONAL_ARGS_ERROR )  ) ;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] createFunctionInfo [RETURN_TYPE] FunctionCheck$FunctionInfo   AbstractCompiler compiler Node fn String fnSourceName [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  matched  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Node  a  args  fn  varArg  String  argName  fnSourceName  Map  functionInfos  int  args  count  maxArgs  minArgs  numArgs  optArgs  optionalArgs  requiredCount  result  
[BugLab_Argument_Swapping]^compiler.report ( JSError.make ( a, fnSourceName, OPTIONAL_ARGS_ERROR )  ) ;^246^^^^^231^261^compiler.report ( JSError.make ( fnSourceName, a, OPTIONAL_ARGS_ERROR )  ) ;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] createFunctionInfo [RETURN_TYPE] FunctionCheck$FunctionInfo   AbstractCompiler compiler Node fn String fnSourceName [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  matched  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Node  a  args  fn  varArg  String  argName  fnSourceName  Map  functionInfos  int  args  count  maxArgs  minArgs  numArgs  optArgs  optionalArgs  requiredCount  result  
[BugLab_Variable_Misuse]^} else if  ( optionalArgs > 0 )  {^244^^^^^229^259^} else if  ( optArgs > 0 )  {^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] createFunctionInfo [RETURN_TYPE] FunctionCheck$FunctionInfo   AbstractCompiler compiler Node fn String fnSourceName [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  matched  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Node  a  args  fn  varArg  String  argName  fnSourceName  Map  functionInfos  int  args  count  maxArgs  minArgs  numArgs  optArgs  optionalArgs  requiredCount  result  
[BugLab_Wrong_Literal]^} else if  ( optArgs > result )  {^244^^^^^229^259^} else if  ( optArgs > 0 )  {^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] createFunctionInfo [RETURN_TYPE] FunctionCheck$FunctionInfo   AbstractCompiler compiler Node fn String fnSourceName [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  matched  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Node  a  args  fn  varArg  String  argName  fnSourceName  Map  functionInfos  int  args  count  maxArgs  minArgs  numArgs  optArgs  optionalArgs  requiredCount  result  
[BugLab_Variable_Misuse]^varArg = varArg;^238^^^^^223^253^varArg = a;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] createFunctionInfo [RETURN_TYPE] FunctionCheck$FunctionInfo   AbstractCompiler compiler Node fn String fnSourceName [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  matched  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Node  a  args  fn  varArg  String  argName  fnSourceName  Map  functionInfos  int  args  count  maxArgs  minArgs  numArgs  optArgs  optionalArgs  requiredCount  result  
[BugLab_Wrong_Literal]^hasVarArgs = false;^239^^^^^224^254^hasVarArgs = true;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] createFunctionInfo [RETURN_TYPE] FunctionCheck$FunctionInfo   AbstractCompiler compiler Node fn String fnSourceName [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  matched  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Node  a  args  fn  varArg  String  argName  fnSourceName  Map  functionInfos  int  args  count  maxArgs  minArgs  numArgs  optArgs  optionalArgs  requiredCount  result  
[BugLab_Wrong_Literal]^} else if  ( optArgs > optionalArgs )  {^244^^^^^229^259^} else if  ( optArgs > 0 )  {^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] createFunctionInfo [RETURN_TYPE] FunctionCheck$FunctionInfo   AbstractCompiler compiler Node fn String fnSourceName [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  matched  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Node  a  args  fn  varArg  String  argName  fnSourceName  Map  functionInfos  int  args  count  maxArgs  minArgs  numArgs  optArgs  optionalArgs  requiredCount  result  
[BugLab_Variable_Misuse]^} else if  ( requiredCount > 0 )  {^244^^^^^229^259^} else if  ( optArgs > 0 )  {^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] createFunctionInfo [RETURN_TYPE] FunctionCheck$FunctionInfo   AbstractCompiler compiler Node fn String fnSourceName [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  matched  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Node  a  args  fn  varArg  String  argName  fnSourceName  Map  functionInfos  int  args  count  maxArgs  minArgs  numArgs  optArgs  optionalArgs  requiredCount  result  
[BugLab_Wrong_Literal]^} else if  ( optArgs > 1 )  {^244^^^^^229^259^} else if  ( optArgs > 0 )  {^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] createFunctionInfo [RETURN_TYPE] FunctionCheck$FunctionInfo   AbstractCompiler compiler Node fn String fnSourceName [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  matched  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Node  a  args  fn  varArg  String  argName  fnSourceName  Map  functionInfos  int  args  count  maxArgs  minArgs  numArgs  optArgs  optionalArgs  requiredCount  result  
[BugLab_Variable_Misuse]^for  ( Node a = varArg.getFirstChild (  ) ; a != null; a = a.getNext (  )  )  {^228^^^^^213^243^for  ( Node a = args.getFirstChild (  ) ; a != null; a = a.getNext (  )  )  {^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] createFunctionInfo [RETURN_TYPE] FunctionCheck$FunctionInfo   AbstractCompiler compiler Node fn String fnSourceName [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  matched  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Node  a  args  fn  varArg  String  argName  fnSourceName  Map  functionInfos  int  args  count  maxArgs  minArgs  numArgs  optArgs  optionalArgs  requiredCount  result  
[BugLab_Variable_Misuse]^for  ( Node varArg = args.getFirstChild (  ) ; a != null; a = a.getNext (  )  )  {^228^^^^^213^243^for  ( Node a = args.getFirstChild (  ) ; a != null; a = a.getNext (  )  )  {^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] createFunctionInfo [RETURN_TYPE] FunctionCheck$FunctionInfo   AbstractCompiler compiler Node fn String fnSourceName [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  matched  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Node  a  args  fn  varArg  String  argName  fnSourceName  Map  functionInfos  int  args  count  maxArgs  minArgs  numArgs  optArgs  optionalArgs  requiredCount  result  
[BugLab_Wrong_Operator]^for  ( Node a = args.getFirstChild (  ) ; a == null; a = a.getNext (  )  )  {^228^^^^^213^243^for  ( Node a = args.getFirstChild (  ) ; a != null; a = a.getNext (  )  )  {^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] createFunctionInfo [RETURN_TYPE] FunctionCheck$FunctionInfo   AbstractCompiler compiler Node fn String fnSourceName [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  matched  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Node  a  args  fn  varArg  String  argName  fnSourceName  Map  functionInfos  int  args  count  maxArgs  minArgs  numArgs  optArgs  optionalArgs  requiredCount  result  
[BugLab_Wrong_Literal]^} else if  ( optArgs > optArgs )  {^244^^^^^229^259^} else if  ( optArgs > 0 )  {^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] createFunctionInfo [RETURN_TYPE] FunctionCheck$FunctionInfo   AbstractCompiler compiler Node fn String fnSourceName [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  matched  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Node  a  args  fn  varArg  String  argName  fnSourceName  Map  functionInfos  int  args  count  maxArgs  minArgs  numArgs  optArgs  optionalArgs  requiredCount  result  
[BugLab_Wrong_Operator]^} else if  ( optArgs == 0 )  {^244^^^^^229^259^} else if  ( optArgs > 0 )  {^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] createFunctionInfo [RETURN_TYPE] FunctionCheck$FunctionInfo   AbstractCompiler compiler Node fn String fnSourceName [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  matched  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Node  a  args  fn  varArg  String  argName  fnSourceName  Map  functionInfos  int  args  count  maxArgs  minArgs  numArgs  optArgs  optionalArgs  requiredCount  result  
[BugLab_Wrong_Literal]^} else if  ( optArgs > requiredCount )  {^244^^^^^229^259^} else if  ( optArgs > 0 )  {^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] createFunctionInfo [RETURN_TYPE] FunctionCheck$FunctionInfo   AbstractCompiler compiler Node fn String fnSourceName [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  matched  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Node  a  args  fn  varArg  String  argName  fnSourceName  Map  functionInfos  int  args  count  maxArgs  minArgs  numArgs  optArgs  optionalArgs  requiredCount  result  
[BugLab_Variable_Misuse]^String varArgrgName = a.getString (  ) ;^231^^^^^216^246^String argName = a.getString (  ) ;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] createFunctionInfo [RETURN_TYPE] FunctionCheck$FunctionInfo   AbstractCompiler compiler Node fn String fnSourceName [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  matched  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Node  a  args  fn  varArg  String  argName  fnSourceName  Map  functionInfos  int  args  count  maxArgs  minArgs  numArgs  optArgs  optionalArgs  requiredCount  result  
[BugLab_Variable_Misuse]^Preconditions.checkState ( varArg.getType (  )  == Token.NAME ) ;^229^^^^^214^244^Preconditions.checkState ( a.getType (  )  == Token.NAME ) ;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] createFunctionInfo [RETURN_TYPE] FunctionCheck$FunctionInfo   AbstractCompiler compiler Node fn String fnSourceName [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  matched  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Node  a  args  fn  varArg  String  argName  fnSourceName  Map  functionInfos  int  args  count  maxArgs  minArgs  numArgs  optArgs  optionalArgs  requiredCount  result  
[BugLab_Wrong_Operator]^Preconditions.checkState ( a.getType (  )  != Token.NAME ) ;^229^^^^^214^244^Preconditions.checkState ( a.getType (  )  == Token.NAME ) ;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] createFunctionInfo [RETURN_TYPE] FunctionCheck$FunctionInfo   AbstractCompiler compiler Node fn String fnSourceName [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  matched  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Node  a  args  fn  varArg  String  argName  fnSourceName  Map  functionInfos  int  args  count  maxArgs  minArgs  numArgs  optArgs  optionalArgs  requiredCount  result  
[BugLab_Wrong_Operator]^Preconditions.checkState ( a.getType (  )  >= Token.NAME ) ;^229^^^^^214^244^Preconditions.checkState ( a.getType (  )  == Token.NAME ) ;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] createFunctionInfo [RETURN_TYPE] FunctionCheck$FunctionInfo   AbstractCompiler compiler Node fn String fnSourceName [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  matched  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Node  a  args  fn  varArg  String  argName  fnSourceName  Map  functionInfos  int  args  count  maxArgs  minArgs  numArgs  optArgs  optionalArgs  requiredCount  result  
[BugLab_Variable_Misuse]^return new FunctionInfo ( optArgs, optArgs, hasVarArgs ) ;^252^^^^^237^267^return new FunctionInfo ( numArgs, optArgs, hasVarArgs ) ;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] createFunctionInfo [RETURN_TYPE] FunctionCheck$FunctionInfo   AbstractCompiler compiler Node fn String fnSourceName [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  matched  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Node  a  args  fn  varArg  String  argName  fnSourceName  Map  functionInfos  int  args  count  maxArgs  minArgs  numArgs  optArgs  optionalArgs  requiredCount  result  
[BugLab_Variable_Misuse]^return new FunctionInfo ( numArgs, optionalArgs, hasVarArgs ) ;^252^^^^^237^267^return new FunctionInfo ( numArgs, optArgs, hasVarArgs ) ;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] createFunctionInfo [RETURN_TYPE] FunctionCheck$FunctionInfo   AbstractCompiler compiler Node fn String fnSourceName [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  matched  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Node  a  args  fn  varArg  String  argName  fnSourceName  Map  functionInfos  int  args  count  maxArgs  minArgs  numArgs  optArgs  optionalArgs  requiredCount  result  
[BugLab_Variable_Misuse]^return new FunctionInfo ( numArgs, optArgs, matched ) ;^252^^^^^237^267^return new FunctionInfo ( numArgs, optArgs, hasVarArgs ) ;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] createFunctionInfo [RETURN_TYPE] FunctionCheck$FunctionInfo   AbstractCompiler compiler Node fn String fnSourceName [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  matched  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Node  a  args  fn  varArg  String  argName  fnSourceName  Map  functionInfos  int  args  count  maxArgs  minArgs  numArgs  optArgs  optionalArgs  requiredCount  result  
[BugLab_Argument_Swapping]^return new FunctionInfo ( optArgs, numArgs, hasVarArgs ) ;^252^^^^^237^267^return new FunctionInfo ( numArgs, optArgs, hasVarArgs ) ;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] createFunctionInfo [RETURN_TYPE] FunctionCheck$FunctionInfo   AbstractCompiler compiler Node fn String fnSourceName [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  matched  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Node  a  args  fn  varArg  String  argName  fnSourceName  Map  functionInfos  int  args  count  maxArgs  minArgs  numArgs  optArgs  optionalArgs  requiredCount  result  
[BugLab_Argument_Swapping]^return new FunctionInfo ( hasVarArgs, optArgs, numArgs ) ;^252^^^^^237^267^return new FunctionInfo ( numArgs, optArgs, hasVarArgs ) ;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] createFunctionInfo [RETURN_TYPE] FunctionCheck$FunctionInfo   AbstractCompiler compiler Node fn String fnSourceName [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  matched  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Node  a  args  fn  varArg  String  argName  fnSourceName  Map  functionInfos  int  args  count  maxArgs  minArgs  numArgs  optArgs  optionalArgs  requiredCount  result  
[BugLab_Variable_Misuse]^return new FunctionInfo ( result, optArgs, hasVarArgs ) ;^252^^^^^237^267^return new FunctionInfo ( numArgs, optArgs, hasVarArgs ) ;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] createFunctionInfo [RETURN_TYPE] FunctionCheck$FunctionInfo   AbstractCompiler compiler Node fn String fnSourceName [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  matched  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Node  a  args  fn  varArg  String  argName  fnSourceName  Map  functionInfos  int  args  count  maxArgs  minArgs  numArgs  optArgs  optionalArgs  requiredCount  result  
[BugLab_Argument_Swapping]^return new FunctionInfo ( numArgs, hasVarArgs, optArgs ) ;^252^^^^^237^267^return new FunctionInfo ( numArgs, optArgs, hasVarArgs ) ;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] createFunctionInfo [RETURN_TYPE] FunctionCheck$FunctionInfo   AbstractCompiler compiler Node fn String fnSourceName [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  matched  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Node  a  args  fn  varArg  String  argName  fnSourceName  Map  functionInfos  int  args  count  maxArgs  minArgs  numArgs  optArgs  optionalArgs  requiredCount  result  
[BugLab_Variable_Misuse]^this.args = optionalArgs;^86^^^^^85^89^this.args = args;^[CLASS] FunctionInfo  [METHOD] <init> [RETURN_TYPE] FunctionCheck$FunctionInfo(int,int,boolean)   int args int optionalArgs boolean hasVarArgs [VARIABLES] int  args  optionalArgs  boolean  hasVarArgs  
[BugLab_Variable_Misuse]^this.optionalArgs = args;^87^^^^^85^89^this.optionalArgs = optionalArgs;^[CLASS] FunctionInfo  [METHOD] <init> [RETURN_TYPE] FunctionCheck$FunctionInfo(int,int,boolean)   int args int optionalArgs boolean hasVarArgs [VARIABLES] int  args  optionalArgs  boolean  hasVarArgs  
[BugLab_Wrong_Operator]^if  ( ! ( other  >=  FunctionInfo )  )  {^92^^^^^91^101^if  ( ! ( other instanceof FunctionInfo )  )  {^[CLASS] FunctionInfo  [METHOD] equals [RETURN_TYPE] boolean   Object other [VARIABLES] FunctionInfo  o  Object  other  boolean  hasVarArgs  int  args  optionalArgs  
[BugLab_Wrong_Literal]^return true;^93^^^^^91^101^return false;^[CLASS] FunctionInfo  [METHOD] equals [RETURN_TYPE] boolean   Object other [VARIABLES] FunctionInfo  o  Object  other  boolean  hasVarArgs  int  args  optionalArgs  
[BugLab_Variable_Misuse]^return args == args && o.optionalArgs == optionalArgs && o.hasVarArgs == hasVarArgs;^98^99^100^^^91^101^return o.args == args && o.optionalArgs == optionalArgs && o.hasVarArgs == hasVarArgs;^[CLASS] FunctionInfo  [METHOD] equals [RETURN_TYPE] boolean   Object other [VARIABLES] FunctionInfo  o  Object  other  boolean  hasVarArgs  int  args  optionalArgs  
[BugLab_Variable_Misuse]^return o.args == optionalArgs && o.optionalArgs == optionalArgs && o.hasVarArgs == hasVarArgs;^98^99^100^^^91^101^return o.args == args && o.optionalArgs == optionalArgs && o.hasVarArgs == hasVarArgs;^[CLASS] FunctionInfo  [METHOD] equals [RETURN_TYPE] boolean   Object other [VARIABLES] FunctionInfo  o  Object  other  boolean  hasVarArgs  int  args  optionalArgs  
[BugLab_Variable_Misuse]^return o.args == args && o.optionalArgs == args && o.hasVarArgs == hasVarArgs;^98^99^100^^^91^101^return o.args == args && o.optionalArgs == optionalArgs && o.hasVarArgs == hasVarArgs;^[CLASS] FunctionInfo  [METHOD] equals [RETURN_TYPE] boolean   Object other [VARIABLES] FunctionInfo  o  Object  other  boolean  hasVarArgs  int  args  optionalArgs  
[BugLab_Variable_Misuse]^return o.args == args && o.optionalArgs == optionalArgs && hasVarArgs == hasVarArgs;^98^99^100^^^91^101^return o.args == args && o.optionalArgs == optionalArgs && o.hasVarArgs == hasVarArgs;^[CLASS] FunctionInfo  [METHOD] equals [RETURN_TYPE] boolean   Object other [VARIABLES] FunctionInfo  o  Object  other  boolean  hasVarArgs  int  args  optionalArgs  
[BugLab_Argument_Swapping]^return o.optionalArgs.args == args && o == optionalArgs && o.hasVarArgs == hasVarArgs;^98^99^100^^^91^101^return o.args == args && o.optionalArgs == optionalArgs && o.hasVarArgs == hasVarArgs;^[CLASS] FunctionInfo  [METHOD] equals [RETURN_TYPE] boolean   Object other [VARIABLES] FunctionInfo  o  Object  other  boolean  hasVarArgs  int  args  optionalArgs  
[BugLab_Argument_Swapping]^return optionalArgs == args && o.optionalArgs == o.args && o.hasVarArgs == hasVarArgs;^98^99^100^^^91^101^return o.args == args && o.optionalArgs == optionalArgs && o.hasVarArgs == hasVarArgs;^[CLASS] FunctionInfo  [METHOD] equals [RETURN_TYPE] boolean   Object other [VARIABLES] FunctionInfo  o  Object  other  boolean  hasVarArgs  int  args  optionalArgs  
[BugLab_Argument_Swapping]^return o.args == optionalArgs && o.optionalArgs == args && o.hasVarArgs == hasVarArgs;^98^99^100^^^91^101^return o.args == args && o.optionalArgs == optionalArgs && o.hasVarArgs == hasVarArgs;^[CLASS] FunctionInfo  [METHOD] equals [RETURN_TYPE] boolean   Object other [VARIABLES] FunctionInfo  o  Object  other  boolean  hasVarArgs  int  args  optionalArgs  
[BugLab_Argument_Swapping]^return o.args == o.optionalArgs && args == optionalArgs && o.hasVarArgs == hasVarArgs;^98^99^100^^^91^101^return o.args == args && o.optionalArgs == optionalArgs && o.hasVarArgs == hasVarArgs;^[CLASS] FunctionInfo  [METHOD] equals [RETURN_TYPE] boolean   Object other [VARIABLES] FunctionInfo  o  Object  other  boolean  hasVarArgs  int  args  optionalArgs  
[BugLab_Argument_Swapping]^return o.args == args && o.optionalArgs == o.hasVarArgs && optionalArgs == hasVarArgs;^98^99^100^^^91^101^return o.args == args && o.optionalArgs == optionalArgs && o.hasVarArgs == hasVarArgs;^[CLASS] FunctionInfo  [METHOD] equals [RETURN_TYPE] boolean   Object other [VARIABLES] FunctionInfo  o  Object  other  boolean  hasVarArgs  int  args  optionalArgs  
[BugLab_Argument_Swapping]^return o.args == args && o.hasVarArgs == optionalArgs && o.optionalArgs == hasVarArgs;^98^99^100^^^91^101^return o.args == args && o.optionalArgs == optionalArgs && o.hasVarArgs == hasVarArgs;^[CLASS] FunctionInfo  [METHOD] equals [RETURN_TYPE] boolean   Object other [VARIABLES] FunctionInfo  o  Object  other  boolean  hasVarArgs  int  args  optionalArgs  
[BugLab_Argument_Swapping]^return o.args == args && o.optionalArgs == optionalArgs && hasVarArgs == o.hasVarArgs;^98^99^100^^^91^101^return o.args == args && o.optionalArgs == optionalArgs && o.hasVarArgs == hasVarArgs;^[CLASS] FunctionInfo  [METHOD] equals [RETURN_TYPE] boolean   Object other [VARIABLES] FunctionInfo  o  Object  other  boolean  hasVarArgs  int  args  optionalArgs  
[BugLab_Wrong_Operator]^return o.args == args || o.optionalArgs == optionalArgs && o.hasVarArgs == hasVarArgs;^98^99^100^^^91^101^return o.args == args && o.optionalArgs == optionalArgs && o.hasVarArgs == hasVarArgs;^[CLASS] FunctionInfo  [METHOD] equals [RETURN_TYPE] boolean   Object other [VARIABLES] FunctionInfo  o  Object  other  boolean  hasVarArgs  int  args  optionalArgs  
[BugLab_Wrong_Operator]^return o.args <= args && o.optionalArgs == optionalArgs && o.hasVarArgs == hasVarArgs;^98^99^100^^^91^101^return o.args == args && o.optionalArgs == optionalArgs && o.hasVarArgs == hasVarArgs;^[CLASS] FunctionInfo  [METHOD] equals [RETURN_TYPE] boolean   Object other [VARIABLES] FunctionInfo  o  Object  other  boolean  hasVarArgs  int  args  optionalArgs  
[BugLab_Wrong_Operator]^return o.args == args && o.optionalArgs > optionalArgs && o.hasVarArgs == hasVarArgs;^98^99^100^^^91^101^return o.args == args && o.optionalArgs == optionalArgs && o.hasVarArgs == hasVarArgs;^[CLASS] FunctionInfo  [METHOD] equals [RETURN_TYPE] boolean   Object other [VARIABLES] FunctionInfo  o  Object  other  boolean  hasVarArgs  int  args  optionalArgs  
[BugLab_Wrong_Operator]^return o.args != args && o.optionalArgs == optionalArgs && o.hasVarArgs == hasVarArgs;^98^99^100^^^91^101^return o.args == args && o.optionalArgs == optionalArgs && o.hasVarArgs == hasVarArgs;^[CLASS] FunctionInfo  [METHOD] equals [RETURN_TYPE] boolean   Object other [VARIABLES] FunctionInfo  o  Object  other  boolean  hasVarArgs  int  args  optionalArgs  
[BugLab_Variable_Misuse]^result = 37 * optionalArgs + args;^105^^^^^103^109^result = 37 * result + args;^[CLASS] FunctionInfo  [METHOD] hashCode [RETURN_TYPE] int   [VARIABLES] int  args  optionalArgs  result  boolean  hasVarArgs  
[BugLab_Variable_Misuse]^result = 37 * result + optionalArgs;^105^^^^^103^109^result = 37 * result + args;^[CLASS] FunctionInfo  [METHOD] hashCode [RETURN_TYPE] int   [VARIABLES] int  args  optionalArgs  result  boolean  hasVarArgs  
[BugLab_Argument_Swapping]^result = 37 * args + result;^105^^^^^103^109^result = 37 * result + args;^[CLASS] FunctionInfo  [METHOD] hashCode [RETURN_TYPE] int   [VARIABLES] int  args  optionalArgs  result  boolean  hasVarArgs  
[BugLab_Wrong_Operator]^result = 37 - result + args;^105^^^^^103^109^result = 37 * result + args;^[CLASS] FunctionInfo  [METHOD] hashCode [RETURN_TYPE] int   [VARIABLES] int  args  optionalArgs  result  boolean  hasVarArgs  
[BugLab_Wrong_Literal]^result = 38 * result + args;^105^^^^^103^109^result = 37 * result + args;^[CLASS] FunctionInfo  [METHOD] hashCode [RETURN_TYPE] int   [VARIABLES] int  args  optionalArgs  result  boolean  hasVarArgs  
[BugLab_Variable_Misuse]^result = 37 * args + optionalArgs;^106^^^^^103^109^result = 37 * result + optionalArgs;^[CLASS] FunctionInfo  [METHOD] hashCode [RETURN_TYPE] int   [VARIABLES] int  args  optionalArgs  result  boolean  hasVarArgs  
[BugLab_Variable_Misuse]^result = 37 * result + args;^106^^^^^103^109^result = 37 * result + optionalArgs;^[CLASS] FunctionInfo  [METHOD] hashCode [RETURN_TYPE] int   [VARIABLES] int  args  optionalArgs  result  boolean  hasVarArgs  
[BugLab_Argument_Swapping]^result = 37 * optionalArgs + result;^106^^^^^103^109^result = 37 * result + optionalArgs;^[CLASS] FunctionInfo  [METHOD] hashCode [RETURN_TYPE] int   [VARIABLES] int  args  optionalArgs  result  boolean  hasVarArgs  
[BugLab_Wrong_Operator]^result = 37 - result + optionalArgs;^106^^^^^103^109^result = 37 * result + optionalArgs;^[CLASS] FunctionInfo  [METHOD] hashCode [RETURN_TYPE] int   [VARIABLES] int  args  optionalArgs  result  boolean  hasVarArgs  
[BugLab_Wrong_Literal]^result = args * result + optionalArgs;^106^^^^^103^109^result = 37 * result + optionalArgs;^[CLASS] FunctionInfo  [METHOD] hashCode [RETURN_TYPE] int   [VARIABLES] int  args  optionalArgs  result  boolean  hasVarArgs  
[BugLab_Variable_Misuse]^result = 37 * optionalArgs +  ( hasVarArgs ? 1 : 0 ) ;^107^^^^^103^109^result = 37 * result +  ( hasVarArgs ? 1 : 0 ) ;^[CLASS] FunctionInfo  [METHOD] hashCode [RETURN_TYPE] int   [VARIABLES] int  args  optionalArgs  result  boolean  hasVarArgs  
[BugLab_Argument_Swapping]^result = 37 * hasVarArgs +  ( result ? 1 : 0 ) ;^107^^^^^103^109^result = 37 * result +  ( hasVarArgs ? 1 : 0 ) ;^[CLASS] FunctionInfo  [METHOD] hashCode [RETURN_TYPE] int   [VARIABLES] int  args  optionalArgs  result  boolean  hasVarArgs  
[BugLab_Wrong_Operator]^result = 37 * result +  &&  ( hasVarArgs ? 1 : 0 ) ;^107^^^^^103^109^result = 37 * result +  ( hasVarArgs ? 1 : 0 ) ;^[CLASS] FunctionInfo  [METHOD] hashCode [RETURN_TYPE] int   [VARIABLES] int  args  optionalArgs  result  boolean  hasVarArgs  
[BugLab_Wrong_Operator]^result = 37 / result +  ( hasVarArgs ? 1 : 0 ) ;^107^^^^^103^109^result = 37 * result +  ( hasVarArgs ? 1 : 0 ) ;^[CLASS] FunctionInfo  [METHOD] hashCode [RETURN_TYPE] int   [VARIABLES] int  args  optionalArgs  result  boolean  hasVarArgs  
[BugLab_Wrong_Literal]^result = 38 * result +  ( hasVarArgs ? 1 : 0 ) ;^107^^^^^103^109^result = 37 * result +  ( hasVarArgs ? 1 : 0 ) ;^[CLASS] FunctionInfo  [METHOD] hashCode [RETURN_TYPE] int   [VARIABLES] int  args  optionalArgs  result  boolean  hasVarArgs  
[BugLab_Wrong_Literal]^result = 37 * result +  ( hasVarArgs ?  : 0 ) ;^107^^^^^103^109^result = 37 * result +  ( hasVarArgs ? 1 : 0 ) ;^[CLASS] FunctionInfo  [METHOD] hashCode [RETURN_TYPE] int   [VARIABLES] int  args  optionalArgs  result  boolean  hasVarArgs  
[BugLab_Variable_Misuse]^return optionalArgs;^108^^^^^103^109^return result;^[CLASS] FunctionInfo  [METHOD] hashCode [RETURN_TYPE] int   [VARIABLES] int  args  optionalArgs  result  boolean  hasVarArgs  
[BugLab_Variable_Misuse]^return result + " total argument ( s )  " + "of which " + optionalArgs + " is/are optional" + ( hasVarArgs ? ", var_args supported" : "" ) ;^112^113^114^^^111^115^return args + " total argument ( s )  " + "of which " + optionalArgs + " is/are optional" + ( hasVarArgs ? ", var_args supported" : "" ) ;^[CLASS] FunctionInfo  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] int  args  optionalArgs  result  boolean  hasVarArgs  
[BugLab_Variable_Misuse]^return args + " total argument ( s )  " + "of which " + result + " is/are optional" + ( hasVarArgs ? ", var_args supported" : "" ) ;^112^113^114^^^111^115^return args + " total argument ( s )  " + "of which " + optionalArgs + " is/are optional" + ( hasVarArgs ? ", var_args supported" : "" ) ;^[CLASS] FunctionInfo  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] int  args  optionalArgs  result  boolean  hasVarArgs  
[BugLab_Argument_Swapping]^return optionalArgs + " total argument ( s )  " + "of which " + args + " is/are optional" + ( hasVarArgs ? ", var_args supported" : "" ) ;^112^113^114^^^111^115^return args + " total argument ( s )  " + "of which " + optionalArgs + " is/are optional" + ( hasVarArgs ? ", var_args supported" : "" ) ;^[CLASS] FunctionInfo  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] int  args  optionalArgs  result  boolean  hasVarArgs  
[BugLab_Argument_Swapping]^return args + " total argument ( s )  " + "of which " + hasVarArgs + " is/are optional" + ( optionalArgs ? ", var_args supported" : "" ) ;^112^113^114^^^111^115^return args + " total argument ( s )  " + "of which " + optionalArgs + " is/are optional" + ( hasVarArgs ? ", var_args supported" : "" ) ;^[CLASS] FunctionInfo  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] int  args  optionalArgs  result  boolean  hasVarArgs  
[BugLab_Wrong_Operator]^return args + " total argument ( s )  &  " + "of which " + optionalArgs + " is/are optional" + ( hasVarArgs ? ", var_args supported" : "" ) ;^112^113^114^^^111^115^return args + " total argument ( s )  " + "of which " + optionalArgs + " is/are optional" + ( hasVarArgs ? ", var_args supported" : "" ) ;^[CLASS] FunctionInfo  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] int  args  optionalArgs  result  boolean  hasVarArgs  
[BugLab_Wrong_Operator]^return args + " total argument ( s )  ^  " + "of which " + optionalArgs + " is/are optional" + ( hasVarArgs ? ", var_args supported" : "" ) ;^112^113^114^^^111^115^return args + " total argument ( s )  " + "of which " + optionalArgs + " is/are optional" + ( hasVarArgs ? ", var_args supported" : "" ) ;^[CLASS] FunctionInfo  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] int  args  optionalArgs  result  boolean  hasVarArgs  
[BugLab_Wrong_Operator]^return args + " total argument ( s )   instanceof   " + "of which " + optionalArgs + " is/are optional" + ( hasVarArgs ? ", var_args supported" : "" ) ;^112^113^114^^^111^115^return args + " total argument ( s )  " + "of which " + optionalArgs + " is/are optional" + ( hasVarArgs ? ", var_args supported" : "" ) ;^[CLASS] FunctionInfo  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] int  args  optionalArgs  result  boolean  hasVarArgs  
[BugLab_Wrong_Operator]^return args + " total argument ( s )  <  " + "of which " + optionalArgs + " is/are optional" + ( hasVarArgs ? ", var_args supported" : "" ) ;^112^113^114^^^111^115^return args + " total argument ( s )  " + "of which " + optionalArgs + " is/are optional" + ( hasVarArgs ? ", var_args supported" : "" ) ;^[CLASS] FunctionInfo  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] int  args  optionalArgs  result  boolean  hasVarArgs  
[BugLab_Wrong_Operator]^return args  ==  " total argument ( s )  " + "of which " + optionalArgs + " is/are optional" + ( hasVarArgs ? ", var_args supported" : "" ) ;^112^113^114^^^111^115^return args + " total argument ( s )  " + "of which " + optionalArgs + " is/are optional" + ( hasVarArgs ? ", var_args supported" : "" ) ;^[CLASS] FunctionInfo  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] int  args  optionalArgs  result  boolean  hasVarArgs  
[BugLab_Variable_Misuse]^if  ( parent.getType (  )  == Token.NAME )  {^129^^^^^114^144^if  ( fn.getType (  )  == Token.NAME )  {^[CLASS] ArgCheck  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Var  v  Node  fn  fnDef  n  parent  FunctionInfo  f  String  fnName  
[BugLab_Wrong_Operator]^if  ( fn.getType (  )  != Token.NAME )  {^129^^^^^114^144^if  ( fn.getType (  )  == Token.NAME )  {^[CLASS] ArgCheck  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Var  v  Node  fn  fnDef  n  parent  FunctionInfo  f  String  fnName  
[BugLab_Wrong_Operator]^if  ( v != null )  {^137^^^^^122^152^if  ( v == null )  {^[CLASS] ArgCheck  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Var  v  Node  fn  fnDef  n  parent  FunctionInfo  f  String  fnName  
[BugLab_Variable_Misuse]^if  ( parent == null || fnDef.getType (  )  != Token.FUNCTION )  {^142^143^^^^127^157^if  ( fnDef == null || fnDef.getType (  )  != Token.FUNCTION )  {^[CLASS] ArgCheck  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Var  v  Node  fn  fnDef  n  parent  FunctionInfo  f  String  fnName  
[BugLab_Wrong_Operator]^if  ( fnDef == null && fnDef.getType (  )  != Token.FUNCTION )  {^142^143^^^^127^157^if  ( fnDef == null || fnDef.getType (  )  != Token.FUNCTION )  {^[CLASS] ArgCheck  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Var  v  Node  fn  fnDef  n  parent  FunctionInfo  f  String  fnName  
[BugLab_Wrong_Operator]^if  ( fnDef != null || fnDef.getType (  )  != Token.FUNCTION )  {^142^143^^^^127^157^if  ( fnDef == null || fnDef.getType (  )  != Token.FUNCTION )  {^[CLASS] ArgCheck  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Var  v  Node  fn  fnDef  n  parent  FunctionInfo  f  String  fnName  
[BugLab_Wrong_Operator]^if  ( fnDef == null || fnDef.getType (  )  == Token.FUNCTION )  {^142^143^^^^127^157^if  ( fnDef == null || fnDef.getType (  )  != Token.FUNCTION )  {^[CLASS] ArgCheck  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Var  v  Node  fn  fnDef  n  parent  FunctionInfo  f  String  fnName  
[BugLab_Variable_Misuse]^String parentName = fn.getString (  ) ;^131^^^^^116^146^String fnName = fn.getString (  ) ;^[CLASS] ArgCheck  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Var  v  Node  fn  fnDef  n  parent  FunctionInfo  f  String  fnName  
[BugLab_Argument_Swapping]^Scope.Var v = fnName.getScope (  ) .getVar ( t ) ;^134^^^^^119^149^Scope.Var v = t.getScope (  ) .getVar ( fnName ) ;^[CLASS] ArgCheck  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Var  v  Node  fn  fnDef  n  parent  FunctionInfo  f  String  fnName  
[BugLab_Variable_Misuse]^FunctionInfo f = getFunctionInfo ( parent, v.getInputName (  )  ) ;^148^^^^^133^163^FunctionInfo f = getFunctionInfo ( fnDef, v.getInputName (  )  ) ;^[CLASS] ArgCheck  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Var  v  Node  fn  fnDef  n  parent  FunctionInfo  f  String  fnName  
[BugLab_Argument_Swapping]^FunctionInfo f = getFunctionInfo ( v, fnDef.getInputName (  )  ) ;^148^^^^^133^163^FunctionInfo f = getFunctionInfo ( fnDef, v.getInputName (  )  ) ;^[CLASS] ArgCheck  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Var  v  Node  fn  fnDef  n  parent  FunctionInfo  f  String  fnName  
[BugLab_Variable_Misuse]^checkCall ( parent, fnName, Collections.singletonList ( f ) , t, level ) ;^150^^^^^135^165^checkCall ( n, fnName, Collections.singletonList ( f ) , t, level ) ;^[CLASS] ArgCheck  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Var  v  Node  fn  fnDef  n  parent  FunctionInfo  f  String  fnName  
[BugLab_Argument_Swapping]^checkCall ( t, fnName, Collections.singletonList ( f ) , n, level ) ;^150^^^^^135^165^checkCall ( n, fnName, Collections.singletonList ( f ) , t, level ) ;^[CLASS] ArgCheck  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Var  v  Node  fn  fnDef  n  parent  FunctionInfo  f  String  fnName  
[BugLab_Argument_Swapping]^checkCall ( fnName, n, Collections.singletonList ( f ) , t, level ) ;^150^^^^^135^165^checkCall ( n, fnName, Collections.singletonList ( f ) , t, level ) ;^[CLASS] ArgCheck  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Var  v  Node  fn  fnDef  n  parent  FunctionInfo  f  String  fnName  
[BugLab_Argument_Swapping]^checkCall ( n, levelnName, Collections.singletonList ( f ) , t, f ) ;^150^^^^^135^165^checkCall ( n, fnName, Collections.singletonList ( f ) , t, level ) ;^[CLASS] ArgCheck  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Var  v  Node  fn  fnDef  n  parent  FunctionInfo  f  String  fnName  
[BugLab_Argument_Swapping]^checkCall ( n, tnName, Collections.singletonList ( f ) , f, level ) ;^150^^^^^135^165^checkCall ( n, fnName, Collections.singletonList ( f ) , t, level ) ;^[CLASS] ArgCheck  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Var  v  Node  fn  fnDef  n  parent  FunctionInfo  f  String  fnName  
[BugLab_Argument_Swapping]^checkCall ( n, fnName, Collections.singletonList ( f ) , level, t ) ;^150^^^^^135^165^checkCall ( n, fnName, Collections.singletonList ( f ) , t, level ) ;^[CLASS] ArgCheck  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Var  v  Node  fn  fnDef  n  parent  FunctionInfo  f  String  fnName  
[BugLab_Variable_Misuse]^switch  ( parent.getType (  )  )  {^124^^^^^109^139^switch  ( n.getType (  )  )  {^[CLASS] ArgCheck  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Var  v  Node  fn  fnDef  n  parent  FunctionInfo  f  String  fnName  
[BugLab_Variable_Misuse]^Node fn = parent.getFirstChild (  ) ;^128^^^^^113^143^Node fn = n.getFirstChild (  ) ;^[CLASS] ArgCheck  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Var  v  Node  fn  fnDef  n  parent  FunctionInfo  f  String  fnName  
[BugLab_Argument_Swapping]^checkCall ( level, fnName, Collections.singletonList ( f ) , t, n ) ;^150^^^^^135^165^checkCall ( n, fnName, Collections.singletonList ( f ) , t, level ) ;^[CLASS] ArgCheck  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Var  v  Node  fn  fnDef  n  parent  FunctionInfo  f  String  fnName  
[BugLab_Argument_Swapping]^checkCall ( n, f, Collections.singletonList ( fnName ) , t, level ) ;^150^^^^^135^165^checkCall ( n, fnName, Collections.singletonList ( f ) , t, level ) ;^[CLASS] ArgCheck  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Var  v  Node  fn  fnDef  n  parent  FunctionInfo  f  String  fnName  
