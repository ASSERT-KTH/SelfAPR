[buglab_swap_variables]^NodeTraversal.traverseRoots ( compiler, Lists.newArrayList ( root, externs ) , new ArgCheck (  )  ) ;^73^74^^^^72^75^NodeTraversal.traverseRoots ( compiler, Lists.newArrayList ( externs, root ) , new ArgCheck (  )  ) ;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Node  externs  root  Map  functionInfos  int  args  optionalArgs  
[buglab_swap_variables]^NodeTraversal.traverseRoots ( compiler, Lists.newArrayList (  root ) , new ArgCheck (  )  ) ;^73^74^^^^72^75^NodeTraversal.traverseRoots ( compiler, Lists.newArrayList ( externs, root ) , new ArgCheck (  )  ) ;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Node  externs  root  Map  functionInfos  int  args  optionalArgs  
[buglab_swap_variables]^NodeTraversal.traverseRoots ( compiler, Lists.newArrayList ( externs ) , new ArgCheck (  )  ) ;^73^74^^^^72^75^NodeTraversal.traverseRoots ( compiler, Lists.newArrayList ( externs, root ) , new ArgCheck (  )  ) ;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Node  externs  root  Map  functionInfos  int  args  optionalArgs  
[buglab_swap_variables]^NodeTraversal.traverseRoots ( root, Lists.newArrayList ( externs, compiler ) , new ArgCheck (  )  ) ;^73^74^^^^72^75^NodeTraversal.traverseRoots ( compiler, Lists.newArrayList ( externs, root ) , new ArgCheck (  )  ) ;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Node  externs  root  Map  functionInfos  int  args  optionalArgs  
[buglab_swap_variables]^NodeTraversal.traverseRoots (  Lists.newArrayList ( externs, root ) , new ArgCheck (  )  ) ;^73^74^^^^72^75^NodeTraversal.traverseRoots ( compiler, Lists.newArrayList ( externs, root ) , new ArgCheck (  )  ) ;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Node  externs  root  Map  functionInfos  int  args  optionalArgs  
[buglab_swap_variables]^Lists.newArrayList ( root, externs ) , new ArgCheck (  )  ) ;^74^^^^^72^75^Lists.newArrayList ( externs, root ) , new ArgCheck (  )  ) ;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Node  externs  root  Map  functionInfos  int  args  optionalArgs  
[buglab_swap_variables]^Lists.newArrayList (  root ) , new ArgCheck (  )  ) ;^74^^^^^72^75^Lists.newArrayList ( externs, root ) , new ArgCheck (  )  ) ;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Node  externs  root  Map  functionInfos  int  args  optionalArgs  
[buglab_swap_variables]^Lists.newArrayList ( externs ) , new ArgCheck (  )  ) ;^74^^^^^72^75^Lists.newArrayList ( externs, root ) , new ArgCheck (  )  ) ;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Node  externs  root  Map  functionInfos  int  args  optionalArgs  
[buglab_swap_variables]^return o.optionalArgs.args == args && o == optionalArgs && o.hasVarArgs == hasVarArgs;^98^99^100^^^91^101^return o.args == args && o.optionalArgs == optionalArgs && o.hasVarArgs == hasVarArgs;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] equals [RETURN_TYPE] boolean   Object other [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  FunctionInfo  o  Object  other  Map  functionInfos  int  args  optionalArgs  
[buglab_swap_variables]^return optionalArgs == args && o.optionalArgs == o.args && o.hasVarArgs == hasVarArgs;^98^99^100^^^91^101^return o.args == args && o.optionalArgs == optionalArgs && o.hasVarArgs == hasVarArgs;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] equals [RETURN_TYPE] boolean   Object other [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  FunctionInfo  o  Object  other  Map  functionInfos  int  args  optionalArgs  
[buglab_swap_variables]^return o.args == o.optionalArgs && args == optionalArgs && o.hasVarArgs == hasVarArgs;^98^99^100^^^91^101^return o.args == args && o.optionalArgs == optionalArgs && o.hasVarArgs == hasVarArgs;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] equals [RETURN_TYPE] boolean   Object other [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  FunctionInfo  o  Object  other  Map  functionInfos  int  args  optionalArgs  
[buglab_swap_variables]^return o.optionalArgs == args && o.args == optionalArgs && o.hasVarArgs == hasVarArgs;^98^99^100^^^91^101^return o.args == args && o.optionalArgs == optionalArgs && o.hasVarArgs == hasVarArgs;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] equals [RETURN_TYPE] boolean   Object other [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  FunctionInfo  o  Object  other  Map  functionInfos  int  args  optionalArgs  
[buglab_swap_variables]^return o.args == optionalArgs && o.optionalArgs == args && o.hasVarArgs == hasVarArgs;^98^99^100^^^91^101^return o.args == args && o.optionalArgs == optionalArgs && o.hasVarArgs == hasVarArgs;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] equals [RETURN_TYPE] boolean   Object other [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  FunctionInfo  o  Object  other  Map  functionInfos  int  args  optionalArgs  
[buglab_swap_variables]^return o.args == args && o.optionalArgs == optionalArgs && hasVarArgs == o.hasVarArgs;^98^99^100^^^91^101^return o.args == args && o.optionalArgs == optionalArgs && o.hasVarArgs == hasVarArgs;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] equals [RETURN_TYPE] boolean   Object other [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  FunctionInfo  o  Object  other  Map  functionInfos  int  args  optionalArgs  
[buglab_swap_variables]^return o.args == args && hasVarArgs == optionalArgs && o.hasVarArgs == o.optionalArgs;^98^99^100^^^91^101^return o.args == args && o.optionalArgs == optionalArgs && o.hasVarArgs == hasVarArgs;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] equals [RETURN_TYPE] boolean   Object other [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  FunctionInfo  o  Object  other  Map  functionInfos  int  args  optionalArgs  
[buglab_swap_variables]^result = 37 * args + result;^105^^^^^103^109^result = 37 * result + args;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] hashCode [RETURN_TYPE] int   [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Map  functionInfos  int  args  optionalArgs  result  
[buglab_swap_variables]^result = 37 * optionalArgs + result;^106^^^^^103^109^result = 37 * result + optionalArgs;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] hashCode [RETURN_TYPE] int   [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Map  functionInfos  int  args  optionalArgs  result  
[buglab_swap_variables]^result = 37 * hasVarArgs +  ( result ? 1 : 0 ) ;^107^^^^^103^109^result = 37 * result +  ( hasVarArgs ? 1 : 0 ) ;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] hashCode [RETURN_TYPE] int   [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Map  functionInfos  int  args  optionalArgs  result  
[buglab_swap_variables]^return optionalArgs + " total argument ( s )  " + "of which " + args + " is/are optional" + ( hasVarArgs ? ", var_args supported" : "" ) ;^112^113^114^^^111^115^return args + " total argument ( s )  " + "of which " + optionalArgs + " is/are optional" + ( hasVarArgs ? ", var_args supported" : "" ) ;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Map  functionInfos  int  args  optionalArgs  result  
[buglab_swap_variables]^return hasVarArgs + " total argument ( s )  " + "of which " + optionalArgs + " is/are optional" + ( args ? ", var_args supported" : "" ) ;^112^113^114^^^111^115^return args + " total argument ( s )  " + "of which " + optionalArgs + " is/are optional" + ( hasVarArgs ? ", var_args supported" : "" ) ;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Map  functionInfos  int  args  optionalArgs  result  
[buglab_swap_variables]^Scope.Var v = fnName.getScope (  ) .getVar ( t ) ;^134^^^^^119^149^Scope.Var v = t.getScope (  ) .getVar ( fnName ) ;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  NodeTraversal  t  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Var  v  Node  fn  fnDef  n  parent  FunctionInfo  f  String  fnName  Map  functionInfos  int  args  optionalArgs  result  
[buglab_swap_variables]^FunctionInfo f = getFunctionInfo ( v, fnDef.getInputName (  )  ) ;^148^^^^^133^163^FunctionInfo f = getFunctionInfo ( fnDef, v.getInputName (  )  ) ;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  NodeTraversal  t  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Var  v  Node  fn  fnDef  n  parent  FunctionInfo  f  String  fnName  Map  functionInfos  int  args  optionalArgs  result  
[buglab_swap_variables]^FunctionInfo f = getFunctionInfo (  v.getInputName (  )  ) ;^148^^^^^133^163^FunctionInfo f = getFunctionInfo ( fnDef, v.getInputName (  )  ) ;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  NodeTraversal  t  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Var  v  Node  fn  fnDef  n  parent  FunctionInfo  f  String  fnName  Map  functionInfos  int  args  optionalArgs  result  
[buglab_swap_variables]^FunctionInfo f = getFunctionInfo ( fnDef.getInputName (  )  ) ;^148^^^^^133^163^FunctionInfo f = getFunctionInfo ( fnDef, v.getInputName (  )  ) ;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  NodeTraversal  t  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Var  v  Node  fn  fnDef  n  parent  FunctionInfo  f  String  fnName  Map  functionInfos  int  args  optionalArgs  result  
[buglab_swap_variables]^checkCall ( t, fnName, Collections.singletonList ( f ) , n, level ) ;^150^^^^^135^165^checkCall ( n, fnName, Collections.singletonList ( f ) , t, level ) ;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  NodeTraversal  t  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Var  v  Node  fn  fnDef  n  parent  FunctionInfo  f  String  fnName  Map  functionInfos  int  args  optionalArgs  result  
[buglab_swap_variables]^checkCall (  fnName, Collections.singletonList ( f ) , t, level ) ;^150^^^^^135^165^checkCall ( n, fnName, Collections.singletonList ( f ) , t, level ) ;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  NodeTraversal  t  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Var  v  Node  fn  fnDef  n  parent  FunctionInfo  f  String  fnName  Map  functionInfos  int  args  optionalArgs  result  
[buglab_swap_variables]^checkCall ( n, level, Collections.singletonList ( f ) , t, fnName ) ;^150^^^^^135^165^checkCall ( n, fnName, Collections.singletonList ( f ) , t, level ) ;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  NodeTraversal  t  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Var  v  Node  fn  fnDef  n  parent  FunctionInfo  f  String  fnName  Map  functionInfos  int  args  optionalArgs  result  
[buglab_swap_variables]^checkCall ( n,  Collections.singletonList ( f ) , t, level ) ;^150^^^^^135^165^checkCall ( n, fnName, Collections.singletonList ( f ) , t, level ) ;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  NodeTraversal  t  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Var  v  Node  fn  fnDef  n  parent  FunctionInfo  f  String  fnName  Map  functionInfos  int  args  optionalArgs  result  
[buglab_swap_variables]^checkCall ( n, tnName, Collections.singletonList ( f ) , f, level ) ;^150^^^^^135^165^checkCall ( n, fnName, Collections.singletonList ( f ) , t, level ) ;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  NodeTraversal  t  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Var  v  Node  fn  fnDef  n  parent  FunctionInfo  f  String  fnName  Map  functionInfos  int  args  optionalArgs  result  
[buglab_swap_variables]^checkCall ( nnName, Collections.singletonList ( f ) , t, level ) ;^150^^^^^135^165^checkCall ( n, fnName, Collections.singletonList ( f ) , t, level ) ;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  NodeTraversal  t  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Var  v  Node  fn  fnDef  n  parent  FunctionInfo  f  String  fnName  Map  functionInfos  int  args  optionalArgs  result  
[buglab_swap_variables]^checkCall ( n, fnName, Collections.singletonList ( f ) , level, t ) ;^150^^^^^135^165^checkCall ( n, fnName, Collections.singletonList ( f ) , t, level ) ;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  NodeTraversal  t  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Var  v  Node  fn  fnDef  n  parent  FunctionInfo  f  String  fnName  Map  functionInfos  int  args  optionalArgs  result  
[buglab_swap_variables]^checkCall ( n, fnName, Collections.singletonList ( f ) ,  level ) ;^150^^^^^135^165^checkCall ( n, fnName, Collections.singletonList ( f ) , t, level ) ;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  NodeTraversal  t  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Var  v  Node  fn  fnDef  n  parent  FunctionInfo  f  String  fnName  Map  functionInfos  int  args  optionalArgs  result  
[buglab_swap_variables]^checkCall ( level, fnName, Collections.singletonList ( f ) , t, n ) ;^150^^^^^135^165^checkCall ( n, fnName, Collections.singletonList ( f ) , t, level ) ;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  NodeTraversal  t  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Var  v  Node  fn  fnDef  n  parent  FunctionInfo  f  String  fnName  Map  functionInfos  int  args  optionalArgs  result  
[buglab_swap_variables]^checkCall ( n, fnName, Collections.singletonList ( f ) , t ) ;^150^^^^^135^165^checkCall ( n, fnName, Collections.singletonList ( f ) , t, level ) ;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  NodeTraversal  t  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Var  v  Node  fn  fnDef  n  parent  FunctionInfo  f  String  fnName  Map  functionInfos  int  args  optionalArgs  result  
[buglab_swap_variables]^checkCall ( f, nnName, Collections.singletonList ( f ) , t, level ) ;^150^^^^^135^165^checkCall ( n, fnName, Collections.singletonList ( f ) , t, level ) ;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  NodeTraversal  t  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Var  v  Node  fn  fnDef  n  parent  FunctionInfo  f  String  fnName  Map  functionInfos  int  args  optionalArgs  result  
[buglab_swap_variables]^if  ( f.args >= requiredCount &&  ( count <= count || f.hasVarArgs )  )  {^170^^^^^161^189^if  ( count >= requiredCount &&  ( count <= f.args || f.hasVarArgs )  )  {^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] checkCall [RETURN_TYPE] void   Node n String fnName FunctionInfo> infos NodeTraversal t CheckLevel level [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  matched  Iterable  infos  NodeTraversal  t  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Node  n  FunctionInfo  f  String  fnName  Map  functionInfos  int  args  count  maxArgs  minArgs  optionalArgs  requiredCount  result  
[buglab_swap_variables]^if  ( count >= f.args &&  ( count <= requiredCount || f.hasVarArgs )  )  {^170^^^^^161^189^if  ( count >= requiredCount &&  ( count <= f.args || f.hasVarArgs )  )  {^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] checkCall [RETURN_TYPE] void   Node n String fnName FunctionInfo> infos NodeTraversal t CheckLevel level [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  matched  Iterable  infos  NodeTraversal  t  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Node  n  FunctionInfo  f  String  fnName  Map  functionInfos  int  args  count  maxArgs  minArgs  optionalArgs  requiredCount  result  
[buglab_swap_variables]^if  ( count >= requiredCount &&  ( count <= f.hasVarArgs.args || f )  )  {^170^^^^^161^189^if  ( count >= requiredCount &&  ( count <= f.args || f.hasVarArgs )  )  {^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] checkCall [RETURN_TYPE] void   Node n String fnName FunctionInfo> infos NodeTraversal t CheckLevel level [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  matched  Iterable  infos  NodeTraversal  t  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Node  n  FunctionInfo  f  String  fnName  Map  functionInfos  int  args  count  maxArgs  minArgs  optionalArgs  requiredCount  result  
[buglab_swap_variables]^if  ( f.hasVarArgs >= requiredCount &&  ( count <= f.args || count )  )  {^170^^^^^161^189^if  ( count >= requiredCount &&  ( count <= f.args || f.hasVarArgs )  )  {^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] checkCall [RETURN_TYPE] void   Node n String fnName FunctionInfo> infos NodeTraversal t CheckLevel level [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  matched  Iterable  infos  NodeTraversal  t  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Node  n  FunctionInfo  f  String  fnName  Map  functionInfos  int  args  count  maxArgs  minArgs  optionalArgs  requiredCount  result  
[buglab_swap_variables]^minArgs = Math.min ( requiredCount, minArgs ) ;^175^^^^^161^189^minArgs = Math.min ( minArgs, requiredCount ) ;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] checkCall [RETURN_TYPE] void   Node n String fnName FunctionInfo> infos NodeTraversal t CheckLevel level [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  matched  Iterable  infos  NodeTraversal  t  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Node  n  FunctionInfo  f  String  fnName  Map  functionInfos  int  args  count  maxArgs  minArgs  optionalArgs  requiredCount  result  
[buglab_swap_variables]^minArgs = Math.min (  requiredCount ) ;^175^^^^^161^189^minArgs = Math.min ( minArgs, requiredCount ) ;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] checkCall [RETURN_TYPE] void   Node n String fnName FunctionInfo> infos NodeTraversal t CheckLevel level [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  matched  Iterable  infos  NodeTraversal  t  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Node  n  FunctionInfo  f  String  fnName  Map  functionInfos  int  args  count  maxArgs  minArgs  optionalArgs  requiredCount  result  
[buglab_swap_variables]^minArgs = Math.min ( minArgs ) ;^175^^^^^161^189^minArgs = Math.min ( minArgs, requiredCount ) ;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] checkCall [RETURN_TYPE] void   Node n String fnName FunctionInfo> infos NodeTraversal t CheckLevel level [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  matched  Iterable  infos  NodeTraversal  t  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Node  n  FunctionInfo  f  String  fnName  Map  functionInfos  int  args  count  maxArgs  minArgs  optionalArgs  requiredCount  result  
[buglab_swap_variables]^maxArgs = Math.max ( f.args, f.hasVarArgs ? Integer.MAX_VALUE : maxArgs ) ;^176^^^^^161^189^maxArgs = Math.max ( maxArgs, f.hasVarArgs ? Integer.MAX_VALUE : f.args ) ;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] checkCall [RETURN_TYPE] void   Node n String fnName FunctionInfo> infos NodeTraversal t CheckLevel level [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  matched  Iterable  infos  NodeTraversal  t  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Node  n  FunctionInfo  f  String  fnName  Map  functionInfos  int  args  count  maxArgs  minArgs  optionalArgs  requiredCount  result  
[buglab_swap_variables]^maxArgs = Math.max (  f.hasVarArgs ? Integer.MAX_VALUE : f.args ) ;^176^^^^^161^189^maxArgs = Math.max ( maxArgs, f.hasVarArgs ? Integer.MAX_VALUE : f.args ) ;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] checkCall [RETURN_TYPE] void   Node n String fnName FunctionInfo> infos NodeTraversal t CheckLevel level [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  matched  Iterable  infos  NodeTraversal  t  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Node  n  FunctionInfo  f  String  fnName  Map  functionInfos  int  args  count  maxArgs  minArgs  optionalArgs  requiredCount  result  
[buglab_swap_variables]^maxArgs = Math.max ( maxArgs, f.hasVarArgs.hasVarArgs ? Integer.MAX_VALUE : f.args ) ;^176^^^^^161^189^maxArgs = Math.max ( maxArgs, f.hasVarArgs ? Integer.MAX_VALUE : f.args ) ;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] checkCall [RETURN_TYPE] void   Node n String fnName FunctionInfo> infos NodeTraversal t CheckLevel level [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  matched  Iterable  infos  NodeTraversal  t  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Node  n  FunctionInfo  f  String  fnName  Map  functionInfos  int  args  count  maxArgs  minArgs  optionalArgs  requiredCount  result  
[buglab_swap_variables]^maxArgs = Math.max ( maxArgs.hasVarArgs ? Integer.MAX_VALUE : f.args ) ;^176^^^^^161^189^maxArgs = Math.max ( maxArgs, f.hasVarArgs ? Integer.MAX_VALUE : f.args ) ;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] checkCall [RETURN_TYPE] void   Node n String fnName FunctionInfo> infos NodeTraversal t CheckLevel level [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  matched  Iterable  infos  NodeTraversal  t  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Node  n  FunctionInfo  f  String  fnName  Map  functionInfos  int  args  count  maxArgs  minArgs  optionalArgs  requiredCount  result  
[buglab_swap_variables]^maxArgs = Math.max ( f.hasVarArgs, maxArgs ? Integer.MAX_VALUE : f.args ) ;^176^^^^^161^189^maxArgs = Math.max ( maxArgs, f.hasVarArgs ? Integer.MAX_VALUE : f.args ) ;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] checkCall [RETURN_TYPE] void   Node n String fnName FunctionInfo> infos NodeTraversal t CheckLevel level [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  matched  Iterable  infos  NodeTraversal  t  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Node  n  FunctionInfo  f  String  fnName  Map  functionInfos  int  args  count  maxArgs  minArgs  optionalArgs  requiredCount  result  
[buglab_swap_variables]^maxArgs = Math.max ( maxArgs ? Integer.MAX_VALUE : f.args ) ;^176^^^^^161^189^maxArgs = Math.max ( maxArgs, f.hasVarArgs ? Integer.MAX_VALUE : f.args ) ;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] checkCall [RETURN_TYPE] void   Node n String fnName FunctionInfo> infos NodeTraversal t CheckLevel level [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  matched  Iterable  infos  NodeTraversal  t  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Node  n  FunctionInfo  f  String  fnName  Map  functionInfos  int  args  count  maxArgs  minArgs  optionalArgs  requiredCount  result  
[buglab_swap_variables]^int requiredCount = f.optionalArgs.args - f;^169^^^^^161^189^int requiredCount = f.args - f.optionalArgs;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] checkCall [RETURN_TYPE] void   Node n String fnName FunctionInfo> infos NodeTraversal t CheckLevel level [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  matched  Iterable  infos  NodeTraversal  t  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Node  n  FunctionInfo  f  String  fnName  Map  functionInfos  int  args  count  maxArgs  minArgs  optionalArgs  requiredCount  result  
[buglab_swap_variables]^int requiredCount = f.optionalArgs - f.args;^169^^^^^161^189^int requiredCount = f.args - f.optionalArgs;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] checkCall [RETURN_TYPE] void   Node n String fnName FunctionInfo> infos NodeTraversal t CheckLevel level [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  matched  Iterable  infos  NodeTraversal  t  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Node  n  FunctionInfo  f  String  fnName  Map  functionInfos  int  args  count  maxArgs  minArgs  optionalArgs  requiredCount  result  
[buglab_swap_variables]^t.getCompiler (  ) .report ( JSError.make (  n, level, WRONG_ARGUMENT_COUNT_ERROR, fnName,^180^181^182^183^^161^189^t.getCompiler (  ) .report ( JSError.make ( t, n, level, WRONG_ARGUMENT_COUNT_ERROR, fnName,^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] checkCall [RETURN_TYPE] void   Node n String fnName FunctionInfo> infos NodeTraversal t CheckLevel level [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  matched  Iterable  infos  NodeTraversal  t  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Node  n  FunctionInfo  f  String  fnName  Map  functionInfos  int  args  count  maxArgs  minArgs  optionalArgs  requiredCount  result  
[buglab_swap_variables]^t.getCompiler (  ) .report ( JSError.make ( t,  level, WRONG_ARGUMENT_COUNT_ERROR, fnName,^180^181^182^183^^161^189^t.getCompiler (  ) .report ( JSError.make ( t, n, level, WRONG_ARGUMENT_COUNT_ERROR, fnName,^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] checkCall [RETURN_TYPE] void   Node n String fnName FunctionInfo> infos NodeTraversal t CheckLevel level [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  matched  Iterable  infos  NodeTraversal  t  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Node  n  FunctionInfo  f  String  fnName  Map  functionInfos  int  args  count  maxArgs  minArgs  optionalArgs  requiredCount  result  
[buglab_swap_variables]^t.getCompiler (  ) .report ( JSError.make ( t, n, WRONG_ARGUMENT_COUNT_ERROR, level, fnName,^180^181^182^183^^161^189^t.getCompiler (  ) .report ( JSError.make ( t, n, level, WRONG_ARGUMENT_COUNT_ERROR, fnName,^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] checkCall [RETURN_TYPE] void   Node n String fnName FunctionInfo> infos NodeTraversal t CheckLevel level [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  matched  Iterable  infos  NodeTraversal  t  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Node  n  FunctionInfo  f  String  fnName  Map  functionInfos  int  args  count  maxArgs  minArgs  optionalArgs  requiredCount  result  
[buglab_swap_variables]^t.getCompiler (  ) .report ( JSError.make ( t, n,  WRONG_ARGUMENT_COUNT_ERROR, fnName,^180^181^182^183^^161^189^t.getCompiler (  ) .report ( JSError.make ( t, n, level, WRONG_ARGUMENT_COUNT_ERROR, fnName,^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] checkCall [RETURN_TYPE] void   Node n String fnName FunctionInfo> infos NodeTraversal t CheckLevel level [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  matched  Iterable  infos  NodeTraversal  t  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Node  n  FunctionInfo  f  String  fnName  Map  functionInfos  int  args  count  maxArgs  minArgs  optionalArgs  requiredCount  result  
[buglab_swap_variables]^t.getCompiler (  ) .report ( JSError.make ( t, n, level, WRONG_ARGUMENT_COUNT_ERROR,^180^181^182^183^^161^189^t.getCompiler (  ) .report ( JSError.make ( t, n, level, WRONG_ARGUMENT_COUNT_ERROR, fnName,^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] checkCall [RETURN_TYPE] void   Node n String fnName FunctionInfo> infos NodeTraversal t CheckLevel level [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  matched  Iterable  infos  NodeTraversal  t  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Node  n  FunctionInfo  f  String  fnName  Map  functionInfos  int  args  count  maxArgs  minArgs  optionalArgs  requiredCount  result  
[buglab_swap_variables]^t.getCompiler (  ) .report ( JSError.make ( WRONG_ARGUMENT_COUNT_ERROR, n, level, t, fnName,^180^181^182^183^^161^189^t.getCompiler (  ) .report ( JSError.make ( t, n, level, WRONG_ARGUMENT_COUNT_ERROR, fnName,^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] checkCall [RETURN_TYPE] void   Node n String fnName FunctionInfo> infos NodeTraversal t CheckLevel level [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  matched  Iterable  infos  NodeTraversal  t  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Node  n  FunctionInfo  f  String  fnName  Map  functionInfos  int  args  count  maxArgs  minArgs  optionalArgs  requiredCount  result  
[buglab_swap_variables]^t.getCompiler (  ) .report ( JSError.make ( t, n, level,  fnName,^180^181^182^183^^161^189^t.getCompiler (  ) .report ( JSError.make ( t, n, level, WRONG_ARGUMENT_COUNT_ERROR, fnName,^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] checkCall [RETURN_TYPE] void   Node n String fnName FunctionInfo> infos NodeTraversal t CheckLevel level [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  matched  Iterable  infos  NodeTraversal  t  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Node  n  FunctionInfo  f  String  fnName  Map  functionInfos  int  args  count  maxArgs  minArgs  optionalArgs  requiredCount  result  
[buglab_swap_variables]^JSError.make ( count, n, level, WRONG_ARGUMENT_COUNT_ERROR, fnName, String.valueOf ( t ) , String.valueOf ( minArgs ) ,^181^182^183^184^^161^189^JSError.make ( t, n, level, WRONG_ARGUMENT_COUNT_ERROR, fnName, String.valueOf ( count ) , String.valueOf ( minArgs ) ,^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] checkCall [RETURN_TYPE] void   Node n String fnName FunctionInfo> infos NodeTraversal t CheckLevel level [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  matched  Iterable  infos  NodeTraversal  t  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Node  n  FunctionInfo  f  String  fnName  Map  functionInfos  int  args  count  maxArgs  minArgs  optionalArgs  requiredCount  result  
[buglab_swap_variables]^JSError.make (  n, level, WRONG_ARGUMENT_COUNT_ERROR, fnName, String.valueOf ( count ) , String.valueOf ( minArgs ) ,^181^182^183^184^^161^189^JSError.make ( t, n, level, WRONG_ARGUMENT_COUNT_ERROR, fnName, String.valueOf ( count ) , String.valueOf ( minArgs ) ,^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] checkCall [RETURN_TYPE] void   Node n String fnName FunctionInfo> infos NodeTraversal t CheckLevel level [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  matched  Iterable  infos  NodeTraversal  t  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Node  n  FunctionInfo  f  String  fnName  Map  functionInfos  int  args  count  maxArgs  minArgs  optionalArgs  requiredCount  result  
[buglab_swap_variables]^JSError.make ( t, minArgs, level, WRONG_ARGUMENT_COUNT_ERROR, fnName, String.valueOf ( count ) , String.valueOf ( n ) ,^181^182^183^184^^161^189^JSError.make ( t, n, level, WRONG_ARGUMENT_COUNT_ERROR, fnName, String.valueOf ( count ) , String.valueOf ( minArgs ) ,^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] checkCall [RETURN_TYPE] void   Node n String fnName FunctionInfo> infos NodeTraversal t CheckLevel level [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  matched  Iterable  infos  NodeTraversal  t  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Node  n  FunctionInfo  f  String  fnName  Map  functionInfos  int  args  count  maxArgs  minArgs  optionalArgs  requiredCount  result  
[buglab_swap_variables]^JSError.make ( t,  level, WRONG_ARGUMENT_COUNT_ERROR, fnName, String.valueOf ( count ) , String.valueOf ( minArgs ) ,^181^182^183^184^^161^189^JSError.make ( t, n, level, WRONG_ARGUMENT_COUNT_ERROR, fnName, String.valueOf ( count ) , String.valueOf ( minArgs ) ,^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] checkCall [RETURN_TYPE] void   Node n String fnName FunctionInfo> infos NodeTraversal t CheckLevel level [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  matched  Iterable  infos  NodeTraversal  t  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Node  n  FunctionInfo  f  String  fnName  Map  functionInfos  int  args  count  maxArgs  minArgs  optionalArgs  requiredCount  result  
[buglab_swap_variables]^JSError.make ( t, n,  WRONG_ARGUMENT_COUNT_ERROR, fnName, String.valueOf ( count ) , String.valueOf ( minArgs ) ,^181^182^183^184^^161^189^JSError.make ( t, n, level, WRONG_ARGUMENT_COUNT_ERROR, fnName, String.valueOf ( count ) , String.valueOf ( minArgs ) ,^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] checkCall [RETURN_TYPE] void   Node n String fnName FunctionInfo> infos NodeTraversal t CheckLevel level [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  matched  Iterable  infos  NodeTraversal  t  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Node  n  FunctionInfo  f  String  fnName  Map  functionInfos  int  args  count  maxArgs  minArgs  optionalArgs  requiredCount  result  
[buglab_swap_variables]^JSError.make ( fnName, n, level, WRONG_ARGUMENT_COUNT_ERROR, t, String.valueOf ( count ) , String.valueOf ( minArgs ) ,^181^182^183^184^^161^189^JSError.make ( t, n, level, WRONG_ARGUMENT_COUNT_ERROR, fnName, String.valueOf ( count ) , String.valueOf ( minArgs ) ,^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] checkCall [RETURN_TYPE] void   Node n String fnName FunctionInfo> infos NodeTraversal t CheckLevel level [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  matched  Iterable  infos  NodeTraversal  t  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Node  n  FunctionInfo  f  String  fnName  Map  functionInfos  int  args  count  maxArgs  minArgs  optionalArgs  requiredCount  result  
[buglab_swap_variables]^JSError.make ( t, n, level, WRONG_ARGUMENT_COUNT_ERROR,  String.valueOf ( count ) , String.valueOf ( minArgs ) ,^181^182^183^184^^161^189^JSError.make ( t, n, level, WRONG_ARGUMENT_COUNT_ERROR, fnName, String.valueOf ( count ) , String.valueOf ( minArgs ) ,^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] checkCall [RETURN_TYPE] void   Node n String fnName FunctionInfo> infos NodeTraversal t CheckLevel level [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  matched  Iterable  infos  NodeTraversal  t  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Node  n  FunctionInfo  f  String  fnName  Map  functionInfos  int  args  count  maxArgs  minArgs  optionalArgs  requiredCount  result  
[buglab_swap_variables]^JSError.make ( t, n, level, count, fnName, String.valueOf ( WRONG_ARGUMENT_COUNT_ERROR ) , String.valueOf ( minArgs ) ,^181^182^183^184^^161^189^JSError.make ( t, n, level, WRONG_ARGUMENT_COUNT_ERROR, fnName, String.valueOf ( count ) , String.valueOf ( minArgs ) ,^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] checkCall [RETURN_TYPE] void   Node n String fnName FunctionInfo> infos NodeTraversal t CheckLevel level [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  matched  Iterable  infos  NodeTraversal  t  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Node  n  FunctionInfo  f  String  fnName  Map  functionInfos  int  args  count  maxArgs  minArgs  optionalArgs  requiredCount  result  
[buglab_swap_variables]^JSError.make ( t, n, level,  fnName, String.valueOf ( count ) , String.valueOf ( minArgs ) ,^181^182^183^184^^161^189^JSError.make ( t, n, level, WRONG_ARGUMENT_COUNT_ERROR, fnName, String.valueOf ( count ) , String.valueOf ( minArgs ) ,^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] checkCall [RETURN_TYPE] void   Node n String fnName FunctionInfo> infos NodeTraversal t CheckLevel level [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  matched  Iterable  infos  NodeTraversal  t  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Node  n  FunctionInfo  f  String  fnName  Map  functionInfos  int  args  count  maxArgs  minArgs  optionalArgs  requiredCount  result  
[buglab_swap_variables]^t.getCompiler (  ) .report ( JSError.make ( t, level, n, WRONG_ARGUMENT_COUNT_ERROR, fnName,^180^181^182^183^^161^189^t.getCompiler (  ) .report ( JSError.make ( t, n, level, WRONG_ARGUMENT_COUNT_ERROR, fnName,^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] checkCall [RETURN_TYPE] void   Node n String fnName FunctionInfo> infos NodeTraversal t CheckLevel level [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  matched  Iterable  infos  NodeTraversal  t  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Node  n  FunctionInfo  f  String  fnName  Map  functionInfos  int  args  count  maxArgs  minArgs  optionalArgs  requiredCount  result  
[buglab_swap_variables]^t.getCompiler (  ) .report ( JSError.make ( t, n, fnName, WRONG_ARGUMENT_COUNT_ERROR, level,^180^181^182^183^^161^189^t.getCompiler (  ) .report ( JSError.make ( t, n, level, WRONG_ARGUMENT_COUNT_ERROR, fnName,^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] checkCall [RETURN_TYPE] void   Node n String fnName FunctionInfo> infos NodeTraversal t CheckLevel level [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  matched  Iterable  infos  NodeTraversal  t  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Node  n  FunctionInfo  f  String  fnName  Map  functionInfos  int  args  count  maxArgs  minArgs  optionalArgs  requiredCount  result  
[buglab_swap_variables]^JSError.make ( level, n, t, WRONG_ARGUMENT_COUNT_ERROR, fnName, String.valueOf ( count ) , String.valueOf ( minArgs ) ,^181^182^183^184^^161^189^JSError.make ( t, n, level, WRONG_ARGUMENT_COUNT_ERROR, fnName, String.valueOf ( count ) , String.valueOf ( minArgs ) ,^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] checkCall [RETURN_TYPE] void   Node n String fnName FunctionInfo> infos NodeTraversal t CheckLevel level [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  matched  Iterable  infos  NodeTraversal  t  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Node  n  FunctionInfo  f  String  fnName  Map  functionInfos  int  args  count  maxArgs  minArgs  optionalArgs  requiredCount  result  
[buglab_swap_variables]^JSError.make ( t, fnName, level, WRONG_ARGUMENT_COUNT_ERROR, n, String.valueOf ( count ) , String.valueOf ( minArgs ) ,^181^182^183^184^^161^189^JSError.make ( t, n, level, WRONG_ARGUMENT_COUNT_ERROR, fnName, String.valueOf ( count ) , String.valueOf ( minArgs ) ,^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] checkCall [RETURN_TYPE] void   Node n String fnName FunctionInfo> infos NodeTraversal t CheckLevel level [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  matched  Iterable  infos  NodeTraversal  t  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Node  n  FunctionInfo  f  String  fnName  Map  functionInfos  int  args  count  maxArgs  minArgs  optionalArgs  requiredCount  result  
[buglab_swap_variables]^JSError.make ( t, n, fnName, WRONG_ARGUMENT_COUNT_ERROR, level, String.valueOf ( count ) , String.valueOf ( minArgs ) ,^181^182^183^184^^161^189^JSError.make ( t, n, level, WRONG_ARGUMENT_COUNT_ERROR, fnName, String.valueOf ( count ) , String.valueOf ( minArgs ) ,^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] checkCall [RETURN_TYPE] void   Node n String fnName FunctionInfo> infos NodeTraversal t CheckLevel level [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  matched  Iterable  infos  NodeTraversal  t  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Node  n  FunctionInfo  f  String  fnName  Map  functionInfos  int  args  count  maxArgs  minArgs  optionalArgs  requiredCount  result  
[buglab_swap_variables]^FunctionInfo fi = fn.get ( functionInfos ) ;^201^^^^^200^207^FunctionInfo fi = functionInfos.get ( fn ) ;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] getFunctionInfo [RETURN_TYPE] FunctionCheck$FunctionInfo   Node fn String fnSourceName [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  matched  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Node  fn  FunctionInfo  fi  String  fnSourceName  Map  functionInfos  int  args  count  maxArgs  minArgs  optionalArgs  requiredCount  result  
[buglab_swap_variables]^fi = createFunctionInfo ( compiler, fnSourceName, fn ) ;^203^^^^^200^207^fi = createFunctionInfo ( compiler, fn, fnSourceName ) ;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] getFunctionInfo [RETURN_TYPE] FunctionCheck$FunctionInfo   Node fn String fnSourceName [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  matched  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Node  fn  FunctionInfo  fi  String  fnSourceName  Map  functionInfos  int  args  count  maxArgs  minArgs  optionalArgs  requiredCount  result  
[buglab_swap_variables]^fi = createFunctionInfo ( compiler,  fnSourceName ) ;^203^^^^^200^207^fi = createFunctionInfo ( compiler, fn, fnSourceName ) ;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] getFunctionInfo [RETURN_TYPE] FunctionCheck$FunctionInfo   Node fn String fnSourceName [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  matched  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Node  fn  FunctionInfo  fi  String  fnSourceName  Map  functionInfos  int  args  count  maxArgs  minArgs  optionalArgs  requiredCount  result  
[buglab_swap_variables]^fi = createFunctionInfo ( compiler, fn ) ;^203^^^^^200^207^fi = createFunctionInfo ( compiler, fn, fnSourceName ) ;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] getFunctionInfo [RETURN_TYPE] FunctionCheck$FunctionInfo   Node fn String fnSourceName [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  matched  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Node  fn  FunctionInfo  fi  String  fnSourceName  Map  functionInfos  int  args  count  maxArgs  minArgs  optionalArgs  requiredCount  result  
[buglab_swap_variables]^fi = createFunctionInfo ( fnSourceName, fn, compiler ) ;^203^^^^^200^207^fi = createFunctionInfo ( compiler, fn, fnSourceName ) ;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] getFunctionInfo [RETURN_TYPE] FunctionCheck$FunctionInfo   Node fn String fnSourceName [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  matched  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Node  fn  FunctionInfo  fi  String  fnSourceName  Map  functionInfos  int  args  count  maxArgs  minArgs  optionalArgs  requiredCount  result  
[buglab_swap_variables]^fi = createFunctionInfo (  fn, fnSourceName ) ;^203^^^^^200^207^fi = createFunctionInfo ( compiler, fn, fnSourceName ) ;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] getFunctionInfo [RETURN_TYPE] FunctionCheck$FunctionInfo   Node fn String fnSourceName [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  matched  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Node  fn  FunctionInfo  fi  String  fnSourceName  Map  functionInfos  int  args  count  maxArgs  minArgs  optionalArgs  requiredCount  result  
[buglab_swap_variables]^fi = createFunctionInfo ( fn, compiler, fnSourceName ) ;^203^^^^^200^207^fi = createFunctionInfo ( compiler, fn, fnSourceName ) ;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] getFunctionInfo [RETURN_TYPE] FunctionCheck$FunctionInfo   Node fn String fnSourceName [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  matched  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Node  fn  FunctionInfo  fi  String  fnSourceName  Map  functionInfos  int  args  count  maxArgs  minArgs  optionalArgs  requiredCount  result  
[buglab_swap_variables]^functionInfos.put ( fi, fn ) ;^204^^^^^200^207^functionInfos.put ( fn, fi ) ;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] getFunctionInfo [RETURN_TYPE] FunctionCheck$FunctionInfo   Node fn String fnSourceName [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  matched  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Node  fn  FunctionInfo  fi  String  fnSourceName  Map  functionInfos  int  args  count  maxArgs  minArgs  optionalArgs  requiredCount  result  
[buglab_swap_variables]^functionInfos.put (  fi ) ;^204^^^^^200^207^functionInfos.put ( fn, fi ) ;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] getFunctionInfo [RETURN_TYPE] FunctionCheck$FunctionInfo   Node fn String fnSourceName [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  matched  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Node  fn  FunctionInfo  fi  String  fnSourceName  Map  functionInfos  int  args  count  maxArgs  minArgs  optionalArgs  requiredCount  result  
[buglab_swap_variables]^functionInfos.put ( fn ) ;^204^^^^^200^207^functionInfos.put ( fn, fi ) ;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] getFunctionInfo [RETURN_TYPE] FunctionCheck$FunctionInfo   Node fn String fnSourceName [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  matched  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Node  fn  FunctionInfo  fi  String  fnSourceName  Map  functionInfos  int  args  count  maxArgs  minArgs  optionalArgs  requiredCount  result  
[buglab_swap_variables]^compiler.report ( JSError.make ( VAR_ARGS_ERROR, a, fnSourceName )  ) ;^234^^^^^219^249^compiler.report ( JSError.make ( fnSourceName, a, VAR_ARGS_ERROR )  ) ;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] createFunctionInfo [RETURN_TYPE] FunctionCheck$FunctionInfo   AbstractCompiler compiler Node fn String fnSourceName [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  matched  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Node  a  args  fn  varArg  String  argName  fnSourceName  Map  functionInfos  int  args  count  maxArgs  minArgs  numArgs  optArgs  optionalArgs  requiredCount  result  
[buglab_swap_variables]^compiler.report ( JSError.make (  a, VAR_ARGS_ERROR )  ) ;^234^^^^^219^249^compiler.report ( JSError.make ( fnSourceName, a, VAR_ARGS_ERROR )  ) ;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] createFunctionInfo [RETURN_TYPE] FunctionCheck$FunctionInfo   AbstractCompiler compiler Node fn String fnSourceName [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  matched  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Node  a  args  fn  varArg  String  argName  fnSourceName  Map  functionInfos  int  args  count  maxArgs  minArgs  numArgs  optArgs  optionalArgs  requiredCount  result  
[buglab_swap_variables]^compiler.report ( JSError.make ( fnSourceName, VAR_ARGS_ERROR, a )  ) ;^234^^^^^219^249^compiler.report ( JSError.make ( fnSourceName, a, VAR_ARGS_ERROR )  ) ;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] createFunctionInfo [RETURN_TYPE] FunctionCheck$FunctionInfo   AbstractCompiler compiler Node fn String fnSourceName [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  matched  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Node  a  args  fn  varArg  String  argName  fnSourceName  Map  functionInfos  int  args  count  maxArgs  minArgs  numArgs  optArgs  optionalArgs  requiredCount  result  
[buglab_swap_variables]^compiler.report ( JSError.make ( fnSourceName,  VAR_ARGS_ERROR )  ) ;^234^^^^^219^249^compiler.report ( JSError.make ( fnSourceName, a, VAR_ARGS_ERROR )  ) ;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] createFunctionInfo [RETURN_TYPE] FunctionCheck$FunctionInfo   AbstractCompiler compiler Node fn String fnSourceName [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  matched  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Node  a  args  fn  varArg  String  argName  fnSourceName  Map  functionInfos  int  args  count  maxArgs  minArgs  numArgs  optArgs  optionalArgs  requiredCount  result  
[buglab_swap_variables]^compiler.report ( JSError.make ( fnSourceName, a )  ) ;^234^^^^^219^249^compiler.report ( JSError.make ( fnSourceName, a, VAR_ARGS_ERROR )  ) ;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] createFunctionInfo [RETURN_TYPE] FunctionCheck$FunctionInfo   AbstractCompiler compiler Node fn String fnSourceName [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  matched  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Node  a  args  fn  varArg  String  argName  fnSourceName  Map  functionInfos  int  args  count  maxArgs  minArgs  numArgs  optArgs  optionalArgs  requiredCount  result  
[buglab_swap_variables]^compiler.report ( JSError.make ( a, fnSourceName, VAR_ARGS_ERROR )  ) ;^234^^^^^219^249^compiler.report ( JSError.make ( fnSourceName, a, VAR_ARGS_ERROR )  ) ;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] createFunctionInfo [RETURN_TYPE] FunctionCheck$FunctionInfo   AbstractCompiler compiler Node fn String fnSourceName [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  matched  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Node  a  args  fn  varArg  String  argName  fnSourceName  Map  functionInfos  int  args  count  maxArgs  minArgs  numArgs  optArgs  optionalArgs  requiredCount  result  
[buglab_swap_variables]^compiler.report ( JSError.make ( OPTIONAL_ARGS_ERROR, a, fnSourceName )  ) ;^246^^^^^231^261^compiler.report ( JSError.make ( fnSourceName, a, OPTIONAL_ARGS_ERROR )  ) ;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] createFunctionInfo [RETURN_TYPE] FunctionCheck$FunctionInfo   AbstractCompiler compiler Node fn String fnSourceName [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  matched  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Node  a  args  fn  varArg  String  argName  fnSourceName  Map  functionInfos  int  args  count  maxArgs  minArgs  numArgs  optArgs  optionalArgs  requiredCount  result  
[buglab_swap_variables]^compiler.report ( JSError.make (  a, OPTIONAL_ARGS_ERROR )  ) ;^246^^^^^231^261^compiler.report ( JSError.make ( fnSourceName, a, OPTIONAL_ARGS_ERROR )  ) ;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] createFunctionInfo [RETURN_TYPE] FunctionCheck$FunctionInfo   AbstractCompiler compiler Node fn String fnSourceName [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  matched  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Node  a  args  fn  varArg  String  argName  fnSourceName  Map  functionInfos  int  args  count  maxArgs  minArgs  numArgs  optArgs  optionalArgs  requiredCount  result  
[buglab_swap_variables]^compiler.report ( JSError.make ( fnSourceName,  OPTIONAL_ARGS_ERROR )  ) ;^246^^^^^231^261^compiler.report ( JSError.make ( fnSourceName, a, OPTIONAL_ARGS_ERROR )  ) ;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] createFunctionInfo [RETURN_TYPE] FunctionCheck$FunctionInfo   AbstractCompiler compiler Node fn String fnSourceName [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  matched  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Node  a  args  fn  varArg  String  argName  fnSourceName  Map  functionInfos  int  args  count  maxArgs  minArgs  numArgs  optArgs  optionalArgs  requiredCount  result  
[buglab_swap_variables]^compiler.report ( JSError.make ( fnSourceName, a )  ) ;^246^^^^^231^261^compiler.report ( JSError.make ( fnSourceName, a, OPTIONAL_ARGS_ERROR )  ) ;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] createFunctionInfo [RETURN_TYPE] FunctionCheck$FunctionInfo   AbstractCompiler compiler Node fn String fnSourceName [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  matched  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Node  a  args  fn  varArg  String  argName  fnSourceName  Map  functionInfos  int  args  count  maxArgs  minArgs  numArgs  optArgs  optionalArgs  requiredCount  result  
[buglab_swap_variables]^compiler.report ( JSError.make ( a, fnSourceName, OPTIONAL_ARGS_ERROR )  ) ;^246^^^^^231^261^compiler.report ( JSError.make ( fnSourceName, a, OPTIONAL_ARGS_ERROR )  ) ;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] createFunctionInfo [RETURN_TYPE] FunctionCheck$FunctionInfo   AbstractCompiler compiler Node fn String fnSourceName [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  matched  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Node  a  args  fn  varArg  String  argName  fnSourceName  Map  functionInfos  int  args  count  maxArgs  minArgs  numArgs  optArgs  optionalArgs  requiredCount  result  
[buglab_swap_variables]^compiler.report ( JSError.make ( fnSourceName, OPTIONAL_ARGS_ERROR, a )  ) ;^246^^^^^231^261^compiler.report ( JSError.make ( fnSourceName, a, OPTIONAL_ARGS_ERROR )  ) ;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] createFunctionInfo [RETURN_TYPE] FunctionCheck$FunctionInfo   AbstractCompiler compiler Node fn String fnSourceName [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  matched  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Node  a  args  fn  varArg  String  argName  fnSourceName  Map  functionInfos  int  args  count  maxArgs  minArgs  numArgs  optArgs  optionalArgs  requiredCount  result  
[buglab_swap_variables]^for  ( Node args = a.getFirstChild (  ) ; a != null; a = a.getNext (  )  )  {^228^^^^^213^243^for  ( Node a = args.getFirstChild (  ) ; a != null; a = a.getNext (  )  )  {^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] createFunctionInfo [RETURN_TYPE] FunctionCheck$FunctionInfo   AbstractCompiler compiler Node fn String fnSourceName [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  matched  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Node  a  args  fn  varArg  String  argName  fnSourceName  Map  functionInfos  int  args  count  maxArgs  minArgs  numArgs  optArgs  optionalArgs  requiredCount  result  
[buglab_swap_variables]^return new FunctionInfo ( hasVarArgs, optArgs, numArgs ) ;^252^^^^^237^267^return new FunctionInfo ( numArgs, optArgs, hasVarArgs ) ;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] createFunctionInfo [RETURN_TYPE] FunctionCheck$FunctionInfo   AbstractCompiler compiler Node fn String fnSourceName [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  matched  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Node  a  args  fn  varArg  String  argName  fnSourceName  Map  functionInfos  int  args  count  maxArgs  minArgs  numArgs  optArgs  optionalArgs  requiredCount  result  
[buglab_swap_variables]^return new FunctionInfo (  optArgs, hasVarArgs ) ;^252^^^^^237^267^return new FunctionInfo ( numArgs, optArgs, hasVarArgs ) ;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] createFunctionInfo [RETURN_TYPE] FunctionCheck$FunctionInfo   AbstractCompiler compiler Node fn String fnSourceName [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  matched  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Node  a  args  fn  varArg  String  argName  fnSourceName  Map  functionInfos  int  args  count  maxArgs  minArgs  numArgs  optArgs  optionalArgs  requiredCount  result  
[buglab_swap_variables]^return new FunctionInfo ( optArgs, numArgs, hasVarArgs ) ;^252^^^^^237^267^return new FunctionInfo ( numArgs, optArgs, hasVarArgs ) ;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] createFunctionInfo [RETURN_TYPE] FunctionCheck$FunctionInfo   AbstractCompiler compiler Node fn String fnSourceName [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  matched  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Node  a  args  fn  varArg  String  argName  fnSourceName  Map  functionInfos  int  args  count  maxArgs  minArgs  numArgs  optArgs  optionalArgs  requiredCount  result  
[buglab_swap_variables]^return new FunctionInfo ( numArgs,  hasVarArgs ) ;^252^^^^^237^267^return new FunctionInfo ( numArgs, optArgs, hasVarArgs ) ;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] createFunctionInfo [RETURN_TYPE] FunctionCheck$FunctionInfo   AbstractCompiler compiler Node fn String fnSourceName [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  matched  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Node  a  args  fn  varArg  String  argName  fnSourceName  Map  functionInfos  int  args  count  maxArgs  minArgs  numArgs  optArgs  optionalArgs  requiredCount  result  
[buglab_swap_variables]^return new FunctionInfo ( numArgs, optArgs ) ;^252^^^^^237^267^return new FunctionInfo ( numArgs, optArgs, hasVarArgs ) ;^[CLASS] FunctionCheck FunctionInfo ArgCheck  [METHOD] createFunctionInfo [RETURN_TYPE] FunctionCheck$FunctionInfo   AbstractCompiler compiler Node fn String fnSourceName [VARIABLES] AbstractCompiler  compiler  boolean  hasVarArgs  matched  CheckLevel  level  DiagnosticType  OPTIONAL_ARGS_ERROR  VAR_ARGS_ERROR  WRONG_ARGUMENT_COUNT_ERROR  Node  a  args  fn  varArg  String  argName  fnSourceName  Map  functionInfos  int  args  count  maxArgs  minArgs  numArgs  optArgs  optionalArgs  requiredCount  result  
[buglab_swap_variables]^return o.hasVarArgs.args == args && o.optionalArgs == optionalArgs && o == hasVarArgs;^98^99^100^^^91^101^return o.args == args && o.optionalArgs == optionalArgs && o.hasVarArgs == hasVarArgs;^[CLASS] FunctionInfo  [METHOD] equals [RETURN_TYPE] boolean   Object other [VARIABLES] FunctionInfo  o  Object  other  boolean  hasVarArgs  int  args  optionalArgs  
[buglab_swap_variables]^return o.hasVarArgs == args && o.optionalArgs == optionalArgs && o.args == hasVarArgs;^98^99^100^^^91^101^return o.args == args && o.optionalArgs == optionalArgs && o.hasVarArgs == hasVarArgs;^[CLASS] FunctionInfo  [METHOD] equals [RETURN_TYPE] boolean   Object other [VARIABLES] FunctionInfo  o  Object  other  boolean  hasVarArgs  int  args  optionalArgs  
[buglab_swap_variables]^return o.args == o.optionalArgs && args == optionalArgs && o.hasVarArgs == hasVarArgs;^98^99^100^^^91^101^return o.args == args && o.optionalArgs == optionalArgs && o.hasVarArgs == hasVarArgs;^[CLASS] FunctionInfo  [METHOD] equals [RETURN_TYPE] boolean   Object other [VARIABLES] FunctionInfo  o  Object  other  boolean  hasVarArgs  int  args  optionalArgs  
[buglab_swap_variables]^return o.args == args && optionalArgs == o.optionalArgs && o.hasVarArgs == hasVarArgs;^98^99^100^^^91^101^return o.args == args && o.optionalArgs == optionalArgs && o.hasVarArgs == hasVarArgs;^[CLASS] FunctionInfo  [METHOD] equals [RETURN_TYPE] boolean   Object other [VARIABLES] FunctionInfo  o  Object  other  boolean  hasVarArgs  int  args  optionalArgs  
[buglab_swap_variables]^return optionalArgs == args && o.optionalArgs == o.args && o.hasVarArgs == hasVarArgs;^98^99^100^^^91^101^return o.args == args && o.optionalArgs == optionalArgs && o.hasVarArgs == hasVarArgs;^[CLASS] FunctionInfo  [METHOD] equals [RETURN_TYPE] boolean   Object other [VARIABLES] FunctionInfo  o  Object  other  boolean  hasVarArgs  int  args  optionalArgs  
[buglab_swap_variables]^return o.args == args && o.optionalArgs == optionalArgs && hasVarArgs == o.hasVarArgs;^98^99^100^^^91^101^return o.args == args && o.optionalArgs == optionalArgs && o.hasVarArgs == hasVarArgs;^[CLASS] FunctionInfo  [METHOD] equals [RETURN_TYPE] boolean   Object other [VARIABLES] FunctionInfo  o  Object  other  boolean  hasVarArgs  int  args  optionalArgs  
[buglab_swap_variables]^result = 37 * args + result;^105^^^^^103^109^result = 37 * result + args;^[CLASS] FunctionInfo  [METHOD] hashCode [RETURN_TYPE] int   [VARIABLES] int  args  optionalArgs  result  boolean  hasVarArgs  
[buglab_swap_variables]^result = 37 * optionalArgs + result;^106^^^^^103^109^result = 37 * result + optionalArgs;^[CLASS] FunctionInfo  [METHOD] hashCode [RETURN_TYPE] int   [VARIABLES] int  args  optionalArgs  result  boolean  hasVarArgs  
[buglab_swap_variables]^result = 37 * hasVarArgs +  ( result ? 1 : 0 ) ;^107^^^^^103^109^result = 37 * result +  ( hasVarArgs ? 1 : 0 ) ;^[CLASS] FunctionInfo  [METHOD] hashCode [RETURN_TYPE] int   [VARIABLES] int  args  optionalArgs  result  boolean  hasVarArgs  
[buglab_swap_variables]^return hasVarArgs + " total argument ( s )  " + "of which " + optionalArgs + " is/are optional" + ( args ? ", var_args supported" : "" ) ;^112^113^114^^^111^115^return args + " total argument ( s )  " + "of which " + optionalArgs + " is/are optional" + ( hasVarArgs ? ", var_args supported" : "" ) ;^[CLASS] FunctionInfo  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] int  args  optionalArgs  result  boolean  hasVarArgs  
[buglab_swap_variables]^return optionalArgs + " total argument ( s )  " + "of which " + args + " is/are optional" + ( hasVarArgs ? ", var_args supported" : "" ) ;^112^113^114^^^111^115^return args + " total argument ( s )  " + "of which " + optionalArgs + " is/are optional" + ( hasVarArgs ? ", var_args supported" : "" ) ;^[CLASS] FunctionInfo  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] int  args  optionalArgs  result  boolean  hasVarArgs  
[buglab_swap_variables]^return args + " total argument ( s )  " + "of which " + hasVarArgs + " is/are optional" + ( optionalArgs ? ", var_args supported" : "" ) ;^112^113^114^^^111^115^return args + " total argument ( s )  " + "of which " + optionalArgs + " is/are optional" + ( hasVarArgs ? ", var_args supported" : "" ) ;^[CLASS] FunctionInfo  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] int  args  optionalArgs  result  boolean  hasVarArgs  
[buglab_swap_variables]^Scope.Var v = fnName.getScope (  ) .getVar ( t ) ;^134^^^^^119^149^Scope.Var v = t.getScope (  ) .getVar ( fnName ) ;^[CLASS] ArgCheck  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Var  v  Node  fn  fnDef  n  parent  FunctionInfo  f  String  fnName  
[buglab_swap_variables]^FunctionInfo f = getFunctionInfo ( v, fnDef.getInputName (  )  ) ;^148^^^^^133^163^FunctionInfo f = getFunctionInfo ( fnDef, v.getInputName (  )  ) ;^[CLASS] ArgCheck  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Var  v  Node  fn  fnDef  n  parent  FunctionInfo  f  String  fnName  
[buglab_swap_variables]^FunctionInfo f = getFunctionInfo (  v.getInputName (  )  ) ;^148^^^^^133^163^FunctionInfo f = getFunctionInfo ( fnDef, v.getInputName (  )  ) ;^[CLASS] ArgCheck  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Var  v  Node  fn  fnDef  n  parent  FunctionInfo  f  String  fnName  
[buglab_swap_variables]^FunctionInfo f = getFunctionInfo ( fnDef.getInputName (  )  ) ;^148^^^^^133^163^FunctionInfo f = getFunctionInfo ( fnDef, v.getInputName (  )  ) ;^[CLASS] ArgCheck  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Var  v  Node  fn  fnDef  n  parent  FunctionInfo  f  String  fnName  
[buglab_swap_variables]^checkCall ( fnName, n, Collections.singletonList ( f ) , t, level ) ;^150^^^^^135^165^checkCall ( n, fnName, Collections.singletonList ( f ) , t, level ) ;^[CLASS] ArgCheck  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Var  v  Node  fn  fnDef  n  parent  FunctionInfo  f  String  fnName  
[buglab_swap_variables]^checkCall (  fnName, Collections.singletonList ( f ) , t, level ) ;^150^^^^^135^165^checkCall ( n, fnName, Collections.singletonList ( f ) , t, level ) ;^[CLASS] ArgCheck  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Var  v  Node  fn  fnDef  n  parent  FunctionInfo  f  String  fnName  
[buglab_swap_variables]^checkCall ( n, f, Collections.singletonList ( fnName ) , t, level ) ;^150^^^^^135^165^checkCall ( n, fnName, Collections.singletonList ( f ) , t, level ) ;^[CLASS] ArgCheck  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Var  v  Node  fn  fnDef  n  parent  FunctionInfo  f  String  fnName  
[buglab_swap_variables]^checkCall ( n,  Collections.singletonList ( f ) , t, level ) ;^150^^^^^135^165^checkCall ( n, fnName, Collections.singletonList ( f ) , t, level ) ;^[CLASS] ArgCheck  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Var  v  Node  fn  fnDef  n  parent  FunctionInfo  f  String  fnName  
[buglab_swap_variables]^checkCall ( n, levelnName, Collections.singletonList ( f ) , t, f ) ;^150^^^^^135^165^checkCall ( n, fnName, Collections.singletonList ( f ) , t, level ) ;^[CLASS] ArgCheck  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Var  v  Node  fn  fnDef  n  parent  FunctionInfo  f  String  fnName  
[buglab_swap_variables]^checkCall ( nnName, Collections.singletonList ( f ) , t, level ) ;^150^^^^^135^165^checkCall ( n, fnName, Collections.singletonList ( f ) , t, level ) ;^[CLASS] ArgCheck  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Var  v  Node  fn  fnDef  n  parent  FunctionInfo  f  String  fnName  
[buglab_swap_variables]^checkCall ( n, tnName, Collections.singletonList ( f ) , f, level ) ;^150^^^^^135^165^checkCall ( n, fnName, Collections.singletonList ( f ) , t, level ) ;^[CLASS] ArgCheck  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Var  v  Node  fn  fnDef  n  parent  FunctionInfo  f  String  fnName  
[buglab_swap_variables]^checkCall ( n, fnName, Collections.singletonList ( f ) ,  level ) ;^150^^^^^135^165^checkCall ( n, fnName, Collections.singletonList ( f ) , t, level ) ;^[CLASS] ArgCheck  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Var  v  Node  fn  fnDef  n  parent  FunctionInfo  f  String  fnName  
[buglab_swap_variables]^checkCall ( n, level, Collections.singletonList ( f ) , t, fnName ) ;^150^^^^^135^165^checkCall ( n, fnName, Collections.singletonList ( f ) , t, level ) ;^[CLASS] ArgCheck  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Var  v  Node  fn  fnDef  n  parent  FunctionInfo  f  String  fnName  
[buglab_swap_variables]^checkCall ( n, fnName, Collections.singletonList ( f ) , t ) ;^150^^^^^135^165^checkCall ( n, fnName, Collections.singletonList ( f ) , t, level ) ;^[CLASS] ArgCheck  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Var  v  Node  fn  fnDef  n  parent  FunctionInfo  f  String  fnName  
[buglab_swap_variables]^checkCall ( f, nnName, Collections.singletonList ( f ) , t, level ) ;^150^^^^^135^165^checkCall ( n, fnName, Collections.singletonList ( f ) , t, level ) ;^[CLASS] ArgCheck  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Var  v  Node  fn  fnDef  n  parent  FunctionInfo  f  String  fnName  
[buglab_swap_variables]^checkCall ( n, t, Collections.singletonList ( f ) , fnName, level ) ;^150^^^^^135^165^checkCall ( n, fnName, Collections.singletonList ( f ) , t, level ) ;^[CLASS] ArgCheck  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Var  v  Node  fn  fnDef  n  parent  FunctionInfo  f  String  fnName  
[buglab_swap_variables]^checkCall ( n, fnName, Collections.singletonList ( f ) , level, t ) ;^150^^^^^135^165^checkCall ( n, fnName, Collections.singletonList ( f ) , t, level ) ;^[CLASS] ArgCheck  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Var  v  Node  fn  fnDef  n  parent  FunctionInfo  f  String  fnName  
