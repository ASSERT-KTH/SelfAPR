[buglab_swap_variables]^mappedPaths.put ( symbolName, qualifiedName ) ;^176^^^^^169^178^mappedPaths.put ( qualifiedName, symbolName ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] <init> [RETURN_TYPE] Node)   String symbolName Node value [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  value  List  exports  paths  String  exportPath  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[buglab_swap_variables]^mappedPaths.put (  symbolName ) ;^176^^^^^169^178^mappedPaths.put ( qualifiedName, symbolName ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] <init> [RETURN_TYPE] Node)   String symbolName Node value [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  value  List  exports  paths  String  exportPath  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[buglab_swap_variables]^mappedPaths.put ( qualifiedName ) ;^176^^^^^169^178^mappedPaths.put ( qualifiedName, symbolName ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] <init> [RETURN_TYPE] Node)   String symbolName Node value [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  value  List  exports  paths  String  exportPath  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[buglab_swap_variables]^if  ( pieces < i.size (  )  - 1 )  {^97^^^^^78^104^if  ( i < pieces.size (  )  - 1 )  {^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] appendInferredPaths [RETURN_TYPE] void   String path [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  value  List  exports  paths  pieces  String  cPath  exportPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  int  i  
[buglab_swap_variables]^if  ( pieces == i.size (  )  - 1 || !paths.contains ( cPath )  )  {^90^^^^^78^104^if  ( i == pieces.size (  )  - 1 || !paths.contains ( cPath )  )  {^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] appendInferredPaths [RETURN_TYPE] void   String path [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  value  List  exports  paths  pieces  String  cPath  exportPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  int  i  
[buglab_swap_variables]^String cPath = Joiner.on ( "." ) .join ( Iterables.limit ( i, pieces + 1 )  ) ;^86^^^^^78^104^String cPath = Joiner.on ( "." ) .join ( Iterables.limit ( pieces, i + 1 )  ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] appendInferredPaths [RETURN_TYPE] void   String path [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  value  List  exports  paths  pieces  String  cPath  exportPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  int  i  
[buglab_swap_variables]^String cPath = Joiner.on ( "." ) .join ( Iterables.limit (  i + 1 )  ) ;^86^^^^^78^104^String cPath = Joiner.on ( "." ) .join ( Iterables.limit ( pieces, i + 1 )  ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] appendInferredPaths [RETURN_TYPE] void   String path [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  value  List  exports  paths  pieces  String  cPath  exportPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  int  i  
[buglab_swap_variables]^String cPath = Joiner.on ( "." ) .join ( Iterables.limit ( pieces + 1 )  ) ;^86^^^^^78^104^String cPath = Joiner.on ( "." ) .join ( Iterables.limit ( pieces, i + 1 )  ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] appendInferredPaths [RETURN_TYPE] void   String path [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  value  List  exports  paths  pieces  String  cPath  exportPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  int  i  
[buglab_swap_variables]^Node definitionParent = qualifiedName.get ( definitionMap ) ;^123^^^^^112^131^Node definitionParent = definitionMap.get ( qualifiedName ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] getFunctionValue [RETURN_TYPE] Node   Node value [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  definition  definitionParent  value  List  exports  paths  pieces  String  cPath  exportPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[buglab_swap_variables]^for  ( Node parameters = current.getFirstChild (  ) ;^145^^^^^137^159^for  ( Node current = parameters.getFirstChild (  ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] appendFunctionValue [RETURN_TYPE] void   Node definition [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  current  definition  definitionParent  parameters  value  List  exports  paths  pieces  String  cPath  exportPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  int  i  
[buglab_swap_variables]^if  ( cPath.containsKey ( mappedPaths )  )  {^225^^^^^214^237^if  ( mappedPaths.containsKey ( cPath )  )  {^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] getExportedPath [RETURN_TYPE] String   [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  current  definition  definitionParent  functionValue  parameters  value  List  exports  paths  pieces  String  cPath  exportPath  newPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  int  i  
[buglab_swap_variables]^if  ( pieces < i.size (  )  )  {^228^^^^^214^237^if  ( i < pieces.size (  )  )  {^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] getExportedPath [RETURN_TYPE] String   [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  current  definition  definitionParent  functionValue  parameters  value  List  exports  paths  pieces  String  cPath  exportPath  newPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  int  i  
[buglab_swap_variables]^newPath += "." + Joiner.on ( "." ) .join ( Iterables.skip ( i, pieces )  ) ;^229^^^^^214^237^newPath += "." + Joiner.on ( "." ) .join ( Iterables.skip ( pieces, i )  ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] getExportedPath [RETURN_TYPE] String   [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  current  definition  definitionParent  functionValue  parameters  value  List  exports  paths  pieces  String  cPath  exportPath  newPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  int  i  
[buglab_swap_variables]^newPath += "." + Joiner.on ( "." ) .join ( Iterables.skip (  i )  ) ;^229^^^^^214^237^newPath += "." + Joiner.on ( "." ) .join ( Iterables.skip ( pieces, i )  ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] getExportedPath [RETURN_TYPE] String   [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  current  definition  definitionParent  functionValue  parameters  value  List  exports  paths  pieces  String  cPath  exportPath  newPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  int  i  
[buglab_swap_variables]^newPath += "." + Joiner.on ( "." ) .join ( Iterables.skip ( pieces )  ) ;^229^^^^^214^237^newPath += "." + Joiner.on ( "." ) .join ( Iterables.skip ( pieces, i )  ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] getExportedPath [RETURN_TYPE] String   [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  current  definition  definitionParent  functionValue  parameters  value  List  exports  paths  pieces  String  cPath  exportPath  newPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  int  i  
[buglab_swap_variables]^return symbolName + "." + newPath;^232^^^^^214^237^return newPath + "." + symbolName;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] getExportedPath [RETURN_TYPE] String   [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  current  definition  definitionParent  functionValue  parameters  value  List  exports  paths  pieces  String  cPath  exportPath  newPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  int  i  
[buglab_swap_variables]^String newPath = cPath.get ( mappedPaths ) ;^226^^^^^214^237^String newPath = mappedPaths.get ( cPath ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] getExportedPath [RETURN_TYPE] String   [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  current  definition  definitionParent  functionValue  parameters  value  List  exports  paths  pieces  String  cPath  exportPath  newPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  int  i  
[buglab_swap_variables]^String cPath = Joiner.on ( "." ) .join ( Iterables.limit ( i, pieces )  ) ;^221^^^^^214^237^String cPath = Joiner.on ( "." ) .join ( Iterables.limit ( pieces, i )  ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] getExportedPath [RETURN_TYPE] String   [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  current  definition  definitionParent  functionValue  parameters  value  List  exports  paths  pieces  String  cPath  exportPath  newPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  int  i  
[buglab_swap_variables]^String cPath = Joiner.on ( "." ) .join ( Iterables.limit (  i )  ) ;^221^^^^^214^237^String cPath = Joiner.on ( "." ) .join ( Iterables.limit ( pieces, i )  ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] getExportedPath [RETURN_TYPE] String   [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  current  definition  definitionParent  functionValue  parameters  value  List  exports  paths  pieces  String  cPath  exportPath  newPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  int  i  
[buglab_swap_variables]^String cPath = Joiner.on ( "." ) .join ( Iterables.limit ( pieces )  ) ;^221^^^^^214^237^String cPath = Joiner.on ( "." ) .join ( Iterables.limit ( pieces, i )  ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] getExportedPath [RETURN_TYPE] String   [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  current  definition  definitionParent  functionValue  parameters  value  List  exports  paths  pieces  String  cPath  exportPath  newPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  int  i  
[buglab_swap_variables]^return symbolName + "." + exportPath;^236^^^^^214^237^return exportPath + "." + symbolName;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] getExportedPath [RETURN_TYPE] String   [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  current  definition  definitionParent  functionValue  parameters  value  List  exports  paths  pieces  String  cPath  exportPath  newPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  int  i  
[buglab_swap_variables]^new NodeTraversal ( root, this ) .traverse ( compiler ) ;^271^^^^^270^289^new NodeTraversal ( compiler, this ) .traverse ( root ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Set  sorted  boolean  StringBuilder  sb  Node  current  definition  definitionParent  externs  functionValue  parameters  root  value  Export  e1  e2  export  List  exports  paths  pieces  String  cPath  exportPath  exportedPath  newPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[buglab_swap_variables]^new NodeTraversal (  this ) .traverse ( root ) ;^271^^^^^270^289^new NodeTraversal ( compiler, this ) .traverse ( root ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Set  sorted  boolean  StringBuilder  sb  Node  current  definition  definitionParent  externs  functionValue  parameters  root  value  Export  e1  e2  export  List  exports  paths  pieces  String  cPath  exportPath  exportedPath  newPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[buglab_swap_variables]^return e2.getExportedPath (  ) .compareTo ( e1.getExportedPath (  )  ) ;^280^^^^^270^289^return e1.getExportedPath (  ) .compareTo ( e2.getExportedPath (  )  ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Set  sorted  boolean  StringBuilder  sb  Node  current  definition  definitionParent  externs  functionValue  parameters  root  value  Export  e1  e2  export  List  exports  paths  pieces  String  cPath  exportPath  exportedPath  newPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[buglab_swap_variables]^return e2.getExportedPath (  ) .compareTo ( e1.getExportedPath (  )  ) ;^280^^^^^279^281^return e1.getExportedPath (  ) .compareTo ( e2.getExportedPath (  )  ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] compare [RETURN_TYPE] int   Export e1 Export e2 [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  current  definition  definitionParent  externs  functionValue  parameters  root  value  Export  e1  e2  List  exports  paths  pieces  String  cPath  exportPath  exportedPath  newPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[buglab_swap_variables]^definitionMap.put ( parent.getQualifiedName (  ) , n ) ;^307^^^^^292^322^definitionMap.put ( n.getQualifiedName (  ) , parent ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  NodeTraversal  t  Node  current  definition  definitionParent  externs  functionValue  n  parameters  parent  root  value  List  exportPropertyNames  exportSymbolNames  exports  paths  pieces  String  cPath  exportPath  exportedPath  newPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[buglab_swap_variables]^definitionMap.put ( n.getQualifiedName (  )  ) ;^307^^^^^292^322^definitionMap.put ( n.getQualifiedName (  ) , parent ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  NodeTraversal  t  Node  current  definition  definitionParent  externs  functionValue  n  parameters  parent  root  value  List  exportPropertyNames  exportSymbolNames  exports  paths  pieces  String  cPath  exportPath  exportedPath  newPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[buglab_swap_variables]^if  ( n.contains ( exportPropertyNames.getQualifiedName (  )  )  )  {^329^^^^^314^344^if  ( exportPropertyNames.contains ( n.getQualifiedName (  )  )  )  {^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  NodeTraversal  t  Node  current  definition  definitionParent  externs  functionValue  n  parameters  parent  root  value  List  exportPropertyNames  exportSymbolNames  exports  paths  pieces  String  cPath  exportPath  exportedPath  newPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[buglab_swap_variables]^if  ( n.contains ( exportSymbolNames.getQualifiedName (  )  )  )  {^333^^^^^318^348^if  ( exportSymbolNames.contains ( n.getQualifiedName (  )  )  )  {^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  NodeTraversal  t  Node  current  definition  definitionParent  externs  functionValue  n  parameters  parent  root  value  List  exportPropertyNames  exportSymbolNames  exports  paths  pieces  String  cPath  exportPath  exportedPath  newPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[buglab_swap_variables]^this.exports.add ( new SymbolExport ( valueArg.getString (  ) , nameArg )  ) ;^357^^^^^339^358^this.exports.add ( new SymbolExport ( nameArg.getString (  ) , valueArg )  ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] handleSymbolExport [RETURN_TYPE] void   Node parent [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  current  definition  definitionParent  externs  functionValue  n  nameArg  parameters  parent  root  thisNode  value  valueArg  List  exportPropertyNames  exportSymbolNames  exports  paths  pieces  String  cPath  exportPath  exportedPath  newPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[buglab_swap_variables]^this.exports.add ( new SymbolExport ( nameArg.getString (  )  )  ) ;^357^^^^^339^358^this.exports.add ( new SymbolExport ( nameArg.getString (  ) , valueArg )  ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] handleSymbolExport [RETURN_TYPE] void   Node parent [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  current  definition  definitionParent  externs  functionValue  n  nameArg  parameters  parent  root  thisNode  value  valueArg  List  exportPropertyNames  exportSymbolNames  exports  paths  pieces  String  cPath  exportPath  exportedPath  newPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[buglab_swap_variables]^new PropertyExport ( valueArg.getQualifiedName (  ) , nameArg.getString (  ) , objectArg )  ) ;^384^385^386^^^360^387^new PropertyExport ( objectArg.getQualifiedName (  ) , nameArg.getString (  ) , valueArg )  ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] handlePropertyExport [RETURN_TYPE] void   Node parent [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  current  definition  definitionParent  externs  functionValue  n  nameArg  objectArg  parameters  parent  root  thisNode  value  valueArg  List  exportPropertyNames  exportSymbolNames  exports  paths  pieces  String  cPath  exportPath  exportedPath  newPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[buglab_swap_variables]^new PropertyExport ( objectArg.getQualifiedName (  ) , valueArg.getString (  ) , nameArg )  ) ;^384^385^386^^^360^387^new PropertyExport ( objectArg.getQualifiedName (  ) , nameArg.getString (  ) , valueArg )  ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] handlePropertyExport [RETURN_TYPE] void   Node parent [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  current  definition  definitionParent  externs  functionValue  n  nameArg  objectArg  parameters  parent  root  thisNode  value  valueArg  List  exportPropertyNames  exportSymbolNames  exports  paths  pieces  String  cPath  exportPath  exportedPath  newPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[buglab_swap_variables]^new PropertyExport ( objectArg.getQualifiedName (  ) .getString (  ) , valueArg )  ) ;^384^385^386^^^360^387^new PropertyExport ( objectArg.getQualifiedName (  ) , nameArg.getString (  ) , valueArg )  ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] handlePropertyExport [RETURN_TYPE] void   Node parent [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  current  definition  definitionParent  externs  functionValue  n  nameArg  objectArg  parameters  parent  root  thisNode  value  valueArg  List  exportPropertyNames  exportSymbolNames  exports  paths  pieces  String  cPath  exportPath  exportedPath  newPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[buglab_swap_variables]^new PropertyExport ( objectArg.getQualifiedName (  ) , nameArg.getString (  )  )  ) ;^384^385^386^^^360^387^new PropertyExport ( objectArg.getQualifiedName (  ) , nameArg.getString (  ) , valueArg )  ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] handlePropertyExport [RETURN_TYPE] void   Node parent [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  current  definition  definitionParent  externs  functionValue  n  nameArg  objectArg  parameters  parent  root  thisNode  value  valueArg  List  exportPropertyNames  exportSymbolNames  exports  paths  pieces  String  cPath  exportPath  exportedPath  newPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[buglab_swap_variables]^this.exports.add ( new PropertyExport ( nameArg.getQualifiedName (  ) , objectArg.getString (  ) , valueArg )  ) ;^383^384^385^386^^360^387^this.exports.add ( new PropertyExport ( objectArg.getQualifiedName (  ) , nameArg.getString (  ) , valueArg )  ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] handlePropertyExport [RETURN_TYPE] void   Node parent [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  current  definition  definitionParent  externs  functionValue  n  nameArg  objectArg  parameters  parent  root  thisNode  value  valueArg  List  exportPropertyNames  exportSymbolNames  exports  paths  pieces  String  cPath  exportPath  exportedPath  newPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[buglab_swap_variables]^this.exports.add ( new PropertyExport ( objectArg.getQualifiedName (  ) , valueArg.getString (  ) , nameArg )  ) ;^383^384^385^386^^360^387^this.exports.add ( new PropertyExport ( objectArg.getQualifiedName (  ) , nameArg.getString (  ) , valueArg )  ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] handlePropertyExport [RETURN_TYPE] void   Node parent [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  current  definition  definitionParent  externs  functionValue  n  nameArg  objectArg  parameters  parent  root  thisNode  value  valueArg  List  exportPropertyNames  exportSymbolNames  exports  paths  pieces  String  cPath  exportPath  exportedPath  newPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[buglab_swap_variables]^this.exports.add ( new PropertyExport ( objectArg.getQualifiedName (  ) .getString (  ) , valueArg )  ) ;^383^384^385^386^^360^387^this.exports.add ( new PropertyExport ( objectArg.getQualifiedName (  ) , nameArg.getString (  ) , valueArg )  ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] handlePropertyExport [RETURN_TYPE] void   Node parent [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  current  definition  definitionParent  externs  functionValue  n  nameArg  objectArg  parameters  parent  root  thisNode  value  valueArg  List  exportPropertyNames  exportSymbolNames  exports  paths  pieces  String  cPath  exportPath  exportedPath  newPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[buglab_swap_variables]^this.exports.add ( new PropertyExport ( valueArg.getQualifiedName (  ) , nameArg.getString (  ) , objectArg )  ) ;^383^384^385^386^^360^387^this.exports.add ( new PropertyExport ( objectArg.getQualifiedName (  ) , nameArg.getString (  ) , valueArg )  ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] handlePropertyExport [RETURN_TYPE] void   Node parent [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  current  definition  definitionParent  externs  functionValue  n  nameArg  objectArg  parameters  parent  root  thisNode  value  valueArg  List  exportPropertyNames  exportSymbolNames  exports  paths  pieces  String  cPath  exportPath  exportedPath  newPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[buglab_swap_variables]^this.exports.add ( new PropertyExport ( objectArg.getQualifiedName (  ) , nameArg.getString (  )  )  ) ;^383^384^385^386^^360^387^this.exports.add ( new PropertyExport ( objectArg.getQualifiedName (  ) , nameArg.getString (  ) , valueArg )  ) ;^[CLASS] ExternExportsPass Export SymbolExport PropertyExport 1  [METHOD] handlePropertyExport [RETURN_TYPE] void   Node parent [VARIABLES] AbstractCompiler  compiler  boolean  StringBuilder  sb  Node  current  definition  definitionParent  externs  functionValue  n  nameArg  objectArg  parameters  parent  root  thisNode  value  valueArg  List  exportPropertyNames  exportSymbolNames  exports  paths  pieces  String  cPath  exportPath  exportedPath  newPath  path  qualifiedName  symbolName  Map  definitionMap  mappedPaths  
[buglab_swap_variables]^if  ( pieces < i.size (  )  - 1 )  {^97^^^^^78^104^if  ( i < pieces.size (  )  - 1 )  {^[CLASS] Export  [METHOD] appendInferredPaths [RETURN_TYPE] void   String path [VARIABLES] boolean  List  pieces  String  cPath  path  int  i  
[buglab_swap_variables]^for  ( piecesnt i = 0; i < i.size (  ) ; ++i )  {^84^^^^^78^104^for  ( int i = 0; i < pieces.size (  ) ; ++i )  {^[CLASS] Export  [METHOD] appendInferredPaths [RETURN_TYPE] void   String path [VARIABLES] boolean  List  pieces  String  cPath  path  int  i  
[buglab_swap_variables]^if  ( pieces == i.size (  )  - 1 || !paths.contains ( cPath )  )  {^90^^^^^78^104^if  ( i == pieces.size (  )  - 1 || !paths.contains ( cPath )  )  {^[CLASS] Export  [METHOD] appendInferredPaths [RETURN_TYPE] void   String path [VARIABLES] boolean  List  pieces  String  cPath  path  int  i  
[buglab_swap_variables]^String cPath = Joiner.on ( "." ) .join ( Iterables.limit ( i, pieces + 1 )  ) ;^86^^^^^78^104^String cPath = Joiner.on ( "." ) .join ( Iterables.limit ( pieces, i + 1 )  ) ;^[CLASS] Export  [METHOD] appendInferredPaths [RETURN_TYPE] void   String path [VARIABLES] boolean  List  pieces  String  cPath  path  int  i  
[buglab_swap_variables]^String cPath = Joiner.on ( "." ) .join ( Iterables.limit (  i + 1 )  ) ;^86^^^^^78^104^String cPath = Joiner.on ( "." ) .join ( Iterables.limit ( pieces, i + 1 )  ) ;^[CLASS] Export  [METHOD] appendInferredPaths [RETURN_TYPE] void   String path [VARIABLES] boolean  List  pieces  String  cPath  path  int  i  
[buglab_swap_variables]^String cPath = Joiner.on ( "." ) .join ( Iterables.limit ( pieces + 1 )  ) ;^86^^^^^78^104^String cPath = Joiner.on ( "." ) .join ( Iterables.limit ( pieces, i + 1 )  ) ;^[CLASS] Export  [METHOD] appendInferredPaths [RETURN_TYPE] void   String path [VARIABLES] boolean  List  pieces  String  cPath  path  int  i  
[buglab_swap_variables]^Node definitionParent = qualifiedName.get ( definitionMap ) ;^123^^^^^112^131^Node definitionParent = definitionMap.get ( qualifiedName ) ;^[CLASS] Export  [METHOD] getFunctionValue [RETURN_TYPE] Node   Node value [VARIABLES] boolean  Node  definition  definitionParent  value  String  qualifiedName  
[buglab_swap_variables]^for  ( Node parameters = current.getFirstChild (  ) ;^145^^^^^137^159^for  ( Node current = parameters.getFirstChild (  ) ;^[CLASS] Export  [METHOD] appendFunctionValue [RETURN_TYPE] void   Node definition [VARIABLES] boolean  Node  current  definition  parameters  int  i  
[buglab_swap_variables]^mappedPaths.put ( symbolName, qualifiedName ) ;^176^^^^^169^178^mappedPaths.put ( qualifiedName, symbolName ) ;^[CLASS] SymbolExport  [METHOD] <init> [RETURN_TYPE] Node)   String symbolName Node value [VARIABLES] Node  value  String  qualifiedName  symbolName  boolean  
[buglab_swap_variables]^mappedPaths.put (  symbolName ) ;^176^^^^^169^178^mappedPaths.put ( qualifiedName, symbolName ) ;^[CLASS] SymbolExport  [METHOD] <init> [RETURN_TYPE] Node)   String symbolName Node value [VARIABLES] Node  value  String  qualifiedName  symbolName  boolean  
[buglab_swap_variables]^mappedPaths.put ( qualifiedName ) ;^176^^^^^169^178^mappedPaths.put ( qualifiedName, symbolName ) ;^[CLASS] SymbolExport  [METHOD] <init> [RETURN_TYPE] Node)   String symbolName Node value [VARIABLES] Node  value  String  qualifiedName  symbolName  boolean  
[buglab_swap_variables]^if  ( pieces < i.size (  )  )  {^228^^^^^214^237^if  ( i < pieces.size (  )  )  {^[CLASS] PropertyExport  [METHOD] getExportedPath [RETURN_TYPE] String   [VARIABLES] List  pieces  String  cPath  exportPath  newPath  symbolName  boolean  int  i  Node  value  
[buglab_swap_variables]^newPath += "." + Joiner.on ( "." ) .join ( Iterables.skip ( i, pieces )  ) ;^229^^^^^214^237^newPath += "." + Joiner.on ( "." ) .join ( Iterables.skip ( pieces, i )  ) ;^[CLASS] PropertyExport  [METHOD] getExportedPath [RETURN_TYPE] String   [VARIABLES] List  pieces  String  cPath  exportPath  newPath  symbolName  boolean  int  i  Node  value  
[buglab_swap_variables]^newPath += "." + Joiner.on ( "." ) .join ( Iterables.skip (  i )  ) ;^229^^^^^214^237^newPath += "." + Joiner.on ( "." ) .join ( Iterables.skip ( pieces, i )  ) ;^[CLASS] PropertyExport  [METHOD] getExportedPath [RETURN_TYPE] String   [VARIABLES] List  pieces  String  cPath  exportPath  newPath  symbolName  boolean  int  i  Node  value  
[buglab_swap_variables]^newPath += "." + Joiner.on ( "." ) .join ( Iterables.skip ( pieces )  ) ;^229^^^^^214^237^newPath += "." + Joiner.on ( "." ) .join ( Iterables.skip ( pieces, i )  ) ;^[CLASS] PropertyExport  [METHOD] getExportedPath [RETURN_TYPE] String   [VARIABLES] List  pieces  String  cPath  exportPath  newPath  symbolName  boolean  int  i  Node  value  
[buglab_swap_variables]^return symbolName + "." + newPath;^232^^^^^214^237^return newPath + "." + symbolName;^[CLASS] PropertyExport  [METHOD] getExportedPath [RETURN_TYPE] String   [VARIABLES] List  pieces  String  cPath  exportPath  newPath  symbolName  boolean  int  i  Node  value  
[buglab_swap_variables]^String newPath = cPath.get ( mappedPaths ) ;^226^^^^^214^237^String newPath = mappedPaths.get ( cPath ) ;^[CLASS] PropertyExport  [METHOD] getExportedPath [RETURN_TYPE] String   [VARIABLES] List  pieces  String  cPath  exportPath  newPath  symbolName  boolean  int  i  Node  value  
[buglab_swap_variables]^for  ( piecesnt i = i.size (  ) ; i > 0; i-- )  {^219^^^^^214^237^for  ( int i = pieces.size (  ) ; i > 0; i-- )  {^[CLASS] PropertyExport  [METHOD] getExportedPath [RETURN_TYPE] String   [VARIABLES] List  pieces  String  cPath  exportPath  newPath  symbolName  boolean  int  i  Node  value  
[buglab_swap_variables]^String cPath = Joiner.on ( "." ) .join ( Iterables.limit ( i, pieces )  ) ;^221^^^^^214^237^String cPath = Joiner.on ( "." ) .join ( Iterables.limit ( pieces, i )  ) ;^[CLASS] PropertyExport  [METHOD] getExportedPath [RETURN_TYPE] String   [VARIABLES] List  pieces  String  cPath  exportPath  newPath  symbolName  boolean  int  i  Node  value  
[buglab_swap_variables]^String cPath = Joiner.on ( "." ) .join ( Iterables.limit (  i )  ) ;^221^^^^^214^237^String cPath = Joiner.on ( "." ) .join ( Iterables.limit ( pieces, i )  ) ;^[CLASS] PropertyExport  [METHOD] getExportedPath [RETURN_TYPE] String   [VARIABLES] List  pieces  String  cPath  exportPath  newPath  symbolName  boolean  int  i  Node  value  
[buglab_swap_variables]^String cPath = Joiner.on ( "." ) .join ( Iterables.limit ( pieces )  ) ;^221^^^^^214^237^String cPath = Joiner.on ( "." ) .join ( Iterables.limit ( pieces, i )  ) ;^[CLASS] PropertyExport  [METHOD] getExportedPath [RETURN_TYPE] String   [VARIABLES] List  pieces  String  cPath  exportPath  newPath  symbolName  boolean  int  i  Node  value  
[buglab_swap_variables]^if  ( cPath.containsKey ( mappedPaths )  )  {^225^^^^^214^237^if  ( mappedPaths.containsKey ( cPath )  )  {^[CLASS] PropertyExport  [METHOD] getExportedPath [RETURN_TYPE] String   [VARIABLES] List  pieces  String  cPath  exportPath  newPath  symbolName  boolean  int  i  Node  value  
[buglab_swap_variables]^return symbolName + "." + exportPath;^236^^^^^214^237^return exportPath + "." + symbolName;^[CLASS] PropertyExport  [METHOD] getExportedPath [RETURN_TYPE] String   [VARIABLES] List  pieces  String  cPath  exportPath  newPath  symbolName  boolean  int  i  Node  value  
[buglab_swap_variables]^return e2.getExportedPath (  ) .compareTo ( e1.getExportedPath (  )  ) ;^280^^^^^279^281^return e1.getExportedPath (  ) .compareTo ( e2.getExportedPath (  )  ) ;^[CLASS] 1  [METHOD] compare [RETURN_TYPE] int   Export e1 Export e2 [VARIABLES] boolean  Export  e1  e2  
