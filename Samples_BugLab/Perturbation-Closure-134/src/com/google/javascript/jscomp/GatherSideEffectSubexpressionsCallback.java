[buglab_swap_variables]^Preconditions.checkArgument ( ( AND.getType (  )  == Token.AND )  ||  ( original.getType (  )  == Token.OR ) , "Expected: original or OR, Got: " + Token.name ( original.getType (  )  )  ) ;^115^116^117^^^114^126^Preconditions.checkArgument ( ( original.getType (  )  == Token.AND )  ||  ( original.getType (  )  == Token.OR ) , "Expected: AND or OR, Got: " + Token.name ( original.getType (  )  )  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] keepSimplifiedShortCircuitExpression [RETURN_TYPE] void   Node original [VARIABLES] AbstractCompiler  compiler  List  replacements  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  Node  left  original  right  simplified  simplifiedRight  
[buglab_swap_variables]^Preconditions.checkArgument ( ( original.getType (  )  == Token.AND )  ||  ( original.getType (  )  == Token.OR ) , "Expected: OR or AND, Got: " + Token.name ( original.getType (  )  )  ) ;^115^116^117^^^114^126^Preconditions.checkArgument ( ( original.getType (  )  == Token.AND )  ||  ( original.getType (  )  == Token.OR ) , "Expected: AND or OR, Got: " + Token.name ( original.getType (  )  )  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] keepSimplifiedShortCircuitExpression [RETURN_TYPE] void   Node original [VARIABLES] AbstractCompiler  compiler  List  replacements  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  Node  left  original  right  simplified  simplifiedRight  
[buglab_swap_variables]^Preconditions.checkArgument ( ( original.getType (  )  == Token.AND )  ||  ( original.getType (  )  == Token.OR ) , "Expected: AND or  Got: " + Token.name ( original.getType (  )  )  ) ;^115^116^117^^^114^126^Preconditions.checkArgument ( ( original.getType (  )  == Token.AND )  ||  ( original.getType (  )  == Token.OR ) , "Expected: AND or OR, Got: " + Token.name ( original.getType (  )  )  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] keepSimplifiedShortCircuitExpression [RETURN_TYPE] void   Node original [VARIABLES] AbstractCompiler  compiler  List  replacements  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  Node  left  original  right  simplified  simplifiedRight  
[buglab_swap_variables]^simplified.addChildToBack ( simplifiedRightRight ) ;^124^^^^^114^126^simplified.addChildToBack ( simplifiedRight ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] keepSimplifiedShortCircuitExpression [RETURN_TYPE] void   Node original [VARIABLES] AbstractCompiler  compiler  List  replacements  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  Node  left  original  right  simplified  simplifiedRight  
[buglab_swap_variables]^simplified.addChildToBack ( simplified ) ;^124^^^^^114^126^simplified.addChildToBack ( simplifiedRight ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] keepSimplifiedShortCircuitExpression [RETURN_TYPE] void   Node original [VARIABLES] AbstractCompiler  compiler  List  replacements  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  Node  left  original  right  simplified  simplifiedRight  
[buglab_swap_variables]^Preconditions.checkArgument ( HOOK.getType (  )  == Token.HOOK, "Expected: hook, Got: " + Token.name ( hook.getType (  )  )  ) ;^132^133^134^^^129^154^Preconditions.checkArgument ( hook.getType (  )  == Token.HOOK, "Expected: HOOK, Got: " + Token.name ( hook.getType (  )  )  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] keepSimplifiedHookExpression [RETURN_TYPE] void   Node hook boolean thenHasSideEffects boolean elseHasSideEffects [VARIABLES] AbstractCompiler  compiler  Set  FORBIDDEN_TYPES  boolean  elseHasSideEffects  thenHasSideEffects  SideEffectAccumulator  accumulator  Node  body  condition  elseBranch  hook  simplified  thenBranch  List  replacements  int  type  
[buglab_swap_variables]^Preconditions.checkArgument ( hook.getType (  )  == Token. "Expected: HOOK, Got: " + Token.name ( hook.getType (  )  )  ) ;^132^133^134^^^129^154^Preconditions.checkArgument ( hook.getType (  )  == Token.HOOK, "Expected: HOOK, Got: " + Token.name ( hook.getType (  )  )  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] keepSimplifiedHookExpression [RETURN_TYPE] void   Node hook boolean thenHasSideEffects boolean elseHasSideEffects [VARIABLES] AbstractCompiler  compiler  Set  FORBIDDEN_TYPES  boolean  elseHasSideEffects  thenHasSideEffects  SideEffectAccumulator  accumulator  Node  body  condition  elseBranch  hook  simplified  thenBranch  List  replacements  int  type  
[buglab_swap_variables]^Node simplified = new Node ( condition, type.cloneTree (  ) , simplifyShortCircuitBranch ( body )  ) ;^147^148^^^^129^154^Node simplified = new Node ( type, condition.cloneTree (  ) , simplifyShortCircuitBranch ( body )  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] keepSimplifiedHookExpression [RETURN_TYPE] void   Node hook boolean thenHasSideEffects boolean elseHasSideEffects [VARIABLES] AbstractCompiler  compiler  Set  FORBIDDEN_TYPES  boolean  elseHasSideEffects  thenHasSideEffects  SideEffectAccumulator  accumulator  Node  body  condition  elseBranch  hook  simplified  thenBranch  List  replacements  int  type  
[buglab_swap_variables]^Node simplified = new Node (  condition.cloneTree (  ) , simplifyShortCircuitBranch ( body )  ) ;^147^148^^^^129^154^Node simplified = new Node ( type, condition.cloneTree (  ) , simplifyShortCircuitBranch ( body )  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] keepSimplifiedHookExpression [RETURN_TYPE] void   Node hook boolean thenHasSideEffects boolean elseHasSideEffects [VARIABLES] AbstractCompiler  compiler  Set  FORBIDDEN_TYPES  boolean  elseHasSideEffects  thenHasSideEffects  SideEffectAccumulator  accumulator  Node  body  condition  elseBranch  hook  simplified  thenBranch  List  replacements  int  type  
[buglab_swap_variables]^Node simplified = new Node ( type, body.cloneTree (  ) , simplifyShortCircuitBranch ( condition )  ) ;^147^148^^^^129^154^Node simplified = new Node ( type, condition.cloneTree (  ) , simplifyShortCircuitBranch ( body )  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] keepSimplifiedHookExpression [RETURN_TYPE] void   Node hook boolean thenHasSideEffects boolean elseHasSideEffects [VARIABLES] AbstractCompiler  compiler  Set  FORBIDDEN_TYPES  boolean  elseHasSideEffects  thenHasSideEffects  SideEffectAccumulator  accumulator  Node  body  condition  elseBranch  hook  simplified  thenBranch  List  replacements  int  type  
[buglab_swap_variables]^Node simplified = new Node ( type.cloneTree (  ) , simplifyShortCircuitBranch ( body )  ) ;^147^148^^^^129^154^Node simplified = new Node ( type, condition.cloneTree (  ) , simplifyShortCircuitBranch ( body )  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] keepSimplifiedHookExpression [RETURN_TYPE] void   Node hook boolean thenHasSideEffects boolean elseHasSideEffects [VARIABLES] AbstractCompiler  compiler  Set  FORBIDDEN_TYPES  boolean  elseHasSideEffects  thenHasSideEffects  SideEffectAccumulator  accumulator  Node  body  condition  elseBranch  hook  simplified  thenBranch  List  replacements  int  type  
[buglab_swap_variables]^Node simplified = new Node ( body, condition.cloneTree (  ) , simplifyShortCircuitBranch ( type )  ) ;^147^148^^^^129^154^Node simplified = new Node ( type, condition.cloneTree (  ) , simplifyShortCircuitBranch ( body )  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] keepSimplifiedHookExpression [RETURN_TYPE] void   Node hook boolean thenHasSideEffects boolean elseHasSideEffects [VARIABLES] AbstractCompiler  compiler  Set  FORBIDDEN_TYPES  boolean  elseHasSideEffects  thenHasSideEffects  SideEffectAccumulator  accumulator  Node  body  condition  elseBranch  hook  simplified  thenBranch  List  replacements  int  type  
[buglab_swap_variables]^Node body = elseBranch ? thenBranch : thenHasSideEffects;^146^^^^^129^154^Node body = thenHasSideEffects ? thenBranch : elseBranch;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] keepSimplifiedHookExpression [RETURN_TYPE] void   Node hook boolean thenHasSideEffects boolean elseHasSideEffects [VARIABLES] AbstractCompiler  compiler  Set  FORBIDDEN_TYPES  boolean  elseHasSideEffects  thenHasSideEffects  SideEffectAccumulator  accumulator  Node  body  condition  elseBranch  hook  simplified  thenBranch  List  replacements  int  type  
[buglab_swap_variables]^Node body = thenHasSideEffects ? elseBranch : thenBranch;^146^^^^^129^154^Node body = thenHasSideEffects ? thenBranch : elseBranch;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] keepSimplifiedHookExpression [RETURN_TYPE] void   Node hook boolean thenHasSideEffects boolean elseHasSideEffects [VARIABLES] AbstractCompiler  compiler  Set  FORBIDDEN_TYPES  boolean  elseHasSideEffects  thenHasSideEffects  SideEffectAccumulator  accumulator  Node  body  condition  elseBranch  hook  simplified  thenBranch  List  replacements  int  type  
[buglab_swap_variables]^Node body = thenBranch ? thenHasSideEffects : elseBranch;^146^^^^^129^154^Node body = thenHasSideEffects ? thenBranch : elseBranch;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] keepSimplifiedHookExpression [RETURN_TYPE] void   Node hook boolean thenHasSideEffects boolean elseHasSideEffects [VARIABLES] AbstractCompiler  compiler  Set  FORBIDDEN_TYPES  boolean  elseHasSideEffects  thenHasSideEffects  SideEffectAccumulator  accumulator  Node  body  condition  elseBranch  hook  simplified  thenBranch  List  replacements  int  type  
[buglab_swap_variables]^new GatherSideEffectSubexpressionsCallback ( parts, new CopySideEffectSubexpressions ( compiler, compiler )  )  ) ;^160^161^162^^^156^180^new GatherSideEffectSubexpressionsCallback ( compiler, new CopySideEffectSubexpressions ( compiler, parts )  )  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] simplifyShortCircuitBranch [RETURN_TYPE] Node   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  Node  node  part  ret  
[buglab_swap_variables]^new GatherSideEffectSubexpressionsCallback ( compiler, new CopySideEffectSubexpressions ( compiler )  )  ) ;^160^161^162^^^156^180^new GatherSideEffectSubexpressionsCallback ( compiler, new CopySideEffectSubexpressions ( compiler, parts )  )  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] simplifyShortCircuitBranch [RETURN_TYPE] Node   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  Node  node  part  ret  
[buglab_swap_variables]^new GatherSideEffectSubexpressionsCallback (  new CopySideEffectSubexpressions ( compiler, parts )  )  ) ;^160^161^162^^^156^180^new GatherSideEffectSubexpressionsCallback ( compiler, new CopySideEffectSubexpressions ( compiler, parts )  )  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] simplifyShortCircuitBranch [RETURN_TYPE] Node   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  Node  node  part  ret  
[buglab_swap_variables]^new CopySideEffectSubexpressions ( parts, compiler )  )  ) ;^162^^^^^156^180^new CopySideEffectSubexpressions ( compiler, parts )  )  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] simplifyShortCircuitBranch [RETURN_TYPE] Node   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  Node  node  part  ret  
[buglab_swap_variables]^new CopySideEffectSubexpressions ( compiler )  )  ) ;^162^^^^^156^180^new CopySideEffectSubexpressions ( compiler, parts )  )  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] simplifyShortCircuitBranch [RETURN_TYPE] Node   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  Node  node  part  ret  
[buglab_swap_variables]^new CopySideEffectSubexpressions (  parts )  )  ) ;^162^^^^^156^180^new CopySideEffectSubexpressions ( compiler, parts )  )  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] simplifyShortCircuitBranch [RETURN_TYPE] Node   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  Node  node  part  ret  
[buglab_swap_variables]^NodeTraversal.traverse ( compiler,  new GatherSideEffectSubexpressionsCallback ( compiler,^158^159^160^161^^156^180^NodeTraversal.traverse ( compiler, node, new GatherSideEffectSubexpressionsCallback ( compiler,^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] simplifyShortCircuitBranch [RETURN_TYPE] Node   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  Node  node  part  ret  
[buglab_swap_variables]^NodeTraversal.traverse ( node, compiler, new GatherSideEffectSubexpressionsCallback ( compiler,^158^159^160^161^^156^180^NodeTraversal.traverse ( compiler, node, new GatherSideEffectSubexpressionsCallback ( compiler,^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] simplifyShortCircuitBranch [RETURN_TYPE] Node   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  Node  node  part  ret  
[buglab_swap_variables]^NodeTraversal.traverse (  node, new GatherSideEffectSubexpressionsCallback ( compiler,^158^159^160^161^^156^180^NodeTraversal.traverse ( compiler, node, new GatherSideEffectSubexpressionsCallback ( compiler,^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] simplifyShortCircuitBranch [RETURN_TYPE] Node   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  Node  node  part  ret  
[buglab_swap_variables]^ret = new Node ( Token.COMMA, part, ret ) ;^167^^^^^156^180^ret = new Node ( Token.COMMA, ret, part ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] simplifyShortCircuitBranch [RETURN_TYPE] Node   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  Node  node  part  ret  
[buglab_swap_variables]^ret = new Node ( Token.COMMA,  part ) ;^167^^^^^156^180^ret = new Node ( Token.COMMA, ret, part ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] simplifyShortCircuitBranch [RETURN_TYPE] Node   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  Node  node  part  ret  
[buglab_swap_variables]^ret = new Node ( Token.COMMA, ret ) ;^167^^^^^156^180^ret = new Node ( Token.COMMA, ret, part ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] simplifyShortCircuitBranch [RETURN_TYPE] Node   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  Node  node  part  ret  
[buglab_swap_variables]^ret = new Node ( Token. ret, part ) ;^167^^^^^156^180^ret = new Node ( Token.COMMA, ret, part ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] simplifyShortCircuitBranch [RETURN_TYPE] Node   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  Node  node  part  ret  
[buglab_swap_variables]^SubclassRelationship classes = callNode.getCodingConvention (  ) .getClassesDefinedByCall ( compiler ) ;^204^205^^^^203^207^SubclassRelationship classes = compiler.getCodingConvention (  ) .getClassesDefinedByCall ( callNode ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] isClassDefiningCall [RETURN_TYPE] boolean   Node callNode [VARIABLES] AbstractCompiler  compiler  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  Node  callNode  List  parts  replacements  SubclassRelationship  classes  
[buglab_swap_variables]^if  ( node.contains ( FORBIDDEN_TYPES.getType (  )  )  || NodeUtil.isControlStructure ( node )  )  {^224^225^^^^209^239^if  ( FORBIDDEN_TYPES.contains ( node.getType (  )  )  || NodeUtil.isControlStructure ( node )  )  {^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal traversal Node node Node parent [VARIABLES] AbstractCompiler  compiler  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  NodeTraversal  traversal  Node  node  parent  List  parts  replacements  
[buglab_swap_variables]^Preconditions.checkArgument ( ( OR.getType (  )  == Token.AND )  ||  ( node.getType (  )  == Token.OR ) , "Expected: AND or node, Got: " + Token.name ( node.getType (  )  )  ) ;^268^269^270^^^267^282^Preconditions.checkArgument ( ( node.getType (  )  == Token.AND )  ||  ( node.getType (  )  == Token.OR ) , "Expected: AND or OR, Got: " + Token.name ( node.getType (  )  )  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] processShortCircuitExpression [RETURN_TYPE] boolean   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  Node  left  node  right  
[buglab_swap_variables]^Preconditions.checkArgument ( ( node.getType (  )  == Token.AND )  ||  ( node.getType (  )  == Token.OR ) , "Expected: OR or AND, Got: " + Token.name ( node.getType (  )  )  ) ;^268^269^270^^^267^282^Preconditions.checkArgument ( ( node.getType (  )  == Token.AND )  ||  ( node.getType (  )  == Token.OR ) , "Expected: AND or OR, Got: " + Token.name ( node.getType (  )  )  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] processShortCircuitExpression [RETURN_TYPE] boolean   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  Node  left  node  right  
[buglab_swap_variables]^Preconditions.checkArgument ( ( node.getType (  )  == Token.AND )  ||  ( node.getType (  )  == Token.OR ) , "Expected: AND or  Got: " + Token.name ( node.getType (  )  )  ) ;^268^269^270^^^267^282^Preconditions.checkArgument ( ( node.getType (  )  == Token.AND )  ||  ( node.getType (  )  == Token.OR ) , "Expected: AND or OR, Got: " + Token.name ( node.getType (  )  )  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] processShortCircuitExpression [RETURN_TYPE] boolean   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  Node  left  node  right  
[buglab_swap_variables]^Preconditions.checkArgument ( HOOK.getType (  )  == Token.HOOK, "Expected: node, Got: " + Token.name ( node.getType (  )  )  ) ;^290^291^292^^^289^306^Preconditions.checkArgument ( node.getType (  )  == Token.HOOK, "Expected: HOOK, Got: " + Token.name ( node.getType (  )  )  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] processHook [RETURN_TYPE] boolean   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  Set  FORBIDDEN_TYPES  boolean  elseHasSideEffects  thenHasSideEffects  SideEffectAccumulator  accumulator  Node  condition  elseBranch  ifBranch  node  
[buglab_swap_variables]^Preconditions.checkArgument ( node.getType (  )  == Token. "Expected: HOOK, Got: " + Token.name ( node.getType (  )  )  ) ;^290^291^292^^^289^306^Preconditions.checkArgument ( node.getType (  )  == Token.HOOK, "Expected: HOOK, Got: " + Token.name ( node.getType (  )  )  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] processHook [RETURN_TYPE] boolean   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  Set  FORBIDDEN_TYPES  boolean  elseHasSideEffects  thenHasSideEffects  SideEffectAccumulator  accumulator  Node  condition  elseBranch  ifBranch  node  
[buglab_swap_variables]^accumulator.keepSimplifiedHookExpression (  thenHasSideEffects, elseHasSideEffects ) ;^300^301^^^^289^306^accumulator.keepSimplifiedHookExpression ( node, thenHasSideEffects, elseHasSideEffects ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] processHook [RETURN_TYPE] boolean   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  Set  FORBIDDEN_TYPES  boolean  elseHasSideEffects  thenHasSideEffects  SideEffectAccumulator  accumulator  Node  condition  elseBranch  ifBranch  node  
[buglab_swap_variables]^accumulator.keepSimplifiedHookExpression ( thenHasSideEffects, node, elseHasSideEffects ) ;^300^301^^^^289^306^accumulator.keepSimplifiedHookExpression ( node, thenHasSideEffects, elseHasSideEffects ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] processHook [RETURN_TYPE] boolean   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  Set  FORBIDDEN_TYPES  boolean  elseHasSideEffects  thenHasSideEffects  SideEffectAccumulator  accumulator  Node  condition  elseBranch  ifBranch  node  
[buglab_swap_variables]^accumulator.keepSimplifiedHookExpression ( node,  elseHasSideEffects ) ;^300^301^^^^289^306^accumulator.keepSimplifiedHookExpression ( node, thenHasSideEffects, elseHasSideEffects ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] processHook [RETURN_TYPE] boolean   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  Set  FORBIDDEN_TYPES  boolean  elseHasSideEffects  thenHasSideEffects  SideEffectAccumulator  accumulator  Node  condition  elseBranch  ifBranch  node  
[buglab_swap_variables]^accumulator.keepSimplifiedHookExpression ( elseHasSideEffects, thenHasSideEffects, node ) ;^300^301^^^^289^306^accumulator.keepSimplifiedHookExpression ( node, thenHasSideEffects, elseHasSideEffects ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] processHook [RETURN_TYPE] boolean   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  Set  FORBIDDEN_TYPES  boolean  elseHasSideEffects  thenHasSideEffects  SideEffectAccumulator  accumulator  Node  condition  elseBranch  ifBranch  node  
[buglab_swap_variables]^accumulator.keepSimplifiedHookExpression ( node, thenHasSideEffects ) ;^300^301^^^^289^306^accumulator.keepSimplifiedHookExpression ( node, thenHasSideEffects, elseHasSideEffects ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] processHook [RETURN_TYPE] boolean   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  Set  FORBIDDEN_TYPES  boolean  elseHasSideEffects  thenHasSideEffects  SideEffectAccumulator  accumulator  Node  condition  elseBranch  ifBranch  node  
[buglab_swap_variables]^Preconditions.checkArgument ( CALL.getType (  )  == Token.CALL, "Expected: node, Got: " + Token.name ( node.getType (  )  )  ) ;^314^315^316^^^313^334^Preconditions.checkArgument ( node.getType (  )  == Token.CALL, "Expected: CALL, Got: " + Token.name ( node.getType (  )  )  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] processFunctionCall [RETURN_TYPE] boolean   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  Node  functionName  node  
[buglab_swap_variables]^Preconditions.checkArgument ( node.getType (  )  == Token. "Expected: CALL, Got: " + Token.name ( node.getType (  )  )  ) ;^314^315^316^^^313^334^Preconditions.checkArgument ( node.getType (  )  == Token.CALL, "Expected: CALL, Got: " + Token.name ( node.getType (  )  )  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] processFunctionCall [RETURN_TYPE] boolean   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  Node  functionName  node  
[buglab_swap_variables]^Preconditions.checkArgument ( NEW.getType (  )  == Token.NEW, "Expected: node, Got: " + Token.name ( node.getType (  )  )  ) ;^342^343^344^^^341^354^Preconditions.checkArgument ( node.getType (  )  == Token.NEW, "Expected: NEW, Got: " + Token.name ( node.getType (  )  )  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] processConstructorCall [RETURN_TYPE] boolean   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  Node  node  
[buglab_swap_variables]^Preconditions.checkArgument ( node.getType (  )  == Token. "Expected: NEW, Got: " + Token.name ( node.getType (  )  )  ) ;^342^343^344^^^341^354^Preconditions.checkArgument ( node.getType (  )  == Token.NEW, "Expected: NEW, Got: " + Token.name ( node.getType (  )  )  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] processConstructorCall [RETURN_TYPE] boolean   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  Node  node  
[buglab_swap_variables]^Preconditions.checkArgument ( ( AND.getType (  )  == Token.AND )  ||  ( original.getType (  )  == Token.OR ) , "Expected: original or OR, Got: " + Token.name ( original.getType (  )  )  ) ;^115^116^117^^^114^126^Preconditions.checkArgument ( ( original.getType (  )  == Token.AND )  ||  ( original.getType (  )  == Token.OR ) , "Expected: AND or OR, Got: " + Token.name ( original.getType (  )  )  ) ;^[CLASS] CopySideEffectSubexpressions  [METHOD] keepSimplifiedShortCircuitExpression [RETURN_TYPE] void   Node original [VARIABLES] AbstractCompiler  compiler  List  replacements  boolean  Node  left  original  right  simplified  simplifiedRight  
[buglab_swap_variables]^Preconditions.checkArgument ( ( original.getType (  )  == Token.AND )  ||  ( original.getType (  )  == Token.OR ) , "Expected: OR or AND, Got: " + Token.name ( original.getType (  )  )  ) ;^115^116^117^^^114^126^Preconditions.checkArgument ( ( original.getType (  )  == Token.AND )  ||  ( original.getType (  )  == Token.OR ) , "Expected: AND or OR, Got: " + Token.name ( original.getType (  )  )  ) ;^[CLASS] CopySideEffectSubexpressions  [METHOD] keepSimplifiedShortCircuitExpression [RETURN_TYPE] void   Node original [VARIABLES] AbstractCompiler  compiler  List  replacements  boolean  Node  left  original  right  simplified  simplifiedRight  
[buglab_swap_variables]^Preconditions.checkArgument ( ( OR.getType (  )  == Token.AND )  ||  ( original.getType (  )  == Token.OR ) , "Expected: AND or original, Got: " + Token.name ( original.getType (  )  )  ) ;^115^116^117^^^114^126^Preconditions.checkArgument ( ( original.getType (  )  == Token.AND )  ||  ( original.getType (  )  == Token.OR ) , "Expected: AND or OR, Got: " + Token.name ( original.getType (  )  )  ) ;^[CLASS] CopySideEffectSubexpressions  [METHOD] keepSimplifiedShortCircuitExpression [RETURN_TYPE] void   Node original [VARIABLES] AbstractCompiler  compiler  List  replacements  boolean  Node  left  original  right  simplified  simplifiedRight  
[buglab_swap_variables]^Preconditions.checkArgument ( ( original.getType (  )  == Token.AND )  ||  ( original.getType (  )  == Token.OR ) , "Expected: AND or  Got: " + Token.name ( original.getType (  )  )  ) ;^115^116^117^^^114^126^Preconditions.checkArgument ( ( original.getType (  )  == Token.AND )  ||  ( original.getType (  )  == Token.OR ) , "Expected: AND or OR, Got: " + Token.name ( original.getType (  )  )  ) ;^[CLASS] CopySideEffectSubexpressions  [METHOD] keepSimplifiedShortCircuitExpression [RETURN_TYPE] void   Node original [VARIABLES] AbstractCompiler  compiler  List  replacements  boolean  Node  left  original  right  simplified  simplifiedRight  
[buglab_swap_variables]^simplified.addChildToBack ( simplifiedRightRight ) ;^124^^^^^114^126^simplified.addChildToBack ( simplifiedRight ) ;^[CLASS] CopySideEffectSubexpressions  [METHOD] keepSimplifiedShortCircuitExpression [RETURN_TYPE] void   Node original [VARIABLES] AbstractCompiler  compiler  List  replacements  boolean  Node  left  original  right  simplified  simplifiedRight  
[buglab_swap_variables]^simplified.addChildToBack ( simplified ) ;^124^^^^^114^126^simplified.addChildToBack ( simplifiedRight ) ;^[CLASS] CopySideEffectSubexpressions  [METHOD] keepSimplifiedShortCircuitExpression [RETURN_TYPE] void   Node original [VARIABLES] AbstractCompiler  compiler  List  replacements  boolean  Node  left  original  right  simplified  simplifiedRight  
[buglab_swap_variables]^Preconditions.checkArgument ( HOOK.getType (  )  == Token.HOOK, "Expected: hook, Got: " + Token.name ( hook.getType (  )  )  ) ;^132^133^134^^^129^154^Preconditions.checkArgument ( hook.getType (  )  == Token.HOOK, "Expected: HOOK, Got: " + Token.name ( hook.getType (  )  )  ) ;^[CLASS] CopySideEffectSubexpressions  [METHOD] keepSimplifiedHookExpression [RETURN_TYPE] void   Node hook boolean thenHasSideEffects boolean elseHasSideEffects [VARIABLES] AbstractCompiler  compiler  List  replacements  boolean  elseHasSideEffects  thenHasSideEffects  int  type  Node  body  condition  elseBranch  hook  simplified  thenBranch  
[buglab_swap_variables]^Preconditions.checkArgument ( hook.getType (  )  == Token. "Expected: HOOK, Got: " + Token.name ( hook.getType (  )  )  ) ;^132^133^134^^^129^154^Preconditions.checkArgument ( hook.getType (  )  == Token.HOOK, "Expected: HOOK, Got: " + Token.name ( hook.getType (  )  )  ) ;^[CLASS] CopySideEffectSubexpressions  [METHOD] keepSimplifiedHookExpression [RETURN_TYPE] void   Node hook boolean thenHasSideEffects boolean elseHasSideEffects [VARIABLES] AbstractCompiler  compiler  List  replacements  boolean  elseHasSideEffects  thenHasSideEffects  int  type  Node  body  condition  elseBranch  hook  simplified  thenBranch  
[buglab_swap_variables]^} else if  ( elseHasSideEffects || thenHasSideEffects )  {^144^^^^^129^154^} else if  ( thenHasSideEffects || elseHasSideEffects )  {^[CLASS] CopySideEffectSubexpressions  [METHOD] keepSimplifiedHookExpression [RETURN_TYPE] void   Node hook boolean thenHasSideEffects boolean elseHasSideEffects [VARIABLES] AbstractCompiler  compiler  List  replacements  boolean  elseHasSideEffects  thenHasSideEffects  int  type  Node  body  condition  elseBranch  hook  simplified  thenBranch  
[buglab_swap_variables]^Node simplified = new Node ( body, condition.cloneTree (  ) , simplifyShortCircuitBranch ( type )  ) ;^147^148^^^^129^154^Node simplified = new Node ( type, condition.cloneTree (  ) , simplifyShortCircuitBranch ( body )  ) ;^[CLASS] CopySideEffectSubexpressions  [METHOD] keepSimplifiedHookExpression [RETURN_TYPE] void   Node hook boolean thenHasSideEffects boolean elseHasSideEffects [VARIABLES] AbstractCompiler  compiler  List  replacements  boolean  elseHasSideEffects  thenHasSideEffects  int  type  Node  body  condition  elseBranch  hook  simplified  thenBranch  
[buglab_swap_variables]^Node simplified = new Node (  condition.cloneTree (  ) , simplifyShortCircuitBranch ( body )  ) ;^147^148^^^^129^154^Node simplified = new Node ( type, condition.cloneTree (  ) , simplifyShortCircuitBranch ( body )  ) ;^[CLASS] CopySideEffectSubexpressions  [METHOD] keepSimplifiedHookExpression [RETURN_TYPE] void   Node hook boolean thenHasSideEffects boolean elseHasSideEffects [VARIABLES] AbstractCompiler  compiler  List  replacements  boolean  elseHasSideEffects  thenHasSideEffects  int  type  Node  body  condition  elseBranch  hook  simplified  thenBranch  
[buglab_swap_variables]^Node simplified = new Node ( type, body.cloneTree (  ) , simplifyShortCircuitBranch ( condition )  ) ;^147^148^^^^129^154^Node simplified = new Node ( type, condition.cloneTree (  ) , simplifyShortCircuitBranch ( body )  ) ;^[CLASS] CopySideEffectSubexpressions  [METHOD] keepSimplifiedHookExpression [RETURN_TYPE] void   Node hook boolean thenHasSideEffects boolean elseHasSideEffects [VARIABLES] AbstractCompiler  compiler  List  replacements  boolean  elseHasSideEffects  thenHasSideEffects  int  type  Node  body  condition  elseBranch  hook  simplified  thenBranch  
[buglab_swap_variables]^Node simplified = new Node ( type.cloneTree (  ) , simplifyShortCircuitBranch ( body )  ) ;^147^148^^^^129^154^Node simplified = new Node ( type, condition.cloneTree (  ) , simplifyShortCircuitBranch ( body )  ) ;^[CLASS] CopySideEffectSubexpressions  [METHOD] keepSimplifiedHookExpression [RETURN_TYPE] void   Node hook boolean thenHasSideEffects boolean elseHasSideEffects [VARIABLES] AbstractCompiler  compiler  List  replacements  boolean  elseHasSideEffects  thenHasSideEffects  int  type  Node  body  condition  elseBranch  hook  simplified  thenBranch  
[buglab_swap_variables]^Node body = thenBranch ? thenHasSideEffects : elseBranch;^146^^^^^129^154^Node body = thenHasSideEffects ? thenBranch : elseBranch;^[CLASS] CopySideEffectSubexpressions  [METHOD] keepSimplifiedHookExpression [RETURN_TYPE] void   Node hook boolean thenHasSideEffects boolean elseHasSideEffects [VARIABLES] AbstractCompiler  compiler  List  replacements  boolean  elseHasSideEffects  thenHasSideEffects  int  type  Node  body  condition  elseBranch  hook  simplified  thenBranch  
[buglab_swap_variables]^Node body = thenHasSideEffects ? elseBranch : thenBranch;^146^^^^^129^154^Node body = thenHasSideEffects ? thenBranch : elseBranch;^[CLASS] CopySideEffectSubexpressions  [METHOD] keepSimplifiedHookExpression [RETURN_TYPE] void   Node hook boolean thenHasSideEffects boolean elseHasSideEffects [VARIABLES] AbstractCompiler  compiler  List  replacements  boolean  elseHasSideEffects  thenHasSideEffects  int  type  Node  body  condition  elseBranch  hook  simplified  thenBranch  
[buglab_swap_variables]^Node simplified = new Node ( condition, type.cloneTree (  ) , simplifyShortCircuitBranch ( body )  ) ;^147^148^^^^129^154^Node simplified = new Node ( type, condition.cloneTree (  ) , simplifyShortCircuitBranch ( body )  ) ;^[CLASS] CopySideEffectSubexpressions  [METHOD] keepSimplifiedHookExpression [RETURN_TYPE] void   Node hook boolean thenHasSideEffects boolean elseHasSideEffects [VARIABLES] AbstractCompiler  compiler  List  replacements  boolean  elseHasSideEffects  thenHasSideEffects  int  type  Node  body  condition  elseBranch  hook  simplified  thenBranch  
[buglab_swap_variables]^Node body = elseBranch ? thenBranch : thenHasSideEffects;^146^^^^^129^154^Node body = thenHasSideEffects ? thenBranch : elseBranch;^[CLASS] CopySideEffectSubexpressions  [METHOD] keepSimplifiedHookExpression [RETURN_TYPE] void   Node hook boolean thenHasSideEffects boolean elseHasSideEffects [VARIABLES] AbstractCompiler  compiler  List  replacements  boolean  elseHasSideEffects  thenHasSideEffects  int  type  Node  body  condition  elseBranch  hook  simplified  thenBranch  
[buglab_swap_variables]^new GatherSideEffectSubexpressionsCallback ( parts, new CopySideEffectSubexpressions ( compiler, compiler )  )  ) ;^160^161^162^^^156^180^new GatherSideEffectSubexpressionsCallback ( compiler, new CopySideEffectSubexpressions ( compiler, parts )  )  ) ;^[CLASS] CopySideEffectSubexpressions  [METHOD] simplifyShortCircuitBranch [RETURN_TYPE] Node   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  boolean  Node  node  part  ret  
[buglab_swap_variables]^new GatherSideEffectSubexpressionsCallback ( compiler, new CopySideEffectSubexpressions ( compiler )  )  ) ;^160^161^162^^^156^180^new GatherSideEffectSubexpressionsCallback ( compiler, new CopySideEffectSubexpressions ( compiler, parts )  )  ) ;^[CLASS] CopySideEffectSubexpressions  [METHOD] simplifyShortCircuitBranch [RETURN_TYPE] Node   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  boolean  Node  node  part  ret  
[buglab_swap_variables]^new GatherSideEffectSubexpressionsCallback (  new CopySideEffectSubexpressions ( compiler, parts )  )  ) ;^160^161^162^^^156^180^new GatherSideEffectSubexpressionsCallback ( compiler, new CopySideEffectSubexpressions ( compiler, parts )  )  ) ;^[CLASS] CopySideEffectSubexpressions  [METHOD] simplifyShortCircuitBranch [RETURN_TYPE] Node   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  boolean  Node  node  part  ret  
[buglab_swap_variables]^new CopySideEffectSubexpressions ( parts, compiler )  )  ) ;^162^^^^^156^180^new CopySideEffectSubexpressions ( compiler, parts )  )  ) ;^[CLASS] CopySideEffectSubexpressions  [METHOD] simplifyShortCircuitBranch [RETURN_TYPE] Node   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  boolean  Node  node  part  ret  
[buglab_swap_variables]^new CopySideEffectSubexpressions ( compiler )  )  ) ;^162^^^^^156^180^new CopySideEffectSubexpressions ( compiler, parts )  )  ) ;^[CLASS] CopySideEffectSubexpressions  [METHOD] simplifyShortCircuitBranch [RETURN_TYPE] Node   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  boolean  Node  node  part  ret  
[buglab_swap_variables]^new CopySideEffectSubexpressions (  parts )  )  ) ;^162^^^^^156^180^new CopySideEffectSubexpressions ( compiler, parts )  )  ) ;^[CLASS] CopySideEffectSubexpressions  [METHOD] simplifyShortCircuitBranch [RETURN_TYPE] Node   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  boolean  Node  node  part  ret  
[buglab_swap_variables]^NodeTraversal.traverse ( compiler,  new GatherSideEffectSubexpressionsCallback ( compiler,^158^159^160^161^^156^180^NodeTraversal.traverse ( compiler, node, new GatherSideEffectSubexpressionsCallback ( compiler,^[CLASS] CopySideEffectSubexpressions  [METHOD] simplifyShortCircuitBranch [RETURN_TYPE] Node   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  boolean  Node  node  part  ret  
[buglab_swap_variables]^NodeTraversal.traverse ( node, compiler, new GatherSideEffectSubexpressionsCallback ( compiler,^158^159^160^161^^156^180^NodeTraversal.traverse ( compiler, node, new GatherSideEffectSubexpressionsCallback ( compiler,^[CLASS] CopySideEffectSubexpressions  [METHOD] simplifyShortCircuitBranch [RETURN_TYPE] Node   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  boolean  Node  node  part  ret  
[buglab_swap_variables]^NodeTraversal.traverse (  node, new GatherSideEffectSubexpressionsCallback ( compiler,^158^159^160^161^^156^180^NodeTraversal.traverse ( compiler, node, new GatherSideEffectSubexpressionsCallback ( compiler,^[CLASS] CopySideEffectSubexpressions  [METHOD] simplifyShortCircuitBranch [RETURN_TYPE] Node   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  boolean  Node  node  part  ret  
[buglab_swap_variables]^ret = new Node ( Token.COMMA, part, ret ) ;^167^^^^^156^180^ret = new Node ( Token.COMMA, ret, part ) ;^[CLASS] CopySideEffectSubexpressions  [METHOD] simplifyShortCircuitBranch [RETURN_TYPE] Node   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  boolean  Node  node  part  ret  
[buglab_swap_variables]^ret = new Node ( Token.COMMA,  part ) ;^167^^^^^156^180^ret = new Node ( Token.COMMA, ret, part ) ;^[CLASS] CopySideEffectSubexpressions  [METHOD] simplifyShortCircuitBranch [RETURN_TYPE] Node   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  boolean  Node  node  part  ret  
[buglab_swap_variables]^ret = new Node ( Token.COMMA, ret ) ;^167^^^^^156^180^ret = new Node ( Token.COMMA, ret, part ) ;^[CLASS] CopySideEffectSubexpressions  [METHOD] simplifyShortCircuitBranch [RETURN_TYPE] Node   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  boolean  Node  node  part  ret  
[buglab_swap_variables]^ret = new Node ( Token. ret, part ) ;^167^^^^^156^180^ret = new Node ( Token.COMMA, ret, part ) ;^[CLASS] CopySideEffectSubexpressions  [METHOD] simplifyShortCircuitBranch [RETURN_TYPE] Node   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  boolean  Node  node  part  ret  
