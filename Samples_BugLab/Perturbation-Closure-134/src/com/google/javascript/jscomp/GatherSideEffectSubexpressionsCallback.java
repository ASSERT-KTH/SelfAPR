[BugLab_Wrong_Literal]^return false;^105^^^^^104^106^return true;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] classDefiningCallsHaveSideEffects [RETURN_TYPE] boolean   [VARIABLES] AbstractCompiler  compiler  List  replacements  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  
[BugLab_Variable_Misuse]^Preconditions.checkArgument ( ( simplifiedRight.getType (  )  == Token.AND )  ||  ( original.getType (  )  == Token.OR ) , "Expected: AND or OR, Got: " + Token.name ( original.getType (  )  )  ) ;^115^116^117^^^114^126^Preconditions.checkArgument ( ( original.getType (  )  == Token.AND )  ||  ( original.getType (  )  == Token.OR ) , "Expected: AND or OR, Got: " + Token.name ( original.getType (  )  )  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] keepSimplifiedShortCircuitExpression [RETURN_TYPE] void   Node original [VARIABLES] AbstractCompiler  compiler  List  replacements  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  Node  left  original  right  simplified  simplifiedRight  
[BugLab_Variable_Misuse]^Preconditions.checkArgument ( ( original.getType (  )  == Token.AND )  ||  ( original.getType (  )  == Token.OR ) , "Expected: 3 or OR, Got: " + Token.name ( original.getType (  )  )  ) ;^115^116^117^^^114^126^Preconditions.checkArgument ( ( original.getType (  )  == Token.AND )  ||  ( original.getType (  )  == Token.OR ) , "Expected: AND or OR, Got: " + Token.name ( original.getType (  )  )  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] keepSimplifiedShortCircuitExpression [RETURN_TYPE] void   Node original [VARIABLES] AbstractCompiler  compiler  List  replacements  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  Node  left  original  right  simplified  simplifiedRight  
[BugLab_Argument_Swapping]^Preconditions.checkArgument ( ( AND.getType (  )  == Token.AND )  ||  ( original.getType (  )  == Token.OR ) , "Expected: original or OR, Got: " + Token.name ( original.getType (  )  )  ) ;^115^116^117^^^114^126^Preconditions.checkArgument ( ( original.getType (  )  == Token.AND )  ||  ( original.getType (  )  == Token.OR ) , "Expected: AND or OR, Got: " + Token.name ( original.getType (  )  )  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] keepSimplifiedShortCircuitExpression [RETURN_TYPE] void   Node original [VARIABLES] AbstractCompiler  compiler  List  replacements  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  Node  left  original  right  simplified  simplifiedRight  
[BugLab_Argument_Swapping]^Preconditions.checkArgument ( ( original.getType (  )  == Token.AND )  ||  ( original.getType (  )  == Token.OR ) , "Expected: OR or AND, Got: " + Token.name ( original.getType (  )  )  ) ;^115^116^117^^^114^126^Preconditions.checkArgument ( ( original.getType (  )  == Token.AND )  ||  ( original.getType (  )  == Token.OR ) , "Expected: AND or OR, Got: " + Token.name ( original.getType (  )  )  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] keepSimplifiedShortCircuitExpression [RETURN_TYPE] void   Node original [VARIABLES] AbstractCompiler  compiler  List  replacements  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  Node  left  original  right  simplified  simplifiedRight  
[BugLab_Wrong_Operator]^Preconditions.checkArgument ( ( original.getType (  )  == Token.AND )  &&  ( original.getType (  )  == Token.OR ) , "Expected: AND or OR, Got: " + Token.name ( original.getType (  )  )  ) ;^115^116^117^^^114^126^Preconditions.checkArgument ( ( original.getType (  )  == Token.AND )  ||  ( original.getType (  )  == Token.OR ) , "Expected: AND or OR, Got: " + Token.name ( original.getType (  )  )  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] keepSimplifiedShortCircuitExpression [RETURN_TYPE] void   Node original [VARIABLES] AbstractCompiler  compiler  List  replacements  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  Node  left  original  right  simplified  simplifiedRight  
[BugLab_Wrong_Operator]^Preconditions.checkArgument ( ( original.getType (  )  != Token.AND )  ||  ( original.getType (  )  == Token.OR ) , "Expected: AND or OR, Got: " + Token.name ( original.getType (  )  )  ) ;^115^116^117^^^114^126^Preconditions.checkArgument ( ( original.getType (  )  == Token.AND )  ||  ( original.getType (  )  == Token.OR ) , "Expected: AND or OR, Got: " + Token.name ( original.getType (  )  )  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] keepSimplifiedShortCircuitExpression [RETURN_TYPE] void   Node original [VARIABLES] AbstractCompiler  compiler  List  replacements  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  Node  left  original  right  simplified  simplifiedRight  
[BugLab_Wrong_Operator]^Preconditions.checkArgument ( ( original.getType (  ==  )  == Token.AND )  ||  ( original.getType (  )  == Token.OR ) , "Expected: AND or OR, Got: " + Token.name ( original.getType (  )  )  ) ;^115^116^117^^^114^126^Preconditions.checkArgument ( ( original.getType (  )  == Token.AND )  ||  ( original.getType (  )  == Token.OR ) , "Expected: AND or OR, Got: " + Token.name ( original.getType (  )  )  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] keepSimplifiedShortCircuitExpression [RETURN_TYPE] void   Node original [VARIABLES] AbstractCompiler  compiler  List  replacements  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  Node  left  original  right  simplified  simplifiedRight  
[BugLab_Variable_Misuse]^( simplifiedRight.getType (  )  == Token.AND )  ||  ( original.getType (  )  == Token.OR ) , "Expected: AND or OR, Got: " + Token.name ( original.getType (  )  )  ) ;^116^117^^^^114^126^( original.getType (  )  == Token.AND )  ||  ( original.getType (  )  == Token.OR ) , "Expected: AND or OR, Got: " + Token.name ( original.getType (  )  )  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] keepSimplifiedShortCircuitExpression [RETURN_TYPE] void   Node original [VARIABLES] AbstractCompiler  compiler  List  replacements  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  Node  left  original  right  simplified  simplifiedRight  
[BugLab_Variable_Misuse]^"Expected: AND or OR, Got: " + Token.name ( simplifiedRight.getType (  )  )  ) ;^117^^^^^114^126^"Expected: AND or OR, Got: " + Token.name ( original.getType (  )  )  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] keepSimplifiedShortCircuitExpression [RETURN_TYPE] void   Node original [VARIABLES] AbstractCompiler  compiler  List  replacements  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  Node  left  original  right  simplified  simplifiedRight  
[BugLab_Variable_Misuse]^"Expected: AND or OR, Got: " + Token.name ( simplified.getType (  )  )  ) ;^117^^^^^114^126^"Expected: AND or OR, Got: " + Token.name ( original.getType (  )  )  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] keepSimplifiedShortCircuitExpression [RETURN_TYPE] void   Node original [VARIABLES] AbstractCompiler  compiler  List  replacements  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  Node  left  original  right  simplified  simplifiedRight  
[BugLab_Variable_Misuse]^Node left = simplifiedRight.getFirstChild (  ) ;^118^^^^^114^126^Node left = original.getFirstChild (  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] keepSimplifiedShortCircuitExpression [RETURN_TYPE] void   Node original [VARIABLES] AbstractCompiler  compiler  List  replacements  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  Node  left  original  right  simplified  simplifiedRight  
[BugLab_Variable_Misuse]^Node right = simplifiedRight.getNext (  ) ;^119^^^^^114^126^Node right = left.getNext (  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] keepSimplifiedShortCircuitExpression [RETURN_TYPE] void   Node original [VARIABLES] AbstractCompiler  compiler  List  replacements  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  Node  left  original  right  simplified  simplifiedRight  
[BugLab_Variable_Misuse]^Node simplifiedRight = simplifyShortCircuitBranch ( simplified ) ;^120^^^^^114^126^Node simplifiedRight = simplifyShortCircuitBranch ( right ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] keepSimplifiedShortCircuitExpression [RETURN_TYPE] void   Node original [VARIABLES] AbstractCompiler  compiler  List  replacements  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  Node  left  original  right  simplified  simplifiedRight  
[BugLab_Variable_Misuse]^Node simplified = simplifiedRight.cloneNode (  ) ;^122^^^^^114^126^Node simplified = original.cloneNode (  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] keepSimplifiedShortCircuitExpression [RETURN_TYPE] void   Node original [VARIABLES] AbstractCompiler  compiler  List  replacements  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  Node  left  original  right  simplified  simplifiedRight  
[BugLab_Variable_Misuse]^simplified.addChildToBack ( simplifiedRight.cloneTree (  )  ) ;^123^^^^^114^126^simplified.addChildToBack ( left.cloneTree (  )  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] keepSimplifiedShortCircuitExpression [RETURN_TYPE] void   Node original [VARIABLES] AbstractCompiler  compiler  List  replacements  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  Node  left  original  right  simplified  simplifiedRight  
[BugLab_Variable_Misuse]^simplified.addChildToBack ( rightRight ) ;^124^^^^^114^126^simplified.addChildToBack ( simplifiedRight ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] keepSimplifiedShortCircuitExpression [RETURN_TYPE] void   Node original [VARIABLES] AbstractCompiler  compiler  List  replacements  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  Node  left  original  right  simplified  simplifiedRight  
[BugLab_Variable_Misuse]^simplified.addChildToBack ( right ) ;^124^^^^^114^126^simplified.addChildToBack ( simplifiedRight ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] keepSimplifiedShortCircuitExpression [RETURN_TYPE] void   Node original [VARIABLES] AbstractCompiler  compiler  List  replacements  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  Node  left  original  right  simplified  simplifiedRight  
[BugLab_Argument_Swapping]^simplified.addChildToBack ( simplifiedRightRight ) ;^124^^^^^114^126^simplified.addChildToBack ( simplifiedRight ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] keepSimplifiedShortCircuitExpression [RETURN_TYPE] void   Node original [VARIABLES] AbstractCompiler  compiler  List  replacements  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  Node  left  original  right  simplified  simplifiedRight  
[BugLab_Argument_Swapping]^simplified.addChildToBack ( simplified ) ;^124^^^^^114^126^simplified.addChildToBack ( simplifiedRight ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] keepSimplifiedShortCircuitExpression [RETURN_TYPE] void   Node original [VARIABLES] AbstractCompiler  compiler  List  replacements  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  Node  left  original  right  simplified  simplifiedRight  
[BugLab_Variable_Misuse]^replacements.add ( simplifiedRight ) ;^125^^^^^114^126^replacements.add ( simplified ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] keepSimplifiedShortCircuitExpression [RETURN_TYPE] void   Node original [VARIABLES] AbstractCompiler  compiler  List  replacements  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  Node  left  original  right  simplified  simplifiedRight  
[BugLab_Variable_Misuse]^Preconditions.checkArgument ( thenBranch.getType (  )  == Token.HOOK, "Expected: HOOK, Got: " + Token.name ( hook.getType (  )  )  ) ;^132^133^134^^^129^154^Preconditions.checkArgument ( hook.getType (  )  == Token.HOOK, "Expected: HOOK, Got: " + Token.name ( hook.getType (  )  )  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] keepSimplifiedHookExpression [RETURN_TYPE] void   Node hook boolean thenHasSideEffects boolean elseHasSideEffects [VARIABLES] AbstractCompiler  compiler  Set  FORBIDDEN_TYPES  boolean  elseHasSideEffects  thenHasSideEffects  SideEffectAccumulator  accumulator  Node  body  condition  elseBranch  hook  simplified  thenBranch  List  replacements  int  type  
[BugLab_Argument_Swapping]^Preconditions.checkArgument ( HOOK.getType (  )  == Token.HOOK, "Expected: hook, Got: " + Token.name ( hook.getType (  )  )  ) ;^132^133^134^^^129^154^Preconditions.checkArgument ( hook.getType (  )  == Token.HOOK, "Expected: HOOK, Got: " + Token.name ( hook.getType (  )  )  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] keepSimplifiedHookExpression [RETURN_TYPE] void   Node hook boolean thenHasSideEffects boolean elseHasSideEffects [VARIABLES] AbstractCompiler  compiler  Set  FORBIDDEN_TYPES  boolean  elseHasSideEffects  thenHasSideEffects  SideEffectAccumulator  accumulator  Node  body  condition  elseBranch  hook  simplified  thenBranch  List  replacements  int  type  
[BugLab_Wrong_Operator]^Preconditions.checkArgument ( hook.getType (  )  >= Token.HOOK, "Expected: HOOK, Got: " + Token.name ( hook.getType (  )  )  ) ;^132^133^134^^^129^154^Preconditions.checkArgument ( hook.getType (  )  == Token.HOOK, "Expected: HOOK, Got: " + Token.name ( hook.getType (  )  )  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] keepSimplifiedHookExpression [RETURN_TYPE] void   Node hook boolean thenHasSideEffects boolean elseHasSideEffects [VARIABLES] AbstractCompiler  compiler  Set  FORBIDDEN_TYPES  boolean  elseHasSideEffects  thenHasSideEffects  SideEffectAccumulator  accumulator  Node  body  condition  elseBranch  hook  simplified  thenBranch  List  replacements  int  type  
[BugLab_Wrong_Operator]^Preconditions.checkArgument ( hook.getType (  <  )  == Token.HOOK, "Expected: HOOK, Got: " + Token.name ( hook.getType (  )  )  ) ;^132^133^134^^^129^154^Preconditions.checkArgument ( hook.getType (  )  == Token.HOOK, "Expected: HOOK, Got: " + Token.name ( hook.getType (  )  )  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] keepSimplifiedHookExpression [RETURN_TYPE] void   Node hook boolean thenHasSideEffects boolean elseHasSideEffects [VARIABLES] AbstractCompiler  compiler  Set  FORBIDDEN_TYPES  boolean  elseHasSideEffects  thenHasSideEffects  SideEffectAccumulator  accumulator  Node  body  condition  elseBranch  hook  simplified  thenBranch  List  replacements  int  type  
[BugLab_Variable_Misuse]^hook.getType (  )  == Token.HOOK, "Expected: HOOK, Got: " + Token.name ( thenBranch.getType (  )  )  ) ;^133^134^^^^129^154^hook.getType (  )  == Token.HOOK, "Expected: HOOK, Got: " + Token.name ( hook.getType (  )  )  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] keepSimplifiedHookExpression [RETURN_TYPE] void   Node hook boolean thenHasSideEffects boolean elseHasSideEffects [VARIABLES] AbstractCompiler  compiler  Set  FORBIDDEN_TYPES  boolean  elseHasSideEffects  thenHasSideEffects  SideEffectAccumulator  accumulator  Node  body  condition  elseBranch  hook  simplified  thenBranch  List  replacements  int  type  
[BugLab_Variable_Misuse]^"Expected: HOOK, Got: " + Token.name ( thenBranch.getType (  )  )  ) ;^134^^^^^129^154^"Expected: HOOK, Got: " + Token.name ( hook.getType (  )  )  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] keepSimplifiedHookExpression [RETURN_TYPE] void   Node hook boolean thenHasSideEffects boolean elseHasSideEffects [VARIABLES] AbstractCompiler  compiler  Set  FORBIDDEN_TYPES  boolean  elseHasSideEffects  thenHasSideEffects  SideEffectAccumulator  accumulator  Node  body  condition  elseBranch  hook  simplified  thenBranch  List  replacements  int  type  
[BugLab_Variable_Misuse]^Node condition = thenBranch.getFirstChild (  ) ;^135^^^^^129^154^Node condition = hook.getFirstChild (  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] keepSimplifiedHookExpression [RETURN_TYPE] void   Node hook boolean thenHasSideEffects boolean elseHasSideEffects [VARIABLES] AbstractCompiler  compiler  Set  FORBIDDEN_TYPES  boolean  elseHasSideEffects  thenHasSideEffects  SideEffectAccumulator  accumulator  Node  body  condition  elseBranch  hook  simplified  thenBranch  List  replacements  int  type  
[BugLab_Variable_Misuse]^Node condition = simplified.getFirstChild (  ) ;^135^^^^^129^154^Node condition = hook.getFirstChild (  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] keepSimplifiedHookExpression [RETURN_TYPE] void   Node hook boolean thenHasSideEffects boolean elseHasSideEffects [VARIABLES] AbstractCompiler  compiler  Set  FORBIDDEN_TYPES  boolean  elseHasSideEffects  thenHasSideEffects  SideEffectAccumulator  accumulator  Node  body  condition  elseBranch  hook  simplified  thenBranch  List  replacements  int  type  
[BugLab_Variable_Misuse]^Node thenBranch = simplified.getNext (  ) ;^136^^^^^129^154^Node thenBranch = condition.getNext (  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] keepSimplifiedHookExpression [RETURN_TYPE] void   Node hook boolean thenHasSideEffects boolean elseHasSideEffects [VARIABLES] AbstractCompiler  compiler  Set  FORBIDDEN_TYPES  boolean  elseHasSideEffects  thenHasSideEffects  SideEffectAccumulator  accumulator  Node  body  condition  elseBranch  hook  simplified  thenBranch  List  replacements  int  type  
[BugLab_Variable_Misuse]^Node thenBranch = thenBranch.getNext (  ) ;^136^^^^^129^154^Node thenBranch = condition.getNext (  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] keepSimplifiedHookExpression [RETURN_TYPE] void   Node hook boolean thenHasSideEffects boolean elseHasSideEffects [VARIABLES] AbstractCompiler  compiler  Set  FORBIDDEN_TYPES  boolean  elseHasSideEffects  thenHasSideEffects  SideEffectAccumulator  accumulator  Node  body  condition  elseBranch  hook  simplified  thenBranch  List  replacements  int  type  
[BugLab_Variable_Misuse]^Node elseBranch = simplified.getNext (  ) ;^137^^^^^129^154^Node elseBranch = thenBranch.getNext (  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] keepSimplifiedHookExpression [RETURN_TYPE] void   Node hook boolean thenHasSideEffects boolean elseHasSideEffects [VARIABLES] AbstractCompiler  compiler  Set  FORBIDDEN_TYPES  boolean  elseHasSideEffects  thenHasSideEffects  SideEffectAccumulator  accumulator  Node  body  condition  elseBranch  hook  simplified  thenBranch  List  replacements  int  type  
[BugLab_Variable_Misuse]^if  ( elseHasSideEffects && elseHasSideEffects )  {^138^^^^^129^154^if  ( thenHasSideEffects && elseHasSideEffects )  {^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] keepSimplifiedHookExpression [RETURN_TYPE] void   Node hook boolean thenHasSideEffects boolean elseHasSideEffects [VARIABLES] AbstractCompiler  compiler  Set  FORBIDDEN_TYPES  boolean  elseHasSideEffects  thenHasSideEffects  SideEffectAccumulator  accumulator  Node  body  condition  elseBranch  hook  simplified  thenBranch  List  replacements  int  type  
[BugLab_Variable_Misuse]^if  ( thenHasSideEffects && thenHasSideEffects )  {^138^^^^^129^154^if  ( thenHasSideEffects && elseHasSideEffects )  {^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] keepSimplifiedHookExpression [RETURN_TYPE] void   Node hook boolean thenHasSideEffects boolean elseHasSideEffects [VARIABLES] AbstractCompiler  compiler  Set  FORBIDDEN_TYPES  boolean  elseHasSideEffects  thenHasSideEffects  SideEffectAccumulator  accumulator  Node  body  condition  elseBranch  hook  simplified  thenBranch  List  replacements  int  type  
[BugLab_Argument_Swapping]^if  ( elseHasSideEffects && thenHasSideEffects )  {^138^^^^^129^154^if  ( thenHasSideEffects && elseHasSideEffects )  {^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] keepSimplifiedHookExpression [RETURN_TYPE] void   Node hook boolean thenHasSideEffects boolean elseHasSideEffects [VARIABLES] AbstractCompiler  compiler  Set  FORBIDDEN_TYPES  boolean  elseHasSideEffects  thenHasSideEffects  SideEffectAccumulator  accumulator  Node  body  condition  elseBranch  hook  simplified  thenBranch  List  replacements  int  type  
[BugLab_Wrong_Operator]^if  ( thenHasSideEffects || elseHasSideEffects )  {^138^^^^^129^154^if  ( thenHasSideEffects && elseHasSideEffects )  {^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] keepSimplifiedHookExpression [RETURN_TYPE] void   Node hook boolean thenHasSideEffects boolean elseHasSideEffects [VARIABLES] AbstractCompiler  compiler  Set  FORBIDDEN_TYPES  boolean  elseHasSideEffects  thenHasSideEffects  SideEffectAccumulator  accumulator  Node  body  condition  elseBranch  hook  simplified  thenBranch  List  replacements  int  type  
[BugLab_Variable_Misuse]^} else if  ( elseHasSideEffects || elseHasSideEffects )  {^144^^^^^129^154^} else if  ( thenHasSideEffects || elseHasSideEffects )  {^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] keepSimplifiedHookExpression [RETURN_TYPE] void   Node hook boolean thenHasSideEffects boolean elseHasSideEffects [VARIABLES] AbstractCompiler  compiler  Set  FORBIDDEN_TYPES  boolean  elseHasSideEffects  thenHasSideEffects  SideEffectAccumulator  accumulator  Node  body  condition  elseBranch  hook  simplified  thenBranch  List  replacements  int  type  
[BugLab_Variable_Misuse]^} else if  ( thenHasSideEffects || thenHasSideEffects )  {^144^^^^^129^154^} else if  ( thenHasSideEffects || elseHasSideEffects )  {^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] keepSimplifiedHookExpression [RETURN_TYPE] void   Node hook boolean thenHasSideEffects boolean elseHasSideEffects [VARIABLES] AbstractCompiler  compiler  Set  FORBIDDEN_TYPES  boolean  elseHasSideEffects  thenHasSideEffects  SideEffectAccumulator  accumulator  Node  body  condition  elseBranch  hook  simplified  thenBranch  List  replacements  int  type  
[BugLab_Argument_Swapping]^} else if  ( elseHasSideEffects || thenHasSideEffects )  {^144^^^^^129^154^} else if  ( thenHasSideEffects || elseHasSideEffects )  {^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] keepSimplifiedHookExpression [RETURN_TYPE] void   Node hook boolean thenHasSideEffects boolean elseHasSideEffects [VARIABLES] AbstractCompiler  compiler  Set  FORBIDDEN_TYPES  boolean  elseHasSideEffects  thenHasSideEffects  SideEffectAccumulator  accumulator  Node  body  condition  elseBranch  hook  simplified  thenBranch  List  replacements  int  type  
[BugLab_Wrong_Operator]^} else if  ( thenHasSideEffects && elseHasSideEffects )  {^144^^^^^129^154^} else if  ( thenHasSideEffects || elseHasSideEffects )  {^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] keepSimplifiedHookExpression [RETURN_TYPE] void   Node hook boolean thenHasSideEffects boolean elseHasSideEffects [VARIABLES] AbstractCompiler  compiler  Set  FORBIDDEN_TYPES  boolean  elseHasSideEffects  thenHasSideEffects  SideEffectAccumulator  accumulator  Node  body  condition  elseBranch  hook  simplified  thenBranch  List  replacements  int  type  
[BugLab_Variable_Misuse]^Node simplified = new Node ( type, thenBranch.cloneTree (  ) , simplifyShortCircuitBranch ( body )  ) ;^147^148^^^^129^154^Node simplified = new Node ( type, condition.cloneTree (  ) , simplifyShortCircuitBranch ( body )  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] keepSimplifiedHookExpression [RETURN_TYPE] void   Node hook boolean thenHasSideEffects boolean elseHasSideEffects [VARIABLES] AbstractCompiler  compiler  Set  FORBIDDEN_TYPES  boolean  elseHasSideEffects  thenHasSideEffects  SideEffectAccumulator  accumulator  Node  body  condition  elseBranch  hook  simplified  thenBranch  List  replacements  int  type  
[BugLab_Variable_Misuse]^Node simplified = new Node ( type, condition.cloneTree (  ) , simplifyShortCircuitBranch ( thenBranch )  ) ;^147^148^^^^129^154^Node simplified = new Node ( type, condition.cloneTree (  ) , simplifyShortCircuitBranch ( body )  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] keepSimplifiedHookExpression [RETURN_TYPE] void   Node hook boolean thenHasSideEffects boolean elseHasSideEffects [VARIABLES] AbstractCompiler  compiler  Set  FORBIDDEN_TYPES  boolean  elseHasSideEffects  thenHasSideEffects  SideEffectAccumulator  accumulator  Node  body  condition  elseBranch  hook  simplified  thenBranch  List  replacements  int  type  
[BugLab_Argument_Swapping]^Node simplified = new Node ( condition, type.cloneTree (  ) , simplifyShortCircuitBranch ( body )  ) ;^147^148^^^^129^154^Node simplified = new Node ( type, condition.cloneTree (  ) , simplifyShortCircuitBranch ( body )  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] keepSimplifiedHookExpression [RETURN_TYPE] void   Node hook boolean thenHasSideEffects boolean elseHasSideEffects [VARIABLES] AbstractCompiler  compiler  Set  FORBIDDEN_TYPES  boolean  elseHasSideEffects  thenHasSideEffects  SideEffectAccumulator  accumulator  Node  body  condition  elseBranch  hook  simplified  thenBranch  List  replacements  int  type  
[BugLab_Argument_Swapping]^Node simplified = new Node ( type, body.cloneTree (  ) , simplifyShortCircuitBranch ( condition )  ) ;^147^148^^^^129^154^Node simplified = new Node ( type, condition.cloneTree (  ) , simplifyShortCircuitBranch ( body )  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] keepSimplifiedHookExpression [RETURN_TYPE] void   Node hook boolean thenHasSideEffects boolean elseHasSideEffects [VARIABLES] AbstractCompiler  compiler  Set  FORBIDDEN_TYPES  boolean  elseHasSideEffects  thenHasSideEffects  SideEffectAccumulator  accumulator  Node  body  condition  elseBranch  hook  simplified  thenBranch  List  replacements  int  type  
[BugLab_Variable_Misuse]^int type = elseHasSideEffects ? Token.AND : Token.OR;^145^^^^^129^154^int type = thenHasSideEffects ? Token.AND : Token.OR;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] keepSimplifiedHookExpression [RETURN_TYPE] void   Node hook boolean thenHasSideEffects boolean elseHasSideEffects [VARIABLES] AbstractCompiler  compiler  Set  FORBIDDEN_TYPES  boolean  elseHasSideEffects  thenHasSideEffects  SideEffectAccumulator  accumulator  Node  body  condition  elseBranch  hook  simplified  thenBranch  List  replacements  int  type  
[BugLab_Variable_Misuse]^int type = thenHasSideEffects ? Token.0 : Token.OR;^145^^^^^129^154^int type = thenHasSideEffects ? Token.AND : Token.OR;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] keepSimplifiedHookExpression [RETURN_TYPE] void   Node hook boolean thenHasSideEffects boolean elseHasSideEffects [VARIABLES] AbstractCompiler  compiler  Set  FORBIDDEN_TYPES  boolean  elseHasSideEffects  thenHasSideEffects  SideEffectAccumulator  accumulator  Node  body  condition  elseBranch  hook  simplified  thenBranch  List  replacements  int  type  
[BugLab_Variable_Misuse]^Node body = elseHasSideEffects ? thenBranch : elseBranch;^146^^^^^129^154^Node body = thenHasSideEffects ? thenBranch : elseBranch;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] keepSimplifiedHookExpression [RETURN_TYPE] void   Node hook boolean thenHasSideEffects boolean elseHasSideEffects [VARIABLES] AbstractCompiler  compiler  Set  FORBIDDEN_TYPES  boolean  elseHasSideEffects  thenHasSideEffects  SideEffectAccumulator  accumulator  Node  body  condition  elseBranch  hook  simplified  thenBranch  List  replacements  int  type  
[BugLab_Variable_Misuse]^Node body = thenHasSideEffects ? simplified : elseBranch;^146^^^^^129^154^Node body = thenHasSideEffects ? thenBranch : elseBranch;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] keepSimplifiedHookExpression [RETURN_TYPE] void   Node hook boolean thenHasSideEffects boolean elseHasSideEffects [VARIABLES] AbstractCompiler  compiler  Set  FORBIDDEN_TYPES  boolean  elseHasSideEffects  thenHasSideEffects  SideEffectAccumulator  accumulator  Node  body  condition  elseBranch  hook  simplified  thenBranch  List  replacements  int  type  
[BugLab_Variable_Misuse]^Node body = thenHasSideEffects ? thenBranch : thenBranch;^146^^^^^129^154^Node body = thenHasSideEffects ? thenBranch : elseBranch;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] keepSimplifiedHookExpression [RETURN_TYPE] void   Node hook boolean thenHasSideEffects boolean elseHasSideEffects [VARIABLES] AbstractCompiler  compiler  Set  FORBIDDEN_TYPES  boolean  elseHasSideEffects  thenHasSideEffects  SideEffectAccumulator  accumulator  Node  body  condition  elseBranch  hook  simplified  thenBranch  List  replacements  int  type  
[BugLab_Argument_Swapping]^Node body = thenBranch ? thenHasSideEffects : elseBranch;^146^^^^^129^154^Node body = thenHasSideEffects ? thenBranch : elseBranch;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] keepSimplifiedHookExpression [RETURN_TYPE] void   Node hook boolean thenHasSideEffects boolean elseHasSideEffects [VARIABLES] AbstractCompiler  compiler  Set  FORBIDDEN_TYPES  boolean  elseHasSideEffects  thenHasSideEffects  SideEffectAccumulator  accumulator  Node  body  condition  elseBranch  hook  simplified  thenBranch  List  replacements  int  type  
[BugLab_Argument_Swapping]^Node body = thenHasSideEffects ? elseBranch : thenBranch;^146^^^^^129^154^Node body = thenHasSideEffects ? thenBranch : elseBranch;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] keepSimplifiedHookExpression [RETURN_TYPE] void   Node hook boolean thenHasSideEffects boolean elseHasSideEffects [VARIABLES] AbstractCompiler  compiler  Set  FORBIDDEN_TYPES  boolean  elseHasSideEffects  thenHasSideEffects  SideEffectAccumulator  accumulator  Node  body  condition  elseBranch  hook  simplified  thenBranch  List  replacements  int  type  
[BugLab_Argument_Swapping]^Node simplified = new Node ( body, condition.cloneTree (  ) , simplifyShortCircuitBranch ( type )  ) ;^147^148^^^^129^154^Node simplified = new Node ( type, condition.cloneTree (  ) , simplifyShortCircuitBranch ( body )  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] keepSimplifiedHookExpression [RETURN_TYPE] void   Node hook boolean thenHasSideEffects boolean elseHasSideEffects [VARIABLES] AbstractCompiler  compiler  Set  FORBIDDEN_TYPES  boolean  elseHasSideEffects  thenHasSideEffects  SideEffectAccumulator  accumulator  Node  body  condition  elseBranch  hook  simplified  thenBranch  List  replacements  int  type  
[BugLab_Variable_Misuse]^type, simplified.cloneTree (  ) , simplifyShortCircuitBranch ( body )  ) ;^148^^^^^129^154^type, condition.cloneTree (  ) , simplifyShortCircuitBranch ( body )  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] keepSimplifiedHookExpression [RETURN_TYPE] void   Node hook boolean thenHasSideEffects boolean elseHasSideEffects [VARIABLES] AbstractCompiler  compiler  Set  FORBIDDEN_TYPES  boolean  elseHasSideEffects  thenHasSideEffects  SideEffectAccumulator  accumulator  Node  body  condition  elseBranch  hook  simplified  thenBranch  List  replacements  int  type  
[BugLab_Variable_Misuse]^type, condition.cloneTree (  ) , simplifyShortCircuitBranch ( simplified )  ) ;^148^^^^^129^154^type, condition.cloneTree (  ) , simplifyShortCircuitBranch ( body )  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] keepSimplifiedHookExpression [RETURN_TYPE] void   Node hook boolean thenHasSideEffects boolean elseHasSideEffects [VARIABLES] AbstractCompiler  compiler  Set  FORBIDDEN_TYPES  boolean  elseHasSideEffects  thenHasSideEffects  SideEffectAccumulator  accumulator  Node  body  condition  elseBranch  hook  simplified  thenBranch  List  replacements  int  type  
[BugLab_Variable_Misuse]^replacements.add ( hook ) ;^149^^^^^129^154^replacements.add ( simplified ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] keepSimplifiedHookExpression [RETURN_TYPE] void   Node hook boolean thenHasSideEffects boolean elseHasSideEffects [VARIABLES] AbstractCompiler  compiler  Set  FORBIDDEN_TYPES  boolean  elseHasSideEffects  thenHasSideEffects  SideEffectAccumulator  accumulator  Node  body  condition  elseBranch  hook  simplified  thenBranch  List  replacements  int  type  
[BugLab_Argument_Swapping]^Node body = elseBranch ? thenBranch : thenHasSideEffects;^146^^^^^129^154^Node body = thenHasSideEffects ? thenBranch : elseBranch;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] keepSimplifiedHookExpression [RETURN_TYPE] void   Node hook boolean thenHasSideEffects boolean elseHasSideEffects [VARIABLES] AbstractCompiler  compiler  Set  FORBIDDEN_TYPES  boolean  elseHasSideEffects  thenHasSideEffects  SideEffectAccumulator  accumulator  Node  body  condition  elseBranch  hook  simplified  thenBranch  List  replacements  int  type  
[BugLab_Variable_Misuse]^type, condition.cloneTree (  ) , simplifyShortCircuitBranch ( thenBranch )  ) ;^148^^^^^129^154^type, condition.cloneTree (  ) , simplifyShortCircuitBranch ( body )  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] keepSimplifiedHookExpression [RETURN_TYPE] void   Node hook boolean thenHasSideEffects boolean elseHasSideEffects [VARIABLES] AbstractCompiler  compiler  Set  FORBIDDEN_TYPES  boolean  elseHasSideEffects  thenHasSideEffects  SideEffectAccumulator  accumulator  Node  body  condition  elseBranch  hook  simplified  thenBranch  List  replacements  int  type  
[BugLab_Variable_Misuse]^replacements.add ( thenBranch ) ;^149^^^^^129^154^replacements.add ( simplified ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] keepSimplifiedHookExpression [RETURN_TYPE] void   Node hook boolean thenHasSideEffects boolean elseHasSideEffects [VARIABLES] AbstractCompiler  compiler  Set  FORBIDDEN_TYPES  boolean  elseHasSideEffects  thenHasSideEffects  SideEffectAccumulator  accumulator  Node  body  condition  elseBranch  hook  simplified  thenBranch  List  replacements  int  type  
[BugLab_Variable_Misuse]^Node simplified = thenBranch.cloneNode (  ) ;^139^^^^^129^154^Node simplified = hook.cloneNode (  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] keepSimplifiedHookExpression [RETURN_TYPE] void   Node hook boolean thenHasSideEffects boolean elseHasSideEffects [VARIABLES] AbstractCompiler  compiler  Set  FORBIDDEN_TYPES  boolean  elseHasSideEffects  thenHasSideEffects  SideEffectAccumulator  accumulator  Node  body  condition  elseBranch  hook  simplified  thenBranch  List  replacements  int  type  
[BugLab_Variable_Misuse]^simplified.addChildToBack ( thenBranch.cloneTree (  )  ) ;^140^^^^^129^154^simplified.addChildToBack ( condition.cloneTree (  )  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] keepSimplifiedHookExpression [RETURN_TYPE] void   Node hook boolean thenHasSideEffects boolean elseHasSideEffects [VARIABLES] AbstractCompiler  compiler  Set  FORBIDDEN_TYPES  boolean  elseHasSideEffects  thenHasSideEffects  SideEffectAccumulator  accumulator  Node  body  condition  elseBranch  hook  simplified  thenBranch  List  replacements  int  type  
[BugLab_Variable_Misuse]^simplified.addChildToBack ( simplifyShortCircuitBranch ( hook )  ) ;^141^^^^^129^154^simplified.addChildToBack ( simplifyShortCircuitBranch ( thenBranch )  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] keepSimplifiedHookExpression [RETURN_TYPE] void   Node hook boolean thenHasSideEffects boolean elseHasSideEffects [VARIABLES] AbstractCompiler  compiler  Set  FORBIDDEN_TYPES  boolean  elseHasSideEffects  thenHasSideEffects  SideEffectAccumulator  accumulator  Node  body  condition  elseBranch  hook  simplified  thenBranch  List  replacements  int  type  
[BugLab_Variable_Misuse]^simplified.addChildToBack ( simplifyShortCircuitBranch ( thenBranch )  ) ;^142^^^^^129^154^simplified.addChildToBack ( simplifyShortCircuitBranch ( elseBranch )  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] keepSimplifiedHookExpression [RETURN_TYPE] void   Node hook boolean thenHasSideEffects boolean elseHasSideEffects [VARIABLES] AbstractCompiler  compiler  Set  FORBIDDEN_TYPES  boolean  elseHasSideEffects  thenHasSideEffects  SideEffectAccumulator  accumulator  Node  body  condition  elseBranch  hook  simplified  thenBranch  List  replacements  int  type  
[BugLab_Variable_Misuse]^replacements.add ( thenBranch ) ;^143^^^^^129^154^replacements.add ( simplified ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] keepSimplifiedHookExpression [RETURN_TYPE] void   Node hook boolean thenHasSideEffects boolean elseHasSideEffects [VARIABLES] AbstractCompiler  compiler  Set  FORBIDDEN_TYPES  boolean  elseHasSideEffects  thenHasSideEffects  SideEffectAccumulator  accumulator  Node  body  condition  elseBranch  hook  simplified  thenBranch  List  replacements  int  type  
[BugLab_Variable_Misuse]^simplified.addChildToBack ( simplifyShortCircuitBranch ( simplified )  ) ;^141^^^^^129^154^simplified.addChildToBack ( simplifyShortCircuitBranch ( thenBranch )  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] keepSimplifiedHookExpression [RETURN_TYPE] void   Node hook boolean thenHasSideEffects boolean elseHasSideEffects [VARIABLES] AbstractCompiler  compiler  Set  FORBIDDEN_TYPES  boolean  elseHasSideEffects  thenHasSideEffects  SideEffectAccumulator  accumulator  Node  body  condition  elseBranch  hook  simplified  thenBranch  List  replacements  int  type  
[BugLab_Variable_Misuse]^type, thenBranch.cloneTree (  ) , simplifyShortCircuitBranch ( body )  ) ;^148^^^^^129^154^type, condition.cloneTree (  ) , simplifyShortCircuitBranch ( body )  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] keepSimplifiedHookExpression [RETURN_TYPE] void   Node hook boolean thenHasSideEffects boolean elseHasSideEffects [VARIABLES] AbstractCompiler  compiler  Set  FORBIDDEN_TYPES  boolean  elseHasSideEffects  thenHasSideEffects  SideEffectAccumulator  accumulator  Node  body  condition  elseBranch  hook  simplified  thenBranch  List  replacements  int  type  
[BugLab_Argument_Swapping]^new GatherSideEffectSubexpressionsCallback ( parts, new CopySideEffectSubexpressions ( compiler, compiler )  )  ) ;^160^161^162^^^156^180^new GatherSideEffectSubexpressionsCallback ( compiler, new CopySideEffectSubexpressions ( compiler, parts )  )  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] simplifyShortCircuitBranch [RETURN_TYPE] Node   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  Node  node  part  ret  
[BugLab_Argument_Swapping]^new CopySideEffectSubexpressions ( parts, compiler )  )  ) ;^162^^^^^156^180^new CopySideEffectSubexpressions ( compiler, parts )  )  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] simplifyShortCircuitBranch [RETURN_TYPE] Node   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  Node  node  part  ret  
[BugLab_Variable_Misuse]^NodeTraversal.traverse ( compiler, ret, new GatherSideEffectSubexpressionsCallback ( compiler,^158^159^160^161^^156^180^NodeTraversal.traverse ( compiler, node, new GatherSideEffectSubexpressionsCallback ( compiler,^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] simplifyShortCircuitBranch [RETURN_TYPE] Node   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  Node  node  part  ret  
[BugLab_Argument_Swapping]^NodeTraversal.traverse ( node, compiler, new GatherSideEffectSubexpressionsCallback ( compiler,^158^159^160^161^^156^180^NodeTraversal.traverse ( compiler, node, new GatherSideEffectSubexpressionsCallback ( compiler,^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] simplifyShortCircuitBranch [RETURN_TYPE] Node   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  Node  node  part  ret  
[BugLab_Variable_Misuse]^if  ( node != null )  {^166^^^^^156^180^if  ( ret != null )  {^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] simplifyShortCircuitBranch [RETURN_TYPE] Node   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  Node  node  part  ret  
[BugLab_Wrong_Operator]^if  ( ret == null )  {^166^^^^^156^180^if  ( ret != null )  {^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] simplifyShortCircuitBranch [RETURN_TYPE] Node   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  Node  node  part  ret  
[BugLab_Variable_Misuse]^ret = new Node ( Token.COMMA, ret, node ) ;^167^^^^^156^180^ret = new Node ( Token.COMMA, ret, part ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] simplifyShortCircuitBranch [RETURN_TYPE] Node   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  Node  node  part  ret  
[BugLab_Argument_Swapping]^ret = new Node ( Token.COMMA, part, ret ) ;^167^^^^^156^180^ret = new Node ( Token.COMMA, ret, part ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] simplifyShortCircuitBranch [RETURN_TYPE] Node   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  Node  node  part  ret  
[BugLab_Variable_Misuse]^ret = new Node ( Token.COMMA, node, part ) ;^167^^^^^156^180^ret = new Node ( Token.COMMA, ret, part ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] simplifyShortCircuitBranch [RETURN_TYPE] Node   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  Node  node  part  ret  
[BugLab_Variable_Misuse]^ret = ret;^169^^^^^156^180^ret = part;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] simplifyShortCircuitBranch [RETURN_TYPE] Node   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  Node  node  part  ret  
[BugLab_Variable_Misuse]^ret = new Node ( Token.COMMA, part, part ) ;^167^^^^^156^180^ret = new Node ( Token.COMMA, ret, part ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] simplifyShortCircuitBranch [RETURN_TYPE] Node   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  Node  node  part  ret  
[BugLab_Variable_Misuse]^if  ( part == null )  {^173^^^^^156^180^if  ( ret == null )  {^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] simplifyShortCircuitBranch [RETURN_TYPE] Node   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  Node  node  part  ret  
[BugLab_Wrong_Operator]^if  ( ret != null )  {^173^^^^^156^180^if  ( ret == null )  {^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] simplifyShortCircuitBranch [RETURN_TYPE] Node   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  Node  node  part  ret  
[BugLab_Wrong_Operator]^throw new IllegalArgumentException ( "expected at least one side effect subexpression in short "  ||  "circuit branch." ) ;^174^175^176^^^156^180^throw new IllegalArgumentException ( "expected at least one side effect subexpression in short " + "circuit branch." ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] simplifyShortCircuitBranch [RETURN_TYPE] Node   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  Node  node  part  ret  
[BugLab_Wrong_Operator]^throw new IllegalArgumentException ( "expected at least one side effect subexpression in short "  |  "circuit branch." ) ;^174^175^176^^^156^180^throw new IllegalArgumentException ( "expected at least one side effect subexpression in short " + "circuit branch." ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] simplifyShortCircuitBranch [RETURN_TYPE] Node   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  Node  node  part  ret  
[BugLab_Wrong_Operator]^throw new IllegalArgumentException ( "expected at least one side effect subexpression in short "  <=  "circuit branch." ) ;^174^175^176^^^156^180^throw new IllegalArgumentException ( "expected at least one side effect subexpression in short " + "circuit branch." ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] simplifyShortCircuitBranch [RETURN_TYPE] Node   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  Node  node  part  ret  
[BugLab_Wrong_Operator]^throw new IllegalArgumentException ( "expected at least one side effect subexpression in short "  <  "circuit branch." ) ;^174^175^176^^^156^180^throw new IllegalArgumentException ( "expected at least one side effect subexpression in short " + "circuit branch." ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] simplifyShortCircuitBranch [RETURN_TYPE] Node   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  Node  node  part  ret  
[BugLab_Argument_Swapping]^SubclassRelationship classes = callNode.getCodingConvention (  ) .getClassesDefinedByCall ( compiler ) ;^204^205^^^^203^207^SubclassRelationship classes = compiler.getCodingConvention (  ) .getClassesDefinedByCall ( callNode ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] isClassDefiningCall [RETURN_TYPE] boolean   Node callNode [VARIABLES] AbstractCompiler  compiler  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  Node  callNode  List  parts  replacements  SubclassRelationship  classes  
[BugLab_Wrong_Operator]^return classes == null;^206^^^^^203^207^return classes != null;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] isClassDefiningCall [RETURN_TYPE] boolean   Node callNode [VARIABLES] AbstractCompiler  compiler  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  Node  callNode  List  parts  replacements  SubclassRelationship  classes  
[BugLab_Argument_Swapping]^if  ( node.contains ( FORBIDDEN_TYPES.getType (  )  )  || NodeUtil.isControlStructure ( node )  )  {^224^225^^^^209^239^if  ( FORBIDDEN_TYPES.contains ( node.getType (  )  )  || NodeUtil.isControlStructure ( node )  )  {^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal traversal Node node Node parent [VARIABLES] AbstractCompiler  compiler  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  NodeTraversal  traversal  Node  node  parent  List  parts  replacements  
[BugLab_Wrong_Operator]^if  ( FORBIDDEN_TYPES.contains ( node.getType (  )  )  && NodeUtil.isControlStructure ( node )  )  {^224^225^^^^209^239^if  ( FORBIDDEN_TYPES.contains ( node.getType (  )  )  || NodeUtil.isControlStructure ( node )  )  {^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal traversal Node node Node parent [VARIABLES] AbstractCompiler  compiler  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  NodeTraversal  traversal  Node  node  parent  List  parts  replacements  
[BugLab_Wrong_Operator]^throw new IllegalArgumentException ( Token.name ( node.getType (  )  )   >=  " nodes are not supported." ) ;^226^227^^^^224^228^throw new IllegalArgumentException ( Token.name ( node.getType (  )  )  + " nodes are not supported." ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal traversal Node node Node parent [VARIABLES] AbstractCompiler  compiler  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  NodeTraversal  traversal  Node  node  parent  List  parts  replacements  
[BugLab_Variable_Misuse]^throw new IllegalArgumentException ( Token.name ( parent.getType (  )  )  + " nodes are not supported." ) ;^226^227^^^^224^228^throw new IllegalArgumentException ( Token.name ( node.getType (  )  )  + " nodes are not supported." ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal traversal Node node Node parent [VARIABLES] AbstractCompiler  compiler  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  NodeTraversal  traversal  Node  node  parent  List  parts  replacements  
[BugLab_Wrong_Operator]^throw new IllegalArgumentException ( Token.name ( node.getType (  )  )   <=  " nodes are not supported." ) ;^226^227^^^^224^228^throw new IllegalArgumentException ( Token.name ( node.getType (  )  )  + " nodes are not supported." ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal traversal Node node Node parent [VARIABLES] AbstractCompiler  compiler  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  NodeTraversal  traversal  Node  node  parent  List  parts  replacements  
[BugLab_Variable_Misuse]^Token.name ( parent.getType (  )  )  + " nodes are not supported." ) ;^227^^^^^224^228^Token.name ( node.getType (  )  )  + " nodes are not supported." ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal traversal Node node Node parent [VARIABLES] AbstractCompiler  compiler  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  NodeTraversal  traversal  Node  node  parent  List  parts  replacements  
[BugLab_Variable_Misuse]^throw new IllegalArgumentException ( Token.name ( parent.getType (  )  )  + " nodes are not supported." ) ;^226^227^^^^211^241^throw new IllegalArgumentException ( Token.name ( node.getType (  )  )  + " nodes are not supported." ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal traversal Node node Node parent [VARIABLES] AbstractCompiler  compiler  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  NodeTraversal  traversal  Node  node  parent  List  parts  replacements  
[BugLab_Wrong_Operator]^throw new IllegalArgumentException ( Token.name ( node.getType (  )  )   ^  " nodes are not supported." ) ;^226^227^^^^211^241^throw new IllegalArgumentException ( Token.name ( node.getType (  )  )  + " nodes are not supported." ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal traversal Node node Node parent [VARIABLES] AbstractCompiler  compiler  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  NodeTraversal  traversal  Node  node  parent  List  parts  replacements  
[BugLab_Wrong_Operator]^throw new IllegalArgumentException ( Token.name ( node.getType (  )  )   &&  " nodes are not supported." ) ;^226^227^^^^211^241^throw new IllegalArgumentException ( Token.name ( node.getType (  )  )  + " nodes are not supported." ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal traversal Node node Node parent [VARIABLES] AbstractCompiler  compiler  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  NodeTraversal  traversal  Node  node  parent  List  parts  replacements  
[BugLab_Variable_Misuse]^NodeUtil.isControlStructure ( parent )  )  {^225^^^^^210^240^NodeUtil.isControlStructure ( node )  )  {^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal traversal Node node Node parent [VARIABLES] AbstractCompiler  compiler  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  NodeTraversal  traversal  Node  node  parent  List  parts  replacements  
[BugLab_Variable_Misuse]^if  ( parent.getType (  )  == Token.FUNCTION )  {^231^^^^^216^246^if  ( node.getType (  )  == Token.FUNCTION )  {^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal traversal Node node Node parent [VARIABLES] AbstractCompiler  compiler  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  NodeTraversal  traversal  Node  node  parent  List  parts  replacements  
[BugLab_Wrong_Operator]^if  ( node.getType (  )  < Token.FUNCTION )  {^231^^^^^216^246^if  ( node.getType (  )  == Token.FUNCTION )  {^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal traversal Node node Node parent [VARIABLES] AbstractCompiler  compiler  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  NodeTraversal  traversal  Node  node  parent  List  parts  replacements  
[BugLab_Wrong_Literal]^return true;^232^^^^^217^247^return false;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal traversal Node node Node parent [VARIABLES] AbstractCompiler  compiler  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  NodeTraversal  traversal  Node  node  parent  List  parts  replacements  
[BugLab_Variable_Misuse]^if  ( parent.getType (  )  == Token.HOOK )  {^236^^^^^221^251^if  ( node.getType (  )  == Token.HOOK )  {^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal traversal Node node Node parent [VARIABLES] AbstractCompiler  compiler  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  NodeTraversal  traversal  Node  node  parent  List  parts  replacements  
[BugLab_Wrong_Operator]^if  ( node.getType (  )  != Token.HOOK )  {^236^^^^^221^251^if  ( node.getType (  )  == Token.HOOK )  {^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal traversal Node node Node parent [VARIABLES] AbstractCompiler  compiler  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  NodeTraversal  traversal  Node  node  parent  List  parts  replacements  
[BugLab_Variable_Misuse]^return processHook ( parent ) ;^237^^^^^222^252^return processHook ( node ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal traversal Node node Node parent [VARIABLES] AbstractCompiler  compiler  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  NodeTraversal  traversal  Node  node  parent  List  parts  replacements  
[BugLab_Wrong_Operator]^if  (  ( node.getType (  )  == Token.AND )  &&  ( node.getType (  )  == Token.OR )  )  {^241^^^^^226^256^if  (  ( node.getType (  )  == Token.AND )  ||  ( node.getType (  )  == Token.OR )  )  {^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal traversal Node node Node parent [VARIABLES] AbstractCompiler  compiler  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  NodeTraversal  traversal  Node  node  parent  List  parts  replacements  
[BugLab_Wrong_Operator]^if  (  ( node.getType (  )  >= Token.AND )  ||  ( node.getType (  )  == Token.OR )  )  {^241^^^^^226^256^if  (  ( node.getType (  )  == Token.AND )  ||  ( node.getType (  )  == Token.OR )  )  {^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal traversal Node node Node parent [VARIABLES] AbstractCompiler  compiler  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  NodeTraversal  traversal  Node  node  parent  List  parts  replacements  
[BugLab_Wrong_Operator]^if  (  ( node.getType (  )  != Token.AND )  ||  ( node.getType (  )  == Token.OR )  )  {^241^^^^^226^256^if  (  ( node.getType (  )  == Token.AND )  ||  ( node.getType (  )  == Token.OR )  )  {^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal traversal Node node Node parent [VARIABLES] AbstractCompiler  compiler  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  NodeTraversal  traversal  Node  node  parent  List  parts  replacements  
[BugLab_Variable_Misuse]^return processShortCircuitExpression ( parent ) ;^242^^^^^227^257^return processShortCircuitExpression ( node ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal traversal Node node Node parent [VARIABLES] AbstractCompiler  compiler  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  NodeTraversal  traversal  Node  node  parent  List  parts  replacements  
[BugLab_Variable_Misuse]^if  (  ( parent.getType (  )  == Token.AND )  ||  ( node.getType (  )  == Token.OR )  )  {^241^^^^^226^256^if  (  ( node.getType (  )  == Token.AND )  ||  ( node.getType (  )  == Token.OR )  )  {^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal traversal Node node Node parent [VARIABLES] AbstractCompiler  compiler  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  NodeTraversal  traversal  Node  node  parent  List  parts  replacements  
[BugLab_Variable_Misuse]^if  ( !NodeUtil.nodeTypeMayHaveSideEffects ( parent )  )  {^245^^^^^230^260^if  ( !NodeUtil.nodeTypeMayHaveSideEffects ( node )  )  {^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal traversal Node node Node parent [VARIABLES] AbstractCompiler  compiler  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  NodeTraversal  traversal  Node  node  parent  List  parts  replacements  
[BugLab_Variable_Misuse]^if  ( parent.getType (  )  == Token.CALL )  {^251^^^^^245^259^if  ( node.getType (  )  == Token.CALL )  {^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal traversal Node node Node parent [VARIABLES] AbstractCompiler  compiler  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  NodeTraversal  traversal  Node  node  parent  List  parts  replacements  
[BugLab_Wrong_Operator]^if  ( node.getType (  )  <= Token.CALL )  {^251^^^^^245^259^if  ( node.getType (  )  == Token.CALL )  {^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal traversal Node node Node parent [VARIABLES] AbstractCompiler  compiler  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  NodeTraversal  traversal  Node  node  parent  List  parts  replacements  
[BugLab_Wrong_Operator]^if  ( node.getType (  )  >= Token.CALL )  {^251^^^^^245^259^if  ( node.getType (  )  == Token.CALL )  {^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal traversal Node node Node parent [VARIABLES] AbstractCompiler  compiler  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  NodeTraversal  traversal  Node  node  parent  List  parts  replacements  
[BugLab_Variable_Misuse]^} else if  ( parent.getType (  )  == Token.NEW )  {^253^^^^^245^259^} else if  ( node.getType (  )  == Token.NEW )  {^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal traversal Node node Node parent [VARIABLES] AbstractCompiler  compiler  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  NodeTraversal  traversal  Node  node  parent  List  parts  replacements  
[BugLab_Wrong_Operator]^} else if  ( node.getType (  )  >= Token.NEW )  {^253^^^^^245^259^} else if  ( node.getType (  )  == Token.NEW )  {^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal traversal Node node Node parent [VARIABLES] AbstractCompiler  compiler  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  NodeTraversal  traversal  Node  node  parent  List  parts  replacements  
[BugLab_Wrong_Literal]^return true;^257^^^^^245^259^return false;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal traversal Node node Node parent [VARIABLES] AbstractCompiler  compiler  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  NodeTraversal  traversal  Node  node  parent  List  parts  replacements  
[BugLab_Variable_Misuse]^accumulator.keepSubTree ( parent ) ;^256^^^^^245^259^accumulator.keepSubTree ( node ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal traversal Node node Node parent [VARIABLES] AbstractCompiler  compiler  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  NodeTraversal  traversal  Node  node  parent  List  parts  replacements  
[BugLab_Variable_Misuse]^return processConstructorCall ( parent ) ;^254^^^^^245^259^return processConstructorCall ( node ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal traversal Node node Node parent [VARIABLES] AbstractCompiler  compiler  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  NodeTraversal  traversal  Node  node  parent  List  parts  replacements  
[BugLab_Variable_Misuse]^return processFunctionCall ( parent ) ;^252^^^^^245^259^return processFunctionCall ( node ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal traversal Node node Node parent [VARIABLES] AbstractCompiler  compiler  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  NodeTraversal  traversal  Node  node  parent  List  parts  replacements  
[BugLab_Wrong_Operator]^} else if  ( node.getType (  )  > Token.NEW )  {^253^^^^^245^259^} else if  ( node.getType (  )  == Token.NEW )  {^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal traversal Node node Node parent [VARIABLES] AbstractCompiler  compiler  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  NodeTraversal  traversal  Node  node  parent  List  parts  replacements  
[BugLab_Wrong_Literal]^return false;^246^^^^^231^261^return true;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal traversal Node node Node parent [VARIABLES] AbstractCompiler  compiler  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  NodeTraversal  traversal  Node  node  parent  List  parts  replacements  
[BugLab_Variable_Misuse]^if  ( parent.getType (  )  == Token.CALL )  {^251^^^^^236^266^if  ( node.getType (  )  == Token.CALL )  {^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal traversal Node node Node parent [VARIABLES] AbstractCompiler  compiler  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  NodeTraversal  traversal  Node  node  parent  List  parts  replacements  
[BugLab_Variable_Misuse]^if  ( node.getType (  )  == Token.4 )  {^251^^^^^236^266^if  ( node.getType (  )  == Token.CALL )  {^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal traversal Node node Node parent [VARIABLES] AbstractCompiler  compiler  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  NodeTraversal  traversal  Node  node  parent  List  parts  replacements  
[BugLab_Wrong_Operator]^if  ( node.getType (  )  <= Token.CALL )  {^251^^^^^236^266^if  ( node.getType (  )  == Token.CALL )  {^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal traversal Node node Node parent [VARIABLES] AbstractCompiler  compiler  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  NodeTraversal  traversal  Node  node  parent  List  parts  replacements  
[BugLab_Wrong_Operator]^if  ( node.getType (  )  >= Token.CALL )  {^251^^^^^236^266^if  ( node.getType (  )  == Token.CALL )  {^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal traversal Node node Node parent [VARIABLES] AbstractCompiler  compiler  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  NodeTraversal  traversal  Node  node  parent  List  parts  replacements  
[BugLab_Variable_Misuse]^} else if  ( parent.getType (  )  == Token.NEW )  {^253^^^^^238^268^} else if  ( node.getType (  )  == Token.NEW )  {^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal traversal Node node Node parent [VARIABLES] AbstractCompiler  compiler  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  NodeTraversal  traversal  Node  node  parent  List  parts  replacements  
[BugLab_Wrong_Operator]^} else if  ( node.getType (  )  != Token.NEW )  {^253^^^^^238^268^} else if  ( node.getType (  )  == Token.NEW )  {^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal traversal Node node Node parent [VARIABLES] AbstractCompiler  compiler  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  NodeTraversal  traversal  Node  node  parent  List  parts  replacements  
[BugLab_Wrong_Literal]^return true;^257^^^^^253^258^return false;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal traversal Node node Node parent [VARIABLES] AbstractCompiler  compiler  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  NodeTraversal  traversal  Node  node  parent  List  parts  replacements  
[BugLab_Variable_Misuse]^accumulator.keepSubTree ( parent ) ;^256^^^^^253^258^accumulator.keepSubTree ( node ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal traversal Node node Node parent [VARIABLES] AbstractCompiler  compiler  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  NodeTraversal  traversal  Node  node  parent  List  parts  replacements  
[BugLab_Variable_Misuse]^return processConstructorCall ( parent ) ;^254^^^^^239^269^return processConstructorCall ( node ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal traversal Node node Node parent [VARIABLES] AbstractCompiler  compiler  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  NodeTraversal  traversal  Node  node  parent  List  parts  replacements  
[BugLab_Wrong_Literal]^return true;^257^^^^^242^272^return false;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal traversal Node node Node parent [VARIABLES] AbstractCompiler  compiler  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  NodeTraversal  traversal  Node  node  parent  List  parts  replacements  
[BugLab_Variable_Misuse]^accumulator.keepSubTree ( parent ) ;^256^^^^^241^271^accumulator.keepSubTree ( node ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal traversal Node node Node parent [VARIABLES] AbstractCompiler  compiler  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  NodeTraversal  traversal  Node  node  parent  List  parts  replacements  
[BugLab_Variable_Misuse]^return processFunctionCall ( parent ) ;^252^^^^^237^267^return processFunctionCall ( node ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal traversal Node node Node parent [VARIABLES] AbstractCompiler  compiler  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  NodeTraversal  traversal  Node  node  parent  List  parts  replacements  
[BugLab_Variable_Misuse]^Preconditions.checkArgument ( ( right.getType (  )  == Token.AND )  ||  ( node.getType (  )  == Token.OR ) , "Expected: AND or OR, Got: " + Token.name ( node.getType (  )  )  ) ;^268^269^270^^^267^282^Preconditions.checkArgument ( ( node.getType (  )  == Token.AND )  ||  ( node.getType (  )  == Token.OR ) , "Expected: AND or OR, Got: " + Token.name ( node.getType (  )  )  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] processShortCircuitExpression [RETURN_TYPE] boolean   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  Node  left  node  right  
[BugLab_Argument_Swapping]^Preconditions.checkArgument ( ( OR.getType (  )  == Token.AND )  ||  ( node.getType (  )  == Token.OR ) , "Expected: AND or node, Got: " + Token.name ( node.getType (  )  )  ) ;^268^269^270^^^267^282^Preconditions.checkArgument ( ( node.getType (  )  == Token.AND )  ||  ( node.getType (  )  == Token.OR ) , "Expected: AND or OR, Got: " + Token.name ( node.getType (  )  )  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] processShortCircuitExpression [RETURN_TYPE] boolean   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  Node  left  node  right  
[BugLab_Argument_Swapping]^Preconditions.checkArgument ( ( AND.getType (  )  == Token.AND )  ||  ( node.getType (  )  == Token.OR ) , "Expected: node or OR, Got: " + Token.name ( node.getType (  )  )  ) ;^268^269^270^^^267^282^Preconditions.checkArgument ( ( node.getType (  )  == Token.AND )  ||  ( node.getType (  )  == Token.OR ) , "Expected: AND or OR, Got: " + Token.name ( node.getType (  )  )  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] processShortCircuitExpression [RETURN_TYPE] boolean   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  Node  left  node  right  
[BugLab_Argument_Swapping]^Preconditions.checkArgument ( ( node.getType (  )  == Token.AND )  ||  ( node.getType (  )  == Token.OR ) , "Expected: OR or AND, Got: " + Token.name ( node.getType (  )  )  ) ;^268^269^270^^^267^282^Preconditions.checkArgument ( ( node.getType (  )  == Token.AND )  ||  ( node.getType (  )  == Token.OR ) , "Expected: AND or OR, Got: " + Token.name ( node.getType (  )  )  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] processShortCircuitExpression [RETURN_TYPE] boolean   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  Node  left  node  right  
[BugLab_Wrong_Operator]^Preconditions.checkArgument ( ( node.getType (  )  == Token.AND )  &&  ( node.getType (  )  == Token.OR ) , "Expected: AND or OR, Got: " + Token.name ( node.getType (  )  )  ) ;^268^269^270^^^267^282^Preconditions.checkArgument ( ( node.getType (  )  == Token.AND )  ||  ( node.getType (  )  == Token.OR ) , "Expected: AND or OR, Got: " + Token.name ( node.getType (  )  )  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] processShortCircuitExpression [RETURN_TYPE] boolean   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  Node  left  node  right  
[BugLab_Wrong_Operator]^Preconditions.checkArgument ( ( node.getType (  )  >= Token.AND )  ||  ( node.getType (  )  == Token.OR ) , "Expected: AND or OR, Got: " + Token.name ( node.getType (  )  )  ) ;^268^269^270^^^267^282^Preconditions.checkArgument ( ( node.getType (  )  == Token.AND )  ||  ( node.getType (  )  == Token.OR ) , "Expected: AND or OR, Got: " + Token.name ( node.getType (  )  )  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] processShortCircuitExpression [RETURN_TYPE] boolean   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  Node  left  node  right  
[BugLab_Wrong_Operator]^Preconditions.checkArgument ( ( node.getType (   instanceof   )  == Token.AND )  ||  ( node.getType (  )  == Token.OR ) , "Expected: AND or OR, Got: " + Token.name ( node.getType (  )  )  ) ;^268^269^270^^^267^282^Preconditions.checkArgument ( ( node.getType (  )  == Token.AND )  ||  ( node.getType (  )  == Token.OR ) , "Expected: AND or OR, Got: " + Token.name ( node.getType (  )  )  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] processShortCircuitExpression [RETURN_TYPE] boolean   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  Node  left  node  right  
[BugLab_Variable_Misuse]^( right.getType (  )  == Token.AND )  ||  ( node.getType (  )  == Token.OR ) , "Expected: AND or OR, Got: " + Token.name ( node.getType (  )  )  ) ;^269^270^^^^267^282^( node.getType (  )  == Token.AND )  ||  ( node.getType (  )  == Token.OR ) , "Expected: AND or OR, Got: " + Token.name ( node.getType (  )  )  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] processShortCircuitExpression [RETURN_TYPE] boolean   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  Node  left  node  right  
[BugLab_Variable_Misuse]^"Expected: AND or OR, Got: " + Token.name ( right.getType (  )  )  ) ;^270^^^^^267^282^"Expected: AND or OR, Got: " + Token.name ( node.getType (  )  )  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] processShortCircuitExpression [RETURN_TYPE] boolean   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  Node  left  node  right  
[BugLab_Variable_Misuse]^Node left = right.getFirstChild (  ) ;^274^^^^^267^282^Node left = node.getFirstChild (  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] processShortCircuitExpression [RETURN_TYPE] boolean   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  Node  left  node  right  
[BugLab_Variable_Misuse]^Node right = node.getNext (  ) ;^275^^^^^267^282^Node right = left.getNext (  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] processShortCircuitExpression [RETURN_TYPE] boolean   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  Node  left  node  right  
[BugLab_Variable_Misuse]^if  ( NodeUtil.mayHaveSideEffects ( left )  )  {^276^^^^^267^282^if  ( NodeUtil.mayHaveSideEffects ( right )  )  {^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] processShortCircuitExpression [RETURN_TYPE] boolean   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  Node  left  node  right  
[BugLab_Wrong_Literal]^return false;^280^^^^^267^282^return true;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] processShortCircuitExpression [RETURN_TYPE] boolean   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  Node  left  node  right  
[BugLab_Wrong_Literal]^return true;^278^^^^^267^282^return false;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] processShortCircuitExpression [RETURN_TYPE] boolean   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  Node  left  node  right  
[BugLab_Variable_Misuse]^accumulator.keepSimplifiedShortCircuitExpression ( right ) ;^277^^^^^267^282^accumulator.keepSimplifiedShortCircuitExpression ( node ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] processShortCircuitExpression [RETURN_TYPE] boolean   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  Node  left  node  right  
[BugLab_Variable_Misuse]^if  ( NodeUtil.mayHaveSideEffects ( node )  )  {^276^^^^^267^282^if  ( NodeUtil.mayHaveSideEffects ( right )  )  {^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] processShortCircuitExpression [RETURN_TYPE] boolean   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  Node  left  node  right  
[BugLab_Variable_Misuse]^Preconditions.checkArgument ( ifBranch.getType (  )  == Token.HOOK, "Expected: HOOK, Got: " + Token.name ( node.getType (  )  )  ) ;^290^291^292^^^289^306^Preconditions.checkArgument ( node.getType (  )  == Token.HOOK, "Expected: HOOK, Got: " + Token.name ( node.getType (  )  )  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] processHook [RETURN_TYPE] boolean   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  Set  FORBIDDEN_TYPES  boolean  elseHasSideEffects  thenHasSideEffects  SideEffectAccumulator  accumulator  Node  condition  elseBranch  ifBranch  node  
[BugLab_Argument_Swapping]^Preconditions.checkArgument ( HOOK.getType (  )  == Token.HOOK, "Expected: node, Got: " + Token.name ( node.getType (  )  )  ) ;^290^291^292^^^289^306^Preconditions.checkArgument ( node.getType (  )  == Token.HOOK, "Expected: HOOK, Got: " + Token.name ( node.getType (  )  )  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] processHook [RETURN_TYPE] boolean   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  Set  FORBIDDEN_TYPES  boolean  elseHasSideEffects  thenHasSideEffects  SideEffectAccumulator  accumulator  Node  condition  elseBranch  ifBranch  node  
[BugLab_Wrong_Operator]^Preconditions.checkArgument ( node.getType (  )  != Token.HOOK, "Expected: HOOK, Got: " + Token.name ( node.getType (  )  )  ) ;^290^291^292^^^289^306^Preconditions.checkArgument ( node.getType (  )  == Token.HOOK, "Expected: HOOK, Got: " + Token.name ( node.getType (  )  )  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] processHook [RETURN_TYPE] boolean   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  Set  FORBIDDEN_TYPES  boolean  elseHasSideEffects  thenHasSideEffects  SideEffectAccumulator  accumulator  Node  condition  elseBranch  ifBranch  node  
[BugLab_Wrong_Operator]^Preconditions.checkArgument ( node.getType (  >=  )  == Token.HOOK, "Expected: HOOK, Got: " + Token.name ( node.getType (  )  )  ) ;^290^291^292^^^289^306^Preconditions.checkArgument ( node.getType (  )  == Token.HOOK, "Expected: HOOK, Got: " + Token.name ( node.getType (  )  )  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] processHook [RETURN_TYPE] boolean   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  Set  FORBIDDEN_TYPES  boolean  elseHasSideEffects  thenHasSideEffects  SideEffectAccumulator  accumulator  Node  condition  elseBranch  ifBranch  node  
[BugLab_Variable_Misuse]^node.getType (  )  == Token.HOOK, "Expected: HOOK, Got: " + Token.name ( ifBranch.getType (  )  )  ) ;^291^292^^^^289^306^node.getType (  )  == Token.HOOK, "Expected: HOOK, Got: " + Token.name ( node.getType (  )  )  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] processHook [RETURN_TYPE] boolean   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  Set  FORBIDDEN_TYPES  boolean  elseHasSideEffects  thenHasSideEffects  SideEffectAccumulator  accumulator  Node  condition  elseBranch  ifBranch  node  
[BugLab_Variable_Misuse]^"Expected: HOOK, Got: " + Token.name ( ifBranch.getType (  )  )  ) ;^292^^^^^289^306^"Expected: HOOK, Got: " + Token.name ( node.getType (  )  )  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] processHook [RETURN_TYPE] boolean   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  Set  FORBIDDEN_TYPES  boolean  elseHasSideEffects  thenHasSideEffects  SideEffectAccumulator  accumulator  Node  condition  elseBranch  ifBranch  node  
[BugLab_Variable_Misuse]^Node condition = ifBranch.getFirstChild (  ) ;^294^^^^^289^306^Node condition = node.getFirstChild (  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] processHook [RETURN_TYPE] boolean   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  Set  FORBIDDEN_TYPES  boolean  elseHasSideEffects  thenHasSideEffects  SideEffectAccumulator  accumulator  Node  condition  elseBranch  ifBranch  node  
[BugLab_Variable_Misuse]^Node ifBranch = node.getNext (  ) ;^295^^^^^289^306^Node ifBranch = condition.getNext (  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] processHook [RETURN_TYPE] boolean   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  Set  FORBIDDEN_TYPES  boolean  elseHasSideEffects  thenHasSideEffects  SideEffectAccumulator  accumulator  Node  condition  elseBranch  ifBranch  node  
[BugLab_Variable_Misuse]^Node elseBranch = node.getNext (  ) ;^296^^^^^289^306^Node elseBranch = ifBranch.getNext (  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] processHook [RETURN_TYPE] boolean   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  Set  FORBIDDEN_TYPES  boolean  elseHasSideEffects  thenHasSideEffects  SideEffectAccumulator  accumulator  Node  condition  elseBranch  ifBranch  node  
[BugLab_Variable_Misuse]^boolean thenHasSideEffects = NodeUtil.mayHaveSideEffects ( node ) ;^297^^^^^289^306^boolean thenHasSideEffects = NodeUtil.mayHaveSideEffects ( ifBranch ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] processHook [RETURN_TYPE] boolean   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  Set  FORBIDDEN_TYPES  boolean  elseHasSideEffects  thenHasSideEffects  SideEffectAccumulator  accumulator  Node  condition  elseBranch  ifBranch  node  
[BugLab_Variable_Misuse]^boolean elseHasSideEffects = NodeUtil.mayHaveSideEffects ( node ) ;^298^^^^^289^306^boolean elseHasSideEffects = NodeUtil.mayHaveSideEffects ( elseBranch ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] processHook [RETURN_TYPE] boolean   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  Set  FORBIDDEN_TYPES  boolean  elseHasSideEffects  thenHasSideEffects  SideEffectAccumulator  accumulator  Node  condition  elseBranch  ifBranch  node  
[BugLab_Argument_Swapping]^if  ( elseHasSideEffects || thenHasSideEffects )  {^299^^^^^289^306^if  ( thenHasSideEffects || elseHasSideEffects )  {^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] processHook [RETURN_TYPE] boolean   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  Set  FORBIDDEN_TYPES  boolean  elseHasSideEffects  thenHasSideEffects  SideEffectAccumulator  accumulator  Node  condition  elseBranch  ifBranch  node  
[BugLab_Wrong_Operator]^if  ( thenHasSideEffects && elseHasSideEffects )  {^299^^^^^289^306^if  ( thenHasSideEffects || elseHasSideEffects )  {^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] processHook [RETURN_TYPE] boolean   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  Set  FORBIDDEN_TYPES  boolean  elseHasSideEffects  thenHasSideEffects  SideEffectAccumulator  accumulator  Node  condition  elseBranch  ifBranch  node  
[BugLab_Wrong_Literal]^return false;^304^^^^^289^306^return true;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] processHook [RETURN_TYPE] boolean   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  Set  FORBIDDEN_TYPES  boolean  elseHasSideEffects  thenHasSideEffects  SideEffectAccumulator  accumulator  Node  condition  elseBranch  ifBranch  node  
[BugLab_Wrong_Literal]^return true;^302^^^^^289^306^return false;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] processHook [RETURN_TYPE] boolean   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  Set  FORBIDDEN_TYPES  boolean  elseHasSideEffects  thenHasSideEffects  SideEffectAccumulator  accumulator  Node  condition  elseBranch  ifBranch  node  
[BugLab_Variable_Misuse]^accumulator.keepSimplifiedHookExpression ( ifBranch, thenHasSideEffects, elseHasSideEffects ) ;^300^301^^^^289^306^accumulator.keepSimplifiedHookExpression ( node, thenHasSideEffects, elseHasSideEffects ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] processHook [RETURN_TYPE] boolean   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  Set  FORBIDDEN_TYPES  boolean  elseHasSideEffects  thenHasSideEffects  SideEffectAccumulator  accumulator  Node  condition  elseBranch  ifBranch  node  
[BugLab_Argument_Swapping]^accumulator.keepSimplifiedHookExpression ( thenHasSideEffects, node, elseHasSideEffects ) ;^300^301^^^^289^306^accumulator.keepSimplifiedHookExpression ( node, thenHasSideEffects, elseHasSideEffects ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] processHook [RETURN_TYPE] boolean   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  Set  FORBIDDEN_TYPES  boolean  elseHasSideEffects  thenHasSideEffects  SideEffectAccumulator  accumulator  Node  condition  elseBranch  ifBranch  node  
[BugLab_Argument_Swapping]^accumulator.keepSimplifiedHookExpression ( node, elseHasSideEffects, thenHasSideEffects ) ;^300^301^^^^289^306^accumulator.keepSimplifiedHookExpression ( node, thenHasSideEffects, elseHasSideEffects ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] processHook [RETURN_TYPE] boolean   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  Set  FORBIDDEN_TYPES  boolean  elseHasSideEffects  thenHasSideEffects  SideEffectAccumulator  accumulator  Node  condition  elseBranch  ifBranch  node  
[BugLab_Argument_Swapping]^accumulator.keepSimplifiedHookExpression ( elseHasSideEffects, thenHasSideEffects, node ) ;^300^301^^^^289^306^accumulator.keepSimplifiedHookExpression ( node, thenHasSideEffects, elseHasSideEffects ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] processHook [RETURN_TYPE] boolean   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  Set  FORBIDDEN_TYPES  boolean  elseHasSideEffects  thenHasSideEffects  SideEffectAccumulator  accumulator  Node  condition  elseBranch  ifBranch  node  
[BugLab_Variable_Misuse]^accumulator.keepSimplifiedHookExpression ( node, thenHasSideEffects, thenHasSideEffects ) ;^300^301^^^^289^306^accumulator.keepSimplifiedHookExpression ( node, thenHasSideEffects, elseHasSideEffects ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] processHook [RETURN_TYPE] boolean   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  Set  FORBIDDEN_TYPES  boolean  elseHasSideEffects  thenHasSideEffects  SideEffectAccumulator  accumulator  Node  condition  elseBranch  ifBranch  node  
[BugLab_Variable_Misuse]^Preconditions.checkArgument ( functionName.getType (  )  == Token.CALL, "Expected: CALL, Got: " + Token.name ( node.getType (  )  )  ) ;^314^315^316^^^313^334^Preconditions.checkArgument ( node.getType (  )  == Token.CALL, "Expected: CALL, Got: " + Token.name ( node.getType (  )  )  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] processFunctionCall [RETURN_TYPE] boolean   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  Node  functionName  node  
[BugLab_Argument_Swapping]^Preconditions.checkArgument ( CALL.getType (  )  == Token.CALL, "Expected: node, Got: " + Token.name ( node.getType (  )  )  ) ;^314^315^316^^^313^334^Preconditions.checkArgument ( node.getType (  )  == Token.CALL, "Expected: CALL, Got: " + Token.name ( node.getType (  )  )  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] processFunctionCall [RETURN_TYPE] boolean   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  Node  functionName  node  
[BugLab_Wrong_Operator]^Preconditions.checkArgument ( node.getType (  )  < Token.CALL, "Expected: CALL, Got: " + Token.name ( node.getType (  )  )  ) ;^314^315^316^^^313^334^Preconditions.checkArgument ( node.getType (  )  == Token.CALL, "Expected: CALL, Got: " + Token.name ( node.getType (  )  )  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] processFunctionCall [RETURN_TYPE] boolean   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  Node  functionName  node  
[BugLab_Wrong_Operator]^Preconditions.checkArgument ( node.getType (  <=  )  == Token.CALL, "Expected: CALL, Got: " + Token.name ( node.getType (  )  )  ) ;^314^315^316^^^313^334^Preconditions.checkArgument ( node.getType (  )  == Token.CALL, "Expected: CALL, Got: " + Token.name ( node.getType (  )  )  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] processFunctionCall [RETURN_TYPE] boolean   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  Node  functionName  node  
[BugLab_Variable_Misuse]^node.getType (  )  == Token.CALL, "Expected: CALL, Got: " + Token.name ( functionName.getType (  )  )  ) ;^315^316^^^^313^334^node.getType (  )  == Token.CALL, "Expected: CALL, Got: " + Token.name ( node.getType (  )  )  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] processFunctionCall [RETURN_TYPE] boolean   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  Node  functionName  node  
[BugLab_Variable_Misuse]^"Expected: CALL, Got: " + Token.name ( functionName.getType (  )  )  ) ;^316^^^^^313^334^"Expected: CALL, Got: " + Token.name ( node.getType (  )  )  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] processFunctionCall [RETURN_TYPE] boolean   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  Node  functionName  node  
[BugLab_Variable_Misuse]^Node functionName = functionName.getFirstChild (  ) ;^320^^^^^313^334^Node functionName = node.getFirstChild (  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] processFunctionCall [RETURN_TYPE] boolean   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  Node  functionName  node  
[BugLab_Wrong_Operator]^if  ( NodeUtil.isName ( functionName )  && NodeUtil.isGetProp ( functionName )  )  {^321^^^^^313^334^if  ( NodeUtil.isName ( functionName )  || NodeUtil.isGetProp ( functionName )  )  {^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] processFunctionCall [RETURN_TYPE] boolean   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  Node  functionName  node  
[BugLab_Wrong_Operator]^if  ( !accumulator.classDefiningCallsHaveSideEffects (  )  || isClassDefiningCall ( node )  )  {^322^323^^^^313^334^if  ( !accumulator.classDefiningCallsHaveSideEffects (  )  && isClassDefiningCall ( node )  )  {^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] processFunctionCall [RETURN_TYPE] boolean   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  Node  functionName  node  
[BugLab_Wrong_Literal]^return false;^324^^^^^313^334^return true;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] processFunctionCall [RETURN_TYPE] boolean   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  Node  functionName  node  
[BugLab_Variable_Misuse]^isClassDefiningCall ( functionName )  )  {^323^^^^^313^334^isClassDefiningCall ( node )  )  {^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] processFunctionCall [RETURN_TYPE] boolean   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  Node  functionName  node  
[BugLab_Variable_Misuse]^if  ( !accumulator.classDefiningCallsHaveSideEffects (  )  && isClassDefiningCall ( functionName )  )  {^322^323^^^^313^334^if  ( !accumulator.classDefiningCallsHaveSideEffects (  )  && isClassDefiningCall ( node )  )  {^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] processFunctionCall [RETURN_TYPE] boolean   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  Node  functionName  node  
[BugLab_Variable_Misuse]^if  ( NodeUtil.isName ( node )  || NodeUtil.isGetProp ( functionName )  )  {^321^^^^^313^334^if  ( NodeUtil.isName ( functionName )  || NodeUtil.isGetProp ( functionName )  )  {^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] processFunctionCall [RETURN_TYPE] boolean   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  Node  functionName  node  
[BugLab_Variable_Misuse]^if  ( !NodeUtil.functionCallHasSideEffects ( functionName )  )  {^328^^^^^313^334^if  ( !NodeUtil.functionCallHasSideEffects ( node )  )  {^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] processFunctionCall [RETURN_TYPE] boolean   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  Node  functionName  node  
[BugLab_Wrong_Literal]^return false;^329^^^^^313^334^return true;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] processFunctionCall [RETURN_TYPE] boolean   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  Node  functionName  node  
[BugLab_Variable_Misuse]^accumulator.keepSubTree ( functionName ) ;^332^^^^^313^334^accumulator.keepSubTree ( node ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] processFunctionCall [RETURN_TYPE] boolean   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  Node  functionName  node  
[BugLab_Wrong_Literal]^return true;^333^^^^^313^334^return false;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] processFunctionCall [RETURN_TYPE] boolean   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  Node  functionName  node  
[BugLab_Variable_Misuse]^Preconditions.checkArgument ( node.getType (  )  == Token.NEW, "Expected: 1, Got: " + Token.name ( node.getType (  )  )  ) ;^342^343^344^^^341^354^Preconditions.checkArgument ( node.getType (  )  == Token.NEW, "Expected: NEW, Got: " + Token.name ( node.getType (  )  )  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] processConstructorCall [RETURN_TYPE] boolean   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  Node  node  
[BugLab_Argument_Swapping]^Preconditions.checkArgument ( NEW.getType (  )  == Token.NEW, "Expected: node, Got: " + Token.name ( node.getType (  )  )  ) ;^342^343^344^^^341^354^Preconditions.checkArgument ( node.getType (  )  == Token.NEW, "Expected: NEW, Got: " + Token.name ( node.getType (  )  )  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] processConstructorCall [RETURN_TYPE] boolean   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  Node  node  
[BugLab_Wrong_Operator]^Preconditions.checkArgument ( node.getType (  )  >= Token.NEW, "Expected: NEW, Got: " + Token.name ( node.getType (  )  )  ) ;^342^343^344^^^341^354^Preconditions.checkArgument ( node.getType (  )  == Token.NEW, "Expected: NEW, Got: " + Token.name ( node.getType (  )  )  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] processConstructorCall [RETURN_TYPE] boolean   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  Node  node  
[BugLab_Wrong_Operator]^Preconditions.checkArgument ( node.getType (  !=  )  == Token.NEW, "Expected: NEW, Got: " + Token.name ( node.getType (  )  )  ) ;^342^343^344^^^341^354^Preconditions.checkArgument ( node.getType (  )  == Token.NEW, "Expected: NEW, Got: " + Token.name ( node.getType (  )  )  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] processConstructorCall [RETURN_TYPE] boolean   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  Node  node  
[BugLab_Wrong_Literal]^return false;^349^^^^^341^354^return true;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] processConstructorCall [RETURN_TYPE] boolean   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  Node  node  
[BugLab_Wrong_Literal]^return true;^353^^^^^341^354^return false;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] processConstructorCall [RETURN_TYPE] boolean   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  Node  node  
[BugLab_Wrong_Literal]^return false;^105^^^^^104^106^return true;^[CLASS] CopySideEffectSubexpressions  [METHOD] classDefiningCallsHaveSideEffects [RETURN_TYPE] boolean   [VARIABLES] AbstractCompiler  compiler  List  replacements  boolean  
[BugLab_Variable_Misuse]^Preconditions.checkArgument ( ( simplifiedRight.getType (  )  == Token.AND )  ||  ( original.getType (  )  == Token.OR ) , "Expected: AND or OR, Got: " + Token.name ( original.getType (  )  )  ) ;^115^116^117^^^114^126^Preconditions.checkArgument ( ( original.getType (  )  == Token.AND )  ||  ( original.getType (  )  == Token.OR ) , "Expected: AND or OR, Got: " + Token.name ( original.getType (  )  )  ) ;^[CLASS] CopySideEffectSubexpressions  [METHOD] keepSimplifiedShortCircuitExpression [RETURN_TYPE] void   Node original [VARIABLES] AbstractCompiler  compiler  List  replacements  boolean  Node  left  original  right  simplified  simplifiedRight  
[BugLab_Argument_Swapping]^Preconditions.checkArgument ( ( OR.getType (  )  == Token.AND )  ||  ( original.getType (  )  == Token.OR ) , "Expected: AND or original, Got: " + Token.name ( original.getType (  )  )  ) ;^115^116^117^^^114^126^Preconditions.checkArgument ( ( original.getType (  )  == Token.AND )  ||  ( original.getType (  )  == Token.OR ) , "Expected: AND or OR, Got: " + Token.name ( original.getType (  )  )  ) ;^[CLASS] CopySideEffectSubexpressions  [METHOD] keepSimplifiedShortCircuitExpression [RETURN_TYPE] void   Node original [VARIABLES] AbstractCompiler  compiler  List  replacements  boolean  Node  left  original  right  simplified  simplifiedRight  
[BugLab_Argument_Swapping]^Preconditions.checkArgument ( ( original.getType (  )  == Token.AND )  ||  ( original.getType (  )  == Token.OR ) , "Expected: OR or AND, Got: " + Token.name ( original.getType (  )  )  ) ;^115^116^117^^^114^126^Preconditions.checkArgument ( ( original.getType (  )  == Token.AND )  ||  ( original.getType (  )  == Token.OR ) , "Expected: AND or OR, Got: " + Token.name ( original.getType (  )  )  ) ;^[CLASS] CopySideEffectSubexpressions  [METHOD] keepSimplifiedShortCircuitExpression [RETURN_TYPE] void   Node original [VARIABLES] AbstractCompiler  compiler  List  replacements  boolean  Node  left  original  right  simplified  simplifiedRight  
[BugLab_Wrong_Operator]^Preconditions.checkArgument ( ( original.getType (  )  == Token.AND )  &&  ( original.getType (  )  == Token.OR ) , "Expected: AND or OR, Got: " + Token.name ( original.getType (  )  )  ) ;^115^116^117^^^114^126^Preconditions.checkArgument ( ( original.getType (  )  == Token.AND )  ||  ( original.getType (  )  == Token.OR ) , "Expected: AND or OR, Got: " + Token.name ( original.getType (  )  )  ) ;^[CLASS] CopySideEffectSubexpressions  [METHOD] keepSimplifiedShortCircuitExpression [RETURN_TYPE] void   Node original [VARIABLES] AbstractCompiler  compiler  List  replacements  boolean  Node  left  original  right  simplified  simplifiedRight  
[BugLab_Wrong_Operator]^Preconditions.checkArgument ( ( original.getType (  )  >= Token.AND )  ||  ( original.getType (  )  == Token.OR ) , "Expected: AND or OR, Got: " + Token.name ( original.getType (  )  )  ) ;^115^116^117^^^114^126^Preconditions.checkArgument ( ( original.getType (  )  == Token.AND )  ||  ( original.getType (  )  == Token.OR ) , "Expected: AND or OR, Got: " + Token.name ( original.getType (  )  )  ) ;^[CLASS] CopySideEffectSubexpressions  [METHOD] keepSimplifiedShortCircuitExpression [RETURN_TYPE] void   Node original [VARIABLES] AbstractCompiler  compiler  List  replacements  boolean  Node  left  original  right  simplified  simplifiedRight  
[BugLab_Wrong_Operator]^Preconditions.checkArgument ( ( original.getType (  )  != Token.AND )  ||  ( original.getType (  )  == Token.OR ) , "Expected: AND or OR, Got: " + Token.name ( original.getType (  )  )  ) ;^115^116^117^^^114^126^Preconditions.checkArgument ( ( original.getType (  )  == Token.AND )  ||  ( original.getType (  )  == Token.OR ) , "Expected: AND or OR, Got: " + Token.name ( original.getType (  )  )  ) ;^[CLASS] CopySideEffectSubexpressions  [METHOD] keepSimplifiedShortCircuitExpression [RETURN_TYPE] void   Node original [VARIABLES] AbstractCompiler  compiler  List  replacements  boolean  Node  left  original  right  simplified  simplifiedRight  
[BugLab_Wrong_Operator]^Preconditions.checkArgument ( ( original.getType (  ==  )  == Token.AND )  ||  ( original.getType (  )  == Token.OR ) , "Expected: AND or OR, Got: " + Token.name ( original.getType (  )  )  ) ;^115^116^117^^^114^126^Preconditions.checkArgument ( ( original.getType (  )  == Token.AND )  ||  ( original.getType (  )  == Token.OR ) , "Expected: AND or OR, Got: " + Token.name ( original.getType (  )  )  ) ;^[CLASS] CopySideEffectSubexpressions  [METHOD] keepSimplifiedShortCircuitExpression [RETURN_TYPE] void   Node original [VARIABLES] AbstractCompiler  compiler  List  replacements  boolean  Node  left  original  right  simplified  simplifiedRight  
[BugLab_Variable_Misuse]^( simplifiedRight.getType (  )  == Token.AND )  ||  ( original.getType (  )  == Token.OR ) , "Expected: AND or OR, Got: " + Token.name ( original.getType (  )  )  ) ;^116^117^^^^114^126^( original.getType (  )  == Token.AND )  ||  ( original.getType (  )  == Token.OR ) , "Expected: AND or OR, Got: " + Token.name ( original.getType (  )  )  ) ;^[CLASS] CopySideEffectSubexpressions  [METHOD] keepSimplifiedShortCircuitExpression [RETURN_TYPE] void   Node original [VARIABLES] AbstractCompiler  compiler  List  replacements  boolean  Node  left  original  right  simplified  simplifiedRight  
[BugLab_Variable_Misuse]^"Expected: AND or OR, Got: " + Token.name ( simplifiedRight.getType (  )  )  ) ;^117^^^^^114^126^"Expected: AND or OR, Got: " + Token.name ( original.getType (  )  )  ) ;^[CLASS] CopySideEffectSubexpressions  [METHOD] keepSimplifiedShortCircuitExpression [RETURN_TYPE] void   Node original [VARIABLES] AbstractCompiler  compiler  List  replacements  boolean  Node  left  original  right  simplified  simplifiedRight  
[BugLab_Variable_Misuse]^Node left = simplifiedRight.getFirstChild (  ) ;^118^^^^^114^126^Node left = original.getFirstChild (  ) ;^[CLASS] CopySideEffectSubexpressions  [METHOD] keepSimplifiedShortCircuitExpression [RETURN_TYPE] void   Node original [VARIABLES] AbstractCompiler  compiler  List  replacements  boolean  Node  left  original  right  simplified  simplifiedRight  
[BugLab_Variable_Misuse]^Node right = simplifiedRight.getNext (  ) ;^119^^^^^114^126^Node right = left.getNext (  ) ;^[CLASS] CopySideEffectSubexpressions  [METHOD] keepSimplifiedShortCircuitExpression [RETURN_TYPE] void   Node original [VARIABLES] AbstractCompiler  compiler  List  replacements  boolean  Node  left  original  right  simplified  simplifiedRight  
[BugLab_Variable_Misuse]^Node right = simplified.getNext (  ) ;^119^^^^^114^126^Node right = left.getNext (  ) ;^[CLASS] CopySideEffectSubexpressions  [METHOD] keepSimplifiedShortCircuitExpression [RETURN_TYPE] void   Node original [VARIABLES] AbstractCompiler  compiler  List  replacements  boolean  Node  left  original  right  simplified  simplifiedRight  
[BugLab_Variable_Misuse]^Node simplifiedRight = simplifyShortCircuitBranch ( simplified ) ;^120^^^^^114^126^Node simplifiedRight = simplifyShortCircuitBranch ( right ) ;^[CLASS] CopySideEffectSubexpressions  [METHOD] keepSimplifiedShortCircuitExpression [RETURN_TYPE] void   Node original [VARIABLES] AbstractCompiler  compiler  List  replacements  boolean  Node  left  original  right  simplified  simplifiedRight  
[BugLab_Variable_Misuse]^Node simplified = simplifiedRight.cloneNode (  ) ;^122^^^^^114^126^Node simplified = original.cloneNode (  ) ;^[CLASS] CopySideEffectSubexpressions  [METHOD] keepSimplifiedShortCircuitExpression [RETURN_TYPE] void   Node original [VARIABLES] AbstractCompiler  compiler  List  replacements  boolean  Node  left  original  right  simplified  simplifiedRight  
[BugLab_Variable_Misuse]^simplified.addChildToBack ( simplifiedRight.cloneTree (  )  ) ;^123^^^^^114^126^simplified.addChildToBack ( left.cloneTree (  )  ) ;^[CLASS] CopySideEffectSubexpressions  [METHOD] keepSimplifiedShortCircuitExpression [RETURN_TYPE] void   Node original [VARIABLES] AbstractCompiler  compiler  List  replacements  boolean  Node  left  original  right  simplified  simplifiedRight  
[BugLab_Variable_Misuse]^simplified.addChildToBack ( rightRight ) ;^124^^^^^114^126^simplified.addChildToBack ( simplifiedRight ) ;^[CLASS] CopySideEffectSubexpressions  [METHOD] keepSimplifiedShortCircuitExpression [RETURN_TYPE] void   Node original [VARIABLES] AbstractCompiler  compiler  List  replacements  boolean  Node  left  original  right  simplified  simplifiedRight  
[BugLab_Argument_Swapping]^simplified.addChildToBack ( simplifiedRightRight ) ;^124^^^^^114^126^simplified.addChildToBack ( simplifiedRight ) ;^[CLASS] CopySideEffectSubexpressions  [METHOD] keepSimplifiedShortCircuitExpression [RETURN_TYPE] void   Node original [VARIABLES] AbstractCompiler  compiler  List  replacements  boolean  Node  left  original  right  simplified  simplifiedRight  
[BugLab_Argument_Swapping]^simplified.addChildToBack ( simplified ) ;^124^^^^^114^126^simplified.addChildToBack ( simplifiedRight ) ;^[CLASS] CopySideEffectSubexpressions  [METHOD] keepSimplifiedShortCircuitExpression [RETURN_TYPE] void   Node original [VARIABLES] AbstractCompiler  compiler  List  replacements  boolean  Node  left  original  right  simplified  simplifiedRight  
[BugLab_Variable_Misuse]^replacements.add ( simplifiedRight ) ;^125^^^^^114^126^replacements.add ( simplified ) ;^[CLASS] CopySideEffectSubexpressions  [METHOD] keepSimplifiedShortCircuitExpression [RETURN_TYPE] void   Node original [VARIABLES] AbstractCompiler  compiler  List  replacements  boolean  Node  left  original  right  simplified  simplifiedRight  
[BugLab_Variable_Misuse]^Preconditions.checkArgument ( simplified.getType (  )  == Token.HOOK, "Expected: HOOK, Got: " + Token.name ( hook.getType (  )  )  ) ;^132^133^134^^^129^154^Preconditions.checkArgument ( hook.getType (  )  == Token.HOOK, "Expected: HOOK, Got: " + Token.name ( hook.getType (  )  )  ) ;^[CLASS] CopySideEffectSubexpressions  [METHOD] keepSimplifiedHookExpression [RETURN_TYPE] void   Node hook boolean thenHasSideEffects boolean elseHasSideEffects [VARIABLES] AbstractCompiler  compiler  List  replacements  boolean  elseHasSideEffects  thenHasSideEffects  int  type  Node  body  condition  elseBranch  hook  simplified  thenBranch  
[BugLab_Argument_Swapping]^Preconditions.checkArgument ( HOOK.getType (  )  == Token.HOOK, "Expected: hook, Got: " + Token.name ( hook.getType (  )  )  ) ;^132^133^134^^^129^154^Preconditions.checkArgument ( hook.getType (  )  == Token.HOOK, "Expected: HOOK, Got: " + Token.name ( hook.getType (  )  )  ) ;^[CLASS] CopySideEffectSubexpressions  [METHOD] keepSimplifiedHookExpression [RETURN_TYPE] void   Node hook boolean thenHasSideEffects boolean elseHasSideEffects [VARIABLES] AbstractCompiler  compiler  List  replacements  boolean  elseHasSideEffects  thenHasSideEffects  int  type  Node  body  condition  elseBranch  hook  simplified  thenBranch  
[BugLab_Wrong_Operator]^Preconditions.checkArgument ( hook.getType (  )  != Token.HOOK, "Expected: HOOK, Got: " + Token.name ( hook.getType (  )  )  ) ;^132^133^134^^^129^154^Preconditions.checkArgument ( hook.getType (  )  == Token.HOOK, "Expected: HOOK, Got: " + Token.name ( hook.getType (  )  )  ) ;^[CLASS] CopySideEffectSubexpressions  [METHOD] keepSimplifiedHookExpression [RETURN_TYPE] void   Node hook boolean thenHasSideEffects boolean elseHasSideEffects [VARIABLES] AbstractCompiler  compiler  List  replacements  boolean  elseHasSideEffects  thenHasSideEffects  int  type  Node  body  condition  elseBranch  hook  simplified  thenBranch  
[BugLab_Wrong_Operator]^Preconditions.checkArgument ( hook.getType (  &  )  == Token.HOOK, "Expected: HOOK, Got: " + Token.name ( hook.getType (  )  )  ) ;^132^133^134^^^129^154^Preconditions.checkArgument ( hook.getType (  )  == Token.HOOK, "Expected: HOOK, Got: " + Token.name ( hook.getType (  )  )  ) ;^[CLASS] CopySideEffectSubexpressions  [METHOD] keepSimplifiedHookExpression [RETURN_TYPE] void   Node hook boolean thenHasSideEffects boolean elseHasSideEffects [VARIABLES] AbstractCompiler  compiler  List  replacements  boolean  elseHasSideEffects  thenHasSideEffects  int  type  Node  body  condition  elseBranch  hook  simplified  thenBranch  
[BugLab_Variable_Misuse]^hook.getType (  )  == Token.HOOK, "Expected: HOOK, Got: " + Token.name ( thenBranch.getType (  )  )  ) ;^133^134^^^^129^154^hook.getType (  )  == Token.HOOK, "Expected: HOOK, Got: " + Token.name ( hook.getType (  )  )  ) ;^[CLASS] CopySideEffectSubexpressions  [METHOD] keepSimplifiedHookExpression [RETURN_TYPE] void   Node hook boolean thenHasSideEffects boolean elseHasSideEffects [VARIABLES] AbstractCompiler  compiler  List  replacements  boolean  elseHasSideEffects  thenHasSideEffects  int  type  Node  body  condition  elseBranch  hook  simplified  thenBranch  
[BugLab_Variable_Misuse]^"Expected: HOOK, Got: " + Token.name ( simplified.getType (  )  )  ) ;^134^^^^^129^154^"Expected: HOOK, Got: " + Token.name ( hook.getType (  )  )  ) ;^[CLASS] CopySideEffectSubexpressions  [METHOD] keepSimplifiedHookExpression [RETURN_TYPE] void   Node hook boolean thenHasSideEffects boolean elseHasSideEffects [VARIABLES] AbstractCompiler  compiler  List  replacements  boolean  elseHasSideEffects  thenHasSideEffects  int  type  Node  body  condition  elseBranch  hook  simplified  thenBranch  
[BugLab_Variable_Misuse]^"Expected: HOOK, Got: " + Token.name ( thenBranch.getType (  )  )  ) ;^134^^^^^129^154^"Expected: HOOK, Got: " + Token.name ( hook.getType (  )  )  ) ;^[CLASS] CopySideEffectSubexpressions  [METHOD] keepSimplifiedHookExpression [RETURN_TYPE] void   Node hook boolean thenHasSideEffects boolean elseHasSideEffects [VARIABLES] AbstractCompiler  compiler  List  replacements  boolean  elseHasSideEffects  thenHasSideEffects  int  type  Node  body  condition  elseBranch  hook  simplified  thenBranch  
[BugLab_Variable_Misuse]^Node condition = thenBranch.getFirstChild (  ) ;^135^^^^^129^154^Node condition = hook.getFirstChild (  ) ;^[CLASS] CopySideEffectSubexpressions  [METHOD] keepSimplifiedHookExpression [RETURN_TYPE] void   Node hook boolean thenHasSideEffects boolean elseHasSideEffects [VARIABLES] AbstractCompiler  compiler  List  replacements  boolean  elseHasSideEffects  thenHasSideEffects  int  type  Node  body  condition  elseBranch  hook  simplified  thenBranch  
[BugLab_Variable_Misuse]^Node thenBranch = simplified.getNext (  ) ;^136^^^^^129^154^Node thenBranch = condition.getNext (  ) ;^[CLASS] CopySideEffectSubexpressions  [METHOD] keepSimplifiedHookExpression [RETURN_TYPE] void   Node hook boolean thenHasSideEffects boolean elseHasSideEffects [VARIABLES] AbstractCompiler  compiler  List  replacements  boolean  elseHasSideEffects  thenHasSideEffects  int  type  Node  body  condition  elseBranch  hook  simplified  thenBranch  
[BugLab_Variable_Misuse]^Node thenBranch = thenBranch.getNext (  ) ;^136^^^^^129^154^Node thenBranch = condition.getNext (  ) ;^[CLASS] CopySideEffectSubexpressions  [METHOD] keepSimplifiedHookExpression [RETURN_TYPE] void   Node hook boolean thenHasSideEffects boolean elseHasSideEffects [VARIABLES] AbstractCompiler  compiler  List  replacements  boolean  elseHasSideEffects  thenHasSideEffects  int  type  Node  body  condition  elseBranch  hook  simplified  thenBranch  
[BugLab_Variable_Misuse]^Node elseBranch = simplified.getNext (  ) ;^137^^^^^129^154^Node elseBranch = thenBranch.getNext (  ) ;^[CLASS] CopySideEffectSubexpressions  [METHOD] keepSimplifiedHookExpression [RETURN_TYPE] void   Node hook boolean thenHasSideEffects boolean elseHasSideEffects [VARIABLES] AbstractCompiler  compiler  List  replacements  boolean  elseHasSideEffects  thenHasSideEffects  int  type  Node  body  condition  elseBranch  hook  simplified  thenBranch  
[BugLab_Variable_Misuse]^Node elseBranch = hook.getNext (  ) ;^137^^^^^129^154^Node elseBranch = thenBranch.getNext (  ) ;^[CLASS] CopySideEffectSubexpressions  [METHOD] keepSimplifiedHookExpression [RETURN_TYPE] void   Node hook boolean thenHasSideEffects boolean elseHasSideEffects [VARIABLES] AbstractCompiler  compiler  List  replacements  boolean  elseHasSideEffects  thenHasSideEffects  int  type  Node  body  condition  elseBranch  hook  simplified  thenBranch  
[BugLab_Variable_Misuse]^if  ( elseHasSideEffects && elseHasSideEffects )  {^138^^^^^129^154^if  ( thenHasSideEffects && elseHasSideEffects )  {^[CLASS] CopySideEffectSubexpressions  [METHOD] keepSimplifiedHookExpression [RETURN_TYPE] void   Node hook boolean thenHasSideEffects boolean elseHasSideEffects [VARIABLES] AbstractCompiler  compiler  List  replacements  boolean  elseHasSideEffects  thenHasSideEffects  int  type  Node  body  condition  elseBranch  hook  simplified  thenBranch  
[BugLab_Variable_Misuse]^if  ( thenHasSideEffects && thenHasSideEffects )  {^138^^^^^129^154^if  ( thenHasSideEffects && elseHasSideEffects )  {^[CLASS] CopySideEffectSubexpressions  [METHOD] keepSimplifiedHookExpression [RETURN_TYPE] void   Node hook boolean thenHasSideEffects boolean elseHasSideEffects [VARIABLES] AbstractCompiler  compiler  List  replacements  boolean  elseHasSideEffects  thenHasSideEffects  int  type  Node  body  condition  elseBranch  hook  simplified  thenBranch  
[BugLab_Argument_Swapping]^if  ( elseHasSideEffects && thenHasSideEffects )  {^138^^^^^129^154^if  ( thenHasSideEffects && elseHasSideEffects )  {^[CLASS] CopySideEffectSubexpressions  [METHOD] keepSimplifiedHookExpression [RETURN_TYPE] void   Node hook boolean thenHasSideEffects boolean elseHasSideEffects [VARIABLES] AbstractCompiler  compiler  List  replacements  boolean  elseHasSideEffects  thenHasSideEffects  int  type  Node  body  condition  elseBranch  hook  simplified  thenBranch  
[BugLab_Wrong_Operator]^if  ( thenHasSideEffects || elseHasSideEffects )  {^138^^^^^129^154^if  ( thenHasSideEffects && elseHasSideEffects )  {^[CLASS] CopySideEffectSubexpressions  [METHOD] keepSimplifiedHookExpression [RETURN_TYPE] void   Node hook boolean thenHasSideEffects boolean elseHasSideEffects [VARIABLES] AbstractCompiler  compiler  List  replacements  boolean  elseHasSideEffects  thenHasSideEffects  int  type  Node  body  condition  elseBranch  hook  simplified  thenBranch  
[BugLab_Variable_Misuse]^} else if  ( elseHasSideEffects || elseHasSideEffects )  {^144^^^^^129^154^} else if  ( thenHasSideEffects || elseHasSideEffects )  {^[CLASS] CopySideEffectSubexpressions  [METHOD] keepSimplifiedHookExpression [RETURN_TYPE] void   Node hook boolean thenHasSideEffects boolean elseHasSideEffects [VARIABLES] AbstractCompiler  compiler  List  replacements  boolean  elseHasSideEffects  thenHasSideEffects  int  type  Node  body  condition  elseBranch  hook  simplified  thenBranch  
[BugLab_Variable_Misuse]^} else if  ( thenHasSideEffects || thenHasSideEffects )  {^144^^^^^129^154^} else if  ( thenHasSideEffects || elseHasSideEffects )  {^[CLASS] CopySideEffectSubexpressions  [METHOD] keepSimplifiedHookExpression [RETURN_TYPE] void   Node hook boolean thenHasSideEffects boolean elseHasSideEffects [VARIABLES] AbstractCompiler  compiler  List  replacements  boolean  elseHasSideEffects  thenHasSideEffects  int  type  Node  body  condition  elseBranch  hook  simplified  thenBranch  
[BugLab_Argument_Swapping]^} else if  ( elseHasSideEffects || thenHasSideEffects )  {^144^^^^^129^154^} else if  ( thenHasSideEffects || elseHasSideEffects )  {^[CLASS] CopySideEffectSubexpressions  [METHOD] keepSimplifiedHookExpression [RETURN_TYPE] void   Node hook boolean thenHasSideEffects boolean elseHasSideEffects [VARIABLES] AbstractCompiler  compiler  List  replacements  boolean  elseHasSideEffects  thenHasSideEffects  int  type  Node  body  condition  elseBranch  hook  simplified  thenBranch  
[BugLab_Wrong_Operator]^} else if  ( thenHasSideEffects && elseHasSideEffects )  {^144^^^^^129^154^} else if  ( thenHasSideEffects || elseHasSideEffects )  {^[CLASS] CopySideEffectSubexpressions  [METHOD] keepSimplifiedHookExpression [RETURN_TYPE] void   Node hook boolean thenHasSideEffects boolean elseHasSideEffects [VARIABLES] AbstractCompiler  compiler  List  replacements  boolean  elseHasSideEffects  thenHasSideEffects  int  type  Node  body  condition  elseBranch  hook  simplified  thenBranch  
[BugLab_Variable_Misuse]^Node simplified = new Node ( type, thenBranch.cloneTree (  ) , simplifyShortCircuitBranch ( body )  ) ;^147^148^^^^129^154^Node simplified = new Node ( type, condition.cloneTree (  ) , simplifyShortCircuitBranch ( body )  ) ;^[CLASS] CopySideEffectSubexpressions  [METHOD] keepSimplifiedHookExpression [RETURN_TYPE] void   Node hook boolean thenHasSideEffects boolean elseHasSideEffects [VARIABLES] AbstractCompiler  compiler  List  replacements  boolean  elseHasSideEffects  thenHasSideEffects  int  type  Node  body  condition  elseBranch  hook  simplified  thenBranch  
[BugLab_Variable_Misuse]^Node simplified = new Node ( type, condition.cloneTree (  ) , simplifyShortCircuitBranch ( thenBranch )  ) ;^147^148^^^^129^154^Node simplified = new Node ( type, condition.cloneTree (  ) , simplifyShortCircuitBranch ( body )  ) ;^[CLASS] CopySideEffectSubexpressions  [METHOD] keepSimplifiedHookExpression [RETURN_TYPE] void   Node hook boolean thenHasSideEffects boolean elseHasSideEffects [VARIABLES] AbstractCompiler  compiler  List  replacements  boolean  elseHasSideEffects  thenHasSideEffects  int  type  Node  body  condition  elseBranch  hook  simplified  thenBranch  
[BugLab_Argument_Swapping]^Node simplified = new Node ( body, condition.cloneTree (  ) , simplifyShortCircuitBranch ( type )  ) ;^147^148^^^^129^154^Node simplified = new Node ( type, condition.cloneTree (  ) , simplifyShortCircuitBranch ( body )  ) ;^[CLASS] CopySideEffectSubexpressions  [METHOD] keepSimplifiedHookExpression [RETURN_TYPE] void   Node hook boolean thenHasSideEffects boolean elseHasSideEffects [VARIABLES] AbstractCompiler  compiler  List  replacements  boolean  elseHasSideEffects  thenHasSideEffects  int  type  Node  body  condition  elseBranch  hook  simplified  thenBranch  
[BugLab_Argument_Swapping]^Node simplified = new Node ( condition, type.cloneTree (  ) , simplifyShortCircuitBranch ( body )  ) ;^147^148^^^^129^154^Node simplified = new Node ( type, condition.cloneTree (  ) , simplifyShortCircuitBranch ( body )  ) ;^[CLASS] CopySideEffectSubexpressions  [METHOD] keepSimplifiedHookExpression [RETURN_TYPE] void   Node hook boolean thenHasSideEffects boolean elseHasSideEffects [VARIABLES] AbstractCompiler  compiler  List  replacements  boolean  elseHasSideEffects  thenHasSideEffects  int  type  Node  body  condition  elseBranch  hook  simplified  thenBranch  
[BugLab_Argument_Swapping]^Node simplified = new Node ( type, body.cloneTree (  ) , simplifyShortCircuitBranch ( condition )  ) ;^147^148^^^^129^154^Node simplified = new Node ( type, condition.cloneTree (  ) , simplifyShortCircuitBranch ( body )  ) ;^[CLASS] CopySideEffectSubexpressions  [METHOD] keepSimplifiedHookExpression [RETURN_TYPE] void   Node hook boolean thenHasSideEffects boolean elseHasSideEffects [VARIABLES] AbstractCompiler  compiler  List  replacements  boolean  elseHasSideEffects  thenHasSideEffects  int  type  Node  body  condition  elseBranch  hook  simplified  thenBranch  
[BugLab_Variable_Misuse]^int type = elseHasSideEffects ? Token.AND : Token.OR;^145^^^^^129^154^int type = thenHasSideEffects ? Token.AND : Token.OR;^[CLASS] CopySideEffectSubexpressions  [METHOD] keepSimplifiedHookExpression [RETURN_TYPE] void   Node hook boolean thenHasSideEffects boolean elseHasSideEffects [VARIABLES] AbstractCompiler  compiler  List  replacements  boolean  elseHasSideEffects  thenHasSideEffects  int  type  Node  body  condition  elseBranch  hook  simplified  thenBranch  
[BugLab_Variable_Misuse]^int type = thenHasSideEffects ? Token.4 : Token.OR;^145^^^^^129^154^int type = thenHasSideEffects ? Token.AND : Token.OR;^[CLASS] CopySideEffectSubexpressions  [METHOD] keepSimplifiedHookExpression [RETURN_TYPE] void   Node hook boolean thenHasSideEffects boolean elseHasSideEffects [VARIABLES] AbstractCompiler  compiler  List  replacements  boolean  elseHasSideEffects  thenHasSideEffects  int  type  Node  body  condition  elseBranch  hook  simplified  thenBranch  
[BugLab_Variable_Misuse]^Node body = elseHasSideEffects ? thenBranch : elseBranch;^146^^^^^129^154^Node body = thenHasSideEffects ? thenBranch : elseBranch;^[CLASS] CopySideEffectSubexpressions  [METHOD] keepSimplifiedHookExpression [RETURN_TYPE] void   Node hook boolean thenHasSideEffects boolean elseHasSideEffects [VARIABLES] AbstractCompiler  compiler  List  replacements  boolean  elseHasSideEffects  thenHasSideEffects  int  type  Node  body  condition  elseBranch  hook  simplified  thenBranch  
[BugLab_Variable_Misuse]^Node body = thenHasSideEffects ? simplified : elseBranch;^146^^^^^129^154^Node body = thenHasSideEffects ? thenBranch : elseBranch;^[CLASS] CopySideEffectSubexpressions  [METHOD] keepSimplifiedHookExpression [RETURN_TYPE] void   Node hook boolean thenHasSideEffects boolean elseHasSideEffects [VARIABLES] AbstractCompiler  compiler  List  replacements  boolean  elseHasSideEffects  thenHasSideEffects  int  type  Node  body  condition  elseBranch  hook  simplified  thenBranch  
[BugLab_Variable_Misuse]^Node body = thenHasSideEffects ? thenBranch : thenBranch;^146^^^^^129^154^Node body = thenHasSideEffects ? thenBranch : elseBranch;^[CLASS] CopySideEffectSubexpressions  [METHOD] keepSimplifiedHookExpression [RETURN_TYPE] void   Node hook boolean thenHasSideEffects boolean elseHasSideEffects [VARIABLES] AbstractCompiler  compiler  List  replacements  boolean  elseHasSideEffects  thenHasSideEffects  int  type  Node  body  condition  elseBranch  hook  simplified  thenBranch  
[BugLab_Argument_Swapping]^Node body = elseBranch ? thenBranch : thenHasSideEffects;^146^^^^^129^154^Node body = thenHasSideEffects ? thenBranch : elseBranch;^[CLASS] CopySideEffectSubexpressions  [METHOD] keepSimplifiedHookExpression [RETURN_TYPE] void   Node hook boolean thenHasSideEffects boolean elseHasSideEffects [VARIABLES] AbstractCompiler  compiler  List  replacements  boolean  elseHasSideEffects  thenHasSideEffects  int  type  Node  body  condition  elseBranch  hook  simplified  thenBranch  
[BugLab_Argument_Swapping]^Node body = thenBranch ? thenHasSideEffects : elseBranch;^146^^^^^129^154^Node body = thenHasSideEffects ? thenBranch : elseBranch;^[CLASS] CopySideEffectSubexpressions  [METHOD] keepSimplifiedHookExpression [RETURN_TYPE] void   Node hook boolean thenHasSideEffects boolean elseHasSideEffects [VARIABLES] AbstractCompiler  compiler  List  replacements  boolean  elseHasSideEffects  thenHasSideEffects  int  type  Node  body  condition  elseBranch  hook  simplified  thenBranch  
[BugLab_Argument_Swapping]^Node body = thenHasSideEffects ? elseBranch : thenBranch;^146^^^^^129^154^Node body = thenHasSideEffects ? thenBranch : elseBranch;^[CLASS] CopySideEffectSubexpressions  [METHOD] keepSimplifiedHookExpression [RETURN_TYPE] void   Node hook boolean thenHasSideEffects boolean elseHasSideEffects [VARIABLES] AbstractCompiler  compiler  List  replacements  boolean  elseHasSideEffects  thenHasSideEffects  int  type  Node  body  condition  elseBranch  hook  simplified  thenBranch  
[BugLab_Variable_Misuse]^type, thenBranch.cloneTree (  ) , simplifyShortCircuitBranch ( body )  ) ;^148^^^^^129^154^type, condition.cloneTree (  ) , simplifyShortCircuitBranch ( body )  ) ;^[CLASS] CopySideEffectSubexpressions  [METHOD] keepSimplifiedHookExpression [RETURN_TYPE] void   Node hook boolean thenHasSideEffects boolean elseHasSideEffects [VARIABLES] AbstractCompiler  compiler  List  replacements  boolean  elseHasSideEffects  thenHasSideEffects  int  type  Node  body  condition  elseBranch  hook  simplified  thenBranch  
[BugLab_Variable_Misuse]^type, condition.cloneTree (  ) , simplifyShortCircuitBranch ( thenBranch )  ) ;^148^^^^^129^154^type, condition.cloneTree (  ) , simplifyShortCircuitBranch ( body )  ) ;^[CLASS] CopySideEffectSubexpressions  [METHOD] keepSimplifiedHookExpression [RETURN_TYPE] void   Node hook boolean thenHasSideEffects boolean elseHasSideEffects [VARIABLES] AbstractCompiler  compiler  List  replacements  boolean  elseHasSideEffects  thenHasSideEffects  int  type  Node  body  condition  elseBranch  hook  simplified  thenBranch  
[BugLab_Variable_Misuse]^replacements.add ( hook ) ;^149^^^^^129^154^replacements.add ( simplified ) ;^[CLASS] CopySideEffectSubexpressions  [METHOD] keepSimplifiedHookExpression [RETURN_TYPE] void   Node hook boolean thenHasSideEffects boolean elseHasSideEffects [VARIABLES] AbstractCompiler  compiler  List  replacements  boolean  elseHasSideEffects  thenHasSideEffects  int  type  Node  body  condition  elseBranch  hook  simplified  thenBranch  
[BugLab_Variable_Misuse]^replacements.add ( thenBranch ) ;^149^^^^^129^154^replacements.add ( simplified ) ;^[CLASS] CopySideEffectSubexpressions  [METHOD] keepSimplifiedHookExpression [RETURN_TYPE] void   Node hook boolean thenHasSideEffects boolean elseHasSideEffects [VARIABLES] AbstractCompiler  compiler  List  replacements  boolean  elseHasSideEffects  thenHasSideEffects  int  type  Node  body  condition  elseBranch  hook  simplified  thenBranch  
[BugLab_Variable_Misuse]^Node simplified = thenBranch.cloneNode (  ) ;^139^^^^^129^154^Node simplified = hook.cloneNode (  ) ;^[CLASS] CopySideEffectSubexpressions  [METHOD] keepSimplifiedHookExpression [RETURN_TYPE] void   Node hook boolean thenHasSideEffects boolean elseHasSideEffects [VARIABLES] AbstractCompiler  compiler  List  replacements  boolean  elseHasSideEffects  thenHasSideEffects  int  type  Node  body  condition  elseBranch  hook  simplified  thenBranch  
[BugLab_Variable_Misuse]^simplified.addChildToBack ( thenBranch.cloneTree (  )  ) ;^140^^^^^129^154^simplified.addChildToBack ( condition.cloneTree (  )  ) ;^[CLASS] CopySideEffectSubexpressions  [METHOD] keepSimplifiedHookExpression [RETURN_TYPE] void   Node hook boolean thenHasSideEffects boolean elseHasSideEffects [VARIABLES] AbstractCompiler  compiler  List  replacements  boolean  elseHasSideEffects  thenHasSideEffects  int  type  Node  body  condition  elseBranch  hook  simplified  thenBranch  
[BugLab_Variable_Misuse]^simplified.addChildToBack ( simplifyShortCircuitBranch ( hook )  ) ;^141^^^^^129^154^simplified.addChildToBack ( simplifyShortCircuitBranch ( thenBranch )  ) ;^[CLASS] CopySideEffectSubexpressions  [METHOD] keepSimplifiedHookExpression [RETURN_TYPE] void   Node hook boolean thenHasSideEffects boolean elseHasSideEffects [VARIABLES] AbstractCompiler  compiler  List  replacements  boolean  elseHasSideEffects  thenHasSideEffects  int  type  Node  body  condition  elseBranch  hook  simplified  thenBranch  
[BugLab_Variable_Misuse]^simplified.addChildToBack ( simplifyShortCircuitBranch ( simplified )  ) ;^141^^^^^129^154^simplified.addChildToBack ( simplifyShortCircuitBranch ( thenBranch )  ) ;^[CLASS] CopySideEffectSubexpressions  [METHOD] keepSimplifiedHookExpression [RETURN_TYPE] void   Node hook boolean thenHasSideEffects boolean elseHasSideEffects [VARIABLES] AbstractCompiler  compiler  List  replacements  boolean  elseHasSideEffects  thenHasSideEffects  int  type  Node  body  condition  elseBranch  hook  simplified  thenBranch  
[BugLab_Variable_Misuse]^simplified.addChildToBack ( simplifyShortCircuitBranch ( thenBranch )  ) ;^142^^^^^129^154^simplified.addChildToBack ( simplifyShortCircuitBranch ( elseBranch )  ) ;^[CLASS] CopySideEffectSubexpressions  [METHOD] keepSimplifiedHookExpression [RETURN_TYPE] void   Node hook boolean thenHasSideEffects boolean elseHasSideEffects [VARIABLES] AbstractCompiler  compiler  List  replacements  boolean  elseHasSideEffects  thenHasSideEffects  int  type  Node  body  condition  elseBranch  hook  simplified  thenBranch  
[BugLab_Variable_Misuse]^simplified.addChildToBack ( simplifyShortCircuitBranch ( simplified )  ) ;^142^^^^^129^154^simplified.addChildToBack ( simplifyShortCircuitBranch ( elseBranch )  ) ;^[CLASS] CopySideEffectSubexpressions  [METHOD] keepSimplifiedHookExpression [RETURN_TYPE] void   Node hook boolean thenHasSideEffects boolean elseHasSideEffects [VARIABLES] AbstractCompiler  compiler  List  replacements  boolean  elseHasSideEffects  thenHasSideEffects  int  type  Node  body  condition  elseBranch  hook  simplified  thenBranch  
[BugLab_Variable_Misuse]^replacements.add ( hook ) ;^143^^^^^129^154^replacements.add ( simplified ) ;^[CLASS] CopySideEffectSubexpressions  [METHOD] keepSimplifiedHookExpression [RETURN_TYPE] void   Node hook boolean thenHasSideEffects boolean elseHasSideEffects [VARIABLES] AbstractCompiler  compiler  List  replacements  boolean  elseHasSideEffects  thenHasSideEffects  int  type  Node  body  condition  elseBranch  hook  simplified  thenBranch  
[BugLab_Variable_Misuse]^type, simplified.cloneTree (  ) , simplifyShortCircuitBranch ( body )  ) ;^148^^^^^129^154^type, condition.cloneTree (  ) , simplifyShortCircuitBranch ( body )  ) ;^[CLASS] CopySideEffectSubexpressions  [METHOD] keepSimplifiedHookExpression [RETURN_TYPE] void   Node hook boolean thenHasSideEffects boolean elseHasSideEffects [VARIABLES] AbstractCompiler  compiler  List  replacements  boolean  elseHasSideEffects  thenHasSideEffects  int  type  Node  body  condition  elseBranch  hook  simplified  thenBranch  
[BugLab_Variable_Misuse]^type, condition.cloneTree (  ) , simplifyShortCircuitBranch ( simplified )  ) ;^148^^^^^129^154^type, condition.cloneTree (  ) , simplifyShortCircuitBranch ( body )  ) ;^[CLASS] CopySideEffectSubexpressions  [METHOD] keepSimplifiedHookExpression [RETURN_TYPE] void   Node hook boolean thenHasSideEffects boolean elseHasSideEffects [VARIABLES] AbstractCompiler  compiler  List  replacements  boolean  elseHasSideEffects  thenHasSideEffects  int  type  Node  body  condition  elseBranch  hook  simplified  thenBranch  
[BugLab_Argument_Swapping]^new GatherSideEffectSubexpressionsCallback ( parts, new CopySideEffectSubexpressions ( compiler, compiler )  )  ) ;^160^161^162^^^156^180^new GatherSideEffectSubexpressionsCallback ( compiler, new CopySideEffectSubexpressions ( compiler, parts )  )  ) ;^[CLASS] CopySideEffectSubexpressions  [METHOD] simplifyShortCircuitBranch [RETURN_TYPE] Node   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  boolean  Node  node  part  ret  
[BugLab_Argument_Swapping]^new CopySideEffectSubexpressions ( parts, compiler )  )  ) ;^162^^^^^156^180^new CopySideEffectSubexpressions ( compiler, parts )  )  ) ;^[CLASS] CopySideEffectSubexpressions  [METHOD] simplifyShortCircuitBranch [RETURN_TYPE] Node   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  boolean  Node  node  part  ret  
[BugLab_Variable_Misuse]^NodeTraversal.traverse ( compiler, ret, new GatherSideEffectSubexpressionsCallback ( compiler,^158^159^160^161^^156^180^NodeTraversal.traverse ( compiler, node, new GatherSideEffectSubexpressionsCallback ( compiler,^[CLASS] CopySideEffectSubexpressions  [METHOD] simplifyShortCircuitBranch [RETURN_TYPE] Node   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  boolean  Node  node  part  ret  
[BugLab_Variable_Misuse]^if  ( node != null )  {^166^^^^^156^180^if  ( ret != null )  {^[CLASS] CopySideEffectSubexpressions  [METHOD] simplifyShortCircuitBranch [RETURN_TYPE] Node   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  boolean  Node  node  part  ret  
[BugLab_Wrong_Operator]^if  ( ret == null )  {^166^^^^^156^180^if  ( ret != null )  {^[CLASS] CopySideEffectSubexpressions  [METHOD] simplifyShortCircuitBranch [RETURN_TYPE] Node   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  boolean  Node  node  part  ret  
[BugLab_Variable_Misuse]^ret = ret;^169^^^^^156^180^ret = part;^[CLASS] CopySideEffectSubexpressions  [METHOD] simplifyShortCircuitBranch [RETURN_TYPE] Node   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  boolean  Node  node  part  ret  
[BugLab_Variable_Misuse]^ret = new Node ( Token.COMMA, part, part ) ;^167^^^^^156^180^ret = new Node ( Token.COMMA, ret, part ) ;^[CLASS] CopySideEffectSubexpressions  [METHOD] simplifyShortCircuitBranch [RETURN_TYPE] Node   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  boolean  Node  node  part  ret  
[BugLab_Variable_Misuse]^ret = new Node ( Token.COMMA, ret, node ) ;^167^^^^^156^180^ret = new Node ( Token.COMMA, ret, part ) ;^[CLASS] CopySideEffectSubexpressions  [METHOD] simplifyShortCircuitBranch [RETURN_TYPE] Node   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  boolean  Node  node  part  ret  
[BugLab_Argument_Swapping]^ret = new Node ( Token.COMMA, part, ret ) ;^167^^^^^156^180^ret = new Node ( Token.COMMA, ret, part ) ;^[CLASS] CopySideEffectSubexpressions  [METHOD] simplifyShortCircuitBranch [RETURN_TYPE] Node   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  boolean  Node  node  part  ret  
[BugLab_Variable_Misuse]^ret = new Node ( Token.COMMA, node, part ) ;^167^^^^^156^180^ret = new Node ( Token.COMMA, ret, part ) ;^[CLASS] CopySideEffectSubexpressions  [METHOD] simplifyShortCircuitBranch [RETURN_TYPE] Node   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  boolean  Node  node  part  ret  
[BugLab_Variable_Misuse]^if  ( part == null )  {^173^^^^^156^180^if  ( ret == null )  {^[CLASS] CopySideEffectSubexpressions  [METHOD] simplifyShortCircuitBranch [RETURN_TYPE] Node   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  boolean  Node  node  part  ret  
[BugLab_Wrong_Operator]^if  ( ret != null )  {^173^^^^^156^180^if  ( ret == null )  {^[CLASS] CopySideEffectSubexpressions  [METHOD] simplifyShortCircuitBranch [RETURN_TYPE] Node   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  boolean  Node  node  part  ret  
[BugLab_Wrong_Operator]^throw new IllegalArgumentException ( "expected at least one side effect subexpression in short "  |  "circuit branch." ) ;^174^175^176^^^156^180^throw new IllegalArgumentException ( "expected at least one side effect subexpression in short " + "circuit branch." ) ;^[CLASS] CopySideEffectSubexpressions  [METHOD] simplifyShortCircuitBranch [RETURN_TYPE] Node   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  boolean  Node  node  part  ret  
[BugLab_Wrong_Operator]^throw new IllegalArgumentException ( "expected at least one side effect subexpression in short "  &&  "circuit branch." ) ;^174^175^176^^^156^180^throw new IllegalArgumentException ( "expected at least one side effect subexpression in short " + "circuit branch." ) ;^[CLASS] CopySideEffectSubexpressions  [METHOD] simplifyShortCircuitBranch [RETURN_TYPE] Node   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  boolean  Node  node  part  ret  
[BugLab_Wrong_Operator]^throw new IllegalArgumentException ( "expected at least one side effect subexpression in short "   instanceof   "circuit branch." ) ;^174^175^176^^^156^180^throw new IllegalArgumentException ( "expected at least one side effect subexpression in short " + "circuit branch." ) ;^[CLASS] CopySideEffectSubexpressions  [METHOD] simplifyShortCircuitBranch [RETURN_TYPE] Node   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  boolean  Node  node  part  ret  
[BugLab_Wrong_Operator]^throw new IllegalArgumentException ( "expected at least one side effect subexpression in short "  <=  "circuit branch." ) ;^174^175^176^^^156^180^throw new IllegalArgumentException ( "expected at least one side effect subexpression in short " + "circuit branch." ) ;^[CLASS] CopySideEffectSubexpressions  [METHOD] simplifyShortCircuitBranch [RETURN_TYPE] Node   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  boolean  Node  node  part  ret  
[BugLab_Variable_Misuse]^return part;^179^^^^^156^180^return ret;^[CLASS] CopySideEffectSubexpressions  [METHOD] simplifyShortCircuitBranch [RETURN_TYPE] Node   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  boolean  Node  node  part  ret  
