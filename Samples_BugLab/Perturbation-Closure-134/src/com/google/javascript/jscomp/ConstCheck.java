[BugLab_Variable_Misuse]^NodeTraversal.traverse ( compiler, externs, this ) ;^58^^^^^57^59^NodeTraversal.traverse ( compiler, root, this ) ;^[CLASS] ConstCheck  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Set  initializedConstants  boolean  DiagnosticType  CONST_REASSIGNED_VALUE_ERROR  Node  externs  root  
[BugLab_Argument_Swapping]^NodeTraversal.traverse ( root, compiler, this ) ;^58^^^^^57^59^NodeTraversal.traverse ( compiler, root, this ) ;^[CLASS] ConstCheck  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Set  initializedConstants  boolean  DiagnosticType  CONST_REASSIGNED_VALUE_ERROR  Node  externs  root  
[BugLab_Variable_Misuse]^if  ( n != null && parent.getType (  )  == Token.VAR && n.hasChildren (  )  )  {^67^68^69^^^52^82^if  ( parent != null && parent.getType (  )  == Token.VAR && n.hasChildren (  )  )  {^[CLASS] ConstCheck  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  initializedConstants  boolean  NodeTraversal  t  DiagnosticType  CONST_REASSIGNED_VALUE_ERROR  Var  var  Node  lhs  n  parent  String  name  
[BugLab_Variable_Misuse]^if  ( parent != parentull && parent.getType (  )  == Token.VAR && n.hasChildren (  )  )  {^67^68^69^^^52^82^if  ( parent != null && parent.getType (  )  == Token.VAR && n.hasChildren (  )  )  {^[CLASS] ConstCheck  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  initializedConstants  boolean  NodeTraversal  t  DiagnosticType  CONST_REASSIGNED_VALUE_ERROR  Var  var  Node  lhs  n  parent  String  name  
[BugLab_Argument_Swapping]^if  ( n != parentull && parent.getType (  )  == Token.VAR && n.hasChildren (  )  )  {^67^68^69^^^52^82^if  ( parent != null && parent.getType (  )  == Token.VAR && n.hasChildren (  )  )  {^[CLASS] ConstCheck  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  initializedConstants  boolean  NodeTraversal  t  DiagnosticType  CONST_REASSIGNED_VALUE_ERROR  Var  var  Node  lhs  n  parent  String  name  
[BugLab_Wrong_Operator]^if  ( parent != null || parent.getType (  )  == Token.VAR && n.hasChildren (  )  )  {^67^68^69^^^52^82^if  ( parent != null && parent.getType (  )  == Token.VAR && n.hasChildren (  )  )  {^[CLASS] ConstCheck  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  initializedConstants  boolean  NodeTraversal  t  DiagnosticType  CONST_REASSIGNED_VALUE_ERROR  Var  var  Node  lhs  n  parent  String  name  
[BugLab_Wrong_Operator]^if  ( parent == null && parent.getType (  )  == Token.VAR && n.hasChildren (  )  )  {^67^68^69^^^52^82^if  ( parent != null && parent.getType (  )  == Token.VAR && n.hasChildren (  )  )  {^[CLASS] ConstCheck  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  initializedConstants  boolean  NodeTraversal  t  DiagnosticType  CONST_REASSIGNED_VALUE_ERROR  Var  var  Node  lhs  n  parent  String  name  
[BugLab_Wrong_Operator]^if  ( parent != null && parent.getType (  )  != Token.VAR && n.hasChildren (  )  )  {^67^68^69^^^52^82^if  ( parent != null && parent.getType (  )  == Token.VAR && n.hasChildren (  )  )  {^[CLASS] ConstCheck  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  initializedConstants  boolean  NodeTraversal  t  DiagnosticType  CONST_REASSIGNED_VALUE_ERROR  Var  var  Node  lhs  n  parent  String  name  
[BugLab_Variable_Misuse]^reportError ( t, parent, name ) ;^74^^^^^67^79^reportError ( t, n, name ) ;^[CLASS] ConstCheck  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  initializedConstants  boolean  NodeTraversal  t  DiagnosticType  CONST_REASSIGNED_VALUE_ERROR  Var  var  Node  lhs  n  parent  String  name  
[BugLab_Argument_Swapping]^reportError ( name, n, t ) ;^74^^^^^67^79^reportError ( t, n, name ) ;^[CLASS] ConstCheck  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  initializedConstants  boolean  NodeTraversal  t  DiagnosticType  CONST_REASSIGNED_VALUE_ERROR  Var  var  Node  lhs  n  parent  String  name  
[BugLab_Argument_Swapping]^reportError ( n, t, name ) ;^74^^^^^67^79^reportError ( t, n, name ) ;^[CLASS] ConstCheck  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  initializedConstants  boolean  NodeTraversal  t  DiagnosticType  CONST_REASSIGNED_VALUE_ERROR  Var  var  Node  lhs  n  parent  String  name  
[BugLab_Variable_Misuse]^if  ( initializedConstants.contains ( this )  )  {^73^^^^^67^79^if  ( initializedConstants.contains ( var )  )  {^[CLASS] ConstCheck  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  initializedConstants  boolean  NodeTraversal  t  DiagnosticType  CONST_REASSIGNED_VALUE_ERROR  Var  var  Node  lhs  n  parent  String  name  
[BugLab_Argument_Swapping]^if  ( var.contains ( initializedConstants )  )  {^73^^^^^67^79^if  ( initializedConstants.contains ( var )  )  {^[CLASS] ConstCheck  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  initializedConstants  boolean  NodeTraversal  t  DiagnosticType  CONST_REASSIGNED_VALUE_ERROR  Var  var  Node  lhs  n  parent  String  name  
[BugLab_Argument_Swapping]^reportError ( t, name, n ) ;^74^^^^^67^79^reportError ( t, n, name ) ;^[CLASS] ConstCheck  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  initializedConstants  boolean  NodeTraversal  t  DiagnosticType  CONST_REASSIGNED_VALUE_ERROR  Var  var  Node  lhs  n  parent  String  name  
[BugLab_Variable_Misuse]^initializedConstants.add ( 1 ) ;^76^^^^^67^79^initializedConstants.add ( var ) ;^[CLASS] ConstCheck  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  initializedConstants  boolean  NodeTraversal  t  DiagnosticType  CONST_REASSIGNED_VALUE_ERROR  Var  var  Node  lhs  n  parent  String  name  
[BugLab_Variable_Misuse]^String parentame = n.getString (  ) ;^70^^^^^67^79^String name = n.getString (  ) ;^[CLASS] ConstCheck  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  initializedConstants  boolean  NodeTraversal  t  DiagnosticType  CONST_REASSIGNED_VALUE_ERROR  Var  var  Node  lhs  n  parent  String  name  
[BugLab_Argument_Swapping]^Scope.Var var = name.getScope (  ) .getVar ( t ) ;^71^^^^^67^79^Scope.Var var = t.getScope (  ) .getVar ( name ) ;^[CLASS] ConstCheck  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  initializedConstants  boolean  NodeTraversal  t  DiagnosticType  CONST_REASSIGNED_VALUE_ERROR  Var  var  Node  lhs  n  parent  String  name  
[BugLab_Argument_Swapping]^reportError ( n, t, name ) ;^74^^^^^59^89^reportError ( t, n, name ) ;^[CLASS] ConstCheck  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  initializedConstants  boolean  NodeTraversal  t  DiagnosticType  CONST_REASSIGNED_VALUE_ERROR  Var  var  Node  lhs  n  parent  String  name  
[BugLab_Argument_Swapping]^reportError ( name, n, t ) ;^74^^^^^59^89^reportError ( t, n, name ) ;^[CLASS] ConstCheck  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  initializedConstants  boolean  NodeTraversal  t  DiagnosticType  CONST_REASSIGNED_VALUE_ERROR  Var  var  Node  lhs  n  parent  String  name  
[BugLab_Argument_Swapping]^if  ( var.contains ( initializedConstants )  )  {^73^^^^^58^88^if  ( initializedConstants.contains ( var )  )  {^[CLASS] ConstCheck  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  initializedConstants  boolean  NodeTraversal  t  DiagnosticType  CONST_REASSIGNED_VALUE_ERROR  Var  var  Node  lhs  n  parent  String  name  
[BugLab_Variable_Misuse]^reportError ( t, parent, name ) ;^74^^^^^59^89^reportError ( t, n, name ) ;^[CLASS] ConstCheck  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  initializedConstants  boolean  NodeTraversal  t  DiagnosticType  CONST_REASSIGNED_VALUE_ERROR  Var  var  Node  lhs  n  parent  String  name  
[BugLab_Argument_Swapping]^reportError ( t, name, n ) ;^74^^^^^59^89^reportError ( t, n, name ) ;^[CLASS] ConstCheck  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  initializedConstants  boolean  NodeTraversal  t  DiagnosticType  CONST_REASSIGNED_VALUE_ERROR  Var  var  Node  lhs  n  parent  String  name  
[BugLab_Variable_Misuse]^if  ( parent.getType (  )  == Token.NAME )  {^95^^^^^80^110^if  ( lhs.getType (  )  == Token.NAME )  {^[CLASS] ConstCheck  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  initializedConstants  boolean  NodeTraversal  t  DiagnosticType  CONST_REASSIGNED_VALUE_ERROR  Var  var  Node  lhs  n  parent  String  name  
[BugLab_Wrong_Operator]^if  ( lhs.getType (  )  >= Token.NAME )  {^95^^^^^80^110^if  ( lhs.getType (  )  == Token.NAME )  {^[CLASS] ConstCheck  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  initializedConstants  boolean  NodeTraversal  t  DiagnosticType  CONST_REASSIGNED_VALUE_ERROR  Var  var  Node  lhs  n  parent  String  name  
[BugLab_Argument_Swapping]^if  ( var.contains ( initializedConstants )  )  {^99^^^^^84^114^if  ( initializedConstants.contains ( var )  )  {^[CLASS] ConstCheck  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  initializedConstants  boolean  NodeTraversal  t  DiagnosticType  CONST_REASSIGNED_VALUE_ERROR  Var  var  Node  lhs  n  parent  String  name  
[BugLab_Variable_Misuse]^reportError ( t, parent, name ) ;^100^^^^^85^115^reportError ( t, n, name ) ;^[CLASS] ConstCheck  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  initializedConstants  boolean  NodeTraversal  t  DiagnosticType  CONST_REASSIGNED_VALUE_ERROR  Var  var  Node  lhs  n  parent  String  name  
[BugLab_Argument_Swapping]^reportError ( name, n, t ) ;^100^^^^^85^115^reportError ( t, n, name ) ;^[CLASS] ConstCheck  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  initializedConstants  boolean  NodeTraversal  t  DiagnosticType  CONST_REASSIGNED_VALUE_ERROR  Var  var  Node  lhs  n  parent  String  name  
[BugLab_Argument_Swapping]^reportError ( t, name, n ) ;^100^^^^^85^115^reportError ( t, n, name ) ;^[CLASS] ConstCheck  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  initializedConstants  boolean  NodeTraversal  t  DiagnosticType  CONST_REASSIGNED_VALUE_ERROR  Var  var  Node  lhs  n  parent  String  name  
[BugLab_Argument_Swapping]^reportError ( n, t, name ) ;^100^^^^^85^115^reportError ( t, n, name ) ;^[CLASS] ConstCheck  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  initializedConstants  boolean  NodeTraversal  t  DiagnosticType  CONST_REASSIGNED_VALUE_ERROR  Var  var  Node  lhs  n  parent  String  name  
[BugLab_Variable_Misuse]^String name = parent.getString (  ) ;^96^^^^^81^111^String name = lhs.getString (  ) ;^[CLASS] ConstCheck  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  initializedConstants  boolean  NodeTraversal  t  DiagnosticType  CONST_REASSIGNED_VALUE_ERROR  Var  var  Node  lhs  n  parent  String  name  
[BugLab_Argument_Swapping]^Scope.Var var = name.getScope (  ) .getVar ( t ) ;^97^^^^^82^112^Scope.Var var = t.getScope (  ) .getVar ( name ) ;^[CLASS] ConstCheck  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  initializedConstants  boolean  NodeTraversal  t  DiagnosticType  CONST_REASSIGNED_VALUE_ERROR  Var  var  Node  lhs  n  parent  String  name  
[BugLab_Variable_Misuse]^if  ( isConstant ( null )  )  {^98^^^^^83^113^if  ( isConstant ( var )  )  {^[CLASS] ConstCheck  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  initializedConstants  boolean  NodeTraversal  t  DiagnosticType  CONST_REASSIGNED_VALUE_ERROR  Var  var  Node  lhs  n  parent  String  name  
[BugLab_Variable_Misuse]^if  ( initializedConstants.contains ( null )  )  {^99^^^^^84^114^if  ( initializedConstants.contains ( var )  )  {^[CLASS] ConstCheck  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  initializedConstants  boolean  NodeTraversal  t  DiagnosticType  CONST_REASSIGNED_VALUE_ERROR  Var  var  Node  lhs  n  parent  String  name  
[BugLab_Variable_Misuse]^if  ( parent.getType (  )  == Token.NAME )  {^112^^^^^97^127^if  ( lhs.getType (  )  == Token.NAME )  {^[CLASS] ConstCheck  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  initializedConstants  boolean  NodeTraversal  t  DiagnosticType  CONST_REASSIGNED_VALUE_ERROR  Var  var  Node  lhs  n  parent  String  name  
[BugLab_Wrong_Operator]^if  ( lhs.getType (  )  != Token.NAME )  {^112^^^^^97^127^if  ( lhs.getType (  )  == Token.NAME )  {^[CLASS] ConstCheck  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  initializedConstants  boolean  NodeTraversal  t  DiagnosticType  CONST_REASSIGNED_VALUE_ERROR  Var  var  Node  lhs  n  parent  String  name  
[BugLab_Variable_Misuse]^if  ( isConstant ( 4 )  )  {^115^^^^^100^130^if  ( isConstant ( var )  )  {^[CLASS] ConstCheck  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  initializedConstants  boolean  NodeTraversal  t  DiagnosticType  CONST_REASSIGNED_VALUE_ERROR  Var  var  Node  lhs  n  parent  String  name  
[BugLab_Variable_Misuse]^reportError ( t, parent, name ) ;^116^^^^^101^131^reportError ( t, n, name ) ;^[CLASS] ConstCheck  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  initializedConstants  boolean  NodeTraversal  t  DiagnosticType  CONST_REASSIGNED_VALUE_ERROR  Var  var  Node  lhs  n  parent  String  name  
[BugLab_Argument_Swapping]^reportError ( n, t, name ) ;^116^^^^^101^131^reportError ( t, n, name ) ;^[CLASS] ConstCheck  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  initializedConstants  boolean  NodeTraversal  t  DiagnosticType  CONST_REASSIGNED_VALUE_ERROR  Var  var  Node  lhs  n  parent  String  name  
[BugLab_Argument_Swapping]^reportError ( name, n, t ) ;^116^^^^^101^131^reportError ( t, n, name ) ;^[CLASS] ConstCheck  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  initializedConstants  boolean  NodeTraversal  t  DiagnosticType  CONST_REASSIGNED_VALUE_ERROR  Var  var  Node  lhs  n  parent  String  name  
[BugLab_Variable_Misuse]^String name = parent.getString (  ) ;^113^^^^^98^128^String name = lhs.getString (  ) ;^[CLASS] ConstCheck  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  initializedConstants  boolean  NodeTraversal  t  DiagnosticType  CONST_REASSIGNED_VALUE_ERROR  Var  var  Node  lhs  n  parent  String  name  
[BugLab_Argument_Swapping]^Scope.Var var = name.getScope (  ) .getVar ( t ) ;^114^^^^^99^129^Scope.Var var = t.getScope (  ) .getVar ( name ) ;^[CLASS] ConstCheck  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  initializedConstants  boolean  NodeTraversal  t  DiagnosticType  CONST_REASSIGNED_VALUE_ERROR  Var  var  Node  lhs  n  parent  String  name  
[BugLab_Argument_Swapping]^reportError ( t, name, n ) ;^116^^^^^101^131^reportError ( t, n, name ) ;^[CLASS] ConstCheck  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  initializedConstants  boolean  NodeTraversal  t  DiagnosticType  CONST_REASSIGNED_VALUE_ERROR  Var  var  Node  lhs  n  parent  String  name  
[BugLab_Variable_Misuse]^String parentame = n.getString (  ) ;^70^^^^^55^85^String name = n.getString (  ) ;^[CLASS] ConstCheck  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  initializedConstants  boolean  NodeTraversal  t  DiagnosticType  CONST_REASSIGNED_VALUE_ERROR  Var  var  Node  lhs  n  parent  String  name  
[BugLab_Argument_Swapping]^Scope.Var var = name.getScope (  ) .getVar ( t ) ;^71^^^^^56^86^Scope.Var var = t.getScope (  ) .getVar ( name ) ;^[CLASS] ConstCheck  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  initializedConstants  boolean  NodeTraversal  t  DiagnosticType  CONST_REASSIGNED_VALUE_ERROR  Var  var  Node  lhs  n  parent  String  name  
[BugLab_Variable_Misuse]^Node lhs = parent.getFirstChild (  ) ;^94^^^^^79^109^Node lhs = n.getFirstChild (  ) ;^[CLASS] ConstCheck  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  initializedConstants  boolean  NodeTraversal  t  DiagnosticType  CONST_REASSIGNED_VALUE_ERROR  Var  var  Node  lhs  n  parent  String  name  
[BugLab_Variable_Misuse]^n.hasChildreparent (  )  )  {^69^^^^^54^84^n.hasChildren (  )  )  {^[CLASS] ConstCheck  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  initializedConstants  boolean  NodeTraversal  t  DiagnosticType  CONST_REASSIGNED_VALUE_ERROR  Var  var  Node  lhs  n  parent  String  name  
[BugLab_Variable_Misuse]^if  ( 2.contains ( var )  )  {^99^^^^^84^114^if  ( initializedConstants.contains ( var )  )  {^[CLASS] ConstCheck  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  initializedConstants  boolean  NodeTraversal  t  DiagnosticType  CONST_REASSIGNED_VALUE_ERROR  Var  var  Node  lhs  n  parent  String  name  
[BugLab_Variable_Misuse]^Node lhs = parent.getFirstChild (  ) ;^111^^^^^96^126^Node lhs = n.getFirstChild (  ) ;^[CLASS] ConstCheck  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  initializedConstants  boolean  NodeTraversal  t  DiagnosticType  CONST_REASSIGNED_VALUE_ERROR  Var  var  Node  lhs  n  parent  String  name  
[BugLab_Wrong_Operator]^return var != null || var.isConst (  ) ;^129^^^^^128^130^return var != null && var.isConst (  ) ;^[CLASS] ConstCheck  [METHOD] isConstant [RETURN_TYPE] boolean   Var var [VARIABLES] AbstractCompiler  compiler  Set  initializedConstants  boolean  DiagnosticType  CONST_REASSIGNED_VALUE_ERROR  Var  var  
[BugLab_Wrong_Operator]^return var == null && var.isConst (  ) ;^129^^^^^128^130^return var != null && var.isConst (  ) ;^[CLASS] ConstCheck  [METHOD] isConstant [RETURN_TYPE] boolean   Var var [VARIABLES] AbstractCompiler  compiler  Set  initializedConstants  boolean  DiagnosticType  CONST_REASSIGNED_VALUE_ERROR  Var  var  
[BugLab_Argument_Swapping]^compiler.report ( JSError.make ( n, t, CONST_REASSIGNED_VALUE_ERROR, name )  ) ;^136^^^^^135^137^compiler.report ( JSError.make ( t, n, CONST_REASSIGNED_VALUE_ERROR, name )  ) ;^[CLASS] ConstCheck  [METHOD] reportError [RETURN_TYPE] void   NodeTraversal t Node n String name [VARIABLES] AbstractCompiler  compiler  Set  initializedConstants  boolean  NodeTraversal  t  DiagnosticType  CONST_REASSIGNED_VALUE_ERROR  Node  n  String  name  
[BugLab_Argument_Swapping]^compiler.report ( JSError.make ( name, n, CONST_REASSIGNED_VALUE_ERROR, t )  ) ;^136^^^^^135^137^compiler.report ( JSError.make ( t, n, CONST_REASSIGNED_VALUE_ERROR, name )  ) ;^[CLASS] ConstCheck  [METHOD] reportError [RETURN_TYPE] void   NodeTraversal t Node n String name [VARIABLES] AbstractCompiler  compiler  Set  initializedConstants  boolean  NodeTraversal  t  DiagnosticType  CONST_REASSIGNED_VALUE_ERROR  Node  n  String  name  
[BugLab_Argument_Swapping]^compiler.report ( JSError.make ( t, n, name, CONST_REASSIGNED_VALUE_ERROR )  ) ;^136^^^^^135^137^compiler.report ( JSError.make ( t, n, CONST_REASSIGNED_VALUE_ERROR, name )  ) ;^[CLASS] ConstCheck  [METHOD] reportError [RETURN_TYPE] void   NodeTraversal t Node n String name [VARIABLES] AbstractCompiler  compiler  Set  initializedConstants  boolean  NodeTraversal  t  DiagnosticType  CONST_REASSIGNED_VALUE_ERROR  Node  n  String  name  
[BugLab_Argument_Swapping]^compiler.report ( JSError.make ( t, CONST_REASSIGNED_VALUE_ERROR, n, name )  ) ;^136^^^^^135^137^compiler.report ( JSError.make ( t, n, CONST_REASSIGNED_VALUE_ERROR, name )  ) ;^[CLASS] ConstCheck  [METHOD] reportError [RETURN_TYPE] void   NodeTraversal t Node n String name [VARIABLES] AbstractCompiler  compiler  Set  initializedConstants  boolean  NodeTraversal  t  DiagnosticType  CONST_REASSIGNED_VALUE_ERROR  Node  n  String  name  
