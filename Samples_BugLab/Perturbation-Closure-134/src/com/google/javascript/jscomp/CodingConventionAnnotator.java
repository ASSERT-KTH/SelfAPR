[BugLab_Wrong_Operator]^if  ( externs == null )  {^44^^^^^43^50^if  ( externs != null )  {^[CLASS] CodingConventionAnnotator  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  CodingConvention  convention  Node  externs  root  
[BugLab_Variable_Misuse]^NodeTraversal.traverse ( compiler, root, this ) ;^45^^^^^43^50^NodeTraversal.traverse ( compiler, externs, this ) ;^[CLASS] CodingConventionAnnotator  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  CodingConvention  convention  Node  externs  root  
[BugLab_Argument_Swapping]^NodeTraversal.traverse ( externs, compiler, this ) ;^45^^^^^43^50^NodeTraversal.traverse ( compiler, externs, this ) ;^[CLASS] CodingConventionAnnotator  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  CodingConvention  convention  Node  externs  root  
[BugLab_Variable_Misuse]^if  ( externs != null )  {^47^^^^^43^50^if  ( root != null )  {^[CLASS] CodingConventionAnnotator  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  CodingConvention  convention  Node  externs  root  
[BugLab_Wrong_Operator]^if  ( root == null )  {^47^^^^^43^50^if  ( root != null )  {^[CLASS] CodingConventionAnnotator  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  CodingConvention  convention  Node  externs  root  
[BugLab_Variable_Misuse]^NodeTraversal.traverse ( compiler, externs, this ) ;^48^^^^^43^50^NodeTraversal.traverse ( compiler, root, this ) ;^[CLASS] CodingConventionAnnotator  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  CodingConvention  convention  Node  externs  root  
[BugLab_Argument_Swapping]^NodeTraversal.traverse ( root, compiler, this ) ;^48^^^^^43^50^NodeTraversal.traverse ( compiler, root, this ) ;^[CLASS] CodingConventionAnnotator  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  CodingConvention  convention  Node  externs  root  
[BugLab_Variable_Misuse]^if  ( convention.isConstant ( parent.getString (  )  )  )  {^57^^^^^42^72^if  ( convention.isConstant ( n.getString (  )  )  )  {^[CLASS] CodingConventionAnnotator  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CodingConvention  convention  Node  arg  args  n  parent  JSTypeExpression  typeExpr  String  argName  JSDocInfo  fnInfo  
[BugLab_Argument_Swapping]^if  ( n.isConstant ( convention.getString (  )  )  )  {^57^^^^^42^72^if  ( convention.isConstant ( n.getString (  )  )  )  {^[CLASS] CodingConventionAnnotator  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CodingConvention  convention  Node  arg  args  n  parent  JSTypeExpression  typeExpr  String  argName  JSDocInfo  fnInfo  
[BugLab_Wrong_Literal]^n.putBooleanProp ( Node.IS_CONSTANT_NAME, false ) ;^58^^^^^43^73^n.putBooleanProp ( Node.IS_CONSTANT_NAME, true ) ;^[CLASS] CodingConventionAnnotator  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CodingConvention  convention  Node  arg  args  n  parent  JSTypeExpression  typeExpr  String  argName  JSDocInfo  fnInfo  
[BugLab_Wrong_Operator]^if  ( fnInfo != null )  {^64^^^^^49^79^if  ( fnInfo == null )  {^[CLASS] CodingConventionAnnotator  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CodingConvention  convention  Node  arg  args  n  parent  JSTypeExpression  typeExpr  String  argName  JSDocInfo  fnInfo  
[BugLab_Variable_Misuse]^if  ( n.getType (  )  == Token.ASSIGN )  {^66^^^^^51^81^if  ( parent.getType (  )  == Token.ASSIGN )  {^[CLASS] CodingConventionAnnotator  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CodingConvention  convention  Node  arg  args  n  parent  JSTypeExpression  typeExpr  String  argName  JSDocInfo  fnInfo  
[BugLab_Wrong_Operator]^if  ( parent.getType (  )  > Token.ASSIGN )  {^66^^^^^51^81^if  ( parent.getType (  )  == Token.ASSIGN )  {^[CLASS] CodingConventionAnnotator  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CodingConvention  convention  Node  arg  args  n  parent  JSTypeExpression  typeExpr  String  argName  JSDocInfo  fnInfo  
[BugLab_Wrong_Operator]^if  ( parent.getType (  )  <= Token.ASSIGN )  {^66^^^^^51^81^if  ( parent.getType (  )  == Token.ASSIGN )  {^[CLASS] CodingConventionAnnotator  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CodingConvention  convention  Node  arg  args  n  parent  JSTypeExpression  typeExpr  String  argName  JSDocInfo  fnInfo  
[BugLab_Variable_Misuse]^} else if  ( n.getType (  )  == Token.NAME )  {^69^^^^^54^84^} else if  ( parent.getType (  )  == Token.NAME )  {^[CLASS] CodingConventionAnnotator  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CodingConvention  convention  Node  arg  args  n  parent  JSTypeExpression  typeExpr  String  argName  JSDocInfo  fnInfo  
[BugLab_Wrong_Operator]^} else if  ( parent.getType (  )  != Token.NAME )  {^69^^^^^54^84^} else if  ( parent.getType (  )  == Token.NAME )  {^[CLASS] CodingConventionAnnotator  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CodingConvention  convention  Node  arg  args  n  parent  JSTypeExpression  typeExpr  String  argName  JSDocInfo  fnInfo  
[BugLab_Variable_Misuse]^fnInfo = n.getParent (  ) .getJSDocInfo (  ) ;^71^^^^^56^86^fnInfo = parent.getParent (  ) .getJSDocInfo (  ) ;^[CLASS] CodingConventionAnnotator  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CodingConvention  convention  Node  arg  args  n  parent  JSTypeExpression  typeExpr  String  argName  JSDocInfo  fnInfo  
[BugLab_Variable_Misuse]^fnInfo = n.getJSDocInfo (  ) ;^68^^^^^53^83^fnInfo = parent.getJSDocInfo (  ) ;^[CLASS] CodingConventionAnnotator  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CodingConvention  convention  Node  arg  args  n  parent  JSTypeExpression  typeExpr  String  argName  JSDocInfo  fnInfo  
[BugLab_Wrong_Operator]^} else if  ( parent.getType (  )  >= Token.NAME )  {^69^^^^^54^84^} else if  ( parent.getType (  )  == Token.NAME )  {^[CLASS] CodingConventionAnnotator  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CodingConvention  convention  Node  arg  args  n  parent  JSTypeExpression  typeExpr  String  argName  JSDocInfo  fnInfo  
[BugLab_Argument_Swapping]^if  ( arg.isOptionalParameter ( convention )  || typeExpr != null && typeExpr.isOptionalArg (  )  )  {^85^86^^^^70^100^if  ( convention.isOptionalParameter ( arg )  || typeExpr != null && typeExpr.isOptionalArg (  )  )  {^[CLASS] CodingConventionAnnotator  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CodingConvention  convention  Node  arg  args  n  parent  JSTypeExpression  typeExpr  String  argName  JSDocInfo  fnInfo  
[BugLab_Argument_Swapping]^if  ( typeExpr.isOptionalParameter ( arg )  || convention != null && typeExpr.isOptionalArg (  )  )  {^85^86^^^^70^100^if  ( convention.isOptionalParameter ( arg )  || typeExpr != null && typeExpr.isOptionalArg (  )  )  {^[CLASS] CodingConventionAnnotator  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CodingConvention  convention  Node  arg  args  n  parent  JSTypeExpression  typeExpr  String  argName  JSDocInfo  fnInfo  
[BugLab_Wrong_Operator]^if  ( convention.isOptionalParameter ( arg )  && typeExpr != null && typeExpr.isOptionalArg (  )  )  {^85^86^^^^70^100^if  ( convention.isOptionalParameter ( arg )  || typeExpr != null && typeExpr.isOptionalArg (  )  )  {^[CLASS] CodingConventionAnnotator  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CodingConvention  convention  Node  arg  args  n  parent  JSTypeExpression  typeExpr  String  argName  JSDocInfo  fnInfo  
[BugLab_Wrong_Operator]^if  ( convention.isOptionalParameter ( arg )  || typeExpr != null || typeExpr.isOptionalArg (  )  )  {^85^86^^^^70^100^if  ( convention.isOptionalParameter ( arg )  || typeExpr != null && typeExpr.isOptionalArg (  )  )  {^[CLASS] CodingConventionAnnotator  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CodingConvention  convention  Node  arg  args  n  parent  JSTypeExpression  typeExpr  String  argName  JSDocInfo  fnInfo  
[BugLab_Wrong_Operator]^if  ( convention.isOptionalParameter ( arg )  || typeExpr == null && typeExpr.isOptionalArg (  )  )  {^85^86^^^^70^100^if  ( convention.isOptionalParameter ( arg )  || typeExpr != null && typeExpr.isOptionalArg (  )  )  {^[CLASS] CodingConventionAnnotator  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CodingConvention  convention  Node  arg  args  n  parent  JSTypeExpression  typeExpr  String  argName  JSDocInfo  fnInfo  
[BugLab_Wrong_Literal]^arg.putBooleanProp ( Node.IS_OPTIONAL_PARAM, false ) ;^87^^^^^85^88^arg.putBooleanProp ( Node.IS_OPTIONAL_PARAM, true ) ;^[CLASS] CodingConventionAnnotator  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CodingConvention  convention  Node  arg  args  n  parent  JSTypeExpression  typeExpr  String  argName  JSDocInfo  fnInfo  
[BugLab_Variable_Misuse]^if  ( convention.isVarArgsParameter ( parent )  || typeExpr != null && typeExpr.isVarArgs (  )  )  {^89^90^^^^74^104^if  ( convention.isVarArgsParameter ( arg )  || typeExpr != null && typeExpr.isVarArgs (  )  )  {^[CLASS] CodingConventionAnnotator  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CodingConvention  convention  Node  arg  args  n  parent  JSTypeExpression  typeExpr  String  argName  JSDocInfo  fnInfo  
[BugLab_Argument_Swapping]^if  ( convention.isVarArgsParameter ( typeExpr )  || arg != null && typeExpr.isVarArgs (  )  )  {^89^90^^^^74^104^if  ( convention.isVarArgsParameter ( arg )  || typeExpr != null && typeExpr.isVarArgs (  )  )  {^[CLASS] CodingConventionAnnotator  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CodingConvention  convention  Node  arg  args  n  parent  JSTypeExpression  typeExpr  String  argName  JSDocInfo  fnInfo  
[BugLab_Argument_Swapping]^if  ( typeExpr.isVarArgsParameter ( arg )  || convention != null && typeExpr.isVarArgs (  )  )  {^89^90^^^^74^104^if  ( convention.isVarArgsParameter ( arg )  || typeExpr != null && typeExpr.isVarArgs (  )  )  {^[CLASS] CodingConventionAnnotator  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CodingConvention  convention  Node  arg  args  n  parent  JSTypeExpression  typeExpr  String  argName  JSDocInfo  fnInfo  
[BugLab_Argument_Swapping]^if  ( arg.isVarArgsParameter ( convention )  || typeExpr != null && typeExpr.isVarArgs (  )  )  {^89^90^^^^74^104^if  ( convention.isVarArgsParameter ( arg )  || typeExpr != null && typeExpr.isVarArgs (  )  )  {^[CLASS] CodingConventionAnnotator  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CodingConvention  convention  Node  arg  args  n  parent  JSTypeExpression  typeExpr  String  argName  JSDocInfo  fnInfo  
[BugLab_Wrong_Operator]^if  ( convention.isVarArgsParameter ( arg )  && typeExpr != null && typeExpr.isVarArgs (  )  )  {^89^90^^^^74^104^if  ( convention.isVarArgsParameter ( arg )  || typeExpr != null && typeExpr.isVarArgs (  )  )  {^[CLASS] CodingConventionAnnotator  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CodingConvention  convention  Node  arg  args  n  parent  JSTypeExpression  typeExpr  String  argName  JSDocInfo  fnInfo  
[BugLab_Wrong_Operator]^if  ( convention.isVarArgsParameter ( arg )  || typeExpr != null || typeExpr.isVarArgs (  )  )  {^89^90^^^^74^104^if  ( convention.isVarArgsParameter ( arg )  || typeExpr != null && typeExpr.isVarArgs (  )  )  {^[CLASS] CodingConventionAnnotator  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CodingConvention  convention  Node  arg  args  n  parent  JSTypeExpression  typeExpr  String  argName  JSDocInfo  fnInfo  
[BugLab_Wrong_Operator]^if  ( convention.isVarArgsParameter ( arg )  || typeExpr == null && typeExpr.isVarArgs (  )  )  {^89^90^^^^74^104^if  ( convention.isVarArgsParameter ( arg )  || typeExpr != null && typeExpr.isVarArgs (  )  )  {^[CLASS] CodingConventionAnnotator  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CodingConvention  convention  Node  arg  args  n  parent  JSTypeExpression  typeExpr  String  argName  JSDocInfo  fnInfo  
[BugLab_Wrong_Literal]^arg.putBooleanProp ( Node.IS_VAR_ARGS_PARAM, false ) ;^91^^^^^89^92^arg.putBooleanProp ( Node.IS_VAR_ARGS_PARAM, true ) ;^[CLASS] CodingConventionAnnotator  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CodingConvention  convention  Node  arg  args  n  parent  JSTypeExpression  typeExpr  String  argName  JSDocInfo  fnInfo  
[BugLab_Variable_Misuse]^for  ( Node parent = args.getFirstChild (  ) ;^78^^^^^63^93^for  ( Node arg = args.getFirstChild (  ) ;^[CLASS] CodingConventionAnnotator  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CodingConvention  convention  Node  arg  args  n  parent  JSTypeExpression  typeExpr  String  argName  JSDocInfo  fnInfo  
[BugLab_Argument_Swapping]^for  ( Node args = arg.getFirstChild (  ) ;^78^^^^^63^93^for  ( Node arg = args.getFirstChild (  ) ;^[CLASS] CodingConventionAnnotator  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CodingConvention  convention  Node  arg  args  n  parent  JSTypeExpression  typeExpr  String  argName  JSDocInfo  fnInfo  
[BugLab_Variable_Misuse]^if  ( convention.isOptionalParameter ( parent )  || typeExpr != null && typeExpr.isOptionalArg (  )  )  {^85^86^^^^78^93^if  ( convention.isOptionalParameter ( arg )  || typeExpr != null && typeExpr.isOptionalArg (  )  )  {^[CLASS] CodingConventionAnnotator  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CodingConvention  convention  Node  arg  args  n  parent  JSTypeExpression  typeExpr  String  argName  JSDocInfo  fnInfo  
[BugLab_Argument_Swapping]^if  ( convention.isOptionalParameter ( typeExpr )  || arg != null && typeExpr.isOptionalArg (  )  )  {^85^86^^^^78^93^if  ( convention.isOptionalParameter ( arg )  || typeExpr != null && typeExpr.isOptionalArg (  )  )  {^[CLASS] CodingConventionAnnotator  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CodingConvention  convention  Node  arg  args  n  parent  JSTypeExpression  typeExpr  String  argName  JSDocInfo  fnInfo  
[BugLab_Argument_Swapping]^if  ( arg.isOptionalParameter ( convention )  || typeExpr != null && typeExpr.isOptionalArg (  )  )  {^85^86^^^^78^93^if  ( convention.isOptionalParameter ( arg )  || typeExpr != null && typeExpr.isOptionalArg (  )  )  {^[CLASS] CodingConventionAnnotator  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CodingConvention  convention  Node  arg  args  n  parent  JSTypeExpression  typeExpr  String  argName  JSDocInfo  fnInfo  
[BugLab_Wrong_Operator]^if  ( convention.isOptionalParameter ( arg )  && typeExpr != null && typeExpr.isOptionalArg (  )  )  {^85^86^^^^78^93^if  ( convention.isOptionalParameter ( arg )  || typeExpr != null && typeExpr.isOptionalArg (  )  )  {^[CLASS] CodingConventionAnnotator  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CodingConvention  convention  Node  arg  args  n  parent  JSTypeExpression  typeExpr  String  argName  JSDocInfo  fnInfo  
[BugLab_Wrong_Operator]^if  ( convention.isOptionalParameter ( arg )  || typeExpr != null || typeExpr.isOptionalArg (  )  )  {^85^86^^^^78^93^if  ( convention.isOptionalParameter ( arg )  || typeExpr != null && typeExpr.isOptionalArg (  )  )  {^[CLASS] CodingConventionAnnotator  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CodingConvention  convention  Node  arg  args  n  parent  JSTypeExpression  typeExpr  String  argName  JSDocInfo  fnInfo  
[BugLab_Wrong_Operator]^if  ( convention.isOptionalParameter ( arg )  || typeExpr == null && typeExpr.isOptionalArg (  )  )  {^85^86^^^^78^93^if  ( convention.isOptionalParameter ( arg )  || typeExpr != null && typeExpr.isOptionalArg (  )  )  {^[CLASS] CodingConventionAnnotator  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CodingConvention  convention  Node  arg  args  n  parent  JSTypeExpression  typeExpr  String  argName  JSDocInfo  fnInfo  
[BugLab_Wrong_Literal]^arg.putBooleanProp ( Node.IS_OPTIONAL_PARAM, false ) ;^87^^^^^78^93^arg.putBooleanProp ( Node.IS_OPTIONAL_PARAM, true ) ;^[CLASS] CodingConventionAnnotator  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CodingConvention  convention  Node  arg  args  n  parent  JSTypeExpression  typeExpr  String  argName  JSDocInfo  fnInfo  
[BugLab_Variable_Misuse]^if  ( convention.isVarArgsParameter ( parent )  || typeExpr != null && typeExpr.isVarArgs (  )  )  {^89^90^^^^78^93^if  ( convention.isVarArgsParameter ( arg )  || typeExpr != null && typeExpr.isVarArgs (  )  )  {^[CLASS] CodingConventionAnnotator  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CodingConvention  convention  Node  arg  args  n  parent  JSTypeExpression  typeExpr  String  argName  JSDocInfo  fnInfo  
[BugLab_Argument_Swapping]^if  ( arg.isVarArgsParameter ( convention )  || typeExpr != null && typeExpr.isVarArgs (  )  )  {^89^90^^^^78^93^if  ( convention.isVarArgsParameter ( arg )  || typeExpr != null && typeExpr.isVarArgs (  )  )  {^[CLASS] CodingConventionAnnotator  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CodingConvention  convention  Node  arg  args  n  parent  JSTypeExpression  typeExpr  String  argName  JSDocInfo  fnInfo  
[BugLab_Argument_Swapping]^if  ( typeExpr.isVarArgsParameter ( arg )  || convention != null && typeExpr.isVarArgs (  )  )  {^89^90^^^^78^93^if  ( convention.isVarArgsParameter ( arg )  || typeExpr != null && typeExpr.isVarArgs (  )  )  {^[CLASS] CodingConventionAnnotator  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CodingConvention  convention  Node  arg  args  n  parent  JSTypeExpression  typeExpr  String  argName  JSDocInfo  fnInfo  
[BugLab_Wrong_Operator]^if  ( convention.isVarArgsParameter ( arg )  && typeExpr != null && typeExpr.isVarArgs (  )  )  {^89^90^^^^78^93^if  ( convention.isVarArgsParameter ( arg )  || typeExpr != null && typeExpr.isVarArgs (  )  )  {^[CLASS] CodingConventionAnnotator  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CodingConvention  convention  Node  arg  args  n  parent  JSTypeExpression  typeExpr  String  argName  JSDocInfo  fnInfo  
[BugLab_Wrong_Operator]^if  ( convention.isVarArgsParameter ( arg )  || typeExpr != null || typeExpr.isVarArgs (  )  )  {^89^90^^^^78^93^if  ( convention.isVarArgsParameter ( arg )  || typeExpr != null && typeExpr.isVarArgs (  )  )  {^[CLASS] CodingConventionAnnotator  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CodingConvention  convention  Node  arg  args  n  parent  JSTypeExpression  typeExpr  String  argName  JSDocInfo  fnInfo  
[BugLab_Wrong_Operator]^if  ( convention.isVarArgsParameter ( arg )  || typeExpr == null && typeExpr.isVarArgs (  )  )  {^89^90^^^^78^93^if  ( convention.isVarArgsParameter ( arg )  || typeExpr != null && typeExpr.isVarArgs (  )  )  {^[CLASS] CodingConventionAnnotator  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CodingConvention  convention  Node  arg  args  n  parent  JSTypeExpression  typeExpr  String  argName  JSDocInfo  fnInfo  
[BugLab_Wrong_Literal]^arg.putBooleanProp ( Node.IS_VAR_ARGS_PARAM, false ) ;^91^^^^^78^93^arg.putBooleanProp ( Node.IS_VAR_ARGS_PARAM, true ) ;^[CLASS] CodingConventionAnnotator  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CodingConvention  convention  Node  arg  args  n  parent  JSTypeExpression  typeExpr  String  argName  JSDocInfo  fnInfo  
[BugLab_Argument_Swapping]^JSTypeExpression typeExpr = argName == null ? null : fnInfo.getParameterType ( fnInfo ) ;^82^83^^^^78^93^JSTypeExpression typeExpr = fnInfo == null ? null : fnInfo.getParameterType ( argName ) ;^[CLASS] CodingConventionAnnotator  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CodingConvention  convention  Node  arg  args  n  parent  JSTypeExpression  typeExpr  String  argName  JSDocInfo  fnInfo  
[BugLab_Wrong_Operator]^JSTypeExpression typeExpr = fnInfo != null ? null : fnInfo.getParameterType ( argName ) ;^82^83^^^^78^93^JSTypeExpression typeExpr = fnInfo == null ? null : fnInfo.getParameterType ( argName ) ;^[CLASS] CodingConventionAnnotator  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CodingConvention  convention  Node  arg  args  n  parent  JSTypeExpression  typeExpr  String  argName  JSDocInfo  fnInfo  
[BugLab_Variable_Misuse]^String parentName = arg.getString (  ) ;^81^^^^^78^93^String argName = arg.getString (  ) ;^[CLASS] CodingConventionAnnotator  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CodingConvention  convention  Node  arg  args  n  parent  JSTypeExpression  typeExpr  String  argName  JSDocInfo  fnInfo  
[BugLab_Argument_Swapping]^null : argName.getParameterType ( fnInfo ) ;^83^^^^^78^93^null : fnInfo.getParameterType ( argName ) ;^[CLASS] CodingConventionAnnotator  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CodingConvention  convention  Node  arg  args  n  parent  JSTypeExpression  typeExpr  String  argName  JSDocInfo  fnInfo  
[BugLab_Variable_Misuse]^arg = parent.getNext (  )  )  {^80^^^^^65^95^arg = arg.getNext (  )  )  {^[CLASS] CodingConventionAnnotator  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CodingConvention  convention  Node  arg  args  n  parent  JSTypeExpression  typeExpr  String  argName  JSDocInfo  fnInfo  
[BugLab_Variable_Misuse]^Node args = parent.getFirstChild (  ) .getNext (  ) ;^77^^^^^62^92^Node args = n.getFirstChild (  ) .getNext (  ) ;^[CLASS] CodingConventionAnnotator  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CodingConvention  convention  Node  arg  args  n  parent  JSTypeExpression  typeExpr  String  argName  JSDocInfo  fnInfo  
[BugLab_Variable_Misuse]^for  ( Node arg = parent.getFirstChild (  ) ;^78^^^^^63^93^for  ( Node arg = args.getFirstChild (  ) ;^[CLASS] CodingConventionAnnotator  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CodingConvention  convention  Node  arg  args  n  parent  JSTypeExpression  typeExpr  String  argName  JSDocInfo  fnInfo  
[BugLab_Variable_Misuse]^String parentName = arg.getString (  ) ;^81^^^^^66^96^String argName = arg.getString (  ) ;^[CLASS] CodingConventionAnnotator  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CodingConvention  convention  Node  arg  args  n  parent  JSTypeExpression  typeExpr  String  argName  JSDocInfo  fnInfo  
[BugLab_Argument_Swapping]^JSTypeExpression typeExpr = argName == null ? null : fnInfo.getParameterType ( fnInfo ) ;^82^83^^^^67^97^JSTypeExpression typeExpr = fnInfo == null ? null : fnInfo.getParameterType ( argName ) ;^[CLASS] CodingConventionAnnotator  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CodingConvention  convention  Node  arg  args  n  parent  JSTypeExpression  typeExpr  String  argName  JSDocInfo  fnInfo  
[BugLab_Wrong_Operator]^JSTypeExpression typeExpr = fnInfo != null ? null : fnInfo.getParameterType ( argName ) ;^82^83^^^^67^97^JSTypeExpression typeExpr = fnInfo == null ? null : fnInfo.getParameterType ( argName ) ;^[CLASS] CodingConventionAnnotator  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CodingConvention  convention  Node  arg  args  n  parent  JSTypeExpression  typeExpr  String  argName  JSDocInfo  fnInfo  
[BugLab_Variable_Misuse]^JSDocInfo fnInfo = parent.getJSDocInfo (  ) ;^63^^^^^48^78^JSDocInfo fnInfo = n.getJSDocInfo (  ) ;^[CLASS] CodingConventionAnnotator  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CodingConvention  convention  Node  arg  args  n  parent  JSTypeExpression  typeExpr  String  argName  JSDocInfo  fnInfo  
[BugLab_Argument_Swapping]^null : argName.getParameterType ( fnInfo ) ;^83^^^^^68^98^null : fnInfo.getParameterType ( argName ) ;^[CLASS] CodingConventionAnnotator  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CodingConvention  convention  Node  arg  args  n  parent  JSTypeExpression  typeExpr  String  argName  JSDocInfo  fnInfo  
[BugLab_Variable_Misuse]^if  ( convention.isOptionalParameter ( parent )  || typeExpr != null && typeExpr.isOptionalArg (  )  )  {^85^86^^^^70^100^if  ( convention.isOptionalParameter ( arg )  || typeExpr != null && typeExpr.isOptionalArg (  )  )  {^[CLASS] CodingConventionAnnotator  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CodingConvention  convention  Node  arg  args  n  parent  JSTypeExpression  typeExpr  String  argName  JSDocInfo  fnInfo  
[BugLab_Wrong_Literal]^arg.putBooleanProp ( Node.IS_OPTIONAL_PARAM, false ) ;^87^^^^^72^102^arg.putBooleanProp ( Node.IS_OPTIONAL_PARAM, true ) ;^[CLASS] CodingConventionAnnotator  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CodingConvention  convention  Node  arg  args  n  parent  JSTypeExpression  typeExpr  String  argName  JSDocInfo  fnInfo  
[BugLab_Wrong_Literal]^arg.putBooleanProp ( Node.IS_VAR_ARGS_PARAM, false ) ;^91^^^^^76^106^arg.putBooleanProp ( Node.IS_VAR_ARGS_PARAM, true ) ;^[CLASS] CodingConventionAnnotator  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CodingConvention  convention  Node  arg  args  n  parent  JSTypeExpression  typeExpr  String  argName  JSDocInfo  fnInfo  
