[BugLab_Wrong_Literal]^private static final int MAX_ITERATIONS = 19;^53^^^^^48^58^private static final int MAX_ITERATIONS = 20;^[CLASS] RemoveUnusedVars   [VARIABLES] 
[BugLab_Wrong_Literal]^private int numRemoved_ = ;^56^^^^^51^61^private int numRemoved_ = 0;^[CLASS] RemoveUnusedVars   [VARIABLES] 
[BugLab_Variable_Misuse]^compiler_ = compiler_;^77^^^^^73^80^compiler_ = compiler;^[CLASS] RemoveUnusedVars  [METHOD] <init> [RETURN_TYPE] AbstractCompiler,boolean,boolean)   AbstractCompiler compiler boolean removeGlobals boolean preserveAnonymousFunctionNames [VARIABLES] AbstractCompiler  compiler  compiler_  boolean  preserveAnonymousFunctionNames  removeGlobals  Set  referenced  warnedVars_  Logger  logger_  int  MAX_ITERATIONS  numRemoved_  
[BugLab_Variable_Misuse]^this.removeGlobals = preserveAnonymousFunctionNames;^78^^^^^73^80^this.removeGlobals = removeGlobals;^[CLASS] RemoveUnusedVars  [METHOD] <init> [RETURN_TYPE] AbstractCompiler,boolean,boolean)   AbstractCompiler compiler boolean removeGlobals boolean preserveAnonymousFunctionNames [VARIABLES] AbstractCompiler  compiler  compiler_  boolean  preserveAnonymousFunctionNames  removeGlobals  Set  referenced  warnedVars_  Logger  logger_  int  MAX_ITERATIONS  numRemoved_  
[BugLab_Variable_Misuse]^this.preserveAnonymousFunctionNames = removeGlobals;^79^^^^^73^80^this.preserveAnonymousFunctionNames = preserveAnonymousFunctionNames;^[CLASS] RemoveUnusedVars  [METHOD] <init> [RETURN_TYPE] AbstractCompiler,boolean,boolean)   AbstractCompiler compiler boolean removeGlobals boolean preserveAnonymousFunctionNames [VARIABLES] AbstractCompiler  compiler  compiler_  boolean  preserveAnonymousFunctionNames  removeGlobals  Set  referenced  warnedVars_  Logger  logger_  int  MAX_ITERATIONS  numRemoved_  
[BugLab_Wrong_Literal]^int i = numRemoved_;^91^^^^^86^106^int i = 0;^[CLASS] RemoveUnusedVars  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  compiler_  boolean  preserveAnonymousFunctionNames  removeGlobals  Set  referenced  warnedVars_  Logger  logger_  int  MAX_ITERATIONS  i  numRemoved_  Node  externs  root  
[BugLab_Variable_Misuse]^if  ( MAX_ITERATIONS > 0 )  {^97^^^^^86^106^if  ( numRemoved_ > 0 )  {^[CLASS] RemoveUnusedVars  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  compiler_  boolean  preserveAnonymousFunctionNames  removeGlobals  Set  referenced  warnedVars_  Logger  logger_  int  MAX_ITERATIONS  i  numRemoved_  Node  externs  root  
[BugLab_Wrong_Operator]^if  ( numRemoved_ >= 0 )  {^97^^^^^86^106^if  ( numRemoved_ > 0 )  {^[CLASS] RemoveUnusedVars  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  compiler_  boolean  preserveAnonymousFunctionNames  removeGlobals  Set  referenced  warnedVars_  Logger  logger_  int  MAX_ITERATIONS  i  numRemoved_  Node  externs  root  
[BugLab_Variable_Misuse]^logger_.fine ( "RemoveUnusedVars ( " + numRemoved_ + " ) : removed " + numRemoved_ ) ;^99^^^^^86^106^logger_.fine ( "RemoveUnusedVars ( " + i + " ) : removed " + numRemoved_ ) ;^[CLASS] RemoveUnusedVars  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  compiler_  boolean  preserveAnonymousFunctionNames  removeGlobals  Set  referenced  warnedVars_  Logger  logger_  int  MAX_ITERATIONS  i  numRemoved_  Node  externs  root  
[BugLab_Variable_Misuse]^logger_.fine ( "RemoveUnusedVars ( " + i + " ) : removed " + MAX_ITERATIONS ) ;^99^^^^^86^106^logger_.fine ( "RemoveUnusedVars ( " + i + " ) : removed " + numRemoved_ ) ;^[CLASS] RemoveUnusedVars  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  compiler_  boolean  preserveAnonymousFunctionNames  removeGlobals  Set  referenced  warnedVars_  Logger  logger_  int  MAX_ITERATIONS  i  numRemoved_  Node  externs  root  
[BugLab_Argument_Swapping]^logger_.fine ( "RemoveUnusedVars ( " + numRemoved_ + " ) : removed " + i ) ;^99^^^^^86^106^logger_.fine ( "RemoveUnusedVars ( " + i + " ) : removed " + numRemoved_ ) ;^[CLASS] RemoveUnusedVars  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  compiler_  boolean  preserveAnonymousFunctionNames  removeGlobals  Set  referenced  warnedVars_  Logger  logger_  int  MAX_ITERATIONS  i  numRemoved_  Node  externs  root  
[BugLab_Wrong_Operator]^logger_.fine ( "RemoveUnusedVars ( "  <=  i  <=  " ) : removed " + numRemoved_ ) ;^99^^^^^86^106^logger_.fine ( "RemoveUnusedVars ( " + i + " ) : removed " + numRemoved_ ) ;^[CLASS] RemoveUnusedVars  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  compiler_  boolean  preserveAnonymousFunctionNames  removeGlobals  Set  referenced  warnedVars_  Logger  logger_  int  MAX_ITERATIONS  i  numRemoved_  Node  externs  root  
[BugLab_Wrong_Operator]^logger_.fine ( "RemoveUnusedVars ( "   instanceof   i + " ) : removed " + numRemoved_ ) ;^99^^^^^86^106^logger_.fine ( "RemoveUnusedVars ( " + i + " ) : removed " + numRemoved_ ) ;^[CLASS] RemoveUnusedVars  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  compiler_  boolean  preserveAnonymousFunctionNames  removeGlobals  Set  referenced  warnedVars_  Logger  logger_  int  MAX_ITERATIONS  i  numRemoved_  Node  externs  root  
[BugLab_Variable_Misuse]^traverseAndRemoveUnusedReferences ( externs ) ;^95^^^^^86^106^traverseAndRemoveUnusedReferences ( root ) ;^[CLASS] RemoveUnusedVars  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  compiler_  boolean  preserveAnonymousFunctionNames  removeGlobals  Set  referenced  warnedVars_  Logger  logger_  int  MAX_ITERATIONS  i  numRemoved_  Node  externs  root  
[BugLab_Wrong_Operator]^logger_.fine ( "RemoveUnusedVars ( "  ^  i  ^  " ) : removed " + numRemoved_ ) ;^99^^^^^86^106^logger_.fine ( "RemoveUnusedVars ( " + i + " ) : removed " + numRemoved_ ) ;^[CLASS] RemoveUnusedVars  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  compiler_  boolean  preserveAnonymousFunctionNames  removeGlobals  Set  referenced  warnedVars_  Logger  logger_  int  MAX_ITERATIONS  i  numRemoved_  Node  externs  root  
[BugLab_Wrong_Operator]^logger_.fine ( "RemoveUnusedVars ( "  ||  i + " ) : removed " + numRemoved_ ) ;^99^^^^^86^106^logger_.fine ( "RemoveUnusedVars ( " + i + " ) : removed " + numRemoved_ ) ;^[CLASS] RemoveUnusedVars  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  compiler_  boolean  preserveAnonymousFunctionNames  removeGlobals  Set  referenced  warnedVars_  Logger  logger_  int  MAX_ITERATIONS  i  numRemoved_  Node  externs  root  
[BugLab_Variable_Misuse]^if  ( numRemoved_ == MAX_ITERATIONS )  {^103^^^^^86^106^if  ( i == MAX_ITERATIONS )  {^[CLASS] RemoveUnusedVars  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  compiler_  boolean  preserveAnonymousFunctionNames  removeGlobals  Set  referenced  warnedVars_  Logger  logger_  int  MAX_ITERATIONS  i  numRemoved_  Node  externs  root  
[BugLab_Argument_Swapping]^if  ( MAX_ITERATIONS == i )  {^103^^^^^86^106^if  ( i == MAX_ITERATIONS )  {^[CLASS] RemoveUnusedVars  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  compiler_  boolean  preserveAnonymousFunctionNames  removeGlobals  Set  referenced  warnedVars_  Logger  logger_  int  MAX_ITERATIONS  i  numRemoved_  Node  externs  root  
[BugLab_Wrong_Operator]^if  ( i <= MAX_ITERATIONS )  {^103^^^^^86^106^if  ( i == MAX_ITERATIONS )  {^[CLASS] RemoveUnusedVars  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  compiler_  boolean  preserveAnonymousFunctionNames  removeGlobals  Set  referenced  warnedVars_  Logger  logger_  int  MAX_ITERATIONS  i  numRemoved_  Node  externs  root  
[BugLab_Variable_Misuse]^Scope scope = new SyntacticScopeCreator ( compiler ) .createScope ( root, null ) ;^112^^^^^111^118^Scope scope = new SyntacticScopeCreator ( compiler_ ) .createScope ( root, null ) ;^[CLASS] RemoveUnusedVars  [METHOD] traverseAndRemoveUnusedReferences [RETURN_TYPE] void   Node root [VARIABLES] AbstractCompiler  compiler  compiler_  boolean  preserveAnonymousFunctionNames  removeGlobals  Set  referenced  warnedVars_  Scope  scope  Node  root  Logger  logger_  int  MAX_ITERATIONS  i  numRemoved_  
[BugLab_Argument_Swapping]^Scope scope = new SyntacticScopeCreator ( root ) .createScope ( compiler_, null ) ;^112^^^^^111^118^Scope scope = new SyntacticScopeCreator ( compiler_ ) .createScope ( root, null ) ;^[CLASS] RemoveUnusedVars  [METHOD] traverseAndRemoveUnusedReferences [RETURN_TYPE] void   Node root [VARIABLES] AbstractCompiler  compiler  compiler_  boolean  preserveAnonymousFunctionNames  removeGlobals  Set  referenced  warnedVars_  Scope  scope  Node  root  Logger  logger_  int  MAX_ITERATIONS  i  numRemoved_  
[BugLab_Argument_Swapping]^traverseNode ( scope, null, root ) ;^113^^^^^111^118^traverseNode ( root, null, scope ) ;^[CLASS] RemoveUnusedVars  [METHOD] traverseAndRemoveUnusedReferences [RETURN_TYPE] void   Node root [VARIABLES] AbstractCompiler  compiler  compiler_  boolean  preserveAnonymousFunctionNames  removeGlobals  Set  referenced  warnedVars_  Scope  scope  Node  root  Logger  logger_  int  MAX_ITERATIONS  i  numRemoved_  
[BugLab_Variable_Misuse]^if  ( preserveAnonymousFunctionNames )  {^115^^^^^111^118^if  ( removeGlobals )  {^[CLASS] RemoveUnusedVars  [METHOD] traverseAndRemoveUnusedReferences [RETURN_TYPE] void   Node root [VARIABLES] AbstractCompiler  compiler  compiler_  boolean  preserveAnonymousFunctionNames  removeGlobals  Set  referenced  warnedVars_  Scope  scope  Node  root  Logger  logger_  int  MAX_ITERATIONS  i  numRemoved_  
[BugLab_Variable_Misuse]^int type = parent.getType (  ) ;^126^^^^^111^141^int type = n.getType (  ) ;^[CLASS] RemoveUnusedVars  [METHOD] traverseNode [RETURN_TYPE] void   Node n Node parent Scope scope [VARIABLES] AbstractCompiler  compiler  compiler_  boolean  preserveAnonymousFunctionNames  removeGlobals  Set  referenced  warnedVars_  Scope  scope  Var  var  Node  c  n  parent  Logger  logger_  int  MAX_ITERATIONS  i  numRemoved_  type  
[BugLab_Variable_Misuse]^if  ( NodeUtil.isFunctionAnonymous ( parent )  || compiler_.getCodingConvention (  ) .isExported ( n.getFirstChild (  ) .getString (  )  )  )  {^139^140^141^^^124^154^if  ( NodeUtil.isFunctionAnonymous ( n )  || compiler_.getCodingConvention (  ) .isExported ( n.getFirstChild (  ) .getString (  )  )  )  {^[CLASS] RemoveUnusedVars  [METHOD] traverseNode [RETURN_TYPE] void   Node n Node parent Scope scope [VARIABLES] AbstractCompiler  compiler  compiler_  boolean  preserveAnonymousFunctionNames  removeGlobals  Set  referenced  warnedVars_  Scope  scope  Var  var  Node  c  n  parent  Logger  logger_  int  MAX_ITERATIONS  i  numRemoved_  type  
[BugLab_Variable_Misuse]^if  ( NodeUtil.isFunctionAnonymous ( n )  || compiler.getCodingConvention (  ) .isExported ( n.getFirstChild (  ) .getString (  )  )  )  {^139^140^141^^^124^154^if  ( NodeUtil.isFunctionAnonymous ( n )  || compiler_.getCodingConvention (  ) .isExported ( n.getFirstChild (  ) .getString (  )  )  )  {^[CLASS] RemoveUnusedVars  [METHOD] traverseNode [RETURN_TYPE] void   Node n Node parent Scope scope [VARIABLES] AbstractCompiler  compiler  compiler_  boolean  preserveAnonymousFunctionNames  removeGlobals  Set  referenced  warnedVars_  Scope  scope  Var  var  Node  c  n  parent  Logger  logger_  int  MAX_ITERATIONS  i  numRemoved_  type  
[BugLab_Argument_Swapping]^if  ( NodeUtil.isFunctionAnonymous ( compiler_ )  || n.getCodingConvention (  ) .isExported ( n.getFirstChild (  ) .getString (  )  )  )  {^139^140^141^^^124^154^if  ( NodeUtil.isFunctionAnonymous ( n )  || compiler_.getCodingConvention (  ) .isExported ( n.getFirstChild (  ) .getString (  )  )  )  {^[CLASS] RemoveUnusedVars  [METHOD] traverseNode [RETURN_TYPE] void   Node n Node parent Scope scope [VARIABLES] AbstractCompiler  compiler  compiler_  boolean  preserveAnonymousFunctionNames  removeGlobals  Set  referenced  warnedVars_  Scope  scope  Var  var  Node  c  n  parent  Logger  logger_  int  MAX_ITERATIONS  i  numRemoved_  type  
[BugLab_Wrong_Operator]^if  ( NodeUtil.isFunctionAnonymous ( n )  && compiler_.getCodingConvention (  ) .isExported ( n.getFirstChild (  ) .getString (  )  )  )  {^139^140^141^^^124^154^if  ( NodeUtil.isFunctionAnonymous ( n )  || compiler_.getCodingConvention (  ) .isExported ( n.getFirstChild (  ) .getString (  )  )  )  {^[CLASS] RemoveUnusedVars  [METHOD] traverseNode [RETURN_TYPE] void   Node n Node parent Scope scope [VARIABLES] AbstractCompiler  compiler  compiler_  boolean  preserveAnonymousFunctionNames  removeGlobals  Set  referenced  warnedVars_  Scope  scope  Var  var  Node  c  n  parent  Logger  logger_  int  MAX_ITERATIONS  i  numRemoved_  type  
[BugLab_Variable_Misuse]^traverseFunction ( parent, scope ) ;^142^^^^^139^143^traverseFunction ( n, scope ) ;^[CLASS] RemoveUnusedVars  [METHOD] traverseNode [RETURN_TYPE] void   Node n Node parent Scope scope [VARIABLES] AbstractCompiler  compiler  compiler_  boolean  preserveAnonymousFunctionNames  removeGlobals  Set  referenced  warnedVars_  Scope  scope  Var  var  Node  c  n  parent  Logger  logger_  int  MAX_ITERATIONS  i  numRemoved_  type  
[BugLab_Argument_Swapping]^traverseFunction ( scope, n ) ;^142^^^^^139^143^traverseFunction ( n, scope ) ;^[CLASS] RemoveUnusedVars  [METHOD] traverseNode [RETURN_TYPE] void   Node n Node parent Scope scope [VARIABLES] AbstractCompiler  compiler  compiler_  boolean  preserveAnonymousFunctionNames  removeGlobals  Set  referenced  warnedVars_  Scope  scope  Var  var  Node  c  n  parent  Logger  logger_  int  MAX_ITERATIONS  i  numRemoved_  type  
[BugLab_Variable_Misuse]^if  ( n.getType (  )  != Token.VAR )  {^147^^^^^132^162^if  ( parent.getType (  )  != Token.VAR )  {^[CLASS] RemoveUnusedVars  [METHOD] traverseNode [RETURN_TYPE] void   Node n Node parent Scope scope [VARIABLES] AbstractCompiler  compiler  compiler_  boolean  preserveAnonymousFunctionNames  removeGlobals  Set  referenced  warnedVars_  Scope  scope  Var  var  Node  c  n  parent  Logger  logger_  int  MAX_ITERATIONS  i  numRemoved_  type  
[BugLab_Wrong_Operator]^if  ( parent.getType (  )  >= Token.VAR )  {^147^^^^^132^162^if  ( parent.getType (  )  != Token.VAR )  {^[CLASS] RemoveUnusedVars  [METHOD] traverseNode [RETURN_TYPE] void   Node n Node parent Scope scope [VARIABLES] AbstractCompiler  compiler  compiler_  boolean  preserveAnonymousFunctionNames  removeGlobals  Set  referenced  warnedVars_  Scope  scope  Var  var  Node  c  n  parent  Logger  logger_  int  MAX_ITERATIONS  i  numRemoved_  type  
[BugLab_Wrong_Operator]^if  ( parent.getType (  )  == Token.VAR )  {^147^^^^^132^162^if  ( parent.getType (  )  != Token.VAR )  {^[CLASS] RemoveUnusedVars  [METHOD] traverseNode [RETURN_TYPE] void   Node n Node parent Scope scope [VARIABLES] AbstractCompiler  compiler  compiler_  boolean  preserveAnonymousFunctionNames  removeGlobals  Set  referenced  warnedVars_  Scope  scope  Var  var  Node  c  n  parent  Logger  logger_  int  MAX_ITERATIONS  i  numRemoved_  type  
[BugLab_Wrong_Operator]^if  ( var == null )  {^150^^^^^135^165^if  ( var != null )  {^[CLASS] RemoveUnusedVars  [METHOD] traverseNode [RETURN_TYPE] void   Node n Node parent Scope scope [VARIABLES] AbstractCompiler  compiler  compiler_  boolean  preserveAnonymousFunctionNames  removeGlobals  Set  referenced  warnedVars_  Scope  scope  Var  var  Node  c  n  parent  Logger  logger_  int  MAX_ITERATIONS  i  numRemoved_  type  
[BugLab_Variable_Misuse]^Var var = scope.getVar ( parent.getString (  )  ) ;^149^^^^^134^164^Var var = scope.getVar ( n.getString (  )  ) ;^[CLASS] RemoveUnusedVars  [METHOD] traverseNode [RETURN_TYPE] void   Node n Node parent Scope scope [VARIABLES] AbstractCompiler  compiler  compiler_  boolean  preserveAnonymousFunctionNames  removeGlobals  Set  referenced  warnedVars_  Scope  scope  Var  var  Node  c  n  parent  Logger  logger_  int  MAX_ITERATIONS  i  numRemoved_  type  
[BugLab_Argument_Swapping]^Var var = n.getVar ( scope.getString (  )  ) ;^149^^^^^134^164^Var var = scope.getVar ( n.getString (  )  ) ;^[CLASS] RemoveUnusedVars  [METHOD] traverseNode [RETURN_TYPE] void   Node n Node parent Scope scope [VARIABLES] AbstractCompiler  compiler  compiler_  boolean  preserveAnonymousFunctionNames  removeGlobals  Set  referenced  warnedVars_  Scope  scope  Var  var  Node  c  n  parent  Logger  logger_  int  MAX_ITERATIONS  i  numRemoved_  type  
[BugLab_Variable_Misuse]^compiler_.getCodingConvention (  ) .isExported ( parent.getFirstChild (  ) .getString (  )  )  )  {^140^141^^^^125^155^compiler_.getCodingConvention (  ) .isExported ( n.getFirstChild (  ) .getString (  )  )  )  {^[CLASS] RemoveUnusedVars  [METHOD] traverseNode [RETURN_TYPE] void   Node n Node parent Scope scope [VARIABLES] AbstractCompiler  compiler  compiler_  boolean  preserveAnonymousFunctionNames  removeGlobals  Set  referenced  warnedVars_  Scope  scope  Var  var  Node  c  n  parent  Logger  logger_  int  MAX_ITERATIONS  i  numRemoved_  type  
[BugLab_Variable_Misuse]^traverseFunction ( parent, scope ) ;^142^^^^^127^157^traverseFunction ( n, scope ) ;^[CLASS] RemoveUnusedVars  [METHOD] traverseNode [RETURN_TYPE] void   Node n Node parent Scope scope [VARIABLES] AbstractCompiler  compiler  compiler_  boolean  preserveAnonymousFunctionNames  removeGlobals  Set  referenced  warnedVars_  Scope  scope  Var  var  Node  c  n  parent  Logger  logger_  int  MAX_ITERATIONS  i  numRemoved_  type  
[BugLab_Argument_Swapping]^traverseFunction ( scope, n ) ;^142^^^^^127^157^traverseFunction ( n, scope ) ;^[CLASS] RemoveUnusedVars  [METHOD] traverseNode [RETURN_TYPE] void   Node n Node parent Scope scope [VARIABLES] AbstractCompiler  compiler  compiler_  boolean  preserveAnonymousFunctionNames  removeGlobals  Set  referenced  warnedVars_  Scope  scope  Var  var  Node  c  n  parent  Logger  logger_  int  MAX_ITERATIONS  i  numRemoved_  type  
[BugLab_Variable_Misuse]^for  ( Node c = parent.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  {^157^^^^^142^172^for  ( Node c = n.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  {^[CLASS] RemoveUnusedVars  [METHOD] traverseNode [RETURN_TYPE] void   Node n Node parent Scope scope [VARIABLES] AbstractCompiler  compiler  compiler_  boolean  preserveAnonymousFunctionNames  removeGlobals  Set  referenced  warnedVars_  Scope  scope  Var  var  Node  c  n  parent  Logger  logger_  int  MAX_ITERATIONS  i  numRemoved_  type  
[BugLab_Variable_Misuse]^for  ( Node parent = n.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  {^157^^^^^142^172^for  ( Node c = n.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  {^[CLASS] RemoveUnusedVars  [METHOD] traverseNode [RETURN_TYPE] void   Node n Node parent Scope scope [VARIABLES] AbstractCompiler  compiler  compiler_  boolean  preserveAnonymousFunctionNames  removeGlobals  Set  referenced  warnedVars_  Scope  scope  Var  var  Node  c  n  parent  Logger  logger_  int  MAX_ITERATIONS  i  numRemoved_  type  
[BugLab_Argument_Swapping]^for  ( Node n = c.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  {^157^^^^^142^172^for  ( Node c = n.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  {^[CLASS] RemoveUnusedVars  [METHOD] traverseNode [RETURN_TYPE] void   Node n Node parent Scope scope [VARIABLES] AbstractCompiler  compiler  compiler_  boolean  preserveAnonymousFunctionNames  removeGlobals  Set  referenced  warnedVars_  Scope  scope  Var  var  Node  c  n  parent  Logger  logger_  int  MAX_ITERATIONS  i  numRemoved_  type  
[BugLab_Wrong_Operator]^for  ( Node c = n.getFirstChild (  ) ; c == null; c = c.getNext (  )  )  {^157^^^^^142^172^for  ( Node c = n.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  {^[CLASS] RemoveUnusedVars  [METHOD] traverseNode [RETURN_TYPE] void   Node n Node parent Scope scope [VARIABLES] AbstractCompiler  compiler  compiler_  boolean  preserveAnonymousFunctionNames  removeGlobals  Set  referenced  warnedVars_  Scope  scope  Var  var  Node  c  n  parent  Logger  logger_  int  MAX_ITERATIONS  i  numRemoved_  type  
[BugLab_Variable_Misuse]^traverseNode ( parent, n, scope ) ;^158^^^^^143^173^traverseNode ( c, n, scope ) ;^[CLASS] RemoveUnusedVars  [METHOD] traverseNode [RETURN_TYPE] void   Node n Node parent Scope scope [VARIABLES] AbstractCompiler  compiler  compiler_  boolean  preserveAnonymousFunctionNames  removeGlobals  Set  referenced  warnedVars_  Scope  scope  Var  var  Node  c  n  parent  Logger  logger_  int  MAX_ITERATIONS  i  numRemoved_  type  
[BugLab_Variable_Misuse]^traverseNode ( c, parent, scope ) ;^158^^^^^143^173^traverseNode ( c, n, scope ) ;^[CLASS] RemoveUnusedVars  [METHOD] traverseNode [RETURN_TYPE] void   Node n Node parent Scope scope [VARIABLES] AbstractCompiler  compiler  compiler_  boolean  preserveAnonymousFunctionNames  removeGlobals  Set  referenced  warnedVars_  Scope  scope  Var  var  Node  c  n  parent  Logger  logger_  int  MAX_ITERATIONS  i  numRemoved_  type  
[BugLab_Argument_Swapping]^traverseNode ( scope, n, c ) ;^158^^^^^143^173^traverseNode ( c, n, scope ) ;^[CLASS] RemoveUnusedVars  [METHOD] traverseNode [RETURN_TYPE] void   Node n Node parent Scope scope [VARIABLES] AbstractCompiler  compiler  compiler_  boolean  preserveAnonymousFunctionNames  removeGlobals  Set  referenced  warnedVars_  Scope  scope  Var  var  Node  c  n  parent  Logger  logger_  int  MAX_ITERATIONS  i  numRemoved_  type  
[BugLab_Argument_Swapping]^traverseNode ( n, c, scope ) ;^158^^^^^143^173^traverseNode ( c, n, scope ) ;^[CLASS] RemoveUnusedVars  [METHOD] traverseNode [RETURN_TYPE] void   Node n Node parent Scope scope [VARIABLES] AbstractCompiler  compiler  compiler_  boolean  preserveAnonymousFunctionNames  removeGlobals  Set  referenced  warnedVars_  Scope  scope  Var  var  Node  c  n  parent  Logger  logger_  int  MAX_ITERATIONS  i  numRemoved_  type  
[BugLab_Variable_Misuse]^Preconditions.checkState ( body.getChildCount (  )  == 3 ) ;^171^^^^^170^183^Preconditions.checkState ( n.getChildCount (  )  == 3 ) ;^[CLASS] RemoveUnusedVars  [METHOD] traverseFunction [RETURN_TYPE] void   Node n Scope scope [VARIABLES] AbstractCompiler  compiler  compiler_  boolean  preserveAnonymousFunctionNames  removeGlobals  Set  referenced  warnedVars_  Scope  fnScope  scope  Node  body  n  Logger  logger_  int  MAX_ITERATIONS  i  numRemoved_  type  
[BugLab_Wrong_Operator]^Preconditions.checkState ( n.getChildCount (  )  >= 3 ) ;^171^^^^^170^183^Preconditions.checkState ( n.getChildCount (  )  == 3 ) ;^[CLASS] RemoveUnusedVars  [METHOD] traverseFunction [RETURN_TYPE] void   Node n Scope scope [VARIABLES] AbstractCompiler  compiler  compiler_  boolean  preserveAnonymousFunctionNames  removeGlobals  Set  referenced  warnedVars_  Scope  fnScope  scope  Node  body  n  Logger  logger_  int  MAX_ITERATIONS  i  numRemoved_  type  
[BugLab_Wrong_Literal]^Preconditions.checkState ( n.getChildCount (  )  == i ) ;^171^^^^^170^183^Preconditions.checkState ( n.getChildCount (  )  == 3 ) ;^[CLASS] RemoveUnusedVars  [METHOD] traverseFunction [RETURN_TYPE] void   Node n Scope scope [VARIABLES] AbstractCompiler  compiler  compiler_  boolean  preserveAnonymousFunctionNames  removeGlobals  Set  referenced  warnedVars_  Scope  fnScope  scope  Node  body  n  Logger  logger_  int  MAX_ITERATIONS  i  numRemoved_  type  
[BugLab_Variable_Misuse]^Preconditions.checkState ( body.getType (  )  == Token.FUNCTION ) ;^172^^^^^170^183^Preconditions.checkState ( n.getType (  )  == Token.FUNCTION ) ;^[CLASS] RemoveUnusedVars  [METHOD] traverseFunction [RETURN_TYPE] void   Node n Scope scope [VARIABLES] AbstractCompiler  compiler  compiler_  boolean  preserveAnonymousFunctionNames  removeGlobals  Set  referenced  warnedVars_  Scope  fnScope  scope  Node  body  n  Logger  logger_  int  MAX_ITERATIONS  i  numRemoved_  type  
[BugLab_Wrong_Operator]^Preconditions.checkState ( n.getType (  )  > Token.FUNCTION ) ;^172^^^^^170^183^Preconditions.checkState ( n.getType (  )  == Token.FUNCTION ) ;^[CLASS] RemoveUnusedVars  [METHOD] traverseFunction [RETURN_TYPE] void   Node n Scope scope [VARIABLES] AbstractCompiler  compiler  compiler_  boolean  preserveAnonymousFunctionNames  removeGlobals  Set  referenced  warnedVars_  Scope  fnScope  scope  Node  body  n  Logger  logger_  int  MAX_ITERATIONS  i  numRemoved_  type  
[BugLab_Variable_Misuse]^final Node body = body.getLastChild (  ) ;^174^^^^^170^183^final Node body = n.getLastChild (  ) ;^[CLASS] RemoveUnusedVars  [METHOD] traverseFunction [RETURN_TYPE] void   Node n Scope scope [VARIABLES] AbstractCompiler  compiler  compiler_  boolean  preserveAnonymousFunctionNames  removeGlobals  Set  referenced  warnedVars_  Scope  fnScope  scope  Node  body  n  Logger  logger_  int  MAX_ITERATIONS  i  numRemoved_  type  
[BugLab_Wrong_Operator]^Preconditions.checkState ( body.getNext (  )  == null || body.getType (  )  == Token.BLOCK ) ;^175^176^^^^170^183^Preconditions.checkState ( body.getNext (  )  == null && body.getType (  )  == Token.BLOCK ) ;^[CLASS] RemoveUnusedVars  [METHOD] traverseFunction [RETURN_TYPE] void   Node n Scope scope [VARIABLES] AbstractCompiler  compiler  compiler_  boolean  preserveAnonymousFunctionNames  removeGlobals  Set  referenced  warnedVars_  Scope  fnScope  scope  Node  body  n  Logger  logger_  int  MAX_ITERATIONS  i  numRemoved_  type  
[BugLab_Wrong_Operator]^Preconditions.checkState ( body.getNext (  )  != null && body.getType (  )  == Token.BLOCK ) ;^175^176^^^^170^183^Preconditions.checkState ( body.getNext (  )  == null && body.getType (  )  == Token.BLOCK ) ;^[CLASS] RemoveUnusedVars  [METHOD] traverseFunction [RETURN_TYPE] void   Node n Scope scope [VARIABLES] AbstractCompiler  compiler  compiler_  boolean  preserveAnonymousFunctionNames  removeGlobals  Set  referenced  warnedVars_  Scope  fnScope  scope  Node  body  n  Logger  logger_  int  MAX_ITERATIONS  i  numRemoved_  type  
[BugLab_Variable_Misuse]^Preconditions.checkState ( n.getNext (  )  == null && body.getType (  )  == Token.BLOCK ) ;^175^176^^^^170^183^Preconditions.checkState ( body.getNext (  )  == null && body.getType (  )  == Token.BLOCK ) ;^[CLASS] RemoveUnusedVars  [METHOD] traverseFunction [RETURN_TYPE] void   Node n Scope scope [VARIABLES] AbstractCompiler  compiler  compiler_  boolean  preserveAnonymousFunctionNames  removeGlobals  Set  referenced  warnedVars_  Scope  fnScope  scope  Node  body  n  Logger  logger_  int  MAX_ITERATIONS  i  numRemoved_  type  
[BugLab_Variable_Misuse]^Scope fnScope = new SyntacticScopeCreator ( compiler ) .createScope ( n, scope ) ;^178^^^^^170^183^Scope fnScope = new SyntacticScopeCreator ( compiler_ ) .createScope ( n, scope ) ;^[CLASS] RemoveUnusedVars  [METHOD] traverseFunction [RETURN_TYPE] void   Node n Scope scope [VARIABLES] AbstractCompiler  compiler  compiler_  boolean  preserveAnonymousFunctionNames  removeGlobals  Set  referenced  warnedVars_  Scope  fnScope  scope  Node  body  n  Logger  logger_  int  MAX_ITERATIONS  i  numRemoved_  type  
[BugLab_Variable_Misuse]^Scope fnScope = bodyew SyntacticScopeCreator ( compiler_ ) .createScope ( n, scope ) ;^178^^^^^170^183^Scope fnScope = new SyntacticScopeCreator ( compiler_ ) .createScope ( n, scope ) ;^[CLASS] RemoveUnusedVars  [METHOD] traverseFunction [RETURN_TYPE] void   Node n Scope scope [VARIABLES] AbstractCompiler  compiler  compiler_  boolean  preserveAnonymousFunctionNames  removeGlobals  Set  referenced  warnedVars_  Scope  fnScope  scope  Node  body  n  Logger  logger_  int  MAX_ITERATIONS  i  numRemoved_  type  
[BugLab_Argument_Swapping]^Scope fnScope = compiler_ew SyntacticScopeCreator ( n ) .createScope ( n, scope ) ;^178^^^^^170^183^Scope fnScope = new SyntacticScopeCreator ( compiler_ ) .createScope ( n, scope ) ;^[CLASS] RemoveUnusedVars  [METHOD] traverseFunction [RETURN_TYPE] void   Node n Scope scope [VARIABLES] AbstractCompiler  compiler  compiler_  boolean  preserveAnonymousFunctionNames  removeGlobals  Set  referenced  warnedVars_  Scope  fnScope  scope  Node  body  n  Logger  logger_  int  MAX_ITERATIONS  i  numRemoved_  type  
[BugLab_Argument_Swapping]^Scope fnScope = new SyntacticScopeCreator ( scope ) .createScope ( n, compiler_ ) ;^178^^^^^170^183^Scope fnScope = new SyntacticScopeCreator ( compiler_ ) .createScope ( n, scope ) ;^[CLASS] RemoveUnusedVars  [METHOD] traverseFunction [RETURN_TYPE] void   Node n Scope scope [VARIABLES] AbstractCompiler  compiler  compiler_  boolean  preserveAnonymousFunctionNames  removeGlobals  Set  referenced  warnedVars_  Scope  fnScope  scope  Node  body  n  Logger  logger_  int  MAX_ITERATIONS  i  numRemoved_  type  
[BugLab_Variable_Misuse]^Scope fnScope = new SyntacticScopeCreator ( compiler_ ) .createScope ( n, fnScope ) ;^178^^^^^170^183^Scope fnScope = new SyntacticScopeCreator ( compiler_ ) .createScope ( n, scope ) ;^[CLASS] RemoveUnusedVars  [METHOD] traverseFunction [RETURN_TYPE] void   Node n Scope scope [VARIABLES] AbstractCompiler  compiler  compiler_  boolean  preserveAnonymousFunctionNames  removeGlobals  Set  referenced  warnedVars_  Scope  fnScope  scope  Node  body  n  Logger  logger_  int  MAX_ITERATIONS  i  numRemoved_  type  
[BugLab_Variable_Misuse]^traverseNode ( n, n, fnScope ) ;^179^^^^^170^183^traverseNode ( body, n, fnScope ) ;^[CLASS] RemoveUnusedVars  [METHOD] traverseFunction [RETURN_TYPE] void   Node n Scope scope [VARIABLES] AbstractCompiler  compiler  compiler_  boolean  preserveAnonymousFunctionNames  removeGlobals  Set  referenced  warnedVars_  Scope  fnScope  scope  Node  body  n  Logger  logger_  int  MAX_ITERATIONS  i  numRemoved_  type  
[BugLab_Variable_Misuse]^traverseNode ( body, body, fnScope ) ;^179^^^^^170^183^traverseNode ( body, n, fnScope ) ;^[CLASS] RemoveUnusedVars  [METHOD] traverseFunction [RETURN_TYPE] void   Node n Scope scope [VARIABLES] AbstractCompiler  compiler  compiler_  boolean  preserveAnonymousFunctionNames  removeGlobals  Set  referenced  warnedVars_  Scope  fnScope  scope  Node  body  n  Logger  logger_  int  MAX_ITERATIONS  i  numRemoved_  type  
[BugLab_Variable_Misuse]^traverseNode ( body, n, scope ) ;^179^^^^^170^183^traverseNode ( body, n, fnScope ) ;^[CLASS] RemoveUnusedVars  [METHOD] traverseFunction [RETURN_TYPE] void   Node n Scope scope [VARIABLES] AbstractCompiler  compiler  compiler_  boolean  preserveAnonymousFunctionNames  removeGlobals  Set  referenced  warnedVars_  Scope  fnScope  scope  Node  body  n  Logger  logger_  int  MAX_ITERATIONS  i  numRemoved_  type  
[BugLab_Argument_Swapping]^traverseNode ( n, body, fnScope ) ;^179^^^^^170^183^traverseNode ( body, n, fnScope ) ;^[CLASS] RemoveUnusedVars  [METHOD] traverseFunction [RETURN_TYPE] void   Node n Scope scope [VARIABLES] AbstractCompiler  compiler  compiler_  boolean  preserveAnonymousFunctionNames  removeGlobals  Set  referenced  warnedVars_  Scope  fnScope  scope  Node  body  n  Logger  logger_  int  MAX_ITERATIONS  i  numRemoved_  type  
[BugLab_Argument_Swapping]^traverseNode ( body, fnScope, n ) ;^179^^^^^170^183^traverseNode ( body, n, fnScope ) ;^[CLASS] RemoveUnusedVars  [METHOD] traverseFunction [RETURN_TYPE] void   Node n Scope scope [VARIABLES] AbstractCompiler  compiler  compiler_  boolean  preserveAnonymousFunctionNames  removeGlobals  Set  referenced  warnedVars_  Scope  fnScope  scope  Node  body  n  Logger  logger_  int  MAX_ITERATIONS  i  numRemoved_  type  
[BugLab_Variable_Misuse]^removeUnreferencedFunctionArgs ( body, fnScope ) ;^181^^^^^170^183^removeUnreferencedFunctionArgs ( n, fnScope ) ;^[CLASS] RemoveUnusedVars  [METHOD] traverseFunction [RETURN_TYPE] void   Node n Scope scope [VARIABLES] AbstractCompiler  compiler  compiler_  boolean  preserveAnonymousFunctionNames  removeGlobals  Set  referenced  warnedVars_  Scope  fnScope  scope  Node  body  n  Logger  logger_  int  MAX_ITERATIONS  i  numRemoved_  type  
[BugLab_Argument_Swapping]^removeUnreferencedFunctionArgs ( fnScope, n ) ;^181^^^^^170^183^removeUnreferencedFunctionArgs ( n, fnScope ) ;^[CLASS] RemoveUnusedVars  [METHOD] traverseFunction [RETURN_TYPE] void   Node n Scope scope [VARIABLES] AbstractCompiler  compiler  compiler_  boolean  preserveAnonymousFunctionNames  removeGlobals  Set  referenced  warnedVars_  Scope  fnScope  scope  Node  body  n  Logger  logger_  int  MAX_ITERATIONS  i  numRemoved_  type  
[BugLab_Variable_Misuse]^Node argList = lastArg.getFirstChild (  ) .getNext (  ) ;^193^^^^^191^205^Node argList = function.getFirstChild (  ) .getNext (  ) ;^[CLASS] RemoveUnusedVars  [METHOD] removeUnreferencedFunctionArgs [RETURN_TYPE] void   Node function Scope fnScope [VARIABLES] AbstractCompiler  compiler  compiler_  boolean  preserveAnonymousFunctionNames  removeGlobals  Set  referenced  warnedVars_  Scope  fnScope  Var  var  Node  argList  function  lastArg  Logger  logger_  int  MAX_ITERATIONS  i  numRemoved_  type  
[BugLab_Variable_Misuse]^while  (  ( lastArg = lastArg.getLastChild (  )  )  != null )  {^195^^^^^191^205^while  (  ( lastArg = argList.getLastChild (  )  )  != null )  {^[CLASS] RemoveUnusedVars  [METHOD] removeUnreferencedFunctionArgs [RETURN_TYPE] void   Node function Scope fnScope [VARIABLES] AbstractCompiler  compiler  compiler_  boolean  preserveAnonymousFunctionNames  removeGlobals  Set  referenced  warnedVars_  Scope  fnScope  Var  var  Node  argList  function  lastArg  Logger  logger_  int  MAX_ITERATIONS  i  numRemoved_  type  
[BugLab_Variable_Misuse]^while  (  ( function = argList.getLastChild (  )  )  != null )  {^195^^^^^191^205^while  (  ( lastArg = argList.getLastChild (  )  )  != null )  {^[CLASS] RemoveUnusedVars  [METHOD] removeUnreferencedFunctionArgs [RETURN_TYPE] void   Node function Scope fnScope [VARIABLES] AbstractCompiler  compiler  compiler_  boolean  preserveAnonymousFunctionNames  removeGlobals  Set  referenced  warnedVars_  Scope  fnScope  Var  var  Node  argList  function  lastArg  Logger  logger_  int  MAX_ITERATIONS  i  numRemoved_  type  
[BugLab_Argument_Swapping]^while  (  ( argList = lastArg.getLastChild (  )  )  != null )  {^195^^^^^191^205^while  (  ( lastArg = argList.getLastChild (  )  )  != null )  {^[CLASS] RemoveUnusedVars  [METHOD] removeUnreferencedFunctionArgs [RETURN_TYPE] void   Node function Scope fnScope [VARIABLES] AbstractCompiler  compiler  compiler_  boolean  preserveAnonymousFunctionNames  removeGlobals  Set  referenced  warnedVars_  Scope  fnScope  Var  var  Node  argList  function  lastArg  Logger  logger_  int  MAX_ITERATIONS  i  numRemoved_  type  
[BugLab_Wrong_Operator]^while  (  ( lastArg = argList.getLastChild (  )  )  == null )  {^195^^^^^191^205^while  (  ( lastArg = argList.getLastChild (  )  )  != null )  {^[CLASS] RemoveUnusedVars  [METHOD] removeUnreferencedFunctionArgs [RETURN_TYPE] void   Node function Scope fnScope [VARIABLES] AbstractCompiler  compiler  compiler_  boolean  preserveAnonymousFunctionNames  removeGlobals  Set  referenced  warnedVars_  Scope  fnScope  Var  var  Node  argList  function  lastArg  Logger  logger_  int  MAX_ITERATIONS  i  numRemoved_  type  
[BugLab_Variable_Misuse]^Var var = fnScope.getVar ( function.getString (  )  ) ;^196^^^^^191^205^Var var = fnScope.getVar ( lastArg.getString (  )  ) ;^[CLASS] RemoveUnusedVars  [METHOD] removeUnreferencedFunctionArgs [RETURN_TYPE] void   Node function Scope fnScope [VARIABLES] AbstractCompiler  compiler  compiler_  boolean  preserveAnonymousFunctionNames  removeGlobals  Set  referenced  warnedVars_  Scope  fnScope  Var  var  Node  argList  function  lastArg  Logger  logger_  int  MAX_ITERATIONS  i  numRemoved_  type  
[BugLab_Argument_Swapping]^Var var = lastArg.getVar ( fnScope.getString (  )  ) ;^196^^^^^191^205^Var var = fnScope.getVar ( lastArg.getString (  )  ) ;^[CLASS] RemoveUnusedVars  [METHOD] removeUnreferencedFunctionArgs [RETURN_TYPE] void   Node function Scope fnScope [VARIABLES] AbstractCompiler  compiler  compiler_  boolean  preserveAnonymousFunctionNames  removeGlobals  Set  referenced  warnedVars_  Scope  fnScope  Var  var  Node  argList  function  lastArg  Logger  logger_  int  MAX_ITERATIONS  i  numRemoved_  type  
[BugLab_Variable_Misuse]^argList.removeChild ( function ) ;^198^^^^^191^205^argList.removeChild ( lastArg ) ;^[CLASS] RemoveUnusedVars  [METHOD] removeUnreferencedFunctionArgs [RETURN_TYPE] void   Node function Scope fnScope [VARIABLES] AbstractCompiler  compiler  compiler_  boolean  preserveAnonymousFunctionNames  removeGlobals  Set  referenced  warnedVars_  Scope  fnScope  Var  var  Node  argList  function  lastArg  Logger  logger_  int  MAX_ITERATIONS  i  numRemoved_  type  
[BugLab_Argument_Swapping]^if  ( var.contains ( referenced )  )  {^211^^^^^210^226^if  ( referenced.contains ( var )  )  {^[CLASS] RemoveUnusedVars  [METHOD] markReferencedVar [RETURN_TYPE] void   Var var [VARIABLES] AbstractCompiler  compiler  compiler_  boolean  preserveAnonymousFunctionNames  removeGlobals  Set  referenced  warnedVars_  Var  var  Node  parent  Logger  logger_  int  MAX_ITERATIONS  i  numRemoved_  type  
[BugLab_Wrong_Operator]^if  ( parent.getType (  )  == Token.FUNCTION || var.getInitialValue (  )  != var.scope.getRootNode (  )  )  {^218^219^^^^210^226^if  ( parent.getType (  )  == Token.FUNCTION && var.getInitialValue (  )  != var.scope.getRootNode (  )  )  {^[CLASS] RemoveUnusedVars  [METHOD] markReferencedVar [RETURN_TYPE] void   Var var [VARIABLES] AbstractCompiler  compiler  compiler_  boolean  preserveAnonymousFunctionNames  removeGlobals  Set  referenced  warnedVars_  Var  var  Node  parent  Logger  logger_  int  MAX_ITERATIONS  i  numRemoved_  type  
[BugLab_Wrong_Operator]^if  ( parent.getType (  )  < Token.FUNCTION && var.getInitialValue (  )  != var.scope.getRootNode (  )  )  {^218^219^^^^210^226^if  ( parent.getType (  )  == Token.FUNCTION && var.getInitialValue (  )  != var.scope.getRootNode (  )  )  {^[CLASS] RemoveUnusedVars  [METHOD] markReferencedVar [RETURN_TYPE] void   Var var [VARIABLES] AbstractCompiler  compiler  compiler_  boolean  preserveAnonymousFunctionNames  removeGlobals  Set  referenced  warnedVars_  Var  var  Node  parent  Logger  logger_  int  MAX_ITERATIONS  i  numRemoved_  type  
[BugLab_Wrong_Operator]^if  ( parent.getType (  )  == Token.FUNCTION && var.getInitialValue (  )  == var.scope.getRootNode (  )  )  {^218^219^^^^210^226^if  ( parent.getType (  )  == Token.FUNCTION && var.getInitialValue (  )  != var.scope.getRootNode (  )  )  {^[CLASS] RemoveUnusedVars  [METHOD] markReferencedVar [RETURN_TYPE] void   Var var [VARIABLES] AbstractCompiler  compiler  compiler_  boolean  preserveAnonymousFunctionNames  removeGlobals  Set  referenced  warnedVars_  Var  var  Node  parent  Logger  logger_  int  MAX_ITERATIONS  i  numRemoved_  type  
[BugLab_Variable_Misuse]^CodingConvention convention = compiler.getCodingConvention (  ) ;^232^^^^^217^247^CodingConvention convention = compiler_.getCodingConvention (  ) ;^[CLASS] RemoveUnusedVars  [METHOD] removeUnreferencedVars [RETURN_TYPE] void   Scope scope [VARIABLES] AbstractCompiler  compiler  compiler_  boolean  preserveAnonymousFunctionNames  removeGlobals  Set  referenced  warnedVars_  Scope  scope  Var  var  CodingConvention  convention  Node  nameNode  parent  toRemove  Iterator  it  String  inputName  Logger  logger_  int  MAX_ITERATIONS  i  numRemoved_  type  
[BugLab_Wrong_Operator]^if  ( !referenced.contains ( var )  || ( var.isLocal (  )  || !convention.isExported ( var.name )  )  )  {^237^238^^^^222^252^if  ( !referenced.contains ( var )  && ( var.isLocal (  )  || !convention.isExported ( var.name )  )  )  {^[CLASS] RemoveUnusedVars  [METHOD] removeUnreferencedVars [RETURN_TYPE] void   Scope scope [VARIABLES] AbstractCompiler  compiler  compiler_  boolean  preserveAnonymousFunctionNames  removeGlobals  Set  referenced  warnedVars_  Scope  scope  Var  var  CodingConvention  convention  Node  nameNode  parent  toRemove  Iterator  it  String  inputName  Logger  logger_  int  MAX_ITERATIONS  i  numRemoved_  type  
[BugLab_Wrong_Operator]^if  ( !referenced.contains ( var )  && ( var.isLocal (  )  && !convention.isExported ( var.name )  )  )  {^237^238^^^^222^252^if  ( !referenced.contains ( var )  && ( var.isLocal (  )  || !convention.isExported ( var.name )  )  )  {^[CLASS] RemoveUnusedVars  [METHOD] removeUnreferencedVars [RETURN_TYPE] void   Scope scope [VARIABLES] AbstractCompiler  compiler  compiler_  boolean  preserveAnonymousFunctionNames  removeGlobals  Set  referenced  warnedVars_  Scope  scope  Var  var  CodingConvention  convention  Node  nameNode  parent  toRemove  Iterator  it  String  inputName  Logger  logger_  int  MAX_ITERATIONS  i  numRemoved_  type  
[BugLab_Wrong_Operator]^if  ( toRemove.getType (  )  == Token.LP || parent.getType (  )  == Token.FUNCTION )  {^252^253^^^^237^267^if  ( toRemove.getType (  )  == Token.LP && parent.getType (  )  == Token.FUNCTION )  {^[CLASS] RemoveUnusedVars  [METHOD] removeUnreferencedVars [RETURN_TYPE] void   Scope scope [VARIABLES] AbstractCompiler  compiler  compiler_  boolean  preserveAnonymousFunctionNames  removeGlobals  Set  referenced  warnedVars_  Scope  scope  Var  var  CodingConvention  convention  Node  nameNode  parent  toRemove  Iterator  it  String  inputName  Logger  logger_  int  MAX_ITERATIONS  i  numRemoved_  type  
[BugLab_Wrong_Operator]^if  ( toRemove.getType (  )  >= Token.LP && parent.getType (  )  == Token.FUNCTION )  {^252^253^^^^237^267^if  ( toRemove.getType (  )  == Token.LP && parent.getType (  )  == Token.FUNCTION )  {^[CLASS] RemoveUnusedVars  [METHOD] removeUnreferencedVars [RETURN_TYPE] void   Scope scope [VARIABLES] AbstractCompiler  compiler  compiler_  boolean  preserveAnonymousFunctionNames  removeGlobals  Set  referenced  warnedVars_  Scope  scope  Var  var  CodingConvention  convention  Node  nameNode  parent  toRemove  Iterator  it  String  inputName  Logger  logger_  int  MAX_ITERATIONS  i  numRemoved_  type  
[BugLab_Wrong_Operator]^if  ( toRemove.getType (  )  != Token.LP && parent.getType (  )  == Token.FUNCTION )  {^252^253^^^^237^267^if  ( toRemove.getType (  )  == Token.LP && parent.getType (  )  == Token.FUNCTION )  {^[CLASS] RemoveUnusedVars  [METHOD] removeUnreferencedVars [RETURN_TYPE] void   Scope scope [VARIABLES] AbstractCompiler  compiler  compiler_  boolean  preserveAnonymousFunctionNames  removeGlobals  Set  referenced  warnedVars_  Scope  scope  Var  var  CodingConvention  convention  Node  nameNode  parent  toRemove  Iterator  it  String  inputName  Logger  logger_  int  MAX_ITERATIONS  i  numRemoved_  type  
[BugLab_Wrong_Operator]^if  ( toRemove.getType (  )  < Token.LP && parent.getType (  )  == Token.FUNCTION )  {^252^253^^^^237^267^if  ( toRemove.getType (  )  == Token.LP && parent.getType (  )  == Token.FUNCTION )  {^[CLASS] RemoveUnusedVars  [METHOD] removeUnreferencedVars [RETURN_TYPE] void   Scope scope [VARIABLES] AbstractCompiler  compiler  compiler_  boolean  preserveAnonymousFunctionNames  removeGlobals  Set  referenced  warnedVars_  Scope  scope  Var  var  CodingConvention  convention  Node  nameNode  parent  toRemove  Iterator  it  String  inputName  Logger  logger_  int  MAX_ITERATIONS  i  numRemoved_  type  
[BugLab_Wrong_Operator]^} else if  ( toRemove.getType (  )  == Token.FUNCTION || NodeUtil.isFunctionAnonymous ( toRemove )  )  {^256^257^^^^241^271^} else if  ( toRemove.getType (  )  == Token.FUNCTION && NodeUtil.isFunctionAnonymous ( toRemove )  )  {^[CLASS] RemoveUnusedVars  [METHOD] removeUnreferencedVars [RETURN_TYPE] void   Scope scope [VARIABLES] AbstractCompiler  compiler  compiler_  boolean  preserveAnonymousFunctionNames  removeGlobals  Set  referenced  warnedVars_  Scope  scope  Var  var  CodingConvention  convention  Node  nameNode  parent  toRemove  Iterator  it  String  inputName  Logger  logger_  int  MAX_ITERATIONS  i  numRemoved_  type  
[BugLab_Wrong_Operator]^} else if  ( toRemove.getType (  )  != Token.FUNCTION && NodeUtil.isFunctionAnonymous ( toRemove )  )  {^256^257^^^^241^271^} else if  ( toRemove.getType (  )  == Token.FUNCTION && NodeUtil.isFunctionAnonymous ( toRemove )  )  {^[CLASS] RemoveUnusedVars  [METHOD] removeUnreferencedVars [RETURN_TYPE] void   Scope scope [VARIABLES] AbstractCompiler  compiler  compiler_  boolean  preserveAnonymousFunctionNames  removeGlobals  Set  referenced  warnedVars_  Scope  scope  Var  var  CodingConvention  convention  Node  nameNode  parent  toRemove  Iterator  it  String  inputName  Logger  logger_  int  MAX_ITERATIONS  i  numRemoved_  type  
[BugLab_Wrong_Operator]^} else if  ( toRemove.getType (  )  >= Token.FUNCTION && NodeUtil.isFunctionAnonymous ( toRemove )  )  {^256^257^^^^241^271^} else if  ( toRemove.getType (  )  == Token.FUNCTION && NodeUtil.isFunctionAnonymous ( toRemove )  )  {^[CLASS] RemoveUnusedVars  [METHOD] removeUnreferencedVars [RETURN_TYPE] void   Scope scope [VARIABLES] AbstractCompiler  compiler  compiler_  boolean  preserveAnonymousFunctionNames  removeGlobals  Set  referenced  warnedVars_  Scope  scope  Var  var  CodingConvention  convention  Node  nameNode  parent  toRemove  Iterator  it  String  inputName  Logger  logger_  int  MAX_ITERATIONS  i  numRemoved_  type  
[BugLab_Wrong_Operator]^} else if  ( toRemove.getType (  )  > Token.FUNCTION && NodeUtil.isFunctionAnonymous ( toRemove )  )  {^256^257^^^^241^271^} else if  ( toRemove.getType (  )  == Token.FUNCTION && NodeUtil.isFunctionAnonymous ( toRemove )  )  {^[CLASS] RemoveUnusedVars  [METHOD] removeUnreferencedVars [RETURN_TYPE] void   Scope scope [VARIABLES] AbstractCompiler  compiler  compiler_  boolean  preserveAnonymousFunctionNames  removeGlobals  Set  referenced  warnedVars_  Scope  scope  Var  var  CodingConvention  convention  Node  nameNode  parent  toRemove  Iterator  it  String  inputName  Logger  logger_  int  MAX_ITERATIONS  i  numRemoved_  type  
[BugLab_Wrong_Operator]^} else if  ( parent != null || parent.getType (  )  == Token.FOR && parent.getChildCount (  )  < 4 )  {^263^264^265^^^248^278^} else if  ( parent != null && parent.getType (  )  == Token.FOR && parent.getChildCount (  )  < 4 )  {^[CLASS] RemoveUnusedVars  [METHOD] removeUnreferencedVars [RETURN_TYPE] void   Scope scope [VARIABLES] AbstractCompiler  compiler  compiler_  boolean  preserveAnonymousFunctionNames  removeGlobals  Set  referenced  warnedVars_  Scope  scope  Var  var  CodingConvention  convention  Node  nameNode  parent  toRemove  Iterator  it  String  inputName  Logger  logger_  int  MAX_ITERATIONS  i  numRemoved_  type  
[BugLab_Wrong_Operator]^} else if  ( parent == null && parent.getType (  )  == Token.FOR && parent.getChildCount (  )  < 4 )  {^263^264^265^^^248^278^} else if  ( parent != null && parent.getType (  )  == Token.FOR && parent.getChildCount (  )  < 4 )  {^[CLASS] RemoveUnusedVars  [METHOD] removeUnreferencedVars [RETURN_TYPE] void   Scope scope [VARIABLES] AbstractCompiler  compiler  compiler_  boolean  preserveAnonymousFunctionNames  removeGlobals  Set  referenced  warnedVars_  Scope  scope  Var  var  CodingConvention  convention  Node  nameNode  parent  toRemove  Iterator  it  String  inputName  Logger  logger_  int  MAX_ITERATIONS  i  numRemoved_  type  
[BugLab_Wrong_Operator]^} else if  ( parent != null && parent.getType (  )  != Token.FOR && parent.getChildCount (  )  < 4 )  {^263^264^265^^^248^278^} else if  ( parent != null && parent.getType (  )  == Token.FOR && parent.getChildCount (  )  < 4 )  {^[CLASS] RemoveUnusedVars  [METHOD] removeUnreferencedVars [RETURN_TYPE] void   Scope scope [VARIABLES] AbstractCompiler  compiler  compiler_  boolean  preserveAnonymousFunctionNames  removeGlobals  Set  referenced  warnedVars_  Scope  scope  Var  var  CodingConvention  convention  Node  nameNode  parent  toRemove  Iterator  it  String  inputName  Logger  logger_  int  MAX_ITERATIONS  i  numRemoved_  type  
[BugLab_Wrong_Operator]^} else if  ( parent != null && parent.getType (  )  == Token.FOR && parent.getChildCount (  )  <= 4 )  {^263^264^265^^^248^278^} else if  ( parent != null && parent.getType (  )  == Token.FOR && parent.getChildCount (  )  < 4 )  {^[CLASS] RemoveUnusedVars  [METHOD] removeUnreferencedVars [RETURN_TYPE] void   Scope scope [VARIABLES] AbstractCompiler  compiler  compiler_  boolean  preserveAnonymousFunctionNames  removeGlobals  Set  referenced  warnedVars_  Scope  scope  Var  var  CodingConvention  convention  Node  nameNode  parent  toRemove  Iterator  it  String  inputName  Logger  logger_  int  MAX_ITERATIONS  i  numRemoved_  type  
[BugLab_Wrong_Operator]^} else if  ( toRemove.getType (  )  == Token.VAR || nameNode.hasChildren (  )  && NodeUtil.mayHaveSideEffects ( nameNode.getFirstChild (  )  )  )  {^267^268^269^^^252^282^} else if  ( toRemove.getType (  )  == Token.VAR && nameNode.hasChildren (  )  && NodeUtil.mayHaveSideEffects ( nameNode.getFirstChild (  )  )  )  {^[CLASS] RemoveUnusedVars  [METHOD] removeUnreferencedVars [RETURN_TYPE] void   Scope scope [VARIABLES] AbstractCompiler  compiler  compiler_  boolean  preserveAnonymousFunctionNames  removeGlobals  Set  referenced  warnedVars_  Scope  scope  Var  var  CodingConvention  convention  Node  nameNode  parent  toRemove  Iterator  it  String  inputName  Logger  logger_  int  MAX_ITERATIONS  i  numRemoved_  type  
[BugLab_Wrong_Operator]^} else if  ( toRemove.getType (  )  != Token.VAR && nameNode.hasChildren (  )  && NodeUtil.mayHaveSideEffects ( nameNode.getFirstChild (  )  )  )  {^267^268^269^^^252^282^} else if  ( toRemove.getType (  )  == Token.VAR && nameNode.hasChildren (  )  && NodeUtil.mayHaveSideEffects ( nameNode.getFirstChild (  )  )  )  {^[CLASS] RemoveUnusedVars  [METHOD] removeUnreferencedVars [RETURN_TYPE] void   Scope scope [VARIABLES] AbstractCompiler  compiler  compiler_  boolean  preserveAnonymousFunctionNames  removeGlobals  Set  referenced  warnedVars_  Scope  scope  Var  var  CodingConvention  convention  Node  nameNode  parent  toRemove  Iterator  it  String  inputName  Logger  logger_  int  MAX_ITERATIONS  i  numRemoved_  type  
[BugLab_Wrong_Operator]^} else if  ( toRemove.getType (  )  <= Token.VAR && nameNode.hasChildren (  )  && NodeUtil.mayHaveSideEffects ( nameNode.getFirstChild (  )  )  )  {^267^268^269^^^252^282^} else if  ( toRemove.getType (  )  == Token.VAR && nameNode.hasChildren (  )  && NodeUtil.mayHaveSideEffects ( nameNode.getFirstChild (  )  )  )  {^[CLASS] RemoveUnusedVars  [METHOD] removeUnreferencedVars [RETURN_TYPE] void   Scope scope [VARIABLES] AbstractCompiler  compiler  compiler_  boolean  preserveAnonymousFunctionNames  removeGlobals  Set  referenced  warnedVars_  Scope  scope  Var  var  CodingConvention  convention  Node  nameNode  parent  toRemove  Iterator  it  String  inputName  Logger  logger_  int  MAX_ITERATIONS  i  numRemoved_  type  
[BugLab_Wrong_Operator]^} else if  ( toRemove.getType (  )  == Token.VAR || toRemove.getChildCount (  )  > 1 )  {^289^290^^^^274^304^} else if  ( toRemove.getType (  )  == Token.VAR && toRemove.getChildCount (  )  > 1 )  {^[CLASS] RemoveUnusedVars  [METHOD] removeUnreferencedVars [RETURN_TYPE] void   Scope scope [VARIABLES] AbstractCompiler  compiler  compiler_  boolean  preserveAnonymousFunctionNames  removeGlobals  Set  referenced  warnedVars_  Scope  scope  Var  var  CodingConvention  convention  Node  nameNode  parent  toRemove  Iterator  it  String  inputName  Logger  logger_  int  MAX_ITERATIONS  i  numRemoved_  type  
[BugLab_Wrong_Operator]^} else if  ( toRemove.getType (  )  != Token.VAR && toRemove.getChildCount (  )  > 1 )  {^289^290^^^^274^304^} else if  ( toRemove.getType (  )  == Token.VAR && toRemove.getChildCount (  )  > 1 )  {^[CLASS] RemoveUnusedVars  [METHOD] removeUnreferencedVars [RETURN_TYPE] void   Scope scope [VARIABLES] AbstractCompiler  compiler  compiler_  boolean  preserveAnonymousFunctionNames  removeGlobals  Set  referenced  warnedVars_  Scope  scope  Var  var  CodingConvention  convention  Node  nameNode  parent  toRemove  Iterator  it  String  inputName  Logger  logger_  int  MAX_ITERATIONS  i  numRemoved_  type  
[BugLab_Wrong_Operator]^} else if  ( toRemove.getType (  )  == Token.VAR && toRemove.getChildCount (  )  >= 1 )  {^289^290^^^^274^304^} else if  ( toRemove.getType (  )  == Token.VAR && toRemove.getChildCount (  )  > 1 )  {^[CLASS] RemoveUnusedVars  [METHOD] removeUnreferencedVars [RETURN_TYPE] void   Scope scope [VARIABLES] AbstractCompiler  compiler  compiler_  boolean  preserveAnonymousFunctionNames  removeGlobals  Set  referenced  warnedVars_  Scope  scope  Var  var  CodingConvention  convention  Node  nameNode  parent  toRemove  Iterator  it  String  inputName  Logger  logger_  int  MAX_ITERATIONS  i  numRemoved_  type  
[BugLab_Wrong_Literal]^} else if  ( toRemove.getType (  )  == Token.VAR && toRemove.getChildCount (  )  > numRemoved_ )  {^289^290^^^^274^304^} else if  ( toRemove.getType (  )  == Token.VAR && toRemove.getChildCount (  )  > 1 )  {^[CLASS] RemoveUnusedVars  [METHOD] removeUnreferencedVars [RETURN_TYPE] void   Scope scope [VARIABLES] AbstractCompiler  compiler  compiler_  boolean  preserveAnonymousFunctionNames  removeGlobals  Set  referenced  warnedVars_  Scope  scope  Var  var  CodingConvention  convention  Node  nameNode  parent  toRemove  Iterator  it  String  inputName  Logger  logger_  int  MAX_ITERATIONS  i  numRemoved_  type  
[BugLab_Variable_Misuse]^} else if  ( nameNode != null )  {^295^^^^^280^310^} else if  ( parent != null )  {^[CLASS] RemoveUnusedVars  [METHOD] removeUnreferencedVars [RETURN_TYPE] void   Scope scope [VARIABLES] AbstractCompiler  compiler  compiler_  boolean  preserveAnonymousFunctionNames  removeGlobals  Set  referenced  warnedVars_  Scope  scope  Var  var  CodingConvention  convention  Node  nameNode  parent  toRemove  Iterator  it  String  inputName  Logger  logger_  int  MAX_ITERATIONS  i  numRemoved_  type  
[BugLab_Wrong_Operator]^} else if  ( parent == null )  {^295^^^^^280^310^} else if  ( parent != null )  {^[CLASS] RemoveUnusedVars  [METHOD] removeUnreferencedVars [RETURN_TYPE] void   Scope scope [VARIABLES] AbstractCompiler  compiler  compiler_  boolean  preserveAnonymousFunctionNames  removeGlobals  Set  referenced  warnedVars_  Scope  scope  Var  var  CodingConvention  convention  Node  nameNode  parent  toRemove  Iterator  it  String  inputName  Logger  logger_  int  MAX_ITERATIONS  i  numRemoved_  type  
[BugLab_Variable_Misuse]^NodeUtil.removeChild ( nameNode, toRemove ) ;^296^^^^^281^311^NodeUtil.removeChild ( parent, toRemove ) ;^[CLASS] RemoveUnusedVars  [METHOD] removeUnreferencedVars [RETURN_TYPE] void   Scope scope [VARIABLES] AbstractCompiler  compiler  compiler_  boolean  preserveAnonymousFunctionNames  removeGlobals  Set  referenced  warnedVars_  Scope  scope  Var  var  CodingConvention  convention  Node  nameNode  parent  toRemove  Iterator  it  String  inputName  Logger  logger_  int  MAX_ITERATIONS  i  numRemoved_  type  
[BugLab_Variable_Misuse]^NodeUtil.removeChild ( parent, nameNode ) ;^296^^^^^281^311^NodeUtil.removeChild ( parent, toRemove ) ;^[CLASS] RemoveUnusedVars  [METHOD] removeUnreferencedVars [RETURN_TYPE] void   Scope scope [VARIABLES] AbstractCompiler  compiler  compiler_  boolean  preserveAnonymousFunctionNames  removeGlobals  Set  referenced  warnedVars_  Scope  scope  Var  var  CodingConvention  convention  Node  nameNode  parent  toRemove  Iterator  it  String  inputName  Logger  logger_  int  MAX_ITERATIONS  i  numRemoved_  type  
[BugLab_Argument_Swapping]^NodeUtil.removeChild ( toRemove, parent ) ;^296^^^^^281^311^NodeUtil.removeChild ( parent, toRemove ) ;^[CLASS] RemoveUnusedVars  [METHOD] removeUnreferencedVars [RETURN_TYPE] void   Scope scope [VARIABLES] AbstractCompiler  compiler  compiler_  boolean  preserveAnonymousFunctionNames  removeGlobals  Set  referenced  warnedVars_  Scope  scope  Var  var  CodingConvention  convention  Node  nameNode  parent  toRemove  Iterator  it  String  inputName  Logger  logger_  int  MAX_ITERATIONS  i  numRemoved_  type  
[BugLab_Variable_Misuse]^toRemove.removeChild ( parent ) ;^293^^^^^289^298^toRemove.removeChild ( nameNode ) ;^[CLASS] RemoveUnusedVars  [METHOD] removeUnreferencedVars [RETURN_TYPE] void   Scope scope [VARIABLES] AbstractCompiler  compiler  compiler_  boolean  preserveAnonymousFunctionNames  removeGlobals  Set  referenced  warnedVars_  Scope  scope  Var  var  CodingConvention  convention  Node  nameNode  parent  toRemove  Iterator  it  String  inputName  Logger  logger_  int  MAX_ITERATIONS  i  numRemoved_  type  
[BugLab_Variable_Misuse]^toRemove.removeChild ( parent ) ;^293^^^^^278^308^toRemove.removeChild ( nameNode ) ;^[CLASS] RemoveUnusedVars  [METHOD] removeUnreferencedVars [RETURN_TYPE] void   Scope scope [VARIABLES] AbstractCompiler  compiler  compiler_  boolean  preserveAnonymousFunctionNames  removeGlobals  Set  referenced  warnedVars_  Scope  scope  Var  var  CodingConvention  convention  Node  nameNode  parent  toRemove  Iterator  it  String  inputName  Logger  logger_  int  MAX_ITERATIONS  i  numRemoved_  type  
[BugLab_Wrong_Operator]^String inputName = var.input == null ? var.input.getName (  ) : "<unknown>";^272^273^274^^^257^287^String inputName = var.input != null ? var.input.getName (  ) : "<unknown>";^[CLASS] RemoveUnusedVars  [METHOD] removeUnreferencedVars [RETURN_TYPE] void   Scope scope [VARIABLES] AbstractCompiler  compiler  compiler_  boolean  preserveAnonymousFunctionNames  removeGlobals  Set  referenced  warnedVars_  Scope  scope  Var  var  CodingConvention  convention  Node  nameNode  parent  toRemove  Iterator  it  String  inputName  Logger  logger_  int  MAX_ITERATIONS  i  numRemoved_  type  
[BugLab_Wrong_Operator]^logger_.info ( "Unused var " + var.name + " declared in " + inputName + " at line " + toRemove.getLineno (  ^  )  + " may have side effects and can't be removed" ) ;^275^276^277^278^^260^290^logger_.info ( "Unused var " + var.name + " declared in " + inputName + " at line " + toRemove.getLineno (  )  + " may have side effects and can't be removed" ) ;^[CLASS] RemoveUnusedVars  [METHOD] removeUnreferencedVars [RETURN_TYPE] void   Scope scope [VARIABLES] AbstractCompiler  compiler  compiler_  boolean  preserveAnonymousFunctionNames  removeGlobals  Set  referenced  warnedVars_  Scope  scope  Var  var  CodingConvention  convention  Node  nameNode  parent  toRemove  Iterator  it  String  inputName  Logger  logger_  int  MAX_ITERATIONS  i  numRemoved_  type  
[BugLab_Wrong_Operator]^logger_.info ( "Unused var " + var.name + " declared in " + inputName + " at line " + toRemove.getLineno (  &  )  + " may have side effects and can't be removed" ) ;^275^276^277^278^^260^290^logger_.info ( "Unused var " + var.name + " declared in " + inputName + " at line " + toRemove.getLineno (  )  + " may have side effects and can't be removed" ) ;^[CLASS] RemoveUnusedVars  [METHOD] removeUnreferencedVars [RETURN_TYPE] void   Scope scope [VARIABLES] AbstractCompiler  compiler  compiler_  boolean  preserveAnonymousFunctionNames  removeGlobals  Set  referenced  warnedVars_  Scope  scope  Var  var  CodingConvention  convention  Node  nameNode  parent  toRemove  Iterator  it  String  inputName  Logger  logger_  int  MAX_ITERATIONS  i  numRemoved_  type  
[BugLab_Wrong_Operator]^logger_.info ( "Unused var " + var.name + " declared in " + inputName + " at line " + toRemove.getLineno (  >=  )  + " may have side effects and can't be removed" ) ;^275^276^277^278^^260^290^logger_.info ( "Unused var " + var.name + " declared in " + inputName + " at line " + toRemove.getLineno (  )  + " may have side effects and can't be removed" ) ;^[CLASS] RemoveUnusedVars  [METHOD] removeUnreferencedVars [RETURN_TYPE] void   Scope scope [VARIABLES] AbstractCompiler  compiler  compiler_  boolean  preserveAnonymousFunctionNames  removeGlobals  Set  referenced  warnedVars_  Scope  scope  Var  var  CodingConvention  convention  Node  nameNode  parent  toRemove  Iterator  it  String  inputName  Logger  logger_  int  MAX_ITERATIONS  i  numRemoved_  type  
[BugLab_Wrong_Operator]^logger_.info ( "Unused var " + var.name + " declared in " + inputName + " at line " + toRemove.getLineno (  !=  )  + " may have side effects and can't be removed" ) ;^275^276^277^278^^260^290^logger_.info ( "Unused var " + var.name + " declared in " + inputName + " at line " + toRemove.getLineno (  )  + " may have side effects and can't be removed" ) ;^[CLASS] RemoveUnusedVars  [METHOD] removeUnreferencedVars [RETURN_TYPE] void   Scope scope [VARIABLES] AbstractCompiler  compiler  compiler_  boolean  preserveAnonymousFunctionNames  removeGlobals  Set  referenced  warnedVars_  Scope  scope  Var  var  CodingConvention  convention  Node  nameNode  parent  toRemove  Iterator  it  String  inputName  Logger  logger_  int  MAX_ITERATIONS  i  numRemoved_  type  
[BugLab_Wrong_Operator]^logger_.info ( "Unused var " + var.name + " declared in " + inputName + " at line " + toRemove.getLineno (  |  )  + " may have side effects and can't be removed" ) ;^275^276^277^278^^260^290^logger_.info ( "Unused var " + var.name + " declared in " + inputName + " at line " + toRemove.getLineno (  )  + " may have side effects and can't be removed" ) ;^[CLASS] RemoveUnusedVars  [METHOD] removeUnreferencedVars [RETURN_TYPE] void   Scope scope [VARIABLES] AbstractCompiler  compiler  compiler_  boolean  preserveAnonymousFunctionNames  removeGlobals  Set  referenced  warnedVars_  Scope  scope  Var  var  CodingConvention  convention  Node  nameNode  parent  toRemove  Iterator  it  String  inputName  Logger  logger_  int  MAX_ITERATIONS  i  numRemoved_  type  
[BugLab_Wrong_Operator]^logger_.info ( "Unused var "  <=  var.name + " declared in " + inputName + " at line " + toRemove.getLineno (  )  + " may have side effects and can't be removed" ) ;^275^276^277^278^^260^290^logger_.info ( "Unused var " + var.name + " declared in " + inputName + " at line " + toRemove.getLineno (  )  + " may have side effects and can't be removed" ) ;^[CLASS] RemoveUnusedVars  [METHOD] removeUnreferencedVars [RETURN_TYPE] void   Scope scope [VARIABLES] AbstractCompiler  compiler  compiler_  boolean  preserveAnonymousFunctionNames  removeGlobals  Set  referenced  warnedVars_  Scope  scope  Var  var  CodingConvention  convention  Node  nameNode  parent  toRemove  Iterator  it  String  inputName  Logger  logger_  int  MAX_ITERATIONS  i  numRemoved_  type  
[BugLab_Variable_Misuse]^" at line " + parent.getLineno (  )  + " may have side effects and can't be removed" ) ;^277^278^^^^262^292^" at line " + toRemove.getLineno (  )  + " may have side effects and can't be removed" ) ;^[CLASS] RemoveUnusedVars  [METHOD] removeUnreferencedVars [RETURN_TYPE] void   Scope scope [VARIABLES] AbstractCompiler  compiler  compiler_  boolean  preserveAnonymousFunctionNames  removeGlobals  Set  referenced  warnedVars_  Scope  scope  Var  var  CodingConvention  convention  Node  nameNode  parent  toRemove  Iterator  it  String  inputName  Logger  logger_  int  MAX_ITERATIONS  i  numRemoved_  type  
[BugLab_Variable_Misuse]^if  ( nameNode.getChildCount (  )  == 1 )  {^284^^^^^269^299^if  ( toRemove.getChildCount (  )  == 1 )  {^[CLASS] RemoveUnusedVars  [METHOD] removeUnreferencedVars [RETURN_TYPE] void   Scope scope [VARIABLES] AbstractCompiler  compiler  compiler_  boolean  preserveAnonymousFunctionNames  removeGlobals  Set  referenced  warnedVars_  Scope  scope  Var  var  CodingConvention  convention  Node  nameNode  parent  toRemove  Iterator  it  String  inputName  Logger  logger_  int  MAX_ITERATIONS  i  numRemoved_  type  
[BugLab_Wrong_Operator]^if  ( toRemove.getChildCount (  )  >= 1 )  {^284^^^^^269^299^if  ( toRemove.getChildCount (  )  == 1 )  {^[CLASS] RemoveUnusedVars  [METHOD] removeUnreferencedVars [RETURN_TYPE] void   Scope scope [VARIABLES] AbstractCompiler  compiler  compiler_  boolean  preserveAnonymousFunctionNames  removeGlobals  Set  referenced  warnedVars_  Scope  scope  Var  var  CodingConvention  convention  Node  nameNode  parent  toRemove  Iterator  it  String  inputName  Logger  logger_  int  MAX_ITERATIONS  i  numRemoved_  type  
[BugLab_Wrong_Literal]^if  ( toRemove.getChildCount (  )  == i )  {^284^^^^^269^299^if  ( toRemove.getChildCount (  )  == 1 )  {^[CLASS] RemoveUnusedVars  [METHOD] removeUnreferencedVars [RETURN_TYPE] void   Scope scope [VARIABLES] AbstractCompiler  compiler  compiler_  boolean  preserveAnonymousFunctionNames  removeGlobals  Set  referenced  warnedVars_  Scope  scope  Var  var  CodingConvention  convention  Node  nameNode  parent  toRemove  Iterator  it  String  inputName  Logger  logger_  int  MAX_ITERATIONS  i  numRemoved_  type  
[BugLab_Variable_Misuse]^new Node ( Token.EXPR_RESULT, toRemove.removeFirstChild (  )  )  ) ;^286^^^^^271^301^new Node ( Token.EXPR_RESULT, nameNode.removeFirstChild (  )  )  ) ;^[CLASS] RemoveUnusedVars  [METHOD] removeUnreferencedVars [RETURN_TYPE] void   Scope scope [VARIABLES] AbstractCompiler  compiler  compiler_  boolean  preserveAnonymousFunctionNames  removeGlobals  Set  referenced  warnedVars_  Scope  scope  Var  var  CodingConvention  convention  Node  nameNode  parent  toRemove  Iterator  it  String  inputName  Logger  logger_  int  MAX_ITERATIONS  i  numRemoved_  type  
[BugLab_Variable_Misuse]^parent.replaceChild ( nameNode, new Node ( Token.EXPR_RESULT, nameNode.removeFirstChild (  )  )  ) ;^285^286^^^^270^300^parent.replaceChild ( toRemove, new Node ( Token.EXPR_RESULT, nameNode.removeFirstChild (  )  )  ) ;^[CLASS] RemoveUnusedVars  [METHOD] removeUnreferencedVars [RETURN_TYPE] void   Scope scope [VARIABLES] AbstractCompiler  compiler  compiler_  boolean  preserveAnonymousFunctionNames  removeGlobals  Set  referenced  warnedVars_  Scope  scope  Var  var  CodingConvention  convention  Node  nameNode  parent  toRemove  Iterator  it  String  inputName  Logger  logger_  int  MAX_ITERATIONS  i  numRemoved_  type  
[BugLab_Variable_Misuse]^parent.replaceChild ( toRemove, new Node ( Token.EXPR_RESULT, toRemove.removeFirstChild (  )  )  ) ;^285^286^^^^270^300^parent.replaceChild ( toRemove, new Node ( Token.EXPR_RESULT, nameNode.removeFirstChild (  )  )  ) ;^[CLASS] RemoveUnusedVars  [METHOD] removeUnreferencedVars [RETURN_TYPE] void   Scope scope [VARIABLES] AbstractCompiler  compiler  compiler_  boolean  preserveAnonymousFunctionNames  removeGlobals  Set  referenced  warnedVars_  Scope  scope  Var  var  CodingConvention  convention  Node  nameNode  parent  toRemove  Iterator  it  String  inputName  Logger  logger_  int  MAX_ITERATIONS  i  numRemoved_  type  
[BugLab_Wrong_Operator]^logger_.info ( "Unused var " + var.name + " declared in " + inputName + " at line " + toRemove.getLineno (  >  )  + " may have side effects and can't be removed" ) ;^275^276^277^278^^260^290^logger_.info ( "Unused var " + var.name + " declared in " + inputName + " at line " + toRemove.getLineno (  )  + " may have side effects and can't be removed" ) ;^[CLASS] RemoveUnusedVars  [METHOD] removeUnreferencedVars [RETURN_TYPE] void   Scope scope [VARIABLES] AbstractCompiler  compiler  compiler_  boolean  preserveAnonymousFunctionNames  removeGlobals  Set  referenced  warnedVars_  Scope  scope  Var  var  CodingConvention  convention  Node  nameNode  parent  toRemove  Iterator  it  String  inputName  Logger  logger_  int  MAX_ITERATIONS  i  numRemoved_  type  
[BugLab_Wrong_Operator]^logger_.info ( "Unused var " + var.name + " declared in " + inputName + " at line " + toRemove.getLineno (  <  )  + " may have side effects and can't be removed" ) ;^275^276^277^278^^260^290^logger_.info ( "Unused var " + var.name + " declared in " + inputName + " at line " + toRemove.getLineno (  )  + " may have side effects and can't be removed" ) ;^[CLASS] RemoveUnusedVars  [METHOD] removeUnreferencedVars [RETURN_TYPE] void   Scope scope [VARIABLES] AbstractCompiler  compiler  compiler_  boolean  preserveAnonymousFunctionNames  removeGlobals  Set  referenced  warnedVars_  Scope  scope  Var  var  CodingConvention  convention  Node  nameNode  parent  toRemove  Iterator  it  String  inputName  Logger  logger_  int  MAX_ITERATIONS  i  numRemoved_  type  
[BugLab_Wrong_Operator]^logger_.info ( "Unused var " + var.name + " declared in " + inputName + " at line " + toRemove.getLineno (  ||  )  + " may have side effects and can't be removed" ) ;^275^276^277^278^^260^290^logger_.info ( "Unused var " + var.name + " declared in " + inputName + " at line " + toRemove.getLineno (  )  + " may have side effects and can't be removed" ) ;^[CLASS] RemoveUnusedVars  [METHOD] removeUnreferencedVars [RETURN_TYPE] void   Scope scope [VARIABLES] AbstractCompiler  compiler  compiler_  boolean  preserveAnonymousFunctionNames  removeGlobals  Set  referenced  warnedVars_  Scope  scope  Var  var  CodingConvention  convention  Node  nameNode  parent  toRemove  Iterator  it  String  inputName  Logger  logger_  int  MAX_ITERATIONS  i  numRemoved_  type  
[BugLab_Wrong_Operator]^logger_.info ( "Unused var "  <  var.name + " declared in " + inputName + " at line " + toRemove.getLineno (  )  + " may have side effects and can't be removed" ) ;^275^276^277^278^^260^290^logger_.info ( "Unused var " + var.name + " declared in " + inputName + " at line " + toRemove.getLineno (  )  + " may have side effects and can't be removed" ) ;^[CLASS] RemoveUnusedVars  [METHOD] removeUnreferencedVars [RETURN_TYPE] void   Scope scope [VARIABLES] AbstractCompiler  compiler  compiler_  boolean  preserveAnonymousFunctionNames  removeGlobals  Set  referenced  warnedVars_  Scope  scope  Var  var  CodingConvention  convention  Node  nameNode  parent  toRemove  Iterator  it  String  inputName  Logger  logger_  int  MAX_ITERATIONS  i  numRemoved_  type  
[BugLab_Variable_Misuse]^if  ( parent.getChildCount (  )  == 1 )  {^284^^^^^269^299^if  ( toRemove.getChildCount (  )  == 1 )  {^[CLASS] RemoveUnusedVars  [METHOD] removeUnreferencedVars [RETURN_TYPE] void   Scope scope [VARIABLES] AbstractCompiler  compiler  compiler_  boolean  preserveAnonymousFunctionNames  removeGlobals  Set  referenced  warnedVars_  Scope  scope  Var  var  CodingConvention  convention  Node  nameNode  parent  toRemove  Iterator  it  String  inputName  Logger  logger_  int  MAX_ITERATIONS  i  numRemoved_  type  
[BugLab_Wrong_Operator]^logger_.info ( "Unused var " + var.name + " declared in " + inputName + " at line " + toRemove.getLineno (   instanceof   )  + " may have side effects and can't be removed" ) ;^275^276^277^278^^260^290^logger_.info ( "Unused var " + var.name + " declared in " + inputName + " at line " + toRemove.getLineno (  )  + " may have side effects and can't be removed" ) ;^[CLASS] RemoveUnusedVars  [METHOD] removeUnreferencedVars [RETURN_TYPE] void   Scope scope [VARIABLES] AbstractCompiler  compiler  compiler_  boolean  preserveAnonymousFunctionNames  removeGlobals  Set  referenced  warnedVars_  Scope  scope  Var  var  CodingConvention  convention  Node  nameNode  parent  toRemove  Iterator  it  String  inputName  Logger  logger_  int  MAX_ITERATIONS  i  numRemoved_  type  
[BugLab_Wrong_Operator]^logger_.info ( "Unused var " + var.name + " declared in " + inputName + " at line " + toRemove.getLineno (  ==  )  + " may have side effects and can't be removed" ) ;^275^276^277^278^^260^290^logger_.info ( "Unused var " + var.name + " declared in " + inputName + " at line " + toRemove.getLineno (  )  + " may have side effects and can't be removed" ) ;^[CLASS] RemoveUnusedVars  [METHOD] removeUnreferencedVars [RETURN_TYPE] void   Scope scope [VARIABLES] AbstractCompiler  compiler  compiler_  boolean  preserveAnonymousFunctionNames  removeGlobals  Set  referenced  warnedVars_  Scope  scope  Var  var  CodingConvention  convention  Node  nameNode  parent  toRemove  Iterator  it  String  inputName  Logger  logger_  int  MAX_ITERATIONS  i  numRemoved_  type  
[BugLab_Wrong_Operator]^logger_.info ( "Unused var "  ^  var.name + " declared in " + inputName + " at line " + toRemove.getLineno (  )  + " may have side effects and can't be removed" ) ;^275^276^277^278^^260^290^logger_.info ( "Unused var " + var.name + " declared in " + inputName + " at line " + toRemove.getLineno (  )  + " may have side effects and can't be removed" ) ;^[CLASS] RemoveUnusedVars  [METHOD] removeUnreferencedVars [RETURN_TYPE] void   Scope scope [VARIABLES] AbstractCompiler  compiler  compiler_  boolean  preserveAnonymousFunctionNames  removeGlobals  Set  referenced  warnedVars_  Scope  scope  Var  var  CodingConvention  convention  Node  nameNode  parent  toRemove  Iterator  it  String  inputName  Logger  logger_  int  MAX_ITERATIONS  i  numRemoved_  type  
[BugLab_Wrong_Operator]^if  ( toRemove.getChildCount (  )  > 1 )  {^284^^^^^269^299^if  ( toRemove.getChildCount (  )  == 1 )  {^[CLASS] RemoveUnusedVars  [METHOD] removeUnreferencedVars [RETURN_TYPE] void   Scope scope [VARIABLES] AbstractCompiler  compiler  compiler_  boolean  preserveAnonymousFunctionNames  removeGlobals  Set  referenced  warnedVars_  Scope  scope  Var  var  CodingConvention  convention  Node  nameNode  parent  toRemove  Iterator  it  String  inputName  Logger  logger_  int  MAX_ITERATIONS  i  numRemoved_  type  
[BugLab_Wrong_Literal]^if  ( toRemove.getChildCount (  )  == 0 )  {^284^^^^^269^299^if  ( toRemove.getChildCount (  )  == 1 )  {^[CLASS] RemoveUnusedVars  [METHOD] removeUnreferencedVars [RETURN_TYPE] void   Scope scope [VARIABLES] AbstractCompiler  compiler  compiler_  boolean  preserveAnonymousFunctionNames  removeGlobals  Set  referenced  warnedVars_  Scope  scope  Var  var  CodingConvention  convention  Node  nameNode  parent  toRemove  Iterator  it  String  inputName  Logger  logger_  int  MAX_ITERATIONS  i  numRemoved_  type  
[BugLab_Variable_Misuse]^parent.replaceChild ( parent, new Node ( Token.EXPR_RESULT, nameNode.removeFirstChild (  )  )  ) ;^285^286^^^^270^300^parent.replaceChild ( toRemove, new Node ( Token.EXPR_RESULT, nameNode.removeFirstChild (  )  )  ) ;^[CLASS] RemoveUnusedVars  [METHOD] removeUnreferencedVars [RETURN_TYPE] void   Scope scope [VARIABLES] AbstractCompiler  compiler  compiler_  boolean  preserveAnonymousFunctionNames  removeGlobals  Set  referenced  warnedVars_  Scope  scope  Var  var  CodingConvention  convention  Node  nameNode  parent  toRemove  Iterator  it  String  inputName  Logger  logger_  int  MAX_ITERATIONS  i  numRemoved_  type  
[BugLab_Argument_Swapping]^parent.replaceChild ( nameNode, new Node ( Token.EXPR_RESULT, toRemove.removeFirstChild (  )  )  ) ;^285^286^^^^270^300^parent.replaceChild ( toRemove, new Node ( Token.EXPR_RESULT, nameNode.removeFirstChild (  )  )  ) ;^[CLASS] RemoveUnusedVars  [METHOD] removeUnreferencedVars [RETURN_TYPE] void   Scope scope [VARIABLES] AbstractCompiler  compiler  compiler_  boolean  preserveAnonymousFunctionNames  removeGlobals  Set  referenced  warnedVars_  Scope  scope  Var  var  CodingConvention  convention  Node  nameNode  parent  toRemove  Iterator  it  String  inputName  Logger  logger_  int  MAX_ITERATIONS  i  numRemoved_  type  
[BugLab_Wrong_Operator]^} else if  ( toRemove.getType (  )  >= Token.VAR && toRemove.getChildCount (  )  > 1 )  {^289^290^^^^274^304^} else if  ( toRemove.getType (  )  == Token.VAR && toRemove.getChildCount (  )  > 1 )  {^[CLASS] RemoveUnusedVars  [METHOD] removeUnreferencedVars [RETURN_TYPE] void   Scope scope [VARIABLES] AbstractCompiler  compiler  compiler_  boolean  preserveAnonymousFunctionNames  removeGlobals  Set  referenced  warnedVars_  Scope  scope  Var  var  CodingConvention  convention  Node  nameNode  parent  toRemove  Iterator  it  String  inputName  Logger  logger_  int  MAX_ITERATIONS  i  numRemoved_  type  
[BugLab_Wrong_Literal]^} else if  ( toRemove.getType (  )  == Token.VAR && toRemove.getChildCount (  )  > i )  {^289^290^^^^274^304^} else if  ( toRemove.getType (  )  == Token.VAR && toRemove.getChildCount (  )  > 1 )  {^[CLASS] RemoveUnusedVars  [METHOD] removeUnreferencedVars [RETURN_TYPE] void   Scope scope [VARIABLES] AbstractCompiler  compiler  compiler_  boolean  preserveAnonymousFunctionNames  removeGlobals  Set  referenced  warnedVars_  Scope  scope  Var  var  CodingConvention  convention  Node  nameNode  parent  toRemove  Iterator  it  String  inputName  Logger  logger_  int  MAX_ITERATIONS  i  numRemoved_  type  
[BugLab_Variable_Misuse]^} else if  ( parent.getType (  )  == Token.VAR && nameNode.hasChildren (  )  && NodeUtil.mayHaveSideEffects ( nameNode.getFirstChild (  )  )  )  {^267^268^269^^^252^282^} else if  ( toRemove.getType (  )  == Token.VAR && nameNode.hasChildren (  )  && NodeUtil.mayHaveSideEffects ( nameNode.getFirstChild (  )  )  )  {^[CLASS] RemoveUnusedVars  [METHOD] removeUnreferencedVars [RETURN_TYPE] void   Scope scope [VARIABLES] AbstractCompiler  compiler  compiler_  boolean  preserveAnonymousFunctionNames  removeGlobals  Set  referenced  warnedVars_  Scope  scope  Var  var  CodingConvention  convention  Node  nameNode  parent  toRemove  Iterator  it  String  inputName  Logger  logger_  int  MAX_ITERATIONS  i  numRemoved_  type  
[BugLab_Variable_Misuse]^nameNode.hasChildren (  )  && NodeUtil.mayHaveSideEffects ( toRemove.getFirstChild (  )  )  )  {^268^269^^^^253^283^nameNode.hasChildren (  )  && NodeUtil.mayHaveSideEffects ( nameNode.getFirstChild (  )  )  )  {^[CLASS] RemoveUnusedVars  [METHOD] removeUnreferencedVars [RETURN_TYPE] void   Scope scope [VARIABLES] AbstractCompiler  compiler  compiler_  boolean  preserveAnonymousFunctionNames  removeGlobals  Set  referenced  warnedVars_  Scope  scope  Var  var  CodingConvention  convention  Node  nameNode  parent  toRemove  Iterator  it  String  inputName  Logger  logger_  int  MAX_ITERATIONS  i  numRemoved_  type  
[BugLab_Variable_Misuse]^NodeUtil.mayHaveSideEffects ( toRemove.getFirstChild (  )  )  )  {^269^^^^^254^284^NodeUtil.mayHaveSideEffects ( nameNode.getFirstChild (  )  )  )  {^[CLASS] RemoveUnusedVars  [METHOD] removeUnreferencedVars [RETURN_TYPE] void   Scope scope [VARIABLES] AbstractCompiler  compiler  compiler_  boolean  preserveAnonymousFunctionNames  removeGlobals  Set  referenced  warnedVars_  Scope  scope  Var  var  CodingConvention  convention  Node  nameNode  parent  toRemove  Iterator  it  String  inputName  Logger  logger_  int  MAX_ITERATIONS  i  numRemoved_  type  
[BugLab_Wrong_Operator]^logger_.info ( "Unused var " + var.name + " declared in " + inputName + " at line " + toRemove.getLineno (  <<  )  + " may have side effects and can't be removed" ) ;^275^276^277^278^^260^290^logger_.info ( "Unused var " + var.name + " declared in " + inputName + " at line " + toRemove.getLineno (  )  + " may have side effects and can't be removed" ) ;^[CLASS] RemoveUnusedVars  [METHOD] removeUnreferencedVars [RETURN_TYPE] void   Scope scope [VARIABLES] AbstractCompiler  compiler  compiler_  boolean  preserveAnonymousFunctionNames  removeGlobals  Set  referenced  warnedVars_  Scope  scope  Var  var  CodingConvention  convention  Node  nameNode  parent  toRemove  Iterator  it  String  inputName  Logger  logger_  int  MAX_ITERATIONS  i  numRemoved_  type  
[BugLab_Wrong_Operator]^logger_.info ( "Unused var "  <<  var.name + " declared in " + inputName + " at line " + toRemove.getLineno (  )  + " may have side effects and can't be removed" ) ;^275^276^277^278^^260^290^logger_.info ( "Unused var " + var.name + " declared in " + inputName + " at line " + toRemove.getLineno (  )  + " may have side effects and can't be removed" ) ;^[CLASS] RemoveUnusedVars  [METHOD] removeUnreferencedVars [RETURN_TYPE] void   Scope scope [VARIABLES] AbstractCompiler  compiler  compiler_  boolean  preserveAnonymousFunctionNames  removeGlobals  Set  referenced  warnedVars_  Scope  scope  Var  var  CodingConvention  convention  Node  nameNode  parent  toRemove  Iterator  it  String  inputName  Logger  logger_  int  MAX_ITERATIONS  i  numRemoved_  type  
[BugLab_Variable_Misuse]^} else if  ( parent.getType (  )  == Token.VAR && toRemove.getChildCount (  )  > 1 )  {^289^290^^^^274^304^} else if  ( toRemove.getType (  )  == Token.VAR && toRemove.getChildCount (  )  > 1 )  {^[CLASS] RemoveUnusedVars  [METHOD] removeUnreferencedVars [RETURN_TYPE] void   Scope scope [VARIABLES] AbstractCompiler  compiler  compiler_  boolean  preserveAnonymousFunctionNames  removeGlobals  Set  referenced  warnedVars_  Scope  scope  Var  var  CodingConvention  convention  Node  nameNode  parent  toRemove  Iterator  it  String  inputName  Logger  logger_  int  MAX_ITERATIONS  i  numRemoved_  type  
[BugLab_Wrong_Operator]^logger_.info ( "Unused var " + var.name + " declared in " + inputName + " at line " + toRemove.getLineno (  &&  )  + " may have side effects and can't be removed" ) ;^275^276^277^278^^260^290^logger_.info ( "Unused var " + var.name + " declared in " + inputName + " at line " + toRemove.getLineno (  )  + " may have side effects and can't be removed" ) ;^[CLASS] RemoveUnusedVars  [METHOD] removeUnreferencedVars [RETURN_TYPE] void   Scope scope [VARIABLES] AbstractCompiler  compiler  compiler_  boolean  preserveAnonymousFunctionNames  removeGlobals  Set  referenced  warnedVars_  Scope  scope  Var  var  CodingConvention  convention  Node  nameNode  parent  toRemove  Iterator  it  String  inputName  Logger  logger_  int  MAX_ITERATIONS  i  numRemoved_  type  
[BugLab_Wrong_Operator]^logger_.info ( "Unused var " + var.name + " declared in " + inputName + " at line " + toRemove.getLineno (  <=  )  + " may have side effects and can't be removed" ) ;^275^276^277^278^^260^290^logger_.info ( "Unused var " + var.name + " declared in " + inputName + " at line " + toRemove.getLineno (  )  + " may have side effects and can't be removed" ) ;^[CLASS] RemoveUnusedVars  [METHOD] removeUnreferencedVars [RETURN_TYPE] void   Scope scope [VARIABLES] AbstractCompiler  compiler  compiler_  boolean  preserveAnonymousFunctionNames  removeGlobals  Set  referenced  warnedVars_  Scope  scope  Var  var  CodingConvention  convention  Node  nameNode  parent  toRemove  Iterator  it  String  inputName  Logger  logger_  int  MAX_ITERATIONS  i  numRemoved_  type  
[BugLab_Wrong_Operator]^if  ( toRemove.getChildCount (  )  != 1 )  {^284^^^^^269^299^if  ( toRemove.getChildCount (  )  == 1 )  {^[CLASS] RemoveUnusedVars  [METHOD] removeUnreferencedVars [RETURN_TYPE] void   Scope scope [VARIABLES] AbstractCompiler  compiler  compiler_  boolean  preserveAnonymousFunctionNames  removeGlobals  Set  referenced  warnedVars_  Scope  scope  Var  var  CodingConvention  convention  Node  nameNode  parent  toRemove  Iterator  it  String  inputName  Logger  logger_  int  MAX_ITERATIONS  i  numRemoved_  type  
[BugLab_Wrong_Literal]^if  ( toRemove.getChildCount (  )  == 2 )  {^284^^^^^269^299^if  ( toRemove.getChildCount (  )  == 1 )  {^[CLASS] RemoveUnusedVars  [METHOD] removeUnreferencedVars [RETURN_TYPE] void   Scope scope [VARIABLES] AbstractCompiler  compiler  compiler_  boolean  preserveAnonymousFunctionNames  removeGlobals  Set  referenced  warnedVars_  Scope  scope  Var  var  CodingConvention  convention  Node  nameNode  parent  toRemove  Iterator  it  String  inputName  Logger  logger_  int  MAX_ITERATIONS  i  numRemoved_  type  
[BugLab_Wrong_Operator]^logger_.info ( "Unused var " + var.name + " declared in " + inputName + " at line " + toRemove.getLineno (  >>  )  + " may have side effects and can't be removed" ) ;^275^276^277^278^^260^290^logger_.info ( "Unused var " + var.name + " declared in " + inputName + " at line " + toRemove.getLineno (  )  + " may have side effects and can't be removed" ) ;^[CLASS] RemoveUnusedVars  [METHOD] removeUnreferencedVars [RETURN_TYPE] void   Scope scope [VARIABLES] AbstractCompiler  compiler  compiler_  boolean  preserveAnonymousFunctionNames  removeGlobals  Set  referenced  warnedVars_  Scope  scope  Var  var  CodingConvention  convention  Node  nameNode  parent  toRemove  Iterator  it  String  inputName  Logger  logger_  int  MAX_ITERATIONS  i  numRemoved_  type  
[BugLab_Wrong_Operator]^logger_.info ( "Unused var "  >>  var.name + " declared in " + inputName + " at line " + toRemove.getLineno (  )  + " may have side effects and can't be removed" ) ;^275^276^277^278^^260^290^logger_.info ( "Unused var " + var.name + " declared in " + inputName + " at line " + toRemove.getLineno (  )  + " may have side effects and can't be removed" ) ;^[CLASS] RemoveUnusedVars  [METHOD] removeUnreferencedVars [RETURN_TYPE] void   Scope scope [VARIABLES] AbstractCompiler  compiler  compiler_  boolean  preserveAnonymousFunctionNames  removeGlobals  Set  referenced  warnedVars_  Scope  scope  Var  var  CodingConvention  convention  Node  nameNode  parent  toRemove  Iterator  it  String  inputName  Logger  logger_  int  MAX_ITERATIONS  i  numRemoved_  type  
[BugLab_Variable_Misuse]^parent.replaceChild ( toRemove, new Node ( Token.EXPR_RESULT, parent.removeFirstChild (  )  )  ) ;^285^286^^^^270^300^parent.replaceChild ( toRemove, new Node ( Token.EXPR_RESULT, nameNode.removeFirstChild (  )  )  ) ;^[CLASS] RemoveUnusedVars  [METHOD] removeUnreferencedVars [RETURN_TYPE] void   Scope scope [VARIABLES] AbstractCompiler  compiler  compiler_  boolean  preserveAnonymousFunctionNames  removeGlobals  Set  referenced  warnedVars_  Scope  scope  Var  var  CodingConvention  convention  Node  nameNode  parent  toRemove  Iterator  it  String  inputName  Logger  logger_  int  MAX_ITERATIONS  i  numRemoved_  type  
[BugLab_Wrong_Operator]^logger_.info ( "Unused var "  &&  var.name + " declared in " + inputName + " at line " + toRemove.getLineno (  )  + " may have side effects and can't be removed" ) ;^275^276^277^278^^260^290^logger_.info ( "Unused var " + var.name + " declared in " + inputName + " at line " + toRemove.getLineno (  )  + " may have side effects and can't be removed" ) ;^[CLASS] RemoveUnusedVars  [METHOD] removeUnreferencedVars [RETURN_TYPE] void   Scope scope [VARIABLES] AbstractCompiler  compiler  compiler_  boolean  preserveAnonymousFunctionNames  removeGlobals  Set  referenced  warnedVars_  Scope  scope  Var  var  CodingConvention  convention  Node  nameNode  parent  toRemove  Iterator  it  String  inputName  Logger  logger_  int  MAX_ITERATIONS  i  numRemoved_  type  
[BugLab_Wrong_Operator]^if  ( toRemove.getChildCount (  )  <= 1 )  {^284^^^^^269^299^if  ( toRemove.getChildCount (  )  == 1 )  {^[CLASS] RemoveUnusedVars  [METHOD] removeUnreferencedVars [RETURN_TYPE] void   Scope scope [VARIABLES] AbstractCompiler  compiler  compiler_  boolean  preserveAnonymousFunctionNames  removeGlobals  Set  referenced  warnedVars_  Scope  scope  Var  var  CodingConvention  convention  Node  nameNode  parent  toRemove  Iterator  it  String  inputName  Logger  logger_  int  MAX_ITERATIONS  i  numRemoved_  type  
[BugLab_Variable_Misuse]^} else if  ( nameNode.getType (  )  == Token.VAR && toRemove.getChildCount (  )  > 1 )  {^289^290^^^^274^304^} else if  ( toRemove.getType (  )  == Token.VAR && toRemove.getChildCount (  )  > 1 )  {^[CLASS] RemoveUnusedVars  [METHOD] removeUnreferencedVars [RETURN_TYPE] void   Scope scope [VARIABLES] AbstractCompiler  compiler  compiler_  boolean  preserveAnonymousFunctionNames  removeGlobals  Set  referenced  warnedVars_  Scope  scope  Var  var  CodingConvention  convention  Node  nameNode  parent  toRemove  Iterator  it  String  inputName  Logger  logger_  int  MAX_ITERATIONS  i  numRemoved_  type  
[BugLab_Wrong_Operator]^} else if  ( toRemove.getType (  )  == Token.VAR && toRemove.getChildCount (  )  < 1 )  {^289^290^^^^274^304^} else if  ( toRemove.getType (  )  == Token.VAR && toRemove.getChildCount (  )  > 1 )  {^[CLASS] RemoveUnusedVars  [METHOD] removeUnreferencedVars [RETURN_TYPE] void   Scope scope [VARIABLES] AbstractCompiler  compiler  compiler_  boolean  preserveAnonymousFunctionNames  removeGlobals  Set  referenced  warnedVars_  Scope  scope  Var  var  CodingConvention  convention  Node  nameNode  parent  toRemove  Iterator  it  String  inputName  Logger  logger_  int  MAX_ITERATIONS  i  numRemoved_  type  
[BugLab_Wrong_Literal]^} else if  ( toRemove.getType (  )  == Token.VAR && toRemove.getChildCount (  )  > 0 )  {^289^290^^^^274^304^} else if  ( toRemove.getType (  )  == Token.VAR && toRemove.getChildCount (  )  > 1 )  {^[CLASS] RemoveUnusedVars  [METHOD] removeUnreferencedVars [RETURN_TYPE] void   Scope scope [VARIABLES] AbstractCompiler  compiler  compiler_  boolean  preserveAnonymousFunctionNames  removeGlobals  Set  referenced  warnedVars_  Scope  scope  Var  var  CodingConvention  convention  Node  nameNode  parent  toRemove  Iterator  it  String  inputName  Logger  logger_  int  MAX_ITERATIONS  i  numRemoved_  type  
[BugLab_Variable_Misuse]^parent.getType (  )  == Token.FOR && toRemove.getChildCount (  )  < 4 )  {^264^265^^^^249^279^parent.getType (  )  == Token.FOR && parent.getChildCount (  )  < 4 )  {^[CLASS] RemoveUnusedVars  [METHOD] removeUnreferencedVars [RETURN_TYPE] void   Scope scope [VARIABLES] AbstractCompiler  compiler  compiler_  boolean  preserveAnonymousFunctionNames  removeGlobals  Set  referenced  warnedVars_  Scope  scope  Var  var  CodingConvention  convention  Node  nameNode  parent  toRemove  Iterator  it  String  inputName  Logger  logger_  int  MAX_ITERATIONS  i  numRemoved_  type  
[BugLab_Variable_Misuse]^if  ( !removeGlobals )  {^258^^^^^243^273^if  ( !preserveAnonymousFunctionNames )  {^[CLASS] RemoveUnusedVars  [METHOD] removeUnreferencedVars [RETURN_TYPE] void   Scope scope [VARIABLES] AbstractCompiler  compiler  compiler_  boolean  preserveAnonymousFunctionNames  removeGlobals  Set  referenced  warnedVars_  Scope  scope  Var  var  CodingConvention  convention  Node  nameNode  parent  toRemove  Iterator  it  String  inputName  Logger  logger_  int  MAX_ITERATIONS  i  numRemoved_  type  
[BugLab_Wrong_Literal]^} else if  ( parent != null && parent.getType (  )  == Token.FOR && parent.getChildCount (  )  < MAX_ITERATIONS )  {^263^264^265^^^248^278^} else if  ( parent != null && parent.getType (  )  == Token.FOR && parent.getChildCount (  )  < 4 )  {^[CLASS] RemoveUnusedVars  [METHOD] removeUnreferencedVars [RETURN_TYPE] void   Scope scope [VARIABLES] AbstractCompiler  compiler  compiler_  boolean  preserveAnonymousFunctionNames  removeGlobals  Set  referenced  warnedVars_  Scope  scope  Var  var  CodingConvention  convention  Node  nameNode  parent  toRemove  Iterator  it  String  inputName  Logger  logger_  int  MAX_ITERATIONS  i  numRemoved_  type  
[BugLab_Wrong_Operator]^} else if  ( toRemove.getType (  )  >= Token.VAR && nameNode.hasChildren (  )  && NodeUtil.mayHaveSideEffects ( nameNode.getFirstChild (  )  )  )  {^267^268^269^^^252^282^} else if  ( toRemove.getType (  )  == Token.VAR && nameNode.hasChildren (  )  && NodeUtil.mayHaveSideEffects ( nameNode.getFirstChild (  )  )  )  {^[CLASS] RemoveUnusedVars  [METHOD] removeUnreferencedVars [RETURN_TYPE] void   Scope scope [VARIABLES] AbstractCompiler  compiler  compiler_  boolean  preserveAnonymousFunctionNames  removeGlobals  Set  referenced  warnedVars_  Scope  scope  Var  var  CodingConvention  convention  Node  nameNode  parent  toRemove  Iterator  it  String  inputName  Logger  logger_  int  MAX_ITERATIONS  i  numRemoved_  type  
[BugLab_Wrong_Operator]^logger_.info ( "Unused var "  |  var.name + " declared in " + inputName + " at line " + toRemove.getLineno (  )  + " may have side effects and can't be removed" ) ;^275^276^277^278^^260^290^logger_.info ( "Unused var " + var.name + " declared in " + inputName + " at line " + toRemove.getLineno (  )  + " may have side effects and can't be removed" ) ;^[CLASS] RemoveUnusedVars  [METHOD] removeUnreferencedVars [RETURN_TYPE] void   Scope scope [VARIABLES] AbstractCompiler  compiler  compiler_  boolean  preserveAnonymousFunctionNames  removeGlobals  Set  referenced  warnedVars_  Scope  scope  Var  var  CodingConvention  convention  Node  nameNode  parent  toRemove  Iterator  it  String  inputName  Logger  logger_  int  MAX_ITERATIONS  i  numRemoved_  type  
[BugLab_Wrong_Literal]^if  ( toRemove.getChildCount (  )  == MAX_ITERATIONS )  {^284^^^^^269^299^if  ( toRemove.getChildCount (  )  == 1 )  {^[CLASS] RemoveUnusedVars  [METHOD] removeUnreferencedVars [RETURN_TYPE] void   Scope scope [VARIABLES] AbstractCompiler  compiler  compiler_  boolean  preserveAnonymousFunctionNames  removeGlobals  Set  referenced  warnedVars_  Scope  scope  Var  var  CodingConvention  convention  Node  nameNode  parent  toRemove  Iterator  it  String  inputName  Logger  logger_  int  MAX_ITERATIONS  i  numRemoved_  type  
[BugLab_Wrong_Operator]^logger_.info ( "Unused var "  &  var.name + " declared in " + inputName + " at line " + toRemove.getLineno (  )  + " may have side effects and can't be removed" ) ;^275^276^277^278^^260^290^logger_.info ( "Unused var " + var.name + " declared in " + inputName + " at line " + toRemove.getLineno (  )  + " may have side effects and can't be removed" ) ;^[CLASS] RemoveUnusedVars  [METHOD] removeUnreferencedVars [RETURN_TYPE] void   Scope scope [VARIABLES] AbstractCompiler  compiler  compiler_  boolean  preserveAnonymousFunctionNames  removeGlobals  Set  referenced  warnedVars_  Scope  scope  Var  var  CodingConvention  convention  Node  nameNode  parent  toRemove  Iterator  it  String  inputName  Logger  logger_  int  MAX_ITERATIONS  i  numRemoved_  type  
[BugLab_Wrong_Literal]^if  ( toRemove.getChildCount (  )  == numRemoved_ )  {^284^^^^^269^299^if  ( toRemove.getChildCount (  )  == 1 )  {^[CLASS] RemoveUnusedVars  [METHOD] removeUnreferencedVars [RETURN_TYPE] void   Scope scope [VARIABLES] AbstractCompiler  compiler  compiler_  boolean  preserveAnonymousFunctionNames  removeGlobals  Set  referenced  warnedVars_  Scope  scope  Var  var  CodingConvention  convention  Node  nameNode  parent  toRemove  Iterator  it  String  inputName  Logger  logger_  int  MAX_ITERATIONS  i  numRemoved_  type  
[BugLab_Variable_Misuse]^} else if  ( toRemove.getType (  )  == Token.null && toRemove.getChildCount (  )  > 1 )  {^289^290^^^^274^304^} else if  ( toRemove.getType (  )  == Token.VAR && toRemove.getChildCount (  )  > 1 )  {^[CLASS] RemoveUnusedVars  [METHOD] removeUnreferencedVars [RETURN_TYPE] void   Scope scope [VARIABLES] AbstractCompiler  compiler  compiler_  boolean  preserveAnonymousFunctionNames  removeGlobals  Set  referenced  warnedVars_  Scope  scope  Var  var  CodingConvention  convention  Node  nameNode  parent  toRemove  Iterator  it  String  inputName  Logger  logger_  int  MAX_ITERATIONS  i  numRemoved_  type  
[BugLab_Wrong_Literal]^} else if  ( toRemove.getType (  )  == Token.VAR && toRemove.getChildCount (  )  > type )  {^289^290^^^^274^304^} else if  ( toRemove.getType (  )  == Token.VAR && toRemove.getChildCount (  )  > 1 )  {^[CLASS] RemoveUnusedVars  [METHOD] removeUnreferencedVars [RETURN_TYPE] void   Scope scope [VARIABLES] AbstractCompiler  compiler  compiler_  boolean  preserveAnonymousFunctionNames  removeGlobals  Set  referenced  warnedVars_  Scope  scope  Var  var  CodingConvention  convention  Node  nameNode  parent  toRemove  Iterator  it  String  inputName  Logger  logger_  int  MAX_ITERATIONS  i  numRemoved_  type  
[BugLab_Wrong_Operator]^} else if  ( toRemove.getType (  )  > Token.VAR && toRemove.getChildCount (  )  > 1 )  {^289^290^^^^274^304^} else if  ( toRemove.getType (  )  == Token.VAR && toRemove.getChildCount (  )  > 1 )  {^[CLASS] RemoveUnusedVars  [METHOD] removeUnreferencedVars [RETURN_TYPE] void   Scope scope [VARIABLES] AbstractCompiler  compiler  compiler_  boolean  preserveAnonymousFunctionNames  removeGlobals  Set  referenced  warnedVars_  Scope  scope  Var  var  CodingConvention  convention  Node  nameNode  parent  toRemove  Iterator  it  String  inputName  Logger  logger_  int  MAX_ITERATIONS  i  numRemoved_  type  
[BugLab_Wrong_Operator]^logger_.info ( "Unused var "   instanceof   var.name + " declared in " + inputName + " at line " + toRemove.getLineno (  )  + " may have side effects and can't be removed" ) ;^275^276^277^278^^260^290^logger_.info ( "Unused var " + var.name + " declared in " + inputName + " at line " + toRemove.getLineno (  )  + " may have side effects and can't be removed" ) ;^[CLASS] RemoveUnusedVars  [METHOD] removeUnreferencedVars [RETURN_TYPE] void   Scope scope [VARIABLES] AbstractCompiler  compiler  compiler_  boolean  preserveAnonymousFunctionNames  removeGlobals  Set  referenced  warnedVars_  Scope  scope  Var  var  CodingConvention  convention  Node  nameNode  parent  toRemove  Iterator  it  String  inputName  Logger  logger_  int  MAX_ITERATIONS  i  numRemoved_  type  
[BugLab_Variable_Misuse]^} else if  ( parent.getType (  )  == Token.FUNCTION && NodeUtil.isFunctionAnonymous ( toRemove )  )  {^256^257^^^^241^271^} else if  ( toRemove.getType (  )  == Token.FUNCTION && NodeUtil.isFunctionAnonymous ( toRemove )  )  {^[CLASS] RemoveUnusedVars  [METHOD] removeUnreferencedVars [RETURN_TYPE] void   Scope scope [VARIABLES] AbstractCompiler  compiler  compiler_  boolean  preserveAnonymousFunctionNames  removeGlobals  Set  referenced  warnedVars_  Scope  scope  Var  var  CodingConvention  convention  Node  nameNode  parent  toRemove  Iterator  it  String  inputName  Logger  logger_  int  MAX_ITERATIONS  i  numRemoved_  type  
[BugLab_Variable_Misuse]^NodeUtil.isFunctionAnonymous ( parent )  )  {^257^^^^^242^272^NodeUtil.isFunctionAnonymous ( toRemove )  )  {^[CLASS] RemoveUnusedVars  [METHOD] removeUnreferencedVars [RETURN_TYPE] void   Scope scope [VARIABLES] AbstractCompiler  compiler  compiler_  boolean  preserveAnonymousFunctionNames  removeGlobals  Set  referenced  warnedVars_  Scope  scope  Var  var  CodingConvention  convention  Node  nameNode  parent  toRemove  Iterator  it  String  inputName  Logger  logger_  int  MAX_ITERATIONS  i  numRemoved_  type  
[BugLab_Wrong_Operator]^logger_.info ( "Unused var "  ==  var.name + " declared in " + inputName + " at line " + toRemove.getLineno (  )  + " may have side effects and can't be removed" ) ;^275^276^277^278^^260^290^logger_.info ( "Unused var " + var.name + " declared in " + inputName + " at line " + toRemove.getLineno (  )  + " may have side effects and can't be removed" ) ;^[CLASS] RemoveUnusedVars  [METHOD] removeUnreferencedVars [RETURN_TYPE] void   Scope scope [VARIABLES] AbstractCompiler  compiler  compiler_  boolean  preserveAnonymousFunctionNames  removeGlobals  Set  referenced  warnedVars_  Scope  scope  Var  var  CodingConvention  convention  Node  nameNode  parent  toRemove  Iterator  it  String  inputName  Logger  logger_  int  MAX_ITERATIONS  i  numRemoved_  type  
[BugLab_Wrong_Operator]^} else if  ( toRemove.getType (  )  <= Token.FUNCTION && NodeUtil.isFunctionAnonymous ( toRemove )  )  {^256^257^^^^241^271^} else if  ( toRemove.getType (  )  == Token.FUNCTION && NodeUtil.isFunctionAnonymous ( toRemove )  )  {^[CLASS] RemoveUnusedVars  [METHOD] removeUnreferencedVars [RETURN_TYPE] void   Scope scope [VARIABLES] AbstractCompiler  compiler  compiler_  boolean  preserveAnonymousFunctionNames  removeGlobals  Set  referenced  warnedVars_  Scope  scope  Var  var  CodingConvention  convention  Node  nameNode  parent  toRemove  Iterator  it  String  inputName  Logger  logger_  int  MAX_ITERATIONS  i  numRemoved_  type  
[BugLab_Wrong_Literal]^} else if  ( parent != null && parent.getType (  )  == Token.FOR && parent.getChildCount (  )  < type )  {^263^264^265^^^248^278^} else if  ( parent != null && parent.getType (  )  == Token.FOR && parent.getChildCount (  )  < 4 )  {^[CLASS] RemoveUnusedVars  [METHOD] removeUnreferencedVars [RETURN_TYPE] void   Scope scope [VARIABLES] AbstractCompiler  compiler  compiler_  boolean  preserveAnonymousFunctionNames  removeGlobals  Set  referenced  warnedVars_  Scope  scope  Var  var  CodingConvention  convention  Node  nameNode  parent  toRemove  Iterator  it  String  inputName  Logger  logger_  int  MAX_ITERATIONS  i  numRemoved_  type  
[BugLab_Wrong_Operator]^} else if  ( toRemove.getType (  )  <= Token.VAR && toRemove.getChildCount (  )  > 1 )  {^289^290^^^^274^304^} else if  ( toRemove.getType (  )  == Token.VAR && toRemove.getChildCount (  )  > 1 )  {^[CLASS] RemoveUnusedVars  [METHOD] removeUnreferencedVars [RETURN_TYPE] void   Scope scope [VARIABLES] AbstractCompiler  compiler  compiler_  boolean  preserveAnonymousFunctionNames  removeGlobals  Set  referenced  warnedVars_  Scope  scope  Var  var  CodingConvention  convention  Node  nameNode  parent  toRemove  Iterator  it  String  inputName  Logger  logger_  int  MAX_ITERATIONS  i  numRemoved_  type  
[BugLab_Wrong_Operator]^logger_.info ( "Unused var "  !=  var.name + " declared in " + inputName + " at line " + toRemove.getLineno (  )  + " may have side effects and can't be removed" ) ;^275^276^277^278^^260^290^logger_.info ( "Unused var " + var.name + " declared in " + inputName + " at line " + toRemove.getLineno (  )  + " may have side effects and can't be removed" ) ;^[CLASS] RemoveUnusedVars  [METHOD] removeUnreferencedVars [RETURN_TYPE] void   Scope scope [VARIABLES] AbstractCompiler  compiler  compiler_  boolean  preserveAnonymousFunctionNames  removeGlobals  Set  referenced  warnedVars_  Scope  scope  Var  var  CodingConvention  convention  Node  nameNode  parent  toRemove  Iterator  it  String  inputName  Logger  logger_  int  MAX_ITERATIONS  i  numRemoved_  type  
[BugLab_Wrong_Operator]^logger_.info ( "Unused var "  >  var.name + " declared in " + inputName + " at line " + toRemove.getLineno (  )  + " may have side effects and can't be removed" ) ;^275^276^277^278^^260^290^logger_.info ( "Unused var " + var.name + " declared in " + inputName + " at line " + toRemove.getLineno (  )  + " may have side effects and can't be removed" ) ;^[CLASS] RemoveUnusedVars  [METHOD] removeUnreferencedVars [RETURN_TYPE] void   Scope scope [VARIABLES] AbstractCompiler  compiler  compiler_  boolean  preserveAnonymousFunctionNames  removeGlobals  Set  referenced  warnedVars_  Scope  scope  Var  var  CodingConvention  convention  Node  nameNode  parent  toRemove  Iterator  it  String  inputName  Logger  logger_  int  MAX_ITERATIONS  i  numRemoved_  type  
[BugLab_Variable_Misuse]^} else if  ( toRemove.getType (  )  == Token.this && toRemove.getChildCount (  )  > 1 )  {^289^290^^^^274^304^} else if  ( toRemove.getType (  )  == Token.VAR && toRemove.getChildCount (  )  > 1 )  {^[CLASS] RemoveUnusedVars  [METHOD] removeUnreferencedVars [RETURN_TYPE] void   Scope scope [VARIABLES] AbstractCompiler  compiler  compiler_  boolean  preserveAnonymousFunctionNames  removeGlobals  Set  referenced  warnedVars_  Scope  scope  Var  var  CodingConvention  convention  Node  nameNode  parent  toRemove  Iterator  it  String  inputName  Logger  logger_  int  MAX_ITERATIONS  i  numRemoved_  type  
[BugLab_Wrong_Operator]^logger_.info ( "Unused var "  >=  var.name + " declared in " + inputName + " at line " + toRemove.getLineno (  )  + " may have side effects and can't be removed" ) ;^275^276^277^278^^260^290^logger_.info ( "Unused var " + var.name + " declared in " + inputName + " at line " + toRemove.getLineno (  )  + " may have side effects and can't be removed" ) ;^[CLASS] RemoveUnusedVars  [METHOD] removeUnreferencedVars [RETURN_TYPE] void   Scope scope [VARIABLES] AbstractCompiler  compiler  compiler_  boolean  preserveAnonymousFunctionNames  removeGlobals  Set  referenced  warnedVars_  Scope  scope  Var  var  CodingConvention  convention  Node  nameNode  parent  toRemove  Iterator  it  String  inputName  Logger  logger_  int  MAX_ITERATIONS  i  numRemoved_  type  
[BugLab_Wrong_Literal]^} else if  ( parent != null && parent.getType (  )  == Token.FOR && parent.getChildCount (  )  < i )  {^263^264^265^^^248^278^} else if  ( parent != null && parent.getType (  )  == Token.FOR && parent.getChildCount (  )  < 4 )  {^[CLASS] RemoveUnusedVars  [METHOD] removeUnreferencedVars [RETURN_TYPE] void   Scope scope [VARIABLES] AbstractCompiler  compiler  compiler_  boolean  preserveAnonymousFunctionNames  removeGlobals  Set  referenced  warnedVars_  Scope  scope  Var  var  CodingConvention  convention  Node  nameNode  parent  toRemove  Iterator  it  String  inputName  Logger  logger_  int  MAX_ITERATIONS  i  numRemoved_  type  
[BugLab_Wrong_Operator]^logger_.info ( "Unused var "  ||  var.name + " declared in " + inputName + " at line " + toRemove.getLineno (  )  + " may have side effects and can't be removed" ) ;^275^276^277^278^^260^290^logger_.info ( "Unused var " + var.name + " declared in " + inputName + " at line " + toRemove.getLineno (  )  + " may have side effects and can't be removed" ) ;^[CLASS] RemoveUnusedVars  [METHOD] removeUnreferencedVars [RETURN_TYPE] void   Scope scope [VARIABLES] AbstractCompiler  compiler  compiler_  boolean  preserveAnonymousFunctionNames  removeGlobals  Set  referenced  warnedVars_  Scope  scope  Var  var  CodingConvention  convention  Node  nameNode  parent  toRemove  Iterator  it  String  inputName  Logger  logger_  int  MAX_ITERATIONS  i  numRemoved_  type  
[BugLab_Wrong_Operator]^if  ( toRemove.getChildCount (  )  < 1 )  {^284^^^^^269^299^if  ( toRemove.getChildCount (  )  == 1 )  {^[CLASS] RemoveUnusedVars  [METHOD] removeUnreferencedVars [RETURN_TYPE] void   Scope scope [VARIABLES] AbstractCompiler  compiler  compiler_  boolean  preserveAnonymousFunctionNames  removeGlobals  Set  referenced  warnedVars_  Scope  scope  Var  var  CodingConvention  convention  Node  nameNode  parent  toRemove  Iterator  it  String  inputName  Logger  logger_  int  MAX_ITERATIONS  i  numRemoved_  type  
[BugLab_Wrong_Literal]^} else if  ( toRemove.getType (  )  == Token.VAR && toRemove.getChildCount (  )  > 2 )  {^289^290^^^^274^304^} else if  ( toRemove.getType (  )  == Token.VAR && toRemove.getChildCount (  )  > 1 )  {^[CLASS] RemoveUnusedVars  [METHOD] removeUnreferencedVars [RETURN_TYPE] void   Scope scope [VARIABLES] AbstractCompiler  compiler  compiler_  boolean  preserveAnonymousFunctionNames  removeGlobals  Set  referenced  warnedVars_  Scope  scope  Var  var  CodingConvention  convention  Node  nameNode  parent  toRemove  Iterator  it  String  inputName  Logger  logger_  int  MAX_ITERATIONS  i  numRemoved_  type  
[BugLab_Wrong_Operator]^} else if  ( toRemove.getType (  )  == Token.VAR && toRemove.getChildCount (  )  == 1 )  {^289^290^^^^274^304^} else if  ( toRemove.getType (  )  == Token.VAR && toRemove.getChildCount (  )  > 1 )  {^[CLASS] RemoveUnusedVars  [METHOD] removeUnreferencedVars [RETURN_TYPE] void   Scope scope [VARIABLES] AbstractCompiler  compiler  compiler_  boolean  preserveAnonymousFunctionNames  removeGlobals  Set  referenced  warnedVars_  Scope  scope  Var  var  CodingConvention  convention  Node  nameNode  parent  toRemove  Iterator  it  String  inputName  Logger  logger_  int  MAX_ITERATIONS  i  numRemoved_  type  
[BugLab_Variable_Misuse]^Node toRemove = parent.getParent (  ) ;^242^^^^^227^257^Node toRemove = nameNode.getParent (  ) ;^[CLASS] RemoveUnusedVars  [METHOD] removeUnreferencedVars [RETURN_TYPE] void   Scope scope [VARIABLES] AbstractCompiler  compiler  compiler_  boolean  preserveAnonymousFunctionNames  removeGlobals  Set  referenced  warnedVars_  Scope  scope  Var  var  CodingConvention  convention  Node  nameNode  parent  toRemove  Iterator  it  String  inputName  Logger  logger_  int  MAX_ITERATIONS  i  numRemoved_  type  
[BugLab_Variable_Misuse]^Node parent = nameNode.getParent (  ) ;^243^^^^^228^258^Node parent = toRemove.getParent (  ) ;^[CLASS] RemoveUnusedVars  [METHOD] removeUnreferencedVars [RETURN_TYPE] void   Scope scope [VARIABLES] AbstractCompiler  compiler  compiler_  boolean  preserveAnonymousFunctionNames  removeGlobals  Set  referenced  warnedVars_  Scope  scope  Var  var  CodingConvention  convention  Node  nameNode  parent  toRemove  Iterator  it  String  inputName  Logger  logger_  int  MAX_ITERATIONS  i  numRemoved_  type  
[BugLab_Wrong_Operator]^compiler_.addToDebugLog ( "Unreferenced var: "  ^  var.name ) ;^240^^^^^225^255^compiler_.addToDebugLog ( "Unreferenced var: " + var.name ) ;^[CLASS] RemoveUnusedVars  [METHOD] removeUnreferencedVars [RETURN_TYPE] void   Scope scope [VARIABLES] AbstractCompiler  compiler  compiler_  boolean  preserveAnonymousFunctionNames  removeGlobals  Set  referenced  warnedVars_  Scope  scope  Var  var  CodingConvention  convention  Node  nameNode  parent  toRemove  Iterator  it  String  inputName  Logger  logger_  int  MAX_ITERATIONS  i  numRemoved_  type  
[BugLab_Variable_Misuse]^Node toRemove = toRemove.getParent (  ) ;^242^^^^^227^257^Node toRemove = nameNode.getParent (  ) ;^[CLASS] RemoveUnusedVars  [METHOD] removeUnreferencedVars [RETURN_TYPE] void   Scope scope [VARIABLES] AbstractCompiler  compiler  compiler_  boolean  preserveAnonymousFunctionNames  removeGlobals  Set  referenced  warnedVars_  Scope  scope  Var  var  CodingConvention  convention  Node  nameNode  parent  toRemove  Iterator  it  String  inputName  Logger  logger_  int  MAX_ITERATIONS  i  numRemoved_  type  
[BugLab_Variable_Misuse]^Preconditions.checkState ( parent.getType (  )  == Token.VAR || toRemove.getType (  )  == Token.FUNCTION || toRemove.getType (  )  == Token.LP &&^245^246^247^248^^230^260^Preconditions.checkState ( toRemove.getType (  )  == Token.VAR || toRemove.getType (  )  == Token.FUNCTION || toRemove.getType (  )  == Token.LP &&^[CLASS] RemoveUnusedVars  [METHOD] removeUnreferencedVars [RETURN_TYPE] void   Scope scope [VARIABLES] AbstractCompiler  compiler  compiler_  boolean  preserveAnonymousFunctionNames  removeGlobals  Set  referenced  warnedVars_  Scope  scope  Var  var  CodingConvention  convention  Node  nameNode  parent  toRemove  Iterator  it  String  inputName  Logger  logger_  int  MAX_ITERATIONS  i  numRemoved_  type  
[BugLab_Wrong_Operator]^Preconditions.checkState ( toRemove.getType (  )  == Token.VAR && toRemove.getType (  )  == Token.FUNCTION || toRemove.getType (  )  == Token.LP &&^245^246^247^248^^230^260^Preconditions.checkState ( toRemove.getType (  )  == Token.VAR || toRemove.getType (  )  == Token.FUNCTION || toRemove.getType (  )  == Token.LP &&^[CLASS] RemoveUnusedVars  [METHOD] removeUnreferencedVars [RETURN_TYPE] void   Scope scope [VARIABLES] AbstractCompiler  compiler  compiler_  boolean  preserveAnonymousFunctionNames  removeGlobals  Set  referenced  warnedVars_  Scope  scope  Var  var  CodingConvention  convention  Node  nameNode  parent  toRemove  Iterator  it  String  inputName  Logger  logger_  int  MAX_ITERATIONS  i  numRemoved_  type  
[BugLab_Wrong_Operator]^Preconditions.checkState ( toRemove.getType (  )  != Token.VAR || toRemove.getType (  )  == Token.FUNCTION || toRemove.getType (  )  == Token.LP &&^245^246^247^248^^230^260^Preconditions.checkState ( toRemove.getType (  )  == Token.VAR || toRemove.getType (  )  == Token.FUNCTION || toRemove.getType (  )  == Token.LP &&^[CLASS] RemoveUnusedVars  [METHOD] removeUnreferencedVars [RETURN_TYPE] void   Scope scope [VARIABLES] AbstractCompiler  compiler  compiler_  boolean  preserveAnonymousFunctionNames  removeGlobals  Set  referenced  warnedVars_  Scope  scope  Var  var  CodingConvention  convention  Node  nameNode  parent  toRemove  Iterator  it  String  inputName  Logger  logger_  int  MAX_ITERATIONS  i  numRemoved_  type  
[BugLab_Wrong_Operator]^Preconditions.checkState ( toRemove.getType (  )  <= Token.VAR || toRemove.getType (  )  == Token.FUNCTION || toRemove.getType (  )  == Token.LP &&^245^246^247^248^^230^260^Preconditions.checkState ( toRemove.getType (  )  == Token.VAR || toRemove.getType (  )  == Token.FUNCTION || toRemove.getType (  )  == Token.LP &&^[CLASS] RemoveUnusedVars  [METHOD] removeUnreferencedVars [RETURN_TYPE] void   Scope scope [VARIABLES] AbstractCompiler  compiler  compiler_  boolean  preserveAnonymousFunctionNames  removeGlobals  Set  referenced  warnedVars_  Scope  scope  Var  var  CodingConvention  convention  Node  nameNode  parent  toRemove  Iterator  it  String  inputName  Logger  logger_  int  MAX_ITERATIONS  i  numRemoved_  type  
[BugLab_Variable_Misuse]^toRemove.getType (  )  == Token.VAR || parent.getType (  )  == Token.FUNCTION || toRemove.getType (  )  == Token.LP && parent.getType (  )  == Token.FUNCTION,^246^247^248^249^^231^261^toRemove.getType (  )  == Token.VAR || toRemove.getType (  )  == Token.FUNCTION || toRemove.getType (  )  == Token.LP && parent.getType (  )  == Token.FUNCTION,^[CLASS] RemoveUnusedVars  [METHOD] removeUnreferencedVars [RETURN_TYPE] void   Scope scope [VARIABLES] AbstractCompiler  compiler  compiler_  boolean  preserveAnonymousFunctionNames  removeGlobals  Set  referenced  warnedVars_  Scope  scope  Var  var  CodingConvention  convention  Node  nameNode  parent  toRemove  Iterator  it  String  inputName  Logger  logger_  int  MAX_ITERATIONS  i  numRemoved_  type  
[BugLab_Variable_Misuse]^toRemove.getType (  )  == Token.FUNCTION || parent.getType (  )  == Token.LP && parent.getType (  )  == Token.FUNCTION, "We should only declare vars and functions and function args" ) ;^247^248^249^250^^232^262^toRemove.getType (  )  == Token.FUNCTION || toRemove.getType (  )  == Token.LP && parent.getType (  )  == Token.FUNCTION, "We should only declare vars and functions and function args" ) ;^[CLASS] RemoveUnusedVars  [METHOD] removeUnreferencedVars [RETURN_TYPE] void   Scope scope [VARIABLES] AbstractCompiler  compiler  compiler_  boolean  preserveAnonymousFunctionNames  removeGlobals  Set  referenced  warnedVars_  Scope  scope  Var  var  CodingConvention  convention  Node  nameNode  parent  toRemove  Iterator  it  String  inputName  Logger  logger_  int  MAX_ITERATIONS  i  numRemoved_  type  
[BugLab_Variable_Misuse]^if  ( parent.getType (  )  == Token.LP && parent.getType (  )  == Token.FUNCTION )  {^252^253^^^^237^267^if  ( toRemove.getType (  )  == Token.LP && parent.getType (  )  == Token.FUNCTION )  {^[CLASS] RemoveUnusedVars  [METHOD] removeUnreferencedVars [RETURN_TYPE] void   Scope scope [VARIABLES] AbstractCompiler  compiler  compiler_  boolean  preserveAnonymousFunctionNames  removeGlobals  Set  referenced  warnedVars_  Scope  scope  Var  var  CodingConvention  convention  Node  nameNode  parent  toRemove  Iterator  it  String  inputName  Logger  logger_  int  MAX_ITERATIONS  i  numRemoved_  type  
[BugLab_Wrong_Operator]^if  ( toRemove.getType (  )  > Token.LP && parent.getType (  )  == Token.FUNCTION )  {^252^253^^^^237^267^if  ( toRemove.getType (  )  == Token.LP && parent.getType (  )  == Token.FUNCTION )  {^[CLASS] RemoveUnusedVars  [METHOD] removeUnreferencedVars [RETURN_TYPE] void   Scope scope [VARIABLES] AbstractCompiler  compiler  compiler_  boolean  preserveAnonymousFunctionNames  removeGlobals  Set  referenced  warnedVars_  Scope  scope  Var  var  CodingConvention  convention  Node  nameNode  parent  toRemove  Iterator  it  String  inputName  Logger  logger_  int  MAX_ITERATIONS  i  numRemoved_  type  
[BugLab_Wrong_Operator]^if  ( toRemove.getType (  )  <= Token.LP && parent.getType (  )  == Token.FUNCTION )  {^252^253^^^^237^267^if  ( toRemove.getType (  )  == Token.LP && parent.getType (  )  == Token.FUNCTION )  {^[CLASS] RemoveUnusedVars  [METHOD] removeUnreferencedVars [RETURN_TYPE] void   Scope scope [VARIABLES] AbstractCompiler  compiler  compiler_  boolean  preserveAnonymousFunctionNames  removeGlobals  Set  referenced  warnedVars_  Scope  scope  Var  var  CodingConvention  convention  Node  nameNode  parent  toRemove  Iterator  it  String  inputName  Logger  logger_  int  MAX_ITERATIONS  i  numRemoved_  type  
[BugLab_Wrong_Operator]^} else if  ( toRemove.getType (  )  < Token.FUNCTION && NodeUtil.isFunctionAnonymous ( toRemove )  )  {^256^257^^^^241^271^} else if  ( toRemove.getType (  )  == Token.FUNCTION && NodeUtil.isFunctionAnonymous ( toRemove )  )  {^[CLASS] RemoveUnusedVars  [METHOD] removeUnreferencedVars [RETURN_TYPE] void   Scope scope [VARIABLES] AbstractCompiler  compiler  compiler_  boolean  preserveAnonymousFunctionNames  removeGlobals  Set  referenced  warnedVars_  Scope  scope  Var  var  CodingConvention  convention  Node  nameNode  parent  toRemove  Iterator  it  String  inputName  Logger  logger_  int  MAX_ITERATIONS  i  numRemoved_  type  
[BugLab_Wrong_Literal]^} else if  ( parent != null && parent.getType (  )  == Token.FOR && parent.getChildCount (  )  < 5 )  {^263^264^265^^^248^278^} else if  ( parent != null && parent.getType (  )  == Token.FOR && parent.getChildCount (  )  < 4 )  {^[CLASS] RemoveUnusedVars  [METHOD] removeUnreferencedVars [RETURN_TYPE] void   Scope scope [VARIABLES] AbstractCompiler  compiler  compiler_  boolean  preserveAnonymousFunctionNames  removeGlobals  Set  referenced  warnedVars_  Scope  scope  Var  var  CodingConvention  convention  Node  nameNode  parent  toRemove  Iterator  it  String  inputName  Logger  logger_  int  MAX_ITERATIONS  i  numRemoved_  type  
[BugLab_Wrong_Operator]^} else if  ( toRemove.getType (  )  < Token.VAR && toRemove.getChildCount (  )  > 1 )  {^289^290^^^^274^304^} else if  ( toRemove.getType (  )  == Token.VAR && toRemove.getChildCount (  )  > 1 )  {^[CLASS] RemoveUnusedVars  [METHOD] removeUnreferencedVars [RETURN_TYPE] void   Scope scope [VARIABLES] AbstractCompiler  compiler  compiler_  boolean  preserveAnonymousFunctionNames  removeGlobals  Set  referenced  warnedVars_  Scope  scope  Var  var  CodingConvention  convention  Node  nameNode  parent  toRemove  Iterator  it  String  inputName  Logger  logger_  int  MAX_ITERATIONS  i  numRemoved_  type  
[BugLab_Variable_Misuse]^} else if  ( toRemove.getType (  )  == Token.1 && toRemove.getChildCount (  )  > 1 )  {^289^290^^^^274^304^} else if  ( toRemove.getType (  )  == Token.VAR && toRemove.getChildCount (  )  > 1 )  {^[CLASS] RemoveUnusedVars  [METHOD] removeUnreferencedVars [RETURN_TYPE] void   Scope scope [VARIABLES] AbstractCompiler  compiler  compiler_  boolean  preserveAnonymousFunctionNames  removeGlobals  Set  referenced  warnedVars_  Scope  scope  Var  var  CodingConvention  convention  Node  nameNode  parent  toRemove  Iterator  it  String  inputName  Logger  logger_  int  MAX_ITERATIONS  i  numRemoved_  type  
[BugLab_Wrong_Operator]^} else if  ( toRemove.getType (  )  > Token.VAR && nameNode.hasChildren (  )  && NodeUtil.mayHaveSideEffects ( nameNode.getFirstChild (  )  )  )  {^267^268^269^^^252^282^} else if  ( toRemove.getType (  )  == Token.VAR && nameNode.hasChildren (  )  && NodeUtil.mayHaveSideEffects ( nameNode.getFirstChild (  )  )  )  {^[CLASS] RemoveUnusedVars  [METHOD] removeUnreferencedVars [RETURN_TYPE] void   Scope scope [VARIABLES] AbstractCompiler  compiler  compiler_  boolean  preserveAnonymousFunctionNames  removeGlobals  Set  referenced  warnedVars_  Scope  scope  Var  var  CodingConvention  convention  Node  nameNode  parent  toRemove  Iterator  it  String  inputName  Logger  logger_  int  MAX_ITERATIONS  i  numRemoved_  type  
[BugLab_Wrong_Operator]^} else if  ( toRemove.getType (  )  < Token.VAR && nameNode.hasChildren (  )  && NodeUtil.mayHaveSideEffects ( nameNode.getFirstChild (  )  )  )  {^267^268^269^^^252^282^} else if  ( toRemove.getType (  )  == Token.VAR && nameNode.hasChildren (  )  && NodeUtil.mayHaveSideEffects ( nameNode.getFirstChild (  )  )  )  {^[CLASS] RemoveUnusedVars  [METHOD] removeUnreferencedVars [RETURN_TYPE] void   Scope scope [VARIABLES] AbstractCompiler  compiler  compiler_  boolean  preserveAnonymousFunctionNames  removeGlobals  Set  referenced  warnedVars_  Scope  scope  Var  var  CodingConvention  convention  Node  nameNode  parent  toRemove  Iterator  it  String  inputName  Logger  logger_  int  MAX_ITERATIONS  i  numRemoved_  type  
[BugLab_Wrong_Literal]^if  ( toRemove.getChildCount (  )  ==  )  {^284^^^^^269^299^if  ( toRemove.getChildCount (  )  == 1 )  {^[CLASS] RemoveUnusedVars  [METHOD] removeUnreferencedVars [RETURN_TYPE] void   Scope scope [VARIABLES] AbstractCompiler  compiler  compiler_  boolean  preserveAnonymousFunctionNames  removeGlobals  Set  referenced  warnedVars_  Scope  scope  Var  var  CodingConvention  convention  Node  nameNode  parent  toRemove  Iterator  it  String  inputName  Logger  logger_  int  MAX_ITERATIONS  i  numRemoved_  type  
[BugLab_Wrong_Literal]^if  ( toRemove.getChildCount (  )  == type )  {^284^^^^^269^299^if  ( toRemove.getChildCount (  )  == 1 )  {^[CLASS] RemoveUnusedVars  [METHOD] removeUnreferencedVars [RETURN_TYPE] void   Scope scope [VARIABLES] AbstractCompiler  compiler  compiler_  boolean  preserveAnonymousFunctionNames  removeGlobals  Set  referenced  warnedVars_  Scope  scope  Var  var  CodingConvention  convention  Node  nameNode  parent  toRemove  Iterator  it  String  inputName  Logger  logger_  int  MAX_ITERATIONS  i  numRemoved_  type  
[BugLab_Wrong_Literal]^} else if  ( toRemove.getType (  )  == Token.VAR && toRemove.getChildCount (  )  > MAX_ITERATIONS )  {^289^290^^^^274^304^} else if  ( toRemove.getType (  )  == Token.VAR && toRemove.getChildCount (  )  > 1 )  {^[CLASS] RemoveUnusedVars  [METHOD] removeUnreferencedVars [RETURN_TYPE] void   Scope scope [VARIABLES] AbstractCompiler  compiler  compiler_  boolean  preserveAnonymousFunctionNames  removeGlobals  Set  referenced  warnedVars_  Scope  scope  Var  var  CodingConvention  convention  Node  nameNode  parent  toRemove  Iterator  it  String  inputName  Logger  logger_  int  MAX_ITERATIONS  i  numRemoved_  type  
[BugLab_Wrong_Operator]^} else if  ( parent != null && parent.getType (  )  == Token.FOR && parent.getChildCount (  )  == 4 )  {^263^264^265^^^248^278^} else if  ( parent != null && parent.getType (  )  == Token.FOR && parent.getChildCount (  )  < 4 )  {^[CLASS] RemoveUnusedVars  [METHOD] removeUnreferencedVars [RETURN_TYPE] void   Scope scope [VARIABLES] AbstractCompiler  compiler  compiler_  boolean  preserveAnonymousFunctionNames  removeGlobals  Set  referenced  warnedVars_  Scope  scope  Var  var  CodingConvention  convention  Node  nameNode  parent  toRemove  Iterator  it  String  inputName  Logger  logger_  int  MAX_ITERATIONS  i  numRemoved_  type  
[BugLab_Variable_Misuse]^} else if  ( toRemove.getType (  )  == Token.2 && toRemove.getChildCount (  )  > 1 )  {^289^290^^^^274^304^} else if  ( toRemove.getType (  )  == Token.VAR && toRemove.getChildCount (  )  > 1 )  {^[CLASS] RemoveUnusedVars  [METHOD] removeUnreferencedVars [RETURN_TYPE] void   Scope scope [VARIABLES] AbstractCompiler  compiler  compiler_  boolean  preserveAnonymousFunctionNames  removeGlobals  Set  referenced  warnedVars_  Scope  scope  Var  var  CodingConvention  convention  Node  nameNode  parent  toRemove  Iterator  it  String  inputName  Logger  logger_  int  MAX_ITERATIONS  i  numRemoved_  type  
[BugLab_Wrong_Literal]^} else if  ( parent != null && parent.getType (  )  == Token.FOR && parent.getChildCount (  )  < 3 )  {^263^264^265^^^248^278^} else if  ( parent != null && parent.getType (  )  == Token.FOR && parent.getChildCount (  )  < 4 )  {^[CLASS] RemoveUnusedVars  [METHOD] removeUnreferencedVars [RETURN_TYPE] void   Scope scope [VARIABLES] AbstractCompiler  compiler  compiler_  boolean  preserveAnonymousFunctionNames  removeGlobals  Set  referenced  warnedVars_  Scope  scope  Var  var  CodingConvention  convention  Node  nameNode  parent  toRemove  Iterator  it  String  inputName  Logger  logger_  int  MAX_ITERATIONS  i  numRemoved_  type  
[BugLab_Variable_Misuse]^} else if  ( toRemove.getType (  )  == Token.4 && toRemove.getChildCount (  )  > 1 )  {^289^290^^^^274^304^} else if  ( toRemove.getType (  )  == Token.VAR && toRemove.getChildCount (  )  > 1 )  {^[CLASS] RemoveUnusedVars  [METHOD] removeUnreferencedVars [RETURN_TYPE] void   Scope scope [VARIABLES] AbstractCompiler  compiler  compiler_  boolean  preserveAnonymousFunctionNames  removeGlobals  Set  referenced  warnedVars_  Scope  scope  Var  var  CodingConvention  convention  Node  nameNode  parent  toRemove  Iterator  it  String  inputName  Logger  logger_  int  MAX_ITERATIONS  i  numRemoved_  type  
[BugLab_Variable_Misuse]^} else if  ( toRemove.getType (  )  == Token.3 && toRemove.getChildCount (  )  > 1 )  {^289^290^^^^274^304^} else if  ( toRemove.getType (  )  == Token.VAR && toRemove.getChildCount (  )  > 1 )  {^[CLASS] RemoveUnusedVars  [METHOD] removeUnreferencedVars [RETURN_TYPE] void   Scope scope [VARIABLES] AbstractCompiler  compiler  compiler_  boolean  preserveAnonymousFunctionNames  removeGlobals  Set  referenced  warnedVars_  Scope  scope  Var  var  CodingConvention  convention  Node  nameNode  parent  toRemove  Iterator  it  String  inputName  Logger  logger_  int  MAX_ITERATIONS  i  numRemoved_  type  
[BugLab_Wrong_Operator]^compiler_.addToDebugLog ( "Unreferenced var: "  &&  var.name ) ;^240^^^^^225^255^compiler_.addToDebugLog ( "Unreferenced var: " + var.name ) ;^[CLASS] RemoveUnusedVars  [METHOD] removeUnreferencedVars [RETURN_TYPE] void   Scope scope [VARIABLES] AbstractCompiler  compiler  compiler_  boolean  preserveAnonymousFunctionNames  removeGlobals  Set  referenced  warnedVars_  Scope  scope  Var  var  CodingConvention  convention  Node  nameNode  parent  toRemove  Iterator  it  String  inputName  Logger  logger_  int  MAX_ITERATIONS  i  numRemoved_  type  
[BugLab_Variable_Misuse]^Node parent = parent.getParent (  ) ;^243^^^^^228^258^Node parent = toRemove.getParent (  ) ;^[CLASS] RemoveUnusedVars  [METHOD] removeUnreferencedVars [RETURN_TYPE] void   Scope scope [VARIABLES] AbstractCompiler  compiler  compiler_  boolean  preserveAnonymousFunctionNames  removeGlobals  Set  referenced  warnedVars_  Scope  scope  Var  var  CodingConvention  convention  Node  nameNode  parent  toRemove  Iterator  it  String  inputName  Logger  logger_  int  MAX_ITERATIONS  i  numRemoved_  type  
[BugLab_Variable_Misuse]^Preconditions.checkState ( nameNode.getType (  )  == Token.VAR || toRemove.getType (  )  == Token.FUNCTION || toRemove.getType (  )  == Token.LP &&^245^246^247^248^^230^260^Preconditions.checkState ( toRemove.getType (  )  == Token.VAR || toRemove.getType (  )  == Token.FUNCTION || toRemove.getType (  )  == Token.LP &&^[CLASS] RemoveUnusedVars  [METHOD] removeUnreferencedVars [RETURN_TYPE] void   Scope scope [VARIABLES] AbstractCompiler  compiler  compiler_  boolean  preserveAnonymousFunctionNames  removeGlobals  Set  referenced  warnedVars_  Scope  scope  Var  var  CodingConvention  convention  Node  nameNode  parent  toRemove  Iterator  it  String  inputName  Logger  logger_  int  MAX_ITERATIONS  i  numRemoved_  type  
[BugLab_Wrong_Operator]^Preconditions.checkState ( toRemove.getType (  )  > Token.VAR || toRemove.getType (  )  == Token.FUNCTION || toRemove.getType (  )  == Token.LP &&^245^246^247^248^^230^260^Preconditions.checkState ( toRemove.getType (  )  == Token.VAR || toRemove.getType (  )  == Token.FUNCTION || toRemove.getType (  )  == Token.LP &&^[CLASS] RemoveUnusedVars  [METHOD] removeUnreferencedVars [RETURN_TYPE] void   Scope scope [VARIABLES] AbstractCompiler  compiler  compiler_  boolean  preserveAnonymousFunctionNames  removeGlobals  Set  referenced  warnedVars_  Scope  scope  Var  var  CodingConvention  convention  Node  nameNode  parent  toRemove  Iterator  it  String  inputName  Logger  logger_  int  MAX_ITERATIONS  i  numRemoved_  type  
[BugLab_Wrong_Literal]^} else if  ( parent != null && parent.getType (  )  == Token.FOR && parent.getChildCount (  )  < numRemoved_ )  {^263^264^265^^^248^278^} else if  ( parent != null && parent.getType (  )  == Token.FOR && parent.getChildCount (  )  < 4 )  {^[CLASS] RemoveUnusedVars  [METHOD] removeUnreferencedVars [RETURN_TYPE] void   Scope scope [VARIABLES] AbstractCompiler  compiler  compiler_  boolean  preserveAnonymousFunctionNames  removeGlobals  Set  referenced  warnedVars_  Scope  scope  Var  var  CodingConvention  convention  Node  nameNode  parent  toRemove  Iterator  it  String  inputName  Logger  logger_  int  MAX_ITERATIONS  i  numRemoved_  type  
[BugLab_Wrong_Operator]^compiler_.addToDebugLog ( "Unreferenced var: "  ||  var.name ) ;^240^^^^^225^255^compiler_.addToDebugLog ( "Unreferenced var: " + var.name ) ;^[CLASS] RemoveUnusedVars  [METHOD] removeUnreferencedVars [RETURN_TYPE] void   Scope scope [VARIABLES] AbstractCompiler  compiler  compiler_  boolean  preserveAnonymousFunctionNames  removeGlobals  Set  referenced  warnedVars_  Scope  scope  Var  var  CodingConvention  convention  Node  nameNode  parent  toRemove  Iterator  it  String  inputName  Logger  logger_  int  MAX_ITERATIONS  i  numRemoved_  type  
[BugLab_Wrong_Operator]^Preconditions.checkState ( toRemove.getType (  )  >= Token.VAR || toRemove.getType (  )  == Token.FUNCTION || toRemove.getType (  )  == Token.LP &&^245^246^247^248^^230^260^Preconditions.checkState ( toRemove.getType (  )  == Token.VAR || toRemove.getType (  )  == Token.FUNCTION || toRemove.getType (  )  == Token.LP &&^[CLASS] RemoveUnusedVars  [METHOD] removeUnreferencedVars [RETURN_TYPE] void   Scope scope [VARIABLES] AbstractCompiler  compiler  compiler_  boolean  preserveAnonymousFunctionNames  removeGlobals  Set  referenced  warnedVars_  Scope  scope  Var  var  CodingConvention  convention  Node  nameNode  parent  toRemove  Iterator  it  String  inputName  Logger  logger_  int  MAX_ITERATIONS  i  numRemoved_  type  
[BugLab_Variable_Misuse]^Var var = null.next (  ) ;^235^^^^^220^250^Var var = it.next (  ) ;^[CLASS] RemoveUnusedVars  [METHOD] removeUnreferencedVars [RETURN_TYPE] void   Scope scope [VARIABLES] AbstractCompiler  compiler  compiler_  boolean  preserveAnonymousFunctionNames  removeGlobals  Set  referenced  warnedVars_  Scope  scope  Var  var  CodingConvention  convention  Node  nameNode  parent  toRemove  Iterator  it  String  inputName  Logger  logger_  int  MAX_ITERATIONS  i  numRemoved_  type  
[BugLab_Wrong_Operator]^compiler_.addToDebugLog ( "Unreferenced var: "  !=  var.name ) ;^240^^^^^225^255^compiler_.addToDebugLog ( "Unreferenced var: " + var.name ) ;^[CLASS] RemoveUnusedVars  [METHOD] removeUnreferencedVars [RETURN_TYPE] void   Scope scope [VARIABLES] AbstractCompiler  compiler  compiler_  boolean  preserveAnonymousFunctionNames  removeGlobals  Set  referenced  warnedVars_  Scope  scope  Var  var  CodingConvention  convention  Node  nameNode  parent  toRemove  Iterator  it  String  inputName  Logger  logger_  int  MAX_ITERATIONS  i  numRemoved_  type  
