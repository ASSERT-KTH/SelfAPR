[BugLab_Argument_Swapping]^super ( outputCharset, consumer, true ) ;^35^^^^^34^36^super ( consumer, outputCharset, true ) ;^[CLASS] TypedCodeGenerator  [METHOD] <init> [RETURN_TYPE] Charset)   CodeConsumer consumer Charset outputCharset [VARIABLES] boolean  CodeConsumer  consumer  Charset  outputCharset  
[BugLab_Wrong_Literal]^super ( consumer, outputCharset, false ) ;^35^^^^^34^36^super ( consumer, outputCharset, true ) ;^[CLASS] TypedCodeGenerator  [METHOD] <init> [RETURN_TYPE] Charset)   CodeConsumer consumer Charset outputCharset [VARIABLES] boolean  CodeConsumer  consumer  Charset  outputCharset  
[BugLab_Wrong_Operator]^if  ( n.getParent (  ) .getType (  )  == Token.BLOCK && n.getParent (  ) .getType (  )  == Token.SCRIPT )  {^40^41^^^^39^56^if  ( n.getParent (  ) .getType (  )  == Token.BLOCK || n.getParent (  ) .getType (  )  == Token.SCRIPT )  {^[CLASS] TypedCodeGenerator  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  context  boolean  Node  n  rhs  
[BugLab_Wrong_Operator]^if  ( n.getParent (  ) .getType (  )  >= Token.BLOCK || n.getParent (  ) .getType (  )  == Token.SCRIPT )  {^40^41^^^^39^56^if  ( n.getParent (  ) .getType (  )  == Token.BLOCK || n.getParent (  ) .getType (  )  == Token.SCRIPT )  {^[CLASS] TypedCodeGenerator  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  context  boolean  Node  n  rhs  
[BugLab_Wrong_Operator]^if  ( n.getParent (  ) .getType (  )  <= Token.BLOCK || n.getParent (  ) .getType (  )  == Token.SCRIPT )  {^40^41^^^^39^56^if  ( n.getParent (  ) .getType (  )  == Token.BLOCK || n.getParent (  ) .getType (  )  == Token.SCRIPT )  {^[CLASS] TypedCodeGenerator  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  context  boolean  Node  n  rhs  
[BugLab_Wrong_Operator]^if  ( n.getParent (  ) .getType (  )  > Token.BLOCK || n.getParent (  ) .getType (  )  == Token.SCRIPT )  {^40^41^^^^39^56^if  ( n.getParent (  ) .getType (  )  == Token.BLOCK || n.getParent (  ) .getType (  )  == Token.SCRIPT )  {^[CLASS] TypedCodeGenerator  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  context  boolean  Node  n  rhs  
[BugLab_Wrong_Operator]^if  ( n.getParent (  ) .getType (  )  != Token.BLOCK || n.getParent (  ) .getType (  )  == Token.SCRIPT )  {^40^41^^^^39^56^if  ( n.getParent (  ) .getType (  )  == Token.BLOCK || n.getParent (  ) .getType (  )  == Token.SCRIPT )  {^[CLASS] TypedCodeGenerator  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  context  boolean  Node  n  rhs  
[BugLab_Wrong_Operator]^if  ( n.getType (  )  > Token.FUNCTION )  {^42^^^^^39^56^if  ( n.getType (  )  == Token.FUNCTION )  {^[CLASS] TypedCodeGenerator  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  context  boolean  Node  n  rhs  
[BugLab_Wrong_Operator]^if  ( n.getType (  )  != Token.FUNCTION )  {^42^^^^^39^56^if  ( n.getType (  )  == Token.FUNCTION )  {^[CLASS] TypedCodeGenerator  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  context  boolean  Node  n  rhs  
[BugLab_Wrong_Operator]^if  ( n.getType (  )  <= Token.FUNCTION )  {^42^^^^^39^56^if  ( n.getType (  )  == Token.FUNCTION )  {^[CLASS] TypedCodeGenerator  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  context  boolean  Node  n  rhs  
[BugLab_Variable_Misuse]^} else if  ( n.getType (  )  == Token.3 && n.getFirstChild (  ) .getType (  )  == Token.ASSIGN )  {^44^45^^^^39^56^} else if  ( n.getType (  )  == Token.EXPR_RESULT && n.getFirstChild (  ) .getType (  )  == Token.ASSIGN )  {^[CLASS] TypedCodeGenerator  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  context  boolean  Node  n  rhs  
[BugLab_Wrong_Operator]^} else if  ( n.getType (  )  == Token.EXPR_RESULT || n.getFirstChild (  ) .getType (  )  == Token.ASSIGN )  {^44^45^^^^39^56^} else if  ( n.getType (  )  == Token.EXPR_RESULT && n.getFirstChild (  ) .getType (  )  == Token.ASSIGN )  {^[CLASS] TypedCodeGenerator  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  context  boolean  Node  n  rhs  
[BugLab_Wrong_Operator]^} else if  ( n.getType (  )  > Token.EXPR_RESULT && n.getFirstChild (  ) .getType (  )  == Token.ASSIGN )  {^44^45^^^^39^56^} else if  ( n.getType (  )  == Token.EXPR_RESULT && n.getFirstChild (  ) .getType (  )  == Token.ASSIGN )  {^[CLASS] TypedCodeGenerator  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  context  boolean  Node  n  rhs  
[BugLab_Wrong_Operator]^} else if  ( n.getType (  )  >= Token.EXPR_RESULT && n.getFirstChild (  ) .getType (  )  == Token.ASSIGN )  {^44^45^^^^39^56^} else if  ( n.getType (  )  == Token.EXPR_RESULT && n.getFirstChild (  ) .getType (  )  == Token.ASSIGN )  {^[CLASS] TypedCodeGenerator  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  context  boolean  Node  n  rhs  
[BugLab_Wrong_Operator]^} else if  ( n.getType (  )  <= Token.EXPR_RESULT && n.getFirstChild (  ) .getType (  )  == Token.ASSIGN )  {^44^45^^^^39^56^} else if  ( n.getType (  )  == Token.EXPR_RESULT && n.getFirstChild (  ) .getType (  )  == Token.ASSIGN )  {^[CLASS] TypedCodeGenerator  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  context  boolean  Node  n  rhs  
[BugLab_Variable_Misuse]^} else if  ( rhs.getType (  )  == Token.VAR && n.getFirstChild (  ) .getFirstChild (  )  != null && n.getFirstChild (  ) .getFirstChild (  ) .getType (  )  == Token.FUNCTION )  {^48^49^50^^^39^56^} else if  ( n.getType (  )  == Token.VAR && n.getFirstChild (  ) .getFirstChild (  )  != null && n.getFirstChild (  ) .getFirstChild (  ) .getType (  )  == Token.FUNCTION )  {^[CLASS] TypedCodeGenerator  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  context  boolean  Node  n  rhs  
[BugLab_Wrong_Operator]^} else if  ( n.getType (  )  == Token.VAR || n.getFirstChild (  ) .getFirstChild (  )  != null && n.getFirstChild (  ) .getFirstChild (  ) .getType (  )  == Token.FUNCTION )  {^48^49^50^^^39^56^} else if  ( n.getType (  )  == Token.VAR && n.getFirstChild (  ) .getFirstChild (  )  != null && n.getFirstChild (  ) .getFirstChild (  ) .getType (  )  == Token.FUNCTION )  {^[CLASS] TypedCodeGenerator  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  context  boolean  Node  n  rhs  
[BugLab_Wrong_Operator]^} else if  ( n.getType (  )  != Token.VAR && n.getFirstChild (  ) .getFirstChild (  )  != null && n.getFirstChild (  ) .getFirstChild (  ) .getType (  )  == Token.FUNCTION )  {^48^49^50^^^39^56^} else if  ( n.getType (  )  == Token.VAR && n.getFirstChild (  ) .getFirstChild (  )  != null && n.getFirstChild (  ) .getFirstChild (  ) .getType (  )  == Token.FUNCTION )  {^[CLASS] TypedCodeGenerator  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  context  boolean  Node  n  rhs  
[BugLab_Wrong_Operator]^} else if  ( n.getType (  )  == Token.VAR && n.getFirstChild (  ) .getFirstChild (  )  == null && n.getFirstChild (  ) .getFirstChild (  ) .getType (  )  == Token.FUNCTION )  {^48^49^50^^^39^56^} else if  ( n.getType (  )  == Token.VAR && n.getFirstChild (  ) .getFirstChild (  )  != null && n.getFirstChild (  ) .getFirstChild (  ) .getType (  )  == Token.FUNCTION )  {^[CLASS] TypedCodeGenerator  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  context  boolean  Node  n  rhs  
[BugLab_Variable_Misuse]^add ( getFunctionAnnotation ( rhs.getFirstChild (  ) .getFirstChild (  )  )  ) ;^51^^^^^39^56^add ( getFunctionAnnotation ( n.getFirstChild (  ) .getFirstChild (  )  )  ) ;^[CLASS] TypedCodeGenerator  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  context  boolean  Node  n  rhs  
[BugLab_Variable_Misuse]^&& rhs.getFirstChild (  ) .getFirstChild (  )  != null && n.getFirstChild (  ) .getFirstChild (  ) .getType (  )  == Token.FUNCTION )  {^49^50^^^^39^56^&& n.getFirstChild (  ) .getFirstChild (  )  != null && n.getFirstChild (  ) .getFirstChild (  ) .getType (  )  == Token.FUNCTION )  {^[CLASS] TypedCodeGenerator  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  context  boolean  Node  n  rhs  
[BugLab_Variable_Misuse]^&& rhs.getFirstChild (  ) .getFirstChild (  ) .getType (  )  == Token.FUNCTION )  {^50^^^^^39^56^&& n.getFirstChild (  ) .getFirstChild (  ) .getType (  )  == Token.FUNCTION )  {^[CLASS] TypedCodeGenerator  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  context  boolean  Node  n  rhs  
[BugLab_Variable_Misuse]^Node rhs = rhs.getFirstChild (  ) .getFirstChild (  ) ;^46^^^^^39^56^Node rhs = n.getFirstChild (  ) .getFirstChild (  ) ;^[CLASS] TypedCodeGenerator  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  context  boolean  Node  n  rhs  
[BugLab_Variable_Misuse]^add ( getTypeAnnotation ( n )  ) ;^47^^^^^39^56^add ( getTypeAnnotation ( rhs )  ) ;^[CLASS] TypedCodeGenerator  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  context  boolean  Node  n  rhs  
[BugLab_Variable_Misuse]^} else if  ( rhs.getType (  )  == Token.EXPR_RESULT && n.getFirstChild (  ) .getType (  )  == Token.ASSIGN )  {^44^45^^^^39^56^} else if  ( n.getType (  )  == Token.EXPR_RESULT && n.getFirstChild (  ) .getType (  )  == Token.ASSIGN )  {^[CLASS] TypedCodeGenerator  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  context  boolean  Node  n  rhs  
[BugLab_Variable_Misuse]^&& rhs.getFirstChild (  ) .getType (  )  == Token.ASSIGN )  {^45^^^^^39^56^&& n.getFirstChild (  ) .getType (  )  == Token.ASSIGN )  {^[CLASS] TypedCodeGenerator  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  context  boolean  Node  n  rhs  
[BugLab_Variable_Misuse]^add ( getFunctionAnnotation ( rhs )  ) ;^43^^^^^39^56^add ( getFunctionAnnotation ( n )  ) ;^[CLASS] TypedCodeGenerator  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  context  boolean  Node  n  rhs  
[BugLab_Wrong_Operator]^} else if  ( n.getType (  )  != Token.EXPR_RESULT && n.getFirstChild (  ) .getType (  )  == Token.ASSIGN )  {^44^45^^^^39^56^} else if  ( n.getType (  )  == Token.EXPR_RESULT && n.getFirstChild (  ) .getType (  )  == Token.ASSIGN )  {^[CLASS] TypedCodeGenerator  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  context  boolean  Node  n  rhs  
[BugLab_Variable_Misuse]^} else if  ( n.getType (  )  == Token.4 && n.getFirstChild (  ) .getFirstChild (  )  != null && n.getFirstChild (  ) .getFirstChild (  ) .getType (  )  == Token.FUNCTION )  {^48^49^50^^^39^56^} else if  ( n.getType (  )  == Token.VAR && n.getFirstChild (  ) .getFirstChild (  )  != null && n.getFirstChild (  ) .getFirstChild (  ) .getType (  )  == Token.FUNCTION )  {^[CLASS] TypedCodeGenerator  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  context  boolean  Node  n  rhs  
[BugLab_Variable_Misuse]^} else if  ( n.getType (  )  == Token.VAR && n.getFirstChild (  ) .getFirstChild (  )  != null && n.getFirstChild (  ) .getFirstChild (  ) .getType (  )  == Token.this )  {^48^49^50^^^39^56^} else if  ( n.getType (  )  == Token.VAR && n.getFirstChild (  ) .getFirstChild (  )  != null && n.getFirstChild (  ) .getFirstChild (  ) .getType (  )  == Token.FUNCTION )  {^[CLASS] TypedCodeGenerator  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  context  boolean  Node  n  rhs  
[BugLab_Variable_Misuse]^if  ( rhs.getType (  )  == Token.FUNCTION )  {^42^^^^^39^56^if  ( n.getType (  )  == Token.FUNCTION )  {^[CLASS] TypedCodeGenerator  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  context  boolean  Node  n  rhs  
[BugLab_Wrong_Operator]^if  ( n.getType (  )  >= Token.FUNCTION )  {^42^^^^^39^56^if  ( n.getType (  )  == Token.FUNCTION )  {^[CLASS] TypedCodeGenerator  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  context  boolean  Node  n  rhs  
[BugLab_Wrong_Operator]^if  ( n.getType (  )  < Token.FUNCTION )  {^42^^^^^39^56^if  ( n.getType (  )  == Token.FUNCTION )  {^[CLASS] TypedCodeGenerator  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  context  boolean  Node  n  rhs  
[BugLab_Variable_Misuse]^if  ( rhs.getParent (  ) .getType (  )  == Token.BLOCK || n.getParent (  ) .getType (  )  == Token.SCRIPT )  {^40^41^^^^39^56^if  ( n.getParent (  ) .getType (  )  == Token.BLOCK || n.getParent (  ) .getType (  )  == Token.SCRIPT )  {^[CLASS] TypedCodeGenerator  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  context  boolean  Node  n  rhs  
[BugLab_Variable_Misuse]^|| rhs.getParent (  ) .getType (  )  == Token.SCRIPT )  {^41^^^^^39^56^|| n.getParent (  ) .getType (  )  == Token.SCRIPT )  {^[CLASS] TypedCodeGenerator  [METHOD] add [RETURN_TYPE] void   Node n Context context [VARIABLES] Context  context  boolean  Node  n  rhs  
[BugLab_Wrong_Operator]^if  ( type  ||  FunctionType )  {^61^^^^^59^69^if  ( type instanceof FunctionType )  {^[CLASS] TypedCodeGenerator  [METHOD] getTypeAnnotation [RETURN_TYPE] String   Node node [VARIABLES] JSType  type  boolean  Node  node  
[BugLab_Wrong_Operator]^} else if  ( type != null || !type.isUnknownType (  ) && !type.isEmptyType (  )  && !type.isVoidType (  )  )  {^63^64^^^^59^69^} else if  ( type != null && !type.isUnknownType (  ) && !type.isEmptyType (  )  && !type.isVoidType (  )  )  {^[CLASS] TypedCodeGenerator  [METHOD] getTypeAnnotation [RETURN_TYPE] String   Node node [VARIABLES] JSType  type  boolean  Node  node  
[BugLab_Wrong_Operator]^} else if  ( type == null && !type.isUnknownType (  ) && !type.isEmptyType (  )  && !type.isVoidType (  )  )  {^63^64^^^^59^69^} else if  ( type != null && !type.isUnknownType (  ) && !type.isEmptyType (  )  && !type.isVoidType (  )  )  {^[CLASS] TypedCodeGenerator  [METHOD] getTypeAnnotation [RETURN_TYPE] String   Node node [VARIABLES] JSType  type  boolean  Node  node  
[BugLab_Variable_Misuse]^if  ( paramNode.getJSType (  ) .isUnknownType (  )  )  {^77^^^^^62^92^if  ( node.getJSType (  ) .isUnknownType (  )  )  {^[CLASS] TypedCodeGenerator  [METHOD] getFunctionAnnotation [RETURN_TYPE] String   Node node [VARIABLES] ObjectType  interfaze  superInstance  JSType  retType  boolean  StringBuilder  sb  Node  n  node  paramNode  FunctionType  funType  
[BugLab_Variable_Misuse]^FunctionType funType =  ( FunctionType )  paramNode.getJSType (  ) ;^80^^^^^65^95^FunctionType funType =  ( FunctionType )  node.getJSType (  ) ;^[CLASS] TypedCodeGenerator  [METHOD] getFunctionAnnotation [RETURN_TYPE] String   Node node [VARIABLES] ObjectType  interfaze  superInstance  JSType  retType  boolean  StringBuilder  sb  Node  n  node  paramNode  FunctionType  funType  
[BugLab_Variable_Misuse]^if  ( node == null )  {^95^^^^^80^110^if  ( paramNode == null )  {^[CLASS] TypedCodeGenerator  [METHOD] getFunctionAnnotation [RETURN_TYPE] String   Node node [VARIABLES] ObjectType  interfaze  superInstance  JSType  retType  boolean  StringBuilder  sb  Node  n  node  paramNode  FunctionType  funType  
[BugLab_Wrong_Operator]^if  ( paramNode != null )  {^95^^^^^80^110^if  ( paramNode == null )  {^[CLASS] TypedCodeGenerator  [METHOD] getFunctionAnnotation [RETURN_TYPE] String   Node node [VARIABLES] ObjectType  interfaze  superInstance  JSType  retType  boolean  StringBuilder  sb  Node  n  node  paramNode  FunctionType  funType  
[BugLab_Variable_Misuse]^paramNode = node.getNext (  ) ;^101^^^^^86^116^paramNode = paramNode.getNext (  ) ;^[CLASS] TypedCodeGenerator  [METHOD] getFunctionAnnotation [RETURN_TYPE] String   Node node [VARIABLES] ObjectType  interfaze  superInstance  JSType  retType  boolean  StringBuilder  sb  Node  n  node  paramNode  FunctionType  funType  
[BugLab_Variable_Misuse]^sb.append ( " * @param {" + paramNode.getJSType (  )  + "} " ) ;^98^^^^^83^113^sb.append ( " * @param {" + n.getJSType (  )  + "} " ) ;^[CLASS] TypedCodeGenerator  [METHOD] getFunctionAnnotation [RETURN_TYPE] String   Node node [VARIABLES] ObjectType  interfaze  superInstance  JSType  retType  boolean  StringBuilder  sb  Node  n  node  paramNode  FunctionType  funType  
[BugLab_Wrong_Operator]^sb.append ( " * @param {" + n.getJSType (  <  )  + "} " ) ;^98^^^^^83^113^sb.append ( " * @param {" + n.getJSType (  )  + "} " ) ;^[CLASS] TypedCodeGenerator  [METHOD] getFunctionAnnotation [RETURN_TYPE] String   Node node [VARIABLES] ObjectType  interfaze  superInstance  JSType  retType  boolean  StringBuilder  sb  Node  n  node  paramNode  FunctionType  funType  
[BugLab_Wrong_Operator]^sb.append ( " * @param {"  <<  n.getJSType (  )  + "} " ) ;^98^^^^^83^113^sb.append ( " * @param {" + n.getJSType (  )  + "} " ) ;^[CLASS] TypedCodeGenerator  [METHOD] getFunctionAnnotation [RETURN_TYPE] String   Node node [VARIABLES] ObjectType  interfaze  superInstance  JSType  retType  boolean  StringBuilder  sb  Node  n  node  paramNode  FunctionType  funType  
[BugLab_Variable_Misuse]^sb.append ( node.getString (  )  ) ;^99^^^^^84^114^sb.append ( paramNode.getString (  )  ) ;^[CLASS] TypedCodeGenerator  [METHOD] getFunctionAnnotation [RETURN_TYPE] String   Node node [VARIABLES] ObjectType  interfaze  superInstance  JSType  retType  boolean  StringBuilder  sb  Node  n  node  paramNode  FunctionType  funType  
[BugLab_Wrong_Operator]^if  ( retType != null || !retType.isUnknownType (  )  && !retType.isEmptyType (  )  )  {^106^^^^^91^121^if  ( retType != null && !retType.isUnknownType (  )  && !retType.isEmptyType (  )  )  {^[CLASS] TypedCodeGenerator  [METHOD] getFunctionAnnotation [RETURN_TYPE] String   Node node [VARIABLES] ObjectType  interfaze  superInstance  JSType  retType  boolean  StringBuilder  sb  Node  n  node  paramNode  FunctionType  funType  
[BugLab_Wrong_Operator]^if  ( retType == null && !retType.isUnknownType (  )  && !retType.isEmptyType (  )  )  {^106^^^^^91^121^if  ( retType != null && !retType.isUnknownType (  )  && !retType.isEmptyType (  )  )  {^[CLASS] TypedCodeGenerator  [METHOD] getFunctionAnnotation [RETURN_TYPE] String   Node node [VARIABLES] ObjectType  interfaze  superInstance  JSType  retType  boolean  StringBuilder  sb  Node  n  node  paramNode  FunctionType  funType  
[BugLab_Wrong_Operator]^sb.append ( " * @return {"  <=  retType  <=  "}\n" ) ;^107^^^^^92^122^sb.append ( " * @return {" + retType + "}\n" ) ;^[CLASS] TypedCodeGenerator  [METHOD] getFunctionAnnotation [RETURN_TYPE] String   Node node [VARIABLES] ObjectType  interfaze  superInstance  JSType  retType  boolean  StringBuilder  sb  Node  n  node  paramNode  FunctionType  funType  
[BugLab_Wrong_Operator]^sb.append ( " * @return {"  >>  retType + "}\n" ) ;^107^^^^^92^122^sb.append ( " * @return {" + retType + "}\n" ) ;^[CLASS] TypedCodeGenerator  [METHOD] getFunctionAnnotation [RETURN_TYPE] String   Node node [VARIABLES] ObjectType  interfaze  superInstance  JSType  retType  boolean  StringBuilder  sb  Node  n  node  paramNode  FunctionType  funType  
[BugLab_Wrong_Operator]^sb.append ( " * @return {"  &&  retType  &&  "}\n" ) ;^107^^^^^92^122^sb.append ( " * @return {" + retType + "}\n" ) ;^[CLASS] TypedCodeGenerator  [METHOD] getFunctionAnnotation [RETURN_TYPE] String   Node node [VARIABLES] ObjectType  interfaze  superInstance  JSType  retType  boolean  StringBuilder  sb  Node  n  node  paramNode  FunctionType  funType  
[BugLab_Wrong_Operator]^sb.append ( " * @return {"  |  retType + "}\n" ) ;^107^^^^^92^122^sb.append ( " * @return {" + retType + "}\n" ) ;^[CLASS] TypedCodeGenerator  [METHOD] getFunctionAnnotation [RETURN_TYPE] String   Node node [VARIABLES] ObjectType  interfaze  superInstance  JSType  retType  boolean  StringBuilder  sb  Node  n  node  paramNode  FunctionType  funType  
[BugLab_Wrong_Operator]^if  ( funType.isConstructor (  )  && funType.isInterface (  )  )  {^111^^^^^96^126^if  ( funType.isConstructor (  )  || funType.isInterface (  )  )  {^[CLASS] TypedCodeGenerator  [METHOD] getFunctionAnnotation [RETURN_TYPE] String   Node node [VARIABLES] ObjectType  interfaze  superInstance  JSType  retType  boolean  StringBuilder  sb  Node  n  node  paramNode  FunctionType  funType  
[BugLab_Wrong_Operator]^sb.append ( " * @extends {"  ||  + superInstance + "}\n" ) ;^115^^^^^100^130^sb.append ( " * @extends {"  + superInstance + "}\n" ) ;^[CLASS] TypedCodeGenerator  [METHOD] getFunctionAnnotation [RETURN_TYPE] String   Node node [VARIABLES] ObjectType  interfaze  superInstance  JSType  retType  boolean  StringBuilder  sb  Node  n  node  paramNode  FunctionType  funType  
[BugLab_Wrong_Operator]^sb.append ( " * @extends {"  &  + superInstance + "}\n" ) ;^115^^^^^100^130^sb.append ( " * @extends {"  + superInstance + "}\n" ) ;^[CLASS] TypedCodeGenerator  [METHOD] getFunctionAnnotation [RETURN_TYPE] String   Node node [VARIABLES] ObjectType  interfaze  superInstance  JSType  retType  boolean  StringBuilder  sb  Node  n  node  paramNode  FunctionType  funType  
[BugLab_Variable_Misuse]^sb.append ( " * @extends {"  + interfaze + "}\n" ) ;^115^^^^^100^130^sb.append ( " * @extends {"  + superInstance + "}\n" ) ;^[CLASS] TypedCodeGenerator  [METHOD] getFunctionAnnotation [RETURN_TYPE] String   Node node [VARIABLES] ObjectType  interfaze  superInstance  JSType  retType  boolean  StringBuilder  sb  Node  n  node  paramNode  FunctionType  funType  
[BugLab_Wrong_Operator]^sb.append ( " * @extends {"  <<  + superInstance + "}\n" ) ;^115^^^^^100^130^sb.append ( " * @extends {"  + superInstance + "}\n" ) ;^[CLASS] TypedCodeGenerator  [METHOD] getFunctionAnnotation [RETURN_TYPE] String   Node node [VARIABLES] ObjectType  interfaze  superInstance  JSType  retType  boolean  StringBuilder  sb  Node  n  node  paramNode  FunctionType  funType  
[BugLab_Wrong_Operator]^sb.append ( " * @extends {"  !=  + superInstance + "}\n" ) ;^115^^^^^100^130^sb.append ( " * @extends {"  + superInstance + "}\n" ) ;^[CLASS] TypedCodeGenerator  [METHOD] getFunctionAnnotation [RETURN_TYPE] String   Node node [VARIABLES] ObjectType  interfaze  superInstance  JSType  retType  boolean  StringBuilder  sb  Node  n  node  paramNode  FunctionType  funType  
[BugLab_Variable_Misuse]^sb.append ( " * @implements {"  + superInstance + "}\n" ) ;^119^^^^^104^134^sb.append ( " * @implements {"  + interfaze + "}\n" ) ;^[CLASS] TypedCodeGenerator  [METHOD] getFunctionAnnotation [RETURN_TYPE] String   Node node [VARIABLES] ObjectType  interfaze  superInstance  JSType  retType  boolean  StringBuilder  sb  Node  n  node  paramNode  FunctionType  funType  
[BugLab_Wrong_Operator]^sb.append ( " * @implements {"  >=  + interfaze + "}\n" ) ;^119^^^^^104^134^sb.append ( " * @implements {"  + interfaze + "}\n" ) ;^[CLASS] TypedCodeGenerator  [METHOD] getFunctionAnnotation [RETURN_TYPE] String   Node node [VARIABLES] ObjectType  interfaze  superInstance  JSType  retType  boolean  StringBuilder  sb  Node  n  node  paramNode  FunctionType  funType  
[BugLab_Wrong_Operator]^sb.append ( " * @implements {"  ^  + interfaze + "}\n" ) ;^119^^^^^104^134^sb.append ( " * @implements {"  + interfaze + "}\n" ) ;^[CLASS] TypedCodeGenerator  [METHOD] getFunctionAnnotation [RETURN_TYPE] String   Node node [VARIABLES] ObjectType  interfaze  superInstance  JSType  retType  boolean  StringBuilder  sb  Node  n  node  paramNode  FunctionType  funType  
[BugLab_Wrong_Operator]^sb.append ( " * @extends {"  >>  + superInstance + "}\n" ) ;^115^^^^^100^130^sb.append ( " * @extends {"  + superInstance + "}\n" ) ;^[CLASS] TypedCodeGenerator  [METHOD] getFunctionAnnotation [RETURN_TYPE] String   Node node [VARIABLES] ObjectType  interfaze  superInstance  JSType  retType  boolean  StringBuilder  sb  Node  n  node  paramNode  FunctionType  funType  
[BugLab_Wrong_Operator]^sb.append ( " * @extends {"  |  + superInstance + "}\n" ) ;^115^^^^^100^130^sb.append ( " * @extends {"  + superInstance + "}\n" ) ;^[CLASS] TypedCodeGenerator  [METHOD] getFunctionAnnotation [RETURN_TYPE] String   Node node [VARIABLES] ObjectType  interfaze  superInstance  JSType  retType  boolean  StringBuilder  sb  Node  n  node  paramNode  FunctionType  funType  
[BugLab_Wrong_Operator]^sb.append ( " * @extends {"  >  + superInstance + "}\n" ) ;^115^^^^^100^130^sb.append ( " * @extends {"  + superInstance + "}\n" ) ;^[CLASS] TypedCodeGenerator  [METHOD] getFunctionAnnotation [RETURN_TYPE] String   Node node [VARIABLES] ObjectType  interfaze  superInstance  JSType  retType  boolean  StringBuilder  sb  Node  n  node  paramNode  FunctionType  funType  
[BugLab_Wrong_Operator]^sb.append ( " * @implements {"  <=  + interfaze + "}\n" ) ;^119^^^^^104^134^sb.append ( " * @implements {"  + interfaze + "}\n" ) ;^[CLASS] TypedCodeGenerator  [METHOD] getFunctionAnnotation [RETURN_TYPE] String   Node node [VARIABLES] ObjectType  interfaze  superInstance  JSType  retType  boolean  StringBuilder  sb  Node  n  node  paramNode  FunctionType  funType  
