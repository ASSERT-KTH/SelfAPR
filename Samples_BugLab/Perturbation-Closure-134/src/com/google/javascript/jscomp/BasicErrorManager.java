[BugLab_Wrong_Literal]^private int errorCount = -1;^43^^^^^38^48^private int errorCount = 0;^[CLASS] BasicErrorManager LeveledJSErrorComparator   [VARIABLES] 
[BugLab_Argument_Swapping]^if  ( messages.add ( Pair.of ( level, error )  )  )  {^48^^^^^47^55^if  ( messages.add ( Pair.of ( error, level )  )  )  {^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] report [RETURN_TYPE] void   CheckLevel level JSError error [VARIABLES] boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  errorCount  warningCount  CheckLevel  level  JSError  error  
[BugLab_Argument_Swapping]^if  ( error.add ( Pair.of ( messages, level )  )  )  {^48^^^^^47^55^if  ( messages.add ( Pair.of ( error, level )  )  )  {^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] report [RETURN_TYPE] void   CheckLevel level JSError error [VARIABLES] boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  errorCount  warningCount  CheckLevel  level  JSError  error  
[BugLab_Wrong_Operator]^if  ( level > CheckLevel.ERROR )  {^49^^^^^47^55^if  ( level == CheckLevel.ERROR )  {^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] report [RETURN_TYPE] void   CheckLevel level JSError error [VARIABLES] boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  errorCount  warningCount  CheckLevel  level  JSError  error  
[BugLab_Wrong_Operator]^if  ( level != CheckLevel.ERROR )  {^49^^^^^47^55^if  ( level == CheckLevel.ERROR )  {^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] report [RETURN_TYPE] void   CheckLevel level JSError error [VARIABLES] boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  errorCount  warningCount  CheckLevel  level  JSError  error  
[BugLab_Variable_Misuse]^} else if  ( level == CheckLevel.2 )  {^51^^^^^47^55^} else if  ( level == CheckLevel.WARNING )  {^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] report [RETURN_TYPE] void   CheckLevel level JSError error [VARIABLES] boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  errorCount  warningCount  CheckLevel  level  JSError  error  
[BugLab_Wrong_Operator]^} else if  ( level <= CheckLevel.WARNING )  {^51^^^^^47^55^} else if  ( level == CheckLevel.WARNING )  {^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] report [RETURN_TYPE] void   CheckLevel level JSError error [VARIABLES] boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  errorCount  warningCount  CheckLevel  level  JSError  error  
[BugLab_Wrong_Operator]^} else if  ( level != CheckLevel.WARNING )  {^51^^^^^47^55^} else if  ( level == CheckLevel.WARNING )  {^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] report [RETURN_TYPE] void   CheckLevel level JSError error [VARIABLES] boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  errorCount  warningCount  CheckLevel  level  JSError  error  
[BugLab_Wrong_Operator]^if  ( level >= CheckLevel.ERROR )  {^49^^^^^47^55^if  ( level == CheckLevel.ERROR )  {^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] report [RETURN_TYPE] void   CheckLevel level JSError error [VARIABLES] boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  errorCount  warningCount  CheckLevel  level  JSError  error  
[BugLab_Argument_Swapping]^if  ( level.add ( Pair.of ( error, messages )  )  )  {^48^^^^^47^55^if  ( messages.add ( Pair.of ( error, level )  )  )  {^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] report [RETURN_TYPE] void   CheckLevel level JSError error [VARIABLES] boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  errorCount  warningCount  CheckLevel  level  JSError  error  
[BugLab_Variable_Misuse]^return warningCount;^76^^^^^75^77^return errorCount;^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] getErrorCount [RETURN_TYPE] int   [VARIABLES] boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  errorCount  warningCount  
[BugLab_Variable_Misuse]^return errorCount;^80^^^^^79^81^return warningCount;^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] getWarningCount [RETURN_TYPE] int   [VARIABLES] boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  errorCount  warningCount  
[BugLab_Wrong_Operator]^if  ( p.second > level )  {^102^^^^^99^107^if  ( p.second == level )  {^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] toArray [RETURN_TYPE] JSError[]   CheckLevel level [VARIABLES] boolean  double  typedPercent  CheckLevel  level  List  errors  SortedSet  messages  int  P1_GT_P2  P1_LT_P2  errorCount  warningCount  Pair  p  
[BugLab_Wrong_Operator]^if  ( p2 != null )  {^126^^^^^111^141^if  ( p2 == null )  {^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[BugLab_Wrong_Operator]^if  ( p1 != null )  {^127^^^^^112^142^if  ( p1 == null )  {^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[BugLab_Variable_Misuse]^return warningCount;^130^^^^^127^131^return P1_GT_P2;^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[BugLab_Wrong_Literal]^return sourceCompare;^128^^^^^113^143^return 0;^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[BugLab_Wrong_Literal]^return -1;^128^^^^^113^143^return 0;^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[BugLab_Variable_Misuse]^return sourceCompare;^130^^^^^115^145^return P1_GT_P2;^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[BugLab_Variable_Misuse]^if  ( 4 == null )  {^127^^^^^112^142^if  ( p1 == null )  {^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[BugLab_Variable_Misuse]^return sourceCompare;^130^^^^^127^131^return P1_GT_P2;^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[BugLab_Wrong_Literal]^return lineno2;^128^^^^^113^143^return 0;^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[BugLab_Variable_Misuse]^return warningCount;^130^^^^^115^145^return P1_GT_P2;^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[BugLab_Wrong_Operator]^if  ( p1.second == p2.second )  {^135^^^^^120^150^if  ( p1.second != p2.second )  {^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[BugLab_Variable_Misuse]^if  ( source2 != null && source2 != null )  {^142^^^^^127^157^if  ( source1 != null && source2 != null )  {^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[BugLab_Variable_Misuse]^if  ( source1 != null && source1 != null )  {^142^^^^^127^157^if  ( source1 != null && source2 != null )  {^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[BugLab_Argument_Swapping]^if  ( source2 != null && source1 != null )  {^142^^^^^127^157^if  ( source1 != null && source2 != null )  {^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[BugLab_Wrong_Operator]^if  ( source1 != null || source2 != null )  {^142^^^^^127^157^if  ( source1 != null && source2 != null )  {^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[BugLab_Wrong_Operator]^if  ( source1 == null && source2 != null )  {^142^^^^^127^157^if  ( source1 != null && source2 != null )  {^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[BugLab_Wrong_Operator]^if  ( source1 != null && source2 == null )  {^142^^^^^127^157^if  ( source1 != null && source2 != null )  {^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[BugLab_Argument_Swapping]^} else if  ( source2 == null && source1 != null )  {^147^^^^^132^162^} else if  ( source1 == null && source2 != null )  {^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[BugLab_Wrong_Operator]^} else if  ( source1 == null || source2 != null )  {^147^^^^^132^162^} else if  ( source1 == null && source2 != null )  {^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[BugLab_Wrong_Operator]^} else if  ( source1 != null && source2 != null )  {^147^^^^^132^162^} else if  ( source1 == null && source2 != null )  {^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[BugLab_Wrong_Operator]^} else if  ( source1 == null && source2 == null )  {^147^^^^^132^162^} else if  ( source1 == null && source2 != null )  {^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[BugLab_Argument_Swapping]^} else if  ( source2 != null && source1 == null )  {^149^^^^^134^164^} else if  ( source1 != null && source2 == null )  {^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[BugLab_Wrong_Operator]^} else if  ( source1 != null || source2 == null )  {^149^^^^^134^164^} else if  ( source1 != null && source2 == null )  {^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[BugLab_Wrong_Operator]^} else if  ( source1 == null && source2 == null )  {^149^^^^^134^164^} else if  ( source1 != null && source2 == null )  {^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[BugLab_Wrong_Operator]^} else if  ( source1 != null && source2 != null )  {^149^^^^^134^164^} else if  ( source1 != null && source2 == null )  {^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[BugLab_Variable_Misuse]^return lineno2;^150^^^^^135^165^return P1_GT_P2;^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[BugLab_Variable_Misuse]^return warningCount;^148^^^^^133^163^return P1_LT_P2;^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[BugLab_Variable_Misuse]^return lineno1;^150^^^^^135^165^return P1_GT_P2;^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[BugLab_Variable_Misuse]^return sourceCompare;^148^^^^^133^163^return P1_LT_P2;^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[BugLab_Variable_Misuse]^return warningCount;^150^^^^^135^165^return P1_GT_P2;^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[BugLab_Variable_Misuse]^if  ( warningCount != 0 )  {^144^^^^^129^159^if  ( sourceCompare != 0 )  {^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[BugLab_Wrong_Operator]^if  ( sourceCompare <= 0 )  {^144^^^^^129^159^if  ( sourceCompare != 0 )  {^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[BugLab_Wrong_Literal]^if  ( sourceCompare != -1 )  {^144^^^^^129^159^if  ( sourceCompare != 0 )  {^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[BugLab_Variable_Misuse]^return errorCount;^145^^^^^130^160^return sourceCompare;^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[BugLab_Variable_Misuse]^int sourceCompare = source1.compareTo ( source1 ) ;^143^^^^^128^158^int sourceCompare = source1.compareTo ( source2 ) ;^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[BugLab_Argument_Swapping]^int sourceCompare = source2.compareTo ( source1 ) ;^143^^^^^128^158^int sourceCompare = source1.compareTo ( source2 ) ;^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[BugLab_Variable_Misuse]^if  ( lineno2 != 0 )  {^144^^^^^129^159^if  ( sourceCompare != 0 )  {^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[BugLab_Wrong_Operator]^if  ( sourceCompare > 0 )  {^144^^^^^129^159^if  ( sourceCompare != 0 )  {^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[BugLab_Wrong_Literal]^if  ( sourceCompare != P1_LT_P2 )  {^144^^^^^129^159^if  ( sourceCompare != 0 )  {^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[BugLab_Variable_Misuse]^return sourceCompare;^150^^^^^135^165^return P1_GT_P2;^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[BugLab_Variable_Misuse]^return lineno2;^148^^^^^133^163^return P1_LT_P2;^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[BugLab_Variable_Misuse]^} else if  ( source1 != null && source1 == null )  {^149^^^^^134^164^} else if  ( source1 != null && source2 == null )  {^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[BugLab_Variable_Misuse]^return lineno2;^145^^^^^130^160^return sourceCompare;^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[BugLab_Variable_Misuse]^return lineno1;^148^^^^^133^163^return P1_LT_P2;^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[BugLab_Variable_Misuse]^if  ( warningCount != lineno2 )  {^155^^^^^140^170^if  ( lineno1 != lineno2 )  {^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[BugLab_Variable_Misuse]^if  ( lineno1 != sourceCompare )  {^155^^^^^140^170^if  ( lineno1 != lineno2 )  {^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[BugLab_Wrong_Operator]^if  ( lineno1 == lineno2 )  {^155^^^^^140^170^if  ( lineno1 != lineno2 )  {^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[BugLab_Variable_Misuse]^} else if  ( errorCount < 0 && 0 <= lineno2 )  {^157^^^^^142^172^} else if  ( lineno1 < 0 && 0 <= lineno2 )  {^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[BugLab_Variable_Misuse]^} else if  ( lineno1 < 0 && 0 <= errorCount )  {^157^^^^^142^172^} else if  ( lineno1 < 0 && 0 <= lineno2 )  {^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[BugLab_Wrong_Operator]^} else if  ( lineno1 < 0 || 0 <= lineno2 )  {^157^^^^^142^172^} else if  ( lineno1 < 0 && 0 <= lineno2 )  {^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[BugLab_Wrong_Operator]^} else if  ( lineno1 <= 0 && 0 <= lineno2 )  {^157^^^^^142^172^} else if  ( lineno1 < 0 && 0 <= lineno2 )  {^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[BugLab_Wrong_Operator]^} else if  ( lineno1 < 0 && 0 < lineno2 )  {^157^^^^^142^172^} else if  ( lineno1 < 0 && 0 <= lineno2 )  {^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[BugLab_Wrong_Literal]^} else if  ( lineno1 < charno2 && charno2 <= lineno2 )  {^157^^^^^142^172^} else if  ( lineno1 < 0 && 0 <= lineno2 )  {^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[BugLab_Wrong_Literal]^} else if  ( lineno1 < -1 && -1 <= lineno2 )  {^157^^^^^142^172^} else if  ( lineno1 < 0 && 0 <= lineno2 )  {^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[BugLab_Wrong_Literal]^} else if  ( lineno1 < errorCount && errorCount <= lineno2 )  {^157^^^^^142^172^} else if  ( lineno1 < 0 && 0 <= lineno2 )  {^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[BugLab_Variable_Misuse]^} else if  ( 0 <= lineno2 && lineno2 < 0 )  {^159^^^^^144^174^} else if  ( 0 <= lineno1 && lineno2 < 0 )  {^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[BugLab_Variable_Misuse]^} else if  ( 0 <= lineno1 && errorCount < 0 )  {^159^^^^^144^174^} else if  ( 0 <= lineno1 && lineno2 < 0 )  {^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[BugLab_Argument_Swapping]^} else if  ( 0 <= lineno2 && lineno1 < 0 )  {^159^^^^^144^174^} else if  ( 0 <= lineno1 && lineno2 < 0 )  {^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[BugLab_Wrong_Operator]^} else if  ( 0 <= lineno1 || lineno2 < 0 )  {^159^^^^^144^174^} else if  ( 0 <= lineno1 && lineno2 < 0 )  {^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[BugLab_Wrong_Operator]^} else if  ( 0 < lineno1 && lineno2 < 0 )  {^159^^^^^144^174^} else if  ( 0 <= lineno1 && lineno2 < 0 )  {^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[BugLab_Wrong_Operator]^} else if  ( 0 <= lineno1 && lineno2 > 0 )  {^159^^^^^144^174^} else if  ( 0 <= lineno1 && lineno2 < 0 )  {^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[BugLab_Wrong_Literal]^} else if  ( -1 <= lineno1 && lineno2 < -1 )  {^159^^^^^144^174^} else if  ( 0 <= lineno1 && lineno2 < 0 )  {^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[BugLab_Wrong_Literal]^} else if  (  <= lineno1 && lineno2 <  )  {^159^^^^^144^174^} else if  ( 0 <= lineno1 && lineno2 < 0 )  {^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[BugLab_Variable_Misuse]^return warningCount;^160^^^^^145^175^return P1_GT_P2;^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[BugLab_Variable_Misuse]^return lineno1;^158^^^^^143^173^return P1_LT_P2;^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[BugLab_Variable_Misuse]^} else if  ( 0 <= warningCount && lineno2 < 0 )  {^159^^^^^144^174^} else if  ( 0 <= lineno1 && lineno2 < 0 )  {^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[BugLab_Variable_Misuse]^} else if  ( 0 <= lineno1 && warningCount < 0 )  {^159^^^^^144^174^} else if  ( 0 <= lineno1 && lineno2 < 0 )  {^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[BugLab_Wrong_Operator]^} else if  ( 0 <= lineno1 && lineno2 <= 0 )  {^159^^^^^144^174^} else if  ( 0 <= lineno1 && lineno2 < 0 )  {^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[BugLab_Wrong_Literal]^} else if  ( warningCount <= lineno1 && lineno2 < warningCount )  {^159^^^^^144^174^} else if  ( 0 <= lineno1 && lineno2 < 0 )  {^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[BugLab_Variable_Misuse]^return lineno2;^160^^^^^145^175^return P1_GT_P2;^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[BugLab_Variable_Misuse]^return warningCount - lineno2;^156^^^^^141^171^return lineno1 - lineno2;^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[BugLab_Variable_Misuse]^return lineno1 - errorCount;^156^^^^^141^171^return lineno1 - lineno2;^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[BugLab_Argument_Swapping]^return lineno2 - lineno1;^156^^^^^141^171^return lineno1 - lineno2;^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[BugLab_Wrong_Operator]^return lineno1  >  lineno2;^156^^^^^141^171^return lineno1 - lineno2;^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[BugLab_Variable_Misuse]^} else if  ( lineno2 < 0 && 0 <= lineno2 )  {^157^^^^^142^172^} else if  ( lineno1 < 0 && 0 <= lineno2 )  {^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[BugLab_Variable_Misuse]^} else if  ( lineno1 < 0 && 0 <= sourceCompare )  {^157^^^^^142^172^} else if  ( lineno1 < 0 && 0 <= lineno2 )  {^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[BugLab_Wrong_Operator]^} else if  ( lineno1 > 0 && 0 <= lineno2 )  {^157^^^^^142^172^} else if  ( lineno1 < 0 && 0 <= lineno2 )  {^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[BugLab_Wrong_Literal]^} else if  ( lineno1 < 1 && 1 <= lineno2 )  {^157^^^^^142^172^} else if  ( lineno1 < 0 && 0 <= lineno2 )  {^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[BugLab_Wrong_Literal]^} else if  ( lineno1 < sourceCompare && sourceCompare <= lineno2 )  {^157^^^^^142^172^} else if  ( lineno1 < 0 && 0 <= lineno2 )  {^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[BugLab_Variable_Misuse]^} else if  ( 0 <= sourceCompare && lineno2 < 0 )  {^159^^^^^144^174^} else if  ( 0 <= lineno1 && lineno2 < 0 )  {^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[BugLab_Wrong_Operator]^} else if  ( 0 <= lineno1 && lineno2 == 0 )  {^159^^^^^144^174^} else if  ( 0 <= lineno1 && lineno2 < 0 )  {^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[BugLab_Wrong_Literal]^} else if  ( errorCount <= lineno1 && lineno2 < errorCount )  {^159^^^^^144^174^} else if  ( 0 <= lineno1 && lineno2 < 0 )  {^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[BugLab_Variable_Misuse]^return lineno1;^160^^^^^145^175^return P1_GT_P2;^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[BugLab_Variable_Misuse]^return sourceCompare;^158^^^^^143^173^return P1_LT_P2;^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[BugLab_Wrong_Literal]^} else if  ( P1_LT_P2 <= lineno1 && lineno2 < P1_LT_P2 )  {^159^^^^^144^174^} else if  ( 0 <= lineno1 && lineno2 < 0 )  {^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[BugLab_Wrong_Operator]^return lineno1  >>  lineno2;^156^^^^^141^171^return lineno1 - lineno2;^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[BugLab_Variable_Misuse]^return warningCount;^158^^^^^143^173^return P1_LT_P2;^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[BugLab_Variable_Misuse]^if  ( warningCount != charno2 )  {^165^^^^^150^180^if  ( charno1 != charno2 )  {^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[BugLab_Variable_Misuse]^if  ( charno1 != sourceCompare )  {^165^^^^^150^180^if  ( charno1 != charno2 )  {^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[BugLab_Argument_Swapping]^if  ( charno2 != charno1 )  {^165^^^^^150^180^if  ( charno1 != charno2 )  {^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[BugLab_Wrong_Operator]^if  ( charno1 == charno2 )  {^165^^^^^150^180^if  ( charno1 != charno2 )  {^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[BugLab_Variable_Misuse]^} else if  ( warningCount < 0 && 0 <= charno2 )  {^167^^^^^152^182^} else if  ( charno1 < 0 && 0 <= charno2 )  {^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[BugLab_Variable_Misuse]^} else if  ( charno1 < 0 && 0 <= lineno2 )  {^167^^^^^152^182^} else if  ( charno1 < 0 && 0 <= charno2 )  {^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[BugLab_Wrong_Operator]^} else if  ( charno1 < 0 || 0 <= charno2 )  {^167^^^^^152^182^} else if  ( charno1 < 0 && 0 <= charno2 )  {^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[BugLab_Wrong_Operator]^} else if  ( charno1 > 0 && 0 <= charno2 )  {^167^^^^^152^182^} else if  ( charno1 < 0 && 0 <= charno2 )  {^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[BugLab_Wrong_Operator]^} else if  ( charno1 < 0 && 0 > charno2 )  {^167^^^^^152^182^} else if  ( charno1 < 0 && 0 <= charno2 )  {^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[BugLab_Wrong_Operator]^} else if  ( charno1 < 0 && 0 < charno2 )  {^167^^^^^152^182^} else if  ( charno1 < 0 && 0 <= charno2 )  {^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[BugLab_Wrong_Literal]^} else if  ( charno1 < warningCount && warningCount <= charno2 )  {^167^^^^^152^182^} else if  ( charno1 < 0 && 0 <= charno2 )  {^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[BugLab_Wrong_Literal]^} else if  ( charno1 < lineno1 && lineno1 <= charno2 )  {^167^^^^^152^182^} else if  ( charno1 < 0 && 0 <= charno2 )  {^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[BugLab_Wrong_Literal]^} else if  ( charno1 < -1 && -1 <= charno2 )  {^167^^^^^152^182^} else if  ( charno1 < 0 && 0 <= charno2 )  {^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[BugLab_Variable_Misuse]^} else if  ( 0 <= warningCount && charno2 < 0 )  {^169^^^^^154^184^} else if  ( 0 <= charno1 && charno2 < 0 )  {^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[BugLab_Variable_Misuse]^} else if  ( 0 <= charno1 && warningCount < 0 )  {^169^^^^^154^184^} else if  ( 0 <= charno1 && charno2 < 0 )  {^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[BugLab_Argument_Swapping]^} else if  ( 0 <= charno2 && charno1 < 0 )  {^169^^^^^154^184^} else if  ( 0 <= charno1 && charno2 < 0 )  {^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[BugLab_Wrong_Operator]^} else if  ( 0 <= charno1 || charno2 < 0 )  {^169^^^^^154^184^} else if  ( 0 <= charno1 && charno2 < 0 )  {^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[BugLab_Wrong_Operator]^} else if  ( 0 < charno1 && charno2 < 0 )  {^169^^^^^154^184^} else if  ( 0 <= charno1 && charno2 < 0 )  {^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[BugLab_Wrong_Operator]^} else if  ( 0 <= charno1 && charno2 <= 0 )  {^169^^^^^154^184^} else if  ( 0 <= charno1 && charno2 < 0 )  {^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[BugLab_Wrong_Literal]^} else if  ( P1_GT_P2 <= charno1 && charno2 < P1_GT_P2 )  {^169^^^^^154^184^} else if  ( 0 <= charno1 && charno2 < 0 )  {^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[BugLab_Wrong_Literal]^} else if  ( charno1 <= charno1 && charno2 < charno1 )  {^169^^^^^154^184^} else if  ( 0 <= charno1 && charno2 < 0 )  {^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[BugLab_Variable_Misuse]^return lineno2;^170^^^^^155^185^return P1_GT_P2;^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[BugLab_Variable_Misuse]^return sourceCompare;^168^^^^^153^183^return P1_LT_P2;^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[BugLab_Variable_Misuse]^} else if  ( 0 <= charno1 && lineno2 < 0 )  {^169^^^^^154^184^} else if  ( 0 <= charno1 && charno2 < 0 )  {^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[BugLab_Wrong_Literal]^} else if  ( lineno1 <= charno1 && charno2 < lineno1 )  {^169^^^^^154^184^} else if  ( 0 <= charno1 && charno2 < 0 )  {^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[BugLab_Variable_Misuse]^return warningCount;^170^^^^^155^185^return P1_GT_P2;^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[BugLab_Variable_Misuse]^return lineno1;^168^^^^^153^183^return P1_LT_P2;^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[BugLab_Variable_Misuse]^return charno1 - warningCount;^166^^^^^151^181^return charno1 - charno2;^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[BugLab_Argument_Swapping]^return charno2 - charno1;^166^^^^^151^181^return charno1 - charno2;^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[BugLab_Wrong_Operator]^return charno1  !=  charno2;^166^^^^^151^181^return charno1 - charno2;^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[BugLab_Variable_Misuse]^} else if  ( charno1 < 0 && 0 <= sourceCompare )  {^167^^^^^152^182^} else if  ( charno1 < 0 && 0 <= charno2 )  {^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[BugLab_Argument_Swapping]^} else if  ( charno2 < 0 && 0 <= charno1 )  {^167^^^^^152^182^} else if  ( charno1 < 0 && 0 <= charno2 )  {^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[BugLab_Wrong_Operator]^} else if  ( charno1 <= 0 && 0 <= charno2 )  {^167^^^^^152^182^} else if  ( charno1 < 0 && 0 <= charno2 )  {^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[BugLab_Wrong_Literal]^} else if  ( charno1 < P1_GT_P2 && P1_GT_P2 <= charno2 )  {^167^^^^^152^182^} else if  ( charno1 < 0 && 0 <= charno2 )  {^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[BugLab_Wrong_Literal]^} else if  ( charno1 < errorCount && errorCount <= charno2 )  {^167^^^^^152^182^} else if  ( charno1 < 0 && 0 <= charno2 )  {^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[BugLab_Variable_Misuse]^} else if  ( 0 <= sourceCompare && charno2 < 0 )  {^169^^^^^154^184^} else if  ( 0 <= charno1 && charno2 < 0 )  {^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[BugLab_Wrong_Operator]^} else if  ( 0 == charno1 && charno2 < 0 )  {^169^^^^^154^184^} else if  ( 0 <= charno1 && charno2 < 0 )  {^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[BugLab_Wrong_Literal]^} else if  ( lineno2 <= charno1 && charno2 < lineno2 )  {^169^^^^^154^184^} else if  ( 0 <= charno1 && charno2 < 0 )  {^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[BugLab_Variable_Misuse]^return warningCount;^168^^^^^153^183^return P1_LT_P2;^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[BugLab_Wrong_Literal]^} else if  (  <= charno1 && charno2 <  )  {^169^^^^^154^184^} else if  ( 0 <= charno1 && charno2 < 0 )  {^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[BugLab_Wrong_Literal]^} else if  ( errorCount <= charno1 && charno2 < errorCount )  {^169^^^^^154^184^} else if  ( 0 <= charno1 && charno2 < 0 )  {^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[BugLab_Variable_Misuse]^return lineno1;^170^^^^^155^185^return P1_GT_P2;^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[BugLab_Variable_Misuse]^return warningCount - charno2;^166^^^^^151^181^return charno1 - charno2;^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[BugLab_Variable_Misuse]^return charno1 - lineno2;^166^^^^^151^181^return charno1 - charno2;^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[BugLab_Wrong_Operator]^return charno1  >>  charno2;^166^^^^^151^181^return charno1 - charno2;^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[BugLab_Variable_Misuse]^return lineno2;^168^^^^^153^183^return P1_LT_P2;^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[BugLab_Wrong_Literal]^private static final int PP1_GT_P2_GT_P2 = P1_GT_P2;^121^^^^^116^126^private static final int P1_GT_P2 = 1;^[CLASS] LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[BugLab_Wrong_Operator]^if  ( p2 != null )  {^126^^^^^111^141^if  ( p2 == null )  {^[CLASS] LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  int  P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  Pair  p1  p2  
[BugLab_Wrong_Operator]^if  ( p1 != null )  {^127^^^^^112^142^if  ( p1 == null )  {^[CLASS] LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  int  P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  Pair  p1  p2  
[BugLab_Variable_Misuse]^return sourceCompare;^130^^^^^127^131^return P1_GT_P2;^[CLASS] LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  int  P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  Pair  p1  p2  
[BugLab_Wrong_Literal]^return charno1;^128^^^^^113^143^return 0;^[CLASS] LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  int  P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  Pair  p1  p2  
[BugLab_Wrong_Literal]^return 1;^128^^^^^113^143^return 0;^[CLASS] LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  int  P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  Pair  p1  p2  
[BugLab_Variable_Misuse]^return sourceCompare;^130^^^^^115^145^return P1_GT_P2;^[CLASS] LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  int  P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  Pair  p1  p2  
[BugLab_Wrong_Literal]^return lineno2;^128^^^^^113^143^return 0;^[CLASS] LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  int  P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  Pair  p1  p2  
[BugLab_Wrong_Literal]^return sourceCompare;^128^^^^^113^143^return 0;^[CLASS] LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  int  P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  Pair  p1  p2  
[BugLab_Wrong_Operator]^if  ( p1.second <= p2.second )  {^135^^^^^120^150^if  ( p1.second != p2.second )  {^[CLASS] LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  int  P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  Pair  p1  p2  
[BugLab_Variable_Misuse]^if  ( source2 != null && source2 != null )  {^142^^^^^127^157^if  ( source1 != null && source2 != null )  {^[CLASS] LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  int  P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  Pair  p1  p2  
[BugLab_Variable_Misuse]^if  ( source1 != null && source1 != null )  {^142^^^^^127^157^if  ( source1 != null && source2 != null )  {^[CLASS] LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  int  P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  Pair  p1  p2  
[BugLab_Argument_Swapping]^if  ( source2 != null && source1 != null )  {^142^^^^^127^157^if  ( source1 != null && source2 != null )  {^[CLASS] LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  int  P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  Pair  p1  p2  
[BugLab_Wrong_Operator]^if  ( source1 != null || source2 != null )  {^142^^^^^127^157^if  ( source1 != null && source2 != null )  {^[CLASS] LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  int  P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  Pair  p1  p2  
[BugLab_Wrong_Operator]^if  ( source1 == null && source2 != null )  {^142^^^^^127^157^if  ( source1 != null && source2 != null )  {^[CLASS] LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  int  P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  Pair  p1  p2  
[BugLab_Wrong_Operator]^if  ( source1 != null && source2 == null )  {^142^^^^^127^157^if  ( source1 != null && source2 != null )  {^[CLASS] LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  int  P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  Pair  p1  p2  
[BugLab_Variable_Misuse]^} else if  ( source1 == null && source1 != null )  {^147^^^^^132^162^} else if  ( source1 == null && source2 != null )  {^[CLASS] LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  int  P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  Pair  p1  p2  
[BugLab_Argument_Swapping]^} else if  ( source2 == null && source1 != null )  {^147^^^^^132^162^} else if  ( source1 == null && source2 != null )  {^[CLASS] LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  int  P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  Pair  p1  p2  
[BugLab_Wrong_Operator]^} else if  ( source1 == null || source2 != null )  {^147^^^^^132^162^} else if  ( source1 == null && source2 != null )  {^[CLASS] LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  int  P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  Pair  p1  p2  
[BugLab_Wrong_Operator]^} else if  ( source1 != null && source2 != null )  {^147^^^^^132^162^} else if  ( source1 == null && source2 != null )  {^[CLASS] LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  int  P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  Pair  p1  p2  
[BugLab_Wrong_Operator]^} else if  ( source1 == null && source2 == null )  {^147^^^^^132^162^} else if  ( source1 == null && source2 != null )  {^[CLASS] LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  int  P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  Pair  p1  p2  
[BugLab_Argument_Swapping]^} else if  ( source2 != null && source1 == null )  {^149^^^^^134^164^} else if  ( source1 != null && source2 == null )  {^[CLASS] LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  int  P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  Pair  p1  p2  
[BugLab_Wrong_Operator]^} else if  ( source1 != null || source2 == null )  {^149^^^^^134^164^} else if  ( source1 != null && source2 == null )  {^[CLASS] LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  int  P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  Pair  p1  p2  
[BugLab_Wrong_Operator]^} else if  ( source1 == null && source2 == null )  {^149^^^^^134^164^} else if  ( source1 != null && source2 == null )  {^[CLASS] LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  int  P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  Pair  p1  p2  
[BugLab_Wrong_Operator]^} else if  ( source1 != null && source2 != null )  {^149^^^^^134^164^} else if  ( source1 != null && source2 == null )  {^[CLASS] LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  int  P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  Pair  p1  p2  
[BugLab_Variable_Misuse]^return lineno1;^150^^^^^135^165^return P1_GT_P2;^[CLASS] LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  int  P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  Pair  p1  p2  
[BugLab_Variable_Misuse]^return sourceCompare;^148^^^^^133^163^return P1_LT_P2;^[CLASS] LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  int  P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  Pair  p1  p2  
[BugLab_Variable_Misuse]^return sourceCompare;^150^^^^^135^165^return P1_GT_P2;^[CLASS] LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  int  P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  Pair  p1  p2  
[BugLab_Variable_Misuse]^if  ( lineno2 != 0 )  {^144^^^^^129^159^if  ( sourceCompare != 0 )  {^[CLASS] LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  int  P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  Pair  p1  p2  
[BugLab_Wrong_Operator]^if  ( sourceCompare >= 0 )  {^144^^^^^129^159^if  ( sourceCompare != 0 )  {^[CLASS] LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  int  P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  Pair  p1  p2  
[BugLab_Wrong_Literal]^if  ( sourceCompare != -1 )  {^144^^^^^129^159^if  ( sourceCompare != 0 )  {^[CLASS] LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  int  P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  Pair  p1  p2  
[BugLab_Variable_Misuse]^return lineno2;^145^^^^^130^160^return sourceCompare;^[CLASS] LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  int  P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  Pair  p1  p2  
[BugLab_Variable_Misuse]^return lineno1;^145^^^^^130^160^return sourceCompare;^[CLASS] LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  int  P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  Pair  p1  p2  
[BugLab_Variable_Misuse]^int sourceCompare = source2.compareTo ( source2 ) ;^143^^^^^128^158^int sourceCompare = source1.compareTo ( source2 ) ;^[CLASS] LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  int  P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  Pair  p1  p2  
[BugLab_Variable_Misuse]^int sourceCompare = source1.compareTo ( source1 ) ;^143^^^^^128^158^int sourceCompare = source1.compareTo ( source2 ) ;^[CLASS] LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  int  P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  Pair  p1  p2  
[BugLab_Argument_Swapping]^int sourceCompare = source2.compareTo ( source1 ) ;^143^^^^^128^158^int sourceCompare = source1.compareTo ( source2 ) ;^[CLASS] LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  int  P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  Pair  p1  p2  
[BugLab_Variable_Misuse]^if  ( charno2 != 0 )  {^144^^^^^129^159^if  ( sourceCompare != 0 )  {^[CLASS] LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  int  P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  Pair  p1  p2  
[BugLab_Wrong_Literal]^if  ( sourceCompare != 1 )  {^144^^^^^129^159^if  ( sourceCompare != 0 )  {^[CLASS] LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  int  P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  Pair  p1  p2  
[BugLab_Variable_Misuse]^return charno2;^145^^^^^130^160^return sourceCompare;^[CLASS] LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  int  P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  Pair  p1  p2  
[BugLab_Variable_Misuse]^} else if  ( source2 == null && source2 != null )  {^147^^^^^132^162^} else if  ( source1 == null && source2 != null )  {^[CLASS] LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  int  P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  Pair  p1  p2  
[BugLab_Variable_Misuse]^return lineno2;^148^^^^^133^163^return P1_LT_P2;^[CLASS] LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  int  P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  Pair  p1  p2  
[BugLab_Variable_Misuse]^return lineno2;^150^^^^^135^165^return P1_GT_P2;^[CLASS] LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  int  P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  Pair  p1  p2  
[BugLab_Variable_Misuse]^if  ( charno2 != lineno2 )  {^155^^^^^140^170^if  ( lineno1 != lineno2 )  {^[CLASS] LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  int  P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  Pair  p1  p2  
[BugLab_Variable_Misuse]^if  ( lineno1 != sourceCompare )  {^155^^^^^140^170^if  ( lineno1 != lineno2 )  {^[CLASS] LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  int  P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  Pair  p1  p2  
[BugLab_Argument_Swapping]^if  ( lineno2 != lineno1 )  {^155^^^^^140^170^if  ( lineno1 != lineno2 )  {^[CLASS] LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  int  P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  Pair  p1  p2  
[BugLab_Wrong_Operator]^if  ( lineno1 >= lineno2 )  {^155^^^^^140^170^if  ( lineno1 != lineno2 )  {^[CLASS] LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  int  P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  Pair  p1  p2  
[BugLab_Variable_Misuse]^} else if  ( lineno2 < 0 && 0 <= lineno2 )  {^157^^^^^142^172^} else if  ( lineno1 < 0 && 0 <= lineno2 )  {^[CLASS] LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  int  P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  Pair  p1  p2  
[BugLab_Argument_Swapping]^} else if  ( lineno2 < 0 && 0 <= lineno1 )  {^157^^^^^142^172^} else if  ( lineno1 < 0 && 0 <= lineno2 )  {^[CLASS] LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  int  P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  Pair  p1  p2  
[BugLab_Wrong_Operator]^} else if  ( lineno1 < 0 || 0 <= lineno2 )  {^157^^^^^142^172^} else if  ( lineno1 < 0 && 0 <= lineno2 )  {^[CLASS] LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  int  P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  Pair  p1  p2  
[BugLab_Wrong_Operator]^} else if  ( lineno1 <= 0 && 0 <= lineno2 )  {^157^^^^^142^172^} else if  ( lineno1 < 0 && 0 <= lineno2 )  {^[CLASS] LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  int  P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  Pair  p1  p2  
[BugLab_Wrong_Operator]^} else if  ( lineno1 < 0 && 0 < lineno2 )  {^157^^^^^142^172^} else if  ( lineno1 < 0 && 0 <= lineno2 )  {^[CLASS] LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  int  P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  Pair  p1  p2  
[BugLab_Wrong_Operator]^} else if  ( lineno1 == 0 && 0 <= lineno2 )  {^157^^^^^142^172^} else if  ( lineno1 < 0 && 0 <= lineno2 )  {^[CLASS] LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  int  P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  Pair  p1  p2  
[BugLab_Wrong_Literal]^} else if  ( lineno1 < charno1 && charno1 <= lineno2 )  {^157^^^^^142^172^} else if  ( lineno1 < 0 && 0 <= lineno2 )  {^[CLASS] LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  int  P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  Pair  p1  p2  
[BugLab_Wrong_Literal]^} else if  ( lineno1 < -1 && -1 <= lineno2 )  {^157^^^^^142^172^} else if  ( lineno1 < 0 && 0 <= lineno2 )  {^[CLASS] LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  int  P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  Pair  p1  p2  
[BugLab_Variable_Misuse]^} else if  ( 0 <= charno2 && lineno2 < 0 )  {^159^^^^^144^174^} else if  ( 0 <= lineno1 && lineno2 < 0 )  {^[CLASS] LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  int  P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  Pair  p1  p2  
[BugLab_Variable_Misuse]^} else if  ( 0 <= lineno1 && sourceCompare < 0 )  {^159^^^^^144^174^} else if  ( 0 <= lineno1 && lineno2 < 0 )  {^[CLASS] LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  int  P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  Pair  p1  p2  
[BugLab_Argument_Swapping]^} else if  ( 0 <= lineno2 && lineno1 < 0 )  {^159^^^^^144^174^} else if  ( 0 <= lineno1 && lineno2 < 0 )  {^[CLASS] LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  int  P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  Pair  p1  p2  
[BugLab_Wrong_Operator]^} else if  ( 0 <= lineno1 || lineno2 < 0 )  {^159^^^^^144^174^} else if  ( 0 <= lineno1 && lineno2 < 0 )  {^[CLASS] LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  int  P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  Pair  p1  p2  
[BugLab_Wrong_Operator]^} else if  ( 0 > lineno1 && lineno2 < 0 )  {^159^^^^^144^174^} else if  ( 0 <= lineno1 && lineno2 < 0 )  {^[CLASS] LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  int  P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  Pair  p1  p2  
[BugLab_Wrong_Operator]^} else if  ( 0 <= lineno1 && lineno2 <= 0 )  {^159^^^^^144^174^} else if  ( 0 <= lineno1 && lineno2 < 0 )  {^[CLASS] LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  int  P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  Pair  p1  p2  
[BugLab_Wrong_Literal]^} else if  ( -1 <= lineno1 && lineno2 < -1 )  {^159^^^^^144^174^} else if  ( 0 <= lineno1 && lineno2 < 0 )  {^[CLASS] LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  int  P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  Pair  p1  p2  
[BugLab_Variable_Misuse]^return sourceCompare;^160^^^^^145^175^return P1_GT_P2;^[CLASS] LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  int  P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  Pair  p1  p2  
[BugLab_Variable_Misuse]^return lineno1;^158^^^^^143^173^return P1_LT_P2;^[CLASS] LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  int  P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  Pair  p1  p2  
[BugLab_Wrong_Operator]^} else if  ( 0 < lineno1 && lineno2 < 0 )  {^159^^^^^144^174^} else if  ( 0 <= lineno1 && lineno2 < 0 )  {^[CLASS] LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  int  P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  Pair  p1  p2  
[BugLab_Wrong_Operator]^} else if  ( 0 <= lineno1 && lineno2 == 0 )  {^159^^^^^144^174^} else if  ( 0 <= lineno1 && lineno2 < 0 )  {^[CLASS] LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  int  P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  Pair  p1  p2  
[BugLab_Wrong_Literal]^} else if  ( lineno1 <= lineno1 && lineno2 < lineno1 )  {^159^^^^^144^174^} else if  ( 0 <= lineno1 && lineno2 < 0 )  {^[CLASS] LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  int  P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  Pair  p1  p2  
[BugLab_Variable_Misuse]^return sourceCompare;^158^^^^^143^173^return P1_LT_P2;^[CLASS] LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  int  P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  Pair  p1  p2  
[BugLab_Variable_Misuse]^return charno2 - lineno2;^156^^^^^141^171^return lineno1 - lineno2;^[CLASS] LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  int  P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  Pair  p1  p2  
[BugLab_Variable_Misuse]^return lineno1 - charno2;^156^^^^^141^171^return lineno1 - lineno2;^[CLASS] LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  int  P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  Pair  p1  p2  
[BugLab_Argument_Swapping]^return lineno2 - lineno1;^156^^^^^141^171^return lineno1 - lineno2;^[CLASS] LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  int  P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  Pair  p1  p2  
[BugLab_Wrong_Operator]^return lineno1  |  lineno2;^156^^^^^141^171^return lineno1 - lineno2;^[CLASS] LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  int  P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  Pair  p1  p2  
[BugLab_Variable_Misuse]^} else if  ( sourceCompare < 0 && 0 <= lineno2 )  {^157^^^^^142^172^} else if  ( lineno1 < 0 && 0 <= lineno2 )  {^[CLASS] LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  int  P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  Pair  p1  p2  
[BugLab_Variable_Misuse]^} else if  ( lineno1 < 0 && 0 <= sourceCompare )  {^157^^^^^142^172^} else if  ( lineno1 < 0 && 0 <= lineno2 )  {^[CLASS] LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  int  P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  Pair  p1  p2  
[BugLab_Wrong_Literal]^} else if  ( lineno1 < lineno2 && lineno2 <= lineno2 )  {^157^^^^^142^172^} else if  ( lineno1 < 0 && 0 <= lineno2 )  {^[CLASS] LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  int  P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  Pair  p1  p2  
[BugLab_Wrong_Literal]^} else if  ( lineno1 < charno2 && charno2 <= lineno2 )  {^157^^^^^142^172^} else if  ( lineno1 < 0 && 0 <= lineno2 )  {^[CLASS] LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  int  P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  Pair  p1  p2  
[BugLab_Variable_Misuse]^} else if  ( 0 <= sourceCompare && lineno2 < 0 )  {^159^^^^^144^174^} else if  ( 0 <= lineno1 && lineno2 < 0 )  {^[CLASS] LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  int  P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  Pair  p1  p2  
[BugLab_Wrong_Operator]^} else if  ( 0 == lineno1 && lineno2 < 0 )  {^159^^^^^144^174^} else if  ( 0 <= lineno1 && lineno2 < 0 )  {^[CLASS] LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  int  P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  Pair  p1  p2  
[BugLab_Wrong_Literal]^} else if  ( P1_LT_P2 <= lineno1 && lineno2 < P1_LT_P2 )  {^159^^^^^144^174^} else if  ( 0 <= lineno1 && lineno2 < 0 )  {^[CLASS] LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  int  P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  Pair  p1  p2  
[BugLab_Wrong_Literal]^} else if  ( P1_GT_P2 <= lineno1 && lineno2 < P1_GT_P2 )  {^159^^^^^144^174^} else if  ( 0 <= lineno1 && lineno2 < 0 )  {^[CLASS] LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  int  P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  Pair  p1  p2  
[BugLab_Variable_Misuse]^return lineno2;^160^^^^^145^175^return P1_GT_P2;^[CLASS] LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  int  P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  Pair  p1  p2  
[BugLab_Variable_Misuse]^return lineno1 - sourceCompare;^156^^^^^141^171^return lineno1 - lineno2;^[CLASS] LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  int  P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  Pair  p1  p2  
[BugLab_Wrong_Operator]^return lineno1   instanceof   lineno2;^156^^^^^141^171^return lineno1 - lineno2;^[CLASS] LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  int  P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  Pair  p1  p2  
[BugLab_Variable_Misuse]^return lineno1;^160^^^^^145^175^return P1_GT_P2;^[CLASS] LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  int  P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  Pair  p1  p2  
[BugLab_Variable_Misuse]^if  ( sourceCompare != charno2 )  {^165^^^^^150^180^if  ( charno1 != charno2 )  {^[CLASS] LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  int  P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  Pair  p1  p2  
[BugLab_Wrong_Operator]^if  ( charno1 == charno2 )  {^165^^^^^150^180^if  ( charno1 != charno2 )  {^[CLASS] LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  int  P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  Pair  p1  p2  
[BugLab_Variable_Misuse]^} else if  ( sourceCompare < 0 && 0 <= charno2 )  {^167^^^^^152^182^} else if  ( charno1 < 0 && 0 <= charno2 )  {^[CLASS] LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  int  P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  Pair  p1  p2  
[BugLab_Variable_Misuse]^} else if  ( charno1 < 0 && 0 <= sourceCompare )  {^167^^^^^152^182^} else if  ( charno1 < 0 && 0 <= charno2 )  {^[CLASS] LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  int  P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  Pair  p1  p2  
[BugLab_Wrong_Operator]^} else if  ( charno1 < 0 || 0 <= charno2 )  {^167^^^^^152^182^} else if  ( charno1 < 0 && 0 <= charno2 )  {^[CLASS] LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  int  P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  Pair  p1  p2  
[BugLab_Wrong_Operator]^} else if  ( charno1 <= 0 && 0 <= charno2 )  {^167^^^^^152^182^} else if  ( charno1 < 0 && 0 <= charno2 )  {^[CLASS] LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  int  P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  Pair  p1  p2  
[BugLab_Wrong_Operator]^} else if  ( charno1 < 0 && 0 < charno2 )  {^167^^^^^152^182^} else if  ( charno1 < 0 && 0 <= charno2 )  {^[CLASS] LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  int  P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  Pair  p1  p2  
[BugLab_Wrong_Operator]^} else if  ( charno1 < 0 && 0 == charno2 )  {^167^^^^^152^182^} else if  ( charno1 < 0 && 0 <= charno2 )  {^[CLASS] LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  int  P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  Pair  p1  p2  
[BugLab_Wrong_Literal]^} else if  ( charno1 < sourceCompare && sourceCompare <= charno2 )  {^167^^^^^152^182^} else if  ( charno1 < 0 && 0 <= charno2 )  {^[CLASS] LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  int  P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  Pair  p1  p2  
[BugLab_Wrong_Literal]^} else if  ( charno1 < 1 && 1 <= charno2 )  {^167^^^^^152^182^} else if  ( charno1 < 0 && 0 <= charno2 )  {^[CLASS] LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  int  P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  Pair  p1  p2  
[BugLab_Variable_Misuse]^} else if  ( 0 <= lineno2 && charno2 < 0 )  {^169^^^^^154^184^} else if  ( 0 <= charno1 && charno2 < 0 )  {^[CLASS] LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  int  P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  Pair  p1  p2  
[BugLab_Variable_Misuse]^} else if  ( 0 <= charno1 && lineno2 < 0 )  {^169^^^^^154^184^} else if  ( 0 <= charno1 && charno2 < 0 )  {^[CLASS] LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  int  P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  Pair  p1  p2  
[BugLab_Argument_Swapping]^} else if  ( 0 <= charno2 && charno1 < 0 )  {^169^^^^^154^184^} else if  ( 0 <= charno1 && charno2 < 0 )  {^[CLASS] LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  int  P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  Pair  p1  p2  
[BugLab_Wrong_Operator]^} else if  ( 0 <= charno1 || charno2 < 0 )  {^169^^^^^154^184^} else if  ( 0 <= charno1 && charno2 < 0 )  {^[CLASS] LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  int  P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  Pair  p1  p2  
[BugLab_Wrong_Operator]^} else if  ( 0 < charno1 && charno2 < 0 )  {^169^^^^^154^184^} else if  ( 0 <= charno1 && charno2 < 0 )  {^[CLASS] LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  int  P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  Pair  p1  p2  
[BugLab_Wrong_Operator]^} else if  ( 0 <= charno1 && charno2 > 0 )  {^169^^^^^154^184^} else if  ( 0 <= charno1 && charno2 < 0 )  {^[CLASS] LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  int  P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  Pair  p1  p2  
[BugLab_Wrong_Literal]^} else if  ( P1_LT_P2 <= charno1 && charno2 < P1_LT_P2 )  {^169^^^^^154^184^} else if  ( 0 <= charno1 && charno2 < 0 )  {^[CLASS] LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  int  P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  Pair  p1  p2  
[BugLab_Wrong_Literal]^} else if  ( -1 <= charno1 && charno2 < -1 )  {^169^^^^^154^184^} else if  ( 0 <= charno1 && charno2 < 0 )  {^[CLASS] LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  int  P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  Pair  p1  p2  
[BugLab_Variable_Misuse]^return lineno1;^170^^^^^155^185^return P1_GT_P2;^[CLASS] LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  int  P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  Pair  p1  p2  
[BugLab_Variable_Misuse]^return lineno2;^170^^^^^155^185^return P1_GT_P2;^[CLASS] LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  int  P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  Pair  p1  p2  
[BugLab_Variable_Misuse]^return lineno1;^168^^^^^153^183^return P1_LT_P2;^[CLASS] LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  int  P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  Pair  p1  p2  
[BugLab_Variable_Misuse]^} else if  ( 0 <= charno1 && sourceCompare < 0 )  {^169^^^^^154^184^} else if  ( 0 <= charno1 && charno2 < 0 )  {^[CLASS] LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  int  P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  Pair  p1  p2  
[BugLab_Wrong_Operator]^} else if  ( 0 <= charno1 && charno2 <= 0 )  {^169^^^^^154^184^} else if  ( 0 <= charno1 && charno2 < 0 )  {^[CLASS] LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  int  P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  Pair  p1  p2  
[BugLab_Wrong_Literal]^} else if  ( sourceCompare <= charno1 && charno2 < sourceCompare )  {^169^^^^^154^184^} else if  ( 0 <= charno1 && charno2 < 0 )  {^[CLASS] LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  int  P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  Pair  p1  p2  
[BugLab_Variable_Misuse]^return sourceCompare;^170^^^^^155^185^return P1_GT_P2;^[CLASS] LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  int  P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  Pair  p1  p2  
[BugLab_Variable_Misuse]^return sourceCompare - charno2;^166^^^^^151^181^return charno1 - charno2;^[CLASS] LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  int  P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  Pair  p1  p2  
[BugLab_Variable_Misuse]^return charno1 - lineno2;^166^^^^^151^181^return charno1 - charno2;^[CLASS] LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  int  P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  Pair  p1  p2  
[BugLab_Argument_Swapping]^return charno2 - charno1;^166^^^^^151^181^return charno1 - charno2;^[CLASS] LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  int  P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  Pair  p1  p2  
[BugLab_Wrong_Operator]^return charno1  >>  charno2;^166^^^^^151^181^return charno1 - charno2;^[CLASS] LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  int  P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  Pair  p1  p2  
[BugLab_Argument_Swapping]^} else if  ( charno2 < 0 && 0 <= charno1 )  {^167^^^^^152^182^} else if  ( charno1 < 0 && 0 <= charno2 )  {^[CLASS] LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  int  P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  Pair  p1  p2  
[BugLab_Wrong_Operator]^} else if  ( charno1 < 0 && 0 > charno2 )  {^167^^^^^152^182^} else if  ( charno1 < 0 && 0 <= charno2 )  {^[CLASS] LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  int  P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  Pair  p1  p2  
[BugLab_Wrong_Literal]^} else if  ( charno1 < -1 && -1 <= charno2 )  {^167^^^^^152^182^} else if  ( charno1 < 0 && 0 <= charno2 )  {^[CLASS] LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  int  P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  Pair  p1  p2  
[BugLab_Variable_Misuse]^} else if  ( 0 <= sourceCompare && charno2 < 0 )  {^169^^^^^154^184^} else if  ( 0 <= charno1 && charno2 < 0 )  {^[CLASS] LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  int  P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  Pair  p1  p2  
[BugLab_Wrong_Literal]^} else if  ( charno1 <= charno1 && charno2 < charno1 )  {^169^^^^^154^184^} else if  ( 0 <= charno1 && charno2 < 0 )  {^[CLASS] LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  int  P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  Pair  p1  p2  
[BugLab_Wrong_Literal]^} else if  ( P1_GT_P2 <= charno1 && charno2 < P1_GT_P2 )  {^169^^^^^154^184^} else if  ( 0 <= charno1 && charno2 < 0 )  {^[CLASS] LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  int  P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  Pair  p1  p2  
[BugLab_Variable_Misuse]^return charno1 - sourceCompare;^166^^^^^151^181^return charno1 - charno2;^[CLASS] LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  int  P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  Pair  p1  p2  
[BugLab_Wrong_Operator]^return charno1  |  charno2;^166^^^^^151^181^return charno1 - charno2;^[CLASS] LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  int  P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  Pair  p1  p2  
[BugLab_Variable_Misuse]^return sourceCompare;^168^^^^^153^183^return P1_LT_P2;^[CLASS] LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  int  P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  Pair  p1  p2  
