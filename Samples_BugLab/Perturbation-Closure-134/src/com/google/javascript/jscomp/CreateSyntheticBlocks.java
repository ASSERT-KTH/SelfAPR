[BugLab_Variable_Misuse]^this.sourceName = startMarkerName;^56^^^^^54^60^this.sourceName = sourceName;^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] <init> [RETURN_TYPE] Node)   String sourceName Node n Node ancestorBlockChild Node ancestorBlock [VARIABLES] AbstractCompiler  compiler  String  endMarkerName  sourceName  startMarkerName  boolean  Deque  startMarkerStack  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestorBlock  ancestorBlockChild  n  node  
[BugLab_Variable_Misuse]^this.ancestorBlockChild = node;^58^^^^^54^60^this.ancestorBlockChild = ancestorBlockChild;^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] <init> [RETURN_TYPE] Node)   String sourceName Node n Node ancestorBlockChild Node ancestorBlock [VARIABLES] AbstractCompiler  compiler  String  endMarkerName  sourceName  startMarkerName  boolean  Deque  startMarkerStack  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestorBlock  ancestorBlockChild  n  node  
[BugLab_Variable_Misuse]^this.ancestorBlock = node;^59^^^^^54^60^this.ancestorBlock = ancestorBlock;^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] <init> [RETURN_TYPE] Node)   String sourceName Node n Node ancestorBlockChild Node ancestorBlock [VARIABLES] AbstractCompiler  compiler  String  endMarkerName  sourceName  startMarkerName  boolean  Deque  startMarkerStack  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestorBlock  ancestorBlockChild  n  node  
[BugLab_Variable_Misuse]^this.endMarkerName = startMarkerName;^80^^^^^76^82^this.endMarkerName = endMarkerName;^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] <init> [RETURN_TYPE] String)   AbstractCompiler compiler String startMarkerName String endMarkerName [VARIABLES] AbstractCompiler  compiler  String  endMarkerName  sourceName  startMarkerName  boolean  Deque  startMarkerStack  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestorBlock  ancestorBlockChild  n  node  
[BugLab_Variable_Misuse]^NodeTraversal.traverse ( compiler, n, new Callback (  )  ) ;^86^^^^^85^92^NodeTraversal.traverse ( compiler, root, new Callback (  )  ) ;^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestorBlock  ancestorBlockChild  externs  n  node  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  
[BugLab_Argument_Swapping]^NodeTraversal.traverse ( root, compiler, new Callback (  )  ) ;^86^^^^^85^92^NodeTraversal.traverse ( compiler, root, new Callback (  )  ) ;^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestorBlock  ancestorBlockChild  externs  n  node  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  
[BugLab_Variable_Misuse]^compiler.report ( JSError.make ( sourceName, startMarker.node, UNMATCHED_START_MARKER, startMarkerName )  ) ;^89^90^^^^85^92^compiler.report ( JSError.make ( startMarker.sourceName, startMarker.node, UNMATCHED_START_MARKER, startMarkerName )  ) ;^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestorBlock  ancestorBlockChild  externs  n  node  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  
[BugLab_Variable_Misuse]^compiler.report ( JSError.make ( startMarker.sourceName, n, UNMATCHED_START_MARKER, startMarkerName )  ) ;^89^90^^^^85^92^compiler.report ( JSError.make ( startMarker.sourceName, startMarker.node, UNMATCHED_START_MARKER, startMarkerName )  ) ;^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestorBlock  ancestorBlockChild  externs  n  node  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  
[BugLab_Variable_Misuse]^compiler.report ( JSError.make ( startMarker.sourceName, startMarker.node, UNMATCHED_END_MARKER, startMarkerName )  ) ;^89^90^^^^85^92^compiler.report ( JSError.make ( startMarker.sourceName, startMarker.node, UNMATCHED_START_MARKER, startMarkerName )  ) ;^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestorBlock  ancestorBlockChild  externs  n  node  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  
[BugLab_Variable_Misuse]^compiler.report ( JSError.make ( startMarker.sourceName, startMarker.node, UNMATCHED_START_MARKER, sourceName )  ) ;^89^90^^^^85^92^compiler.report ( JSError.make ( startMarker.sourceName, startMarker.node, UNMATCHED_START_MARKER, startMarkerName )  ) ;^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestorBlock  ancestorBlockChild  externs  n  node  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  
[BugLab_Argument_Swapping]^compiler.report ( JSError.make ( UNMATCHED_START_MARKER, startMarker.node, startMarker.sourceName, startMarkerName )  ) ;^89^90^^^^85^92^compiler.report ( JSError.make ( startMarker.sourceName, startMarker.node, UNMATCHED_START_MARKER, startMarkerName )  ) ;^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestorBlock  ancestorBlockChild  externs  n  node  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  
[BugLab_Argument_Swapping]^compiler.report ( JSError.make ( startMarker.sourceName, startMarkerName, UNMATCHED_START_MARKER, startMarker.node )  ) ;^89^90^^^^85^92^compiler.report ( JSError.make ( startMarker.sourceName, startMarker.node, UNMATCHED_START_MARKER, startMarkerName )  ) ;^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestorBlock  ancestorBlockChild  externs  n  node  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  
[BugLab_Argument_Swapping]^compiler.report ( JSError.make ( startMarker.sourceName, startMarker.node, startMarkerName, UNMATCHED_START_MARKER )  ) ;^89^90^^^^85^92^compiler.report ( JSError.make ( startMarker.sourceName, startMarker.node, UNMATCHED_START_MARKER, startMarkerName )  ) ;^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestorBlock  ancestorBlockChild  externs  n  node  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  
[BugLab_Argument_Swapping]^compiler.report ( JSError.make ( startMarkerName.sourceName, startMarker.node, UNMATCHED_START_MARKER, startMarker )  ) ;^89^90^^^^85^92^compiler.report ( JSError.make ( startMarker.sourceName, startMarker.node, UNMATCHED_START_MARKER, startMarkerName )  ) ;^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestorBlock  ancestorBlockChild  externs  n  node  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  
[BugLab_Variable_Misuse]^compiler.report ( JSError.make ( startMarker.sourceName, node, UNMATCHED_START_MARKER, startMarkerName )  ) ;^89^90^^^^85^92^compiler.report ( JSError.make ( startMarker.sourceName, startMarker.node, UNMATCHED_START_MARKER, startMarkerName )  ) ;^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestorBlock  ancestorBlockChild  externs  n  node  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  
[BugLab_Argument_Swapping]^compiler.report ( JSError.make ( startMarker.sourceName.sourceName, startMarker.node, UNMATCHED_START_MARKER, startMarkerName )  ) ;^89^90^^^^85^92^compiler.report ( JSError.make ( startMarker.sourceName, startMarker.node, UNMATCHED_START_MARKER, startMarkerName )  ) ;^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestorBlock  ancestorBlockChild  externs  n  node  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  
[BugLab_Argument_Swapping]^compiler.report ( JSError.make ( startMarkerName, startMarker.node, UNMATCHED_START_MARKER, startMarker.sourceName )  ) ;^89^90^^^^85^92^compiler.report ( JSError.make ( startMarker.sourceName, startMarker.node, UNMATCHED_START_MARKER, startMarkerName )  ) ;^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestorBlock  ancestorBlockChild  externs  n  node  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  
[BugLab_Argument_Swapping]^compiler.report ( JSError.make ( startMarker.node, startMarker.sourceName, UNMATCHED_START_MARKER, startMarkerName )  ) ;^89^90^^^^85^92^compiler.report ( JSError.make ( startMarker.sourceName, startMarker.node, UNMATCHED_START_MARKER, startMarkerName )  ) ;^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestorBlock  ancestorBlockChild  externs  n  node  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  
[BugLab_Variable_Misuse]^if  ( externs.getType (  )  != Token.NAME || parent.getType (  )  != Token.CALL )  {^97^^^^^82^112^if  ( n.getType (  )  != Token.NAME || parent.getType (  )  != Token.CALL )  {^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  int  type  
[BugLab_Variable_Misuse]^if  ( n.getType (  )  != Token.NAME || node.getType (  )  != Token.CALL )  {^97^^^^^82^112^if  ( n.getType (  )  != Token.NAME || parent.getType (  )  != Token.CALL )  {^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  int  type  
[BugLab_Argument_Swapping]^if  ( parent.getType (  )  != Token.NAME || n.getType (  )  != Token.CALL )  {^97^^^^^82^112^if  ( n.getType (  )  != Token.NAME || parent.getType (  )  != Token.CALL )  {^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  int  type  
[BugLab_Wrong_Operator]^if  ( n.getType (  )  != Token.NAME && parent.getType (  )  != Token.CALL )  {^97^^^^^82^112^if  ( n.getType (  )  != Token.NAME || parent.getType (  )  != Token.CALL )  {^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  int  type  
[BugLab_Wrong_Operator]^if  ( n.getType (  )  == Token.NAME || parent.getType (  )  != Token.CALL )  {^97^^^^^82^112^if  ( n.getType (  )  != Token.NAME || parent.getType (  )  != Token.CALL )  {^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  int  type  
[BugLab_Wrong_Operator]^if  ( n.getType (  )  >= Token.NAME || parent.getType (  )  != Token.CALL )  {^97^^^^^82^112^if  ( n.getType (  )  != Token.NAME || parent.getType (  )  != Token.CALL )  {^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  int  type  
[BugLab_Variable_Misuse]^if  ( node.getType (  )  != Token.NAME || parent.getType (  )  != Token.CALL )  {^97^^^^^82^112^if  ( n.getType (  )  != Token.NAME || parent.getType (  )  != Token.CALL )  {^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  int  type  
[BugLab_Variable_Misuse]^if  ( n.getType (  )  != Token.NAME || root.getType (  )  != Token.CALL )  {^97^^^^^82^112^if  ( n.getType (  )  != Token.NAME || parent.getType (  )  != Token.CALL )  {^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  int  type  
[BugLab_Variable_Misuse]^if  ( startMarkerName.equals ( node.getString (  )  )  )  {^101^^^^^86^116^if  ( startMarkerName.equals ( n.getString (  )  )  )  {^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  int  type  
[BugLab_Variable_Misuse]^if  ( sourceName.equals ( n.getString (  )  )  )  {^101^^^^^86^116^if  ( startMarkerName.equals ( n.getString (  )  )  )  {^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  int  type  
[BugLab_Wrong_Operator]^if  ( type == Token.SCRIPT && type == Token.BLOCK )  {^108^^^^^93^123^if  ( type == Token.SCRIPT || type == Token.BLOCK )  {^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  int  type  
[BugLab_Wrong_Operator]^if  ( type != Token.SCRIPT || type == Token.BLOCK )  {^108^^^^^93^123^if  ( type == Token.SCRIPT || type == Token.BLOCK )  {^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  int  type  
[BugLab_Wrong_Operator]^if  ( type <= Token.SCRIPT || type == Token.BLOCK )  {^108^^^^^93^123^if  ( type == Token.SCRIPT || type == Token.BLOCK )  {^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  int  type  
[BugLab_Variable_Misuse]^ancestorBlock = n;^109^^^^^94^124^ancestorBlock = ancestor;^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  int  type  
[BugLab_Variable_Misuse]^startMarkerStack.push ( parentew StartMarker ( t.getSourceName (  ) , n, ancestorBlockChild, ancestorBlock )  ) ;^115^116^^^^100^130^startMarkerStack.push ( new StartMarker ( t.getSourceName (  ) , n, ancestorBlockChild, ancestorBlock )  ) ;^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  int  type  
[BugLab_Variable_Misuse]^startMarkerStack.push ( new StartMarker ( t.getSourceName (  ) , n, parent, ancestorBlock )  ) ;^115^116^^^^100^130^startMarkerStack.push ( new StartMarker ( t.getSourceName (  ) , n, ancestorBlockChild, ancestorBlock )  ) ;^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  int  type  
[BugLab_Variable_Misuse]^startMarkerStack.push ( new StartMarker ( t.getSourceName (  ) , n, parentChild, ancestorBlock )  ) ;^115^116^^^^100^130^startMarkerStack.push ( new StartMarker ( t.getSourceName (  ) , n, ancestorBlockChild, ancestorBlock )  ) ;^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  int  type  
[BugLab_Argument_Swapping]^startMarkerStack.push ( new StartMarker ( ancestorBlockChild.getSourceName (  ) , n, t, ancestorBlock )  ) ;^115^116^^^^100^130^startMarkerStack.push ( new StartMarker ( t.getSourceName (  ) , n, ancestorBlockChild, ancestorBlock )  ) ;^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  int  type  
[BugLab_Argument_Swapping]^startMarkerStack.push ( ancestorBlockew StartMarker ( t.getSourceName (  ) , n, nChild, ancestorBlock )  ) ;^115^116^^^^100^130^startMarkerStack.push ( new StartMarker ( t.getSourceName (  ) , n, ancestorBlockChild, ancestorBlock )  ) ;^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  int  type  
[BugLab_Argument_Swapping]^startMarkerStack.push ( ancestorBlockChildew StartMarker ( t.getSourceName (  ) , n, n, ancestorBlock )  ) ;^115^116^^^^100^130^startMarkerStack.push ( new StartMarker ( t.getSourceName (  ) , n, ancestorBlockChild, ancestorBlock )  ) ;^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  int  type  
[BugLab_Variable_Misuse]^Node ancestorBlockChild = removedNode;^104^^^^^89^119^Node ancestorBlockChild = n;^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  int  type  
[BugLab_Variable_Misuse]^for  ( Node ancestor : externs.getAncestors (  )  )  {^106^^^^^91^121^for  ( Node ancestor : n.getAncestors (  )  )  {^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  int  type  
[BugLab_Variable_Misuse]^int type = removedNode.getType (  ) ;^107^^^^^92^122^int type = ancestor.getType (  ) ;^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  int  type  
[BugLab_Variable_Misuse]^startMarkerStack.push ( nodeew StartMarker ( t.getSourceName (  ) , n, ancestorBlockChild, ancestorBlock )  ) ;^115^116^^^^100^130^startMarkerStack.push ( new StartMarker ( t.getSourceName (  ) , n, ancestorBlockChild, ancestorBlock )  ) ;^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  int  type  
[BugLab_Variable_Misuse]^startMarkerStack.push ( new StartMarker ( t.getSourceName (  ) , n, node, ancestorBlock )  ) ;^115^116^^^^100^130^startMarkerStack.push ( new StartMarker ( t.getSourceName (  ) , n, ancestorBlockChild, ancestorBlock )  ) ;^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  int  type  
[BugLab_Variable_Misuse]^startMarkerStack.push ( new StartMarker ( t.getSourceName (  ) , n, removedNodeChild, ancestorBlock )  ) ;^115^116^^^^100^130^startMarkerStack.push ( new StartMarker ( t.getSourceName (  ) , n, ancestorBlockChild, ancestorBlock )  ) ;^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  int  type  
[BugLab_Argument_Swapping]^startMarkerStack.push ( tew StartMarker ( n.getSourceName (  ) , n, ancestorBlockChild, ancestorBlock )  ) ;^115^116^^^^100^130^startMarkerStack.push ( new StartMarker ( t.getSourceName (  ) , n, ancestorBlockChild, ancestorBlock )  ) ;^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  int  type  
[BugLab_Wrong_Operator]^if  ( type >= Token.SCRIPT || type == Token.BLOCK )  {^108^^^^^93^123^if  ( type == Token.SCRIPT || type == Token.BLOCK )  {^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  int  type  
[BugLab_Wrong_Operator]^if  ( type < Token.SCRIPT || type == Token.BLOCK )  {^108^^^^^93^123^if  ( type == Token.SCRIPT || type == Token.BLOCK )  {^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  int  type  
[BugLab_Variable_Misuse]^ancestorBlock = root;^109^^^^^94^124^ancestorBlock = ancestor;^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  int  type  
[BugLab_Variable_Misuse]^ancestorBlockChild = removedNode;^112^^^^^97^127^ancestorBlockChild = ancestor;^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  int  type  
[BugLab_Variable_Misuse]^startMarkerStack.push ( new StartMarker ( t.getSourceName (  ) , n, rootChild, ancestorBlock )  ) ;^115^116^^^^100^130^startMarkerStack.push ( new StartMarker ( t.getSourceName (  ) , n, ancestorBlockChild, ancestorBlock )  ) ;^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  int  type  
[BugLab_Variable_Misuse]^Node ancestorBlockChild = node;^104^^^^^89^119^Node ancestorBlockChild = n;^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  int  type  
[BugLab_Variable_Misuse]^int type = root.getType (  ) ;^107^^^^^92^122^int type = ancestor.getType (  ) ;^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  int  type  
[BugLab_Variable_Misuse]^if  ( startMarkerName.equals ( root.getString (  )  )  )  {^101^^^^^86^116^if  ( startMarkerName.equals ( n.getString (  )  )  )  {^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  int  type  
[BugLab_Argument_Swapping]^if  ( n.equals ( startMarkerName.getString (  )  )  )  {^101^^^^^86^116^if  ( startMarkerName.equals ( n.getString (  )  )  )  {^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  int  type  
[BugLab_Variable_Misuse]^if  ( startMarkerName.equals ( externs.getString (  )  )  )  {^101^^^^^86^116^if  ( startMarkerName.equals ( n.getString (  )  )  )  {^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  int  type  
[BugLab_Variable_Misuse]^for  ( Node ancestor : root.getAncestors (  )  )  {^106^^^^^91^121^for  ( Node ancestor : n.getAncestors (  )  )  {^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  int  type  
[BugLab_Variable_Misuse]^startMarkerStack.push ( new StartMarker ( t.getSourceName (  ) , n, nChild, ancestorBlock )  ) ;^115^116^^^^100^130^startMarkerStack.push ( new StartMarker ( t.getSourceName (  ) , n, ancestorBlockChild, ancestorBlock )  ) ;^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  int  type  
[BugLab_Variable_Misuse]^if  ( !endMarkerName.equals ( externs.getString (  )  )  )  {^119^^^^^104^134^if  ( !endMarkerName.equals ( n.getString (  )  )  )  {^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  int  type  
[BugLab_Variable_Misuse]^if  ( !endMarkerName.equals ( parent.getString (  )  )  )  {^119^^^^^104^134^if  ( !endMarkerName.equals ( n.getString (  )  )  )  {^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  int  type  
[BugLab_Variable_Misuse]^compiler.report ( JSError.make ( t, node, UNMATCHED_END_MARKER, startMarkerName, endMarkerName )  ) ;^124^125^^^^109^139^compiler.report ( JSError.make ( t, n, UNMATCHED_END_MARKER, startMarkerName, endMarkerName )  ) ;^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  int  type  
[BugLab_Variable_Misuse]^compiler.report ( JSError.make ( t, n, UNMATCHED_START_MARKER, startMarkerName, endMarkerName )  ) ;^124^125^^^^109^139^compiler.report ( JSError.make ( t, n, UNMATCHED_END_MARKER, startMarkerName, endMarkerName )  ) ;^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  int  type  
[BugLab_Variable_Misuse]^compiler.report ( JSError.make ( t, n, UNMATCHED_END_MARKER, sourceName, endMarkerName )  ) ;^124^125^^^^109^139^compiler.report ( JSError.make ( t, n, UNMATCHED_END_MARKER, startMarkerName, endMarkerName )  ) ;^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  int  type  
[BugLab_Variable_Misuse]^compiler.report ( JSError.make ( t, n, UNMATCHED_END_MARKER, startMarkerName, sourceName )  ) ;^124^125^^^^109^139^compiler.report ( JSError.make ( t, n, UNMATCHED_END_MARKER, startMarkerName, endMarkerName )  ) ;^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  int  type  
[BugLab_Argument_Swapping]^compiler.report ( JSError.make ( startMarkerName, n, UNMATCHED_END_MARKER, t, endMarkerName )  ) ;^124^125^^^^109^139^compiler.report ( JSError.make ( t, n, UNMATCHED_END_MARKER, startMarkerName, endMarkerName )  ) ;^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  int  type  
[BugLab_Argument_Swapping]^compiler.report ( JSError.make ( t, UNMATCHED_END_MARKER, n, startMarkerName, endMarkerName )  ) ;^124^125^^^^109^139^compiler.report ( JSError.make ( t, n, UNMATCHED_END_MARKER, startMarkerName, endMarkerName )  ) ;^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  int  type  
[BugLab_Argument_Swapping]^compiler.report ( JSError.make ( t, n, startMarkerName, UNMATCHED_END_MARKER, endMarkerName )  ) ;^124^125^^^^109^139^compiler.report ( JSError.make ( t, n, UNMATCHED_END_MARKER, startMarkerName, endMarkerName )  ) ;^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  int  type  
[BugLab_Argument_Swapping]^compiler.report ( JSError.make ( endMarkerName, n, UNMATCHED_END_MARKER, startMarkerName, t )  ) ;^124^125^^^^109^139^compiler.report ( JSError.make ( t, n, UNMATCHED_END_MARKER, startMarkerName, endMarkerName )  ) ;^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  int  type  
[BugLab_Variable_Misuse]^compiler.report ( JSError.make ( t, externs, UNMATCHED_END_MARKER, startMarkerName, endMarkerName )  ) ;^124^125^^^^109^139^compiler.report ( JSError.make ( t, n, UNMATCHED_END_MARKER, startMarkerName, endMarkerName )  ) ;^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  int  type  
[BugLab_Variable_Misuse]^compiler.report ( JSError.make ( t, n, UNMATCHED_END_MARKER, startMarkerName, startMarkerName )  ) ;^124^125^^^^109^139^compiler.report ( JSError.make ( t, n, UNMATCHED_END_MARKER, startMarkerName, endMarkerName )  ) ;^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  int  type  
[BugLab_Argument_Swapping]^compiler.report ( JSError.make ( UNMATCHED_END_MARKER, n, t, startMarkerName, endMarkerName )  ) ;^124^125^^^^109^139^compiler.report ( JSError.make ( t, n, UNMATCHED_END_MARKER, startMarkerName, endMarkerName )  ) ;^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  int  type  
[BugLab_Argument_Swapping]^compiler.report ( JSError.make ( t, startMarkerName, UNMATCHED_END_MARKER, n, endMarkerName )  ) ;^124^125^^^^109^139^compiler.report ( JSError.make ( t, n, UNMATCHED_END_MARKER, startMarkerName, endMarkerName )  ) ;^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  int  type  
[BugLab_Argument_Swapping]^compiler.report ( JSError.make ( t, n, UNMATCHED_END_MARKER, endMarkerName, startMarkerName )  ) ;^124^125^^^^109^139^compiler.report ( JSError.make ( t, n, UNMATCHED_END_MARKER, startMarkerName, endMarkerName )  ) ;^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  int  type  
[BugLab_Variable_Misuse]^compiler.report ( JSError.make ( t, root, UNMATCHED_END_MARKER, startMarkerName, endMarkerName )  ) ;^124^125^^^^109^139^compiler.report ( JSError.make ( t, n, UNMATCHED_END_MARKER, startMarkerName, endMarkerName )  ) ;^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  int  type  
[BugLab_Variable_Misuse]^StartMarker startMarker = 0.pop (  ) ;^129^^^^^114^144^StartMarker startMarker = startMarkerStack.pop (  ) ;^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  int  type  
[BugLab_Variable_Misuse]^Node endMarkerAncestorBlockChild = root;^131^^^^^116^146^Node endMarkerAncestorBlockChild = n;^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  int  type  
[BugLab_Wrong_Operator]^if  ( type == Token.SCRIPT && type == Token.BLOCK )  {^134^^^^^119^149^if  ( type == Token.SCRIPT || type == Token.BLOCK )  {^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  int  type  
[BugLab_Wrong_Operator]^if  ( type >= Token.SCRIPT || type == Token.BLOCK )  {^134^^^^^119^149^if  ( type == Token.SCRIPT || type == Token.BLOCK )  {^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  int  type  
[BugLab_Wrong_Operator]^if  ( type != Token.SCRIPT || type == Token.BLOCK )  {^134^^^^^119^149^if  ( type == Token.SCRIPT || type == Token.BLOCK )  {^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  int  type  
[BugLab_Variable_Misuse]^if  ( root != startMarker.ancestorBlock )  {^135^^^^^120^150^if  ( ancestor != startMarker.ancestorBlock )  {^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  int  type  
[BugLab_Variable_Misuse]^if  ( ancestor != removedNode )  {^135^^^^^120^150^if  ( ancestor != startMarker.ancestorBlock )  {^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  int  type  
[BugLab_Argument_Swapping]^if  ( startMarker.ancestorBlock != ancestor )  {^135^^^^^120^150^if  ( ancestor != startMarker.ancestorBlock )  {^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  int  type  
[BugLab_Argument_Swapping]^if  ( ancestor != startMarker.ancestorBlock.ancestorBlock )  {^135^^^^^120^150^if  ( ancestor != startMarker.ancestorBlock )  {^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  int  type  
[BugLab_Wrong_Operator]^if  ( ancestor > startMarker.ancestorBlock )  {^135^^^^^120^150^if  ( ancestor != startMarker.ancestorBlock )  {^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  int  type  
[BugLab_Variable_Misuse]^compiler.report ( JSError.make ( t, node, UNMATCHED_END_MARKER, startMarkerName, endMarkerName )  ) ;^137^138^^^^122^152^compiler.report ( JSError.make ( t, n, UNMATCHED_END_MARKER, startMarkerName, endMarkerName )  ) ;^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  int  type  
[BugLab_Variable_Misuse]^compiler.report ( JSError.make ( t, n, UNMATCHED_END_MARKER, sourceName, endMarkerName )  ) ;^137^138^^^^122^152^compiler.report ( JSError.make ( t, n, UNMATCHED_END_MARKER, startMarkerName, endMarkerName )  ) ;^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  int  type  
[BugLab_Variable_Misuse]^compiler.report ( JSError.make ( t, n, UNMATCHED_END_MARKER, startMarkerName, sourceName )  ) ;^137^138^^^^122^152^compiler.report ( JSError.make ( t, n, UNMATCHED_END_MARKER, startMarkerName, endMarkerName )  ) ;^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  int  type  
[BugLab_Argument_Swapping]^compiler.report ( JSError.make ( endMarkerName, n, UNMATCHED_END_MARKER, startMarkerName, t )  ) ;^137^138^^^^122^152^compiler.report ( JSError.make ( t, n, UNMATCHED_END_MARKER, startMarkerName, endMarkerName )  ) ;^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  int  type  
[BugLab_Argument_Swapping]^compiler.report ( JSError.make ( t, endMarkerName, UNMATCHED_END_MARKER, startMarkerName, n )  ) ;^137^138^^^^122^152^compiler.report ( JSError.make ( t, n, UNMATCHED_END_MARKER, startMarkerName, endMarkerName )  ) ;^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  int  type  
[BugLab_Argument_Swapping]^compiler.report ( JSError.make ( t, n, startMarkerName, UNMATCHED_END_MARKER, endMarkerName )  ) ;^137^138^^^^122^152^compiler.report ( JSError.make ( t, n, UNMATCHED_END_MARKER, startMarkerName, endMarkerName )  ) ;^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  int  type  
[BugLab_Argument_Swapping]^compiler.report ( JSError.make ( t, n, endMarkerName, startMarkerName, UNMATCHED_END_MARKER )  ) ;^137^138^^^^122^152^compiler.report ( JSError.make ( t, n, UNMATCHED_END_MARKER, startMarkerName, endMarkerName )  ) ;^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  int  type  
[BugLab_Variable_Misuse]^compiler.report ( JSError.make ( t, root, UNMATCHED_END_MARKER, startMarkerName, endMarkerName )  ) ;^137^138^^^^122^152^compiler.report ( JSError.make ( t, n, UNMATCHED_END_MARKER, startMarkerName, endMarkerName )  ) ;^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  int  type  
[BugLab_Variable_Misuse]^compiler.report ( JSError.make ( t, n, UNMATCHED_START_MARKER, startMarkerName, endMarkerName )  ) ;^137^138^^^^122^152^compiler.report ( JSError.make ( t, n, UNMATCHED_END_MARKER, startMarkerName, endMarkerName )  ) ;^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  int  type  
[BugLab_Variable_Misuse]^compiler.report ( JSError.make ( t, n, UNMATCHED_END_MARKER, startMarkerName, startMarkerName )  ) ;^137^138^^^^122^152^compiler.report ( JSError.make ( t, n, UNMATCHED_END_MARKER, startMarkerName, endMarkerName )  ) ;^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  int  type  
[BugLab_Argument_Swapping]^compiler.report ( JSError.make ( UNMATCHED_END_MARKER, n, t, startMarkerName, endMarkerName )  ) ;^137^138^^^^122^152^compiler.report ( JSError.make ( t, n, UNMATCHED_END_MARKER, startMarkerName, endMarkerName )  ) ;^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  int  type  
[BugLab_Argument_Swapping]^compiler.report ( JSError.make ( t, n, UNMATCHED_END_MARKER, endMarkerName, startMarkerName )  ) ;^137^138^^^^122^152^compiler.report ( JSError.make ( t, n, UNMATCHED_END_MARKER, startMarkerName, endMarkerName )  ) ;^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  int  type  
[BugLab_Variable_Misuse]^compiler.report ( JSError.make ( t, externs, UNMATCHED_END_MARKER, startMarkerName, endMarkerName )  ) ;^137^138^^^^122^152^compiler.report ( JSError.make ( t, n, UNMATCHED_END_MARKER, startMarkerName, endMarkerName )  ) ;^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  int  type  
[BugLab_Argument_Swapping]^compiler.report ( JSError.make ( n, t, UNMATCHED_END_MARKER, startMarkerName, endMarkerName )  ) ;^137^138^^^^122^152^compiler.report ( JSError.make ( t, n, UNMATCHED_END_MARKER, startMarkerName, endMarkerName )  ) ;^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  int  type  
[BugLab_Argument_Swapping]^compiler.report ( JSError.make ( t, UNMATCHED_END_MARKER, n, startMarkerName, endMarkerName )  ) ;^137^138^^^^122^152^compiler.report ( JSError.make ( t, n, UNMATCHED_END_MARKER, startMarkerName, endMarkerName )  ) ;^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  int  type  
[BugLab_Argument_Swapping]^compiler.report ( JSError.make ( startMarkerName, n, UNMATCHED_END_MARKER, t, endMarkerName )  ) ;^137^138^^^^122^152^compiler.report ( JSError.make ( t, n, UNMATCHED_END_MARKER, startMarkerName, endMarkerName )  ) ;^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  int  type  
[BugLab_Wrong_Operator]^if  ( ancestor <= startMarker.ancestorBlock )  {^135^^^^^120^150^if  ( ancestor != startMarker.ancestorBlock )  {^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  int  type  
[BugLab_Argument_Swapping]^compiler.report ( JSError.make ( t, startMarkerName, UNMATCHED_END_MARKER, n, endMarkerName )  ) ;^137^138^^^^122^152^compiler.report ( JSError.make ( t, n, UNMATCHED_END_MARKER, startMarkerName, endMarkerName )  ) ;^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  int  type  
[BugLab_Variable_Misuse]^for  ( Node ancestor : externs.getAncestors (  )  )  {^132^^^^^117^147^for  ( Node ancestor : n.getAncestors (  )  )  {^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  int  type  
[BugLab_Variable_Misuse]^int type = n.getType (  ) ;^133^^^^^118^148^int type = ancestor.getType (  ) ;^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  int  type  
[BugLab_Wrong_Literal]^block.setIsSyntheticBlock ( false ) ;^147^^^^^132^162^block.setIsSyntheticBlock ( true ) ;^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  int  type  
[BugLab_Variable_Misuse]^startMarker.ancestorBlock.addChildAfter ( block, nodeChild ) ;^148^149^^^^133^163^startMarker.ancestorBlock.addChildAfter ( block, startMarker.ancestorBlockChild ) ;^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  int  type  
[BugLab_Variable_Misuse]^startMarker.ancestorBlock.addChildAfter ( block, removedNode ) ;^148^149^^^^133^163^startMarker.ancestorBlock.addChildAfter ( block, startMarker.ancestorBlockChild ) ;^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  int  type  
[BugLab_Argument_Swapping]^startMarker.ancestorBlock.addChildAfter ( block, startMarker.ancestorBlock.ancestorBlockChild ) ;^148^149^^^^133^163^startMarker.ancestorBlock.addChildAfter ( block, startMarker.ancestorBlockChild ) ;^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  int  type  
[BugLab_Argument_Swapping]^startMarker.ancestorBlock.addChildAfter ( startMarker.ancestorBlock, blockChild ) ;^148^149^^^^133^163^startMarker.ancestorBlock.addChildAfter ( block, startMarker.ancestorBlockChild ) ;^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  int  type  
[BugLab_Argument_Swapping]^startMarker.ancestorBlock.addChildAfter ( startMarker.ancestorBlockChild, block ) ;^148^149^^^^133^163^startMarker.ancestorBlock.addChildAfter ( block, startMarker.ancestorBlockChild ) ;^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  int  type  
[BugLab_Variable_Misuse]^removedNode = startMarker.ancestorBlock.removeChildAfter ( node ) ;^153^^^^^138^168^removedNode = startMarker.ancestorBlock.removeChildAfter ( block ) ;^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  int  type  
[BugLab_Variable_Misuse]^removedNode = node.removeChildAfter ( block ) ;^153^^^^^138^168^removedNode = startMarker.ancestorBlock.removeChildAfter ( block ) ;^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  int  type  
[BugLab_Argument_Swapping]^removedNode = block.ancestorBlock.removeChildAfter ( startMarker ) ;^153^^^^^138^168^removedNode = startMarker.ancestorBlock.removeChildAfter ( block ) ;^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  int  type  
[BugLab_Argument_Swapping]^removedNode = block.removeChildAfter ( startMarker.ancestorBlock ) ;^153^^^^^138^168^removedNode = startMarker.ancestorBlock.removeChildAfter ( block ) ;^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  int  type  
[BugLab_Variable_Misuse]^removedNode = startMarker.ancestorBlock.removeChildAfter ( n ) ;^153^^^^^138^168^removedNode = startMarker.ancestorBlock.removeChildAfter ( block ) ;^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  int  type  
[BugLab_Variable_Misuse]^removedNode = removedNode.removeChildAfter ( block ) ;^153^^^^^138^168^removedNode = startMarker.ancestorBlock.removeChildAfter ( block ) ;^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  int  type  
[BugLab_Argument_Swapping]^removedNode = startMarker.ancestorBlock.ancestorBlock.removeChildAfter ( block ) ;^153^^^^^138^168^removedNode = startMarker.ancestorBlock.removeChildAfter ( block ) ;^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  int  type  
[BugLab_Argument_Swapping]^removedNode = startMarker.removeChildAfter ( block ) ;^153^^^^^138^168^removedNode = startMarker.ancestorBlock.removeChildAfter ( block ) ;^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  int  type  
[BugLab_Variable_Misuse]^block.addChildToBack ( n ) ;^154^^^^^139^169^block.addChildToBack ( removedNode ) ;^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  int  type  
[BugLab_Variable_Misuse]^node = node;^57^^^^^54^60^node = n;^[CLASS] StartMarker  [METHOD] <init> [RETURN_TYPE] Node)   String sourceName Node n Node ancestorBlockChild Node ancestorBlock [VARIABLES] Node  ancestorBlock  ancestorBlockChild  n  node  String  sourceName  boolean  
[BugLab_Variable_Misuse]^this.ancestorBlockChild = node;^58^^^^^54^60^this.ancestorBlockChild = ancestorBlockChild;^[CLASS] StartMarker  [METHOD] <init> [RETURN_TYPE] Node)   String sourceName Node n Node ancestorBlockChild Node ancestorBlock [VARIABLES] Node  ancestorBlock  ancestorBlockChild  n  node  String  sourceName  boolean  
[BugLab_Variable_Misuse]^this.ancestorBlock = node;^59^^^^^54^60^this.ancestorBlock = ancestorBlock;^[CLASS] StartMarker  [METHOD] <init> [RETURN_TYPE] Node)   String sourceName Node n Node ancestorBlockChild Node ancestorBlock [VARIABLES] Node  ancestorBlock  ancestorBlockChild  n  node  String  sourceName  boolean  
[BugLab_Variable_Misuse]^if  ( removedNode.getType (  )  != Token.NAME || parent.getType (  )  != Token.CALL )  {^97^^^^^82^112^if  ( n.getType (  )  != Token.NAME || parent.getType (  )  != Token.CALL )  {^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  n  parent  removedNode  StartMarker  startMarker  int  type  
[BugLab_Variable_Misuse]^if  ( n.getType (  )  != Token.NAME || removedNode.getType (  )  != Token.CALL )  {^97^^^^^82^112^if  ( n.getType (  )  != Token.NAME || parent.getType (  )  != Token.CALL )  {^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  n  parent  removedNode  StartMarker  startMarker  int  type  
[BugLab_Wrong_Operator]^if  ( n.getType (  )  != Token.NAME && parent.getType (  )  != Token.CALL )  {^97^^^^^82^112^if  ( n.getType (  )  != Token.NAME || parent.getType (  )  != Token.CALL )  {^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  n  parent  removedNode  StartMarker  startMarker  int  type  
[BugLab_Wrong_Operator]^if  ( n.getType (  )  <= Token.NAME || parent.getType (  )  != Token.CALL )  {^97^^^^^82^112^if  ( n.getType (  )  != Token.NAME || parent.getType (  )  != Token.CALL )  {^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  n  parent  removedNode  StartMarker  startMarker  int  type  
[BugLab_Variable_Misuse]^if  ( endMarkerAncestorBlockChild.getType (  )  != Token.NAME || parent.getType (  )  != Token.CALL )  {^97^^^^^82^112^if  ( n.getType (  )  != Token.NAME || parent.getType (  )  != Token.CALL )  {^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  n  parent  removedNode  StartMarker  startMarker  int  type  
[BugLab_Variable_Misuse]^if  ( n.getType (  )  != Token.NAME || n.getType (  )  != Token.CALL )  {^97^^^^^82^112^if  ( n.getType (  )  != Token.NAME || parent.getType (  )  != Token.CALL )  {^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  n  parent  removedNode  StartMarker  startMarker  int  type  
[BugLab_Variable_Misuse]^if  ( startMarkerName.equals ( parent.getString (  )  )  )  {^101^^^^^86^116^if  ( startMarkerName.equals ( n.getString (  )  )  )  {^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  n  parent  removedNode  StartMarker  startMarker  int  type  
[BugLab_Argument_Swapping]^if  ( n.equals ( startMarkerName.getString (  )  )  )  {^101^^^^^86^116^if  ( startMarkerName.equals ( n.getString (  )  )  )  {^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  n  parent  removedNode  StartMarker  startMarker  int  type  
[BugLab_Variable_Misuse]^if  ( type == Token.SCRIPT || type == Token.4 )  {^108^^^^^93^123^if  ( type == Token.SCRIPT || type == Token.BLOCK )  {^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  n  parent  removedNode  StartMarker  startMarker  int  type  
[BugLab_Wrong_Operator]^if  ( type == Token.SCRIPT && type == Token.BLOCK )  {^108^^^^^93^123^if  ( type == Token.SCRIPT || type == Token.BLOCK )  {^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  n  parent  removedNode  StartMarker  startMarker  int  type  
[BugLab_Wrong_Operator]^if  ( type != Token.SCRIPT || type == Token.BLOCK )  {^108^^^^^93^123^if  ( type == Token.SCRIPT || type == Token.BLOCK )  {^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  n  parent  removedNode  StartMarker  startMarker  int  type  
[BugLab_Wrong_Operator]^if  ( type >= Token.SCRIPT || type == Token.BLOCK )  {^108^^^^^93^123^if  ( type == Token.SCRIPT || type == Token.BLOCK )  {^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  n  parent  removedNode  StartMarker  startMarker  int  type  
[BugLab_Variable_Misuse]^ancestorBlock = removedNode;^109^^^^^94^124^ancestorBlock = ancestor;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  n  parent  removedNode  StartMarker  startMarker  int  type  
[BugLab_Variable_Misuse]^ancestorBlockChild = parent;^112^^^^^97^127^ancestorBlockChild = ancestor;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  n  parent  removedNode  StartMarker  startMarker  int  type  
[BugLab_Variable_Misuse]^startMarkerStack.push ( removedNodeew StartMarker ( t.getSourceName (  ) , n, ancestorBlockChild, ancestorBlock )  ) ;^115^116^^^^100^130^startMarkerStack.push ( new StartMarker ( t.getSourceName (  ) , n, ancestorBlockChild, ancestorBlock )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  n  parent  removedNode  StartMarker  startMarker  int  type  
[BugLab_Variable_Misuse]^startMarkerStack.push ( new StartMarker ( t.getSourceName (  ) , n, parent, ancestorBlock )  ) ;^115^116^^^^100^130^startMarkerStack.push ( new StartMarker ( t.getSourceName (  ) , n, ancestorBlockChild, ancestorBlock )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  n  parent  removedNode  StartMarker  startMarker  int  type  
[BugLab_Variable_Misuse]^startMarkerStack.push ( new StartMarker ( t.getSourceName (  ) , n, removedNodeChild, ancestorBlock )  ) ;^115^116^^^^100^130^startMarkerStack.push ( new StartMarker ( t.getSourceName (  ) , n, ancestorBlockChild, ancestorBlock )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  n  parent  removedNode  StartMarker  startMarker  int  type  
[BugLab_Argument_Swapping]^startMarkerStack.push ( tew StartMarker ( n.getSourceName (  ) , n, ancestorBlockChild, ancestorBlock )  ) ;^115^116^^^^100^130^startMarkerStack.push ( new StartMarker ( t.getSourceName (  ) , n, ancestorBlockChild, ancestorBlock )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  n  parent  removedNode  StartMarker  startMarker  int  type  
[BugLab_Argument_Swapping]^startMarkerStack.push ( ancestorBlockew StartMarker ( t.getSourceName (  ) , n, nChild, ancestorBlock )  ) ;^115^116^^^^100^130^startMarkerStack.push ( new StartMarker ( t.getSourceName (  ) , n, ancestorBlockChild, ancestorBlock )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  n  parent  removedNode  StartMarker  startMarker  int  type  
[BugLab_Argument_Swapping]^startMarkerStack.push ( new StartMarker ( t.getSourceName (  ) , n, ancestorBlock, ancestorBlockChild )  ) ;^115^116^^^^100^130^startMarkerStack.push ( new StartMarker ( t.getSourceName (  ) , n, ancestorBlockChild, ancestorBlock )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  n  parent  removedNode  StartMarker  startMarker  int  type  
[BugLab_Variable_Misuse]^Node ancestorBlockChild = removedNode;^104^^^^^89^119^Node ancestorBlockChild = n;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  n  parent  removedNode  StartMarker  startMarker  int  type  
[BugLab_Variable_Misuse]^int type = parent.getType (  ) ;^107^^^^^92^122^int type = ancestor.getType (  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  n  parent  removedNode  StartMarker  startMarker  int  type  
[BugLab_Variable_Misuse]^for  ( Node ancestor : parent.getAncestors (  )  )  {^106^^^^^91^121^for  ( Node ancestor : n.getAncestors (  )  )  {^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  n  parent  removedNode  StartMarker  startMarker  int  type  
[BugLab_Variable_Misuse]^int type = removedNode.getType (  ) ;^107^^^^^92^122^int type = ancestor.getType (  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  n  parent  removedNode  StartMarker  startMarker  int  type  
[BugLab_Argument_Swapping]^startMarkerStack.push ( new StartMarker ( ancestorBlockChild.getSourceName (  ) , n, t, ancestorBlock )  ) ;^115^116^^^^100^130^startMarkerStack.push ( new StartMarker ( t.getSourceName (  ) , n, ancestorBlockChild, ancestorBlock )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  n  parent  removedNode  StartMarker  startMarker  int  type  
[BugLab_Argument_Swapping]^startMarkerStack.push ( ancestorBlockChildew StartMarker ( t.getSourceName (  ) , n, n, ancestorBlock )  ) ;^115^116^^^^100^130^startMarkerStack.push ( new StartMarker ( t.getSourceName (  ) , n, ancestorBlockChild, ancestorBlock )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  n  parent  removedNode  StartMarker  startMarker  int  type  
[BugLab_Argument_Swapping]^startMarkerStack.push ( new StartMarker ( t.getSourceName (  ) , n, ancestorBlockChildChild, ancestorBlock )  ) ;^115^116^^^^100^130^startMarkerStack.push ( new StartMarker ( t.getSourceName (  ) , n, ancestorBlockChild, ancestorBlock )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  n  parent  removedNode  StartMarker  startMarker  int  type  
[BugLab_Variable_Misuse]^if  ( type == Token.0 || type == Token.BLOCK )  {^108^^^^^93^123^if  ( type == Token.SCRIPT || type == Token.BLOCK )  {^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  n  parent  removedNode  StartMarker  startMarker  int  type  
[BugLab_Wrong_Operator]^if  ( type <= Token.SCRIPT || type == Token.BLOCK )  {^108^^^^^93^123^if  ( type == Token.SCRIPT || type == Token.BLOCK )  {^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  n  parent  removedNode  StartMarker  startMarker  int  type  
[BugLab_Variable_Misuse]^ancestorBlock = parent;^109^^^^^94^124^ancestorBlock = ancestor;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  n  parent  removedNode  StartMarker  startMarker  int  type  
[BugLab_Variable_Misuse]^ancestorBlockChild = removedNode;^112^^^^^97^127^ancestorBlockChild = ancestor;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  n  parent  removedNode  StartMarker  startMarker  int  type  
[BugLab_Variable_Misuse]^startMarkerStack.push ( new StartMarker ( t.getSourceName (  ) , n, removedNode, ancestorBlock )  ) ;^115^116^^^^100^130^startMarkerStack.push ( new StartMarker ( t.getSourceName (  ) , n, ancestorBlockChild, ancestorBlock )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  n  parent  removedNode  StartMarker  startMarker  int  type  
[BugLab_Argument_Swapping]^startMarkerStack.push ( new StartMarker ( ancestorBlock.getSourceName (  ) , n, tChild, ancestorBlock )  ) ;^115^116^^^^100^130^startMarkerStack.push ( new StartMarker ( t.getSourceName (  ) , n, ancestorBlockChild, ancestorBlock )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  n  parent  removedNode  StartMarker  startMarker  int  type  
[BugLab_Variable_Misuse]^Node ancestorBlockChild = parent;^104^^^^^89^119^Node ancestorBlockChild = n;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  n  parent  removedNode  StartMarker  startMarker  int  type  
[BugLab_Variable_Misuse]^if  ( startMarkerName.equals ( endMarkerAncestorBlockChild.getString (  )  )  )  {^101^^^^^86^116^if  ( startMarkerName.equals ( n.getString (  )  )  )  {^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  n  parent  removedNode  StartMarker  startMarker  int  type  
[BugLab_Variable_Misuse]^if  ( !endMarkerName.equals ( removedNode.getString (  )  )  )  {^119^^^^^104^134^if  ( !endMarkerName.equals ( n.getString (  )  )  )  {^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  n  parent  removedNode  StartMarker  startMarker  int  type  
[BugLab_Variable_Misuse]^if  ( !endMarkerName.equals ( endMarkerAncestorBlockChild.getString (  )  )  )  {^119^^^^^104^134^if  ( !endMarkerName.equals ( n.getString (  )  )  )  {^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  n  parent  removedNode  StartMarker  startMarker  int  type  
[BugLab_Variable_Misuse]^compiler.report ( JSError.make ( t, parent, UNMATCHED_END_MARKER, startMarkerName, endMarkerName )  ) ;^124^125^^^^109^139^compiler.report ( JSError.make ( t, n, UNMATCHED_END_MARKER, startMarkerName, endMarkerName )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  n  parent  removedNode  StartMarker  startMarker  int  type  
[BugLab_Argument_Swapping]^compiler.report ( JSError.make ( startMarkerName, n, UNMATCHED_END_MARKER, t, endMarkerName )  ) ;^124^125^^^^109^139^compiler.report ( JSError.make ( t, n, UNMATCHED_END_MARKER, startMarkerName, endMarkerName )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  n  parent  removedNode  StartMarker  startMarker  int  type  
[BugLab_Argument_Swapping]^compiler.report ( JSError.make ( t, endMarkerName, UNMATCHED_END_MARKER, startMarkerName, n )  ) ;^124^125^^^^109^139^compiler.report ( JSError.make ( t, n, UNMATCHED_END_MARKER, startMarkerName, endMarkerName )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  n  parent  removedNode  StartMarker  startMarker  int  type  
[BugLab_Argument_Swapping]^compiler.report ( JSError.make ( t, n, endMarkerName, startMarkerName, UNMATCHED_END_MARKER )  ) ;^124^125^^^^109^139^compiler.report ( JSError.make ( t, n, UNMATCHED_END_MARKER, startMarkerName, endMarkerName )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  n  parent  removedNode  StartMarker  startMarker  int  type  
[BugLab_Argument_Swapping]^compiler.report ( JSError.make ( t, n, UNMATCHED_END_MARKER, endMarkerName, startMarkerName )  ) ;^124^125^^^^109^139^compiler.report ( JSError.make ( t, n, UNMATCHED_END_MARKER, startMarkerName, endMarkerName )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  n  parent  removedNode  StartMarker  startMarker  int  type  
[BugLab_Variable_Misuse]^compiler.report ( JSError.make ( t, n, UNMATCHED_END_MARKER, startMarkerName, 2 )  ) ;^124^125^^^^109^139^compiler.report ( JSError.make ( t, n, UNMATCHED_END_MARKER, startMarkerName, endMarkerName )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  n  parent  removedNode  StartMarker  startMarker  int  type  
[BugLab_Argument_Swapping]^compiler.report ( JSError.make ( t, startMarkerName, UNMATCHED_END_MARKER, n, endMarkerName )  ) ;^124^125^^^^109^139^compiler.report ( JSError.make ( t, n, UNMATCHED_END_MARKER, startMarkerName, endMarkerName )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  n  parent  removedNode  StartMarker  startMarker  int  type  
[BugLab_Argument_Swapping]^compiler.report ( JSError.make ( t, UNMATCHED_END_MARKER, n, startMarkerName, endMarkerName )  ) ;^124^125^^^^109^139^compiler.report ( JSError.make ( t, n, UNMATCHED_END_MARKER, startMarkerName, endMarkerName )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  n  parent  removedNode  StartMarker  startMarker  int  type  
[BugLab_Variable_Misuse]^compiler.report ( JSError.make ( t, removedNode, UNMATCHED_END_MARKER, startMarkerName, endMarkerName )  ) ;^124^125^^^^109^139^compiler.report ( JSError.make ( t, n, UNMATCHED_END_MARKER, startMarkerName, endMarkerName )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  n  parent  removedNode  StartMarker  startMarker  int  type  
[BugLab_Argument_Swapping]^compiler.report ( JSError.make ( endMarkerName, n, UNMATCHED_END_MARKER, startMarkerName, t )  ) ;^124^125^^^^109^139^compiler.report ( JSError.make ( t, n, UNMATCHED_END_MARKER, startMarkerName, endMarkerName )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  n  parent  removedNode  StartMarker  startMarker  int  type  
[BugLab_Argument_Swapping]^compiler.report ( JSError.make ( n, t, UNMATCHED_END_MARKER, startMarkerName, endMarkerName )  ) ;^124^125^^^^109^139^compiler.report ( JSError.make ( t, n, UNMATCHED_END_MARKER, startMarkerName, endMarkerName )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  n  parent  removedNode  StartMarker  startMarker  int  type  
[BugLab_Variable_Misuse]^compiler.report ( JSError.make ( t, n, null, startMarkerName, endMarkerName )  ) ;^124^125^^^^109^139^compiler.report ( JSError.make ( t, n, UNMATCHED_END_MARKER, startMarkerName, endMarkerName )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  n  parent  removedNode  StartMarker  startMarker  int  type  
[BugLab_Argument_Swapping]^compiler.report ( JSError.make ( UNMATCHED_END_MARKER, n, t, startMarkerName, endMarkerName )  ) ;^124^125^^^^109^139^compiler.report ( JSError.make ( t, n, UNMATCHED_END_MARKER, startMarkerName, endMarkerName )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  n  parent  removedNode  StartMarker  startMarker  int  type  
[BugLab_Variable_Misuse]^Node endMarkerAncestorBlockChild = removedNode;^131^^^^^116^146^Node endMarkerAncestorBlockChild = n;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  n  parent  removedNode  StartMarker  startMarker  int  type  
[BugLab_Argument_Swapping]^if  ( t == Token.SCRIPT || typeype == Token.BLOCK )  {^134^^^^^119^149^if  ( type == Token.SCRIPT || type == Token.BLOCK )  {^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  n  parent  removedNode  StartMarker  startMarker  int  type  
[BugLab_Wrong_Operator]^if  ( type == Token.SCRIPT && type == Token.BLOCK )  {^134^^^^^119^149^if  ( type == Token.SCRIPT || type == Token.BLOCK )  {^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  n  parent  removedNode  StartMarker  startMarker  int  type  
[BugLab_Wrong_Operator]^if  ( type != Token.SCRIPT || type == Token.BLOCK )  {^134^^^^^119^149^if  ( type == Token.SCRIPT || type == Token.BLOCK )  {^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  n  parent  removedNode  StartMarker  startMarker  int  type  
[BugLab_Wrong_Operator]^if  ( type <= Token.SCRIPT || type == Token.BLOCK )  {^134^^^^^119^149^if  ( type == Token.SCRIPT || type == Token.BLOCK )  {^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  n  parent  removedNode  StartMarker  startMarker  int  type  
[BugLab_Variable_Misuse]^if  ( parent != startMarker.ancestorBlock )  {^135^^^^^120^150^if  ( ancestor != startMarker.ancestorBlock )  {^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  n  parent  removedNode  StartMarker  startMarker  int  type  
[BugLab_Variable_Misuse]^if  ( ancestor != n )  {^135^^^^^120^150^if  ( ancestor != startMarker.ancestorBlock )  {^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  n  parent  removedNode  StartMarker  startMarker  int  type  
[BugLab_Wrong_Operator]^if  ( ancestor >= startMarker.ancestorBlock )  {^135^^^^^120^150^if  ( ancestor != startMarker.ancestorBlock )  {^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  n  parent  removedNode  StartMarker  startMarker  int  type  
[BugLab_Variable_Misuse]^compiler.report ( JSError.make ( t, endMarkerAncestorBlockChild, UNMATCHED_END_MARKER, startMarkerName, endMarkerName )  ) ;^137^138^^^^122^152^compiler.report ( JSError.make ( t, n, UNMATCHED_END_MARKER, startMarkerName, endMarkerName )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  n  parent  removedNode  StartMarker  startMarker  int  type  
[BugLab_Argument_Swapping]^compiler.report ( JSError.make ( UNMATCHED_END_MARKER, n, t, startMarkerName, endMarkerName )  ) ;^137^138^^^^122^152^compiler.report ( JSError.make ( t, n, UNMATCHED_END_MARKER, startMarkerName, endMarkerName )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  n  parent  removedNode  StartMarker  startMarker  int  type  
[BugLab_Argument_Swapping]^compiler.report ( JSError.make ( t, endMarkerName, UNMATCHED_END_MARKER, startMarkerName, n )  ) ;^137^138^^^^122^152^compiler.report ( JSError.make ( t, n, UNMATCHED_END_MARKER, startMarkerName, endMarkerName )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  n  parent  removedNode  StartMarker  startMarker  int  type  
[BugLab_Argument_Swapping]^compiler.report ( JSError.make ( t, n, endMarkerName, startMarkerName, UNMATCHED_END_MARKER )  ) ;^137^138^^^^122^152^compiler.report ( JSError.make ( t, n, UNMATCHED_END_MARKER, startMarkerName, endMarkerName )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  n  parent  removedNode  StartMarker  startMarker  int  type  
[BugLab_Argument_Swapping]^compiler.report ( JSError.make ( t, n, UNMATCHED_END_MARKER, endMarkerName, startMarkerName )  ) ;^137^138^^^^122^152^compiler.report ( JSError.make ( t, n, UNMATCHED_END_MARKER, startMarkerName, endMarkerName )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  n  parent  removedNode  StartMarker  startMarker  int  type  
[BugLab_Argument_Swapping]^compiler.report ( JSError.make ( t, UNMATCHED_END_MARKER, n, startMarkerName, endMarkerName )  ) ;^137^138^^^^122^152^compiler.report ( JSError.make ( t, n, UNMATCHED_END_MARKER, startMarkerName, endMarkerName )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  n  parent  removedNode  StartMarker  startMarker  int  type  
[BugLab_Argument_Swapping]^compiler.report ( JSError.make ( t, n, startMarkerName, UNMATCHED_END_MARKER, endMarkerName )  ) ;^137^138^^^^122^152^compiler.report ( JSError.make ( t, n, UNMATCHED_END_MARKER, startMarkerName, endMarkerName )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  n  parent  removedNode  StartMarker  startMarker  int  type  
[BugLab_Variable_Misuse]^compiler.report ( JSError.make ( t, removedNode, UNMATCHED_END_MARKER, startMarkerName, endMarkerName )  ) ;^137^138^^^^122^152^compiler.report ( JSError.make ( t, n, UNMATCHED_END_MARKER, startMarkerName, endMarkerName )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  n  parent  removedNode  StartMarker  startMarker  int  type  
[BugLab_Argument_Swapping]^compiler.report ( JSError.make ( endMarkerName, n, UNMATCHED_END_MARKER, startMarkerName, t )  ) ;^137^138^^^^122^152^compiler.report ( JSError.make ( t, n, UNMATCHED_END_MARKER, startMarkerName, endMarkerName )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  n  parent  removedNode  StartMarker  startMarker  int  type  
[BugLab_Argument_Swapping]^compiler.report ( JSError.make ( n, t, UNMATCHED_END_MARKER, startMarkerName, endMarkerName )  ) ;^137^138^^^^122^152^compiler.report ( JSError.make ( t, n, UNMATCHED_END_MARKER, startMarkerName, endMarkerName )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  n  parent  removedNode  StartMarker  startMarker  int  type  
[BugLab_Argument_Swapping]^compiler.report ( JSError.make ( t, startMarkerName, UNMATCHED_END_MARKER, n, endMarkerName )  ) ;^137^138^^^^122^152^compiler.report ( JSError.make ( t, n, UNMATCHED_END_MARKER, startMarkerName, endMarkerName )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  n  parent  removedNode  StartMarker  startMarker  int  type  
[BugLab_Argument_Swapping]^compiler.report ( JSError.make ( startMarkerName, n, UNMATCHED_END_MARKER, t, endMarkerName )  ) ;^137^138^^^^122^152^compiler.report ( JSError.make ( t, n, UNMATCHED_END_MARKER, startMarkerName, endMarkerName )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  n  parent  removedNode  StartMarker  startMarker  int  type  
[BugLab_Argument_Swapping]^if  ( startMarker.ancestorBlock != ancestor )  {^135^^^^^120^150^if  ( ancestor != startMarker.ancestorBlock )  {^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  n  parent  removedNode  StartMarker  startMarker  int  type  
[BugLab_Wrong_Operator]^if  ( ancestor <= startMarker.ancestorBlock )  {^135^^^^^120^150^if  ( ancestor != startMarker.ancestorBlock )  {^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  n  parent  removedNode  StartMarker  startMarker  int  type  
[BugLab_Variable_Misuse]^endMarkerAncestorBlockChild = n;^143^^^^^128^158^endMarkerAncestorBlockChild = ancestor;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  n  parent  removedNode  StartMarker  startMarker  int  type  
[BugLab_Variable_Misuse]^int type = parent.getType (  ) ;^133^^^^^118^148^int type = ancestor.getType (  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  n  parent  removedNode  StartMarker  startMarker  int  type  
[BugLab_Variable_Misuse]^for  ( Node ancestor : removedNode.getAncestors (  )  )  {^132^^^^^117^147^for  ( Node ancestor : n.getAncestors (  )  )  {^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  n  parent  removedNode  StartMarker  startMarker  int  type  
[BugLab_Variable_Misuse]^int type = removedNode.getType (  ) ;^133^^^^^118^148^int type = ancestor.getType (  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  n  parent  removedNode  StartMarker  startMarker  int  type  
[BugLab_Wrong_Literal]^block.setIsSyntheticBlock ( false ) ;^147^^^^^132^162^block.setIsSyntheticBlock ( true ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  n  parent  removedNode  StartMarker  startMarker  int  type  
[BugLab_Variable_Misuse]^startMarker.ancestorBlock.addChildAfter ( removedNode, startMarker.ancestorBlockChild ) ;^148^149^^^^133^163^startMarker.ancestorBlock.addChildAfter ( block, startMarker.ancestorBlockChild ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  n  parent  removedNode  StartMarker  startMarker  int  type  
[BugLab_Variable_Misuse]^startMarker.ancestorBlock.addChildAfter ( block, parentChild ) ;^148^149^^^^133^163^startMarker.ancestorBlock.addChildAfter ( block, startMarker.ancestorBlockChild ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  n  parent  removedNode  StartMarker  startMarker  int  type  
[BugLab_Variable_Misuse]^startMarker.ancestorBlock.addChildAfter ( block, parent ) ;^148^149^^^^133^163^startMarker.ancestorBlock.addChildAfter ( block, startMarker.ancestorBlockChild ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  n  parent  removedNode  StartMarker  startMarker  int  type  
[BugLab_Argument_Swapping]^startMarker.ancestorBlock.addChildAfter ( block, startMarker.ancestorBlock.ancestorBlockChild ) ;^148^149^^^^133^163^startMarker.ancestorBlock.addChildAfter ( block, startMarker.ancestorBlockChild ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  n  parent  removedNode  StartMarker  startMarker  int  type  
[BugLab_Argument_Swapping]^startMarker.ancestorBlock.addChildAfter ( startMarker.ancestorBlockChild, block ) ;^148^149^^^^133^163^startMarker.ancestorBlock.addChildAfter ( block, startMarker.ancestorBlockChild ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  n  parent  removedNode  StartMarker  startMarker  int  type  
[BugLab_Argument_Swapping]^startMarker.ancestorBlock.addChildAfter ( block, startMarkerChild ) ;^148^149^^^^133^163^startMarker.ancestorBlock.addChildAfter ( block, startMarker.ancestorBlockChild ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  n  parent  removedNode  StartMarker  startMarker  int  type  
[BugLab_Argument_Swapping]^startMarker.ancestorBlock.addChildAfter ( block, startMarker.ancestorBlock ) ;^148^149^^^^133^163^startMarker.ancestorBlock.addChildAfter ( block, startMarker.ancestorBlockChild ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  n  parent  removedNode  StartMarker  startMarker  int  type  
[BugLab_Variable_Misuse]^removedNode = startMarker.ancestorBlock.removeChildAfter ( n ) ;^153^^^^^138^168^removedNode = startMarker.ancestorBlock.removeChildAfter ( block ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  n  parent  removedNode  StartMarker  startMarker  int  type  
[BugLab_Variable_Misuse]^removedNode = removedNode.removeChildAfter ( block ) ;^153^^^^^138^168^removedNode = startMarker.ancestorBlock.removeChildAfter ( block ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  n  parent  removedNode  StartMarker  startMarker  int  type  
[BugLab_Argument_Swapping]^removedNode = startMarker.ancestorBlock.ancestorBlock.removeChildAfter ( block ) ;^153^^^^^138^168^removedNode = startMarker.ancestorBlock.removeChildAfter ( block ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  n  parent  removedNode  StartMarker  startMarker  int  type  
[BugLab_Argument_Swapping]^removedNode = block.ancestorBlock.removeChildAfter ( startMarker ) ;^153^^^^^138^168^removedNode = startMarker.ancestorBlock.removeChildAfter ( block ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  n  parent  removedNode  StartMarker  startMarker  int  type  
[BugLab_Argument_Swapping]^removedNode = block.removeChildAfter ( startMarker.ancestorBlock ) ;^153^^^^^138^168^removedNode = startMarker.ancestorBlock.removeChildAfter ( block ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  n  parent  removedNode  StartMarker  startMarker  int  type  
[BugLab_Variable_Misuse]^removedNode = endMarkerAncestorBlockChild.removeChildAfter ( block ) ;^153^^^^^138^168^removedNode = startMarker.ancestorBlock.removeChildAfter ( block ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  n  parent  removedNode  StartMarker  startMarker  int  type  
[BugLab_Variable_Misuse]^block.addChildToBack ( parent ) ;^154^^^^^139^169^block.addChildToBack ( removedNode ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  n  parent  removedNode  StartMarker  startMarker  int  type  
