[buglab_swap_variables]^NodeTraversal.traverse ( root, compiler, new Callback (  )  ) ;^86^^^^^85^92^NodeTraversal.traverse ( compiler, root, new Callback (  )  ) ;^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestorBlock  ancestorBlockChild  externs  n  node  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  
[buglab_swap_variables]^NodeTraversal.traverse ( compiler,  new Callback (  )  ) ;^86^^^^^85^92^NodeTraversal.traverse ( compiler, root, new Callback (  )  ) ;^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestorBlock  ancestorBlockChild  externs  n  node  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  
[buglab_swap_variables]^NodeTraversal.traverse (  root, new Callback (  )  ) ;^86^^^^^85^92^NodeTraversal.traverse ( compiler, root, new Callback (  )  ) ;^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestorBlock  ancestorBlockChild  externs  n  node  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  
[buglab_swap_variables]^compiler.report ( JSError.make ( startMarker.node.sourceName, startMarker, UNMATCHED_START_MARKER, startMarkerName )  ) ;^89^90^^^^85^92^compiler.report ( JSError.make ( startMarker.sourceName, startMarker.node, UNMATCHED_START_MARKER, startMarkerName )  ) ;^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestorBlock  ancestorBlockChild  externs  n  node  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  
[buglab_swap_variables]^compiler.report ( JSError.make ( startMarker.sourceName.node, UNMATCHED_START_MARKER, startMarkerName )  ) ;^89^90^^^^85^92^compiler.report ( JSError.make ( startMarker.sourceName, startMarker.node, UNMATCHED_START_MARKER, startMarkerName )  ) ;^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestorBlock  ancestorBlockChild  externs  n  node  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  
[buglab_swap_variables]^compiler.report ( JSError.make ( startMarkerName, startMarker.node, UNMATCHED_START_MARKER, startMarker.sourceName )  ) ;^89^90^^^^85^92^compiler.report ( JSError.make ( startMarker.sourceName, startMarker.node, UNMATCHED_START_MARKER, startMarkerName )  ) ;^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestorBlock  ancestorBlockChild  externs  n  node  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  
[buglab_swap_variables]^compiler.report ( JSError.make (  startMarker.node, UNMATCHED_START_MARKER, startMarkerName )  ) ;^89^90^^^^85^92^compiler.report ( JSError.make ( startMarker.sourceName, startMarker.node, UNMATCHED_START_MARKER, startMarkerName )  ) ;^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestorBlock  ancestorBlockChild  externs  n  node  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  
[buglab_swap_variables]^compiler.report ( JSError.make ( startMarker.sourceName, UNMATCHED_START_MARKER, startMarker.node, startMarkerName )  ) ;^89^90^^^^85^92^compiler.report ( JSError.make ( startMarker.sourceName, startMarker.node, UNMATCHED_START_MARKER, startMarkerName )  ) ;^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestorBlock  ancestorBlockChild  externs  n  node  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  
[buglab_swap_variables]^compiler.report ( JSError.make ( startMarker.sourceName,  UNMATCHED_START_MARKER, startMarkerName )  ) ;^89^90^^^^85^92^compiler.report ( JSError.make ( startMarker.sourceName, startMarker.node, UNMATCHED_START_MARKER, startMarkerName )  ) ;^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestorBlock  ancestorBlockChild  externs  n  node  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  
[buglab_swap_variables]^compiler.report ( JSError.make ( UNMATCHED_START_MARKER.sourceName, startMarker.node, startMarker, startMarkerName )  ) ;^89^90^^^^85^92^compiler.report ( JSError.make ( startMarker.sourceName, startMarker.node, UNMATCHED_START_MARKER, startMarkerName )  ) ;^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestorBlock  ancestorBlockChild  externs  n  node  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  
[buglab_swap_variables]^compiler.report ( JSError.make ( startMarker.sourceName, startMarker.node,  startMarkerName )  ) ;^89^90^^^^85^92^compiler.report ( JSError.make ( startMarker.sourceName, startMarker.node, UNMATCHED_START_MARKER, startMarkerName )  ) ;^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestorBlock  ancestorBlockChild  externs  n  node  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  
[buglab_swap_variables]^compiler.report ( JSError.make ( startMarker.sourceName, startMarker.node, UNMATCHED_START_MARKER )  ) ;^89^90^^^^85^92^compiler.report ( JSError.make ( startMarker.sourceName, startMarker.node, UNMATCHED_START_MARKER, startMarkerName )  ) ;^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestorBlock  ancestorBlockChild  externs  n  node  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  
[buglab_swap_variables]^compiler.report ( JSError.make ( startMarker.sourceName.sourceName, startMarker.node, UNMATCHED_START_MARKER, startMarkerName )  ) ;^89^90^^^^85^92^compiler.report ( JSError.make ( startMarker.sourceName, startMarker.node, UNMATCHED_START_MARKER, startMarkerName )  ) ;^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestorBlock  ancestorBlockChild  externs  n  node  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  
[buglab_swap_variables]^compiler.report ( JSError.make ( startMarker.sourceName, startMarker.node, startMarkerName, UNMATCHED_START_MARKER )  ) ;^89^90^^^^85^92^compiler.report ( JSError.make ( startMarker.sourceName, startMarker.node, UNMATCHED_START_MARKER, startMarkerName )  ) ;^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestorBlock  ancestorBlockChild  externs  n  node  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  
[buglab_swap_variables]^startMarkerStack.push ( new StartMarker ( ancestorBlock.getSourceName (  ) , n, tChild, ancestorBlock )  ) ;^115^116^^^^100^130^startMarkerStack.push ( new StartMarker ( t.getSourceName (  ) , n, ancestorBlockChild, ancestorBlock )  ) ;^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  int  type  
[buglab_swap_variables]^startMarkerStack.push ( ancestorBlockew StartMarker ( t.getSourceName (  ) , n, nChild, ancestorBlock )  ) ;^115^116^^^^100^130^startMarkerStack.push ( new StartMarker ( t.getSourceName (  ) , n, ancestorBlockChild, ancestorBlock )  ) ;^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  int  type  
[buglab_swap_variables]^startMarkerStack.push ( new StartMarker ( t.getSourceName (  ) ,  ancestorBlockChild, ancestorBlock )  ) ;^115^116^^^^100^130^startMarkerStack.push ( new StartMarker ( t.getSourceName (  ) , n, ancestorBlockChild, ancestorBlock )  ) ;^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  int  type  
[buglab_swap_variables]^startMarkerStack.push ( new StartMarker ( t.getSourceName (  ) , n, ancestorBlock, ancestorBlockChild )  ) ;^115^116^^^^100^130^startMarkerStack.push ( new StartMarker ( t.getSourceName (  ) , n, ancestorBlockChild, ancestorBlock )  ) ;^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  int  type  
[buglab_swap_variables]^startMarkerStack.push ( new StartMarker ( t.getSourceName (  ) , n,  ancestorBlock )  ) ;^115^116^^^^100^130^startMarkerStack.push ( new StartMarker ( t.getSourceName (  ) , n, ancestorBlockChild, ancestorBlock )  ) ;^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  int  type  
[buglab_swap_variables]^startMarkerStack.push ( new StartMarker ( t.getSourceName (  ) , nChild, ancestorBlock )  ) ;^115^116^^^^100^130^startMarkerStack.push ( new StartMarker ( t.getSourceName (  ) , n, ancestorBlockChild, ancestorBlock )  ) ;^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  int  type  
[buglab_swap_variables]^startMarkerStack.push ( ancestorBlockChildew StartMarker ( t.getSourceName (  ) , n, n, ancestorBlock )  ) ;^115^116^^^^100^130^startMarkerStack.push ( new StartMarker ( t.getSourceName (  ) , n, ancestorBlockChild, ancestorBlock )  ) ;^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  int  type  
[buglab_swap_variables]^startMarkerStack.push ( new StartMarker ( ancestorBlockChild.getSourceName (  ) , n, t, ancestorBlock )  ) ;^115^116^^^^100^130^startMarkerStack.push ( new StartMarker ( t.getSourceName (  ) , n, ancestorBlockChild, ancestorBlock )  ) ;^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  int  type  
[buglab_swap_variables]^if  ( n.equals ( startMarkerName.getString (  )  )  )  {^101^^^^^86^116^if  ( startMarkerName.equals ( n.getString (  )  )  )  {^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  int  type  
[buglab_swap_variables]^startMarkerStack.push ( new StartMarker ( t.getSourceName (  ) , n, ancestorBlockChildChild, ancestorBlock )  ) ;^115^116^^^^100^130^startMarkerStack.push ( new StartMarker ( t.getSourceName (  ) , n, ancestorBlockChild, ancestorBlock )  ) ;^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  int  type  
[buglab_swap_variables]^compiler.report ( JSError.make ( UNMATCHED_END_MARKER, n, t, startMarkerName, endMarkerName )  ) ;^124^125^^^^109^139^compiler.report ( JSError.make ( t, n, UNMATCHED_END_MARKER, startMarkerName, endMarkerName )  ) ;^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  int  type  
[buglab_swap_variables]^compiler.report ( JSError.make (  n, UNMATCHED_END_MARKER, startMarkerName, endMarkerName )  ) ;^124^125^^^^109^139^compiler.report ( JSError.make ( t, n, UNMATCHED_END_MARKER, startMarkerName, endMarkerName )  ) ;^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  int  type  
[buglab_swap_variables]^compiler.report ( JSError.make ( t,  UNMATCHED_END_MARKER, startMarkerName, endMarkerName )  ) ;^124^125^^^^109^139^compiler.report ( JSError.make ( t, n, UNMATCHED_END_MARKER, startMarkerName, endMarkerName )  ) ;^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  int  type  
[buglab_swap_variables]^compiler.report ( JSError.make ( t, UNMATCHED_END_MARKER, n, startMarkerName, endMarkerName )  ) ;^124^125^^^^109^139^compiler.report ( JSError.make ( t, n, UNMATCHED_END_MARKER, startMarkerName, endMarkerName )  ) ;^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  int  type  
[buglab_swap_variables]^compiler.report ( JSError.make ( t, n,  startMarkerName, endMarkerName )  ) ;^124^125^^^^109^139^compiler.report ( JSError.make ( t, n, UNMATCHED_END_MARKER, startMarkerName, endMarkerName )  ) ;^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  int  type  
[buglab_swap_variables]^compiler.report ( JSError.make ( t, n, startMarkerName, UNMATCHED_END_MARKER, endMarkerName )  ) ;^124^125^^^^109^139^compiler.report ( JSError.make ( t, n, UNMATCHED_END_MARKER, startMarkerName, endMarkerName )  ) ;^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  int  type  
[buglab_swap_variables]^compiler.report ( JSError.make ( t, n, UNMATCHED_END_MARKER,  endMarkerName )  ) ;^124^125^^^^109^139^compiler.report ( JSError.make ( t, n, UNMATCHED_END_MARKER, startMarkerName, endMarkerName )  ) ;^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  int  type  
[buglab_swap_variables]^compiler.report ( JSError.make ( t, n, UNMATCHED_END_MARKER, endMarkerName, startMarkerName )  ) ;^124^125^^^^109^139^compiler.report ( JSError.make ( t, n, UNMATCHED_END_MARKER, startMarkerName, endMarkerName )  ) ;^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  int  type  
[buglab_swap_variables]^compiler.report ( JSError.make ( t, n, UNMATCHED_END_MARKER, startMarkerName )  ) ;^124^125^^^^109^139^compiler.report ( JSError.make ( t, n, UNMATCHED_END_MARKER, startMarkerName, endMarkerName )  ) ;^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  int  type  
[buglab_swap_variables]^compiler.report ( JSError.make ( n, t, UNMATCHED_END_MARKER, startMarkerName, endMarkerName )  ) ;^124^125^^^^109^139^compiler.report ( JSError.make ( t, n, UNMATCHED_END_MARKER, startMarkerName, endMarkerName )  ) ;^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  int  type  
[buglab_swap_variables]^compiler.report ( JSError.make ( t, n, endMarkerName, startMarkerName, UNMATCHED_END_MARKER )  ) ;^124^125^^^^109^139^compiler.report ( JSError.make ( t, n, UNMATCHED_END_MARKER, startMarkerName, endMarkerName )  ) ;^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  int  type  
[buglab_swap_variables]^compiler.report ( JSError.make ( startMarkerName, n, UNMATCHED_END_MARKER, t, endMarkerName )  ) ;^124^125^^^^109^139^compiler.report ( JSError.make ( t, n, UNMATCHED_END_MARKER, startMarkerName, endMarkerName )  ) ;^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  int  type  
[buglab_swap_variables]^if  ( typeype == Token.SCRIPT || t == Token.BLOCK )  {^134^^^^^119^149^if  ( type == Token.SCRIPT || type == Token.BLOCK )  {^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  int  type  
[buglab_swap_variables]^if  ( startMarker.ancestorBlock != ancestor )  {^135^^^^^120^150^if  ( ancestor != startMarker.ancestorBlock )  {^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  int  type  
[buglab_swap_variables]^if  ( startMarker != ancestor.ancestorBlock )  {^135^^^^^120^150^if  ( ancestor != startMarker.ancestorBlock )  {^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  int  type  
[buglab_swap_variables]^compiler.report ( JSError.make ( startMarkerName, n, UNMATCHED_END_MARKER, t, endMarkerName )  ) ;^137^138^^^^122^152^compiler.report ( JSError.make ( t, n, UNMATCHED_END_MARKER, startMarkerName, endMarkerName )  ) ;^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  int  type  
[buglab_swap_variables]^compiler.report ( JSError.make (  n, UNMATCHED_END_MARKER, startMarkerName, endMarkerName )  ) ;^137^138^^^^122^152^compiler.report ( JSError.make ( t, n, UNMATCHED_END_MARKER, startMarkerName, endMarkerName )  ) ;^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  int  type  
[buglab_swap_variables]^compiler.report ( JSError.make ( t, endMarkerName, UNMATCHED_END_MARKER, startMarkerName, n )  ) ;^137^138^^^^122^152^compiler.report ( JSError.make ( t, n, UNMATCHED_END_MARKER, startMarkerName, endMarkerName )  ) ;^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  int  type  
[buglab_swap_variables]^compiler.report ( JSError.make ( t,  UNMATCHED_END_MARKER, startMarkerName, endMarkerName )  ) ;^137^138^^^^122^152^compiler.report ( JSError.make ( t, n, UNMATCHED_END_MARKER, startMarkerName, endMarkerName )  ) ;^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  int  type  
[buglab_swap_variables]^compiler.report ( JSError.make ( t, n, endMarkerName, startMarkerName, UNMATCHED_END_MARKER )  ) ;^137^138^^^^122^152^compiler.report ( JSError.make ( t, n, UNMATCHED_END_MARKER, startMarkerName, endMarkerName )  ) ;^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  int  type  
[buglab_swap_variables]^compiler.report ( JSError.make ( t, n,  startMarkerName, endMarkerName )  ) ;^137^138^^^^122^152^compiler.report ( JSError.make ( t, n, UNMATCHED_END_MARKER, startMarkerName, endMarkerName )  ) ;^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  int  type  
[buglab_swap_variables]^compiler.report ( JSError.make ( t, n, UNMATCHED_END_MARKER, endMarkerName, startMarkerName )  ) ;^137^138^^^^122^152^compiler.report ( JSError.make ( t, n, UNMATCHED_END_MARKER, startMarkerName, endMarkerName )  ) ;^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  int  type  
[buglab_swap_variables]^compiler.report ( JSError.make ( t, n, UNMATCHED_END_MARKER,  endMarkerName )  ) ;^137^138^^^^122^152^compiler.report ( JSError.make ( t, n, UNMATCHED_END_MARKER, startMarkerName, endMarkerName )  ) ;^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  int  type  
[buglab_swap_variables]^compiler.report ( JSError.make ( t, n, UNMATCHED_END_MARKER, startMarkerName )  ) ;^137^138^^^^122^152^compiler.report ( JSError.make ( t, n, UNMATCHED_END_MARKER, startMarkerName, endMarkerName )  ) ;^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  int  type  
[buglab_swap_variables]^compiler.report ( JSError.make ( t, startMarkerName, UNMATCHED_END_MARKER, n, endMarkerName )  ) ;^137^138^^^^122^152^compiler.report ( JSError.make ( t, n, UNMATCHED_END_MARKER, startMarkerName, endMarkerName )  ) ;^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  int  type  
[buglab_swap_variables]^compiler.report ( JSError.make ( t, UNMATCHED_END_MARKER, n, startMarkerName, endMarkerName )  ) ;^137^138^^^^122^152^compiler.report ( JSError.make ( t, n, UNMATCHED_END_MARKER, startMarkerName, endMarkerName )  ) ;^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  int  type  
[buglab_swap_variables]^compiler.report ( JSError.make ( UNMATCHED_END_MARKER, n, t, startMarkerName, endMarkerName )  ) ;^137^138^^^^122^152^compiler.report ( JSError.make ( t, n, UNMATCHED_END_MARKER, startMarkerName, endMarkerName )  ) ;^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  int  type  
[buglab_swap_variables]^compiler.report ( JSError.make ( t, n, startMarkerName, UNMATCHED_END_MARKER, endMarkerName )  ) ;^137^138^^^^122^152^compiler.report ( JSError.make ( t, n, UNMATCHED_END_MARKER, startMarkerName, endMarkerName )  ) ;^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  int  type  
[buglab_swap_variables]^compiler.report ( JSError.make ( n, t, UNMATCHED_END_MARKER, startMarkerName, endMarkerName )  ) ;^137^138^^^^122^152^compiler.report ( JSError.make ( t, n, UNMATCHED_END_MARKER, startMarkerName, endMarkerName )  ) ;^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  int  type  
[buglab_swap_variables]^compiler.report ( JSError.make ( endMarkerName, n, UNMATCHED_END_MARKER, startMarkerName, t )  ) ;^137^138^^^^122^152^compiler.report ( JSError.make ( t, n, UNMATCHED_END_MARKER, startMarkerName, endMarkerName )  ) ;^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  int  type  
[buglab_swap_variables]^startMarker.ancestorBlock.addChildAfter ( block, startMarker.ancestorBlock.ancestorBlockChild ) ;^148^149^^^^133^163^startMarker.ancestorBlock.addChildAfter ( block, startMarker.ancestorBlockChild ) ;^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  int  type  
[buglab_swap_variables]^startMarker.ancestorBlock.addChildAfter ( block.ancestorBlockChild ) ;^148^149^^^^133^163^startMarker.ancestorBlock.addChildAfter ( block, startMarker.ancestorBlockChild ) ;^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  int  type  
[buglab_swap_variables]^startMarker.ancestorBlock.addChildAfter ( startMarker.ancestorBlockChild, block ) ;^148^149^^^^133^163^startMarker.ancestorBlock.addChildAfter ( block, startMarker.ancestorBlockChild ) ;^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  int  type  
[buglab_swap_variables]^startMarker.ancestorBlock.addChildAfter (  startMarker.ancestorBlockChild ) ;^148^149^^^^133^163^startMarker.ancestorBlock.addChildAfter ( block, startMarker.ancestorBlockChild ) ;^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  int  type  
[buglab_swap_variables]^startMarker.ancestorBlock.addChildAfter ( startMarker.ancestorBlock, blockChild ) ;^148^149^^^^133^163^startMarker.ancestorBlock.addChildAfter ( block, startMarker.ancestorBlockChild ) ;^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  int  type  
[buglab_swap_variables]^startMarker.ancestorBlock.addChildAfter ( blockChild ) ;^148^149^^^^133^163^startMarker.ancestorBlock.addChildAfter ( block, startMarker.ancestorBlockChild ) ;^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  int  type  
[buglab_swap_variables]^startMarker.ancestorBlock.addChildAfter ( block ) ;^148^149^^^^133^163^startMarker.ancestorBlock.addChildAfter ( block, startMarker.ancestorBlockChild ) ;^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  int  type  
[buglab_swap_variables]^removedNode = startMarker.ancestorBlock.ancestorBlock.removeChildAfter ( block ) ;^153^^^^^138^168^removedNode = startMarker.ancestorBlock.removeChildAfter ( block ) ;^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  int  type  
[buglab_swap_variables]^removedNode = block.removeChildAfter ( startMarker.ancestorBlock ) ;^153^^^^^138^168^removedNode = startMarker.ancestorBlock.removeChildAfter ( block ) ;^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  int  type  
[buglab_swap_variables]^removedNode = startMarker.removeChildAfter ( block ) ;^153^^^^^138^168^removedNode = startMarker.ancestorBlock.removeChildAfter ( block ) ;^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  int  type  
[buglab_swap_variables]^if  ( parent.getType (  )  != Token.NAME || n.getType (  )  != Token.CALL )  {^97^^^^^82^112^if  ( n.getType (  )  != Token.NAME || parent.getType (  )  != Token.CALL )  {^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  n  parent  removedNode  StartMarker  startMarker  int  type  
[buglab_swap_variables]^startMarkerStack.push ( tew StartMarker ( n.getSourceName (  ) , n, ancestorBlockChild, ancestorBlock )  ) ;^115^116^^^^100^130^startMarkerStack.push ( new StartMarker ( t.getSourceName (  ) , n, ancestorBlockChild, ancestorBlock )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  n  parent  removedNode  StartMarker  startMarker  int  type  
[buglab_swap_variables]^startMarkerStack.push ( ancestorBlockChildew StartMarker ( t.getSourceName (  ) , n, n, ancestorBlock )  ) ;^115^116^^^^100^130^startMarkerStack.push ( new StartMarker ( t.getSourceName (  ) , n, ancestorBlockChild, ancestorBlock )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  n  parent  removedNode  StartMarker  startMarker  int  type  
[buglab_swap_variables]^startMarkerStack.push ( new StartMarker ( t.getSourceName (  ) ,  ancestorBlockChild, ancestorBlock )  ) ;^115^116^^^^100^130^startMarkerStack.push ( new StartMarker ( t.getSourceName (  ) , n, ancestorBlockChild, ancestorBlock )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  n  parent  removedNode  StartMarker  startMarker  int  type  
[buglab_swap_variables]^startMarkerStack.push ( new StartMarker ( t.getSourceName (  ) , n, ancestorBlock, ancestorBlockChild )  ) ;^115^116^^^^100^130^startMarkerStack.push ( new StartMarker ( t.getSourceName (  ) , n, ancestorBlockChild, ancestorBlock )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  n  parent  removedNode  StartMarker  startMarker  int  type  
[buglab_swap_variables]^startMarkerStack.push ( new StartMarker ( t.getSourceName (  ) , n,  ancestorBlock )  ) ;^115^116^^^^100^130^startMarkerStack.push ( new StartMarker ( t.getSourceName (  ) , n, ancestorBlockChild, ancestorBlock )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  n  parent  removedNode  StartMarker  startMarker  int  type  
[buglab_swap_variables]^startMarkerStack.push ( new StartMarker ( t.getSourceName (  ) , n, ancestorBlockChildChild, ancestorBlock )  ) ;^115^116^^^^100^130^startMarkerStack.push ( new StartMarker ( t.getSourceName (  ) , n, ancestorBlockChild, ancestorBlock )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  n  parent  removedNode  StartMarker  startMarker  int  type  
[buglab_swap_variables]^startMarkerStack.push ( new StartMarker ( t.getSourceName (  ) , nChild, ancestorBlock )  ) ;^115^116^^^^100^130^startMarkerStack.push ( new StartMarker ( t.getSourceName (  ) , n, ancestorBlockChild, ancestorBlock )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  n  parent  removedNode  StartMarker  startMarker  int  type  
[buglab_swap_variables]^startMarkerStack.push ( new StartMarker ( ancestorBlockChild.getSourceName (  ) , n, t, ancestorBlock )  ) ;^115^116^^^^100^130^startMarkerStack.push ( new StartMarker ( t.getSourceName (  ) , n, ancestorBlockChild, ancestorBlock )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  n  parent  removedNode  StartMarker  startMarker  int  type  
[buglab_swap_variables]^startMarkerStack.push ( ancestorBlockew StartMarker ( t.getSourceName (  ) , n, nChild, ancestorBlock )  ) ;^115^116^^^^100^130^startMarkerStack.push ( new StartMarker ( t.getSourceName (  ) , n, ancestorBlockChild, ancestorBlock )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  n  parent  removedNode  StartMarker  startMarker  int  type  
[buglab_swap_variables]^if  ( n.equals ( startMarkerName.getString (  )  )  )  {^101^^^^^86^116^if  ( startMarkerName.equals ( n.getString (  )  )  )  {^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  n  parent  removedNode  StartMarker  startMarker  int  type  
[buglab_swap_variables]^compiler.report ( JSError.make ( startMarkerName, n, UNMATCHED_END_MARKER, t, endMarkerName )  ) ;^124^125^^^^109^139^compiler.report ( JSError.make ( t, n, UNMATCHED_END_MARKER, startMarkerName, endMarkerName )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  n  parent  removedNode  StartMarker  startMarker  int  type  
[buglab_swap_variables]^compiler.report ( JSError.make (  n, UNMATCHED_END_MARKER, startMarkerName, endMarkerName )  ) ;^124^125^^^^109^139^compiler.report ( JSError.make ( t, n, UNMATCHED_END_MARKER, startMarkerName, endMarkerName )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  n  parent  removedNode  StartMarker  startMarker  int  type  
[buglab_swap_variables]^compiler.report ( JSError.make ( t, UNMATCHED_END_MARKER, n, startMarkerName, endMarkerName )  ) ;^124^125^^^^109^139^compiler.report ( JSError.make ( t, n, UNMATCHED_END_MARKER, startMarkerName, endMarkerName )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  n  parent  removedNode  StartMarker  startMarker  int  type  
[buglab_swap_variables]^compiler.report ( JSError.make ( t,  UNMATCHED_END_MARKER, startMarkerName, endMarkerName )  ) ;^124^125^^^^109^139^compiler.report ( JSError.make ( t, n, UNMATCHED_END_MARKER, startMarkerName, endMarkerName )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  n  parent  removedNode  StartMarker  startMarker  int  type  
[buglab_swap_variables]^compiler.report ( JSError.make ( t, n,  startMarkerName, endMarkerName )  ) ;^124^125^^^^109^139^compiler.report ( JSError.make ( t, n, UNMATCHED_END_MARKER, startMarkerName, endMarkerName )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  n  parent  removedNode  StartMarker  startMarker  int  type  
[buglab_swap_variables]^compiler.report ( JSError.make ( t, n, startMarkerName, UNMATCHED_END_MARKER, endMarkerName )  ) ;^124^125^^^^109^139^compiler.report ( JSError.make ( t, n, UNMATCHED_END_MARKER, startMarkerName, endMarkerName )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  n  parent  removedNode  StartMarker  startMarker  int  type  
[buglab_swap_variables]^compiler.report ( JSError.make ( t, n, UNMATCHED_END_MARKER,  endMarkerName )  ) ;^124^125^^^^109^139^compiler.report ( JSError.make ( t, n, UNMATCHED_END_MARKER, startMarkerName, endMarkerName )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  n  parent  removedNode  StartMarker  startMarker  int  type  
[buglab_swap_variables]^compiler.report ( JSError.make ( endMarkerName, n, UNMATCHED_END_MARKER, startMarkerName, t )  ) ;^124^125^^^^109^139^compiler.report ( JSError.make ( t, n, UNMATCHED_END_MARKER, startMarkerName, endMarkerName )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  n  parent  removedNode  StartMarker  startMarker  int  type  
[buglab_swap_variables]^compiler.report ( JSError.make ( t, n, UNMATCHED_END_MARKER, startMarkerName )  ) ;^124^125^^^^109^139^compiler.report ( JSError.make ( t, n, UNMATCHED_END_MARKER, startMarkerName, endMarkerName )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  n  parent  removedNode  StartMarker  startMarker  int  type  
[buglab_swap_variables]^compiler.report ( JSError.make ( t, startMarkerName, UNMATCHED_END_MARKER, n, endMarkerName )  ) ;^124^125^^^^109^139^compiler.report ( JSError.make ( t, n, UNMATCHED_END_MARKER, startMarkerName, endMarkerName )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  n  parent  removedNode  StartMarker  startMarker  int  type  
[buglab_swap_variables]^compiler.report ( JSError.make ( UNMATCHED_END_MARKER, n, t, startMarkerName, endMarkerName )  ) ;^124^125^^^^109^139^compiler.report ( JSError.make ( t, n, UNMATCHED_END_MARKER, startMarkerName, endMarkerName )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  n  parent  removedNode  StartMarker  startMarker  int  type  
[buglab_swap_variables]^compiler.report ( JSError.make ( t, n, UNMATCHED_END_MARKER, endMarkerName, startMarkerName )  ) ;^124^125^^^^109^139^compiler.report ( JSError.make ( t, n, UNMATCHED_END_MARKER, startMarkerName, endMarkerName )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  n  parent  removedNode  StartMarker  startMarker  int  type  
[buglab_swap_variables]^compiler.report ( JSError.make ( n, t, UNMATCHED_END_MARKER, startMarkerName, endMarkerName )  ) ;^124^125^^^^109^139^compiler.report ( JSError.make ( t, n, UNMATCHED_END_MARKER, startMarkerName, endMarkerName )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  n  parent  removedNode  StartMarker  startMarker  int  type  
[buglab_swap_variables]^compiler.report ( JSError.make ( t, n, endMarkerName, startMarkerName, UNMATCHED_END_MARKER )  ) ;^124^125^^^^109^139^compiler.report ( JSError.make ( t, n, UNMATCHED_END_MARKER, startMarkerName, endMarkerName )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  n  parent  removedNode  StartMarker  startMarker  int  type  
[buglab_swap_variables]^compiler.report ( JSError.make ( t, endMarkerName, UNMATCHED_END_MARKER, startMarkerName, n )  ) ;^124^125^^^^109^139^compiler.report ( JSError.make ( t, n, UNMATCHED_END_MARKER, startMarkerName, endMarkerName )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  n  parent  removedNode  StartMarker  startMarker  int  type  
[buglab_swap_variables]^if  ( startMarker != ancestor.ancestorBlock )  {^135^^^^^120^150^if  ( ancestor != startMarker.ancestorBlock )  {^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  n  parent  removedNode  StartMarker  startMarker  int  type  
[buglab_swap_variables]^if  ( ancestor != startMarker.ancestorBlock.ancestorBlock )  {^135^^^^^120^150^if  ( ancestor != startMarker.ancestorBlock )  {^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  n  parent  removedNode  StartMarker  startMarker  int  type  
[buglab_swap_variables]^compiler.report ( JSError.make ( n, t, UNMATCHED_END_MARKER, startMarkerName, endMarkerName )  ) ;^137^138^^^^122^152^compiler.report ( JSError.make ( t, n, UNMATCHED_END_MARKER, startMarkerName, endMarkerName )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  n  parent  removedNode  StartMarker  startMarker  int  type  
[buglab_swap_variables]^compiler.report ( JSError.make (  n, UNMATCHED_END_MARKER, startMarkerName, endMarkerName )  ) ;^137^138^^^^122^152^compiler.report ( JSError.make ( t, n, UNMATCHED_END_MARKER, startMarkerName, endMarkerName )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  n  parent  removedNode  StartMarker  startMarker  int  type  
[buglab_swap_variables]^compiler.report ( JSError.make ( t, endMarkerName, UNMATCHED_END_MARKER, startMarkerName, n )  ) ;^137^138^^^^122^152^compiler.report ( JSError.make ( t, n, UNMATCHED_END_MARKER, startMarkerName, endMarkerName )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  n  parent  removedNode  StartMarker  startMarker  int  type  
[buglab_swap_variables]^compiler.report ( JSError.make ( t,  UNMATCHED_END_MARKER, startMarkerName, endMarkerName )  ) ;^137^138^^^^122^152^compiler.report ( JSError.make ( t, n, UNMATCHED_END_MARKER, startMarkerName, endMarkerName )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  n  parent  removedNode  StartMarker  startMarker  int  type  
[buglab_swap_variables]^compiler.report ( JSError.make ( t, n, endMarkerName, startMarkerName, UNMATCHED_END_MARKER )  ) ;^137^138^^^^122^152^compiler.report ( JSError.make ( t, n, UNMATCHED_END_MARKER, startMarkerName, endMarkerName )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  n  parent  removedNode  StartMarker  startMarker  int  type  
[buglab_swap_variables]^compiler.report ( JSError.make ( t, n,  startMarkerName, endMarkerName )  ) ;^137^138^^^^122^152^compiler.report ( JSError.make ( t, n, UNMATCHED_END_MARKER, startMarkerName, endMarkerName )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  n  parent  removedNode  StartMarker  startMarker  int  type  
[buglab_swap_variables]^compiler.report ( JSError.make ( startMarkerName, n, UNMATCHED_END_MARKER, t, endMarkerName )  ) ;^137^138^^^^122^152^compiler.report ( JSError.make ( t, n, UNMATCHED_END_MARKER, startMarkerName, endMarkerName )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  n  parent  removedNode  StartMarker  startMarker  int  type  
[buglab_swap_variables]^compiler.report ( JSError.make ( t, n, UNMATCHED_END_MARKER,  endMarkerName )  ) ;^137^138^^^^122^152^compiler.report ( JSError.make ( t, n, UNMATCHED_END_MARKER, startMarkerName, endMarkerName )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  n  parent  removedNode  StartMarker  startMarker  int  type  
[buglab_swap_variables]^compiler.report ( JSError.make ( t, n, UNMATCHED_END_MARKER, endMarkerName, startMarkerName )  ) ;^137^138^^^^122^152^compiler.report ( JSError.make ( t, n, UNMATCHED_END_MARKER, startMarkerName, endMarkerName )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  n  parent  removedNode  StartMarker  startMarker  int  type  
[buglab_swap_variables]^compiler.report ( JSError.make ( t, n, UNMATCHED_END_MARKER, startMarkerName )  ) ;^137^138^^^^122^152^compiler.report ( JSError.make ( t, n, UNMATCHED_END_MARKER, startMarkerName, endMarkerName )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  n  parent  removedNode  StartMarker  startMarker  int  type  
[buglab_swap_variables]^compiler.report ( JSError.make ( t, startMarkerName, UNMATCHED_END_MARKER, n, endMarkerName )  ) ;^137^138^^^^122^152^compiler.report ( JSError.make ( t, n, UNMATCHED_END_MARKER, startMarkerName, endMarkerName )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  n  parent  removedNode  StartMarker  startMarker  int  type  
[buglab_swap_variables]^compiler.report ( JSError.make ( t, UNMATCHED_END_MARKER, n, startMarkerName, endMarkerName )  ) ;^137^138^^^^122^152^compiler.report ( JSError.make ( t, n, UNMATCHED_END_MARKER, startMarkerName, endMarkerName )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  n  parent  removedNode  StartMarker  startMarker  int  type  
[buglab_swap_variables]^compiler.report ( JSError.make ( t, n, startMarkerName, UNMATCHED_END_MARKER, endMarkerName )  ) ;^137^138^^^^122^152^compiler.report ( JSError.make ( t, n, UNMATCHED_END_MARKER, startMarkerName, endMarkerName )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  n  parent  removedNode  StartMarker  startMarker  int  type  
[buglab_swap_variables]^compiler.report ( JSError.make ( UNMATCHED_END_MARKER, n, t, startMarkerName, endMarkerName )  ) ;^137^138^^^^122^152^compiler.report ( JSError.make ( t, n, UNMATCHED_END_MARKER, startMarkerName, endMarkerName )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  n  parent  removedNode  StartMarker  startMarker  int  type  
[buglab_swap_variables]^if  ( startMarker.ancestorBlock != ancestor )  {^135^^^^^120^150^if  ( ancestor != startMarker.ancestorBlock )  {^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  n  parent  removedNode  StartMarker  startMarker  int  type  
[buglab_swap_variables]^compiler.report ( JSError.make ( endMarkerName, n, UNMATCHED_END_MARKER, startMarkerName, t )  ) ;^137^138^^^^122^152^compiler.report ( JSError.make ( t, n, UNMATCHED_END_MARKER, startMarkerName, endMarkerName )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  n  parent  removedNode  StartMarker  startMarker  int  type  
[buglab_swap_variables]^startMarker.ancestorBlock.addChildAfter ( block, startMarker.ancestorBlockChild.ancestorBlockChild ) ;^148^149^^^^133^163^startMarker.ancestorBlock.addChildAfter ( block, startMarker.ancestorBlockChild ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  n  parent  removedNode  StartMarker  startMarker  int  type  
[buglab_swap_variables]^startMarker.ancestorBlock.addChildAfter ( block.ancestorBlockChild ) ;^148^149^^^^133^163^startMarker.ancestorBlock.addChildAfter ( block, startMarker.ancestorBlockChild ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  n  parent  removedNode  StartMarker  startMarker  int  type  
[buglab_swap_variables]^startMarker.ancestorBlock.addChildAfter ( startMarker.ancestorBlock, blockChild ) ;^148^149^^^^133^163^startMarker.ancestorBlock.addChildAfter ( block, startMarker.ancestorBlockChild ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  n  parent  removedNode  StartMarker  startMarker  int  type  
[buglab_swap_variables]^startMarker.ancestorBlock.addChildAfter (  startMarker.ancestorBlockChild ) ;^148^149^^^^133^163^startMarker.ancestorBlock.addChildAfter ( block, startMarker.ancestorBlockChild ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  n  parent  removedNode  StartMarker  startMarker  int  type  
[buglab_swap_variables]^startMarker.ancestorBlock.addChildAfter ( blockChild ) ;^148^149^^^^133^163^startMarker.ancestorBlock.addChildAfter ( block, startMarker.ancestorBlockChild ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  n  parent  removedNode  StartMarker  startMarker  int  type  
[buglab_swap_variables]^startMarker.ancestorBlock.addChildAfter ( startMarker.ancestorBlockChild, block ) ;^148^149^^^^133^163^startMarker.ancestorBlock.addChildAfter ( block, startMarker.ancestorBlockChild ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  n  parent  removedNode  StartMarker  startMarker  int  type  
[buglab_swap_variables]^startMarker.ancestorBlock.addChildAfter ( block ) ;^148^149^^^^133^163^startMarker.ancestorBlock.addChildAfter ( block, startMarker.ancestorBlockChild ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  n  parent  removedNode  StartMarker  startMarker  int  type  
[buglab_swap_variables]^removedNode = block.ancestorBlock.removeChildAfter ( startMarker ) ;^153^^^^^138^168^removedNode = startMarker.ancestorBlock.removeChildAfter ( block ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  n  parent  removedNode  StartMarker  startMarker  int  type  
[buglab_swap_variables]^removedNode = block.removeChildAfter ( startMarker.ancestorBlock ) ;^153^^^^^138^168^removedNode = startMarker.ancestorBlock.removeChildAfter ( block ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  n  parent  removedNode  StartMarker  startMarker  int  type  
[buglab_swap_variables]^removedNode = startMarker.removeChildAfter ( block ) ;^153^^^^^138^168^removedNode = startMarker.ancestorBlock.removeChildAfter ( block ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  n  parent  removedNode  StartMarker  startMarker  int  type  
