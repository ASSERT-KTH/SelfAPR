[buglab_swap_variables]^GraphNode<Node, Branch> gNode = n.getControlFlowGraph (  ) .getNode ( t ) ;^55^^^^^54^76^GraphNode<Node, Branch> gNode = t.getControlFlowGraph (  ) .getNode ( n ) ;^[CLASS] CheckUnreachableCode  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNREACHABLE_CODE  CheckLevel  level  Node  n  parent  GraphNode  gNode  
[buglab_swap_variables]^compiler.report ( JSError.make ( level, n, t, UNREACHABLE_CODE )  ) ;^65^^^^^54^76^compiler.report ( JSError.make ( t, n, level, UNREACHABLE_CODE )  ) ;^[CLASS] CheckUnreachableCode  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNREACHABLE_CODE  CheckLevel  level  Node  n  parent  GraphNode  gNode  
[buglab_swap_variables]^compiler.report ( JSError.make (  n, level, UNREACHABLE_CODE )  ) ;^65^^^^^54^76^compiler.report ( JSError.make ( t, n, level, UNREACHABLE_CODE )  ) ;^[CLASS] CheckUnreachableCode  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNREACHABLE_CODE  CheckLevel  level  Node  n  parent  GraphNode  gNode  
[buglab_swap_variables]^compiler.report ( JSError.make ( t,  level, UNREACHABLE_CODE )  ) ;^65^^^^^54^76^compiler.report ( JSError.make ( t, n, level, UNREACHABLE_CODE )  ) ;^[CLASS] CheckUnreachableCode  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNREACHABLE_CODE  CheckLevel  level  Node  n  parent  GraphNode  gNode  
[buglab_swap_variables]^compiler.report ( JSError.make ( t, n,  UNREACHABLE_CODE )  ) ;^65^^^^^54^76^compiler.report ( JSError.make ( t, n, level, UNREACHABLE_CODE )  ) ;^[CLASS] CheckUnreachableCode  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNREACHABLE_CODE  CheckLevel  level  Node  n  parent  GraphNode  gNode  
[buglab_swap_variables]^compiler.report ( JSError.make ( UNREACHABLE_CODE, n, level, t )  ) ;^65^^^^^54^76^compiler.report ( JSError.make ( t, n, level, UNREACHABLE_CODE )  ) ;^[CLASS] CheckUnreachableCode  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNREACHABLE_CODE  CheckLevel  level  Node  n  parent  GraphNode  gNode  
[buglab_swap_variables]^compiler.report ( JSError.make ( t, n, level )  ) ;^65^^^^^54^76^compiler.report ( JSError.make ( t, n, level, UNREACHABLE_CODE )  ) ;^[CLASS] CheckUnreachableCode  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNREACHABLE_CODE  CheckLevel  level  Node  n  parent  GraphNode  gNode  
[buglab_swap_variables]^compiler.report ( JSError.make ( n, t, level, UNREACHABLE_CODE )  ) ;^65^^^^^54^76^compiler.report ( JSError.make ( t, n, level, UNREACHABLE_CODE )  ) ;^[CLASS] CheckUnreachableCode  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNREACHABLE_CODE  CheckLevel  level  Node  n  parent  GraphNode  gNode  
[buglab_swap_variables]^compiler.report ( JSError.make ( t, n, UNREACHABLE_CODE, level )  ) ;^65^^^^^54^76^compiler.report ( JSError.make ( t, n, level, UNREACHABLE_CODE )  ) ;^[CLASS] CheckUnreachableCode  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNREACHABLE_CODE  CheckLevel  level  Node  n  parent  GraphNode  gNode  
[buglab_swap_variables]^compiler.report ( JSError.make ( t, UNREACHABLE_CODE, level, n )  ) ;^65^^^^^54^76^compiler.report ( JSError.make ( t, n, level, UNREACHABLE_CODE )  ) ;^[CLASS] CheckUnreachableCode  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNREACHABLE_CODE  CheckLevel  level  Node  n  parent  GraphNode  gNode  
[buglab_swap_variables]^new GraphReachability<Node, ControlFlowGraph.Branch> ( n.getControlFlowGraph (  )  ) .recompute ( t ) ;^68^69^^^^54^76^new GraphReachability<Node, ControlFlowGraph.Branch> ( t.getControlFlowGraph (  )  ) .recompute ( n ) ;^[CLASS] CheckUnreachableCode  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNREACHABLE_CODE  CheckLevel  level  Node  n  parent  GraphNode  gNode  
[buglab_swap_variables]^compiler.report ( JSError.make ( t, level, n, UNREACHABLE_CODE )  ) ;^65^^^^^54^76^compiler.report ( JSError.make ( t, n, level, UNREACHABLE_CODE )  ) ;^[CLASS] CheckUnreachableCode  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNREACHABLE_CODE  CheckLevel  level  Node  n  parent  GraphNode  gNode  
