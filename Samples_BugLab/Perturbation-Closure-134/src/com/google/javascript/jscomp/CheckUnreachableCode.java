[BugLab_Variable_Misuse]^GraphNode<Node, Branch> gNode = t.getControlFlowGraph (  ) .getNode ( parent ) ;^55^^^^^54^76^GraphNode<Node, Branch> gNode = t.getControlFlowGraph (  ) .getNode ( n ) ;^[CLASS] CheckUnreachableCode  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNREACHABLE_CODE  CheckLevel  level  Node  n  parent  GraphNode  gNode  
[BugLab_Argument_Swapping]^GraphNode<Node, Branch> gNode = n.getControlFlowGraph (  ) .getNode ( t ) ;^55^^^^^54^76^GraphNode<Node, Branch> gNode = t.getControlFlowGraph (  ) .getNode ( n ) ;^[CLASS] CheckUnreachableCode  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNREACHABLE_CODE  CheckLevel  level  Node  n  parent  GraphNode  gNode  
[BugLab_Variable_Misuse]^if  ( 0 != null && gNode.getAnnotation (  )  != GraphReachability.REACHABLE )  {^56^^^^^54^76^if  ( gNode != null && gNode.getAnnotation (  )  != GraphReachability.REACHABLE )  {^[CLASS] CheckUnreachableCode  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNREACHABLE_CODE  CheckLevel  level  Node  n  parent  GraphNode  gNode  
[BugLab_Variable_Misuse]^if  ( gNode != parentull && gNode.getAnnotation (  )  != GraphReachability.REACHABLE )  {^56^^^^^54^76^if  ( gNode != null && gNode.getAnnotation (  )  != GraphReachability.REACHABLE )  {^[CLASS] CheckUnreachableCode  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNREACHABLE_CODE  CheckLevel  level  Node  n  parent  GraphNode  gNode  
[BugLab_Wrong_Operator]^if  ( gNode != null || gNode.getAnnotation (  )  != GraphReachability.REACHABLE )  {^56^^^^^54^76^if  ( gNode != null && gNode.getAnnotation (  )  != GraphReachability.REACHABLE )  {^[CLASS] CheckUnreachableCode  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNREACHABLE_CODE  CheckLevel  level  Node  n  parent  GraphNode  gNode  
[BugLab_Wrong_Operator]^if  ( gNode == null && gNode.getAnnotation (  )  != GraphReachability.REACHABLE )  {^56^^^^^54^76^if  ( gNode != null && gNode.getAnnotation (  )  != GraphReachability.REACHABLE )  {^[CLASS] CheckUnreachableCode  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNREACHABLE_CODE  CheckLevel  level  Node  n  parent  GraphNode  gNode  
[BugLab_Variable_Misuse]^if  ( parent.getLineno (  )  != -1 &&  n.getType (  )  != Token.EMPTY && n.getType (  )  != Token.BREAK )  {^62^63^64^^^54^76^if  ( n.getLineno (  )  != -1 &&  n.getType (  )  != Token.EMPTY && n.getType (  )  != Token.BREAK )  {^[CLASS] CheckUnreachableCode  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNREACHABLE_CODE  CheckLevel  level  Node  n  parent  GraphNode  gNode  
[BugLab_Wrong_Operator]^if  ( n.getLineno (  )  != -1 ||  n.getType (  )  != Token.EMPTY && n.getType (  )  != Token.BREAK )  {^62^63^64^^^54^76^if  ( n.getLineno (  )  != -1 &&  n.getType (  )  != Token.EMPTY && n.getType (  )  != Token.BREAK )  {^[CLASS] CheckUnreachableCode  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNREACHABLE_CODE  CheckLevel  level  Node  n  parent  GraphNode  gNode  
[BugLab_Wrong_Operator]^if  ( n.getLineno (  )  >= -1 &&  n.getType (  )  != Token.EMPTY && n.getType (  )  != Token.BREAK )  {^62^63^64^^^54^76^if  ( n.getLineno (  )  != -1 &&  n.getType (  )  != Token.EMPTY && n.getType (  )  != Token.BREAK )  {^[CLASS] CheckUnreachableCode  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNREACHABLE_CODE  CheckLevel  level  Node  n  parent  GraphNode  gNode  
[BugLab_Wrong_Operator]^if  ( n.getLineno (  )  == -1 &&  n.getType (  )  != Token.EMPTY && n.getType (  )  != Token.BREAK )  {^62^63^64^^^54^76^if  ( n.getLineno (  )  != -1 &&  n.getType (  )  != Token.EMPTY && n.getType (  )  != Token.BREAK )  {^[CLASS] CheckUnreachableCode  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNREACHABLE_CODE  CheckLevel  level  Node  n  parent  GraphNode  gNode  
[BugLab_Wrong_Literal]^return true;^72^^^^^54^76^return false;^[CLASS] CheckUnreachableCode  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNREACHABLE_CODE  CheckLevel  level  Node  n  parent  GraphNode  gNode  
[BugLab_Variable_Misuse]^compiler.report ( JSError.make ( t, parent, level, UNREACHABLE_CODE )  ) ;^65^^^^^54^76^compiler.report ( JSError.make ( t, n, level, UNREACHABLE_CODE )  ) ;^[CLASS] CheckUnreachableCode  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNREACHABLE_CODE  CheckLevel  level  Node  n  parent  GraphNode  gNode  
[BugLab_Argument_Swapping]^compiler.report ( JSError.make ( n, t, level, UNREACHABLE_CODE )  ) ;^65^^^^^54^76^compiler.report ( JSError.make ( t, n, level, UNREACHABLE_CODE )  ) ;^[CLASS] CheckUnreachableCode  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNREACHABLE_CODE  CheckLevel  level  Node  n  parent  GraphNode  gNode  
[BugLab_Argument_Swapping]^compiler.report ( JSError.make ( t, n, UNREACHABLE_CODE, level )  ) ;^65^^^^^54^76^compiler.report ( JSError.make ( t, n, level, UNREACHABLE_CODE )  ) ;^[CLASS] CheckUnreachableCode  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNREACHABLE_CODE  CheckLevel  level  Node  n  parent  GraphNode  gNode  
[BugLab_Argument_Swapping]^compiler.report ( JSError.make ( t, level, n, UNREACHABLE_CODE )  ) ;^65^^^^^54^76^compiler.report ( JSError.make ( t, n, level, UNREACHABLE_CODE )  ) ;^[CLASS] CheckUnreachableCode  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNREACHABLE_CODE  CheckLevel  level  Node  n  parent  GraphNode  gNode  
[BugLab_Argument_Swapping]^compiler.report ( JSError.make ( level, n, t, UNREACHABLE_CODE )  ) ;^65^^^^^54^76^compiler.report ( JSError.make ( t, n, level, UNREACHABLE_CODE )  ) ;^[CLASS] CheckUnreachableCode  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNREACHABLE_CODE  CheckLevel  level  Node  n  parent  GraphNode  gNode  
[BugLab_Argument_Swapping]^compiler.report ( JSError.make ( UNREACHABLE_CODE, n, level, t )  ) ;^65^^^^^54^76^compiler.report ( JSError.make ( t, n, level, UNREACHABLE_CODE )  ) ;^[CLASS] CheckUnreachableCode  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNREACHABLE_CODE  CheckLevel  level  Node  n  parent  GraphNode  gNode  
[BugLab_Variable_Misuse]^new GraphReachability<Node, ControlFlowGraph.Branch> ( t.getControlFlowGraph (  )  ) .recompute ( parent ) ;^68^69^^^^54^76^new GraphReachability<Node, ControlFlowGraph.Branch> ( t.getControlFlowGraph (  )  ) .recompute ( n ) ;^[CLASS] CheckUnreachableCode  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNREACHABLE_CODE  CheckLevel  level  Node  n  parent  GraphNode  gNode  
[BugLab_Argument_Swapping]^new GraphReachability<Node, ControlFlowGraph.Branch> ( n.getControlFlowGraph (  )  ) .recompute ( t ) ;^68^69^^^^54^76^new GraphReachability<Node, ControlFlowGraph.Branch> ( t.getControlFlowGraph (  )  ) .recompute ( n ) ;^[CLASS] CheckUnreachableCode  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNREACHABLE_CODE  CheckLevel  level  Node  n  parent  GraphNode  gNode  
[BugLab_Variable_Misuse]^n.getType (  )  != Token.EMPTY && parent.getType (  )  != Token.BREAK )  {^64^^^^^54^76^n.getType (  )  != Token.EMPTY && n.getType (  )  != Token.BREAK )  {^[CLASS] CheckUnreachableCode  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNREACHABLE_CODE  CheckLevel  level  Node  n  parent  GraphNode  gNode  
[BugLab_Argument_Swapping]^compiler.report ( JSError.make ( t, UNREACHABLE_CODE, level, n )  ) ;^65^^^^^54^76^compiler.report ( JSError.make ( t, n, level, UNREACHABLE_CODE )  ) ;^[CLASS] CheckUnreachableCode  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNREACHABLE_CODE  CheckLevel  level  Node  n  parent  GraphNode  gNode  
[BugLab_Wrong_Literal]^if  ( n.getLineno (  )  != -2 &&  n.getType (  )  != Token.EMPTY && n.getType (  )  != Token.BREAK )  {^62^63^64^^^54^76^if  ( n.getLineno (  )  != -1 &&  n.getType (  )  != Token.EMPTY && n.getType (  )  != Token.BREAK )  {^[CLASS] CheckUnreachableCode  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNREACHABLE_CODE  CheckLevel  level  Node  n  parent  GraphNode  gNode  
[BugLab_Variable_Misuse]^if  ( null != null && gNode.getAnnotation (  )  != GraphReachability.REACHABLE )  {^56^^^^^54^76^if  ( gNode != null && gNode.getAnnotation (  )  != GraphReachability.REACHABLE )  {^[CLASS] CheckUnreachableCode  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNREACHABLE_CODE  CheckLevel  level  Node  n  parent  GraphNode  gNode  
[BugLab_Wrong_Literal]^return false;^75^^^^^54^76^return true;^[CLASS] CheckUnreachableCode  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNREACHABLE_CODE  CheckLevel  level  Node  n  parent  GraphNode  gNode  
