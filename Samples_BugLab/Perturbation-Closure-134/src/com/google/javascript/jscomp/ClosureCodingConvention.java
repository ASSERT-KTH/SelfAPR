[buglab_swap_variables]^childCtor.defineDeclaredProperty ( "superClass_".getPrototype (  ) , false ) ;^53^54^^^^50^58^childCtor.defineDeclaredProperty ( "superClass_", parentCtor.getPrototype (  ) , false ) ;^[CLASS] ClosureCodingConvention  [METHOD] applySubclassRelationship [RETURN_TYPE] void   FunctionType parentCtor FunctionType childCtor SubclassType type [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  boolean  SubclassType  type  DiagnosticType  OBJECTLIT_EXPECTED  FunctionType  childCtor  parentCtor  
[buglab_swap_variables]^if  ( callName.getChildCount (  )  == 2 && callNode.getType (  )  == Token.GETPROP )  {^81^82^^^^66^96^if  ( callNode.getChildCount (  )  == 2 && callName.getType (  )  == Token.GETPROP )  {^[CLASS] ClosureCodingConvention  [METHOD] getClassesDefinedByCall [RETURN_TYPE] SubclassRelationship   Node callNode [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  boolean  SubclassType  type  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  callNode  subclass  superclass  
[buglab_swap_variables]^return new SubclassRelationship ( superclass, stripPrototype ( subclass ) , stripPrototype ( type )  ) ;^99^100^101^102^^94^103^return new SubclassRelationship ( type, stripPrototype ( subclass ) , stripPrototype ( superclass )  ) ;^[CLASS] ClosureCodingConvention  [METHOD] getClassesDefinedByCall [RETURN_TYPE] SubclassRelationship   Node callNode [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  boolean  SubclassType  type  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  callNode  subclass  superclass  
[buglab_swap_variables]^return new SubclassRelationship (  stripPrototype ( subclass ) , stripPrototype ( superclass )  ) ;^99^100^101^102^^94^103^return new SubclassRelationship ( type, stripPrototype ( subclass ) , stripPrototype ( superclass )  ) ;^[CLASS] ClosureCodingConvention  [METHOD] getClassesDefinedByCall [RETURN_TYPE] SubclassRelationship   Node callNode [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  boolean  SubclassType  type  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  callNode  subclass  superclass  
[buglab_swap_variables]^return new SubclassRelationship ( type, stripPrototype ( superclass ) , stripPrototype ( subclass )  ) ;^99^100^101^102^^94^103^return new SubclassRelationship ( type, stripPrototype ( subclass ) , stripPrototype ( superclass )  ) ;^[CLASS] ClosureCodingConvention  [METHOD] getClassesDefinedByCall [RETURN_TYPE] SubclassRelationship   Node callNode [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  boolean  SubclassType  type  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  callNode  subclass  superclass  
[buglab_swap_variables]^return new SubclassRelationship ( subclass, stripPrototype ( type ) , stripPrototype ( superclass )  ) ;^99^100^101^102^^94^103^return new SubclassRelationship ( type, stripPrototype ( subclass ) , stripPrototype ( superclass )  ) ;^[CLASS] ClosureCodingConvention  [METHOD] getClassesDefinedByCall [RETURN_TYPE] SubclassRelationship   Node callNode [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  boolean  SubclassType  type  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  callNode  subclass  superclass  
[buglab_swap_variables]^return new SubclassRelationship ( subclass, stripPrototype ( type ) , stripPrototype ( superclass )  ) ;^99^100^101^102^^84^114^return new SubclassRelationship ( type, stripPrototype ( subclass ) , stripPrototype ( superclass )  ) ;^[CLASS] ClosureCodingConvention  [METHOD] getClassesDefinedByCall [RETURN_TYPE] SubclassRelationship   Node callNode [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  boolean  SubclassType  type  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  callNode  subclass  superclass  
[buglab_swap_variables]^return new SubclassRelationship (  stripPrototype ( subclass ) , stripPrototype ( superclass )  ) ;^99^100^101^102^^84^114^return new SubclassRelationship ( type, stripPrototype ( subclass ) , stripPrototype ( superclass )  ) ;^[CLASS] ClosureCodingConvention  [METHOD] getClassesDefinedByCall [RETURN_TYPE] SubclassRelationship   Node callNode [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  boolean  SubclassType  type  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  callNode  subclass  superclass  
[buglab_swap_variables]^return new SubclassRelationship ( type, stripPrototype ( superclass ) , stripPrototype ( subclass )  ) ;^99^100^101^102^^84^114^return new SubclassRelationship ( type, stripPrototype ( subclass ) , stripPrototype ( superclass )  ) ;^[CLASS] ClosureCodingConvention  [METHOD] getClassesDefinedByCall [RETURN_TYPE] SubclassRelationship   Node callNode [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  boolean  SubclassType  type  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  callNode  subclass  superclass  
[buglab_swap_variables]^return new SubclassRelationship ( superclass, stripPrototype ( subclass ) , stripPrototype ( type )  ) ;^99^100^101^102^^84^114^return new SubclassRelationship ( type, stripPrototype ( subclass ) , stripPrototype ( superclass )  ) ;^[CLASS] ClosureCodingConvention  [METHOD] getClassesDefinedByCall [RETURN_TYPE] SubclassRelationship   Node callNode [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  boolean  SubclassType  type  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  callNode  subclass  superclass  
[buglab_swap_variables]^if  ( superclass != null && subclass.isUnscopedQualifiedName (  )  && subclass.isUnscopedQualifiedName (  )  )  {^94^95^96^^^79^109^if  ( subclass != null && subclass.isUnscopedQualifiedName (  )  && superclass.isUnscopedQualifiedName (  )  )  {^[CLASS] ClosureCodingConvention  [METHOD] getClassesDefinedByCall [RETURN_TYPE] SubclassRelationship   Node callNode [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  boolean  SubclassType  type  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  callNode  subclass  superclass  
[buglab_swap_variables]^methodName = dollarIndex.substring ( name + 1 ) ;^123^^^^^114^135^methodName = name.substring ( dollarIndex + 1 ) ;^[CLASS] ClosureCodingConvention  [METHOD] typeofClassDefiningName [RETURN_TYPE] SubclassType   Node callName [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  methodName  name  boolean  DiagnosticType  OBJECTLIT_EXPECTED  int  dollarIndex  Node  callName  
[buglab_swap_variables]^return extractClassNameIfGoog ( parent, node, "goog.provide" ) ;^165^^^^^164^166^return extractClassNameIfGoog ( node, parent, "goog.provide" ) ;^[CLASS] ClosureCodingConvention  [METHOD] extractClassNameIfProvide [RETURN_TYPE] String   Node node Node parent [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  methodName  name  propertyName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  Node  node  parent  
[buglab_swap_variables]^return extractClassNameIfGoog (  parent, "goog.provide" ) ;^165^^^^^164^166^return extractClassNameIfGoog ( node, parent, "goog.provide" ) ;^[CLASS] ClosureCodingConvention  [METHOD] extractClassNameIfProvide [RETURN_TYPE] String   Node node Node parent [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  methodName  name  propertyName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  Node  node  parent  
[buglab_swap_variables]^return extractClassNameIfGoog ( node,  "goog.provide" ) ;^165^^^^^164^166^return extractClassNameIfGoog ( node, parent, "goog.provide" ) ;^[CLASS] ClosureCodingConvention  [METHOD] extractClassNameIfProvide [RETURN_TYPE] String   Node node Node parent [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  methodName  name  propertyName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  Node  node  parent  
[buglab_swap_variables]^return extractClassNameIfGoog ( parent, node, "goog.require" ) ;^175^^^^^174^176^return extractClassNameIfGoog ( node, parent, "goog.require" ) ;^[CLASS] ClosureCodingConvention  [METHOD] extractClassNameIfRequire [RETURN_TYPE] String   Node node Node parent [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  methodName  name  propertyName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  Node  node  parent  
[buglab_swap_variables]^return extractClassNameIfGoog (  parent, "goog.require" ) ;^175^^^^^174^176^return extractClassNameIfGoog ( node, parent, "goog.require" ) ;^[CLASS] ClosureCodingConvention  [METHOD] extractClassNameIfRequire [RETURN_TYPE] String   Node node Node parent [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  methodName  name  propertyName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  Node  node  parent  
[buglab_swap_variables]^return extractClassNameIfGoog ( node,  "goog.require" ) ;^175^^^^^174^176^return extractClassNameIfGoog ( node, parent, "goog.require" ) ;^[CLASS] ClosureCodingConvention  [METHOD] extractClassNameIfRequire [RETURN_TYPE] String   Node node Node parent [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  methodName  name  propertyName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  Node  node  parent  
[buglab_swap_variables]^if  (  ( qualifiedName ) .equals ( functionName )  )  {^185^^^^^178^191^if  (  ( functionName ) .equals ( qualifiedName )  )  {^[CLASS] ClosureCodingConvention  [METHOD] extractClassNameIfGoog [RETURN_TYPE] String   Node node Node parent String functionName [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  Node  callee  node  parent  
[buglab_swap_variables]^if  ( "goog.addDependency".equals ( n.getQualifiedName (  )  )  && callName.getChildCount (  )  >= 3 )  {^214^215^^^^212^229^if  ( "goog.addDependency".equals ( callName.getQualifiedName (  )  )  && n.getChildCount (  )  >= 3 )  {^[CLASS] ClosureCodingConvention  [METHOD] identifyTypeDeclarationCall [RETURN_TYPE] List   Node n [VARIABLES] List  typeNames  Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  n  name  typeArray  
[buglab_swap_variables]^for  ( Node typeArray = name.getFirstChild (  ) ; name != null;^219^^^^^212^229^for  ( Node name = typeArray.getFirstChild (  ) ; name != null;^[CLASS] ClosureCodingConvention  [METHOD] identifyTypeDeclarationCall [RETURN_TYPE] List   Node n [VARIABLES] List  typeNames  Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  n  name  typeArray  
[buglab_swap_variables]^} else if  ( firstChild == Token.VAR && type.hasChildren (  )  )  {^239^^^^^232^247^} else if  ( type == Token.VAR && firstChild.hasChildren (  )  )  {^[CLASS] ClosureCodingConvention  [METHOD] identifyTypeDefAssign [RETURN_TYPE] String   Node n [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  int  type  Node  firstChild  n  
[buglab_swap_variables]^if  ( firstChild.equals ( TYPEDEF_NAME.getFirstChild (  ) .getQualifiedName (  )  )  )  {^240^241^^^^232^247^if  ( TYPEDEF_NAME.equals ( firstChild.getFirstChild (  ) .getQualifiedName (  )  )  )  {^[CLASS] ClosureCodingConvention  [METHOD] identifyTypeDefAssign [RETURN_TYPE] String   Node n [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  int  type  Node  firstChild  n  
[buglab_swap_variables]^if  ( n.equals ( TYPEDEF_NAME.getLastChild (  ) .getQualifiedName (  )  )  )  {^236^^^^^232^247^if  ( TYPEDEF_NAME.equals ( n.getLastChild (  ) .getQualifiedName (  )  )  )  {^[CLASS] ClosureCodingConvention  [METHOD] identifyTypeDefAssign [RETURN_TYPE] String   Node n [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  int  type  Node  firstChild  n  
[buglab_swap_variables]^functionType.defineDeclaredProperty ( "getInstance",  false ) ;^273^^^^^271^275^functionType.defineDeclaredProperty ( "getInstance", getterType, false ) ;^[CLASS] ClosureCodingConvention  [METHOD] applySingletonGetter [RETURN_TYPE] void   FunctionType functionType FunctionType getterType ObjectType objectType [VARIABLES] ObjectType  objectType  Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  FunctionType  functionType  getterType  
[buglab_swap_variables]^functionType.defineDeclaredProperty ( "instance_",  false ) ;^274^^^^^271^275^functionType.defineDeclaredProperty ( "instance_", objectType, false ) ;^[CLASS] ClosureCodingConvention  [METHOD] applySingletonGetter [RETURN_TYPE] void   FunctionType functionType FunctionType getterType ObjectType objectType [VARIABLES] ObjectType  objectType  Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  FunctionType  functionType  getterType  
[buglab_swap_variables]^return call.contains ( propertyTestFunctions.getFirstChild (  ) .getQualifiedName (  )  ) ;^290^291^^^^288^292^return propertyTestFunctions.contains ( call.getFirstChild (  ) .getQualifiedName (  )  ) ;^[CLASS] ClosureCodingConvention  [METHOD] isPropertyTestFunction [RETURN_TYPE] boolean   Node call [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  Node  call  
[buglab_swap_variables]^t.getCompiler (  ) .report ( JSError.make ( OBJECTLIT_EXPECTED.getSourceName (  ) , callNode, t )  ) ;^311^312^^^^295^318^t.getCompiler (  ) .report ( JSError.make ( t.getSourceName (  ) , callNode, OBJECTLIT_EXPECTED )  ) ;^[CLASS] ClosureCodingConvention  [METHOD] getObjectLiteralCast [RETURN_TYPE] ObjectLiteralCast   NodeTraversal t Node callNode [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  NodeTraversal  t  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  callNode  objectNode  typeNode  
[buglab_swap_variables]^t.getCompiler (  ) .report ( JSError.make ( t.getSourceName (  ) , OBJECTLIT_EXPECTED, callNode )  ) ;^311^312^^^^295^318^t.getCompiler (  ) .report ( JSError.make ( t.getSourceName (  ) , callNode, OBJECTLIT_EXPECTED )  ) ;^[CLASS] ClosureCodingConvention  [METHOD] getObjectLiteralCast [RETURN_TYPE] ObjectLiteralCast   NodeTraversal t Node callNode [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  NodeTraversal  t  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  callNode  objectNode  typeNode  
[buglab_swap_variables]^t.getCompiler (  ) .report ( JSError.make ( t.getSourceName (  ) ,  OBJECTLIT_EXPECTED )  ) ;^311^312^^^^295^318^t.getCompiler (  ) .report ( JSError.make ( t.getSourceName (  ) , callNode, OBJECTLIT_EXPECTED )  ) ;^[CLASS] ClosureCodingConvention  [METHOD] getObjectLiteralCast [RETURN_TYPE] ObjectLiteralCast   NodeTraversal t Node callNode [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  NodeTraversal  t  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  callNode  objectNode  typeNode  
[buglab_swap_variables]^t.getCompiler (  ) .report ( JSError.make ( t.getSourceName (  ) , callNode )  ) ;^311^312^^^^295^318^t.getCompiler (  ) .report ( JSError.make ( t.getSourceName (  ) , callNode, OBJECTLIT_EXPECTED )  ) ;^[CLASS] ClosureCodingConvention  [METHOD] getObjectLiteralCast [RETURN_TYPE] ObjectLiteralCast   NodeTraversal t Node callNode [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  NodeTraversal  t  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  callNode  objectNode  typeNode  
[buglab_swap_variables]^t.getCompiler (  ) .report ( JSError.make ( callNode.getSourceName (  ) , t, OBJECTLIT_EXPECTED )  ) ;^311^312^^^^295^318^t.getCompiler (  ) .report ( JSError.make ( t.getSourceName (  ) , callNode, OBJECTLIT_EXPECTED )  ) ;^[CLASS] ClosureCodingConvention  [METHOD] getObjectLiteralCast [RETURN_TYPE] ObjectLiteralCast   NodeTraversal t Node callNode [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  NodeTraversal  t  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  callNode  objectNode  typeNode  
