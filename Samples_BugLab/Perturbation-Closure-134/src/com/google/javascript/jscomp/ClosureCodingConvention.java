[BugLab_Wrong_Operator]^if  ( type <= SubclassType.INHERITS )  {^52^^^^^50^58^if  ( type == SubclassType.INHERITS )  {^[CLASS] ClosureCodingConvention  [METHOD] applySubclassRelationship [RETURN_TYPE] void   FunctionType parentCtor FunctionType childCtor SubclassType type [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  boolean  SubclassType  type  DiagnosticType  OBJECTLIT_EXPECTED  FunctionType  childCtor  parentCtor  
[BugLab_Wrong_Literal]^childCtor.defineDeclaredProperty ( "superClass_", parentCtor.getPrototype (  ) , true ) ;^53^54^^^^50^58^childCtor.defineDeclaredProperty ( "superClass_", parentCtor.getPrototype (  ) , false ) ;^[CLASS] ClosureCodingConvention  [METHOD] applySubclassRelationship [RETURN_TYPE] void   FunctionType parentCtor FunctionType childCtor SubclassType type [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  boolean  SubclassType  type  DiagnosticType  OBJECTLIT_EXPECTED  FunctionType  childCtor  parentCtor  
[BugLab_Variable_Misuse]^childCtor.getPrototype (  ) .defineDeclaredProperty ( "constructor", parentCtor, false ) ;^55^56^^^^50^58^childCtor.getPrototype (  ) .defineDeclaredProperty ( "constructor", childCtor, false ) ;^[CLASS] ClosureCodingConvention  [METHOD] applySubclassRelationship [RETURN_TYPE] void   FunctionType parentCtor FunctionType childCtor SubclassType type [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  boolean  SubclassType  type  DiagnosticType  OBJECTLIT_EXPECTED  FunctionType  childCtor  parentCtor  
[BugLab_Wrong_Literal]^childCtor.getPrototype (  ) .defineDeclaredProperty ( "constructor", childCtor, true ) ;^55^56^^^^50^58^childCtor.getPrototype (  ) .defineDeclaredProperty ( "constructor", childCtor, false ) ;^[CLASS] ClosureCodingConvention  [METHOD] applySubclassRelationship [RETURN_TYPE] void   FunctionType parentCtor FunctionType childCtor SubclassType type [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  boolean  SubclassType  type  DiagnosticType  OBJECTLIT_EXPECTED  FunctionType  childCtor  parentCtor  
[BugLab_Variable_Misuse]^Node callName = superclass.getFirstChild (  ) ;^68^^^^^53^83^Node callName = callNode.getFirstChild (  ) ;^[CLASS] ClosureCodingConvention  [METHOD] getClassesDefinedByCall [RETURN_TYPE] SubclassRelationship   Node callNode [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  boolean  SubclassType  type  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  callNode  subclass  superclass  
[BugLab_Variable_Misuse]^SubclassType type = typeofClassDefiningName ( superclass ) ;^69^^^^^54^84^SubclassType type = typeofClassDefiningName ( callName ) ;^[CLASS] ClosureCodingConvention  [METHOD] getClassesDefinedByCall [RETURN_TYPE] SubclassRelationship   Node callNode [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  boolean  SubclassType  type  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  callNode  subclass  superclass  
[BugLab_Wrong_Operator]^if  ( type == null )  {^70^^^^^55^85^if  ( type != null )  {^[CLASS] ClosureCodingConvention  [METHOD] getClassesDefinedByCall [RETURN_TYPE] SubclassRelationship   Node callNode [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  boolean  SubclassType  type  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  callNode  subclass  superclass  
[BugLab_Variable_Misuse]^if  ( superclass.getChildCount (  )  == 2 && callName.getType (  )  == Token.GETPROP )  {^81^82^^^^66^96^if  ( callNode.getChildCount (  )  == 2 && callName.getType (  )  == Token.GETPROP )  {^[CLASS] ClosureCodingConvention  [METHOD] getClassesDefinedByCall [RETURN_TYPE] SubclassRelationship   Node callNode [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  boolean  SubclassType  type  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  callNode  subclass  superclass  
[BugLab_Variable_Misuse]^if  ( callNode.getChildCount (  )  == 2 && superclass.getType (  )  == Token.GETPROP )  {^81^82^^^^66^96^if  ( callNode.getChildCount (  )  == 2 && callName.getType (  )  == Token.GETPROP )  {^[CLASS] ClosureCodingConvention  [METHOD] getClassesDefinedByCall [RETURN_TYPE] SubclassRelationship   Node callNode [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  boolean  SubclassType  type  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  callNode  subclass  superclass  
[BugLab_Argument_Swapping]^if  ( callName.getChildCount (  )  == 2 && callNode.getType (  )  == Token.GETPROP )  {^81^82^^^^66^96^if  ( callNode.getChildCount (  )  == 2 && callName.getType (  )  == Token.GETPROP )  {^[CLASS] ClosureCodingConvention  [METHOD] getClassesDefinedByCall [RETURN_TYPE] SubclassRelationship   Node callNode [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  boolean  SubclassType  type  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  callNode  subclass  superclass  
[BugLab_Wrong_Operator]^if  ( callNode.getChildCount (  )  == 2 || callName.getType (  )  == Token.GETPROP )  {^81^82^^^^66^96^if  ( callNode.getChildCount (  )  == 2 && callName.getType (  )  == Token.GETPROP )  {^[CLASS] ClosureCodingConvention  [METHOD] getClassesDefinedByCall [RETURN_TYPE] SubclassRelationship   Node callNode [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  boolean  SubclassType  type  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  callNode  subclass  superclass  
[BugLab_Wrong_Operator]^if  ( callNode.getChildCount (  )  > 2 && callName.getType (  )  == Token.GETPROP )  {^81^82^^^^66^96^if  ( callNode.getChildCount (  )  == 2 && callName.getType (  )  == Token.GETPROP )  {^[CLASS] ClosureCodingConvention  [METHOD] getClassesDefinedByCall [RETURN_TYPE] SubclassRelationship   Node callNode [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  boolean  SubclassType  type  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  callNode  subclass  superclass  
[BugLab_Wrong_Operator]^if  ( callNode.getChildCount (  )  >= 2 && callName.getType (  )  == Token.GETPROP )  {^81^82^^^^66^96^if  ( callNode.getChildCount (  )  == 2 && callName.getType (  )  == Token.GETPROP )  {^[CLASS] ClosureCodingConvention  [METHOD] getClassesDefinedByCall [RETURN_TYPE] SubclassRelationship   Node callNode [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  boolean  SubclassType  type  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  callNode  subclass  superclass  
[BugLab_Wrong_Operator]^if  ( callNode.getChildCount (  )  != 2 && callName.getType (  )  == Token.GETPROP )  {^81^82^^^^66^96^if  ( callNode.getChildCount (  )  == 2 && callName.getType (  )  == Token.GETPROP )  {^[CLASS] ClosureCodingConvention  [METHOD] getClassesDefinedByCall [RETURN_TYPE] SubclassRelationship   Node callNode [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  boolean  SubclassType  type  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  callNode  subclass  superclass  
[BugLab_Wrong_Literal]^if  ( callNode.getChildCount (  )  == 1 && callName.getType (  )  == Token.GETPROP )  {^81^82^^^^66^96^if  ( callNode.getChildCount (  )  == 2 && callName.getType (  )  == Token.GETPROP )  {^[CLASS] ClosureCodingConvention  [METHOD] getClassesDefinedByCall [RETURN_TYPE] SubclassRelationship   Node callNode [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  boolean  SubclassType  type  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  callNode  subclass  superclass  
[BugLab_Variable_Misuse]^} else if  ( superclass.getChildCount (  )  == 3 )  {^85^^^^^70^100^} else if  ( callNode.getChildCount (  )  == 3 )  {^[CLASS] ClosureCodingConvention  [METHOD] getClassesDefinedByCall [RETURN_TYPE] SubclassRelationship   Node callNode [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  boolean  SubclassType  type  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  callNode  subclass  superclass  
[BugLab_Wrong_Operator]^} else if  ( callNode.getChildCount (  )  <= 3 )  {^85^^^^^70^100^} else if  ( callNode.getChildCount (  )  == 3 )  {^[CLASS] ClosureCodingConvention  [METHOD] getClassesDefinedByCall [RETURN_TYPE] SubclassRelationship   Node callNode [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  boolean  SubclassType  type  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  callNode  subclass  superclass  
[BugLab_Variable_Misuse]^subclass = superclass.getNext (  ) ;^87^^^^^72^102^subclass = callName.getNext (  ) ;^[CLASS] ClosureCodingConvention  [METHOD] getClassesDefinedByCall [RETURN_TYPE] SubclassRelationship   Node callNode [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  boolean  SubclassType  type  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  callNode  subclass  superclass  
[BugLab_Variable_Misuse]^subclass = superclass.getFirstChild (  ) ;^84^^^^^81^88^subclass = callName.getFirstChild (  ) ;^[CLASS] ClosureCodingConvention  [METHOD] getClassesDefinedByCall [RETURN_TYPE] SubclassRelationship   Node callNode [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  boolean  SubclassType  type  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  callNode  subclass  superclass  
[BugLab_Wrong_Operator]^} else if  ( callNode.getChildCount (  )  > 3 )  {^85^^^^^70^100^} else if  ( callNode.getChildCount (  )  == 3 )  {^[CLASS] ClosureCodingConvention  [METHOD] getClassesDefinedByCall [RETURN_TYPE] SubclassRelationship   Node callNode [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  boolean  SubclassType  type  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  callNode  subclass  superclass  
[BugLab_Variable_Misuse]^if  ( superclass != null && subclass.isUnscopedQualifiedName (  )  && superclass.isUnscopedQualifiedName (  )  )  {^94^95^96^^^79^109^if  ( subclass != null && subclass.isUnscopedQualifiedName (  )  && superclass.isUnscopedQualifiedName (  )  )  {^[CLASS] ClosureCodingConvention  [METHOD] getClassesDefinedByCall [RETURN_TYPE] SubclassRelationship   Node callNode [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  boolean  SubclassType  type  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  callNode  subclass  superclass  
[BugLab_Variable_Misuse]^if  ( subclass != null && subclass.isUnscopedQualifiedName (  )  && callNode.isUnscopedQualifiedName (  )  )  {^94^95^96^^^79^109^if  ( subclass != null && subclass.isUnscopedQualifiedName (  )  && superclass.isUnscopedQualifiedName (  )  )  {^[CLASS] ClosureCodingConvention  [METHOD] getClassesDefinedByCall [RETURN_TYPE] SubclassRelationship   Node callNode [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  boolean  SubclassType  type  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  callNode  subclass  superclass  
[BugLab_Argument_Swapping]^if  ( superclass != null && subclass.isUnscopedQualifiedName (  )  && subclass.isUnscopedQualifiedName (  )  )  {^94^95^96^^^79^109^if  ( subclass != null && subclass.isUnscopedQualifiedName (  )  && superclass.isUnscopedQualifiedName (  )  )  {^[CLASS] ClosureCodingConvention  [METHOD] getClassesDefinedByCall [RETURN_TYPE] SubclassRelationship   Node callNode [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  boolean  SubclassType  type  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  callNode  subclass  superclass  
[BugLab_Wrong_Operator]^if  ( subclass != null || subclass.isUnscopedQualifiedName (  )  && superclass.isUnscopedQualifiedName (  )  )  {^94^95^96^^^79^109^if  ( subclass != null && subclass.isUnscopedQualifiedName (  )  && superclass.isUnscopedQualifiedName (  )  )  {^[CLASS] ClosureCodingConvention  [METHOD] getClassesDefinedByCall [RETURN_TYPE] SubclassRelationship   Node callNode [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  boolean  SubclassType  type  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  callNode  subclass  superclass  
[BugLab_Wrong_Operator]^if  ( subclass == null && subclass.isUnscopedQualifiedName (  )  && superclass.isUnscopedQualifiedName (  )  )  {^94^95^96^^^79^109^if  ( subclass != null && subclass.isUnscopedQualifiedName (  )  && superclass.isUnscopedQualifiedName (  )  )  {^[CLASS] ClosureCodingConvention  [METHOD] getClassesDefinedByCall [RETURN_TYPE] SubclassRelationship   Node callNode [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  boolean  SubclassType  type  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  callNode  subclass  superclass  
[BugLab_Variable_Misuse]^return new SubclassRelationship ( type, stripPrototype ( callNode ) , stripPrototype ( superclass )  ) ;^99^100^101^102^^94^103^return new SubclassRelationship ( type, stripPrototype ( subclass ) , stripPrototype ( superclass )  ) ;^[CLASS] ClosureCodingConvention  [METHOD] getClassesDefinedByCall [RETURN_TYPE] SubclassRelationship   Node callNode [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  boolean  SubclassType  type  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  callNode  subclass  superclass  
[BugLab_Variable_Misuse]^return new SubclassRelationship ( type, stripPrototype ( subclass ) , stripPrototype ( subclass )  ) ;^99^100^101^102^^94^103^return new SubclassRelationship ( type, stripPrototype ( subclass ) , stripPrototype ( superclass )  ) ;^[CLASS] ClosureCodingConvention  [METHOD] getClassesDefinedByCall [RETURN_TYPE] SubclassRelationship   Node callNode [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  boolean  SubclassType  type  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  callNode  subclass  superclass  
[BugLab_Argument_Swapping]^return new SubclassRelationship ( superclass, stripPrototype ( subclass ) , stripPrototype ( type )  ) ;^99^100^101^102^^94^103^return new SubclassRelationship ( type, stripPrototype ( subclass ) , stripPrototype ( superclass )  ) ;^[CLASS] ClosureCodingConvention  [METHOD] getClassesDefinedByCall [RETURN_TYPE] SubclassRelationship   Node callNode [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  boolean  SubclassType  type  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  callNode  subclass  superclass  
[BugLab_Argument_Swapping]^return new SubclassRelationship ( type, stripPrototype ( superclass ) , stripPrototype ( subclass )  ) ;^99^100^101^102^^94^103^return new SubclassRelationship ( type, stripPrototype ( subclass ) , stripPrototype ( superclass )  ) ;^[CLASS] ClosureCodingConvention  [METHOD] getClassesDefinedByCall [RETURN_TYPE] SubclassRelationship   Node callNode [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  boolean  SubclassType  type  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  callNode  subclass  superclass  
[BugLab_Variable_Misuse]^return new SubclassRelationship ( type, stripPrototype ( superclass ) , stripPrototype ( superclass )  ) ;^99^100^101^102^^94^103^return new SubclassRelationship ( type, stripPrototype ( subclass ) , stripPrototype ( superclass )  ) ;^[CLASS] ClosureCodingConvention  [METHOD] getClassesDefinedByCall [RETURN_TYPE] SubclassRelationship   Node callNode [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  boolean  SubclassType  type  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  callNode  subclass  superclass  
[BugLab_Variable_Misuse]^return new SubclassRelationship ( type, stripPrototype ( subclass ) , stripPrototype ( callNode )  ) ;^99^100^101^102^^94^103^return new SubclassRelationship ( type, stripPrototype ( subclass ) , stripPrototype ( superclass )  ) ;^[CLASS] ClosureCodingConvention  [METHOD] getClassesDefinedByCall [RETURN_TYPE] SubclassRelationship   Node callNode [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  boolean  SubclassType  type  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  callNode  subclass  superclass  
[BugLab_Argument_Swapping]^return new SubclassRelationship ( subclass, stripPrototype ( type ) , stripPrototype ( superclass )  ) ;^99^100^101^102^^94^103^return new SubclassRelationship ( type, stripPrototype ( subclass ) , stripPrototype ( superclass )  ) ;^[CLASS] ClosureCodingConvention  [METHOD] getClassesDefinedByCall [RETURN_TYPE] SubclassRelationship   Node callNode [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  boolean  SubclassType  type  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  callNode  subclass  superclass  
[BugLab_Variable_Misuse]^stripPrototype ( superclass ) , stripPrototype ( superclass )  ) ;^101^102^^^^94^103^stripPrototype ( subclass ) , stripPrototype ( superclass )  ) ;^[CLASS] ClosureCodingConvention  [METHOD] getClassesDefinedByCall [RETURN_TYPE] SubclassRelationship   Node callNode [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  boolean  SubclassType  type  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  callNode  subclass  superclass  
[BugLab_Variable_Misuse]^stripPrototype ( subclass )  ) ;^102^^^^^94^103^stripPrototype ( superclass )  ) ;^[CLASS] ClosureCodingConvention  [METHOD] getClassesDefinedByCall [RETURN_TYPE] SubclassRelationship   Node callNode [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  boolean  SubclassType  type  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  callNode  subclass  superclass  
[BugLab_Variable_Misuse]^subclass = superclass.getFirstChild (  ) ;^84^^^^^69^99^subclass = callName.getFirstChild (  ) ;^[CLASS] ClosureCodingConvention  [METHOD] getClassesDefinedByCall [RETURN_TYPE] SubclassRelationship   Node callNode [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  boolean  SubclassType  type  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  callNode  subclass  superclass  
[BugLab_Variable_Misuse]^return new SubclassRelationship ( type, stripPrototype ( callNode ) , stripPrototype ( superclass )  ) ;^99^100^101^102^^84^114^return new SubclassRelationship ( type, stripPrototype ( subclass ) , stripPrototype ( superclass )  ) ;^[CLASS] ClosureCodingConvention  [METHOD] getClassesDefinedByCall [RETURN_TYPE] SubclassRelationship   Node callNode [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  boolean  SubclassType  type  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  callNode  subclass  superclass  
[BugLab_Variable_Misuse]^return new SubclassRelationship ( type, stripPrototype ( subclass ) , stripPrototype ( callNode )  ) ;^99^100^101^102^^84^114^return new SubclassRelationship ( type, stripPrototype ( subclass ) , stripPrototype ( superclass )  ) ;^[CLASS] ClosureCodingConvention  [METHOD] getClassesDefinedByCall [RETURN_TYPE] SubclassRelationship   Node callNode [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  boolean  SubclassType  type  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  callNode  subclass  superclass  
[BugLab_Argument_Swapping]^return new SubclassRelationship ( subclass, stripPrototype ( type ) , stripPrototype ( superclass )  ) ;^99^100^101^102^^84^114^return new SubclassRelationship ( type, stripPrototype ( subclass ) , stripPrototype ( superclass )  ) ;^[CLASS] ClosureCodingConvention  [METHOD] getClassesDefinedByCall [RETURN_TYPE] SubclassRelationship   Node callNode [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  boolean  SubclassType  type  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  callNode  subclass  superclass  
[BugLab_Argument_Swapping]^return new SubclassRelationship ( type, stripPrototype ( superclass ) , stripPrototype ( subclass )  ) ;^99^100^101^102^^84^114^return new SubclassRelationship ( type, stripPrototype ( subclass ) , stripPrototype ( superclass )  ) ;^[CLASS] ClosureCodingConvention  [METHOD] getClassesDefinedByCall [RETURN_TYPE] SubclassRelationship   Node callNode [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  boolean  SubclassType  type  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  callNode  subclass  superclass  
[BugLab_Argument_Swapping]^return new SubclassRelationship ( superclass, stripPrototype ( subclass ) , stripPrototype ( type )  ) ;^99^100^101^102^^84^114^return new SubclassRelationship ( type, stripPrototype ( subclass ) , stripPrototype ( superclass )  ) ;^[CLASS] ClosureCodingConvention  [METHOD] getClassesDefinedByCall [RETURN_TYPE] SubclassRelationship   Node callNode [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  boolean  SubclassType  type  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  callNode  subclass  superclass  
[BugLab_Variable_Misuse]^Node superclass = subclass.getLastChild (  ) ;^72^^^^^57^87^Node superclass = callNode.getLastChild (  ) ;^[CLASS] ClosureCodingConvention  [METHOD] getClassesDefinedByCall [RETURN_TYPE] SubclassRelationship   Node callNode [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  boolean  SubclassType  type  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  callNode  subclass  superclass  
[BugLab_Variable_Misuse]^stripPrototype ( superclass ) , stripPrototype ( superclass )  ) ;^101^102^^^^86^116^stripPrototype ( subclass ) , stripPrototype ( superclass )  ) ;^[CLASS] ClosureCodingConvention  [METHOD] getClassesDefinedByCall [RETURN_TYPE] SubclassRelationship   Node callNode [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  boolean  SubclassType  type  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  callNode  subclass  superclass  
[BugLab_Wrong_Operator]^if  ( callNode.getChildCount (  )  < 2 && callName.getType (  )  == Token.GETPROP )  {^81^82^^^^66^96^if  ( callNode.getChildCount (  )  == 2 && callName.getType (  )  == Token.GETPROP )  {^[CLASS] ClosureCodingConvention  [METHOD] getClassesDefinedByCall [RETURN_TYPE] SubclassRelationship   Node callNode [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  boolean  SubclassType  type  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  callNode  subclass  superclass  
[BugLab_Wrong_Literal]^if  ( callNode.getChildCount (  )  == 3 && callName.getType (  )  == Token.GETPROP )  {^81^82^^^^66^96^if  ( callNode.getChildCount (  )  == 2 && callName.getType (  )  == Token.GETPROP )  {^[CLASS] ClosureCodingConvention  [METHOD] getClassesDefinedByCall [RETURN_TYPE] SubclassRelationship   Node callNode [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  boolean  SubclassType  type  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  callNode  subclass  superclass  
[BugLab_Wrong_Literal]^} else if  ( callNode.getChildCount (  )  == 2 )  {^85^^^^^70^100^} else if  ( callNode.getChildCount (  )  == 3 )  {^[CLASS] ClosureCodingConvention  [METHOD] getClassesDefinedByCall [RETURN_TYPE] SubclassRelationship   Node callNode [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  boolean  SubclassType  type  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  callNode  subclass  superclass  
[BugLab_Wrong_Operator]^} else if  ( callNode.getChildCount (  )  < 3 )  {^85^^^^^70^100^} else if  ( callNode.getChildCount (  )  == 3 )  {^[CLASS] ClosureCodingConvention  [METHOD] getClassesDefinedByCall [RETURN_TYPE] SubclassRelationship   Node callNode [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  boolean  SubclassType  type  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  callNode  subclass  superclass  
[BugLab_Wrong_Literal]^} else if  ( callNode.getChildCount (  )  == this )  {^85^^^^^70^100^} else if  ( callNode.getChildCount (  )  == 3 )  {^[CLASS] ClosureCodingConvention  [METHOD] getClassesDefinedByCall [RETURN_TYPE] SubclassRelationship   Node callNode [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  boolean  SubclassType  type  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  callNode  subclass  superclass  
[BugLab_Variable_Misuse]^if  ( callNode != null && subclass.isUnscopedQualifiedName (  )  && superclass.isUnscopedQualifiedName (  )  )  {^94^95^96^^^79^109^if  ( subclass != null && subclass.isUnscopedQualifiedName (  )  && superclass.isUnscopedQualifiedName (  )  )  {^[CLASS] ClosureCodingConvention  [METHOD] getClassesDefinedByCall [RETURN_TYPE] SubclassRelationship   Node callNode [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  boolean  SubclassType  type  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  callNode  subclass  superclass  
[BugLab_Variable_Misuse]^if  ( subclass != null && subclass.isUnscopedQualifiedName (  )  && subclass.isUnscopedQualifiedName (  )  )  {^94^95^96^^^79^109^if  ( subclass != null && subclass.isUnscopedQualifiedName (  )  && superclass.isUnscopedQualifiedName (  )  )  {^[CLASS] ClosureCodingConvention  [METHOD] getClassesDefinedByCall [RETURN_TYPE] SubclassRelationship   Node callNode [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  boolean  SubclassType  type  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  callNode  subclass  superclass  
[BugLab_Variable_Misuse]^return new SubclassRelationship ( type, stripPrototype ( subclass ) , stripPrototype ( subclass )  ) ;^99^100^101^102^^84^114^return new SubclassRelationship ( type, stripPrototype ( subclass ) , stripPrototype ( superclass )  ) ;^[CLASS] ClosureCodingConvention  [METHOD] getClassesDefinedByCall [RETURN_TYPE] SubclassRelationship   Node callNode [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  boolean  SubclassType  type  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  callNode  subclass  superclass  
[BugLab_Variable_Misuse]^stripPrototype ( subclass )  ) ;^102^^^^^87^117^stripPrototype ( superclass )  ) ;^[CLASS] ClosureCodingConvention  [METHOD] getClassesDefinedByCall [RETURN_TYPE] SubclassRelationship   Node callNode [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  boolean  SubclassType  type  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  callNode  subclass  superclass  
[BugLab_Wrong_Operator]^if  ( callName.getType (  )  != Token.GETPROP )  {^117^^^^^114^135^if  ( callName.getType (  )  == Token.GETPROP )  {^[CLASS] ClosureCodingConvention  [METHOD] typeofClassDefiningName [RETURN_TYPE] SubclassType   Node callName [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  methodName  name  boolean  DiagnosticType  OBJECTLIT_EXPECTED  int  dollarIndex  Node  callName  
[BugLab_Wrong_Operator]^} else if  ( callName.getType (  )  < Token.NAME )  {^119^^^^^114^135^} else if  ( callName.getType (  )  == Token.NAME )  {^[CLASS] ClosureCodingConvention  [METHOD] typeofClassDefiningName [RETURN_TYPE] SubclassType   Node callName [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  methodName  name  boolean  DiagnosticType  OBJECTLIT_EXPECTED  int  dollarIndex  Node  callName  
[BugLab_Wrong_Operator]^if  ( dollarIndex >= -1 )  {^122^^^^^114^135^if  ( dollarIndex != -1 )  {^[CLASS] ClosureCodingConvention  [METHOD] typeofClassDefiningName [RETURN_TYPE] SubclassType   Node callName [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  methodName  name  boolean  DiagnosticType  OBJECTLIT_EXPECTED  int  dollarIndex  Node  callName  
[BugLab_Wrong_Literal]^if  ( dollarIndex != -2 )  {^122^^^^^114^135^if  ( dollarIndex != -1 )  {^[CLASS] ClosureCodingConvention  [METHOD] typeofClassDefiningName [RETURN_TYPE] SubclassType   Node callName [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  methodName  name  boolean  DiagnosticType  OBJECTLIT_EXPECTED  int  dollarIndex  Node  callName  
[BugLab_Wrong_Literal]^if  ( dollarIndex != -dollarIndex )  {^122^^^^^114^135^if  ( dollarIndex != -1 )  {^[CLASS] ClosureCodingConvention  [METHOD] typeofClassDefiningName [RETURN_TYPE] SubclassType   Node callName [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  methodName  name  boolean  DiagnosticType  OBJECTLIT_EXPECTED  int  dollarIndex  Node  callName  
[BugLab_Variable_Misuse]^methodName = methodName.substring ( dollarIndex + 1 ) ;^123^^^^^114^135^methodName = name.substring ( dollarIndex + 1 ) ;^[CLASS] ClosureCodingConvention  [METHOD] typeofClassDefiningName [RETURN_TYPE] SubclassType   Node callName [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  methodName  name  boolean  DiagnosticType  OBJECTLIT_EXPECTED  int  dollarIndex  Node  callName  
[BugLab_Argument_Swapping]^methodName = dollarIndex.substring ( name + 1 ) ;^123^^^^^114^135^methodName = name.substring ( dollarIndex + 1 ) ;^[CLASS] ClosureCodingConvention  [METHOD] typeofClassDefiningName [RETURN_TYPE] SubclassType   Node callName [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  methodName  name  boolean  DiagnosticType  OBJECTLIT_EXPECTED  int  dollarIndex  Node  callName  
[BugLab_Wrong_Operator]^methodName = name.substring ( dollarIndex  <=  1 ) ;^123^^^^^114^135^methodName = name.substring ( dollarIndex + 1 ) ;^[CLASS] ClosureCodingConvention  [METHOD] typeofClassDefiningName [RETURN_TYPE] SubclassType   Node callName [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  methodName  name  boolean  DiagnosticType  OBJECTLIT_EXPECTED  int  dollarIndex  Node  callName  
[BugLab_Wrong_Literal]^methodName = name.substring ( dollarIndex + dollarIndex ) ;^123^^^^^114^135^methodName = name.substring ( dollarIndex + 1 ) ;^[CLASS] ClosureCodingConvention  [METHOD] typeofClassDefiningName [RETURN_TYPE] SubclassType   Node callName [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  methodName  name  boolean  DiagnosticType  OBJECTLIT_EXPECTED  int  dollarIndex  Node  callName  
[BugLab_Wrong_Operator]^methodName = name.substring ( dollarIndex  >=  1 ) ;^123^^^^^114^135^methodName = name.substring ( dollarIndex + 1 ) ;^[CLASS] ClosureCodingConvention  [METHOD] typeofClassDefiningName [RETURN_TYPE] SubclassType   Node callName [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  methodName  name  boolean  DiagnosticType  OBJECTLIT_EXPECTED  int  dollarIndex  Node  callName  
[BugLab_Wrong_Literal]^methodName = name.substring ( dollarIndex  ) ;^123^^^^^114^135^methodName = name.substring ( dollarIndex + 1 ) ;^[CLASS] ClosureCodingConvention  [METHOD] typeofClassDefiningName [RETURN_TYPE] SubclassType   Node callName [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  methodName  name  boolean  DiagnosticType  OBJECTLIT_EXPECTED  int  dollarIndex  Node  callName  
[BugLab_Wrong_Operator]^methodName = name.substring ( dollarIndex  ==  1 ) ;^123^^^^^114^135^methodName = name.substring ( dollarIndex + 1 ) ;^[CLASS] ClosureCodingConvention  [METHOD] typeofClassDefiningName [RETURN_TYPE] SubclassType   Node callName [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  methodName  name  boolean  DiagnosticType  OBJECTLIT_EXPECTED  int  dollarIndex  Node  callName  
[BugLab_Variable_Misuse]^int dollarIndex = methodName.lastIndexOf ( '$' ) ;^121^^^^^114^135^int dollarIndex = name.lastIndexOf ( '$' ) ;^[CLASS] ClosureCodingConvention  [METHOD] typeofClassDefiningName [RETURN_TYPE] SubclassType   Node callName [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  methodName  name  boolean  DiagnosticType  OBJECTLIT_EXPECTED  int  dollarIndex  Node  callName  
[BugLab_Wrong_Literal]^methodName = name.substring ( dollarIndex +  ) ;^123^^^^^114^135^methodName = name.substring ( dollarIndex + 1 ) ;^[CLASS] ClosureCodingConvention  [METHOD] typeofClassDefiningName [RETURN_TYPE] SubclassType   Node callName [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  methodName  name  boolean  DiagnosticType  OBJECTLIT_EXPECTED  int  dollarIndex  Node  callName  
[BugLab_Wrong_Operator]^methodName = name.substring ( dollarIndex  ^  1 ) ;^123^^^^^114^135^methodName = name.substring ( dollarIndex + 1 ) ;^[CLASS] ClosureCodingConvention  [METHOD] typeofClassDefiningName [RETURN_TYPE] SubclassType   Node callName [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  methodName  name  boolean  DiagnosticType  OBJECTLIT_EXPECTED  int  dollarIndex  Node  callName  
[BugLab_Wrong_Operator]^methodName = name.substring ( dollarIndex  <  1 ) ;^123^^^^^114^135^methodName = name.substring ( dollarIndex + 1 ) ;^[CLASS] ClosureCodingConvention  [METHOD] typeofClassDefiningName [RETURN_TYPE] SubclassType   Node callName [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  methodName  name  boolean  DiagnosticType  OBJECTLIT_EXPECTED  int  dollarIndex  Node  callName  
[BugLab_Wrong_Operator]^methodName = name.substring ( dollarIndex  <<  1 ) ;^123^^^^^114^135^methodName = name.substring ( dollarIndex + 1 ) ;^[CLASS] ClosureCodingConvention  [METHOD] typeofClassDefiningName [RETURN_TYPE] SubclassType   Node callName [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  methodName  name  boolean  DiagnosticType  OBJECTLIT_EXPECTED  int  dollarIndex  Node  callName  
[BugLab_Wrong_Operator]^} else if  ( callName.getType (  )  >= Token.NAME )  {^119^^^^^114^135^} else if  ( callName.getType (  )  == Token.NAME )  {^[CLASS] ClosureCodingConvention  [METHOD] typeofClassDefiningName [RETURN_TYPE] SubclassType   Node callName [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  methodName  name  boolean  DiagnosticType  OBJECTLIT_EXPECTED  int  dollarIndex  Node  callName  
[BugLab_Wrong_Operator]^methodName = name.substring ( dollarIndex  >>  1 ) ;^123^^^^^114^135^methodName = name.substring ( dollarIndex + 1 ) ;^[CLASS] ClosureCodingConvention  [METHOD] typeofClassDefiningName [RETURN_TYPE] SubclassType   Node callName [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  methodName  name  boolean  DiagnosticType  OBJECTLIT_EXPECTED  int  dollarIndex  Node  callName  
[BugLab_Wrong_Operator]^if  ( dollarIndex == -1 )  {^122^^^^^114^135^if  ( dollarIndex != -1 )  {^[CLASS] ClosureCodingConvention  [METHOD] typeofClassDefiningName [RETURN_TYPE] SubclassType   Node callName [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  methodName  name  boolean  DiagnosticType  OBJECTLIT_EXPECTED  int  dollarIndex  Node  callName  
[BugLab_Wrong_Operator]^methodName = name.substring ( dollarIndex  |  1 ) ;^123^^^^^114^135^methodName = name.substring ( dollarIndex + 1 ) ;^[CLASS] ClosureCodingConvention  [METHOD] typeofClassDefiningName [RETURN_TYPE] SubclassType   Node callName [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  methodName  name  boolean  DiagnosticType  OBJECTLIT_EXPECTED  int  dollarIndex  Node  callName  
[BugLab_Wrong_Operator]^if  ( methodName == null )  {^127^^^^^114^135^if  ( methodName != null )  {^[CLASS] ClosureCodingConvention  [METHOD] typeofClassDefiningName [RETURN_TYPE] SubclassType   Node callName [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  methodName  name  boolean  DiagnosticType  OBJECTLIT_EXPECTED  int  dollarIndex  Node  callName  
[BugLab_Variable_Misuse]^if  ( name.equals ( "inherits" )  )  {^128^^^^^114^135^if  ( methodName.equals ( "inherits" )  )  {^[CLASS] ClosureCodingConvention  [METHOD] typeofClassDefiningName [RETURN_TYPE] SubclassType   Node callName [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  methodName  name  boolean  DiagnosticType  OBJECTLIT_EXPECTED  int  dollarIndex  Node  callName  
[BugLab_Variable_Misuse]^} else if  ( name.equals ( "mixin" )  )  {^130^^^^^114^135^} else if  ( methodName.equals ( "mixin" )  )  {^[CLASS] ClosureCodingConvention  [METHOD] typeofClassDefiningName [RETURN_TYPE] SubclassType   Node callName [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  methodName  name  boolean  DiagnosticType  OBJECTLIT_EXPECTED  int  dollarIndex  Node  callName  
[BugLab_Variable_Misuse]^return 0;^131^^^^^114^135^return SubclassType.MIXIN;^[CLASS] ClosureCodingConvention  [METHOD] typeofClassDefiningName [RETURN_TYPE] SubclassType   Node callName [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  methodName  name  boolean  DiagnosticType  OBJECTLIT_EXPECTED  int  dollarIndex  Node  callName  
[BugLab_Variable_Misuse]^return null;^131^^^^^114^135^return SubclassType.MIXIN;^[CLASS] ClosureCodingConvention  [METHOD] typeofClassDefiningName [RETURN_TYPE] SubclassType   Node callName [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  methodName  name  boolean  DiagnosticType  OBJECTLIT_EXPECTED  int  dollarIndex  Node  callName  
[BugLab_Variable_Misuse]^return 4;^129^^^^^114^135^return SubclassType.INHERITS;^[CLASS] ClosureCodingConvention  [METHOD] typeofClassDefiningName [RETURN_TYPE] SubclassType   Node callName [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  methodName  name  boolean  DiagnosticType  OBJECTLIT_EXPECTED  int  dollarIndex  Node  callName  
[BugLab_Variable_Misuse]^return "superClass_".equals ( name ) ;^139^^^^^138^140^return "superClass_".equals ( propertyName ) ;^[CLASS] ClosureCodingConvention  [METHOD] isSuperClassReference [RETURN_TYPE] boolean   String propertyName [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  methodName  name  propertyName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  
[BugLab_Wrong_Operator]^if  ( qualifiedName.getType (  )  == Token.GETPROP || qualifiedName.getLastChild (  ) .getString (  ) .equals ( "prototype" )  )  {^150^151^^^^149^156^if  ( qualifiedName.getType (  )  == Token.GETPROP && qualifiedName.getLastChild (  ) .getString (  ) .equals ( "prototype" )  )  {^[CLASS] ClosureCodingConvention  [METHOD] stripPrototype [RETURN_TYPE] Node   Node qualifiedName [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  methodName  name  propertyName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  Node  qualifiedName  
[BugLab_Wrong_Operator]^if  ( qualifiedName.getType (  )  > Token.GETPROP && qualifiedName.getLastChild (  ) .getString (  ) .equals ( "prototype" )  )  {^150^151^^^^149^156^if  ( qualifiedName.getType (  )  == Token.GETPROP && qualifiedName.getLastChild (  ) .getString (  ) .equals ( "prototype" )  )  {^[CLASS] ClosureCodingConvention  [METHOD] stripPrototype [RETURN_TYPE] Node   Node qualifiedName [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  methodName  name  propertyName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  Node  qualifiedName  
[BugLab_Argument_Swapping]^return extractClassNameIfGoog ( parent, node, "goog.provide" ) ;^165^^^^^164^166^return extractClassNameIfGoog ( node, parent, "goog.provide" ) ;^[CLASS] ClosureCodingConvention  [METHOD] extractClassNameIfProvide [RETURN_TYPE] String   Node node Node parent [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  methodName  name  propertyName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  Node  node  parent  
[BugLab_Argument_Swapping]^return extractClassNameIfGoog ( parent, node, "goog.require" ) ;^175^^^^^174^176^return extractClassNameIfGoog ( node, parent, "goog.require" ) ;^[CLASS] ClosureCodingConvention  [METHOD] extractClassNameIfRequire [RETURN_TYPE] String   Node node Node parent [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  methodName  name  propertyName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  Node  node  parent  
[BugLab_Variable_Misuse]^if  ( NodeUtil.isExprCall ( node )  )  {^181^^^^^178^191^if  ( NodeUtil.isExprCall ( parent )  )  {^[CLASS] ClosureCodingConvention  [METHOD] extractClassNameIfGoog [RETURN_TYPE] String   Node node Node parent String functionName [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  Node  callee  node  parent  
[BugLab_Wrong_Operator]^if  ( callee != null || callee.getType (  )  == Token.GETPROP )  {^183^^^^^178^191^if  ( callee != null && callee.getType (  )  == Token.GETPROP )  {^[CLASS] ClosureCodingConvention  [METHOD] extractClassNameIfGoog [RETURN_TYPE] String   Node node Node parent String functionName [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  Node  callee  node  parent  
[BugLab_Wrong_Operator]^if  ( callee == null && callee.getType (  )  == Token.GETPROP )  {^183^^^^^178^191^if  ( callee != null && callee.getType (  )  == Token.GETPROP )  {^[CLASS] ClosureCodingConvention  [METHOD] extractClassNameIfGoog [RETURN_TYPE] String   Node node Node parent String functionName [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  Node  callee  node  parent  
[BugLab_Wrong_Operator]^if  ( callee != null && callee.getType (  )  != Token.GETPROP )  {^183^^^^^178^191^if  ( callee != null && callee.getType (  )  == Token.GETPROP )  {^[CLASS] ClosureCodingConvention  [METHOD] extractClassNameIfGoog [RETURN_TYPE] String   Node node Node parent String functionName [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  Node  callee  node  parent  
[BugLab_Variable_Misuse]^if  (  ( propertyName ) .equals ( qualifiedName )  )  {^185^^^^^178^191^if  (  ( functionName ) .equals ( qualifiedName )  )  {^[CLASS] ClosureCodingConvention  [METHOD] extractClassNameIfGoog [RETURN_TYPE] String   Node node Node parent String functionName [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  Node  callee  node  parent  
[BugLab_Variable_Misuse]^if  (  ( functionName ) .equals ( propertyName )  )  {^185^^^^^178^191^if  (  ( functionName ) .equals ( qualifiedName )  )  {^[CLASS] ClosureCodingConvention  [METHOD] extractClassNameIfGoog [RETURN_TYPE] String   Node node Node parent String functionName [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  Node  callee  node  parent  
[BugLab_Argument_Swapping]^if  (  ( qualifiedName ) .equals ( functionName )  )  {^185^^^^^178^191^if  (  ( functionName ) .equals ( qualifiedName )  )  {^[CLASS] ClosureCodingConvention  [METHOD] extractClassNameIfGoog [RETURN_TYPE] String   Node node Node parent String functionName [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  Node  callee  node  parent  
[BugLab_Variable_Misuse]^className = parent.getNext (  ) .getString (  ) ;^186^^^^^178^191^className = callee.getNext (  ) .getString (  ) ;^[CLASS] ClosureCodingConvention  [METHOD] extractClassNameIfGoog [RETURN_TYPE] String   Node node Node parent String functionName [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  Node  callee  node  parent  
[BugLab_Variable_Misuse]^String qualifiedName = parent.getQualifiedName (  ) ;^184^^^^^178^191^String qualifiedName = callee.getQualifiedName (  ) ;^[CLASS] ClosureCodingConvention  [METHOD] extractClassNameIfGoog [RETURN_TYPE] String   Node node Node parent String functionName [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  Node  callee  node  parent  
[BugLab_Variable_Misuse]^Node callee = parent.getFirstChild (  ) ;^182^^^^^178^191^Node callee = node.getFirstChild (  ) ;^[CLASS] ClosureCodingConvention  [METHOD] extractClassNameIfGoog [RETURN_TYPE] String   Node node Node parent String functionName [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  Node  callee  node  parent  
[BugLab_Variable_Misuse]^if  ( parent != null && callee.getType (  )  == Token.GETPROP )  {^183^^^^^178^191^if  ( callee != null && callee.getType (  )  == Token.GETPROP )  {^[CLASS] ClosureCodingConvention  [METHOD] extractClassNameIfGoog [RETURN_TYPE] String   Node node Node parent String functionName [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  Node  callee  node  parent  
[BugLab_Variable_Misuse]^if  (  ( name ) .equals ( qualifiedName )  )  {^185^^^^^178^191^if  (  ( functionName ) .equals ( qualifiedName )  )  {^[CLASS] ClosureCodingConvention  [METHOD] extractClassNameIfGoog [RETURN_TYPE] String   Node node Node parent String functionName [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  Node  callee  node  parent  
[BugLab_Variable_Misuse]^if  (  ( functionName ) .equals ( name )  )  {^185^^^^^178^191^if  (  ( functionName ) .equals ( qualifiedName )  )  {^[CLASS] ClosureCodingConvention  [METHOD] extractClassNameIfGoog [RETURN_TYPE] String   Node node Node parent String functionName [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  Node  callee  node  parent  
[BugLab_Variable_Misuse]^return propertyName;^190^^^^^178^191^return className;^[CLASS] ClosureCodingConvention  [METHOD] extractClassNameIfGoog [RETURN_TYPE] String   Node node Node parent String functionName [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  Node  callee  node  parent  
[BugLab_Variable_Misuse]^Node callName = typeArray.getFirstChild (  ) ;^213^^^^^212^229^Node callName = n.getFirstChild (  ) ;^[CLASS] ClosureCodingConvention  [METHOD] identifyTypeDeclarationCall [RETURN_TYPE] List   Node n [VARIABLES] List  typeNames  Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  n  name  typeArray  
[BugLab_Variable_Misuse]^if  ( "goog.addDependency".equals ( name.getQualifiedName (  )  )  && n.getChildCount (  )  >= 3 )  {^214^215^^^^212^229^if  ( "goog.addDependency".equals ( callName.getQualifiedName (  )  )  && n.getChildCount (  )  >= 3 )  {^[CLASS] ClosureCodingConvention  [METHOD] identifyTypeDeclarationCall [RETURN_TYPE] List   Node n [VARIABLES] List  typeNames  Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  n  name  typeArray  
[BugLab_Variable_Misuse]^if  ( "goog.addDependency".equals ( callName.getQualifiedName (  )  )  && name.getChildCount (  )  >= 3 )  {^214^215^^^^212^229^if  ( "goog.addDependency".equals ( callName.getQualifiedName (  )  )  && n.getChildCount (  )  >= 3 )  {^[CLASS] ClosureCodingConvention  [METHOD] identifyTypeDeclarationCall [RETURN_TYPE] List   Node n [VARIABLES] List  typeNames  Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  n  name  typeArray  
[BugLab_Argument_Swapping]^if  ( "goog.addDependency".equals ( n.getQualifiedName (  )  )  && callName.getChildCount (  )  >= 3 )  {^214^215^^^^212^229^if  ( "goog.addDependency".equals ( callName.getQualifiedName (  )  )  && n.getChildCount (  )  >= 3 )  {^[CLASS] ClosureCodingConvention  [METHOD] identifyTypeDeclarationCall [RETURN_TYPE] List   Node n [VARIABLES] List  typeNames  Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  n  name  typeArray  
[BugLab_Wrong_Operator]^if  ( "goog.addDependency".equals ( callName.getQualifiedName (  )  )  || n.getChildCount (  )  >= 3 )  {^214^215^^^^212^229^if  ( "goog.addDependency".equals ( callName.getQualifiedName (  )  )  && n.getChildCount (  )  >= 3 )  {^[CLASS] ClosureCodingConvention  [METHOD] identifyTypeDeclarationCall [RETURN_TYPE] List   Node n [VARIABLES] List  typeNames  Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  n  name  typeArray  
[BugLab_Wrong_Operator]^if  ( "goog.addDependency".equals ( callName.getQualifiedName (  )  )  && n.getChildCount (  )  == 3 )  {^214^215^^^^212^229^if  ( "goog.addDependency".equals ( callName.getQualifiedName (  )  )  && n.getChildCount (  )  >= 3 )  {^[CLASS] ClosureCodingConvention  [METHOD] identifyTypeDeclarationCall [RETURN_TYPE] List   Node n [VARIABLES] List  typeNames  Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  n  name  typeArray  
[BugLab_Variable_Misuse]^if  ( name.getType (  )  == Token.ARRAYLIT )  {^217^^^^^212^229^if  ( typeArray.getType (  )  == Token.ARRAYLIT )  {^[CLASS] ClosureCodingConvention  [METHOD] identifyTypeDeclarationCall [RETURN_TYPE] List   Node n [VARIABLES] List  typeNames  Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  n  name  typeArray  
[BugLab_Wrong_Operator]^if  ( typeArray.getType (  )  != Token.ARRAYLIT )  {^217^^^^^212^229^if  ( typeArray.getType (  )  == Token.ARRAYLIT )  {^[CLASS] ClosureCodingConvention  [METHOD] identifyTypeDeclarationCall [RETURN_TYPE] List   Node n [VARIABLES] List  typeNames  Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  n  name  typeArray  
[BugLab_Variable_Misuse]^if  ( typeArray.getType (  )  == Token.STRING )  {^221^^^^^212^229^if  ( name.getType (  )  == Token.STRING )  {^[CLASS] ClosureCodingConvention  [METHOD] identifyTypeDeclarationCall [RETURN_TYPE] List   Node n [VARIABLES] List  typeNames  Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  n  name  typeArray  
[BugLab_Wrong_Operator]^if  ( name.getType (  )  >= Token.STRING )  {^221^^^^^212^229^if  ( name.getType (  )  == Token.STRING )  {^[CLASS] ClosureCodingConvention  [METHOD] identifyTypeDeclarationCall [RETURN_TYPE] List   Node n [VARIABLES] List  typeNames  Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  n  name  typeArray  
[BugLab_Variable_Misuse]^typeNames.add ( typeArray.getString (  )  ) ;^222^^^^^212^229^typeNames.add ( name.getString (  )  ) ;^[CLASS] ClosureCodingConvention  [METHOD] identifyTypeDeclarationCall [RETURN_TYPE] List   Node n [VARIABLES] List  typeNames  Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  n  name  typeArray  
[BugLab_Variable_Misuse]^for  ( Node name = n.getFirstChild (  ) ; name != null;^219^^^^^212^229^for  ( Node name = typeArray.getFirstChild (  ) ; name != null;^[CLASS] ClosureCodingConvention  [METHOD] identifyTypeDeclarationCall [RETURN_TYPE] List   Node n [VARIABLES] List  typeNames  Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  n  name  typeArray  
[BugLab_Variable_Misuse]^for  ( Node typeArray = typeArray.getFirstChild (  ) ; name != null;^219^^^^^212^229^for  ( Node name = typeArray.getFirstChild (  ) ; name != null;^[CLASS] ClosureCodingConvention  [METHOD] identifyTypeDeclarationCall [RETURN_TYPE] List   Node n [VARIABLES] List  typeNames  Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  n  name  typeArray  
[BugLab_Argument_Swapping]^for  ( Node typeArray = name.getFirstChild (  ) ; name != null;^219^^^^^212^229^for  ( Node name = typeArray.getFirstChild (  ) ; name != null;^[CLASS] ClosureCodingConvention  [METHOD] identifyTypeDeclarationCall [RETURN_TYPE] List   Node n [VARIABLES] List  typeNames  Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  n  name  typeArray  
[BugLab_Wrong_Operator]^for  ( Node name = typeArray.getFirstChild (  ) ; name == null;^219^^^^^212^229^for  ( Node name = typeArray.getFirstChild (  ) ; name != null;^[CLASS] ClosureCodingConvention  [METHOD] identifyTypeDeclarationCall [RETURN_TYPE] List   Node n [VARIABLES] List  typeNames  Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  n  name  typeArray  
[BugLab_Variable_Misuse]^if  ( name.getType (  )  == Token.4 )  {^221^^^^^212^229^if  ( name.getType (  )  == Token.STRING )  {^[CLASS] ClosureCodingConvention  [METHOD] identifyTypeDeclarationCall [RETURN_TYPE] List   Node n [VARIABLES] List  typeNames  Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  n  name  typeArray  
[BugLab_Wrong_Operator]^if  ( name.getType (  )  != Token.STRING )  {^221^^^^^212^229^if  ( name.getType (  )  == Token.STRING )  {^[CLASS] ClosureCodingConvention  [METHOD] identifyTypeDeclarationCall [RETURN_TYPE] List   Node n [VARIABLES] List  typeNames  Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  n  name  typeArray  
[BugLab_Variable_Misuse]^name = typeArray.getNext (  )  )  {^220^^^^^212^229^name = name.getNext (  )  )  {^[CLASS] ClosureCodingConvention  [METHOD] identifyTypeDeclarationCall [RETURN_TYPE] List   Node n [VARIABLES] List  typeNames  Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  n  name  typeArray  
[BugLab_Variable_Misuse]^for  ( Node name = name.getFirstChild (  ) ; name != null;^219^^^^^212^229^for  ( Node name = typeArray.getFirstChild (  ) ; name != null;^[CLASS] ClosureCodingConvention  [METHOD] identifyTypeDeclarationCall [RETURN_TYPE] List   Node n [VARIABLES] List  typeNames  Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  n  name  typeArray  
[BugLab_Variable_Misuse]^if  ( name.getType (  )  == Token.this )  {^221^^^^^212^229^if  ( name.getType (  )  == Token.STRING )  {^[CLASS] ClosureCodingConvention  [METHOD] identifyTypeDeclarationCall [RETURN_TYPE] List   Node n [VARIABLES] List  typeNames  Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  n  name  typeArray  
[BugLab_Variable_Misuse]^Node typeArray = name.getNext (  ) .getNext (  ) ;^216^^^^^212^229^Node typeArray = callName.getNext (  ) .getNext (  ) ;^[CLASS] ClosureCodingConvention  [METHOD] identifyTypeDeclarationCall [RETURN_TYPE] List   Node n [VARIABLES] List  typeNames  Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  n  name  typeArray  
[BugLab_Variable_Misuse]^Node typeArray = typeArray.getNext (  ) .getNext (  ) ;^216^^^^^212^229^Node typeArray = callName.getNext (  ) .getNext (  ) ;^[CLASS] ClosureCodingConvention  [METHOD] identifyTypeDeclarationCall [RETURN_TYPE] List   Node n [VARIABLES] List  typeNames  Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  n  name  typeArray  
[BugLab_Wrong_Operator]^if  ( typeArray.getType (  )  > Token.ARRAYLIT )  {^217^^^^^212^229^if  ( typeArray.getType (  )  == Token.ARRAYLIT )  {^[CLASS] ClosureCodingConvention  [METHOD] identifyTypeDeclarationCall [RETURN_TYPE] List   Node n [VARIABLES] List  typeNames  Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  n  name  typeArray  
[BugLab_Wrong_Operator]^if  ( typeArray.getType (  )  >= Token.ARRAYLIT )  {^217^^^^^212^229^if  ( typeArray.getType (  )  == Token.ARRAYLIT )  {^[CLASS] ClosureCodingConvention  [METHOD] identifyTypeDeclarationCall [RETURN_TYPE] List   Node n [VARIABLES] List  typeNames  Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  n  name  typeArray  
[BugLab_Variable_Misuse]^if  ( name.getType (  )  == Token.null )  {^221^^^^^212^229^if  ( name.getType (  )  == Token.STRING )  {^[CLASS] ClosureCodingConvention  [METHOD] identifyTypeDeclarationCall [RETURN_TYPE] List   Node n [VARIABLES] List  typeNames  Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  n  name  typeArray  
[BugLab_Wrong_Operator]^if  ( name.getType (  )  < Token.STRING )  {^221^^^^^212^229^if  ( name.getType (  )  == Token.STRING )  {^[CLASS] ClosureCodingConvention  [METHOD] identifyTypeDeclarationCall [RETURN_TYPE] List   Node n [VARIABLES] List  typeNames  Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  n  name  typeArray  
[BugLab_Variable_Misuse]^if  ( "goog.addDependency".equals ( typeArray.getQualifiedName (  )  )  && n.getChildCount (  )  >= 3 )  {^214^215^^^^212^229^if  ( "goog.addDependency".equals ( callName.getQualifiedName (  )  )  && n.getChildCount (  )  >= 3 )  {^[CLASS] ClosureCodingConvention  [METHOD] identifyTypeDeclarationCall [RETURN_TYPE] List   Node n [VARIABLES] List  typeNames  Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  n  name  typeArray  
[BugLab_Variable_Misuse]^Node firstChild = firstChild.getFirstChild (  ) ;^233^^^^^232^247^Node firstChild = n.getFirstChild (  ) ;^[CLASS] ClosureCodingConvention  [METHOD] identifyTypeDefAssign [RETURN_TYPE] String   Node n [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  int  type  Node  firstChild  n  
[BugLab_Variable_Misuse]^int type = firstChild.getType (  ) ;^234^^^^^232^247^int type = n.getType (  ) ;^[CLASS] ClosureCodingConvention  [METHOD] identifyTypeDefAssign [RETURN_TYPE] String   Node n [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  int  type  Node  firstChild  n  
[BugLab_Wrong_Operator]^if  ( type != Token.ASSIGN )  {^235^^^^^232^247^if  ( type == Token.ASSIGN )  {^[CLASS] ClosureCodingConvention  [METHOD] identifyTypeDefAssign [RETURN_TYPE] String   Node n [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  int  type  Node  firstChild  n  
[BugLab_Argument_Swapping]^} else if  ( firstChild == Token.VAR && type.hasChildren (  )  )  {^239^^^^^232^247^} else if  ( type == Token.VAR && firstChild.hasChildren (  )  )  {^[CLASS] ClosureCodingConvention  [METHOD] identifyTypeDefAssign [RETURN_TYPE] String   Node n [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  int  type  Node  firstChild  n  
[BugLab_Wrong_Operator]^} else if  ( type == Token.VAR || firstChild.hasChildren (  )  )  {^239^^^^^232^247^} else if  ( type == Token.VAR && firstChild.hasChildren (  )  )  {^[CLASS] ClosureCodingConvention  [METHOD] identifyTypeDefAssign [RETURN_TYPE] String   Node n [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  int  type  Node  firstChild  n  
[BugLab_Wrong_Operator]^} else if  ( type <= Token.VAR && firstChild.hasChildren (  )  )  {^239^^^^^232^247^} else if  ( type == Token.VAR && firstChild.hasChildren (  )  )  {^[CLASS] ClosureCodingConvention  [METHOD] identifyTypeDefAssign [RETURN_TYPE] String   Node n [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  int  type  Node  firstChild  n  
[BugLab_Variable_Misuse]^if  ( TYPEDEF_NAME.equals ( n.getFirstChild (  ) .getQualifiedName (  )  )  )  {^240^241^^^^232^247^if  ( TYPEDEF_NAME.equals ( firstChild.getFirstChild (  ) .getQualifiedName (  )  )  )  {^[CLASS] ClosureCodingConvention  [METHOD] identifyTypeDefAssign [RETURN_TYPE] String   Node n [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  int  type  Node  firstChild  n  
[BugLab_Variable_Misuse]^if  ( qualifiedName.equals ( firstChild.getFirstChild (  ) .getQualifiedName (  )  )  )  {^240^241^^^^232^247^if  ( TYPEDEF_NAME.equals ( firstChild.getFirstChild (  ) .getQualifiedName (  )  )  )  {^[CLASS] ClosureCodingConvention  [METHOD] identifyTypeDefAssign [RETURN_TYPE] String   Node n [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  int  type  Node  firstChild  n  
[BugLab_Argument_Swapping]^if  ( firstChild.equals ( TYPEDEF_NAME.getFirstChild (  ) .getQualifiedName (  )  )  )  {^240^241^^^^232^247^if  ( TYPEDEF_NAME.equals ( firstChild.getFirstChild (  ) .getQualifiedName (  )  )  )  {^[CLASS] ClosureCodingConvention  [METHOD] identifyTypeDefAssign [RETURN_TYPE] String   Node n [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  int  type  Node  firstChild  n  
[BugLab_Variable_Misuse]^return n.getString (  ) ;^242^^^^^232^247^return firstChild.getString (  ) ;^[CLASS] ClosureCodingConvention  [METHOD] identifyTypeDefAssign [RETURN_TYPE] String   Node n [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  int  type  Node  firstChild  n  
[BugLab_Variable_Misuse]^if  ( name.equals ( firstChild.getFirstChild (  ) .getQualifiedName (  )  )  )  {^240^241^^^^232^247^if  ( TYPEDEF_NAME.equals ( firstChild.getFirstChild (  ) .getQualifiedName (  )  )  )  {^[CLASS] ClosureCodingConvention  [METHOD] identifyTypeDefAssign [RETURN_TYPE] String   Node n [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  int  type  Node  firstChild  n  
[BugLab_Variable_Misuse]^if  ( propertyName.equals ( firstChild.getFirstChild (  ) .getQualifiedName (  )  )  )  {^240^241^^^^232^247^if  ( TYPEDEF_NAME.equals ( firstChild.getFirstChild (  ) .getQualifiedName (  )  )  )  {^[CLASS] ClosureCodingConvention  [METHOD] identifyTypeDefAssign [RETURN_TYPE] String   Node n [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  int  type  Node  firstChild  n  
[BugLab_Variable_Misuse]^} else if  ( type == Token.VAR && n.hasChildren (  )  )  {^239^^^^^232^247^} else if  ( type == Token.VAR && firstChild.hasChildren (  )  )  {^[CLASS] ClosureCodingConvention  [METHOD] identifyTypeDefAssign [RETURN_TYPE] String   Node n [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  int  type  Node  firstChild  n  
[BugLab_Variable_Misuse]^if  ( TYPEDEF_NAME.equals ( firstChild.getLastChild (  ) .getQualifiedName (  )  )  )  {^236^^^^^232^247^if  ( TYPEDEF_NAME.equals ( n.getLastChild (  ) .getQualifiedName (  )  )  )  {^[CLASS] ClosureCodingConvention  [METHOD] identifyTypeDefAssign [RETURN_TYPE] String   Node n [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  int  type  Node  firstChild  n  
[BugLab_Variable_Misuse]^if  ( name.equals ( n.getLastChild (  ) .getQualifiedName (  )  )  )  {^236^^^^^232^247^if  ( TYPEDEF_NAME.equals ( n.getLastChild (  ) .getQualifiedName (  )  )  )  {^[CLASS] ClosureCodingConvention  [METHOD] identifyTypeDefAssign [RETURN_TYPE] String   Node n [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  int  type  Node  firstChild  n  
[BugLab_Argument_Swapping]^if  ( n.equals ( TYPEDEF_NAME.getLastChild (  ) .getQualifiedName (  )  )  )  {^236^^^^^232^247^if  ( TYPEDEF_NAME.equals ( n.getLastChild (  ) .getQualifiedName (  )  )  )  {^[CLASS] ClosureCodingConvention  [METHOD] identifyTypeDefAssign [RETURN_TYPE] String   Node n [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  int  type  Node  firstChild  n  
[BugLab_Variable_Misuse]^return n.getQualifiedName (  ) ;^237^^^^^232^247^return firstChild.getQualifiedName (  ) ;^[CLASS] ClosureCodingConvention  [METHOD] identifyTypeDefAssign [RETURN_TYPE] String   Node n [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  int  type  Node  firstChild  n  
[BugLab_Variable_Misuse]^if  ( qualifiedName.equals ( n.getLastChild (  ) .getQualifiedName (  )  )  )  {^236^^^^^232^247^if  ( TYPEDEF_NAME.equals ( n.getLastChild (  ) .getQualifiedName (  )  )  )  {^[CLASS] ClosureCodingConvention  [METHOD] identifyTypeDefAssign [RETURN_TYPE] String   Node n [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  int  type  Node  firstChild  n  
[BugLab_Wrong_Operator]^} else if  ( type != Token.VAR && firstChild.hasChildren (  )  )  {^239^^^^^232^247^} else if  ( type == Token.VAR && firstChild.hasChildren (  )  )  {^[CLASS] ClosureCodingConvention  [METHOD] identifyTypeDefAssign [RETURN_TYPE] String   Node n [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  int  type  Node  firstChild  n  
[BugLab_Variable_Misuse]^Node callName = classNode.getFirstChild (  ) ;^256^^^^^255^268^Node callName = callNode.getFirstChild (  ) ;^[CLASS] ClosureCodingConvention  [METHOD] getSingletonGetterClassName [RETURN_TYPE] String   Node callNode [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  callNode  classNode  
[BugLab_Variable_Misuse]^if  ( !"goog.addSingletonGetter".equals ( classNode.getQualifiedName (  )  )  || callName.getChildCount (  )  != 2 )  {^257^258^^^^255^268^if  ( !"goog.addSingletonGetter".equals ( callName.getQualifiedName (  )  )  || callName.getChildCount (  )  != 2 )  {^[CLASS] ClosureCodingConvention  [METHOD] getSingletonGetterClassName [RETURN_TYPE] String   Node callNode [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  callNode  classNode  
[BugLab_Wrong_Operator]^if  ( !"goog.addSingletonGetter".equals ( callName.getQualifiedName (  )  )  && callName.getChildCount (  )  != 2 )  {^257^258^^^^255^268^if  ( !"goog.addSingletonGetter".equals ( callName.getQualifiedName (  )  )  || callName.getChildCount (  )  != 2 )  {^[CLASS] ClosureCodingConvention  [METHOD] getSingletonGetterClassName [RETURN_TYPE] String   Node callNode [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  callNode  classNode  
[BugLab_Wrong_Operator]^if  ( !"goog.addSingletonGetter".equals ( callName.getQualifiedName (  )  )  || callName.getChildCount (  )  == 2 )  {^257^258^^^^255^268^if  ( !"goog.addSingletonGetter".equals ( callName.getQualifiedName (  )  )  || callName.getChildCount (  )  != 2 )  {^[CLASS] ClosureCodingConvention  [METHOD] getSingletonGetterClassName [RETURN_TYPE] String   Node callNode [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  callNode  classNode  
[BugLab_Variable_Misuse]^Node classNode = callNode.getNext (  ) ;^262^^^^^255^268^Node classNode = callName.getNext (  ) ;^[CLASS] ClosureCodingConvention  [METHOD] getSingletonGetterClassName [RETURN_TYPE] String   Node callNode [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  callNode  classNode  
[BugLab_Variable_Misuse]^Node classNode = classNode.getNext (  ) ;^262^^^^^255^268^Node classNode = callName.getNext (  ) ;^[CLASS] ClosureCodingConvention  [METHOD] getSingletonGetterClassName [RETURN_TYPE] String   Node callNode [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  callNode  classNode  
[BugLab_Variable_Misuse]^return classNode.getNext (  ) .getQualifiedName (  ) ;^267^^^^^255^268^return callName.getNext (  ) .getQualifiedName (  ) ;^[CLASS] ClosureCodingConvention  [METHOD] getSingletonGetterClassName [RETURN_TYPE] String   Node callNode [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  callNode  classNode  
[BugLab_Wrong_Literal]^functionType.defineDeclaredProperty ( "getInstance", getterType, true ) ;^273^^^^^271^275^functionType.defineDeclaredProperty ( "getInstance", getterType, false ) ;^[CLASS] ClosureCodingConvention  [METHOD] applySingletonGetter [RETURN_TYPE] void   FunctionType functionType FunctionType getterType ObjectType objectType [VARIABLES] ObjectType  objectType  Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  FunctionType  functionType  getterType  
[BugLab_Wrong_Literal]^functionType.defineDeclaredProperty ( "instance_", objectType, true ) ;^274^^^^^271^275^functionType.defineDeclaredProperty ( "instance_", objectType, false ) ;^[CLASS] ClosureCodingConvention  [METHOD] applySingletonGetter [RETURN_TYPE] void   FunctionType functionType FunctionType getterType ObjectType objectType [VARIABLES] ObjectType  objectType  Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  FunctionType  functionType  getterType  
[BugLab_Wrong_Operator]^Preconditions.checkArgument ( call.getType (  )  < Token.CALL ) ;^289^^^^^288^292^Preconditions.checkArgument ( call.getType (  )  == Token.CALL ) ;^[CLASS] ClosureCodingConvention  [METHOD] isPropertyTestFunction [RETURN_TYPE] boolean   Node call [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  Node  call  
[BugLab_Argument_Swapping]^return call.contains ( propertyTestFunctions.getFirstChild (  ) .getQualifiedName (  )  ) ;^290^291^^^^288^292^return propertyTestFunctions.contains ( call.getFirstChild (  ) .getQualifiedName (  )  ) ;^[CLASS] ClosureCodingConvention  [METHOD] isPropertyTestFunction [RETURN_TYPE] boolean   Node call [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  Node  call  
[BugLab_Variable_Misuse]^Preconditions.checkArgument ( typeNode.getType (  )  == Token.CALL ) ;^297^^^^^295^318^Preconditions.checkArgument ( callNode.getType (  )  == Token.CALL ) ;^[CLASS] ClosureCodingConvention  [METHOD] getObjectLiteralCast [RETURN_TYPE] ObjectLiteralCast   NodeTraversal t Node callNode [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  NodeTraversal  t  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  callNode  objectNode  typeNode  
[BugLab_Wrong_Operator]^Preconditions.checkArgument ( callNode.getType (  )  != Token.CALL ) ;^297^^^^^295^318^Preconditions.checkArgument ( callNode.getType (  )  == Token.CALL ) ;^[CLASS] ClosureCodingConvention  [METHOD] getObjectLiteralCast [RETURN_TYPE] ObjectLiteralCast   NodeTraversal t Node callNode [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  NodeTraversal  t  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  callNode  objectNode  typeNode  
[BugLab_Variable_Misuse]^Node callName = typeNode.getFirstChild (  ) ;^298^^^^^295^318^Node callName = callNode.getFirstChild (  ) ;^[CLASS] ClosureCodingConvention  [METHOD] getObjectLiteralCast [RETURN_TYPE] ObjectLiteralCast   NodeTraversal t Node callNode [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  NodeTraversal  t  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  callNode  objectNode  typeNode  
[BugLab_Variable_Misuse]^if  ( !"goog.reflect.object".equals ( typeNode.getQualifiedName (  )  )  || callName.getChildCount (  )  != 2 )  {^299^300^^^^295^318^if  ( !"goog.reflect.object".equals ( callName.getQualifiedName (  )  )  || callName.getChildCount (  )  != 2 )  {^[CLASS] ClosureCodingConvention  [METHOD] getObjectLiteralCast [RETURN_TYPE] ObjectLiteralCast   NodeTraversal t Node callNode [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  NodeTraversal  t  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  callNode  objectNode  typeNode  
[BugLab_Wrong_Operator]^if  ( !"goog.reflect.object".equals ( callName.getQualifiedName (  )  )  && callName.getChildCount (  )  != 2 )  {^299^300^^^^295^318^if  ( !"goog.reflect.object".equals ( callName.getQualifiedName (  )  )  || callName.getChildCount (  )  != 2 )  {^[CLASS] ClosureCodingConvention  [METHOD] getObjectLiteralCast [RETURN_TYPE] ObjectLiteralCast   NodeTraversal t Node callNode [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  NodeTraversal  t  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  callNode  objectNode  typeNode  
[BugLab_Wrong_Operator]^if  ( !"goog.reflect.object".equals ( callName.getQualifiedName (  )  )  || callName.getChildCount (  )  == 2 )  {^299^300^^^^295^318^if  ( !"goog.reflect.object".equals ( callName.getQualifiedName (  )  )  || callName.getChildCount (  )  != 2 )  {^[CLASS] ClosureCodingConvention  [METHOD] getObjectLiteralCast [RETURN_TYPE] ObjectLiteralCast   NodeTraversal t Node callNode [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  NodeTraversal  t  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  callNode  objectNode  typeNode  
[BugLab_Wrong_Literal]^if  ( !"goog.reflect.object".equals ( callName.getQualifiedName (  )  )  || callName.getChildCount (  )  != 1 )  {^299^300^^^^295^318^if  ( !"goog.reflect.object".equals ( callName.getQualifiedName (  )  )  || callName.getChildCount (  )  != 2 )  {^[CLASS] ClosureCodingConvention  [METHOD] getObjectLiteralCast [RETURN_TYPE] ObjectLiteralCast   NodeTraversal t Node callNode [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  NodeTraversal  t  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  callNode  objectNode  typeNode  
[BugLab_Variable_Misuse]^Node typeNode = objectNode.getNext (  ) ;^304^^^^^295^318^Node typeNode = callName.getNext (  ) ;^[CLASS] ClosureCodingConvention  [METHOD] getObjectLiteralCast [RETURN_TYPE] ObjectLiteralCast   NodeTraversal t Node callNode [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  NodeTraversal  t  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  callNode  objectNode  typeNode  
[BugLab_Variable_Misuse]^Node typeNode = typeNode.getNext (  ) ;^304^^^^^295^318^Node typeNode = callName.getNext (  ) ;^[CLASS] ClosureCodingConvention  [METHOD] getObjectLiteralCast [RETURN_TYPE] ObjectLiteralCast   NodeTraversal t Node callNode [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  NodeTraversal  t  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  callNode  objectNode  typeNode  
[BugLab_Variable_Misuse]^Node objectNode = callNode.getNext (  ) ;^309^^^^^295^318^Node objectNode = typeNode.getNext (  ) ;^[CLASS] ClosureCodingConvention  [METHOD] getObjectLiteralCast [RETURN_TYPE] ObjectLiteralCast   NodeTraversal t Node callNode [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  NodeTraversal  t  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  callNode  objectNode  typeNode  
[BugLab_Variable_Misuse]^Node objectNode = objectNode.getNext (  ) ;^309^^^^^295^318^Node objectNode = typeNode.getNext (  ) ;^[CLASS] ClosureCodingConvention  [METHOD] getObjectLiteralCast [RETURN_TYPE] ObjectLiteralCast   NodeTraversal t Node callNode [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  NodeTraversal  t  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  callNode  objectNode  typeNode  
[BugLab_Variable_Misuse]^if  ( typeNode.getType (  )  != Token.OBJECTLIT )  {^310^^^^^295^318^if  ( objectNode.getType (  )  != Token.OBJECTLIT )  {^[CLASS] ClosureCodingConvention  [METHOD] getObjectLiteralCast [RETURN_TYPE] ObjectLiteralCast   NodeTraversal t Node callNode [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  NodeTraversal  t  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  callNode  objectNode  typeNode  
[BugLab_Variable_Misuse]^if  ( objectNode.getType (  )  != Token.null )  {^310^^^^^295^318^if  ( objectNode.getType (  )  != Token.OBJECTLIT )  {^[CLASS] ClosureCodingConvention  [METHOD] getObjectLiteralCast [RETURN_TYPE] ObjectLiteralCast   NodeTraversal t Node callNode [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  NodeTraversal  t  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  callNode  objectNode  typeNode  
[BugLab_Wrong_Operator]^if  ( objectNode.getType (  )  == Token.OBJECTLIT )  {^310^^^^^295^318^if  ( objectNode.getType (  )  != Token.OBJECTLIT )  {^[CLASS] ClosureCodingConvention  [METHOD] getObjectLiteralCast [RETURN_TYPE] ObjectLiteralCast   NodeTraversal t Node callNode [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  NodeTraversal  t  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  callNode  objectNode  typeNode  
[BugLab_Variable_Misuse]^t.getCompiler (  ) .report ( JSError.make ( t.getSourceName (  ) , typeNode, OBJECTLIT_EXPECTED )  ) ;^311^312^^^^295^318^t.getCompiler (  ) .report ( JSError.make ( t.getSourceName (  ) , callNode, OBJECTLIT_EXPECTED )  ) ;^[CLASS] ClosureCodingConvention  [METHOD] getObjectLiteralCast [RETURN_TYPE] ObjectLiteralCast   NodeTraversal t Node callNode [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  NodeTraversal  t  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  callNode  objectNode  typeNode  
[BugLab_Argument_Swapping]^t.getCompiler (  ) .report ( JSError.make ( callNode.getSourceName (  ) , t, OBJECTLIT_EXPECTED )  ) ;^311^312^^^^295^318^t.getCompiler (  ) .report ( JSError.make ( t.getSourceName (  ) , callNode, OBJECTLIT_EXPECTED )  ) ;^[CLASS] ClosureCodingConvention  [METHOD] getObjectLiteralCast [RETURN_TYPE] ObjectLiteralCast   NodeTraversal t Node callNode [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  NodeTraversal  t  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  callNode  objectNode  typeNode  
[BugLab_Argument_Swapping]^t.getCompiler (  ) .report ( JSError.make ( OBJECTLIT_EXPECTED.getSourceName (  ) , callNode, t )  ) ;^311^312^^^^295^318^t.getCompiler (  ) .report ( JSError.make ( t.getSourceName (  ) , callNode, OBJECTLIT_EXPECTED )  ) ;^[CLASS] ClosureCodingConvention  [METHOD] getObjectLiteralCast [RETURN_TYPE] ObjectLiteralCast   NodeTraversal t Node callNode [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  NodeTraversal  t  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  callNode  objectNode  typeNode  
[BugLab_Argument_Swapping]^t.getCompiler (  ) .report ( JSError.make ( t.getSourceName (  ) , OBJECTLIT_EXPECTED, callNode )  ) ;^311^312^^^^295^318^t.getCompiler (  ) .report ( JSError.make ( t.getSourceName (  ) , callNode, OBJECTLIT_EXPECTED )  ) ;^[CLASS] ClosureCodingConvention  [METHOD] getObjectLiteralCast [RETURN_TYPE] ObjectLiteralCast   NodeTraversal t Node callNode [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  NodeTraversal  t  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  callNode  objectNode  typeNode  
[BugLab_Variable_Misuse]^return new ObjectLiteralCast ( objectNode.getQualifiedName (  ) , typeNode.getNext (  )  ) ;^316^317^^^^295^318^return new ObjectLiteralCast ( typeNode.getQualifiedName (  ) , typeNode.getNext (  )  ) ;^[CLASS] ClosureCodingConvention  [METHOD] getObjectLiteralCast [RETURN_TYPE] ObjectLiteralCast   NodeTraversal t Node callNode [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  NodeTraversal  t  DiagnosticType  OBJECTLIT_EXPECTED  Node  callName  callNode  objectNode  typeNode  
[BugLab_Wrong_Literal]^return true;^325^^^^^324^326^return false;^[CLASS] ClosureCodingConvention  [METHOD] isOptionalParameter [RETURN_TYPE] boolean   Node parameter [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  Node  parameter  
[BugLab_Wrong_Literal]^return true;^333^^^^^332^334^return false;^[CLASS] ClosureCodingConvention  [METHOD] isVarArgsParameter [RETURN_TYPE] boolean   Node parameter [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  Node  parameter  
[BugLab_Wrong_Literal]^return true;^341^^^^^340^342^return false;^[CLASS] ClosureCodingConvention  [METHOD] isPrivate [RETURN_TYPE] boolean   String name [VARIABLES] Set  propertyTestFunctions  String  TYPEDEF_NAME  className  functionName  methodName  name  propertyName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  
