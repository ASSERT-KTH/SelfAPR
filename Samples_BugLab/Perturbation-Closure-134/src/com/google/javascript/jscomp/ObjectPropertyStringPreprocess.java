[buglab_swap_variables]^new Node ( Token. Node.newString ( Token.NAME, EXTERN_OBJECT_PROPERTY_STRING )  )  ) ;^70^71^^^^68^73^new Node ( Token.VAR, Node.newString ( Token.NAME, EXTERN_OBJECT_PROPERTY_STRING )  )  ) ;^[CLASS] ObjectPropertyStringPreprocess Callback  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  String  EXTERN_OBJECT_PROPERTY_STRING  OBJECT_PROPERTY_STRING  boolean  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  QUALIFIED_NAME_EXPECTED_ERROR  STRING_LITERAL_EXPECTED_ERROR  Node  externs  root  
[buglab_swap_variables]^new Node ( Token.VAR, Node.newString ( Token.NAME )  )  ) ;^70^71^^^^68^73^new Node ( Token.VAR, Node.newString ( Token.NAME, EXTERN_OBJECT_PROPERTY_STRING )  )  ) ;^[CLASS] ObjectPropertyStringPreprocess Callback  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  String  EXTERN_OBJECT_PROPERTY_STRING  OBJECT_PROPERTY_STRING  boolean  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  QUALIFIED_NAME_EXPECTED_ERROR  STRING_LITERAL_EXPECTED_ERROR  Node  externs  root  
[buglab_swap_variables]^externs.addChildToBack ( new Node ( Token. Node.newString ( Token.NAME, EXTERN_OBJECT_PROPERTY_STRING )  )  ) ;^69^70^71^^^68^73^externs.addChildToBack ( new Node ( Token.VAR, Node.newString ( Token.NAME, EXTERN_OBJECT_PROPERTY_STRING )  )  ) ;^[CLASS] ObjectPropertyStringPreprocess Callback  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  String  EXTERN_OBJECT_PROPERTY_STRING  OBJECT_PROPERTY_STRING  boolean  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  QUALIFIED_NAME_EXPECTED_ERROR  STRING_LITERAL_EXPECTED_ERROR  Node  externs  root  
[buglab_swap_variables]^externs.addChildToBack ( new Node ( Token.VAR, Node.newString ( Token.NAME )  )  ) ;^69^70^71^^^68^73^externs.addChildToBack ( new Node ( Token.VAR, Node.newString ( Token.NAME, EXTERN_OBJECT_PROPERTY_STRING )  )  ) ;^[CLASS] ObjectPropertyStringPreprocess Callback  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  String  EXTERN_OBJECT_PROPERTY_STRING  OBJECT_PROPERTY_STRING  boolean  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  QUALIFIED_NAME_EXPECTED_ERROR  STRING_LITERAL_EXPECTED_ERROR  Node  externs  root  
[buglab_swap_variables]^NodeTraversal.traverse ( root, compiler, new Callback (  )  ) ;^72^^^^^68^73^NodeTraversal.traverse ( compiler, root, new Callback (  )  ) ;^[CLASS] ObjectPropertyStringPreprocess Callback  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  String  EXTERN_OBJECT_PROPERTY_STRING  OBJECT_PROPERTY_STRING  boolean  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  QUALIFIED_NAME_EXPECTED_ERROR  STRING_LITERAL_EXPECTED_ERROR  Node  externs  root  
[buglab_swap_variables]^NodeTraversal.traverse ( compiler,  new Callback (  )  ) ;^72^^^^^68^73^NodeTraversal.traverse ( compiler, root, new Callback (  )  ) ;^[CLASS] ObjectPropertyStringPreprocess Callback  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  String  EXTERN_OBJECT_PROPERTY_STRING  OBJECT_PROPERTY_STRING  boolean  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  QUALIFIED_NAME_EXPECTED_ERROR  STRING_LITERAL_EXPECTED_ERROR  Node  externs  root  
[buglab_swap_variables]^NodeTraversal.traverse (  root, new Callback (  )  ) ;^72^^^^^68^73^NodeTraversal.traverse ( compiler, root, new Callback (  )  ) ;^[CLASS] ObjectPropertyStringPreprocess Callback  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  String  EXTERN_OBJECT_PROPERTY_STRING  OBJECT_PROPERTY_STRING  boolean  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  QUALIFIED_NAME_EXPECTED_ERROR  STRING_LITERAL_EXPECTED_ERROR  Node  externs  root  
[buglab_swap_variables]^parent.replaceChild ( newName, n ) ;^81^^^^^66^96^parent.replaceChild ( n, newName ) ;^[CLASS] ObjectPropertyStringPreprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  String  EXTERN_OBJECT_PROPERTY_STRING  OBJECT_PROPERTY_STRING  boolean  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  QUALIFIED_NAME_EXPECTED_ERROR  STRING_LITERAL_EXPECTED_ERROR  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[buglab_swap_variables]^parent.replaceChild (  newName ) ;^81^^^^^66^96^parent.replaceChild ( n, newName ) ;^[CLASS] ObjectPropertyStringPreprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  String  EXTERN_OBJECT_PROPERTY_STRING  OBJECT_PROPERTY_STRING  boolean  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  QUALIFIED_NAME_EXPECTED_ERROR  STRING_LITERAL_EXPECTED_ERROR  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[buglab_swap_variables]^parent.replaceChild ( n ) ;^81^^^^^66^96^parent.replaceChild ( n, newName ) ;^[CLASS] ObjectPropertyStringPreprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  String  EXTERN_OBJECT_PROPERTY_STRING  OBJECT_PROPERTY_STRING  boolean  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  QUALIFIED_NAME_EXPECTED_ERROR  STRING_LITERAL_EXPECTED_ERROR  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[buglab_swap_variables]^if  ( n.equals ( OBJECT_PROPERTY_STRING.getQualifiedName (  )  )  )  {^77^^^^^62^92^if  ( OBJECT_PROPERTY_STRING.equals ( n.getQualifiedName (  )  )  )  {^[CLASS] ObjectPropertyStringPreprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  String  EXTERN_OBJECT_PROPERTY_STRING  OBJECT_PROPERTY_STRING  boolean  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  QUALIFIED_NAME_EXPECTED_ERROR  STRING_LITERAL_EXPECTED_ERROR  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[buglab_swap_variables]^compiler.report ( JSError.make ( n, t, INVALID_NUM_ARGUMENTS_ERROR, "" + n.getChildCount (  )  )  ) ;^101^102^^^^86^116^compiler.report ( JSError.make ( t, n, INVALID_NUM_ARGUMENTS_ERROR, "" + n.getChildCount (  )  )  ) ;^[CLASS] ObjectPropertyStringPreprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  String  EXTERN_OBJECT_PROPERTY_STRING  OBJECT_PROPERTY_STRING  boolean  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  QUALIFIED_NAME_EXPECTED_ERROR  STRING_LITERAL_EXPECTED_ERROR  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[buglab_swap_variables]^compiler.report ( JSError.make (  n, INVALID_NUM_ARGUMENTS_ERROR, "" + n.getChildCount (  )  )  ) ;^101^102^^^^86^116^compiler.report ( JSError.make ( t, n, INVALID_NUM_ARGUMENTS_ERROR, "" + n.getChildCount (  )  )  ) ;^[CLASS] ObjectPropertyStringPreprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  String  EXTERN_OBJECT_PROPERTY_STRING  OBJECT_PROPERTY_STRING  boolean  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  QUALIFIED_NAME_EXPECTED_ERROR  STRING_LITERAL_EXPECTED_ERROR  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[buglab_swap_variables]^compiler.report ( JSError.make ( t,  INVALID_NUM_ARGUMENTS_ERROR, "" + n.getChildCount (  )  )  ) ;^101^102^^^^86^116^compiler.report ( JSError.make ( t, n, INVALID_NUM_ARGUMENTS_ERROR, "" + n.getChildCount (  )  )  ) ;^[CLASS] ObjectPropertyStringPreprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  String  EXTERN_OBJECT_PROPERTY_STRING  OBJECT_PROPERTY_STRING  boolean  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  QUALIFIED_NAME_EXPECTED_ERROR  STRING_LITERAL_EXPECTED_ERROR  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[buglab_swap_variables]^compiler.report ( JSError.make ( t, INVALID_NUM_ARGUMENTS_ERROR, n, "" + n.getChildCount (  )  )  ) ;^101^102^^^^86^116^compiler.report ( JSError.make ( t, n, INVALID_NUM_ARGUMENTS_ERROR, "" + n.getChildCount (  )  )  ) ;^[CLASS] ObjectPropertyStringPreprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  String  EXTERN_OBJECT_PROPERTY_STRING  OBJECT_PROPERTY_STRING  boolean  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  QUALIFIED_NAME_EXPECTED_ERROR  STRING_LITERAL_EXPECTED_ERROR  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[buglab_swap_variables]^compiler.report ( JSError.make ( t, n,  "" + n.getChildCount (  )  )  ) ;^101^102^^^^86^116^compiler.report ( JSError.make ( t, n, INVALID_NUM_ARGUMENTS_ERROR, "" + n.getChildCount (  )  )  ) ;^[CLASS] ObjectPropertyStringPreprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  String  EXTERN_OBJECT_PROPERTY_STRING  OBJECT_PROPERTY_STRING  boolean  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  QUALIFIED_NAME_EXPECTED_ERROR  STRING_LITERAL_EXPECTED_ERROR  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[buglab_swap_variables]^compiler.report ( JSError.make ( INVALID_NUM_ARGUMENTS_ERROR, n, t, "" + n.getChildCount (  )  )  ) ;^101^102^^^^86^116^compiler.report ( JSError.make ( t, n, INVALID_NUM_ARGUMENTS_ERROR, "" + n.getChildCount (  )  )  ) ;^[CLASS] ObjectPropertyStringPreprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  String  EXTERN_OBJECT_PROPERTY_STRING  OBJECT_PROPERTY_STRING  boolean  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  QUALIFIED_NAME_EXPECTED_ERROR  STRING_LITERAL_EXPECTED_ERROR  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[buglab_swap_variables]^compiler.report ( JSError.make ( firstArgument, t, QUALIFIED_NAME_EXPECTED_ERROR, Token.name ( firstArgument.getType (  )  )  )  ) ;^108^109^110^^^93^123^compiler.report ( JSError.make ( t, firstArgument, QUALIFIED_NAME_EXPECTED_ERROR, Token.name ( firstArgument.getType (  )  )  )  ) ;^[CLASS] ObjectPropertyStringPreprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  String  EXTERN_OBJECT_PROPERTY_STRING  OBJECT_PROPERTY_STRING  boolean  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  QUALIFIED_NAME_EXPECTED_ERROR  STRING_LITERAL_EXPECTED_ERROR  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[buglab_swap_variables]^compiler.report ( JSError.make (  firstArgument, QUALIFIED_NAME_EXPECTED_ERROR, Token.name ( firstArgument.getType (  )  )  )  ) ;^108^109^110^^^93^123^compiler.report ( JSError.make ( t, firstArgument, QUALIFIED_NAME_EXPECTED_ERROR, Token.name ( firstArgument.getType (  )  )  )  ) ;^[CLASS] ObjectPropertyStringPreprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  String  EXTERN_OBJECT_PROPERTY_STRING  OBJECT_PROPERTY_STRING  boolean  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  QUALIFIED_NAME_EXPECTED_ERROR  STRING_LITERAL_EXPECTED_ERROR  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[buglab_swap_variables]^compiler.report ( JSError.make ( t, QUALIFIED_NAME_EXPECTED_ERROR, firstArgument, Token.name ( firstArgument.getType (  )  )  )  ) ;^108^109^110^^^93^123^compiler.report ( JSError.make ( t, firstArgument, QUALIFIED_NAME_EXPECTED_ERROR, Token.name ( firstArgument.getType (  )  )  )  ) ;^[CLASS] ObjectPropertyStringPreprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  String  EXTERN_OBJECT_PROPERTY_STRING  OBJECT_PROPERTY_STRING  boolean  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  QUALIFIED_NAME_EXPECTED_ERROR  STRING_LITERAL_EXPECTED_ERROR  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[buglab_swap_variables]^compiler.report ( JSError.make ( t,  QUALIFIED_NAME_EXPECTED_ERROR, Token.name ( firstArgument.getType (  )  )  )  ) ;^108^109^110^^^93^123^compiler.report ( JSError.make ( t, firstArgument, QUALIFIED_NAME_EXPECTED_ERROR, Token.name ( firstArgument.getType (  )  )  )  ) ;^[CLASS] ObjectPropertyStringPreprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  String  EXTERN_OBJECT_PROPERTY_STRING  OBJECT_PROPERTY_STRING  boolean  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  QUALIFIED_NAME_EXPECTED_ERROR  STRING_LITERAL_EXPECTED_ERROR  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[buglab_swap_variables]^compiler.report ( JSError.make ( QUALIFIED_NAME_EXPECTED_ERROR, firstArgument, t, Token.name ( firstArgument.getType (  )  )  )  ) ;^108^109^110^^^93^123^compiler.report ( JSError.make ( t, firstArgument, QUALIFIED_NAME_EXPECTED_ERROR, Token.name ( firstArgument.getType (  )  )  )  ) ;^[CLASS] ObjectPropertyStringPreprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  String  EXTERN_OBJECT_PROPERTY_STRING  OBJECT_PROPERTY_STRING  boolean  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  QUALIFIED_NAME_EXPECTED_ERROR  STRING_LITERAL_EXPECTED_ERROR  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[buglab_swap_variables]^compiler.report ( JSError.make ( t, firstArgument,  Token.name ( firstArgument.getType (  )  )  )  ) ;^108^109^110^^^93^123^compiler.report ( JSError.make ( t, firstArgument, QUALIFIED_NAME_EXPECTED_ERROR, Token.name ( firstArgument.getType (  )  )  )  ) ;^[CLASS] ObjectPropertyStringPreprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  String  EXTERN_OBJECT_PROPERTY_STRING  OBJECT_PROPERTY_STRING  boolean  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  QUALIFIED_NAME_EXPECTED_ERROR  STRING_LITERAL_EXPECTED_ERROR  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[buglab_swap_variables]^compiler.report ( JSError.make (  secondArgument, STRING_LITERAL_EXPECTED_ERROR, Token.name ( secondArgument.getType (  )  )  )  ) ;^116^117^118^^^101^131^compiler.report ( JSError.make ( t, secondArgument, STRING_LITERAL_EXPECTED_ERROR, Token.name ( secondArgument.getType (  )  )  )  ) ;^[CLASS] ObjectPropertyStringPreprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  String  EXTERN_OBJECT_PROPERTY_STRING  OBJECT_PROPERTY_STRING  boolean  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  QUALIFIED_NAME_EXPECTED_ERROR  STRING_LITERAL_EXPECTED_ERROR  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[buglab_swap_variables]^compiler.report ( JSError.make ( t,  STRING_LITERAL_EXPECTED_ERROR, Token.name ( secondArgument.getType (  )  )  )  ) ;^116^117^118^^^101^131^compiler.report ( JSError.make ( t, secondArgument, STRING_LITERAL_EXPECTED_ERROR, Token.name ( secondArgument.getType (  )  )  )  ) ;^[CLASS] ObjectPropertyStringPreprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  String  EXTERN_OBJECT_PROPERTY_STRING  OBJECT_PROPERTY_STRING  boolean  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  QUALIFIED_NAME_EXPECTED_ERROR  STRING_LITERAL_EXPECTED_ERROR  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[buglab_swap_variables]^compiler.report ( JSError.make ( STRING_LITERAL_EXPECTED_ERROR, secondArgument, t, Token.name ( secondArgument.getType (  )  )  )  ) ;^116^117^118^^^101^131^compiler.report ( JSError.make ( t, secondArgument, STRING_LITERAL_EXPECTED_ERROR, Token.name ( secondArgument.getType (  )  )  )  ) ;^[CLASS] ObjectPropertyStringPreprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  String  EXTERN_OBJECT_PROPERTY_STRING  OBJECT_PROPERTY_STRING  boolean  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  QUALIFIED_NAME_EXPECTED_ERROR  STRING_LITERAL_EXPECTED_ERROR  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[buglab_swap_variables]^compiler.report ( JSError.make ( t, secondArgument,  Token.name ( secondArgument.getType (  )  )  )  ) ;^116^117^118^^^101^131^compiler.report ( JSError.make ( t, secondArgument, STRING_LITERAL_EXPECTED_ERROR, Token.name ( secondArgument.getType (  )  )  )  ) ;^[CLASS] ObjectPropertyStringPreprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  String  EXTERN_OBJECT_PROPERTY_STRING  OBJECT_PROPERTY_STRING  boolean  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  QUALIFIED_NAME_EXPECTED_ERROR  STRING_LITERAL_EXPECTED_ERROR  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[buglab_swap_variables]^compiler.report ( JSError.make ( secondArgument, t, STRING_LITERAL_EXPECTED_ERROR, Token.name ( secondArgument.getType (  )  )  )  ) ;^116^117^118^^^101^131^compiler.report ( JSError.make ( t, secondArgument, STRING_LITERAL_EXPECTED_ERROR, Token.name ( secondArgument.getType (  )  )  )  ) ;^[CLASS] ObjectPropertyStringPreprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  String  EXTERN_OBJECT_PROPERTY_STRING  OBJECT_PROPERTY_STRING  boolean  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  QUALIFIED_NAME_EXPECTED_ERROR  STRING_LITERAL_EXPECTED_ERROR  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[buglab_swap_variables]^compiler.report ( JSError.make ( t, STRING_LITERAL_EXPECTED_ERROR, secondArgument, Token.name ( secondArgument.getType (  )  )  )  ) ;^116^117^118^^^101^131^compiler.report ( JSError.make ( t, secondArgument, STRING_LITERAL_EXPECTED_ERROR, Token.name ( secondArgument.getType (  )  )  )  ) ;^[CLASS] ObjectPropertyStringPreprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  String  EXTERN_OBJECT_PROPERTY_STRING  OBJECT_PROPERTY_STRING  boolean  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  QUALIFIED_NAME_EXPECTED_ERROR  STRING_LITERAL_EXPECTED_ERROR  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[buglab_swap_variables]^Node newFirstArgument = NodeUtil.newQualifiedNameNode ( firstArgument.getCodingConvention (  ) .getGlobalObject (  ) , compiler.getLineno (  ) , firstArgument.getCharno (  )  ) ;^122^123^124^^^107^137^Node newFirstArgument = NodeUtil.newQualifiedNameNode ( compiler.getCodingConvention (  ) .getGlobalObject (  ) , firstArgument.getLineno (  ) , firstArgument.getCharno (  )  ) ;^[CLASS] ObjectPropertyStringPreprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  String  EXTERN_OBJECT_PROPERTY_STRING  OBJECT_PROPERTY_STRING  boolean  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  QUALIFIED_NAME_EXPECTED_ERROR  STRING_LITERAL_EXPECTED_ERROR  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[buglab_swap_variables]^Node newFirstArgument = NodeUtil.newQualifiedNameNode ( compiler.getCodingConvention (  ) .getGlobalObject (  ) .getLineno (  ) , firstArgument.getCharno (  )  ) ;^122^123^124^^^107^137^Node newFirstArgument = NodeUtil.newQualifiedNameNode ( compiler.getCodingConvention (  ) .getGlobalObject (  ) , firstArgument.getLineno (  ) , firstArgument.getCharno (  )  ) ;^[CLASS] ObjectPropertyStringPreprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  String  EXTERN_OBJECT_PROPERTY_STRING  OBJECT_PROPERTY_STRING  boolean  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  QUALIFIED_NAME_EXPECTED_ERROR  STRING_LITERAL_EXPECTED_ERROR  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[buglab_swap_variables]^Node newSecondArgument = NodeUtil.newQualifiedNameNode ( secondArgument.getQualifiedName (  )  + "." + firstArgument.getNext (  ) .getString (  ) , firstArgument.getLineno (  ) , secondArgument.getCharno (  )  ) ;^125^126^127^128^^110^140^Node newSecondArgument = NodeUtil.newQualifiedNameNode ( firstArgument.getQualifiedName (  )  + "." + firstArgument.getNext (  ) .getString (  ) , secondArgument.getLineno (  ) , secondArgument.getCharno (  )  ) ;^[CLASS] ObjectPropertyStringPreprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  String  EXTERN_OBJECT_PROPERTY_STRING  OBJECT_PROPERTY_STRING  boolean  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  QUALIFIED_NAME_EXPECTED_ERROR  STRING_LITERAL_EXPECTED_ERROR  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[buglab_swap_variables]^Node newSecondArgument = NodeUtil.newQualifiedNameNode ( firstArgument.getQualifiedName (  )  + "." + firstArgument.getNext (  ) .getString (  ) .getLineno (  ) , secondArgument.getCharno (  )  ) ;^125^126^127^128^^110^140^Node newSecondArgument = NodeUtil.newQualifiedNameNode ( firstArgument.getQualifiedName (  )  + "." + firstArgument.getNext (  ) .getString (  ) , secondArgument.getLineno (  ) , secondArgument.getCharno (  )  ) ;^[CLASS] ObjectPropertyStringPreprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  String  EXTERN_OBJECT_PROPERTY_STRING  OBJECT_PROPERTY_STRING  boolean  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  QUALIFIED_NAME_EXPECTED_ERROR  STRING_LITERAL_EXPECTED_ERROR  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[buglab_swap_variables]^n.replaceChild ( n, firstArgumentewFirstArgument ) ;^129^^^^^114^144^n.replaceChild ( firstArgument, newFirstArgument ) ;^[CLASS] ObjectPropertyStringPreprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  String  EXTERN_OBJECT_PROPERTY_STRING  OBJECT_PROPERTY_STRING  boolean  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  QUALIFIED_NAME_EXPECTED_ERROR  STRING_LITERAL_EXPECTED_ERROR  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[buglab_swap_variables]^n.replaceChild ( firstArgumentewFirstArgument ) ;^129^^^^^114^144^n.replaceChild ( firstArgument, newFirstArgument ) ;^[CLASS] ObjectPropertyStringPreprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  String  EXTERN_OBJECT_PROPERTY_STRING  OBJECT_PROPERTY_STRING  boolean  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  QUALIFIED_NAME_EXPECTED_ERROR  STRING_LITERAL_EXPECTED_ERROR  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[buglab_swap_variables]^n.replaceChild (  newFirstArgument ) ;^129^^^^^114^144^n.replaceChild ( firstArgument, newFirstArgument ) ;^[CLASS] ObjectPropertyStringPreprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  String  EXTERN_OBJECT_PROPERTY_STRING  OBJECT_PROPERTY_STRING  boolean  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  QUALIFIED_NAME_EXPECTED_ERROR  STRING_LITERAL_EXPECTED_ERROR  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[buglab_swap_variables]^n.replaceChild ( newFirstArgument, firstArgument ) ;^129^^^^^114^144^n.replaceChild ( firstArgument, newFirstArgument ) ;^[CLASS] ObjectPropertyStringPreprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  String  EXTERN_OBJECT_PROPERTY_STRING  OBJECT_PROPERTY_STRING  boolean  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  QUALIFIED_NAME_EXPECTED_ERROR  STRING_LITERAL_EXPECTED_ERROR  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[buglab_swap_variables]^n.replaceChild ( firstArgument ) ;^129^^^^^114^144^n.replaceChild ( firstArgument, newFirstArgument ) ;^[CLASS] ObjectPropertyStringPreprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  String  EXTERN_OBJECT_PROPERTY_STRING  OBJECT_PROPERTY_STRING  boolean  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  QUALIFIED_NAME_EXPECTED_ERROR  STRING_LITERAL_EXPECTED_ERROR  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[buglab_swap_variables]^n.replaceChild ( n, secondArgumentewSecondArgument ) ;^130^^^^^115^145^n.replaceChild ( secondArgument, newSecondArgument ) ;^[CLASS] ObjectPropertyStringPreprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  String  EXTERN_OBJECT_PROPERTY_STRING  OBJECT_PROPERTY_STRING  boolean  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  QUALIFIED_NAME_EXPECTED_ERROR  STRING_LITERAL_EXPECTED_ERROR  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[buglab_swap_variables]^n.replaceChild ( secondArgumentewSecondArgument ) ;^130^^^^^115^145^n.replaceChild ( secondArgument, newSecondArgument ) ;^[CLASS] ObjectPropertyStringPreprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  String  EXTERN_OBJECT_PROPERTY_STRING  OBJECT_PROPERTY_STRING  boolean  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  QUALIFIED_NAME_EXPECTED_ERROR  STRING_LITERAL_EXPECTED_ERROR  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[buglab_swap_variables]^n.replaceChild ( newSecondArgument, secondArgument ) ;^130^^^^^115^145^n.replaceChild ( secondArgument, newSecondArgument ) ;^[CLASS] ObjectPropertyStringPreprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  String  EXTERN_OBJECT_PROPERTY_STRING  OBJECT_PROPERTY_STRING  boolean  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  QUALIFIED_NAME_EXPECTED_ERROR  STRING_LITERAL_EXPECTED_ERROR  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[buglab_swap_variables]^n.replaceChild (  newSecondArgument ) ;^130^^^^^115^145^n.replaceChild ( secondArgument, newSecondArgument ) ;^[CLASS] ObjectPropertyStringPreprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  String  EXTERN_OBJECT_PROPERTY_STRING  OBJECT_PROPERTY_STRING  boolean  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  QUALIFIED_NAME_EXPECTED_ERROR  STRING_LITERAL_EXPECTED_ERROR  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[buglab_swap_variables]^n.replaceChild ( secondArgument, n ) ;^130^^^^^115^145^n.replaceChild ( secondArgument, newSecondArgument ) ;^[CLASS] ObjectPropertyStringPreprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  String  EXTERN_OBJECT_PROPERTY_STRING  OBJECT_PROPERTY_STRING  boolean  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  QUALIFIED_NAME_EXPECTED_ERROR  STRING_LITERAL_EXPECTED_ERROR  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[buglab_swap_variables]^n.replaceChild ( secondArgument ) ;^130^^^^^115^145^n.replaceChild ( secondArgument, newSecondArgument ) ;^[CLASS] ObjectPropertyStringPreprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  String  EXTERN_OBJECT_PROPERTY_STRING  OBJECT_PROPERTY_STRING  boolean  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  QUALIFIED_NAME_EXPECTED_ERROR  STRING_LITERAL_EXPECTED_ERROR  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[buglab_swap_variables]^parent.replaceChild ( newName, n ) ;^81^^^^^66^96^parent.replaceChild ( n, newName ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[buglab_swap_variables]^parent.replaceChild (  newName ) ;^81^^^^^66^96^parent.replaceChild ( n, newName ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[buglab_swap_variables]^parent.replaceChild ( n ) ;^81^^^^^66^96^parent.replaceChild ( n, newName ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[buglab_swap_variables]^if  ( n.equals ( OBJECT_PROPERTY_STRING.getQualifiedName (  )  )  )  {^77^^^^^62^92^if  ( OBJECT_PROPERTY_STRING.equals ( n.getQualifiedName (  )  )  )  {^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[buglab_swap_variables]^compiler.report ( JSError.make ( n, t, INVALID_NUM_ARGUMENTS_ERROR, "" + n.getChildCount (  )  )  ) ;^101^102^^^^86^116^compiler.report ( JSError.make ( t, n, INVALID_NUM_ARGUMENTS_ERROR, "" + n.getChildCount (  )  )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[buglab_swap_variables]^compiler.report ( JSError.make (  n, INVALID_NUM_ARGUMENTS_ERROR, "" + n.getChildCount (  )  )  ) ;^101^102^^^^86^116^compiler.report ( JSError.make ( t, n, INVALID_NUM_ARGUMENTS_ERROR, "" + n.getChildCount (  )  )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[buglab_swap_variables]^compiler.report ( JSError.make ( t,  INVALID_NUM_ARGUMENTS_ERROR, "" + n.getChildCount (  )  )  ) ;^101^102^^^^86^116^compiler.report ( JSError.make ( t, n, INVALID_NUM_ARGUMENTS_ERROR, "" + n.getChildCount (  )  )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[buglab_swap_variables]^compiler.report ( JSError.make ( INVALID_NUM_ARGUMENTS_ERROR, n, t, "" + n.getChildCount (  )  )  ) ;^101^102^^^^86^116^compiler.report ( JSError.make ( t, n, INVALID_NUM_ARGUMENTS_ERROR, "" + n.getChildCount (  )  )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[buglab_swap_variables]^compiler.report ( JSError.make ( t, n,  "" + n.getChildCount (  )  )  ) ;^101^102^^^^86^116^compiler.report ( JSError.make ( t, n, INVALID_NUM_ARGUMENTS_ERROR, "" + n.getChildCount (  )  )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[buglab_swap_variables]^compiler.report ( JSError.make ( t, INVALID_NUM_ARGUMENTS_ERROR, n, "" + n.getChildCount (  )  )  ) ;^101^102^^^^86^116^compiler.report ( JSError.make ( t, n, INVALID_NUM_ARGUMENTS_ERROR, "" + n.getChildCount (  )  )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[buglab_swap_variables]^compiler.report ( JSError.make (  firstArgument, QUALIFIED_NAME_EXPECTED_ERROR, Token.name ( firstArgument.getType (  )  )  )  ) ;^108^109^110^^^93^123^compiler.report ( JSError.make ( t, firstArgument, QUALIFIED_NAME_EXPECTED_ERROR, Token.name ( firstArgument.getType (  )  )  )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[buglab_swap_variables]^compiler.report ( JSError.make ( t,  QUALIFIED_NAME_EXPECTED_ERROR, Token.name ( firstArgument.getType (  )  )  )  ) ;^108^109^110^^^93^123^compiler.report ( JSError.make ( t, firstArgument, QUALIFIED_NAME_EXPECTED_ERROR, Token.name ( firstArgument.getType (  )  )  )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[buglab_swap_variables]^compiler.report ( JSError.make ( QUALIFIED_NAME_EXPECTED_ERROR, firstArgument, t, Token.name ( firstArgument.getType (  )  )  )  ) ;^108^109^110^^^93^123^compiler.report ( JSError.make ( t, firstArgument, QUALIFIED_NAME_EXPECTED_ERROR, Token.name ( firstArgument.getType (  )  )  )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[buglab_swap_variables]^compiler.report ( JSError.make ( t, firstArgument,  Token.name ( firstArgument.getType (  )  )  )  ) ;^108^109^110^^^93^123^compiler.report ( JSError.make ( t, firstArgument, QUALIFIED_NAME_EXPECTED_ERROR, Token.name ( firstArgument.getType (  )  )  )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[buglab_swap_variables]^compiler.report ( JSError.make ( t, QUALIFIED_NAME_EXPECTED_ERROR, firstArgument, Token.name ( firstArgument.getType (  )  )  )  ) ;^108^109^110^^^93^123^compiler.report ( JSError.make ( t, firstArgument, QUALIFIED_NAME_EXPECTED_ERROR, Token.name ( firstArgument.getType (  )  )  )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[buglab_swap_variables]^compiler.report ( JSError.make ( firstArgument, t, QUALIFIED_NAME_EXPECTED_ERROR, Token.name ( firstArgument.getType (  )  )  )  ) ;^108^109^110^^^93^123^compiler.report ( JSError.make ( t, firstArgument, QUALIFIED_NAME_EXPECTED_ERROR, Token.name ( firstArgument.getType (  )  )  )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[buglab_swap_variables]^compiler.report ( JSError.make (  secondArgument, STRING_LITERAL_EXPECTED_ERROR, Token.name ( secondArgument.getType (  )  )  )  ) ;^116^117^118^^^101^131^compiler.report ( JSError.make ( t, secondArgument, STRING_LITERAL_EXPECTED_ERROR, Token.name ( secondArgument.getType (  )  )  )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[buglab_swap_variables]^compiler.report ( JSError.make ( t, STRING_LITERAL_EXPECTED_ERROR, secondArgument, Token.name ( secondArgument.getType (  )  )  )  ) ;^116^117^118^^^101^131^compiler.report ( JSError.make ( t, secondArgument, STRING_LITERAL_EXPECTED_ERROR, Token.name ( secondArgument.getType (  )  )  )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[buglab_swap_variables]^compiler.report ( JSError.make ( t,  STRING_LITERAL_EXPECTED_ERROR, Token.name ( secondArgument.getType (  )  )  )  ) ;^116^117^118^^^101^131^compiler.report ( JSError.make ( t, secondArgument, STRING_LITERAL_EXPECTED_ERROR, Token.name ( secondArgument.getType (  )  )  )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[buglab_swap_variables]^compiler.report ( JSError.make ( t, secondArgument,  Token.name ( secondArgument.getType (  )  )  )  ) ;^116^117^118^^^101^131^compiler.report ( JSError.make ( t, secondArgument, STRING_LITERAL_EXPECTED_ERROR, Token.name ( secondArgument.getType (  )  )  )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[buglab_swap_variables]^compiler.report ( JSError.make ( secondArgument, t, STRING_LITERAL_EXPECTED_ERROR, Token.name ( secondArgument.getType (  )  )  )  ) ;^116^117^118^^^101^131^compiler.report ( JSError.make ( t, secondArgument, STRING_LITERAL_EXPECTED_ERROR, Token.name ( secondArgument.getType (  )  )  )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[buglab_swap_variables]^compiler.report ( JSError.make ( STRING_LITERAL_EXPECTED_ERROR, secondArgument, t, Token.name ( secondArgument.getType (  )  )  )  ) ;^116^117^118^^^101^131^compiler.report ( JSError.make ( t, secondArgument, STRING_LITERAL_EXPECTED_ERROR, Token.name ( secondArgument.getType (  )  )  )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[buglab_swap_variables]^Node newFirstArgument = NodeUtil.newQualifiedNameNode ( firstArgument.getCodingConvention (  ) .getGlobalObject (  ) , compiler.getLineno (  ) , firstArgument.getCharno (  )  ) ;^122^123^124^^^107^137^Node newFirstArgument = NodeUtil.newQualifiedNameNode ( compiler.getCodingConvention (  ) .getGlobalObject (  ) , firstArgument.getLineno (  ) , firstArgument.getCharno (  )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[buglab_swap_variables]^Node newFirstArgument = NodeUtil.newQualifiedNameNode ( compiler.getCodingConvention (  ) .getGlobalObject (  ) .getLineno (  ) , firstArgument.getCharno (  )  ) ;^122^123^124^^^107^137^Node newFirstArgument = NodeUtil.newQualifiedNameNode ( compiler.getCodingConvention (  ) .getGlobalObject (  ) , firstArgument.getLineno (  ) , firstArgument.getCharno (  )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[buglab_swap_variables]^Node newSecondArgument = NodeUtil.newQualifiedNameNode ( secondArgument.getQualifiedName (  )  + "." + firstArgument.getNext (  ) .getString (  ) , firstArgument.getLineno (  ) , secondArgument.getCharno (  )  ) ;^125^126^127^128^^110^140^Node newSecondArgument = NodeUtil.newQualifiedNameNode ( firstArgument.getQualifiedName (  )  + "." + firstArgument.getNext (  ) .getString (  ) , secondArgument.getLineno (  ) , secondArgument.getCharno (  )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[buglab_swap_variables]^Node newSecondArgument = NodeUtil.newQualifiedNameNode ( firstArgument.getQualifiedName (  )  + "." + firstArgument.getNext (  ) .getString (  ) .getLineno (  ) , secondArgument.getCharno (  )  ) ;^125^126^127^128^^110^140^Node newSecondArgument = NodeUtil.newQualifiedNameNode ( firstArgument.getQualifiedName (  )  + "." + firstArgument.getNext (  ) .getString (  ) , secondArgument.getLineno (  ) , secondArgument.getCharno (  )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[buglab_swap_variables]^n.replaceChild ( n, firstArgumentewFirstArgument ) ;^129^^^^^114^144^n.replaceChild ( firstArgument, newFirstArgument ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[buglab_swap_variables]^n.replaceChild ( firstArgumentewFirstArgument ) ;^129^^^^^114^144^n.replaceChild ( firstArgument, newFirstArgument ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[buglab_swap_variables]^n.replaceChild ( newFirstArgument, firstArgument ) ;^129^^^^^114^144^n.replaceChild ( firstArgument, newFirstArgument ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[buglab_swap_variables]^n.replaceChild (  newFirstArgument ) ;^129^^^^^114^144^n.replaceChild ( firstArgument, newFirstArgument ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[buglab_swap_variables]^n.replaceChild ( firstArgument ) ;^129^^^^^114^144^n.replaceChild ( firstArgument, newFirstArgument ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[buglab_swap_variables]^n.replaceChild ( n, secondArgumentewSecondArgument ) ;^130^^^^^115^145^n.replaceChild ( secondArgument, newSecondArgument ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[buglab_swap_variables]^n.replaceChild ( secondArgumentewSecondArgument ) ;^130^^^^^115^145^n.replaceChild ( secondArgument, newSecondArgument ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[buglab_swap_variables]^n.replaceChild ( newSecondArgument, secondArgument ) ;^130^^^^^115^145^n.replaceChild ( secondArgument, newSecondArgument ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[buglab_swap_variables]^n.replaceChild (  newSecondArgument ) ;^130^^^^^115^145^n.replaceChild ( secondArgument, newSecondArgument ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[buglab_swap_variables]^n.replaceChild ( secondArgument ) ;^130^^^^^115^145^n.replaceChild ( secondArgument, newSecondArgument ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
