[BugLab_Wrong_Operator]^static final DiagnosticType INVALID_NUM_ARGUMENTS_ERROR = DiagnosticType.error ( "JSC_OBJECT_PROPERTY_STRING_NUM_ARGS", "goog.testing.ObjectPropertyString instantiated with \"{0}\" "  ==  "arguments, expected 2." ) ;^47^48^49^50^^47^50^static final DiagnosticType INVALID_NUM_ARGUMENTS_ERROR = DiagnosticType.error ( "JSC_OBJECT_PROPERTY_STRING_NUM_ARGS", "goog.testing.ObjectPropertyString instantiated with \"{0}\" " + "arguments, expected 2." ) ;^[CLASS] ObjectPropertyStringPreprocess Callback   [VARIABLES] 
[BugLab_Wrong_Operator]^static final DiagnosticType QUALIFIED_NAME_EXPECTED_ERROR = DiagnosticType.error ( "JSC_OBJECT_PROPERTY_STRING_QUALIFIED_NAME_EXPECTED", "goog.testing.ObjectPropertyString instantiated with invalid "  |  "argument, qualified name expected. Was \"{0}\"." ) ;^52^53^54^55^^52^55^static final DiagnosticType QUALIFIED_NAME_EXPECTED_ERROR = DiagnosticType.error ( "JSC_OBJECT_PROPERTY_STRING_QUALIFIED_NAME_EXPECTED", "goog.testing.ObjectPropertyString instantiated with invalid " + "argument, qualified name expected. Was \"{0}\"." ) ;^[CLASS] ObjectPropertyStringPreprocess Callback   [VARIABLES] 
[BugLab_Wrong_Operator]^static final DiagnosticType STRING_LITERAL_EXPECTED_ERROR = DiagnosticType.error ( "JSC_OBJECT_PROPERTY_STRING_STRING_LITERAL_EXPECTED", "goog.testing.ObjectPropertyString instantiated with invalid "  >=  "argument, string literal expected. Was \"{0}\"." ) ;^57^58^59^60^^57^60^static final DiagnosticType STRING_LITERAL_EXPECTED_ERROR = DiagnosticType.error ( "JSC_OBJECT_PROPERTY_STRING_STRING_LITERAL_EXPECTED", "goog.testing.ObjectPropertyString instantiated with invalid " + "argument, string literal expected. Was \"{0}\"." ) ;^[CLASS] ObjectPropertyStringPreprocess Callback   [VARIABLES] 
[BugLab_Variable_Misuse]^new Node ( Token.VAR, Node.newString ( Token.NAME, OBJECT_PROPERTY_STRING )  )  ) ;^70^71^^^^68^73^new Node ( Token.VAR, Node.newString ( Token.NAME, EXTERN_OBJECT_PROPERTY_STRING )  )  ) ;^[CLASS] ObjectPropertyStringPreprocess Callback  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  String  EXTERN_OBJECT_PROPERTY_STRING  OBJECT_PROPERTY_STRING  boolean  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  QUALIFIED_NAME_EXPECTED_ERROR  STRING_LITERAL_EXPECTED_ERROR  Node  externs  root  
[BugLab_Variable_Misuse]^externs.addChildToBack ( new Node ( Token.VAR, Node.newString ( Token.NAME, OBJECT_PROPERTY_STRING )  )  ) ;^69^70^71^^^68^73^externs.addChildToBack ( new Node ( Token.VAR, Node.newString ( Token.NAME, EXTERN_OBJECT_PROPERTY_STRING )  )  ) ;^[CLASS] ObjectPropertyStringPreprocess Callback  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  String  EXTERN_OBJECT_PROPERTY_STRING  OBJECT_PROPERTY_STRING  boolean  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  QUALIFIED_NAME_EXPECTED_ERROR  STRING_LITERAL_EXPECTED_ERROR  Node  externs  root  
[BugLab_Variable_Misuse]^Node.newString ( Token.NAME, OBJECT_PROPERTY_STRING )  )  ) ;^71^^^^^68^73^Node.newString ( Token.NAME, EXTERN_OBJECT_PROPERTY_STRING )  )  ) ;^[CLASS] ObjectPropertyStringPreprocess Callback  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  String  EXTERN_OBJECT_PROPERTY_STRING  OBJECT_PROPERTY_STRING  boolean  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  QUALIFIED_NAME_EXPECTED_ERROR  STRING_LITERAL_EXPECTED_ERROR  Node  externs  root  
[BugLab_Argument_Swapping]^NodeTraversal.traverse ( root, compiler, new Callback (  )  ) ;^72^^^^^68^73^NodeTraversal.traverse ( compiler, root, new Callback (  )  ) ;^[CLASS] ObjectPropertyStringPreprocess Callback  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  String  EXTERN_OBJECT_PROPERTY_STRING  OBJECT_PROPERTY_STRING  boolean  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  QUALIFIED_NAME_EXPECTED_ERROR  STRING_LITERAL_EXPECTED_ERROR  Node  externs  root  
[BugLab_Variable_Misuse]^if  ( OBJECT_PROPERTY_STRING.equals ( secondArgument.getQualifiedName (  )  )  )  {^77^^^^^62^92^if  ( OBJECT_PROPERTY_STRING.equals ( n.getQualifiedName (  )  )  )  {^[CLASS] ObjectPropertyStringPreprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  String  EXTERN_OBJECT_PROPERTY_STRING  OBJECT_PROPERTY_STRING  boolean  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  QUALIFIED_NAME_EXPECTED_ERROR  STRING_LITERAL_EXPECTED_ERROR  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[BugLab_Variable_Misuse]^if  ( EXTERN_OBJECT_PROPERTY_STRING.equals ( n.getQualifiedName (  )  )  )  {^77^^^^^62^92^if  ( OBJECT_PROPERTY_STRING.equals ( n.getQualifiedName (  )  )  )  {^[CLASS] ObjectPropertyStringPreprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  String  EXTERN_OBJECT_PROPERTY_STRING  OBJECT_PROPERTY_STRING  boolean  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  QUALIFIED_NAME_EXPECTED_ERROR  STRING_LITERAL_EXPECTED_ERROR  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[BugLab_Variable_Misuse]^Node newName = Node.newString ( Token.NAME, OBJECT_PROPERTY_STRING ) ;^78^79^^^^63^93^Node newName = Node.newString ( Token.NAME, EXTERN_OBJECT_PROPERTY_STRING ) ;^[CLASS] ObjectPropertyStringPreprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  String  EXTERN_OBJECT_PROPERTY_STRING  OBJECT_PROPERTY_STRING  boolean  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  QUALIFIED_NAME_EXPECTED_ERROR  STRING_LITERAL_EXPECTED_ERROR  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[BugLab_Variable_Misuse]^Node.newString ( Token.NAME, OBJECT_PROPERTY_STRING ) ;^79^^^^^64^94^Node.newString ( Token.NAME, EXTERN_OBJECT_PROPERTY_STRING ) ;^[CLASS] ObjectPropertyStringPreprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  String  EXTERN_OBJECT_PROPERTY_STRING  OBJECT_PROPERTY_STRING  boolean  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  QUALIFIED_NAME_EXPECTED_ERROR  STRING_LITERAL_EXPECTED_ERROR  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[BugLab_Variable_Misuse]^newName.copyInformationFrom ( secondArgument ) ;^80^^^^^65^95^newName.copyInformationFrom ( n ) ;^[CLASS] ObjectPropertyStringPreprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  String  EXTERN_OBJECT_PROPERTY_STRING  OBJECT_PROPERTY_STRING  boolean  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  QUALIFIED_NAME_EXPECTED_ERROR  STRING_LITERAL_EXPECTED_ERROR  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[BugLab_Variable_Misuse]^parent.replaceChild ( objectName, newName ) ;^81^^^^^66^96^parent.replaceChild ( n, newName ) ;^[CLASS] ObjectPropertyStringPreprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  String  EXTERN_OBJECT_PROPERTY_STRING  OBJECT_PROPERTY_STRING  boolean  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  QUALIFIED_NAME_EXPECTED_ERROR  STRING_LITERAL_EXPECTED_ERROR  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[BugLab_Variable_Misuse]^parent.replaceChild ( n, secondArgument ) ;^81^^^^^66^96^parent.replaceChild ( n, newName ) ;^[CLASS] ObjectPropertyStringPreprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  String  EXTERN_OBJECT_PROPERTY_STRING  OBJECT_PROPERTY_STRING  boolean  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  QUALIFIED_NAME_EXPECTED_ERROR  STRING_LITERAL_EXPECTED_ERROR  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[BugLab_Argument_Swapping]^parent.replaceChild ( newName, n ) ;^81^^^^^66^96^parent.replaceChild ( n, newName ) ;^[CLASS] ObjectPropertyStringPreprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  String  EXTERN_OBJECT_PROPERTY_STRING  OBJECT_PROPERTY_STRING  boolean  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  QUALIFIED_NAME_EXPECTED_ERROR  STRING_LITERAL_EXPECTED_ERROR  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[BugLab_Argument_Swapping]^if  ( n.equals ( OBJECT_PROPERTY_STRING.getQualifiedName (  )  )  )  {^77^^^^^62^92^if  ( OBJECT_PROPERTY_STRING.equals ( n.getQualifiedName (  )  )  )  {^[CLASS] ObjectPropertyStringPreprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  String  EXTERN_OBJECT_PROPERTY_STRING  OBJECT_PROPERTY_STRING  boolean  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  QUALIFIED_NAME_EXPECTED_ERROR  STRING_LITERAL_EXPECTED_ERROR  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[BugLab_Variable_Misuse]^if  ( OBJECT_PROPERTY_STRING.equals ( objectName.getQualifiedName (  )  )  )  {^77^^^^^62^92^if  ( OBJECT_PROPERTY_STRING.equals ( n.getQualifiedName (  )  )  )  {^[CLASS] ObjectPropertyStringPreprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  String  EXTERN_OBJECT_PROPERTY_STRING  OBJECT_PROPERTY_STRING  boolean  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  QUALIFIED_NAME_EXPECTED_ERROR  STRING_LITERAL_EXPECTED_ERROR  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[BugLab_Variable_Misuse]^parent.replaceChild ( secondArgument, newName ) ;^81^^^^^66^96^parent.replaceChild ( n, newName ) ;^[CLASS] ObjectPropertyStringPreprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  String  EXTERN_OBJECT_PROPERTY_STRING  OBJECT_PROPERTY_STRING  boolean  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  QUALIFIED_NAME_EXPECTED_ERROR  STRING_LITERAL_EXPECTED_ERROR  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[BugLab_Variable_Misuse]^if  ( secondArgument.getType (  )  != Token.NEW )  {^89^^^^^74^104^if  ( n.getType (  )  != Token.NEW )  {^[CLASS] ObjectPropertyStringPreprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  String  EXTERN_OBJECT_PROPERTY_STRING  OBJECT_PROPERTY_STRING  boolean  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  QUALIFIED_NAME_EXPECTED_ERROR  STRING_LITERAL_EXPECTED_ERROR  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[BugLab_Wrong_Operator]^if  ( n.getType (  )  >= Token.NEW )  {^89^^^^^74^104^if  ( n.getType (  )  != Token.NEW )  {^[CLASS] ObjectPropertyStringPreprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  String  EXTERN_OBJECT_PROPERTY_STRING  OBJECT_PROPERTY_STRING  boolean  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  QUALIFIED_NAME_EXPECTED_ERROR  STRING_LITERAL_EXPECTED_ERROR  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[BugLab_Variable_Misuse]^if  ( parent.getType (  )  != Token.NEW )  {^89^^^^^74^104^if  ( n.getType (  )  != Token.NEW )  {^[CLASS] ObjectPropertyStringPreprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  String  EXTERN_OBJECT_PROPERTY_STRING  OBJECT_PROPERTY_STRING  boolean  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  QUALIFIED_NAME_EXPECTED_ERROR  STRING_LITERAL_EXPECTED_ERROR  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[BugLab_Variable_Misuse]^Node objectName = secondArgument.getFirstChild (  ) ;^93^^^^^78^108^Node objectName = n.getFirstChild (  ) ;^[CLASS] ObjectPropertyStringPreprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  String  EXTERN_OBJECT_PROPERTY_STRING  OBJECT_PROPERTY_STRING  boolean  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  QUALIFIED_NAME_EXPECTED_ERROR  STRING_LITERAL_EXPECTED_ERROR  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[BugLab_Variable_Misuse]^Node objectName = parent.getFirstChild (  ) ;^93^^^^^78^108^Node objectName = n.getFirstChild (  ) ;^[CLASS] ObjectPropertyStringPreprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  String  EXTERN_OBJECT_PROPERTY_STRING  OBJECT_PROPERTY_STRING  boolean  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  QUALIFIED_NAME_EXPECTED_ERROR  STRING_LITERAL_EXPECTED_ERROR  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[BugLab_Variable_Misuse]^if  ( !EXTERN_OBJECT_PROPERTY_STRING.equals ( secondArgument.getQualifiedName (  )  )  )  {^95^96^^^^80^110^if  ( !EXTERN_OBJECT_PROPERTY_STRING.equals ( objectName.getQualifiedName (  )  )  )  {^[CLASS] ObjectPropertyStringPreprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  String  EXTERN_OBJECT_PROPERTY_STRING  OBJECT_PROPERTY_STRING  boolean  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  QUALIFIED_NAME_EXPECTED_ERROR  STRING_LITERAL_EXPECTED_ERROR  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[BugLab_Wrong_Operator]^if  ( n.getChildCount (  )  == 3 )  {^100^^^^^85^115^if  ( n.getChildCount (  )  != 3 )  {^[CLASS] ObjectPropertyStringPreprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  String  EXTERN_OBJECT_PROPERTY_STRING  OBJECT_PROPERTY_STRING  boolean  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  QUALIFIED_NAME_EXPECTED_ERROR  STRING_LITERAL_EXPECTED_ERROR  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[BugLab_Wrong_Literal]^if  ( n.getChildCount (  )  != 2 )  {^100^^^^^85^115^if  ( n.getChildCount (  )  != 3 )  {^[CLASS] ObjectPropertyStringPreprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  String  EXTERN_OBJECT_PROPERTY_STRING  OBJECT_PROPERTY_STRING  boolean  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  QUALIFIED_NAME_EXPECTED_ERROR  STRING_LITERAL_EXPECTED_ERROR  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[BugLab_Variable_Misuse]^compiler.report ( JSError.make ( t, secondArgument, INVALID_NUM_ARGUMENTS_ERROR, "" + n.getChildCount (  )  )  ) ;^101^102^^^^86^116^compiler.report ( JSError.make ( t, n, INVALID_NUM_ARGUMENTS_ERROR, "" + n.getChildCount (  )  )  ) ;^[CLASS] ObjectPropertyStringPreprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  String  EXTERN_OBJECT_PROPERTY_STRING  OBJECT_PROPERTY_STRING  boolean  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  QUALIFIED_NAME_EXPECTED_ERROR  STRING_LITERAL_EXPECTED_ERROR  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[BugLab_Variable_Misuse]^compiler.report ( JSError.make ( t, n, STRING_LITERAL_EXPECTED_ERROR, "" + n.getChildCount (  )  )  ) ;^101^102^^^^86^116^compiler.report ( JSError.make ( t, n, INVALID_NUM_ARGUMENTS_ERROR, "" + n.getChildCount (  )  )  ) ;^[CLASS] ObjectPropertyStringPreprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  String  EXTERN_OBJECT_PROPERTY_STRING  OBJECT_PROPERTY_STRING  boolean  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  QUALIFIED_NAME_EXPECTED_ERROR  STRING_LITERAL_EXPECTED_ERROR  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[BugLab_Argument_Swapping]^compiler.report ( JSError.make ( n, t, INVALID_NUM_ARGUMENTS_ERROR, "" + n.getChildCount (  )  )  ) ;^101^102^^^^86^116^compiler.report ( JSError.make ( t, n, INVALID_NUM_ARGUMENTS_ERROR, "" + n.getChildCount (  )  )  ) ;^[CLASS] ObjectPropertyStringPreprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  String  EXTERN_OBJECT_PROPERTY_STRING  OBJECT_PROPERTY_STRING  boolean  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  QUALIFIED_NAME_EXPECTED_ERROR  STRING_LITERAL_EXPECTED_ERROR  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[BugLab_Argument_Swapping]^compiler.report ( JSError.make ( INVALID_NUM_ARGUMENTS_ERROR, n, t, "" + n.getChildCount (  )  )  ) ;^101^102^^^^86^116^compiler.report ( JSError.make ( t, n, INVALID_NUM_ARGUMENTS_ERROR, "" + n.getChildCount (  )  )  ) ;^[CLASS] ObjectPropertyStringPreprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  String  EXTERN_OBJECT_PROPERTY_STRING  OBJECT_PROPERTY_STRING  boolean  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  QUALIFIED_NAME_EXPECTED_ERROR  STRING_LITERAL_EXPECTED_ERROR  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[BugLab_Wrong_Operator]^compiler.report ( JSError.make ( t, n, INVALID_NUM_ARGUMENTS_ERROR, ""  &  n.getChildCount (  )  )  ) ;^101^102^^^^86^116^compiler.report ( JSError.make ( t, n, INVALID_NUM_ARGUMENTS_ERROR, "" + n.getChildCount (  )  )  ) ;^[CLASS] ObjectPropertyStringPreprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  String  EXTERN_OBJECT_PROPERTY_STRING  OBJECT_PROPERTY_STRING  boolean  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  QUALIFIED_NAME_EXPECTED_ERROR  STRING_LITERAL_EXPECTED_ERROR  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[BugLab_Variable_Misuse]^compiler.report ( JSError.make ( t, objectName, INVALID_NUM_ARGUMENTS_ERROR, "" + n.getChildCount (  )  )  ) ;^101^102^^^^86^116^compiler.report ( JSError.make ( t, n, INVALID_NUM_ARGUMENTS_ERROR, "" + n.getChildCount (  )  )  ) ;^[CLASS] ObjectPropertyStringPreprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  String  EXTERN_OBJECT_PROPERTY_STRING  OBJECT_PROPERTY_STRING  boolean  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  QUALIFIED_NAME_EXPECTED_ERROR  STRING_LITERAL_EXPECTED_ERROR  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[BugLab_Wrong_Operator]^compiler.report ( JSError.make ( t, n, INVALID_NUM_ARGUMENTS_ERROR, ""  <<  n.getChildCount (  )  )  ) ;^101^102^^^^86^116^compiler.report ( JSError.make ( t, n, INVALID_NUM_ARGUMENTS_ERROR, "" + n.getChildCount (  )  )  ) ;^[CLASS] ObjectPropertyStringPreprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  String  EXTERN_OBJECT_PROPERTY_STRING  OBJECT_PROPERTY_STRING  boolean  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  QUALIFIED_NAME_EXPECTED_ERROR  STRING_LITERAL_EXPECTED_ERROR  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[BugLab_Variable_Misuse]^"" + secondArgument.getChildCount (  )  )  ) ;^102^^^^^87^117^"" + n.getChildCount (  )  )  ) ;^[CLASS] ObjectPropertyStringPreprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  String  EXTERN_OBJECT_PROPERTY_STRING  OBJECT_PROPERTY_STRING  boolean  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  QUALIFIED_NAME_EXPECTED_ERROR  STRING_LITERAL_EXPECTED_ERROR  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[BugLab_Variable_Misuse]^if  ( secondArgument.getChildCount (  )  != 3 )  {^100^^^^^85^115^if  ( n.getChildCount (  )  != 3 )  {^[CLASS] ObjectPropertyStringPreprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  String  EXTERN_OBJECT_PROPERTY_STRING  OBJECT_PROPERTY_STRING  boolean  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  QUALIFIED_NAME_EXPECTED_ERROR  STRING_LITERAL_EXPECTED_ERROR  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[BugLab_Argument_Swapping]^compiler.report ( JSError.make ( t, INVALID_NUM_ARGUMENTS_ERROR, n, "" + n.getChildCount (  )  )  ) ;^101^102^^^^86^116^compiler.report ( JSError.make ( t, n, INVALID_NUM_ARGUMENTS_ERROR, "" + n.getChildCount (  )  )  ) ;^[CLASS] ObjectPropertyStringPreprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  String  EXTERN_OBJECT_PROPERTY_STRING  OBJECT_PROPERTY_STRING  boolean  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  QUALIFIED_NAME_EXPECTED_ERROR  STRING_LITERAL_EXPECTED_ERROR  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[BugLab_Wrong_Operator]^compiler.report ( JSError.make ( t, n, INVALID_NUM_ARGUMENTS_ERROR, ""  ||  n.getChildCount (  )  )  ) ;^101^102^^^^86^116^compiler.report ( JSError.make ( t, n, INVALID_NUM_ARGUMENTS_ERROR, "" + n.getChildCount (  )  )  ) ;^[CLASS] ObjectPropertyStringPreprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  String  EXTERN_OBJECT_PROPERTY_STRING  OBJECT_PROPERTY_STRING  boolean  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  QUALIFIED_NAME_EXPECTED_ERROR  STRING_LITERAL_EXPECTED_ERROR  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[BugLab_Variable_Misuse]^compiler.report ( JSError.make ( t, parent, INVALID_NUM_ARGUMENTS_ERROR, "" + n.getChildCount (  )  )  ) ;^101^102^^^^86^116^compiler.report ( JSError.make ( t, n, INVALID_NUM_ARGUMENTS_ERROR, "" + n.getChildCount (  )  )  ) ;^[CLASS] ObjectPropertyStringPreprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  String  EXTERN_OBJECT_PROPERTY_STRING  OBJECT_PROPERTY_STRING  boolean  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  QUALIFIED_NAME_EXPECTED_ERROR  STRING_LITERAL_EXPECTED_ERROR  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[BugLab_Variable_Misuse]^"" + objectName.getChildCount (  )  )  ) ;^102^^^^^87^117^"" + n.getChildCount (  )  )  ) ;^[CLASS] ObjectPropertyStringPreprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  String  EXTERN_OBJECT_PROPERTY_STRING  OBJECT_PROPERTY_STRING  boolean  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  QUALIFIED_NAME_EXPECTED_ERROR  STRING_LITERAL_EXPECTED_ERROR  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[BugLab_Variable_Misuse]^Node firstArgument = secondArgument.getNext (  ) ;^106^^^^^91^121^Node firstArgument = objectName.getNext (  ) ;^[CLASS] ObjectPropertyStringPreprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  String  EXTERN_OBJECT_PROPERTY_STRING  OBJECT_PROPERTY_STRING  boolean  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  QUALIFIED_NAME_EXPECTED_ERROR  STRING_LITERAL_EXPECTED_ERROR  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[BugLab_Variable_Misuse]^Node firstArgument = parent.getNext (  ) ;^106^^^^^91^121^Node firstArgument = objectName.getNext (  ) ;^[CLASS] ObjectPropertyStringPreprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  String  EXTERN_OBJECT_PROPERTY_STRING  OBJECT_PROPERTY_STRING  boolean  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  QUALIFIED_NAME_EXPECTED_ERROR  STRING_LITERAL_EXPECTED_ERROR  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[BugLab_Variable_Misuse]^compiler.report ( JSError.make ( t, parent, QUALIFIED_NAME_EXPECTED_ERROR, Token.name ( firstArgument.getType (  )  )  )  ) ;^108^109^110^^^93^123^compiler.report ( JSError.make ( t, firstArgument, QUALIFIED_NAME_EXPECTED_ERROR, Token.name ( firstArgument.getType (  )  )  )  ) ;^[CLASS] ObjectPropertyStringPreprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  String  EXTERN_OBJECT_PROPERTY_STRING  OBJECT_PROPERTY_STRING  boolean  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  QUALIFIED_NAME_EXPECTED_ERROR  STRING_LITERAL_EXPECTED_ERROR  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[BugLab_Variable_Misuse]^compiler.report ( JSError.make ( t, firstArgument, STRING_LITERAL_EXPECTED_ERROR, Token.name ( firstArgument.getType (  )  )  )  ) ;^108^109^110^^^93^123^compiler.report ( JSError.make ( t, firstArgument, QUALIFIED_NAME_EXPECTED_ERROR, Token.name ( firstArgument.getType (  )  )  )  ) ;^[CLASS] ObjectPropertyStringPreprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  String  EXTERN_OBJECT_PROPERTY_STRING  OBJECT_PROPERTY_STRING  boolean  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  QUALIFIED_NAME_EXPECTED_ERROR  STRING_LITERAL_EXPECTED_ERROR  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[BugLab_Argument_Swapping]^compiler.report ( JSError.make ( firstArgument, t, QUALIFIED_NAME_EXPECTED_ERROR, Token.name ( firstArgument.getType (  )  )  )  ) ;^108^109^110^^^93^123^compiler.report ( JSError.make ( t, firstArgument, QUALIFIED_NAME_EXPECTED_ERROR, Token.name ( firstArgument.getType (  )  )  )  ) ;^[CLASS] ObjectPropertyStringPreprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  String  EXTERN_OBJECT_PROPERTY_STRING  OBJECT_PROPERTY_STRING  boolean  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  QUALIFIED_NAME_EXPECTED_ERROR  STRING_LITERAL_EXPECTED_ERROR  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[BugLab_Argument_Swapping]^compiler.report ( JSError.make ( t, QUALIFIED_NAME_EXPECTED_ERROR, firstArgument, Token.name ( firstArgument.getType (  )  )  )  ) ;^108^109^110^^^93^123^compiler.report ( JSError.make ( t, firstArgument, QUALIFIED_NAME_EXPECTED_ERROR, Token.name ( firstArgument.getType (  )  )  )  ) ;^[CLASS] ObjectPropertyStringPreprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  String  EXTERN_OBJECT_PROPERTY_STRING  OBJECT_PROPERTY_STRING  boolean  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  QUALIFIED_NAME_EXPECTED_ERROR  STRING_LITERAL_EXPECTED_ERROR  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[BugLab_Argument_Swapping]^compiler.report ( JSError.make ( QUALIFIED_NAME_EXPECTED_ERROR, firstArgument, t, Token.name ( firstArgument.getType (  )  )  )  ) ;^108^109^110^^^93^123^compiler.report ( JSError.make ( t, firstArgument, QUALIFIED_NAME_EXPECTED_ERROR, Token.name ( firstArgument.getType (  )  )  )  ) ;^[CLASS] ObjectPropertyStringPreprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  String  EXTERN_OBJECT_PROPERTY_STRING  OBJECT_PROPERTY_STRING  boolean  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  QUALIFIED_NAME_EXPECTED_ERROR  STRING_LITERAL_EXPECTED_ERROR  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[BugLab_Variable_Misuse]^Token.name ( secondArgument.getType (  )  )  )  ) ;^110^^^^^95^125^Token.name ( firstArgument.getType (  )  )  )  ) ;^[CLASS] ObjectPropertyStringPreprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  String  EXTERN_OBJECT_PROPERTY_STRING  OBJECT_PROPERTY_STRING  boolean  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  QUALIFIED_NAME_EXPECTED_ERROR  STRING_LITERAL_EXPECTED_ERROR  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[BugLab_Variable_Misuse]^Token.name ( objectName.getType (  )  )  )  ) ;^110^^^^^95^125^Token.name ( firstArgument.getType (  )  )  )  ) ;^[CLASS] ObjectPropertyStringPreprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  String  EXTERN_OBJECT_PROPERTY_STRING  OBJECT_PROPERTY_STRING  boolean  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  QUALIFIED_NAME_EXPECTED_ERROR  STRING_LITERAL_EXPECTED_ERROR  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[BugLab_Variable_Misuse]^compiler.report ( JSError.make ( t, secondArgument, QUALIFIED_NAME_EXPECTED_ERROR, Token.name ( firstArgument.getType (  )  )  )  ) ;^108^109^110^^^93^123^compiler.report ( JSError.make ( t, firstArgument, QUALIFIED_NAME_EXPECTED_ERROR, Token.name ( firstArgument.getType (  )  )  )  ) ;^[CLASS] ObjectPropertyStringPreprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  String  EXTERN_OBJECT_PROPERTY_STRING  OBJECT_PROPERTY_STRING  boolean  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  QUALIFIED_NAME_EXPECTED_ERROR  STRING_LITERAL_EXPECTED_ERROR  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[BugLab_Variable_Misuse]^Token.name ( parent.getType (  )  )  )  ) ;^110^^^^^95^125^Token.name ( firstArgument.getType (  )  )  )  ) ;^[CLASS] ObjectPropertyStringPreprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  String  EXTERN_OBJECT_PROPERTY_STRING  OBJECT_PROPERTY_STRING  boolean  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  QUALIFIED_NAME_EXPECTED_ERROR  STRING_LITERAL_EXPECTED_ERROR  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[BugLab_Variable_Misuse]^Node secondArgument = parent.getNext (  ) ;^114^^^^^99^129^Node secondArgument = firstArgument.getNext (  ) ;^[CLASS] ObjectPropertyStringPreprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  String  EXTERN_OBJECT_PROPERTY_STRING  OBJECT_PROPERTY_STRING  boolean  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  QUALIFIED_NAME_EXPECTED_ERROR  STRING_LITERAL_EXPECTED_ERROR  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[BugLab_Variable_Misuse]^if  ( parent.getType (  )  != Token.STRING )  {^115^^^^^100^130^if  ( secondArgument.getType (  )  != Token.STRING )  {^[CLASS] ObjectPropertyStringPreprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  String  EXTERN_OBJECT_PROPERTY_STRING  OBJECT_PROPERTY_STRING  boolean  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  QUALIFIED_NAME_EXPECTED_ERROR  STRING_LITERAL_EXPECTED_ERROR  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[BugLab_Wrong_Operator]^if  ( secondArgument.getType (  )  == Token.STRING )  {^115^^^^^100^130^if  ( secondArgument.getType (  )  != Token.STRING )  {^[CLASS] ObjectPropertyStringPreprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  String  EXTERN_OBJECT_PROPERTY_STRING  OBJECT_PROPERTY_STRING  boolean  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  QUALIFIED_NAME_EXPECTED_ERROR  STRING_LITERAL_EXPECTED_ERROR  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[BugLab_Variable_Misuse]^compiler.report ( JSError.make ( t, newSecondArgument, STRING_LITERAL_EXPECTED_ERROR, Token.name ( secondArgument.getType (  )  )  )  ) ;^116^117^118^^^101^131^compiler.report ( JSError.make ( t, secondArgument, STRING_LITERAL_EXPECTED_ERROR, Token.name ( secondArgument.getType (  )  )  )  ) ;^[CLASS] ObjectPropertyStringPreprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  String  EXTERN_OBJECT_PROPERTY_STRING  OBJECT_PROPERTY_STRING  boolean  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  QUALIFIED_NAME_EXPECTED_ERROR  STRING_LITERAL_EXPECTED_ERROR  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[BugLab_Argument_Swapping]^compiler.report ( JSError.make ( t, STRING_LITERAL_EXPECTED_ERROR, secondArgument, Token.name ( secondArgument.getType (  )  )  )  ) ;^116^117^118^^^101^131^compiler.report ( JSError.make ( t, secondArgument, STRING_LITERAL_EXPECTED_ERROR, Token.name ( secondArgument.getType (  )  )  )  ) ;^[CLASS] ObjectPropertyStringPreprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  String  EXTERN_OBJECT_PROPERTY_STRING  OBJECT_PROPERTY_STRING  boolean  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  QUALIFIED_NAME_EXPECTED_ERROR  STRING_LITERAL_EXPECTED_ERROR  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[BugLab_Variable_Misuse]^compiler.report ( JSError.make ( t, secondArgument, QUALIFIED_NAME_EXPECTED_ERROR, Token.name ( secondArgument.getType (  )  )  )  ) ;^116^117^118^^^101^131^compiler.report ( JSError.make ( t, secondArgument, STRING_LITERAL_EXPECTED_ERROR, Token.name ( secondArgument.getType (  )  )  )  ) ;^[CLASS] ObjectPropertyStringPreprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  String  EXTERN_OBJECT_PROPERTY_STRING  OBJECT_PROPERTY_STRING  boolean  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  QUALIFIED_NAME_EXPECTED_ERROR  STRING_LITERAL_EXPECTED_ERROR  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[BugLab_Argument_Swapping]^compiler.report ( JSError.make ( secondArgument, t, STRING_LITERAL_EXPECTED_ERROR, Token.name ( secondArgument.getType (  )  )  )  ) ;^116^117^118^^^101^131^compiler.report ( JSError.make ( t, secondArgument, STRING_LITERAL_EXPECTED_ERROR, Token.name ( secondArgument.getType (  )  )  )  ) ;^[CLASS] ObjectPropertyStringPreprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  String  EXTERN_OBJECT_PROPERTY_STRING  OBJECT_PROPERTY_STRING  boolean  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  QUALIFIED_NAME_EXPECTED_ERROR  STRING_LITERAL_EXPECTED_ERROR  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[BugLab_Argument_Swapping]^compiler.report ( JSError.make ( STRING_LITERAL_EXPECTED_ERROR, secondArgument, t, Token.name ( secondArgument.getType (  )  )  )  ) ;^116^117^118^^^101^131^compiler.report ( JSError.make ( t, secondArgument, STRING_LITERAL_EXPECTED_ERROR, Token.name ( secondArgument.getType (  )  )  )  ) ;^[CLASS] ObjectPropertyStringPreprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  String  EXTERN_OBJECT_PROPERTY_STRING  OBJECT_PROPERTY_STRING  boolean  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  QUALIFIED_NAME_EXPECTED_ERROR  STRING_LITERAL_EXPECTED_ERROR  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[BugLab_Variable_Misuse]^Token.name ( parent.getType (  )  )  )  ) ;^118^^^^^103^133^Token.name ( secondArgument.getType (  )  )  )  ) ;^[CLASS] ObjectPropertyStringPreprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  String  EXTERN_OBJECT_PROPERTY_STRING  OBJECT_PROPERTY_STRING  boolean  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  QUALIFIED_NAME_EXPECTED_ERROR  STRING_LITERAL_EXPECTED_ERROR  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[BugLab_Variable_Misuse]^Token.name ( newSecondArgument.getType (  )  )  )  ) ;^118^^^^^103^133^Token.name ( secondArgument.getType (  )  )  )  ) ;^[CLASS] ObjectPropertyStringPreprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  String  EXTERN_OBJECT_PROPERTY_STRING  OBJECT_PROPERTY_STRING  boolean  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  QUALIFIED_NAME_EXPECTED_ERROR  STRING_LITERAL_EXPECTED_ERROR  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[BugLab_Variable_Misuse]^if  ( newSecondArgument.getType (  )  != Token.STRING )  {^115^^^^^100^130^if  ( secondArgument.getType (  )  != Token.STRING )  {^[CLASS] ObjectPropertyStringPreprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  String  EXTERN_OBJECT_PROPERTY_STRING  OBJECT_PROPERTY_STRING  boolean  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  QUALIFIED_NAME_EXPECTED_ERROR  STRING_LITERAL_EXPECTED_ERROR  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[BugLab_Variable_Misuse]^compiler.report ( JSError.make ( t, objectName, STRING_LITERAL_EXPECTED_ERROR, Token.name ( secondArgument.getType (  )  )  )  ) ;^116^117^118^^^101^131^compiler.report ( JSError.make ( t, secondArgument, STRING_LITERAL_EXPECTED_ERROR, Token.name ( secondArgument.getType (  )  )  )  ) ;^[CLASS] ObjectPropertyStringPreprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  String  EXTERN_OBJECT_PROPERTY_STRING  OBJECT_PROPERTY_STRING  boolean  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  QUALIFIED_NAME_EXPECTED_ERROR  STRING_LITERAL_EXPECTED_ERROR  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[BugLab_Variable_Misuse]^Token.name ( objectName.getType (  )  )  )  ) ;^118^^^^^103^133^Token.name ( secondArgument.getType (  )  )  )  ) ;^[CLASS] ObjectPropertyStringPreprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  String  EXTERN_OBJECT_PROPERTY_STRING  OBJECT_PROPERTY_STRING  boolean  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  QUALIFIED_NAME_EXPECTED_ERROR  STRING_LITERAL_EXPECTED_ERROR  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[BugLab_Variable_Misuse]^Node newFirstArgument = NodeUtil.newQualifiedNameNode ( compiler.getCodingConvention (  ) .getGlobalObject (  ) , secondArgument.getLineno (  ) , firstArgument.getCharno (  )  ) ;^122^123^124^^^107^137^Node newFirstArgument = NodeUtil.newQualifiedNameNode ( compiler.getCodingConvention (  ) .getGlobalObject (  ) , firstArgument.getLineno (  ) , firstArgument.getCharno (  )  ) ;^[CLASS] ObjectPropertyStringPreprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  String  EXTERN_OBJECT_PROPERTY_STRING  OBJECT_PROPERTY_STRING  boolean  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  QUALIFIED_NAME_EXPECTED_ERROR  STRING_LITERAL_EXPECTED_ERROR  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[BugLab_Argument_Swapping]^Node newFirstArgument = NodeUtil.newQualifiedNameNode ( firstArgument.getCodingConvention (  ) .getGlobalObject (  ) , compiler.getLineno (  ) , firstArgument.getCharno (  )  ) ;^122^123^124^^^107^137^Node newFirstArgument = NodeUtil.newQualifiedNameNode ( compiler.getCodingConvention (  ) .getGlobalObject (  ) , firstArgument.getLineno (  ) , firstArgument.getCharno (  )  ) ;^[CLASS] ObjectPropertyStringPreprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  String  EXTERN_OBJECT_PROPERTY_STRING  OBJECT_PROPERTY_STRING  boolean  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  QUALIFIED_NAME_EXPECTED_ERROR  STRING_LITERAL_EXPECTED_ERROR  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[BugLab_Variable_Misuse]^firstArgument.getLineno (  ) , objectName.getCharno (  )  ) ;^124^^^^^109^139^firstArgument.getLineno (  ) , firstArgument.getCharno (  )  ) ;^[CLASS] ObjectPropertyStringPreprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  String  EXTERN_OBJECT_PROPERTY_STRING  OBJECT_PROPERTY_STRING  boolean  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  QUALIFIED_NAME_EXPECTED_ERROR  STRING_LITERAL_EXPECTED_ERROR  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[BugLab_Variable_Misuse]^firstArgument.getLineno (  ) , secondArgument.getCharno (  )  ) ;^124^^^^^109^139^firstArgument.getLineno (  ) , firstArgument.getCharno (  )  ) ;^[CLASS] ObjectPropertyStringPreprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  String  EXTERN_OBJECT_PROPERTY_STRING  OBJECT_PROPERTY_STRING  boolean  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  QUALIFIED_NAME_EXPECTED_ERROR  STRING_LITERAL_EXPECTED_ERROR  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[BugLab_Variable_Misuse]^Node newSecondArgument = NodeUtil.newQualifiedNameNode ( secondArgument.getQualifiedName (  )  + "." + firstArgument.getNext (  ) .getString (  ) , secondArgument.getLineno (  ) , secondArgument.getCharno (  )  ) ;^125^126^127^128^^110^140^Node newSecondArgument = NodeUtil.newQualifiedNameNode ( firstArgument.getQualifiedName (  )  + "." + firstArgument.getNext (  ) .getString (  ) , secondArgument.getLineno (  ) , secondArgument.getCharno (  )  ) ;^[CLASS] ObjectPropertyStringPreprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  String  EXTERN_OBJECT_PROPERTY_STRING  OBJECT_PROPERTY_STRING  boolean  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  QUALIFIED_NAME_EXPECTED_ERROR  STRING_LITERAL_EXPECTED_ERROR  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[BugLab_Variable_Misuse]^Node newSecondArgument = NodeUtil.newQualifiedNameNode ( firstArgument.getQualifiedName (  )  + "." + firstArgument.getNext (  ) .getString (  ) , parent.getLineno (  ) , secondArgument.getCharno (  )  ) ;^125^126^127^128^^110^140^Node newSecondArgument = NodeUtil.newQualifiedNameNode ( firstArgument.getQualifiedName (  )  + "." + firstArgument.getNext (  ) .getString (  ) , secondArgument.getLineno (  ) , secondArgument.getCharno (  )  ) ;^[CLASS] ObjectPropertyStringPreprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  String  EXTERN_OBJECT_PROPERTY_STRING  OBJECT_PROPERTY_STRING  boolean  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  QUALIFIED_NAME_EXPECTED_ERROR  STRING_LITERAL_EXPECTED_ERROR  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[BugLab_Argument_Swapping]^Node newSecondArgument = NodeUtil.newQualifiedNameNode ( secondArgument.getQualifiedName (  )  + "." + firstArgument.getNext (  ) .getString (  ) , firstArgument.getLineno (  ) , secondArgument.getCharno (  )  ) ;^125^126^127^128^^110^140^Node newSecondArgument = NodeUtil.newQualifiedNameNode ( firstArgument.getQualifiedName (  )  + "." + firstArgument.getNext (  ) .getString (  ) , secondArgument.getLineno (  ) , secondArgument.getCharno (  )  ) ;^[CLASS] ObjectPropertyStringPreprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  String  EXTERN_OBJECT_PROPERTY_STRING  OBJECT_PROPERTY_STRING  boolean  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  QUALIFIED_NAME_EXPECTED_ERROR  STRING_LITERAL_EXPECTED_ERROR  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[BugLab_Wrong_Operator]^Node newSecondArgument = NodeUtil.newQualifiedNameNode ( firstArgument.getQualifiedName (  ||  )  + "." + firstArgument.getNext (  ) .getString (  ) , secondArgument.getLineno (  ) , secondArgument.getCharno (  )  ) ;^125^126^127^128^^110^140^Node newSecondArgument = NodeUtil.newQualifiedNameNode ( firstArgument.getQualifiedName (  )  + "." + firstArgument.getNext (  ) .getString (  ) , secondArgument.getLineno (  ) , secondArgument.getCharno (  )  ) ;^[CLASS] ObjectPropertyStringPreprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  String  EXTERN_OBJECT_PROPERTY_STRING  OBJECT_PROPERTY_STRING  boolean  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  QUALIFIED_NAME_EXPECTED_ERROR  STRING_LITERAL_EXPECTED_ERROR  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[BugLab_Wrong_Operator]^Node newSecondArgument = NodeUtil.newQualifiedNameNode ( firstArgument.getQualifiedName (  )   <  "." + firstArgument.getNext (  ) .getString (  ) , secondArgument.getLineno (  ) , secondArgument.getCharno (  )  ) ;^125^126^127^128^^110^140^Node newSecondArgument = NodeUtil.newQualifiedNameNode ( firstArgument.getQualifiedName (  )  + "." + firstArgument.getNext (  ) .getString (  ) , secondArgument.getLineno (  ) , secondArgument.getCharno (  )  ) ;^[CLASS] ObjectPropertyStringPreprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  String  EXTERN_OBJECT_PROPERTY_STRING  OBJECT_PROPERTY_STRING  boolean  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  QUALIFIED_NAME_EXPECTED_ERROR  STRING_LITERAL_EXPECTED_ERROR  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[BugLab_Variable_Misuse]^Node newSecondArgument = NodeUtil.newQualifiedNameNode ( objectName.getQualifiedName (  )  + "." + firstArgument.getNext (  ) .getString (  ) , secondArgument.getLineno (  ) , secondArgument.getCharno (  )  ) ;^125^126^127^128^^110^140^Node newSecondArgument = NodeUtil.newQualifiedNameNode ( firstArgument.getQualifiedName (  )  + "." + firstArgument.getNext (  ) .getString (  ) , secondArgument.getLineno (  ) , secondArgument.getCharno (  )  ) ;^[CLASS] ObjectPropertyStringPreprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  String  EXTERN_OBJECT_PROPERTY_STRING  OBJECT_PROPERTY_STRING  boolean  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  QUALIFIED_NAME_EXPECTED_ERROR  STRING_LITERAL_EXPECTED_ERROR  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[BugLab_Variable_Misuse]^Node newSecondArgument = NodeUtil.newQualifiedNameNode ( firstArgument.getQualifiedName (  )  + "." + firstArgument.getNext (  ) .getString (  ) , objectName.getLineno (  ) , secondArgument.getCharno (  )  ) ;^125^126^127^128^^110^140^Node newSecondArgument = NodeUtil.newQualifiedNameNode ( firstArgument.getQualifiedName (  )  + "." + firstArgument.getNext (  ) .getString (  ) , secondArgument.getLineno (  ) , secondArgument.getCharno (  )  ) ;^[CLASS] ObjectPropertyStringPreprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  String  EXTERN_OBJECT_PROPERTY_STRING  OBJECT_PROPERTY_STRING  boolean  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  QUALIFIED_NAME_EXPECTED_ERROR  STRING_LITERAL_EXPECTED_ERROR  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[BugLab_Wrong_Operator]^Node newSecondArgument = NodeUtil.newQualifiedNameNode ( firstArgument.getQualifiedName (  !=  )  + "." + firstArgument.getNext (  ) .getString (  ) , secondArgument.getLineno (  ) , secondArgument.getCharno (  )  ) ;^125^126^127^128^^110^140^Node newSecondArgument = NodeUtil.newQualifiedNameNode ( firstArgument.getQualifiedName (  )  + "." + firstArgument.getNext (  ) .getString (  ) , secondArgument.getLineno (  ) , secondArgument.getCharno (  )  ) ;^[CLASS] ObjectPropertyStringPreprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  String  EXTERN_OBJECT_PROPERTY_STRING  OBJECT_PROPERTY_STRING  boolean  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  QUALIFIED_NAME_EXPECTED_ERROR  STRING_LITERAL_EXPECTED_ERROR  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[BugLab_Wrong_Operator]^Node newSecondArgument = NodeUtil.newQualifiedNameNode ( firstArgument.getQualifiedName (  )   &&  "." + firstArgument.getNext (  ) .getString (  ) , secondArgument.getLineno (  ) , secondArgument.getCharno (  )  ) ;^125^126^127^128^^110^140^Node newSecondArgument = NodeUtil.newQualifiedNameNode ( firstArgument.getQualifiedName (  )  + "." + firstArgument.getNext (  ) .getString (  ) , secondArgument.getLineno (  ) , secondArgument.getCharno (  )  ) ;^[CLASS] ObjectPropertyStringPreprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  String  EXTERN_OBJECT_PROPERTY_STRING  OBJECT_PROPERTY_STRING  boolean  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  QUALIFIED_NAME_EXPECTED_ERROR  STRING_LITERAL_EXPECTED_ERROR  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[BugLab_Variable_Misuse]^firstArgument.getQualifiedName (  )  + "." + secondArgument.getNext (  ) .getString (  ) , secondArgument.getLineno (  ) , secondArgument.getCharno (  )  ) ;^126^127^128^^^111^141^firstArgument.getQualifiedName (  )  + "." + firstArgument.getNext (  ) .getString (  ) , secondArgument.getLineno (  ) , secondArgument.getCharno (  )  ) ;^[CLASS] ObjectPropertyStringPreprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  String  EXTERN_OBJECT_PROPERTY_STRING  OBJECT_PROPERTY_STRING  boolean  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  QUALIFIED_NAME_EXPECTED_ERROR  STRING_LITERAL_EXPECTED_ERROR  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[BugLab_Variable_Misuse]^secondArgument.getLineno (  ) , newSecondArgument.getCharno (  )  ) ;^128^^^^^113^143^secondArgument.getLineno (  ) , secondArgument.getCharno (  )  ) ;^[CLASS] ObjectPropertyStringPreprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  String  EXTERN_OBJECT_PROPERTY_STRING  OBJECT_PROPERTY_STRING  boolean  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  QUALIFIED_NAME_EXPECTED_ERROR  STRING_LITERAL_EXPECTED_ERROR  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[BugLab_Variable_Misuse]^n.replaceChild ( firstArgument, parentewFirstArgument ) ;^129^^^^^114^144^n.replaceChild ( firstArgument, newFirstArgument ) ;^[CLASS] ObjectPropertyStringPreprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  String  EXTERN_OBJECT_PROPERTY_STRING  OBJECT_PROPERTY_STRING  boolean  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  QUALIFIED_NAME_EXPECTED_ERROR  STRING_LITERAL_EXPECTED_ERROR  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[BugLab_Variable_Misuse]^n.replaceChild ( secondArgument, newFirstArgument ) ;^129^^^^^114^144^n.replaceChild ( firstArgument, newFirstArgument ) ;^[CLASS] ObjectPropertyStringPreprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  String  EXTERN_OBJECT_PROPERTY_STRING  OBJECT_PROPERTY_STRING  boolean  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  QUALIFIED_NAME_EXPECTED_ERROR  STRING_LITERAL_EXPECTED_ERROR  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[BugLab_Variable_Misuse]^n.replaceChild ( firstArgument, parent ) ;^129^^^^^114^144^n.replaceChild ( firstArgument, newFirstArgument ) ;^[CLASS] ObjectPropertyStringPreprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  String  EXTERN_OBJECT_PROPERTY_STRING  OBJECT_PROPERTY_STRING  boolean  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  QUALIFIED_NAME_EXPECTED_ERROR  STRING_LITERAL_EXPECTED_ERROR  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[BugLab_Argument_Swapping]^n.replaceChild ( firstArgument, newFirstArgumentewFirstArgument ) ;^129^^^^^114^144^n.replaceChild ( firstArgument, newFirstArgument ) ;^[CLASS] ObjectPropertyStringPreprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  String  EXTERN_OBJECT_PROPERTY_STRING  OBJECT_PROPERTY_STRING  boolean  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  QUALIFIED_NAME_EXPECTED_ERROR  STRING_LITERAL_EXPECTED_ERROR  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[BugLab_Argument_Swapping]^n.replaceChild ( n, firstArgumentewFirstArgument ) ;^129^^^^^114^144^n.replaceChild ( firstArgument, newFirstArgument ) ;^[CLASS] ObjectPropertyStringPreprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  String  EXTERN_OBJECT_PROPERTY_STRING  OBJECT_PROPERTY_STRING  boolean  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  QUALIFIED_NAME_EXPECTED_ERROR  STRING_LITERAL_EXPECTED_ERROR  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[BugLab_Argument_Swapping]^n.replaceChild ( firstArgument, n ) ;^129^^^^^114^144^n.replaceChild ( firstArgument, newFirstArgument ) ;^[CLASS] ObjectPropertyStringPreprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  String  EXTERN_OBJECT_PROPERTY_STRING  OBJECT_PROPERTY_STRING  boolean  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  QUALIFIED_NAME_EXPECTED_ERROR  STRING_LITERAL_EXPECTED_ERROR  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[BugLab_Variable_Misuse]^n.replaceChild ( secondArgument, secondArgumentewSecondArgument ) ;^130^^^^^115^145^n.replaceChild ( secondArgument, newSecondArgument ) ;^[CLASS] ObjectPropertyStringPreprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  String  EXTERN_OBJECT_PROPERTY_STRING  OBJECT_PROPERTY_STRING  boolean  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  QUALIFIED_NAME_EXPECTED_ERROR  STRING_LITERAL_EXPECTED_ERROR  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[BugLab_Variable_Misuse]^n.replaceChild ( objectName, newSecondArgument ) ;^130^^^^^115^145^n.replaceChild ( secondArgument, newSecondArgument ) ;^[CLASS] ObjectPropertyStringPreprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  String  EXTERN_OBJECT_PROPERTY_STRING  OBJECT_PROPERTY_STRING  boolean  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  QUALIFIED_NAME_EXPECTED_ERROR  STRING_LITERAL_EXPECTED_ERROR  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[BugLab_Variable_Misuse]^n.replaceChild ( secondArgument, secondArgument ) ;^130^^^^^115^145^n.replaceChild ( secondArgument, newSecondArgument ) ;^[CLASS] ObjectPropertyStringPreprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  String  EXTERN_OBJECT_PROPERTY_STRING  OBJECT_PROPERTY_STRING  boolean  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  QUALIFIED_NAME_EXPECTED_ERROR  STRING_LITERAL_EXPECTED_ERROR  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[BugLab_Argument_Swapping]^n.replaceChild ( secondArgument, newSecondArgumentewSecondArgument ) ;^130^^^^^115^145^n.replaceChild ( secondArgument, newSecondArgument ) ;^[CLASS] ObjectPropertyStringPreprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  String  EXTERN_OBJECT_PROPERTY_STRING  OBJECT_PROPERTY_STRING  boolean  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  QUALIFIED_NAME_EXPECTED_ERROR  STRING_LITERAL_EXPECTED_ERROR  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[BugLab_Argument_Swapping]^n.replaceChild ( n, secondArgumentewSecondArgument ) ;^130^^^^^115^145^n.replaceChild ( secondArgument, newSecondArgument ) ;^[CLASS] ObjectPropertyStringPreprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  String  EXTERN_OBJECT_PROPERTY_STRING  OBJECT_PROPERTY_STRING  boolean  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  QUALIFIED_NAME_EXPECTED_ERROR  STRING_LITERAL_EXPECTED_ERROR  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[BugLab_Argument_Swapping]^n.replaceChild ( secondArgument, n ) ;^130^^^^^115^145^n.replaceChild ( secondArgument, newSecondArgument ) ;^[CLASS] ObjectPropertyStringPreprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  String  EXTERN_OBJECT_PROPERTY_STRING  OBJECT_PROPERTY_STRING  boolean  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  QUALIFIED_NAME_EXPECTED_ERROR  STRING_LITERAL_EXPECTED_ERROR  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[BugLab_Variable_Misuse]^if  ( 3.equals ( n.getQualifiedName (  )  )  )  {^77^^^^^62^92^if  ( OBJECT_PROPERTY_STRING.equals ( n.getQualifiedName (  )  )  )  {^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[BugLab_Variable_Misuse]^parent.replaceChild ( objectName, newName ) ;^81^^^^^66^96^parent.replaceChild ( n, newName ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[BugLab_Variable_Misuse]^parent.replaceChild ( n, secondArgument ) ;^81^^^^^66^96^parent.replaceChild ( n, newName ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[BugLab_Argument_Swapping]^parent.replaceChild ( newName, n ) ;^81^^^^^66^96^parent.replaceChild ( n, newName ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[BugLab_Argument_Swapping]^if  ( n.equals ( OBJECT_PROPERTY_STRING.getQualifiedName (  )  )  )  {^77^^^^^62^92^if  ( OBJECT_PROPERTY_STRING.equals ( n.getQualifiedName (  )  )  )  {^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[BugLab_Variable_Misuse]^if  ( OBJECT_PROPERTY_STRING.equals ( parent.getQualifiedName (  )  )  )  {^77^^^^^62^92^if  ( OBJECT_PROPERTY_STRING.equals ( n.getQualifiedName (  )  )  )  {^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[BugLab_Variable_Misuse]^newName.copyInformationFrom ( secondArgument ) ;^80^^^^^65^95^newName.copyInformationFrom ( n ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[BugLab_Wrong_Operator]^if  ( n.getType (  )  < Token.NEW )  {^89^^^^^74^104^if  ( n.getType (  )  != Token.NEW )  {^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[BugLab_Variable_Misuse]^Node objectName = parent.getFirstChild (  ) ;^93^^^^^78^108^Node objectName = n.getFirstChild (  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[BugLab_Variable_Misuse]^Node objectName = objectName.getFirstChild (  ) ;^93^^^^^78^108^Node objectName = n.getFirstChild (  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[BugLab_Variable_Misuse]^if  ( !EXTERN_OBJECT_PROPERTY_STRING.equals ( newSecondArgument.getQualifiedName (  )  )  )  {^95^96^^^^80^110^if  ( !EXTERN_OBJECT_PROPERTY_STRING.equals ( objectName.getQualifiedName (  )  )  )  {^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[BugLab_Variable_Misuse]^if  ( secondArgument.getChildCount (  )  != 3 )  {^100^^^^^85^115^if  ( n.getChildCount (  )  != 3 )  {^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[BugLab_Wrong_Operator]^if  ( n.getChildCount (  )  <= 3 )  {^100^^^^^85^115^if  ( n.getChildCount (  )  != 3 )  {^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[BugLab_Wrong_Literal]^if  ( n.getChildCount (  )  != 4 )  {^100^^^^^85^115^if  ( n.getChildCount (  )  != 3 )  {^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[BugLab_Argument_Swapping]^compiler.report ( JSError.make ( INVALID_NUM_ARGUMENTS_ERROR, n, t, "" + n.getChildCount (  )  )  ) ;^101^102^^^^86^116^compiler.report ( JSError.make ( t, n, INVALID_NUM_ARGUMENTS_ERROR, "" + n.getChildCount (  )  )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[BugLab_Argument_Swapping]^compiler.report ( JSError.make ( n, t, INVALID_NUM_ARGUMENTS_ERROR, "" + n.getChildCount (  )  )  ) ;^101^102^^^^86^116^compiler.report ( JSError.make ( t, n, INVALID_NUM_ARGUMENTS_ERROR, "" + n.getChildCount (  )  )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[BugLab_Wrong_Operator]^compiler.report ( JSError.make ( t, n, INVALID_NUM_ARGUMENTS_ERROR, ""  <=  n.getChildCount (  )  )  ) ;^101^102^^^^86^116^compiler.report ( JSError.make ( t, n, INVALID_NUM_ARGUMENTS_ERROR, "" + n.getChildCount (  )  )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[BugLab_Variable_Misuse]^compiler.report ( JSError.make ( t, secondArgument, INVALID_NUM_ARGUMENTS_ERROR, "" + n.getChildCount (  )  )  ) ;^101^102^^^^86^116^compiler.report ( JSError.make ( t, n, INVALID_NUM_ARGUMENTS_ERROR, "" + n.getChildCount (  )  )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[BugLab_Wrong_Operator]^compiler.report ( JSError.make ( t, n, INVALID_NUM_ARGUMENTS_ERROR, ""  ^  n.getChildCount (  )  )  ) ;^101^102^^^^86^116^compiler.report ( JSError.make ( t, n, INVALID_NUM_ARGUMENTS_ERROR, "" + n.getChildCount (  )  )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[BugLab_Variable_Misuse]^"" + objectName.getChildCount (  )  )  ) ;^102^^^^^87^117^"" + n.getChildCount (  )  )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[BugLab_Variable_Misuse]^if  ( objectName.getChildCount (  )  != 3 )  {^100^^^^^85^115^if  ( n.getChildCount (  )  != 3 )  {^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[BugLab_Argument_Swapping]^compiler.report ( JSError.make ( t, INVALID_NUM_ARGUMENTS_ERROR, n, "" + n.getChildCount (  )  )  ) ;^101^102^^^^86^116^compiler.report ( JSError.make ( t, n, INVALID_NUM_ARGUMENTS_ERROR, "" + n.getChildCount (  )  )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[BugLab_Wrong_Operator]^compiler.report ( JSError.make ( t, n, INVALID_NUM_ARGUMENTS_ERROR, ""  >  n.getChildCount (  )  )  ) ;^101^102^^^^86^116^compiler.report ( JSError.make ( t, n, INVALID_NUM_ARGUMENTS_ERROR, "" + n.getChildCount (  )  )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[BugLab_Variable_Misuse]^compiler.report ( JSError.make ( t, objectName, INVALID_NUM_ARGUMENTS_ERROR, "" + n.getChildCount (  )  )  ) ;^101^102^^^^86^116^compiler.report ( JSError.make ( t, n, INVALID_NUM_ARGUMENTS_ERROR, "" + n.getChildCount (  )  )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[BugLab_Wrong_Operator]^compiler.report ( JSError.make ( t, n, INVALID_NUM_ARGUMENTS_ERROR, ""  ||  n.getChildCount (  )  )  ) ;^101^102^^^^86^116^compiler.report ( JSError.make ( t, n, INVALID_NUM_ARGUMENTS_ERROR, "" + n.getChildCount (  )  )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[BugLab_Variable_Misuse]^"" + secondArgument.getChildCount (  )  )  ) ;^102^^^^^87^117^"" + n.getChildCount (  )  )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[BugLab_Variable_Misuse]^Node firstArgument = secondArgument.getNext (  ) ;^106^^^^^91^121^Node firstArgument = objectName.getNext (  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[BugLab_Variable_Misuse]^compiler.report ( JSError.make ( t, secondArgument, QUALIFIED_NAME_EXPECTED_ERROR, Token.name ( firstArgument.getType (  )  )  )  ) ;^108^109^110^^^93^123^compiler.report ( JSError.make ( t, firstArgument, QUALIFIED_NAME_EXPECTED_ERROR, Token.name ( firstArgument.getType (  )  )  )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[BugLab_Argument_Swapping]^compiler.report ( JSError.make ( t, QUALIFIED_NAME_EXPECTED_ERROR, firstArgument, Token.name ( firstArgument.getType (  )  )  )  ) ;^108^109^110^^^93^123^compiler.report ( JSError.make ( t, firstArgument, QUALIFIED_NAME_EXPECTED_ERROR, Token.name ( firstArgument.getType (  )  )  )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[BugLab_Variable_Misuse]^compiler.report ( JSError.make ( t, objectName, QUALIFIED_NAME_EXPECTED_ERROR, Token.name ( firstArgument.getType (  )  )  )  ) ;^108^109^110^^^93^123^compiler.report ( JSError.make ( t, firstArgument, QUALIFIED_NAME_EXPECTED_ERROR, Token.name ( firstArgument.getType (  )  )  )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[BugLab_Variable_Misuse]^compiler.report ( JSError.make ( t, firstArgument, 2, Token.name ( firstArgument.getType (  )  )  )  ) ;^108^109^110^^^93^123^compiler.report ( JSError.make ( t, firstArgument, QUALIFIED_NAME_EXPECTED_ERROR, Token.name ( firstArgument.getType (  )  )  )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[BugLab_Argument_Swapping]^compiler.report ( JSError.make ( QUALIFIED_NAME_EXPECTED_ERROR, firstArgument, t, Token.name ( firstArgument.getType (  )  )  )  ) ;^108^109^110^^^93^123^compiler.report ( JSError.make ( t, firstArgument, QUALIFIED_NAME_EXPECTED_ERROR, Token.name ( firstArgument.getType (  )  )  )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[BugLab_Variable_Misuse]^Token.name ( objectName.getType (  )  )  )  ) ;^110^^^^^95^125^Token.name ( firstArgument.getType (  )  )  )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[BugLab_Argument_Swapping]^compiler.report ( JSError.make ( firstArgument, t, QUALIFIED_NAME_EXPECTED_ERROR, Token.name ( firstArgument.getType (  )  )  )  ) ;^108^109^110^^^93^123^compiler.report ( JSError.make ( t, firstArgument, QUALIFIED_NAME_EXPECTED_ERROR, Token.name ( firstArgument.getType (  )  )  )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[BugLab_Variable_Misuse]^Token.name ( secondArgument.getType (  )  )  )  ) ;^110^^^^^95^125^Token.name ( firstArgument.getType (  )  )  )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[BugLab_Variable_Misuse]^Node secondArgument = parent.getNext (  ) ;^114^^^^^99^129^Node secondArgument = firstArgument.getNext (  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[BugLab_Variable_Misuse]^if  ( objectName.getType (  )  != Token.STRING )  {^115^^^^^100^130^if  ( secondArgument.getType (  )  != Token.STRING )  {^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[BugLab_Wrong_Operator]^if  ( secondArgument.getType (  )  == Token.STRING )  {^115^^^^^100^130^if  ( secondArgument.getType (  )  != Token.STRING )  {^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[BugLab_Variable_Misuse]^compiler.report ( JSError.make ( t, parent, STRING_LITERAL_EXPECTED_ERROR, Token.name ( secondArgument.getType (  )  )  )  ) ;^116^117^118^^^101^131^compiler.report ( JSError.make ( t, secondArgument, STRING_LITERAL_EXPECTED_ERROR, Token.name ( secondArgument.getType (  )  )  )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[BugLab_Argument_Swapping]^compiler.report ( JSError.make ( STRING_LITERAL_EXPECTED_ERROR, secondArgument, t, Token.name ( secondArgument.getType (  )  )  )  ) ;^116^117^118^^^101^131^compiler.report ( JSError.make ( t, secondArgument, STRING_LITERAL_EXPECTED_ERROR, Token.name ( secondArgument.getType (  )  )  )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[BugLab_Argument_Swapping]^compiler.report ( JSError.make ( secondArgument, t, STRING_LITERAL_EXPECTED_ERROR, Token.name ( secondArgument.getType (  )  )  )  ) ;^116^117^118^^^101^131^compiler.report ( JSError.make ( t, secondArgument, STRING_LITERAL_EXPECTED_ERROR, Token.name ( secondArgument.getType (  )  )  )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[BugLab_Argument_Swapping]^compiler.report ( JSError.make ( t, STRING_LITERAL_EXPECTED_ERROR, secondArgument, Token.name ( secondArgument.getType (  )  )  )  ) ;^116^117^118^^^101^131^compiler.report ( JSError.make ( t, secondArgument, STRING_LITERAL_EXPECTED_ERROR, Token.name ( secondArgument.getType (  )  )  )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[BugLab_Variable_Misuse]^compiler.report ( JSError.make ( t, objectName, STRING_LITERAL_EXPECTED_ERROR, Token.name ( secondArgument.getType (  )  )  )  ) ;^116^117^118^^^101^131^compiler.report ( JSError.make ( t, secondArgument, STRING_LITERAL_EXPECTED_ERROR, Token.name ( secondArgument.getType (  )  )  )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[BugLab_Variable_Misuse]^Token.name ( parent.getType (  )  )  )  ) ;^118^^^^^103^133^Token.name ( secondArgument.getType (  )  )  )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[BugLab_Variable_Misuse]^Token.name ( newSecondArgument.getType (  )  )  )  ) ;^118^^^^^103^133^Token.name ( secondArgument.getType (  )  )  )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[BugLab_Variable_Misuse]^if  ( parent.getType (  )  != Token.STRING )  {^115^^^^^100^130^if  ( secondArgument.getType (  )  != Token.STRING )  {^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[BugLab_Variable_Misuse]^compiler.report ( JSError.make ( t, newSecondArgument, STRING_LITERAL_EXPECTED_ERROR, Token.name ( secondArgument.getType (  )  )  )  ) ;^116^117^118^^^101^131^compiler.report ( JSError.make ( t, secondArgument, STRING_LITERAL_EXPECTED_ERROR, Token.name ( secondArgument.getType (  )  )  )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[BugLab_Variable_Misuse]^Token.name ( objectName.getType (  )  )  )  ) ;^118^^^^^103^133^Token.name ( secondArgument.getType (  )  )  )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[BugLab_Variable_Misuse]^Node newFirstArgument = NodeUtil.newQualifiedNameNode ( compiler.getCodingConvention (  ) .getGlobalObject (  ) , parent.getLineno (  ) , firstArgument.getCharno (  )  ) ;^122^123^124^^^107^137^Node newFirstArgument = NodeUtil.newQualifiedNameNode ( compiler.getCodingConvention (  ) .getGlobalObject (  ) , firstArgument.getLineno (  ) , firstArgument.getCharno (  )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[BugLab_Argument_Swapping]^Node newFirstArgument = NodeUtil.newQualifiedNameNode ( firstArgument.getCodingConvention (  ) .getGlobalObject (  ) , compiler.getLineno (  ) , firstArgument.getCharno (  )  ) ;^122^123^124^^^107^137^Node newFirstArgument = NodeUtil.newQualifiedNameNode ( compiler.getCodingConvention (  ) .getGlobalObject (  ) , firstArgument.getLineno (  ) , firstArgument.getCharno (  )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[BugLab_Variable_Misuse]^Node newFirstArgument = NodeUtil.newQualifiedNameNode ( compiler.getCodingConvention (  ) .getGlobalObject (  ) , secondArgument.getLineno (  ) , firstArgument.getCharno (  )  ) ;^122^123^124^^^107^137^Node newFirstArgument = NodeUtil.newQualifiedNameNode ( compiler.getCodingConvention (  ) .getGlobalObject (  ) , firstArgument.getLineno (  ) , firstArgument.getCharno (  )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[BugLab_Variable_Misuse]^firstArgument.getLineno (  ) , secondArgument.getCharno (  )  ) ;^124^^^^^109^139^firstArgument.getLineno (  ) , firstArgument.getCharno (  )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[BugLab_Variable_Misuse]^firstArgument.getLineno (  ) , objectName.getCharno (  )  ) ;^124^^^^^109^139^firstArgument.getLineno (  ) , firstArgument.getCharno (  )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[BugLab_Variable_Misuse]^Node newSecondArgument = NodeUtil.newQualifiedNameNode ( secondArgument.getQualifiedName (  )  + "." + firstArgument.getNext (  ) .getString (  ) , secondArgument.getLineno (  ) , secondArgument.getCharno (  )  ) ;^125^126^127^128^^110^140^Node newSecondArgument = NodeUtil.newQualifiedNameNode ( firstArgument.getQualifiedName (  )  + "." + firstArgument.getNext (  ) .getString (  ) , secondArgument.getLineno (  ) , secondArgument.getCharno (  )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[BugLab_Variable_Misuse]^Node newSecondArgument = NodeUtil.newQualifiedNameNode ( firstArgument.getQualifiedName (  )  + "." + firstArgument.getNext (  ) .getString (  ) , parent.getLineno (  ) , secondArgument.getCharno (  )  ) ;^125^126^127^128^^110^140^Node newSecondArgument = NodeUtil.newQualifiedNameNode ( firstArgument.getQualifiedName (  )  + "." + firstArgument.getNext (  ) .getString (  ) , secondArgument.getLineno (  ) , secondArgument.getCharno (  )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[BugLab_Argument_Swapping]^Node newSecondArgument = NodeUtil.newQualifiedNameNode ( secondArgument.getQualifiedName (  )  + "." + firstArgument.getNext (  ) .getString (  ) , firstArgument.getLineno (  ) , secondArgument.getCharno (  )  ) ;^125^126^127^128^^110^140^Node newSecondArgument = NodeUtil.newQualifiedNameNode ( firstArgument.getQualifiedName (  )  + "." + firstArgument.getNext (  ) .getString (  ) , secondArgument.getLineno (  ) , secondArgument.getCharno (  )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[BugLab_Wrong_Operator]^Node newSecondArgument = NodeUtil.newQualifiedNameNode ( firstArgument.getQualifiedName (  &&  )  + "." + firstArgument.getNext (  ) .getString (  ) , secondArgument.getLineno (  ) , secondArgument.getCharno (  )  ) ;^125^126^127^128^^110^140^Node newSecondArgument = NodeUtil.newQualifiedNameNode ( firstArgument.getQualifiedName (  )  + "." + firstArgument.getNext (  ) .getString (  ) , secondArgument.getLineno (  ) , secondArgument.getCharno (  )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[BugLab_Wrong_Operator]^Node newSecondArgument = NodeUtil.newQualifiedNameNode ( firstArgument.getQualifiedName (  )   |  "." + firstArgument.getNext (  ) .getString (  ) , secondArgument.getLineno (  ) , secondArgument.getCharno (  )  ) ;^125^126^127^128^^110^140^Node newSecondArgument = NodeUtil.newQualifiedNameNode ( firstArgument.getQualifiedName (  )  + "." + firstArgument.getNext (  ) .getString (  ) , secondArgument.getLineno (  ) , secondArgument.getCharno (  )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[BugLab_Variable_Misuse]^Node newSecondArgument = NodeUtil.newQualifiedNameNode ( parent.getQualifiedName (  )  + "." + firstArgument.getNext (  ) .getString (  ) , secondArgument.getLineno (  ) , secondArgument.getCharno (  )  ) ;^125^126^127^128^^110^140^Node newSecondArgument = NodeUtil.newQualifiedNameNode ( firstArgument.getQualifiedName (  )  + "." + firstArgument.getNext (  ) .getString (  ) , secondArgument.getLineno (  ) , secondArgument.getCharno (  )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[BugLab_Variable_Misuse]^Node newSecondArgument = NodeUtil.newQualifiedNameNode ( firstArgument.getQualifiedName (  )  + "." + firstArgument.getNext (  ) .getString (  ) , objectName.getLineno (  ) , secondArgument.getCharno (  )  ) ;^125^126^127^128^^110^140^Node newSecondArgument = NodeUtil.newQualifiedNameNode ( firstArgument.getQualifiedName (  )  + "." + firstArgument.getNext (  ) .getString (  ) , secondArgument.getLineno (  ) , secondArgument.getCharno (  )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[BugLab_Wrong_Operator]^Node newSecondArgument = NodeUtil.newQualifiedNameNode ( firstArgument.getQualifiedName (   instanceof   )  + "." + firstArgument.getNext (  ) .getString (  ) , secondArgument.getLineno (  ) , secondArgument.getCharno (  )  ) ;^125^126^127^128^^110^140^Node newSecondArgument = NodeUtil.newQualifiedNameNode ( firstArgument.getQualifiedName (  )  + "." + firstArgument.getNext (  ) .getString (  ) , secondArgument.getLineno (  ) , secondArgument.getCharno (  )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[BugLab_Wrong_Operator]^Node newSecondArgument = NodeUtil.newQualifiedNameNode ( firstArgument.getQualifiedName (  )   !=  "." + firstArgument.getNext (  ) .getString (  ) , secondArgument.getLineno (  ) , secondArgument.getCharno (  )  ) ;^125^126^127^128^^110^140^Node newSecondArgument = NodeUtil.newQualifiedNameNode ( firstArgument.getQualifiedName (  )  + "." + firstArgument.getNext (  ) .getString (  ) , secondArgument.getLineno (  ) , secondArgument.getCharno (  )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[BugLab_Variable_Misuse]^firstArgument.getQualifiedName (  )  + "." + parent.getNext (  ) .getString (  ) , secondArgument.getLineno (  ) , secondArgument.getCharno (  )  ) ;^126^127^128^^^111^141^firstArgument.getQualifiedName (  )  + "." + firstArgument.getNext (  ) .getString (  ) , secondArgument.getLineno (  ) , secondArgument.getCharno (  )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[BugLab_Variable_Misuse]^secondArgument.getLineno (  ) , newSecondArgument.getCharno (  )  ) ;^128^^^^^113^143^secondArgument.getLineno (  ) , secondArgument.getCharno (  )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[BugLab_Variable_Misuse]^secondArgument.getLineno (  ) , parent.getCharno (  )  ) ;^128^^^^^113^143^secondArgument.getLineno (  ) , secondArgument.getCharno (  )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[BugLab_Variable_Misuse]^n.replaceChild ( firstArgument, parentewFirstArgument ) ;^129^^^^^114^144^n.replaceChild ( firstArgument, newFirstArgument ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[BugLab_Variable_Misuse]^n.replaceChild ( secondArgument, newFirstArgument ) ;^129^^^^^114^144^n.replaceChild ( firstArgument, newFirstArgument ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[BugLab_Variable_Misuse]^n.replaceChild ( firstArgument, secondArgument ) ;^129^^^^^114^144^n.replaceChild ( firstArgument, newFirstArgument ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[BugLab_Argument_Swapping]^n.replaceChild ( n, firstArgumentewFirstArgument ) ;^129^^^^^114^144^n.replaceChild ( firstArgument, newFirstArgument ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[BugLab_Argument_Swapping]^n.replaceChild ( newFirstArgument, firstArgument ) ;^129^^^^^114^144^n.replaceChild ( firstArgument, newFirstArgument ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[BugLab_Variable_Misuse]^n.replaceChild ( secondArgument, parentewSecondArgument ) ;^130^^^^^115^145^n.replaceChild ( secondArgument, newSecondArgument ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[BugLab_Variable_Misuse]^n.replaceChild ( parent, newSecondArgument ) ;^130^^^^^115^145^n.replaceChild ( secondArgument, newSecondArgument ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[BugLab_Variable_Misuse]^n.replaceChild ( secondArgument, parent ) ;^130^^^^^115^145^n.replaceChild ( secondArgument, newSecondArgument ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[BugLab_Argument_Swapping]^n.replaceChild ( secondArgument, newSecondArgumentewSecondArgument ) ;^130^^^^^115^145^n.replaceChild ( secondArgument, newSecondArgument ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[BugLab_Argument_Swapping]^n.replaceChild ( n, secondArgumentewSecondArgument ) ;^130^^^^^115^145^n.replaceChild ( secondArgument, newSecondArgument ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[BugLab_Argument_Swapping]^n.replaceChild ( newSecondArgument, secondArgument ) ;^130^^^^^115^145^n.replaceChild ( secondArgument, newSecondArgument ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
