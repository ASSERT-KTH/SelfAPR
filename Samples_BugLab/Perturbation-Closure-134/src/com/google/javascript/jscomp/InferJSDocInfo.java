[BugLab_Wrong_Operator]^if  ( externs == null )  {^72^^^^^71^80^if  ( externs != null )  {^[CLASS] InferJSDocInfo  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  inExterns  Node  externs  root  
[BugLab_Wrong_Literal]^inExterns = false;^73^^^^^71^80^inExterns = true;^[CLASS] InferJSDocInfo  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  inExterns  Node  externs  root  
[BugLab_Variable_Misuse]^NodeTraversal.traverse ( compiler, root, this ) ;^74^^^^^71^80^NodeTraversal.traverse ( compiler, externs, this ) ;^[CLASS] InferJSDocInfo  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  inExterns  Node  externs  root  
[BugLab_Argument_Swapping]^NodeTraversal.traverse ( externs, compiler, this ) ;^74^^^^^71^80^NodeTraversal.traverse ( compiler, externs, this ) ;^[CLASS] InferJSDocInfo  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  inExterns  Node  externs  root  
[BugLab_Variable_Misuse]^if  ( externs != null )  {^76^^^^^71^80^if  ( root != null )  {^[CLASS] InferJSDocInfo  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  inExterns  Node  externs  root  
[BugLab_Wrong_Operator]^if  ( root == null )  {^76^^^^^71^80^if  ( root != null )  {^[CLASS] InferJSDocInfo  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  inExterns  Node  externs  root  
[BugLab_Wrong_Literal]^inExterns = true;^77^^^^^71^80^inExterns = false;^[CLASS] InferJSDocInfo  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  inExterns  Node  externs  root  
[BugLab_Variable_Misuse]^NodeTraversal.traverse ( compiler, externs, this ) ;^78^^^^^71^80^NodeTraversal.traverse ( compiler, root, this ) ;^[CLASS] InferJSDocInfo  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  inExterns  Node  externs  root  
[BugLab_Argument_Swapping]^NodeTraversal.traverse ( root, compiler, this ) ;^78^^^^^71^80^NodeTraversal.traverse ( compiler, root, this ) ;^[CLASS] InferJSDocInfo  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  inExterns  Node  externs  root  
[BugLab_Variable_Misuse]^if  ( n == null )  {^88^^^^^73^103^if  ( parent == null )  {^[CLASS] InferJSDocInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ObjectType  lhsType  objType  propType  AbstractCompiler  compiler  boolean  inExterns  JSType  varType  NodeTraversal  t  Node  n  parent  String  propName  JSDocInfo  docInfo  
[BugLab_Wrong_Operator]^if  ( parent != null )  {^88^^^^^73^103^if  ( parent == null )  {^[CLASS] InferJSDocInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ObjectType  lhsType  objType  propType  AbstractCompiler  compiler  boolean  inExterns  JSType  varType  NodeTraversal  t  Node  n  parent  String  propName  JSDocInfo  docInfo  
[BugLab_Argument_Swapping]^if  ( n.getType (  )  != Token.VAR && !NodeUtil.isFunctionDeclaration ( parent )  && ! ( parent.getType (  )  == Token.ASSIGN && parent == parent.getFirstChild (  )  )  )  {^93^94^95^96^^78^108^if  ( parent.getType (  )  != Token.VAR && !NodeUtil.isFunctionDeclaration ( parent )  && ! ( parent.getType (  )  == Token.ASSIGN && n == parent.getFirstChild (  )  )  )  {^[CLASS] InferJSDocInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ObjectType  lhsType  objType  propType  AbstractCompiler  compiler  boolean  inExterns  JSType  varType  NodeTraversal  t  Node  n  parent  String  propName  JSDocInfo  docInfo  
[BugLab_Wrong_Operator]^if  ( parent.getType (  )  != Token.VAR || !NodeUtil.isFunctionDeclaration ( parent )  && ! ( parent.getType (  )  == Token.ASSIGN && n == parent.getFirstChild (  )  )  )  {^93^94^95^96^^78^108^if  ( parent.getType (  )  != Token.VAR && !NodeUtil.isFunctionDeclaration ( parent )  && ! ( parent.getType (  )  == Token.ASSIGN && n == parent.getFirstChild (  )  )  )  {^[CLASS] InferJSDocInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ObjectType  lhsType  objType  propType  AbstractCompiler  compiler  boolean  inExterns  JSType  varType  NodeTraversal  t  Node  n  parent  String  propName  JSDocInfo  docInfo  
[BugLab_Wrong_Operator]^if  ( parent.getType (  )  < Token.VAR && !NodeUtil.isFunctionDeclaration ( parent )  && ! ( parent.getType (  )  == Token.ASSIGN && n == parent.getFirstChild (  )  )  )  {^93^94^95^96^^78^108^if  ( parent.getType (  )  != Token.VAR && !NodeUtil.isFunctionDeclaration ( parent )  && ! ( parent.getType (  )  == Token.ASSIGN && n == parent.getFirstChild (  )  )  )  {^[CLASS] InferJSDocInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ObjectType  lhsType  objType  propType  AbstractCompiler  compiler  boolean  inExterns  JSType  varType  NodeTraversal  t  Node  n  parent  String  propName  JSDocInfo  docInfo  
[BugLab_Wrong_Operator]^if  ( parent.getType (  )  != Token.VAR && !NodeUtil.isFunctionDeclaration ( parent )  && ! ( parent.getType (  )  != Token.ASSIGN && n == parent.getFirstChild (  )  )  )  {^93^94^95^96^^78^108^if  ( parent.getType (  )  != Token.VAR && !NodeUtil.isFunctionDeclaration ( parent )  && ! ( parent.getType (  )  == Token.ASSIGN && n == parent.getFirstChild (  )  )  )  {^[CLASS] InferJSDocInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ObjectType  lhsType  objType  propType  AbstractCompiler  compiler  boolean  inExterns  JSType  varType  NodeTraversal  t  Node  n  parent  String  propName  JSDocInfo  docInfo  
[BugLab_Wrong_Operator]^if  ( parent.getType (  )  != Token.VAR && !NodeUtil.isFunctionDeclaration ( parent )  && ! ( parent.getType (  )  == Token.ASSIGN && n != parent.getFirstChild (  )  )  )  {^93^94^95^96^^78^108^if  ( parent.getType (  )  != Token.VAR && !NodeUtil.isFunctionDeclaration ( parent )  && ! ( parent.getType (  )  == Token.ASSIGN && n == parent.getFirstChild (  )  )  )  {^[CLASS] InferJSDocInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ObjectType  lhsType  objType  propType  AbstractCompiler  compiler  boolean  inExterns  JSType  varType  NodeTraversal  t  Node  n  parent  String  propName  JSDocInfo  docInfo  
[BugLab_Variable_Misuse]^if  ( docInfo == null && ! ( n.getType (  )  == Token.VAR && !parent.hasOneChild (  )  )  )  {^110^111^112^^^95^125^if  ( docInfo == null && ! ( parent.getType (  )  == Token.VAR && !parent.hasOneChild (  )  )  )  {^[CLASS] InferJSDocInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ObjectType  lhsType  objType  propType  AbstractCompiler  compiler  boolean  inExterns  JSType  varType  NodeTraversal  t  Node  n  parent  String  propName  JSDocInfo  docInfo  
[BugLab_Argument_Swapping]^if  ( parent == null && ! ( docInfo.getType (  )  == Token.VAR && !parent.hasOneChild (  )  )  )  {^110^111^112^^^95^125^if  ( docInfo == null && ! ( parent.getType (  )  == Token.VAR && !parent.hasOneChild (  )  )  )  {^[CLASS] InferJSDocInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ObjectType  lhsType  objType  propType  AbstractCompiler  compiler  boolean  inExterns  JSType  varType  NodeTraversal  t  Node  n  parent  String  propName  JSDocInfo  docInfo  
[BugLab_Wrong_Operator]^if  ( docInfo == null || ! ( parent.getType (  )  == Token.VAR && !parent.hasOneChild (  )  )  )  {^110^111^112^^^95^125^if  ( docInfo == null && ! ( parent.getType (  )  == Token.VAR && !parent.hasOneChild (  )  )  )  {^[CLASS] InferJSDocInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ObjectType  lhsType  objType  propType  AbstractCompiler  compiler  boolean  inExterns  JSType  varType  NodeTraversal  t  Node  n  parent  String  propName  JSDocInfo  docInfo  
[BugLab_Wrong_Operator]^if  ( docInfo != null && ! ( parent.getType (  )  == Token.VAR && !parent.hasOneChild (  )  )  )  {^110^111^112^^^95^125^if  ( docInfo == null && ! ( parent.getType (  )  == Token.VAR && !parent.hasOneChild (  )  )  )  {^[CLASS] InferJSDocInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ObjectType  lhsType  objType  propType  AbstractCompiler  compiler  boolean  inExterns  JSType  varType  NodeTraversal  t  Node  n  parent  String  propName  JSDocInfo  docInfo  
[BugLab_Variable_Misuse]^docInfo = n.getJSDocInfo (  ) ;^113^^^^^110^114^docInfo = parent.getJSDocInfo (  ) ;^[CLASS] InferJSDocInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ObjectType  lhsType  objType  propType  AbstractCompiler  compiler  boolean  inExterns  JSType  varType  NodeTraversal  t  Node  n  parent  String  propName  JSDocInfo  docInfo  
[BugLab_Variable_Misuse]^if  ( varType == null && n.getType (  )  == Token.FUNCTION )  {^118^^^^^103^133^if  ( varType == null && parent.getType (  )  == Token.FUNCTION )  {^[CLASS] InferJSDocInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ObjectType  lhsType  objType  propType  AbstractCompiler  compiler  boolean  inExterns  JSType  varType  NodeTraversal  t  Node  n  parent  String  propName  JSDocInfo  docInfo  
[BugLab_Argument_Swapping]^if  ( parent == null && varType.getType (  )  == Token.FUNCTION )  {^118^^^^^103^133^if  ( varType == null && parent.getType (  )  == Token.FUNCTION )  {^[CLASS] InferJSDocInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ObjectType  lhsType  objType  propType  AbstractCompiler  compiler  boolean  inExterns  JSType  varType  NodeTraversal  t  Node  n  parent  String  propName  JSDocInfo  docInfo  
[BugLab_Wrong_Operator]^if  ( varType == null || parent.getType (  )  == Token.FUNCTION )  {^118^^^^^103^133^if  ( varType == null && parent.getType (  )  == Token.FUNCTION )  {^[CLASS] InferJSDocInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ObjectType  lhsType  objType  propType  AbstractCompiler  compiler  boolean  inExterns  JSType  varType  NodeTraversal  t  Node  n  parent  String  propName  JSDocInfo  docInfo  
[BugLab_Wrong_Operator]^if  ( varType != null && parent.getType (  )  == Token.FUNCTION )  {^118^^^^^103^133^if  ( varType == null && parent.getType (  )  == Token.FUNCTION )  {^[CLASS] InferJSDocInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ObjectType  lhsType  objType  propType  AbstractCompiler  compiler  boolean  inExterns  JSType  varType  NodeTraversal  t  Node  n  parent  String  propName  JSDocInfo  docInfo  
[BugLab_Variable_Misuse]^varType = n.getJSType (  ) ;^119^^^^^104^134^varType = parent.getJSType (  ) ;^[CLASS] InferJSDocInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ObjectType  lhsType  objType  propType  AbstractCompiler  compiler  boolean  inExterns  JSType  varType  NodeTraversal  t  Node  n  parent  String  propName  JSDocInfo  docInfo  
[BugLab_Argument_Swapping]^if  ( docInfo == null || varType == null )  {^124^^^^^109^139^if  ( varType == null || docInfo == null )  {^[CLASS] InferJSDocInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ObjectType  lhsType  objType  propType  AbstractCompiler  compiler  boolean  inExterns  JSType  varType  NodeTraversal  t  Node  n  parent  String  propName  JSDocInfo  docInfo  
[BugLab_Wrong_Operator]^if  ( varType == null && docInfo == null )  {^124^^^^^109^139^if  ( varType == null || docInfo == null )  {^[CLASS] InferJSDocInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ObjectType  lhsType  objType  propType  AbstractCompiler  compiler  boolean  inExterns  JSType  varType  NodeTraversal  t  Node  n  parent  String  propName  JSDocInfo  docInfo  
[BugLab_Wrong_Operator]^if  ( varType != null || docInfo == null )  {^124^^^^^109^139^if  ( varType == null || docInfo == null )  {^[CLASS] InferJSDocInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ObjectType  lhsType  objType  propType  AbstractCompiler  compiler  boolean  inExterns  JSType  varType  NodeTraversal  t  Node  n  parent  String  propName  JSDocInfo  docInfo  
[BugLab_Wrong_Operator]^if  ( varType == null || docInfo != null )  {^124^^^^^109^139^if  ( varType == null || docInfo == null )  {^[CLASS] InferJSDocInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ObjectType  lhsType  objType  propType  AbstractCompiler  compiler  boolean  inExterns  JSType  varType  NodeTraversal  t  Node  n  parent  String  propName  JSDocInfo  docInfo  
[BugLab_Variable_Misuse]^if  ( propType == null || objType.getJSDocInfo (  )  != null )  {^131^^^^^116^146^if  ( objType == null || objType.getJSDocInfo (  )  != null )  {^[CLASS] InferJSDocInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ObjectType  lhsType  objType  propType  AbstractCompiler  compiler  boolean  inExterns  JSType  varType  NodeTraversal  t  Node  n  parent  String  propName  JSDocInfo  docInfo  
[BugLab_Wrong_Operator]^if  ( objType == null && objType.getJSDocInfo (  )  != null )  {^131^^^^^116^146^if  ( objType == null || objType.getJSDocInfo (  )  != null )  {^[CLASS] InferJSDocInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ObjectType  lhsType  objType  propType  AbstractCompiler  compiler  boolean  inExterns  JSType  varType  NodeTraversal  t  Node  n  parent  String  propName  JSDocInfo  docInfo  
[BugLab_Wrong_Operator]^if  ( objType != null || objType.getJSDocInfo (  )  != null )  {^131^^^^^116^146^if  ( objType == null || objType.getJSDocInfo (  )  != null )  {^[CLASS] InferJSDocInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ObjectType  lhsType  objType  propType  AbstractCompiler  compiler  boolean  inExterns  JSType  varType  NodeTraversal  t  Node  n  parent  String  propName  JSDocInfo  docInfo  
[BugLab_Wrong_Operator]^if  ( objType == null || objType.getJSDocInfo (  )  == null )  {^131^^^^^116^146^if  ( objType == null || objType.getJSDocInfo (  )  != null )  {^[CLASS] InferJSDocInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ObjectType  lhsType  objType  propType  AbstractCompiler  compiler  boolean  inExterns  JSType  varType  NodeTraversal  t  Node  n  parent  String  propName  JSDocInfo  docInfo  
[BugLab_Variable_Misuse]^if  ( NodeUtil.isExpressionNode ( n )  || ( parent.getType (  )  == Token.ASSIGN && parent.getFirstChild (  )  == n )  )  {^149^150^151^^^134^164^if  ( NodeUtil.isExpressionNode ( parent )  || ( parent.getType (  )  == Token.ASSIGN && parent.getFirstChild (  )  == n )  )  {^[CLASS] InferJSDocInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ObjectType  lhsType  objType  propType  AbstractCompiler  compiler  boolean  inExterns  JSType  varType  NodeTraversal  t  Node  n  parent  String  propName  JSDocInfo  docInfo  
[BugLab_Variable_Misuse]^if  ( NodeUtil.isExpressionNode ( parent )  || ( parent.getType (  )  == Token.ASSIGN && parent.getFirstChild (  )  == parent )  )  {^149^150^151^^^134^164^if  ( NodeUtil.isExpressionNode ( parent )  || ( parent.getType (  )  == Token.ASSIGN && parent.getFirstChild (  )  == n )  )  {^[CLASS] InferJSDocInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ObjectType  lhsType  objType  propType  AbstractCompiler  compiler  boolean  inExterns  JSType  varType  NodeTraversal  t  Node  n  parent  String  propName  JSDocInfo  docInfo  
[BugLab_Wrong_Operator]^if  ( NodeUtil.isExpressionNode ( parent )  && ( parent.getType (  )  == Token.ASSIGN && parent.getFirstChild (  )  == n )  )  {^149^150^151^^^134^164^if  ( NodeUtil.isExpressionNode ( parent )  || ( parent.getType (  )  == Token.ASSIGN && parent.getFirstChild (  )  == n )  )  {^[CLASS] InferJSDocInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ObjectType  lhsType  objType  propType  AbstractCompiler  compiler  boolean  inExterns  JSType  varType  NodeTraversal  t  Node  n  parent  String  propName  JSDocInfo  docInfo  
[BugLab_Wrong_Operator]^if  ( NodeUtil.isExpressionNode ( parent )  || ( parent.getType (  )  == Token.ASSIGN || parent.getFirstChild (  )  == n )  )  {^149^150^151^^^134^164^if  ( NodeUtil.isExpressionNode ( parent )  || ( parent.getType (  )  == Token.ASSIGN && parent.getFirstChild (  )  == n )  )  {^[CLASS] InferJSDocInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ObjectType  lhsType  objType  propType  AbstractCompiler  compiler  boolean  inExterns  JSType  varType  NodeTraversal  t  Node  n  parent  String  propName  JSDocInfo  docInfo  
[BugLab_Wrong_Operator]^if  ( NodeUtil.isExpressionNode ( parent )  || ( parent.getType (  )  >= Token.ASSIGN && parent.getFirstChild (  )  == n )  )  {^149^150^151^^^134^164^if  ( NodeUtil.isExpressionNode ( parent )  || ( parent.getType (  )  == Token.ASSIGN && parent.getFirstChild (  )  == n )  )  {^[CLASS] InferJSDocInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ObjectType  lhsType  objType  propType  AbstractCompiler  compiler  boolean  inExterns  JSType  varType  NodeTraversal  t  Node  n  parent  String  propName  JSDocInfo  docInfo  
[BugLab_Wrong_Operator]^if  ( NodeUtil.isExpressionNode ( parent )  || ( parent.getType (  )  == Token.ASSIGN && parent.getFirstChild (  )  < n )  )  {^149^150^151^^^134^164^if  ( NodeUtil.isExpressionNode ( parent )  || ( parent.getType (  )  == Token.ASSIGN && parent.getFirstChild (  )  == n )  )  {^[CLASS] InferJSDocInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ObjectType  lhsType  objType  propType  AbstractCompiler  compiler  boolean  inExterns  JSType  varType  NodeTraversal  t  Node  n  parent  String  propName  JSDocInfo  docInfo  
[BugLab_Wrong_Operator]^if  ( NodeUtil.isExpressionNode ( parent )  || ( parent.getType (  )  != Token.ASSIGN && parent.getFirstChild (  )  == n )  )  {^149^150^151^^^134^164^if  ( NodeUtil.isExpressionNode ( parent )  || ( parent.getType (  )  == Token.ASSIGN && parent.getFirstChild (  )  == n )  )  {^[CLASS] InferJSDocInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ObjectType  lhsType  objType  propType  AbstractCompiler  compiler  boolean  inExterns  JSType  varType  NodeTraversal  t  Node  n  parent  String  propName  JSDocInfo  docInfo  
[BugLab_Wrong_Operator]^if  ( docInfo != null )  {^153^^^^^149^175^if  ( docInfo == null )  {^[CLASS] InferJSDocInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ObjectType  lhsType  objType  propType  AbstractCompiler  compiler  boolean  inExterns  JSType  varType  NodeTraversal  t  Node  n  parent  String  propName  JSDocInfo  docInfo  
[BugLab_Variable_Misuse]^docInfo = n.getJSDocInfo (  ) ;^154^^^^^149^175^docInfo = parent.getJSDocInfo (  ) ;^[CLASS] InferJSDocInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ObjectType  lhsType  objType  propType  AbstractCompiler  compiler  boolean  inExterns  JSType  varType  NodeTraversal  t  Node  n  parent  String  propName  JSDocInfo  docInfo  
[BugLab_Variable_Misuse]^if  ( docInfo != parentull )  {^156^^^^^149^175^if  ( docInfo != null )  {^[CLASS] InferJSDocInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ObjectType  lhsType  objType  propType  AbstractCompiler  compiler  boolean  inExterns  JSType  varType  NodeTraversal  t  Node  n  parent  String  propName  JSDocInfo  docInfo  
[BugLab_Wrong_Operator]^if  ( docInfo == null )  {^156^^^^^149^175^if  ( docInfo != null )  {^[CLASS] InferJSDocInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ObjectType  lhsType  objType  propType  AbstractCompiler  compiler  boolean  inExterns  JSType  varType  NodeTraversal  t  Node  n  parent  String  propName  JSDocInfo  docInfo  
[BugLab_Variable_Misuse]^if  ( propType != null )  {^159^^^^^149^175^if  ( lhsType != null )  {^[CLASS] InferJSDocInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ObjectType  lhsType  objType  propType  AbstractCompiler  compiler  boolean  inExterns  JSType  varType  NodeTraversal  t  Node  n  parent  String  propName  JSDocInfo  docInfo  
[BugLab_Variable_Misuse]^if  ( lhsType != parentull )  {^159^^^^^149^175^if  ( lhsType != null )  {^[CLASS] InferJSDocInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ObjectType  lhsType  objType  propType  AbstractCompiler  compiler  boolean  inExterns  JSType  varType  NodeTraversal  t  Node  n  parent  String  propName  JSDocInfo  docInfo  
[BugLab_Argument_Swapping]^if  ( n != lhsTypeull )  {^159^^^^^149^175^if  ( lhsType != null )  {^[CLASS] InferJSDocInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ObjectType  lhsType  objType  propType  AbstractCompiler  compiler  boolean  inExterns  JSType  varType  NodeTraversal  t  Node  n  parent  String  propName  JSDocInfo  docInfo  
[BugLab_Wrong_Operator]^if  ( lhsType == null )  {^159^^^^^149^175^if  ( lhsType != null )  {^[CLASS] InferJSDocInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ObjectType  lhsType  objType  propType  AbstractCompiler  compiler  boolean  inExterns  JSType  varType  NodeTraversal  t  Node  n  parent  String  propName  JSDocInfo  docInfo  
[BugLab_Variable_Misuse]^if  ( propType.hasOwnProperty ( propName )  )  {^162^^^^^149^175^if  ( lhsType.hasOwnProperty ( propName )  )  {^[CLASS] InferJSDocInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ObjectType  lhsType  objType  propType  AbstractCompiler  compiler  boolean  inExterns  JSType  varType  NodeTraversal  t  Node  n  parent  String  propName  JSDocInfo  docInfo  
[BugLab_Argument_Swapping]^lhsType.setPropertyJSDocInfo ( docInfo, propName, inExterns ) ;^163^^^^^149^175^lhsType.setPropertyJSDocInfo ( propName, docInfo, inExterns ) ;^[CLASS] InferJSDocInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ObjectType  lhsType  objType  propType  AbstractCompiler  compiler  boolean  inExterns  JSType  varType  NodeTraversal  t  Node  n  parent  String  propName  JSDocInfo  docInfo  
[BugLab_Argument_Swapping]^lhsType.setPropertyJSDocInfo ( inExterns, docInfo, propName ) ;^163^^^^^149^175^lhsType.setPropertyJSDocInfo ( propName, docInfo, inExterns ) ;^[CLASS] InferJSDocInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ObjectType  lhsType  objType  propType  AbstractCompiler  compiler  boolean  inExterns  JSType  varType  NodeTraversal  t  Node  n  parent  String  propName  JSDocInfo  docInfo  
[BugLab_Variable_Misuse]^if  ( objType != null )  {^169^^^^^149^175^if  ( propType != null )  {^[CLASS] InferJSDocInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ObjectType  lhsType  objType  propType  AbstractCompiler  compiler  boolean  inExterns  JSType  varType  NodeTraversal  t  Node  n  parent  String  propName  JSDocInfo  docInfo  
[BugLab_Variable_Misuse]^if  ( propType != parentull )  {^169^^^^^149^175^if  ( propType != null )  {^[CLASS] InferJSDocInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ObjectType  lhsType  objType  propType  AbstractCompiler  compiler  boolean  inExterns  JSType  varType  NodeTraversal  t  Node  n  parent  String  propName  JSDocInfo  docInfo  
[BugLab_Argument_Swapping]^if  ( n != propTypeull )  {^169^^^^^149^175^if  ( propType != null )  {^[CLASS] InferJSDocInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ObjectType  lhsType  objType  propType  AbstractCompiler  compiler  boolean  inExterns  JSType  varType  NodeTraversal  t  Node  n  parent  String  propName  JSDocInfo  docInfo  
[BugLab_Wrong_Operator]^if  ( propType == null )  {^169^^^^^149^175^if  ( propType != null )  {^[CLASS] InferJSDocInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ObjectType  lhsType  objType  propType  AbstractCompiler  compiler  boolean  inExterns  JSType  varType  NodeTraversal  t  Node  n  parent  String  propName  JSDocInfo  docInfo  
[BugLab_Variable_Misuse]^attachJSDocInfoToNominalTypeOrShape ( objType, docInfo, n.getQualifiedName (  )  ) ;^170^171^^^^149^175^attachJSDocInfoToNominalTypeOrShape ( propType, docInfo, n.getQualifiedName (  )  ) ;^[CLASS] InferJSDocInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ObjectType  lhsType  objType  propType  AbstractCompiler  compiler  boolean  inExterns  JSType  varType  NodeTraversal  t  Node  n  parent  String  propName  JSDocInfo  docInfo  
[BugLab_Variable_Misuse]^attachJSDocInfoToNominalTypeOrShape ( propType, docInfo, parent.getQualifiedName (  )  ) ;^170^171^^^^149^175^attachJSDocInfoToNominalTypeOrShape ( propType, docInfo, n.getQualifiedName (  )  ) ;^[CLASS] InferJSDocInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ObjectType  lhsType  objType  propType  AbstractCompiler  compiler  boolean  inExterns  JSType  varType  NodeTraversal  t  Node  n  parent  String  propName  JSDocInfo  docInfo  
[BugLab_Argument_Swapping]^attachJSDocInfoToNominalTypeOrShape ( n, docInfo, propType.getQualifiedName (  )  ) ;^170^171^^^^149^175^attachJSDocInfoToNominalTypeOrShape ( propType, docInfo, n.getQualifiedName (  )  ) ;^[CLASS] InferJSDocInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ObjectType  lhsType  objType  propType  AbstractCompiler  compiler  boolean  inExterns  JSType  varType  NodeTraversal  t  Node  n  parent  String  propName  JSDocInfo  docInfo  
[BugLab_Argument_Swapping]^attachJSDocInfoToNominalTypeOrShape ( docInfo, propType, n.getQualifiedName (  )  ) ;^170^171^^^^149^175^attachJSDocInfoToNominalTypeOrShape ( propType, docInfo, n.getQualifiedName (  )  ) ;^[CLASS] InferJSDocInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ObjectType  lhsType  objType  propType  AbstractCompiler  compiler  boolean  inExterns  JSType  varType  NodeTraversal  t  Node  n  parent  String  propName  JSDocInfo  docInfo  
[BugLab_Variable_Misuse]^propType, docInfo, parent.getQualifiedName (  )  ) ;^171^^^^^149^175^propType, docInfo, n.getQualifiedName (  )  ) ;^[CLASS] InferJSDocInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ObjectType  lhsType  objType  propType  AbstractCompiler  compiler  boolean  inExterns  JSType  varType  NodeTraversal  t  Node  n  parent  String  propName  JSDocInfo  docInfo  
[BugLab_Variable_Misuse]^String propName = parent.getLastChild (  ) .getString (  ) ;^161^^^^^149^175^String propName = n.getLastChild (  ) .getString (  ) ;^[CLASS] InferJSDocInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ObjectType  lhsType  objType  propType  AbstractCompiler  compiler  boolean  inExterns  JSType  varType  NodeTraversal  t  Node  n  parent  String  propName  JSDocInfo  docInfo  
[BugLab_Variable_Misuse]^ObjectType propType = dereferenceToObject ( objType.getPropertyType ( propName )  ) ;^167^168^^^^149^175^ObjectType propType = dereferenceToObject ( lhsType.getPropertyType ( propName )  ) ;^[CLASS] InferJSDocInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ObjectType  lhsType  objType  propType  AbstractCompiler  compiler  boolean  inExterns  JSType  varType  NodeTraversal  t  Node  n  parent  String  propName  JSDocInfo  docInfo  
[BugLab_Argument_Swapping]^ObjectType propType = dereferenceToObject ( propName.getPropertyType ( lhsType )  ) ;^167^168^^^^149^175^ObjectType propType = dereferenceToObject ( lhsType.getPropertyType ( propName )  ) ;^[CLASS] InferJSDocInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ObjectType  lhsType  objType  propType  AbstractCompiler  compiler  boolean  inExterns  JSType  varType  NodeTraversal  t  Node  n  parent  String  propName  JSDocInfo  docInfo  
[BugLab_Argument_Swapping]^if  ( propName.hasOwnProperty ( lhsType )  )  {^162^^^^^149^175^if  ( lhsType.hasOwnProperty ( propName )  )  {^[CLASS] InferJSDocInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ObjectType  lhsType  objType  propType  AbstractCompiler  compiler  boolean  inExterns  JSType  varType  NodeTraversal  t  Node  n  parent  String  propName  JSDocInfo  docInfo  
[BugLab_Argument_Swapping]^lhsType.setPropertyJSDocInfo ( propName, inExterns, docInfo ) ;^163^^^^^149^175^lhsType.setPropertyJSDocInfo ( propName, docInfo, inExterns ) ;^[CLASS] InferJSDocInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ObjectType  lhsType  objType  propType  AbstractCompiler  compiler  boolean  inExterns  JSType  varType  NodeTraversal  t  Node  n  parent  String  propName  JSDocInfo  docInfo  
[BugLab_Variable_Misuse]^dereferenceToObject ( propType.getPropertyType ( propName )  ) ;^168^^^^^149^175^dereferenceToObject ( lhsType.getPropertyType ( propName )  ) ;^[CLASS] InferJSDocInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ObjectType  lhsType  objType  propType  AbstractCompiler  compiler  boolean  inExterns  JSType  varType  NodeTraversal  t  Node  n  parent  String  propName  JSDocInfo  docInfo  
[BugLab_Argument_Swapping]^dereferenceToObject ( propName.getPropertyType ( lhsType )  ) ;^168^^^^^149^175^dereferenceToObject ( lhsType.getPropertyType ( propName )  ) ;^[CLASS] InferJSDocInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ObjectType  lhsType  objType  propType  AbstractCompiler  compiler  boolean  inExterns  JSType  varType  NodeTraversal  t  Node  n  parent  String  propName  JSDocInfo  docInfo  
[BugLab_Argument_Swapping]^attachJSDocInfoToNominalTypeOrShape ( propType, n, docInfo.getQualifiedName (  )  ) ;^170^171^^^^149^175^attachJSDocInfoToNominalTypeOrShape ( propType, docInfo, n.getQualifiedName (  )  ) ;^[CLASS] InferJSDocInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ObjectType  lhsType  objType  propType  AbstractCompiler  compiler  boolean  inExterns  JSType  varType  NodeTraversal  t  Node  n  parent  String  propName  JSDocInfo  docInfo  
[BugLab_Variable_Misuse]^ObjectType lhsType = dereferenceToObject ( parent.getFirstChild (  ) .getJSType (  )  ) ;^157^158^^^^149^175^ObjectType lhsType = dereferenceToObject ( n.getFirstChild (  ) .getJSType (  )  ) ;^[CLASS] InferJSDocInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ObjectType  lhsType  objType  propType  AbstractCompiler  compiler  boolean  inExterns  JSType  varType  NodeTraversal  t  Node  n  parent  String  propName  JSDocInfo  docInfo  
[BugLab_Variable_Misuse]^dereferenceToObject ( parent.getFirstChild (  ) .getJSType (  )  ) ;^158^^^^^149^175^dereferenceToObject ( n.getFirstChild (  ) .getJSType (  )  ) ;^[CLASS] InferJSDocInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ObjectType  lhsType  objType  propType  AbstractCompiler  compiler  boolean  inExterns  JSType  varType  NodeTraversal  t  Node  n  parent  String  propName  JSDocInfo  docInfo  
[BugLab_Variable_Misuse]^docInfo = parent.getJSDocInfo (  ) ;^152^^^^^149^175^docInfo = n.getJSDocInfo (  ) ;^[CLASS] InferJSDocInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ObjectType  lhsType  objType  propType  AbstractCompiler  compiler  boolean  inExterns  JSType  varType  NodeTraversal  t  Node  n  parent  String  propName  JSDocInfo  docInfo  
[BugLab_Wrong_Operator]^if  ( docInfo != null )  {^153^^^^^138^168^if  ( docInfo == null )  {^[CLASS] InferJSDocInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ObjectType  lhsType  objType  propType  AbstractCompiler  compiler  boolean  inExterns  JSType  varType  NodeTraversal  t  Node  n  parent  String  propName  JSDocInfo  docInfo  
[BugLab_Variable_Misuse]^docInfo = n.getJSDocInfo (  ) ;^154^^^^^139^169^docInfo = parent.getJSDocInfo (  ) ;^[CLASS] InferJSDocInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ObjectType  lhsType  objType  propType  AbstractCompiler  compiler  boolean  inExterns  JSType  varType  NodeTraversal  t  Node  n  parent  String  propName  JSDocInfo  docInfo  
[BugLab_Variable_Misuse]^if  ( docInfo != parentull )  {^156^^^^^141^171^if  ( docInfo != null )  {^[CLASS] InferJSDocInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ObjectType  lhsType  objType  propType  AbstractCompiler  compiler  boolean  inExterns  JSType  varType  NodeTraversal  t  Node  n  parent  String  propName  JSDocInfo  docInfo  
[BugLab_Argument_Swapping]^if  ( n != docInfoull )  {^156^^^^^141^171^if  ( docInfo != null )  {^[CLASS] InferJSDocInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ObjectType  lhsType  objType  propType  AbstractCompiler  compiler  boolean  inExterns  JSType  varType  NodeTraversal  t  Node  n  parent  String  propName  JSDocInfo  docInfo  
[BugLab_Wrong_Operator]^if  ( docInfo == null )  {^156^^^^^141^171^if  ( docInfo != null )  {^[CLASS] InferJSDocInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ObjectType  lhsType  objType  propType  AbstractCompiler  compiler  boolean  inExterns  JSType  varType  NodeTraversal  t  Node  n  parent  String  propName  JSDocInfo  docInfo  
[BugLab_Variable_Misuse]^if  ( propType != null )  {^159^^^^^144^174^if  ( lhsType != null )  {^[CLASS] InferJSDocInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ObjectType  lhsType  objType  propType  AbstractCompiler  compiler  boolean  inExterns  JSType  varType  NodeTraversal  t  Node  n  parent  String  propName  JSDocInfo  docInfo  
[BugLab_Wrong_Operator]^if  ( lhsType == null )  {^159^^^^^144^174^if  ( lhsType != null )  {^[CLASS] InferJSDocInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ObjectType  lhsType  objType  propType  AbstractCompiler  compiler  boolean  inExterns  JSType  varType  NodeTraversal  t  Node  n  parent  String  propName  JSDocInfo  docInfo  
[BugLab_Variable_Misuse]^if  ( propType.hasOwnProperty ( propName )  )  {^162^^^^^147^177^if  ( lhsType.hasOwnProperty ( propName )  )  {^[CLASS] InferJSDocInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ObjectType  lhsType  objType  propType  AbstractCompiler  compiler  boolean  inExterns  JSType  varType  NodeTraversal  t  Node  n  parent  String  propName  JSDocInfo  docInfo  
[BugLab_Argument_Swapping]^if  ( propName.hasOwnProperty ( lhsType )  )  {^162^^^^^147^177^if  ( lhsType.hasOwnProperty ( propName )  )  {^[CLASS] InferJSDocInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ObjectType  lhsType  objType  propType  AbstractCompiler  compiler  boolean  inExterns  JSType  varType  NodeTraversal  t  Node  n  parent  String  propName  JSDocInfo  docInfo  
[BugLab_Argument_Swapping]^lhsType.setPropertyJSDocInfo ( inExterns, docInfo, propName ) ;^163^^^^^148^178^lhsType.setPropertyJSDocInfo ( propName, docInfo, inExterns ) ;^[CLASS] InferJSDocInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ObjectType  lhsType  objType  propType  AbstractCompiler  compiler  boolean  inExterns  JSType  varType  NodeTraversal  t  Node  n  parent  String  propName  JSDocInfo  docInfo  
[BugLab_Argument_Swapping]^lhsType.setPropertyJSDocInfo ( docInfo, propName, inExterns ) ;^163^^^^^148^178^lhsType.setPropertyJSDocInfo ( propName, docInfo, inExterns ) ;^[CLASS] InferJSDocInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ObjectType  lhsType  objType  propType  AbstractCompiler  compiler  boolean  inExterns  JSType  varType  NodeTraversal  t  Node  n  parent  String  propName  JSDocInfo  docInfo  
[BugLab_Variable_Misuse]^if  ( objType != null )  {^169^^^^^154^184^if  ( propType != null )  {^[CLASS] InferJSDocInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ObjectType  lhsType  objType  propType  AbstractCompiler  compiler  boolean  inExterns  JSType  varType  NodeTraversal  t  Node  n  parent  String  propName  JSDocInfo  docInfo  
[BugLab_Variable_Misuse]^if  ( propType != parentull )  {^169^^^^^154^184^if  ( propType != null )  {^[CLASS] InferJSDocInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ObjectType  lhsType  objType  propType  AbstractCompiler  compiler  boolean  inExterns  JSType  varType  NodeTraversal  t  Node  n  parent  String  propName  JSDocInfo  docInfo  
[BugLab_Wrong_Operator]^if  ( propType == null )  {^169^^^^^154^184^if  ( propType != null )  {^[CLASS] InferJSDocInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ObjectType  lhsType  objType  propType  AbstractCompiler  compiler  boolean  inExterns  JSType  varType  NodeTraversal  t  Node  n  parent  String  propName  JSDocInfo  docInfo  
[BugLab_Variable_Misuse]^attachJSDocInfoToNominalTypeOrShape ( objType, docInfo, n.getQualifiedName (  )  ) ;^170^171^^^^155^185^attachJSDocInfoToNominalTypeOrShape ( propType, docInfo, n.getQualifiedName (  )  ) ;^[CLASS] InferJSDocInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ObjectType  lhsType  objType  propType  AbstractCompiler  compiler  boolean  inExterns  JSType  varType  NodeTraversal  t  Node  n  parent  String  propName  JSDocInfo  docInfo  
[BugLab_Variable_Misuse]^attachJSDocInfoToNominalTypeOrShape ( propType, docInfo, parent.getQualifiedName (  )  ) ;^170^171^^^^155^185^attachJSDocInfoToNominalTypeOrShape ( propType, docInfo, n.getQualifiedName (  )  ) ;^[CLASS] InferJSDocInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ObjectType  lhsType  objType  propType  AbstractCompiler  compiler  boolean  inExterns  JSType  varType  NodeTraversal  t  Node  n  parent  String  propName  JSDocInfo  docInfo  
[BugLab_Argument_Swapping]^attachJSDocInfoToNominalTypeOrShape ( docInfo, propType, n.getQualifiedName (  )  ) ;^170^171^^^^155^185^attachJSDocInfoToNominalTypeOrShape ( propType, docInfo, n.getQualifiedName (  )  ) ;^[CLASS] InferJSDocInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ObjectType  lhsType  objType  propType  AbstractCompiler  compiler  boolean  inExterns  JSType  varType  NodeTraversal  t  Node  n  parent  String  propName  JSDocInfo  docInfo  
[BugLab_Argument_Swapping]^attachJSDocInfoToNominalTypeOrShape ( propType, n, docInfo.getQualifiedName (  )  ) ;^170^171^^^^155^185^attachJSDocInfoToNominalTypeOrShape ( propType, docInfo, n.getQualifiedName (  )  ) ;^[CLASS] InferJSDocInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ObjectType  lhsType  objType  propType  AbstractCompiler  compiler  boolean  inExterns  JSType  varType  NodeTraversal  t  Node  n  parent  String  propName  JSDocInfo  docInfo  
[BugLab_Variable_Misuse]^propType, docInfo, parent.getQualifiedName (  )  ) ;^171^^^^^156^186^propType, docInfo, n.getQualifiedName (  )  ) ;^[CLASS] InferJSDocInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ObjectType  lhsType  objType  propType  AbstractCompiler  compiler  boolean  inExterns  JSType  varType  NodeTraversal  t  Node  n  parent  String  propName  JSDocInfo  docInfo  
[BugLab_Variable_Misuse]^String propName = parent.getLastChild (  ) .getString (  ) ;^161^^^^^146^176^String propName = n.getLastChild (  ) .getString (  ) ;^[CLASS] InferJSDocInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ObjectType  lhsType  objType  propType  AbstractCompiler  compiler  boolean  inExterns  JSType  varType  NodeTraversal  t  Node  n  parent  String  propName  JSDocInfo  docInfo  
[BugLab_Variable_Misuse]^ObjectType propType = dereferenceToObject ( objType.getPropertyType ( propName )  ) ;^167^168^^^^152^182^ObjectType propType = dereferenceToObject ( lhsType.getPropertyType ( propName )  ) ;^[CLASS] InferJSDocInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ObjectType  lhsType  objType  propType  AbstractCompiler  compiler  boolean  inExterns  JSType  varType  NodeTraversal  t  Node  n  parent  String  propName  JSDocInfo  docInfo  
[BugLab_Argument_Swapping]^ObjectType propType = dereferenceToObject ( propName.getPropertyType ( lhsType )  ) ;^167^168^^^^152^182^ObjectType propType = dereferenceToObject ( lhsType.getPropertyType ( propName )  ) ;^[CLASS] InferJSDocInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ObjectType  lhsType  objType  propType  AbstractCompiler  compiler  boolean  inExterns  JSType  varType  NodeTraversal  t  Node  n  parent  String  propName  JSDocInfo  docInfo  
[BugLab_Argument_Swapping]^lhsType.setPropertyJSDocInfo ( propName, inExterns, docInfo ) ;^163^^^^^148^178^lhsType.setPropertyJSDocInfo ( propName, docInfo, inExterns ) ;^[CLASS] InferJSDocInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ObjectType  lhsType  objType  propType  AbstractCompiler  compiler  boolean  inExterns  JSType  varType  NodeTraversal  t  Node  n  parent  String  propName  JSDocInfo  docInfo  
[BugLab_Variable_Misuse]^dereferenceToObject ( propType.getPropertyType ( propName )  ) ;^168^^^^^153^183^dereferenceToObject ( lhsType.getPropertyType ( propName )  ) ;^[CLASS] InferJSDocInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ObjectType  lhsType  objType  propType  AbstractCompiler  compiler  boolean  inExterns  JSType  varType  NodeTraversal  t  Node  n  parent  String  propName  JSDocInfo  docInfo  
[BugLab_Argument_Swapping]^dereferenceToObject ( propName.getPropertyType ( lhsType )  ) ;^168^^^^^153^183^dereferenceToObject ( lhsType.getPropertyType ( propName )  ) ;^[CLASS] InferJSDocInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ObjectType  lhsType  objType  propType  AbstractCompiler  compiler  boolean  inExterns  JSType  varType  NodeTraversal  t  Node  n  parent  String  propName  JSDocInfo  docInfo  
[BugLab_Argument_Swapping]^if  ( n != propTypeull )  {^169^^^^^154^184^if  ( propType != null )  {^[CLASS] InferJSDocInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ObjectType  lhsType  objType  propType  AbstractCompiler  compiler  boolean  inExterns  JSType  varType  NodeTraversal  t  Node  n  parent  String  propName  JSDocInfo  docInfo  
[BugLab_Argument_Swapping]^attachJSDocInfoToNominalTypeOrShape ( n, docInfo, propType.getQualifiedName (  )  ) ;^170^171^^^^155^185^attachJSDocInfoToNominalTypeOrShape ( propType, docInfo, n.getQualifiedName (  )  ) ;^[CLASS] InferJSDocInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ObjectType  lhsType  objType  propType  AbstractCompiler  compiler  boolean  inExterns  JSType  varType  NodeTraversal  t  Node  n  parent  String  propName  JSDocInfo  docInfo  
[BugLab_Variable_Misuse]^dereferenceToObject ( parent.getFirstChild (  ) .getJSType (  )  ) ;^158^^^^^143^173^dereferenceToObject ( n.getFirstChild (  ) .getJSType (  )  ) ;^[CLASS] InferJSDocInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ObjectType  lhsType  objType  propType  AbstractCompiler  compiler  boolean  inExterns  JSType  varType  NodeTraversal  t  Node  n  parent  String  propName  JSDocInfo  docInfo  
[BugLab_Variable_Misuse]^if  ( lhsType != parentull )  {^159^^^^^144^174^if  ( lhsType != null )  {^[CLASS] InferJSDocInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ObjectType  lhsType  objType  propType  AbstractCompiler  compiler  boolean  inExterns  JSType  varType  NodeTraversal  t  Node  n  parent  String  propName  JSDocInfo  docInfo  
[BugLab_Argument_Swapping]^if  ( n != lhsTypeull )  {^159^^^^^144^174^if  ( lhsType != null )  {^[CLASS] InferJSDocInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ObjectType  lhsType  objType  propType  AbstractCompiler  compiler  boolean  inExterns  JSType  varType  NodeTraversal  t  Node  n  parent  String  propName  JSDocInfo  docInfo  
[BugLab_Variable_Misuse]^docInfo = parent.getJSDocInfo (  ) ;^109^^^^^94^124^docInfo = n.getJSDocInfo (  ) ;^[CLASS] InferJSDocInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ObjectType  lhsType  objType  propType  AbstractCompiler  compiler  boolean  inExterns  JSType  varType  NodeTraversal  t  Node  n  parent  String  propName  JSDocInfo  docInfo  
[BugLab_Variable_Misuse]^docInfo = n.getJSDocInfo (  ) ;^113^^^^^98^128^docInfo = parent.getJSDocInfo (  ) ;^[CLASS] InferJSDocInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ObjectType  lhsType  objType  propType  AbstractCompiler  compiler  boolean  inExterns  JSType  varType  NodeTraversal  t  Node  n  parent  String  propName  JSDocInfo  docInfo  
[BugLab_Variable_Misuse]^JSType varType = parent.getJSType (  ) ;^117^^^^^102^132^JSType varType = n.getJSType (  ) ;^[CLASS] InferJSDocInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ObjectType  lhsType  objType  propType  AbstractCompiler  compiler  boolean  inExterns  JSType  varType  NodeTraversal  t  Node  n  parent  String  propName  JSDocInfo  docInfo  
[BugLab_Variable_Misuse]^switch  ( parent.getType (  )  )  {^85^^^^^70^100^switch  ( n.getType (  )  )  {^[CLASS] InferJSDocInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ObjectType  lhsType  objType  propType  AbstractCompiler  compiler  boolean  inExterns  JSType  varType  NodeTraversal  t  Node  n  parent  String  propName  JSDocInfo  docInfo  
[BugLab_Variable_Misuse]^if  ( n.getType (  )  != Token.VAR && !NodeUtil.isFunctionDeclaration ( parent )  && ! ( parent.getType (  )  == Token.ASSIGN && n == parent.getFirstChild (  )  )  )  {^93^94^95^96^^78^108^if  ( parent.getType (  )  != Token.VAR && !NodeUtil.isFunctionDeclaration ( parent )  && ! ( parent.getType (  )  == Token.ASSIGN && n == parent.getFirstChild (  )  )  )  {^[CLASS] InferJSDocInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ObjectType  lhsType  objType  propType  AbstractCompiler  compiler  boolean  inExterns  JSType  varType  NodeTraversal  t  Node  n  parent  String  propName  JSDocInfo  docInfo  
[BugLab_Variable_Misuse]^!NodeUtil.isFunctionDeclaration ( n )  && ! ( parent.getType (  )  == Token.ASSIGN && n == parent.getFirstChild (  )  )  )  {^94^95^96^^^79^109^!NodeUtil.isFunctionDeclaration ( parent )  && ! ( parent.getType (  )  == Token.ASSIGN && n == parent.getFirstChild (  )  )  )  {^[CLASS] InferJSDocInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ObjectType  lhsType  objType  propType  AbstractCompiler  compiler  boolean  inExterns  JSType  varType  NodeTraversal  t  Node  n  parent  String  propName  JSDocInfo  docInfo  
[BugLab_Variable_Misuse]^! ( n.getType (  )  == Token.ASSIGN && n == parent.getFirstChild (  )  )  )  {^95^96^^^^80^110^! ( parent.getType (  )  == Token.ASSIGN && n == parent.getFirstChild (  )  )  )  {^[CLASS] InferJSDocInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ObjectType  lhsType  objType  propType  AbstractCompiler  compiler  boolean  inExterns  JSType  varType  NodeTraversal  t  Node  n  parent  String  propName  JSDocInfo  docInfo  
[BugLab_Variable_Misuse]^n == n.getFirstChild (  )  )  )  {^96^^^^^81^111^n == parent.getFirstChild (  )  )  )  {^[CLASS] InferJSDocInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ObjectType  lhsType  objType  propType  AbstractCompiler  compiler  boolean  inExterns  JSType  varType  NodeTraversal  t  Node  n  parent  String  propName  JSDocInfo  docInfo  
[BugLab_Variable_Misuse]^! ( n.getType (  )  == Token.VAR && !parent.hasOneChild (  )  )  )  {^111^112^^^^96^126^! ( parent.getType (  )  == Token.VAR && !parent.hasOneChild (  )  )  )  {^[CLASS] InferJSDocInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ObjectType  lhsType  objType  propType  AbstractCompiler  compiler  boolean  inExterns  JSType  varType  NodeTraversal  t  Node  n  parent  String  propName  JSDocInfo  docInfo  
[BugLab_Variable_Misuse]^attachJSDocInfoToNominalTypeOrShape ( propType, docInfo, n.getString (  )  ) ;^135^^^^^120^150^attachJSDocInfoToNominalTypeOrShape ( objType, docInfo, n.getString (  )  ) ;^[CLASS] InferJSDocInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ObjectType  lhsType  objType  propType  AbstractCompiler  compiler  boolean  inExterns  JSType  varType  NodeTraversal  t  Node  n  parent  String  propName  JSDocInfo  docInfo  
[BugLab_Variable_Misuse]^attachJSDocInfoToNominalTypeOrShape ( objType, docInfo, parent.getString (  )  ) ;^135^^^^^120^150^attachJSDocInfoToNominalTypeOrShape ( objType, docInfo, n.getString (  )  ) ;^[CLASS] InferJSDocInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ObjectType  lhsType  objType  propType  AbstractCompiler  compiler  boolean  inExterns  JSType  varType  NodeTraversal  t  Node  n  parent  String  propName  JSDocInfo  docInfo  
[BugLab_Argument_Swapping]^attachJSDocInfoToNominalTypeOrShape ( docInfo, objType, n.getString (  )  ) ;^135^^^^^120^150^attachJSDocInfoToNominalTypeOrShape ( objType, docInfo, n.getString (  )  ) ;^[CLASS] InferJSDocInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ObjectType  lhsType  objType  propType  AbstractCompiler  compiler  boolean  inExterns  JSType  varType  NodeTraversal  t  Node  n  parent  String  propName  JSDocInfo  docInfo  
[BugLab_Argument_Swapping]^attachJSDocInfoToNominalTypeOrShape ( objType, n, docInfo.getString (  )  ) ;^135^^^^^120^150^attachJSDocInfoToNominalTypeOrShape ( objType, docInfo, n.getString (  )  ) ;^[CLASS] InferJSDocInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ObjectType  lhsType  objType  propType  AbstractCompiler  compiler  boolean  inExterns  JSType  varType  NodeTraversal  t  Node  n  parent  String  propName  JSDocInfo  docInfo  
[BugLab_Argument_Swapping]^attachJSDocInfoToNominalTypeOrShape ( n, docInfo, objType.getString (  )  ) ;^135^^^^^120^150^attachJSDocInfoToNominalTypeOrShape ( objType, docInfo, n.getString (  )  ) ;^[CLASS] InferJSDocInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ObjectType  lhsType  objType  propType  AbstractCompiler  compiler  boolean  inExterns  JSType  varType  NodeTraversal  t  Node  n  parent  String  propName  JSDocInfo  docInfo  
[BugLab_Variable_Misuse]^( n.getType (  )  == Token.ASSIGN && parent.getFirstChild (  )  == n )  )  {^150^151^^^^135^165^( parent.getType (  )  == Token.ASSIGN && parent.getFirstChild (  )  == n )  )  {^[CLASS] InferJSDocInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ObjectType  lhsType  objType  propType  AbstractCompiler  compiler  boolean  inExterns  JSType  varType  NodeTraversal  t  Node  n  parent  String  propName  JSDocInfo  docInfo  
[BugLab_Variable_Misuse]^docInfo = parent.getJSDocInfo (  ) ;^152^^^^^137^167^docInfo = n.getJSDocInfo (  ) ;^[CLASS] InferJSDocInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ObjectType  lhsType  objType  propType  AbstractCompiler  compiler  boolean  inExterns  JSType  varType  NodeTraversal  t  Node  n  parent  String  propName  JSDocInfo  docInfo  
[BugLab_Wrong_Operator]^return ObjectType.cast ( type != null ? null : type.dereference (  )  ) ;^184^^^^^183^185^return ObjectType.cast ( type == null ? null : type.dereference (  )  ) ;^[CLASS] InferJSDocInfo  [METHOD] dereferenceToObject [RETURN_TYPE] ObjectType   JSType type [VARIABLES] AbstractCompiler  compiler  boolean  inExterns  JSType  type  
[BugLab_Wrong_Operator]^if  ( objType.isConstructor (  )  && objType.isEnumType (  )  || objType.isInterface (  )  )  {^192^193^194^^^190^212^if  ( objType.isConstructor (  )  || objType.isEnumType (  )  || objType.isInterface (  )  )  {^[CLASS] InferJSDocInfo  [METHOD] attachJSDocInfoToNominalTypeOrShape [RETURN_TYPE] void   ObjectType objType JSDocInfo docInfo String qName [VARIABLES] ObjectType  objType  AbstractCompiler  compiler  boolean  inExterns  String  qName  JSDocInfo  docInfo  
[BugLab_Wrong_Operator]^} else if  ( !objType.isNativeObjectType (  )  || objType.isFunctionType (  )  )  {^207^208^^^^190^212^} else if  ( !objType.isNativeObjectType (  )  && objType.isFunctionType (  )  )  {^[CLASS] InferJSDocInfo  [METHOD] attachJSDocInfoToNominalTypeOrShape [RETURN_TYPE] void   ObjectType objType JSDocInfo docInfo String qName [VARIABLES] ObjectType  objType  AbstractCompiler  compiler  boolean  inExterns  String  qName  JSDocInfo  docInfo  
[BugLab_Wrong_Operator]^if  ( objType.hasReferenceName (  )  || objType.getReferenceName (  ) .equals ( qName )  )  {^196^197^^^^190^212^if  ( objType.hasReferenceName (  )  && objType.getReferenceName (  ) .equals ( qName )  )  {^[CLASS] InferJSDocInfo  [METHOD] attachJSDocInfoToNominalTypeOrShape [RETURN_TYPE] void   ObjectType objType JSDocInfo docInfo String qName [VARIABLES] ObjectType  objType  AbstractCompiler  compiler  boolean  inExterns  String  qName  JSDocInfo  docInfo  
[BugLab_Wrong_Operator]^if  ( objType.isConstructor (  )  && objType.isInterface (  )  )  {^200^^^^^190^212^if  ( objType.isConstructor (  )  || objType.isInterface (  )  )  {^[CLASS] InferJSDocInfo  [METHOD] attachJSDocInfoToNominalTypeOrShape [RETURN_TYPE] void   ObjectType objType JSDocInfo docInfo String qName [VARIABLES] ObjectType  objType  AbstractCompiler  compiler  boolean  inExterns  String  qName  JSDocInfo  docInfo  
[BugLab_Wrong_Operator]^} else if  ( objType  >>  EnumType )  {^203^^^^^190^212^} else if  ( objType instanceof EnumType )  {^[CLASS] InferJSDocInfo  [METHOD] attachJSDocInfoToNominalTypeOrShape [RETURN_TYPE] void   ObjectType objType JSDocInfo docInfo String qName [VARIABLES] ObjectType  objType  AbstractCompiler  compiler  boolean  inExterns  String  qName  JSDocInfo  docInfo  
[BugLab_Wrong_Operator]^} else if  ( objType  <=  EnumType )  {^203^^^^^190^212^} else if  ( objType instanceof EnumType )  {^[CLASS] InferJSDocInfo  [METHOD] attachJSDocInfoToNominalTypeOrShape [RETURN_TYPE] void   ObjectType objType JSDocInfo docInfo String qName [VARIABLES] ObjectType  objType  AbstractCompiler  compiler  boolean  inExterns  String  qName  JSDocInfo  docInfo  
[BugLab_Wrong_Operator]^} else if  ( objType  <  EnumType )  {^203^^^^^190^212^} else if  ( objType instanceof EnumType )  {^[CLASS] InferJSDocInfo  [METHOD] attachJSDocInfoToNominalTypeOrShape [RETURN_TYPE] void   ObjectType objType JSDocInfo docInfo String qName [VARIABLES] ObjectType  objType  AbstractCompiler  compiler  boolean  inExterns  String  qName  JSDocInfo  docInfo  
[BugLab_Argument_Swapping]^if  ( qName.hasReferenceName (  )  && objType.getReferenceName (  ) .equals ( objType )  )  {^196^197^^^^190^212^if  ( objType.hasReferenceName (  )  && objType.getReferenceName (  ) .equals ( qName )  )  {^[CLASS] InferJSDocInfo  [METHOD] attachJSDocInfoToNominalTypeOrShape [RETURN_TYPE] void   ObjectType objType JSDocInfo docInfo String qName [VARIABLES] ObjectType  objType  AbstractCompiler  compiler  boolean  inExterns  String  qName  JSDocInfo  docInfo  
[BugLab_Wrong_Operator]^} else if  ( objType  &  EnumType )  {^203^^^^^190^212^} else if  ( objType instanceof EnumType )  {^[CLASS] InferJSDocInfo  [METHOD] attachJSDocInfoToNominalTypeOrShape [RETURN_TYPE] void   ObjectType objType JSDocInfo docInfo String qName [VARIABLES] ObjectType  objType  AbstractCompiler  compiler  boolean  inExterns  String  qName  JSDocInfo  docInfo  
[BugLab_Wrong_Operator]^} else if  ( objType  ||  EnumType )  {^203^^^^^190^212^} else if  ( objType instanceof EnumType )  {^[CLASS] InferJSDocInfo  [METHOD] attachJSDocInfoToNominalTypeOrShape [RETURN_TYPE] void   ObjectType objType JSDocInfo docInfo String qName [VARIABLES] ObjectType  objType  AbstractCompiler  compiler  boolean  inExterns  String  qName  JSDocInfo  docInfo  
