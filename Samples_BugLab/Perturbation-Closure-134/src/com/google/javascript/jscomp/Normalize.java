[BugLab_Wrong_Literal]^private static final boolean CONVERT_WHILE_TO_FOR = false;^70^^^^^65^75^private static final boolean CONVERT_WHILE_TO_FOR = true;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback   [VARIABLES] 
[BugLab_Wrong_Literal]^static final boolean MAKE_LOCAL_NAMES_UNIQUE = false;^71^^^^^66^76^static final boolean MAKE_LOCAL_NAMES_UNIQUE = true;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback   [VARIABLES] 
[BugLab_Variable_Misuse]^this.assertOnChange = checkUserDeclarations;^75^^^^^73^76^this.assertOnChange = assertOnChange;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] <init> [RETURN_TYPE] AbstractCompiler,boolean)   AbstractCompiler compiler boolean assertOnChange [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  Map  constantMap  
[BugLab_Variable_Misuse]^this.assertOnChange = checkUserDeclarations;^115^^^^^112^116^this.assertOnChange = forbidChanges;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] <init> [RETURN_TYPE] AbstractCompiler,boolean)   AbstractCompiler compiler boolean forbidChanges [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  
[BugLab_Variable_Misuse]^this.checkUserDeclarations = forbidChanges;^167^^^^^165^168^this.checkUserDeclarations = checkUserDeclarations;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] <init> [RETURN_TYPE] AbstractCompiler,boolean)   AbstractCompiler compiler boolean checkUserDeclarations [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  
[BugLab_Variable_Misuse]^if  ( forbidChanges )  {^79^^^^^78^84^if  ( assertOnChange )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] reportCodeChange [RETURN_TYPE] void   String changeDescription [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  String  changeDescription  Map  constantMap  
[BugLab_Wrong_Operator]^throw new IllegalStateException ( "Normalize constraints violated:\n"  >  changeDescription ) ;^80^81^^^^78^84^throw new IllegalStateException ( "Normalize constraints violated:\n" + changeDescription ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] reportCodeChange [RETURN_TYPE] void   String changeDescription [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  String  changeDescription  Map  constantMap  
[BugLab_Wrong_Operator]^throw new IllegalStateException ( "Normalize constraints violated:\n"  <<  changeDescription ) ;^80^81^^^^78^84^throw new IllegalStateException ( "Normalize constraints violated:\n" + changeDescription ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] reportCodeChange [RETURN_TYPE] void   String changeDescription [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  String  changeDescription  Map  constantMap  
[BugLab_Wrong_Operator]^throw new IllegalStateException ( "Normalize constraints violated:\n"  ^  changeDescription ) ;^80^81^^^^78^84^throw new IllegalStateException ( "Normalize constraints violated:\n" + changeDescription ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] reportCodeChange [RETURN_TYPE] void   String changeDescription [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  String  changeDescription  Map  constantMap  
[BugLab_Variable_Misuse]^NodeTraversal.traverse ( compiler, externs, this ) ;^88^^^^^87^97^NodeTraversal.traverse ( compiler, root, this ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  
[BugLab_Argument_Swapping]^NodeTraversal.traverse ( root, compiler, this ) ;^88^^^^^87^97^NodeTraversal.traverse ( compiler, root, this ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  
[BugLab_Variable_Misuse]^if  ( forbidChanges )  {^89^^^^^87^97^if  ( MAKE_LOCAL_NAMES_UNIQUE )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  
[BugLab_Argument_Swapping]^NodeTraversal t = new NodeTraversal ( renamer, compiler ) ;^91^^^^^87^97^NodeTraversal t = new NodeTraversal ( compiler, renamer ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  
[BugLab_Variable_Misuse]^t.traverseRoots ( root, root ) ;^92^^^^^87^97^t.traverseRoots ( externs, root ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  
[BugLab_Argument_Swapping]^t.traverseRoots ( root, externs ) ;^92^^^^^87^97^t.traverseRoots ( externs, root ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  
[BugLab_Variable_Misuse]^removeDuplicateDeclarations ( externs ) ;^94^^^^^87^97^removeDuplicateDeclarations ( root ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  
[BugLab_Variable_Misuse]^new PropogateConstantAnnotations ( compiler, checkUserDeclarations ) .process ( externs, root ) ;^95^96^^^^87^97^new PropogateConstantAnnotations ( compiler, assertOnChange ) .process ( externs, root ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  
[BugLab_Argument_Swapping]^new PropogateConstantAnnotations ( assertOnChange, compiler ) .process ( externs, root ) ;^95^96^^^^87^97^new PropogateConstantAnnotations ( compiler, assertOnChange ) .process ( externs, root ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  
[BugLab_Argument_Swapping]^new PropogateConstantAnnotations ( compiler, externs ) .process ( assertOnChange, root ) ;^95^96^^^^87^97^new PropogateConstantAnnotations ( compiler, assertOnChange ) .process ( externs, root ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  
[BugLab_Argument_Swapping]^new PropogateConstantAnnotations ( compiler, assertOnChange ) .process ( root, externs ) ;^95^96^^^^87^97^new PropogateConstantAnnotations ( compiler, assertOnChange ) .process ( externs, root ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  
[BugLab_Argument_Swapping]^new PropogateConstantAnnotations ( compiler, root ) .process ( externs, assertOnChange ) ;^95^96^^^^87^97^new PropogateConstantAnnotations ( compiler, assertOnChange ) .process ( externs, root ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  
[BugLab_Variable_Misuse]^doStatementNormalizations ( t, n, n ) ;^101^^^^^100^104^doStatementNormalizations ( t, n, parent ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  
[BugLab_Argument_Swapping]^doStatementNormalizations ( n, t, parent ) ;^101^^^^^100^104^doStatementNormalizations ( t, n, parent ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  
[BugLab_Argument_Swapping]^doStatementNormalizations ( t, parent, n ) ;^101^^^^^100^104^doStatementNormalizations ( t, n, parent ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  
[BugLab_Wrong_Literal]^return false;^103^^^^^100^104^return true;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  
[BugLab_Argument_Swapping]^new NodeTraversal ( externs, this ) .traverseRoots ( compiler, root ) ;^120^^^^^119^121^new NodeTraversal ( compiler, this ) .traverseRoots ( externs, root ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  Node  externs  root  
[BugLab_Argument_Swapping]^new NodeTraversal ( root, this ) .traverseRoots ( externs, compiler ) ;^120^^^^^119^121^new NodeTraversal ( compiler, this ) .traverseRoots ( externs, root ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  Node  externs  root  
[BugLab_Variable_Misuse]^if  ( parent.getType (  )  == Token.NAME )  {^126^^^^^124^153^if  ( n.getType (  )  == Token.NAME )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Map  constantMap  
[BugLab_Variable_Misuse]^if  ( n.getType (  )  == Token.1 )  {^126^^^^^124^153^if  ( n.getType (  )  == Token.NAME )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Map  constantMap  
[BugLab_Wrong_Operator]^if  ( n.getType (  )  != Token.NAME )  {^126^^^^^124^153^if  ( n.getType (  )  == Token.NAME )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Map  constantMap  
[BugLab_Wrong_Operator]^if  ( var == null )  {^134^^^^^124^153^if  ( var != null )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Map  constantMap  
[BugLab_Variable_Misuse]^if  (  ( info != parentull && info.isConstant (  )  )  && !n.getBooleanProp ( Node.IS_CONSTANT_NAME )  )  {^138^139^^^^124^153^if  (  ( info != null && info.isConstant (  )  )  && !n.getBooleanProp ( Node.IS_CONSTANT_NAME )  )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Map  constantMap  
[BugLab_Argument_Swapping]^if  (  ( n != infoull && info.isConstant (  )  )  && !n.getBooleanProp ( Node.IS_CONSTANT_NAME )  )  {^138^139^^^^124^153^if  (  ( info != null && info.isConstant (  )  )  && !n.getBooleanProp ( Node.IS_CONSTANT_NAME )  )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Map  constantMap  
[BugLab_Wrong_Operator]^if  (  ( info != null || info.isConstant (  )  )  && !n.getBooleanProp ( Node.IS_CONSTANT_NAME )  )  {^138^139^^^^124^153^if  (  ( info != null && info.isConstant (  )  )  && !n.getBooleanProp ( Node.IS_CONSTANT_NAME )  )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Map  constantMap  
[BugLab_Wrong_Operator]^if  (  ( info == null && info.isConstant (  )  )  && !n.getBooleanProp ( Node.IS_CONSTANT_NAME )  )  {^138^139^^^^124^153^if  (  ( info != null && info.isConstant (  )  )  && !n.getBooleanProp ( Node.IS_CONSTANT_NAME )  )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Map  constantMap  
[BugLab_Variable_Misuse]^if  ( forbidChanges )  {^141^^^^^138^151^if  ( assertOnChange )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Map  constantMap  
[BugLab_Variable_Misuse]^throw parentew IllegalStateException ( "Unexpected const change.\n" + "  name: "+ name + "\n" + "  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^143^144^145^146^^138^151^throw new IllegalStateException ( "Unexpected const change.\n" + "  name: "+ name + "\n" + "  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Map  constantMap  
[BugLab_Argument_Swapping]^throw nameew IllegalStateException ( "Unexpected const change.\n" + "  n: "+ name + "\n" + "  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^143^144^145^146^^138^151^throw new IllegalStateException ( "Unexpected const change.\n" + "  name: "+ name + "\n" + "  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Map  constantMap  
[BugLab_Wrong_Operator]^throw new IllegalStateException ( "Unexpected const change.\n" + "  |  name: "+ name + "\n" + "  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^143^144^145^146^^138^151^throw new IllegalStateException ( "Unexpected const change.\n" + "  name: "+ name + "\n" + "  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Map  constantMap  
[BugLab_Wrong_Operator]^throw new IllegalStateException ( "Unexpected const change.\n" + "  ||  name: "+ name + "\n" + "  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^143^144^145^146^^138^151^throw new IllegalStateException ( "Unexpected const change.\n" + "  name: "+ name + "\n" + "  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Map  constantMap  
[BugLab_Wrong_Operator]^throw new IllegalStateException ( "Unexpected const change.\n" + "  >>  name: "+ name + "\n" + "  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^143^144^145^146^^138^151^throw new IllegalStateException ( "Unexpected const change.\n" + "  name: "+ name + "\n" + "  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Map  constantMap  
[BugLab_Wrong_Operator]^throw new IllegalStateException ( "Unexpected const change.\n" + "   instanceof   name: "+ name + "\n" + "  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^143^144^145^146^^138^151^throw new IllegalStateException ( "Unexpected const change.\n" + "  name: "+ name + "\n" + "  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Map  constantMap  
[BugLab_Variable_Misuse]^String parentame = n.getString (  ) ;^142^^^^^138^151^String name = n.getString (  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Map  constantMap  
[BugLab_Wrong_Operator]^throw new IllegalStateException ( "Unexpected const change.\n" + "  >=  name: "+ name + "\n" + "  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^143^144^145^146^^138^151^throw new IllegalStateException ( "Unexpected const change.\n" + "  name: "+ name + "\n" + "  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Map  constantMap  
[BugLab_Wrong_Operator]^throw new IllegalStateException ( "Unexpected const change.\n" + "  <<  name: "+ name + "\n" + "  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^143^144^145^146^^138^151^throw new IllegalStateException ( "Unexpected const change.\n" + "  name: "+ name + "\n" + "  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Map  constantMap  
[BugLab_Wrong_Operator]^throw new IllegalStateException ( "Unexpected const change.\n" + "  >  name: "+ name + "\n" + "  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^143^144^145^146^^138^151^throw new IllegalStateException ( "Unexpected const change.\n" + "  name: "+ name + "\n" + "  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Map  constantMap  
[BugLab_Wrong_Operator]^throw new IllegalStateException ( "Unexpected const change.\n" + "  !=  name: "+ name + "\n" + "  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^143^144^145^146^^138^151^throw new IllegalStateException ( "Unexpected const change.\n" + "  name: "+ name + "\n" + "  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Map  constantMap  
[BugLab_Variable_Misuse]^"  gramps:" + parent.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^146^^^^^138^151^"  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Map  constantMap  
[BugLab_Wrong_Operator]^throw new IllegalStateException ( "Unexpected const change.\n" + "  &  name: "+ name + "\n" + "  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^143^144^145^146^^138^151^throw new IllegalStateException ( "Unexpected const change.\n" + "  name: "+ name + "\n" + "  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Map  constantMap  
[BugLab_Wrong_Operator]^throw new IllegalStateException ( "Unexpected const change.\n" + "  <  name: "+ name + "\n" + "  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^143^144^145^146^^138^151^throw new IllegalStateException ( "Unexpected const change.\n" + "  name: "+ name + "\n" + "  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Map  constantMap  
[BugLab_Wrong_Operator]^throw new IllegalStateException ( "Unexpected const change.\n" + "  <=  name: "+ name + "\n" + "  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^143^144^145^146^^138^151^throw new IllegalStateException ( "Unexpected const change.\n" + "  name: "+ name + "\n" + "  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Map  constantMap  
[BugLab_Wrong_Literal]^n.putBooleanProp ( Node.IS_CONSTANT_NAME, false ) ;^140^^^^^138^151^n.putBooleanProp ( Node.IS_CONSTANT_NAME, true ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Map  constantMap  
[BugLab_Variable_Misuse]^if  ( forbidChanges )  {^141^^^^^124^153^if  ( assertOnChange )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Map  constantMap  
[BugLab_Variable_Misuse]^throw parentew IllegalStateException ( "Unexpected const change.\n" + "  name: "+ name + "\n" + "  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^143^144^145^146^^124^153^throw new IllegalStateException ( "Unexpected const change.\n" + "  name: "+ name + "\n" + "  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Map  constantMap  
[BugLab_Argument_Swapping]^throw nameew IllegalStateException ( "Unexpected const change.\n" + "  n: "+ name + "\n" + "  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^143^144^145^146^^124^153^throw new IllegalStateException ( "Unexpected const change.\n" + "  name: "+ name + "\n" + "  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Map  constantMap  
[BugLab_Wrong_Operator]^throw new IllegalStateException ( "Unexpected const change.\n" + "  <<  name: "+ name + "\n" + "  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^143^144^145^146^^124^153^throw new IllegalStateException ( "Unexpected const change.\n" + "  name: "+ name + "\n" + "  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Map  constantMap  
[BugLab_Wrong_Operator]^throw new IllegalStateException ( "Unexpected const change.\n" + "  ==  name: "+ name + "\n" + "  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^143^144^145^146^^124^153^throw new IllegalStateException ( "Unexpected const change.\n" + "  name: "+ name + "\n" + "  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Map  constantMap  
[BugLab_Wrong_Operator]^throw new IllegalStateException ( "Unexpected const change.\n" + "  >>  name: "+ name + "\n" + "  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^143^144^145^146^^124^153^throw new IllegalStateException ( "Unexpected const change.\n" + "  name: "+ name + "\n" + "  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Map  constantMap  
[BugLab_Wrong_Operator]^throw new IllegalStateException ( "Unexpected const change.\n" + "  &&  name: "+ name + "\n" + "  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^143^144^145^146^^124^153^throw new IllegalStateException ( "Unexpected const change.\n" + "  name: "+ name + "\n" + "  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Map  constantMap  
[BugLab_Wrong_Operator]^throw new IllegalStateException ( "Unexpected const change.\n" + "   instanceof   name: "+ name + "\n" + "  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^143^144^145^146^^124^153^throw new IllegalStateException ( "Unexpected const change.\n" + "  name: "+ name + "\n" + "  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Map  constantMap  
[BugLab_Variable_Misuse]^String parentame = n.getString (  ) ;^142^^^^^124^153^String name = n.getString (  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Map  constantMap  
[BugLab_Wrong_Operator]^throw new IllegalStateException ( "Unexpected const change.\n" + "  ^  name: "+ name + "\n" + "  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^143^144^145^146^^124^153^throw new IllegalStateException ( "Unexpected const change.\n" + "  name: "+ name + "\n" + "  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Map  constantMap  
[BugLab_Wrong_Operator]^throw new IllegalStateException ( "Unexpected const change.\n" + "  <  name: "+ name + "\n" + "  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^143^144^145^146^^124^153^throw new IllegalStateException ( "Unexpected const change.\n" + "  name: "+ name + "\n" + "  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Map  constantMap  
[BugLab_Variable_Misuse]^"  gramps:" + parent.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^146^^^^^124^153^"  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Map  constantMap  
[BugLab_Wrong_Operator]^throw new IllegalStateException ( "Unexpected const change.\n" + "  !=  name: "+ name + "\n" + "  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^143^144^145^146^^124^153^throw new IllegalStateException ( "Unexpected const change.\n" + "  name: "+ name + "\n" + "  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Map  constantMap  
[BugLab_Wrong_Operator]^throw new IllegalStateException ( "Unexpected const change.\n" + "  |  name: "+ name + "\n" + "  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^143^144^145^146^^124^153^throw new IllegalStateException ( "Unexpected const change.\n" + "  name: "+ name + "\n" + "  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Map  constantMap  
[BugLab_Variable_Misuse]^Var var = t.getScope (  ) .getVar ( parent.getString (  )  ) ;^133^^^^^124^153^Var var = t.getScope (  ) .getVar ( n.getString (  )  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Map  constantMap  
[BugLab_Argument_Swapping]^Var var = n.getScope (  ) .getVar ( t.getString (  )  ) ;^133^^^^^124^153^Var var = t.getScope (  ) .getVar ( n.getString (  )  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Map  constantMap  
[BugLab_Wrong_Operator]^throw new IllegalStateException ( "Unexpected const change.\n" + "  >  name: "+ name + "\n" + "  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^143^144^145^146^^124^153^throw new IllegalStateException ( "Unexpected const change.\n" + "  name: "+ name + "\n" + "  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Map  constantMap  
[BugLab_Variable_Misuse]^if  ( parent.getString (  ) .isEmpty (  )  )  {^127^^^^^124^153^if  ( n.getString (  ) .isEmpty (  )  )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Map  constantMap  
[BugLab_Wrong_Literal]^n.putBooleanProp ( Node.IS_CONSTANT_NAME, false ) ;^140^^^^^124^153^n.putBooleanProp ( Node.IS_CONSTANT_NAME, true ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Map  constantMap  
[BugLab_Wrong_Operator]^throw new IllegalStateException ( "Unexpected const change.\n" + "  &&  name: "+ name + "\n" + "  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^143^144^145^146^^138^151^throw new IllegalStateException ( "Unexpected const change.\n" + "  name: "+ name + "\n" + "  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Map  constantMap  
[BugLab_Wrong_Operator]^throw new IllegalStateException ( "Unexpected const change.\n" + "  <=  name: "+ name + "\n" + "  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^143^144^145^146^^124^153^throw new IllegalStateException ( "Unexpected const change.\n" + "  name: "+ name + "\n" + "  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Map  constantMap  
[BugLab_Wrong_Operator]^throw new IllegalStateException ( "Unexpected const change.\n" + "  ||  name: "+ name + "\n" + "  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^143^144^145^146^^124^153^throw new IllegalStateException ( "Unexpected const change.\n" + "  name: "+ name + "\n" + "  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Map  constantMap  
[BugLab_Wrong_Operator]^throw new IllegalStateException ( "Unexpected const change.\n" + "  &  name: "+ name + "\n" + "  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^143^144^145^146^^124^153^throw new IllegalStateException ( "Unexpected const change.\n" + "  name: "+ name + "\n" + "  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Map  constantMap  
[BugLab_Variable_Misuse]^Node externsAndJs = externs.getParent (  ) ;^172^^^^^171^178^Node externsAndJs = root.getParent (  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  Node  externs  externsAndJs  root  
[BugLab_Variable_Misuse]^Node externsAndJs = externsAndJs.getParent (  ) ;^172^^^^^171^178^Node externsAndJs = root.getParent (  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  Node  externs  externsAndJs  root  
[BugLab_Variable_Misuse]^Preconditions.checkState ( root != null ) ;^173^^^^^171^178^Preconditions.checkState ( externsAndJs != null ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  Node  externs  externsAndJs  root  
[BugLab_Wrong_Operator]^Preconditions.checkState ( externsAndJs == null ) ;^173^^^^^171^178^Preconditions.checkState ( externsAndJs != null ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  Node  externs  externsAndJs  root  
[BugLab_Variable_Misuse]^Preconditions.checkState ( rootAndJs.hasChild ( externs )  ) ;^174^^^^^171^178^Preconditions.checkState ( externsAndJs.hasChild ( externs )  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  Node  externs  externsAndJs  root  
[BugLab_Argument_Swapping]^Preconditions.checkState ( externs.hasChild ( externsAndJs )  ) ;^174^^^^^171^178^Preconditions.checkState ( externsAndJs.hasChild ( externs )  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  Node  externs  externsAndJs  root  
[BugLab_Argument_Swapping]^Preconditions.checkState ( externsAndJsAndJs.hasChild ( externs )  ) ;^174^^^^^171^178^Preconditions.checkState ( externsAndJs.hasChild ( externs )  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  Node  externs  externsAndJs  root  
[BugLab_Variable_Misuse]^Preconditions.checkState ( root.hasChild ( externs )  ) ;^174^^^^^171^178^Preconditions.checkState ( externsAndJs.hasChild ( externs )  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  Node  externs  externsAndJs  root  
[BugLab_Variable_Misuse]^NodeTraversal.traverseRoots ( compiler, Lists.newArrayList ( root, root ) , this ) ;^176^177^^^^171^178^NodeTraversal.traverseRoots ( compiler, Lists.newArrayList ( externs, root ) , this ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  Node  externs  externsAndJs  root  
[BugLab_Variable_Misuse]^NodeTraversal.traverseRoots ( compiler, Lists.newArrayList ( externs, externsAndJs ) , this ) ;^176^177^^^^171^178^NodeTraversal.traverseRoots ( compiler, Lists.newArrayList ( externs, root ) , this ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  Node  externs  externsAndJs  root  
[BugLab_Argument_Swapping]^NodeTraversal.traverseRoots ( compiler, Lists.newArrayList ( root, externs ) , this ) ;^176^177^^^^171^178^NodeTraversal.traverseRoots ( compiler, Lists.newArrayList ( externs, root ) , this ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  Node  externs  externsAndJs  root  
[BugLab_Argument_Swapping]^NodeTraversal.traverseRoots ( externs, Lists.newArrayList ( compiler, root ) , this ) ;^176^177^^^^171^178^NodeTraversal.traverseRoots ( compiler, Lists.newArrayList ( externs, root ) , this ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  Node  externs  externsAndJs  root  
[BugLab_Variable_Misuse]^compiler, Lists.newArrayList ( externsAndJs, root ) , this ) ;^177^^^^^171^178^compiler, Lists.newArrayList ( externs, root ) , this ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  Node  externs  externsAndJs  root  
[BugLab_Argument_Swapping]^compiler, Lists.newArrayList ( root, externs ) , this ) ;^177^^^^^171^178^compiler, Lists.newArrayList ( externs, root ) , this ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  Node  externs  externsAndJs  root  
[BugLab_Variable_Misuse]^if  ( parent.getType (  )  == Token.NAME )  {^184^^^^^169^199^if  ( n.getType (  )  == Token.NAME )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[BugLab_Wrong_Operator]^if  ( n.getType (  )  <= Token.NAME )  {^184^^^^^169^199^if  ( n.getType (  )  == Token.NAME )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[BugLab_Wrong_Operator]^if  ( n.getType (  )  >= Token.NAME )  {^184^^^^^169^199^if  ( n.getType (  )  == Token.NAME )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[BugLab_Wrong_Operator]^if  ( n.getType (  )  != Token.NAME )  {^184^^^^^169^199^if  ( n.getType (  )  == Token.NAME )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[BugLab_Variable_Misuse]^if  ( parent.getString (  ) .isEmpty (  )  )  {^186^^^^^171^201^if  ( n.getString (  ) .isEmpty (  )  )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[BugLab_Variable_Misuse]^if  ( isConst )  {^191^^^^^176^206^if  ( checkUserDeclarations )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[BugLab_Variable_Misuse]^if  ( NodeUtil.isConstantName ( parent ) || compiler.getCodingConvention (  ) .isConstant ( n.getString (  )  )  )  {^193^194^^^^178^208^if  ( NodeUtil.isConstantName ( n ) || compiler.getCodingConvention (  ) .isConstant ( n.getString (  )  )  )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[BugLab_Wrong_Operator]^if  ( NodeUtil.isConstantName ( n ) && compiler.getCodingConvention (  ) .isConstant ( n.getString (  )  )  )  {^193^194^^^^178^208^if  ( NodeUtil.isConstantName ( n ) || compiler.getCodingConvention (  ) .isConstant ( n.getString (  )  )  )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[BugLab_Wrong_Operator]^if  ( var == null )  {^201^^^^^193^210^if  ( var != null )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[BugLab_Wrong_Operator]^if  ( info != null || info.isConstant (  )  )  {^205^^^^^193^210^if  ( info != null && info.isConstant (  )  )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[BugLab_Wrong_Operator]^if  ( info == null && info.isConstant (  )  )  {^205^^^^^193^210^if  ( info != null && info.isConstant (  )  )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[BugLab_Wrong_Literal]^expectedConst = true;^208^^^^^193^210^expectedConst = false;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[BugLab_Wrong_Literal]^expectedConst = false;^206^^^^^193^210^expectedConst = true;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[BugLab_Wrong_Literal]^expectedConst = true;^197^^^^^193^210^expectedConst = false;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[BugLab_Variable_Misuse]^Var var = t.getScope (  ) .getVar ( parent.getString (  )  ) ;^200^^^^^193^210^Var var = t.getScope (  ) .getVar ( n.getString (  )  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[BugLab_Argument_Swapping]^Var var = n.getScope (  ) .getVar ( t.getString (  )  ) ;^200^^^^^193^210^Var var = t.getScope (  ) .getVar ( n.getString (  )  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[BugLab_Wrong_Literal]^expectedConst = false;^195^^^^^193^210^expectedConst = true;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[BugLab_Wrong_Operator]^if  ( var == null )  {^201^^^^^186^216^if  ( var != null )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[BugLab_Wrong_Operator]^if  ( info != null || info.isConstant (  )  )  {^205^^^^^190^220^if  ( info != null && info.isConstant (  )  )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[BugLab_Wrong_Operator]^if  ( info == null && info.isConstant (  )  )  {^205^^^^^190^220^if  ( info != null && info.isConstant (  )  )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[BugLab_Wrong_Literal]^expectedConst = true;^208^^^^^205^209^expectedConst = false;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[BugLab_Wrong_Literal]^expectedConst = false;^206^^^^^191^221^expectedConst = true;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[BugLab_Variable_Misuse]^if  ( forbidChanges )  {^212^^^^^197^227^if  ( expectedConst )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[BugLab_Variable_Misuse]^Preconditions.checkState ( checkUserDeclarations == isConst, "The name " + name + " should not be annotated as constant." ) ;^216^217^^^^212^218^Preconditions.checkState ( expectedConst == isConst, "The name " + name + " should not be annotated as constant." ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[BugLab_Variable_Misuse]^Preconditions.checkState ( expectedConst == checkUserDeclarations, "The name " + name + " should not be annotated as constant." ) ;^216^217^^^^212^218^Preconditions.checkState ( expectedConst == isConst, "The name " + name + " should not be annotated as constant." ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[BugLab_Argument_Swapping]^Preconditions.checkState ( isConst == expectedConst, "The name " + name + " should not be annotated as constant." ) ;^216^217^^^^212^218^Preconditions.checkState ( expectedConst == isConst, "The name " + name + " should not be annotated as constant." ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[BugLab_Argument_Swapping]^Preconditions.checkState ( name == isConst, "The expectedConst " + name + " should not be annotated as constant." ) ;^216^217^^^^212^218^Preconditions.checkState ( expectedConst == isConst, "The name " + name + " should not be annotated as constant." ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[BugLab_Wrong_Operator]^Preconditions.checkState ( expectedConst >= isConst, "The name " + name + " should not be annotated as constant." ) ;^216^217^^^^212^218^Preconditions.checkState ( expectedConst == isConst, "The name " + name + " should not be annotated as constant." ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[BugLab_Wrong_Operator]^Preconditions.checkState ( expectedConst == isConst, "The name "  |  name  |  " should not be annotated as constant." ) ;^216^217^^^^212^218^Preconditions.checkState ( expectedConst == isConst, "The name " + name + " should not be annotated as constant." ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[BugLab_Wrong_Operator]^Preconditions.checkState ( expectedConst == isConst, "The name "  <<  name + " should not be annotated as constant." ) ;^216^217^^^^212^218^Preconditions.checkState ( expectedConst == isConst, "The name " + name + " should not be annotated as constant." ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[BugLab_Variable_Misuse]^Preconditions.checkState ( checkUserDeclarations == isConst, "The name " + name + " is not annotated as constant." ) ;^213^214^^^^198^228^Preconditions.checkState ( expectedConst == isConst, "The name " + name + " is not annotated as constant." ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[BugLab_Variable_Misuse]^Preconditions.checkState ( expectedConst == forbidChanges, "The name " + name + " is not annotated as constant." ) ;^213^214^^^^198^228^Preconditions.checkState ( expectedConst == isConst, "The name " + name + " is not annotated as constant." ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[BugLab_Argument_Swapping]^Preconditions.checkState ( isConst == expectedConst, "The name " + name + " is not annotated as constant." ) ;^213^214^^^^198^228^Preconditions.checkState ( expectedConst == isConst, "The name " + name + " is not annotated as constant." ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[BugLab_Argument_Swapping]^Preconditions.checkState ( expectedConst == name, "The isConst " + name + " is not annotated as constant." ) ;^213^214^^^^198^228^Preconditions.checkState ( expectedConst == isConst, "The name " + name + " is not annotated as constant." ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[BugLab_Wrong_Operator]^Preconditions.checkState ( expectedConst < isConst, "The name " + name + " is not annotated as constant." ) ;^213^214^^^^198^228^Preconditions.checkState ( expectedConst == isConst, "The name " + name + " is not annotated as constant." ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[BugLab_Wrong_Operator]^Preconditions.checkState ( expectedConst == isConst, "The name "  ==  name  ==  " is not annotated as constant." ) ;^213^214^^^^198^228^Preconditions.checkState ( expectedConst == isConst, "The name " + name + " is not annotated as constant." ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[BugLab_Wrong_Operator]^Preconditions.checkState ( expectedConst == isConst, "The name "  >>  name + " is not annotated as constant." ) ;^213^214^^^^198^228^Preconditions.checkState ( expectedConst == isConst, "The name " + name + " is not annotated as constant." ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[BugLab_Wrong_Literal]^expectedConst = false;^195^^^^^180^210^expectedConst = true;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[BugLab_Wrong_Literal]^expectedConst = true;^197^^^^^182^212^expectedConst = false;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[BugLab_Wrong_Literal]^expectedConst = true;^208^^^^^193^223^expectedConst = false;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[BugLab_Wrong_Literal]^boolean expectedConst = true;^192^^^^^177^207^boolean expectedConst = false;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[BugLab_Variable_Misuse]^Var var = t.getScope (  ) .getVar ( parent.getString (  )  ) ;^200^^^^^185^215^Var var = t.getScope (  ) .getVar ( n.getString (  )  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[BugLab_Argument_Swapping]^Var var = n.getScope (  ) .getVar ( t.getString (  )  ) ;^200^^^^^185^215^Var var = t.getScope (  ) .getVar ( n.getString (  )  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[BugLab_Argument_Swapping]^|| n.getCodingConvention (  ) .isConstant ( compiler.getString (  )  )  )  {^194^^^^^179^209^|| compiler.getCodingConvention (  ) .isConstant ( n.getString (  )  )  )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[BugLab_Variable_Misuse]^|| compiler.getCodingConvention (  ) .isConstant ( parent.getString (  )  )  )  {^194^^^^^179^209^|| compiler.getCodingConvention (  ) .isConstant ( n.getString (  )  )  )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[BugLab_Wrong_Operator]^Preconditions.checkState ( expectedConst >= isConst, "The name " + name + " is not annotated as constant." ) ;^213^214^^^^198^228^Preconditions.checkState ( expectedConst == isConst, "The name " + name + " is not annotated as constant." ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[BugLab_Wrong_Operator]^Preconditions.checkState ( expectedConst == isConst, "The name "  ^  name  ^  " is not annotated as constant." ) ;^213^214^^^^198^228^Preconditions.checkState ( expectedConst == isConst, "The name " + name + " is not annotated as constant." ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[BugLab_Wrong_Operator]^Preconditions.checkState ( expectedConst == isConst, "The name "  <=  name + " is not annotated as constant." ) ;^213^214^^^^198^228^Preconditions.checkState ( expectedConst == isConst, "The name " + name + " is not annotated as constant." ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[BugLab_Variable_Misuse]^Preconditions.checkState ( forbidChanges == isConst, "The name " + name + " should not be annotated as constant." ) ;^216^217^^^^201^231^Preconditions.checkState ( expectedConst == isConst, "The name " + name + " should not be annotated as constant." ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[BugLab_Variable_Misuse]^Preconditions.checkState ( expectedConst == forbidChanges, "The name " + name + " should not be annotated as constant." ) ;^216^217^^^^201^231^Preconditions.checkState ( expectedConst == isConst, "The name " + name + " should not be annotated as constant." ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[BugLab_Argument_Swapping]^Preconditions.checkState ( isConst == expectedConst, "The name " + name + " should not be annotated as constant." ) ;^216^217^^^^201^231^Preconditions.checkState ( expectedConst == isConst, "The name " + name + " should not be annotated as constant." ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[BugLab_Argument_Swapping]^Preconditions.checkState ( expectedConst == name, "The isConst " + name + " should not be annotated as constant." ) ;^216^217^^^^201^231^Preconditions.checkState ( expectedConst == isConst, "The name " + name + " should not be annotated as constant." ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[BugLab_Wrong_Operator]^Preconditions.checkState ( expectedConst <= isConst, "The name " + name + " should not be annotated as constant." ) ;^216^217^^^^201^231^Preconditions.checkState ( expectedConst == isConst, "The name " + name + " should not be annotated as constant." ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[BugLab_Wrong_Operator]^Preconditions.checkState ( expectedConst == isConst, "The name "  <  name  <  " should not be annotated as constant." ) ;^216^217^^^^201^231^Preconditions.checkState ( expectedConst == isConst, "The name " + name + " should not be annotated as constant." ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[BugLab_Wrong_Operator]^Preconditions.checkState ( expectedConst == isConst, "The name "  ||  name + " should not be annotated as constant." ) ;^216^217^^^^201^231^Preconditions.checkState ( expectedConst == isConst, "The name " + name + " should not be annotated as constant." ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[BugLab_Variable_Misuse]^if  ( checkUserDeclarations )  {^212^^^^^197^227^if  ( expectedConst )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[BugLab_Variable_Misuse]^Preconditions.checkState ( forbidChanges == isConst, "The name " + name + " should not be annotated as constant." ) ;^216^217^^^^212^218^Preconditions.checkState ( expectedConst == isConst, "The name " + name + " should not be annotated as constant." ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[BugLab_Variable_Misuse]^Preconditions.checkState ( expectedConst == forbidChanges, "The name " + name + " should not be annotated as constant." ) ;^216^217^^^^212^218^Preconditions.checkState ( expectedConst == isConst, "The name " + name + " should not be annotated as constant." ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[BugLab_Argument_Swapping]^Preconditions.checkState ( expectedConst == name, "The isConst " + name + " should not be annotated as constant." ) ;^216^217^^^^212^218^Preconditions.checkState ( expectedConst == isConst, "The name " + name + " should not be annotated as constant." ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[BugLab_Wrong_Operator]^Preconditions.checkState ( expectedConst != isConst, "The name " + name + " should not be annotated as constant." ) ;^216^217^^^^212^218^Preconditions.checkState ( expectedConst == isConst, "The name " + name + " should not be annotated as constant." ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[BugLab_Wrong_Operator]^Preconditions.checkState ( expectedConst == isConst, "The name "  >=  name  >=  " should not be annotated as constant." ) ;^216^217^^^^212^218^Preconditions.checkState ( expectedConst == isConst, "The name " + name + " should not be annotated as constant." ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[BugLab_Wrong_Operator]^Preconditions.checkState ( expectedConst == isConst, "The name "  >>  name + " should not be annotated as constant." ) ;^216^217^^^^212^218^Preconditions.checkState ( expectedConst == isConst, "The name " + name + " should not be annotated as constant." ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[BugLab_Wrong_Operator]^Preconditions.checkState ( expectedConst != isConst, "The name " + name + " is not annotated as constant." ) ;^213^214^^^^198^228^Preconditions.checkState ( expectedConst == isConst, "The name " + name + " is not annotated as constant." ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[BugLab_Wrong_Operator]^Preconditions.checkState ( expectedConst == isConst, "The name "  >  name  >  " is not annotated as constant." ) ;^213^214^^^^198^228^Preconditions.checkState ( expectedConst == isConst, "The name " + name + " is not annotated as constant." ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[BugLab_Wrong_Operator]^Preconditions.checkState ( expectedConst == isConst, "The name "  ^  name + " is not annotated as constant." ) ;^213^214^^^^198^228^Preconditions.checkState ( expectedConst == isConst, "The name " + name + " is not annotated as constant." ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[BugLab_Wrong_Operator]^if  ( value != null )  {^222^^^^^207^237^if  ( value == null )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[BugLab_Variable_Misuse]^Preconditions.checkState ( value.booleanValue (  )  == checkUserDeclarations, "The name " + name + " is not consistently annotated as " + "constant." ) ;^225^226^227^^^222^228^Preconditions.checkState ( value.booleanValue (  )  == isConst, "The name " + name + " is not consistently annotated as " + "constant." ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[BugLab_Argument_Swapping]^Preconditions.checkState ( name.booleanValue (  )  == isConst, "The value " + name + " is not consistently annotated as " + "constant." ) ;^225^226^227^^^222^228^Preconditions.checkState ( value.booleanValue (  )  == isConst, "The name " + name + " is not consistently annotated as " + "constant." ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[BugLab_Argument_Swapping]^Preconditions.checkState ( isConst.booleanValue (  )  == value, "The name " + name + " is not consistently annotated as " + "constant." ) ;^225^226^227^^^222^228^Preconditions.checkState ( value.booleanValue (  )  == isConst, "The name " + name + " is not consistently annotated as " + "constant." ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[BugLab_Argument_Swapping]^Preconditions.checkState ( value.booleanValue (  )  == name, "The isConst " + name + " is not consistently annotated as " + "constant." ) ;^225^226^227^^^222^228^Preconditions.checkState ( value.booleanValue (  )  == isConst, "The name " + name + " is not consistently annotated as " + "constant." ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[BugLab_Wrong_Operator]^Preconditions.checkState ( value.booleanValue (  )  <= isConst, "The name " + name + " is not consistently annotated as " + "constant." ) ;^225^226^227^^^222^228^Preconditions.checkState ( value.booleanValue (  )  == isConst, "The name " + name + " is not consistently annotated as " + "constant." ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[BugLab_Wrong_Operator]^Preconditions.checkState ( value.booleanValue (  <  )  == isConst, "The name " + name + " is not consistently annotated as " + "constant." ) ;^225^226^227^^^222^228^Preconditions.checkState ( value.booleanValue (  )  == isConst, "The name " + name + " is not consistently annotated as " + "constant." ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[BugLab_Wrong_Operator]^Preconditions.checkState ( value.booleanValue (  )  == isConst, "The name "  &  name  &  " is not consistently annotated as " + "constant." ) ;^225^226^227^^^222^228^Preconditions.checkState ( value.booleanValue (  )  == isConst, "The name " + name + " is not consistently annotated as " + "constant." ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[BugLab_Wrong_Operator]^Preconditions.checkState ( value.booleanValue (  )  == isConst, "The name "  >=  name + " is not consistently annotated as " + "constant." ) ;^225^226^227^^^222^228^Preconditions.checkState ( value.booleanValue (  )  == isConst, "The name " + name + " is not consistently annotated as " + "constant." ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[BugLab_Variable_Misuse]^constantMap.put ( name, forbidChanges ) ;^223^^^^^208^238^constantMap.put ( name, isConst ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[BugLab_Variable_Misuse]^String parentame = n.getString (  ) ;^185^^^^^170^200^String name = n.getString (  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[BugLab_Variable_Misuse]^boolean isConst = parent.getBooleanProp ( Node.IS_CONSTANT_NAME ) ;^190^^^^^175^205^boolean isConst = n.getBooleanProp ( Node.IS_CONSTANT_NAME ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[BugLab_Argument_Swapping]^Boolean value = name.get ( constantMap ) ;^221^^^^^206^236^Boolean value = constantMap.get ( name ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[BugLab_Variable_Misuse]^Preconditions.checkState ( forbidChanges == isConst, "The name " + name + " is not annotated as constant." ) ;^213^214^^^^198^228^Preconditions.checkState ( expectedConst == isConst, "The name " + name + " is not annotated as constant." ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[BugLab_Argument_Swapping]^Preconditions.checkState ( name == isConst, "The expectedConst " + name + " should not be annotated as constant." ) ;^216^217^^^^201^231^Preconditions.checkState ( expectedConst == isConst, "The name " + name + " should not be annotated as constant." ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[BugLab_Wrong_Operator]^Preconditions.checkState ( expectedConst >= isConst, "The name " + name + " should not be annotated as constant." ) ;^216^217^^^^201^231^Preconditions.checkState ( expectedConst == isConst, "The name " + name + " should not be annotated as constant." ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[BugLab_Wrong_Operator]^Preconditions.checkState ( expectedConst == isConst, "The name "  <=  name  <=  " should not be annotated as constant." ) ;^216^217^^^^201^231^Preconditions.checkState ( expectedConst == isConst, "The name " + name + " should not be annotated as constant." ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[BugLab_Wrong_Operator]^Preconditions.checkState ( expectedConst == isConst, "The name "  ^  name + " should not be annotated as constant." ) ;^216^217^^^^201^231^Preconditions.checkState ( expectedConst == isConst, "The name " + name + " should not be annotated as constant." ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[BugLab_Variable_Misuse]^constantMap.put ( name, checkUserDeclarations ) ;^223^^^^^208^238^constantMap.put ( name, isConst ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[BugLab_Argument_Swapping]^constantMap.put ( isConst, name ) ;^223^^^^^208^238^constantMap.put ( name, isConst ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[BugLab_Argument_Swapping]^Preconditions.checkState ( isConst.booleanValue (  )  == value, "The name " + name + " is not consistently annotated as " + "constant." ) ;^225^226^227^^^210^240^Preconditions.checkState ( value.booleanValue (  )  == isConst, "The name " + name + " is not consistently annotated as " + "constant." ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[BugLab_Argument_Swapping]^Preconditions.checkState ( value.booleanValue (  )  == name, "The isConst " + name + " is not consistently annotated as " + "constant." ) ;^225^226^227^^^210^240^Preconditions.checkState ( value.booleanValue (  )  == isConst, "The name " + name + " is not consistently annotated as " + "constant." ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[BugLab_Wrong_Operator]^Preconditions.checkState ( value.booleanValue (  )  < isConst, "The name " + name + " is not consistently annotated as " + "constant." ) ;^225^226^227^^^210^240^Preconditions.checkState ( value.booleanValue (  )  == isConst, "The name " + name + " is not consistently annotated as " + "constant." ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[BugLab_Wrong_Operator]^Preconditions.checkState ( value.booleanValue (  ^  )  == isConst, "The name " + name + " is not consistently annotated as " + "constant." ) ;^225^226^227^^^210^240^Preconditions.checkState ( value.booleanValue (  )  == isConst, "The name " + name + " is not consistently annotated as " + "constant." ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[BugLab_Wrong_Operator]^Preconditions.checkState ( value.booleanValue (  )  == isConst, "The name "  >  name  >  " is not consistently annotated as " + "constant." ) ;^225^226^227^^^210^240^Preconditions.checkState ( value.booleanValue (  )  == isConst, "The name " + name + " is not consistently annotated as " + "constant." ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[BugLab_Wrong_Operator]^Preconditions.checkState ( value.booleanValue (  )  == isConst, "The name "  !=  name + " is not consistently annotated as " + "constant." ) ;^225^226^227^^^210^240^Preconditions.checkState ( value.booleanValue (  )  == isConst, "The name " + name + " is not consistently annotated as " + "constant." ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[BugLab_Variable_Misuse]^if  ( forbidChanges )  {^191^^^^^176^206^if  ( checkUserDeclarations )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[BugLab_Wrong_Operator]^Preconditions.checkState ( expectedConst == isConst, "The name "  ^  name  ^  " should not be annotated as constant." ) ;^216^217^^^^212^218^Preconditions.checkState ( expectedConst == isConst, "The name " + name + " should not be annotated as constant." ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[BugLab_Wrong_Operator]^Preconditions.checkState ( expectedConst == isConst, "The name "  <  name + " should not be annotated as constant." ) ;^216^217^^^^212^218^Preconditions.checkState ( expectedConst == isConst, "The name " + name + " should not be annotated as constant." ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[BugLab_Wrong_Operator]^Preconditions.checkState ( expectedConst > isConst, "The name " + name + " is not annotated as constant." ) ;^213^214^^^^198^228^Preconditions.checkState ( expectedConst == isConst, "The name " + name + " is not annotated as constant." ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[BugLab_Wrong_Operator]^Preconditions.checkState ( expectedConst == isConst, "The name "  &&  name  &&  " is not annotated as constant." ) ;^213^214^^^^198^228^Preconditions.checkState ( expectedConst == isConst, "The name " + name + " is not annotated as constant." ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[BugLab_Variable_Misuse]^Preconditions.checkState ( isConst == isConst, "The name " + name + " is not annotated as constant." ) ;^213^214^^^^198^228^Preconditions.checkState ( expectedConst == isConst, "The name " + name + " is not annotated as constant." ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[BugLab_Wrong_Operator]^Preconditions.checkState ( expectedConst <= isConst, "The name " + name + " is not annotated as constant." ) ;^213^214^^^^198^228^Preconditions.checkState ( expectedConst == isConst, "The name " + name + " is not annotated as constant." ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[BugLab_Wrong_Operator]^Preconditions.checkState ( expectedConst == isConst, "The name "  &  name + " is not annotated as constant." ) ;^213^214^^^^198^228^Preconditions.checkState ( expectedConst == isConst, "The name " + name + " is not annotated as constant." ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[BugLab_Variable_Misuse]^Preconditions.checkState ( checkUserDeclarations == isConst, "The name " + name + " should not be annotated as constant." ) ;^216^217^^^^201^231^Preconditions.checkState ( expectedConst == isConst, "The name " + name + " should not be annotated as constant." ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[BugLab_Variable_Misuse]^Preconditions.checkState ( expectedConst == checkUserDeclarations, "The name " + name + " should not be annotated as constant." ) ;^216^217^^^^201^231^Preconditions.checkState ( expectedConst == isConst, "The name " + name + " should not be annotated as constant." ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[BugLab_Wrong_Operator]^Preconditions.checkState ( expectedConst != isConst, "The name " + name + " should not be annotated as constant." ) ;^216^217^^^^201^231^Preconditions.checkState ( expectedConst == isConst, "The name " + name + " should not be annotated as constant." ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[BugLab_Wrong_Operator]^Preconditions.checkState ( expectedConst == isConst, "The name "  >  name  >  " should not be annotated as constant." ) ;^216^217^^^^201^231^Preconditions.checkState ( expectedConst == isConst, "The name " + name + " should not be annotated as constant." ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[BugLab_Wrong_Operator]^Preconditions.checkState ( expectedConst == isConst, "The name "  !=  name + " should not be annotated as constant." ) ;^216^217^^^^201^231^Preconditions.checkState ( expectedConst == isConst, "The name " + name + " should not be annotated as constant." ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[BugLab_Argument_Swapping]^if  ( NodeUtil.isConstantName ( compiler ) || n.getCodingConvention (  ) .isConstant ( n.getString (  )  )  )  {^193^194^^^^178^208^if  ( NodeUtil.isConstantName ( n ) || compiler.getCodingConvention (  ) .isConstant ( n.getString (  )  )  )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[BugLab_Wrong_Operator]^Preconditions.checkState ( expectedConst < isConst, "The name " + name + " should not be annotated as constant." ) ;^216^217^^^^212^218^Preconditions.checkState ( expectedConst == isConst, "The name " + name + " should not be annotated as constant." ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[BugLab_Wrong_Operator]^Preconditions.checkState ( expectedConst == isConst, "The name "  &&  name  &&  " should not be annotated as constant." ) ;^216^217^^^^212^218^Preconditions.checkState ( expectedConst == isConst, "The name " + name + " should not be annotated as constant." ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[BugLab_Wrong_Operator]^Preconditions.checkState ( expectedConst == isConst, "The name "  ^  name + " should not be annotated as constant." ) ;^216^217^^^^212^218^Preconditions.checkState ( expectedConst == isConst, "The name " + name + " should not be annotated as constant." ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[BugLab_Wrong_Operator]^Preconditions.checkState ( expectedConst == isConst, "The name "  !=  name  !=  " is not annotated as constant." ) ;^213^214^^^^198^228^Preconditions.checkState ( expectedConst == isConst, "The name " + name + " is not annotated as constant." ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[BugLab_Variable_Misuse]^Preconditions.checkState ( value.booleanValue (  )  == expectedConst, "The name " + name + " is not consistently annotated as " + "constant." ) ;^225^226^227^^^222^228^Preconditions.checkState ( value.booleanValue (  )  == isConst, "The name " + name + " is not consistently annotated as " + "constant." ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[BugLab_Wrong_Operator]^Preconditions.checkState ( value.booleanValue (   instanceof   )  == isConst, "The name " + name + " is not consistently annotated as " + "constant." ) ;^225^226^227^^^222^228^Preconditions.checkState ( value.booleanValue (  )  == isConst, "The name " + name + " is not consistently annotated as " + "constant." ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[BugLab_Wrong_Operator]^Preconditions.checkState ( value.booleanValue (  )  == isConst, "The name "  >>  name  >>  " is not consistently annotated as " + "constant." ) ;^225^226^227^^^222^228^Preconditions.checkState ( value.booleanValue (  )  == isConst, "The name " + name + " is not consistently annotated as " + "constant." ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[BugLab_Wrong_Operator]^Preconditions.checkState ( value.booleanValue (  )  == isConst, "The name "   instanceof   name + " is not consistently annotated as " + "constant." ) ;^225^226^227^^^222^228^Preconditions.checkState ( value.booleanValue (  )  == isConst, "The name " + name + " is not consistently annotated as " + "constant." ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[BugLab_Variable_Misuse]^constantMap.put ( name, expectedConst ) ;^223^^^^^208^238^constantMap.put ( name, isConst ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[BugLab_Argument_Swapping]^Preconditions.checkState ( name == isConst, "The expectedConst " + name + " is not annotated as constant." ) ;^213^214^^^^198^228^Preconditions.checkState ( expectedConst == isConst, "The name " + name + " is not annotated as constant." ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[BugLab_Wrong_Operator]^Preconditions.checkState ( expectedConst == isConst, "The name "  <  name + " is not annotated as constant." ) ;^213^214^^^^198^228^Preconditions.checkState ( expectedConst == isConst, "The name " + name + " is not annotated as constant." ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[BugLab_Wrong_Operator]^Preconditions.checkState ( expectedConst == isConst, "The name "  &&  name + " should not be annotated as constant." ) ;^216^217^^^^201^231^Preconditions.checkState ( expectedConst == isConst, "The name " + name + " should not be annotated as constant." ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[BugLab_Variable_Misuse]^Preconditions.checkState ( value.booleanValue (  )  == forbidChanges, "The name " + name + " is not consistently annotated as " + "constant." ) ;^225^226^227^^^210^240^Preconditions.checkState ( value.booleanValue (  )  == isConst, "The name " + name + " is not consistently annotated as " + "constant." ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[BugLab_Argument_Swapping]^Preconditions.checkState ( name.booleanValue (  )  == isConst, "The value " + name + " is not consistently annotated as " + "constant." ) ;^225^226^227^^^210^240^Preconditions.checkState ( value.booleanValue (  )  == isConst, "The name " + name + " is not consistently annotated as " + "constant." ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[BugLab_Wrong_Operator]^Preconditions.checkState ( value.booleanValue (  )  != isConst, "The name " + name + " is not consistently annotated as " + "constant." ) ;^225^226^227^^^210^240^Preconditions.checkState ( value.booleanValue (  )  == isConst, "The name " + name + " is not consistently annotated as " + "constant." ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[BugLab_Wrong_Operator]^Preconditions.checkState ( value.booleanValue (  )  == isConst, "The name "  &  name  &  " is not consistently annotated as " + "constant." ) ;^225^226^227^^^210^240^Preconditions.checkState ( value.booleanValue (  )  == isConst, "The name " + name + " is not consistently annotated as " + "constant." ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[BugLab_Wrong_Operator]^Preconditions.checkState ( value.booleanValue (  )  == isConst, "The name "  ||  name + " is not consistently annotated as " + "constant." ) ;^225^226^227^^^210^240^Preconditions.checkState ( value.booleanValue (  )  == isConst, "The name " + name + " is not consistently annotated as " + "constant." ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[BugLab_Variable_Misuse]^if  ( isConst )  {^237^^^^^234^246^if  ( CONVERT_WHILE_TO_FOR )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  
[BugLab_Variable_Misuse]^Node expr = parent.getFirstChild (  ) ;^238^^^^^234^246^Node expr = n.getFirstChild (  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  
[BugLab_Variable_Misuse]^n.addChildBefore ( new Node ( Token.EMPTY ) , parent ) ;^240^^^^^234^246^n.addChildBefore ( new Node ( Token.EMPTY ) , expr ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  
[BugLab_Argument_Swapping]^n.addChildBefore ( exprew Node ( Token.EMPTY ) , n ) ;^240^^^^^234^246^n.addChildBefore ( new Node ( Token.EMPTY ) , expr ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  
[BugLab_Variable_Misuse]^n.addChildAfter ( parentew Node ( Token.EMPTY ) , expr ) ;^241^^^^^234^246^n.addChildAfter ( new Node ( Token.EMPTY ) , expr ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  
[BugLab_Variable_Misuse]^n.addChildAfter ( new Node ( Token.EMPTY ) , parent ) ;^241^^^^^234^246^n.addChildAfter ( new Node ( Token.EMPTY ) , expr ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  
[BugLab_Argument_Swapping]^n.addChildAfter ( exprew Node ( Token.EMPTY ) , n ) ;^241^^^^^234^246^n.addChildAfter ( new Node ( Token.EMPTY ) , expr ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  
[BugLab_Variable_Misuse]^switch  ( parent.getType (  )  )  {^235^^^^^234^246^switch  ( n.getType (  )  )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  
[BugLab_Variable_Misuse]^n.addChildBefore ( parentew Node ( Token.EMPTY ) , expr ) ;^240^^^^^234^246^n.addChildBefore ( new Node ( Token.EMPTY ) , expr ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  
[BugLab_Variable_Misuse]^if  ( parent.getType (  )  == Token.LABEL )  {^252^^^^^251^271^if  ( n.getType (  )  == Token.LABEL )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] doStatementNormalizations [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  
[BugLab_Variable_Misuse]^if  ( n.getType (  )  == Token.4 )  {^252^^^^^251^271^if  ( n.getType (  )  == Token.LABEL )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] doStatementNormalizations [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  
[BugLab_Wrong_Operator]^if  ( n.getType (  )  != Token.LABEL )  {^252^^^^^251^271^if  ( n.getType (  )  == Token.LABEL )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] doStatementNormalizations [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  
[BugLab_Variable_Misuse]^normalizeLabels ( parent ) ;^253^^^^^251^271^normalizeLabels ( n ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] doStatementNormalizations [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  
[BugLab_Variable_Misuse]^if  ( NodeUtil.isStatementBlock ( parent )  || n.getType (  )  == Token.LABEL )  {^258^^^^^251^271^if  ( NodeUtil.isStatementBlock ( n )  || n.getType (  )  == Token.LABEL )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] doStatementNormalizations [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  
[BugLab_Wrong_Operator]^if  ( NodeUtil.isStatementBlock ( n )  && n.getType (  )  == Token.LABEL )  {^258^^^^^251^271^if  ( NodeUtil.isStatementBlock ( n )  || n.getType (  )  == Token.LABEL )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] doStatementNormalizations [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  
[BugLab_Wrong_Operator]^if  ( NodeUtil.isStatementBlock ( n )  || n.getType (  )  >= Token.LABEL )  {^258^^^^^251^271^if  ( NodeUtil.isStatementBlock ( n )  || n.getType (  )  == Token.LABEL )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] doStatementNormalizations [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  
[BugLab_Variable_Misuse]^extractForInitializer ( parent, null, null ) ;^259^^^^^251^271^extractForInitializer ( n, null, null ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] doStatementNormalizations [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  
[BugLab_Variable_Misuse]^if  ( NodeUtil.isStatementBlock ( parent )  )  {^264^^^^^251^271^if  ( NodeUtil.isStatementBlock ( n )  )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] doStatementNormalizations [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  
[BugLab_Variable_Misuse]^splitVarDeclarations ( parent ) ;^265^^^^^251^271^splitVarDeclarations ( n ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] doStatementNormalizations [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  
[BugLab_Variable_Misuse]^if  ( parent.getType (  )  == Token.FUNCTION )  {^268^^^^^251^271^if  ( n.getType (  )  == Token.FUNCTION )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] doStatementNormalizations [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  
[BugLab_Wrong_Operator]^if  ( n.getType (  )  != Token.FUNCTION )  {^268^^^^^251^271^if  ( n.getType (  )  == Token.FUNCTION )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] doStatementNormalizations [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  
[BugLab_Variable_Misuse]^moveNamedFunctions ( parent.getLastChild (  )  ) ;^269^^^^^251^271^moveNamedFunctions ( n.getLastChild (  )  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] doStatementNormalizations [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  
[BugLab_Variable_Misuse]^Preconditions.checkArgument ( last.getType (  )  == Token.LABEL ) ;^281^^^^^280^298^Preconditions.checkArgument ( n.getType (  )  == Token.LABEL ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] normalizeLabels [RETURN_TYPE] void   Node n [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  block  last  n  
[BugLab_Variable_Misuse]^Preconditions.checkArgument ( n.getType (  )  == Token.0 ) ;^281^^^^^280^298^Preconditions.checkArgument ( n.getType (  )  == Token.LABEL ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] normalizeLabels [RETURN_TYPE] void   Node n [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  block  last  n  
[BugLab_Wrong_Operator]^Preconditions.checkArgument ( n.getType (  )  >= Token.LABEL ) ;^281^^^^^280^298^Preconditions.checkArgument ( n.getType (  )  == Token.LABEL ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] normalizeLabels [RETURN_TYPE] void   Node n [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  block  last  n  
[BugLab_Variable_Misuse]^Node last = block.getLastChild (  ) ;^283^^^^^280^298^Node last = n.getLastChild (  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] normalizeLabels [RETURN_TYPE] void   Node n [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  block  last  n  
[BugLab_Variable_Misuse]^Node last = last.getLastChild (  ) ;^283^^^^^280^298^Node last = n.getLastChild (  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] normalizeLabels [RETURN_TYPE] void   Node n [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  block  last  n  
[BugLab_Variable_Misuse]^n.replaceChild ( n, block ) ;^293^^^^^280^298^n.replaceChild ( last, block ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] normalizeLabels [RETURN_TYPE] void   Node n [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  block  last  n  
[BugLab_Argument_Swapping]^n.replaceChild ( block, last ) ;^293^^^^^280^298^n.replaceChild ( last, block ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] normalizeLabels [RETURN_TYPE] void   Node n [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  block  last  n  
[BugLab_Variable_Misuse]^block.addChildToFront ( n ) ;^294^^^^^280^298^block.addChildToFront ( last ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] normalizeLabels [RETURN_TYPE] void   Node n [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  block  last  n  
[BugLab_Variable_Misuse]^if  ( !NodeUtil.isForIn ( newStatement ) && c.getFirstChild (  ) .getType (  )  != Token.EMPTY )  {^323^324^^^^308^338^if  ( !NodeUtil.isForIn ( c ) && c.getFirstChild (  ) .getType (  )  != Token.EMPTY )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] extractForInitializer [RETURN_TYPE] void   Node n Node before Node beforeParent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  
[BugLab_Wrong_Operator]^if  ( !NodeUtil.isForIn ( c ) || c.getFirstChild (  ) .getType (  )  != Token.EMPTY )  {^323^324^^^^308^338^if  ( !NodeUtil.isForIn ( c ) && c.getFirstChild (  ) .getType (  )  != Token.EMPTY )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] extractForInitializer [RETURN_TYPE] void   Node n Node before Node beforeParent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  
[BugLab_Wrong_Operator]^if  ( !NodeUtil.isForIn ( c ) && c.getFirstChild (  ) .getType (  )  == Token.EMPTY )  {^323^324^^^^308^338^if  ( !NodeUtil.isForIn ( c ) && c.getFirstChild (  ) .getType (  )  != Token.EMPTY )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] extractForInitializer [RETURN_TYPE] void   Node n Node before Node beforeParent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  
[BugLab_Variable_Misuse]^if  ( insertBeforeParent.getType (  )  == Token.VAR )  {^331^^^^^323^339^if  ( init.getType (  )  == Token.VAR )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] extractForInitializer [RETURN_TYPE] void   Node n Node before Node beforeParent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  
[BugLab_Variable_Misuse]^if  ( init.getType (  )  == Token.null )  {^331^^^^^323^339^if  ( init.getType (  )  == Token.VAR )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] extractForInitializer [RETURN_TYPE] void   Node n Node before Node beforeParent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  
[BugLab_Wrong_Operator]^if  ( init.getType (  )  <= Token.VAR )  {^331^^^^^323^339^if  ( init.getType (  )  == Token.VAR )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] extractForInitializer [RETURN_TYPE] void   Node n Node before Node beforeParent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  
[BugLab_Variable_Misuse]^newStatement = NodeUtil.newExpr ( n ) ;^334^^^^^323^339^newStatement = NodeUtil.newExpr ( init ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] extractForInitializer [RETURN_TYPE] void   Node n Node before Node beforeParent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  
[BugLab_Variable_Misuse]^newStatement = n;^332^^^^^323^339^newStatement = init;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] extractForInitializer [RETURN_TYPE] void   Node n Node before Node beforeParent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  
[BugLab_Variable_Misuse]^newStatement = insertBeforeParent;^332^^^^^323^339^newStatement = init;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] extractForInitializer [RETURN_TYPE] void   Node n Node before Node beforeParent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  
[BugLab_Variable_Misuse]^newStatement = NodeUtil.newExpr ( next ) ;^334^^^^^323^339^newStatement = NodeUtil.newExpr ( init ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] extractForInitializer [RETURN_TYPE] void   Node n Node before Node beforeParent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  
[BugLab_Variable_Misuse]^Node init = n.getFirstChild (  ) ;^325^^^^^323^339^Node init = c.getFirstChild (  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] extractForInitializer [RETURN_TYPE] void   Node n Node before Node beforeParent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  
[BugLab_Variable_Misuse]^c.replaceChild ( next, new Node ( Token.EMPTY )  ) ;^326^^^^^323^339^c.replaceChild ( init, new Node ( Token.EMPTY )  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] extractForInitializer [RETURN_TYPE] void   Node n Node before Node beforeParent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  
[BugLab_Variable_Misuse]^c.replaceChild ( init, new Node ( Token.this )  ) ;^326^^^^^323^339^c.replaceChild ( init, new Node ( Token.EMPTY )  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] extractForInitializer [RETURN_TYPE] void   Node n Node before Node beforeParent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  
[BugLab_Variable_Misuse]^if  ( newStatement.getType (  )  == Token.VAR )  {^331^^^^^323^339^if  ( init.getType (  )  == Token.VAR )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] extractForInitializer [RETURN_TYPE] void   Node n Node before Node beforeParent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  
[BugLab_Variable_Misuse]^insertBeforeParent.addChildBefore ( n, insertBefore ) ;^337^^^^^323^339^insertBeforeParent.addChildBefore ( newStatement, insertBefore ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] extractForInitializer [RETURN_TYPE] void   Node n Node before Node beforeParent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  
[BugLab_Variable_Misuse]^insertBeforeParent.addChildBefore ( newStatement, n ) ;^337^^^^^323^339^insertBeforeParent.addChildBefore ( newStatement, insertBefore ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] extractForInitializer [RETURN_TYPE] void   Node n Node before Node beforeParent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  
[BugLab_Variable_Misuse]^if  ( newStatement.getType (  )  == Token.VAR )  {^331^^^^^316^346^if  ( init.getType (  )  == Token.VAR )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] extractForInitializer [RETURN_TYPE] void   Node n Node before Node beforeParent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  
[BugLab_Wrong_Operator]^if  ( init.getType (  )  <= Token.VAR )  {^331^^^^^316^346^if  ( init.getType (  )  == Token.VAR )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] extractForInitializer [RETURN_TYPE] void   Node n Node before Node beforeParent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  
[BugLab_Variable_Misuse]^newStatement = NodeUtil.newExpr ( n ) ;^334^^^^^331^335^newStatement = NodeUtil.newExpr ( init ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] extractForInitializer [RETURN_TYPE] void   Node n Node before Node beforeParent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  
[BugLab_Variable_Misuse]^newStatement = NodeUtil.newExpr ( insertBeforeParent ) ;^334^^^^^331^335^newStatement = NodeUtil.newExpr ( init ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] extractForInitializer [RETURN_TYPE] void   Node n Node before Node beforeParent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  
[BugLab_Variable_Misuse]^newStatement = insertBeforeParent;^332^^^^^317^347^newStatement = init;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] extractForInitializer [RETURN_TYPE] void   Node n Node before Node beforeParent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  
[BugLab_Variable_Misuse]^for  ( Node newStatementext, c = n.getFirstChild (  ) ; c != null; c = next )  {^314^^^^^299^329^for  ( Node next, c = n.getFirstChild (  ) ; c != null; c = next )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] extractForInitializer [RETURN_TYPE] void   Node n Node before Node beforeParent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  
[BugLab_Variable_Misuse]^for  ( Node next, insertBeforeParent = n.getFirstChild (  ) ; c != null; c = next )  {^314^^^^^299^329^for  ( Node next, c = n.getFirstChild (  ) ; c != null; c = next )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] extractForInitializer [RETURN_TYPE] void   Node n Node before Node beforeParent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  
[BugLab_Variable_Misuse]^for  ( Node insertBefore, c = n.getFirstChild (  ) ; c != null; c = next )  {^314^^^^^299^329^for  ( Node next, c = n.getFirstChild (  ) ; c != null; c = next )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] extractForInitializer [RETURN_TYPE] void   Node n Node before Node beforeParent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  
[BugLab_Argument_Swapping]^for  ( Node c, next = n.getFirstChild (  ) ; c != null; c = next )  {^314^^^^^299^329^for  ( Node next, c = n.getFirstChild (  ) ; c != null; c = next )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] extractForInitializer [RETURN_TYPE] void   Node n Node before Node beforeParent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  
[BugLab_Wrong_Operator]^for  ( Node next, c = n.getFirstChild (  ) ; c == null; c = next )  {^314^^^^^299^329^for  ( Node next, c = n.getFirstChild (  ) ; c != null; c = next )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] extractForInitializer [RETURN_TYPE] void   Node n Node before Node beforeParent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  
[BugLab_Variable_Misuse]^if  ( !NodeUtil.isForIn ( n ) && c.getFirstChild (  ) .getType (  )  != Token.EMPTY )  {^323^324^^^^308^338^if  ( !NodeUtil.isForIn ( c ) && c.getFirstChild (  ) .getType (  )  != Token.EMPTY )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] extractForInitializer [RETURN_TYPE] void   Node n Node before Node beforeParent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  
[BugLab_Wrong_Operator]^if  ( !NodeUtil.isForIn ( c ) && c.getFirstChild (  ) .getType (  )  >= Token.EMPTY )  {^323^324^^^^308^338^if  ( !NodeUtil.isForIn ( c ) && c.getFirstChild (  ) .getType (  )  != Token.EMPTY )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] extractForInitializer [RETURN_TYPE] void   Node n Node before Node beforeParent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  
[BugLab_Variable_Misuse]^if  ( next.getType (  )  == Token.VAR )  {^331^^^^^323^339^if  ( init.getType (  )  == Token.VAR )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] extractForInitializer [RETURN_TYPE] void   Node n Node before Node beforeParent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  
[BugLab_Wrong_Operator]^if  ( init.getType (  )  > Token.VAR )  {^331^^^^^323^339^if  ( init.getType (  )  == Token.VAR )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] extractForInitializer [RETURN_TYPE] void   Node n Node before Node beforeParent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  
[BugLab_Variable_Misuse]^newStatement = NodeUtil.newExpr ( newStatement ) ;^334^^^^^323^339^newStatement = NodeUtil.newExpr ( init ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] extractForInitializer [RETURN_TYPE] void   Node n Node before Node beforeParent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  
[BugLab_Variable_Misuse]^newStatement = next;^332^^^^^323^339^newStatement = init;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] extractForInitializer [RETURN_TYPE] void   Node n Node before Node beforeParent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  
[BugLab_Variable_Misuse]^newStatement = NodeUtil.newExpr ( insertBeforeParent ) ;^334^^^^^323^339^newStatement = NodeUtil.newExpr ( init ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] extractForInitializer [RETURN_TYPE] void   Node n Node before Node beforeParent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  
[BugLab_Variable_Misuse]^Node init = next.getFirstChild (  ) ;^325^^^^^323^339^Node init = c.getFirstChild (  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] extractForInitializer [RETURN_TYPE] void   Node n Node before Node beforeParent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  
[BugLab_Variable_Misuse]^Node init = insertBeforeParent.getFirstChild (  ) ;^325^^^^^323^339^Node init = c.getFirstChild (  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] extractForInitializer [RETURN_TYPE] void   Node n Node before Node beforeParent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  
[BugLab_Variable_Misuse]^insertBeforeParent.addChildBefore ( next, insertBefore ) ;^337^^^^^323^339^insertBeforeParent.addChildBefore ( newStatement, insertBefore ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] extractForInitializer [RETURN_TYPE] void   Node n Node before Node beforeParent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  
[BugLab_Variable_Misuse]^insertBeforeParent.addChildBefore ( newStatement, next ) ;^337^^^^^323^339^insertBeforeParent.addChildBefore ( newStatement, insertBefore ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] extractForInitializer [RETURN_TYPE] void   Node n Node before Node beforeParent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  
[BugLab_Argument_Swapping]^insertBeforeParent.addChildBefore ( insertBefore, newStatement ) ;^337^^^^^323^339^insertBeforeParent.addChildBefore ( newStatement, insertBefore ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] extractForInitializer [RETURN_TYPE] void   Node n Node before Node beforeParent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  
[BugLab_Variable_Misuse]^if  ( n.getType (  )  == Token.VAR )  {^331^^^^^316^346^if  ( init.getType (  )  == Token.VAR )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] extractForInitializer [RETURN_TYPE] void   Node n Node before Node beforeParent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  
[BugLab_Wrong_Operator]^if  ( init.getType (  )  > Token.VAR )  {^331^^^^^316^346^if  ( init.getType (  )  == Token.VAR )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] extractForInitializer [RETURN_TYPE] void   Node n Node before Node beforeParent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  
[BugLab_Variable_Misuse]^newStatement = NodeUtil.newExpr ( newStatement ) ;^334^^^^^331^335^newStatement = NodeUtil.newExpr ( init ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] extractForInitializer [RETURN_TYPE] void   Node n Node before Node beforeParent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  
[BugLab_Variable_Misuse]^newStatement = next;^332^^^^^317^347^newStatement = init;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] extractForInitializer [RETURN_TYPE] void   Node n Node before Node beforeParent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  
[BugLab_Variable_Misuse]^next = newStatement.getNext (  ) ;^315^^^^^300^330^next = c.getNext (  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] extractForInitializer [RETURN_TYPE] void   Node n Node before Node beforeParent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  
[BugLab_Variable_Misuse]^newStatement = n;^332^^^^^317^347^newStatement = init;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] extractForInitializer [RETURN_TYPE] void   Node n Node before Node beforeParent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  
[BugLab_Variable_Misuse]^newStatement = NodeUtil.newExpr ( next ) ;^334^^^^^319^349^newStatement = NodeUtil.newExpr ( init ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] extractForInitializer [RETURN_TYPE] void   Node n Node before Node beforeParent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  
[BugLab_Variable_Misuse]^Node insertBefore =  ( before == null )  ? next : before;^316^^^^^301^331^Node insertBefore =  ( before == null )  ? c : before;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] extractForInitializer [RETURN_TYPE] void   Node n Node before Node beforeParent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  
[BugLab_Argument_Swapping]^Node insertBefore =  ( c == null )  ? before : before;^316^^^^^301^331^Node insertBefore =  ( before == null )  ? c : before;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] extractForInitializer [RETURN_TYPE] void   Node n Node before Node beforeParent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  
[BugLab_Wrong_Operator]^Node insertBefore =  ( before != null )  ? c : before;^316^^^^^301^331^Node insertBefore =  ( before == null )  ? c : before;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] extractForInitializer [RETURN_TYPE] void   Node n Node before Node beforeParent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  
[BugLab_Variable_Misuse]^Node insertBeforeParent =  ( newStatement == null )  ? n : beforeParent;^317^^^^^302^332^Node insertBeforeParent =  ( before == null )  ? n : beforeParent;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] extractForInitializer [RETURN_TYPE] void   Node n Node before Node beforeParent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  
[BugLab_Variable_Misuse]^Node insertBeforeParent =  ( before == nextull )  ? n : beforeParent;^317^^^^^302^332^Node insertBeforeParent =  ( before == null )  ? n : beforeParent;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] extractForInitializer [RETURN_TYPE] void   Node n Node before Node beforeParent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  
[BugLab_Variable_Misuse]^Node insertBeforeParent =  ( before == null )  ? n : next;^317^^^^^302^332^Node insertBeforeParent =  ( before == null )  ? n : beforeParent;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] extractForInitializer [RETURN_TYPE] void   Node n Node before Node beforeParent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  
[BugLab_Argument_Swapping]^Node insertBeforeParent =  ( beforeParent == null )  ? n : before;^317^^^^^302^332^Node insertBeforeParent =  ( before == null )  ? n : beforeParent;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] extractForInitializer [RETURN_TYPE] void   Node n Node before Node beforeParent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  
[BugLab_Argument_Swapping]^Node insertBeforeParent =  ( before == beforeParentull )  ? n : n;^317^^^^^302^332^Node insertBeforeParent =  ( before == null )  ? n : beforeParent;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] extractForInitializer [RETURN_TYPE] void   Node n Node before Node beforeParent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  
[BugLab_Wrong_Operator]^Node insertBeforeParent =  ( before != null )  ? n : beforeParent;^317^^^^^302^332^Node insertBeforeParent =  ( before == null )  ? n : beforeParent;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] extractForInitializer [RETURN_TYPE] void   Node n Node before Node beforeParent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  
[BugLab_Variable_Misuse]^Node init = next.getFirstChild (  ) ;^325^^^^^310^340^Node init = c.getFirstChild (  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] extractForInitializer [RETURN_TYPE] void   Node n Node before Node beforeParent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  
[BugLab_Variable_Misuse]^next = n.getNext (  ) ;^315^^^^^300^330^next = c.getNext (  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] extractForInitializer [RETURN_TYPE] void   Node n Node before Node beforeParent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  
[BugLab_Variable_Misuse]^switch  ( insertBeforeParent.getType (  )  )  {^318^^^^^303^333^switch  ( c.getType (  )  )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] extractForInitializer [RETURN_TYPE] void   Node n Node before Node beforeParent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  
[BugLab_Variable_Misuse]^extractForInitializer ( next, insertBefore, insertBeforeParent ) ;^320^^^^^305^335^extractForInitializer ( c, insertBefore, insertBeforeParent ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] extractForInitializer [RETURN_TYPE] void   Node n Node before Node beforeParent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  
[BugLab_Variable_Misuse]^extractForInitializer ( c, next, insertBeforeParent ) ;^320^^^^^305^335^extractForInitializer ( c, insertBefore, insertBeforeParent ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] extractForInitializer [RETURN_TYPE] void   Node n Node before Node beforeParent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  
[BugLab_Variable_Misuse]^extractForInitializer ( c, insertBefore, next ) ;^320^^^^^305^335^extractForInitializer ( c, insertBefore, insertBeforeParent ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] extractForInitializer [RETURN_TYPE] void   Node n Node before Node beforeParent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  
[BugLab_Argument_Swapping]^extractForInitializer ( insertBeforeParent, insertBefore, c ) ;^320^^^^^305^335^extractForInitializer ( c, insertBefore, insertBeforeParent ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] extractForInitializer [RETURN_TYPE] void   Node n Node before Node beforeParent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  
[BugLab_Argument_Swapping]^extractForInitializer ( c, insertBeforeParent, insertBefore ) ;^320^^^^^305^335^extractForInitializer ( c, insertBefore, insertBeforeParent ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] extractForInitializer [RETURN_TYPE] void   Node n Node before Node beforeParent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  
[BugLab_Variable_Misuse]^if  ( !NodeUtil.isForIn ( next ) && c.getFirstChild (  ) .getType (  )  != Token.EMPTY )  {^323^324^^^^308^338^if  ( !NodeUtil.isForIn ( c ) && c.getFirstChild (  ) .getType (  )  != Token.EMPTY )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] extractForInitializer [RETURN_TYPE] void   Node n Node before Node beforeParent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  
[BugLab_Variable_Misuse]^&& insertBeforeParent.getFirstChild (  ) .getType (  )  != Token.EMPTY )  {^324^^^^^309^339^&& c.getFirstChild (  ) .getType (  )  != Token.EMPTY )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] extractForInitializer [RETURN_TYPE] void   Node n Node before Node beforeParent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  
[BugLab_Variable_Misuse]^&& next.getFirstChild (  ) .getType (  )  != Token.EMPTY )  {^324^^^^^309^339^&& c.getFirstChild (  ) .getType (  )  != Token.EMPTY )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] extractForInitializer [RETURN_TYPE] void   Node n Node before Node beforeParent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  
[BugLab_Variable_Misuse]^c.replaceChild ( next, new Node ( Token.EMPTY )  ) ;^326^^^^^311^341^c.replaceChild ( init, new Node ( Token.EMPTY )  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] extractForInitializer [RETURN_TYPE] void   Node n Node before Node beforeParent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  
[BugLab_Variable_Misuse]^newStatement = NodeUtil.newExpr ( newStatement ) ;^334^^^^^319^349^newStatement = NodeUtil.newExpr ( init ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] extractForInitializer [RETURN_TYPE] void   Node n Node before Node beforeParent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  
[BugLab_Variable_Misuse]^insertBeforeParent.addChildBefore ( next, insertBefore ) ;^337^^^^^322^352^insertBeforeParent.addChildBefore ( newStatement, insertBefore ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] extractForInitializer [RETURN_TYPE] void   Node n Node before Node beforeParent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  
[BugLab_Variable_Misuse]^insertBeforeParent.addChildBefore ( newStatement, next ) ;^337^^^^^322^352^insertBeforeParent.addChildBefore ( newStatement, insertBefore ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] extractForInitializer [RETURN_TYPE] void   Node n Node before Node beforeParent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  
[BugLab_Argument_Swapping]^insertBeforeParent.addChildBefore ( insertBefore, newStatement ) ;^337^^^^^322^352^insertBeforeParent.addChildBefore ( newStatement, insertBefore ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] extractForInitializer [RETURN_TYPE] void   Node n Node before Node beforeParent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  
[BugLab_Variable_Misuse]^for  ( Node n, c = n.getFirstChild (  ) ; c != null; c = next )  {^314^^^^^299^329^for  ( Node next, c = n.getFirstChild (  ) ; c != null; c = next )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] extractForInitializer [RETURN_TYPE] void   Node n Node before Node beforeParent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  
[BugLab_Variable_Misuse]^next = insertBeforeParent.getNext (  ) ;^315^^^^^300^330^next = c.getNext (  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] extractForInitializer [RETURN_TYPE] void   Node n Node before Node beforeParent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  
[BugLab_Variable_Misuse]^newStatement = NodeUtil.newExpr ( insertBeforeParent ) ;^334^^^^^319^349^newStatement = NodeUtil.newExpr ( init ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] extractForInitializer [RETURN_TYPE] void   Node n Node before Node beforeParent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  
[BugLab_Variable_Misuse]^for  ( Node insertBeforeParentext, c = n.getFirstChild (  ) ; c != null; c = next )  {^314^^^^^299^329^for  ( Node next, c = n.getFirstChild (  ) ; c != null; c = next )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] extractForInitializer [RETURN_TYPE] void   Node n Node before Node beforeParent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  
[BugLab_Variable_Misuse]^Node insertBefore =  ( next == null )  ? c : before;^316^^^^^301^331^Node insertBefore =  ( before == null )  ? c : before;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] extractForInitializer [RETURN_TYPE] void   Node n Node before Node beforeParent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  
[BugLab_Variable_Misuse]^Node insertBeforeParent =  ( next == null )  ? n : beforeParent;^317^^^^^302^332^Node insertBeforeParent =  ( before == null )  ? n : beforeParent;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] extractForInitializer [RETURN_TYPE] void   Node n Node before Node beforeParent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  
[BugLab_Variable_Misuse]^Node insertBeforeParent =  ( before == null )  ? n : n;^317^^^^^302^332^Node insertBeforeParent =  ( before == null )  ? n : beforeParent;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] extractForInitializer [RETURN_TYPE] void   Node n Node before Node beforeParent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  
[BugLab_Argument_Swapping]^Node insertBeforeParent =  ( n == beforeull )  ? n : beforeParent;^317^^^^^302^332^Node insertBeforeParent =  ( before == null )  ? n : beforeParent;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] extractForInitializer [RETURN_TYPE] void   Node n Node before Node beforeParent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  
[BugLab_Variable_Misuse]^next = next.getNext (  ) ;^315^^^^^300^330^next = c.getNext (  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] extractForInitializer [RETURN_TYPE] void   Node n Node before Node beforeParent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  
[BugLab_Variable_Misuse]^switch  ( next.getType (  )  )  {^318^^^^^303^333^switch  ( c.getType (  )  )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] extractForInitializer [RETURN_TYPE] void   Node n Node before Node beforeParent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  
[BugLab_Variable_Misuse]^extractForInitializer ( n, insertBefore, insertBeforeParent ) ;^320^^^^^305^335^extractForInitializer ( c, insertBefore, insertBeforeParent ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] extractForInitializer [RETURN_TYPE] void   Node n Node before Node beforeParent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  
[BugLab_Argument_Swapping]^extractForInitializer ( insertBefore, c, insertBeforeParent ) ;^320^^^^^305^335^extractForInitializer ( c, insertBefore, insertBeforeParent ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] extractForInitializer [RETURN_TYPE] void   Node n Node before Node beforeParent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  
[BugLab_Variable_Misuse]^&& n.getFirstChild (  ) .getType (  )  != Token.EMPTY )  {^324^^^^^309^339^&& c.getFirstChild (  ) .getType (  )  != Token.EMPTY )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] extractForInitializer [RETURN_TYPE] void   Node n Node before Node beforeParent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  
[BugLab_Variable_Misuse]^Node init = n.getFirstChild (  ) ;^325^^^^^310^340^Node init = c.getFirstChild (  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] extractForInitializer [RETURN_TYPE] void   Node n Node before Node beforeParent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  
[BugLab_Variable_Misuse]^insertBeforeParent.addChildBefore ( newStatement, n ) ;^337^^^^^322^352^insertBeforeParent.addChildBefore ( newStatement, insertBefore ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] extractForInitializer [RETURN_TYPE] void   Node n Node before Node beforeParent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  
[BugLab_Variable_Misuse]^while  ( next.getFirstChild (  )  != c.getLastChild (  )  )  {^362^^^^^354^371^while  ( c.getFirstChild (  )  != c.getLastChild (  )  )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] splitVarDeclarations [RETURN_TYPE] void   Node n [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  
[BugLab_Wrong_Operator]^while  ( c.getFirstChild (  )  > c.getLastChild (  )  )  {^362^^^^^354^371^while  ( c.getFirstChild (  )  != c.getLastChild (  )  )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] splitVarDeclarations [RETURN_TYPE] void   Node n [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  
[BugLab_Variable_Misuse]^Node newVar = new Node ( Token.VAR, next, n.getLineno (  ) , n.getCharno (  )  ) ;^365^^^^^354^371^Node newVar = new Node ( Token.VAR, name, n.getLineno (  ) , n.getCharno (  )  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] splitVarDeclarations [RETURN_TYPE] void   Node n [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  
[BugLab_Variable_Misuse]^Node nextewVar = new Node ( Token.VAR, name, n.getLineno (  ) , n.getCharno (  )  ) ;^365^^^^^354^371^Node newVar = new Node ( Token.VAR, name, n.getLineno (  ) , n.getCharno (  )  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] splitVarDeclarations [RETURN_TYPE] void   Node n [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  
[BugLab_Argument_Swapping]^Node nameewVar = new Node ( Token.VAR, n, n.getLineno (  ) , n.getCharno (  )  ) ;^365^^^^^354^371^Node newVar = new Node ( Token.VAR, name, n.getLineno (  ) , n.getCharno (  )  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] splitVarDeclarations [RETURN_TYPE] void   Node n [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  
[BugLab_Variable_Misuse]^Node name = next.getFirstChild (  ) ;^363^^^^^354^371^Node name = c.getFirstChild (  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] splitVarDeclarations [RETURN_TYPE] void   Node n [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  
[BugLab_Variable_Misuse]^c.removeChild ( next ) ;^364^^^^^354^371^c.removeChild ( name ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] splitVarDeclarations [RETURN_TYPE] void   Node n [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  
[BugLab_Variable_Misuse]^Node newVarewVar = new Node ( Token.VAR, name, n.getLineno (  ) , n.getCharno (  )  ) ;^365^^^^^354^371^Node newVar = new Node ( Token.VAR, name, n.getLineno (  ) , n.getCharno (  )  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] splitVarDeclarations [RETURN_TYPE] void   Node n [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  
[BugLab_Variable_Misuse]^n.addChildBefore ( nextewVar, c ) ;^366^^^^^354^371^n.addChildBefore ( newVar, c ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] splitVarDeclarations [RETURN_TYPE] void   Node n [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  
[BugLab_Variable_Misuse]^n.addChildBefore ( next, c ) ;^366^^^^^354^371^n.addChildBefore ( newVar, c ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] splitVarDeclarations [RETURN_TYPE] void   Node n [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  
[BugLab_Variable_Misuse]^n.addChildBefore ( newVar, next ) ;^366^^^^^354^371^n.addChildBefore ( newVar, c ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] splitVarDeclarations [RETURN_TYPE] void   Node n [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  
[BugLab_Argument_Swapping]^n.addChildBefore ( newVarewVar, c ) ;^366^^^^^354^371^n.addChildBefore ( newVar, c ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] splitVarDeclarations [RETURN_TYPE] void   Node n [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  
[BugLab_Argument_Swapping]^n.addChildBefore ( c, newVar ) ;^366^^^^^354^371^n.addChildBefore ( newVar, c ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] splitVarDeclarations [RETURN_TYPE] void   Node n [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  
[BugLab_Argument_Swapping]^n.addChildBefore ( cewVar, n ) ;^366^^^^^354^371^n.addChildBefore ( newVar, c ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] splitVarDeclarations [RETURN_TYPE] void   Node n [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  
[BugLab_Variable_Misuse]^if  ( next.getType (  )  == Token.VAR )  {^357^^^^^354^371^if  ( c.getType (  )  == Token.VAR )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] splitVarDeclarations [RETURN_TYPE] void   Node n [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  
[BugLab_Wrong_Operator]^if  ( c.getType (  )  <= Token.VAR )  {^357^^^^^354^371^if  ( c.getType (  )  == Token.VAR )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] splitVarDeclarations [RETURN_TYPE] void   Node n [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  
[BugLab_Wrong_Operator]^while  ( c.getFirstChild (  )  == c.getLastChild (  )  )  {^362^^^^^354^371^while  ( c.getFirstChild (  )  != c.getLastChild (  )  )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] splitVarDeclarations [RETURN_TYPE] void   Node n [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  
[BugLab_Argument_Swapping]^n.addChildBefore ( n, c ) ;^366^^^^^354^371^n.addChildBefore ( newVar, c ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] splitVarDeclarations [RETURN_TYPE] void   Node n [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  
[BugLab_Variable_Misuse]^if  ( expectedConst && !c.hasChildren (  )  )  {^358^^^^^354^371^if  ( assertOnChange && !c.hasChildren (  )  )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] splitVarDeclarations [RETURN_TYPE] void   Node n [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  
[BugLab_Wrong_Operator]^if  ( assertOnChange || !c.hasChildren (  )  )  {^358^^^^^354^371^if  ( assertOnChange && !c.hasChildren (  )  )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] splitVarDeclarations [RETURN_TYPE] void   Node n [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  
[BugLab_Variable_Misuse]^if  ( forbidChanges && !c.hasChildren (  )  )  {^358^^^^^354^371^if  ( assertOnChange && !c.hasChildren (  )  )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] splitVarDeclarations [RETURN_TYPE] void   Node n [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  
[BugLab_Variable_Misuse]^for  ( Node newVarext, c = n.getFirstChild (  ) ; c != null; c = next )  {^355^^^^^354^371^for  ( Node next, c = n.getFirstChild (  ) ; c != null; c = next )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] splitVarDeclarations [RETURN_TYPE] void   Node n [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  
[BugLab_Variable_Misuse]^for  ( Node newVar, c = n.getFirstChild (  ) ; c != null; c = next )  {^355^^^^^354^371^for  ( Node next, c = n.getFirstChild (  ) ; c != null; c = next )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] splitVarDeclarations [RETURN_TYPE] void   Node n [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  
[BugLab_Argument_Swapping]^for  ( Node n, c = next.getFirstChild (  ) ; c != null; c = next )  {^355^^^^^354^371^for  ( Node next, c = n.getFirstChild (  ) ; c != null; c = next )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] splitVarDeclarations [RETURN_TYPE] void   Node n [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  
[BugLab_Wrong_Operator]^for  ( Node next, c = n.getFirstChild (  ) ; c == null; c = next )  {^355^^^^^354^371^for  ( Node next, c = n.getFirstChild (  ) ; c != null; c = next )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] splitVarDeclarations [RETURN_TYPE] void   Node n [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  
[BugLab_Wrong_Operator]^while  ( c.getFirstChild (  )  <= c.getLastChild (  )  )  {^362^^^^^354^371^while  ( c.getFirstChild (  )  != c.getLastChild (  )  )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] splitVarDeclarations [RETURN_TYPE] void   Node n [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  
[BugLab_Wrong_Operator]^if  ( c.getType (  )  < Token.VAR )  {^357^^^^^354^371^if  ( c.getType (  )  == Token.VAR )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] splitVarDeclarations [RETURN_TYPE] void   Node n [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  
[BugLab_Variable_Misuse]^Node name = newVar.getFirstChild (  ) ;^363^^^^^354^371^Node name = c.getFirstChild (  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] splitVarDeclarations [RETURN_TYPE] void   Node n [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  
[BugLab_Variable_Misuse]^while  ( newVar.getFirstChild (  )  != c.getLastChild (  )  )  {^362^^^^^354^371^while  ( c.getFirstChild (  )  != c.getLastChild (  )  )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] splitVarDeclarations [RETURN_TYPE] void   Node n [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  
[BugLab_Variable_Misuse]^if  ( isConst && !c.hasChildren (  )  )  {^358^^^^^354^371^if  ( assertOnChange && !c.hasChildren (  )  )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] splitVarDeclarations [RETURN_TYPE] void   Node n [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  
[BugLab_Variable_Misuse]^next = next.getNext (  ) ;^356^^^^^354^371^next = c.getNext (  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] splitVarDeclarations [RETURN_TYPE] void   Node n [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  
[BugLab_Variable_Misuse]^for  ( Node nextext, c = n.getFirstChild (  ) ; c != null; c = next )  {^355^^^^^354^371^for  ( Node next, c = n.getFirstChild (  ) ; c != null; c = next )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] splitVarDeclarations [RETURN_TYPE] void   Node n [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  
[BugLab_Variable_Misuse]^if  ( newVar.getType (  )  == Token.VAR )  {^357^^^^^354^371^if  ( c.getType (  )  == Token.VAR )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] splitVarDeclarations [RETURN_TYPE] void   Node n [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  
[BugLab_Wrong_Operator]^Preconditions.checkState ( functionBody.getParent (  ) .getType (  )  != Token.FUNCTION ) ;^378^379^^^^363^393^Preconditions.checkState ( functionBody.getParent (  ) .getType (  )  == Token.FUNCTION ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] moveNamedFunctions [RETURN_TYPE] void   Node functionBody [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  current  functionBody  insertAfter  next  previous  
[BugLab_Variable_Misuse]^Node current = previous.getFirstChild (  ) ;^381^^^^^366^396^Node current = functionBody.getFirstChild (  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] moveNamedFunctions [RETURN_TYPE] void   Node functionBody [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  current  functionBody  insertAfter  next  previous  
[BugLab_Variable_Misuse]^while  ( previous != null && NodeUtil.isFunctionDeclaration ( current )  )  {^384^^^^^369^399^while  ( current != null && NodeUtil.isFunctionDeclaration ( current )  )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] moveNamedFunctions [RETURN_TYPE] void   Node functionBody [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  current  functionBody  insertAfter  next  previous  
[BugLab_Wrong_Operator]^while  ( current != null || NodeUtil.isFunctionDeclaration ( current )  )  {^384^^^^^369^399^while  ( current != null && NodeUtil.isFunctionDeclaration ( current )  )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] moveNamedFunctions [RETURN_TYPE] void   Node functionBody [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  current  functionBody  insertAfter  next  previous  
[BugLab_Wrong_Operator]^while  ( current == null && NodeUtil.isFunctionDeclaration ( current )  )  {^384^^^^^369^399^while  ( current != null && NodeUtil.isFunctionDeclaration ( current )  )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] moveNamedFunctions [RETURN_TYPE] void   Node functionBody [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  current  functionBody  insertAfter  next  previous  
[BugLab_Variable_Misuse]^previous = previous;^385^^^^^370^400^previous = current;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] moveNamedFunctions [RETURN_TYPE] void   Node functionBody [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  current  functionBody  insertAfter  next  previous  
[BugLab_Variable_Misuse]^current = next.getNext (  ) ;^386^^^^^371^401^current = current.getNext (  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] moveNamedFunctions [RETURN_TYPE] void   Node functionBody [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  current  functionBody  insertAfter  next  previous  
[BugLab_Variable_Misuse]^current = previous.getNext (  ) ;^386^^^^^371^401^current = current.getNext (  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] moveNamedFunctions [RETURN_TYPE] void   Node functionBody [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  current  functionBody  insertAfter  next  previous  
[BugLab_Variable_Misuse]^Node insertAfter = next;^390^^^^^375^405^Node insertAfter = previous;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] moveNamedFunctions [RETURN_TYPE] void   Node functionBody [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  current  functionBody  insertAfter  next  previous  
[BugLab_Variable_Misuse]^while  ( previous != null )  {^391^^^^^376^406^while  ( current != null )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] moveNamedFunctions [RETURN_TYPE] void   Node functionBody [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  current  functionBody  insertAfter  next  previous  
[BugLab_Wrong_Operator]^while  ( current == null )  {^391^^^^^376^406^while  ( current != null )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] moveNamedFunctions [RETURN_TYPE] void   Node functionBody [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  current  functionBody  insertAfter  next  previous  
[BugLab_Variable_Misuse]^if  ( NodeUtil.isFunctionDeclaration ( next )  )  {^394^^^^^379^409^if  ( NodeUtil.isFunctionDeclaration ( current )  )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] moveNamedFunctions [RETURN_TYPE] void   Node functionBody [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  current  functionBody  insertAfter  next  previous  
[BugLab_Variable_Misuse]^previous = previous;^405^^^^^394^406^previous = current;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] moveNamedFunctions [RETURN_TYPE] void   Node functionBody [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  current  functionBody  insertAfter  next  previous  
[BugLab_Variable_Misuse]^insertAfter = addToFront ( previous, current, insertAfter ) ;^401^^^^^386^416^insertAfter = addToFront ( functionBody, current, insertAfter ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] moveNamedFunctions [RETURN_TYPE] void   Node functionBody [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  current  functionBody  insertAfter  next  previous  
[BugLab_Variable_Misuse]^insertAfter = addToFront ( functionBody, current, previous ) ;^401^^^^^386^416^insertAfter = addToFront ( functionBody, current, insertAfter ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] moveNamedFunctions [RETURN_TYPE] void   Node functionBody [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  current  functionBody  insertAfter  next  previous  
[BugLab_Argument_Swapping]^insertAfter = addToFront ( insertAfter, current, functionBody ) ;^401^^^^^386^416^insertAfter = addToFront ( functionBody, current, insertAfter ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] moveNamedFunctions [RETURN_TYPE] void   Node functionBody [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  current  functionBody  insertAfter  next  previous  
[BugLab_Argument_Swapping]^insertAfter = addToFront ( current, functionBody, insertAfter ) ;^401^^^^^386^416^insertAfter = addToFront ( functionBody, current, insertAfter ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] moveNamedFunctions [RETURN_TYPE] void   Node functionBody [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  current  functionBody  insertAfter  next  previous  
[BugLab_Variable_Misuse]^Preconditions.checkNotNull ( next ) ;^396^^^^^381^411^Preconditions.checkNotNull ( previous ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] moveNamedFunctions [RETURN_TYPE] void   Node functionBody [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  current  functionBody  insertAfter  next  previous  
[BugLab_Variable_Misuse]^functionBody.removeChildAfter ( next ) ;^397^^^^^382^412^functionBody.removeChildAfter ( previous ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] moveNamedFunctions [RETURN_TYPE] void   Node functionBody [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  current  functionBody  insertAfter  next  previous  
[BugLab_Variable_Misuse]^insertAfter = addToFront ( functionBody, previous, insertAfter ) ;^401^^^^^386^416^insertAfter = addToFront ( functionBody, current, insertAfter ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] moveNamedFunctions [RETURN_TYPE] void   Node functionBody [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  current  functionBody  insertAfter  next  previous  
[BugLab_Argument_Swapping]^insertAfter = addToFront ( functionBody, insertAfter, current ) ;^401^^^^^386^416^insertAfter = addToFront ( functionBody, current, insertAfter ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] moveNamedFunctions [RETURN_TYPE] void   Node functionBody [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  current  functionBody  insertAfter  next  previous  
[BugLab_Variable_Misuse]^previous = next;^405^^^^^390^420^previous = current;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] moveNamedFunctions [RETURN_TYPE] void   Node functionBody [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  current  functionBody  insertAfter  next  previous  
[BugLab_Variable_Misuse]^current = previous;^407^^^^^392^422^current = next;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] moveNamedFunctions [RETURN_TYPE] void   Node functionBody [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  current  functionBody  insertAfter  next  previous  
[BugLab_Variable_Misuse]^Node next = previous.getNext (  ) ;^393^^^^^378^408^Node next = current.getNext (  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] moveNamedFunctions [RETURN_TYPE] void   Node functionBody [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  current  functionBody  insertAfter  next  previous  
[BugLab_Variable_Misuse]^if  ( NodeUtil.isFunctionDeclaration ( previous )  )  {^394^^^^^379^409^if  ( NodeUtil.isFunctionDeclaration ( current )  )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] moveNamedFunctions [RETURN_TYPE] void   Node functionBody [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  current  functionBody  insertAfter  next  previous  
[BugLab_Variable_Misuse]^if  ( newChild == null )  {^417^^^^^416^423^if  ( after == null )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] addToFront [RETURN_TYPE] Node   Node parent Node newChild Node after [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  after  newChild  parent  
[BugLab_Wrong_Operator]^if  ( after != null )  {^417^^^^^416^423^if  ( after == null )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] addToFront [RETURN_TYPE] Node   Node parent Node newChild Node after [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  after  newChild  parent  
[BugLab_Variable_Misuse]^parent.addChildAfter ( after, after ) ;^420^^^^^416^423^parent.addChildAfter ( newChild, after ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] addToFront [RETURN_TYPE] Node   Node parent Node newChild Node after [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  after  newChild  parent  
[BugLab_Variable_Misuse]^parent.addChildAfter ( newChild, parent ) ;^420^^^^^416^423^parent.addChildAfter ( newChild, after ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] addToFront [RETURN_TYPE] Node   Node parent Node newChild Node after [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  after  newChild  parent  
[BugLab_Argument_Swapping]^parent.addChildAfter ( after, newChild ) ;^420^^^^^416^423^parent.addChildAfter ( newChild, after ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] addToFront [RETURN_TYPE] Node   Node parent Node newChild Node after [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  after  newChild  parent  
[BugLab_Variable_Misuse]^parent.addChildToFront ( after ) ;^418^^^^^416^423^parent.addChildToFront ( newChild ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] addToFront [RETURN_TYPE] Node   Node parent Node newChild Node after [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  after  newChild  parent  
[BugLab_Variable_Misuse]^parent.addChildAfter ( newChild, newChild ) ;^420^^^^^416^423^parent.addChildAfter ( newChild, after ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] addToFront [RETURN_TYPE] Node   Node parent Node newChild Node after [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  after  newChild  parent  
[BugLab_Variable_Misuse]^return parent;^422^^^^^416^423^return newChild;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] addToFront [RETURN_TYPE] Node   Node parent Node newChild Node after [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  after  newChild  parent  
[BugLab_Argument_Swapping]^NodeTraversal t = new NodeTraversal ( tickler, compiler, scopeCreator ) ;^432^^^^^428^434^NodeTraversal t = new NodeTraversal ( compiler, tickler, scopeCreator ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] removeDuplicateDeclarations [RETURN_TYPE] void   Node root [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Callback  tickler  NodeTraversal  t  Node  root  ScopeCreator  scopeCreator  Map  constantMap  
[BugLab_Argument_Swapping]^NodeTraversal t = new NodeTraversal ( scopeCreator, tickler, compiler ) ;^432^^^^^428^434^NodeTraversal t = new NodeTraversal ( compiler, tickler, scopeCreator ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] removeDuplicateDeclarations [RETURN_TYPE] void   Node root [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Callback  tickler  NodeTraversal  t  Node  root  ScopeCreator  scopeCreator  Map  constantMap  
[BugLab_Variable_Misuse]^Preconditions.checkState ( value.getType (  )  == Token.NAME ) ;^450^^^^^435^465^Preconditions.checkState ( n.getType (  )  == Token.NAME ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  String  name  Scope  s  Map  constantMap  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  
[BugLab_Wrong_Operator]^Preconditions.checkState ( n.getType (  )  >= Token.NAME ) ;^450^^^^^435^465^Preconditions.checkState ( n.getType (  )  == Token.NAME ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  String  name  Scope  s  Map  constantMap  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  
[BugLab_Variable_Misuse]^if  ( replacement.getType (  )  == Token.VAR )  {^451^^^^^436^466^if  ( parent.getType (  )  == Token.VAR )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  String  name  Scope  s  Map  constantMap  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  
[BugLab_Wrong_Operator]^if  ( parent.getType (  )  != Token.VAR )  {^451^^^^^436^466^if  ( parent.getType (  )  == Token.VAR )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  String  name  Scope  s  Map  constantMap  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  
[BugLab_Wrong_Operator]^if  ( parent.getType (  )  > Token.VAR )  {^451^^^^^436^466^if  ( parent.getType (  )  == Token.VAR )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  String  name  Scope  s  Map  constantMap  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  
[BugLab_Variable_Misuse]^if  ( replacement.hasChildren (  )  )  {^471^^^^^456^486^if  ( n.hasChildren (  )  )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  String  name  Scope  s  Map  constantMap  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  
[BugLab_Variable_Misuse]^if  ( NodeUtil.isStatementBlock ( value )  )  {^481^^^^^471^493^if  ( NodeUtil.isStatementBlock ( gramps )  )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  String  name  Scope  s  Map  constantMap  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  
[BugLab_Variable_Misuse]^} else if  ( value.getType (  )  == Token.FOR )  {^483^^^^^471^493^} else if  ( gramps.getType (  )  == Token.FOR )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  String  name  Scope  s  Map  constantMap  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  
[BugLab_Wrong_Operator]^} else if  ( gramps.getType (  )  != Token.FOR )  {^483^^^^^471^493^} else if  ( gramps.getType (  )  == Token.FOR )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  String  name  Scope  s  Map  constantMap  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  
[BugLab_Wrong_Operator]^} else if  ( gramps.getType (  )  >= Token.FOR )  {^483^^^^^471^493^} else if  ( gramps.getType (  )  == Token.FOR )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  String  name  Scope  s  Map  constantMap  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  
[BugLab_Variable_Misuse]^Preconditions.checkState ( value.getType (  )  == Token.LABEL ) ;^490^^^^^471^493^Preconditions.checkState ( gramps.getType (  )  == Token.LABEL ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  String  name  Scope  s  Map  constantMap  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  
[BugLab_Wrong_Operator]^Preconditions.checkState ( gramps.getType (  )  <= Token.LABEL ) ;^490^^^^^471^493^Preconditions.checkState ( gramps.getType (  )  == Token.LABEL ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  String  name  Scope  s  Map  constantMap  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  
[BugLab_Variable_Misuse]^Preconditions.checkState ( replacement.getType (  )  == Token.LABEL ) ;^490^^^^^471^493^Preconditions.checkState ( gramps.getType (  )  == Token.LABEL ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  String  name  Scope  s  Map  constantMap  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  
[BugLab_Variable_Misuse]^gramps.replaceChild ( value, new Node ( Token.EMPTY )  ) ;^491^^^^^471^493^gramps.replaceChild ( parent, new Node ( Token.EMPTY )  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  String  name  Scope  s  Map  constantMap  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  
[BugLab_Variable_Misuse]^parent.removeChild ( value ) ;^487^^^^^471^493^parent.removeChild ( n ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  String  name  Scope  s  Map  constantMap  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  
[BugLab_Variable_Misuse]^gramps.replaceChild ( parent, value ) ;^488^^^^^471^493^gramps.replaceChild ( parent, n ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  String  name  Scope  s  Map  constantMap  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  
[BugLab_Argument_Swapping]^gramps.replaceChild ( n, parent ) ;^488^^^^^471^493^gramps.replaceChild ( parent, n ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  String  name  Scope  s  Map  constantMap  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  
[BugLab_Variable_Misuse]^} else if  ( replacement.getType (  )  == Token.FOR )  {^483^^^^^471^493^} else if  ( gramps.getType (  )  == Token.FOR )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  String  name  Scope  s  Map  constantMap  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  
[BugLab_Variable_Misuse]^gramps.replaceChild ( value, n ) ;^488^^^^^471^493^gramps.replaceChild ( parent, n ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  String  name  Scope  s  Map  constantMap  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  
[BugLab_Wrong_Operator]^Preconditions.checkState ( gramps.getType (  )  >= Token.LABEL ) ;^490^^^^^471^493^Preconditions.checkState ( gramps.getType (  )  == Token.LABEL ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  String  name  Scope  s  Map  constantMap  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  
[BugLab_Variable_Misuse]^gramps.removeChild ( value ) ;^482^^^^^471^493^gramps.removeChild ( parent ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  String  name  Scope  s  Map  constantMap  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  
[BugLab_Wrong_Operator]^} else if  ( gramps.getType (  )  <= Token.FOR )  {^483^^^^^471^493^} else if  ( gramps.getType (  )  == Token.FOR )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  String  name  Scope  s  Map  constantMap  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  
[BugLab_Variable_Misuse]^gramps.replaceChild ( parent, new Node ( Token.0 )  ) ;^491^^^^^471^493^gramps.replaceChild ( parent, new Node ( Token.EMPTY )  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  String  name  Scope  s  Map  constantMap  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  
[BugLab_Variable_Misuse]^Node replacement = replacementew Node ( Token.ASSIGN, n, value ) ;^477^^^^^462^492^Node replacement = new Node ( Token.ASSIGN, n, value ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  String  name  Scope  s  Map  constantMap  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  
[BugLab_Variable_Misuse]^Node replacement = new Node ( Token.ASSIGN, n, replacement ) ;^477^^^^^462^492^Node replacement = new Node ( Token.ASSIGN, n, value ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  String  name  Scope  s  Map  constantMap  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  
[BugLab_Argument_Swapping]^Node replacement = valueew Node ( Token.ASSIGN, n, n ) ;^477^^^^^462^492^Node replacement = new Node ( Token.ASSIGN, n, value ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  String  name  Scope  s  Map  constantMap  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  
[BugLab_Variable_Misuse]^gramps.replaceChild ( parent, new Node ( Token.EXPR_RESULT, value )  ) ;^478^^^^^463^493^gramps.replaceChild ( parent, new Node ( Token.EXPR_RESULT, replacement )  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  String  name  Scope  s  Map  constantMap  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  
[BugLab_Variable_Misuse]^Node value = replacement.getFirstChild (  ) ;^475^^^^^460^490^Node value = n.getFirstChild (  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  String  name  Scope  s  Map  constantMap  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  
[BugLab_Variable_Misuse]^Node replacement = new Node ( Token.ASSIGN, n, parent ) ;^477^^^^^462^492^Node replacement = new Node ( Token.ASSIGN, n, value ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  String  name  Scope  s  Map  constantMap  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  
[BugLab_Variable_Misuse]^parent.removeChild ( value ) ;^473^^^^^458^488^parent.removeChild ( n ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  String  name  Scope  s  Map  constantMap  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  
[BugLab_Variable_Misuse]^Node value = value.getFirstChild (  ) ;^475^^^^^460^490^Node value = n.getFirstChild (  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  String  name  Scope  s  Map  constantMap  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  
[BugLab_Variable_Misuse]^n.removeChild ( replacement ) ;^476^^^^^461^491^n.removeChild ( value ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  String  name  Scope  s  Map  constantMap  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  
[BugLab_Variable_Misuse]^gramps.replaceChild ( value, new Node ( Token.EXPR_RESULT, replacement )  ) ;^478^^^^^463^493^gramps.replaceChild ( parent, new Node ( Token.EXPR_RESULT, replacement )  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  String  name  Scope  s  Map  constantMap  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  
[BugLab_Argument_Swapping]^gramps.replaceChild ( replacement, new Node ( Token.EXPR_RESULT, parent )  ) ;^478^^^^^463^493^gramps.replaceChild ( parent, new Node ( Token.EXPR_RESULT, replacement )  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  String  name  Scope  s  Map  constantMap  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  
[BugLab_Variable_Misuse]^if  ( NodeUtil.isStatementBlock ( value )  )  {^481^^^^^466^496^if  ( NodeUtil.isStatementBlock ( gramps )  )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  String  name  Scope  s  Map  constantMap  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  
[BugLab_Variable_Misuse]^} else if  ( value.getType (  )  == Token.FOR )  {^483^^^^^468^498^} else if  ( gramps.getType (  )  == Token.FOR )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  String  name  Scope  s  Map  constantMap  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  
[BugLab_Wrong_Operator]^} else if  ( gramps.getType (  )  != Token.FOR )  {^483^^^^^468^498^} else if  ( gramps.getType (  )  == Token.FOR )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  String  name  Scope  s  Map  constantMap  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  
[BugLab_Wrong_Operator]^Preconditions.checkState ( gramps.getType (  )  >= Token.LABEL ) ;^490^^^^^483^492^Preconditions.checkState ( gramps.getType (  )  == Token.LABEL ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  String  name  Scope  s  Map  constantMap  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  
[BugLab_Variable_Misuse]^Preconditions.checkState ( value.getType (  )  == Token.LABEL ) ;^490^^^^^483^492^Preconditions.checkState ( gramps.getType (  )  == Token.LABEL ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  String  name  Scope  s  Map  constantMap  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  
[BugLab_Variable_Misuse]^parent.removeChild ( value ) ;^487^^^^^472^502^parent.removeChild ( n ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  String  name  Scope  s  Map  constantMap  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  
[BugLab_Variable_Misuse]^gramps.replaceChild ( value, n ) ;^488^^^^^473^503^gramps.replaceChild ( parent, n ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  String  name  Scope  s  Map  constantMap  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  
[BugLab_Variable_Misuse]^gramps.replaceChild ( parent, value ) ;^488^^^^^473^503^gramps.replaceChild ( parent, n ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  String  name  Scope  s  Map  constantMap  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  
[BugLab_Argument_Swapping]^gramps.replaceChild ( n, parent ) ;^488^^^^^473^503^gramps.replaceChild ( parent, n ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  String  name  Scope  s  Map  constantMap  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  
[BugLab_Variable_Misuse]^Preconditions.checkState ( value.getType (  )  == Token.LABEL ) ;^490^^^^^475^505^Preconditions.checkState ( gramps.getType (  )  == Token.LABEL ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  String  name  Scope  s  Map  constantMap  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  
[BugLab_Wrong_Operator]^Preconditions.checkState ( gramps.getType (  )  != Token.LABEL ) ;^490^^^^^475^505^Preconditions.checkState ( gramps.getType (  )  == Token.LABEL ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  String  name  Scope  s  Map  constantMap  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  
[BugLab_Variable_Misuse]^gramps.removeChild ( value ) ;^482^^^^^467^497^gramps.removeChild ( parent ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  String  name  Scope  s  Map  constantMap  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  
[BugLab_Variable_Misuse]^} else if  ( gramps.getType (  )  == Token.2 )  {^483^^^^^468^498^} else if  ( gramps.getType (  )  == Token.FOR )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  String  name  Scope  s  Map  constantMap  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  
[BugLab_Wrong_Operator]^} else if  ( gramps.getType (  )  < Token.FOR )  {^483^^^^^468^498^} else if  ( gramps.getType (  )  == Token.FOR )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  String  name  Scope  s  Map  constantMap  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  
[BugLab_Wrong_Operator]^Preconditions.checkState ( gramps.getType (  )  != Token.LABEL ) ;^490^^^^^483^492^Preconditions.checkState ( gramps.getType (  )  == Token.LABEL ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  String  name  Scope  s  Map  constantMap  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  
[BugLab_Variable_Misuse]^Preconditions.checkState ( replacement.getType (  )  == Token.LABEL ) ;^490^^^^^483^492^Preconditions.checkState ( gramps.getType (  )  == Token.LABEL ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  String  name  Scope  s  Map  constantMap  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  
[BugLab_Variable_Misuse]^gramps.replaceChild ( value, new Node ( Token.EMPTY )  ) ;^491^^^^^483^492^gramps.replaceChild ( parent, new Node ( Token.EMPTY )  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  String  name  Scope  s  Map  constantMap  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  
[BugLab_Variable_Misuse]^Node replacement = valueew Node ( Token.ASSIGN, n, value ) ;^477^^^^^462^492^Node replacement = new Node ( Token.ASSIGN, n, value ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  String  name  Scope  s  Map  constantMap  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  
[BugLab_Variable_Misuse]^Preconditions.checkState ( value.hasOneChild (  )  ) ;^452^^^^^437^467^Preconditions.checkState ( parent.hasOneChild (  )  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  String  name  Scope  s  Map  constantMap  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  
[BugLab_Variable_Misuse]^Preconditions.checkState ( replacement.hasOneChild (  )  ) ;^452^^^^^437^467^Preconditions.checkState ( parent.hasOneChild (  )  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  String  name  Scope  s  Map  constantMap  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  
[BugLab_Variable_Misuse]^if  ( value.hasChildren (  )  )  {^471^^^^^456^486^if  ( n.hasChildren (  )  )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  String  name  Scope  s  Map  constantMap  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  
[BugLab_Variable_Misuse]^} else if  ( replacement.getType (  )  == Token.FOR )  {^483^^^^^468^498^} else if  ( gramps.getType (  )  == Token.FOR )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  String  name  Scope  s  Map  constantMap  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  
[BugLab_Variable_Misuse]^gramps.replaceChild ( value, new Node ( Token.EMPTY )  ) ;^491^^^^^476^506^gramps.replaceChild ( parent, new Node ( Token.EMPTY )  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  String  name  Scope  s  Map  constantMap  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  
[BugLab_Wrong_Operator]^Preconditions.checkState ( gramps.getType (  )  != Token.LABEL ) ;^490^^^^^471^493^Preconditions.checkState ( gramps.getType (  )  == Token.LABEL ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  String  name  Scope  s  Map  constantMap  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  
[BugLab_Wrong_Operator]^} else if  ( gramps.getType (  )  < Token.FOR )  {^483^^^^^471^493^} else if  ( gramps.getType (  )  == Token.FOR )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  String  name  Scope  s  Map  constantMap  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  
[BugLab_Variable_Misuse]^gramps.replaceChild ( parent, new Node ( Token.1 )  ) ;^491^^^^^471^493^gramps.replaceChild ( parent, new Node ( Token.EMPTY )  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  String  name  Scope  s  Map  constantMap  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  
[BugLab_Variable_Misuse]^} else if  ( gramps.getType (  )  == Token.0 )  {^483^^^^^468^498^} else if  ( gramps.getType (  )  == Token.FOR )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  String  name  Scope  s  Map  constantMap  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  
[BugLab_Wrong_Operator]^} else if  ( gramps.getType (  )  <= Token.FOR )  {^483^^^^^468^498^} else if  ( gramps.getType (  )  == Token.FOR )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  String  name  Scope  s  Map  constantMap  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  
[BugLab_Variable_Misuse]^gramps.replaceChild ( parent, new Node ( Token.2 )  ) ;^491^^^^^483^492^gramps.replaceChild ( parent, new Node ( Token.EMPTY )  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  String  name  Scope  s  Map  constantMap  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  
[BugLab_Variable_Misuse]^gramps.replaceChild ( parent, new Node ( Token.1 )  ) ;^491^^^^^476^506^gramps.replaceChild ( parent, new Node ( Token.EMPTY )  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  String  name  Scope  s  Map  constantMap  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  
[BugLab_Wrong_Operator]^} else if  ( gramps.getType (  )  > Token.FOR )  {^483^^^^^468^498^} else if  ( gramps.getType (  )  == Token.FOR )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  String  name  Scope  s  Map  constantMap  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  
[BugLab_Wrong_Operator]^Preconditions.checkState ( gramps.getType (  )  < Token.LABEL ) ;^490^^^^^475^505^Preconditions.checkState ( gramps.getType (  )  == Token.LABEL ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  String  name  Scope  s  Map  constantMap  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  
[BugLab_Variable_Misuse]^Preconditions.checkState ( replacement.getType (  )  == Token.LABEL ) ;^490^^^^^475^505^Preconditions.checkState ( gramps.getType (  )  == Token.LABEL ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  String  name  Scope  s  Map  constantMap  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  
[BugLab_Wrong_Literal]^return false;^520^^^^^518^521^return true;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  nodeTraversal  Node  n  parent  
[BugLab_Variable_Misuse]^this.assertOnChange = assertOnChange;^115^^^^^112^116^this.assertOnChange = forbidChanges;^[CLASS] PropogateConstantAnnotations  [METHOD] <init> [RETURN_TYPE] AbstractCompiler,boolean)   AbstractCompiler compiler boolean forbidChanges [VARIABLES] AbstractCompiler  compiler  boolean  assertOnChange  forbidChanges  
[BugLab_Argument_Swapping]^new NodeTraversal ( compiler, this ) .traverseRoots ( root, externs ) ;^120^^^^^119^121^new NodeTraversal ( compiler, this ) .traverseRoots ( externs, root ) ;^[CLASS] PropogateConstantAnnotations  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  assertOnChange  forbidChanges  Node  externs  root  
[BugLab_Argument_Swapping]^new NodeTraversal ( root, this ) .traverseRoots ( externs, compiler ) ;^120^^^^^119^121^new NodeTraversal ( compiler, this ) .traverseRoots ( externs, root ) ;^[CLASS] PropogateConstantAnnotations  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  assertOnChange  forbidChanges  Node  externs  root  
[BugLab_Variable_Misuse]^if  ( parent.getType (  )  == Token.NAME )  {^126^^^^^124^153^if  ( n.getType (  )  == Token.NAME )  {^[CLASS] PropogateConstantAnnotations  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  assertOnChange  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  
[BugLab_Wrong_Operator]^if  ( n.getType (  )  <= Token.NAME )  {^126^^^^^124^153^if  ( n.getType (  )  == Token.NAME )  {^[CLASS] PropogateConstantAnnotations  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  assertOnChange  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  
[BugLab_Variable_Misuse]^if  ( parent.getString (  ) .isEmpty (  )  )  {^127^^^^^124^153^if  ( n.getString (  ) .isEmpty (  )  )  {^[CLASS] PropogateConstantAnnotations  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  assertOnChange  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  
[BugLab_Wrong_Operator]^if  ( var == null )  {^134^^^^^124^153^if  ( var != null )  {^[CLASS] PropogateConstantAnnotations  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  assertOnChange  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  
[BugLab_Variable_Misuse]^if  (  ( info != parentull && info.isConstant (  )  )  && !n.getBooleanProp ( Node.IS_CONSTANT_NAME )  )  {^138^139^^^^124^153^if  (  ( info != null && info.isConstant (  )  )  && !n.getBooleanProp ( Node.IS_CONSTANT_NAME )  )  {^[CLASS] PropogateConstantAnnotations  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  assertOnChange  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  
[BugLab_Wrong_Operator]^if  (  ( info != null || info.isConstant (  )  )  && !n.getBooleanProp ( Node.IS_CONSTANT_NAME )  )  {^138^139^^^^124^153^if  (  ( info != null && info.isConstant (  )  )  && !n.getBooleanProp ( Node.IS_CONSTANT_NAME )  )  {^[CLASS] PropogateConstantAnnotations  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  assertOnChange  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  
[BugLab_Wrong_Operator]^if  (  ( info == null && info.isConstant (  )  )  && !n.getBooleanProp ( Node.IS_CONSTANT_NAME )  )  {^138^139^^^^124^153^if  (  ( info != null && info.isConstant (  )  )  && !n.getBooleanProp ( Node.IS_CONSTANT_NAME )  )  {^[CLASS] PropogateConstantAnnotations  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  assertOnChange  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  
[BugLab_Variable_Misuse]^if  ( forbidChanges )  {^141^^^^^138^151^if  ( assertOnChange )  {^[CLASS] PropogateConstantAnnotations  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  assertOnChange  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  
[BugLab_Variable_Misuse]^throw parentew IllegalStateException ( "Unexpected const change.\n" + "  name: "+ name + "\n" + "  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^143^144^145^146^^138^151^throw new IllegalStateException ( "Unexpected const change.\n" + "  name: "+ name + "\n" + "  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^[CLASS] PropogateConstantAnnotations  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  assertOnChange  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  
[BugLab_Argument_Swapping]^throw nameew IllegalStateException ( "Unexpected const change.\n" + "  n: "+ name + "\n" + "  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^143^144^145^146^^138^151^throw new IllegalStateException ( "Unexpected const change.\n" + "  name: "+ name + "\n" + "  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^[CLASS] PropogateConstantAnnotations  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  assertOnChange  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  
[BugLab_Wrong_Operator]^throw new IllegalStateException ( "Unexpected const change.\n" + "  !=  name: "+ name + "\n" + "  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^143^144^145^146^^138^151^throw new IllegalStateException ( "Unexpected const change.\n" + "  name: "+ name + "\n" + "  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^[CLASS] PropogateConstantAnnotations  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  assertOnChange  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  
[BugLab_Wrong_Operator]^throw new IllegalStateException ( "Unexpected const change.\n" + "  <<  name: "+ name + "\n" + "  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^143^144^145^146^^138^151^throw new IllegalStateException ( "Unexpected const change.\n" + "  name: "+ name + "\n" + "  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^[CLASS] PropogateConstantAnnotations  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  assertOnChange  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  
[BugLab_Wrong_Operator]^throw new IllegalStateException ( "Unexpected const change.\n" + "  &  name: "+ name + "\n" + "  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^143^144^145^146^^138^151^throw new IllegalStateException ( "Unexpected const change.\n" + "  name: "+ name + "\n" + "  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^[CLASS] PropogateConstantAnnotations  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  assertOnChange  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  
[BugLab_Wrong_Operator]^throw new IllegalStateException ( "Unexpected const change.\n" + "  <  name: "+ name + "\n" + "  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^143^144^145^146^^138^151^throw new IllegalStateException ( "Unexpected const change.\n" + "  name: "+ name + "\n" + "  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^[CLASS] PropogateConstantAnnotations  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  assertOnChange  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  
[BugLab_Wrong_Operator]^throw new IllegalStateException ( "Unexpected const change.\n" + "  ==  name: "+ name + "\n" + "  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^143^144^145^146^^138^151^throw new IllegalStateException ( "Unexpected const change.\n" + "  name: "+ name + "\n" + "  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^[CLASS] PropogateConstantAnnotations  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  assertOnChange  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  
[BugLab_Variable_Misuse]^String parentame = n.getString (  ) ;^142^^^^^138^151^String name = n.getString (  ) ;^[CLASS] PropogateConstantAnnotations  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  assertOnChange  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  
[BugLab_Wrong_Operator]^throw new IllegalStateException ( "Unexpected const change.\n" + "  |  name: "+ name + "\n" + "  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^143^144^145^146^^138^151^throw new IllegalStateException ( "Unexpected const change.\n" + "  name: "+ name + "\n" + "  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^[CLASS] PropogateConstantAnnotations  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  assertOnChange  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  
[BugLab_Wrong_Operator]^throw new IllegalStateException ( "Unexpected const change.\n" + "  >  name: "+ name + "\n" + "  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^143^144^145^146^^138^151^throw new IllegalStateException ( "Unexpected const change.\n" + "  name: "+ name + "\n" + "  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^[CLASS] PropogateConstantAnnotations  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  assertOnChange  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  
[BugLab_Wrong_Operator]^throw new IllegalStateException ( "Unexpected const change.\n" + "  >>  name: "+ name + "\n" + "  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^143^144^145^146^^138^151^throw new IllegalStateException ( "Unexpected const change.\n" + "  name: "+ name + "\n" + "  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^[CLASS] PropogateConstantAnnotations  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  assertOnChange  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  
[BugLab_Variable_Misuse]^"  gramps:" + parent.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^146^^^^^138^151^"  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^[CLASS] PropogateConstantAnnotations  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  assertOnChange  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  
[BugLab_Wrong_Operator]^throw new IllegalStateException ( "Unexpected const change.\n" + "  >=  name: "+ name + "\n" + "  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^143^144^145^146^^138^151^throw new IllegalStateException ( "Unexpected const change.\n" + "  name: "+ name + "\n" + "  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^[CLASS] PropogateConstantAnnotations  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  assertOnChange  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  
[BugLab_Wrong_Operator]^throw new IllegalStateException ( "Unexpected const change.\n" + "  <=  name: "+ name + "\n" + "  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^143^144^145^146^^138^151^throw new IllegalStateException ( "Unexpected const change.\n" + "  name: "+ name + "\n" + "  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^[CLASS] PropogateConstantAnnotations  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  assertOnChange  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  
[BugLab_Wrong_Literal]^n.putBooleanProp ( Node.IS_CONSTANT_NAME, false ) ;^140^^^^^138^151^n.putBooleanProp ( Node.IS_CONSTANT_NAME, true ) ;^[CLASS] PropogateConstantAnnotations  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  assertOnChange  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  
[BugLab_Variable_Misuse]^if  ( forbidChanges )  {^141^^^^^124^153^if  ( assertOnChange )  {^[CLASS] PropogateConstantAnnotations  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  assertOnChange  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  
[BugLab_Variable_Misuse]^throw parentew IllegalStateException ( "Unexpected const change.\n" + "  name: "+ name + "\n" + "  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^143^144^145^146^^124^153^throw new IllegalStateException ( "Unexpected const change.\n" + "  name: "+ name + "\n" + "  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^[CLASS] PropogateConstantAnnotations  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  assertOnChange  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  
[BugLab_Argument_Swapping]^throw nameew IllegalStateException ( "Unexpected const change.\n" + "  n: "+ name + "\n" + "  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^143^144^145^146^^124^153^throw new IllegalStateException ( "Unexpected const change.\n" + "  name: "+ name + "\n" + "  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^[CLASS] PropogateConstantAnnotations  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  assertOnChange  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  
[BugLab_Wrong_Operator]^throw new IllegalStateException ( "Unexpected const change.\n" + "  !=  name: "+ name + "\n" + "  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^143^144^145^146^^124^153^throw new IllegalStateException ( "Unexpected const change.\n" + "  name: "+ name + "\n" + "  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^[CLASS] PropogateConstantAnnotations  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  assertOnChange  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  
[BugLab_Wrong_Operator]^throw new IllegalStateException ( "Unexpected const change.\n" + "  ^  name: "+ name + "\n" + "  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^143^144^145^146^^124^153^throw new IllegalStateException ( "Unexpected const change.\n" + "  name: "+ name + "\n" + "  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^[CLASS] PropogateConstantAnnotations  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  assertOnChange  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  
[BugLab_Wrong_Operator]^throw new IllegalStateException ( "Unexpected const change.\n" + "  &&  name: "+ name + "\n" + "  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^143^144^145^146^^124^153^throw new IllegalStateException ( "Unexpected const change.\n" + "  name: "+ name + "\n" + "  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^[CLASS] PropogateConstantAnnotations  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  assertOnChange  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  
[BugLab_Wrong_Operator]^throw new IllegalStateException ( "Unexpected const change.\n" + "  <<  name: "+ name + "\n" + "  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^143^144^145^146^^124^153^throw new IllegalStateException ( "Unexpected const change.\n" + "  name: "+ name + "\n" + "  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^[CLASS] PropogateConstantAnnotations  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  assertOnChange  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  
[BugLab_Wrong_Operator]^throw new IllegalStateException ( "Unexpected const change.\n" + "  ||  name: "+ name + "\n" + "  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^143^144^145^146^^124^153^throw new IllegalStateException ( "Unexpected const change.\n" + "  name: "+ name + "\n" + "  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^[CLASS] PropogateConstantAnnotations  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  assertOnChange  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  
[BugLab_Wrong_Operator]^throw new IllegalStateException ( "Unexpected const change.\n" + "  >=  name: "+ name + "\n" + "  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^143^144^145^146^^124^153^throw new IllegalStateException ( "Unexpected const change.\n" + "  name: "+ name + "\n" + "  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^[CLASS] PropogateConstantAnnotations  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  assertOnChange  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  
[BugLab_Wrong_Operator]^throw new IllegalStateException ( "Unexpected const change.\n" + "  ==  name: "+ name + "\n" + "  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^143^144^145^146^^124^153^throw new IllegalStateException ( "Unexpected const change.\n" + "  name: "+ name + "\n" + "  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^[CLASS] PropogateConstantAnnotations  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  assertOnChange  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  
[BugLab_Variable_Misuse]^String parentame = n.getString (  ) ;^142^^^^^124^153^String name = n.getString (  ) ;^[CLASS] PropogateConstantAnnotations  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  assertOnChange  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  
[BugLab_Variable_Misuse]^"  gramps:" + parent.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^146^^^^^124^153^"  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^[CLASS] PropogateConstantAnnotations  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  assertOnChange  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  
[BugLab_Wrong_Operator]^throw new IllegalStateException ( "Unexpected const change.\n" + "  |  name: "+ name + "\n" + "  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^143^144^145^146^^124^153^throw new IllegalStateException ( "Unexpected const change.\n" + "  name: "+ name + "\n" + "  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^[CLASS] PropogateConstantAnnotations  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  assertOnChange  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  
[BugLab_Variable_Misuse]^Var var = t.getScope (  ) .getVar ( parent.getString (  )  ) ;^133^^^^^124^153^Var var = t.getScope (  ) .getVar ( n.getString (  )  ) ;^[CLASS] PropogateConstantAnnotations  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  assertOnChange  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  
[BugLab_Argument_Swapping]^Var var = n.getScope (  ) .getVar ( t.getString (  )  ) ;^133^^^^^124^153^Var var = t.getScope (  ) .getVar ( n.getString (  )  ) ;^[CLASS] PropogateConstantAnnotations  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  assertOnChange  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  
[BugLab_Wrong_Operator]^throw new IllegalStateException ( "Unexpected const change.\n" + "  >  name: "+ name + "\n" + "  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^143^144^145^146^^124^153^throw new IllegalStateException ( "Unexpected const change.\n" + "  name: "+ name + "\n" + "  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^[CLASS] PropogateConstantAnnotations  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  assertOnChange  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  
[BugLab_Wrong_Operator]^throw new IllegalStateException ( "Unexpected const change.\n" + "  <=  name: "+ name + "\n" + "  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^143^144^145^146^^124^153^throw new IllegalStateException ( "Unexpected const change.\n" + "  name: "+ name + "\n" + "  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^[CLASS] PropogateConstantAnnotations  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  assertOnChange  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  
[BugLab_Wrong_Literal]^n.putBooleanProp ( Node.IS_CONSTANT_NAME, false ) ;^140^^^^^124^153^n.putBooleanProp ( Node.IS_CONSTANT_NAME, true ) ;^[CLASS] PropogateConstantAnnotations  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  assertOnChange  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  
[BugLab_Argument_Swapping]^if  (  ( n != infoull && info.isConstant (  )  )  && !n.getBooleanProp ( Node.IS_CONSTANT_NAME )  )  {^138^139^^^^124^153^if  (  ( info != null && info.isConstant (  )  )  && !n.getBooleanProp ( Node.IS_CONSTANT_NAME )  )  {^[CLASS] PropogateConstantAnnotations  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  assertOnChange  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  
[BugLab_Wrong_Operator]^throw new IllegalStateException ( "Unexpected const change.\n" + "   instanceof   name: "+ name + "\n" + "  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^143^144^145^146^^138^151^throw new IllegalStateException ( "Unexpected const change.\n" + "  name: "+ name + "\n" + "  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^[CLASS] PropogateConstantAnnotations  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  assertOnChange  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  
[BugLab_Wrong_Operator]^throw new IllegalStateException ( "Unexpected const change.\n" + "  ^  name: "+ name + "\n" + "  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^143^144^145^146^^138^151^throw new IllegalStateException ( "Unexpected const change.\n" + "  name: "+ name + "\n" + "  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^[CLASS] PropogateConstantAnnotations  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  assertOnChange  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  
[BugLab_Wrong_Operator]^throw new IllegalStateException ( "Unexpected const change.\n" + "  <  name: "+ name + "\n" + "  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^143^144^145^146^^124^153^throw new IllegalStateException ( "Unexpected const change.\n" + "  name: "+ name + "\n" + "  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^[CLASS] PropogateConstantAnnotations  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  assertOnChange  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  
[BugLab_Wrong_Operator]^throw new IllegalStateException ( "Unexpected const change.\n" + "  &  name: "+ name + "\n" + "  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^143^144^145^146^^124^153^throw new IllegalStateException ( "Unexpected const change.\n" + "  name: "+ name + "\n" + "  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^[CLASS] PropogateConstantAnnotations  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  assertOnChange  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  
[BugLab_Wrong_Operator]^throw new IllegalStateException ( "Unexpected const change.\n" + "  >>  name: "+ name + "\n" + "  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^143^144^145^146^^124^153^throw new IllegalStateException ( "Unexpected const change.\n" + "  name: "+ name + "\n" + "  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^[CLASS] PropogateConstantAnnotations  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  assertOnChange  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  
[BugLab_Variable_Misuse]^Node externsAndJs = externsAndJs.getParent (  ) ;^172^^^^^171^178^Node externsAndJs = root.getParent (  ) ;^[CLASS] VerifyConstants  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  Map  constantMap  Node  externs  externsAndJs  root  
[BugLab_Variable_Misuse]^Preconditions.checkState ( root != null ) ;^173^^^^^171^178^Preconditions.checkState ( externsAndJs != null ) ;^[CLASS] VerifyConstants  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  Map  constantMap  Node  externs  externsAndJs  root  
[BugLab_Wrong_Operator]^Preconditions.checkState ( externsAndJs == null ) ;^173^^^^^171^178^Preconditions.checkState ( externsAndJs != null ) ;^[CLASS] VerifyConstants  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  Map  constantMap  Node  externs  externsAndJs  root  
[BugLab_Variable_Misuse]^Preconditions.checkState ( rootAndJs.hasChild ( externs )  ) ;^174^^^^^171^178^Preconditions.checkState ( externsAndJs.hasChild ( externs )  ) ;^[CLASS] VerifyConstants  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  Map  constantMap  Node  externs  externsAndJs  root  
[BugLab_Argument_Swapping]^Preconditions.checkState ( externs.hasChild ( externsAndJs )  ) ;^174^^^^^171^178^Preconditions.checkState ( externsAndJs.hasChild ( externs )  ) ;^[CLASS] VerifyConstants  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  Map  constantMap  Node  externs  externsAndJs  root  
[BugLab_Argument_Swapping]^Preconditions.checkState ( externsAndJsAndJs.hasChild ( externs )  ) ;^174^^^^^171^178^Preconditions.checkState ( externsAndJs.hasChild ( externs )  ) ;^[CLASS] VerifyConstants  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  Map  constantMap  Node  externs  externsAndJs  root  
[BugLab_Variable_Misuse]^Preconditions.checkState ( root.hasChild ( externs )  ) ;^174^^^^^171^178^Preconditions.checkState ( externsAndJs.hasChild ( externs )  ) ;^[CLASS] VerifyConstants  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  Map  constantMap  Node  externs  externsAndJs  root  
[BugLab_Variable_Misuse]^NodeTraversal.traverseRoots ( compiler, Lists.newArrayList ( externsAndJs, root ) , this ) ;^176^177^^^^171^178^NodeTraversal.traverseRoots ( compiler, Lists.newArrayList ( externs, root ) , this ) ;^[CLASS] VerifyConstants  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  Map  constantMap  Node  externs  externsAndJs  root  
[BugLab_Variable_Misuse]^NodeTraversal.traverseRoots ( compiler, Lists.newArrayList ( externs, externsAndJs ) , this ) ;^176^177^^^^171^178^NodeTraversal.traverseRoots ( compiler, Lists.newArrayList ( externs, root ) , this ) ;^[CLASS] VerifyConstants  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  Map  constantMap  Node  externs  externsAndJs  root  
[BugLab_Argument_Swapping]^NodeTraversal.traverseRoots ( compiler, Lists.newArrayList ( root, externs ) , this ) ;^176^177^^^^171^178^NodeTraversal.traverseRoots ( compiler, Lists.newArrayList ( externs, root ) , this ) ;^[CLASS] VerifyConstants  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  Map  constantMap  Node  externs  externsAndJs  root  
[BugLab_Argument_Swapping]^NodeTraversal.traverseRoots ( externs, Lists.newArrayList ( compiler, root ) , this ) ;^176^177^^^^171^178^NodeTraversal.traverseRoots ( compiler, Lists.newArrayList ( externs, root ) , this ) ;^[CLASS] VerifyConstants  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  Map  constantMap  Node  externs  externsAndJs  root  
[BugLab_Variable_Misuse]^compiler, Lists.newArrayList ( externsAndJs, root ) , this ) ;^177^^^^^171^178^compiler, Lists.newArrayList ( externs, root ) , this ) ;^[CLASS] VerifyConstants  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  Map  constantMap  Node  externs  externsAndJs  root  
[BugLab_Variable_Misuse]^compiler, Lists.newArrayList ( externs, externsAndJs ) , this ) ;^177^^^^^171^178^compiler, Lists.newArrayList ( externs, root ) , this ) ;^[CLASS] VerifyConstants  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  Map  constantMap  Node  externs  externsAndJs  root  
[BugLab_Argument_Swapping]^compiler, Lists.newArrayList ( root, externs ) , this ) ;^177^^^^^171^178^compiler, Lists.newArrayList ( externs, root ) , this ) ;^[CLASS] VerifyConstants  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  Map  constantMap  Node  externs  externsAndJs  root  
[BugLab_Wrong_Operator]^if  ( n.getType (  )  != Token.NAME )  {^184^^^^^169^199^if  ( n.getType (  )  == Token.NAME )  {^[CLASS] VerifyConstants  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  expectedConst  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[BugLab_Wrong_Operator]^if  ( n.getType (  )  >= Token.NAME )  {^184^^^^^169^199^if  ( n.getType (  )  == Token.NAME )  {^[CLASS] VerifyConstants  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  expectedConst  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[BugLab_Wrong_Operator]^if  ( n.getType (  )  <= Token.NAME )  {^184^^^^^169^199^if  ( n.getType (  )  == Token.NAME )  {^[CLASS] VerifyConstants  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  expectedConst  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[BugLab_Variable_Misuse]^if  ( parent.getString (  ) .isEmpty (  )  )  {^186^^^^^171^201^if  ( n.getString (  ) .isEmpty (  )  )  {^[CLASS] VerifyConstants  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  expectedConst  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[BugLab_Variable_Misuse]^if  ( isConst )  {^191^^^^^176^206^if  ( checkUserDeclarations )  {^[CLASS] VerifyConstants  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  expectedConst  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[BugLab_Wrong_Operator]^if  ( NodeUtil.isConstantName ( n ) && compiler.getCodingConvention (  ) .isConstant ( n.getString (  )  )  )  {^193^194^^^^178^208^if  ( NodeUtil.isConstantName ( n ) || compiler.getCodingConvention (  ) .isConstant ( n.getString (  )  )  )  {^[CLASS] VerifyConstants  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  expectedConst  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[BugLab_Wrong_Operator]^if  ( var == null )  {^201^^^^^193^210^if  ( var != null )  {^[CLASS] VerifyConstants  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  expectedConst  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[BugLab_Wrong_Operator]^if  ( info != null || info.isConstant (  )  )  {^205^^^^^193^210^if  ( info != null && info.isConstant (  )  )  {^[CLASS] VerifyConstants  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  expectedConst  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[BugLab_Wrong_Operator]^if  ( info == null && info.isConstant (  )  )  {^205^^^^^193^210^if  ( info != null && info.isConstant (  )  )  {^[CLASS] VerifyConstants  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  expectedConst  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[BugLab_Wrong_Literal]^expectedConst = true;^208^^^^^193^210^expectedConst = false;^[CLASS] VerifyConstants  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  expectedConst  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[BugLab_Wrong_Literal]^expectedConst = false;^206^^^^^193^210^expectedConst = true;^[CLASS] VerifyConstants  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  expectedConst  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[BugLab_Wrong_Literal]^expectedConst = true;^197^^^^^193^210^expectedConst = false;^[CLASS] VerifyConstants  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  expectedConst  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[BugLab_Variable_Misuse]^Var var = t.getScope (  ) .getVar ( parent.getString (  )  ) ;^200^^^^^193^210^Var var = t.getScope (  ) .getVar ( n.getString (  )  ) ;^[CLASS] VerifyConstants  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  expectedConst  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[BugLab_Argument_Swapping]^Var var = n.getScope (  ) .getVar ( t.getString (  )  ) ;^200^^^^^193^210^Var var = t.getScope (  ) .getVar ( n.getString (  )  ) ;^[CLASS] VerifyConstants  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  expectedConst  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[BugLab_Wrong_Literal]^expectedConst = false;^195^^^^^193^210^expectedConst = true;^[CLASS] VerifyConstants  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  expectedConst  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[BugLab_Wrong_Operator]^if  ( var == null )  {^201^^^^^186^216^if  ( var != null )  {^[CLASS] VerifyConstants  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  expectedConst  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[BugLab_Wrong_Operator]^if  ( info != null || info.isConstant (  )  )  {^205^^^^^190^220^if  ( info != null && info.isConstant (  )  )  {^[CLASS] VerifyConstants  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  expectedConst  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[BugLab_Wrong_Operator]^if  ( info == null && info.isConstant (  )  )  {^205^^^^^190^220^if  ( info != null && info.isConstant (  )  )  {^[CLASS] VerifyConstants  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  expectedConst  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[BugLab_Wrong_Literal]^expectedConst = true;^208^^^^^205^209^expectedConst = false;^[CLASS] VerifyConstants  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  expectedConst  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[BugLab_Wrong_Literal]^expectedConst = false;^206^^^^^191^221^expectedConst = true;^[CLASS] VerifyConstants  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  expectedConst  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[BugLab_Variable_Misuse]^if  ( checkUserDeclarations )  {^212^^^^^197^227^if  ( expectedConst )  {^[CLASS] VerifyConstants  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  expectedConst  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[BugLab_Variable_Misuse]^Preconditions.checkState ( checkUserDeclarations == isConst, "The name " + name + " should not be annotated as constant." ) ;^216^217^^^^212^218^Preconditions.checkState ( expectedConst == isConst, "The name " + name + " should not be annotated as constant." ) ;^[CLASS] VerifyConstants  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  expectedConst  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[BugLab_Variable_Misuse]^Preconditions.checkState ( expectedConst == checkUserDeclarations, "The name " + name + " should not be annotated as constant." ) ;^216^217^^^^212^218^Preconditions.checkState ( expectedConst == isConst, "The name " + name + " should not be annotated as constant." ) ;^[CLASS] VerifyConstants  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  expectedConst  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[BugLab_Argument_Swapping]^Preconditions.checkState ( isConst == expectedConst, "The name " + name + " should not be annotated as constant." ) ;^216^217^^^^212^218^Preconditions.checkState ( expectedConst == isConst, "The name " + name + " should not be annotated as constant." ) ;^[CLASS] VerifyConstants  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  expectedConst  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[BugLab_Argument_Swapping]^Preconditions.checkState ( name == isConst, "The expectedConst " + name + " should not be annotated as constant." ) ;^216^217^^^^212^218^Preconditions.checkState ( expectedConst == isConst, "The name " + name + " should not be annotated as constant." ) ;^[CLASS] VerifyConstants  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  expectedConst  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[BugLab_Wrong_Operator]^Preconditions.checkState ( expectedConst >= isConst, "The name " + name + " should not be annotated as constant." ) ;^216^217^^^^212^218^Preconditions.checkState ( expectedConst == isConst, "The name " + name + " should not be annotated as constant." ) ;^[CLASS] VerifyConstants  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  expectedConst  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[BugLab_Wrong_Operator]^Preconditions.checkState ( expectedConst == isConst, "The name "  <  name  <  " should not be annotated as constant." ) ;^216^217^^^^212^218^Preconditions.checkState ( expectedConst == isConst, "The name " + name + " should not be annotated as constant." ) ;^[CLASS] VerifyConstants  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  expectedConst  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[BugLab_Wrong_Operator]^Preconditions.checkState ( expectedConst == isConst, "The name "   instanceof   name + " should not be annotated as constant." ) ;^216^217^^^^212^218^Preconditions.checkState ( expectedConst == isConst, "The name " + name + " should not be annotated as constant." ) ;^[CLASS] VerifyConstants  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  expectedConst  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[BugLab_Variable_Misuse]^Preconditions.checkState ( checkUserDeclarations == isConst, "The name " + name + " is not annotated as constant." ) ;^213^214^^^^198^228^Preconditions.checkState ( expectedConst == isConst, "The name " + name + " is not annotated as constant." ) ;^[CLASS] VerifyConstants  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  expectedConst  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[BugLab_Variable_Misuse]^Preconditions.checkState ( expectedConst == checkUserDeclarations, "The name " + name + " is not annotated as constant." ) ;^213^214^^^^198^228^Preconditions.checkState ( expectedConst == isConst, "The name " + name + " is not annotated as constant." ) ;^[CLASS] VerifyConstants  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  expectedConst  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[BugLab_Argument_Swapping]^Preconditions.checkState ( isConst == expectedConst, "The name " + name + " is not annotated as constant." ) ;^213^214^^^^198^228^Preconditions.checkState ( expectedConst == isConst, "The name " + name + " is not annotated as constant." ) ;^[CLASS] VerifyConstants  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  expectedConst  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[BugLab_Argument_Swapping]^Preconditions.checkState ( name == isConst, "The expectedConst " + name + " is not annotated as constant." ) ;^213^214^^^^198^228^Preconditions.checkState ( expectedConst == isConst, "The name " + name + " is not annotated as constant." ) ;^[CLASS] VerifyConstants  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  expectedConst  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[BugLab_Wrong_Operator]^Preconditions.checkState ( expectedConst >= isConst, "The name " + name + " is not annotated as constant." ) ;^213^214^^^^198^228^Preconditions.checkState ( expectedConst == isConst, "The name " + name + " is not annotated as constant." ) ;^[CLASS] VerifyConstants  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  expectedConst  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[BugLab_Wrong_Operator]^Preconditions.checkState ( expectedConst == isConst, "The name "  >=  name  >=  " is not annotated as constant." ) ;^213^214^^^^198^228^Preconditions.checkState ( expectedConst == isConst, "The name " + name + " is not annotated as constant." ) ;^[CLASS] VerifyConstants  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  expectedConst  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[BugLab_Wrong_Operator]^Preconditions.checkState ( expectedConst == isConst, "The name "  >  name + " is not annotated as constant." ) ;^213^214^^^^198^228^Preconditions.checkState ( expectedConst == isConst, "The name " + name + " is not annotated as constant." ) ;^[CLASS] VerifyConstants  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  expectedConst  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[BugLab_Wrong_Literal]^expectedConst = false;^195^^^^^180^210^expectedConst = true;^[CLASS] VerifyConstants  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  expectedConst  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[BugLab_Wrong_Literal]^expectedConst = true;^197^^^^^182^212^expectedConst = false;^[CLASS] VerifyConstants  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  expectedConst  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[BugLab_Wrong_Literal]^expectedConst = true;^208^^^^^193^223^expectedConst = false;^[CLASS] VerifyConstants  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  expectedConst  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[BugLab_Wrong_Literal]^boolean expectedConst = true;^192^^^^^177^207^boolean expectedConst = false;^[CLASS] VerifyConstants  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  expectedConst  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[BugLab_Variable_Misuse]^Var var = t.getScope (  ) .getVar ( parent.getString (  )  ) ;^200^^^^^185^215^Var var = t.getScope (  ) .getVar ( n.getString (  )  ) ;^[CLASS] VerifyConstants  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  expectedConst  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[BugLab_Argument_Swapping]^Var var = n.getScope (  ) .getVar ( t.getString (  )  ) ;^200^^^^^185^215^Var var = t.getScope (  ) .getVar ( n.getString (  )  ) ;^[CLASS] VerifyConstants  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  expectedConst  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[BugLab_Variable_Misuse]^if  ( NodeUtil.isConstantName ( parent ) || compiler.getCodingConvention (  ) .isConstant ( n.getString (  )  )  )  {^193^194^^^^178^208^if  ( NodeUtil.isConstantName ( n ) || compiler.getCodingConvention (  ) .isConstant ( n.getString (  )  )  )  {^[CLASS] VerifyConstants  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  expectedConst  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[BugLab_Variable_Misuse]^|| compiler.getCodingConvention (  ) .isConstant ( parent.getString (  )  )  )  {^194^^^^^179^209^|| compiler.getCodingConvention (  ) .isConstant ( n.getString (  )  )  )  {^[CLASS] VerifyConstants  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  expectedConst  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[BugLab_Argument_Swapping]^|| n.getCodingConvention (  ) .isConstant ( compiler.getString (  )  )  )  {^194^^^^^179^209^|| compiler.getCodingConvention (  ) .isConstant ( n.getString (  )  )  )  {^[CLASS] VerifyConstants  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  expectedConst  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[BugLab_Variable_Misuse]^Preconditions.checkState ( isConst == isConst, "The name " + name + " is not annotated as constant." ) ;^213^214^^^^198^228^Preconditions.checkState ( expectedConst == isConst, "The name " + name + " is not annotated as constant." ) ;^[CLASS] VerifyConstants  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  expectedConst  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[BugLab_Argument_Swapping]^Preconditions.checkState ( expectedConst == name, "The isConst " + name + " is not annotated as constant." ) ;^213^214^^^^198^228^Preconditions.checkState ( expectedConst == isConst, "The name " + name + " is not annotated as constant." ) ;^[CLASS] VerifyConstants  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  expectedConst  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[BugLab_Wrong_Operator]^Preconditions.checkState ( expectedConst <= isConst, "The name " + name + " is not annotated as constant." ) ;^213^214^^^^198^228^Preconditions.checkState ( expectedConst == isConst, "The name " + name + " is not annotated as constant." ) ;^[CLASS] VerifyConstants  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  expectedConst  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[BugLab_Wrong_Operator]^Preconditions.checkState ( expectedConst == isConst, "The name "  >>  name  >>  " is not annotated as constant." ) ;^213^214^^^^198^228^Preconditions.checkState ( expectedConst == isConst, "The name " + name + " is not annotated as constant." ) ;^[CLASS] VerifyConstants  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  expectedConst  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[BugLab_Variable_Misuse]^Preconditions.checkState ( checkUserDeclarations == isConst, "The name " + name + " should not be annotated as constant." ) ;^216^217^^^^201^231^Preconditions.checkState ( expectedConst == isConst, "The name " + name + " should not be annotated as constant." ) ;^[CLASS] VerifyConstants  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  expectedConst  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[BugLab_Argument_Swapping]^Preconditions.checkState ( isConst == expectedConst, "The name " + name + " should not be annotated as constant." ) ;^216^217^^^^201^231^Preconditions.checkState ( expectedConst == isConst, "The name " + name + " should not be annotated as constant." ) ;^[CLASS] VerifyConstants  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  expectedConst  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[BugLab_Argument_Swapping]^Preconditions.checkState ( name == isConst, "The expectedConst " + name + " should not be annotated as constant." ) ;^216^217^^^^201^231^Preconditions.checkState ( expectedConst == isConst, "The name " + name + " should not be annotated as constant." ) ;^[CLASS] VerifyConstants  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  expectedConst  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[BugLab_Wrong_Operator]^Preconditions.checkState ( expectedConst > isConst, "The name " + name + " should not be annotated as constant." ) ;^216^217^^^^201^231^Preconditions.checkState ( expectedConst == isConst, "The name " + name + " should not be annotated as constant." ) ;^[CLASS] VerifyConstants  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  expectedConst  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[BugLab_Wrong_Operator]^Preconditions.checkState ( expectedConst == isConst, "The name "   instanceof   name   instanceof   " should not be annotated as constant." ) ;^216^217^^^^201^231^Preconditions.checkState ( expectedConst == isConst, "The name " + name + " should not be annotated as constant." ) ;^[CLASS] VerifyConstants  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  expectedConst  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[BugLab_Wrong_Operator]^Preconditions.checkState ( expectedConst == isConst, "The name "  ==  name + " should not be annotated as constant." ) ;^216^217^^^^201^231^Preconditions.checkState ( expectedConst == isConst, "The name " + name + " should not be annotated as constant." ) ;^[CLASS] VerifyConstants  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  expectedConst  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[BugLab_Argument_Swapping]^if  ( NodeUtil.isConstantName ( compiler ) || n.getCodingConvention (  ) .isConstant ( n.getString (  )  )  )  {^193^194^^^^178^208^if  ( NodeUtil.isConstantName ( n ) || compiler.getCodingConvention (  ) .isConstant ( n.getString (  )  )  )  {^[CLASS] VerifyConstants  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  expectedConst  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[BugLab_Variable_Misuse]^if  ( isConst )  {^212^^^^^197^227^if  ( expectedConst )  {^[CLASS] VerifyConstants  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  expectedConst  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[BugLab_Argument_Swapping]^Preconditions.checkState ( expectedConst == name, "The isConst " + name + " should not be annotated as constant." ) ;^216^217^^^^212^218^Preconditions.checkState ( expectedConst == isConst, "The name " + name + " should not be annotated as constant." ) ;^[CLASS] VerifyConstants  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  expectedConst  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[BugLab_Wrong_Operator]^Preconditions.checkState ( expectedConst != isConst, "The name " + name + " should not be annotated as constant." ) ;^216^217^^^^212^218^Preconditions.checkState ( expectedConst == isConst, "The name " + name + " should not be annotated as constant." ) ;^[CLASS] VerifyConstants  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  expectedConst  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[BugLab_Wrong_Operator]^Preconditions.checkState ( expectedConst == isConst, "The name "  <<  name  <<  " should not be annotated as constant." ) ;^216^217^^^^212^218^Preconditions.checkState ( expectedConst == isConst, "The name " + name + " should not be annotated as constant." ) ;^[CLASS] VerifyConstants  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  expectedConst  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[BugLab_Wrong_Operator]^Preconditions.checkState ( expectedConst == isConst, "The name "  !=  name + " should not be annotated as constant." ) ;^216^217^^^^212^218^Preconditions.checkState ( expectedConst == isConst, "The name " + name + " should not be annotated as constant." ) ;^[CLASS] VerifyConstants  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  expectedConst  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[BugLab_Wrong_Operator]^Preconditions.checkState ( expectedConst != isConst, "The name " + name + " is not annotated as constant." ) ;^213^214^^^^198^228^Preconditions.checkState ( expectedConst == isConst, "The name " + name + " is not annotated as constant." ) ;^[CLASS] VerifyConstants  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  expectedConst  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[BugLab_Wrong_Operator]^Preconditions.checkState ( expectedConst == isConst, "The name "  ==  name  ==  " is not annotated as constant." ) ;^213^214^^^^198^228^Preconditions.checkState ( expectedConst == isConst, "The name " + name + " is not annotated as constant." ) ;^[CLASS] VerifyConstants  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  expectedConst  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[BugLab_Wrong_Operator]^Preconditions.checkState ( expectedConst == isConst, "The name "  ^  name + " is not annotated as constant." ) ;^213^214^^^^198^228^Preconditions.checkState ( expectedConst == isConst, "The name " + name + " is not annotated as constant." ) ;^[CLASS] VerifyConstants  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  expectedConst  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[BugLab_Wrong_Operator]^if  ( value != null )  {^222^^^^^207^237^if  ( value == null )  {^[CLASS] VerifyConstants  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  expectedConst  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[BugLab_Variable_Misuse]^Preconditions.checkState ( value.booleanValue (  )  == expectedConst, "The name " + name + " is not consistently annotated as " + "constant." ) ;^225^226^227^^^222^228^Preconditions.checkState ( value.booleanValue (  )  == isConst, "The name " + name + " is not consistently annotated as " + "constant." ) ;^[CLASS] VerifyConstants  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  expectedConst  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[BugLab_Argument_Swapping]^Preconditions.checkState ( name.booleanValue (  )  == isConst, "The value " + name + " is not consistently annotated as " + "constant." ) ;^225^226^227^^^222^228^Preconditions.checkState ( value.booleanValue (  )  == isConst, "The name " + name + " is not consistently annotated as " + "constant." ) ;^[CLASS] VerifyConstants  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  expectedConst  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[BugLab_Argument_Swapping]^Preconditions.checkState ( value.booleanValue (  )  == name, "The isConst " + name + " is not consistently annotated as " + "constant." ) ;^225^226^227^^^222^228^Preconditions.checkState ( value.booleanValue (  )  == isConst, "The name " + name + " is not consistently annotated as " + "constant." ) ;^[CLASS] VerifyConstants  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  expectedConst  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[BugLab_Wrong_Operator]^Preconditions.checkState ( value.booleanValue (  )  != isConst, "The name " + name + " is not consistently annotated as " + "constant." ) ;^225^226^227^^^222^228^Preconditions.checkState ( value.booleanValue (  )  == isConst, "The name " + name + " is not consistently annotated as " + "constant." ) ;^[CLASS] VerifyConstants  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  expectedConst  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[BugLab_Wrong_Operator]^Preconditions.checkState ( value.booleanValue (  |  )  == isConst, "The name " + name + " is not consistently annotated as " + "constant." ) ;^225^226^227^^^222^228^Preconditions.checkState ( value.booleanValue (  )  == isConst, "The name " + name + " is not consistently annotated as " + "constant." ) ;^[CLASS] VerifyConstants  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  expectedConst  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[BugLab_Wrong_Operator]^Preconditions.checkState ( value.booleanValue (  )  == isConst, "The name "  >>  name  >>  " is not consistently annotated as " + "constant." ) ;^225^226^227^^^222^228^Preconditions.checkState ( value.booleanValue (  )  == isConst, "The name " + name + " is not consistently annotated as " + "constant." ) ;^[CLASS] VerifyConstants  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  expectedConst  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[BugLab_Wrong_Operator]^Preconditions.checkState ( value.booleanValue (  )  == isConst, "The name "  !=  name + " is not consistently annotated as " + "constant." ) ;^225^226^227^^^222^228^Preconditions.checkState ( value.booleanValue (  )  == isConst, "The name " + name + " is not consistently annotated as " + "constant." ) ;^[CLASS] VerifyConstants  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  expectedConst  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[BugLab_Variable_Misuse]^constantMap.put ( name, expectedConst ) ;^223^^^^^208^238^constantMap.put ( name, isConst ) ;^[CLASS] VerifyConstants  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  expectedConst  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[BugLab_Variable_Misuse]^String parentame = n.getString (  ) ;^185^^^^^170^200^String name = n.getString (  ) ;^[CLASS] VerifyConstants  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  expectedConst  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[BugLab_Variable_Misuse]^boolean isConst = parent.getBooleanProp ( Node.IS_CONSTANT_NAME ) ;^190^^^^^175^205^boolean isConst = n.getBooleanProp ( Node.IS_CONSTANT_NAME ) ;^[CLASS] VerifyConstants  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  expectedConst  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[BugLab_Variable_Misuse]^Boolean value = null.get ( name ) ;^221^^^^^206^236^Boolean value = constantMap.get ( name ) ;^[CLASS] VerifyConstants  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  expectedConst  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[BugLab_Argument_Swapping]^Boolean value = name.get ( constantMap ) ;^221^^^^^206^236^Boolean value = constantMap.get ( name ) ;^[CLASS] VerifyConstants  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  expectedConst  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[BugLab_Wrong_Operator]^Preconditions.checkState ( expectedConst == isConst, "The name "  ^  name  ^  " is not annotated as constant." ) ;^213^214^^^^198^228^Preconditions.checkState ( expectedConst == isConst, "The name " + name + " is not annotated as constant." ) ;^[CLASS] VerifyConstants  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  expectedConst  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[BugLab_Wrong_Operator]^Preconditions.checkState ( expectedConst == isConst, "The name "  &  name + " is not annotated as constant." ) ;^213^214^^^^198^228^Preconditions.checkState ( expectedConst == isConst, "The name " + name + " is not annotated as constant." ) ;^[CLASS] VerifyConstants  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  expectedConst  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[BugLab_Variable_Misuse]^Preconditions.checkState ( expectedConst == checkUserDeclarations, "The name " + name + " should not be annotated as constant." ) ;^216^217^^^^201^231^Preconditions.checkState ( expectedConst == isConst, "The name " + name + " should not be annotated as constant." ) ;^[CLASS] VerifyConstants  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  expectedConst  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[BugLab_Argument_Swapping]^Preconditions.checkState ( expectedConst == name, "The isConst " + name + " should not be annotated as constant." ) ;^216^217^^^^201^231^Preconditions.checkState ( expectedConst == isConst, "The name " + name + " should not be annotated as constant." ) ;^[CLASS] VerifyConstants  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  expectedConst  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[BugLab_Wrong_Operator]^Preconditions.checkState ( expectedConst != isConst, "The name " + name + " should not be annotated as constant." ) ;^216^217^^^^201^231^Preconditions.checkState ( expectedConst == isConst, "The name " + name + " should not be annotated as constant." ) ;^[CLASS] VerifyConstants  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  expectedConst  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[BugLab_Wrong_Operator]^Preconditions.checkState ( expectedConst == isConst, "The name "  ==  name  ==  " should not be annotated as constant." ) ;^216^217^^^^201^231^Preconditions.checkState ( expectedConst == isConst, "The name " + name + " should not be annotated as constant." ) ;^[CLASS] VerifyConstants  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  expectedConst  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[BugLab_Wrong_Operator]^Preconditions.checkState ( expectedConst == isConst, "The name "  |  name + " should not be annotated as constant." ) ;^216^217^^^^201^231^Preconditions.checkState ( expectedConst == isConst, "The name " + name + " should not be annotated as constant." ) ;^[CLASS] VerifyConstants  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  expectedConst  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[BugLab_Argument_Swapping]^constantMap.put ( isConst, name ) ;^223^^^^^208^238^constantMap.put ( name, isConst ) ;^[CLASS] VerifyConstants  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  expectedConst  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[BugLab_Argument_Swapping]^Preconditions.checkState ( isConst.booleanValue (  )  == value, "The name " + name + " is not consistently annotated as " + "constant." ) ;^225^226^227^^^210^240^Preconditions.checkState ( value.booleanValue (  )  == isConst, "The name " + name + " is not consistently annotated as " + "constant." ) ;^[CLASS] VerifyConstants  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  expectedConst  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[BugLab_Argument_Swapping]^Preconditions.checkState ( value.booleanValue (  )  == name, "The isConst " + name + " is not consistently annotated as " + "constant." ) ;^225^226^227^^^210^240^Preconditions.checkState ( value.booleanValue (  )  == isConst, "The name " + name + " is not consistently annotated as " + "constant." ) ;^[CLASS] VerifyConstants  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  expectedConst  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[BugLab_Wrong_Operator]^Preconditions.checkState ( value.booleanValue (  )  != isConst, "The name " + name + " is not consistently annotated as " + "constant." ) ;^225^226^227^^^210^240^Preconditions.checkState ( value.booleanValue (  )  == isConst, "The name " + name + " is not consistently annotated as " + "constant." ) ;^[CLASS] VerifyConstants  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  expectedConst  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[BugLab_Wrong_Operator]^Preconditions.checkState ( value.booleanValue (  ==  )  == isConst, "The name " + name + " is not consistently annotated as " + "constant." ) ;^225^226^227^^^210^240^Preconditions.checkState ( value.booleanValue (  )  == isConst, "The name " + name + " is not consistently annotated as " + "constant." ) ;^[CLASS] VerifyConstants  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  expectedConst  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[BugLab_Wrong_Operator]^Preconditions.checkState ( value.booleanValue (  )  == isConst, "The name "  |  name  |  " is not consistently annotated as " + "constant." ) ;^225^226^227^^^210^240^Preconditions.checkState ( value.booleanValue (  )  == isConst, "The name " + name + " is not consistently annotated as " + "constant." ) ;^[CLASS] VerifyConstants  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  expectedConst  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[BugLab_Wrong_Operator]^Preconditions.checkState ( value.booleanValue (  )  == isConst, "The name "  <<  name + " is not consistently annotated as " + "constant." ) ;^225^226^227^^^210^240^Preconditions.checkState ( value.booleanValue (  )  == isConst, "The name " + name + " is not consistently annotated as " + "constant." ) ;^[CLASS] VerifyConstants  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  expectedConst  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[BugLab_Wrong_Operator]^Preconditions.checkState ( expectedConst == isConst, "The name "  !=  name  !=  " should not be annotated as constant." ) ;^216^217^^^^212^218^Preconditions.checkState ( expectedConst == isConst, "The name " + name + " should not be annotated as constant." ) ;^[CLASS] VerifyConstants  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  expectedConst  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[BugLab_Wrong_Operator]^Preconditions.checkState ( expectedConst == isConst, "The name "  <  name + " should not be annotated as constant." ) ;^216^217^^^^212^218^Preconditions.checkState ( expectedConst == isConst, "The name " + name + " should not be annotated as constant." ) ;^[CLASS] VerifyConstants  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  expectedConst  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[BugLab_Variable_Misuse]^Preconditions.checkState ( expectedConst == expectedConst, "The name " + name + " is not annotated as constant." ) ;^213^214^^^^198^228^Preconditions.checkState ( expectedConst == isConst, "The name " + name + " is not annotated as constant." ) ;^[CLASS] VerifyConstants  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  expectedConst  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[BugLab_Wrong_Operator]^Preconditions.checkState ( expectedConst == isConst, "The name "   instanceof   name + " is not annotated as constant." ) ;^213^214^^^^198^228^Preconditions.checkState ( expectedConst == isConst, "The name " + name + " is not annotated as constant." ) ;^[CLASS] VerifyConstants  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  expectedConst  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[BugLab_Wrong_Operator]^Preconditions.checkState ( expectedConst == isConst, "The name "   instanceof   name   instanceof   " is not annotated as constant." ) ;^213^214^^^^198^228^Preconditions.checkState ( expectedConst == isConst, "The name " + name + " is not annotated as constant." ) ;^[CLASS] VerifyConstants  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  expectedConst  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[BugLab_Wrong_Operator]^Preconditions.checkState ( expectedConst == isConst, "The name "  <=  name + " is not annotated as constant." ) ;^213^214^^^^198^228^Preconditions.checkState ( expectedConst == isConst, "The name " + name + " is not annotated as constant." ) ;^[CLASS] VerifyConstants  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  expectedConst  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[BugLab_Variable_Misuse]^Preconditions.checkState ( isConst == isConst, "The name " + name + " should not be annotated as constant." ) ;^216^217^^^^201^231^Preconditions.checkState ( expectedConst == isConst, "The name " + name + " should not be annotated as constant." ) ;^[CLASS] VerifyConstants  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  expectedConst  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[BugLab_Variable_Misuse]^Preconditions.checkState ( expectedConst == expectedConst, "The name " + name + " should not be annotated as constant." ) ;^216^217^^^^201^231^Preconditions.checkState ( expectedConst == isConst, "The name " + name + " should not be annotated as constant." ) ;^[CLASS] VerifyConstants  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  expectedConst  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[BugLab_Wrong_Operator]^Preconditions.checkState ( expectedConst < isConst, "The name " + name + " should not be annotated as constant." ) ;^216^217^^^^201^231^Preconditions.checkState ( expectedConst == isConst, "The name " + name + " should not be annotated as constant." ) ;^[CLASS] VerifyConstants  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  expectedConst  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[BugLab_Wrong_Operator]^Preconditions.checkState ( expectedConst == isConst, "The name "  >=  name  >=  " should not be annotated as constant." ) ;^216^217^^^^201^231^Preconditions.checkState ( expectedConst == isConst, "The name " + name + " should not be annotated as constant." ) ;^[CLASS] VerifyConstants  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  expectedConst  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[BugLab_Wrong_Operator]^Preconditions.checkState ( expectedConst == isConst, "The name "  <=  name + " should not be annotated as constant." ) ;^216^217^^^^201^231^Preconditions.checkState ( expectedConst == isConst, "The name " + name + " should not be annotated as constant." ) ;^[CLASS] VerifyConstants  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  expectedConst  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[BugLab_Variable_Misuse]^Preconditions.checkState ( isConst == isConst, "The name " + name + " should not be annotated as constant." ) ;^216^217^^^^212^218^Preconditions.checkState ( expectedConst == isConst, "The name " + name + " should not be annotated as constant." ) ;^[CLASS] VerifyConstants  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  expectedConst  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[BugLab_Variable_Misuse]^Preconditions.checkState ( expectedConst == expectedConst, "The name " + name + " should not be annotated as constant." ) ;^216^217^^^^212^218^Preconditions.checkState ( expectedConst == isConst, "The name " + name + " should not be annotated as constant." ) ;^[CLASS] VerifyConstants  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  expectedConst  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[BugLab_Wrong_Operator]^Preconditions.checkState ( expectedConst == isConst, "The name "  &&  name  &&  " should not be annotated as constant." ) ;^216^217^^^^212^218^Preconditions.checkState ( expectedConst == isConst, "The name " + name + " should not be annotated as constant." ) ;^[CLASS] VerifyConstants  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  expectedConst  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[BugLab_Wrong_Operator]^Preconditions.checkState ( expectedConst == isConst, "The name "  ||  name + " should not be annotated as constant." ) ;^216^217^^^^212^218^Preconditions.checkState ( expectedConst == isConst, "The name " + name + " should not be annotated as constant." ) ;^[CLASS] VerifyConstants  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  expectedConst  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[BugLab_Wrong_Operator]^Preconditions.checkState ( expectedConst == isConst, "The name "  >>  name + " is not annotated as constant." ) ;^213^214^^^^198^228^Preconditions.checkState ( expectedConst == isConst, "The name " + name + " is not annotated as constant." ) ;^[CLASS] VerifyConstants  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  expectedConst  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[BugLab_Argument_Swapping]^Preconditions.checkState ( isConst.booleanValue (  )  == value, "The name " + name + " is not consistently annotated as " + "constant." ) ;^225^226^227^^^222^228^Preconditions.checkState ( value.booleanValue (  )  == isConst, "The name " + name + " is not consistently annotated as " + "constant." ) ;^[CLASS] VerifyConstants  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  expectedConst  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[BugLab_Wrong_Operator]^Preconditions.checkState ( value.booleanValue (  )  <= isConst, "The name " + name + " is not consistently annotated as " + "constant." ) ;^225^226^227^^^222^228^Preconditions.checkState ( value.booleanValue (  )  == isConst, "The name " + name + " is not consistently annotated as " + "constant." ) ;^[CLASS] VerifyConstants  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  expectedConst  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[BugLab_Wrong_Operator]^Preconditions.checkState ( value.booleanValue (  &  )  == isConst, "The name " + name + " is not consistently annotated as " + "constant." ) ;^225^226^227^^^222^228^Preconditions.checkState ( value.booleanValue (  )  == isConst, "The name " + name + " is not consistently annotated as " + "constant." ) ;^[CLASS] VerifyConstants  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  expectedConst  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[BugLab_Wrong_Operator]^Preconditions.checkState ( value.booleanValue (  )  == isConst, "The name "  <=  name  <=  " is not consistently annotated as " + "constant." ) ;^225^226^227^^^222^228^Preconditions.checkState ( value.booleanValue (  )  == isConst, "The name " + name + " is not consistently annotated as " + "constant." ) ;^[CLASS] VerifyConstants  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  expectedConst  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[BugLab_Wrong_Operator]^Preconditions.checkState ( value.booleanValue (  )  == isConst, "The name "  <=  name + " is not consistently annotated as " + "constant." ) ;^225^226^227^^^222^228^Preconditions.checkState ( value.booleanValue (  )  == isConst, "The name " + name + " is not consistently annotated as " + "constant." ) ;^[CLASS] VerifyConstants  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  expectedConst  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[BugLab_Variable_Misuse]^if  ( parent.getType (  )  == Token.NAME )  {^184^^^^^169^199^if  ( n.getType (  )  == Token.NAME )  {^[CLASS] VerifyConstants  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  expectedConst  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[BugLab_Wrong_Operator]^Preconditions.checkState ( expectedConst == isConst, "The name "  &  name  &  " is not annotated as constant." ) ;^213^214^^^^198^228^Preconditions.checkState ( expectedConst == isConst, "The name " + name + " is not annotated as constant." ) ;^[CLASS] VerifyConstants  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  expectedConst  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[BugLab_Wrong_Operator]^Preconditions.checkState ( expectedConst == isConst, "The name "  !=  name + " is not annotated as constant." ) ;^213^214^^^^198^228^Preconditions.checkState ( expectedConst == isConst, "The name " + name + " is not annotated as constant." ) ;^[CLASS] VerifyConstants  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  expectedConst  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[BugLab_Wrong_Operator]^Preconditions.checkState ( expectedConst == isConst, "The name "  <=  name  <=  " should not be annotated as constant." ) ;^216^217^^^^201^231^Preconditions.checkState ( expectedConst == isConst, "The name " + name + " should not be annotated as constant." ) ;^[CLASS] VerifyConstants  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  expectedConst  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[BugLab_Wrong_Operator]^Preconditions.checkState ( expectedConst == isConst, "The name "  !=  name + " should not be annotated as constant." ) ;^216^217^^^^201^231^Preconditions.checkState ( expectedConst == isConst, "The name " + name + " should not be annotated as constant." ) ;^[CLASS] VerifyConstants  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  expectedConst  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[BugLab_Variable_Misuse]^Preconditions.checkState ( value.booleanValue (  )  == expectedConst, "The name " + name + " is not consistently annotated as " + "constant." ) ;^225^226^227^^^210^240^Preconditions.checkState ( value.booleanValue (  )  == isConst, "The name " + name + " is not consistently annotated as " + "constant." ) ;^[CLASS] VerifyConstants  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  expectedConst  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[BugLab_Argument_Swapping]^Preconditions.checkState ( name.booleanValue (  )  == isConst, "The value " + name + " is not consistently annotated as " + "constant." ) ;^225^226^227^^^210^240^Preconditions.checkState ( value.booleanValue (  )  == isConst, "The name " + name + " is not consistently annotated as " + "constant." ) ;^[CLASS] VerifyConstants  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  expectedConst  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[BugLab_Wrong_Operator]^Preconditions.checkState ( value.booleanValue (  )  > isConst, "The name " + name + " is not consistently annotated as " + "constant." ) ;^225^226^227^^^210^240^Preconditions.checkState ( value.booleanValue (  )  == isConst, "The name " + name + " is not consistently annotated as " + "constant." ) ;^[CLASS] VerifyConstants  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  expectedConst  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[BugLab_Wrong_Operator]^Preconditions.checkState ( value.booleanValue (  &  )  == isConst, "The name " + name + " is not consistently annotated as " + "constant." ) ;^225^226^227^^^210^240^Preconditions.checkState ( value.booleanValue (  )  == isConst, "The name " + name + " is not consistently annotated as " + "constant." ) ;^[CLASS] VerifyConstants  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  expectedConst  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[BugLab_Wrong_Operator]^Preconditions.checkState ( value.booleanValue (  )  == isConst, "The name "  ||  name  ||  " is not consistently annotated as " + "constant." ) ;^225^226^227^^^210^240^Preconditions.checkState ( value.booleanValue (  )  == isConst, "The name " + name + " is not consistently annotated as " + "constant." ) ;^[CLASS] VerifyConstants  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  expectedConst  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[BugLab_Wrong_Operator]^Preconditions.checkState ( value.booleanValue (  )  == isConst, "The name "  >=  name + " is not consistently annotated as " + "constant." ) ;^225^226^227^^^210^240^Preconditions.checkState ( value.booleanValue (  )  == isConst, "The name " + name + " is not consistently annotated as " + "constant." ) ;^[CLASS] VerifyConstants  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  expectedConst  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[BugLab_Variable_Misuse]^Preconditions.checkState ( replacement.getType (  )  == Token.NAME ) ;^450^^^^^435^465^Preconditions.checkState ( n.getType (  )  == Token.NAME ) ;^[CLASS] DuplicateDeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] boolean  Scope  s  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  String  name  
[BugLab_Wrong_Operator]^Preconditions.checkState ( n.getType (  )  >= Token.NAME ) ;^450^^^^^435^465^Preconditions.checkState ( n.getType (  )  == Token.NAME ) ;^[CLASS] DuplicateDeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] boolean  Scope  s  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  String  name  
[BugLab_Variable_Misuse]^Preconditions.checkState ( value.getType (  )  == Token.NAME ) ;^450^^^^^435^465^Preconditions.checkState ( n.getType (  )  == Token.NAME ) ;^[CLASS] DuplicateDeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] boolean  Scope  s  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  String  name  
[BugLab_Variable_Misuse]^if  ( replacement.getType (  )  == Token.VAR )  {^451^^^^^436^466^if  ( parent.getType (  )  == Token.VAR )  {^[CLASS] DuplicateDeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] boolean  Scope  s  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  String  name  
[BugLab_Wrong_Operator]^if  ( parent.getType (  )  != Token.VAR )  {^451^^^^^436^466^if  ( parent.getType (  )  == Token.VAR )  {^[CLASS] DuplicateDeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] boolean  Scope  s  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  String  name  
[BugLab_Wrong_Operator]^if  ( parent.getType (  )  <= Token.VAR )  {^451^^^^^436^466^if  ( parent.getType (  )  == Token.VAR )  {^[CLASS] DuplicateDeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] boolean  Scope  s  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  String  name  
[BugLab_Variable_Misuse]^if  ( NodeUtil.isStatementBlock ( value )  )  {^481^^^^^471^493^if  ( NodeUtil.isStatementBlock ( gramps )  )  {^[CLASS] DuplicateDeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] boolean  Scope  s  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  String  name  
[BugLab_Variable_Misuse]^} else if  ( value.getType (  )  == Token.FOR )  {^483^^^^^471^493^} else if  ( gramps.getType (  )  == Token.FOR )  {^[CLASS] DuplicateDeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] boolean  Scope  s  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  String  name  
[BugLab_Wrong_Operator]^} else if  ( gramps.getType (  )  >= Token.FOR )  {^483^^^^^471^493^} else if  ( gramps.getType (  )  == Token.FOR )  {^[CLASS] DuplicateDeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] boolean  Scope  s  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  String  name  
[BugLab_Variable_Misuse]^Preconditions.checkState ( value.getType (  )  == Token.LABEL ) ;^490^^^^^471^493^Preconditions.checkState ( gramps.getType (  )  == Token.LABEL ) ;^[CLASS] DuplicateDeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] boolean  Scope  s  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  String  name  
[BugLab_Wrong_Operator]^Preconditions.checkState ( gramps.getType (  )  > Token.LABEL ) ;^490^^^^^471^493^Preconditions.checkState ( gramps.getType (  )  == Token.LABEL ) ;^[CLASS] DuplicateDeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] boolean  Scope  s  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  String  name  
[BugLab_Variable_Misuse]^Preconditions.checkState ( replacement.getType (  )  == Token.LABEL ) ;^490^^^^^471^493^Preconditions.checkState ( gramps.getType (  )  == Token.LABEL ) ;^[CLASS] DuplicateDeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] boolean  Scope  s  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  String  name  
[BugLab_Variable_Misuse]^gramps.replaceChild ( value, new Node ( Token.EMPTY )  ) ;^491^^^^^471^493^gramps.replaceChild ( parent, new Node ( Token.EMPTY )  ) ;^[CLASS] DuplicateDeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] boolean  Scope  s  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  String  name  
[BugLab_Variable_Misuse]^parent.removeChild ( value ) ;^487^^^^^471^493^parent.removeChild ( n ) ;^[CLASS] DuplicateDeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] boolean  Scope  s  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  String  name  
[BugLab_Variable_Misuse]^gramps.replaceChild ( value, n ) ;^488^^^^^471^493^gramps.replaceChild ( parent, n ) ;^[CLASS] DuplicateDeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] boolean  Scope  s  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  String  name  
[BugLab_Variable_Misuse]^gramps.replaceChild ( parent, value ) ;^488^^^^^471^493^gramps.replaceChild ( parent, n ) ;^[CLASS] DuplicateDeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] boolean  Scope  s  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  String  name  
[BugLab_Argument_Swapping]^gramps.replaceChild ( n, parent ) ;^488^^^^^471^493^gramps.replaceChild ( parent, n ) ;^[CLASS] DuplicateDeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] boolean  Scope  s  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  String  name  
[BugLab_Variable_Misuse]^} else if  ( replacement.getType (  )  == Token.FOR )  {^483^^^^^471^493^} else if  ( gramps.getType (  )  == Token.FOR )  {^[CLASS] DuplicateDeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] boolean  Scope  s  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  String  name  
[BugLab_Wrong_Operator]^Preconditions.checkState ( gramps.getType (  )  >= Token.LABEL ) ;^490^^^^^471^493^Preconditions.checkState ( gramps.getType (  )  == Token.LABEL ) ;^[CLASS] DuplicateDeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] boolean  Scope  s  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  String  name  
[BugLab_Variable_Misuse]^gramps.removeChild ( value ) ;^482^^^^^471^493^gramps.removeChild ( parent ) ;^[CLASS] DuplicateDeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] boolean  Scope  s  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  String  name  
[BugLab_Wrong_Operator]^} else if  ( gramps.getType (  )  != Token.FOR )  {^483^^^^^471^493^} else if  ( gramps.getType (  )  == Token.FOR )  {^[CLASS] DuplicateDeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] boolean  Scope  s  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  String  name  
[BugLab_Wrong_Operator]^Preconditions.checkState ( gramps.getType (  )  != Token.LABEL ) ;^490^^^^^471^493^Preconditions.checkState ( gramps.getType (  )  == Token.LABEL ) ;^[CLASS] DuplicateDeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] boolean  Scope  s  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  String  name  
[BugLab_Variable_Misuse]^gramps.replaceChild ( parent, new Node ( Token.2 )  ) ;^491^^^^^471^493^gramps.replaceChild ( parent, new Node ( Token.EMPTY )  ) ;^[CLASS] DuplicateDeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] boolean  Scope  s  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  String  name  
[BugLab_Argument_Swapping]^Node replacement = valueew Node ( Token.ASSIGN, n, n ) ;^477^^^^^462^492^Node replacement = new Node ( Token.ASSIGN, n, value ) ;^[CLASS] DuplicateDeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] boolean  Scope  s  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  String  name  
[BugLab_Variable_Misuse]^gramps.replaceChild ( parent, new Node ( Token.EXPR_RESULT, value )  ) ;^478^^^^^463^493^gramps.replaceChild ( parent, new Node ( Token.EXPR_RESULT, replacement )  ) ;^[CLASS] DuplicateDeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] boolean  Scope  s  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  String  name  
[BugLab_Variable_Misuse]^Node replacement = valueew Node ( Token.ASSIGN, n, value ) ;^477^^^^^462^492^Node replacement = new Node ( Token.ASSIGN, n, value ) ;^[CLASS] DuplicateDeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] boolean  Scope  s  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  String  name  
[BugLab_Variable_Misuse]^Node replacement = new Node ( Token.ASSIGN, n, parent ) ;^477^^^^^462^492^Node replacement = new Node ( Token.ASSIGN, n, value ) ;^[CLASS] DuplicateDeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] boolean  Scope  s  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  String  name  
[BugLab_Variable_Misuse]^Node value = value.getFirstChild (  ) ;^475^^^^^460^490^Node value = n.getFirstChild (  ) ;^[CLASS] DuplicateDeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] boolean  Scope  s  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  String  name  
[BugLab_Variable_Misuse]^n.removeChild ( replacement ) ;^476^^^^^461^491^n.removeChild ( value ) ;^[CLASS] DuplicateDeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] boolean  Scope  s  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  String  name  
[BugLab_Variable_Misuse]^gramps.replaceChild ( value, new Node ( Token.EXPR_RESULT, replacement )  ) ;^478^^^^^463^493^gramps.replaceChild ( parent, new Node ( Token.EXPR_RESULT, replacement )  ) ;^[CLASS] DuplicateDeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] boolean  Scope  s  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  String  name  
[BugLab_Argument_Swapping]^gramps.replaceChild ( replacement, new Node ( Token.EXPR_RESULT, parent )  ) ;^478^^^^^463^493^gramps.replaceChild ( parent, new Node ( Token.EXPR_RESULT, replacement )  ) ;^[CLASS] DuplicateDeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] boolean  Scope  s  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  String  name  
[BugLab_Variable_Misuse]^if  ( NodeUtil.isStatementBlock ( value )  )  {^481^^^^^466^496^if  ( NodeUtil.isStatementBlock ( gramps )  )  {^[CLASS] DuplicateDeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] boolean  Scope  s  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  String  name  
[BugLab_Wrong_Operator]^} else if  ( gramps.getType (  )  != Token.FOR )  {^483^^^^^468^498^} else if  ( gramps.getType (  )  == Token.FOR )  {^[CLASS] DuplicateDeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] boolean  Scope  s  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  String  name  
[BugLab_Variable_Misuse]^Preconditions.checkState ( value.getType (  )  == Token.LABEL ) ;^490^^^^^483^492^Preconditions.checkState ( gramps.getType (  )  == Token.LABEL ) ;^[CLASS] DuplicateDeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] boolean  Scope  s  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  String  name  
[BugLab_Wrong_Operator]^Preconditions.checkState ( gramps.getType (  )  != Token.LABEL ) ;^490^^^^^483^492^Preconditions.checkState ( gramps.getType (  )  == Token.LABEL ) ;^[CLASS] DuplicateDeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] boolean  Scope  s  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  String  name  
[BugLab_Variable_Misuse]^gramps.replaceChild ( value, new Node ( Token.EMPTY )  ) ;^491^^^^^483^492^gramps.replaceChild ( parent, new Node ( Token.EMPTY )  ) ;^[CLASS] DuplicateDeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] boolean  Scope  s  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  String  name  
[BugLab_Variable_Misuse]^gramps.replaceChild ( parent, new Node ( Token.3 )  ) ;^491^^^^^483^492^gramps.replaceChild ( parent, new Node ( Token.EMPTY )  ) ;^[CLASS] DuplicateDeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] boolean  Scope  s  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  String  name  
[BugLab_Variable_Misuse]^parent.removeChild ( value ) ;^487^^^^^472^502^parent.removeChild ( n ) ;^[CLASS] DuplicateDeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] boolean  Scope  s  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  String  name  
[BugLab_Variable_Misuse]^gramps.replaceChild ( value, n ) ;^488^^^^^473^503^gramps.replaceChild ( parent, n ) ;^[CLASS] DuplicateDeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] boolean  Scope  s  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  String  name  
[BugLab_Variable_Misuse]^} else if  ( value.getType (  )  == Token.FOR )  {^483^^^^^468^498^} else if  ( gramps.getType (  )  == Token.FOR )  {^[CLASS] DuplicateDeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] boolean  Scope  s  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  String  name  
[BugLab_Variable_Misuse]^gramps.replaceChild ( parent, value ) ;^488^^^^^473^503^gramps.replaceChild ( parent, n ) ;^[CLASS] DuplicateDeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] boolean  Scope  s  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  String  name  
[BugLab_Argument_Swapping]^gramps.replaceChild ( n, parent ) ;^488^^^^^473^503^gramps.replaceChild ( parent, n ) ;^[CLASS] DuplicateDeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] boolean  Scope  s  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  String  name  
[BugLab_Variable_Misuse]^Preconditions.checkState ( value.getType (  )  == Token.LABEL ) ;^490^^^^^475^505^Preconditions.checkState ( gramps.getType (  )  == Token.LABEL ) ;^[CLASS] DuplicateDeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] boolean  Scope  s  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  String  name  
[BugLab_Wrong_Operator]^Preconditions.checkState ( gramps.getType (  )  <= Token.LABEL ) ;^490^^^^^475^505^Preconditions.checkState ( gramps.getType (  )  == Token.LABEL ) ;^[CLASS] DuplicateDeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] boolean  Scope  s  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  String  name  
[BugLab_Variable_Misuse]^Preconditions.checkState ( replacement.getType (  )  == Token.LABEL ) ;^490^^^^^475^505^Preconditions.checkState ( gramps.getType (  )  == Token.LABEL ) ;^[CLASS] DuplicateDeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] boolean  Scope  s  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  String  name  
[BugLab_Variable_Misuse]^gramps.replaceChild ( value, new Node ( Token.EMPTY )  ) ;^491^^^^^476^506^gramps.replaceChild ( parent, new Node ( Token.EMPTY )  ) ;^[CLASS] DuplicateDeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] boolean  Scope  s  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  String  name  
[BugLab_Variable_Misuse]^gramps.removeChild ( value ) ;^482^^^^^467^497^gramps.removeChild ( parent ) ;^[CLASS] DuplicateDeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] boolean  Scope  s  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  String  name  
[BugLab_Wrong_Operator]^} else if  ( gramps.getType (  )  <= Token.FOR )  {^483^^^^^468^498^} else if  ( gramps.getType (  )  == Token.FOR )  {^[CLASS] DuplicateDeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] boolean  Scope  s  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  String  name  
[BugLab_Wrong_Operator]^Preconditions.checkState ( gramps.getType (  )  < Token.LABEL ) ;^490^^^^^483^492^Preconditions.checkState ( gramps.getType (  )  == Token.LABEL ) ;^[CLASS] DuplicateDeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] boolean  Scope  s  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  String  name  
[BugLab_Variable_Misuse]^Preconditions.checkState ( replacement.getType (  )  == Token.LABEL ) ;^490^^^^^483^492^Preconditions.checkState ( gramps.getType (  )  == Token.LABEL ) ;^[CLASS] DuplicateDeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] boolean  Scope  s  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  String  name  
[BugLab_Variable_Misuse]^Node replacement = new Node ( Token.ASSIGN, n, replacement ) ;^477^^^^^462^492^Node replacement = new Node ( Token.ASSIGN, n, value ) ;^[CLASS] DuplicateDeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] boolean  Scope  s  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  String  name  
[BugLab_Variable_Misuse]^gramps.replaceChild ( parent, new Node ( Token.2 )  ) ;^491^^^^^476^506^gramps.replaceChild ( parent, new Node ( Token.EMPTY )  ) ;^[CLASS] DuplicateDeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] boolean  Scope  s  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  String  name  
[BugLab_Variable_Misuse]^Node value = replacement.getFirstChild (  ) ;^475^^^^^460^490^Node value = n.getFirstChild (  ) ;^[CLASS] DuplicateDeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] boolean  Scope  s  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  String  name  
[BugLab_Variable_Misuse]^Preconditions.checkState ( replacement.hasOneChild (  )  ) ;^452^^^^^437^467^Preconditions.checkState ( parent.hasOneChild (  )  ) ;^[CLASS] DuplicateDeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] boolean  Scope  s  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  String  name  
[BugLab_Variable_Misuse]^if  ( replacement.hasChildren (  )  )  {^471^^^^^456^486^if  ( n.hasChildren (  )  )  {^[CLASS] DuplicateDeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] boolean  Scope  s  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  String  name  
[BugLab_Variable_Misuse]^parent.removeChild ( value ) ;^473^^^^^458^488^parent.removeChild ( n ) ;^[CLASS] DuplicateDeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] boolean  Scope  s  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  String  name  
[BugLab_Wrong_Operator]^Preconditions.checkState ( gramps.getType (  )  != Token.LABEL ) ;^490^^^^^475^505^Preconditions.checkState ( gramps.getType (  )  == Token.LABEL ) ;^[CLASS] DuplicateDeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] boolean  Scope  s  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  String  name  
[BugLab_Variable_Misuse]^} else if  ( gramps.getType (  )  == Token.null )  {^483^^^^^471^493^} else if  ( gramps.getType (  )  == Token.FOR )  {^[CLASS] DuplicateDeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] boolean  Scope  s  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  String  name  
[BugLab_Wrong_Operator]^} else if  ( gramps.getType (  )  <= Token.FOR )  {^483^^^^^471^493^} else if  ( gramps.getType (  )  == Token.FOR )  {^[CLASS] DuplicateDeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] boolean  Scope  s  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  String  name  
[BugLab_Variable_Misuse]^gramps.replaceChild ( parent, new Node ( Token.this )  ) ;^491^^^^^471^493^gramps.replaceChild ( parent, new Node ( Token.EMPTY )  ) ;^[CLASS] DuplicateDeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] boolean  Scope  s  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  String  name  
[BugLab_Variable_Misuse]^gramps.replaceChild ( replacement, new Node ( Token.EMPTY )  ) ;^491^^^^^471^493^gramps.replaceChild ( parent, new Node ( Token.EMPTY )  ) ;^[CLASS] DuplicateDeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] boolean  Scope  s  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  String  name  
[BugLab_Variable_Misuse]^Node replacement = replacementew Node ( Token.ASSIGN, n, value ) ;^477^^^^^462^492^Node replacement = new Node ( Token.ASSIGN, n, value ) ;^[CLASS] DuplicateDeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] boolean  Scope  s  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  String  name  
[BugLab_Wrong_Operator]^} else if  ( gramps.getType (  )  >= Token.FOR )  {^483^^^^^468^498^} else if  ( gramps.getType (  )  == Token.FOR )  {^[CLASS] DuplicateDeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] boolean  Scope  s  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  String  name  
[BugLab_Wrong_Operator]^Preconditions.checkState ( gramps.getType (  )  >= Token.LABEL ) ;^490^^^^^475^505^Preconditions.checkState ( gramps.getType (  )  == Token.LABEL ) ;^[CLASS] DuplicateDeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] boolean  Scope  s  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  String  name  
[BugLab_Wrong_Operator]^} else if  ( gramps.getType (  )  < Token.FOR )  {^483^^^^^468^498^} else if  ( gramps.getType (  )  == Token.FOR )  {^[CLASS] DuplicateDeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] boolean  Scope  s  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  String  name  
[BugLab_Wrong_Operator]^Preconditions.checkState ( gramps.getType (  )  > Token.LABEL ) ;^490^^^^^483^492^Preconditions.checkState ( gramps.getType (  )  == Token.LABEL ) ;^[CLASS] DuplicateDeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] boolean  Scope  s  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  String  name  
[BugLab_Variable_Misuse]^Preconditions.checkState ( value.hasOneChild (  )  ) ;^452^^^^^437^467^Preconditions.checkState ( parent.hasOneChild (  )  ) ;^[CLASS] DuplicateDeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] boolean  Scope  s  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  String  name  
[BugLab_Variable_Misuse]^if  ( value.hasChildren (  )  )  {^471^^^^^456^486^if  ( n.hasChildren (  )  )  {^[CLASS] DuplicateDeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] boolean  Scope  s  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  String  name  
[BugLab_Variable_Misuse]^} else if  ( replacement.getType (  )  == Token.FOR )  {^483^^^^^468^498^} else if  ( gramps.getType (  )  == Token.FOR )  {^[CLASS] DuplicateDeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] boolean  Scope  s  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  String  name  
[BugLab_Wrong_Literal]^return false;^520^^^^^518^521^return true;^[CLASS] ScopeTicklingCallback  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node n Node parent [VARIABLES] boolean  NodeTraversal  nodeTraversal  Node  n  parent  
