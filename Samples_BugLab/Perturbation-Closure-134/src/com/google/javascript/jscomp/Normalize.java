[buglab_swap_variables]^NodeTraversal.traverse ( root, compiler, this ) ;^88^^^^^87^97^NodeTraversal.traverse ( compiler, root, this ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  
[buglab_swap_variables]^NodeTraversal.traverse ( compiler,  this ) ;^88^^^^^87^97^NodeTraversal.traverse ( compiler, root, this ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  
[buglab_swap_variables]^NodeTraversal.traverse (  root, this ) ;^88^^^^^87^97^NodeTraversal.traverse ( compiler, root, this ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  
[buglab_swap_variables]^NodeTraversal t = new NodeTraversal ( renamer, compiler ) ;^91^^^^^87^97^NodeTraversal t = new NodeTraversal ( compiler, renamer ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  
[buglab_swap_variables]^NodeTraversal t = new NodeTraversal ( compiler ) ;^91^^^^^87^97^NodeTraversal t = new NodeTraversal ( compiler, renamer ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  
[buglab_swap_variables]^NodeTraversal t = new NodeTraversal (  renamer ) ;^91^^^^^87^97^NodeTraversal t = new NodeTraversal ( compiler, renamer ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  
[buglab_swap_variables]^t.traverseRoots ( root, externs ) ;^92^^^^^87^97^t.traverseRoots ( externs, root ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  
[buglab_swap_variables]^t.traverseRoots (  root ) ;^92^^^^^87^97^t.traverseRoots ( externs, root ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  
[buglab_swap_variables]^t.traverseRoots ( externs ) ;^92^^^^^87^97^t.traverseRoots ( externs, root ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  
[buglab_swap_variables]^new PropogateConstantAnnotations ( assertOnChange, compiler ) .process ( externs, root ) ;^95^96^^^^87^97^new PropogateConstantAnnotations ( compiler, assertOnChange ) .process ( externs, root ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  
[buglab_swap_variables]^new PropogateConstantAnnotations (  assertOnChange ) .process ( externs, root ) ;^95^96^^^^87^97^new PropogateConstantAnnotations ( compiler, assertOnChange ) .process ( externs, root ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  
[buglab_swap_variables]^new PropogateConstantAnnotations ( compiler ) .process ( externs, root ) ;^95^96^^^^87^97^new PropogateConstantAnnotations ( compiler, assertOnChange ) .process ( externs, root ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  
[buglab_swap_variables]^new PropogateConstantAnnotations ( compiler, assertOnChange ) .process ( root, externs ) ;^95^96^^^^87^97^new PropogateConstantAnnotations ( compiler, assertOnChange ) .process ( externs, root ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  
[buglab_swap_variables]^new PropogateConstantAnnotations ( compiler, assertOnChange ) .process (  root ) ;^95^96^^^^87^97^new PropogateConstantAnnotations ( compiler, assertOnChange ) .process ( externs, root ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  
[buglab_swap_variables]^new PropogateConstantAnnotations ( compiler, root ) .process ( externs, assertOnChange ) ;^95^96^^^^87^97^new PropogateConstantAnnotations ( compiler, assertOnChange ) .process ( externs, root ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  
[buglab_swap_variables]^new PropogateConstantAnnotations ( compiler, assertOnChange ) .process ( externs ) ;^95^96^^^^87^97^new PropogateConstantAnnotations ( compiler, assertOnChange ) .process ( externs, root ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  
[buglab_swap_variables]^new PropogateConstantAnnotations ( externs, assertOnChange ) .process ( compiler, root ) ;^95^96^^^^87^97^new PropogateConstantAnnotations ( compiler, assertOnChange ) .process ( externs, root ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  
[buglab_swap_variables]^new PropogateConstantAnnotations ( compiler, externs ) .process ( assertOnChange, root ) ;^95^96^^^^87^97^new PropogateConstantAnnotations ( compiler, assertOnChange ) .process ( externs, root ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  
[buglab_swap_variables]^doStatementNormalizations ( parent, n, t ) ;^101^^^^^100^104^doStatementNormalizations ( t, n, parent ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  
[buglab_swap_variables]^doStatementNormalizations (  n, parent ) ;^101^^^^^100^104^doStatementNormalizations ( t, n, parent ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  
[buglab_swap_variables]^doStatementNormalizations ( n, t, parent ) ;^101^^^^^100^104^doStatementNormalizations ( t, n, parent ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  
[buglab_swap_variables]^doStatementNormalizations ( t,  parent ) ;^101^^^^^100^104^doStatementNormalizations ( t, n, parent ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  
[buglab_swap_variables]^doStatementNormalizations ( t, parent, n ) ;^101^^^^^100^104^doStatementNormalizations ( t, n, parent ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  
[buglab_swap_variables]^doStatementNormalizations ( t, n ) ;^101^^^^^100^104^doStatementNormalizations ( t, n, parent ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  n  parent  
[buglab_swap_variables]^new NodeTraversal ( compiler, this ) .traverseRoots ( root, externs ) ;^120^^^^^119^121^new NodeTraversal ( compiler, this ) .traverseRoots ( externs, root ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  Node  externs  root  
[buglab_swap_variables]^new NodeTraversal ( compiler, this ) .traverseRoots (  root ) ;^120^^^^^119^121^new NodeTraversal ( compiler, this ) .traverseRoots ( externs, root ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  Node  externs  root  
[buglab_swap_variables]^new NodeTraversal ( compiler, this ) .traverseRoots ( externs ) ;^120^^^^^119^121^new NodeTraversal ( compiler, this ) .traverseRoots ( externs, root ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  Node  externs  root  
[buglab_swap_variables]^new NodeTraversal ( externs, this ) .traverseRoots ( compiler, root ) ;^120^^^^^119^121^new NodeTraversal ( compiler, this ) .traverseRoots ( externs, root ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  Node  externs  root  
[buglab_swap_variables]^new NodeTraversal (  this ) .traverseRoots ( externs, root ) ;^120^^^^^119^121^new NodeTraversal ( compiler, this ) .traverseRoots ( externs, root ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  Node  externs  root  
[buglab_swap_variables]^if  (  ( n != infoull && info.isConstant (  )  )  && !n.getBooleanProp ( Node.IS_CONSTANT_NAME )  )  {^138^139^^^^124^153^if  (  ( info != null && info.isConstant (  )  )  && !n.getBooleanProp ( Node.IS_CONSTANT_NAME )  )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Map  constantMap  
[buglab_swap_variables]^throw nameew IllegalStateException ( "Unexpected const change.\n" + "  n: "+ name + "\n" + "  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^143^144^145^146^^138^151^throw new IllegalStateException ( "Unexpected const change.\n" + "  name: "+ name + "\n" + "  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Map  constantMap  
[buglab_swap_variables]^throw nameew IllegalStateException ( "Unexpected const change.\n" + "  n: "+ name + "\n" + "  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^143^144^145^146^^124^153^throw new IllegalStateException ( "Unexpected const change.\n" + "  name: "+ name + "\n" + "  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Map  constantMap  
[buglab_swap_variables]^Var var = n.getScope (  ) .getVar ( t.getString (  )  ) ;^133^^^^^124^153^Var var = t.getScope (  ) .getVar ( n.getString (  )  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Map  constantMap  
[buglab_swap_variables]^Preconditions.checkState ( externs.hasChild ( externsAndJs )  ) ;^174^^^^^171^178^Preconditions.checkState ( externsAndJs.hasChild ( externs )  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  Node  externs  externsAndJs  root  
[buglab_swap_variables]^Preconditions.checkState ( externsAndJsAndJs.hasChild ( externs )  ) ;^174^^^^^171^178^Preconditions.checkState ( externsAndJs.hasChild ( externs )  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  Node  externs  externsAndJs  root  
[buglab_swap_variables]^NodeTraversal.traverseRoots ( externs, Lists.newArrayList ( compiler, root ) , this ) ;^176^177^^^^171^178^NodeTraversal.traverseRoots ( compiler, Lists.newArrayList ( externs, root ) , this ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  Node  externs  externsAndJs  root  
[buglab_swap_variables]^NodeTraversal.traverseRoots ( compiler, Lists.newArrayList (  root ) , this ) ;^176^177^^^^171^178^NodeTraversal.traverseRoots ( compiler, Lists.newArrayList ( externs, root ) , this ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  Node  externs  externsAndJs  root  
[buglab_swap_variables]^NodeTraversal.traverseRoots ( root, Lists.newArrayList ( externs, compiler ) , this ) ;^176^177^^^^171^178^NodeTraversal.traverseRoots ( compiler, Lists.newArrayList ( externs, root ) , this ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  Node  externs  externsAndJs  root  
[buglab_swap_variables]^NodeTraversal.traverseRoots ( compiler, Lists.newArrayList ( externs ) , this ) ;^176^177^^^^171^178^NodeTraversal.traverseRoots ( compiler, Lists.newArrayList ( externs, root ) , this ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  Node  externs  externsAndJs  root  
[buglab_swap_variables]^NodeTraversal.traverseRoots (  Lists.newArrayList ( externs, root ) , this ) ;^176^177^^^^171^178^NodeTraversal.traverseRoots ( compiler, Lists.newArrayList ( externs, root ) , this ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  Node  externs  externsAndJs  root  
[buglab_swap_variables]^compiler, Lists.newArrayList ( root, externs ) , this ) ;^177^^^^^171^178^compiler, Lists.newArrayList ( externs, root ) , this ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  Node  externs  externsAndJs  root  
[buglab_swap_variables]^compiler, Lists.newArrayList (  root ) , this ) ;^177^^^^^171^178^compiler, Lists.newArrayList ( externs, root ) , this ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  Node  externs  externsAndJs  root  
[buglab_swap_variables]^compiler, Lists.newArrayList ( externs ) , this ) ;^177^^^^^171^178^compiler, Lists.newArrayList ( externs, root ) , this ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  Node  externs  externsAndJs  root  
[buglab_swap_variables]^if  ( NodeUtil.isConstantName ( compiler ) || n.getCodingConvention (  ) .isConstant ( n.getString (  )  )  )  {^193^194^^^^178^208^if  ( NodeUtil.isConstantName ( n ) || compiler.getCodingConvention (  ) .isConstant ( n.getString (  )  )  )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[buglab_swap_variables]^Var var = n.getScope (  ) .getVar ( t.getString (  )  ) ;^200^^^^^193^210^Var var = t.getScope (  ) .getVar ( n.getString (  )  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[buglab_swap_variables]^Preconditions.checkState ( isConst == expectedConst, "The name " + name + " should not be annotated as constant." ) ;^216^217^^^^212^218^Preconditions.checkState ( expectedConst == isConst, "The name " + name + " should not be annotated as constant." ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[buglab_swap_variables]^Preconditions.checkState ( expectedConst ==  "The name " + name + " should not be annotated as constant." ) ;^216^217^^^^212^218^Preconditions.checkState ( expectedConst == isConst, "The name " + name + " should not be annotated as constant." ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[buglab_swap_variables]^Preconditions.checkState ( name == isConst, "The expectedConst " + name + " should not be annotated as constant." ) ;^216^217^^^^212^218^Preconditions.checkState ( expectedConst == isConst, "The name " + name + " should not be annotated as constant." ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[buglab_swap_variables]^Preconditions.checkState ( isConst == expectedConst, "The name " + name + " is not annotated as constant." ) ;^213^214^^^^198^228^Preconditions.checkState ( expectedConst == isConst, "The name " + name + " is not annotated as constant." ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[buglab_swap_variables]^Preconditions.checkState ( expectedConst ==  "The name " + name + " is not annotated as constant." ) ;^213^214^^^^198^228^Preconditions.checkState ( expectedConst == isConst, "The name " + name + " is not annotated as constant." ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[buglab_swap_variables]^Preconditions.checkState ( expectedConst == name, "The isConst " + name + " is not annotated as constant." ) ;^213^214^^^^198^228^Preconditions.checkState ( expectedConst == isConst, "The name " + name + " is not annotated as constant." ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[buglab_swap_variables]^Var var = n.getScope (  ) .getVar ( t.getString (  )  ) ;^200^^^^^185^215^Var var = t.getScope (  ) .getVar ( n.getString (  )  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[buglab_swap_variables]^|| n.getCodingConvention (  ) .isConstant ( compiler.getString (  )  )  )  {^194^^^^^179^209^|| compiler.getCodingConvention (  ) .isConstant ( n.getString (  )  )  )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[buglab_swap_variables]^Preconditions.checkState ( isConst == expectedConst, "The name " + name + " should not be annotated as constant." ) ;^216^217^^^^201^231^Preconditions.checkState ( expectedConst == isConst, "The name " + name + " should not be annotated as constant." ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[buglab_swap_variables]^Preconditions.checkState ( expectedConst ==  "The name " + name + " should not be annotated as constant." ) ;^216^217^^^^201^231^Preconditions.checkState ( expectedConst == isConst, "The name " + name + " should not be annotated as constant." ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[buglab_swap_variables]^Preconditions.checkState ( name == isConst, "The expectedConst " + name + " should not be annotated as constant." ) ;^216^217^^^^201^231^Preconditions.checkState ( expectedConst == isConst, "The name " + name + " should not be annotated as constant." ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[buglab_swap_variables]^Preconditions.checkState ( expectedConst == name, "The isConst " + name + " should not be annotated as constant." ) ;^216^217^^^^212^218^Preconditions.checkState ( expectedConst == isConst, "The name " + name + " should not be annotated as constant." ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[buglab_swap_variables]^Preconditions.checkState ( name == isConst, "The expectedConst " + name + " is not annotated as constant." ) ;^213^214^^^^198^228^Preconditions.checkState ( expectedConst == isConst, "The name " + name + " is not annotated as constant." ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[buglab_swap_variables]^Preconditions.checkState ( isConst.booleanValue (  )  == value, "The name " + name + " is not consistently annotated as " + "constant." ) ;^225^226^227^^^222^228^Preconditions.checkState ( value.booleanValue (  )  == isConst, "The name " + name + " is not consistently annotated as " + "constant." ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[buglab_swap_variables]^Preconditions.checkState ( value.booleanValue (  )  ==  "The name " + name + " is not consistently annotated as " + "constant." ) ;^225^226^227^^^222^228^Preconditions.checkState ( value.booleanValue (  )  == isConst, "The name " + name + " is not consistently annotated as " + "constant." ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[buglab_swap_variables]^Preconditions.checkState ( value.booleanValue (  )  == name, "The isConst " + name + " is not consistently annotated as " + "constant." ) ;^225^226^227^^^222^228^Preconditions.checkState ( value.booleanValue (  )  == isConst, "The name " + name + " is not consistently annotated as " + "constant." ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[buglab_swap_variables]^constantMap.put ( isConst, name ) ;^223^^^^^208^238^constantMap.put ( name, isConst ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[buglab_swap_variables]^constantMap.put (  isConst ) ;^223^^^^^208^238^constantMap.put ( name, isConst ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[buglab_swap_variables]^constantMap.put ( name ) ;^223^^^^^208^238^constantMap.put ( name, isConst ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[buglab_swap_variables]^Boolean value = name.get ( constantMap ) ;^221^^^^^206^236^Boolean value = constantMap.get ( name ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[buglab_swap_variables]^Preconditions.checkState ( isConst.booleanValue (  )  == value, "The name " + name + " is not consistently annotated as " + "constant." ) ;^225^226^227^^^210^240^Preconditions.checkState ( value.booleanValue (  )  == isConst, "The name " + name + " is not consistently annotated as " + "constant." ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[buglab_swap_variables]^Preconditions.checkState ( value.booleanValue (  )  ==  "The name " + name + " is not consistently annotated as " + "constant." ) ;^225^226^227^^^210^240^Preconditions.checkState ( value.booleanValue (  )  == isConst, "The name " + name + " is not consistently annotated as " + "constant." ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[buglab_swap_variables]^Preconditions.checkState ( value.booleanValue (  )  == name, "The isConst " + name + " is not consistently annotated as " + "constant." ) ;^225^226^227^^^210^240^Preconditions.checkState ( value.booleanValue (  )  == isConst, "The name " + name + " is not consistently annotated as " + "constant." ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[buglab_swap_variables]^Preconditions.checkState ( name.booleanValue (  )  == isConst, "The value " + name + " is not consistently annotated as " + "constant." ) ;^225^226^227^^^222^228^Preconditions.checkState ( value.booleanValue (  )  == isConst, "The name " + name + " is not consistently annotated as " + "constant." ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[buglab_swap_variables]^Preconditions.checkState ( expectedConst == name, "The isConst " + name + " should not be annotated as constant." ) ;^216^217^^^^201^231^Preconditions.checkState ( expectedConst == isConst, "The name " + name + " should not be annotated as constant." ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[buglab_swap_variables]^n.addChildBefore ( exprew Node ( Token.EMPTY ) , n ) ;^240^^^^^234^246^n.addChildBefore ( new Node ( Token.EMPTY ) , expr ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  
[buglab_swap_variables]^n.addChildBefore ( new Node ( Token.EMPTY )  ) ;^240^^^^^234^246^n.addChildBefore ( new Node ( Token.EMPTY ) , expr ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  
[buglab_swap_variables]^n.addChildAfter ( exprew Node ( Token.EMPTY ) , n ) ;^241^^^^^234^246^n.addChildAfter ( new Node ( Token.EMPTY ) , expr ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  
[buglab_swap_variables]^n.addChildAfter ( new Node ( Token.EMPTY )  ) ;^241^^^^^234^246^n.addChildAfter ( new Node ( Token.EMPTY ) , expr ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  expr  n  parent  
[buglab_swap_variables]^n.replaceChild ( block, last ) ;^293^^^^^280^298^n.replaceChild ( last, block ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] normalizeLabels [RETURN_TYPE] void   Node n [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  block  last  n  
[buglab_swap_variables]^n.replaceChild (  block ) ;^293^^^^^280^298^n.replaceChild ( last, block ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] normalizeLabels [RETURN_TYPE] void   Node n [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  block  last  n  
[buglab_swap_variables]^n.replaceChild ( last ) ;^293^^^^^280^298^n.replaceChild ( last, block ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] normalizeLabels [RETURN_TYPE] void   Node n [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  block  last  n  
[buglab_swap_variables]^c.replaceChild (  new Node ( Token.EMPTY )  ) ;^326^^^^^323^339^c.replaceChild ( init, new Node ( Token.EMPTY )  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] extractForInitializer [RETURN_TYPE] void   Node n Node before Node beforeParent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  
[buglab_swap_variables]^insertBeforeParent.addChildBefore ( insertBefore, newStatement ) ;^337^^^^^323^339^insertBeforeParent.addChildBefore ( newStatement, insertBefore ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] extractForInitializer [RETURN_TYPE] void   Node n Node before Node beforeParent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  
[buglab_swap_variables]^insertBeforeParent.addChildBefore (  insertBefore ) ;^337^^^^^323^339^insertBeforeParent.addChildBefore ( newStatement, insertBefore ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] extractForInitializer [RETURN_TYPE] void   Node n Node before Node beforeParent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  
[buglab_swap_variables]^insertBeforeParent.addChildBefore ( newStatement ) ;^337^^^^^323^339^insertBeforeParent.addChildBefore ( newStatement, insertBefore ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] extractForInitializer [RETURN_TYPE] void   Node n Node before Node beforeParent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  
[buglab_swap_variables]^for  ( Node nextext, c = n.getFirstChild (  ) ; c != null; c = n )  {^314^^^^^299^329^for  ( Node next, c = n.getFirstChild (  ) ; c != null; c = next )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] extractForInitializer [RETURN_TYPE] void   Node n Node before Node beforeParent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  
[buglab_swap_variables]^for  ( Node next = n.getFirstChild (  ) ; c != null; c = next )  {^314^^^^^299^329^for  ( Node next, c = n.getFirstChild (  ) ; c != null; c = next )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] extractForInitializer [RETURN_TYPE] void   Node n Node before Node beforeParent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  
[buglab_swap_variables]^for  ( Node  c = n.getFirstChild (  ) ; c != null; c = next )  {^314^^^^^299^329^for  ( Node next, c = n.getFirstChild (  ) ; c != null; c = next )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] extractForInitializer [RETURN_TYPE] void   Node n Node before Node beforeParent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  
[buglab_swap_variables]^Node insertBefore =  ( c == null )  ? before : before;^316^^^^^301^331^Node insertBefore =  ( before == null )  ? c : before;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] extractForInitializer [RETURN_TYPE] void   Node n Node before Node beforeParent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  
[buglab_swap_variables]^Node insertBeforeParent =  ( n == beforeull )  ? n : beforeParent;^317^^^^^302^332^Node insertBeforeParent =  ( before == null )  ? n : beforeParent;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] extractForInitializer [RETURN_TYPE] void   Node n Node before Node beforeParent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  
[buglab_swap_variables]^Node insertBeforeParent =  ( before == beforeParentull )  ? n : n;^317^^^^^302^332^Node insertBeforeParent =  ( before == null )  ? n : beforeParent;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] extractForInitializer [RETURN_TYPE] void   Node n Node before Node beforeParent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  
[buglab_swap_variables]^Node insertBeforeParent =  ( beforeParent == null )  ? n : before;^317^^^^^302^332^Node insertBeforeParent =  ( before == null )  ? n : beforeParent;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] extractForInitializer [RETURN_TYPE] void   Node n Node before Node beforeParent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  
[buglab_swap_variables]^extractForInitializer ( insertBefore, c, insertBeforeParent ) ;^320^^^^^305^335^extractForInitializer ( c, insertBefore, insertBeforeParent ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] extractForInitializer [RETURN_TYPE] void   Node n Node before Node beforeParent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  
[buglab_swap_variables]^extractForInitializer (  insertBefore, insertBeforeParent ) ;^320^^^^^305^335^extractForInitializer ( c, insertBefore, insertBeforeParent ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] extractForInitializer [RETURN_TYPE] void   Node n Node before Node beforeParent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  
[buglab_swap_variables]^extractForInitializer ( c,  insertBeforeParent ) ;^320^^^^^305^335^extractForInitializer ( c, insertBefore, insertBeforeParent ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] extractForInitializer [RETURN_TYPE] void   Node n Node before Node beforeParent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  
[buglab_swap_variables]^extractForInitializer ( insertBeforeParent, insertBefore, c ) ;^320^^^^^305^335^extractForInitializer ( c, insertBefore, insertBeforeParent ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] extractForInitializer [RETURN_TYPE] void   Node n Node before Node beforeParent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  
[buglab_swap_variables]^extractForInitializer ( c, insertBefore ) ;^320^^^^^305^335^extractForInitializer ( c, insertBefore, insertBeforeParent ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] extractForInitializer [RETURN_TYPE] void   Node n Node before Node beforeParent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  
[buglab_swap_variables]^c.replaceChild (  new Node ( Token.EMPTY )  ) ;^326^^^^^311^341^c.replaceChild ( init, new Node ( Token.EMPTY )  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] extractForInitializer [RETURN_TYPE] void   Node n Node before Node beforeParent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  
[buglab_swap_variables]^insertBeforeParent.addChildBefore ( insertBefore, newStatement ) ;^337^^^^^322^352^insertBeforeParent.addChildBefore ( newStatement, insertBefore ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] extractForInitializer [RETURN_TYPE] void   Node n Node before Node beforeParent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  
[buglab_swap_variables]^insertBeforeParent.addChildBefore (  insertBefore ) ;^337^^^^^322^352^insertBeforeParent.addChildBefore ( newStatement, insertBefore ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] extractForInitializer [RETURN_TYPE] void   Node n Node before Node beforeParent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  
[buglab_swap_variables]^insertBeforeParent.addChildBefore ( newStatement ) ;^337^^^^^322^352^insertBeforeParent.addChildBefore ( newStatement, insertBefore ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] extractForInitializer [RETURN_TYPE] void   Node n Node before Node beforeParent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  
[buglab_swap_variables]^extractForInitializer ( c, insertBeforeParent, insertBefore ) ;^320^^^^^305^335^extractForInitializer ( c, insertBefore, insertBeforeParent ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] extractForInitializer [RETURN_TYPE] void   Node n Node before Node beforeParent [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  before  beforeParent  c  init  insertBefore  insertBeforeParent  n  newStatement  next  
[buglab_swap_variables]^Node nameewVar = new Node ( Token.VAR, n, n.getLineno (  ) , n.getCharno (  )  ) ;^365^^^^^354^371^Node newVar = new Node ( Token.VAR, name, n.getLineno (  ) , n.getCharno (  )  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] splitVarDeclarations [RETURN_TYPE] void   Node n [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  
[buglab_swap_variables]^Node newVar = new Node ( Token.VAR,  n.getLineno (  ) , n.getCharno (  )  ) ;^365^^^^^354^371^Node newVar = new Node ( Token.VAR, name, n.getLineno (  ) , n.getCharno (  )  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] splitVarDeclarations [RETURN_TYPE] void   Node n [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  
[buglab_swap_variables]^Node newVar = new Node ( Token.VARame, n.getLineno (  ) , n.getCharno (  )  ) ;^365^^^^^354^371^Node newVar = new Node ( Token.VAR, name, n.getLineno (  ) , n.getCharno (  )  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] splitVarDeclarations [RETURN_TYPE] void   Node n [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  
[buglab_swap_variables]^Node newVar = new Node ( Token. name, n.getLineno (  ) , n.getCharno (  )  ) ;^365^^^^^354^371^Node newVar = new Node ( Token.VAR, name, n.getLineno (  ) , n.getCharno (  )  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] splitVarDeclarations [RETURN_TYPE] void   Node n [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  
[buglab_swap_variables]^n.addChildBefore ( cewVar, n ) ;^366^^^^^354^371^n.addChildBefore ( newVar, c ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] splitVarDeclarations [RETURN_TYPE] void   Node n [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  
[buglab_swap_variables]^n.addChildBefore ( n, c ) ;^366^^^^^354^371^n.addChildBefore ( newVar, c ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] splitVarDeclarations [RETURN_TYPE] void   Node n [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  
[buglab_swap_variables]^n.addChildBefore (  c ) ;^366^^^^^354^371^n.addChildBefore ( newVar, c ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] splitVarDeclarations [RETURN_TYPE] void   Node n [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  
[buglab_swap_variables]^n.addChildBefore ( c, newVar ) ;^366^^^^^354^371^n.addChildBefore ( newVar, c ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] splitVarDeclarations [RETURN_TYPE] void   Node n [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  
[buglab_swap_variables]^n.addChildBefore ( newVar ) ;^366^^^^^354^371^n.addChildBefore ( newVar, c ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] splitVarDeclarations [RETURN_TYPE] void   Node n [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  
[buglab_swap_variables]^n.addChildBefore ( newVarewVar, c ) ;^366^^^^^354^371^n.addChildBefore ( newVar, c ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] splitVarDeclarations [RETURN_TYPE] void   Node n [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  
[buglab_swap_variables]^for  ( Node nextext, c = n.getFirstChild (  ) ; c != null; c = n )  {^355^^^^^354^371^for  ( Node next, c = n.getFirstChild (  ) ; c != null; c = next )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] splitVarDeclarations [RETURN_TYPE] void   Node n [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  
[buglab_swap_variables]^for  ( Node c, next = n.getFirstChild (  ) ; c != null; c = next )  {^355^^^^^354^371^for  ( Node next, c = n.getFirstChild (  ) ; c != null; c = next )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] splitVarDeclarations [RETURN_TYPE] void   Node n [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  
[buglab_swap_variables]^for  ( Node next = n.getFirstChild (  ) ; c != null; c = next )  {^355^^^^^354^371^for  ( Node next, c = n.getFirstChild (  ) ; c != null; c = next )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] splitVarDeclarations [RETURN_TYPE] void   Node n [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  
[buglab_swap_variables]^for  ( Node  c = n.getFirstChild (  ) ; c != null; c = next )  {^355^^^^^354^371^for  ( Node next, c = n.getFirstChild (  ) ; c != null; c = next )  {^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] splitVarDeclarations [RETURN_TYPE] void   Node n [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  
[buglab_swap_variables]^insertAfter = addToFront ( insertAfter, current, functionBody ) ;^401^^^^^386^416^insertAfter = addToFront ( functionBody, current, insertAfter ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] moveNamedFunctions [RETURN_TYPE] void   Node functionBody [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  current  functionBody  insertAfter  next  previous  
[buglab_swap_variables]^insertAfter = addToFront (  current, insertAfter ) ;^401^^^^^386^416^insertAfter = addToFront ( functionBody, current, insertAfter ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] moveNamedFunctions [RETURN_TYPE] void   Node functionBody [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  current  functionBody  insertAfter  next  previous  
[buglab_swap_variables]^insertAfter = addToFront ( functionBody, insertAfter, current ) ;^401^^^^^386^416^insertAfter = addToFront ( functionBody, current, insertAfter ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] moveNamedFunctions [RETURN_TYPE] void   Node functionBody [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  current  functionBody  insertAfter  next  previous  
[buglab_swap_variables]^insertAfter = addToFront ( functionBody,  insertAfter ) ;^401^^^^^386^416^insertAfter = addToFront ( functionBody, current, insertAfter ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] moveNamedFunctions [RETURN_TYPE] void   Node functionBody [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  current  functionBody  insertAfter  next  previous  
[buglab_swap_variables]^insertAfter = addToFront ( functionBody, current ) ;^401^^^^^386^416^insertAfter = addToFront ( functionBody, current, insertAfter ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] moveNamedFunctions [RETURN_TYPE] void   Node functionBody [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  current  functionBody  insertAfter  next  previous  
[buglab_swap_variables]^insertAfter = addToFront ( current, functionBody, insertAfter ) ;^401^^^^^386^416^insertAfter = addToFront ( functionBody, current, insertAfter ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] moveNamedFunctions [RETURN_TYPE] void   Node functionBody [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  current  functionBody  insertAfter  next  previous  
[buglab_swap_variables]^parent.addChildAfter ( after, newChild ) ;^420^^^^^416^423^parent.addChildAfter ( newChild, after ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] addToFront [RETURN_TYPE] Node   Node parent Node newChild Node after [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  after  newChild  parent  
[buglab_swap_variables]^parent.addChildAfter (  after ) ;^420^^^^^416^423^parent.addChildAfter ( newChild, after ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] addToFront [RETURN_TYPE] Node   Node parent Node newChild Node after [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  after  newChild  parent  
[buglab_swap_variables]^parent.addChildAfter ( newChild ) ;^420^^^^^416^423^parent.addChildAfter ( newChild, after ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] addToFront [RETURN_TYPE] Node   Node parent Node newChild Node after [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  after  newChild  parent  
[buglab_swap_variables]^NodeTraversal t = new NodeTraversal ( tickler, compiler, scopeCreator ) ;^432^^^^^428^434^NodeTraversal t = new NodeTraversal ( compiler, tickler, scopeCreator ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] removeDuplicateDeclarations [RETURN_TYPE] void   Node root [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Callback  tickler  NodeTraversal  t  Node  root  ScopeCreator  scopeCreator  Map  constantMap  
[buglab_swap_variables]^NodeTraversal t = new NodeTraversal ( compiler,  scopeCreator ) ;^432^^^^^428^434^NodeTraversal t = new NodeTraversal ( compiler, tickler, scopeCreator ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] removeDuplicateDeclarations [RETURN_TYPE] void   Node root [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Callback  tickler  NodeTraversal  t  Node  root  ScopeCreator  scopeCreator  Map  constantMap  
[buglab_swap_variables]^NodeTraversal t = new NodeTraversal ( compiler, scopeCreator, tickler ) ;^432^^^^^428^434^NodeTraversal t = new NodeTraversal ( compiler, tickler, scopeCreator ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] removeDuplicateDeclarations [RETURN_TYPE] void   Node root [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Callback  tickler  NodeTraversal  t  Node  root  ScopeCreator  scopeCreator  Map  constantMap  
[buglab_swap_variables]^NodeTraversal t = new NodeTraversal ( compiler, tickler ) ;^432^^^^^428^434^NodeTraversal t = new NodeTraversal ( compiler, tickler, scopeCreator ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] removeDuplicateDeclarations [RETURN_TYPE] void   Node root [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Callback  tickler  NodeTraversal  t  Node  root  ScopeCreator  scopeCreator  Map  constantMap  
[buglab_swap_variables]^NodeTraversal t = new NodeTraversal (  tickler, scopeCreator ) ;^432^^^^^428^434^NodeTraversal t = new NodeTraversal ( compiler, tickler, scopeCreator ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] removeDuplicateDeclarations [RETURN_TYPE] void   Node root [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Callback  tickler  NodeTraversal  t  Node  root  ScopeCreator  scopeCreator  Map  constantMap  
[buglab_swap_variables]^NodeTraversal t = new NodeTraversal ( scopeCreator, tickler, compiler ) ;^432^^^^^428^434^NodeTraversal t = new NodeTraversal ( compiler, tickler, scopeCreator ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] removeDuplicateDeclarations [RETURN_TYPE] void   Node root [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Callback  tickler  NodeTraversal  t  Node  root  ScopeCreator  scopeCreator  Map  constantMap  
[buglab_swap_variables]^gramps.replaceChild (  new Node ( Token.EMPTY )  ) ;^491^^^^^471^493^gramps.replaceChild ( parent, new Node ( Token.EMPTY )  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  String  name  Scope  s  Map  constantMap  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  
[buglab_swap_variables]^gramps.replaceChild (  n ) ;^488^^^^^471^493^gramps.replaceChild ( parent, n ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  String  name  Scope  s  Map  constantMap  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  
[buglab_swap_variables]^gramps.replaceChild ( parent ) ;^488^^^^^471^493^gramps.replaceChild ( parent, n ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  String  name  Scope  s  Map  constantMap  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  
[buglab_swap_variables]^gramps.replaceChild ( n, parent ) ;^488^^^^^471^493^gramps.replaceChild ( parent, n ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  String  name  Scope  s  Map  constantMap  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  
[buglab_swap_variables]^Node replacement = valueew Node ( Token.ASSIGN, n, n ) ;^477^^^^^462^492^Node replacement = new Node ( Token.ASSIGN, n, value ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  String  name  Scope  s  Map  constantMap  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  
[buglab_swap_variables]^Node replacement = new Node ( Token.ASSIGN,  value ) ;^477^^^^^462^492^Node replacement = new Node ( Token.ASSIGN, n, value ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  String  name  Scope  s  Map  constantMap  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  
[buglab_swap_variables]^Node replacement = new Node ( Token.ASSIGN, n ) ;^477^^^^^462^492^Node replacement = new Node ( Token.ASSIGN, n, value ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  String  name  Scope  s  Map  constantMap  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  
[buglab_swap_variables]^Node replacement = new Node ( Token. n, value ) ;^477^^^^^462^492^Node replacement = new Node ( Token.ASSIGN, n, value ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  String  name  Scope  s  Map  constantMap  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  
[buglab_swap_variables]^gramps.replaceChild ( parent, new Node ( Token.EXPR_RESULT )  ) ;^478^^^^^463^493^gramps.replaceChild ( parent, new Node ( Token.EXPR_RESULT, replacement )  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  String  name  Scope  s  Map  constantMap  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  
[buglab_swap_variables]^gramps.replaceChild ( parent, new Node ( Token. replacement )  ) ;^478^^^^^463^493^gramps.replaceChild ( parent, new Node ( Token.EXPR_RESULT, replacement )  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  String  name  Scope  s  Map  constantMap  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  
[buglab_swap_variables]^gramps.replaceChild (  new Node ( Token.EXPR_RESULT, replacement )  ) ;^478^^^^^463^493^gramps.replaceChild ( parent, new Node ( Token.EXPR_RESULT, replacement )  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  String  name  Scope  s  Map  constantMap  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  
[buglab_swap_variables]^gramps.replaceChild (  new Node ( Token.EMPTY )  ) ;^491^^^^^483^492^gramps.replaceChild ( parent, new Node ( Token.EMPTY )  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  String  name  Scope  s  Map  constantMap  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  
[buglab_swap_variables]^gramps.replaceChild ( n, parent ) ;^488^^^^^473^503^gramps.replaceChild ( parent, n ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  String  name  Scope  s  Map  constantMap  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  
[buglab_swap_variables]^gramps.replaceChild (  n ) ;^488^^^^^473^503^gramps.replaceChild ( parent, n ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  String  name  Scope  s  Map  constantMap  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  
[buglab_swap_variables]^gramps.replaceChild ( parent ) ;^488^^^^^473^503^gramps.replaceChild ( parent, n ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  String  name  Scope  s  Map  constantMap  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  
[buglab_swap_variables]^gramps.replaceChild (  new Node ( Token.EMPTY )  ) ;^491^^^^^476^506^gramps.replaceChild ( parent, new Node ( Token.EMPTY )  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  String  name  Scope  s  Map  constantMap  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  
[buglab_swap_variables]^gramps.replaceChild ( replacement, new Node ( Token.EXPR_RESULT, parent )  ) ;^478^^^^^463^493^gramps.replaceChild ( parent, new Node ( Token.EXPR_RESULT, replacement )  ) ;^[CLASS] Normalize PropogateConstantAnnotations VerifyConstants DuplicateDeclarationHandler ScopeTicklingCallback  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  String  name  Scope  s  Map  constantMap  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  
[buglab_swap_variables]^new NodeTraversal ( compiler, this ) .traverseRoots ( root, externs ) ;^120^^^^^119^121^new NodeTraversal ( compiler, this ) .traverseRoots ( externs, root ) ;^[CLASS] PropogateConstantAnnotations  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  assertOnChange  forbidChanges  Node  externs  root  
[buglab_swap_variables]^new NodeTraversal ( compiler, this ) .traverseRoots (  root ) ;^120^^^^^119^121^new NodeTraversal ( compiler, this ) .traverseRoots ( externs, root ) ;^[CLASS] PropogateConstantAnnotations  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  assertOnChange  forbidChanges  Node  externs  root  
[buglab_swap_variables]^new NodeTraversal ( root, this ) .traverseRoots ( externs, compiler ) ;^120^^^^^119^121^new NodeTraversal ( compiler, this ) .traverseRoots ( externs, root ) ;^[CLASS] PropogateConstantAnnotations  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  assertOnChange  forbidChanges  Node  externs  root  
[buglab_swap_variables]^new NodeTraversal ( compiler, this ) .traverseRoots ( externs ) ;^120^^^^^119^121^new NodeTraversal ( compiler, this ) .traverseRoots ( externs, root ) ;^[CLASS] PropogateConstantAnnotations  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  assertOnChange  forbidChanges  Node  externs  root  
[buglab_swap_variables]^new NodeTraversal ( externs, this ) .traverseRoots ( compiler, root ) ;^120^^^^^119^121^new NodeTraversal ( compiler, this ) .traverseRoots ( externs, root ) ;^[CLASS] PropogateConstantAnnotations  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  assertOnChange  forbidChanges  Node  externs  root  
[buglab_swap_variables]^new NodeTraversal (  this ) .traverseRoots ( externs, root ) ;^120^^^^^119^121^new NodeTraversal ( compiler, this ) .traverseRoots ( externs, root ) ;^[CLASS] PropogateConstantAnnotations  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  assertOnChange  forbidChanges  Node  externs  root  
[buglab_swap_variables]^if  (  ( n != infoull && info.isConstant (  )  )  && !n.getBooleanProp ( Node.IS_CONSTANT_NAME )  )  {^138^139^^^^124^153^if  (  ( info != null && info.isConstant (  )  )  && !n.getBooleanProp ( Node.IS_CONSTANT_NAME )  )  {^[CLASS] PropogateConstantAnnotations  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  assertOnChange  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  
[buglab_swap_variables]^throw nameew IllegalStateException ( "Unexpected const change.\n" + "  n: "+ name + "\n" + "  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^143^144^145^146^^138^151^throw new IllegalStateException ( "Unexpected const change.\n" + "  name: "+ name + "\n" + "  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^[CLASS] PropogateConstantAnnotations  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  assertOnChange  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  
[buglab_swap_variables]^throw nameew IllegalStateException ( "Unexpected const change.\n" + "  n: "+ name + "\n" + "  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^143^144^145^146^^124^153^throw new IllegalStateException ( "Unexpected const change.\n" + "  name: "+ name + "\n" + "  gramps:" + n.getParent (  ) .getParent (  ) .toStringTree (  )  ) ;^[CLASS] PropogateConstantAnnotations  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  assertOnChange  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  
[buglab_swap_variables]^Var var = n.getScope (  ) .getVar ( t.getString (  )  ) ;^133^^^^^124^153^Var var = t.getScope (  ) .getVar ( n.getString (  )  ) ;^[CLASS] PropogateConstantAnnotations  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  assertOnChange  forbidChanges  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  
[buglab_swap_variables]^Preconditions.checkState ( externs.hasChild ( externsAndJs )  ) ;^174^^^^^171^178^Preconditions.checkState ( externsAndJs.hasChild ( externs )  ) ;^[CLASS] VerifyConstants  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  Map  constantMap  Node  externs  externsAndJs  root  
[buglab_swap_variables]^Preconditions.checkState ( externsAndJsAndJs.hasChild ( externs )  ) ;^174^^^^^171^178^Preconditions.checkState ( externsAndJs.hasChild ( externs )  ) ;^[CLASS] VerifyConstants  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  Map  constantMap  Node  externs  externsAndJs  root  
[buglab_swap_variables]^NodeTraversal.traverseRoots ( externs, Lists.newArrayList ( compiler, root ) , this ) ;^176^177^^^^171^178^NodeTraversal.traverseRoots ( compiler, Lists.newArrayList ( externs, root ) , this ) ;^[CLASS] VerifyConstants  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  Map  constantMap  Node  externs  externsAndJs  root  
[buglab_swap_variables]^NodeTraversal.traverseRoots ( compiler, Lists.newArrayList (  root ) , this ) ;^176^177^^^^171^178^NodeTraversal.traverseRoots ( compiler, Lists.newArrayList ( externs, root ) , this ) ;^[CLASS] VerifyConstants  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  Map  constantMap  Node  externs  externsAndJs  root  
[buglab_swap_variables]^NodeTraversal.traverseRoots ( root, Lists.newArrayList ( externs, compiler ) , this ) ;^176^177^^^^171^178^NodeTraversal.traverseRoots ( compiler, Lists.newArrayList ( externs, root ) , this ) ;^[CLASS] VerifyConstants  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  Map  constantMap  Node  externs  externsAndJs  root  
[buglab_swap_variables]^NodeTraversal.traverseRoots ( compiler, Lists.newArrayList ( externs ) , this ) ;^176^177^^^^171^178^NodeTraversal.traverseRoots ( compiler, Lists.newArrayList ( externs, root ) , this ) ;^[CLASS] VerifyConstants  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  Map  constantMap  Node  externs  externsAndJs  root  
[buglab_swap_variables]^NodeTraversal.traverseRoots (  Lists.newArrayList ( externs, root ) , this ) ;^176^177^^^^171^178^NodeTraversal.traverseRoots ( compiler, Lists.newArrayList ( externs, root ) , this ) ;^[CLASS] VerifyConstants  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  Map  constantMap  Node  externs  externsAndJs  root  
[buglab_swap_variables]^compiler, Lists.newArrayList ( root, externs ) , this ) ;^177^^^^^171^178^compiler, Lists.newArrayList ( externs, root ) , this ) ;^[CLASS] VerifyConstants  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  Map  constantMap  Node  externs  externsAndJs  root  
[buglab_swap_variables]^compiler, Lists.newArrayList (  root ) , this ) ;^177^^^^^171^178^compiler, Lists.newArrayList ( externs, root ) , this ) ;^[CLASS] VerifyConstants  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  Map  constantMap  Node  externs  externsAndJs  root  
[buglab_swap_variables]^compiler, Lists.newArrayList ( externs ) , this ) ;^177^^^^^171^178^compiler, Lists.newArrayList ( externs, root ) , this ) ;^[CLASS] VerifyConstants  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  Map  constantMap  Node  externs  externsAndJs  root  
[buglab_swap_variables]^Var var = n.getScope (  ) .getVar ( t.getString (  )  ) ;^200^^^^^193^210^Var var = t.getScope (  ) .getVar ( n.getString (  )  ) ;^[CLASS] VerifyConstants  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  expectedConst  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[buglab_swap_variables]^Preconditions.checkState ( name == isConst, "The expectedConst " + name + " should not be annotated as constant." ) ;^216^217^^^^212^218^Preconditions.checkState ( expectedConst == isConst, "The name " + name + " should not be annotated as constant." ) ;^[CLASS] VerifyConstants  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  expectedConst  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[buglab_swap_variables]^Preconditions.checkState ( isConst == expectedConst, "The name " + name + " should not be annotated as constant." ) ;^216^217^^^^212^218^Preconditions.checkState ( expectedConst == isConst, "The name " + name + " should not be annotated as constant." ) ;^[CLASS] VerifyConstants  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  expectedConst  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[buglab_swap_variables]^Preconditions.checkState ( expectedConst ==  "The name " + name + " should not be annotated as constant." ) ;^216^217^^^^212^218^Preconditions.checkState ( expectedConst == isConst, "The name " + name + " should not be annotated as constant." ) ;^[CLASS] VerifyConstants  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  expectedConst  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[buglab_swap_variables]^Preconditions.checkState ( expectedConst == name, "The isConst " + name + " should not be annotated as constant." ) ;^216^217^^^^212^218^Preconditions.checkState ( expectedConst == isConst, "The name " + name + " should not be annotated as constant." ) ;^[CLASS] VerifyConstants  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  expectedConst  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[buglab_swap_variables]^Preconditions.checkState ( isConst == expectedConst, "The name " + name + " is not annotated as constant." ) ;^213^214^^^^198^228^Preconditions.checkState ( expectedConst == isConst, "The name " + name + " is not annotated as constant." ) ;^[CLASS] VerifyConstants  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  expectedConst  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[buglab_swap_variables]^Preconditions.checkState ( expectedConst ==  "The name " + name + " is not annotated as constant." ) ;^213^214^^^^198^228^Preconditions.checkState ( expectedConst == isConst, "The name " + name + " is not annotated as constant." ) ;^[CLASS] VerifyConstants  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  expectedConst  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[buglab_swap_variables]^Preconditions.checkState ( name == isConst, "The expectedConst " + name + " is not annotated as constant." ) ;^213^214^^^^198^228^Preconditions.checkState ( expectedConst == isConst, "The name " + name + " is not annotated as constant." ) ;^[CLASS] VerifyConstants  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  expectedConst  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[buglab_swap_variables]^Var var = n.getScope (  ) .getVar ( t.getString (  )  ) ;^200^^^^^185^215^Var var = t.getScope (  ) .getVar ( n.getString (  )  ) ;^[CLASS] VerifyConstants  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  expectedConst  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[buglab_swap_variables]^|| n.getCodingConvention (  ) .isConstant ( compiler.getString (  )  )  )  {^194^^^^^179^209^|| compiler.getCodingConvention (  ) .isConstant ( n.getString (  )  )  )  {^[CLASS] VerifyConstants  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  expectedConst  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[buglab_swap_variables]^Preconditions.checkState ( expectedConst == name, "The isConst " + name + " is not annotated as constant." ) ;^213^214^^^^198^228^Preconditions.checkState ( expectedConst == isConst, "The name " + name + " is not annotated as constant." ) ;^[CLASS] VerifyConstants  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  expectedConst  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[buglab_swap_variables]^Preconditions.checkState ( isConst == expectedConst, "The name " + name + " should not be annotated as constant." ) ;^216^217^^^^201^231^Preconditions.checkState ( expectedConst == isConst, "The name " + name + " should not be annotated as constant." ) ;^[CLASS] VerifyConstants  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  expectedConst  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[buglab_swap_variables]^Preconditions.checkState ( expectedConst ==  "The name " + name + " should not be annotated as constant." ) ;^216^217^^^^201^231^Preconditions.checkState ( expectedConst == isConst, "The name " + name + " should not be annotated as constant." ) ;^[CLASS] VerifyConstants  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  expectedConst  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[buglab_swap_variables]^Preconditions.checkState ( name == isConst, "The expectedConst " + name + " should not be annotated as constant." ) ;^216^217^^^^201^231^Preconditions.checkState ( expectedConst == isConst, "The name " + name + " should not be annotated as constant." ) ;^[CLASS] VerifyConstants  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  expectedConst  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[buglab_swap_variables]^if  ( NodeUtil.isConstantName ( compiler ) || n.getCodingConvention (  ) .isConstant ( n.getString (  )  )  )  {^193^194^^^^178^208^if  ( NodeUtil.isConstantName ( n ) || compiler.getCodingConvention (  ) .isConstant ( n.getString (  )  )  )  {^[CLASS] VerifyConstants  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  expectedConst  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[buglab_swap_variables]^Preconditions.checkState ( name.booleanValue (  )  == isConst, "The value " + name + " is not consistently annotated as " + "constant." ) ;^225^226^227^^^222^228^Preconditions.checkState ( value.booleanValue (  )  == isConst, "The name " + name + " is not consistently annotated as " + "constant." ) ;^[CLASS] VerifyConstants  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  expectedConst  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[buglab_swap_variables]^Preconditions.checkState ( value.booleanValue (  )  == name, "The isConst " + name + " is not consistently annotated as " + "constant." ) ;^225^226^227^^^222^228^Preconditions.checkState ( value.booleanValue (  )  == isConst, "The name " + name + " is not consistently annotated as " + "constant." ) ;^[CLASS] VerifyConstants  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  expectedConst  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[buglab_swap_variables]^Preconditions.checkState ( value.booleanValue (  )  ==  "The name " + name + " is not consistently annotated as " + "constant." ) ;^225^226^227^^^222^228^Preconditions.checkState ( value.booleanValue (  )  == isConst, "The name " + name + " is not consistently annotated as " + "constant." ) ;^[CLASS] VerifyConstants  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  expectedConst  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[buglab_swap_variables]^constantMap.put (  isConst ) ;^223^^^^^208^238^constantMap.put ( name, isConst ) ;^[CLASS] VerifyConstants  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  expectedConst  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[buglab_swap_variables]^constantMap.put ( name ) ;^223^^^^^208^238^constantMap.put ( name, isConst ) ;^[CLASS] VerifyConstants  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  expectedConst  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[buglab_swap_variables]^Boolean value = name.get ( constantMap ) ;^221^^^^^206^236^Boolean value = constantMap.get ( name ) ;^[CLASS] VerifyConstants  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  expectedConst  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[buglab_swap_variables]^Preconditions.checkState ( expectedConst == name, "The isConst " + name + " should not be annotated as constant." ) ;^216^217^^^^201^231^Preconditions.checkState ( expectedConst == isConst, "The name " + name + " should not be annotated as constant." ) ;^[CLASS] VerifyConstants  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  expectedConst  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[buglab_swap_variables]^Preconditions.checkState ( isConst.booleanValue (  )  == value, "The name " + name + " is not consistently annotated as " + "constant." ) ;^225^226^227^^^210^240^Preconditions.checkState ( value.booleanValue (  )  == isConst, "The name " + name + " is not consistently annotated as " + "constant." ) ;^[CLASS] VerifyConstants  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  expectedConst  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[buglab_swap_variables]^Preconditions.checkState ( value.booleanValue (  )  ==  "The name " + name + " is not consistently annotated as " + "constant." ) ;^225^226^227^^^210^240^Preconditions.checkState ( value.booleanValue (  )  == isConst, "The name " + name + " is not consistently annotated as " + "constant." ) ;^[CLASS] VerifyConstants  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  expectedConst  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[buglab_swap_variables]^Preconditions.checkState ( name.booleanValue (  )  == isConst, "The value " + name + " is not consistently annotated as " + "constant." ) ;^225^226^227^^^210^240^Preconditions.checkState ( value.booleanValue (  )  == isConst, "The name " + name + " is not consistently annotated as " + "constant." ) ;^[CLASS] VerifyConstants  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  expectedConst  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[buglab_swap_variables]^Preconditions.checkState ( isConst.booleanValue (  )  == value, "The name " + name + " is not consistently annotated as " + "constant." ) ;^225^226^227^^^222^228^Preconditions.checkState ( value.booleanValue (  )  == isConst, "The name " + name + " is not consistently annotated as " + "constant." ) ;^[CLASS] VerifyConstants  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  expectedConst  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[buglab_swap_variables]^constantMap.put ( isConst, name ) ;^223^^^^^208^238^constantMap.put ( name, isConst ) ;^[CLASS] VerifyConstants  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  expectedConst  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[buglab_swap_variables]^Preconditions.checkState ( value.booleanValue (  )  == name, "The isConst " + name + " is not consistently annotated as " + "constant." ) ;^225^226^227^^^210^240^Preconditions.checkState ( value.booleanValue (  )  == isConst, "The name " + name + " is not consistently annotated as " + "constant." ) ;^[CLASS] VerifyConstants  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  checkUserDeclarations  expectedConst  isConst  NodeTraversal  t  Var  var  Node  n  parent  String  name  JSDocInfo  info  Boolean  value  Map  constantMap  
[buglab_swap_variables]^gramps.replaceChild (  new Node ( Token.EMPTY )  ) ;^491^^^^^471^493^gramps.replaceChild ( parent, new Node ( Token.EMPTY )  ) ;^[CLASS] DuplicateDeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] boolean  Scope  s  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  String  name  
[buglab_swap_variables]^gramps.replaceChild (  n ) ;^488^^^^^471^493^gramps.replaceChild ( parent, n ) ;^[CLASS] DuplicateDeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] boolean  Scope  s  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  String  name  
[buglab_swap_variables]^gramps.replaceChild ( n, parent ) ;^488^^^^^471^493^gramps.replaceChild ( parent, n ) ;^[CLASS] DuplicateDeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] boolean  Scope  s  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  String  name  
[buglab_swap_variables]^gramps.replaceChild ( parent ) ;^488^^^^^471^493^gramps.replaceChild ( parent, n ) ;^[CLASS] DuplicateDeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] boolean  Scope  s  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  String  name  
[buglab_swap_variables]^Node replacement = valueew Node ( Token.ASSIGN, n, n ) ;^477^^^^^462^492^Node replacement = new Node ( Token.ASSIGN, n, value ) ;^[CLASS] DuplicateDeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] boolean  Scope  s  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  String  name  
[buglab_swap_variables]^Node replacement = new Node ( Token.ASSIGN,  value ) ;^477^^^^^462^492^Node replacement = new Node ( Token.ASSIGN, n, value ) ;^[CLASS] DuplicateDeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] boolean  Scope  s  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  String  name  
[buglab_swap_variables]^Node replacement = new Node ( Token.ASSIGN, n ) ;^477^^^^^462^492^Node replacement = new Node ( Token.ASSIGN, n, value ) ;^[CLASS] DuplicateDeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] boolean  Scope  s  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  String  name  
[buglab_swap_variables]^Node replacement = new Node ( Token. n, value ) ;^477^^^^^462^492^Node replacement = new Node ( Token.ASSIGN, n, value ) ;^[CLASS] DuplicateDeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] boolean  Scope  s  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  String  name  
[buglab_swap_variables]^gramps.replaceChild ( parent, new Node ( Token.EXPR_RESULT )  ) ;^478^^^^^463^493^gramps.replaceChild ( parent, new Node ( Token.EXPR_RESULT, replacement )  ) ;^[CLASS] DuplicateDeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] boolean  Scope  s  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  String  name  
[buglab_swap_variables]^gramps.replaceChild ( parent, new Node ( Token. replacement )  ) ;^478^^^^^463^493^gramps.replaceChild ( parent, new Node ( Token.EXPR_RESULT, replacement )  ) ;^[CLASS] DuplicateDeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] boolean  Scope  s  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  String  name  
[buglab_swap_variables]^gramps.replaceChild ( replacement, new Node ( Token.EXPR_RESULT, parent )  ) ;^478^^^^^463^493^gramps.replaceChild ( parent, new Node ( Token.EXPR_RESULT, replacement )  ) ;^[CLASS] DuplicateDeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] boolean  Scope  s  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  String  name  
[buglab_swap_variables]^gramps.replaceChild (  new Node ( Token.EXPR_RESULT, replacement )  ) ;^478^^^^^463^493^gramps.replaceChild ( parent, new Node ( Token.EXPR_RESULT, replacement )  ) ;^[CLASS] DuplicateDeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] boolean  Scope  s  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  String  name  
[buglab_swap_variables]^gramps.replaceChild (  new Node ( Token.EMPTY )  ) ;^491^^^^^483^492^gramps.replaceChild ( parent, new Node ( Token.EMPTY )  ) ;^[CLASS] DuplicateDeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] boolean  Scope  s  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  String  name  
[buglab_swap_variables]^gramps.replaceChild (  n ) ;^488^^^^^473^503^gramps.replaceChild ( parent, n ) ;^[CLASS] DuplicateDeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] boolean  Scope  s  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  String  name  
[buglab_swap_variables]^gramps.replaceChild ( parent ) ;^488^^^^^473^503^gramps.replaceChild ( parent, n ) ;^[CLASS] DuplicateDeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] boolean  Scope  s  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  String  name  
[buglab_swap_variables]^gramps.replaceChild (  new Node ( Token.EMPTY )  ) ;^491^^^^^476^506^gramps.replaceChild ( parent, new Node ( Token.EMPTY )  ) ;^[CLASS] DuplicateDeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] boolean  Scope  s  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  String  name  
[buglab_swap_variables]^gramps.replaceChild ( n, parent ) ;^488^^^^^473^503^gramps.replaceChild ( parent, n ) ;^[CLASS] DuplicateDeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] boolean  Scope  s  Node  gramps  n  nodeWithLineNumber  parent  replacement  value  String  name  
