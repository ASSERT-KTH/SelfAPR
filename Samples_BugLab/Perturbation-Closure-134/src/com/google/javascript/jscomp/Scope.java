[BugLab_Variable_Misuse]^this.typeInferred = typeInferred;^110^^^^^109^111^this.typeInferred = inferred;^[CLASS] Scope Var  [METHOD] <init> [RETURN_TYPE] Scope$Var(boolean)   boolean inferred [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  type  Scope  parent  scope  Node  nameNode  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  
[BugLab_Variable_Misuse]^Preconditions.checkNotNull ( scope ) ;^267^^^^^266^279^Preconditions.checkNotNull ( parent ) ;^[CLASS] Scope Var  [METHOD] <init> [RETURN_TYPE] Node)   Scope parent Node rootNode [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  scope  Node  nameNode  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  
[BugLab_Variable_Misuse]^Preconditions.checkArgument ( nameNode != parent.rootNode ) ;^268^^^^^266^279^Preconditions.checkArgument ( rootNode != parent.rootNode ) ;^[CLASS] Scope Var  [METHOD] <init> [RETURN_TYPE] Node)   Scope parent Node rootNode [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  scope  Node  nameNode  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  
[BugLab_Variable_Misuse]^Preconditions.checkArgument ( rootNode != scope.rootNode ) ;^268^^^^^266^279^Preconditions.checkArgument ( rootNode != parent.rootNode ) ;^[CLASS] Scope Var  [METHOD] <init> [RETURN_TYPE] Node)   Scope parent Node rootNode [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  scope  Node  nameNode  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  
[BugLab_Argument_Swapping]^Preconditions.checkArgument ( parent.rootNode != rootNode ) ;^268^^^^^266^279^Preconditions.checkArgument ( rootNode != parent.rootNode ) ;^[CLASS] Scope Var  [METHOD] <init> [RETURN_TYPE] Node)   Scope parent Node rootNode [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  scope  Node  nameNode  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  
[BugLab_Argument_Swapping]^Preconditions.checkArgument ( rootNode != parent.rootNode.rootNode ) ;^268^^^^^266^279^Preconditions.checkArgument ( rootNode != parent.rootNode ) ;^[CLASS] Scope Var  [METHOD] <init> [RETURN_TYPE] Node)   Scope parent Node rootNode [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  scope  Node  nameNode  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  
[BugLab_Wrong_Operator]^Preconditions.checkArgument ( rootNode >= parent.rootNode ) ;^268^^^^^266^279^Preconditions.checkArgument ( rootNode != parent.rootNode ) ;^[CLASS] Scope Var  [METHOD] <init> [RETURN_TYPE] Node)   Scope parent Node rootNode [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  scope  Node  nameNode  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  
[BugLab_Variable_Misuse]^this.parent = scope;^270^^^^^266^279^this.parent = parent;^[CLASS] Scope Var  [METHOD] <init> [RETURN_TYPE] Node)   Scope parent Node rootNode [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  scope  Node  nameNode  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  
[BugLab_Variable_Misuse]^this.rootNode = nameNode;^271^^^^^266^279^this.rootNode = rootNode;^[CLASS] Scope Var  [METHOD] <init> [RETURN_TYPE] Node)   Scope parent Node rootNode [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  scope  Node  nameNode  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  
[BugLab_Variable_Misuse]^JSType nodeType = nameNode.getJSType (  ) ;^272^^^^^266^279^JSType nodeType = rootNode.getJSType (  ) ;^[CLASS] Scope Var  [METHOD] <init> [RETURN_TYPE] Node)   Scope parent Node rootNode [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  scope  Node  nameNode  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  
[BugLab_Wrong_Operator]^if  ( nodeType != null || nodeType instanceof FunctionType )  {^273^^^^^266^279^if  ( nodeType != null && nodeType instanceof FunctionType )  {^[CLASS] Scope Var  [METHOD] <init> [RETURN_TYPE] Node)   Scope parent Node rootNode [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  scope  Node  nameNode  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  
[BugLab_Wrong_Operator]^if  ( nodeType == null && nodeType instanceof FunctionType )  {^273^^^^^266^279^if  ( nodeType != null && nodeType instanceof FunctionType )  {^[CLASS] Scope Var  [METHOD] <init> [RETURN_TYPE] Node)   Scope parent Node rootNode [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  scope  Node  nameNode  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  
[BugLab_Wrong_Operator]^if  ( nodeType != null && nodeType  <=  FunctionType )  {^273^^^^^266^279^if  ( nodeType != null && nodeType instanceof FunctionType )  {^[CLASS] Scope Var  [METHOD] <init> [RETURN_TYPE] Node)   Scope parent Node rootNode [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  scope  Node  nameNode  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  
[BugLab_Variable_Misuse]^thisType = scope.thisType;^276^^^^^266^279^thisType = parent.thisType;^[CLASS] Scope Var  [METHOD] <init> [RETURN_TYPE] Node)   Scope parent Node rootNode [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  scope  Node  nameNode  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  
[BugLab_Variable_Misuse]^thisType = thisType;^276^^^^^266^279^thisType = parent.thisType;^[CLASS] Scope Var  [METHOD] <init> [RETURN_TYPE] Node)   Scope parent Node rootNode [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  scope  Node  nameNode  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  
[BugLab_Argument_Swapping]^thisType = parent.thisType.thisType;^276^^^^^266^279^thisType = parent.thisType;^[CLASS] Scope Var  [METHOD] <init> [RETURN_TYPE] Node)   Scope parent Node rootNode [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  scope  Node  nameNode  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  
[BugLab_Argument_Swapping]^thisType = parent;^276^^^^^266^279^thisType = parent.thisType;^[CLASS] Scope Var  [METHOD] <init> [RETURN_TYPE] Node)   Scope parent Node rootNode [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  scope  Node  nameNode  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  
[BugLab_Wrong_Literal]^this.isBottom = true;^278^^^^^266^279^this.isBottom = false;^[CLASS] Scope Var  [METHOD] <init> [RETURN_TYPE] Node)   Scope parent Node rootNode [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  scope  Node  nameNode  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  
[BugLab_Variable_Misuse]^this.rootNode = nameNode;^288^^^^^286^291^this.rootNode = rootNode;^[CLASS] Scope Var  [METHOD] <init> [RETURN_TYPE] AbstractCompiler)   Node rootNode AbstractCompiler compiler [VARIABLES] ObjectType  thisType  CompilerInput  input  AbstractCompiler  compiler  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  scope  Node  nameNode  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  
[BugLab_Wrong_Literal]^this.isBottom = true;^290^^^^^286^291^this.isBottom = false;^[CLASS] Scope Var  [METHOD] <init> [RETURN_TYPE] AbstractCompiler)   Node rootNode AbstractCompiler compiler [VARIABLES] ObjectType  thisType  CompilerInput  input  AbstractCompiler  compiler  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  scope  Node  nameNode  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  
[BugLab_Variable_Misuse]^this.rootNode = nameNode;^300^^^^^298^303^this.rootNode = rootNode;^[CLASS] Scope Var  [METHOD] <init> [RETURN_TYPE] ObjectType)   Node rootNode ObjectType thisType [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  scope  Node  nameNode  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  
[BugLab_Wrong_Literal]^this.isBottom = false;^302^^^^^298^303^this.isBottom = true;^[CLASS] Scope Var  [METHOD] <init> [RETURN_TYPE] ObjectType)   Node rootNode ObjectType thisType [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  scope  Node  nameNode  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  
[BugLab_Variable_Misuse]^return rootNode == null ? null : nameNode.getParent (  ) ;^124^^^^^123^125^return nameNode == null ? null : nameNode.getParent (  ) ;^[CLASS] Scope Var  [METHOD] getParentNode [RETURN_TYPE] Node   [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  scope  Node  nameNode  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  
[BugLab_Wrong_Operator]^return nameNode != null ? null : nameNode.getParent (  ) ;^124^^^^^123^125^return nameNode == null ? null : nameNode.getParent (  ) ;^[CLASS] Scope Var  [METHOD] getParentNode [RETURN_TYPE] Node   [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  scope  Node  nameNode  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  
[BugLab_Variable_Misuse]^Scope s = s.getParent (  ) ;^134^^^^^132^143^Scope s = scope.getParent (  ) ;^[CLASS] Scope Var  [METHOD] getLocalVarIndex [RETURN_TYPE] int   [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  s  scope  Node  nameNode  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[BugLab_Variable_Misuse]^if  ( scope == null )  {^135^^^^^132^143^if  ( s == null )  {^[CLASS] Scope Var  [METHOD] getLocalVarIndex [RETURN_TYPE] int   [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  s  scope  Node  nameNode  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[BugLab_Wrong_Operator]^if  ( s != null )  {^135^^^^^132^143^if  ( s == null )  {^[CLASS] Scope Var  [METHOD] getLocalVarIndex [RETURN_TYPE] int   [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  s  scope  Node  nameNode  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[BugLab_Variable_Misuse]^while  ( scope.getParent (  )  != null )  {^138^^^^^132^143^while  ( s.getParent (  )  != null )  {^[CLASS] Scope Var  [METHOD] getLocalVarIndex [RETURN_TYPE] int   [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  s  scope  Node  nameNode  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[BugLab_Wrong_Operator]^while  ( s.getParent (  )  == null )  {^138^^^^^132^143^while  ( s.getParent (  )  != null )  {^[CLASS] Scope Var  [METHOD] getLocalVarIndex [RETURN_TYPE] int   [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  s  scope  Node  nameNode  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[BugLab_Variable_Misuse]^num += scope.getVarCount (  ) ;^139^^^^^132^143^num += s.getVarCount (  ) ;^[CLASS] Scope Var  [METHOD] getLocalVarIndex [RETURN_TYPE] int   [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  s  scope  Node  nameNode  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[BugLab_Variable_Misuse]^s = scope.getParent (  ) ;^140^^^^^132^143^s = s.getParent (  ) ;^[CLASS] Scope Var  [METHOD] getLocalVarIndex [RETURN_TYPE] int   [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  s  scope  Node  nameNode  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[BugLab_Variable_Misuse]^return index;^142^^^^^132^143^return num;^[CLASS] Scope Var  [METHOD] getLocalVarIndex [RETURN_TYPE] int   [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  s  scope  Node  nameNode  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[BugLab_Variable_Misuse]^return s.isGlobal (  ) ;^149^^^^^148^150^return scope.isGlobal (  ) ;^[CLASS] Scope Var  [METHOD] isGlobal [RETURN_TYPE] boolean   [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  s  scope  Node  nameNode  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[BugLab_Variable_Misuse]^return s.isLocal (  ) ;^156^^^^^155^157^return scope.isLocal (  ) ;^[CLASS] Scope Var  [METHOD] isLocal [RETURN_TYPE] boolean   [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  s  scope  Node  nameNode  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[BugLab_Wrong_Operator]^return input == null && input.isExtern (  ) ;^163^^^^^162^164^return input == null || input.isExtern (  ) ;^[CLASS] Scope Var  [METHOD] isExtern [RETURN_TYPE] boolean   [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  s  scope  Node  nameNode  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[BugLab_Wrong_Operator]^return input != null || input.isExtern (  ) ;^163^^^^^162^164^return input == null || input.isExtern (  ) ;^[CLASS] Scope Var  [METHOD] isExtern [RETURN_TYPE] boolean   [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  s  scope  Node  nameNode  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[BugLab_Variable_Misuse]^return NodeUtil.isConstantName ( rootNode ) ;^171^^^^^170^172^return NodeUtil.isConstantName ( nameNode ) ;^[CLASS] Scope Var  [METHOD] isConst [RETURN_TYPE] boolean   [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  s  scope  Node  nameNode  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[BugLab_Variable_Misuse]^return typeInferred;^179^^^^^178^180^return isDefine;^[CLASS] Scope Var  [METHOD] isDefine [RETURN_TYPE] boolean   [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  s  scope  Node  nameNode  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[BugLab_Variable_Misuse]^return rootNode.getType (  )  == Token.FUNCTION ? parent : nameNode.getFirstChild (  ) ;^184^185^^^^182^186^return parent.getType (  )  == Token.FUNCTION ? parent : nameNode.getFirstChild (  ) ;^[CLASS] Scope Var  [METHOD] getInitialValue [RETURN_TYPE] Node   [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  s  scope  Node  nameNode  parent  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[BugLab_Variable_Misuse]^return parent.getType (  )  == Token.FUNCTION ? parent : rootNode.getFirstChild (  ) ;^184^185^^^^182^186^return parent.getType (  )  == Token.FUNCTION ? parent : nameNode.getFirstChild (  ) ;^[CLASS] Scope Var  [METHOD] getInitialValue [RETURN_TYPE] Node   [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  s  scope  Node  nameNode  parent  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[BugLab_Wrong_Operator]^return parent.getType (  )  <= Token.FUNCTION ? parent : nameNode.getFirstChild (  ) ;^184^185^^^^182^186^return parent.getType (  )  == Token.FUNCTION ? parent : nameNode.getFirstChild (  ) ;^[CLASS] Scope Var  [METHOD] getInitialValue [RETURN_TYPE] Node   [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  s  scope  Node  nameNode  parent  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[BugLab_Variable_Misuse]^parent : rootNode.getFirstChild (  ) ;^185^^^^^182^186^parent : nameNode.getFirstChild (  ) ;^[CLASS] Scope Var  [METHOD] getInitialValue [RETURN_TYPE] Node   [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  s  scope  Node  nameNode  parent  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[BugLab_Variable_Misuse]^return nodeType;^193^^^^^192^194^return type;^[CLASS] Scope Var  [METHOD] getType [RETURN_TYPE] JSType   [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  s  scope  Node  nameNode  parent  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[BugLab_Variable_Misuse]^return rootNode;^200^^^^^199^201^return nameNode;^[CLASS] Scope Var  [METHOD] getNameNode [RETURN_TYPE] Node   [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  s  scope  Node  nameNode  parent  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[BugLab_Variable_Misuse]^this.type = nodeType;^216^^^^^214^217^this.type = type;^[CLASS] Scope Var  [METHOD] setType [RETURN_TYPE] void   JSType type [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  s  scope  Node  nameNode  parent  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[BugLab_Variable_Misuse]^return isDefine;^224^^^^^223^225^return typeInferred;^[CLASS] Scope Var  [METHOD] isTypeInferred [RETURN_TYPE] boolean   [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  s  scope  Node  nameNode  parent  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[BugLab_Wrong_Operator]^if  ( input != null ) return "<non-file>";^228^229^^^^227^232^if  ( input == null ) return "<non-file>";^[CLASS] Scope Var  [METHOD] getInputName [RETURN_TYPE] String   [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  s  scope  Node  nameNode  parent  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[BugLab_Wrong_Operator]^if  ( info != null || info.isNoShadow (  )  )  {^235^^^^^234^240^if  ( info != null && info.isNoShadow (  )  )  {^[CLASS] Scope Var  [METHOD] isNoShadow [RETURN_TYPE] boolean   [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  s  scope  Node  nameNode  parent  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[BugLab_Wrong_Operator]^if  ( info == null && info.isNoShadow (  )  )  {^235^^^^^234^240^if  ( info != null && info.isNoShadow (  )  )  {^[CLASS] Scope Var  [METHOD] isNoShadow [RETURN_TYPE] boolean   [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  s  scope  Node  nameNode  parent  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[BugLab_Wrong_Literal]^return true;^238^^^^^234^240^return false;^[CLASS] Scope Var  [METHOD] isNoShadow [RETURN_TYPE] boolean   [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  s  scope  Node  nameNode  parent  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[BugLab_Wrong_Literal]^return false;^236^^^^^234^240^return true;^[CLASS] Scope Var  [METHOD] isNoShadow [RETURN_TYPE] boolean   [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  s  scope  Node  nameNode  parent  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[BugLab_Wrong_Operator]^if  ( ! ( other  |  Var )  )  {^243^^^^^242^249^if  ( ! ( other instanceof Var )  )  {^[CLASS] Scope Var  [METHOD] equals [RETURN_TYPE] boolean   Object other [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  s  scope  Var  otherVar  Node  nameNode  parent  rootNode  Object  other  String  name  JSDocInfo  info  Map  vars  int  index  num  
[BugLab_Wrong_Literal]^return true;^244^^^^^242^249^return false;^[CLASS] Scope Var  [METHOD] equals [RETURN_TYPE] boolean   Object other [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  s  scope  Var  otherVar  Node  nameNode  parent  rootNode  Object  other  String  name  JSDocInfo  info  Map  vars  int  index  num  
[BugLab_Variable_Misuse]^return rootNode == nameNode;^248^^^^^242^249^return otherVar.nameNode == nameNode;^[CLASS] Scope Var  [METHOD] equals [RETURN_TYPE] boolean   Object other [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  s  scope  Var  otherVar  Node  nameNode  parent  rootNode  Object  other  String  name  JSDocInfo  info  Map  vars  int  index  num  
[BugLab_Variable_Misuse]^return otherVar.nameNode == rootNode;^248^^^^^242^249^return otherVar.nameNode == nameNode;^[CLASS] Scope Var  [METHOD] equals [RETURN_TYPE] boolean   Object other [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  s  scope  Var  otherVar  Node  nameNode  parent  rootNode  Object  other  String  name  JSDocInfo  info  Map  vars  int  index  num  
[BugLab_Argument_Swapping]^return nameNode.nameNode == otherVar;^248^^^^^242^249^return otherVar.nameNode == nameNode;^[CLASS] Scope Var  [METHOD] equals [RETURN_TYPE] boolean   Object other [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  s  scope  Var  otherVar  Node  nameNode  parent  rootNode  Object  other  String  name  JSDocInfo  info  Map  vars  int  index  num  
[BugLab_Argument_Swapping]^return nameNode == otherVar.nameNode;^248^^^^^242^249^return otherVar.nameNode == nameNode;^[CLASS] Scope Var  [METHOD] equals [RETURN_TYPE] boolean   Object other [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  s  scope  Var  otherVar  Node  nameNode  parent  rootNode  Object  other  String  name  JSDocInfo  info  Map  vars  int  index  num  
[BugLab_Wrong_Operator]^return otherVar.nameNode != nameNode;^248^^^^^242^249^return otherVar.nameNode == nameNode;^[CLASS] Scope Var  [METHOD] equals [RETURN_TYPE] boolean   Object other [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  s  scope  Var  otherVar  Node  nameNode  parent  rootNode  Object  other  String  name  JSDocInfo  info  Map  vars  int  index  num  
[BugLab_Variable_Misuse]^return rootNode.hashCode (  ) ;^252^^^^^251^253^return nameNode.hashCode (  ) ;^[CLASS] Scope Var  [METHOD] hashCode [RETURN_TYPE] int   [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  s  scope  Node  nameNode  parent  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[BugLab_Variable_Misuse]^return typeInferred;^307^^^^^306^308^return isBottom;^[CLASS] Scope Var  [METHOD] isBottom [RETURN_TYPE] boolean   [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  s  scope  Node  nameNode  parent  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[BugLab_Variable_Misuse]^return parent;^315^^^^^314^316^return rootNode;^[CLASS] Scope Var  [METHOD] getRootNode [RETURN_TYPE] Node   [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  s  scope  Node  nameNode  parent  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[BugLab_Variable_Misuse]^return scope;^319^^^^^318^320^return parent;^[CLASS] Scope Var  [METHOD] getParent [RETURN_TYPE] Scope   [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  s  scope  Node  nameNode  parent  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[BugLab_Variable_Misuse]^while  ( scope.getParent (  )  != null )  {^324^^^^^322^328^while  ( result.getParent (  )  != null )  {^[CLASS] Scope Var  [METHOD] getGlobalScope [RETURN_TYPE] Scope   [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  result  s  scope  Node  nameNode  parent  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[BugLab_Wrong_Operator]^while  ( result.getParent (  )  == null )  {^324^^^^^322^328^while  ( result.getParent (  )  != null )  {^[CLASS] Scope Var  [METHOD] getGlobalScope [RETURN_TYPE] Scope   [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  result  s  scope  Node  nameNode  parent  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[BugLab_Variable_Misuse]^result = scope.getParent (  ) ;^325^^^^^322^328^result = result.getParent (  ) ;^[CLASS] Scope Var  [METHOD] getGlobalScope [RETURN_TYPE] Scope   [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  result  s  scope  Node  nameNode  parent  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[BugLab_Variable_Misuse]^return scope;^327^^^^^322^328^return result;^[CLASS] Scope Var  [METHOD] getGlobalScope [RETURN_TYPE] Scope   [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  result  s  scope  Node  nameNode  parent  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[BugLab_Variable_Misuse]^return declare ( name, nameNode, nodeType, input, true ) ;^351^^^^^350^352^return declare ( name, nameNode, type, input, true ) ;^[CLASS] Scope Var  [METHOD] declare [RETURN_TYPE] Scope$Var   String name Node nameNode JSType type CompilerInput input [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  result  s  scope  Node  nameNode  parent  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[BugLab_Argument_Swapping]^return declare ( type, nameNode, name, input, true ) ;^351^^^^^350^352^return declare ( name, nameNode, type, input, true ) ;^[CLASS] Scope Var  [METHOD] declare [RETURN_TYPE] Scope$Var   String name Node nameNode JSType type CompilerInput input [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  result  s  scope  Node  nameNode  parent  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[BugLab_Argument_Swapping]^return declare ( nameNode, name, type, input, true ) ;^351^^^^^350^352^return declare ( name, nameNode, type, input, true ) ;^[CLASS] Scope Var  [METHOD] declare [RETURN_TYPE] Scope$Var   String name Node nameNode JSType type CompilerInput input [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  result  s  scope  Node  nameNode  parent  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[BugLab_Argument_Swapping]^return declare ( name, nameNode, input, type, true ) ;^351^^^^^350^352^return declare ( name, nameNode, type, input, true ) ;^[CLASS] Scope Var  [METHOD] declare [RETURN_TYPE] Scope$Var   String name Node nameNode JSType type CompilerInput input [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  result  s  scope  Node  nameNode  parent  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[BugLab_Wrong_Literal]^return declare ( name, nameNode, type, input, false ) ;^351^^^^^350^352^return declare ( name, nameNode, type, input, true ) ;^[CLASS] Scope Var  [METHOD] declare [RETURN_TYPE] Scope$Var   String name Node nameNode JSType type CompilerInput input [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  result  s  scope  Node  nameNode  parent  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[BugLab_Variable_Misuse]^return declare ( name, rootNode, type, input, true ) ;^351^^^^^350^352^return declare ( name, nameNode, type, input, true ) ;^[CLASS] Scope Var  [METHOD] declare [RETURN_TYPE] Scope$Var   String name Node nameNode JSType type CompilerInput input [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  result  s  scope  Node  nameNode  parent  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[BugLab_Argument_Swapping]^return declare ( input, nameNode, type, name, true ) ;^351^^^^^350^352^return declare ( name, nameNode, type, input, true ) ;^[CLASS] Scope Var  [METHOD] declare [RETURN_TYPE] Scope$Var   String name Node nameNode JSType type CompilerInput input [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  result  s  scope  Node  nameNode  parent  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[BugLab_Argument_Swapping]^return declare ( name, input, type, nameNode, true ) ;^351^^^^^350^352^return declare ( name, nameNode, type, input, true ) ;^[CLASS] Scope Var  [METHOD] declare [RETURN_TYPE] Scope$Var   String name Node nameNode JSType type CompilerInput input [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  result  s  scope  Node  nameNode  parent  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[BugLab_Argument_Swapping]^return declare ( name, type, nameNode, input, true ) ;^351^^^^^350^352^return declare ( name, nameNode, type, input, true ) ;^[CLASS] Scope Var  [METHOD] declare [RETURN_TYPE] Scope$Var   String name Node nameNode JSType type CompilerInput input [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  result  s  scope  Node  nameNode  parent  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[BugLab_Wrong_Operator]^Preconditions.checkState ( name != null || name.length (  )  > 0 ) ;^366^^^^^364^388^Preconditions.checkState ( name != null && name.length (  )  > 0 ) ;^[CLASS] Scope Var  [METHOD] declare [RETURN_TYPE] Scope$Var   String name Node nameNode JSType type CompilerInput input boolean inferred [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  result  s  scope  Var  var  Node  nameNode  parent  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[BugLab_Wrong_Operator]^Preconditions.checkState ( name == null && name.length (  )  > 0 ) ;^366^^^^^364^388^Preconditions.checkState ( name != null && name.length (  )  > 0 ) ;^[CLASS] Scope Var  [METHOD] declare [RETURN_TYPE] Scope$Var   String name Node nameNode JSType type CompilerInput input boolean inferred [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  result  s  scope  Var  var  Node  nameNode  parent  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[BugLab_Wrong_Operator]^Preconditions.checkState ( name != null && name.length (  )  >= 0 ) ;^366^^^^^364^388^Preconditions.checkState ( name != null && name.length (  )  > 0 ) ;^[CLASS] Scope Var  [METHOD] declare [RETURN_TYPE] Scope$Var   String name Node nameNode JSType type CompilerInput input boolean inferred [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  result  s  scope  Var  var  Node  nameNode  parent  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[BugLab_Argument_Swapping]^Preconditions.checkState ( name.get ( vars )  == null ) ;^369^^^^^364^388^Preconditions.checkState ( vars.get ( name )  == null ) ;^[CLASS] Scope Var  [METHOD] declare [RETURN_TYPE] Scope$Var   String name Node nameNode JSType type CompilerInput input boolean inferred [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  result  s  scope  Var  var  Node  nameNode  parent  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[BugLab_Wrong_Operator]^Preconditions.checkState ( vars.get ( name )  != null ) ;^369^^^^^364^388^Preconditions.checkState ( vars.get ( name )  == null ) ;^[CLASS] Scope Var  [METHOD] declare [RETURN_TYPE] Scope$Var   String name Node nameNode JSType type CompilerInput input boolean inferred [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  result  s  scope  Var  var  Node  nameNode  parent  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[BugLab_Variable_Misuse]^Var var = new Var ( typeInferred ) ;^371^^^^^364^388^Var var = new Var ( inferred ) ;^[CLASS] Scope Var  [METHOD] declare [RETURN_TYPE] Scope$Var   String name Node nameNode JSType type CompilerInput input boolean inferred [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  result  s  scope  Var  var  Node  nameNode  parent  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[BugLab_Variable_Misuse]^var.type = nodeType;^374^^^^^364^388^var.type = type;^[CLASS] Scope Var  [METHOD] declare [RETURN_TYPE] Scope$Var   String name Node nameNode JSType type CompilerInput input boolean inferred [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  result  s  scope  Var  var  Node  nameNode  parent  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[BugLab_Variable_Misuse]^var.index = null.size (  ) ;^376^^^^^364^388^var.index = vars.size (  ) ;^[CLASS] Scope Var  [METHOD] declare [RETURN_TYPE] Scope$Var   String name Node nameNode JSType type CompilerInput input boolean inferred [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  result  s  scope  Var  var  Node  nameNode  parent  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[BugLab_Argument_Swapping]^var.index = varss.size (  ) ;^376^^^^^364^388^var.index = vars.size (  ) ;^[CLASS] Scope Var  [METHOD] declare [RETURN_TYPE] Scope$Var   String name Node nameNode JSType type CompilerInput input boolean inferred [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  result  s  scope  Var  var  Node  nameNode  parent  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[BugLab_Argument_Swapping]^var.index = var.size (  ) ;^376^^^^^364^388^var.index = vars.size (  ) ;^[CLASS] Scope Var  [METHOD] declare [RETURN_TYPE] Scope$Var   String name Node nameNode JSType type CompilerInput input boolean inferred [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  result  s  scope  Var  var  Node  nameNode  parent  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[BugLab_Variable_Misuse]^JSDocInfo info = NodeUtil.getInfoForNameNode ( rootNode ) ;^381^^^^^364^388^JSDocInfo info = NodeUtil.getInfoForNameNode ( nameNode ) ;^[CLASS] Scope Var  [METHOD] declare [RETURN_TYPE] Scope$Var   String name Node nameNode JSType type CompilerInput input boolean inferred [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  result  s  scope  Var  var  Node  nameNode  parent  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[BugLab_Wrong_Operator]^var.isDefine = info != null || info.isDefine (  ) ;^383^^^^^364^388^var.isDefine = info != null && info.isDefine (  ) ;^[CLASS] Scope Var  [METHOD] declare [RETURN_TYPE] Scope$Var   String name Node nameNode JSType type CompilerInput input boolean inferred [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  result  s  scope  Var  var  Node  nameNode  parent  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[BugLab_Wrong_Operator]^var.isDefine = info == null && info.isDefine (  ) ;^383^^^^^364^388^var.isDefine = info != null && info.isDefine (  ) ;^[CLASS] Scope Var  [METHOD] declare [RETURN_TYPE] Scope$Var   String name Node nameNode JSType type CompilerInput input boolean inferred [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  result  s  scope  Var  var  Node  nameNode  parent  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[BugLab_Argument_Swapping]^vars.put ( var, name ) ;^386^^^^^364^388^vars.put ( name, var ) ;^[CLASS] Scope Var  [METHOD] declare [RETURN_TYPE] Scope$Var   String name Node nameNode JSType type CompilerInput input boolean inferred [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  result  s  scope  Var  var  Node  nameNode  parent  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[BugLab_Variable_Misuse]^Preconditions.checkState ( scope == this ) ;^395^^^^^394^398^Preconditions.checkState ( var.scope == this ) ;^[CLASS] Scope Var  [METHOD] undeclare [RETURN_TYPE] void   Var var [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  result  s  scope  Var  var  Node  nameNode  parent  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[BugLab_Argument_Swapping]^Preconditions.checkState ( var.scope.scope == this ) ;^395^^^^^394^398^Preconditions.checkState ( var.scope == this ) ;^[CLASS] Scope Var  [METHOD] undeclare [RETURN_TYPE] void   Var var [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  result  s  scope  Var  var  Node  nameNode  parent  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[BugLab_Argument_Swapping]^Preconditions.checkState ( var == this ) ;^395^^^^^394^398^Preconditions.checkState ( var.scope == this ) ;^[CLASS] Scope Var  [METHOD] undeclare [RETURN_TYPE] void   Var var [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  result  s  scope  Var  var  Node  nameNode  parent  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[BugLab_Wrong_Operator]^Preconditions.checkState ( var.scope >= this ) ;^395^^^^^394^398^Preconditions.checkState ( var.scope == this ) ;^[CLASS] Scope Var  [METHOD] undeclare [RETURN_TYPE] void   Var var [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  result  s  scope  Var  var  Node  nameNode  parent  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[BugLab_Variable_Misuse]^Preconditions.checkState ( vars.get ( name )  == var ) ;^396^^^^^394^398^Preconditions.checkState ( vars.get ( var.name )  == var ) ;^[CLASS] Scope Var  [METHOD] undeclare [RETURN_TYPE] void   Var var [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  result  s  scope  Var  var  Node  nameNode  parent  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[BugLab_Argument_Swapping]^Preconditions.checkState ( varss.get ( var.name )  == var ) ;^396^^^^^394^398^Preconditions.checkState ( vars.get ( var.name )  == var ) ;^[CLASS] Scope Var  [METHOD] undeclare [RETURN_TYPE] void   Var var [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  result  s  scope  Var  var  Node  nameNode  parent  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[BugLab_Argument_Swapping]^Preconditions.checkState ( var.name.get ( vars )  == var ) ;^396^^^^^394^398^Preconditions.checkState ( vars.get ( var.name )  == var ) ;^[CLASS] Scope Var  [METHOD] undeclare [RETURN_TYPE] void   Var var [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  result  s  scope  Var  var  Node  nameNode  parent  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[BugLab_Argument_Swapping]^Preconditions.checkState ( var.names.get ( var )  == var ) ;^396^^^^^394^398^Preconditions.checkState ( vars.get ( var.name )  == var ) ;^[CLASS] Scope Var  [METHOD] undeclare [RETURN_TYPE] void   Var var [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  result  s  scope  Var  var  Node  nameNode  parent  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[BugLab_Wrong_Operator]^Preconditions.checkState ( vars.get ( var.name )  > var ) ;^396^^^^^394^398^Preconditions.checkState ( vars.get ( var.name )  == var ) ;^[CLASS] Scope Var  [METHOD] undeclare [RETURN_TYPE] void   Var var [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  result  s  scope  Var  var  Node  nameNode  parent  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[BugLab_Variable_Misuse]^vars.remove ( name ) ;^397^^^^^394^398^vars.remove ( var.name ) ;^[CLASS] Scope Var  [METHOD] undeclare [RETURN_TYPE] void   Var var [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  result  s  scope  Var  var  Node  nameNode  parent  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[BugLab_Argument_Swapping]^return name.get ( vars ) ;^405^^^^^404^406^return vars.get ( name ) ;^[CLASS] Scope Var  [METHOD] getOwnSlot [RETURN_TYPE] StaticSlot   String name [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  result  s  scope  Node  nameNode  parent  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[BugLab_Argument_Swapping]^Var var = name.get ( vars ) ;^412^^^^^411^420^Var var = vars.get ( name ) ;^[CLASS] Scope Var  [METHOD] getVar [RETURN_TYPE] Scope$Var   String name [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  result  s  scope  Var  var  Node  nameNode  parent  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[BugLab_Wrong_Operator]^if  ( var == null )  {^413^^^^^411^420^if  ( var != null )  {^[CLASS] Scope Var  [METHOD] getVar [RETURN_TYPE] Scope$Var   String name [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  result  s  scope  Var  var  Node  nameNode  parent  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[BugLab_Variable_Misuse]^} else if  ( scope != null )  {^415^^^^^411^420^} else if  ( parent != null )  {^[CLASS] Scope Var  [METHOD] getVar [RETURN_TYPE] Scope$Var   String name [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  result  s  scope  Var  var  Node  nameNode  parent  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[BugLab_Wrong_Operator]^} else if  ( parent == null )  {^415^^^^^411^420^} else if  ( parent != null )  {^[CLASS] Scope Var  [METHOD] getVar [RETURN_TYPE] Scope$Var   String name [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  result  s  scope  Var  var  Node  nameNode  parent  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[BugLab_Variable_Misuse]^return scope.getVar ( name ) ;^416^^^^^411^420^return parent.getVar ( name ) ;^[CLASS] Scope Var  [METHOD] getVar [RETURN_TYPE] Scope$Var   String name [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  result  s  scope  Var  var  Node  nameNode  parent  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[BugLab_Argument_Swapping]^return name.getVar ( parent ) ;^416^^^^^411^420^return parent.getVar ( name ) ;^[CLASS] Scope Var  [METHOD] getVar [RETURN_TYPE] Scope$Var   String name [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  result  s  scope  Var  var  Node  nameNode  parent  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[BugLab_Variable_Misuse]^if  ( s.vars.containsKey ( name )  ) return true;^427^428^^^^425^434^if  ( scope.vars.containsKey ( name )  ) return true;^[CLASS] Scope Var  [METHOD] isDeclared [RETURN_TYPE] boolean   String name boolean recurse [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  recurse  typeInferred  JSType  nodeType  type  Scope  parent  result  s  scope  Node  nameNode  parent  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[BugLab_Argument_Swapping]^if  ( scope.vars.vars.containsKey ( name )  ) return true;^427^428^^^^425^434^if  ( scope.vars.containsKey ( name )  ) return true;^[CLASS] Scope Var  [METHOD] isDeclared [RETURN_TYPE] boolean   String name boolean recurse [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  recurse  typeInferred  JSType  nodeType  type  Scope  parent  result  s  scope  Node  nameNode  parent  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[BugLab_Argument_Swapping]^if  ( name.containsKey ( scope.vars )  ) return true;^427^428^^^^425^434^if  ( scope.vars.containsKey ( name )  ) return true;^[CLASS] Scope Var  [METHOD] isDeclared [RETURN_TYPE] boolean   String name boolean recurse [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  recurse  typeInferred  JSType  nodeType  type  Scope  parent  result  s  scope  Node  nameNode  parent  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[BugLab_Wrong_Literal]^if  ( scope.vars.containsKey ( name )  ) return false;^427^428^^^^425^434^if  ( scope.vars.containsKey ( name )  ) return true;^[CLASS] Scope Var  [METHOD] isDeclared [RETURN_TYPE] boolean   String name boolean recurse [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  recurse  typeInferred  JSType  nodeType  type  Scope  parent  result  s  scope  Node  nameNode  parent  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[BugLab_Wrong_Literal]^return false;^428^^^^^425^434^return true;^[CLASS] Scope Var  [METHOD] isDeclared [RETURN_TYPE] boolean   String name boolean recurse [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  recurse  typeInferred  JSType  nodeType  type  Scope  parent  result  s  scope  Node  nameNode  parent  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[BugLab_Argument_Swapping]^if  ( name.vars.containsKey ( scope )  ) return true;^427^428^^^^425^434^if  ( scope.vars.containsKey ( name )  ) return true;^[CLASS] Scope Var  [METHOD] isDeclared [RETURN_TYPE] boolean   String name boolean recurse [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  recurse  typeInferred  JSType  nodeType  type  Scope  parent  result  s  scope  Node  nameNode  parent  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[BugLab_Argument_Swapping]^if  ( scope.containsKey ( name )  ) return true;^427^428^^^^425^434^if  ( scope.vars.containsKey ( name )  ) return true;^[CLASS] Scope Var  [METHOD] isDeclared [RETURN_TYPE] boolean   String name boolean recurse [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  recurse  typeInferred  JSType  nodeType  type  Scope  parent  result  s  scope  Node  nameNode  parent  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[BugLab_Variable_Misuse]^if  ( s.parent != null && recurse )  {^430^^^^^425^434^if  ( scope.parent != null && recurse )  {^[CLASS] Scope Var  [METHOD] isDeclared [RETURN_TYPE] boolean   String name boolean recurse [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  recurse  typeInferred  JSType  nodeType  type  Scope  parent  result  s  scope  Node  nameNode  parent  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[BugLab_Variable_Misuse]^if  ( scope.parent != null && typeInferred )  {^430^^^^^425^434^if  ( scope.parent != null && recurse )  {^[CLASS] Scope Var  [METHOD] isDeclared [RETURN_TYPE] boolean   String name boolean recurse [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  recurse  typeInferred  JSType  nodeType  type  Scope  parent  result  s  scope  Node  nameNode  parent  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[BugLab_Variable_Misuse]^if  ( s != null && recurse )  {^430^^^^^425^434^if  ( scope.parent != null && recurse )  {^[CLASS] Scope Var  [METHOD] isDeclared [RETURN_TYPE] boolean   String name boolean recurse [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  recurse  typeInferred  JSType  nodeType  type  Scope  parent  result  s  scope  Node  nameNode  parent  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[BugLab_Argument_Swapping]^if  ( recurse.parent != null && scope )  {^430^^^^^425^434^if  ( scope.parent != null && recurse )  {^[CLASS] Scope Var  [METHOD] isDeclared [RETURN_TYPE] boolean   String name boolean recurse [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  recurse  typeInferred  JSType  nodeType  type  Scope  parent  result  s  scope  Node  nameNode  parent  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[BugLab_Argument_Swapping]^if  ( scope != null && recurse )  {^430^^^^^425^434^if  ( scope.parent != null && recurse )  {^[CLASS] Scope Var  [METHOD] isDeclared [RETURN_TYPE] boolean   String name boolean recurse [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  recurse  typeInferred  JSType  nodeType  type  Scope  parent  result  s  scope  Node  nameNode  parent  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[BugLab_Wrong_Operator]^if  ( scope.parent != null || recurse )  {^430^^^^^425^434^if  ( scope.parent != null && recurse )  {^[CLASS] Scope Var  [METHOD] isDeclared [RETURN_TYPE] boolean   String name boolean recurse [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  recurse  typeInferred  JSType  nodeType  type  Scope  parent  result  s  scope  Node  nameNode  parent  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[BugLab_Wrong_Operator]^if  ( scope.parent == null && recurse )  {^430^^^^^425^434^if  ( scope.parent != null && recurse )  {^[CLASS] Scope Var  [METHOD] isDeclared [RETURN_TYPE] boolean   String name boolean recurse [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  recurse  typeInferred  JSType  nodeType  type  Scope  parent  result  s  scope  Node  nameNode  parent  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[BugLab_Variable_Misuse]^return s.parent.isDeclared ( name, recurse ) ;^431^^^^^425^434^return scope.parent.isDeclared ( name, recurse ) ;^[CLASS] Scope Var  [METHOD] isDeclared [RETURN_TYPE] boolean   String name boolean recurse [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  recurse  typeInferred  JSType  nodeType  type  Scope  parent  result  s  scope  Node  nameNode  parent  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[BugLab_Variable_Misuse]^return scope.parent.isDeclared ( name, typeInferred ) ;^431^^^^^425^434^return scope.parent.isDeclared ( name, recurse ) ;^[CLASS] Scope Var  [METHOD] isDeclared [RETURN_TYPE] boolean   String name boolean recurse [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  recurse  typeInferred  JSType  nodeType  type  Scope  parent  result  s  scope  Node  nameNode  parent  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[BugLab_Variable_Misuse]^return s.isDeclared ( name, recurse ) ;^431^^^^^425^434^return scope.parent.isDeclared ( name, recurse ) ;^[CLASS] Scope Var  [METHOD] isDeclared [RETURN_TYPE] boolean   String name boolean recurse [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  recurse  typeInferred  JSType  nodeType  type  Scope  parent  result  s  scope  Node  nameNode  parent  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[BugLab_Argument_Swapping]^return scope.parent.parent.isDeclared ( name, recurse ) ;^431^^^^^425^434^return scope.parent.isDeclared ( name, recurse ) ;^[CLASS] Scope Var  [METHOD] isDeclared [RETURN_TYPE] boolean   String name boolean recurse [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  recurse  typeInferred  JSType  nodeType  type  Scope  parent  result  s  scope  Node  nameNode  parent  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[BugLab_Argument_Swapping]^return name.isDeclared ( scope.parent, recurse ) ;^431^^^^^425^434^return scope.parent.isDeclared ( name, recurse ) ;^[CLASS] Scope Var  [METHOD] isDeclared [RETURN_TYPE] boolean   String name boolean recurse [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  recurse  typeInferred  JSType  nodeType  type  Scope  parent  result  s  scope  Node  nameNode  parent  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[BugLab_Argument_Swapping]^return scope.parent.isDeclared ( recurse, name ) ;^431^^^^^425^434^return scope.parent.isDeclared ( name, recurse ) ;^[CLASS] Scope Var  [METHOD] isDeclared [RETURN_TYPE] boolean   String name boolean recurse [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  recurse  typeInferred  JSType  nodeType  type  Scope  parent  result  s  scope  Node  nameNode  parent  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[BugLab_Argument_Swapping]^return recurse.isDeclared ( name, scope.parent ) ;^431^^^^^425^434^return scope.parent.isDeclared ( name, recurse ) ;^[CLASS] Scope Var  [METHOD] isDeclared [RETURN_TYPE] boolean   String name boolean recurse [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  recurse  typeInferred  JSType  nodeType  type  Scope  parent  result  s  scope  Node  nameNode  parent  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[BugLab_Argument_Swapping]^return recurse.parent.isDeclared ( name, scope ) ;^431^^^^^425^434^return scope.parent.isDeclared ( name, recurse ) ;^[CLASS] Scope Var  [METHOD] isDeclared [RETURN_TYPE] boolean   String name boolean recurse [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  recurse  typeInferred  JSType  nodeType  type  Scope  parent  result  s  scope  Node  nameNode  parent  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[BugLab_Argument_Swapping]^return scope.isDeclared ( name, recurse ) ;^431^^^^^425^434^return scope.parent.isDeclared ( name, recurse ) ;^[CLASS] Scope Var  [METHOD] isDeclared [RETURN_TYPE] boolean   String name boolean recurse [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  recurse  typeInferred  JSType  nodeType  type  Scope  parent  result  s  scope  Node  nameNode  parent  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[BugLab_Variable_Misuse]^return scope.parent.isDeclared ( name, isDefine ) ;^431^^^^^425^434^return scope.parent.isDeclared ( name, recurse ) ;^[CLASS] Scope Var  [METHOD] isDeclared [RETURN_TYPE] boolean   String name boolean recurse [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  recurse  typeInferred  JSType  nodeType  type  Scope  parent  result  s  scope  Node  nameNode  parent  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[BugLab_Argument_Swapping]^return name.parent.isDeclared ( scope, recurse ) ;^431^^^^^425^434^return scope.parent.isDeclared ( name, recurse ) ;^[CLASS] Scope Var  [METHOD] isDeclared [RETURN_TYPE] boolean   String name boolean recurse [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  recurse  typeInferred  JSType  nodeType  type  Scope  parent  result  s  scope  Node  nameNode  parent  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[BugLab_Wrong_Literal]^return true;^433^^^^^425^434^return false;^[CLASS] Scope Var  [METHOD] isDeclared [RETURN_TYPE] boolean   String name boolean recurse [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  recurse  typeInferred  JSType  nodeType  type  Scope  parent  result  s  scope  Node  nameNode  parent  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[BugLab_Variable_Misuse]^return 1.values (  ) .iterator (  ) ;^440^^^^^439^441^return vars.values (  ) .iterator (  ) ;^[CLASS] Scope Var  [METHOD] getVars [RETURN_TYPE] Iterator   [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  recurse  typeInferred  JSType  nodeType  type  Scope  parent  result  s  scope  Node  nameNode  parent  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[BugLab_Variable_Misuse]^return scope == null;^454^^^^^453^455^return parent == null;^[CLASS] Scope Var  [METHOD] isGlobal [RETURN_TYPE] boolean   [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  recurse  typeInferred  JSType  nodeType  type  Scope  parent  result  s  scope  Node  nameNode  parent  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[BugLab_Wrong_Operator]^return parent != null;^454^^^^^453^455^return parent == null;^[CLASS] Scope Var  [METHOD] isGlobal [RETURN_TYPE] boolean   [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  recurse  typeInferred  JSType  nodeType  type  Scope  parent  result  s  scope  Node  nameNode  parent  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[BugLab_Variable_Misuse]^this.typeInferred = typeInferred;^110^^^^^109^111^this.typeInferred = inferred;^[CLASS] Var  [METHOD] <init> [RETURN_TYPE] Scope$Var(boolean)   boolean inferred [VARIABLES] CompilerInput  input  JSType  type  boolean  inferred  isDefine  typeInferred  Scope  scope  Node  nameNode  String  name  JSDocInfo  info  int  index  
[BugLab_Wrong_Operator]^return nameNode != null ? null : nameNode.getParent (  ) ;^124^^^^^123^125^return nameNode == null ? null : nameNode.getParent (  ) ;^[CLASS] Var  [METHOD] getParentNode [RETURN_TYPE] Node   [VARIABLES] CompilerInput  input  JSType  type  boolean  inferred  isDefine  typeInferred  Scope  scope  Node  nameNode  String  name  JSDocInfo  info  int  index  
[BugLab_Variable_Misuse]^Scope s = s.getParent (  ) ;^134^^^^^132^143^Scope s = scope.getParent (  ) ;^[CLASS] Var  [METHOD] getLocalVarIndex [RETURN_TYPE] int   [VARIABLES] CompilerInput  input  JSType  type  boolean  inferred  isDefine  typeInferred  Scope  s  scope  Node  nameNode  String  name  JSDocInfo  info  int  index  num  
[BugLab_Variable_Misuse]^if  ( scope == null )  {^135^^^^^132^143^if  ( s == null )  {^[CLASS] Var  [METHOD] getLocalVarIndex [RETURN_TYPE] int   [VARIABLES] CompilerInput  input  JSType  type  boolean  inferred  isDefine  typeInferred  Scope  s  scope  Node  nameNode  String  name  JSDocInfo  info  int  index  num  
[BugLab_Wrong_Operator]^if  ( s != null )  {^135^^^^^132^143^if  ( s == null )  {^[CLASS] Var  [METHOD] getLocalVarIndex [RETURN_TYPE] int   [VARIABLES] CompilerInput  input  JSType  type  boolean  inferred  isDefine  typeInferred  Scope  s  scope  Node  nameNode  String  name  JSDocInfo  info  int  index  num  
[BugLab_Variable_Misuse]^while  ( scope.getParent (  )  != null )  {^138^^^^^132^143^while  ( s.getParent (  )  != null )  {^[CLASS] Var  [METHOD] getLocalVarIndex [RETURN_TYPE] int   [VARIABLES] CompilerInput  input  JSType  type  boolean  inferred  isDefine  typeInferred  Scope  s  scope  Node  nameNode  String  name  JSDocInfo  info  int  index  num  
[BugLab_Wrong_Operator]^while  ( s.getParent (  )  == null )  {^138^^^^^132^143^while  ( s.getParent (  )  != null )  {^[CLASS] Var  [METHOD] getLocalVarIndex [RETURN_TYPE] int   [VARIABLES] CompilerInput  input  JSType  type  boolean  inferred  isDefine  typeInferred  Scope  s  scope  Node  nameNode  String  name  JSDocInfo  info  int  index  num  
[BugLab_Variable_Misuse]^num += scope.getVarCount (  ) ;^139^^^^^132^143^num += s.getVarCount (  ) ;^[CLASS] Var  [METHOD] getLocalVarIndex [RETURN_TYPE] int   [VARIABLES] CompilerInput  input  JSType  type  boolean  inferred  isDefine  typeInferred  Scope  s  scope  Node  nameNode  String  name  JSDocInfo  info  int  index  num  
[BugLab_Variable_Misuse]^s = scope.getParent (  ) ;^140^^^^^132^143^s = s.getParent (  ) ;^[CLASS] Var  [METHOD] getLocalVarIndex [RETURN_TYPE] int   [VARIABLES] CompilerInput  input  JSType  type  boolean  inferred  isDefine  typeInferred  Scope  s  scope  Node  nameNode  String  name  JSDocInfo  info  int  index  num  
[BugLab_Variable_Misuse]^return s.isGlobal (  ) ;^149^^^^^148^150^return scope.isGlobal (  ) ;^[CLASS] Var  [METHOD] isGlobal [RETURN_TYPE] boolean   [VARIABLES] CompilerInput  input  JSType  type  boolean  inferred  isDefine  typeInferred  Scope  s  scope  Node  nameNode  String  name  JSDocInfo  info  int  index  num  
[BugLab_Variable_Misuse]^return s.isLocal (  ) ;^156^^^^^155^157^return scope.isLocal (  ) ;^[CLASS] Var  [METHOD] isLocal [RETURN_TYPE] boolean   [VARIABLES] CompilerInput  input  JSType  type  boolean  inferred  isDefine  typeInferred  Scope  s  scope  Node  nameNode  String  name  JSDocInfo  info  int  index  num  
[BugLab_Wrong_Operator]^return input == null && input.isExtern (  ) ;^163^^^^^162^164^return input == null || input.isExtern (  ) ;^[CLASS] Var  [METHOD] isExtern [RETURN_TYPE] boolean   [VARIABLES] CompilerInput  input  JSType  type  boolean  inferred  isDefine  typeInferred  Scope  s  scope  Node  nameNode  String  name  JSDocInfo  info  int  index  num  
[BugLab_Wrong_Operator]^return input != null || input.isExtern (  ) ;^163^^^^^162^164^return input == null || input.isExtern (  ) ;^[CLASS] Var  [METHOD] isExtern [RETURN_TYPE] boolean   [VARIABLES] CompilerInput  input  JSType  type  boolean  inferred  isDefine  typeInferred  Scope  s  scope  Node  nameNode  String  name  JSDocInfo  info  int  index  num  
[BugLab_Variable_Misuse]^return typeInferred;^179^^^^^178^180^return isDefine;^[CLASS] Var  [METHOD] isDefine [RETURN_TYPE] boolean   [VARIABLES] CompilerInput  input  JSType  type  boolean  inferred  isDefine  typeInferred  Scope  s  scope  Node  nameNode  String  name  JSDocInfo  info  int  index  num  
[BugLab_Argument_Swapping]^return nameNode.getType (  )  == Token.FUNCTION ? parent : parent.getFirstChild (  ) ;^184^185^^^^182^186^return parent.getType (  )  == Token.FUNCTION ? parent : nameNode.getFirstChild (  ) ;^[CLASS] Var  [METHOD] getInitialValue [RETURN_TYPE] Node   [VARIABLES] CompilerInput  input  JSType  type  boolean  inferred  isDefine  typeInferred  Scope  s  scope  Node  nameNode  parent  String  name  JSDocInfo  info  int  index  num  
[BugLab_Wrong_Operator]^return parent.getType (  )  != Token.FUNCTION ? parent : nameNode.getFirstChild (  ) ;^184^185^^^^182^186^return parent.getType (  )  == Token.FUNCTION ? parent : nameNode.getFirstChild (  ) ;^[CLASS] Var  [METHOD] getInitialValue [RETURN_TYPE] Node   [VARIABLES] CompilerInput  input  JSType  type  boolean  inferred  isDefine  typeInferred  Scope  s  scope  Node  nameNode  parent  String  name  JSDocInfo  info  int  index  num  
[BugLab_Variable_Misuse]^return nameNode.getType (  )  == Token.FUNCTION ? parent : nameNode.getFirstChild (  ) ;^184^185^^^^182^186^return parent.getType (  )  == Token.FUNCTION ? parent : nameNode.getFirstChild (  ) ;^[CLASS] Var  [METHOD] getInitialValue [RETURN_TYPE] Node   [VARIABLES] CompilerInput  input  JSType  type  boolean  inferred  isDefine  typeInferred  Scope  s  scope  Node  nameNode  parent  String  name  JSDocInfo  info  int  index  num  
[BugLab_Variable_Misuse]^parent : parent.getFirstChild (  ) ;^185^^^^^182^186^parent : nameNode.getFirstChild (  ) ;^[CLASS] Var  [METHOD] getInitialValue [RETURN_TYPE] Node   [VARIABLES] CompilerInput  input  JSType  type  boolean  inferred  isDefine  typeInferred  Scope  s  scope  Node  nameNode  parent  String  name  JSDocInfo  info  int  index  num  
[BugLab_Variable_Misuse]^return parent;^200^^^^^199^201^return nameNode;^[CLASS] Var  [METHOD] getNameNode [RETURN_TYPE] Node   [VARIABLES] CompilerInput  input  JSType  type  boolean  inferred  isDefine  typeInferred  Scope  s  scope  Node  nameNode  parent  String  name  JSDocInfo  info  int  index  num  
[BugLab_Variable_Misuse]^return isDefine;^224^^^^^223^225^return typeInferred;^[CLASS] Var  [METHOD] isTypeInferred [RETURN_TYPE] boolean   [VARIABLES] CompilerInput  input  JSType  type  boolean  inferred  isDefine  typeInferred  Scope  s  scope  Node  nameNode  parent  String  name  JSDocInfo  info  int  index  num  
[BugLab_Wrong_Operator]^if  ( input != null ) return "<non-file>";^228^229^^^^227^232^if  ( input == null ) return "<non-file>";^[CLASS] Var  [METHOD] getInputName [RETURN_TYPE] String   [VARIABLES] CompilerInput  input  JSType  type  boolean  inferred  isDefine  typeInferred  Scope  s  scope  Node  nameNode  parent  String  name  JSDocInfo  info  int  index  num  
[BugLab_Wrong_Operator]^if  ( info != null || info.isNoShadow (  )  )  {^235^^^^^234^240^if  ( info != null && info.isNoShadow (  )  )  {^[CLASS] Var  [METHOD] isNoShadow [RETURN_TYPE] boolean   [VARIABLES] CompilerInput  input  JSType  type  boolean  inferred  isDefine  typeInferred  Scope  s  scope  Node  nameNode  parent  String  name  JSDocInfo  info  int  index  num  
[BugLab_Wrong_Operator]^if  ( info == null && info.isNoShadow (  )  )  {^235^^^^^234^240^if  ( info != null && info.isNoShadow (  )  )  {^[CLASS] Var  [METHOD] isNoShadow [RETURN_TYPE] boolean   [VARIABLES] CompilerInput  input  JSType  type  boolean  inferred  isDefine  typeInferred  Scope  s  scope  Node  nameNode  parent  String  name  JSDocInfo  info  int  index  num  
[BugLab_Wrong_Literal]^return true;^238^^^^^234^240^return false;^[CLASS] Var  [METHOD] isNoShadow [RETURN_TYPE] boolean   [VARIABLES] CompilerInput  input  JSType  type  boolean  inferred  isDefine  typeInferred  Scope  s  scope  Node  nameNode  parent  String  name  JSDocInfo  info  int  index  num  
[BugLab_Wrong_Literal]^return false;^236^^^^^234^240^return true;^[CLASS] Var  [METHOD] isNoShadow [RETURN_TYPE] boolean   [VARIABLES] CompilerInput  input  JSType  type  boolean  inferred  isDefine  typeInferred  Scope  s  scope  Node  nameNode  parent  String  name  JSDocInfo  info  int  index  num  
[BugLab_Wrong_Operator]^if  ( ! ( other  ==  Var )  )  {^243^^^^^242^249^if  ( ! ( other instanceof Var )  )  {^[CLASS] Var  [METHOD] equals [RETURN_TYPE] boolean   Object other [VARIABLES] CompilerInput  input  JSType  type  boolean  inferred  isDefine  typeInferred  Scope  s  scope  Var  otherVar  Node  nameNode  parent  Object  other  String  name  JSDocInfo  info  int  index  num  
[BugLab_Wrong_Literal]^return true;^244^^^^^242^249^return false;^[CLASS] Var  [METHOD] equals [RETURN_TYPE] boolean   Object other [VARIABLES] CompilerInput  input  JSType  type  boolean  inferred  isDefine  typeInferred  Scope  s  scope  Var  otherVar  Node  nameNode  parent  Object  other  String  name  JSDocInfo  info  int  index  num  
[BugLab_Variable_Misuse]^return otherVar.nameNode == parent;^248^^^^^242^249^return otherVar.nameNode == nameNode;^[CLASS] Var  [METHOD] equals [RETURN_TYPE] boolean   Object other [VARIABLES] CompilerInput  input  JSType  type  boolean  inferred  isDefine  typeInferred  Scope  s  scope  Var  otherVar  Node  nameNode  parent  Object  other  String  name  JSDocInfo  info  int  index  num  
[BugLab_Argument_Swapping]^return nameNode.nameNode == otherVar;^248^^^^^242^249^return otherVar.nameNode == nameNode;^[CLASS] Var  [METHOD] equals [RETURN_TYPE] boolean   Object other [VARIABLES] CompilerInput  input  JSType  type  boolean  inferred  isDefine  typeInferred  Scope  s  scope  Var  otherVar  Node  nameNode  parent  Object  other  String  name  JSDocInfo  info  int  index  num  
[BugLab_Argument_Swapping]^return nameNode == otherVar.nameNode;^248^^^^^242^249^return otherVar.nameNode == nameNode;^[CLASS] Var  [METHOD] equals [RETURN_TYPE] boolean   Object other [VARIABLES] CompilerInput  input  JSType  type  boolean  inferred  isDefine  typeInferred  Scope  s  scope  Var  otherVar  Node  nameNode  parent  Object  other  String  name  JSDocInfo  info  int  index  num  
[BugLab_Wrong_Operator]^return otherVar.nameNode < nameNode;^248^^^^^242^249^return otherVar.nameNode == nameNode;^[CLASS] Var  [METHOD] equals [RETURN_TYPE] boolean   Object other [VARIABLES] CompilerInput  input  JSType  type  boolean  inferred  isDefine  typeInferred  Scope  s  scope  Var  otherVar  Node  nameNode  parent  Object  other  String  name  JSDocInfo  info  int  index  num  
[BugLab_Variable_Misuse]^return parent.hashCode (  ) ;^252^^^^^251^253^return nameNode.hashCode (  ) ;^[CLASS] Var  [METHOD] hashCode [RETURN_TYPE] int   [VARIABLES] CompilerInput  input  JSType  type  boolean  inferred  isDefine  typeInferred  Scope  s  scope  Node  nameNode  parent  String  name  JSDocInfo  info  int  index  num  
