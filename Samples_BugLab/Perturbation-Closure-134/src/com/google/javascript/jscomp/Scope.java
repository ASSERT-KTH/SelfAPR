[buglab_swap_variables]^Preconditions.checkArgument ( parent.rootNode != rootNode ) ;^268^^^^^266^279^Preconditions.checkArgument ( rootNode != parent.rootNode ) ;^[CLASS] Scope Var  [METHOD] <init> [RETURN_TYPE] Node)   Scope parent Node rootNode [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  scope  Node  nameNode  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  
[buglab_swap_variables]^Preconditions.checkArgument ( parent != rootNode.rootNode ) ;^268^^^^^266^279^Preconditions.checkArgument ( rootNode != parent.rootNode ) ;^[CLASS] Scope Var  [METHOD] <init> [RETURN_TYPE] Node)   Scope parent Node rootNode [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  scope  Node  nameNode  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  
[buglab_swap_variables]^thisType = parent.thisType.thisType;^276^^^^^266^279^thisType = parent.thisType;^[CLASS] Scope Var  [METHOD] <init> [RETURN_TYPE] Node)   Scope parent Node rootNode [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  scope  Node  nameNode  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  
[buglab_swap_variables]^thisType = parent;^276^^^^^266^279^thisType = parent.thisType;^[CLASS] Scope Var  [METHOD] <init> [RETURN_TYPE] Node)   Scope parent Node rootNode [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  scope  Node  nameNode  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  
[buglab_swap_variables]^return nameNode.getType (  )  == Token.FUNCTION ? parent : parent.getFirstChild (  ) ;^184^185^^^^182^186^return parent.getType (  )  == Token.FUNCTION ? parent : nameNode.getFirstChild (  ) ;^[CLASS] Scope Var  [METHOD] getInitialValue [RETURN_TYPE] Node   [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  s  scope  Node  nameNode  parent  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[buglab_swap_variables]^return nameNode.nameNode == otherVar;^248^^^^^242^249^return otherVar.nameNode == nameNode;^[CLASS] Scope Var  [METHOD] equals [RETURN_TYPE] boolean   Object other [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  s  scope  Var  otherVar  Node  nameNode  parent  rootNode  Object  other  String  name  JSDocInfo  info  Map  vars  int  index  num  
[buglab_swap_variables]^return otherVar == nameNode;^248^^^^^242^249^return otherVar.nameNode == nameNode;^[CLASS] Scope Var  [METHOD] equals [RETURN_TYPE] boolean   Object other [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  s  scope  Var  otherVar  Node  nameNode  parent  rootNode  Object  other  String  name  JSDocInfo  info  Map  vars  int  index  num  
[buglab_swap_variables]^return nameNode == otherVar.nameNode;^248^^^^^242^249^return otherVar.nameNode == nameNode;^[CLASS] Scope Var  [METHOD] equals [RETURN_TYPE] boolean   Object other [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  s  scope  Var  otherVar  Node  nameNode  parent  rootNode  Object  other  String  name  JSDocInfo  info  Map  vars  int  index  num  
[buglab_swap_variables]^return declare ( nameNode, name, type, input, true ) ;^351^^^^^350^352^return declare ( name, nameNode, type, input, true ) ;^[CLASS] Scope Var  [METHOD] declare [RETURN_TYPE] Scope$Var   String name Node nameNode JSType type CompilerInput input [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  result  s  scope  Node  nameNode  parent  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[buglab_swap_variables]^return declare (  nameNode, type, input, true ) ;^351^^^^^350^352^return declare ( name, nameNode, type, input, true ) ;^[CLASS] Scope Var  [METHOD] declare [RETURN_TYPE] Scope$Var   String name Node nameNode JSType type CompilerInput input [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  result  s  scope  Node  nameNode  parent  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[buglab_swap_variables]^return declare ( name, type, nameNode, input, true ) ;^351^^^^^350^352^return declare ( name, nameNode, type, input, true ) ;^[CLASS] Scope Var  [METHOD] declare [RETURN_TYPE] Scope$Var   String name Node nameNode JSType type CompilerInput input [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  result  s  scope  Node  nameNode  parent  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[buglab_swap_variables]^return declare ( name,  type, input, true ) ;^351^^^^^350^352^return declare ( name, nameNode, type, input, true ) ;^[CLASS] Scope Var  [METHOD] declare [RETURN_TYPE] Scope$Var   String name Node nameNode JSType type CompilerInput input [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  result  s  scope  Node  nameNode  parent  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[buglab_swap_variables]^return declare ( type, nameNode, name, input, true ) ;^351^^^^^350^352^return declare ( name, nameNode, type, input, true ) ;^[CLASS] Scope Var  [METHOD] declare [RETURN_TYPE] Scope$Var   String name Node nameNode JSType type CompilerInput input [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  result  s  scope  Node  nameNode  parent  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[buglab_swap_variables]^return declare ( name, nameNode,  input, true ) ;^351^^^^^350^352^return declare ( name, nameNode, type, input, true ) ;^[CLASS] Scope Var  [METHOD] declare [RETURN_TYPE] Scope$Var   String name Node nameNode JSType type CompilerInput input [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  result  s  scope  Node  nameNode  parent  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[buglab_swap_variables]^return declare ( input, nameNode, type, name, true ) ;^351^^^^^350^352^return declare ( name, nameNode, type, input, true ) ;^[CLASS] Scope Var  [METHOD] declare [RETURN_TYPE] Scope$Var   String name Node nameNode JSType type CompilerInput input [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  result  s  scope  Node  nameNode  parent  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[buglab_swap_variables]^return declare ( name, nameNode, type,  true ) ;^351^^^^^350^352^return declare ( name, nameNode, type, input, true ) ;^[CLASS] Scope Var  [METHOD] declare [RETURN_TYPE] Scope$Var   String name Node nameNode JSType type CompilerInput input [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  result  s  scope  Node  nameNode  parent  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[buglab_swap_variables]^return declare ( name, nameNode, input, type, true ) ;^351^^^^^350^352^return declare ( name, nameNode, type, input, true ) ;^[CLASS] Scope Var  [METHOD] declare [RETURN_TYPE] Scope$Var   String name Node nameNode JSType type CompilerInput input [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  result  s  scope  Node  nameNode  parent  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[buglab_swap_variables]^Preconditions.checkState ( name.get ( vars )  == null ) ;^369^^^^^364^388^Preconditions.checkState ( vars.get ( name )  == null ) ;^[CLASS] Scope Var  [METHOD] declare [RETURN_TYPE] Scope$Var   String name Node nameNode JSType type CompilerInput input boolean inferred [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  result  s  scope  Var  var  Node  nameNode  parent  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[buglab_swap_variables]^var.index = varss.size (  ) ;^376^^^^^364^388^var.index = vars.size (  ) ;^[CLASS] Scope Var  [METHOD] declare [RETURN_TYPE] Scope$Var   String name Node nameNode JSType type CompilerInput input boolean inferred [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  result  s  scope  Var  var  Node  nameNode  parent  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[buglab_swap_variables]^var.index = var.size (  ) ;^376^^^^^364^388^var.index = vars.size (  ) ;^[CLASS] Scope Var  [METHOD] declare [RETURN_TYPE] Scope$Var   String name Node nameNode JSType type CompilerInput input boolean inferred [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  result  s  scope  Var  var  Node  nameNode  parent  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[buglab_swap_variables]^vars.put (  var ) ;^386^^^^^364^388^vars.put ( name, var ) ;^[CLASS] Scope Var  [METHOD] declare [RETURN_TYPE] Scope$Var   String name Node nameNode JSType type CompilerInput input boolean inferred [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  result  s  scope  Var  var  Node  nameNode  parent  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[buglab_swap_variables]^vars.put ( name ) ;^386^^^^^364^388^vars.put ( name, var ) ;^[CLASS] Scope Var  [METHOD] declare [RETURN_TYPE] Scope$Var   String name Node nameNode JSType type CompilerInput input boolean inferred [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  result  s  scope  Var  var  Node  nameNode  parent  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[buglab_swap_variables]^Preconditions.checkState ( var.scope.scope == this ) ;^395^^^^^394^398^Preconditions.checkState ( var.scope == this ) ;^[CLASS] Scope Var  [METHOD] undeclare [RETURN_TYPE] void   Var var [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  result  s  scope  Var  var  Node  nameNode  parent  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[buglab_swap_variables]^Preconditions.checkState ( var == this ) ;^395^^^^^394^398^Preconditions.checkState ( var.scope == this ) ;^[CLASS] Scope Var  [METHOD] undeclare [RETURN_TYPE] void   Var var [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  result  s  scope  Var  var  Node  nameNode  parent  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[buglab_swap_variables]^Preconditions.checkState ( var.names.get ( var )  == var ) ;^396^^^^^394^398^Preconditions.checkState ( vars.get ( var.name )  == var ) ;^[CLASS] Scope Var  [METHOD] undeclare [RETURN_TYPE] void   Var var [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  result  s  scope  Var  var  Node  nameNode  parent  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[buglab_swap_variables]^Preconditions.checkState ( var.name.get ( vars )  == var ) ;^396^^^^^394^398^Preconditions.checkState ( vars.get ( var.name )  == var ) ;^[CLASS] Scope Var  [METHOD] undeclare [RETURN_TYPE] void   Var var [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  result  s  scope  Var  var  Node  nameNode  parent  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[buglab_swap_variables]^Preconditions.checkState ( varss.get ( var.name )  == var ) ;^396^^^^^394^398^Preconditions.checkState ( vars.get ( var.name )  == var ) ;^[CLASS] Scope Var  [METHOD] undeclare [RETURN_TYPE] void   Var var [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  result  s  scope  Var  var  Node  nameNode  parent  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[buglab_swap_variables]^vars.remove ( var.name.name ) ;^397^^^^^394^398^vars.remove ( var.name ) ;^[CLASS] Scope Var  [METHOD] undeclare [RETURN_TYPE] void   Var var [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  result  s  scope  Var  var  Node  nameNode  parent  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[buglab_swap_variables]^vars.remove ( var ) ;^397^^^^^394^398^vars.remove ( var.name ) ;^[CLASS] Scope Var  [METHOD] undeclare [RETURN_TYPE] void   Var var [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  result  s  scope  Var  var  Node  nameNode  parent  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[buglab_swap_variables]^return name.get ( vars ) ;^405^^^^^404^406^return vars.get ( name ) ;^[CLASS] Scope Var  [METHOD] getOwnSlot [RETURN_TYPE] StaticSlot   String name [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  result  s  scope  Node  nameNode  parent  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[buglab_swap_variables]^Var var = name.get ( vars ) ;^412^^^^^411^420^Var var = vars.get ( name ) ;^[CLASS] Scope Var  [METHOD] getVar [RETURN_TYPE] Scope$Var   String name [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  result  s  scope  Var  var  Node  nameNode  parent  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[buglab_swap_variables]^return name.getVar ( parent ) ;^416^^^^^411^420^return parent.getVar ( name ) ;^[CLASS] Scope Var  [METHOD] getVar [RETURN_TYPE] Scope$Var   String name [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  typeInferred  JSType  nodeType  type  Scope  parent  result  s  scope  Var  var  Node  nameNode  parent  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[buglab_swap_variables]^if  ( scope.vars.vars.containsKey ( name )  ) return true;^427^428^^^^425^434^if  ( scope.vars.containsKey ( name )  ) return true;^[CLASS] Scope Var  [METHOD] isDeclared [RETURN_TYPE] boolean   String name boolean recurse [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  recurse  typeInferred  JSType  nodeType  type  Scope  parent  result  s  scope  Node  nameNode  parent  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[buglab_swap_variables]^if  ( name.containsKey ( scope.vars )  ) return true;^427^428^^^^425^434^if  ( scope.vars.containsKey ( name )  ) return true;^[CLASS] Scope Var  [METHOD] isDeclared [RETURN_TYPE] boolean   String name boolean recurse [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  recurse  typeInferred  JSType  nodeType  type  Scope  parent  result  s  scope  Node  nameNode  parent  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[buglab_swap_variables]^if  ( scope.containsKey ( name )  ) return true;^427^428^^^^425^434^if  ( scope.vars.containsKey ( name )  ) return true;^[CLASS] Scope Var  [METHOD] isDeclared [RETURN_TYPE] boolean   String name boolean recurse [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  recurse  typeInferred  JSType  nodeType  type  Scope  parent  result  s  scope  Node  nameNode  parent  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[buglab_swap_variables]^if  ( name.vars.containsKey ( scope )  ) return true;^427^428^^^^425^434^if  ( scope.vars.containsKey ( name )  ) return true;^[CLASS] Scope Var  [METHOD] isDeclared [RETURN_TYPE] boolean   String name boolean recurse [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  recurse  typeInferred  JSType  nodeType  type  Scope  parent  result  s  scope  Node  nameNode  parent  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[buglab_swap_variables]^if  ( scope.parent.parent != null && recurse )  {^430^^^^^425^434^if  ( scope.parent != null && recurse )  {^[CLASS] Scope Var  [METHOD] isDeclared [RETURN_TYPE] boolean   String name boolean recurse [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  recurse  typeInferred  JSType  nodeType  type  Scope  parent  result  s  scope  Node  nameNode  parent  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[buglab_swap_variables]^if  ( recurse.parent != null && scope )  {^430^^^^^425^434^if  ( scope.parent != null && recurse )  {^[CLASS] Scope Var  [METHOD] isDeclared [RETURN_TYPE] boolean   String name boolean recurse [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  recurse  typeInferred  JSType  nodeType  type  Scope  parent  result  s  scope  Node  nameNode  parent  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[buglab_swap_variables]^if  ( scope != null && recurse )  {^430^^^^^425^434^if  ( scope.parent != null && recurse )  {^[CLASS] Scope Var  [METHOD] isDeclared [RETURN_TYPE] boolean   String name boolean recurse [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  recurse  typeInferred  JSType  nodeType  type  Scope  parent  result  s  scope  Node  nameNode  parent  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[buglab_swap_variables]^return scope.parent.parent.isDeclared ( name, recurse ) ;^431^^^^^425^434^return scope.parent.isDeclared ( name, recurse ) ;^[CLASS] Scope Var  [METHOD] isDeclared [RETURN_TYPE] boolean   String name boolean recurse [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  recurse  typeInferred  JSType  nodeType  type  Scope  parent  result  s  scope  Node  nameNode  parent  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[buglab_swap_variables]^return name.parent.isDeclared ( scope, recurse ) ;^431^^^^^425^434^return scope.parent.isDeclared ( name, recurse ) ;^[CLASS] Scope Var  [METHOD] isDeclared [RETURN_TYPE] boolean   String name boolean recurse [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  recurse  typeInferred  JSType  nodeType  type  Scope  parent  result  s  scope  Node  nameNode  parent  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[buglab_swap_variables]^return scope.parent.isDeclared (  recurse ) ;^431^^^^^425^434^return scope.parent.isDeclared ( name, recurse ) ;^[CLASS] Scope Var  [METHOD] isDeclared [RETURN_TYPE] boolean   String name boolean recurse [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  recurse  typeInferred  JSType  nodeType  type  Scope  parent  result  s  scope  Node  nameNode  parent  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[buglab_swap_variables]^return recurse.isDeclared ( name, scope.parent ) ;^431^^^^^425^434^return scope.parent.isDeclared ( name, recurse ) ;^[CLASS] Scope Var  [METHOD] isDeclared [RETURN_TYPE] boolean   String name boolean recurse [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  recurse  typeInferred  JSType  nodeType  type  Scope  parent  result  s  scope  Node  nameNode  parent  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[buglab_swap_variables]^return scope.parent.isDeclared ( name ) ;^431^^^^^425^434^return scope.parent.isDeclared ( name, recurse ) ;^[CLASS] Scope Var  [METHOD] isDeclared [RETURN_TYPE] boolean   String name boolean recurse [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  recurse  typeInferred  JSType  nodeType  type  Scope  parent  result  s  scope  Node  nameNode  parent  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[buglab_swap_variables]^return scope.isDeclared ( name, recurse ) ;^431^^^^^425^434^return scope.parent.isDeclared ( name, recurse ) ;^[CLASS] Scope Var  [METHOD] isDeclared [RETURN_TYPE] boolean   String name boolean recurse [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  recurse  typeInferred  JSType  nodeType  type  Scope  parent  result  s  scope  Node  nameNode  parent  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[buglab_swap_variables]^return recurse.parent.isDeclared ( name, scope ) ;^431^^^^^425^434^return scope.parent.isDeclared ( name, recurse ) ;^[CLASS] Scope Var  [METHOD] isDeclared [RETURN_TYPE] boolean   String name boolean recurse [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  recurse  typeInferred  JSType  nodeType  type  Scope  parent  result  s  scope  Node  nameNode  parent  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[buglab_swap_variables]^return name.isDeclared ( scope.parent, recurse ) ;^431^^^^^425^434^return scope.parent.isDeclared ( name, recurse ) ;^[CLASS] Scope Var  [METHOD] isDeclared [RETURN_TYPE] boolean   String name boolean recurse [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  recurse  typeInferred  JSType  nodeType  type  Scope  parent  result  s  scope  Node  nameNode  parent  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[buglab_swap_variables]^return scope.parent.isDeclared ( recurse, name ) ;^431^^^^^425^434^return scope.parent.isDeclared ( name, recurse ) ;^[CLASS] Scope Var  [METHOD] isDeclared [RETURN_TYPE] boolean   String name boolean recurse [VARIABLES] ObjectType  thisType  CompilerInput  input  boolean  inferred  isBottom  isDefine  recurse  typeInferred  JSType  nodeType  type  Scope  parent  result  s  scope  Node  nameNode  parent  rootNode  String  name  JSDocInfo  info  Map  vars  int  index  num  
[buglab_swap_variables]^return nameNode.getType (  )  == Token.FUNCTION ? parent : parent.getFirstChild (  ) ;^184^185^^^^182^186^return parent.getType (  )  == Token.FUNCTION ? parent : nameNode.getFirstChild (  ) ;^[CLASS] Var  [METHOD] getInitialValue [RETURN_TYPE] Node   [VARIABLES] CompilerInput  input  JSType  type  boolean  inferred  isDefine  typeInferred  Scope  s  scope  Node  nameNode  parent  String  name  JSDocInfo  info  int  index  num  
[buglab_swap_variables]^return otherVar.nameNode.nameNode == nameNode;^248^^^^^242^249^return otherVar.nameNode == nameNode;^[CLASS] Var  [METHOD] equals [RETURN_TYPE] boolean   Object other [VARIABLES] CompilerInput  input  JSType  type  boolean  inferred  isDefine  typeInferred  Scope  s  scope  Var  otherVar  Node  nameNode  parent  Object  other  String  name  JSDocInfo  info  int  index  num  
[buglab_swap_variables]^return otherVar == nameNode;^248^^^^^242^249^return otherVar.nameNode == nameNode;^[CLASS] Var  [METHOD] equals [RETURN_TYPE] boolean   Object other [VARIABLES] CompilerInput  input  JSType  type  boolean  inferred  isDefine  typeInferred  Scope  s  scope  Var  otherVar  Node  nameNode  parent  Object  other  String  name  JSDocInfo  info  int  index  num  
[buglab_swap_variables]^return nameNode == otherVar.nameNode;^248^^^^^242^249^return otherVar.nameNode == nameNode;^[CLASS] Var  [METHOD] equals [RETURN_TYPE] boolean   Object other [VARIABLES] CompilerInput  input  JSType  type  boolean  inferred  isDefine  typeInferred  Scope  s  scope  Var  otherVar  Node  nameNode  parent  Object  other  String  name  JSDocInfo  info  int  index  num  
