[buglab_swap_variables]^computeEscaped ( compiler, escaped, jsScope ) ;^57^^^^^51^58^computeEscaped ( jsScope, escaped, compiler ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] <init> [RETURN_TYPE] AbstractCompiler)   Node> cfg Scope jsScope AbstractCompiler compiler [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Node  node  ControlFlowGraph  cfg  Map  reachingDef  
[buglab_swap_variables]^computeEscaped (  escaped, compiler ) ;^57^^^^^51^58^computeEscaped ( jsScope, escaped, compiler ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] <init> [RETURN_TYPE] AbstractCompiler)   Node> cfg Scope jsScope AbstractCompiler compiler [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Node  node  ControlFlowGraph  cfg  Map  reachingDef  
[buglab_swap_variables]^computeEscaped ( jsScope, compiler, escaped ) ;^57^^^^^51^58^computeEscaped ( jsScope, escaped, compiler ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] <init> [RETURN_TYPE] AbstractCompiler)   Node> cfg Scope jsScope AbstractCompiler compiler [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Node  node  ControlFlowGraph  cfg  Map  reachingDef  
[buglab_swap_variables]^computeEscaped ( jsScope, escaped ) ;^57^^^^^51^58^computeEscaped ( jsScope, escaped, compiler ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] <init> [RETURN_TYPE] AbstractCompiler)   Node> cfg Scope jsScope AbstractCompiler compiler [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Node  node  ControlFlowGraph  cfg  Map  reachingDef  
[buglab_swap_variables]^computeEscaped ( jsScope,  compiler ) ;^57^^^^^51^58^computeEscaped ( jsScope, escaped, compiler ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] <init> [RETURN_TYPE] AbstractCompiler)   Node> cfg Scope jsScope AbstractCompiler compiler [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Node  node  ControlFlowGraph  cfg  Map  reachingDef  
[buglab_swap_variables]^reachingDef = Maps.newHashMap ( other.reachingDef.reachingDef ) ;^133^^^^^132^134^reachingDef = Maps.newHashMap ( other.reachingDef ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] <init> [RETURN_TYPE] MustBeReachingVariableDef$MustDef)   MustDef other [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Node  node  Map  reachingDef  MustDef  other  
[buglab_swap_variables]^reachingDef = Maps.newHashMap ( other ) ;^133^^^^^132^134^reachingDef = Maps.newHashMap ( other.reachingDef ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] <init> [RETURN_TYPE] MustBeReachingVariableDef$MustDef)   MustDef other [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Node  node  Map  reachingDef  MustDef  other  
[buglab_swap_variables]^return node.node == otherDef;^81^^^^^74^82^return otherDef.node == node;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] equals [RETURN_TYPE] boolean   Object other [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Node  node  Definition  otherDef  Object  other  Map  reachingDef  
[buglab_swap_variables]^return node == otherDef.node;^81^^^^^74^82^return otherDef.node == node;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] equals [RETURN_TYPE] boolean   Object other [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Node  node  Definition  otherDef  Object  other  Map  reachingDef  
[buglab_swap_variables]^Map<Var, Definition> result.reachingDefMap = result;^147^^^^^132^162^Map<Var, Definition> resultMap = result.reachingDef;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] apply [RETURN_TYPE] MustBeReachingVariableDef$MustDef   MustDef a MustDef b [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  var  Node  aNode  node  Definition  aDef  bDef  Map  reachingDef  resultMap  MustDef  a  b  result  
[buglab_swap_variables]^resultMap.put (  null ) ;^158^^^^^143^173^resultMap.put ( var, null ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] apply [RETURN_TYPE] MustBeReachingVariableDef$MustDef   MustDef a MustDef b [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  var  Node  aNode  node  Definition  aDef  bDef  Map  reachingDef  resultMap  MustDef  a  b  result  
[buglab_swap_variables]^if  ( b.reachingDef.reachingDef.containsKey ( var )  )  {^164^^^^^149^179^if  ( b.reachingDef.containsKey ( var )  )  {^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] apply [RETURN_TYPE] MustBeReachingVariableDef$MustDef   MustDef a MustDef b [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  var  Node  aNode  node  Definition  aDef  bDef  Map  reachingDef  resultMap  MustDef  a  b  result  
[buglab_swap_variables]^if  ( var.reachingDef.containsKey ( b )  )  {^164^^^^^149^179^if  ( b.reachingDef.containsKey ( var )  )  {^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] apply [RETURN_TYPE] MustBeReachingVariableDef$MustDef   MustDef a MustDef b [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  var  Node  aNode  node  Definition  aDef  bDef  Map  reachingDef  resultMap  MustDef  a  b  result  
[buglab_swap_variables]^resultMap.put (  aDef ) ;^173^^^^^164^174^resultMap.put ( var, aDef ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] apply [RETURN_TYPE] MustBeReachingVariableDef$MustDef   MustDef a MustDef b [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  var  Node  aNode  node  Definition  aDef  bDef  Map  reachingDef  resultMap  MustDef  a  b  result  
[buglab_swap_variables]^resultMap.put ( aDef, var ) ;^173^^^^^164^174^resultMap.put ( var, aDef ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] apply [RETURN_TYPE] MustBeReachingVariableDef$MustDef   MustDef a MustDef b [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  var  Node  aNode  node  Definition  aDef  bDef  Map  reachingDef  resultMap  MustDef  a  b  result  
[buglab_swap_variables]^resultMap.put ( var ) ;^173^^^^^164^174^resultMap.put ( var, aDef ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] apply [RETURN_TYPE] MustBeReachingVariableDef$MustDef   MustDef a MustDef b [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  var  Node  aNode  node  Definition  aDef  bDef  Map  reachingDef  resultMap  MustDef  a  b  result  
[buglab_swap_variables]^if  ( bDef.equals ( aDef )  )  {^167^^^^^152^182^if  ( aDef.equals ( bDef )  )  {^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] apply [RETURN_TYPE] MustBeReachingVariableDef$MustDef   MustDef a MustDef b [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  var  Node  aNode  node  Definition  aDef  bDef  Map  reachingDef  resultMap  MustDef  a  b  result  
[buglab_swap_variables]^resultMap.put (  null ) ;^170^^^^^167^171^resultMap.put ( var, null ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] apply [RETURN_TYPE] MustBeReachingVariableDef$MustDef   MustDef a MustDef b [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  var  Node  aNode  node  Definition  aDef  bDef  Map  reachingDef  resultMap  MustDef  a  b  result  
[buglab_swap_variables]^resultMap.put (  aDef ) ;^168^^^^^153^183^resultMap.put ( var, aDef ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] apply [RETURN_TYPE] MustBeReachingVariableDef$MustDef   MustDef a MustDef b [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  var  Node  aNode  node  Definition  aDef  bDef  Map  reachingDef  resultMap  MustDef  a  b  result  
[buglab_swap_variables]^resultMap.put ( var ) ;^168^^^^^153^183^resultMap.put ( var, aDef ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] apply [RETURN_TYPE] MustBeReachingVariableDef$MustDef   MustDef a MustDef b [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  var  Node  aNode  node  Definition  aDef  bDef  Map  reachingDef  resultMap  MustDef  a  b  result  
[buglab_swap_variables]^Definition b.reachingDefDef = b.get ( var ) ;^165^^^^^150^180^Definition bDef = b.reachingDef.get ( var ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] apply [RETURN_TYPE] MustBeReachingVariableDef$MustDef   MustDef a MustDef b [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  var  Node  aNode  node  Definition  aDef  bDef  Map  reachingDef  resultMap  MustDef  a  b  result  
[buglab_swap_variables]^Definition varDef = b.reachingDef.get ( b ) ;^165^^^^^150^180^Definition bDef = b.reachingDef.get ( var ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] apply [RETURN_TYPE] MustBeReachingVariableDef$MustDef   MustDef a MustDef b [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  var  Node  aNode  node  Definition  aDef  bDef  Map  reachingDef  resultMap  MustDef  a  b  result  
[buglab_swap_variables]^Definition bDef = var.get ( b.reachingDef ) ;^165^^^^^150^180^Definition bDef = b.reachingDef.get ( var ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] apply [RETURN_TYPE] MustBeReachingVariableDef$MustDef   MustDef a MustDef b [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  var  Node  aNode  node  Definition  aDef  bDef  Map  reachingDef  resultMap  MustDef  a  b  result  
[buglab_swap_variables]^resultMap.put ( aDef, var ) ;^168^^^^^153^183^resultMap.put ( var, aDef ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] apply [RETURN_TYPE] MustBeReachingVariableDef$MustDef   MustDef a MustDef b [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  var  Node  aNode  node  Definition  aDef  bDef  Map  reachingDef  resultMap  MustDef  a  b  result  
[buglab_swap_variables]^resultMap.put (  null ) ;^170^^^^^155^185^resultMap.put ( var, null ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] apply [RETURN_TYPE] MustBeReachingVariableDef$MustDef   MustDef a MustDef b [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  var  Node  aNode  node  Definition  aDef  bDef  Map  reachingDef  resultMap  MustDef  a  b  result  
[buglab_swap_variables]^Definition a.reachingDefDef = a.get ( var ) ;^152^^^^^137^167^Definition aDef = a.reachingDef.get ( var ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] apply [RETURN_TYPE] MustBeReachingVariableDef$MustDef   MustDef a MustDef b [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  var  Node  aNode  node  Definition  aDef  bDef  Map  reachingDef  resultMap  MustDef  a  b  result  
[buglab_swap_variables]^Definition varDef = a.reachingDef.get ( a ) ;^152^^^^^137^167^Definition aDef = a.reachingDef.get ( var ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] apply [RETURN_TYPE] MustBeReachingVariableDef$MustDef   MustDef a MustDef b [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  var  Node  aNode  node  Definition  aDef  bDef  Map  reachingDef  resultMap  MustDef  a  b  result  
[buglab_swap_variables]^Node aNode = aDef.node.node;^162^^^^^147^177^Node aNode = aDef.node;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] apply [RETURN_TYPE] MustBeReachingVariableDef$MustDef   MustDef a MustDef b [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  var  Node  aNode  node  Definition  aDef  bDef  Map  reachingDef  resultMap  MustDef  a  b  result  
[buglab_swap_variables]^Node aNode = aDef;^162^^^^^147^177^Node aNode = aDef.node;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] apply [RETURN_TYPE] MustBeReachingVariableDef$MustDef   MustDef a MustDef b [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  var  Node  aNode  node  Definition  aDef  bDef  Map  reachingDef  resultMap  MustDef  a  b  result  
[buglab_swap_variables]^for  ( Var var : a.reachingDef.reachingDef.keySet (  )  )  {^150^^^^^135^165^for  ( Var var : a.reachingDef.keySet (  )  )  {^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] apply [RETURN_TYPE] MustBeReachingVariableDef$MustDef   MustDef a MustDef b [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  var  Node  aNode  node  Definition  aDef  bDef  Map  reachingDef  resultMap  MustDef  a  b  result  
[buglab_swap_variables]^for  ( Var var : a.keySet (  )  )  {^150^^^^^135^165^for  ( Var var : a.reachingDef.keySet (  )  )  {^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] apply [RETURN_TYPE] MustBeReachingVariableDef$MustDef   MustDef a MustDef b [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  var  Node  aNode  node  Definition  aDef  bDef  Map  reachingDef  resultMap  MustDef  a  b  result  
[buglab_swap_variables]^if  ( var.containsKey ( b.reachingDef )  )  {^164^^^^^149^179^if  ( b.reachingDef.containsKey ( var )  )  {^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] apply [RETURN_TYPE] MustBeReachingVariableDef$MustDef   MustDef a MustDef b [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  var  Node  aNode  node  Definition  aDef  bDef  Map  reachingDef  resultMap  MustDef  a  b  result  
[buglab_swap_variables]^if  ( b.containsKey ( var )  )  {^164^^^^^149^179^if  ( b.reachingDef.containsKey ( var )  )  {^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] apply [RETURN_TYPE] MustBeReachingVariableDef$MustDef   MustDef a MustDef b [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  var  Node  aNode  node  Definition  aDef  bDef  Map  reachingDef  resultMap  MustDef  a  b  result  
[buglab_swap_variables]^resultMap.put (  aDef ) ;^173^^^^^158^188^resultMap.put ( var, aDef ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] apply [RETURN_TYPE] MustBeReachingVariableDef$MustDef   MustDef a MustDef b [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  var  Node  aNode  node  Definition  aDef  bDef  Map  reachingDef  resultMap  MustDef  a  b  result  
[buglab_swap_variables]^resultMap.put ( var ) ;^173^^^^^158^188^resultMap.put ( var, aDef ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] apply [RETURN_TYPE] MustBeReachingVariableDef$MustDef   MustDef a MustDef b [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  var  Node  aNode  node  Definition  aDef  bDef  Map  reachingDef  resultMap  MustDef  a  b  result  
[buglab_swap_variables]^resultMap.put (  b.reachingDef.get ( var )  ) ;^181^^^^^166^196^resultMap.put ( var, b.reachingDef.get ( var )  ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] apply [RETURN_TYPE] MustBeReachingVariableDef$MustDef   MustDef a MustDef b [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  var  Node  aNode  node  Definition  aDef  bDef  Map  reachingDef  resultMap  MustDef  a  b  result  
[buglab_swap_variables]^resultMap.put ( var.reachingDef.get ( var )  ) ;^181^^^^^166^196^resultMap.put ( var, b.reachingDef.get ( var )  ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] apply [RETURN_TYPE] MustBeReachingVariableDef$MustDef   MustDef a MustDef b [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  var  Node  aNode  node  Definition  aDef  bDef  Map  reachingDef  resultMap  MustDef  a  b  result  
[buglab_swap_variables]^resultMap.put ( var.get ( var )  ) ;^181^^^^^166^196^resultMap.put ( var, b.reachingDef.get ( var )  ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] apply [RETURN_TYPE] MustBeReachingVariableDef$MustDef   MustDef a MustDef b [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  var  Node  aNode  node  Definition  aDef  bDef  Map  reachingDef  resultMap  MustDef  a  b  result  
[buglab_swap_variables]^resultMap.put ( var, b.reachingDef.reachingDef.get ( var )  ) ;^181^^^^^166^196^resultMap.put ( var, b.reachingDef.get ( var )  ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] apply [RETURN_TYPE] MustBeReachingVariableDef$MustDef   MustDef a MustDef b [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  var  Node  aNode  node  Definition  aDef  bDef  Map  reachingDef  resultMap  MustDef  a  b  result  
[buglab_swap_variables]^resultMap.put ( b, var.reachingDef.get ( var )  ) ;^181^^^^^166^196^resultMap.put ( var, b.reachingDef.get ( var )  ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] apply [RETURN_TYPE] MustBeReachingVariableDef$MustDef   MustDef a MustDef b [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  var  Node  aNode  node  Definition  aDef  bDef  Map  reachingDef  resultMap  MustDef  a  b  result  
[buglab_swap_variables]^resultMap.put ( b.reachingDef, var.get ( var )  ) ;^181^^^^^166^196^resultMap.put ( var, b.reachingDef.get ( var )  ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] apply [RETURN_TYPE] MustBeReachingVariableDef$MustDef   MustDef a MustDef b [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  var  Node  aNode  node  Definition  aDef  bDef  Map  reachingDef  resultMap  MustDef  a  b  result  
[buglab_swap_variables]^for  ( Var var : b.reachingDef.reachingDef.keySet (  )  )  {^179^^^^^164^194^for  ( Var var : b.reachingDef.keySet (  )  )  {^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] apply [RETURN_TYPE] MustBeReachingVariableDef$MustDef   MustDef a MustDef b [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  var  Node  aNode  node  Definition  aDef  bDef  Map  reachingDef  resultMap  MustDef  a  b  result  
[buglab_swap_variables]^for  ( Var var : b.keySet (  )  )  {^179^^^^^164^194^for  ( Var var : b.reachingDef.keySet (  )  )  {^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] apply [RETURN_TYPE] MustBeReachingVariableDef$MustDef   MustDef a MustDef b [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  var  Node  aNode  node  Definition  aDef  bDef  Map  reachingDef  resultMap  MustDef  a  b  result  
[buglab_swap_variables]^resultMap.put ( var, b.get ( var )  ) ;^181^^^^^166^196^resultMap.put ( var, b.reachingDef.get ( var )  ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] apply [RETURN_TYPE] MustBeReachingVariableDef$MustDef   MustDef a MustDef b [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  var  Node  aNode  node  Definition  aDef  bDef  Map  reachingDef  resultMap  MustDef  a  b  result  
[buglab_swap_variables]^computeMustDef ( output, n, n, false ) ;^211^^^^^204^213^computeMustDef ( n, n, output, false ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] flowThrough [RETURN_TYPE] MustBeReachingVariableDef$MustDef   Node n MustDef input [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  n  node  Map  reachingDef  resultMap  MustDef  input  output  
[buglab_swap_variables]^computeMustDef (  n, output, false ) ;^211^^^^^204^213^computeMustDef ( n, n, output, false ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] flowThrough [RETURN_TYPE] MustBeReachingVariableDef$MustDef   Node n MustDef input [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  n  node  Map  reachingDef  resultMap  MustDef  input  output  
[buglab_swap_variables]^computeMustDef ( n, n,  false ) ;^211^^^^^204^213^computeMustDef ( n, n, output, false ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] flowThrough [RETURN_TYPE] MustBeReachingVariableDef$MustDef   Node n MustDef input [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  n  node  Map  reachingDef  resultMap  MustDef  input  output  
[buglab_swap_variables]^addToDefIfLocal ( rhs.getString (  ) , cfgNode, lhs, output ) ;^247^^^^^236^249^addToDefIfLocal ( lhs.getString (  ) , cfgNode, rhs, output ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[buglab_swap_variables]^addToDefIfLocal ( lhs.getString (  ) , rhs, cfgNode, output ) ;^247^^^^^236^249^addToDefIfLocal ( lhs.getString (  ) , cfgNode, rhs, output ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[buglab_swap_variables]^addToDefIfLocal ( lhs.getString (  ) ,  rhs, output ) ;^247^^^^^236^249^addToDefIfLocal ( lhs.getString (  ) , cfgNode, rhs, output ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[buglab_swap_variables]^addToDefIfLocal ( lhs.getString (  ) , cfgNode,  output ) ;^247^^^^^236^249^addToDefIfLocal ( lhs.getString (  ) , cfgNode, rhs, output ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[buglab_swap_variables]^addToDefIfLocal ( lhs.getString (  ) , cfgNode, output, rhs ) ;^247^^^^^236^249^addToDefIfLocal ( lhs.getString (  ) , cfgNode, rhs, output ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[buglab_swap_variables]^addToDefIfLocal ( lhs.getString (  ) , cfgNode, rhs ) ;^247^^^^^236^249^addToDefIfLocal ( lhs.getString (  ) , cfgNode, rhs, output ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[buglab_swap_variables]^addToDefIfLocal ( cfgNode.getString (  ) , lhs, rhs, output ) ;^247^^^^^236^249^addToDefIfLocal ( lhs.getString (  ) , cfgNode, rhs, output ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[buglab_swap_variables]^computeMustDef ( NodeUtil.getConditionExpression ( cfgNode ) , n, output, conditional ) ;^237^238^^^^222^252^computeMustDef ( NodeUtil.getConditionExpression ( n ) , cfgNode, output, conditional ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[buglab_swap_variables]^computeMustDef ( NodeUtil.getConditionExpression ( n ) ,  output, conditional ) ;^237^238^^^^222^252^computeMustDef ( NodeUtil.getConditionExpression ( n ) , cfgNode, output, conditional ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[buglab_swap_variables]^computeMustDef ( NodeUtil.getConditionExpression ( n ) , cfgNode, conditional, output ) ;^237^238^^^^222^252^computeMustDef ( NodeUtil.getConditionExpression ( n ) , cfgNode, output, conditional ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[buglab_swap_variables]^computeMustDef ( NodeUtil.getConditionExpression ( n ) , cfgNode,  conditional ) ;^237^238^^^^222^252^computeMustDef ( NodeUtil.getConditionExpression ( n ) , cfgNode, output, conditional ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[buglab_swap_variables]^computeMustDef ( NodeUtil.getConditionExpression ( n ) , cfgNode, output ) ;^237^238^^^^222^252^computeMustDef ( NodeUtil.getConditionExpression ( n ) , cfgNode, output, conditional ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[buglab_swap_variables]^addToDefIfLocal ( cfgNode.getString (  ) , lhs, rhs, output ) ;^247^^^^^232^262^addToDefIfLocal ( lhs.getString (  ) , cfgNode, rhs, output ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[buglab_swap_variables]^addToDefIfLocal ( lhs.getString (  ) ,  rhs, output ) ;^247^^^^^232^262^addToDefIfLocal ( lhs.getString (  ) , cfgNode, rhs, output ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[buglab_swap_variables]^addToDefIfLocal ( lhs.getString (  ) , rhs, cfgNode, output ) ;^247^^^^^232^262^addToDefIfLocal ( lhs.getString (  ) , cfgNode, rhs, output ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[buglab_swap_variables]^addToDefIfLocal ( lhs.getString (  ) , cfgNode,  output ) ;^247^^^^^232^262^addToDefIfLocal ( lhs.getString (  ) , cfgNode, rhs, output ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[buglab_swap_variables]^addToDefIfLocal ( lhs.getString (  ) , output, rhs, cfgNode ) ;^247^^^^^232^262^addToDefIfLocal ( lhs.getString (  ) , cfgNode, rhs, output ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[buglab_swap_variables]^addToDefIfLocal ( lhs.getString (  ) , cfgNode, rhs ) ;^247^^^^^232^262^addToDefIfLocal ( lhs.getString (  ) , cfgNode, rhs, output ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[buglab_swap_variables]^computeMustDef ( cfgNode.getFirstChild (  ) , c, output, conditional ) ;^267^^^^^252^282^computeMustDef ( c.getFirstChild (  ) , cfgNode, output, conditional ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[buglab_swap_variables]^computeMustDef ( c.getFirstChild (  ) fgNode, output, conditional ) ;^267^^^^^252^282^computeMustDef ( c.getFirstChild (  ) , cfgNode, output, conditional ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[buglab_swap_variables]^computeMustDef ( c.getFirstChild (  ) , conditional, output, cfgNode ) ;^267^^^^^252^282^computeMustDef ( c.getFirstChild (  ) , cfgNode, output, conditional ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[buglab_swap_variables]^computeMustDef ( c.getFirstChild (  ) ,  output, conditional ) ;^267^^^^^252^282^computeMustDef ( c.getFirstChild (  ) , cfgNode, output, conditional ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[buglab_swap_variables]^computeMustDef ( output.getFirstChild (  ) , cfgNode, c, conditional ) ;^267^^^^^252^282^computeMustDef ( c.getFirstChild (  ) , cfgNode, output, conditional ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[buglab_swap_variables]^computeMustDef ( c.getFirstChild (  ) , cfgNode,  conditional ) ;^267^^^^^252^282^computeMustDef ( c.getFirstChild (  ) , cfgNode, output, conditional ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[buglab_swap_variables]^computeMustDef ( c.getFirstChild (  ) , cfgNode, conditional, output ) ;^267^^^^^252^282^computeMustDef ( c.getFirstChild (  ) , cfgNode, output, conditional ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[buglab_swap_variables]^computeMustDef ( c.getFirstChild (  ) , cfgNode, output ) ;^267^^^^^252^282^computeMustDef ( c.getFirstChild (  ) , cfgNode, output, conditional ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[buglab_swap_variables]^addToDefIfLocal ( cfgNode.getString (  ) , conditional ? null : c, c.getFirstChild (  ) , output ) ;^268^269^^^^253^283^addToDefIfLocal ( c.getString (  ) , conditional ? null : cfgNode, c.getFirstChild (  ) , output ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[buglab_swap_variables]^addToDefIfLocal ( c.getString (  ) onditional ? null : cfgNode, c.getFirstChild (  ) , output ) ;^268^269^^^^253^283^addToDefIfLocal ( c.getString (  ) , conditional ? null : cfgNode, c.getFirstChild (  ) , output ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[buglab_swap_variables]^addToDefIfLocal ( c.getString (  ) , cfgNode ? null : conditional, c.getFirstChild (  ) , output ) ;^268^269^^^^253^283^addToDefIfLocal ( c.getString (  ) , conditional ? null : cfgNode, c.getFirstChild (  ) , output ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[buglab_swap_variables]^addToDefIfLocal ( c.getString (  )  ? null : cfgNode, c.getFirstChild (  ) , output ) ;^268^269^^^^253^283^addToDefIfLocal ( c.getString (  ) , conditional ? null : cfgNode, c.getFirstChild (  ) , output ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[buglab_swap_variables]^addToDefIfLocal ( c.getString (  ) , conditional ? null : output, c.getFirstChild (  ) , cfgNode ) ;^268^269^^^^253^283^addToDefIfLocal ( c.getString (  ) , conditional ? null : cfgNode, c.getFirstChild (  ) , output ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[buglab_swap_variables]^addToDefIfLocal ( c.getString (  ) , conditional ? null :  c.getFirstChild (  ) , output ) ;^268^269^^^^253^283^addToDefIfLocal ( c.getString (  ) , conditional ? null : cfgNode, c.getFirstChild (  ) , output ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[buglab_swap_variables]^addToDefIfLocal ( c.getString (  ) , output ? null : cfgNode, c.getFirstChild (  ) , conditional ) ;^268^269^^^^253^283^addToDefIfLocal ( c.getString (  ) , conditional ? null : cfgNode, c.getFirstChild (  ) , output ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[buglab_swap_variables]^addToDefIfLocal ( c.getString (  ) , conditional ? null : cfgNode, c.getFirstChild (  )  ) ;^268^269^^^^253^283^addToDefIfLocal ( c.getString (  ) , conditional ? null : cfgNode, c.getFirstChild (  ) , output ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[buglab_swap_variables]^addToDefIfLocal ( conditional.getString (  ) , target ? null : cfgNode, null, output ) ;^286^287^^^^275^295^addToDefIfLocal ( target.getString (  ) , conditional ? null : cfgNode, null, output ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[buglab_swap_variables]^addToDefIfLocal ( target.getString (  ) , cfgNode ? null : conditional, null, output ) ;^286^287^^^^275^295^addToDefIfLocal ( target.getString (  ) , conditional ? null : cfgNode, null, output ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[buglab_swap_variables]^addToDefIfLocal ( target.getString (  )  ? null : cfgNode, null, output ) ;^286^287^^^^275^295^addToDefIfLocal ( target.getString (  ) , conditional ? null : cfgNode, null, output ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[buglab_swap_variables]^addToDefIfLocal ( target.getString (  ) , conditional ? null : output, null, cfgNode ) ;^286^287^^^^275^295^addToDefIfLocal ( target.getString (  ) , conditional ? null : cfgNode, null, output ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[buglab_swap_variables]^addToDefIfLocal ( target.getString (  ) , conditional ? null :  null, output ) ;^286^287^^^^275^295^addToDefIfLocal ( target.getString (  ) , conditional ? null : cfgNode, null, output ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[buglab_swap_variables]^addToDefIfLocal ( target.getString (  ) , conditional ? null : cfgNode, null ) ;^286^287^^^^275^295^addToDefIfLocal ( target.getString (  ) , conditional ? null : cfgNode, null, output ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[buglab_swap_variables]^addToDefIfLocal ( cfgNode.getString (  ) , conditional ? null : target, null, output ) ;^286^287^^^^275^295^addToDefIfLocal ( target.getString (  ) , conditional ? null : cfgNode, null, output ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[buglab_swap_variables]^addToDefIfLocal ( output.getString (  ) , conditional ? null : cfgNode, null, target ) ;^286^287^^^^275^295^addToDefIfLocal ( target.getString (  ) , conditional ? null : cfgNode, null, output ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[buglab_swap_variables]^for  ( Node n = c.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  {^292^^^^^275^295^for  ( Node c = n.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  {^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[buglab_swap_variables]^computeMustDef ( output, cfgNode, c, conditional ) ;^293^^^^^275^295^computeMustDef ( c, cfgNode, output, conditional ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[buglab_swap_variables]^computeMustDef (  cfgNode, output, conditional ) ;^293^^^^^275^295^computeMustDef ( c, cfgNode, output, conditional ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[buglab_swap_variables]^computeMustDef ( c, conditional, output, cfgNode ) ;^293^^^^^275^295^computeMustDef ( c, cfgNode, output, conditional ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[buglab_swap_variables]^computeMustDef ( c,  output, conditional ) ;^293^^^^^275^295^computeMustDef ( c, cfgNode, output, conditional ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[buglab_swap_variables]^computeMustDef ( c, cfgNode,  conditional ) ;^293^^^^^275^295^computeMustDef ( c, cfgNode, output, conditional ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[buglab_swap_variables]^computeMustDef ( c, cfgNode, conditional, output ) ;^293^^^^^275^295^computeMustDef ( c, cfgNode, output, conditional ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[buglab_swap_variables]^computeMustDef ( c, cfgNode, output ) ;^293^^^^^275^295^computeMustDef ( c, cfgNode, output, conditional ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[buglab_swap_variables]^addToDefIfLocal ( target.getString (  ) , output ? null : cfgNode, null, conditional ) ;^286^287^^^^275^295^addToDefIfLocal ( target.getString (  ) , conditional ? null : cfgNode, null, output ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[buglab_swap_variables]^computeMustDef ( cfgNode, c, output, conditional ) ;^293^^^^^275^295^computeMustDef ( c, cfgNode, output, conditional ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[buglab_swap_variables]^computeMustDef ( conditional, cfgNode, output, c ) ;^293^^^^^275^295^computeMustDef ( c, cfgNode, output, conditional ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[buglab_swap_variables]^computeMustDef ( conditional.getNext (  ) , cfgNode, output, name ) ;^277^^^^^262^292^computeMustDef ( name.getNext (  ) , cfgNode, output, conditional ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[buglab_swap_variables]^computeMustDef ( name.getNext (  ) , conditional, output, cfgNode ) ;^277^^^^^262^292^computeMustDef ( name.getNext (  ) , cfgNode, output, conditional ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[buglab_swap_variables]^computeMustDef ( name.getNext (  ) ,  output, conditional ) ;^277^^^^^262^292^computeMustDef ( name.getNext (  ) , cfgNode, output, conditional ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[buglab_swap_variables]^computeMustDef ( output.getNext (  ) , cfgNode, name, conditional ) ;^277^^^^^262^292^computeMustDef ( name.getNext (  ) , cfgNode, output, conditional ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[buglab_swap_variables]^computeMustDef ( name.getNext (  ) , cfgNode,  conditional ) ;^277^^^^^262^292^computeMustDef ( name.getNext (  ) , cfgNode, output, conditional ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[buglab_swap_variables]^computeMustDef ( name.getNext (  ) , cfgNode, conditional, output ) ;^277^^^^^262^292^computeMustDef ( name.getNext (  ) , cfgNode, output, conditional ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[buglab_swap_variables]^computeMustDef ( name.getNext (  ) , cfgNode, output ) ;^277^^^^^262^292^computeMustDef ( name.getNext (  ) , cfgNode, output, conditional ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[buglab_swap_variables]^addToDefIfLocal ( cfgNode.getString (  ) , conditional ? null : name, n.getLastChild (  ) , output ) ;^278^279^^^^263^293^addToDefIfLocal ( name.getString (  ) , conditional ? null : cfgNode, n.getLastChild (  ) , output ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[buglab_swap_variables]^addToDefIfLocal ( name.getString (  ) , cfgNode ? null : conditional, n.getLastChild (  ) , output ) ;^278^279^^^^263^293^addToDefIfLocal ( name.getString (  ) , conditional ? null : cfgNode, n.getLastChild (  ) , output ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[buglab_swap_variables]^addToDefIfLocal ( name.getString (  )  ? null : cfgNode, n.getLastChild (  ) , output ) ;^278^279^^^^263^293^addToDefIfLocal ( name.getString (  ) , conditional ? null : cfgNode, n.getLastChild (  ) , output ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[buglab_swap_variables]^addToDefIfLocal ( name.getString (  ) , conditional ? null :  n.getLastChild (  ) , output ) ;^278^279^^^^263^293^addToDefIfLocal ( name.getString (  ) , conditional ? null : cfgNode, n.getLastChild (  ) , output ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[buglab_swap_variables]^addToDefIfLocal ( nameame.getString (  ) , conditional ? null : cfgNode, n.getLastChild (  ) , output ) ;^278^279^^^^263^293^addToDefIfLocal ( name.getString (  ) , conditional ? null : cfgNode, n.getLastChild (  ) , output ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[buglab_swap_variables]^addToDefIfLocal ( name.getString (  ) , conditional ? null : cfgNode.getLastChild (  ) , output ) ;^278^279^^^^263^293^addToDefIfLocal ( name.getString (  ) , conditional ? null : cfgNode, n.getLastChild (  ) , output ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[buglab_swap_variables]^addToDefIfLocal ( name.getString (  ) , output ? null : cfgNode, n.getLastChild (  ) , conditional ) ;^278^279^^^^263^293^addToDefIfLocal ( name.getString (  ) , conditional ? null : cfgNode, n.getLastChild (  ) , output ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[buglab_swap_variables]^addToDefIfLocal ( name.getString (  ) , conditional ? null : cfgNode, n.getLastChild (  )  ) ;^278^279^^^^263^293^addToDefIfLocal ( name.getString (  ) , conditional ? null : cfgNode, n.getLastChild (  ) , output ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[buglab_swap_variables]^addToDefIfLocal ( cfgNode.getString (  ) , conditional ? null : target, null, output ) ;^286^287^^^^271^301^addToDefIfLocal ( target.getString (  ) , conditional ? null : cfgNode, null, output ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[buglab_swap_variables]^addToDefIfLocal ( target.getString (  ) , cfgNode ? null : conditional, null, output ) ;^286^287^^^^271^301^addToDefIfLocal ( target.getString (  ) , conditional ? null : cfgNode, null, output ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[buglab_swap_variables]^addToDefIfLocal ( target.getString (  )  ? null : cfgNode, null, output ) ;^286^287^^^^271^301^addToDefIfLocal ( target.getString (  ) , conditional ? null : cfgNode, null, output ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[buglab_swap_variables]^addToDefIfLocal ( target.getString (  ) , conditional ? null :  null, output ) ;^286^287^^^^271^301^addToDefIfLocal ( target.getString (  ) , conditional ? null : cfgNode, null, output ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[buglab_swap_variables]^addToDefIfLocal ( output.getString (  ) , conditional ? null : cfgNode, null, target ) ;^286^287^^^^271^301^addToDefIfLocal ( target.getString (  ) , conditional ? null : cfgNode, null, output ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[buglab_swap_variables]^addToDefIfLocal ( target.getString (  ) , conditional ? null : cfgNode, null ) ;^286^287^^^^271^301^addToDefIfLocal ( target.getString (  ) , conditional ? null : cfgNode, null, output ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[buglab_swap_variables]^addToDefIfLocal ( conditional.getString (  ) , target ? null : cfgNode, null, output ) ;^286^287^^^^271^301^addToDefIfLocal ( target.getString (  ) , conditional ? null : cfgNode, null, output ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[buglab_swap_variables]^addToDefIfLocal ( target.getString (  ) , output ? null : cfgNode, null, conditional ) ;^286^287^^^^271^301^addToDefIfLocal ( target.getString (  ) , conditional ? null : cfgNode, null, output ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[buglab_swap_variables]^addToDefIfLocal ( target.getString (  ) , conditional ? null : output, null, cfgNode ) ;^286^287^^^^271^301^addToDefIfLocal ( target.getString (  ) , conditional ? null : cfgNode, null, output ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[buglab_swap_variables]^computeMustDef ( conditional.getFirstChild (  ) , cfgNode, output, c ) ;^267^^^^^252^282^computeMustDef ( c.getFirstChild (  ) , cfgNode, output, conditional ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[buglab_swap_variables]^computeMustDef ( c.getFirstChild (  ) , output, cfgNode, conditional ) ;^267^^^^^252^282^computeMustDef ( c.getFirstChild (  ) , cfgNode, output, conditional ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[buglab_swap_variables]^addToDefIfLocal ( output.getString (  ) , conditional ? null : cfgNode, c.getFirstChild (  ) , c ) ;^268^269^^^^253^283^addToDefIfLocal ( c.getString (  ) , conditional ? null : cfgNode, c.getFirstChild (  ) , output ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[buglab_swap_variables]^addToDefIfLocal ( conditional.getString (  ) , c ? null : cfgNode, c.getFirstChild (  ) , output ) ;^268^269^^^^253^283^addToDefIfLocal ( c.getString (  ) , conditional ? null : cfgNode, c.getFirstChild (  ) , output ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[buglab_swap_variables]^for  ( Node n = c.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  {^292^^^^^277^307^for  ( Node c = n.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  {^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[buglab_swap_variables]^computeMustDef ( cfgNode, c, output, conditional ) ;^293^^^^^278^308^computeMustDef ( c, cfgNode, output, conditional ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[buglab_swap_variables]^computeMustDef (  cfgNode, output, conditional ) ;^293^^^^^278^308^computeMustDef ( c, cfgNode, output, conditional ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[buglab_swap_variables]^computeMustDef ( c,  output, conditional ) ;^293^^^^^278^308^computeMustDef ( c, cfgNode, output, conditional ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[buglab_swap_variables]^computeMustDef ( c, cfgNode, conditional, output ) ;^293^^^^^278^308^computeMustDef ( c, cfgNode, output, conditional ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[buglab_swap_variables]^computeMustDef ( c, cfgNode,  conditional ) ;^293^^^^^278^308^computeMustDef ( c, cfgNode, output, conditional ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[buglab_swap_variables]^computeMustDef ( c, cfgNode, output ) ;^293^^^^^278^308^computeMustDef ( c, cfgNode, output, conditional ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[buglab_swap_variables]^computeMustDef ( NodeUtil.getConditionExpression ( cfgNode ) , n, output, conditional ) ;^231^232^^^^216^246^computeMustDef ( NodeUtil.getConditionExpression ( n ) , cfgNode, output, conditional ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[buglab_swap_variables]^computeMustDef ( NodeUtil.getConditionExpression ( n ) ,  output, conditional ) ;^231^232^^^^216^246^computeMustDef ( NodeUtil.getConditionExpression ( n ) , cfgNode, output, conditional ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[buglab_swap_variables]^computeMustDef ( NodeUtil.getConditionExpression ( output ) , cfgNode, n, conditional ) ;^231^232^^^^216^246^computeMustDef ( NodeUtil.getConditionExpression ( n ) , cfgNode, output, conditional ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[buglab_swap_variables]^computeMustDef ( NodeUtil.getConditionExpression ( n ) , cfgNode,  conditional ) ;^231^232^^^^216^246^computeMustDef ( NodeUtil.getConditionExpression ( n ) , cfgNode, output, conditional ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[buglab_swap_variables]^computeMustDef ( NodeUtil.getConditionExpression ( conditional ) , cfgNode, output, n ) ;^231^232^^^^216^246^computeMustDef ( NodeUtil.getConditionExpression ( n ) , cfgNode, output, conditional ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[buglab_swap_variables]^computeMustDef ( NodeUtil.getConditionExpression ( n ) , cfgNode, output ) ;^231^232^^^^216^246^computeMustDef ( NodeUtil.getConditionExpression ( n ) , cfgNode, output, conditional ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[buglab_swap_variables]^computeMustDef ( NodeUtil.getConditionExpression ( n ) , output, cfgNode, conditional ) ;^237^238^^^^222^252^computeMustDef ( NodeUtil.getConditionExpression ( n ) , cfgNode, output, conditional ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[buglab_swap_variables]^addToDefIfLocal ( rhs.getString (  ) , cfgNode, lhs, output ) ;^247^^^^^232^262^addToDefIfLocal ( lhs.getString (  ) , cfgNode, rhs, output ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[buglab_swap_variables]^addToDefIfLocal ( lhs.getString (  ) , cfgNode, output, rhs ) ;^247^^^^^232^262^addToDefIfLocal ( lhs.getString (  ) , cfgNode, rhs, output ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[buglab_swap_variables]^computeMustDef ( cfgNode.getFirstChild (  ) , n, output, conditional ) ;^254^^^^^239^269^computeMustDef ( n.getFirstChild (  ) , cfgNode, output, conditional ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[buglab_swap_variables]^computeMustDef ( n.getFirstChild (  ) , output, cfgNode, conditional ) ;^254^^^^^239^269^computeMustDef ( n.getFirstChild (  ) , cfgNode, output, conditional ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[buglab_swap_variables]^computeMustDef ( n.getFirstChild (  ) ,  output, conditional ) ;^254^^^^^239^269^computeMustDef ( n.getFirstChild (  ) , cfgNode, output, conditional ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[buglab_swap_variables]^computeMustDef ( n.getFirstChild (  ) , cfgNode, conditional, output ) ;^254^^^^^239^269^computeMustDef ( n.getFirstChild (  ) , cfgNode, output, conditional ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[buglab_swap_variables]^computeMustDef ( n.getFirstChild (  ) , cfgNode,  conditional ) ;^254^^^^^239^269^computeMustDef ( n.getFirstChild (  ) , cfgNode, output, conditional ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[buglab_swap_variables]^computeMustDef ( n.getFirstChild (  ) , cfgNode, output ) ;^254^^^^^239^269^computeMustDef ( n.getFirstChild (  ) , cfgNode, output, conditional ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[buglab_swap_variables]^computeMustDef ( cfgNode.getLastChild (  ) , n, output, true ) ;^255^^^^^240^270^computeMustDef ( n.getLastChild (  ) , cfgNode, output, true ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[buglab_swap_variables]^computeMustDef ( n.getLastChild (  ) ,  output, true ) ;^255^^^^^240^270^computeMustDef ( n.getLastChild (  ) , cfgNode, output, true ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[buglab_swap_variables]^computeMustDef ( n.getLastChild (  ) , output, cfgNode, true ) ;^255^^^^^240^270^computeMustDef ( n.getLastChild (  ) , cfgNode, output, true ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[buglab_swap_variables]^computeMustDef ( n.getLastChild (  ) , cfgNode,  true ) ;^255^^^^^240^270^computeMustDef ( n.getLastChild (  ) , cfgNode, output, true ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[buglab_swap_variables]^computeMustDef ( conditional.getFirstChild (  ) , cfgNode, output, n ) ;^259^^^^^244^274^computeMustDef ( n.getFirstChild (  ) , cfgNode, output, conditional ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[buglab_swap_variables]^computeMustDef ( cfgNode.getFirstChild (  ) , n, output, conditional ) ;^259^^^^^244^274^computeMustDef ( n.getFirstChild (  ) , cfgNode, output, conditional ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[buglab_swap_variables]^computeMustDef ( n.getFirstChild (  ) ,  output, conditional ) ;^259^^^^^244^274^computeMustDef ( n.getFirstChild (  ) , cfgNode, output, conditional ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[buglab_swap_variables]^computeMustDef ( output.getFirstChild (  ) , cfgNode, n, conditional ) ;^259^^^^^244^274^computeMustDef ( n.getFirstChild (  ) , cfgNode, output, conditional ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[buglab_swap_variables]^computeMustDef ( n.getFirstChild (  ) , cfgNode,  conditional ) ;^259^^^^^244^274^computeMustDef ( n.getFirstChild (  ) , cfgNode, output, conditional ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[buglab_swap_variables]^computeMustDef ( n.getFirstChild (  ) , cfgNode, output ) ;^259^^^^^244^274^computeMustDef ( n.getFirstChild (  ) , cfgNode, output, conditional ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[buglab_swap_variables]^computeMustDef ( cfgNode.getFirstChild (  ) .getNext (  ) , n, output, true ) ;^260^^^^^245^275^computeMustDef ( n.getFirstChild (  ) .getNext (  ) , cfgNode, output, true ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[buglab_swap_variables]^computeMustDef ( n.getFirstChild (  ) .getNext (  ) ,  output, true ) ;^260^^^^^245^275^computeMustDef ( n.getFirstChild (  ) .getNext (  ) , cfgNode, output, true ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[buglab_swap_variables]^computeMustDef ( output.getFirstChild (  ) .getNext (  ) , cfgNode, n, true ) ;^260^^^^^245^275^computeMustDef ( n.getFirstChild (  ) .getNext (  ) , cfgNode, output, true ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[buglab_swap_variables]^computeMustDef ( n.getFirstChild (  ) .getNext (  ) , cfgNode,  true ) ;^260^^^^^245^275^computeMustDef ( n.getFirstChild (  ) .getNext (  ) , cfgNode, output, true ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[buglab_swap_variables]^computeMustDef ( cfgNode.getLastChild (  ) , n, output, true ) ;^261^^^^^246^276^computeMustDef ( n.getLastChild (  ) , cfgNode, output, true ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[buglab_swap_variables]^computeMustDef ( n.getLastChild (  ) , output, cfgNode, true ) ;^261^^^^^246^276^computeMustDef ( n.getLastChild (  ) , cfgNode, output, true ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[buglab_swap_variables]^computeMustDef ( n.getLastChild (  ) ,  output, true ) ;^261^^^^^246^276^computeMustDef ( n.getLastChild (  ) , cfgNode, output, true ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[buglab_swap_variables]^computeMustDef ( n.getLastChild (  ) , cfgNode,  true ) ;^261^^^^^246^276^computeMustDef ( n.getLastChild (  ) , cfgNode, output, true ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[buglab_swap_variables]^computeMustDef ( cfgNode.getNext (  ) , name, output, conditional ) ;^277^^^^^262^292^computeMustDef ( name.getNext (  ) , cfgNode, output, conditional ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[buglab_swap_variables]^computeMustDef ( name.getNext (  ) , output, cfgNode, conditional ) ;^277^^^^^262^292^computeMustDef ( name.getNext (  ) , cfgNode, output, conditional ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[buglab_swap_variables]^addToDefIfLocal ( cfgNodeame.getString (  ) , conditional ? null : n, n.getLastChild (  ) , output ) ;^278^279^^^^263^293^addToDefIfLocal ( name.getString (  ) , conditional ? null : cfgNode, n.getLastChild (  ) , output ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[buglab_swap_variables]^addToDefIfLocal ( outputame.getString (  ) , conditional ? null : cfgNode, n.getLastChild (  ) , n ) ;^278^279^^^^263^293^addToDefIfLocal ( name.getString (  ) , conditional ? null : cfgNode, n.getLastChild (  ) , output ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[buglab_swap_variables]^computeMustDef ( conditional, cfgNode, output, c ) ;^293^^^^^278^308^computeMustDef ( c, cfgNode, output, conditional ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[buglab_swap_variables]^computeMustDef ( c, conditional, output, cfgNode ) ;^293^^^^^278^308^computeMustDef ( c, cfgNode, output, conditional ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeMustDef [RETURN_TYPE] void   Node n Node cfgNode MustDef output boolean conditional [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  rhs  target  Map  reachingDef  resultMap  MustDef  output  
[buglab_swap_variables]^Var var = name.getVar ( jsScope ) ;^308^^^^^307^337^Var var = jsScope.getVar ( name ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] addToDefIfLocal [RETURN_TYPE] void   String name Node node Node rValue MustDef def [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  
[buglab_swap_variables]^if  ( otherDef.depends.depends.contains ( var )  )  {^321^^^^^307^337^if  ( otherDef.depends.contains ( var )  )  {^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] addToDefIfLocal [RETURN_TYPE] void   String name Node node Node rValue MustDef def [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  
[buglab_swap_variables]^if  ( varDef.depends.contains ( other )  )  {^321^^^^^307^337^if  ( otherDef.depends.contains ( var )  )  {^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] addToDefIfLocal [RETURN_TYPE] void   String name Node node Node rValue MustDef def [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  
[buglab_swap_variables]^if  ( var.contains ( otherDef.depends )  )  {^321^^^^^307^337^if  ( otherDef.depends.contains ( var )  )  {^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] addToDefIfLocal [RETURN_TYPE] void   String name Node node Node rValue MustDef def [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  
[buglab_swap_variables]^def.reachingDef.put (  null ) ;^322^^^^^307^337^def.reachingDef.put ( other, null ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] addToDefIfLocal [RETURN_TYPE] void   String name Node node Node rValue MustDef def [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  
[buglab_swap_variables]^Definition otherDef = def.reachingDef.reachingDef.get ( other ) ;^317^^^^^307^337^Definition otherDef = def.reachingDef.get ( other ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] addToDefIfLocal [RETURN_TYPE] void   String name Node node Node rValue MustDef def [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  
[buglab_swap_variables]^Definition def.reachingDefDef = other.get ( other ) ;^317^^^^^307^337^Definition otherDef = def.reachingDef.get ( other ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] addToDefIfLocal [RETURN_TYPE] void   String name Node node Node rValue MustDef def [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  
[buglab_swap_variables]^Definition otherDef = def.get ( other ) ;^317^^^^^307^337^Definition otherDef = def.reachingDef.get ( other ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] addToDefIfLocal [RETURN_TYPE] void   String name Node node Node rValue MustDef def [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  
[buglab_swap_variables]^for  ( Var other : def.reachingDef.reachingDef.keySet (  )  )  {^316^^^^^307^337^for  ( Var other : def.reachingDef.keySet (  )  )  {^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] addToDefIfLocal [RETURN_TYPE] void   String name Node node Node rValue MustDef def [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  
[buglab_swap_variables]^for  ( Var other : def.keySet (  )  )  {^316^^^^^307^337^for  ( Var other : def.reachingDef.keySet (  )  )  {^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] addToDefIfLocal [RETURN_TYPE] void   String name Node node Node rValue MustDef def [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  
[buglab_swap_variables]^if  ( var.depends.contains ( otherDef )  )  {^321^^^^^307^337^if  ( otherDef.depends.contains ( var )  )  {^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] addToDefIfLocal [RETURN_TYPE] void   String name Node node Node rValue MustDef def [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  
[buglab_swap_variables]^if  ( otherDef.contains ( var )  )  {^321^^^^^307^337^if  ( otherDef.depends.contains ( var )  )  {^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] addToDefIfLocal [RETURN_TYPE] void   String name Node node Node rValue MustDef def [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  
[buglab_swap_variables]^computeDependence ( rValue, definition ) ;^332^^^^^327^335^computeDependence ( definition, rValue ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] addToDefIfLocal [RETURN_TYPE] void   String name Node node Node rValue MustDef def [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  
[buglab_swap_variables]^computeDependence (  rValue ) ;^332^^^^^327^335^computeDependence ( definition, rValue ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] addToDefIfLocal [RETURN_TYPE] void   String name Node node Node rValue MustDef def [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  
[buglab_swap_variables]^computeDependence ( definition ) ;^332^^^^^327^335^computeDependence ( definition, rValue ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] addToDefIfLocal [RETURN_TYPE] void   String name Node node Node rValue MustDef def [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  
[buglab_swap_variables]^def.reachingDef.put ( def, varinition ) ;^334^^^^^327^335^def.reachingDef.put ( var, definition ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] addToDefIfLocal [RETURN_TYPE] void   String name Node node Node rValue MustDef def [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  
[buglab_swap_variables]^def.reachingDef.put ( varinition ) ;^334^^^^^327^335^def.reachingDef.put ( var, definition ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] addToDefIfLocal [RETURN_TYPE] void   String name Node node Node rValue MustDef def [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  
[buglab_swap_variables]^def.reachingDef.put (  definition ) ;^334^^^^^327^335^def.reachingDef.put ( var, definition ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] addToDefIfLocal [RETURN_TYPE] void   String name Node node Node rValue MustDef def [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  
[buglab_swap_variables]^def.reachingDef.put ( var, def ) ;^334^^^^^327^335^def.reachingDef.put ( var, definition ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] addToDefIfLocal [RETURN_TYPE] void   String name Node node Node rValue MustDef def [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  
[buglab_swap_variables]^def.reachingDef.put ( var ) ;^334^^^^^327^335^def.reachingDef.put ( var, definition ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] addToDefIfLocal [RETURN_TYPE] void   String name Node node Node rValue MustDef def [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  
[buglab_swap_variables]^def.reachingDef.put (  null ) ;^328^^^^^307^337^def.reachingDef.put ( var, null ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] addToDefIfLocal [RETURN_TYPE] void   String name Node node Node rValue MustDef def [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  
[buglab_swap_variables]^computeDependence ( rValue, definition ) ;^332^^^^^307^337^computeDependence ( definition, rValue ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] addToDefIfLocal [RETURN_TYPE] void   String name Node node Node rValue MustDef def [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  
[buglab_swap_variables]^computeDependence (  rValue ) ;^332^^^^^307^337^computeDependence ( definition, rValue ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] addToDefIfLocal [RETURN_TYPE] void   String name Node node Node rValue MustDef def [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  
[buglab_swap_variables]^computeDependence ( definition ) ;^332^^^^^307^337^computeDependence ( definition, rValue ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] addToDefIfLocal [RETURN_TYPE] void   String name Node node Node rValue MustDef def [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  
[buglab_swap_variables]^def.reachingDef.put ( def, varinition ) ;^334^^^^^307^337^def.reachingDef.put ( var, definition ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] addToDefIfLocal [RETURN_TYPE] void   String name Node node Node rValue MustDef def [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  
[buglab_swap_variables]^def.reachingDef.put ( varinition ) ;^334^^^^^307^337^def.reachingDef.put ( var, definition ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] addToDefIfLocal [RETURN_TYPE] void   String name Node node Node rValue MustDef def [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  
[buglab_swap_variables]^def.reachingDef.put ( definition, var ) ;^334^^^^^307^337^def.reachingDef.put ( var, definition ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] addToDefIfLocal [RETURN_TYPE] void   String name Node node Node rValue MustDef def [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  
[buglab_swap_variables]^def.reachingDef.put (  definition ) ;^334^^^^^307^337^def.reachingDef.put ( var, definition ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] addToDefIfLocal [RETURN_TYPE] void   String name Node node Node rValue MustDef def [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  
[buglab_swap_variables]^def.reachingDef.put ( var ) ;^334^^^^^307^337^def.reachingDef.put ( var, definition ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] addToDefIfLocal [RETURN_TYPE] void   String name Node node Node rValue MustDef def [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  
[buglab_swap_variables]^def.reachingDef.put ( var, definitioninition ) ;^334^^^^^327^335^def.reachingDef.put ( var, definition ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] addToDefIfLocal [RETURN_TYPE] void   String name Node node Node rValue MustDef def [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  
[buglab_swap_variables]^def.reachingDef.put ( definition, var ) ;^334^^^^^327^335^def.reachingDef.put ( var, definition ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] addToDefIfLocal [RETURN_TYPE] void   String name Node node Node rValue MustDef def [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  
[buglab_swap_variables]^if  ( NodeUtil.isName ( jsScope )  && n.isDeclared ( n.getString (  ) , false )  )  {^348^^^^^343^353^if  ( NodeUtil.isName ( n )  && jsScope.isDeclared ( n.getString (  ) , false )  )  {^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeDependence [RETURN_TYPE] void   Definition def Node rValue [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  NodeTraversal  t  Node  aNode  c  cfgNode  lhs  n  name  node  parent  rValue  rhs  target  Definition  def  Map  reachingDef  resultMap  
[buglab_swap_variables]^def.depends.add ( n.getVar ( jsScope.getString (  )  )  ) ;^349^^^^^343^353^def.depends.add ( jsScope.getVar ( n.getString (  )  )  ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeDependence [RETURN_TYPE] void   Definition def Node rValue [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  NodeTraversal  t  Node  aNode  c  cfgNode  lhs  n  name  node  parent  rValue  rhs  target  Definition  def  Map  reachingDef  resultMap  
[buglab_swap_variables]^NodeTraversal.traverse ( compiler, n, rValueew AbstractCfgNodeTraversalCallback (  )  {^344^345^^^^343^353^NodeTraversal.traverse ( compiler, rValue, new AbstractCfgNodeTraversalCallback (  )  {^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeDependence [RETURN_TYPE] void   Definition def Node rValue [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  NodeTraversal  t  Node  aNode  c  cfgNode  lhs  n  name  node  parent  rValue  rhs  target  Definition  def  Map  reachingDef  resultMap  
[buglab_swap_variables]^NodeTraversal.traverse ( compiler,  new AbstractCfgNodeTraversalCallback (  )  {^344^345^^^^343^353^NodeTraversal.traverse ( compiler, rValue, new AbstractCfgNodeTraversalCallback (  )  {^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeDependence [RETURN_TYPE] void   Definition def Node rValue [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  NodeTraversal  t  Node  aNode  c  cfgNode  lhs  n  name  node  parent  rValue  rhs  target  Definition  def  Map  reachingDef  resultMap  
[buglab_swap_variables]^NodeTraversal.traverse ( compiler, rValueew AbstractCfgNodeTraversalCallback (  )  {^344^345^^^^343^353^NodeTraversal.traverse ( compiler, rValue, new AbstractCfgNodeTraversalCallback (  )  {^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeDependence [RETURN_TYPE] void   Definition def Node rValue [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  NodeTraversal  t  Node  aNode  c  cfgNode  lhs  n  name  node  parent  rValue  rhs  target  Definition  def  Map  reachingDef  resultMap  
[buglab_swap_variables]^NodeTraversal.traverse (  rValue, new AbstractCfgNodeTraversalCallback (  )  {^344^345^^^^343^353^NodeTraversal.traverse ( compiler, rValue, new AbstractCfgNodeTraversalCallback (  )  {^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] computeDependence [RETURN_TYPE] void   Definition def Node rValue [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  NodeTraversal  t  Node  aNode  c  cfgNode  lhs  n  name  node  parent  rValue  rhs  target  Definition  def  Map  reachingDef  resultMap  
[buglab_swap_variables]^if  ( NodeUtil.isName ( jsScope )  && n.isDeclared ( n.getString (  ) , false )  )  {^348^^^^^347^351^if  ( NodeUtil.isName ( n )  && jsScope.isDeclared ( n.getString (  ) , false )  )  {^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  NodeTraversal  t  Node  aNode  c  cfgNode  lhs  n  name  node  parent  rValue  rhs  target  Map  reachingDef  resultMap  
[buglab_swap_variables]^def.depends.add ( n.getVar ( jsScope.getString (  )  )  ) ;^349^^^^^347^351^def.depends.add ( jsScope.getVar ( n.getString (  )  )  ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  NodeTraversal  t  Node  aNode  c  cfgNode  lhs  n  name  node  parent  rValue  rhs  target  Map  reachingDef  resultMap  
[buglab_swap_variables]^Definition def = state.getIn (  ) .reachingDef.get ( name.getVar ( jsScope )  ) ;^368^^^^^364^374^Definition def = state.getIn (  ) .reachingDef.get ( jsScope.getVar ( name )  ) ;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] getDef [RETURN_TYPE] Node   String name Node useNode [VARIABLES] AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  
[buglab_swap_variables]^return def.node.node;^372^^^^^364^374^return def.node;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] getDef [RETURN_TYPE] Node   String name Node useNode [VARIABLES] AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  
[buglab_swap_variables]^return def;^372^^^^^364^374^return def.node;^[CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  [METHOD] getDef [RETURN_TYPE] Node   String name Node useNode [VARIABLES] AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  
[buglab_swap_variables]^return otherDef.node.node == node;^81^^^^^74^82^return otherDef.node == node;^[CLASS] Definition  [METHOD] equals [RETURN_TYPE] boolean   Object other [VARIABLES] Definition  otherDef  Object  other  Set  depends  boolean  Node  node  
[buglab_swap_variables]^return node == otherDef.node;^81^^^^^74^82^return otherDef.node == node;^[CLASS] Definition  [METHOD] equals [RETURN_TYPE] boolean   Object other [VARIABLES] Definition  otherDef  Object  other  Set  depends  boolean  Node  node  
[buglab_swap_variables]^reachingDef = Maps.newHashMap ( other.reachingDef.reachingDef ) ;^133^^^^^132^134^reachingDef = Maps.newHashMap ( other.reachingDef ) ;^[CLASS] MustDef  [METHOD] <init> [RETURN_TYPE] MustBeReachingVariableDef$MustDef)   MustDef other [VARIABLES] Map  reachingDef  MustDef  other  boolean  
[buglab_swap_variables]^reachingDef = Maps.newHashMap ( other ) ;^133^^^^^132^134^reachingDef = Maps.newHashMap ( other.reachingDef ) ;^[CLASS] MustDef  [METHOD] <init> [RETURN_TYPE] MustBeReachingVariableDef$MustDef)   MustDef other [VARIABLES] Map  reachingDef  MustDef  other  boolean  
[buglab_swap_variables]^Map<Var, Definition> result.reachingDefMap = result;^147^^^^^132^162^Map<Var, Definition> resultMap = result.reachingDef;^[CLASS] JoinOp  [METHOD] apply [RETURN_TYPE] MustBeReachingVariableDef$MustDef   MustDef a MustDef b [VARIABLES] boolean  Var  var  Node  aNode  Definition  aDef  bDef  MustDef  a  b  result  Map  resultMap  
[buglab_swap_variables]^resultMap.put (  null ) ;^158^^^^^143^173^resultMap.put ( var, null ) ;^[CLASS] JoinOp  [METHOD] apply [RETURN_TYPE] MustBeReachingVariableDef$MustDef   MustDef a MustDef b [VARIABLES] boolean  Var  var  Node  aNode  Definition  aDef  bDef  MustDef  a  b  result  Map  resultMap  
[buglab_swap_variables]^if  ( var.reachingDef.containsKey ( b )  )  {^164^^^^^149^179^if  ( b.reachingDef.containsKey ( var )  )  {^[CLASS] JoinOp  [METHOD] apply [RETURN_TYPE] MustBeReachingVariableDef$MustDef   MustDef a MustDef b [VARIABLES] boolean  Var  var  Node  aNode  Definition  aDef  bDef  MustDef  a  b  result  Map  resultMap  
[buglab_swap_variables]^if  ( b.containsKey ( var )  )  {^164^^^^^149^179^if  ( b.reachingDef.containsKey ( var )  )  {^[CLASS] JoinOp  [METHOD] apply [RETURN_TYPE] MustBeReachingVariableDef$MustDef   MustDef a MustDef b [VARIABLES] boolean  Var  var  Node  aNode  Definition  aDef  bDef  MustDef  a  b  result  Map  resultMap  
[buglab_swap_variables]^resultMap.put ( aDef, var ) ;^173^^^^^164^174^resultMap.put ( var, aDef ) ;^[CLASS] JoinOp  [METHOD] apply [RETURN_TYPE] MustBeReachingVariableDef$MustDef   MustDef a MustDef b [VARIABLES] boolean  Var  var  Node  aNode  Definition  aDef  bDef  MustDef  a  b  result  Map  resultMap  
[buglab_swap_variables]^resultMap.put (  aDef ) ;^173^^^^^164^174^resultMap.put ( var, aDef ) ;^[CLASS] JoinOp  [METHOD] apply [RETURN_TYPE] MustBeReachingVariableDef$MustDef   MustDef a MustDef b [VARIABLES] boolean  Var  var  Node  aNode  Definition  aDef  bDef  MustDef  a  b  result  Map  resultMap  
[buglab_swap_variables]^resultMap.put ( var ) ;^173^^^^^164^174^resultMap.put ( var, aDef ) ;^[CLASS] JoinOp  [METHOD] apply [RETURN_TYPE] MustBeReachingVariableDef$MustDef   MustDef a MustDef b [VARIABLES] boolean  Var  var  Node  aNode  Definition  aDef  bDef  MustDef  a  b  result  Map  resultMap  
[buglab_swap_variables]^if  ( bDef.equals ( aDef )  )  {^167^^^^^152^182^if  ( aDef.equals ( bDef )  )  {^[CLASS] JoinOp  [METHOD] apply [RETURN_TYPE] MustBeReachingVariableDef$MustDef   MustDef a MustDef b [VARIABLES] boolean  Var  var  Node  aNode  Definition  aDef  bDef  MustDef  a  b  result  Map  resultMap  
[buglab_swap_variables]^resultMap.put (  null ) ;^170^^^^^167^171^resultMap.put ( var, null ) ;^[CLASS] JoinOp  [METHOD] apply [RETURN_TYPE] MustBeReachingVariableDef$MustDef   MustDef a MustDef b [VARIABLES] boolean  Var  var  Node  aNode  Definition  aDef  bDef  MustDef  a  b  result  Map  resultMap  
[buglab_swap_variables]^resultMap.put (  aDef ) ;^168^^^^^153^183^resultMap.put ( var, aDef ) ;^[CLASS] JoinOp  [METHOD] apply [RETURN_TYPE] MustBeReachingVariableDef$MustDef   MustDef a MustDef b [VARIABLES] boolean  Var  var  Node  aNode  Definition  aDef  bDef  MustDef  a  b  result  Map  resultMap  
[buglab_swap_variables]^resultMap.put ( aDef, var ) ;^168^^^^^153^183^resultMap.put ( var, aDef ) ;^[CLASS] JoinOp  [METHOD] apply [RETURN_TYPE] MustBeReachingVariableDef$MustDef   MustDef a MustDef b [VARIABLES] boolean  Var  var  Node  aNode  Definition  aDef  bDef  MustDef  a  b  result  Map  resultMap  
[buglab_swap_variables]^resultMap.put ( var ) ;^168^^^^^153^183^resultMap.put ( var, aDef ) ;^[CLASS] JoinOp  [METHOD] apply [RETURN_TYPE] MustBeReachingVariableDef$MustDef   MustDef a MustDef b [VARIABLES] boolean  Var  var  Node  aNode  Definition  aDef  bDef  MustDef  a  b  result  Map  resultMap  
[buglab_swap_variables]^Definition varDef = b.reachingDef.get ( b ) ;^165^^^^^150^180^Definition bDef = b.reachingDef.get ( var ) ;^[CLASS] JoinOp  [METHOD] apply [RETURN_TYPE] MustBeReachingVariableDef$MustDef   MustDef a MustDef b [VARIABLES] boolean  Var  var  Node  aNode  Definition  aDef  bDef  MustDef  a  b  result  Map  resultMap  
[buglab_swap_variables]^Definition bDef = var.get ( b.reachingDef ) ;^165^^^^^150^180^Definition bDef = b.reachingDef.get ( var ) ;^[CLASS] JoinOp  [METHOD] apply [RETURN_TYPE] MustBeReachingVariableDef$MustDef   MustDef a MustDef b [VARIABLES] boolean  Var  var  Node  aNode  Definition  aDef  bDef  MustDef  a  b  result  Map  resultMap  
[buglab_swap_variables]^resultMap.put (  null ) ;^170^^^^^155^185^resultMap.put ( var, null ) ;^[CLASS] JoinOp  [METHOD] apply [RETURN_TYPE] MustBeReachingVariableDef$MustDef   MustDef a MustDef b [VARIABLES] boolean  Var  var  Node  aNode  Definition  aDef  bDef  MustDef  a  b  result  Map  resultMap  
[buglab_swap_variables]^Definition a.reachingDefDef = a.get ( var ) ;^152^^^^^137^167^Definition aDef = a.reachingDef.get ( var ) ;^[CLASS] JoinOp  [METHOD] apply [RETURN_TYPE] MustBeReachingVariableDef$MustDef   MustDef a MustDef b [VARIABLES] boolean  Var  var  Node  aNode  Definition  aDef  bDef  MustDef  a  b  result  Map  resultMap  
[buglab_swap_variables]^Definition varDef = a.reachingDef.get ( a ) ;^152^^^^^137^167^Definition aDef = a.reachingDef.get ( var ) ;^[CLASS] JoinOp  [METHOD] apply [RETURN_TYPE] MustBeReachingVariableDef$MustDef   MustDef a MustDef b [VARIABLES] boolean  Var  var  Node  aNode  Definition  aDef  bDef  MustDef  a  b  result  Map  resultMap  
[buglab_swap_variables]^Node aNode = aDef.node.node;^162^^^^^147^177^Node aNode = aDef.node;^[CLASS] JoinOp  [METHOD] apply [RETURN_TYPE] MustBeReachingVariableDef$MustDef   MustDef a MustDef b [VARIABLES] boolean  Var  var  Node  aNode  Definition  aDef  bDef  MustDef  a  b  result  Map  resultMap  
[buglab_swap_variables]^Node aNode = aDef;^162^^^^^147^177^Node aNode = aDef.node;^[CLASS] JoinOp  [METHOD] apply [RETURN_TYPE] MustBeReachingVariableDef$MustDef   MustDef a MustDef b [VARIABLES] boolean  Var  var  Node  aNode  Definition  aDef  bDef  MustDef  a  b  result  Map  resultMap  
[buglab_swap_variables]^Definition b.reachingDefDef = b.get ( var ) ;^165^^^^^150^180^Definition bDef = b.reachingDef.get ( var ) ;^[CLASS] JoinOp  [METHOD] apply [RETURN_TYPE] MustBeReachingVariableDef$MustDef   MustDef a MustDef b [VARIABLES] boolean  Var  var  Node  aNode  Definition  aDef  bDef  MustDef  a  b  result  Map  resultMap  
[buglab_swap_variables]^for  ( Var var : a.reachingDef.reachingDef.keySet (  )  )  {^150^^^^^135^165^for  ( Var var : a.reachingDef.keySet (  )  )  {^[CLASS] JoinOp  [METHOD] apply [RETURN_TYPE] MustBeReachingVariableDef$MustDef   MustDef a MustDef b [VARIABLES] boolean  Var  var  Node  aNode  Definition  aDef  bDef  MustDef  a  b  result  Map  resultMap  
[buglab_swap_variables]^for  ( Var var : a.keySet (  )  )  {^150^^^^^135^165^for  ( Var var : a.reachingDef.keySet (  )  )  {^[CLASS] JoinOp  [METHOD] apply [RETURN_TYPE] MustBeReachingVariableDef$MustDef   MustDef a MustDef b [VARIABLES] boolean  Var  var  Node  aNode  Definition  aDef  bDef  MustDef  a  b  result  Map  resultMap  
[buglab_swap_variables]^Definition aDef = var.get ( a.reachingDef ) ;^152^^^^^137^167^Definition aDef = a.reachingDef.get ( var ) ;^[CLASS] JoinOp  [METHOD] apply [RETURN_TYPE] MustBeReachingVariableDef$MustDef   MustDef a MustDef b [VARIABLES] boolean  Var  var  Node  aNode  Definition  aDef  bDef  MustDef  a  b  result  Map  resultMap  
[buglab_swap_variables]^if  ( b.reachingDef.reachingDef.containsKey ( var )  )  {^164^^^^^149^179^if  ( b.reachingDef.containsKey ( var )  )  {^[CLASS] JoinOp  [METHOD] apply [RETURN_TYPE] MustBeReachingVariableDef$MustDef   MustDef a MustDef b [VARIABLES] boolean  Var  var  Node  aNode  Definition  aDef  bDef  MustDef  a  b  result  Map  resultMap  
[buglab_swap_variables]^if  ( var.containsKey ( b.reachingDef )  )  {^164^^^^^149^179^if  ( b.reachingDef.containsKey ( var )  )  {^[CLASS] JoinOp  [METHOD] apply [RETURN_TYPE] MustBeReachingVariableDef$MustDef   MustDef a MustDef b [VARIABLES] boolean  Var  var  Node  aNode  Definition  aDef  bDef  MustDef  a  b  result  Map  resultMap  
[buglab_swap_variables]^resultMap.put ( aDef, var ) ;^173^^^^^158^188^resultMap.put ( var, aDef ) ;^[CLASS] JoinOp  [METHOD] apply [RETURN_TYPE] MustBeReachingVariableDef$MustDef   MustDef a MustDef b [VARIABLES] boolean  Var  var  Node  aNode  Definition  aDef  bDef  MustDef  a  b  result  Map  resultMap  
[buglab_swap_variables]^resultMap.put (  aDef ) ;^173^^^^^158^188^resultMap.put ( var, aDef ) ;^[CLASS] JoinOp  [METHOD] apply [RETURN_TYPE] MustBeReachingVariableDef$MustDef   MustDef a MustDef b [VARIABLES] boolean  Var  var  Node  aNode  Definition  aDef  bDef  MustDef  a  b  result  Map  resultMap  
[buglab_swap_variables]^resultMap.put ( var ) ;^173^^^^^158^188^resultMap.put ( var, aDef ) ;^[CLASS] JoinOp  [METHOD] apply [RETURN_TYPE] MustBeReachingVariableDef$MustDef   MustDef a MustDef b [VARIABLES] boolean  Var  var  Node  aNode  Definition  aDef  bDef  MustDef  a  b  result  Map  resultMap  
[buglab_swap_variables]^resultMap.put (  b.reachingDef.get ( var )  ) ;^181^^^^^166^196^resultMap.put ( var, b.reachingDef.get ( var )  ) ;^[CLASS] JoinOp  [METHOD] apply [RETURN_TYPE] MustBeReachingVariableDef$MustDef   MustDef a MustDef b [VARIABLES] boolean  Var  var  Node  aNode  Definition  aDef  bDef  MustDef  a  b  result  Map  resultMap  
[buglab_swap_variables]^resultMap.put ( var.reachingDef.get ( var )  ) ;^181^^^^^166^196^resultMap.put ( var, b.reachingDef.get ( var )  ) ;^[CLASS] JoinOp  [METHOD] apply [RETURN_TYPE] MustBeReachingVariableDef$MustDef   MustDef a MustDef b [VARIABLES] boolean  Var  var  Node  aNode  Definition  aDef  bDef  MustDef  a  b  result  Map  resultMap  
[buglab_swap_variables]^resultMap.put ( b.reachingDef, var.get ( var )  ) ;^181^^^^^166^196^resultMap.put ( var, b.reachingDef.get ( var )  ) ;^[CLASS] JoinOp  [METHOD] apply [RETURN_TYPE] MustBeReachingVariableDef$MustDef   MustDef a MustDef b [VARIABLES] boolean  Var  var  Node  aNode  Definition  aDef  bDef  MustDef  a  b  result  Map  resultMap  
[buglab_swap_variables]^resultMap.put ( var.get ( var )  ) ;^181^^^^^166^196^resultMap.put ( var, b.reachingDef.get ( var )  ) ;^[CLASS] JoinOp  [METHOD] apply [RETURN_TYPE] MustBeReachingVariableDef$MustDef   MustDef a MustDef b [VARIABLES] boolean  Var  var  Node  aNode  Definition  aDef  bDef  MustDef  a  b  result  Map  resultMap  
[buglab_swap_variables]^resultMap.put ( b, var.reachingDef.get ( var )  ) ;^181^^^^^166^196^resultMap.put ( var, b.reachingDef.get ( var )  ) ;^[CLASS] JoinOp  [METHOD] apply [RETURN_TYPE] MustBeReachingVariableDef$MustDef   MustDef a MustDef b [VARIABLES] boolean  Var  var  Node  aNode  Definition  aDef  bDef  MustDef  a  b  result  Map  resultMap  
[buglab_swap_variables]^for  ( Var var : b.reachingDef.reachingDef.keySet (  )  )  {^179^^^^^164^194^for  ( Var var : b.reachingDef.keySet (  )  )  {^[CLASS] JoinOp  [METHOD] apply [RETURN_TYPE] MustBeReachingVariableDef$MustDef   MustDef a MustDef b [VARIABLES] boolean  Var  var  Node  aNode  Definition  aDef  bDef  MustDef  a  b  result  Map  resultMap  
[buglab_swap_variables]^for  ( Var var : b.keySet (  )  )  {^179^^^^^164^194^for  ( Var var : b.reachingDef.keySet (  )  )  {^[CLASS] JoinOp  [METHOD] apply [RETURN_TYPE] MustBeReachingVariableDef$MustDef   MustDef a MustDef b [VARIABLES] boolean  Var  var  Node  aNode  Definition  aDef  bDef  MustDef  a  b  result  Map  resultMap  
[buglab_swap_variables]^resultMap.put ( var, b.reachingDef.reachingDef.get ( var )  ) ;^181^^^^^166^196^resultMap.put ( var, b.reachingDef.get ( var )  ) ;^[CLASS] JoinOp  [METHOD] apply [RETURN_TYPE] MustBeReachingVariableDef$MustDef   MustDef a MustDef b [VARIABLES] boolean  Var  var  Node  aNode  Definition  aDef  bDef  MustDef  a  b  result  Map  resultMap  
[buglab_swap_variables]^def.depends.add ( n.getVar ( jsScope.getString (  )  )  ) ;^349^^^^^347^351^def.depends.add ( jsScope.getVar ( n.getString (  )  )  ) ;^[CLASS] 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  n  parent  
[buglab_swap_variables]^if  ( NodeUtil.isName ( jsScope )  && n.isDeclared ( n.getString (  ) , false )  )  {^348^^^^^347^351^if  ( NodeUtil.isName ( n )  && jsScope.isDeclared ( n.getString (  ) , false )  )  {^[CLASS] 1  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  n  parent  
