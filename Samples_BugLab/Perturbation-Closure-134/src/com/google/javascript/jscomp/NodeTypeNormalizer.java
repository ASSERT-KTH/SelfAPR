[BugLab_Wrong_Literal]^this ( true ) ;^32^^^^^31^33^this ( false ) ;^[CLASS] NodeTypeNormalizer  [METHOD] <init> [RETURN_TYPE] NodeTypeNormalizer()   [VARIABLES] boolean  assertOnChange  
[BugLab_Variable_Misuse]^this.assertOnChange = assertOnChange;^36^^^^^35^37^this.assertOnChange = forbidChanges;^[CLASS] NodeTypeNormalizer  [METHOD] <init> [RETURN_TYPE] NodeTypeNormalizer(boolean)   boolean forbidChanges [VARIABLES] boolean  assertOnChange  forbidChanges  
[BugLab_Variable_Misuse]^if  ( forbidChanges )  {^40^^^^^39^43^if  ( assertOnChange )  {^[CLASS] NodeTypeNormalizer  [METHOD] reportChange [RETURN_TYPE] void   [VARIABLES] boolean  assertOnChange  forbidChanges  
[BugLab_Wrong_Literal]^Preconditions.checkState ( true, "normalizeNodeType constraints violated" ) ;^41^^^^^39^43^Preconditions.checkState ( false, "normalizeNodeType constraints violated" ) ;^[CLASS] NodeTypeNormalizer  [METHOD] reportChange [RETURN_TYPE] void   [VARIABLES] boolean  assertOnChange  forbidChanges  
[BugLab_Variable_Misuse]^if  ( value.getType (  )  == Token.OBJECTLIT )  {^69^^^^^68^84^if  ( n.getType (  )  == Token.OBJECTLIT )  {^[CLASS] NodeTypeNormalizer  [METHOD] normalizeJsDocAnnotations [RETURN_TYPE] void   Node n [VARIABLES] boolean  assertOnChange  forbidChanges  Node  child  key  n  value  
[BugLab_Wrong_Operator]^if  ( n.getType (  )  >= Token.OBJECTLIT )  {^69^^^^^68^84^if  ( n.getType (  )  == Token.OBJECTLIT )  {^[CLASS] NodeTypeNormalizer  [METHOD] normalizeJsDocAnnotations [RETURN_TYPE] void   Node n [VARIABLES] boolean  assertOnChange  forbidChanges  Node  child  key  n  value  
[BugLab_Wrong_Operator]^if  ( n.getType (  )  != Token.OBJECTLIT )  {^69^^^^^68^84^if  ( n.getType (  )  == Token.OBJECTLIT )  {^[CLASS] NodeTypeNormalizer  [METHOD] normalizeJsDocAnnotations [RETURN_TYPE] void   Node n [VARIABLES] boolean  assertOnChange  forbidChanges  Node  child  key  n  value  
[BugLab_Variable_Misuse]^if  ( n.getJSDocInfo (  )  != null && key.getNext (  ) .getType (  )  == Token.FUNCTION )  {^73^74^^^^68^84^if  ( key.getJSDocInfo (  )  != null && key.getNext (  ) .getType (  )  == Token.FUNCTION )  {^[CLASS] NodeTypeNormalizer  [METHOD] normalizeJsDocAnnotations [RETURN_TYPE] void   Node n [VARIABLES] boolean  assertOnChange  forbidChanges  Node  child  key  n  value  
[BugLab_Wrong_Operator]^if  ( key.getJSDocInfo (  )  != null || key.getNext (  ) .getType (  )  == Token.FUNCTION )  {^73^74^^^^68^84^if  ( key.getJSDocInfo (  )  != null && key.getNext (  ) .getType (  )  == Token.FUNCTION )  {^[CLASS] NodeTypeNormalizer  [METHOD] normalizeJsDocAnnotations [RETURN_TYPE] void   Node n [VARIABLES] boolean  assertOnChange  forbidChanges  Node  child  key  n  value  
[BugLab_Wrong_Operator]^if  ( key.getJSDocInfo (  )  == null && key.getNext (  ) .getType (  )  == Token.FUNCTION )  {^73^74^^^^68^84^if  ( key.getJSDocInfo (  )  != null && key.getNext (  ) .getType (  )  == Token.FUNCTION )  {^[CLASS] NodeTypeNormalizer  [METHOD] normalizeJsDocAnnotations [RETURN_TYPE] void   Node n [VARIABLES] boolean  assertOnChange  forbidChanges  Node  child  key  n  value  
[BugLab_Wrong_Operator]^if  ( key.getJSDocInfo (  )  != null && key.getNext (  ) .getType (  )  != Token.FUNCTION )  {^73^74^^^^68^84^if  ( key.getJSDocInfo (  )  != null && key.getNext (  ) .getType (  )  == Token.FUNCTION )  {^[CLASS] NodeTypeNormalizer  [METHOD] normalizeJsDocAnnotations [RETURN_TYPE] void   Node n [VARIABLES] boolean  assertOnChange  forbidChanges  Node  child  key  n  value  
[BugLab_Variable_Misuse]^value.setJSDocInfo ( n.getJSDocInfo (  )  ) ;^75^^^^^68^84^value.setJSDocInfo ( key.getJSDocInfo (  )  ) ;^[CLASS] NodeTypeNormalizer  [METHOD] normalizeJsDocAnnotations [RETURN_TYPE] void   Node n [VARIABLES] boolean  assertOnChange  forbidChanges  Node  child  key  n  value  
[BugLab_Variable_Misuse]^for  ( Node key = value.getFirstChild (  ) ;^70^^^^^68^84^for  ( Node key = n.getFirstChild (  ) ;^[CLASS] NodeTypeNormalizer  [METHOD] normalizeJsDocAnnotations [RETURN_TYPE] void   Node n [VARIABLES] boolean  assertOnChange  forbidChanges  Node  child  key  n  value  
[BugLab_Variable_Misuse]^for  ( Node value = n.getFirstChild (  ) ;^70^^^^^68^84^for  ( Node key = n.getFirstChild (  ) ;^[CLASS] NodeTypeNormalizer  [METHOD] normalizeJsDocAnnotations [RETURN_TYPE] void   Node n [VARIABLES] boolean  assertOnChange  forbidChanges  Node  child  key  n  value  
[BugLab_Argument_Swapping]^for  ( Node n = key.getFirstChild (  ) ;^70^^^^^68^84^for  ( Node key = n.getFirstChild (  ) ;^[CLASS] NodeTypeNormalizer  [METHOD] normalizeJsDocAnnotations [RETURN_TYPE] void   Node n [VARIABLES] boolean  assertOnChange  forbidChanges  Node  child  key  n  value  
[BugLab_Variable_Misuse]^if  ( value.getJSDocInfo (  )  != null && key.getNext (  ) .getType (  )  == Token.FUNCTION )  {^73^74^^^^68^84^if  ( key.getJSDocInfo (  )  != null && key.getNext (  ) .getType (  )  == Token.FUNCTION )  {^[CLASS] NodeTypeNormalizer  [METHOD] normalizeJsDocAnnotations [RETURN_TYPE] void   Node n [VARIABLES] boolean  assertOnChange  forbidChanges  Node  child  key  n  value  
[BugLab_Variable_Misuse]^Node value = n.getNext (  ) ;^72^^^^^68^84^Node value = key.getNext (  ) ;^[CLASS] NodeTypeNormalizer  [METHOD] normalizeJsDocAnnotations [RETURN_TYPE] void   Node n [VARIABLES] boolean  assertOnChange  forbidChanges  Node  child  key  n  value  
[BugLab_Variable_Misuse]^Node value = value.getNext (  ) ;^72^^^^^68^84^Node value = key.getNext (  ) ;^[CLASS] NodeTypeNormalizer  [METHOD] normalizeJsDocAnnotations [RETURN_TYPE] void   Node n [VARIABLES] boolean  assertOnChange  forbidChanges  Node  child  key  n  value  
[BugLab_Variable_Misuse]^value.setJSDocInfo ( value.getJSDocInfo (  )  ) ;^75^^^^^68^84^value.setJSDocInfo ( key.getJSDocInfo (  )  ) ;^[CLASS] NodeTypeNormalizer  [METHOD] normalizeJsDocAnnotations [RETURN_TYPE] void   Node n [VARIABLES] boolean  assertOnChange  forbidChanges  Node  child  key  n  value  
[BugLab_Variable_Misuse]^key != null; value = key.getNext (  ) .getNext (  )  )  {^71^^^^^68^84^key != null; key = key.getNext (  ) .getNext (  )  )  {^[CLASS] NodeTypeNormalizer  [METHOD] normalizeJsDocAnnotations [RETURN_TYPE] void   Node n [VARIABLES] boolean  assertOnChange  forbidChanges  Node  child  key  n  value  
[BugLab_Variable_Misuse]^if  ( key.getJSDocInfo (  )  != null && key.getNext (  ) .getType (  )  == Token.2 )  {^73^74^^^^68^84^if  ( key.getJSDocInfo (  )  != null && key.getNext (  ) .getType (  )  == Token.FUNCTION )  {^[CLASS] NodeTypeNormalizer  [METHOD] normalizeJsDocAnnotations [RETURN_TYPE] void   Node n [VARIABLES] boolean  assertOnChange  forbidChanges  Node  child  key  n  value  
[BugLab_Variable_Misuse]^for  ( Node child = value.getFirstChild (  ) ;^80^^^^^68^84^for  ( Node child = n.getFirstChild (  ) ;^[CLASS] NodeTypeNormalizer  [METHOD] normalizeJsDocAnnotations [RETURN_TYPE] void   Node n [VARIABLES] boolean  assertOnChange  forbidChanges  Node  child  key  n  value  
[BugLab_Variable_Misuse]^for  ( Node value = n.getFirstChild (  ) ;^80^^^^^68^84^for  ( Node child = n.getFirstChild (  ) ;^[CLASS] NodeTypeNormalizer  [METHOD] normalizeJsDocAnnotations [RETURN_TYPE] void   Node n [VARIABLES] boolean  assertOnChange  forbidChanges  Node  child  key  n  value  
[BugLab_Argument_Swapping]^for  ( Node n = child.getFirstChild (  ) ;^80^^^^^68^84^for  ( Node child = n.getFirstChild (  ) ;^[CLASS] NodeTypeNormalizer  [METHOD] normalizeJsDocAnnotations [RETURN_TYPE] void   Node n [VARIABLES] boolean  assertOnChange  forbidChanges  Node  child  key  n  value  
[BugLab_Variable_Misuse]^normalizeJsDocAnnotations ( value ) ;^82^^^^^68^84^normalizeJsDocAnnotations ( child ) ;^[CLASS] NodeTypeNormalizer  [METHOD] normalizeJsDocAnnotations [RETURN_TYPE] void   Node n [VARIABLES] boolean  assertOnChange  forbidChanges  Node  child  key  n  value  
[BugLab_Variable_Misuse]^child != null; value = child.getNext (  )  )  {^81^^^^^68^84^child != null; child = child.getNext (  )  )  {^[CLASS] NodeTypeNormalizer  [METHOD] normalizeJsDocAnnotations [RETURN_TYPE] void   Node n [VARIABLES] boolean  assertOnChange  forbidChanges  Node  child  key  n  value  
[BugLab_Wrong_Operator]^if  ( n.getType (  )  >= Token.EXPR_VOID )  {^90^^^^^89^111^if  ( n.getType (  )  == Token.EXPR_VOID )  {^[CLASS] NodeTypeNormalizer  [METHOD] normalizeNodeTypes [RETURN_TYPE] void   Node n [VARIABLES] boolean  assertOnChange  forbidChanges  Node  child  n  
[BugLab_Variable_Misuse]^if  ( child.getType (  )  == Token.EXPR_VOID )  {^90^^^^^89^111^if  ( n.getType (  )  == Token.EXPR_VOID )  {^[CLASS] NodeTypeNormalizer  [METHOD] normalizeNodeTypes [RETURN_TYPE] void   Node n [VARIABLES] boolean  assertOnChange  forbidChanges  Node  child  n  
[BugLab_Variable_Misuse]^if  ( child.getType (  )  == Token.FUNCTION )  {^97^^^^^89^111^if  ( n.getType (  )  == Token.FUNCTION )  {^[CLASS] NodeTypeNormalizer  [METHOD] normalizeNodeTypes [RETURN_TYPE] void   Node n [VARIABLES] boolean  assertOnChange  forbidChanges  Node  child  n  
[BugLab_Wrong_Operator]^if  ( n.getType (  )  <= Token.FUNCTION )  {^97^^^^^89^111^if  ( n.getType (  )  == Token.FUNCTION )  {^[CLASS] NodeTypeNormalizer  [METHOD] normalizeNodeTypes [RETURN_TYPE] void   Node n [VARIABLES] boolean  assertOnChange  forbidChanges  Node  child  n  
[BugLab_Wrong_Operator]^if  ( n.getType (  )  != Token.FUNCTION )  {^97^^^^^89^111^if  ( n.getType (  )  == Token.FUNCTION )  {^[CLASS] NodeTypeNormalizer  [METHOD] normalizeNodeTypes [RETURN_TYPE] void   Node n [VARIABLES] boolean  assertOnChange  forbidChanges  Node  child  n  
[BugLab_Variable_Misuse]^Preconditions.checkState ( child.getProp ( Node.FUNCTION_PROP )  == null ) ;^98^^^^^89^111^Preconditions.checkState ( n.getProp ( Node.FUNCTION_PROP )  == null ) ;^[CLASS] NodeTypeNormalizer  [METHOD] normalizeNodeTypes [RETURN_TYPE] void   Node n [VARIABLES] boolean  assertOnChange  forbidChanges  Node  child  n  
[BugLab_Wrong_Operator]^Preconditions.checkState ( n.getProp ( Node.FUNCTION_PROP )  != null ) ;^98^^^^^89^111^Preconditions.checkState ( n.getProp ( Node.FUNCTION_PROP )  == null ) ;^[CLASS] NodeTypeNormalizer  [METHOD] normalizeNodeTypes [RETURN_TYPE] void   Node n [VARIABLES] boolean  assertOnChange  forbidChanges  Node  child  n  
[BugLab_Variable_Misuse]^normalizeBlocks ( child ) ;^101^^^^^89^111^normalizeBlocks ( n ) ;^[CLASS] NodeTypeNormalizer  [METHOD] normalizeNodeTypes [RETURN_TYPE] void   Node n [VARIABLES] boolean  assertOnChange  forbidChanges  Node  child  n  
[BugLab_Variable_Misuse]^for  ( Node n = n.getFirstChild (  ) ;^103^^^^^89^111^for  ( Node child = n.getFirstChild (  ) ;^[CLASS] NodeTypeNormalizer  [METHOD] normalizeNodeTypes [RETURN_TYPE] void   Node n [VARIABLES] boolean  assertOnChange  forbidChanges  Node  child  n  
[BugLab_Argument_Swapping]^for  ( Node n = child.getFirstChild (  ) ;^103^^^^^89^111^for  ( Node child = n.getFirstChild (  ) ;^[CLASS] NodeTypeNormalizer  [METHOD] normalizeNodeTypes [RETURN_TYPE] void   Node n [VARIABLES] boolean  assertOnChange  forbidChanges  Node  child  n  
[BugLab_Argument_Swapping]^Preconditions.checkState ( n.getParent (  )  == child ) ;^107^^^^^89^111^Preconditions.checkState ( child.getParent (  )  == n ) ;^[CLASS] NodeTypeNormalizer  [METHOD] normalizeNodeTypes [RETURN_TYPE] void   Node n [VARIABLES] boolean  assertOnChange  forbidChanges  Node  child  n  
[BugLab_Wrong_Operator]^Preconditions.checkState ( child.getParent (  )  <= n ) ;^107^^^^^89^111^Preconditions.checkState ( child.getParent (  )  == n ) ;^[CLASS] NodeTypeNormalizer  [METHOD] normalizeNodeTypes [RETURN_TYPE] void   Node n [VARIABLES] boolean  assertOnChange  forbidChanges  Node  child  n  
[BugLab_Variable_Misuse]^Preconditions.checkState ( n.getParent (  )  == n ) ;^107^^^^^89^111^Preconditions.checkState ( child.getParent (  )  == n ) ;^[CLASS] NodeTypeNormalizer  [METHOD] normalizeNodeTypes [RETURN_TYPE] void   Node n [VARIABLES] boolean  assertOnChange  forbidChanges  Node  child  n  
[BugLab_Variable_Misuse]^normalizeNodeTypes ( n ) ;^109^^^^^89^111^normalizeNodeTypes ( child ) ;^[CLASS] NodeTypeNormalizer  [METHOD] normalizeNodeTypes [RETURN_TYPE] void   Node n [VARIABLES] boolean  assertOnChange  forbidChanges  Node  child  n  
[BugLab_Variable_Misuse]^child != null; n = child.getNext (  )  )  {^104^^^^^89^111^child != null; child = child.getNext (  )  )  {^[CLASS] NodeTypeNormalizer  [METHOD] normalizeNodeTypes [RETURN_TYPE] void   Node n [VARIABLES] boolean  assertOnChange  forbidChanges  Node  child  n  
[BugLab_Variable_Misuse]^for  ( Node child = child.getFirstChild (  ) ;^103^^^^^89^111^for  ( Node child = n.getFirstChild (  ) ;^[CLASS] NodeTypeNormalizer  [METHOD] normalizeNodeTypes [RETURN_TYPE] void   Node n [VARIABLES] boolean  assertOnChange  forbidChanges  Node  child  n  
[BugLab_Wrong_Operator]^Preconditions.checkState ( child.getParent (  )  != n ) ;^107^^^^^89^111^Preconditions.checkState ( child.getParent (  )  == n ) ;^[CLASS] NodeTypeNormalizer  [METHOD] normalizeNodeTypes [RETURN_TYPE] void   Node n [VARIABLES] boolean  assertOnChange  forbidChanges  Node  child  n  
[BugLab_Wrong_Operator]^if  ( NodeUtil.isControlStructure ( n ) || n.getType (  )  != Token.LABEL && n.getType (  )  != Token.SWITCH )  {^117^118^119^^^116^135^if  ( NodeUtil.isControlStructure ( n ) && n.getType (  )  != Token.LABEL && n.getType (  )  != Token.SWITCH )  {^[CLASS] NodeTypeNormalizer  [METHOD] normalizeBlocks [RETURN_TYPE] void   Node n [VARIABLES] boolean  assertOnChange  forbidChanges  Node  c  n  newBlock  
[BugLab_Wrong_Operator]^if  ( NodeUtil.isControlStructure ( n ) && n.getType (  )  < Token.LABEL && n.getType (  )  != Token.SWITCH )  {^117^118^119^^^116^135^if  ( NodeUtil.isControlStructure ( n ) && n.getType (  )  != Token.LABEL && n.getType (  )  != Token.SWITCH )  {^[CLASS] NodeTypeNormalizer  [METHOD] normalizeBlocks [RETURN_TYPE] void   Node n [VARIABLES] boolean  assertOnChange  forbidChanges  Node  c  n  newBlock  
[BugLab_Wrong_Operator]^if  ( NodeUtil.isControlStructure ( n ) && n.getType (  )  >= Token.LABEL && n.getType (  )  != Token.SWITCH )  {^117^118^119^^^116^135^if  ( NodeUtil.isControlStructure ( n ) && n.getType (  )  != Token.LABEL && n.getType (  )  != Token.SWITCH )  {^[CLASS] NodeTypeNormalizer  [METHOD] normalizeBlocks [RETURN_TYPE] void   Node n [VARIABLES] boolean  assertOnChange  forbidChanges  Node  c  n  newBlock  
[BugLab_Wrong_Operator]^if  ( NodeUtil.isControlStructure ( n ) && n.getType (  )  == Token.LABEL && n.getType (  )  != Token.SWITCH )  {^117^118^119^^^116^135^if  ( NodeUtil.isControlStructure ( n ) && n.getType (  )  != Token.LABEL && n.getType (  )  != Token.SWITCH )  {^[CLASS] NodeTypeNormalizer  [METHOD] normalizeBlocks [RETURN_TYPE] void   Node n [VARIABLES] boolean  assertOnChange  forbidChanges  Node  c  n  newBlock  
[BugLab_Variable_Misuse]^if  ( NodeUtil.isControlStructureCodeBlock ( c,c )  && c.getType (  )  != Token.BLOCK )  {^121^122^^^^116^135^if  ( NodeUtil.isControlStructureCodeBlock ( n,c )  && c.getType (  )  != Token.BLOCK )  {^[CLASS] NodeTypeNormalizer  [METHOD] normalizeBlocks [RETURN_TYPE] void   Node n [VARIABLES] boolean  assertOnChange  forbidChanges  Node  c  n  newBlock  
[BugLab_Variable_Misuse]^if  ( NodeUtil.isControlStructureCodeBlock ( n,c )  && n.getType (  )  != Token.BLOCK )  {^121^122^^^^116^135^if  ( NodeUtil.isControlStructureCodeBlock ( n,c )  && c.getType (  )  != Token.BLOCK )  {^[CLASS] NodeTypeNormalizer  [METHOD] normalizeBlocks [RETURN_TYPE] void   Node n [VARIABLES] boolean  assertOnChange  forbidChanges  Node  c  n  newBlock  
[BugLab_Argument_Swapping]^if  ( NodeUtil.isControlStructureCodeBlock ( c,c )  && n.getType (  )  != Token.BLOCK )  {^121^122^^^^116^135^if  ( NodeUtil.isControlStructureCodeBlock ( n,c )  && c.getType (  )  != Token.BLOCK )  {^[CLASS] NodeTypeNormalizer  [METHOD] normalizeBlocks [RETURN_TYPE] void   Node n [VARIABLES] boolean  assertOnChange  forbidChanges  Node  c  n  newBlock  
[BugLab_Wrong_Operator]^if  ( NodeUtil.isControlStructureCodeBlock ( n,c )  || c.getType (  )  != Token.BLOCK )  {^121^122^^^^116^135^if  ( NodeUtil.isControlStructureCodeBlock ( n,c )  && c.getType (  )  != Token.BLOCK )  {^[CLASS] NodeTypeNormalizer  [METHOD] normalizeBlocks [RETURN_TYPE] void   Node n [VARIABLES] boolean  assertOnChange  forbidChanges  Node  c  n  newBlock  
[BugLab_Wrong_Operator]^if  ( NodeUtil.isControlStructureCodeBlock ( n,c )  && c.getType (  )  == Token.BLOCK )  {^121^122^^^^116^135^if  ( NodeUtil.isControlStructureCodeBlock ( n,c )  && c.getType (  )  != Token.BLOCK )  {^[CLASS] NodeTypeNormalizer  [METHOD] normalizeBlocks [RETURN_TYPE] void   Node n [VARIABLES] boolean  assertOnChange  forbidChanges  Node  c  n  newBlock  
[BugLab_Variable_Misuse]^if  ( n.getType (  )  != Token.EMPTY )  {^125^^^^^116^135^if  ( c.getType (  )  != Token.EMPTY )  {^[CLASS] NodeTypeNormalizer  [METHOD] normalizeBlocks [RETURN_TYPE] void   Node n [VARIABLES] boolean  assertOnChange  forbidChanges  Node  c  n  newBlock  
[BugLab_Variable_Misuse]^if  ( c.getType (  )  != Token.0 )  {^125^^^^^116^135^if  ( c.getType (  )  != Token.EMPTY )  {^[CLASS] NodeTypeNormalizer  [METHOD] normalizeBlocks [RETURN_TYPE] void   Node n [VARIABLES] boolean  assertOnChange  forbidChanges  Node  c  n  newBlock  
[BugLab_Wrong_Operator]^if  ( c.getType (  )  == Token.EMPTY )  {^125^^^^^116^135^if  ( c.getType (  )  != Token.EMPTY )  {^[CLASS] NodeTypeNormalizer  [METHOD] normalizeBlocks [RETURN_TYPE] void   Node n [VARIABLES] boolean  assertOnChange  forbidChanges  Node  c  n  newBlock  
[BugLab_Wrong_Literal]^newBlock.setWasEmptyNode ( false ) ;^128^^^^^116^135^newBlock.setWasEmptyNode ( true ) ;^[CLASS] NodeTypeNormalizer  [METHOD] normalizeBlocks [RETURN_TYPE] void   Node n [VARIABLES] boolean  assertOnChange  forbidChanges  Node  c  n  newBlock  
[BugLab_Variable_Misuse]^newBlock.addChildrenToFront ( n ) ;^126^^^^^116^135^newBlock.addChildrenToFront ( c ) ;^[CLASS] NodeTypeNormalizer  [METHOD] normalizeBlocks [RETURN_TYPE] void   Node n [VARIABLES] boolean  assertOnChange  forbidChanges  Node  c  n  newBlock  
[BugLab_Variable_Misuse]^c = n;^130^^^^^116^135^c = newBlock;^[CLASS] NodeTypeNormalizer  [METHOD] normalizeBlocks [RETURN_TYPE] void   Node n [VARIABLES] boolean  assertOnChange  forbidChanges  Node  c  n  newBlock  
[BugLab_Variable_Misuse]^n.replaceChild ( c, newBlockewBlock ) ;^124^^^^^116^135^n.replaceChild ( c, newBlock ) ;^[CLASS] NodeTypeNormalizer  [METHOD] normalizeBlocks [RETURN_TYPE] void   Node n [VARIABLES] boolean  assertOnChange  forbidChanges  Node  c  n  newBlock  
[BugLab_Variable_Misuse]^n.replaceChild ( n, newBlock ) ;^124^^^^^116^135^n.replaceChild ( c, newBlock ) ;^[CLASS] NodeTypeNormalizer  [METHOD] normalizeBlocks [RETURN_TYPE] void   Node n [VARIABLES] boolean  assertOnChange  forbidChanges  Node  c  n  newBlock  
[BugLab_Variable_Misuse]^n.replaceChild ( c, n ) ;^124^^^^^116^135^n.replaceChild ( c, newBlock ) ;^[CLASS] NodeTypeNormalizer  [METHOD] normalizeBlocks [RETURN_TYPE] void   Node n [VARIABLES] boolean  assertOnChange  forbidChanges  Node  c  n  newBlock  
[BugLab_Argument_Swapping]^n.replaceChild ( n, cewBlock ) ;^124^^^^^116^135^n.replaceChild ( c, newBlock ) ;^[CLASS] NodeTypeNormalizer  [METHOD] normalizeBlocks [RETURN_TYPE] void   Node n [VARIABLES] boolean  assertOnChange  forbidChanges  Node  c  n  newBlock  
[BugLab_Argument_Swapping]^n.replaceChild ( newBlock, c ) ;^124^^^^^116^135^n.replaceChild ( c, newBlock ) ;^[CLASS] NodeTypeNormalizer  [METHOD] normalizeBlocks [RETURN_TYPE] void   Node n [VARIABLES] boolean  assertOnChange  forbidChanges  Node  c  n  newBlock  
[BugLab_Variable_Misuse]^if  ( newBlock.getType (  )  != Token.EMPTY )  {^125^^^^^116^135^if  ( c.getType (  )  != Token.EMPTY )  {^[CLASS] NodeTypeNormalizer  [METHOD] normalizeBlocks [RETURN_TYPE] void   Node n [VARIABLES] boolean  assertOnChange  forbidChanges  Node  c  n  newBlock  
[BugLab_Variable_Misuse]^if  ( c.getType (  )  != Token.null )  {^125^^^^^116^135^if  ( c.getType (  )  != Token.EMPTY )  {^[CLASS] NodeTypeNormalizer  [METHOD] normalizeBlocks [RETURN_TYPE] void   Node n [VARIABLES] boolean  assertOnChange  forbidChanges  Node  c  n  newBlock  
[BugLab_Variable_Misuse]^for  ( Node c = newBlock.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  {^120^^^^^116^135^for  ( Node c = n.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  {^[CLASS] NodeTypeNormalizer  [METHOD] normalizeBlocks [RETURN_TYPE] void   Node n [VARIABLES] boolean  assertOnChange  forbidChanges  Node  c  n  newBlock  
[BugLab_Variable_Misuse]^for  ( Node newBlock = n.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  {^120^^^^^116^135^for  ( Node c = n.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  {^[CLASS] NodeTypeNormalizer  [METHOD] normalizeBlocks [RETURN_TYPE] void   Node n [VARIABLES] boolean  assertOnChange  forbidChanges  Node  c  n  newBlock  
[BugLab_Argument_Swapping]^for  ( Node n = c.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  {^120^^^^^116^135^for  ( Node c = n.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  {^[CLASS] NodeTypeNormalizer  [METHOD] normalizeBlocks [RETURN_TYPE] void   Node n [VARIABLES] boolean  assertOnChange  forbidChanges  Node  c  n  newBlock  
[BugLab_Wrong_Operator]^for  ( Node c = n.getFirstChild (  ) ; c == null; c = c.getNext (  )  )  {^120^^^^^116^135^for  ( Node c = n.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  {^[CLASS] NodeTypeNormalizer  [METHOD] normalizeBlocks [RETURN_TYPE] void   Node n [VARIABLES] boolean  assertOnChange  forbidChanges  Node  c  n  newBlock  
[BugLab_Wrong_Operator]^if  ( NodeUtil.isControlStructureCodeBlock ( n,c )  && c.getType (  )  <= Token.BLOCK )  {^121^122^^^^116^135^if  ( NodeUtil.isControlStructureCodeBlock ( n,c )  && c.getType (  )  != Token.BLOCK )  {^[CLASS] NodeTypeNormalizer  [METHOD] normalizeBlocks [RETURN_TYPE] void   Node n [VARIABLES] boolean  assertOnChange  forbidChanges  Node  c  n  newBlock  
[BugLab_Wrong_Operator]^if  ( NodeUtil.isControlStructureCodeBlock ( n,c )  && c.getType (  )  > Token.BLOCK )  {^121^122^^^^116^135^if  ( NodeUtil.isControlStructureCodeBlock ( n,c )  && c.getType (  )  != Token.BLOCK )  {^[CLASS] NodeTypeNormalizer  [METHOD] normalizeBlocks [RETURN_TYPE] void   Node n [VARIABLES] boolean  assertOnChange  forbidChanges  Node  c  n  newBlock  
[BugLab_Wrong_Operator]^if  ( c.getType (  )  <= Token.EMPTY )  {^125^^^^^116^135^if  ( c.getType (  )  != Token.EMPTY )  {^[CLASS] NodeTypeNormalizer  [METHOD] normalizeBlocks [RETURN_TYPE] void   Node n [VARIABLES] boolean  assertOnChange  forbidChanges  Node  c  n  newBlock  
[BugLab_Variable_Misuse]^n.replaceChild ( c, c ) ;^124^^^^^116^135^n.replaceChild ( c, newBlock ) ;^[CLASS] NodeTypeNormalizer  [METHOD] normalizeBlocks [RETURN_TYPE] void   Node n [VARIABLES] boolean  assertOnChange  forbidChanges  Node  c  n  newBlock  
[BugLab_Variable_Misuse]^if  ( NodeUtil.isControlStructureCodeBlock ( newBlock,c )  && c.getType (  )  != Token.BLOCK )  {^121^122^^^^116^135^if  ( NodeUtil.isControlStructureCodeBlock ( n,c )  && c.getType (  )  != Token.BLOCK )  {^[CLASS] NodeTypeNormalizer  [METHOD] normalizeBlocks [RETURN_TYPE] void   Node n [VARIABLES] boolean  assertOnChange  forbidChanges  Node  c  n  newBlock  
[BugLab_Variable_Misuse]^if  ( NodeUtil.isControlStructureCodeBlock ( n,c )  && newBlock.getType (  )  != Token.BLOCK )  {^121^122^^^^116^135^if  ( NodeUtil.isControlStructureCodeBlock ( n,c )  && c.getType (  )  != Token.BLOCK )  {^[CLASS] NodeTypeNormalizer  [METHOD] normalizeBlocks [RETURN_TYPE] void   Node n [VARIABLES] boolean  assertOnChange  forbidChanges  Node  c  n  newBlock  
[BugLab_Variable_Misuse]^n.replaceChild ( c, cewBlock ) ;^124^^^^^116^135^n.replaceChild ( c, newBlock ) ;^[CLASS] NodeTypeNormalizer  [METHOD] normalizeBlocks [RETURN_TYPE] void   Node n [VARIABLES] boolean  assertOnChange  forbidChanges  Node  c  n  newBlock  
[BugLab_Variable_Misuse]^n.replaceChild ( newBlock, newBlock ) ;^124^^^^^116^135^n.replaceChild ( c, newBlock ) ;^[CLASS] NodeTypeNormalizer  [METHOD] normalizeBlocks [RETURN_TYPE] void   Node n [VARIABLES] boolean  assertOnChange  forbidChanges  Node  c  n  newBlock  
[BugLab_Variable_Misuse]^Node newBlock = new Node ( Token.null ) ;^123^^^^^116^135^Node newBlock = new Node ( Token.BLOCK ) ;^[CLASS] NodeTypeNormalizer  [METHOD] normalizeBlocks [RETURN_TYPE] void   Node n [VARIABLES] boolean  assertOnChange  forbidChanges  Node  c  n  newBlock  
[BugLab_Wrong_Operator]^if  ( c.getType (  )  >= Token.EMPTY )  {^125^^^^^116^135^if  ( c.getType (  )  != Token.EMPTY )  {^[CLASS] NodeTypeNormalizer  [METHOD] normalizeBlocks [RETURN_TYPE] void   Node n [VARIABLES] boolean  assertOnChange  forbidChanges  Node  c  n  newBlock  
[BugLab_Variable_Misuse]^if  ( NodeUtil.isControlStructure ( newBlock ) && n.getType (  )  != Token.LABEL && n.getType (  )  != Token.SWITCH )  {^117^118^119^^^116^135^if  ( NodeUtil.isControlStructure ( n ) && n.getType (  )  != Token.LABEL && n.getType (  )  != Token.SWITCH )  {^[CLASS] NodeTypeNormalizer  [METHOD] normalizeBlocks [RETURN_TYPE] void   Node n [VARIABLES] boolean  assertOnChange  forbidChanges  Node  c  n  newBlock  
[BugLab_Variable_Misuse]^&& newBlock.getType (  )  != Token.LABEL && n.getType (  )  != Token.SWITCH )  {^118^119^^^^116^135^&& n.getType (  )  != Token.LABEL && n.getType (  )  != Token.SWITCH )  {^[CLASS] NodeTypeNormalizer  [METHOD] normalizeBlocks [RETURN_TYPE] void   Node n [VARIABLES] boolean  assertOnChange  forbidChanges  Node  c  n  newBlock  
[BugLab_Variable_Misuse]^&& newBlock.getType (  )  != Token.SWITCH )  {^119^^^^^116^135^&& n.getType (  )  != Token.SWITCH )  {^[CLASS] NodeTypeNormalizer  [METHOD] normalizeBlocks [RETURN_TYPE] void   Node n [VARIABLES] boolean  assertOnChange  forbidChanges  Node  c  n  newBlock  
