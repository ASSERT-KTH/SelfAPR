[buglab_swap_variables]^for  ( Node n = key.getFirstChild (  ) ;^70^^^^^68^84^for  ( Node key = n.getFirstChild (  ) ;^[CLASS] NodeTypeNormalizer  [METHOD] normalizeJsDocAnnotations [RETURN_TYPE] void   Node n [VARIABLES] boolean  assertOnChange  forbidChanges  Node  child  key  n  value  
[buglab_swap_variables]^for  ( Node n = child.getFirstChild (  ) ;^80^^^^^68^84^for  ( Node child = n.getFirstChild (  ) ;^[CLASS] NodeTypeNormalizer  [METHOD] normalizeJsDocAnnotations [RETURN_TYPE] void   Node n [VARIABLES] boolean  assertOnChange  forbidChanges  Node  child  key  n  value  
[buglab_swap_variables]^for  ( Node n = child.getFirstChild (  ) ;^103^^^^^89^111^for  ( Node child = n.getFirstChild (  ) ;^[CLASS] NodeTypeNormalizer  [METHOD] normalizeNodeTypes [RETURN_TYPE] void   Node n [VARIABLES] boolean  assertOnChange  forbidChanges  Node  child  n  
[buglab_swap_variables]^Preconditions.checkState ( n.getParent (  )  == child ) ;^107^^^^^89^111^Preconditions.checkState ( child.getParent (  )  == n ) ;^[CLASS] NodeTypeNormalizer  [METHOD] normalizeNodeTypes [RETURN_TYPE] void   Node n [VARIABLES] boolean  assertOnChange  forbidChanges  Node  child  n  
[buglab_swap_variables]^if  ( NodeUtil.isControlStructureCodeBlock ( c,c )  && n.getType (  )  != Token.BLOCK )  {^121^122^^^^116^135^if  ( NodeUtil.isControlStructureCodeBlock ( n,c )  && c.getType (  )  != Token.BLOCK )  {^[CLASS] NodeTypeNormalizer  [METHOD] normalizeBlocks [RETURN_TYPE] void   Node n [VARIABLES] boolean  assertOnChange  forbidChanges  Node  c  n  newBlock  
[buglab_swap_variables]^if  ( NodeUtil.isControlStructureCodeBlock ( c )  && c.getType (  )  != Token.BLOCK )  {^121^122^^^^116^135^if  ( NodeUtil.isControlStructureCodeBlock ( n,c )  && c.getType (  )  != Token.BLOCK )  {^[CLASS] NodeTypeNormalizer  [METHOD] normalizeBlocks [RETURN_TYPE] void   Node n [VARIABLES] boolean  assertOnChange  forbidChanges  Node  c  n  newBlock  
[buglab_swap_variables]^n.replaceChild ( n, cewBlock ) ;^124^^^^^116^135^n.replaceChild ( c, newBlock ) ;^[CLASS] NodeTypeNormalizer  [METHOD] normalizeBlocks [RETURN_TYPE] void   Node n [VARIABLES] boolean  assertOnChange  forbidChanges  Node  c  n  newBlock  
[buglab_swap_variables]^n.replaceChild ( cewBlock ) ;^124^^^^^116^135^n.replaceChild ( c, newBlock ) ;^[CLASS] NodeTypeNormalizer  [METHOD] normalizeBlocks [RETURN_TYPE] void   Node n [VARIABLES] boolean  assertOnChange  forbidChanges  Node  c  n  newBlock  
[buglab_swap_variables]^n.replaceChild (  newBlock ) ;^124^^^^^116^135^n.replaceChild ( c, newBlock ) ;^[CLASS] NodeTypeNormalizer  [METHOD] normalizeBlocks [RETURN_TYPE] void   Node n [VARIABLES] boolean  assertOnChange  forbidChanges  Node  c  n  newBlock  
[buglab_swap_variables]^n.replaceChild ( c, n ) ;^124^^^^^116^135^n.replaceChild ( c, newBlock ) ;^[CLASS] NodeTypeNormalizer  [METHOD] normalizeBlocks [RETURN_TYPE] void   Node n [VARIABLES] boolean  assertOnChange  forbidChanges  Node  c  n  newBlock  
[buglab_swap_variables]^n.replaceChild ( c ) ;^124^^^^^116^135^n.replaceChild ( c, newBlock ) ;^[CLASS] NodeTypeNormalizer  [METHOD] normalizeBlocks [RETURN_TYPE] void   Node n [VARIABLES] boolean  assertOnChange  forbidChanges  Node  c  n  newBlock  
[buglab_swap_variables]^n.replaceChild ( newBlock, c ) ;^124^^^^^116^135^n.replaceChild ( c, newBlock ) ;^[CLASS] NodeTypeNormalizer  [METHOD] normalizeBlocks [RETURN_TYPE] void   Node n [VARIABLES] boolean  assertOnChange  forbidChanges  Node  c  n  newBlock  
[buglab_swap_variables]^n.replaceChild ( c, newBlockewBlock ) ;^124^^^^^116^135^n.replaceChild ( c, newBlock ) ;^[CLASS] NodeTypeNormalizer  [METHOD] normalizeBlocks [RETURN_TYPE] void   Node n [VARIABLES] boolean  assertOnChange  forbidChanges  Node  c  n  newBlock  
[buglab_swap_variables]^for  ( Node n = c.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  {^120^^^^^116^135^for  ( Node c = n.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  {^[CLASS] NodeTypeNormalizer  [METHOD] normalizeBlocks [RETURN_TYPE] void   Node n [VARIABLES] boolean  assertOnChange  forbidChanges  Node  c  n  newBlock  
