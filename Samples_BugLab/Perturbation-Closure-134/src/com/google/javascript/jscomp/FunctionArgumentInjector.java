[BugLab_Wrong_Literal]^private boolean sideEffectSeen = true;^329^^^^^324^334^private boolean sideEffectSeen = false;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [VARIABLES] 
[BugLab_Variable_Misuse]^if  ( replacement.getType (  )  == Token.NAME )  {^54^^^^^52^76^if  ( node.getType (  )  == Token.NAME )  {^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] inject [RETURN_TYPE] Node   Node node Node parent Node> replacements [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffectSeen  Map  replacements  int  loopsEntered  Node  c  node  parent  replacement  replacementTemplate  
[BugLab_Wrong_Operator]^if  ( node.getType (  )  >= Token.NAME )  {^54^^^^^52^76^if  ( node.getType (  )  == Token.NAME )  {^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] inject [RETURN_TYPE] Node   Node node Node parent Node> replacements [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffectSeen  Map  replacements  int  loopsEntered  Node  c  node  parent  replacement  replacementTemplate  
[BugLab_Wrong_Operator]^if  ( replacementTemplate == null )  {^56^^^^^52^76^if  ( replacementTemplate != null )  {^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] inject [RETURN_TYPE] Node   Node node Node parent Node> replacements [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffectSeen  Map  replacements  int  loopsEntered  Node  c  node  parent  replacement  replacementTemplate  
[BugLab_Variable_Misuse]^return replacementTemplate;^65^^^^^52^76^return replacement;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] inject [RETURN_TYPE] Node   Node node Node parent Node> replacements [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffectSeen  Map  replacements  int  loopsEntered  Node  c  node  parent  replacement  replacementTemplate  
[BugLab_Variable_Misuse]^Node replacement = parent.cloneTree (  ) ;^63^^^^^52^76^Node replacement = replacementTemplate.cloneTree (  ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] inject [RETURN_TYPE] Node   Node node Node parent Node> replacements [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffectSeen  Map  replacements  int  loopsEntered  Node  c  node  parent  replacement  replacementTemplate  
[BugLab_Variable_Misuse]^Preconditions.checkState ( replacementTemplate.getType (  )  != Token.FUNCTION || parent.getType (  )  != Token.VAR || parent.getType (  )  != Token.CATCH ) ;^58^59^60^^^52^76^Preconditions.checkState ( parent.getType (  )  != Token.FUNCTION || parent.getType (  )  != Token.VAR || parent.getType (  )  != Token.CATCH ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] inject [RETURN_TYPE] Node   Node node Node parent Node> replacements [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffectSeen  Map  replacements  int  loopsEntered  Node  c  node  parent  replacement  replacementTemplate  
[BugLab_Wrong_Operator]^Preconditions.checkState ( parent.getType (  )  != Token.FUNCTION && parent.getType (  )  != Token.VAR || parent.getType (  )  != Token.CATCH ) ;^58^59^60^^^52^76^Preconditions.checkState ( parent.getType (  )  != Token.FUNCTION || parent.getType (  )  != Token.VAR || parent.getType (  )  != Token.CATCH ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] inject [RETURN_TYPE] Node   Node node Node parent Node> replacements [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffectSeen  Map  replacements  int  loopsEntered  Node  c  node  parent  replacement  replacementTemplate  
[BugLab_Wrong_Operator]^Preconditions.checkState ( parent.getType (  )  == Token.FUNCTION || parent.getType (  )  != Token.VAR || parent.getType (  )  != Token.CATCH ) ;^58^59^60^^^52^76^Preconditions.checkState ( parent.getType (  )  != Token.FUNCTION || parent.getType (  )  != Token.VAR || parent.getType (  )  != Token.CATCH ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] inject [RETURN_TYPE] Node   Node node Node parent Node> replacements [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffectSeen  Map  replacements  int  loopsEntered  Node  c  node  parent  replacement  replacementTemplate  
[BugLab_Wrong_Operator]^Preconditions.checkState ( parent.getType (  )  <= Token.FUNCTION || parent.getType (  )  != Token.VAR || parent.getType (  )  != Token.CATCH ) ;^58^59^60^^^52^76^Preconditions.checkState ( parent.getType (  )  != Token.FUNCTION || parent.getType (  )  != Token.VAR || parent.getType (  )  != Token.CATCH ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] inject [RETURN_TYPE] Node   Node node Node parent Node> replacements [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffectSeen  Map  replacements  int  loopsEntered  Node  c  node  parent  replacement  replacementTemplate  
[BugLab_Variable_Misuse]^|| replacementTemplate.getType (  )  != Token.VAR || parent.getType (  )  != Token.CATCH ) ;^59^60^^^^52^76^|| parent.getType (  )  != Token.VAR || parent.getType (  )  != Token.CATCH ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] inject [RETURN_TYPE] Node   Node node Node parent Node> replacements [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffectSeen  Map  replacements  int  loopsEntered  Node  c  node  parent  replacement  replacementTemplate  
[BugLab_Variable_Misuse]^|| replacementTemplate.getType (  )  != Token.CATCH ) ;^60^^^^^52^76^|| parent.getType (  )  != Token.CATCH ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] inject [RETURN_TYPE] Node   Node node Node parent Node> replacements [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffectSeen  Map  replacements  int  loopsEntered  Node  c  node  parent  replacement  replacementTemplate  
[BugLab_Variable_Misuse]^parent.replaceChild ( replacementTemplate, replacement ) ;^64^^^^^52^76^parent.replaceChild ( node, replacement ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] inject [RETURN_TYPE] Node   Node node Node parent Node> replacements [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffectSeen  Map  replacements  int  loopsEntered  Node  c  node  parent  replacement  replacementTemplate  
[BugLab_Argument_Swapping]^parent.replaceChild ( replacement, node ) ;^64^^^^^52^76^parent.replaceChild ( node, replacement ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] inject [RETURN_TYPE] Node   Node node Node parent Node> replacements [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffectSeen  Map  replacements  int  loopsEntered  Node  c  node  parent  replacement  replacementTemplate  
[BugLab_Variable_Misuse]^return parent;^65^^^^^52^76^return replacement;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] inject [RETURN_TYPE] Node   Node node Node parent Node> replacements [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffectSeen  Map  replacements  int  loopsEntered  Node  c  node  parent  replacement  replacementTemplate  
[BugLab_Variable_Misuse]^Node replacementTemplate = replacements.get ( replacement.getString (  )  ) ;^55^^^^^52^76^Node replacementTemplate = replacements.get ( node.getString (  )  ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] inject [RETURN_TYPE] Node   Node node Node parent Node> replacements [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffectSeen  Map  replacements  int  loopsEntered  Node  c  node  parent  replacement  replacementTemplate  
[BugLab_Argument_Swapping]^Node replacementTemplate = node.get ( replacements.getString (  )  ) ;^55^^^^^52^76^Node replacementTemplate = replacements.get ( node.getString (  )  ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] inject [RETURN_TYPE] Node   Node node Node parent Node> replacements [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffectSeen  Map  replacements  int  loopsEntered  Node  c  node  parent  replacement  replacementTemplate  
[BugLab_Variable_Misuse]^Node replacementTemplate = replacements.get ( replacementTemplate.getString (  )  ) ;^55^^^^^52^76^Node replacementTemplate = replacements.get ( node.getString (  )  ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] inject [RETURN_TYPE] Node   Node node Node parent Node> replacements [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffectSeen  Map  replacements  int  loopsEntered  Node  c  node  parent  replacement  replacementTemplate  
[BugLab_Variable_Misuse]^Preconditions.checkState ( replacement.getType (  )  != Token.FUNCTION || parent.getType (  )  != Token.VAR || parent.getType (  )  != Token.CATCH ) ;^58^59^60^^^52^76^Preconditions.checkState ( parent.getType (  )  != Token.FUNCTION || parent.getType (  )  != Token.VAR || parent.getType (  )  != Token.CATCH ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] inject [RETURN_TYPE] Node   Node node Node parent Node> replacements [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffectSeen  Map  replacements  int  loopsEntered  Node  c  node  parent  replacement  replacementTemplate  
[BugLab_Variable_Misuse]^Node replacement = replacement.cloneTree (  ) ;^63^^^^^52^76^Node replacement = replacementTemplate.cloneTree (  ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] inject [RETURN_TYPE] Node   Node node Node parent Node> replacements [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffectSeen  Map  replacements  int  loopsEntered  Node  c  node  parent  replacement  replacementTemplate  
[BugLab_Variable_Misuse]^parent.replaceChild ( node, replacementTemplate ) ;^64^^^^^52^76^parent.replaceChild ( node, replacement ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] inject [RETURN_TYPE] Node   Node node Node parent Node> replacements [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffectSeen  Map  replacements  int  loopsEntered  Node  c  node  parent  replacement  replacementTemplate  
[BugLab_Variable_Misuse]^if  ( parent != null )  {^56^^^^^52^76^if  ( replacementTemplate != null )  {^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] inject [RETURN_TYPE] Node   Node node Node parent Node> replacements [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffectSeen  Map  replacements  int  loopsEntered  Node  c  node  parent  replacement  replacementTemplate  
[BugLab_Variable_Misuse]^if  ( parentTemplate != null )  {^56^^^^^52^76^if  ( replacementTemplate != null )  {^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] inject [RETURN_TYPE] Node   Node node Node parent Node> replacements [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffectSeen  Map  replacements  int  loopsEntered  Node  c  node  parent  replacement  replacementTemplate  
[BugLab_Wrong_Operator]^Preconditions.checkState ( parent.getType (  )  < Token.FUNCTION || parent.getType (  )  != Token.VAR || parent.getType (  )  != Token.CATCH ) ;^58^59^60^^^52^76^Preconditions.checkState ( parent.getType (  )  != Token.FUNCTION || parent.getType (  )  != Token.VAR || parent.getType (  )  != Token.CATCH ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] inject [RETURN_TYPE] Node   Node node Node parent Node> replacements [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffectSeen  Map  replacements  int  loopsEntered  Node  c  node  parent  replacement  replacementTemplate  
[BugLab_Wrong_Operator]^Preconditions.checkState ( parent.getType (  )  >= Token.FUNCTION || parent.getType (  )  != Token.VAR || parent.getType (  )  != Token.CATCH ) ;^58^59^60^^^52^76^Preconditions.checkState ( parent.getType (  )  != Token.FUNCTION || parent.getType (  )  != Token.VAR || parent.getType (  )  != Token.CATCH ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] inject [RETURN_TYPE] Node   Node node Node parent Node> replacements [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffectSeen  Map  replacements  int  loopsEntered  Node  c  node  parent  replacement  replacementTemplate  
[BugLab_Variable_Misuse]^|| replacement.getType (  )  != Token.CATCH ) ;^60^^^^^52^76^|| parent.getType (  )  != Token.CATCH ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] inject [RETURN_TYPE] Node   Node node Node parent Node> replacements [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffectSeen  Map  replacements  int  loopsEntered  Node  c  node  parent  replacement  replacementTemplate  
[BugLab_Variable_Misuse]^if  ( replacementTemplate.getType (  )  == Token.NAME )  {^54^^^^^52^76^if  ( node.getType (  )  == Token.NAME )  {^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] inject [RETURN_TYPE] Node   Node node Node parent Node> replacements [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffectSeen  Map  replacements  int  loopsEntered  Node  c  node  parent  replacement  replacementTemplate  
[BugLab_Variable_Misuse]^for  ( Node c = replacementTemplate.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  {^69^^^^^52^76^for  ( Node c = node.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  {^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] inject [RETURN_TYPE] Node   Node node Node parent Node> replacements [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffectSeen  Map  replacements  int  loopsEntered  Node  c  node  parent  replacement  replacementTemplate  
[BugLab_Variable_Misuse]^for  ( Node replacementTemplate = node.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  {^69^^^^^52^76^for  ( Node c = node.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  {^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] inject [RETURN_TYPE] Node   Node node Node parent Node> replacements [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffectSeen  Map  replacements  int  loopsEntered  Node  c  node  parent  replacement  replacementTemplate  
[BugLab_Argument_Swapping]^for  ( Node node = c.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  {^69^^^^^52^76^for  ( Node c = node.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  {^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] inject [RETURN_TYPE] Node   Node node Node parent Node> replacements [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffectSeen  Map  replacements  int  loopsEntered  Node  c  node  parent  replacement  replacementTemplate  
[BugLab_Wrong_Operator]^for  ( Node c = node.getFirstChild (  ) ; c == null; c = c.getNext (  )  )  {^69^^^^^52^76^for  ( Node c = node.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  {^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] inject [RETURN_TYPE] Node   Node node Node parent Node> replacements [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffectSeen  Map  replacements  int  loopsEntered  Node  c  node  parent  replacement  replacementTemplate  
[BugLab_Variable_Misuse]^c = inject ( c, replacementTemplate, replacements ) ;^72^^^^^52^76^c = inject ( c, node, replacements ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] inject [RETURN_TYPE] Node   Node node Node parent Node> replacements [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffectSeen  Map  replacements  int  loopsEntered  Node  c  node  parent  replacement  replacementTemplate  
[BugLab_Argument_Swapping]^c = inject ( node, c, replacements ) ;^72^^^^^52^76^c = inject ( c, node, replacements ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] inject [RETURN_TYPE] Node   Node node Node parent Node> replacements [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffectSeen  Map  replacements  int  loopsEntered  Node  c  node  parent  replacement  replacementTemplate  
[BugLab_Argument_Swapping]^c = inject ( c, replacements, node ) ;^72^^^^^52^76^c = inject ( c, node, replacements ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] inject [RETURN_TYPE] Node   Node node Node parent Node> replacements [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffectSeen  Map  replacements  int  loopsEntered  Node  c  node  parent  replacement  replacementTemplate  
[BugLab_Variable_Misuse]^c = inject ( replacementTemplate, node, replacements ) ;^72^^^^^52^76^c = inject ( c, node, replacements ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] inject [RETURN_TYPE] Node   Node node Node parent Node> replacements [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffectSeen  Map  replacements  int  loopsEntered  Node  c  node  parent  replacement  replacementTemplate  
[BugLab_Argument_Swapping]^c = inject ( replacements, node, c ) ;^72^^^^^52^76^c = inject ( c, node, replacements ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] inject [RETURN_TYPE] Node   Node node Node parent Node> replacements [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffectSeen  Map  replacements  int  loopsEntered  Node  c  node  parent  replacement  replacementTemplate  
[BugLab_Variable_Misuse]^c = inject ( c, replacement, replacements ) ;^72^^^^^52^76^c = inject ( c, node, replacements ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] inject [RETURN_TYPE] Node   Node node Node parent Node> replacements [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffectSeen  Map  replacements  int  loopsEntered  Node  c  node  parent  replacement  replacementTemplate  
[BugLab_Variable_Misuse]^return replacementTemplate;^75^^^^^52^76^return node;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] inject [RETURN_TYPE] Node   Node node Node parent Node> replacements [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffectSeen  Map  replacements  int  loopsEntered  Node  c  node  parent  replacement  replacementTemplate  
[BugLab_Variable_Misuse]^Node cArg = fnNode.getFirstChild (  ) .getNext (  ) ;^88^^^^^73^103^Node cArg = callNode.getFirstChild (  ) .getNext (  ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] getFunctionCallParameterMap [RETURN_TYPE] LinkedHashMap   Node fnNode Node callNode String> safeNameIdSupplier [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffectSeen  Node  cArg  callNode  fnArg  fnNode  Supplier  safeNameIdSupplier  String  uniquePlaceholder  int  anonArg  loopsEntered  LinkedHashMap  argMap  
[BugLab_Variable_Misuse]^if  ( fnNode.getFirstChild (  ) .getType (  )  != Token.NAME )  {^89^^^^^74^104^if  ( callNode.getFirstChild (  ) .getType (  )  != Token.NAME )  {^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] getFunctionCallParameterMap [RETURN_TYPE] LinkedHashMap   Node fnNode Node callNode String> safeNameIdSupplier [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffectSeen  Node  cArg  callNode  fnArg  fnNode  Supplier  safeNameIdSupplier  String  uniquePlaceholder  int  anonArg  loopsEntered  LinkedHashMap  argMap  
[BugLab_Variable_Misuse]^if  ( callNode.getFirstChild (  ) .getType (  )  != Token.0 )  {^89^^^^^74^104^if  ( callNode.getFirstChild (  ) .getType (  )  != Token.NAME )  {^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] getFunctionCallParameterMap [RETURN_TYPE] LinkedHashMap   Node fnNode Node callNode String> safeNameIdSupplier [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffectSeen  Node  cArg  callNode  fnArg  fnNode  Supplier  safeNameIdSupplier  String  uniquePlaceholder  int  anonArg  loopsEntered  LinkedHashMap  argMap  
[BugLab_Wrong_Operator]^if  ( callNode.getFirstChild (  ) .getType (  )  <= Token.NAME )  {^89^^^^^74^104^if  ( callNode.getFirstChild (  ) .getType (  )  != Token.NAME )  {^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] getFunctionCallParameterMap [RETURN_TYPE] LinkedHashMap   Node fnNode Node callNode String> safeNameIdSupplier [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffectSeen  Node  cArg  callNode  fnArg  fnNode  Supplier  safeNameIdSupplier  String  uniquePlaceholder  int  anonArg  loopsEntered  LinkedHashMap  argMap  
[BugLab_Variable_Misuse]^if  ( NodeUtil.isFunctionObjectCall ( fnNode )  )  {^90^^^^^75^105^if  ( NodeUtil.isFunctionObjectCall ( callNode )  )  {^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] getFunctionCallParameterMap [RETURN_TYPE] LinkedHashMap   Node fnNode Node callNode String> safeNameIdSupplier [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffectSeen  Node  cArg  callNode  fnArg  fnNode  Supplier  safeNameIdSupplier  String  uniquePlaceholder  int  anonArg  loopsEntered  LinkedHashMap  argMap  
[BugLab_Variable_Misuse]^Preconditions.checkState ( !NodeUtil.isFunctionObjectApply ( fnNode )  ) ;^96^^^^^90^97^Preconditions.checkState ( !NodeUtil.isFunctionObjectApply ( callNode )  ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] getFunctionCallParameterMap [RETURN_TYPE] LinkedHashMap   Node fnNode Node callNode String> safeNameIdSupplier [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffectSeen  Node  cArg  callNode  fnArg  fnNode  Supplier  safeNameIdSupplier  String  uniquePlaceholder  int  anonArg  loopsEntered  LinkedHashMap  argMap  
[BugLab_Variable_Misuse]^cArg = fnNode.getNext (  ) ;^94^^^^^79^109^cArg = cArg.getNext (  ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] getFunctionCallParameterMap [RETURN_TYPE] LinkedHashMap   Node fnNode Node callNode String> safeNameIdSupplier [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffectSeen  Node  cArg  callNode  fnArg  fnNode  Supplier  safeNameIdSupplier  String  uniquePlaceholder  int  anonArg  loopsEntered  LinkedHashMap  argMap  
[BugLab_Variable_Misuse]^Preconditions.checkNotNull ( fnNode ) ;^92^^^^^77^107^Preconditions.checkNotNull ( cArg ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] getFunctionCallParameterMap [RETURN_TYPE] LinkedHashMap   Node fnNode Node callNode String> safeNameIdSupplier [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffectSeen  Node  cArg  callNode  fnArg  fnNode  Supplier  safeNameIdSupplier  String  uniquePlaceholder  int  anonArg  loopsEntered  LinkedHashMap  argMap  
[BugLab_Variable_Misuse]^Preconditions.checkState ( fnNode.getType (  )  == Token.THIS ) ;^93^^^^^78^108^Preconditions.checkState ( cArg.getType (  )  == Token.THIS ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] getFunctionCallParameterMap [RETURN_TYPE] LinkedHashMap   Node fnNode Node callNode String> safeNameIdSupplier [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffectSeen  Node  cArg  callNode  fnArg  fnNode  Supplier  safeNameIdSupplier  String  uniquePlaceholder  int  anonArg  loopsEntered  LinkedHashMap  argMap  
[BugLab_Wrong_Operator]^Preconditions.checkState ( cArg.getType (  )  > Token.THIS ) ;^93^^^^^78^108^Preconditions.checkState ( cArg.getType (  )  == Token.THIS ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] getFunctionCallParameterMap [RETURN_TYPE] LinkedHashMap   Node fnNode Node callNode String> safeNameIdSupplier [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffectSeen  Node  cArg  callNode  fnArg  fnNode  Supplier  safeNameIdSupplier  String  uniquePlaceholder  int  anonArg  loopsEntered  LinkedHashMap  argMap  
[BugLab_Wrong_Operator]^Preconditions.checkState ( cArg.getType (  )  != Token.THIS ) ;^93^^^^^78^108^Preconditions.checkState ( cArg.getType (  )  == Token.THIS ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] getFunctionCallParameterMap [RETURN_TYPE] LinkedHashMap   Node fnNode Node callNode String> safeNameIdSupplier [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffectSeen  Node  cArg  callNode  fnArg  fnNode  Supplier  safeNameIdSupplier  String  uniquePlaceholder  int  anonArg  loopsEntered  LinkedHashMap  argMap  
[BugLab_Variable_Misuse]^Preconditions.checkState ( !NodeUtil.isFunctionObjectApply ( fnNode )  ) ;^96^^^^^81^111^Preconditions.checkState ( !NodeUtil.isFunctionObjectApply ( callNode )  ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] getFunctionCallParameterMap [RETURN_TYPE] LinkedHashMap   Node fnNode Node callNode String> safeNameIdSupplier [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffectSeen  Node  cArg  callNode  fnArg  fnNode  Supplier  safeNameIdSupplier  String  uniquePlaceholder  int  anonArg  loopsEntered  LinkedHashMap  argMap  
[BugLab_Wrong_Operator]^Preconditions.checkState ( cArg.getType (  )  <= Token.THIS ) ;^93^^^^^78^108^Preconditions.checkState ( cArg.getType (  )  == Token.THIS ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] getFunctionCallParameterMap [RETURN_TYPE] LinkedHashMap   Node fnNode Node callNode String> safeNameIdSupplier [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffectSeen  Node  cArg  callNode  fnArg  fnNode  Supplier  safeNameIdSupplier  String  uniquePlaceholder  int  anonArg  loopsEntered  LinkedHashMap  argMap  
[BugLab_Variable_Misuse]^if  ( fnNode != null )  {^101^^^^^86^116^if  ( cArg != null )  {^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] getFunctionCallParameterMap [RETURN_TYPE] LinkedHashMap   Node fnNode Node callNode String> safeNameIdSupplier [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffectSeen  Node  cArg  callNode  fnArg  fnNode  Supplier  safeNameIdSupplier  String  uniquePlaceholder  int  anonArg  loopsEntered  LinkedHashMap  argMap  
[BugLab_Wrong_Operator]^if  ( cArg == null )  {^101^^^^^86^116^if  ( cArg != null )  {^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] getFunctionCallParameterMap [RETURN_TYPE] LinkedHashMap   Node fnNode Node callNode String> safeNameIdSupplier [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffectSeen  Node  cArg  callNode  fnArg  fnNode  Supplier  safeNameIdSupplier  String  uniquePlaceholder  int  anonArg  loopsEntered  LinkedHashMap  argMap  
[BugLab_Variable_Misuse]^argMap.put ( fnNode.getString (  ) , NodeUtil.newUndefinedNode (  )  ) ;^105^^^^^101^106^argMap.put ( fnArg.getString (  ) , NodeUtil.newUndefinedNode (  )  ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] getFunctionCallParameterMap [RETURN_TYPE] LinkedHashMap   Node fnNode Node callNode String> safeNameIdSupplier [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffectSeen  Node  cArg  callNode  fnArg  fnNode  Supplier  safeNameIdSupplier  String  uniquePlaceholder  int  anonArg  loopsEntered  LinkedHashMap  argMap  
[BugLab_Variable_Misuse]^cArg = fnNode.getNext (  ) ;^103^^^^^88^118^cArg = cArg.getNext (  ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] getFunctionCallParameterMap [RETURN_TYPE] LinkedHashMap   Node fnNode Node callNode String> safeNameIdSupplier [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffectSeen  Node  cArg  callNode  fnArg  fnNode  Supplier  safeNameIdSupplier  String  uniquePlaceholder  int  anonArg  loopsEntered  LinkedHashMap  argMap  
[BugLab_Variable_Misuse]^argMap.put ( fnNode.getString (  ) , cArg ) ;^102^^^^^87^117^argMap.put ( fnArg.getString (  ) , cArg ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] getFunctionCallParameterMap [RETURN_TYPE] LinkedHashMap   Node fnNode Node callNode String> safeNameIdSupplier [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffectSeen  Node  cArg  callNode  fnArg  fnNode  Supplier  safeNameIdSupplier  String  uniquePlaceholder  int  anonArg  loopsEntered  LinkedHashMap  argMap  
[BugLab_Variable_Misuse]^argMap.put ( fnArg.getString (  ) , fnNode ) ;^102^^^^^87^117^argMap.put ( fnArg.getString (  ) , cArg ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] getFunctionCallParameterMap [RETURN_TYPE] LinkedHashMap   Node fnNode Node callNode String> safeNameIdSupplier [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffectSeen  Node  cArg  callNode  fnArg  fnNode  Supplier  safeNameIdSupplier  String  uniquePlaceholder  int  anonArg  loopsEntered  LinkedHashMap  argMap  
[BugLab_Argument_Swapping]^argMap.put ( cArg.getString (  ) , fnArg ) ;^102^^^^^87^117^argMap.put ( fnArg.getString (  ) , cArg ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] getFunctionCallParameterMap [RETURN_TYPE] LinkedHashMap   Node fnNode Node callNode String> safeNameIdSupplier [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffectSeen  Node  cArg  callNode  fnArg  fnNode  Supplier  safeNameIdSupplier  String  uniquePlaceholder  int  anonArg  loopsEntered  LinkedHashMap  argMap  
[BugLab_Variable_Misuse]^for  ( Node fnArg : NodeUtil.getFnParameters ( fnArg ) .children (  )  )  {^100^^^^^85^115^for  ( Node fnArg : NodeUtil.getFnParameters ( fnNode ) .children (  )  )  {^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] getFunctionCallParameterMap [RETURN_TYPE] LinkedHashMap   Node fnNode Node callNode String> safeNameIdSupplier [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffectSeen  Node  cArg  callNode  fnArg  fnNode  Supplier  safeNameIdSupplier  String  uniquePlaceholder  int  anonArg  loopsEntered  LinkedHashMap  argMap  
[BugLab_Variable_Misuse]^argMap.put ( fnNode.getString (  ) , NodeUtil.newUndefinedNode (  )  ) ;^105^^^^^90^120^argMap.put ( fnArg.getString (  ) , NodeUtil.newUndefinedNode (  )  ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] getFunctionCallParameterMap [RETURN_TYPE] LinkedHashMap   Node fnNode Node callNode String> safeNameIdSupplier [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffectSeen  Node  cArg  callNode  fnArg  fnNode  Supplier  safeNameIdSupplier  String  uniquePlaceholder  int  anonArg  loopsEntered  LinkedHashMap  argMap  
[BugLab_Wrong_Literal]^int anonArg = anonArg;^111^^^^^96^126^int anonArg = 0;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] getFunctionCallParameterMap [RETURN_TYPE] LinkedHashMap   Node fnNode Node callNode String> safeNameIdSupplier [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffectSeen  Node  cArg  callNode  fnArg  fnNode  Supplier  safeNameIdSupplier  String  uniquePlaceholder  int  anonArg  loopsEntered  LinkedHashMap  argMap  
[BugLab_Variable_Misuse]^while  ( fnNode != null )  {^112^^^^^97^127^while  ( cArg != null )  {^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] getFunctionCallParameterMap [RETURN_TYPE] LinkedHashMap   Node fnNode Node callNode String> safeNameIdSupplier [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffectSeen  Node  cArg  callNode  fnArg  fnNode  Supplier  safeNameIdSupplier  String  uniquePlaceholder  int  anonArg  loopsEntered  LinkedHashMap  argMap  
[BugLab_Wrong_Operator]^while  ( cArg == null )  {^112^^^^^97^127^while  ( cArg != null )  {^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] getFunctionCallParameterMap [RETURN_TYPE] LinkedHashMap   Node fnNode Node callNode String> safeNameIdSupplier [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffectSeen  Node  cArg  callNode  fnArg  fnNode  Supplier  safeNameIdSupplier  String  uniquePlaceholder  int  anonArg  loopsEntered  LinkedHashMap  argMap  
[BugLab_Variable_Misuse]^getUniqueAnonymousParameterName ( 4 ) ;^114^^^^^99^129^getUniqueAnonymousParameterName ( safeNameIdSupplier ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] getFunctionCallParameterMap [RETURN_TYPE] LinkedHashMap   Node fnNode Node callNode String> safeNameIdSupplier [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffectSeen  Node  cArg  callNode  fnArg  fnNode  Supplier  safeNameIdSupplier  String  uniquePlaceholder  int  anonArg  loopsEntered  LinkedHashMap  argMap  
[BugLab_Variable_Misuse]^argMap.put ( uniquePlaceholder, fnNode ) ;^115^^^^^100^130^argMap.put ( uniquePlaceholder, cArg ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] getFunctionCallParameterMap [RETURN_TYPE] LinkedHashMap   Node fnNode Node callNode String> safeNameIdSupplier [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffectSeen  Node  cArg  callNode  fnArg  fnNode  Supplier  safeNameIdSupplier  String  uniquePlaceholder  int  anonArg  loopsEntered  LinkedHashMap  argMap  
[BugLab_Argument_Swapping]^argMap.put ( cArg, uniquePlaceholder ) ;^115^^^^^100^130^argMap.put ( uniquePlaceholder, cArg ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] getFunctionCallParameterMap [RETURN_TYPE] LinkedHashMap   Node fnNode Node callNode String> safeNameIdSupplier [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffectSeen  Node  cArg  callNode  fnArg  fnNode  Supplier  safeNameIdSupplier  String  uniquePlaceholder  int  anonArg  loopsEntered  LinkedHashMap  argMap  
[BugLab_Variable_Misuse]^cArg = fnNode.getNext (  ) ;^116^^^^^101^131^cArg = cArg.getNext (  ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] getFunctionCallParameterMap [RETURN_TYPE] LinkedHashMap   Node fnNode Node callNode String> safeNameIdSupplier [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffectSeen  Node  cArg  callNode  fnArg  fnNode  Supplier  safeNameIdSupplier  String  uniquePlaceholder  int  anonArg  loopsEntered  LinkedHashMap  argMap  
[BugLab_Wrong_Operator]^return "JSCompiler_inline_anon_param_" + safeNameIdSupplier.get (  &&  ) ;^127^^^^^125^128^return "JSCompiler_inline_anon_param_" + safeNameIdSupplier.get (  ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] getUniqueAnonymousParameterName [RETURN_TYPE] String   String> safeNameIdSupplier [VARIABLES] Supplier  safeNameIdSupplier  Set  locals  parameters  parametersReferenced  boolean  sideEffectSeen  int  anonArg  loopsEntered  
[BugLab_Argument_Swapping]^return findModifiedParameters ( unsafeNames, null, names, fnNode ) ;^142^143^^^^139^144^return findModifiedParameters ( fnNode, null, names, unsafeNames ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] findModifiedParameters [RETURN_TYPE] Set   Node fnNode [VARIABLES] Set  locals  names  parameters  parametersReferenced  unsafeNames  boolean  sideEffectSeen  int  anonArg  loopsEntered  Node  fnNode  
[BugLab_Argument_Swapping]^return findModifiedParameters ( fnNode, null, unsafeNames, names ) ;^142^143^^^^139^144^return findModifiedParameters ( fnNode, null, names, unsafeNames ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] findModifiedParameters [RETURN_TYPE] Set   Node fnNode [VARIABLES] Set  locals  names  parameters  parametersReferenced  unsafeNames  boolean  sideEffectSeen  int  anonArg  loopsEntered  Node  fnNode  
[BugLab_Wrong_Operator]^Preconditions.checkArgument ( unsafe == null ) ;^164^^^^^162^178^Preconditions.checkArgument ( unsafe != null ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] findModifiedParameters [RETURN_TYPE] Set   Node n Node parent String> names String> unsafe [VARIABLES] Set  locals  names  parameters  parametersReferenced  unsafe  unsafeNames  boolean  sideEffectSeen  int  anonArg  loopsEntered  Node  c  n  parent  
[BugLab_Variable_Misuse]^if  ( parent.getType (  )  == Token.NAME )  {^165^^^^^162^178^if  ( n.getType (  )  == Token.NAME )  {^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] findModifiedParameters [RETURN_TYPE] Set   Node n Node parent String> names String> unsafe [VARIABLES] Set  locals  names  parameters  parametersReferenced  unsafe  unsafeNames  boolean  sideEffectSeen  int  anonArg  loopsEntered  Node  c  n  parent  
[BugLab_Wrong_Operator]^if  ( n.getType (  )  != Token.NAME )  {^165^^^^^162^178^if  ( n.getType (  )  == Token.NAME )  {^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] findModifiedParameters [RETURN_TYPE] Set   Node n Node parent String> names String> unsafe [VARIABLES] Set  locals  names  parameters  parametersReferenced  unsafe  unsafeNames  boolean  sideEffectSeen  int  anonArg  loopsEntered  Node  c  n  parent  
[BugLab_Variable_Misuse]^if  ( canNameValueChange ( parent, parent )  )  {^167^^^^^162^178^if  ( canNameValueChange ( n, parent )  )  {^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] findModifiedParameters [RETURN_TYPE] Set   Node n Node parent String> names String> unsafe [VARIABLES] Set  locals  names  parameters  parametersReferenced  unsafe  unsafeNames  boolean  sideEffectSeen  int  anonArg  loopsEntered  Node  c  n  parent  
[BugLab_Variable_Misuse]^if  ( canNameValueChange ( n, c )  )  {^167^^^^^162^178^if  ( canNameValueChange ( n, parent )  )  {^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] findModifiedParameters [RETURN_TYPE] Set   Node n Node parent String> names String> unsafe [VARIABLES] Set  locals  names  parameters  parametersReferenced  unsafe  unsafeNames  boolean  sideEffectSeen  int  anonArg  loopsEntered  Node  c  n  parent  
[BugLab_Argument_Swapping]^if  ( canNameValueChange ( parent, n )  )  {^167^^^^^162^178^if  ( canNameValueChange ( n, parent )  )  {^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] findModifiedParameters [RETURN_TYPE] Set   Node n Node parent String> names String> unsafe [VARIABLES] Set  locals  names  parameters  parametersReferenced  unsafe  unsafeNames  boolean  sideEffectSeen  int  anonArg  loopsEntered  Node  c  n  parent  
[BugLab_Variable_Misuse]^unsafe.add ( parent.getString (  )  ) ;^168^^^^^162^178^unsafe.add ( n.getString (  )  ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] findModifiedParameters [RETURN_TYPE] Set   Node n Node parent String> names String> unsafe [VARIABLES] Set  locals  names  parameters  parametersReferenced  unsafe  unsafeNames  boolean  sideEffectSeen  int  anonArg  loopsEntered  Node  c  n  parent  
[BugLab_Variable_Misuse]^if  ( canNameValueChange ( c, parent )  )  {^167^^^^^162^178^if  ( canNameValueChange ( n, parent )  )  {^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] findModifiedParameters [RETURN_TYPE] Set   Node n Node parent String> names String> unsafe [VARIABLES] Set  locals  names  parameters  parametersReferenced  unsafe  unsafeNames  boolean  sideEffectSeen  int  anonArg  loopsEntered  Node  c  n  parent  
[BugLab_Variable_Misuse]^if  ( parentames.contains ( n.getString (  )  )  )  {^166^^^^^162^178^if  ( names.contains ( n.getString (  )  )  )  {^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] findModifiedParameters [RETURN_TYPE] Set   Node n Node parent String> names String> unsafe [VARIABLES] Set  locals  names  parameters  parametersReferenced  unsafe  unsafeNames  boolean  sideEffectSeen  int  anonArg  loopsEntered  Node  c  n  parent  
[BugLab_Argument_Swapping]^if  ( n.contains ( names.getString (  )  )  )  {^166^^^^^162^178^if  ( names.contains ( n.getString (  )  )  )  {^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] findModifiedParameters [RETURN_TYPE] Set   Node n Node parent String> names String> unsafe [VARIABLES] Set  locals  names  parameters  parametersReferenced  unsafe  unsafeNames  boolean  sideEffectSeen  int  anonArg  loopsEntered  Node  c  n  parent  
[BugLab_Argument_Swapping]^if  ( namesames.contains ( n.getString (  )  )  )  {^166^^^^^162^178^if  ( names.contains ( n.getString (  )  )  )  {^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] findModifiedParameters [RETURN_TYPE] Set   Node n Node parent String> names String> unsafe [VARIABLES] Set  locals  names  parameters  parametersReferenced  unsafe  unsafeNames  boolean  sideEffectSeen  int  anonArg  loopsEntered  Node  c  n  parent  
[BugLab_Variable_Misuse]^if  ( cames.contains ( n.getString (  )  )  )  {^166^^^^^162^178^if  ( names.contains ( n.getString (  )  )  )  {^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] findModifiedParameters [RETURN_TYPE] Set   Node n Node parent String> names String> unsafe [VARIABLES] Set  locals  names  parameters  parametersReferenced  unsafe  unsafeNames  boolean  sideEffectSeen  int  anonArg  loopsEntered  Node  c  n  parent  
[BugLab_Variable_Misuse]^for  ( Node c : parent.children (  )  )  {^173^^^^^162^178^for  ( Node c : n.children (  )  )  {^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] findModifiedParameters [RETURN_TYPE] Set   Node n Node parent String> names String> unsafe [VARIABLES] Set  locals  names  parameters  parametersReferenced  unsafe  unsafeNames  boolean  sideEffectSeen  int  anonArg  loopsEntered  Node  c  n  parent  
[BugLab_Variable_Misuse]^findModifiedParameters ( parent, n, names, unsafe ) ;^174^^^^^162^178^findModifiedParameters ( c, n, names, unsafe ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] findModifiedParameters [RETURN_TYPE] Set   Node n Node parent String> names String> unsafe [VARIABLES] Set  locals  names  parameters  parametersReferenced  unsafe  unsafeNames  boolean  sideEffectSeen  int  anonArg  loopsEntered  Node  c  n  parent  
[BugLab_Variable_Misuse]^findModifiedParameters ( c, parent, names, unsafe ) ;^174^^^^^162^178^findModifiedParameters ( c, n, names, unsafe ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] findModifiedParameters [RETURN_TYPE] Set   Node n Node parent String> names String> unsafe [VARIABLES] Set  locals  names  parameters  parametersReferenced  unsafe  unsafeNames  boolean  sideEffectSeen  int  anonArg  loopsEntered  Node  c  n  parent  
[BugLab_Variable_Misuse]^findModifiedParameters ( c, n, null, unsafe ) ;^174^^^^^162^178^findModifiedParameters ( c, n, names, unsafe ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] findModifiedParameters [RETURN_TYPE] Set   Node n Node parent String> names String> unsafe [VARIABLES] Set  locals  names  parameters  parametersReferenced  unsafe  unsafeNames  boolean  sideEffectSeen  int  anonArg  loopsEntered  Node  c  n  parent  
[BugLab_Argument_Swapping]^findModifiedParameters ( n, c, names, unsafe ) ;^174^^^^^162^178^findModifiedParameters ( c, n, names, unsafe ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] findModifiedParameters [RETURN_TYPE] Set   Node n Node parent String> names String> unsafe [VARIABLES] Set  locals  names  parameters  parametersReferenced  unsafe  unsafeNames  boolean  sideEffectSeen  int  anonArg  loopsEntered  Node  c  n  parent  
[BugLab_Argument_Swapping]^findModifiedParameters ( c, unsafe, names, n ) ;^174^^^^^162^178^findModifiedParameters ( c, n, names, unsafe ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] findModifiedParameters [RETURN_TYPE] Set   Node n Node parent String> names String> unsafe [VARIABLES] Set  locals  names  parameters  parametersReferenced  unsafe  unsafeNames  boolean  sideEffectSeen  int  anonArg  loopsEntered  Node  c  n  parent  
[BugLab_Argument_Swapping]^findModifiedParameters ( c, n, unsafe, names ) ;^174^^^^^162^178^findModifiedParameters ( c, n, names, unsafe ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] findModifiedParameters [RETURN_TYPE] Set   Node n Node parent String> names String> unsafe [VARIABLES] Set  locals  names  parameters  parametersReferenced  unsafe  unsafeNames  boolean  sideEffectSeen  int  anonArg  loopsEntered  Node  c  n  parent  
[BugLab_Variable_Misuse]^int type = n.getType (  ) ;^192^^^^^191^195^int type = parent.getType (  ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] canNameValueChange [RETURN_TYPE] boolean   Node n Node parent [VARIABLES] Set  locals  names  parameters  parametersReferenced  unsafe  unsafeNames  boolean  sideEffectSeen  int  anonArg  loopsEntered  type  Node  n  parent  
[BugLab_Variable_Misuse]^return  ( loopsEntered == Token.VAR || type == Token.INC || type == Token.DEC || ( NodeUtil.isAssignmentOp ( parent )  && parent.getFirstChild (  )  == n )  ) ;^193^194^^^^191^195^return  ( type == Token.VAR || type == Token.INC || type == Token.DEC || ( NodeUtil.isAssignmentOp ( parent )  && parent.getFirstChild (  )  == n )  ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] canNameValueChange [RETURN_TYPE] boolean   Node n Node parent [VARIABLES] Set  locals  names  parameters  parametersReferenced  unsafe  unsafeNames  boolean  sideEffectSeen  int  anonArg  loopsEntered  type  Node  n  parent  
[BugLab_Variable_Misuse]^return  ( type == Token.VAR || type == Token.INC || type == Token.DEC || ( NodeUtil.isAssignmentOp ( n )  && parent.getFirstChild (  )  == n )  ) ;^193^194^^^^191^195^return  ( type == Token.VAR || type == Token.INC || type == Token.DEC || ( NodeUtil.isAssignmentOp ( parent )  && parent.getFirstChild (  )  == n )  ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] canNameValueChange [RETURN_TYPE] boolean   Node n Node parent [VARIABLES] Set  locals  names  parameters  parametersReferenced  unsafe  unsafeNames  boolean  sideEffectSeen  int  anonArg  loopsEntered  type  Node  n  parent  
[BugLab_Variable_Misuse]^return  ( type == Token.VAR || type == Token.INC || type == Token.DEC || ( NodeUtil.isAssignmentOp ( parent )  && parent.getFirstChild (  )  == parent )  ) ;^193^194^^^^191^195^return  ( type == Token.VAR || type == Token.INC || type == Token.DEC || ( NodeUtil.isAssignmentOp ( parent )  && parent.getFirstChild (  )  == n )  ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] canNameValueChange [RETURN_TYPE] boolean   Node n Node parent [VARIABLES] Set  locals  names  parameters  parametersReferenced  unsafe  unsafeNames  boolean  sideEffectSeen  int  anonArg  loopsEntered  type  Node  n  parent  
[BugLab_Argument_Swapping]^return  ( type == Token.VAR || type == Token.INC || type == Token.DEC || ( NodeUtil.isAssignmentOp ( n )  && parent.getFirstChild (  )  == parent )  ) ;^193^194^^^^191^195^return  ( type == Token.VAR || type == Token.INC || type == Token.DEC || ( NodeUtil.isAssignmentOp ( parent )  && parent.getFirstChild (  )  == n )  ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] canNameValueChange [RETURN_TYPE] boolean   Node n Node parent [VARIABLES] Set  locals  names  parameters  parametersReferenced  unsafe  unsafeNames  boolean  sideEffectSeen  int  anonArg  loopsEntered  type  Node  n  parent  
[BugLab_Wrong_Operator]^return  ( type == Token.VAR && type == Token.INC || type == Token.DEC || ( NodeUtil.isAssignmentOp ( parent )  && parent.getFirstChild (  )  == n )  ) ;^193^194^^^^191^195^return  ( type == Token.VAR || type == Token.INC || type == Token.DEC || ( NodeUtil.isAssignmentOp ( parent )  && parent.getFirstChild (  )  == n )  ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] canNameValueChange [RETURN_TYPE] boolean   Node n Node parent [VARIABLES] Set  locals  names  parameters  parametersReferenced  unsafe  unsafeNames  boolean  sideEffectSeen  int  anonArg  loopsEntered  type  Node  n  parent  
[BugLab_Wrong_Operator]^return  ( type <= Token.VAR || type == Token.INC || type == Token.DEC || ( NodeUtil.isAssignmentOp ( parent )  && parent.getFirstChild (  )  == n )  ) ;^193^194^^^^191^195^return  ( type == Token.VAR || type == Token.INC || type == Token.DEC || ( NodeUtil.isAssignmentOp ( parent )  && parent.getFirstChild (  )  == n )  ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] canNameValueChange [RETURN_TYPE] boolean   Node n Node parent [VARIABLES] Set  locals  names  parameters  parametersReferenced  unsafe  unsafeNames  boolean  sideEffectSeen  int  anonArg  loopsEntered  type  Node  n  parent  
[BugLab_Wrong_Operator]^return  ( type != Token.VAR || type == Token.INC || type == Token.DEC || ( NodeUtil.isAssignmentOp ( parent )  && parent.getFirstChild (  )  == n )  ) ;^193^194^^^^191^195^return  ( type == Token.VAR || type == Token.INC || type == Token.DEC || ( NodeUtil.isAssignmentOp ( parent )  && parent.getFirstChild (  )  == n )  ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] canNameValueChange [RETURN_TYPE] boolean   Node n Node parent [VARIABLES] Set  locals  names  parameters  parametersReferenced  unsafe  unsafeNames  boolean  sideEffectSeen  int  anonArg  loopsEntered  type  Node  n  parent  
[BugLab_Wrong_Operator]^return  ( type == Token.VAR || type == Token.INC || type == Token.DEC || ( NodeUtil.isAssignmentOp ( parent )  || parent.getFirstChild (  )  == n )  ) ;^193^194^^^^191^195^return  ( type == Token.VAR || type == Token.INC || type == Token.DEC || ( NodeUtil.isAssignmentOp ( parent )  && parent.getFirstChild (  )  == n )  ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] canNameValueChange [RETURN_TYPE] boolean   Node n Node parent [VARIABLES] Set  locals  names  parameters  parametersReferenced  unsafe  unsafeNames  boolean  sideEffectSeen  int  anonArg  loopsEntered  type  Node  n  parent  
[BugLab_Wrong_Operator]^return  ( type == Token.VAR || type == Token.INC || type == Token.DEC || ( NodeUtil.isAssignmentOp ( parent )  && parent.getFirstChild (  )  != n )  ) ;^193^194^^^^191^195^return  ( type == Token.VAR || type == Token.INC || type == Token.DEC || ( NodeUtil.isAssignmentOp ( parent )  && parent.getFirstChild (  )  == n )  ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] canNameValueChange [RETURN_TYPE] boolean   Node n Node parent [VARIABLES] Set  locals  names  parameters  parametersReferenced  unsafe  unsafeNames  boolean  sideEffectSeen  int  anonArg  loopsEntered  type  Node  n  parent  
[BugLab_Variable_Misuse]^( NodeUtil.isAssignmentOp ( n )  && parent.getFirstChild (  )  == n )  ) ;^194^^^^^191^195^( NodeUtil.isAssignmentOp ( parent )  && parent.getFirstChild (  )  == n )  ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] canNameValueChange [RETURN_TYPE] boolean   Node n Node parent [VARIABLES] Set  locals  names  parameters  parametersReferenced  unsafe  unsafeNames  boolean  sideEffectSeen  int  anonArg  loopsEntered  type  Node  n  parent  
[BugLab_Variable_Misuse]^if  ( null.isEmpty (  )  )  {^207^^^^^192^222^if  ( argMap.isEmpty (  )  )  {^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] maybeAddTempsForCallArguments [RETURN_TYPE] void   Node fnNode Node> argMap String> namesNeedingTemps CodingConvention convention [VARIABLES] Entry  entry  Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffectSeen  Node  block  cArg  fnNode  CodingConvention  convention  String  argName  name  Map  argMap  int  anonArg  loopsEntered  references  type  
[BugLab_Variable_Misuse]^Preconditions.checkArgument ( cArg.getType (  )  == Token.FUNCTION ) ;^212^^^^^197^227^Preconditions.checkArgument ( fnNode.getType (  )  == Token.FUNCTION ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] maybeAddTempsForCallArguments [RETURN_TYPE] void   Node fnNode Node> argMap String> namesNeedingTemps CodingConvention convention [VARIABLES] Entry  entry  Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffectSeen  Node  block  cArg  fnNode  CodingConvention  convention  String  argName  name  Map  argMap  int  anonArg  loopsEntered  references  type  
[BugLab_Wrong_Operator]^Preconditions.checkArgument ( fnNode.getType (  )  > Token.FUNCTION ) ;^212^^^^^197^227^Preconditions.checkArgument ( fnNode.getType (  )  == Token.FUNCTION ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] maybeAddTempsForCallArguments [RETURN_TYPE] void   Node fnNode Node> argMap String> namesNeedingTemps CodingConvention convention [VARIABLES] Entry  entry  Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffectSeen  Node  block  cArg  fnNode  CodingConvention  convention  String  argName  name  Map  argMap  int  anonArg  loopsEntered  references  type  
[BugLab_Variable_Misuse]^Node block = cArg.getLastChild (  ) ;^213^^^^^198^228^Node block = fnNode.getLastChild (  ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] maybeAddTempsForCallArguments [RETURN_TYPE] void   Node fnNode Node> argMap String> namesNeedingTemps CodingConvention convention [VARIABLES] Entry  entry  Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffectSeen  Node  block  cArg  fnNode  CodingConvention  convention  String  argName  name  Map  argMap  int  anonArg  loopsEntered  references  type  
[BugLab_Variable_Misuse]^Set<String> namesAfterSideEffects = findParametersReferencedAfterSideEffect ( parameters, fnNode ) ;^219^220^^^^204^234^Set<String> namesAfterSideEffects = findParametersReferencedAfterSideEffect ( parameters, block ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] maybeAddTempsForCallArguments [RETURN_TYPE] void   Node fnNode Node> argMap String> namesNeedingTemps CodingConvention convention [VARIABLES] Entry  entry  Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffectSeen  Node  block  cArg  fnNode  CodingConvention  convention  String  argName  name  Map  argMap  int  anonArg  loopsEntered  references  type  
[BugLab_Argument_Swapping]^Set<String> namesAfterSideEffects = findParametersReferencedAfterSideEffect ( block, parameters ) ;^219^220^^^^204^234^Set<String> namesAfterSideEffects = findParametersReferencedAfterSideEffect ( parameters, block ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] maybeAddTempsForCallArguments [RETURN_TYPE] void   Node fnNode Node> argMap String> namesNeedingTemps CodingConvention convention [VARIABLES] Entry  entry  Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffectSeen  Node  block  cArg  fnNode  CodingConvention  convention  String  argName  name  Map  argMap  int  anonArg  loopsEntered  references  type  
[BugLab_Variable_Misuse]^if  ( namesNeedingTemps.contains ( name )  )  {^225^^^^^210^240^if  ( namesNeedingTemps.contains ( argName )  )  {^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] maybeAddTempsForCallArguments [RETURN_TYPE] void   Node fnNode Node> argMap String> namesNeedingTemps CodingConvention convention [VARIABLES] Entry  entry  Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffectSeen  Node  block  cArg  fnNode  CodingConvention  convention  String  argName  name  Map  argMap  int  anonArg  loopsEntered  references  type  
[BugLab_Argument_Swapping]^if  ( argName.contains ( namesNeedingTemps )  )  {^225^^^^^210^240^if  ( namesNeedingTemps.contains ( argName )  )  {^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] maybeAddTempsForCallArguments [RETURN_TYPE] void   Node fnNode Node> argMap String> namesNeedingTemps CodingConvention convention [VARIABLES] Entry  entry  Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffectSeen  Node  block  cArg  fnNode  CodingConvention  convention  String  argName  name  Map  argMap  int  anonArg  loopsEntered  references  type  
[BugLab_Variable_Misuse]^if  ( NodeUtil.mayEffectMutableState ( fnNode )  && references > 0 )  {^232^^^^^217^247^if  ( NodeUtil.mayEffectMutableState ( cArg )  && references > 0 )  {^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] maybeAddTempsForCallArguments [RETURN_TYPE] void   Node fnNode Node> argMap String> namesNeedingTemps CodingConvention convention [VARIABLES] Entry  entry  Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffectSeen  Node  block  cArg  fnNode  CodingConvention  convention  String  argName  name  Map  argMap  int  anonArg  loopsEntered  references  type  
[BugLab_Variable_Misuse]^if  ( NodeUtil.mayEffectMutableState ( cArg )  && type > 0 )  {^232^^^^^217^247^if  ( NodeUtil.mayEffectMutableState ( cArg )  && references > 0 )  {^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] maybeAddTempsForCallArguments [RETURN_TYPE] void   Node fnNode Node> argMap String> namesNeedingTemps CodingConvention convention [VARIABLES] Entry  entry  Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffectSeen  Node  block  cArg  fnNode  CodingConvention  convention  String  argName  name  Map  argMap  int  anonArg  loopsEntered  references  type  
[BugLab_Wrong_Operator]^if  ( NodeUtil.mayEffectMutableState ( cArg )  || references > 0 )  {^232^^^^^217^247^if  ( NodeUtil.mayEffectMutableState ( cArg )  && references > 0 )  {^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] maybeAddTempsForCallArguments [RETURN_TYPE] void   Node fnNode Node> argMap String> namesNeedingTemps CodingConvention convention [VARIABLES] Entry  entry  Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffectSeen  Node  block  cArg  fnNode  CodingConvention  convention  String  argName  name  Map  argMap  int  anonArg  loopsEntered  references  type  
[BugLab_Wrong_Operator]^if  ( NodeUtil.mayEffectMutableState ( cArg )  && references >= 0 )  {^232^^^^^217^247^if  ( NodeUtil.mayEffectMutableState ( cArg )  && references > 0 )  {^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] maybeAddTempsForCallArguments [RETURN_TYPE] void   Node fnNode Node> argMap String> namesNeedingTemps CodingConvention convention [VARIABLES] Entry  entry  Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffectSeen  Node  block  cArg  fnNode  CodingConvention  convention  String  argName  name  Map  argMap  int  anonArg  loopsEntered  references  type  
[BugLab_Wrong_Operator]^if  ( NodeUtil.mayEffectMutableState ( cArg )  && references == 0 )  {^232^^^^^217^247^if  ( NodeUtil.mayEffectMutableState ( cArg )  && references > 0 )  {^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] maybeAddTempsForCallArguments [RETURN_TYPE] void   Node fnNode Node> argMap String> namesNeedingTemps CodingConvention convention [VARIABLES] Entry  entry  Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffectSeen  Node  block  cArg  fnNode  CodingConvention  convention  String  argName  name  Map  argMap  int  anonArg  loopsEntered  references  type  
[BugLab_Wrong_Literal]^if  ( NodeUtil.mayEffectMutableState ( cArg )  && references > anonArg )  {^232^^^^^217^247^if  ( NodeUtil.mayEffectMutableState ( cArg )  && references > 0 )  {^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] maybeAddTempsForCallArguments [RETURN_TYPE] void   Node fnNode Node> argMap String> namesNeedingTemps CodingConvention convention [VARIABLES] Entry  entry  Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffectSeen  Node  block  cArg  fnNode  CodingConvention  convention  String  argName  name  Map  argMap  int  anonArg  loopsEntered  references  type  
[BugLab_Variable_Misuse]^} else if  ( NodeUtil.mayHaveSideEffects ( fnNode )  )  {^243^^^^^228^258^} else if  ( NodeUtil.mayHaveSideEffects ( cArg )  )  {^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] maybeAddTempsForCallArguments [RETURN_TYPE] void   Node fnNode Node> argMap String> namesNeedingTemps CodingConvention convention [VARIABLES] Entry  entry  Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffectSeen  Node  block  cArg  fnNode  CodingConvention  convention  String  argName  name  Map  argMap  int  anonArg  loopsEntered  references  type  
[BugLab_Variable_Misuse]^} else if  ( NodeUtil.canBeSideEffected ( fnNode ) && namesAfterSideEffects.contains ( argName )  )  {^247^248^^^^232^262^} else if  ( NodeUtil.canBeSideEffected ( cArg ) && namesAfterSideEffects.contains ( argName )  )  {^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] maybeAddTempsForCallArguments [RETURN_TYPE] void   Node fnNode Node> argMap String> namesNeedingTemps CodingConvention convention [VARIABLES] Entry  entry  Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffectSeen  Node  block  cArg  fnNode  CodingConvention  convention  String  argName  name  Map  argMap  int  anonArg  loopsEntered  references  type  
[BugLab_Variable_Misuse]^} else if  ( NodeUtil.canBeSideEffected ( cArg ) && argNamesAfterSideEffects.contains ( argName )  )  {^247^248^^^^232^262^} else if  ( NodeUtil.canBeSideEffected ( cArg ) && namesAfterSideEffects.contains ( argName )  )  {^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] maybeAddTempsForCallArguments [RETURN_TYPE] void   Node fnNode Node> argMap String> namesNeedingTemps CodingConvention convention [VARIABLES] Entry  entry  Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffectSeen  Node  block  cArg  fnNode  CodingConvention  convention  String  argName  name  Map  argMap  int  anonArg  loopsEntered  references  type  
[BugLab_Argument_Swapping]^} else if  ( NodeUtil.canBeSideEffected ( cArg ) && argNamesAfterSideEffects.contains ( name )  )  {^247^248^^^^232^262^} else if  ( NodeUtil.canBeSideEffected ( cArg ) && namesAfterSideEffects.contains ( argName )  )  {^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] maybeAddTempsForCallArguments [RETURN_TYPE] void   Node fnNode Node> argMap String> namesNeedingTemps CodingConvention convention [VARIABLES] Entry  entry  Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffectSeen  Node  block  cArg  fnNode  CodingConvention  convention  String  argName  name  Map  argMap  int  anonArg  loopsEntered  references  type  
[BugLab_Wrong_Operator]^} else if  ( NodeUtil.canBeSideEffected ( cArg ) || namesAfterSideEffects.contains ( argName )  )  {^247^248^^^^232^262^} else if  ( NodeUtil.canBeSideEffected ( cArg ) && namesAfterSideEffects.contains ( argName )  )  {^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] maybeAddTempsForCallArguments [RETURN_TYPE] void   Node fnNode Node> argMap String> namesNeedingTemps CodingConvention convention [VARIABLES] Entry  entry  Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffectSeen  Node  block  cArg  fnNode  CodingConvention  convention  String  argName  name  Map  argMap  int  anonArg  loopsEntered  references  type  
[BugLab_Variable_Misuse]^} else if  ( type > 1 )  {^250^^^^^235^265^} else if  ( references > 1 )  {^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] maybeAddTempsForCallArguments [RETURN_TYPE] void   Node fnNode Node> argMap String> namesNeedingTemps CodingConvention convention [VARIABLES] Entry  entry  Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffectSeen  Node  block  cArg  fnNode  CodingConvention  convention  String  argName  name  Map  argMap  int  anonArg  loopsEntered  references  type  
[BugLab_Wrong_Operator]^} else if  ( references >= 1 )  {^250^^^^^235^265^} else if  ( references > 1 )  {^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] maybeAddTempsForCallArguments [RETURN_TYPE] void   Node fnNode Node> argMap String> namesNeedingTemps CodingConvention convention [VARIABLES] Entry  entry  Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffectSeen  Node  block  cArg  fnNode  CodingConvention  convention  String  argName  name  Map  argMap  int  anonArg  loopsEntered  references  type  
[BugLab_Wrong_Literal]^} else if  ( references > anonArg )  {^250^^^^^235^265^} else if  ( references > 1 )  {^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] maybeAddTempsForCallArguments [RETURN_TYPE] void   Node fnNode Node> argMap String> namesNeedingTemps CodingConvention convention [VARIABLES] Entry  entry  Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffectSeen  Node  block  cArg  fnNode  CodingConvention  convention  String  argName  name  Map  argMap  int  anonArg  loopsEntered  references  type  
[BugLab_Variable_Misuse]^safe = ! ( convention.isExported ( argName )  ) ;^255^^^^^240^270^safe = ! ( convention.isExported ( name )  ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] maybeAddTempsForCallArguments [RETURN_TYPE] void   Node fnNode Node> argMap String> namesNeedingTemps CodingConvention convention [VARIABLES] Entry  entry  Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffectSeen  Node  block  cArg  fnNode  CodingConvention  convention  String  argName  name  Map  argMap  int  anonArg  loopsEntered  references  type  
[BugLab_Argument_Swapping]^safe = ! ( name.isExported ( convention )  ) ;^255^^^^^240^270^safe = ! ( convention.isExported ( name )  ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] maybeAddTempsForCallArguments [RETURN_TYPE] void   Node fnNode Node> argMap String> namesNeedingTemps CodingConvention convention [VARIABLES] Entry  entry  Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffectSeen  Node  block  cArg  fnNode  CodingConvention  convention  String  argName  name  Map  argMap  int  anonArg  loopsEntered  references  type  
[BugLab_Wrong_Literal]^safe = false;^263^^^^^248^278^safe = true;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] maybeAddTempsForCallArguments [RETURN_TYPE] void   Node fnNode Node> argMap String> namesNeedingTemps CodingConvention convention [VARIABLES] Entry  entry  Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffectSeen  Node  block  cArg  fnNode  CodingConvention  convention  String  argName  name  Map  argMap  int  anonArg  loopsEntered  references  type  
[BugLab_Variable_Misuse]^safe =  ( fnNode.getString (  ) .length (  )  < 2 ) ;^266^^^^^251^281^safe =  ( cArg.getString (  ) .length (  )  < 2 ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] maybeAddTempsForCallArguments [RETURN_TYPE] void   Node fnNode Node> argMap String> namesNeedingTemps CodingConvention convention [VARIABLES] Entry  entry  Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffectSeen  Node  block  cArg  fnNode  CodingConvention  convention  String  argName  name  Map  argMap  int  anonArg  loopsEntered  references  type  
[BugLab_Wrong_Operator]^safe =  ( cArg.getString (  ) .length (  )  > 2 ) ;^266^^^^^251^281^safe =  ( cArg.getString (  ) .length (  )  < 2 ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] maybeAddTempsForCallArguments [RETURN_TYPE] void   Node fnNode Node> argMap String> namesNeedingTemps CodingConvention convention [VARIABLES] Entry  entry  Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffectSeen  Node  block  cArg  fnNode  CodingConvention  convention  String  argName  name  Map  argMap  int  anonArg  loopsEntered  references  type  
[BugLab_Wrong_Literal]^safe =  ( cArg.getString (  ) .length (  )  < 3 ) ;^266^^^^^251^281^safe =  ( cArg.getString (  ) .length (  )  < 2 ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] maybeAddTempsForCallArguments [RETURN_TYPE] void   Node fnNode Node> argMap String> namesNeedingTemps CodingConvention convention [VARIABLES] Entry  entry  Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffectSeen  Node  block  cArg  fnNode  CodingConvention  convention  String  argName  name  Map  argMap  int  anonArg  loopsEntered  references  type  
[BugLab_Wrong_Literal]^safe = true;^269^^^^^254^284^safe = false;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] maybeAddTempsForCallArguments [RETURN_TYPE] void   Node fnNode Node> argMap String> namesNeedingTemps CodingConvention convention [VARIABLES] Entry  entry  Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffectSeen  Node  block  cArg  fnNode  CodingConvention  convention  String  argName  name  Map  argMap  int  anonArg  loopsEntered  references  type  
[BugLab_Variable_Misuse]^String name = fnNode.getString (  ) ;^254^^^^^239^269^String name = cArg.getString (  ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] maybeAddTempsForCallArguments [RETURN_TYPE] void   Node fnNode Node> argMap String> namesNeedingTemps CodingConvention convention [VARIABLES] Entry  entry  Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffectSeen  Node  block  cArg  fnNode  CodingConvention  convention  String  argName  name  Map  argMap  int  anonArg  loopsEntered  references  type  
[BugLab_Wrong_Operator]^safe =  ( cArg.getString (  ) .length (  )  <= 2 ) ;^266^^^^^251^281^safe =  ( cArg.getString (  ) .length (  )  < 2 ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] maybeAddTempsForCallArguments [RETURN_TYPE] void   Node fnNode Node> argMap String> namesNeedingTemps CodingConvention convention [VARIABLES] Entry  entry  Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffectSeen  Node  block  cArg  fnNode  CodingConvention  convention  String  argName  name  Map  argMap  int  anonArg  loopsEntered  references  type  
[BugLab_Variable_Misuse]^switch  ( fnNode.getType (  )  )  {^252^^^^^237^267^switch  ( cArg.getType (  )  )  {^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] maybeAddTempsForCallArguments [RETURN_TYPE] void   Node fnNode Node> argMap String> namesNeedingTemps CodingConvention convention [VARIABLES] Entry  entry  Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffectSeen  Node  block  cArg  fnNode  CodingConvention  convention  String  argName  name  Map  argMap  int  anonArg  loopsEntered  references  type  
[BugLab_Wrong_Literal]^safe = true;^249^^^^^247^272^safe = false;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] maybeAddTempsForCallArguments [RETURN_TYPE] void   Node fnNode Node> argMap String> namesNeedingTemps CodingConvention convention [VARIABLES] Entry  entry  Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffectSeen  Node  block  cArg  fnNode  CodingConvention  convention  String  argName  name  Map  argMap  int  anonArg  loopsEntered  references  type  
[BugLab_Wrong_Literal]^} else if  ( references > 0 )  {^250^^^^^235^265^} else if  ( references > 1 )  {^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] maybeAddTempsForCallArguments [RETURN_TYPE] void   Node fnNode Node> argMap String> namesNeedingTemps CodingConvention convention [VARIABLES] Entry  entry  Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffectSeen  Node  block  cArg  fnNode  CodingConvention  convention  String  argName  name  Map  argMap  int  anonArg  loopsEntered  references  type  
[BugLab_Wrong_Operator]^safe =  ( cArg.getString (  ) .length (  )  == 2 ) ;^266^^^^^251^281^safe =  ( cArg.getString (  ) .length (  )  < 2 ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] maybeAddTempsForCallArguments [RETURN_TYPE] void   Node fnNode Node> argMap String> namesNeedingTemps CodingConvention convention [VARIABLES] Entry  entry  Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffectSeen  Node  block  cArg  fnNode  CodingConvention  convention  String  argName  name  Map  argMap  int  anonArg  loopsEntered  references  type  
[BugLab_Wrong_Literal]^safe = true;^249^^^^^234^264^safe = false;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] maybeAddTempsForCallArguments [RETURN_TYPE] void   Node fnNode Node> argMap String> namesNeedingTemps CodingConvention convention [VARIABLES] Entry  entry  Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffectSeen  Node  block  cArg  fnNode  CodingConvention  convention  String  argName  name  Map  argMap  int  anonArg  loopsEntered  references  type  
[BugLab_Wrong_Literal]^safe =  ( cArg.getString (  ) .length (  )  < loopsEntered ) ;^266^^^^^251^281^safe =  ( cArg.getString (  ) .length (  )  < 2 ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] maybeAddTempsForCallArguments [RETURN_TYPE] void   Node fnNode Node> argMap String> namesNeedingTemps CodingConvention convention [VARIABLES] Entry  entry  Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffectSeen  Node  block  cArg  fnNode  CodingConvention  convention  String  argName  name  Map  argMap  int  anonArg  loopsEntered  references  type  
[BugLab_Variable_Misuse]^&& namesAfterSideEffects.contains ( name )  )  {^248^^^^^233^263^&& namesAfterSideEffects.contains ( argName )  )  {^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] maybeAddTempsForCallArguments [RETURN_TYPE] void   Node fnNode Node> argMap String> namesNeedingTemps CodingConvention convention [VARIABLES] Entry  entry  Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffectSeen  Node  block  cArg  fnNode  CodingConvention  convention  String  argName  name  Map  argMap  int  anonArg  loopsEntered  references  type  
[BugLab_Argument_Swapping]^&& argName.contains ( namesAfterSideEffects )  )  {^248^^^^^233^263^&& namesAfterSideEffects.contains ( argName )  )  {^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] maybeAddTempsForCallArguments [RETURN_TYPE] void   Node fnNode Node> argMap String> namesNeedingTemps CodingConvention convention [VARIABLES] Entry  entry  Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffectSeen  Node  block  cArg  fnNode  CodingConvention  convention  String  argName  name  Map  argMap  int  anonArg  loopsEntered  references  type  
[BugLab_Wrong_Literal]^safe = true;^246^^^^^231^261^safe = false;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] maybeAddTempsForCallArguments [RETURN_TYPE] void   Node fnNode Node> argMap String> namesNeedingTemps CodingConvention convention [VARIABLES] Entry  entry  Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffectSeen  Node  block  cArg  fnNode  CodingConvention  convention  String  argName  name  Map  argMap  int  anonArg  loopsEntered  references  type  
[BugLab_Argument_Swapping]^} else if  ( NodeUtil.canBeSideEffected ( name ) && cArgsAfterSideEffects.contains ( argName )  )  {^247^248^^^^232^262^} else if  ( NodeUtil.canBeSideEffected ( cArg ) && namesAfterSideEffects.contains ( argName )  )  {^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] maybeAddTempsForCallArguments [RETURN_TYPE] void   Node fnNode Node> argMap String> namesNeedingTemps CodingConvention convention [VARIABLES] Entry  entry  Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffectSeen  Node  block  cArg  fnNode  CodingConvention  convention  String  argName  name  Map  argMap  int  anonArg  loopsEntered  references  type  
[BugLab_Argument_Swapping]^} else if  ( NodeUtil.canBeSideEffected ( cArg ) && namesAfterSideEffectssAfterSideEffects.contains ( argName )  )  {^247^248^^^^232^262^} else if  ( NodeUtil.canBeSideEffected ( cArg ) && namesAfterSideEffects.contains ( argName )  )  {^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] maybeAddTempsForCallArguments [RETURN_TYPE] void   Node fnNode Node> argMap String> namesNeedingTemps CodingConvention convention [VARIABLES] Entry  entry  Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffectSeen  Node  block  cArg  fnNode  CodingConvention  convention  String  argName  name  Map  argMap  int  anonArg  loopsEntered  references  type  
[BugLab_Wrong_Operator]^} else if  ( references == 1 )  {^250^^^^^235^265^} else if  ( references > 1 )  {^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] maybeAddTempsForCallArguments [RETURN_TYPE] void   Node fnNode Node> argMap String> namesNeedingTemps CodingConvention convention [VARIABLES] Entry  entry  Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffectSeen  Node  block  cArg  fnNode  CodingConvention  convention  String  argName  name  Map  argMap  int  anonArg  loopsEntered  references  type  
[BugLab_Wrong_Literal]^} else if  ( references > 2 )  {^250^^^^^235^265^} else if  ( references > 1 )  {^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] maybeAddTempsForCallArguments [RETURN_TYPE] void   Node fnNode Node> argMap String> namesNeedingTemps CodingConvention convention [VARIABLES] Entry  entry  Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffectSeen  Node  block  cArg  fnNode  CodingConvention  convention  String  argName  name  Map  argMap  int  anonArg  loopsEntered  references  type  
[BugLab_Wrong_Literal]^safe =  ( cArg.getString (  ) .length (  )  < anonArg ) ;^266^^^^^251^281^safe =  ( cArg.getString (  ) .length (  )  < 2 ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] maybeAddTempsForCallArguments [RETURN_TYPE] void   Node fnNode Node> argMap String> namesNeedingTemps CodingConvention convention [VARIABLES] Entry  entry  Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffectSeen  Node  block  cArg  fnNode  CodingConvention  convention  String  argName  name  Map  argMap  int  anonArg  loopsEntered  references  type  
[BugLab_Wrong_Literal]^safe =  ( cArg.getString (  ) .length (  )  <  ) ;^266^^^^^251^281^safe =  ( cArg.getString (  ) .length (  )  < 2 ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] maybeAddTempsForCallArguments [RETURN_TYPE] void   Node fnNode Node> argMap String> namesNeedingTemps CodingConvention convention [VARIABLES] Entry  entry  Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffectSeen  Node  block  cArg  fnNode  CodingConvention  convention  String  argName  name  Map  argMap  int  anonArg  loopsEntered  references  type  
[BugLab_Wrong_Literal]^} else if  ( references >  )  {^250^^^^^235^265^} else if  ( references > 1 )  {^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] maybeAddTempsForCallArguments [RETURN_TYPE] void   Node fnNode Node> argMap String> namesNeedingTemps CodingConvention convention [VARIABLES] Entry  entry  Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffectSeen  Node  block  cArg  fnNode  CodingConvention  convention  String  argName  name  Map  argMap  int  anonArg  loopsEntered  references  type  
[BugLab_Wrong_Literal]^safe =  ( cArg.getString (  ) .length (  )  < 1 ) ;^266^^^^^251^281^safe =  ( cArg.getString (  ) .length (  )  < 2 ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] maybeAddTempsForCallArguments [RETURN_TYPE] void   Node fnNode Node> argMap String> namesNeedingTemps CodingConvention convention [VARIABLES] Entry  entry  Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffectSeen  Node  block  cArg  fnNode  CodingConvention  convention  String  argName  name  Map  argMap  int  anonArg  loopsEntered  references  type  
[BugLab_Wrong_Literal]^safe = true;^242^^^^^227^257^safe = false;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] maybeAddTempsForCallArguments [RETURN_TYPE] void   Node fnNode Node> argMap String> namesNeedingTemps CodingConvention convention [VARIABLES] Entry  entry  Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffectSeen  Node  block  cArg  fnNode  CodingConvention  convention  String  argName  name  Map  argMap  int  anonArg  loopsEntered  references  type  
[BugLab_Argument_Swapping]^} else if  ( NodeUtil.canBeSideEffected ( namesAfterSideEffects ) && cArg.contains ( argName )  )  {^247^248^^^^232^262^} else if  ( NodeUtil.canBeSideEffected ( cArg ) && namesAfterSideEffects.contains ( argName )  )  {^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] maybeAddTempsForCallArguments [RETURN_TYPE] void   Node fnNode Node> argMap String> namesNeedingTemps CodingConvention convention [VARIABLES] Entry  entry  Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffectSeen  Node  block  cArg  fnNode  CodingConvention  convention  String  argName  name  Map  argMap  int  anonArg  loopsEntered  references  type  
[BugLab_Wrong_Literal]^safe =  ( cArg.getString (  ) .length (  )  < type ) ;^266^^^^^251^281^safe =  ( cArg.getString (  ) .length (  )  < 2 ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] maybeAddTempsForCallArguments [RETURN_TYPE] void   Node fnNode Node> argMap String> namesNeedingTemps CodingConvention convention [VARIABLES] Entry  entry  Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffectSeen  Node  block  cArg  fnNode  CodingConvention  convention  String  argName  name  Map  argMap  int  anonArg  loopsEntered  references  type  
[BugLab_Wrong_Literal]^safe =  ( cArg.getString (  ) .length (  )  < references ) ;^266^^^^^251^281^safe =  ( cArg.getString (  ) .length (  )  < 2 ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] maybeAddTempsForCallArguments [RETURN_TYPE] void   Node fnNode Node> argMap String> namesNeedingTemps CodingConvention convention [VARIABLES] Entry  entry  Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffectSeen  Node  block  cArg  fnNode  CodingConvention  convention  String  argName  name  Map  argMap  int  anonArg  loopsEntered  references  type  
[BugLab_Variable_Misuse]^&& 1.contains ( argName )  )  {^248^^^^^233^263^&& namesAfterSideEffects.contains ( argName )  )  {^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] maybeAddTempsForCallArguments [RETURN_TYPE] void   Node fnNode Node> argMap String> namesNeedingTemps CodingConvention convention [VARIABLES] Entry  entry  Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffectSeen  Node  block  cArg  fnNode  CodingConvention  convention  String  argName  name  Map  argMap  int  anonArg  loopsEntered  references  type  
[BugLab_Wrong_Operator]^} else if  ( references < 1 )  {^250^^^^^235^265^} else if  ( references > 1 )  {^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] maybeAddTempsForCallArguments [RETURN_TYPE] void   Node fnNode Node> argMap String> namesNeedingTemps CodingConvention convention [VARIABLES] Entry  entry  Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffectSeen  Node  block  cArg  fnNode  CodingConvention  convention  String  argName  name  Map  argMap  int  anonArg  loopsEntered  references  type  
[BugLab_Variable_Misuse]^if  ( !sideEffectSeen )  {^274^^^^^259^289^if  ( !safe )  {^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] maybeAddTempsForCallArguments [RETURN_TYPE] void   Node fnNode Node> argMap String> namesNeedingTemps CodingConvention convention [VARIABLES] Entry  entry  Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffectSeen  Node  block  cArg  fnNode  CodingConvention  convention  String  argName  name  Map  argMap  int  anonArg  loopsEntered  references  type  
[BugLab_Variable_Misuse]^namesNeedingTemps.add ( name ) ;^275^^^^^260^290^namesNeedingTemps.add ( argName ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] maybeAddTempsForCallArguments [RETURN_TYPE] void   Node fnNode Node> argMap String> namesNeedingTemps CodingConvention convention [VARIABLES] Entry  entry  Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffectSeen  Node  block  cArg  fnNode  CodingConvention  convention  String  argName  name  Map  argMap  int  anonArg  loopsEntered  references  type  
[BugLab_Wrong_Literal]^boolean safe = false;^229^^^^^214^244^boolean safe = true;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] maybeAddTempsForCallArguments [RETURN_TYPE] void   Node fnNode Node> argMap String> namesNeedingTemps CodingConvention convention [VARIABLES] Entry  entry  Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffectSeen  Node  block  cArg  fnNode  CodingConvention  convention  String  argName  name  Map  argMap  int  anonArg  loopsEntered  references  type  
[BugLab_Variable_Misuse]^int references = NodeUtil.getNameReferenceCount ( fnNode, argName ) ;^230^^^^^215^245^int references = NodeUtil.getNameReferenceCount ( block, argName ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] maybeAddTempsForCallArguments [RETURN_TYPE] void   Node fnNode Node> argMap String> namesNeedingTemps CodingConvention convention [VARIABLES] Entry  entry  Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffectSeen  Node  block  cArg  fnNode  CodingConvention  convention  String  argName  name  Map  argMap  int  anonArg  loopsEntered  references  type  
[BugLab_Argument_Swapping]^int references = NodeUtil.getNameReferenceCount ( argName, block ) ;^230^^^^^215^245^int references = NodeUtil.getNameReferenceCount ( block, argName ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] maybeAddTempsForCallArguments [RETURN_TYPE] void   Node fnNode Node> argMap String> namesNeedingTemps CodingConvention convention [VARIABLES] Entry  entry  Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffectSeen  Node  block  cArg  fnNode  CodingConvention  convention  String  argName  name  Map  argMap  int  anonArg  loopsEntered  references  type  
[BugLab_Argument_Swapping]^gatherLocalNames ( locals, root ) ;^294^^^^^289^303^gatherLocalNames ( root, locals ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] findParametersReferencedAfterSideEffect [RETURN_TYPE] Set   String> parameters Node root [VARIABLES] ReferencedAfterSideEffect  collector  Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffectSeen  int  anonArg  loopsEntered  references  type  Node  root  
[BugLab_Argument_Swapping]^ReferencedAfterSideEffect collector = new ReferencedAfterSideEffect ( locals, parameters ) ;^296^297^^^^289^303^ReferencedAfterSideEffect collector = new ReferencedAfterSideEffect ( parameters, locals ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] findParametersReferencedAfterSideEffect [RETURN_TYPE] Set   String> parameters Node root [VARIABLES] ReferencedAfterSideEffect  collector  Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffectSeen  int  anonArg  loopsEntered  references  type  Node  root  
[BugLab_Variable_Misuse]^ReferencedAfterSideEffect collector = new ReferencedAfterSideEffect ( null, locals ) ;^296^297^^^^289^303^ReferencedAfterSideEffect collector = new ReferencedAfterSideEffect ( parameters, locals ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] findParametersReferencedAfterSideEffect [RETURN_TYPE] Set   String> parameters Node root [VARIABLES] ReferencedAfterSideEffect  collector  Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffectSeen  int  anonArg  loopsEntered  references  type  Node  root  
[BugLab_Argument_Swapping]^NodeUtil.visitPostOrder ( collector, root, collector ) ;^298^299^300^301^^289^303^NodeUtil.visitPostOrder ( root, collector, collector ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] findParametersReferencedAfterSideEffect [RETURN_TYPE] Set   String> parameters Node root [VARIABLES] ReferencedAfterSideEffect  collector  Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffectSeen  int  anonArg  loopsEntered  references  type  Node  root  
[BugLab_Variable_Misuse]^return ! ( sideEffectSeen && parameters.size (  )  == this.size (  )  ) ;^351^352^^^^343^353^return ! ( sideEffectSeen && parameters.size (  )  == parametersReferenced.size (  )  ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] apply [RETURN_TYPE] boolean   Node node [VARIABLES] Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffectSeen  int  anonArg  loopsEntered  references  type  Node  node  
[BugLab_Argument_Swapping]^return ! ( parameters && sideEffectSeen.size (  )  == parametersReferenced.size (  )  ) ;^351^352^^^^343^353^return ! ( sideEffectSeen && parameters.size (  )  == parametersReferenced.size (  )  ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] apply [RETURN_TYPE] boolean   Node node [VARIABLES] Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffectSeen  int  anonArg  loopsEntered  references  type  Node  node  
[BugLab_Argument_Swapping]^return ! ( sideEffectSeen && parametersReferenced.size (  )  == parameters.size (  )  ) ;^351^352^^^^343^353^return ! ( sideEffectSeen && parameters.size (  )  == parametersReferenced.size (  )  ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] apply [RETURN_TYPE] boolean   Node node [VARIABLES] Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffectSeen  int  anonArg  loopsEntered  references  type  Node  node  
[BugLab_Wrong_Operator]^return ! ( sideEffectSeen || parameters.size (  )  == parametersReferenced.size (  )  ) ;^351^352^^^^343^353^return ! ( sideEffectSeen && parameters.size (  )  == parametersReferenced.size (  )  ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] apply [RETURN_TYPE] boolean   Node node [VARIABLES] Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffectSeen  int  anonArg  loopsEntered  references  type  Node  node  
[BugLab_Wrong_Operator]^return ! ( sideEffectSeen && parameters.size (  )  != parametersReferenced.size (  )  ) ;^351^352^^^^343^353^return ! ( sideEffectSeen && parameters.size (  )  == parametersReferenced.size (  )  ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] apply [RETURN_TYPE] boolean   Node node [VARIABLES] Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffectSeen  int  anonArg  loopsEntered  references  type  Node  node  
[BugLab_Variable_Misuse]^return type != 0;^356^^^^^355^357^return loopsEntered != 0;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] inLoop [RETURN_TYPE] boolean   [VARIABLES] Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffectSeen  int  anonArg  loopsEntered  references  type  
[BugLab_Wrong_Operator]^return loopsEntered == 0;^356^^^^^355^357^return loopsEntered != 0;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] inLoop [RETURN_TYPE] boolean   [VARIABLES] Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffectSeen  int  anonArg  loopsEntered  references  type  
[BugLab_Wrong_Literal]^return loopsEntered != loopsEntered;^356^^^^^355^357^return loopsEntered != 0;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] inLoop [RETURN_TYPE] boolean   [VARIABLES] Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffectSeen  int  anonArg  loopsEntered  references  type  
[BugLab_Variable_Misuse]^if  ( !inLoop (  )  && !safe )  {^363^^^^^359^389^if  ( !inLoop (  )  && !sideEffectSeen )  {^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] visit [RETURN_TYPE] void   Node n [VARIABLES] Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffectSeen  String  name  int  anonArg  loopsEntered  references  type  Node  n  
[BugLab_Wrong_Operator]^if  ( !inLoop (  )  || !sideEffectSeen )  {^363^^^^^359^389^if  ( !inLoop (  )  && !sideEffectSeen )  {^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] visit [RETURN_TYPE] void   Node n [VARIABLES] Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffectSeen  String  name  int  anonArg  loopsEntered  references  type  Node  n  
[BugLab_Variable_Misuse]^if  ( !safe )  {^371^^^^^359^389^if  ( !sideEffectSeen )  {^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] visit [RETURN_TYPE] void   Node n [VARIABLES] Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffectSeen  String  name  int  anonArg  loopsEntered  references  type  Node  n  
[BugLab_Wrong_Literal]^sideEffectSeen = false;^374^^^^^359^389^sideEffectSeen = true;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] visit [RETURN_TYPE] void   Node n [VARIABLES] Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffectSeen  String  name  int  anonArg  loopsEntered  references  type  Node  n  
[BugLab_Variable_Misuse]^if  ( inLoop (  )  || safe )  {^380^^^^^359^389^if  ( inLoop (  )  || sideEffectSeen )  {^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] visit [RETURN_TYPE] void   Node n [VARIABLES] Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffectSeen  String  name  int  anonArg  loopsEntered  references  type  Node  n  
[BugLab_Wrong_Operator]^if  ( inLoop (  )  && sideEffectSeen )  {^380^^^^^359^389^if  ( inLoop (  )  || sideEffectSeen )  {^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] visit [RETURN_TYPE] void   Node n [VARIABLES] Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffectSeen  String  name  int  anonArg  loopsEntered  references  type  Node  n  
[BugLab_Wrong_Operator]^if  ( n.getType (  )  != Token.NAME )  {^382^^^^^359^389^if  ( n.getType (  )  == Token.NAME )  {^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] visit [RETURN_TYPE] void   Node n [VARIABLES] Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffectSeen  String  name  int  anonArg  loopsEntered  references  type  Node  n  
[BugLab_Argument_Swapping]^if  ( name.contains ( parameters )  )  {^384^^^^^359^389^if  ( parameters.contains ( name )  )  {^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] visit [RETURN_TYPE] void   Node n [VARIABLES] Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffectSeen  String  name  int  anonArg  loopsEntered  references  type  Node  n  
[BugLab_Variable_Misuse]^if  ( 0.contains ( name )  )  {^384^^^^^359^389^if  ( parameters.contains ( name )  )  {^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] visit [RETURN_TYPE] void   Node n [VARIABLES] Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffectSeen  String  name  int  anonArg  loopsEntered  references  type  Node  n  
[BugLab_Variable_Misuse]^if  ( 1.contains ( name )  )  {^384^^^^^359^389^if  ( parameters.contains ( name )  )  {^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] visit [RETURN_TYPE] void   Node n [VARIABLES] Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffectSeen  String  name  int  anonArg  loopsEntered  references  type  Node  n  
[BugLab_Wrong_Literal]^boolean sideEffect = true;^395^^^^^394^416^boolean sideEffect = false;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] hasNonLocalSideEffect [RETURN_TYPE] boolean   Node n [VARIABLES] Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffect  sideEffectSeen  int  anonArg  loopsEntered  references  type  Node  lhs  n  
[BugLab_Variable_Misuse]^int type = lhs.getType (  ) ;^396^^^^^394^416^int type = n.getType (  ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] hasNonLocalSideEffect [RETURN_TYPE] boolean   Node n [VARIABLES] Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffect  sideEffectSeen  int  anonArg  loopsEntered  references  type  Node  lhs  n  
[BugLab_Variable_Misuse]^if  ( NodeUtil.isAssignmentOp ( n ) || references == Token.INC || type == Token.DEC )  {^399^400^401^^^394^416^if  ( NodeUtil.isAssignmentOp ( n ) || type == Token.INC || type == Token.DEC )  {^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] hasNonLocalSideEffect [RETURN_TYPE] boolean   Node n [VARIABLES] Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffect  sideEffectSeen  int  anonArg  loopsEntered  references  type  Node  lhs  n  
[BugLab_Wrong_Operator]^if  ( NodeUtil.isAssignmentOp ( n ) && type == Token.INC || type == Token.DEC )  {^399^400^401^^^394^416^if  ( NodeUtil.isAssignmentOp ( n ) || type == Token.INC || type == Token.DEC )  {^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] hasNonLocalSideEffect [RETURN_TYPE] boolean   Node n [VARIABLES] Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffect  sideEffectSeen  int  anonArg  loopsEntered  references  type  Node  lhs  n  
[BugLab_Wrong_Operator]^if  ( NodeUtil.isAssignmentOp ( n ) || type >= Token.INC || type == Token.DEC )  {^399^400^401^^^394^416^if  ( NodeUtil.isAssignmentOp ( n ) || type == Token.INC || type == Token.DEC )  {^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] hasNonLocalSideEffect [RETURN_TYPE] boolean   Node n [VARIABLES] Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffect  sideEffectSeen  int  anonArg  loopsEntered  references  type  Node  lhs  n  
[BugLab_Wrong_Operator]^if  ( NodeUtil.isAssignmentOp ( n ) || type != Token.INC || type == Token.DEC )  {^399^400^401^^^394^416^if  ( NodeUtil.isAssignmentOp ( n ) || type == Token.INC || type == Token.DEC )  {^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] hasNonLocalSideEffect [RETURN_TYPE] boolean   Node n [VARIABLES] Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffect  sideEffectSeen  int  anonArg  loopsEntered  references  type  Node  lhs  n  
[BugLab_Wrong_Operator]^if  ( NodeUtil.isAssignmentOp ( n ) || type <= Token.INC || type == Token.DEC )  {^399^400^401^^^394^416^if  ( NodeUtil.isAssignmentOp ( n ) || type == Token.INC || type == Token.DEC )  {^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] hasNonLocalSideEffect [RETURN_TYPE] boolean   Node n [VARIABLES] Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffect  sideEffectSeen  int  anonArg  loopsEntered  references  type  Node  lhs  n  
[BugLab_Variable_Misuse]^} else if  ( references == Token.CALL )  {^407^^^^^394^416^} else if  ( type == Token.CALL )  {^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] hasNonLocalSideEffect [RETURN_TYPE] boolean   Node n [VARIABLES] Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffect  sideEffectSeen  int  anonArg  loopsEntered  references  type  Node  lhs  n  
[BugLab_Wrong_Operator]^} else if  ( type < Token.CALL )  {^407^^^^^394^416^} else if  ( type == Token.CALL )  {^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] hasNonLocalSideEffect [RETURN_TYPE] boolean   Node n [VARIABLES] Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffect  sideEffectSeen  int  anonArg  loopsEntered  references  type  Node  lhs  n  
[BugLab_Wrong_Operator]^} else if  ( type >= Token.CALL )  {^407^^^^^394^416^} else if  ( type == Token.CALL )  {^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] hasNonLocalSideEffect [RETURN_TYPE] boolean   Node n [VARIABLES] Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffect  sideEffectSeen  int  anonArg  loopsEntered  references  type  Node  lhs  n  
[BugLab_Wrong_Operator]^} else if  ( type != Token.CALL )  {^407^^^^^394^416^} else if  ( type == Token.CALL )  {^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] hasNonLocalSideEffect [RETURN_TYPE] boolean   Node n [VARIABLES] Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffect  sideEffectSeen  int  anonArg  loopsEntered  references  type  Node  lhs  n  
[BugLab_Variable_Misuse]^} else if  ( references == Token.NEW )  {^409^^^^^394^416^} else if  ( type == Token.NEW )  {^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] hasNonLocalSideEffect [RETURN_TYPE] boolean   Node n [VARIABLES] Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffect  sideEffectSeen  int  anonArg  loopsEntered  references  type  Node  lhs  n  
[BugLab_Wrong_Operator]^} else if  ( type >= Token.NEW )  {^409^^^^^394^416^} else if  ( type == Token.NEW )  {^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] hasNonLocalSideEffect [RETURN_TYPE] boolean   Node n [VARIABLES] Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffect  sideEffectSeen  int  anonArg  loopsEntered  references  type  Node  lhs  n  
[BugLab_Wrong_Operator]^} else if  ( type != Token.NEW )  {^409^^^^^394^416^} else if  ( type == Token.NEW )  {^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] hasNonLocalSideEffect [RETURN_TYPE] boolean   Node n [VARIABLES] Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffect  sideEffectSeen  int  anonArg  loopsEntered  references  type  Node  lhs  n  
[BugLab_Variable_Misuse]^} else if  ( references == Token.DELPROP )  {^411^^^^^394^416^} else if  ( type == Token.DELPROP )  {^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] hasNonLocalSideEffect [RETURN_TYPE] boolean   Node n [VARIABLES] Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffect  sideEffectSeen  int  anonArg  loopsEntered  references  type  Node  lhs  n  
[BugLab_Wrong_Operator]^} else if  ( type != Token.DELPROP )  {^411^^^^^394^416^} else if  ( type == Token.DELPROP )  {^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] hasNonLocalSideEffect [RETURN_TYPE] boolean   Node n [VARIABLES] Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffect  sideEffectSeen  int  anonArg  loopsEntered  references  type  Node  lhs  n  
[BugLab_Wrong_Literal]^sideEffect = false;^412^^^^^394^416^sideEffect = true;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] hasNonLocalSideEffect [RETURN_TYPE] boolean   Node n [VARIABLES] Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffect  sideEffectSeen  int  anonArg  loopsEntered  references  type  Node  lhs  n  
[BugLab_Variable_Misuse]^sideEffect = NodeUtil.constructorCallHasSideEffects ( lhs ) ;^410^^^^^394^416^sideEffect = NodeUtil.constructorCallHasSideEffects ( n ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] hasNonLocalSideEffect [RETURN_TYPE] boolean   Node n [VARIABLES] Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffect  sideEffectSeen  int  anonArg  loopsEntered  references  type  Node  lhs  n  
[BugLab_Wrong_Operator]^} else if  ( type >= Token.DELPROP )  {^411^^^^^394^416^} else if  ( type == Token.DELPROP )  {^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] hasNonLocalSideEffect [RETURN_TYPE] boolean   Node n [VARIABLES] Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffect  sideEffectSeen  int  anonArg  loopsEntered  references  type  Node  lhs  n  
[BugLab_Variable_Misuse]^sideEffect = NodeUtil.functionCallHasSideEffects ( lhs ) ;^408^^^^^394^416^sideEffect = NodeUtil.functionCallHasSideEffects ( n ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] hasNonLocalSideEffect [RETURN_TYPE] boolean   Node n [VARIABLES] Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffect  sideEffectSeen  int  anonArg  loopsEntered  references  type  Node  lhs  n  
[BugLab_Wrong_Operator]^} else if  ( type < Token.NEW )  {^409^^^^^394^416^} else if  ( type == Token.NEW )  {^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] hasNonLocalSideEffect [RETURN_TYPE] boolean   Node n [VARIABLES] Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffect  sideEffectSeen  int  anonArg  loopsEntered  references  type  Node  lhs  n  
[BugLab_Variable_Misuse]^if  ( !isLocalName ( n )  )  {^404^^^^^394^416^if  ( !isLocalName ( lhs )  )  {^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] hasNonLocalSideEffect [RETURN_TYPE] boolean   Node n [VARIABLES] Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffect  sideEffectSeen  int  anonArg  loopsEntered  references  type  Node  lhs  n  
[BugLab_Wrong_Literal]^sideEffect = false;^405^^^^^394^416^sideEffect = true;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] hasNonLocalSideEffect [RETURN_TYPE] boolean   Node n [VARIABLES] Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffect  sideEffectSeen  int  anonArg  loopsEntered  references  type  Node  lhs  n  
[BugLab_Variable_Misuse]^Node lhs = lhs.getFirstChild (  ) ;^402^^^^^394^416^Node lhs = n.getFirstChild (  ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] hasNonLocalSideEffect [RETURN_TYPE] boolean   Node n [VARIABLES] Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffect  sideEffectSeen  int  anonArg  loopsEntered  references  type  Node  lhs  n  
[BugLab_Wrong_Operator]^} else if  ( type <= Token.CALL )  {^407^^^^^394^416^} else if  ( type == Token.CALL )  {^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] hasNonLocalSideEffect [RETURN_TYPE] boolean   Node n [VARIABLES] Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffect  sideEffectSeen  int  anonArg  loopsEntered  references  type  Node  lhs  n  
[BugLab_Wrong_Operator]^} else if  ( type <= Token.NEW )  {^409^^^^^394^416^} else if  ( type == Token.NEW )  {^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] hasNonLocalSideEffect [RETURN_TYPE] boolean   Node n [VARIABLES] Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffect  sideEffectSeen  int  anonArg  loopsEntered  references  type  Node  lhs  n  
[BugLab_Wrong_Operator]^} else if  ( type > Token.DELPROP )  {^411^^^^^394^416^} else if  ( type == Token.DELPROP )  {^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] hasNonLocalSideEffect [RETURN_TYPE] boolean   Node n [VARIABLES] Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffect  sideEffectSeen  int  anonArg  loopsEntered  references  type  Node  lhs  n  
[BugLab_Wrong_Operator]^} else if  ( type > Token.NEW )  {^409^^^^^394^416^} else if  ( type == Token.NEW )  {^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] hasNonLocalSideEffect [RETURN_TYPE] boolean   Node n [VARIABLES] Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffect  sideEffectSeen  int  anonArg  loopsEntered  references  type  Node  lhs  n  
[BugLab_Wrong_Operator]^} else if  ( type <= Token.DELPROP )  {^411^^^^^394^416^} else if  ( type == Token.DELPROP )  {^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] hasNonLocalSideEffect [RETURN_TYPE] boolean   Node n [VARIABLES] Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffect  sideEffectSeen  int  anonArg  loopsEntered  references  type  Node  lhs  n  
[BugLab_Variable_Misuse]^if  ( NodeUtil.isAssignmentOp ( lhs ) || type == Token.INC || type == Token.DEC )  {^399^400^401^^^394^416^if  ( NodeUtil.isAssignmentOp ( n ) || type == Token.INC || type == Token.DEC )  {^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] hasNonLocalSideEffect [RETURN_TYPE] boolean   Node n [VARIABLES] Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffect  sideEffectSeen  int  anonArg  loopsEntered  references  type  Node  lhs  n  
[BugLab_Variable_Misuse]^return sideEffectSeen;^415^^^^^394^416^return sideEffect;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] hasNonLocalSideEffect [RETURN_TYPE] boolean   Node n [VARIABLES] Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffect  sideEffectSeen  int  anonArg  loopsEntered  references  type  Node  lhs  n  
[BugLab_Argument_Swapping]^return name.contains ( locals ) ;^424^^^^^421^427^return locals.contains ( name ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] isLocalName [RETURN_TYPE] boolean   Node node [VARIABLES] Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffect  sideEffectSeen  String  name  int  anonArg  loopsEntered  references  type  Node  node  
[BugLab_Variable_Misuse]^return 0.contains ( name ) ;^424^^^^^421^427^return locals.contains ( name ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] isLocalName [RETURN_TYPE] boolean   Node node [VARIABLES] Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffect  sideEffectSeen  String  name  int  anonArg  loopsEntered  references  type  Node  node  
[BugLab_Wrong_Literal]^return true;^426^^^^^421^427^return false;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] isLocalName [RETURN_TYPE] boolean   Node node [VARIABLES] Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffect  sideEffectSeen  String  name  int  anonArg  loopsEntered  references  type  Node  node  
[BugLab_Variable_Misuse]^Preconditions.checkState ( c.getType (  )  != Token.FUNCTION ) ;^434^^^^^433^446^Preconditions.checkState ( n.getType (  )  != Token.FUNCTION ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] gatherLocalNames [RETURN_TYPE] void   Node n String> names [VARIABLES] Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffect  sideEffectSeen  int  anonArg  loopsEntered  references  type  Node  c  n  
[BugLab_Wrong_Operator]^Preconditions.checkState ( n.getType (  )  == Token.FUNCTION ) ;^434^^^^^433^446^Preconditions.checkState ( n.getType (  )  != Token.FUNCTION ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] gatherLocalNames [RETURN_TYPE] void   Node n String> names [VARIABLES] Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffect  sideEffectSeen  int  anonArg  loopsEntered  references  type  Node  c  n  
[BugLab_Variable_Misuse]^if  ( c.getType (  )  == Token.NAME )  {^435^^^^^433^446^if  ( n.getType (  )  == Token.NAME )  {^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] gatherLocalNames [RETURN_TYPE] void   Node n String> names [VARIABLES] Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffect  sideEffectSeen  int  anonArg  loopsEntered  references  type  Node  c  n  
[BugLab_Variable_Misuse]^if  ( n.getType (  )  == Token.this )  {^435^^^^^433^446^if  ( n.getType (  )  == Token.NAME )  {^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] gatherLocalNames [RETURN_TYPE] void   Node n String> names [VARIABLES] Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffect  sideEffectSeen  int  anonArg  loopsEntered  references  type  Node  c  n  
[BugLab_Wrong_Operator]^if  ( n.getType (  )  >= Token.NAME )  {^435^^^^^433^446^if  ( n.getType (  )  == Token.NAME )  {^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] gatherLocalNames [RETURN_TYPE] void   Node n String> names [VARIABLES] Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffect  sideEffectSeen  int  anonArg  loopsEntered  references  type  Node  c  n  
[BugLab_Variable_Misuse]^switch  ( c.getParent (  ) .getType (  )  )  {^436^^^^^433^446^switch  ( n.getParent (  ) .getType (  )  )  {^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] gatherLocalNames [RETURN_TYPE] void   Node n String> names [VARIABLES] Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffect  sideEffectSeen  int  anonArg  loopsEntered  references  type  Node  c  n  
[BugLab_Variable_Misuse]^names.add ( c.getString (  )  ) ;^439^^^^^433^446^names.add ( n.getString (  )  ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] gatherLocalNames [RETURN_TYPE] void   Node n String> names [VARIABLES] Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffect  sideEffectSeen  int  anonArg  loopsEntered  references  type  Node  c  n  
[BugLab_Variable_Misuse]^for  ( Node n = n.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  {^443^^^^^433^446^for  ( Node c = n.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  {^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] gatherLocalNames [RETURN_TYPE] void   Node n String> names [VARIABLES] Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffect  sideEffectSeen  int  anonArg  loopsEntered  references  type  Node  c  n  
[BugLab_Argument_Swapping]^for  ( Node n = c.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  {^443^^^^^433^446^for  ( Node c = n.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  {^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] gatherLocalNames [RETURN_TYPE] void   Node n String> names [VARIABLES] Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffect  sideEffectSeen  int  anonArg  loopsEntered  references  type  Node  c  n  
[BugLab_Wrong_Operator]^for  ( Node c = n.getFirstChild (  ) ; c == null; c = c.getNext (  )  )  {^443^^^^^433^446^for  ( Node c = n.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  {^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] gatherLocalNames [RETURN_TYPE] void   Node n String> names [VARIABLES] Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffect  sideEffectSeen  int  anonArg  loopsEntered  references  type  Node  c  n  
[BugLab_Variable_Misuse]^gatherLocalNames ( n, names ) ;^444^^^^^433^446^gatherLocalNames ( c, names ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] gatherLocalNames [RETURN_TYPE] void   Node n String> names [VARIABLES] Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffect  sideEffectSeen  int  anonArg  loopsEntered  references  type  Node  c  n  
[BugLab_Argument_Swapping]^gatherLocalNames ( names, c ) ;^444^^^^^433^446^gatherLocalNames ( c, names ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] gatherLocalNames [RETURN_TYPE] void   Node n String> names [VARIABLES] Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffect  sideEffectSeen  int  anonArg  loopsEntered  references  type  Node  c  n  
[BugLab_Variable_Misuse]^for  ( Node c = c.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  {^443^^^^^433^446^for  ( Node c = n.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  {^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] gatherLocalNames [RETURN_TYPE] void   Node n String> names [VARIABLES] Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffect  sideEffectSeen  int  anonArg  loopsEntered  references  type  Node  c  n  
[BugLab_Variable_Misuse]^for  ( Node n : NodeUtil.getFnParameters ( n ) .children (  )  )  {^453^^^^^451^457^for  ( Node n : NodeUtil.getFnParameters ( fnNode ) .children (  )  )  {^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] getFunctionParameterSet [RETURN_TYPE] Set   Node fnNode [VARIABLES] Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  set  unsafe  unsafeNames  boolean  safe  sideEffect  sideEffectSeen  int  anonArg  loopsEntered  references  type  Node  fnNode  n  
[BugLab_Variable_Misuse]^set.add ( fnNode.getString (  )  ) ;^454^^^^^451^457^set.add ( n.getString (  )  ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] getFunctionParameterSet [RETURN_TYPE] Set   Node fnNode [VARIABLES] Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  set  unsafe  unsafeNames  boolean  safe  sideEffect  sideEffectSeen  int  anonArg  loopsEntered  references  type  Node  fnNode  n  
[BugLab_Wrong_Literal]^private boolean sideEffectSeen = true;^329^^^^^324^334^private boolean sideEffectSeen = false;^[CLASS] ReferencedAfterSideEffect  [METHOD] getFunctionParameterSet [RETURN_TYPE] Set   Node fnNode [VARIABLES] Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  set  unsafe  unsafeNames  boolean  safe  sideEffect  sideEffectSeen  int  anonArg  loopsEntered  references  type  Node  fnNode  n  
[BugLab_Wrong_Literal]^private int loopsEntered = -1;^331^^^^^326^336^private int loopsEntered = 0;^[CLASS] ReferencedAfterSideEffect  [METHOD] getFunctionParameterSet [RETURN_TYPE] Set   Node fnNode [VARIABLES] Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  set  unsafe  unsafeNames  boolean  safe  sideEffect  sideEffectSeen  int  anonArg  loopsEntered  references  type  Node  fnNode  n  
[BugLab_Variable_Misuse]^this.parameters = 2;^334^^^^^333^336^this.parameters = parameters;^[CLASS] ReferencedAfterSideEffect  [METHOD] <init> [RETURN_TYPE] Set)   String> parameters String> locals [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffectSeen  int  loopsEntered  
[BugLab_Argument_Swapping]^return ! ( parameters && sideEffectSeen.size (  )  == parametersReferenced.size (  )  ) ;^351^352^^^^343^353^return ! ( sideEffectSeen && parameters.size (  )  == parametersReferenced.size (  )  ) ;^[CLASS] ReferencedAfterSideEffect  [METHOD] apply [RETURN_TYPE] boolean   Node node [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffectSeen  int  loopsEntered  Node  node  
[BugLab_Argument_Swapping]^return ! ( sideEffectSeen && parametersReferenced.size (  )  == parameters.size (  )  ) ;^351^352^^^^343^353^return ! ( sideEffectSeen && parameters.size (  )  == parametersReferenced.size (  )  ) ;^[CLASS] ReferencedAfterSideEffect  [METHOD] apply [RETURN_TYPE] boolean   Node node [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffectSeen  int  loopsEntered  Node  node  
[BugLab_Wrong_Operator]^return ! ( sideEffectSeen || parameters.size (  )  == parametersReferenced.size (  )  ) ;^351^352^^^^343^353^return ! ( sideEffectSeen && parameters.size (  )  == parametersReferenced.size (  )  ) ;^[CLASS] ReferencedAfterSideEffect  [METHOD] apply [RETURN_TYPE] boolean   Node node [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffectSeen  int  loopsEntered  Node  node  
[BugLab_Wrong_Operator]^return ! ( sideEffectSeen && parameters.size (  )  <= parametersReferenced.size (  )  ) ;^351^352^^^^343^353^return ! ( sideEffectSeen && parameters.size (  )  == parametersReferenced.size (  )  ) ;^[CLASS] ReferencedAfterSideEffect  [METHOD] apply [RETURN_TYPE] boolean   Node node [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffectSeen  int  loopsEntered  Node  node  
[BugLab_Wrong_Operator]^return loopsEntered == 0;^356^^^^^355^357^return loopsEntered != 0;^[CLASS] ReferencedAfterSideEffect  [METHOD] inLoop [RETURN_TYPE] boolean   [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffectSeen  int  loopsEntered  
[BugLab_Wrong_Literal]^return loopsEntered != loopsEntered;^356^^^^^355^357^return loopsEntered != 0;^[CLASS] ReferencedAfterSideEffect  [METHOD] inLoop [RETURN_TYPE] boolean   [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffectSeen  int  loopsEntered  
[BugLab_Wrong_Operator]^if  ( !inLoop (  )  || !sideEffectSeen )  {^363^^^^^359^389^if  ( !inLoop (  )  && !sideEffectSeen )  {^[CLASS] ReferencedAfterSideEffect  [METHOD] visit [RETURN_TYPE] void   Node n [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffectSeen  String  name  int  loopsEntered  Node  n  
[BugLab_Wrong_Literal]^sideEffectSeen = false;^374^^^^^359^389^sideEffectSeen = true;^[CLASS] ReferencedAfterSideEffect  [METHOD] visit [RETURN_TYPE] void   Node n [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffectSeen  String  name  int  loopsEntered  Node  n  
[BugLab_Wrong_Operator]^if  ( inLoop (  )  && sideEffectSeen )  {^380^^^^^359^389^if  ( inLoop (  )  || sideEffectSeen )  {^[CLASS] ReferencedAfterSideEffect  [METHOD] visit [RETURN_TYPE] void   Node n [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffectSeen  String  name  int  loopsEntered  Node  n  
[BugLab_Wrong_Operator]^if  ( n.getType (  )  != Token.NAME )  {^382^^^^^359^389^if  ( n.getType (  )  == Token.NAME )  {^[CLASS] ReferencedAfterSideEffect  [METHOD] visit [RETURN_TYPE] void   Node n [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffectSeen  String  name  int  loopsEntered  Node  n  
[BugLab_Argument_Swapping]^if  ( name.contains ( parameters )  )  {^384^^^^^359^389^if  ( parameters.contains ( name )  )  {^[CLASS] ReferencedAfterSideEffect  [METHOD] visit [RETURN_TYPE] void   Node n [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffectSeen  String  name  int  loopsEntered  Node  n  
[BugLab_Variable_Misuse]^if  ( this.contains ( name )  )  {^384^^^^^359^389^if  ( parameters.contains ( name )  )  {^[CLASS] ReferencedAfterSideEffect  [METHOD] visit [RETURN_TYPE] void   Node n [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffectSeen  String  name  int  loopsEntered  Node  n  
[BugLab_Wrong_Literal]^boolean sideEffect = true;^395^^^^^394^416^boolean sideEffect = false;^[CLASS] ReferencedAfterSideEffect  [METHOD] hasNonLocalSideEffect [RETURN_TYPE] boolean   Node n [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffect  sideEffectSeen  int  loopsEntered  type  Node  lhs  n  
[BugLab_Variable_Misuse]^int type = lhs.getType (  ) ;^396^^^^^394^416^int type = n.getType (  ) ;^[CLASS] ReferencedAfterSideEffect  [METHOD] hasNonLocalSideEffect [RETURN_TYPE] boolean   Node n [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffect  sideEffectSeen  int  loopsEntered  type  Node  lhs  n  
[BugLab_Variable_Misuse]^if  ( NodeUtil.isAssignmentOp ( n ) || loopsEntered == Token.INC || type == Token.DEC )  {^399^400^401^^^394^416^if  ( NodeUtil.isAssignmentOp ( n ) || type == Token.INC || type == Token.DEC )  {^[CLASS] ReferencedAfterSideEffect  [METHOD] hasNonLocalSideEffect [RETURN_TYPE] boolean   Node n [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffect  sideEffectSeen  int  loopsEntered  type  Node  lhs  n  
[BugLab_Variable_Misuse]^if  ( NodeUtil.isAssignmentOp ( n ) || type == Token.0 || type == Token.DEC )  {^399^400^401^^^394^416^if  ( NodeUtil.isAssignmentOp ( n ) || type == Token.INC || type == Token.DEC )  {^[CLASS] ReferencedAfterSideEffect  [METHOD] hasNonLocalSideEffect [RETURN_TYPE] boolean   Node n [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffect  sideEffectSeen  int  loopsEntered  type  Node  lhs  n  
[BugLab_Wrong_Operator]^if  ( NodeUtil.isAssignmentOp ( n ) && type == Token.INC || type == Token.DEC )  {^399^400^401^^^394^416^if  ( NodeUtil.isAssignmentOp ( n ) || type == Token.INC || type == Token.DEC )  {^[CLASS] ReferencedAfterSideEffect  [METHOD] hasNonLocalSideEffect [RETURN_TYPE] boolean   Node n [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffect  sideEffectSeen  int  loopsEntered  type  Node  lhs  n  
[BugLab_Wrong_Operator]^if  ( NodeUtil.isAssignmentOp ( n ) || type <= Token.INC || type == Token.DEC )  {^399^400^401^^^394^416^if  ( NodeUtil.isAssignmentOp ( n ) || type == Token.INC || type == Token.DEC )  {^[CLASS] ReferencedAfterSideEffect  [METHOD] hasNonLocalSideEffect [RETURN_TYPE] boolean   Node n [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffect  sideEffectSeen  int  loopsEntered  type  Node  lhs  n  
[BugLab_Wrong_Operator]^if  ( NodeUtil.isAssignmentOp ( n ) || type >= Token.INC || type == Token.DEC )  {^399^400^401^^^394^416^if  ( NodeUtil.isAssignmentOp ( n ) || type == Token.INC || type == Token.DEC )  {^[CLASS] ReferencedAfterSideEffect  [METHOD] hasNonLocalSideEffect [RETURN_TYPE] boolean   Node n [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffect  sideEffectSeen  int  loopsEntered  type  Node  lhs  n  
[BugLab_Wrong_Operator]^if  ( NodeUtil.isAssignmentOp ( n ) || type != Token.INC || type == Token.DEC )  {^399^400^401^^^394^416^if  ( NodeUtil.isAssignmentOp ( n ) || type == Token.INC || type == Token.DEC )  {^[CLASS] ReferencedAfterSideEffect  [METHOD] hasNonLocalSideEffect [RETURN_TYPE] boolean   Node n [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffect  sideEffectSeen  int  loopsEntered  type  Node  lhs  n  
[BugLab_Wrong_Operator]^if  ( NodeUtil.isAssignmentOp ( n ) || type > Token.INC || type == Token.DEC )  {^399^400^401^^^394^416^if  ( NodeUtil.isAssignmentOp ( n ) || type == Token.INC || type == Token.DEC )  {^[CLASS] ReferencedAfterSideEffect  [METHOD] hasNonLocalSideEffect [RETURN_TYPE] boolean   Node n [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffect  sideEffectSeen  int  loopsEntered  type  Node  lhs  n  
[BugLab_Variable_Misuse]^} else if  ( loopsEntered == Token.CALL )  {^407^^^^^394^416^} else if  ( type == Token.CALL )  {^[CLASS] ReferencedAfterSideEffect  [METHOD] hasNonLocalSideEffect [RETURN_TYPE] boolean   Node n [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffect  sideEffectSeen  int  loopsEntered  type  Node  lhs  n  
[BugLab_Variable_Misuse]^} else if  ( type == Token.0 )  {^407^^^^^394^416^} else if  ( type == Token.CALL )  {^[CLASS] ReferencedAfterSideEffect  [METHOD] hasNonLocalSideEffect [RETURN_TYPE] boolean   Node n [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffect  sideEffectSeen  int  loopsEntered  type  Node  lhs  n  
[BugLab_Wrong_Operator]^} else if  ( type <= Token.CALL )  {^407^^^^^394^416^} else if  ( type == Token.CALL )  {^[CLASS] ReferencedAfterSideEffect  [METHOD] hasNonLocalSideEffect [RETURN_TYPE] boolean   Node n [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffect  sideEffectSeen  int  loopsEntered  type  Node  lhs  n  
[BugLab_Variable_Misuse]^} else if  ( loopsEntered == Token.NEW )  {^409^^^^^394^416^} else if  ( type == Token.NEW )  {^[CLASS] ReferencedAfterSideEffect  [METHOD] hasNonLocalSideEffect [RETURN_TYPE] boolean   Node n [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffect  sideEffectSeen  int  loopsEntered  type  Node  lhs  n  
[BugLab_Wrong_Operator]^} else if  ( type != Token.NEW )  {^409^^^^^394^416^} else if  ( type == Token.NEW )  {^[CLASS] ReferencedAfterSideEffect  [METHOD] hasNonLocalSideEffect [RETURN_TYPE] boolean   Node n [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffect  sideEffectSeen  int  loopsEntered  type  Node  lhs  n  
[BugLab_Variable_Misuse]^} else if  ( loopsEntered == Token.DELPROP )  {^411^^^^^394^416^} else if  ( type == Token.DELPROP )  {^[CLASS] ReferencedAfterSideEffect  [METHOD] hasNonLocalSideEffect [RETURN_TYPE] boolean   Node n [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffect  sideEffectSeen  int  loopsEntered  type  Node  lhs  n  
[BugLab_Wrong_Operator]^} else if  ( type >= Token.DELPROP )  {^411^^^^^394^416^} else if  ( type == Token.DELPROP )  {^[CLASS] ReferencedAfterSideEffect  [METHOD] hasNonLocalSideEffect [RETURN_TYPE] boolean   Node n [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffect  sideEffectSeen  int  loopsEntered  type  Node  lhs  n  
[BugLab_Wrong_Literal]^sideEffect = false;^412^^^^^394^416^sideEffect = true;^[CLASS] ReferencedAfterSideEffect  [METHOD] hasNonLocalSideEffect [RETURN_TYPE] boolean   Node n [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffect  sideEffectSeen  int  loopsEntered  type  Node  lhs  n  
[BugLab_Variable_Misuse]^sideEffect = NodeUtil.constructorCallHasSideEffects ( lhs ) ;^410^^^^^394^416^sideEffect = NodeUtil.constructorCallHasSideEffects ( n ) ;^[CLASS] ReferencedAfterSideEffect  [METHOD] hasNonLocalSideEffect [RETURN_TYPE] boolean   Node n [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffect  sideEffectSeen  int  loopsEntered  type  Node  lhs  n  
[BugLab_Wrong_Operator]^} else if  ( type < Token.DELPROP )  {^411^^^^^394^416^} else if  ( type == Token.DELPROP )  {^[CLASS] ReferencedAfterSideEffect  [METHOD] hasNonLocalSideEffect [RETURN_TYPE] boolean   Node n [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffect  sideEffectSeen  int  loopsEntered  type  Node  lhs  n  
[BugLab_Variable_Misuse]^sideEffect = NodeUtil.functionCallHasSideEffects ( lhs ) ;^408^^^^^394^416^sideEffect = NodeUtil.functionCallHasSideEffects ( n ) ;^[CLASS] ReferencedAfterSideEffect  [METHOD] hasNonLocalSideEffect [RETURN_TYPE] boolean   Node n [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffect  sideEffectSeen  int  loopsEntered  type  Node  lhs  n  
[BugLab_Wrong_Operator]^} else if  ( type <= Token.NEW )  {^409^^^^^394^416^} else if  ( type == Token.NEW )  {^[CLASS] ReferencedAfterSideEffect  [METHOD] hasNonLocalSideEffect [RETURN_TYPE] boolean   Node n [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffect  sideEffectSeen  int  loopsEntered  type  Node  lhs  n  
[BugLab_Wrong_Operator]^} else if  ( type > Token.NEW )  {^409^^^^^394^416^} else if  ( type == Token.NEW )  {^[CLASS] ReferencedAfterSideEffect  [METHOD] hasNonLocalSideEffect [RETURN_TYPE] boolean   Node n [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffect  sideEffectSeen  int  loopsEntered  type  Node  lhs  n  
[BugLab_Variable_Misuse]^if  ( !isLocalName ( n )  )  {^404^^^^^394^416^if  ( !isLocalName ( lhs )  )  {^[CLASS] ReferencedAfterSideEffect  [METHOD] hasNonLocalSideEffect [RETURN_TYPE] boolean   Node n [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffect  sideEffectSeen  int  loopsEntered  type  Node  lhs  n  
[BugLab_Wrong_Literal]^sideEffect = false;^405^^^^^394^416^sideEffect = true;^[CLASS] ReferencedAfterSideEffect  [METHOD] hasNonLocalSideEffect [RETURN_TYPE] boolean   Node n [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffect  sideEffectSeen  int  loopsEntered  type  Node  lhs  n  
[BugLab_Variable_Misuse]^Node lhs = lhs.getFirstChild (  ) ;^402^^^^^394^416^Node lhs = n.getFirstChild (  ) ;^[CLASS] ReferencedAfterSideEffect  [METHOD] hasNonLocalSideEffect [RETURN_TYPE] boolean   Node n [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffect  sideEffectSeen  int  loopsEntered  type  Node  lhs  n  
[BugLab_Wrong_Operator]^} else if  ( type < Token.CALL )  {^407^^^^^394^416^} else if  ( type == Token.CALL )  {^[CLASS] ReferencedAfterSideEffect  [METHOD] hasNonLocalSideEffect [RETURN_TYPE] boolean   Node n [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffect  sideEffectSeen  int  loopsEntered  type  Node  lhs  n  
[BugLab_Wrong_Operator]^} else if  ( type != Token.CALL )  {^407^^^^^394^416^} else if  ( type == Token.CALL )  {^[CLASS] ReferencedAfterSideEffect  [METHOD] hasNonLocalSideEffect [RETURN_TYPE] boolean   Node n [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffect  sideEffectSeen  int  loopsEntered  type  Node  lhs  n  
[BugLab_Wrong_Operator]^} else if  ( type >= Token.NEW )  {^409^^^^^394^416^} else if  ( type == Token.NEW )  {^[CLASS] ReferencedAfterSideEffect  [METHOD] hasNonLocalSideEffect [RETURN_TYPE] boolean   Node n [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffect  sideEffectSeen  int  loopsEntered  type  Node  lhs  n  
[BugLab_Wrong_Operator]^} else if  ( type <= Token.DELPROP )  {^411^^^^^394^416^} else if  ( type == Token.DELPROP )  {^[CLASS] ReferencedAfterSideEffect  [METHOD] hasNonLocalSideEffect [RETURN_TYPE] boolean   Node n [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffect  sideEffectSeen  int  loopsEntered  type  Node  lhs  n  
[BugLab_Wrong_Operator]^} else if  ( type != Token.DELPROP )  {^411^^^^^394^416^} else if  ( type == Token.DELPROP )  {^[CLASS] ReferencedAfterSideEffect  [METHOD] hasNonLocalSideEffect [RETURN_TYPE] boolean   Node n [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffect  sideEffectSeen  int  loopsEntered  type  Node  lhs  n  
[BugLab_Variable_Misuse]^if  ( NodeUtil.isAssignmentOp ( lhs ) || type == Token.INC || type == Token.DEC )  {^399^400^401^^^394^416^if  ( NodeUtil.isAssignmentOp ( n ) || type == Token.INC || type == Token.DEC )  {^[CLASS] ReferencedAfterSideEffect  [METHOD] hasNonLocalSideEffect [RETURN_TYPE] boolean   Node n [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffect  sideEffectSeen  int  loopsEntered  type  Node  lhs  n  
[BugLab_Argument_Swapping]^return name.contains ( locals ) ;^424^^^^^421^427^return locals.contains ( name ) ;^[CLASS] ReferencedAfterSideEffect  [METHOD] isLocalName [RETURN_TYPE] boolean   Node node [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffect  sideEffectSeen  String  name  int  loopsEntered  type  Node  node  
[BugLab_Variable_Misuse]^return 0.contains ( name ) ;^424^^^^^421^427^return locals.contains ( name ) ;^[CLASS] ReferencedAfterSideEffect  [METHOD] isLocalName [RETURN_TYPE] boolean   Node node [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffect  sideEffectSeen  String  name  int  loopsEntered  type  Node  node  
[BugLab_Wrong_Literal]^return true;^426^^^^^421^427^return false;^[CLASS] ReferencedAfterSideEffect  [METHOD] isLocalName [RETURN_TYPE] boolean   Node node [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffect  sideEffectSeen  String  name  int  loopsEntered  type  Node  node  
