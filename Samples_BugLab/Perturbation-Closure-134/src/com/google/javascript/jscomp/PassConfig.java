[BugLab_Variable_Misuse]^super ( options ) ;^154^^^^^153^156^super ( delegate.options ) ;^[CLASS] PassConfig PassConfigDelegate State  [METHOD] <init> [RETURN_TYPE] PassConfig)   PassConfig delegate [VARIABLES] Set  exportedNames  boolean  Scope  topScope  VariableMap  anonymousFunctionNameMap  propertyMap  variableMap  CompilerOptions  options  PassConfig  delegate  IdGenerator  crossModuleIdGenerator  MemoizedScopeCreator  typedScopeCreator  Map  cssNames  long  serialVersionUID  FunctionNames  functionNames  
[BugLab_Argument_Swapping]^super ( delegate.options.options ) ;^154^^^^^153^156^super ( delegate.options ) ;^[CLASS] PassConfig PassConfigDelegate State  [METHOD] <init> [RETURN_TYPE] PassConfig)   PassConfig delegate [VARIABLES] Set  exportedNames  boolean  Scope  topScope  VariableMap  anonymousFunctionNameMap  propertyMap  variableMap  CompilerOptions  options  PassConfig  delegate  IdGenerator  crossModuleIdGenerator  MemoizedScopeCreator  typedScopeCreator  Map  cssNames  long  serialVersionUID  FunctionNames  functionNames  
[BugLab_Argument_Swapping]^super ( delegate ) ;^154^^^^^153^156^super ( delegate.options ) ;^[CLASS] PassConfig PassConfigDelegate State  [METHOD] <init> [RETURN_TYPE] PassConfig)   PassConfig delegate [VARIABLES] Set  exportedNames  boolean  Scope  topScope  VariableMap  anonymousFunctionNameMap  propertyMap  variableMap  CompilerOptions  options  PassConfig  delegate  IdGenerator  crossModuleIdGenerator  MemoizedScopeCreator  typedScopeCreator  Map  cssNames  long  serialVersionUID  FunctionNames  functionNames  
[BugLab_Variable_Misuse]^this.variableMap = propertyMap;^204^^^^^197^208^this.variableMap = variableMap;^[CLASS] PassConfig PassConfigDelegate State  [METHOD] <init> [RETURN_TYPE] FunctionNames)   Integer> cssNames String> exportedNames IdGenerator crossModuleIdGenerator VariableMap variableMap VariableMap propertyMap VariableMap anonymousFunctionNameMap FunctionNames functionNames [VARIABLES] Set  exportedNames  boolean  Scope  topScope  VariableMap  anonymousFunctionNameMap  propertyMap  variableMap  CompilerOptions  options  PassConfig  delegate  IdGenerator  crossModuleIdGenerator  MemoizedScopeCreator  typedScopeCreator  Map  cssNames  long  serialVersionUID  FunctionNames  functionNames  
[BugLab_Variable_Misuse]^this.propertyMap = variableMap;^205^^^^^197^208^this.propertyMap = propertyMap;^[CLASS] PassConfig PassConfigDelegate State  [METHOD] <init> [RETURN_TYPE] FunctionNames)   Integer> cssNames String> exportedNames IdGenerator crossModuleIdGenerator VariableMap variableMap VariableMap propertyMap VariableMap anonymousFunctionNameMap FunctionNames functionNames [VARIABLES] Set  exportedNames  boolean  Scope  topScope  VariableMap  anonymousFunctionNameMap  propertyMap  variableMap  CompilerOptions  options  PassConfig  delegate  IdGenerator  crossModuleIdGenerator  MemoizedScopeCreator  typedScopeCreator  Map  cssNames  long  serialVersionUID  FunctionNames  functionNames  
[BugLab_Variable_Misuse]^this.anonymousFunctionNameMap = variableMap;^206^^^^^197^208^this.anonymousFunctionNameMap = anonymousFunctionNameMap;^[CLASS] PassConfig PassConfigDelegate State  [METHOD] <init> [RETURN_TYPE] FunctionNames)   Integer> cssNames String> exportedNames IdGenerator crossModuleIdGenerator VariableMap variableMap VariableMap propertyMap VariableMap anonymousFunctionNameMap FunctionNames functionNames [VARIABLES] Set  exportedNames  boolean  Scope  topScope  VariableMap  anonymousFunctionNameMap  propertyMap  variableMap  CompilerOptions  options  PassConfig  delegate  IdGenerator  crossModuleIdGenerator  MemoizedScopeCreator  typedScopeCreator  Map  cssNames  long  serialVersionUID  FunctionNames  functionNames  
[BugLab_Argument_Swapping]^return new TypeInferencePass ( topScope, compiler.getReverseAbstractInterpreter (  ) , compiler, typedScopeCreator ) ;^88^89^90^^^87^91^return new TypeInferencePass ( compiler, compiler.getReverseAbstractInterpreter (  ) , topScope, typedScopeCreator ) ;^[CLASS] PassConfig PassConfigDelegate State  [METHOD] makeTypeInference [RETURN_TYPE] TypeInferencePass   AbstractCompiler compiler [VARIABLES] AbstractCompiler  compiler  Set  exportedNames  boolean  Scope  topScope  VariableMap  anonymousFunctionNameMap  propertyMap  variableMap  CompilerOptions  options  PassConfig  delegate  IdGenerator  crossModuleIdGenerator  MemoizedScopeCreator  typedScopeCreator  Map  cssNames  long  serialVersionUID  FunctionNames  functionNames  
[BugLab_Argument_Swapping]^return new TypeInferencePass ( compiler, compiler.getReverseAbstractInterpreter (  ) , typedScopeCreator, topScope ) ;^88^89^90^^^87^91^return new TypeInferencePass ( compiler, compiler.getReverseAbstractInterpreter (  ) , topScope, typedScopeCreator ) ;^[CLASS] PassConfig PassConfigDelegate State  [METHOD] makeTypeInference [RETURN_TYPE] TypeInferencePass   AbstractCompiler compiler [VARIABLES] AbstractCompiler  compiler  Set  exportedNames  boolean  Scope  topScope  VariableMap  anonymousFunctionNameMap  propertyMap  variableMap  CompilerOptions  options  PassConfig  delegate  IdGenerator  crossModuleIdGenerator  MemoizedScopeCreator  typedScopeCreator  Map  cssNames  long  serialVersionUID  FunctionNames  functionNames  
[BugLab_Argument_Swapping]^if  ( passName.get ( i ) .getName (  ) .equals ( factoryList )  )  {^112^^^^^109^120^if  ( factoryList.get ( i ) .getName (  ) .equals ( passName )  )  {^[CLASS] PassConfig PassConfigDelegate State  [METHOD] addPassFactoryBefore [RETURN_TYPE] void   PassFactory> factoryList PassFactory factory String passName [VARIABLES] Set  exportedNames  PassConfig  delegate  IdGenerator  crossModuleIdGenerator  String  passName  MemoizedScopeCreator  typedScopeCreator  PassFactory  factory  long  serialVersionUID  int  i  boolean  Scope  topScope  VariableMap  anonymousFunctionNameMap  propertyMap  variableMap  CompilerOptions  options  List  factoryList  Map  cssNames  FunctionNames  functionNames  
[BugLab_Argument_Swapping]^if  ( i.get ( factoryList ) .getName (  ) .equals ( passName )  )  {^112^^^^^109^120^if  ( factoryList.get ( i ) .getName (  ) .equals ( passName )  )  {^[CLASS] PassConfig PassConfigDelegate State  [METHOD] addPassFactoryBefore [RETURN_TYPE] void   PassFactory> factoryList PassFactory factory String passName [VARIABLES] Set  exportedNames  PassConfig  delegate  IdGenerator  crossModuleIdGenerator  String  passName  MemoizedScopeCreator  typedScopeCreator  PassFactory  factory  long  serialVersionUID  int  i  boolean  Scope  topScope  VariableMap  anonymousFunctionNameMap  propertyMap  variableMap  CompilerOptions  options  List  factoryList  Map  cssNames  FunctionNames  functionNames  
[BugLab_Argument_Swapping]^if  ( passNameList.get ( i ) .getName (  ) .equals ( factory )  )  {^112^^^^^109^120^if  ( factoryList.get ( i ) .getName (  ) .equals ( passName )  )  {^[CLASS] PassConfig PassConfigDelegate State  [METHOD] addPassFactoryBefore [RETURN_TYPE] void   PassFactory> factoryList PassFactory factory String passName [VARIABLES] Set  exportedNames  PassConfig  delegate  IdGenerator  crossModuleIdGenerator  String  passName  MemoizedScopeCreator  typedScopeCreator  PassFactory  factory  long  serialVersionUID  int  i  boolean  Scope  topScope  VariableMap  anonymousFunctionNameMap  propertyMap  variableMap  CompilerOptions  options  List  factoryList  Map  cssNames  FunctionNames  functionNames  
[BugLab_Argument_Swapping]^for  ( factoryListnt i = 0; i < i.size (  ) ; i++ )  {^111^^^^^109^120^for  ( int i = 0; i < factoryList.size (  ) ; i++ )  {^[CLASS] PassConfig PassConfigDelegate State  [METHOD] addPassFactoryBefore [RETURN_TYPE] void   PassFactory> factoryList PassFactory factory String passName [VARIABLES] Set  exportedNames  PassConfig  delegate  IdGenerator  crossModuleIdGenerator  String  passName  MemoizedScopeCreator  typedScopeCreator  PassFactory  factory  long  serialVersionUID  int  i  boolean  Scope  topScope  VariableMap  anonymousFunctionNameMap  propertyMap  variableMap  CompilerOptions  options  List  factoryList  Map  cssNames  FunctionNames  functionNames  
[BugLab_Wrong_Operator]^for  ( int i = 0; i <= factoryList.size (  ) ; i++ )  {^111^^^^^109^120^for  ( int i = 0; i < factoryList.size (  ) ; i++ )  {^[CLASS] PassConfig PassConfigDelegate State  [METHOD] addPassFactoryBefore [RETURN_TYPE] void   PassFactory> factoryList PassFactory factory String passName [VARIABLES] Set  exportedNames  PassConfig  delegate  IdGenerator  crossModuleIdGenerator  String  passName  MemoizedScopeCreator  typedScopeCreator  PassFactory  factory  long  serialVersionUID  int  i  boolean  Scope  topScope  VariableMap  anonymousFunctionNameMap  propertyMap  variableMap  CompilerOptions  options  List  factoryList  Map  cssNames  FunctionNames  functionNames  
[BugLab_Wrong_Literal]^for  ( int i = i; i < factoryList.size (  ) ; i++ )  {^111^^^^^109^120^for  ( int i = 0; i < factoryList.size (  ) ; i++ )  {^[CLASS] PassConfig PassConfigDelegate State  [METHOD] addPassFactoryBefore [RETURN_TYPE] void   PassFactory> factoryList PassFactory factory String passName [VARIABLES] Set  exportedNames  PassConfig  delegate  IdGenerator  crossModuleIdGenerator  String  passName  MemoizedScopeCreator  typedScopeCreator  PassFactory  factory  long  serialVersionUID  int  i  boolean  Scope  topScope  VariableMap  anonymousFunctionNameMap  propertyMap  variableMap  CompilerOptions  options  List  factoryList  Map  cssNames  FunctionNames  functionNames  
[BugLab_Argument_Swapping]^if  ( factory.get ( i ) .getName (  ) .equals ( passName )  )  {^112^^^^^109^120^if  ( factoryList.get ( i ) .getName (  ) .equals ( passName )  )  {^[CLASS] PassConfig PassConfigDelegate State  [METHOD] addPassFactoryBefore [RETURN_TYPE] void   PassFactory> factoryList PassFactory factory String passName [VARIABLES] Set  exportedNames  PassConfig  delegate  IdGenerator  crossModuleIdGenerator  String  passName  MemoizedScopeCreator  typedScopeCreator  PassFactory  factory  long  serialVersionUID  int  i  boolean  Scope  topScope  VariableMap  anonymousFunctionNameMap  propertyMap  variableMap  CompilerOptions  options  List  factoryList  Map  cssNames  FunctionNames  functionNames  
[BugLab_Argument_Swapping]^if  ( factoryList.get ( passName ) .getName (  ) .equals ( i )  )  {^112^^^^^109^120^if  ( factoryList.get ( i ) .getName (  ) .equals ( passName )  )  {^[CLASS] PassConfig PassConfigDelegate State  [METHOD] addPassFactoryBefore [RETURN_TYPE] void   PassFactory> factoryList PassFactory factory String passName [VARIABLES] Set  exportedNames  PassConfig  delegate  IdGenerator  crossModuleIdGenerator  String  passName  MemoizedScopeCreator  typedScopeCreator  PassFactory  factory  long  serialVersionUID  int  i  boolean  Scope  topScope  VariableMap  anonymousFunctionNameMap  propertyMap  variableMap  CompilerOptions  options  List  factoryList  Map  cssNames  FunctionNames  functionNames  
[BugLab_Argument_Swapping]^if  ( factoryListList.get ( i ) .getName (  ) .equals ( passName )  )  {^112^^^^^109^120^if  ( factoryList.get ( i ) .getName (  ) .equals ( passName )  )  {^[CLASS] PassConfig PassConfigDelegate State  [METHOD] addPassFactoryBefore [RETURN_TYPE] void   PassFactory> factoryList PassFactory factory String passName [VARIABLES] Set  exportedNames  PassConfig  delegate  IdGenerator  crossModuleIdGenerator  String  passName  MemoizedScopeCreator  typedScopeCreator  PassFactory  factory  long  serialVersionUID  int  i  boolean  Scope  topScope  VariableMap  anonymousFunctionNameMap  propertyMap  variableMap  CompilerOptions  options  List  factoryList  Map  cssNames  FunctionNames  functionNames  
[BugLab_Variable_Misuse]^for  ( int i = 0; i < null.size (  ) ; i++ )  {^111^^^^^109^120^for  ( int i = 0; i < factoryList.size (  ) ; i++ )  {^[CLASS] PassConfig PassConfigDelegate State  [METHOD] addPassFactoryBefore [RETURN_TYPE] void   PassFactory> factoryList PassFactory factory String passName [VARIABLES] Set  exportedNames  PassConfig  delegate  IdGenerator  crossModuleIdGenerator  String  passName  MemoizedScopeCreator  typedScopeCreator  PassFactory  factory  long  serialVersionUID  int  i  boolean  Scope  topScope  VariableMap  anonymousFunctionNameMap  propertyMap  variableMap  CompilerOptions  options  List  factoryList  Map  cssNames  FunctionNames  functionNames  
[BugLab_Argument_Swapping]^factoryList.add ( factory, i ) ;^113^^^^^109^120^factoryList.add ( i, factory ) ;^[CLASS] PassConfig PassConfigDelegate State  [METHOD] addPassFactoryBefore [RETURN_TYPE] void   PassFactory> factoryList PassFactory factory String passName [VARIABLES] Set  exportedNames  PassConfig  delegate  IdGenerator  crossModuleIdGenerator  String  passName  MemoizedScopeCreator  typedScopeCreator  PassFactory  factory  long  serialVersionUID  int  i  boolean  Scope  topScope  VariableMap  anonymousFunctionNameMap  propertyMap  variableMap  CompilerOptions  options  List  factoryList  Map  cssNames  FunctionNames  functionNames  
[BugLab_Wrong_Operator]^throw new IllegalArgumentException ( "No factory named '"  &  passName  &  "' in the factory list" ) ;^118^119^^^^109^120^throw new IllegalArgumentException ( "No factory named '" + passName + "' in the factory list" ) ;^[CLASS] PassConfig PassConfigDelegate State  [METHOD] addPassFactoryBefore [RETURN_TYPE] void   PassFactory> factoryList PassFactory factory String passName [VARIABLES] Set  exportedNames  PassConfig  delegate  IdGenerator  crossModuleIdGenerator  String  passName  MemoizedScopeCreator  typedScopeCreator  PassFactory  factory  long  serialVersionUID  int  i  boolean  Scope  topScope  VariableMap  anonymousFunctionNameMap  propertyMap  variableMap  CompilerOptions  options  List  factoryList  Map  cssNames  FunctionNames  functionNames  
[BugLab_Wrong_Operator]^throw new IllegalArgumentException ( "No factory named '"  ^  passName + "' in the factory list" ) ;^118^119^^^^109^120^throw new IllegalArgumentException ( "No factory named '" + passName + "' in the factory list" ) ;^[CLASS] PassConfig PassConfigDelegate State  [METHOD] addPassFactoryBefore [RETURN_TYPE] void   PassFactory> factoryList PassFactory factory String passName [VARIABLES] Set  exportedNames  PassConfig  delegate  IdGenerator  crossModuleIdGenerator  String  passName  MemoizedScopeCreator  typedScopeCreator  PassFactory  factory  long  serialVersionUID  int  i  boolean  Scope  topScope  VariableMap  anonymousFunctionNameMap  propertyMap  variableMap  CompilerOptions  options  List  factoryList  Map  cssNames  FunctionNames  functionNames  
[BugLab_Wrong_Operator]^throw new IllegalArgumentException ( "No factory named '"  >=  passName  >=  "' in the factory list" ) ;^118^119^^^^109^120^throw new IllegalArgumentException ( "No factory named '" + passName + "' in the factory list" ) ;^[CLASS] PassConfig PassConfigDelegate State  [METHOD] addPassFactoryBefore [RETURN_TYPE] void   PassFactory> factoryList PassFactory factory String passName [VARIABLES] Set  exportedNames  PassConfig  delegate  IdGenerator  crossModuleIdGenerator  String  passName  MemoizedScopeCreator  typedScopeCreator  PassFactory  factory  long  serialVersionUID  int  i  boolean  Scope  topScope  VariableMap  anonymousFunctionNameMap  propertyMap  variableMap  CompilerOptions  options  List  factoryList  Map  cssNames  FunctionNames  functionNames  
[BugLab_Wrong_Operator]^throw new IllegalArgumentException ( "No factory named '"  &  passName + "' in the factory list" ) ;^118^119^^^^109^120^throw new IllegalArgumentException ( "No factory named '" + passName + "' in the factory list" ) ;^[CLASS] PassConfig PassConfigDelegate State  [METHOD] addPassFactoryBefore [RETURN_TYPE] void   PassFactory> factoryList PassFactory factory String passName [VARIABLES] Set  exportedNames  PassConfig  delegate  IdGenerator  crossModuleIdGenerator  String  passName  MemoizedScopeCreator  typedScopeCreator  PassFactory  factory  long  serialVersionUID  int  i  boolean  Scope  topScope  VariableMap  anonymousFunctionNameMap  propertyMap  variableMap  CompilerOptions  options  List  factoryList  Map  cssNames  FunctionNames  functionNames  
[BugLab_Variable_Misuse]^while  ( delegate instanceof PassConfigDelegate )  {^127^^^^^125^131^while  ( current instanceof PassConfigDelegate )  {^[CLASS] PassConfig PassConfigDelegate State  [METHOD] getBasePassConfig [RETURN_TYPE] PassConfig   [VARIABLES] Set  exportedNames  boolean  Scope  topScope  VariableMap  anonymousFunctionNameMap  propertyMap  variableMap  CompilerOptions  options  PassConfig  current  delegate  IdGenerator  crossModuleIdGenerator  MemoizedScopeCreator  typedScopeCreator  Map  cssNames  long  serialVersionUID  FunctionNames  functionNames  
[BugLab_Wrong_Operator]^while  ( current  ^  PassConfigDelegate )  {^127^^^^^125^131^while  ( current instanceof PassConfigDelegate )  {^[CLASS] PassConfig PassConfigDelegate State  [METHOD] getBasePassConfig [RETURN_TYPE] PassConfig   [VARIABLES] Set  exportedNames  boolean  Scope  topScope  VariableMap  anonymousFunctionNameMap  propertyMap  variableMap  CompilerOptions  options  PassConfig  current  delegate  IdGenerator  crossModuleIdGenerator  MemoizedScopeCreator  typedScopeCreator  Map  cssNames  long  serialVersionUID  FunctionNames  functionNames  
[BugLab_Variable_Misuse]^return delegate;^130^^^^^125^131^return current;^[CLASS] PassConfig PassConfigDelegate State  [METHOD] getBasePassConfig [RETURN_TYPE] PassConfig   [VARIABLES] Set  exportedNames  boolean  Scope  topScope  VariableMap  anonymousFunctionNameMap  propertyMap  variableMap  CompilerOptions  options  PassConfig  current  delegate  IdGenerator  crossModuleIdGenerator  MemoizedScopeCreator  typedScopeCreator  Map  cssNames  long  serialVersionUID  FunctionNames  functionNames  
[BugLab_Variable_Misuse]^return current.getChecks (  ) ;^159^^^^^158^160^return delegate.getChecks (  ) ;^[CLASS] PassConfig PassConfigDelegate State  [METHOD] getChecks [RETURN_TYPE] List   [VARIABLES] Set  exportedNames  boolean  Scope  topScope  VariableMap  anonymousFunctionNameMap  propertyMap  variableMap  CompilerOptions  options  PassConfig  current  delegate  IdGenerator  crossModuleIdGenerator  MemoizedScopeCreator  typedScopeCreator  Map  cssNames  long  serialVersionUID  FunctionNames  functionNames  
[BugLab_Variable_Misuse]^return current.getOptimizations (  ) ;^163^^^^^162^164^return delegate.getOptimizations (  ) ;^[CLASS] PassConfig PassConfigDelegate State  [METHOD] getOptimizations [RETURN_TYPE] List   [VARIABLES] Set  exportedNames  boolean  Scope  topScope  VariableMap  anonymousFunctionNameMap  propertyMap  variableMap  CompilerOptions  options  PassConfig  current  delegate  IdGenerator  crossModuleIdGenerator  MemoizedScopeCreator  typedScopeCreator  Map  cssNames  long  serialVersionUID  FunctionNames  functionNames  
[BugLab_Variable_Misuse]^return current.getScopeCreator (  ) ;^167^^^^^166^168^return delegate.getScopeCreator (  ) ;^[CLASS] PassConfig PassConfigDelegate State  [METHOD] getScopeCreator [RETURN_TYPE] ScopeCreator   [VARIABLES] Set  exportedNames  boolean  Scope  topScope  VariableMap  anonymousFunctionNameMap  propertyMap  variableMap  CompilerOptions  options  PassConfig  current  delegate  IdGenerator  crossModuleIdGenerator  MemoizedScopeCreator  typedScopeCreator  Map  cssNames  long  serialVersionUID  FunctionNames  functionNames  
[BugLab_Variable_Misuse]^return current.getTopScope (  ) ;^171^^^^^170^172^return delegate.getTopScope (  ) ;^[CLASS] PassConfig PassConfigDelegate State  [METHOD] getTopScope [RETURN_TYPE] Scope   [VARIABLES] Set  exportedNames  boolean  Scope  topScope  VariableMap  anonymousFunctionNameMap  propertyMap  variableMap  CompilerOptions  options  PassConfig  current  delegate  IdGenerator  crossModuleIdGenerator  MemoizedScopeCreator  typedScopeCreator  Map  cssNames  long  serialVersionUID  FunctionNames  functionNames  
[BugLab_Variable_Misuse]^return current.getIntermediateState (  ) ;^175^^^^^174^176^return delegate.getIntermediateState (  ) ;^[CLASS] PassConfig PassConfigDelegate State  [METHOD] getIntermediateState [RETURN_TYPE] PassConfig$State   [VARIABLES] Set  exportedNames  boolean  Scope  topScope  VariableMap  anonymousFunctionNameMap  propertyMap  variableMap  CompilerOptions  options  PassConfig  current  delegate  IdGenerator  crossModuleIdGenerator  MemoizedScopeCreator  typedScopeCreator  Map  cssNames  long  serialVersionUID  FunctionNames  functionNames  
[BugLab_Argument_Swapping]^super ( delegate.options.options ) ;^154^^^^^153^156^super ( delegate.options ) ;^[CLASS] PassConfigDelegate  [METHOD] <init> [RETURN_TYPE] PassConfig)   PassConfig delegate [VARIABLES] PassConfig  delegate  boolean  
[BugLab_Argument_Swapping]^super ( delegate ) ;^154^^^^^153^156^super ( delegate.options ) ;^[CLASS] PassConfigDelegate  [METHOD] <init> [RETURN_TYPE] PassConfig)   PassConfig delegate [VARIABLES] PassConfig  delegate  boolean  
[BugLab_Variable_Misuse]^this.variableMap = propertyMap;^204^^^^^197^208^this.variableMap = variableMap;^[CLASS] State  [METHOD] <init> [RETURN_TYPE] FunctionNames)   Integer> cssNames String> exportedNames IdGenerator crossModuleIdGenerator VariableMap variableMap VariableMap propertyMap VariableMap anonymousFunctionNameMap FunctionNames functionNames [VARIABLES] Set  exportedNames  boolean  VariableMap  anonymousFunctionNameMap  propertyMap  variableMap  IdGenerator  crossModuleIdGenerator  Map  cssNames  long  serialVersionUID  FunctionNames  functionNames  
[BugLab_Variable_Misuse]^this.anonymousFunctionNameMap = variableMap;^206^^^^^197^208^this.anonymousFunctionNameMap = anonymousFunctionNameMap;^[CLASS] State  [METHOD] <init> [RETURN_TYPE] FunctionNames)   Integer> cssNames String> exportedNames IdGenerator crossModuleIdGenerator VariableMap variableMap VariableMap propertyMap VariableMap anonymousFunctionNameMap FunctionNames functionNames [VARIABLES] Set  exportedNames  boolean  VariableMap  anonymousFunctionNameMap  propertyMap  variableMap  IdGenerator  crossModuleIdGenerator  Map  cssNames  long  serialVersionUID  FunctionNames  functionNames  
