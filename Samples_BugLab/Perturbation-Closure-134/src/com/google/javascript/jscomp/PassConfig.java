[buglab_swap_variables]^super ( delegate.options.options ) ;^154^^^^^153^156^super ( delegate.options ) ;^[CLASS] PassConfig PassConfigDelegate State  [METHOD] <init> [RETURN_TYPE] PassConfig)   PassConfig delegate [VARIABLES] Set  exportedNames  boolean  Scope  topScope  VariableMap  anonymousFunctionNameMap  propertyMap  variableMap  CompilerOptions  options  PassConfig  delegate  IdGenerator  crossModuleIdGenerator  MemoizedScopeCreator  typedScopeCreator  Map  cssNames  long  serialVersionUID  FunctionNames  functionNames  
[buglab_swap_variables]^super ( delegate ) ;^154^^^^^153^156^super ( delegate.options ) ;^[CLASS] PassConfig PassConfigDelegate State  [METHOD] <init> [RETURN_TYPE] PassConfig)   PassConfig delegate [VARIABLES] Set  exportedNames  boolean  Scope  topScope  VariableMap  anonymousFunctionNameMap  propertyMap  variableMap  CompilerOptions  options  PassConfig  delegate  IdGenerator  crossModuleIdGenerator  MemoizedScopeCreator  typedScopeCreator  Map  cssNames  long  serialVersionUID  FunctionNames  functionNames  
[buglab_swap_variables]^return new TypeInferencePass ( typedScopeCreator, compiler.getReverseAbstractInterpreter (  ) , topScope, compiler ) ;^88^89^90^^^87^91^return new TypeInferencePass ( compiler, compiler.getReverseAbstractInterpreter (  ) , topScope, typedScopeCreator ) ;^[CLASS] PassConfig PassConfigDelegate State  [METHOD] makeTypeInference [RETURN_TYPE] TypeInferencePass   AbstractCompiler compiler [VARIABLES] AbstractCompiler  compiler  Set  exportedNames  boolean  Scope  topScope  VariableMap  anonymousFunctionNameMap  propertyMap  variableMap  CompilerOptions  options  PassConfig  delegate  IdGenerator  crossModuleIdGenerator  MemoizedScopeCreator  typedScopeCreator  Map  cssNames  long  serialVersionUID  FunctionNames  functionNames  
[buglab_swap_variables]^return new TypeInferencePass (  compiler.getReverseAbstractInterpreter (  ) , topScope, typedScopeCreator ) ;^88^89^90^^^87^91^return new TypeInferencePass ( compiler, compiler.getReverseAbstractInterpreter (  ) , topScope, typedScopeCreator ) ;^[CLASS] PassConfig PassConfigDelegate State  [METHOD] makeTypeInference [RETURN_TYPE] TypeInferencePass   AbstractCompiler compiler [VARIABLES] AbstractCompiler  compiler  Set  exportedNames  boolean  Scope  topScope  VariableMap  anonymousFunctionNameMap  propertyMap  variableMap  CompilerOptions  options  PassConfig  delegate  IdGenerator  crossModuleIdGenerator  MemoizedScopeCreator  typedScopeCreator  Map  cssNames  long  serialVersionUID  FunctionNames  functionNames  
[buglab_swap_variables]^return new TypeInferencePass ( topScope, compiler.getReverseAbstractInterpreter (  ) , compiler, typedScopeCreator ) ;^88^89^90^^^87^91^return new TypeInferencePass ( compiler, compiler.getReverseAbstractInterpreter (  ) , topScope, typedScopeCreator ) ;^[CLASS] PassConfig PassConfigDelegate State  [METHOD] makeTypeInference [RETURN_TYPE] TypeInferencePass   AbstractCompiler compiler [VARIABLES] AbstractCompiler  compiler  Set  exportedNames  boolean  Scope  topScope  VariableMap  anonymousFunctionNameMap  propertyMap  variableMap  CompilerOptions  options  PassConfig  delegate  IdGenerator  crossModuleIdGenerator  MemoizedScopeCreator  typedScopeCreator  Map  cssNames  long  serialVersionUID  FunctionNames  functionNames  
[buglab_swap_variables]^return new TypeInferencePass ( compiler, compiler.getReverseAbstractInterpreter (  ) ,  typedScopeCreator ) ;^88^89^90^^^87^91^return new TypeInferencePass ( compiler, compiler.getReverseAbstractInterpreter (  ) , topScope, typedScopeCreator ) ;^[CLASS] PassConfig PassConfigDelegate State  [METHOD] makeTypeInference [RETURN_TYPE] TypeInferencePass   AbstractCompiler compiler [VARIABLES] AbstractCompiler  compiler  Set  exportedNames  boolean  Scope  topScope  VariableMap  anonymousFunctionNameMap  propertyMap  variableMap  CompilerOptions  options  PassConfig  delegate  IdGenerator  crossModuleIdGenerator  MemoizedScopeCreator  typedScopeCreator  Map  cssNames  long  serialVersionUID  FunctionNames  functionNames  
[buglab_swap_variables]^return new TypeInferencePass ( compiler, compiler.getReverseAbstractInterpreter (  ) , topScope ) ;^88^89^90^^^87^91^return new TypeInferencePass ( compiler, compiler.getReverseAbstractInterpreter (  ) , topScope, typedScopeCreator ) ;^[CLASS] PassConfig PassConfigDelegate State  [METHOD] makeTypeInference [RETURN_TYPE] TypeInferencePass   AbstractCompiler compiler [VARIABLES] AbstractCompiler  compiler  Set  exportedNames  boolean  Scope  topScope  VariableMap  anonymousFunctionNameMap  propertyMap  variableMap  CompilerOptions  options  PassConfig  delegate  IdGenerator  crossModuleIdGenerator  MemoizedScopeCreator  typedScopeCreator  Map  cssNames  long  serialVersionUID  FunctionNames  functionNames  
[buglab_swap_variables]^return new TypeInferencePass ( compiler, compiler.getReverseAbstractInterpreter (  ) , typedScopeCreator, topScope ) ;^88^89^90^^^87^91^return new TypeInferencePass ( compiler, compiler.getReverseAbstractInterpreter (  ) , topScope, typedScopeCreator ) ;^[CLASS] PassConfig PassConfigDelegate State  [METHOD] makeTypeInference [RETURN_TYPE] TypeInferencePass   AbstractCompiler compiler [VARIABLES] AbstractCompiler  compiler  Set  exportedNames  boolean  Scope  topScope  VariableMap  anonymousFunctionNameMap  propertyMap  variableMap  CompilerOptions  options  PassConfig  delegate  IdGenerator  crossModuleIdGenerator  MemoizedScopeCreator  typedScopeCreator  Map  cssNames  long  serialVersionUID  FunctionNames  functionNames  
[buglab_swap_variables]^if  ( factory.get ( i ) .getName (  ) .equals ( passName )  )  {^112^^^^^109^120^if  ( factoryList.get ( i ) .getName (  ) .equals ( passName )  )  {^[CLASS] PassConfig PassConfigDelegate State  [METHOD] addPassFactoryBefore [RETURN_TYPE] void   PassFactory> factoryList PassFactory factory String passName [VARIABLES] Set  exportedNames  PassConfig  delegate  IdGenerator  crossModuleIdGenerator  String  passName  MemoizedScopeCreator  typedScopeCreator  PassFactory  factory  long  serialVersionUID  int  i  boolean  Scope  topScope  VariableMap  anonymousFunctionNameMap  propertyMap  variableMap  CompilerOptions  options  List  factoryList  Map  cssNames  FunctionNames  functionNames  
[buglab_swap_variables]^if  ( i.get ( factoryList ) .getName (  ) .equals ( passName )  )  {^112^^^^^109^120^if  ( factoryList.get ( i ) .getName (  ) .equals ( passName )  )  {^[CLASS] PassConfig PassConfigDelegate State  [METHOD] addPassFactoryBefore [RETURN_TYPE] void   PassFactory> factoryList PassFactory factory String passName [VARIABLES] Set  exportedNames  PassConfig  delegate  IdGenerator  crossModuleIdGenerator  String  passName  MemoizedScopeCreator  typedScopeCreator  PassFactory  factory  long  serialVersionUID  int  i  boolean  Scope  topScope  VariableMap  anonymousFunctionNameMap  propertyMap  variableMap  CompilerOptions  options  List  factoryList  Map  cssNames  FunctionNames  functionNames  
[buglab_swap_variables]^if  ( factoryList.get ( passName ) .getName (  ) .equals ( i )  )  {^112^^^^^109^120^if  ( factoryList.get ( i ) .getName (  ) .equals ( passName )  )  {^[CLASS] PassConfig PassConfigDelegate State  [METHOD] addPassFactoryBefore [RETURN_TYPE] void   PassFactory> factoryList PassFactory factory String passName [VARIABLES] Set  exportedNames  PassConfig  delegate  IdGenerator  crossModuleIdGenerator  String  passName  MemoizedScopeCreator  typedScopeCreator  PassFactory  factory  long  serialVersionUID  int  i  boolean  Scope  topScope  VariableMap  anonymousFunctionNameMap  propertyMap  variableMap  CompilerOptions  options  List  factoryList  Map  cssNames  FunctionNames  functionNames  
[buglab_swap_variables]^if  ( iList.get ( factory ) .getName (  ) .equals ( passName )  )  {^112^^^^^109^120^if  ( factoryList.get ( i ) .getName (  ) .equals ( passName )  )  {^[CLASS] PassConfig PassConfigDelegate State  [METHOD] addPassFactoryBefore [RETURN_TYPE] void   PassFactory> factoryList PassFactory factory String passName [VARIABLES] Set  exportedNames  PassConfig  delegate  IdGenerator  crossModuleIdGenerator  String  passName  MemoizedScopeCreator  typedScopeCreator  PassFactory  factory  long  serialVersionUID  int  i  boolean  Scope  topScope  VariableMap  anonymousFunctionNameMap  propertyMap  variableMap  CompilerOptions  options  List  factoryList  Map  cssNames  FunctionNames  functionNames  
[buglab_swap_variables]^factoryList.add (  factory ) ;^113^^^^^109^120^factoryList.add ( i, factory ) ;^[CLASS] PassConfig PassConfigDelegate State  [METHOD] addPassFactoryBefore [RETURN_TYPE] void   PassFactory> factoryList PassFactory factory String passName [VARIABLES] Set  exportedNames  PassConfig  delegate  IdGenerator  crossModuleIdGenerator  String  passName  MemoizedScopeCreator  typedScopeCreator  PassFactory  factory  long  serialVersionUID  int  i  boolean  Scope  topScope  VariableMap  anonymousFunctionNameMap  propertyMap  variableMap  CompilerOptions  options  List  factoryList  Map  cssNames  FunctionNames  functionNames  
[buglab_swap_variables]^factoryList.add ( i ) ;^113^^^^^109^120^factoryList.add ( i, factory ) ;^[CLASS] PassConfig PassConfigDelegate State  [METHOD] addPassFactoryBefore [RETURN_TYPE] void   PassFactory> factoryList PassFactory factory String passName [VARIABLES] Set  exportedNames  PassConfig  delegate  IdGenerator  crossModuleIdGenerator  String  passName  MemoizedScopeCreator  typedScopeCreator  PassFactory  factory  long  serialVersionUID  int  i  boolean  Scope  topScope  VariableMap  anonymousFunctionNameMap  propertyMap  variableMap  CompilerOptions  options  List  factoryList  Map  cssNames  FunctionNames  functionNames  
[buglab_swap_variables]^for  ( int i = 0; i < factory.size (  ) ; i++ )  {^111^^^^^109^120^for  ( int i = 0; i < factoryList.size (  ) ; i++ )  {^[CLASS] PassConfig PassConfigDelegate State  [METHOD] addPassFactoryBefore [RETURN_TYPE] void   PassFactory> factoryList PassFactory factory String passName [VARIABLES] Set  exportedNames  PassConfig  delegate  IdGenerator  crossModuleIdGenerator  String  passName  MemoizedScopeCreator  typedScopeCreator  PassFactory  factory  long  serialVersionUID  int  i  boolean  Scope  topScope  VariableMap  anonymousFunctionNameMap  propertyMap  variableMap  CompilerOptions  options  List  factoryList  Map  cssNames  FunctionNames  functionNames  
[buglab_swap_variables]^for  ( factorynt i = 0; i < iList.size (  ) ; i++ )  {^111^^^^^109^120^for  ( int i = 0; i < factoryList.size (  ) ; i++ )  {^[CLASS] PassConfig PassConfigDelegate State  [METHOD] addPassFactoryBefore [RETURN_TYPE] void   PassFactory> factoryList PassFactory factory String passName [VARIABLES] Set  exportedNames  PassConfig  delegate  IdGenerator  crossModuleIdGenerator  String  passName  MemoizedScopeCreator  typedScopeCreator  PassFactory  factory  long  serialVersionUID  int  i  boolean  Scope  topScope  VariableMap  anonymousFunctionNameMap  propertyMap  variableMap  CompilerOptions  options  List  factoryList  Map  cssNames  FunctionNames  functionNames  
[buglab_swap_variables]^if  ( passName.get ( i ) .getName (  ) .equals ( factoryList )  )  {^112^^^^^109^120^if  ( factoryList.get ( i ) .getName (  ) .equals ( passName )  )  {^[CLASS] PassConfig PassConfigDelegate State  [METHOD] addPassFactoryBefore [RETURN_TYPE] void   PassFactory> factoryList PassFactory factory String passName [VARIABLES] Set  exportedNames  PassConfig  delegate  IdGenerator  crossModuleIdGenerator  String  passName  MemoizedScopeCreator  typedScopeCreator  PassFactory  factory  long  serialVersionUID  int  i  boolean  Scope  topScope  VariableMap  anonymousFunctionNameMap  propertyMap  variableMap  CompilerOptions  options  List  factoryList  Map  cssNames  FunctionNames  functionNames  
[buglab_swap_variables]^factoryList.add ( factory, i ) ;^113^^^^^109^120^factoryList.add ( i, factory ) ;^[CLASS] PassConfig PassConfigDelegate State  [METHOD] addPassFactoryBefore [RETURN_TYPE] void   PassFactory> factoryList PassFactory factory String passName [VARIABLES] Set  exportedNames  PassConfig  delegate  IdGenerator  crossModuleIdGenerator  String  passName  MemoizedScopeCreator  typedScopeCreator  PassFactory  factory  long  serialVersionUID  int  i  boolean  Scope  topScope  VariableMap  anonymousFunctionNameMap  propertyMap  variableMap  CompilerOptions  options  List  factoryList  Map  cssNames  FunctionNames  functionNames  
[buglab_swap_variables]^super ( delegate.options.options ) ;^154^^^^^153^156^super ( delegate.options ) ;^[CLASS] PassConfigDelegate  [METHOD] <init> [RETURN_TYPE] PassConfig)   PassConfig delegate [VARIABLES] PassConfig  delegate  boolean  
[buglab_swap_variables]^super ( delegate ) ;^154^^^^^153^156^super ( delegate.options ) ;^[CLASS] PassConfigDelegate  [METHOD] <init> [RETURN_TYPE] PassConfig)   PassConfig delegate [VARIABLES] PassConfig  delegate  boolean  
