[buglab_swap_variables]^NodeTraversal.traverse ( root, compiler, new Strip (  )  ) ;^83^^^^^82^84^NodeTraversal.traverse ( compiler, root, new Strip (  )  ) ;^[CLASS] StripCode Strip  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  externs  root  
[buglab_swap_variables]^NodeTraversal.traverse ( compiler,  new Strip (  )  ) ;^83^^^^^82^84^NodeTraversal.traverse ( compiler, root, new Strip (  )  ) ;^[CLASS] StripCode Strip  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  externs  root  
[buglab_swap_variables]^NodeTraversal.traverse (  root, new Strip (  )  ) ;^83^^^^^82^84^NodeTraversal.traverse ( compiler, root, new Strip (  )  ) ;^[CLASS] StripCode Strip  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  externs  root  
[buglab_swap_variables]^removeVarDeclarationsByNameOrRvalue ( n, t, parent ) ;^99^^^^^84^114^removeVarDeclarationsByNameOrRvalue ( t, n, parent ) ;^[CLASS] StripCode Strip  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  n  parent  
[buglab_swap_variables]^removeVarDeclarationsByNameOrRvalue (  n, parent ) ;^99^^^^^84^114^removeVarDeclarationsByNameOrRvalue ( t, n, parent ) ;^[CLASS] StripCode Strip  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  n  parent  
[buglab_swap_variables]^removeVarDeclarationsByNameOrRvalue ( t, parent, n ) ;^99^^^^^84^114^removeVarDeclarationsByNameOrRvalue ( t, n, parent ) ;^[CLASS] StripCode Strip  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  n  parent  
[buglab_swap_variables]^removeVarDeclarationsByNameOrRvalue ( t,  parent ) ;^99^^^^^84^114^removeVarDeclarationsByNameOrRvalue ( t, n, parent ) ;^[CLASS] StripCode Strip  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  n  parent  
[buglab_swap_variables]^removeVarDeclarationsByNameOrRvalue ( parent, n, t ) ;^99^^^^^84^114^removeVarDeclarationsByNameOrRvalue ( t, n, parent ) ;^[CLASS] StripCode Strip  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  n  parent  
[buglab_swap_variables]^removeVarDeclarationsByNameOrRvalue ( t, n ) ;^99^^^^^84^114^removeVarDeclarationsByNameOrRvalue ( t, n, parent ) ;^[CLASS] StripCode Strip  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  n  parent  
[buglab_swap_variables]^maybeRemoveReferenceToRemovedVariable ( parent, n, t ) ;^103^^^^^88^118^maybeRemoveReferenceToRemovedVariable ( t, n, parent ) ;^[CLASS] StripCode Strip  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  n  parent  
[buglab_swap_variables]^maybeRemoveReferenceToRemovedVariable (  n, parent ) ;^103^^^^^88^118^maybeRemoveReferenceToRemovedVariable ( t, n, parent ) ;^[CLASS] StripCode Strip  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  n  parent  
[buglab_swap_variables]^maybeRemoveReferenceToRemovedVariable ( n, t, parent ) ;^103^^^^^88^118^maybeRemoveReferenceToRemovedVariable ( t, n, parent ) ;^[CLASS] StripCode Strip  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  n  parent  
[buglab_swap_variables]^maybeRemoveReferenceToRemovedVariable ( t,  parent ) ;^103^^^^^88^118^maybeRemoveReferenceToRemovedVariable ( t, n, parent ) ;^[CLASS] StripCode Strip  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  n  parent  
[buglab_swap_variables]^maybeRemoveReferenceToRemovedVariable ( t, parent, n ) ;^103^^^^^88^118^maybeRemoveReferenceToRemovedVariable ( t, n, parent ) ;^[CLASS] StripCode Strip  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  n  parent  
[buglab_swap_variables]^maybeRemoveReferenceToRemovedVariable ( t, n ) ;^103^^^^^88^118^maybeRemoveReferenceToRemovedVariable ( t, n, parent ) ;^[CLASS] StripCode Strip  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  n  parent  
[buglab_swap_variables]^maybeEliminateAssignmentByLvalueName ( parent, n, t ) ;^118^^^^^103^133^maybeEliminateAssignmentByLvalueName ( t, n, parent ) ;^[CLASS] StripCode Strip  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  n  parent  
[buglab_swap_variables]^maybeEliminateAssignmentByLvalueName (  n, parent ) ;^118^^^^^103^133^maybeEliminateAssignmentByLvalueName ( t, n, parent ) ;^[CLASS] StripCode Strip  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  n  parent  
[buglab_swap_variables]^maybeEliminateAssignmentByLvalueName ( t, parent, n ) ;^118^^^^^103^133^maybeEliminateAssignmentByLvalueName ( t, n, parent ) ;^[CLASS] StripCode Strip  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  n  parent  
[buglab_swap_variables]^maybeEliminateAssignmentByLvalueName ( t,  parent ) ;^118^^^^^103^133^maybeEliminateAssignmentByLvalueName ( t, n, parent ) ;^[CLASS] StripCode Strip  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  n  parent  
[buglab_swap_variables]^maybeEliminateAssignmentByLvalueName ( t, n ) ;^118^^^^^103^133^maybeEliminateAssignmentByLvalueName ( t, n, parent ) ;^[CLASS] StripCode Strip  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  n  parent  
[buglab_swap_variables]^maybeRemoveCall ( n, t, parent ) ;^122^^^^^107^137^maybeRemoveCall ( t, n, parent ) ;^[CLASS] StripCode Strip  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  n  parent  
[buglab_swap_variables]^maybeRemoveCall (  n, parent ) ;^122^^^^^107^137^maybeRemoveCall ( t, n, parent ) ;^[CLASS] StripCode Strip  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  n  parent  
[buglab_swap_variables]^maybeRemoveCall ( t,  parent ) ;^122^^^^^107^137^maybeRemoveCall ( t, n, parent ) ;^[CLASS] StripCode Strip  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  n  parent  
[buglab_swap_variables]^maybeRemoveCall ( parent, n, t ) ;^122^^^^^107^137^maybeRemoveCall ( t, n, parent ) ;^[CLASS] StripCode Strip  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  n  parent  
[buglab_swap_variables]^maybeRemoveCall ( t, n ) ;^122^^^^^107^137^maybeRemoveCall ( t, n, parent ) ;^[CLASS] StripCode Strip  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  n  parent  
[buglab_swap_variables]^eliminateKeysWithStripNamesFromObjLit ( n, t ) ;^126^^^^^111^141^eliminateKeysWithStripNamesFromObjLit ( t, n ) ;^[CLASS] StripCode Strip  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  n  parent  
[buglab_swap_variables]^eliminateKeysWithStripNamesFromObjLit (  n ) ;^126^^^^^111^141^eliminateKeysWithStripNamesFromObjLit ( t, n ) ;^[CLASS] StripCode Strip  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  n  parent  
[buglab_swap_variables]^eliminateKeysWithStripNamesFromObjLit ( t ) ;^126^^^^^111^141^eliminateKeysWithStripNamesFromObjLit ( t, n ) ;^[CLASS] StripCode Strip  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  n  parent  
[buglab_swap_variables]^maybeEliminateExpressionByName ( n, t, parent ) ;^130^^^^^115^145^maybeEliminateExpressionByName ( t, n, parent ) ;^[CLASS] StripCode Strip  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  n  parent  
[buglab_swap_variables]^maybeEliminateExpressionByName (  n, parent ) ;^130^^^^^115^145^maybeEliminateExpressionByName ( t, n, parent ) ;^[CLASS] StripCode Strip  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  n  parent  
[buglab_swap_variables]^maybeEliminateExpressionByName ( t, parent, n ) ;^130^^^^^115^145^maybeEliminateExpressionByName ( t, n, parent ) ;^[CLASS] StripCode Strip  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  n  parent  
[buglab_swap_variables]^maybeEliminateExpressionByName ( t,  parent ) ;^130^^^^^115^145^maybeEliminateExpressionByName ( t, n, parent ) ;^[CLASS] StripCode Strip  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  n  parent  
[buglab_swap_variables]^maybeEliminateExpressionByName ( parent, n, t ) ;^130^^^^^115^145^maybeEliminateExpressionByName ( t, n, parent ) ;^[CLASS] StripCode Strip  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  n  parent  
[buglab_swap_variables]^maybeEliminateExpressionByName ( t, n ) ;^130^^^^^115^145^maybeEliminateExpressionByName ( t, n, parent ) ;^[CLASS] StripCode Strip  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  n  parent  
[buglab_swap_variables]^if  ( isStripName ( n )  || isCallWhoseReturnValueShouldBeStripped ( nameameNode.getFirstChild (  )  )  )  {^149^150^^^^144^163^if  ( isStripName ( name )  || isCallWhoseReturnValueShouldBeStripped ( nameNode.getFirstChild (  )  )  )  {^[CLASS] StripCode Strip  [METHOD] removeVarDeclarationsByNameOrRvalue [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  Scope  scope  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  n  nameNode  parent  String  name  
[buglab_swap_variables]^if  ( isStripName ( nameNodeame )  || isCallWhoseReturnValueShouldBeStripped ( n.getFirstChild (  )  )  )  {^149^150^^^^144^163^if  ( isStripName ( name )  || isCallWhoseReturnValueShouldBeStripped ( nameNode.getFirstChild (  )  )  )  {^[CLASS] StripCode Strip  [METHOD] removeVarDeclarationsByNameOrRvalue [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  Scope  scope  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  n  nameNode  parent  String  name  
[buglab_swap_variables]^if  ( isStripName ( nameame )  || isCallWhoseReturnValueShouldBeStripped ( nNode.getFirstChild (  )  )  )  {^149^150^^^^144^163^if  ( isStripName ( name )  || isCallWhoseReturnValueShouldBeStripped ( nameNode.getFirstChild (  )  )  )  {^[CLASS] StripCode Strip  [METHOD] removeVarDeclarationsByNameOrRvalue [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  Scope  scope  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  n  nameNode  parent  String  name  
[buglab_swap_variables]^varsToRemove.add ( name.getVar ( scope )  ) ;^153^^^^^144^163^varsToRemove.add ( scope.getVar ( name )  ) ;^[CLASS] StripCode Strip  [METHOD] removeVarDeclarationsByNameOrRvalue [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  Scope  scope  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  n  nameNode  parent  String  name  
[buglab_swap_variables]^n.removeChild ( nameNodeameNode ) ;^154^^^^^144^163^n.removeChild ( nameNode ) ;^[CLASS] StripCode Strip  [METHOD] removeVarDeclarationsByNameOrRvalue [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  Scope  scope  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  n  nameNode  parent  String  name  
[buglab_swap_variables]^n.removeChild ( n ) ;^154^^^^^144^163^n.removeChild ( nameNode ) ;^[CLASS] StripCode Strip  [METHOD] removeVarDeclarationsByNameOrRvalue [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  Scope  scope  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  n  nameNode  parent  String  name  
[buglab_swap_variables]^for  ( Node n = nameNode.getFirstChild (  ) ; nameNode != null;^146^^^^^144^163^for  ( Node nameNode = n.getFirstChild (  ) ; nameNode != null;^[CLASS] StripCode Strip  [METHOD] removeVarDeclarationsByNameOrRvalue [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  Scope  scope  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  n  nameNode  parent  String  name  
[buglab_swap_variables]^for  ( Node nameNodeNode = n.getFirstChild (  ) ; name != null;^146^^^^^144^163^for  ( Node nameNode = n.getFirstChild (  ) ; nameNode != null;^[CLASS] StripCode Strip  [METHOD] removeVarDeclarationsByNameOrRvalue [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  Scope  scope  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  n  nameNode  parent  String  name  
[buglab_swap_variables]^replaceWithEmpty ( parent, n ) ;^160^^^^^144^163^replaceWithEmpty ( n, parent ) ;^[CLASS] StripCode Strip  [METHOD] removeVarDeclarationsByNameOrRvalue [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  Scope  scope  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  n  nameNode  parent  String  name  
[buglab_swap_variables]^replaceWithEmpty (  parent ) ;^160^^^^^144^163^replaceWithEmpty ( n, parent ) ;^[CLASS] StripCode Strip  [METHOD] removeVarDeclarationsByNameOrRvalue [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  Scope  scope  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  n  nameNode  parent  String  name  
[buglab_swap_variables]^replaceWithEmpty ( n ) ;^160^^^^^144^163^replaceWithEmpty ( n, parent ) ;^[CLASS] StripCode Strip  [METHOD] removeVarDeclarationsByNameOrRvalue [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  Scope  scope  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  n  nameNode  parent  String  name  
[buglab_swap_variables]^replaceWithEmpty ( ancParent, ancestor ) ;^199^^^^^184^214^replaceWithEmpty ( ancestor, ancParent ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[buglab_swap_variables]^replaceWithEmpty (  ancParent ) ;^199^^^^^184^214^replaceWithEmpty ( ancestor, ancParent ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[buglab_swap_variables]^replaceWithEmpty ( ancestor ) ;^199^^^^^184^214^replaceWithEmpty ( ancestor, ancParent ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[buglab_swap_variables]^replaceWithNull ( ancestor, ancestorChild ) ;^206^^^^^203^208^replaceWithNull ( ancestorChild, ancestor ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[buglab_swap_variables]^replaceWithNull (  ancestor ) ;^206^^^^^203^208^replaceWithNull ( ancestorChild, ancestor ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[buglab_swap_variables]^replaceWithNull ( ancestorChildChild, ancestor ) ;^206^^^^^203^208^replaceWithNull ( ancestorChild, ancestor ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[buglab_swap_variables]^replaceWithNull ( ancestorChild ) ;^206^^^^^203^208^replaceWithNull ( ancestorChild, ancestor ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[buglab_swap_variables]^replaceWithNull ( ancestor, ancestorChild ) ;^206^^^^^191^221^replaceWithNull ( ancestorChild, ancestor ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[buglab_swap_variables]^replaceWithNull (  ancestor ) ;^206^^^^^191^221^replaceWithNull ( ancestorChild, ancestor ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[buglab_swap_variables]^replaceWithNull ( ancestorChildChild, ancestor ) ;^206^^^^^191^221^replaceWithNull ( ancestorChild, ancestor ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[buglab_swap_variables]^replaceWithNull ( ancestorChild ) ;^206^^^^^191^221^replaceWithNull ( ancestorChild, ancestor ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[buglab_swap_variables]^if  ( parent.getFirstChild (  )  == n && isReferenceToRemovedVar ( t )  )  {^187^^^^^172^202^if  ( parent.getFirstChild (  )  == n && isReferenceToRemovedVar ( t, n )  )  {^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[buglab_swap_variables]^if  ( parent.getFirstChild (  )  == n && isReferenceToRemovedVar (  n )  )  {^187^^^^^172^202^if  ( parent.getFirstChild (  )  == n && isReferenceToRemovedVar ( t, n )  )  {^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[buglab_swap_variables]^if  ( isReferenceToRemovedVar ( n, t )  )  {^228^^^^^213^243^if  ( isReferenceToRemovedVar ( t, n )  )  {^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[buglab_swap_variables]^if  ( isReferenceToRemovedVar (  n )  )  {^228^^^^^213^243^if  ( isReferenceToRemovedVar ( t, n )  )  {^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[buglab_swap_variables]^if  ( isReferenceToRemovedVar ( t )  )  {^228^^^^^213^243^if  ( isReferenceToRemovedVar ( t, n )  )  {^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[buglab_swap_variables]^if  ( n.getFirstChild (  )  == parent )  {^229^^^^^214^244^if  ( parent.getFirstChild (  )  == n )  {^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[buglab_swap_variables]^replaceWithNull ( parent, n ) ;^245^^^^^229^247^replaceWithNull ( n, parent ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[buglab_swap_variables]^replaceWithNull (  parent ) ;^245^^^^^229^247^replaceWithNull ( n, parent ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[buglab_swap_variables]^replaceWithNull ( n ) ;^245^^^^^229^247^replaceWithNull ( n, parent ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[buglab_swap_variables]^gramps.replaceChild (  rvalue ) ;^240^^^^^231^242^gramps.replaceChild ( parent, rvalue ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[buglab_swap_variables]^gramps.replaceChild ( parent ) ;^240^^^^^231^242^gramps.replaceChild ( parent, rvalue ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[buglab_swap_variables]^replaceWithEmpty ( greatGramps, gramps ) ;^234^^^^^219^249^replaceWithEmpty ( gramps, greatGramps ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[buglab_swap_variables]^replaceWithEmpty (  greatGramps ) ;^234^^^^^219^249^replaceWithEmpty ( gramps, greatGramps ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[buglab_swap_variables]^replaceWithEmpty ( gramps ) ;^234^^^^^219^249^replaceWithEmpty ( gramps, greatGramps ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[buglab_swap_variables]^gramps.replaceChild ( rvalue, parent ) ;^240^^^^^225^255^gramps.replaceChild ( parent, rvalue ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[buglab_swap_variables]^gramps.replaceChild (  rvalue ) ;^240^^^^^225^255^gramps.replaceChild ( parent, rvalue ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[buglab_swap_variables]^gramps.replaceChild ( parent ) ;^240^^^^^225^255^gramps.replaceChild ( parent, rvalue ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[buglab_swap_variables]^gramps.replaceChild ( rvalue, parent ) ;^240^^^^^231^242^gramps.replaceChild ( parent, rvalue ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[buglab_swap_variables]^replaceWithNull ( parent, n ) ;^245^^^^^230^260^replaceWithNull ( n, parent ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[buglab_swap_variables]^replaceWithNull (  parent ) ;^245^^^^^230^260^replaceWithNull ( n, parent ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[buglab_swap_variables]^replaceWithNull ( n ) ;^245^^^^^230^260^replaceWithNull ( n, parent ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[buglab_swap_variables]^if  ( isReferenceToRemovedVar (  n )  )  {^252^^^^^237^267^if  ( isReferenceToRemovedVar ( t, n )  )  {^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[buglab_swap_variables]^if  ( isReferenceToRemovedVar ( t )  )  {^252^^^^^237^267^if  ( isReferenceToRemovedVar ( t, n )  )  {^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[buglab_swap_variables]^replaceWithNull ( parent, n ) ;^253^^^^^238^268^replaceWithNull ( n, parent ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[buglab_swap_variables]^replaceWithNull (  parent ) ;^253^^^^^238^268^replaceWithNull ( n, parent ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[buglab_swap_variables]^replaceWithNull ( n ) ;^253^^^^^238^268^replaceWithNull ( n, parent ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[buglab_swap_variables]^if  ( parent.getFirstChild (  )  == t && isReferenceToRemovedVar ( n, n )  )  {^187^^^^^172^202^if  ( parent.getFirstChild (  )  == n && isReferenceToRemovedVar ( t, n )  )  {^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[buglab_swap_variables]^if  ( isReferenceToRemovedVar ( n, t )  )  {^252^^^^^237^267^if  ( isReferenceToRemovedVar ( t, n )  )  {^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[buglab_swap_variables]^replaceWithEmpty ( parent, n ) ;^281^^^^^269^285^replaceWithEmpty ( n, parent ) ;^[CLASS] StripCode Strip  [METHOD] maybeEliminateAssignmentByLvalueName [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  gramps  lvalue  n  parent  
[buglab_swap_variables]^replaceWithEmpty (  parent ) ;^281^^^^^269^285^replaceWithEmpty ( n, parent ) ;^[CLASS] StripCode Strip  [METHOD] maybeEliminateAssignmentByLvalueName [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  gramps  lvalue  n  parent  
[buglab_swap_variables]^replaceWithEmpty ( n ) ;^281^^^^^269^285^replaceWithEmpty ( n, parent ) ;^[CLASS] StripCode Strip  [METHOD] maybeEliminateAssignmentByLvalueName [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  gramps  lvalue  n  parent  
[buglab_swap_variables]^replaceWithEmpty ( gramps, parent ) ;^279^^^^^269^285^replaceWithEmpty ( parent, gramps ) ;^[CLASS] StripCode Strip  [METHOD] maybeEliminateAssignmentByLvalueName [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  gramps  lvalue  n  parent  
[buglab_swap_variables]^replaceWithEmpty (  gramps ) ;^279^^^^^269^285^replaceWithEmpty ( parent, gramps ) ;^[CLASS] StripCode Strip  [METHOD] maybeEliminateAssignmentByLvalueName [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  gramps  lvalue  n  parent  
[buglab_swap_variables]^replaceWithEmpty ( parent ) ;^279^^^^^269^285^replaceWithEmpty ( parent, gramps ) ;^[CLASS] StripCode Strip  [METHOD] maybeEliminateAssignmentByLvalueName [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  gramps  lvalue  n  parent  
[buglab_swap_variables]^if  ( expressionameEndsWithFieldNameToStrip ( n )  || qualifiedNameBeginsWithStripType ( expression )  )  {^304^305^^^^299^314^if  ( nameEndsWithFieldNameToStrip ( expression )  || qualifiedNameBeginsWithStripType ( expression )  )  {^[CLASS] StripCode Strip  [METHOD] maybeEliminateExpressionByName [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  expression  gramps  n  parent  
[buglab_swap_variables]^replaceWithEmpty ( parent, n ) ;^310^^^^^299^314^replaceWithEmpty ( n, parent ) ;^[CLASS] StripCode Strip  [METHOD] maybeEliminateExpressionByName [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  expression  gramps  n  parent  
[buglab_swap_variables]^replaceWithEmpty (  parent ) ;^310^^^^^299^314^replaceWithEmpty ( n, parent ) ;^[CLASS] StripCode Strip  [METHOD] maybeEliminateExpressionByName [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  expression  gramps  n  parent  
[buglab_swap_variables]^replaceWithEmpty ( n ) ;^310^^^^^299^314^replaceWithEmpty ( n, parent ) ;^[CLASS] StripCode Strip  [METHOD] maybeEliminateExpressionByName [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  expression  gramps  n  parent  
[buglab_swap_variables]^replaceWithEmpty ( gramps, parent ) ;^308^^^^^299^314^replaceWithEmpty ( parent, gramps ) ;^[CLASS] StripCode Strip  [METHOD] maybeEliminateExpressionByName [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  expression  gramps  n  parent  
[buglab_swap_variables]^replaceWithEmpty (  gramps ) ;^308^^^^^299^314^replaceWithEmpty ( parent, gramps ) ;^[CLASS] StripCode Strip  [METHOD] maybeEliminateExpressionByName [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  expression  gramps  n  parent  
[buglab_swap_variables]^replaceWithEmpty ( parent ) ;^308^^^^^299^314^replaceWithEmpty ( parent, gramps ) ;^[CLASS] StripCode Strip  [METHOD] maybeEliminateExpressionByName [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  expression  gramps  n  parent  
[buglab_swap_variables]^if  ( ancestorChild.getFirstChild (  )  != ancestor )  {^337^^^^^322^352^if  ( ancestor.getFirstChild (  )  != ancestorChild )  {^[CLASS] StripCode Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[buglab_swap_variables]^replaceWithNull ( ancestor, ancestorChild ) ;^338^^^^^323^353^replaceWithNull ( ancestorChild, ancestor ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[buglab_swap_variables]^replaceWithNull (  ancestor ) ;^338^^^^^323^353^replaceWithNull ( ancestorChild, ancestor ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[buglab_swap_variables]^replaceWithNull ( ancestorChildChild, ancestor ) ;^338^^^^^323^353^replaceWithNull ( ancestorChild, ancestor ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[buglab_swap_variables]^replaceWithNull ( ancestorChild ) ;^338^^^^^323^353^replaceWithNull ( ancestorChild, ancestor ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[buglab_swap_variables]^replaceWithEmpty ( ancParent, ancestor ) ;^344^^^^^329^359^replaceWithEmpty ( ancestor, ancParent ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[buglab_swap_variables]^replaceWithEmpty (  ancParent ) ;^344^^^^^329^359^replaceWithEmpty ( ancestor, ancParent ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[buglab_swap_variables]^replaceWithEmpty ( ancestor ) ;^344^^^^^329^359^replaceWithEmpty ( ancestor, ancParent ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[buglab_swap_variables]^replaceWithNull ( ancestor, ancestorChild ) ;^351^^^^^348^353^replaceWithNull ( ancestorChild, ancestor ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[buglab_swap_variables]^replaceWithNull (  ancestor ) ;^351^^^^^348^353^replaceWithNull ( ancestorChild, ancestor ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[buglab_swap_variables]^replaceWithNull ( ancestorChildChild, ancestor ) ;^351^^^^^348^353^replaceWithNull ( ancestorChild, ancestor ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[buglab_swap_variables]^replaceWithNull ( ancestorChild ) ;^351^^^^^348^353^replaceWithNull ( ancestorChild, ancestor ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[buglab_swap_variables]^replaceWithNull ( ancestor, ancestorChild ) ;^351^^^^^336^366^replaceWithNull ( ancestorChild, ancestor ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[buglab_swap_variables]^replaceWithNull (  ancestor ) ;^351^^^^^336^366^replaceWithNull ( ancestorChild, ancestor ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[buglab_swap_variables]^replaceWithNull ( ancestorChildChild, ancestor ) ;^351^^^^^336^366^replaceWithNull ( ancestorChild, ancestor ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[buglab_swap_variables]^replaceWithNull ( ancestorChild ) ;^351^^^^^336^366^replaceWithNull ( ancestorChild, ancestor ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[buglab_swap_variables]^if  ( isMethodCallThatTriggersRemoval (  n, parent )  )  {^328^^^^^313^343^if  ( isMethodCallThatTriggersRemoval ( t, n, parent )  )  {^[CLASS] StripCode Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[buglab_swap_variables]^if  ( isMethodCallThatTriggersRemoval ( t,  parent )  )  {^328^^^^^313^343^if  ( isMethodCallThatTriggersRemoval ( t, n, parent )  )  {^[CLASS] StripCode Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[buglab_swap_variables]^if  ( isMethodCallThatTriggersRemoval ( t, parent, n )  )  {^328^^^^^313^343^if  ( isMethodCallThatTriggersRemoval ( t, n, parent )  )  {^[CLASS] StripCode Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[buglab_swap_variables]^if  ( isMethodCallThatTriggersRemoval ( t, n )  )  {^328^^^^^313^343^if  ( isMethodCallThatTriggersRemoval ( t, n, parent )  )  {^[CLASS] StripCode Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[buglab_swap_variables]^if  ( isMethodCallThatTriggersRemoval ( parent, n, t )  )  {^328^^^^^313^343^if  ( isMethodCallThatTriggersRemoval ( t, n, parent )  )  {^[CLASS] StripCode Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[buglab_swap_variables]^if  ( isMethodCallThatTriggersRemoval ( n, t, parent )  )  {^328^^^^^313^343^if  ( isMethodCallThatTriggersRemoval ( t, n, parent )  )  {^[CLASS] StripCode Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[buglab_swap_variables]^while  ( n != keyull )  {^374^^^^^368^387^while  ( key != null )  {^[CLASS] StripCode Strip  [METHOD] eliminateKeysWithStripNamesFromObjLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  key  n  next  value  
[buglab_swap_variables]^if  ( type.equals ( name )  || name.startsWith ( type + "." )  )  {^434^^^^^431^445^if  ( name.equals ( type )  || name.startsWith ( type + "." )  )  {^[CLASS] StripCode Strip  [METHOD] qualifiedNameBeginsWithStripType [RETURN_TYPE] boolean   String name [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  String  name  type  boolean  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  
[buglab_swap_variables]^if  ( type.startsWith ( name )  )  {^439^^^^^431^445^if  ( name.startsWith ( type )  )  {^[CLASS] StripCode Strip  [METHOD] qualifiedNameBeginsWithStripType [RETURN_TYPE] boolean   String name [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  String  name  type  boolean  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  
[buglab_swap_variables]^Scope.Var var = name.getVar ( scope ) ;^458^^^^^455^460^Scope.Var var = scope.getVar ( name ) ;^[CLASS] StripCode Strip  [METHOD] isReferenceToRemovedVar [RETURN_TYPE] boolean   NodeTraversal t Node n [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  Scope  scope  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Var  var  Node  n  String  name  
[buglab_swap_variables]^return varsToRemovesToRemove.contains ( var ) ;^459^^^^^455^460^return varsToRemove.contains ( var ) ;^[CLASS] StripCode Strip  [METHOD] isReferenceToRemovedVar [RETURN_TYPE] boolean   NodeTraversal t Node n [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  Scope  scope  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Var  var  Node  n  String  name  
[buglab_swap_variables]^return var.contains ( varsToRemove ) ;^459^^^^^455^460^return varsToRemove.contains ( var ) ;^[CLASS] StripCode Strip  [METHOD] isReferenceToRemovedVar [RETURN_TYPE] boolean   NodeTraversal t Node n [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  Scope  scope  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Var  var  Node  n  String  name  
[buglab_swap_variables]^return calleeameEndsWithFieldNameToStrip ( n )  || nameEndsWithFieldNameToStrip ( function )  || qualifiedNameBeginsWithStripType ( callee )  || actsOnStripType ( t, n ) ;^505^506^507^508^^490^520^return nameEndsWithFieldNameToStrip ( callee )  || nameEndsWithFieldNameToStrip ( function )  || qualifiedNameBeginsWithStripType ( callee )  || actsOnStripType ( t, n ) ;^[CLASS] StripCode Strip  [METHOD] isMethodCallThatTriggersRemoval [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  callee  function  gramps  n  parent  
[buglab_swap_variables]^return nameEndsWithFieldNameToStrip ( function )  || nameEndsWithFieldNameToStrip ( callee )  || qualifiedNameBeginsWithStripType ( callee )  || actsOnStripType ( t, n ) ;^505^506^507^508^^490^520^return nameEndsWithFieldNameToStrip ( callee )  || nameEndsWithFieldNameToStrip ( function )  || qualifiedNameBeginsWithStripType ( callee )  || actsOnStripType ( t, n ) ;^[CLASS] StripCode Strip  [METHOD] isMethodCallThatTriggersRemoval [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  callee  function  gramps  n  parent  
[buglab_swap_variables]^return nameEndsWithFieldNameToStrip ( t )  || nameEndsWithFieldNameToStrip ( function )  || qualifiedNameBeginsWithStripType ( callee )  || actsOnStripType ( callee, n ) ;^505^506^507^508^^490^520^return nameEndsWithFieldNameToStrip ( callee )  || nameEndsWithFieldNameToStrip ( function )  || qualifiedNameBeginsWithStripType ( callee )  || actsOnStripType ( t, n ) ;^[CLASS] StripCode Strip  [METHOD] isMethodCallThatTriggersRemoval [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  callee  function  gramps  n  parent  
[buglab_swap_variables]^return nameEndsWithFieldNameToStrip ( callee )  || nameEndsWithFieldNameToStrip ( function )  || qualifiedNameBeginsWithStripType ( callee )  || actsOnStripType (  n ) ;^505^506^507^508^^490^520^return nameEndsWithFieldNameToStrip ( callee )  || nameEndsWithFieldNameToStrip ( function )  || qualifiedNameBeginsWithStripType ( callee )  || actsOnStripType ( t, n ) ;^[CLASS] StripCode Strip  [METHOD] isMethodCallThatTriggersRemoval [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  callee  function  gramps  n  parent  
[buglab_swap_variables]^return functionameEndsWithFieldNameToStrip ( callee )  || nameEndsWithFieldNameToStrip ( n )  || qualifiedNameBeginsWithStripType ( callee )  || actsOnStripType ( t, n ) ;^505^506^507^508^^490^520^return nameEndsWithFieldNameToStrip ( callee )  || nameEndsWithFieldNameToStrip ( function )  || qualifiedNameBeginsWithStripType ( callee )  || actsOnStripType ( t, n ) ;^[CLASS] StripCode Strip  [METHOD] isMethodCallThatTriggersRemoval [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  callee  function  gramps  n  parent  
[buglab_swap_variables]^return nameEndsWithFieldNameToStrip ( callee )  || nameEndsWithFieldNameToStrip ( function )  || qualifiedNameBeginsWithStripType ( callee )  || actsOnStripType ( t ) ;^505^506^507^508^^490^520^return nameEndsWithFieldNameToStrip ( callee )  || nameEndsWithFieldNameToStrip ( function )  || qualifiedNameBeginsWithStripType ( callee )  || actsOnStripType ( t, n ) ;^[CLASS] StripCode Strip  [METHOD] isMethodCallThatTriggersRemoval [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  callee  function  gramps  n  parent  
[buglab_swap_variables]^actsOnStripType ( n, t ) ;^508^^^^^493^523^actsOnStripType ( t, n ) ;^[CLASS] StripCode Strip  [METHOD] isMethodCallThatTriggersRemoval [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  callee  function  gramps  n  parent  
[buglab_swap_variables]^actsOnStripType (  n ) ;^508^^^^^493^523^actsOnStripType ( t, n ) ;^[CLASS] StripCode Strip  [METHOD] isMethodCallThatTriggersRemoval [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  callee  function  gramps  n  parent  
[buglab_swap_variables]^actsOnStripType ( t ) ;^508^^^^^493^523^actsOnStripType ( t, n ) ;^[CLASS] StripCode Strip  [METHOD] isMethodCallThatTriggersRemoval [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  callee  function  gramps  n  parent  
[buglab_swap_variables]^SubclassRelationship classes = callNode.getCodingConvention (  ) .getClassesDefinedByCall ( compiler ) ;^539^540^^^^538^557^SubclassRelationship classes = compiler.getCodingConvention (  ) .getClassesDefinedByCall ( callNode ) ;^[CLASS] StripCode Strip  [METHOD] actsOnStripType [RETURN_TYPE] boolean   NodeTraversal t Node callNode [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  callNode  SubclassRelationship  classes  
[buglab_swap_variables]^if  ( name.contains ( stripNameSuffixes )  || stripNamePrefixes.contains ( name )  )  {^567^568^^^^566^590^if  ( stripNameSuffixes.contains ( name )  || stripNamePrefixes.contains ( name )  )  {^[CLASS] StripCode Strip  [METHOD] isStripName [RETURN_TYPE] boolean   String name [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  String  lcName  name  stripName  boolean  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  
[buglab_swap_variables]^if  ( stripNamePrefixes.contains ( name )  || stripNameSuffixes.contains ( name )  )  {^567^568^^^^566^590^if  ( stripNameSuffixes.contains ( name )  || stripNamePrefixes.contains ( name )  )  {^[CLASS] StripCode Strip  [METHOD] isStripName [RETURN_TYPE] boolean   String name [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  String  lcName  name  stripName  boolean  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  
[buglab_swap_variables]^if  ( stripNameSuffixes.contains ( stripNamePrefixes )  || name.contains ( name )  )  {^567^568^^^^566^590^if  ( stripNameSuffixes.contains ( name )  || stripNamePrefixes.contains ( name )  )  {^[CLASS] StripCode Strip  [METHOD] isStripName [RETURN_TYPE] boolean   String name [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  String  lcName  name  stripName  boolean  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  
[buglab_swap_variables]^if  ( stripName.startsWith ( lcName.toLowerCase (  )  )  )  {^578^^^^^566^590^if  ( lcName.startsWith ( stripName.toLowerCase (  )  )  )  {^[CLASS] StripCode Strip  [METHOD] isStripName [RETURN_TYPE] boolean   String name [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  String  lcName  name  stripName  boolean  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  
[buglab_swap_variables]^if  ( stripName.endsWith ( lcName.toLowerCase (  )  )  )  {^584^^^^^566^590^if  ( lcName.endsWith ( stripName.toLowerCase (  )  )  )  {^[CLASS] StripCode Strip  [METHOD] isStripName [RETURN_TYPE] boolean   String name [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  String  lcName  name  stripName  boolean  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  
[buglab_swap_variables]^parent.replaceChild (  new Node ( Token.NULL )  ) ;^600^^^^^599^601^parent.replaceChild ( n, new Node ( Token.NULL )  ) ;^[CLASS] StripCode Strip  [METHOD] replaceWithNull [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  n  parent  
[buglab_swap_variables]^NodeUtil.removeChild ( n, parent ) ;^611^^^^^610^612^NodeUtil.removeChild ( parent, n ) ;^[CLASS] StripCode Strip  [METHOD] replaceWithEmpty [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  n  parent  
[buglab_swap_variables]^NodeUtil.removeChild (  n ) ;^611^^^^^610^612^NodeUtil.removeChild ( parent, n ) ;^[CLASS] StripCode Strip  [METHOD] replaceWithEmpty [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  n  parent  
[buglab_swap_variables]^NodeUtil.removeChild ( parent ) ;^611^^^^^610^612^NodeUtil.removeChild ( parent, n ) ;^[CLASS] StripCode Strip  [METHOD] replaceWithEmpty [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  n  parent  
[buglab_swap_variables]^removeVarDeclarationsByNameOrRvalue ( parent, n, t ) ;^99^^^^^84^114^removeVarDeclarationsByNameOrRvalue ( t, n, parent ) ;^[CLASS] Strip  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  n  parent  
[buglab_swap_variables]^removeVarDeclarationsByNameOrRvalue (  n, parent ) ;^99^^^^^84^114^removeVarDeclarationsByNameOrRvalue ( t, n, parent ) ;^[CLASS] Strip  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  n  parent  
[buglab_swap_variables]^removeVarDeclarationsByNameOrRvalue ( t, parent, n ) ;^99^^^^^84^114^removeVarDeclarationsByNameOrRvalue ( t, n, parent ) ;^[CLASS] Strip  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  n  parent  
[buglab_swap_variables]^removeVarDeclarationsByNameOrRvalue ( t,  parent ) ;^99^^^^^84^114^removeVarDeclarationsByNameOrRvalue ( t, n, parent ) ;^[CLASS] Strip  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  n  parent  
[buglab_swap_variables]^removeVarDeclarationsByNameOrRvalue ( t, n ) ;^99^^^^^84^114^removeVarDeclarationsByNameOrRvalue ( t, n, parent ) ;^[CLASS] Strip  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  n  parent  
[buglab_swap_variables]^maybeRemoveReferenceToRemovedVariable ( parent, n, t ) ;^103^^^^^88^118^maybeRemoveReferenceToRemovedVariable ( t, n, parent ) ;^[CLASS] Strip  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  n  parent  
[buglab_swap_variables]^maybeRemoveReferenceToRemovedVariable (  n, parent ) ;^103^^^^^88^118^maybeRemoveReferenceToRemovedVariable ( t, n, parent ) ;^[CLASS] Strip  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  n  parent  
[buglab_swap_variables]^maybeRemoveReferenceToRemovedVariable ( n, t, parent ) ;^103^^^^^88^118^maybeRemoveReferenceToRemovedVariable ( t, n, parent ) ;^[CLASS] Strip  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  n  parent  
[buglab_swap_variables]^maybeRemoveReferenceToRemovedVariable ( t,  parent ) ;^103^^^^^88^118^maybeRemoveReferenceToRemovedVariable ( t, n, parent ) ;^[CLASS] Strip  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  n  parent  
[buglab_swap_variables]^maybeRemoveReferenceToRemovedVariable ( t, parent, n ) ;^103^^^^^88^118^maybeRemoveReferenceToRemovedVariable ( t, n, parent ) ;^[CLASS] Strip  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  n  parent  
[buglab_swap_variables]^maybeRemoveReferenceToRemovedVariable ( t, n ) ;^103^^^^^88^118^maybeRemoveReferenceToRemovedVariable ( t, n, parent ) ;^[CLASS] Strip  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  n  parent  
[buglab_swap_variables]^maybeEliminateAssignmentByLvalueName ( parent, n, t ) ;^118^^^^^103^133^maybeEliminateAssignmentByLvalueName ( t, n, parent ) ;^[CLASS] Strip  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  n  parent  
[buglab_swap_variables]^maybeEliminateAssignmentByLvalueName (  n, parent ) ;^118^^^^^103^133^maybeEliminateAssignmentByLvalueName ( t, n, parent ) ;^[CLASS] Strip  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  n  parent  
[buglab_swap_variables]^maybeEliminateAssignmentByLvalueName ( t, parent, n ) ;^118^^^^^103^133^maybeEliminateAssignmentByLvalueName ( t, n, parent ) ;^[CLASS] Strip  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  n  parent  
[buglab_swap_variables]^maybeEliminateAssignmentByLvalueName ( t,  parent ) ;^118^^^^^103^133^maybeEliminateAssignmentByLvalueName ( t, n, parent ) ;^[CLASS] Strip  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  n  parent  
[buglab_swap_variables]^maybeEliminateAssignmentByLvalueName ( t, n ) ;^118^^^^^103^133^maybeEliminateAssignmentByLvalueName ( t, n, parent ) ;^[CLASS] Strip  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  n  parent  
[buglab_swap_variables]^maybeRemoveCall ( parent, n, t ) ;^122^^^^^107^137^maybeRemoveCall ( t, n, parent ) ;^[CLASS] Strip  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  n  parent  
[buglab_swap_variables]^maybeRemoveCall (  n, parent ) ;^122^^^^^107^137^maybeRemoveCall ( t, n, parent ) ;^[CLASS] Strip  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  n  parent  
[buglab_swap_variables]^maybeRemoveCall ( t, parent, n ) ;^122^^^^^107^137^maybeRemoveCall ( t, n, parent ) ;^[CLASS] Strip  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  n  parent  
[buglab_swap_variables]^maybeRemoveCall ( t,  parent ) ;^122^^^^^107^137^maybeRemoveCall ( t, n, parent ) ;^[CLASS] Strip  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  n  parent  
[buglab_swap_variables]^maybeRemoveCall ( t, n ) ;^122^^^^^107^137^maybeRemoveCall ( t, n, parent ) ;^[CLASS] Strip  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  n  parent  
[buglab_swap_variables]^eliminateKeysWithStripNamesFromObjLit ( n, t ) ;^126^^^^^111^141^eliminateKeysWithStripNamesFromObjLit ( t, n ) ;^[CLASS] Strip  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  n  parent  
[buglab_swap_variables]^eliminateKeysWithStripNamesFromObjLit (  n ) ;^126^^^^^111^141^eliminateKeysWithStripNamesFromObjLit ( t, n ) ;^[CLASS] Strip  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  n  parent  
[buglab_swap_variables]^eliminateKeysWithStripNamesFromObjLit ( t ) ;^126^^^^^111^141^eliminateKeysWithStripNamesFromObjLit ( t, n ) ;^[CLASS] Strip  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  n  parent  
[buglab_swap_variables]^maybeEliminateExpressionByName ( parent, n, t ) ;^130^^^^^115^145^maybeEliminateExpressionByName ( t, n, parent ) ;^[CLASS] Strip  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  n  parent  
[buglab_swap_variables]^maybeEliminateExpressionByName (  n, parent ) ;^130^^^^^115^145^maybeEliminateExpressionByName ( t, n, parent ) ;^[CLASS] Strip  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  n  parent  
[buglab_swap_variables]^maybeEliminateExpressionByName ( n, t, parent ) ;^130^^^^^115^145^maybeEliminateExpressionByName ( t, n, parent ) ;^[CLASS] Strip  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  n  parent  
[buglab_swap_variables]^maybeEliminateExpressionByName ( t,  parent ) ;^130^^^^^115^145^maybeEliminateExpressionByName ( t, n, parent ) ;^[CLASS] Strip  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  n  parent  
[buglab_swap_variables]^maybeEliminateExpressionByName ( t, n ) ;^130^^^^^115^145^maybeEliminateExpressionByName ( t, n, parent ) ;^[CLASS] Strip  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  n  parent  
[buglab_swap_variables]^if  ( isStripName ( n )  || isCallWhoseReturnValueShouldBeStripped ( nameameNode.getFirstChild (  )  )  )  {^149^150^^^^144^163^if  ( isStripName ( name )  || isCallWhoseReturnValueShouldBeStripped ( nameNode.getFirstChild (  )  )  )  {^[CLASS] Strip  [METHOD] removeVarDeclarationsByNameOrRvalue [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  Scope  scope  NodeTraversal  t  Node  n  nameNode  parent  String  name  
[buglab_swap_variables]^if  ( isStripName ( nameNodeame )  || isCallWhoseReturnValueShouldBeStripped ( n.getFirstChild (  )  )  )  {^149^150^^^^144^163^if  ( isStripName ( name )  || isCallWhoseReturnValueShouldBeStripped ( nameNode.getFirstChild (  )  )  )  {^[CLASS] Strip  [METHOD] removeVarDeclarationsByNameOrRvalue [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  Scope  scope  NodeTraversal  t  Node  n  nameNode  parent  String  name  
[buglab_swap_variables]^if  ( isStripName ( nameame )  || isCallWhoseReturnValueShouldBeStripped ( nNode.getFirstChild (  )  )  )  {^149^150^^^^144^163^if  ( isStripName ( name )  || isCallWhoseReturnValueShouldBeStripped ( nameNode.getFirstChild (  )  )  )  {^[CLASS] Strip  [METHOD] removeVarDeclarationsByNameOrRvalue [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  Scope  scope  NodeTraversal  t  Node  n  nameNode  parent  String  name  
[buglab_swap_variables]^varsToRemove.add ( name.getVar ( scope )  ) ;^153^^^^^144^163^varsToRemove.add ( scope.getVar ( name )  ) ;^[CLASS] Strip  [METHOD] removeVarDeclarationsByNameOrRvalue [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  Scope  scope  NodeTraversal  t  Node  n  nameNode  parent  String  name  
[buglab_swap_variables]^n.removeChild ( nameNodeameNode ) ;^154^^^^^144^163^n.removeChild ( nameNode ) ;^[CLASS] Strip  [METHOD] removeVarDeclarationsByNameOrRvalue [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  Scope  scope  NodeTraversal  t  Node  n  nameNode  parent  String  name  
[buglab_swap_variables]^n.removeChild ( n ) ;^154^^^^^144^163^n.removeChild ( nameNode ) ;^[CLASS] Strip  [METHOD] removeVarDeclarationsByNameOrRvalue [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  Scope  scope  NodeTraversal  t  Node  n  nameNode  parent  String  name  
[buglab_swap_variables]^for  ( Node nameNodeameNode = n.getFirstChild (  ) ; n != null;^146^^^^^144^163^for  ( Node nameNode = n.getFirstChild (  ) ; nameNode != null;^[CLASS] Strip  [METHOD] removeVarDeclarationsByNameOrRvalue [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  Scope  scope  NodeTraversal  t  Node  n  nameNode  parent  String  name  
[buglab_swap_variables]^replaceWithEmpty ( parent, n ) ;^160^^^^^144^163^replaceWithEmpty ( n, parent ) ;^[CLASS] Strip  [METHOD] removeVarDeclarationsByNameOrRvalue [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  Scope  scope  NodeTraversal  t  Node  n  nameNode  parent  String  name  
[buglab_swap_variables]^replaceWithEmpty (  parent ) ;^160^^^^^144^163^replaceWithEmpty ( n, parent ) ;^[CLASS] Strip  [METHOD] removeVarDeclarationsByNameOrRvalue [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  Scope  scope  NodeTraversal  t  Node  n  nameNode  parent  String  name  
[buglab_swap_variables]^replaceWithEmpty ( n ) ;^160^^^^^144^163^replaceWithEmpty ( n, parent ) ;^[CLASS] Strip  [METHOD] removeVarDeclarationsByNameOrRvalue [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  Scope  scope  NodeTraversal  t  Node  n  nameNode  parent  String  name  
[buglab_swap_variables]^replaceWithEmpty ( ancParent, ancestor ) ;^199^^^^^184^214^replaceWithEmpty ( ancestor, ancParent ) ;^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[buglab_swap_variables]^replaceWithEmpty (  ancParent ) ;^199^^^^^184^214^replaceWithEmpty ( ancestor, ancParent ) ;^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[buglab_swap_variables]^replaceWithEmpty ( ancestor ) ;^199^^^^^184^214^replaceWithEmpty ( ancestor, ancParent ) ;^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[buglab_swap_variables]^replaceWithNull ( ancestor, ancestorChild ) ;^206^^^^^203^208^replaceWithNull ( ancestorChild, ancestor ) ;^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[buglab_swap_variables]^replaceWithNull (  ancestor ) ;^206^^^^^203^208^replaceWithNull ( ancestorChild, ancestor ) ;^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[buglab_swap_variables]^replaceWithNull ( ancestorChildChild, ancestor ) ;^206^^^^^203^208^replaceWithNull ( ancestorChild, ancestor ) ;^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[buglab_swap_variables]^replaceWithNull ( ancestorChild ) ;^206^^^^^203^208^replaceWithNull ( ancestorChild, ancestor ) ;^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[buglab_swap_variables]^replaceWithNull ( ancestor, ancestorChild ) ;^206^^^^^191^221^replaceWithNull ( ancestorChild, ancestor ) ;^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[buglab_swap_variables]^replaceWithNull (  ancestor ) ;^206^^^^^191^221^replaceWithNull ( ancestorChild, ancestor ) ;^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[buglab_swap_variables]^replaceWithNull ( ancestorChildChild, ancestor ) ;^206^^^^^191^221^replaceWithNull ( ancestorChild, ancestor ) ;^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[buglab_swap_variables]^replaceWithNull ( ancestorChild ) ;^206^^^^^191^221^replaceWithNull ( ancestorChild, ancestor ) ;^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[buglab_swap_variables]^if  ( n.getFirstChild (  )  == parent && isReferenceToRemovedVar ( t, n )  )  {^187^^^^^172^202^if  ( parent.getFirstChild (  )  == n && isReferenceToRemovedVar ( t, n )  )  {^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[buglab_swap_variables]^if  ( parent.getFirstChild (  )  == n && isReferenceToRemovedVar ( t )  )  {^187^^^^^172^202^if  ( parent.getFirstChild (  )  == n && isReferenceToRemovedVar ( t, n )  )  {^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[buglab_swap_variables]^if  ( parent.getFirstChild (  )  == n && isReferenceToRemovedVar (  n )  )  {^187^^^^^172^202^if  ( parent.getFirstChild (  )  == n && isReferenceToRemovedVar ( t, n )  )  {^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[buglab_swap_variables]^if  ( isReferenceToRemovedVar (  n )  )  {^228^^^^^213^243^if  ( isReferenceToRemovedVar ( t, n )  )  {^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[buglab_swap_variables]^if  ( isReferenceToRemovedVar ( t )  )  {^228^^^^^213^243^if  ( isReferenceToRemovedVar ( t, n )  )  {^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[buglab_swap_variables]^replaceWithNull ( parent, n ) ;^245^^^^^229^247^replaceWithNull ( n, parent ) ;^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[buglab_swap_variables]^replaceWithNull (  parent ) ;^245^^^^^229^247^replaceWithNull ( n, parent ) ;^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[buglab_swap_variables]^replaceWithNull ( n ) ;^245^^^^^229^247^replaceWithNull ( n, parent ) ;^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[buglab_swap_variables]^gramps.replaceChild (  rvalue ) ;^240^^^^^231^242^gramps.replaceChild ( parent, rvalue ) ;^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[buglab_swap_variables]^gramps.replaceChild ( parent ) ;^240^^^^^231^242^gramps.replaceChild ( parent, rvalue ) ;^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[buglab_swap_variables]^replaceWithEmpty ( greatGramps, gramps ) ;^234^^^^^219^249^replaceWithEmpty ( gramps, greatGramps ) ;^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[buglab_swap_variables]^replaceWithEmpty (  greatGramps ) ;^234^^^^^219^249^replaceWithEmpty ( gramps, greatGramps ) ;^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[buglab_swap_variables]^replaceWithEmpty ( gramps ) ;^234^^^^^219^249^replaceWithEmpty ( gramps, greatGramps ) ;^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[buglab_swap_variables]^gramps.replaceChild ( rvalue, parent ) ;^240^^^^^225^255^gramps.replaceChild ( parent, rvalue ) ;^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[buglab_swap_variables]^gramps.replaceChild (  rvalue ) ;^240^^^^^225^255^gramps.replaceChild ( parent, rvalue ) ;^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[buglab_swap_variables]^gramps.replaceChild ( parent ) ;^240^^^^^225^255^gramps.replaceChild ( parent, rvalue ) ;^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[buglab_swap_variables]^gramps.replaceChild ( rvalue, parent ) ;^240^^^^^231^242^gramps.replaceChild ( parent, rvalue ) ;^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[buglab_swap_variables]^replaceWithNull ( parent, n ) ;^245^^^^^230^260^replaceWithNull ( n, parent ) ;^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[buglab_swap_variables]^replaceWithNull (  parent ) ;^245^^^^^230^260^replaceWithNull ( n, parent ) ;^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[buglab_swap_variables]^replaceWithNull ( n ) ;^245^^^^^230^260^replaceWithNull ( n, parent ) ;^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[buglab_swap_variables]^if  ( n.getFirstChild (  )  == parent )  {^229^^^^^214^244^if  ( parent.getFirstChild (  )  == n )  {^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[buglab_swap_variables]^if  ( isReferenceToRemovedVar (  n )  )  {^252^^^^^237^267^if  ( isReferenceToRemovedVar ( t, n )  )  {^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[buglab_swap_variables]^if  ( isReferenceToRemovedVar ( t )  )  {^252^^^^^237^267^if  ( isReferenceToRemovedVar ( t, n )  )  {^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[buglab_swap_variables]^replaceWithNull ( parent, n ) ;^253^^^^^238^268^replaceWithNull ( n, parent ) ;^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[buglab_swap_variables]^replaceWithNull (  parent ) ;^253^^^^^238^268^replaceWithNull ( n, parent ) ;^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[buglab_swap_variables]^replaceWithNull ( n ) ;^253^^^^^238^268^replaceWithNull ( n, parent ) ;^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[buglab_swap_variables]^if  ( parent.getFirstChild (  )  == t && isReferenceToRemovedVar ( n, n )  )  {^187^^^^^172^202^if  ( parent.getFirstChild (  )  == n && isReferenceToRemovedVar ( t, n )  )  {^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[buglab_swap_variables]^if  ( isReferenceToRemovedVar ( n, t )  )  {^228^^^^^213^243^if  ( isReferenceToRemovedVar ( t, n )  )  {^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[buglab_swap_variables]^if  ( isReferenceToRemovedVar ( n, t )  )  {^252^^^^^237^267^if  ( isReferenceToRemovedVar ( t, n )  )  {^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[buglab_swap_variables]^replaceWithEmpty ( parent, n ) ;^281^^^^^269^285^replaceWithEmpty ( n, parent ) ;^[CLASS] Strip  [METHOD] maybeEliminateAssignmentByLvalueName [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  gramps  lvalue  n  parent  
[buglab_swap_variables]^replaceWithEmpty (  parent ) ;^281^^^^^269^285^replaceWithEmpty ( n, parent ) ;^[CLASS] Strip  [METHOD] maybeEliminateAssignmentByLvalueName [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  gramps  lvalue  n  parent  
[buglab_swap_variables]^replaceWithEmpty ( n ) ;^281^^^^^269^285^replaceWithEmpty ( n, parent ) ;^[CLASS] Strip  [METHOD] maybeEliminateAssignmentByLvalueName [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  gramps  lvalue  n  parent  
[buglab_swap_variables]^replaceWithEmpty ( gramps, parent ) ;^279^^^^^269^285^replaceWithEmpty ( parent, gramps ) ;^[CLASS] Strip  [METHOD] maybeEliminateAssignmentByLvalueName [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  gramps  lvalue  n  parent  
[buglab_swap_variables]^replaceWithEmpty (  gramps ) ;^279^^^^^269^285^replaceWithEmpty ( parent, gramps ) ;^[CLASS] Strip  [METHOD] maybeEliminateAssignmentByLvalueName [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  gramps  lvalue  n  parent  
[buglab_swap_variables]^replaceWithEmpty ( parent ) ;^279^^^^^269^285^replaceWithEmpty ( parent, gramps ) ;^[CLASS] Strip  [METHOD] maybeEliminateAssignmentByLvalueName [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  gramps  lvalue  n  parent  
[buglab_swap_variables]^if  ( expressionameEndsWithFieldNameToStrip ( n )  || qualifiedNameBeginsWithStripType ( expression )  )  {^304^305^^^^299^314^if  ( nameEndsWithFieldNameToStrip ( expression )  || qualifiedNameBeginsWithStripType ( expression )  )  {^[CLASS] Strip  [METHOD] maybeEliminateExpressionByName [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  expression  gramps  n  parent  
[buglab_swap_variables]^replaceWithEmpty ( parent, n ) ;^310^^^^^299^314^replaceWithEmpty ( n, parent ) ;^[CLASS] Strip  [METHOD] maybeEliminateExpressionByName [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  expression  gramps  n  parent  
[buglab_swap_variables]^replaceWithEmpty (  parent ) ;^310^^^^^299^314^replaceWithEmpty ( n, parent ) ;^[CLASS] Strip  [METHOD] maybeEliminateExpressionByName [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  expression  gramps  n  parent  
[buglab_swap_variables]^replaceWithEmpty ( n ) ;^310^^^^^299^314^replaceWithEmpty ( n, parent ) ;^[CLASS] Strip  [METHOD] maybeEliminateExpressionByName [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  expression  gramps  n  parent  
[buglab_swap_variables]^replaceWithEmpty ( gramps, parent ) ;^308^^^^^299^314^replaceWithEmpty ( parent, gramps ) ;^[CLASS] Strip  [METHOD] maybeEliminateExpressionByName [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  expression  gramps  n  parent  
[buglab_swap_variables]^replaceWithEmpty (  gramps ) ;^308^^^^^299^314^replaceWithEmpty ( parent, gramps ) ;^[CLASS] Strip  [METHOD] maybeEliminateExpressionByName [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  expression  gramps  n  parent  
[buglab_swap_variables]^replaceWithEmpty ( parent ) ;^308^^^^^299^314^replaceWithEmpty ( parent, gramps ) ;^[CLASS] Strip  [METHOD] maybeEliminateExpressionByName [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  expression  gramps  n  parent  
[buglab_swap_variables]^if  ( ancestorChild.getFirstChild (  )  != ancestor )  {^337^^^^^322^352^if  ( ancestor.getFirstChild (  )  != ancestorChild )  {^[CLASS] Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[buglab_swap_variables]^replaceWithNull ( ancestor, ancestorChild ) ;^338^^^^^323^353^replaceWithNull ( ancestorChild, ancestor ) ;^[CLASS] Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[buglab_swap_variables]^replaceWithNull (  ancestor ) ;^338^^^^^323^353^replaceWithNull ( ancestorChild, ancestor ) ;^[CLASS] Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[buglab_swap_variables]^replaceWithNull ( ancestorChildChild, ancestor ) ;^338^^^^^323^353^replaceWithNull ( ancestorChild, ancestor ) ;^[CLASS] Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[buglab_swap_variables]^replaceWithNull ( ancestorChild ) ;^338^^^^^323^353^replaceWithNull ( ancestorChild, ancestor ) ;^[CLASS] Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[buglab_swap_variables]^replaceWithEmpty ( ancParent, ancestor ) ;^344^^^^^329^359^replaceWithEmpty ( ancestor, ancParent ) ;^[CLASS] Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[buglab_swap_variables]^replaceWithEmpty (  ancParent ) ;^344^^^^^329^359^replaceWithEmpty ( ancestor, ancParent ) ;^[CLASS] Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[buglab_swap_variables]^replaceWithEmpty ( ancestor ) ;^344^^^^^329^359^replaceWithEmpty ( ancestor, ancParent ) ;^[CLASS] Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[buglab_swap_variables]^replaceWithNull ( ancestor, ancestorChild ) ;^351^^^^^348^353^replaceWithNull ( ancestorChild, ancestor ) ;^[CLASS] Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[buglab_swap_variables]^replaceWithNull (  ancestor ) ;^351^^^^^348^353^replaceWithNull ( ancestorChild, ancestor ) ;^[CLASS] Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[buglab_swap_variables]^replaceWithNull ( ancestorChildChild, ancestor ) ;^351^^^^^348^353^replaceWithNull ( ancestorChild, ancestor ) ;^[CLASS] Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[buglab_swap_variables]^replaceWithNull ( ancestorChild ) ;^351^^^^^348^353^replaceWithNull ( ancestorChild, ancestor ) ;^[CLASS] Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[buglab_swap_variables]^replaceWithNull ( ancestor, ancestorChild ) ;^351^^^^^336^366^replaceWithNull ( ancestorChild, ancestor ) ;^[CLASS] Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[buglab_swap_variables]^replaceWithNull (  ancestor ) ;^351^^^^^336^366^replaceWithNull ( ancestorChild, ancestor ) ;^[CLASS] Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[buglab_swap_variables]^replaceWithNull ( ancestorChildChild, ancestor ) ;^351^^^^^336^366^replaceWithNull ( ancestorChild, ancestor ) ;^[CLASS] Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[buglab_swap_variables]^replaceWithNull ( ancestorChild ) ;^351^^^^^336^366^replaceWithNull ( ancestorChild, ancestor ) ;^[CLASS] Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[buglab_swap_variables]^if  ( isMethodCallThatTriggersRemoval (  n, parent )  )  {^328^^^^^313^343^if  ( isMethodCallThatTriggersRemoval ( t, n, parent )  )  {^[CLASS] Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[buglab_swap_variables]^if  ( isMethodCallThatTriggersRemoval ( t,  parent )  )  {^328^^^^^313^343^if  ( isMethodCallThatTriggersRemoval ( t, n, parent )  )  {^[CLASS] Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[buglab_swap_variables]^if  ( isMethodCallThatTriggersRemoval ( t, n )  )  {^328^^^^^313^343^if  ( isMethodCallThatTriggersRemoval ( t, n, parent )  )  {^[CLASS] Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[buglab_swap_variables]^if  ( isMethodCallThatTriggersRemoval ( n, t, parent )  )  {^328^^^^^313^343^if  ( isMethodCallThatTriggersRemoval ( t, n, parent )  )  {^[CLASS] Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[buglab_swap_variables]^if  ( isMethodCallThatTriggersRemoval ( t, parent, n )  )  {^328^^^^^313^343^if  ( isMethodCallThatTriggersRemoval ( t, n, parent )  )  {^[CLASS] Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[buglab_swap_variables]^if  ( isMethodCallThatTriggersRemoval ( parent, n, t )  )  {^328^^^^^313^343^if  ( isMethodCallThatTriggersRemoval ( t, n, parent )  )  {^[CLASS] Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[buglab_swap_variables]^while  ( n != keyull )  {^374^^^^^368^387^while  ( key != null )  {^[CLASS] Strip  [METHOD] eliminateKeysWithStripNamesFromObjLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] boolean  NodeTraversal  t  Node  key  n  next  value  
[buglab_swap_variables]^if  ( type.equals ( name )  || name.startsWith ( type + "." )  )  {^434^^^^^431^445^if  ( name.equals ( type )  || name.startsWith ( type + "." )  )  {^[CLASS] Strip  [METHOD] qualifiedNameBeginsWithStripType [RETURN_TYPE] boolean   String name [VARIABLES] boolean  String  name  type  
[buglab_swap_variables]^if  ( type.startsWith ( name )  )  {^439^^^^^431^445^if  ( name.startsWith ( type )  )  {^[CLASS] Strip  [METHOD] qualifiedNameBeginsWithStripType [RETURN_TYPE] boolean   String name [VARIABLES] boolean  String  name  type  
[buglab_swap_variables]^Scope.Var var = name.getVar ( scope ) ;^458^^^^^455^460^Scope.Var var = scope.getVar ( name ) ;^[CLASS] Strip  [METHOD] isReferenceToRemovedVar [RETURN_TYPE] boolean   NodeTraversal t Node n [VARIABLES] boolean  Scope  scope  NodeTraversal  t  Var  var  Node  n  String  name  
[buglab_swap_variables]^return varsToRemovesToRemove.contains ( var ) ;^459^^^^^455^460^return varsToRemove.contains ( var ) ;^[CLASS] Strip  [METHOD] isReferenceToRemovedVar [RETURN_TYPE] boolean   NodeTraversal t Node n [VARIABLES] boolean  Scope  scope  NodeTraversal  t  Var  var  Node  n  String  name  
[buglab_swap_variables]^return var.contains ( varsToRemove ) ;^459^^^^^455^460^return varsToRemove.contains ( var ) ;^[CLASS] Strip  [METHOD] isReferenceToRemovedVar [RETURN_TYPE] boolean   NodeTraversal t Node n [VARIABLES] boolean  Scope  scope  NodeTraversal  t  Var  var  Node  n  String  name  
[buglab_swap_variables]^return calleeameEndsWithFieldNameToStrip ( n )  || nameEndsWithFieldNameToStrip ( function )  || qualifiedNameBeginsWithStripType ( callee )  || actsOnStripType ( t, n ) ;^505^506^507^508^^490^520^return nameEndsWithFieldNameToStrip ( callee )  || nameEndsWithFieldNameToStrip ( function )  || qualifiedNameBeginsWithStripType ( callee )  || actsOnStripType ( t, n ) ;^[CLASS] Strip  [METHOD] isMethodCallThatTriggersRemoval [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  callee  function  gramps  n  parent  
[buglab_swap_variables]^return nameEndsWithFieldNameToStrip ( function )  || nameEndsWithFieldNameToStrip ( callee )  || qualifiedNameBeginsWithStripType ( callee )  || actsOnStripType ( t, n ) ;^505^506^507^508^^490^520^return nameEndsWithFieldNameToStrip ( callee )  || nameEndsWithFieldNameToStrip ( function )  || qualifiedNameBeginsWithStripType ( callee )  || actsOnStripType ( t, n ) ;^[CLASS] Strip  [METHOD] isMethodCallThatTriggersRemoval [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  callee  function  gramps  n  parent  
[buglab_swap_variables]^return tameEndsWithFieldNameToStrip ( callee )  || nameEndsWithFieldNameToStrip ( function )  || qualifiedNameBeginsWithStripType ( callee )  || actsOnStripType ( n, n ) ;^505^506^507^508^^490^520^return nameEndsWithFieldNameToStrip ( callee )  || nameEndsWithFieldNameToStrip ( function )  || qualifiedNameBeginsWithStripType ( callee )  || actsOnStripType ( t, n ) ;^[CLASS] Strip  [METHOD] isMethodCallThatTriggersRemoval [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  callee  function  gramps  n  parent  
[buglab_swap_variables]^return nameEndsWithFieldNameToStrip ( callee )  || nameEndsWithFieldNameToStrip ( function )  || qualifiedNameBeginsWithStripType ( callee )  || actsOnStripType (  n ) ;^505^506^507^508^^490^520^return nameEndsWithFieldNameToStrip ( callee )  || nameEndsWithFieldNameToStrip ( function )  || qualifiedNameBeginsWithStripType ( callee )  || actsOnStripType ( t, n ) ;^[CLASS] Strip  [METHOD] isMethodCallThatTriggersRemoval [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  callee  function  gramps  n  parent  
[buglab_swap_variables]^return functionameEndsWithFieldNameToStrip ( callee )  || nameEndsWithFieldNameToStrip ( n )  || qualifiedNameBeginsWithStripType ( callee )  || actsOnStripType ( t, n ) ;^505^506^507^508^^490^520^return nameEndsWithFieldNameToStrip ( callee )  || nameEndsWithFieldNameToStrip ( function )  || qualifiedNameBeginsWithStripType ( callee )  || actsOnStripType ( t, n ) ;^[CLASS] Strip  [METHOD] isMethodCallThatTriggersRemoval [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  callee  function  gramps  n  parent  
[buglab_swap_variables]^return nameEndsWithFieldNameToStrip ( callee )  || nameEndsWithFieldNameToStrip ( function )  || qualifiedNameBeginsWithStripType ( callee )  || actsOnStripType ( t ) ;^505^506^507^508^^490^520^return nameEndsWithFieldNameToStrip ( callee )  || nameEndsWithFieldNameToStrip ( function )  || qualifiedNameBeginsWithStripType ( callee )  || actsOnStripType ( t, n ) ;^[CLASS] Strip  [METHOD] isMethodCallThatTriggersRemoval [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  callee  function  gramps  n  parent  
[buglab_swap_variables]^actsOnStripType ( n, t ) ;^508^^^^^493^523^actsOnStripType ( t, n ) ;^[CLASS] Strip  [METHOD] isMethodCallThatTriggersRemoval [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  callee  function  gramps  n  parent  
[buglab_swap_variables]^actsOnStripType (  n ) ;^508^^^^^493^523^actsOnStripType ( t, n ) ;^[CLASS] Strip  [METHOD] isMethodCallThatTriggersRemoval [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  callee  function  gramps  n  parent  
[buglab_swap_variables]^actsOnStripType ( t ) ;^508^^^^^493^523^actsOnStripType ( t, n ) ;^[CLASS] Strip  [METHOD] isMethodCallThatTriggersRemoval [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  callee  function  gramps  n  parent  
[buglab_swap_variables]^SubclassRelationship classes = callNode.getCodingConvention (  ) .getClassesDefinedByCall ( compiler ) ;^539^540^^^^538^557^SubclassRelationship classes = compiler.getCodingConvention (  ) .getClassesDefinedByCall ( callNode ) ;^[CLASS] Strip  [METHOD] actsOnStripType [RETURN_TYPE] boolean   NodeTraversal t Node callNode [VARIABLES] boolean  NodeTraversal  t  Node  callNode  SubclassRelationship  classes  
[buglab_swap_variables]^if  ( name.contains ( stripNameSuffixes )  || stripNamePrefixes.contains ( name )  )  {^567^568^^^^566^590^if  ( stripNameSuffixes.contains ( name )  || stripNamePrefixes.contains ( name )  )  {^[CLASS] Strip  [METHOD] isStripName [RETURN_TYPE] boolean   String name [VARIABLES] boolean  String  lcName  name  stripName  
[buglab_swap_variables]^if  ( stripNamePrefixes.contains ( name )  || stripNameSuffixes.contains ( name )  )  {^567^568^^^^566^590^if  ( stripNameSuffixes.contains ( name )  || stripNamePrefixes.contains ( name )  )  {^[CLASS] Strip  [METHOD] isStripName [RETURN_TYPE] boolean   String name [VARIABLES] boolean  String  lcName  name  stripName  
[buglab_swap_variables]^if  ( stripNameSuffixes.contains ( stripNamePrefixes )  || name.contains ( name )  )  {^567^568^^^^566^590^if  ( stripNameSuffixes.contains ( name )  || stripNamePrefixes.contains ( name )  )  {^[CLASS] Strip  [METHOD] isStripName [RETURN_TYPE] boolean   String name [VARIABLES] boolean  String  lcName  name  stripName  
[buglab_swap_variables]^if  ( stripName.startsWith ( lcName.toLowerCase (  )  )  )  {^578^^^^^566^590^if  ( lcName.startsWith ( stripName.toLowerCase (  )  )  )  {^[CLASS] Strip  [METHOD] isStripName [RETURN_TYPE] boolean   String name [VARIABLES] boolean  String  lcName  name  stripName  
[buglab_swap_variables]^if  ( stripName.endsWith ( lcName.toLowerCase (  )  )  )  {^584^^^^^566^590^if  ( lcName.endsWith ( stripName.toLowerCase (  )  )  )  {^[CLASS] Strip  [METHOD] isStripName [RETURN_TYPE] boolean   String name [VARIABLES] boolean  String  lcName  name  stripName  
[buglab_swap_variables]^parent.replaceChild (  new Node ( Token.NULL )  ) ;^600^^^^^599^601^parent.replaceChild ( n, new Node ( Token.NULL )  ) ;^[CLASS] Strip  [METHOD] replaceWithNull [RETURN_TYPE] void   Node n Node parent [VARIABLES] boolean  Node  n  parent  
[buglab_swap_variables]^NodeUtil.removeChild ( n, parent ) ;^611^^^^^610^612^NodeUtil.removeChild ( parent, n ) ;^[CLASS] Strip  [METHOD] replaceWithEmpty [RETURN_TYPE] void   Node n Node parent [VARIABLES] boolean  Node  n  parent  
[buglab_swap_variables]^NodeUtil.removeChild (  n ) ;^611^^^^^610^612^NodeUtil.removeChild ( parent, n ) ;^[CLASS] Strip  [METHOD] replaceWithEmpty [RETURN_TYPE] void   Node n Node parent [VARIABLES] boolean  Node  n  parent  
[buglab_swap_variables]^NodeUtil.removeChild ( parent ) ;^611^^^^^610^612^NodeUtil.removeChild ( parent, n ) ;^[CLASS] Strip  [METHOD] replaceWithEmpty [RETURN_TYPE] void   Node n Node parent [VARIABLES] boolean  Node  n  parent  
