[BugLab_Variable_Misuse]^NodeTraversal.traverse ( compiler, externs, new Strip (  )  ) ;^83^^^^^82^84^NodeTraversal.traverse ( compiler, root, new Strip (  )  ) ;^[CLASS] StripCode Strip  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  externs  root  
[BugLab_Argument_Swapping]^NodeTraversal.traverse ( root, compiler, new Strip (  )  ) ;^83^^^^^82^84^NodeTraversal.traverse ( compiler, root, new Strip (  )  ) ;^[CLASS] StripCode Strip  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  externs  root  
[BugLab_Variable_Misuse]^switch  ( parent.getType (  )  )  {^97^^^^^82^112^switch  ( n.getType (  )  )  {^[CLASS] StripCode Strip  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  n  parent  
[BugLab_Argument_Swapping]^removeVarDeclarationsByNameOrRvalue ( parent, n, t ) ;^99^^^^^84^114^removeVarDeclarationsByNameOrRvalue ( t, n, parent ) ;^[CLASS] StripCode Strip  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  n  parent  
[BugLab_Argument_Swapping]^removeVarDeclarationsByNameOrRvalue ( t, parent, n ) ;^99^^^^^84^114^removeVarDeclarationsByNameOrRvalue ( t, n, parent ) ;^[CLASS] StripCode Strip  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  n  parent  
[BugLab_Argument_Swapping]^maybeRemoveReferenceToRemovedVariable ( n, t, parent ) ;^103^^^^^88^118^maybeRemoveReferenceToRemovedVariable ( t, n, parent ) ;^[CLASS] StripCode Strip  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  n  parent  
[BugLab_Argument_Swapping]^maybeRemoveReferenceToRemovedVariable ( t, parent, n ) ;^103^^^^^88^118^maybeRemoveReferenceToRemovedVariable ( t, n, parent ) ;^[CLASS] StripCode Strip  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  n  parent  
[BugLab_Variable_Misuse]^maybeEliminateAssignmentByLvalueName ( t, parent, parent ) ;^118^^^^^103^133^maybeEliminateAssignmentByLvalueName ( t, n, parent ) ;^[CLASS] StripCode Strip  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  n  parent  
[BugLab_Argument_Swapping]^maybeEliminateAssignmentByLvalueName ( parent, n, t ) ;^118^^^^^103^133^maybeEliminateAssignmentByLvalueName ( t, n, parent ) ;^[CLASS] StripCode Strip  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  n  parent  
[BugLab_Argument_Swapping]^maybeEliminateAssignmentByLvalueName ( t, parent, n ) ;^118^^^^^103^133^maybeEliminateAssignmentByLvalueName ( t, n, parent ) ;^[CLASS] StripCode Strip  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  n  parent  
[BugLab_Argument_Swapping]^maybeRemoveCall ( n, t, parent ) ;^122^^^^^107^137^maybeRemoveCall ( t, n, parent ) ;^[CLASS] StripCode Strip  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  n  parent  
[BugLab_Argument_Swapping]^maybeRemoveCall ( t, parent, n ) ;^122^^^^^107^137^maybeRemoveCall ( t, n, parent ) ;^[CLASS] StripCode Strip  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  n  parent  
[BugLab_Argument_Swapping]^maybeRemoveCall ( parent, n, t ) ;^122^^^^^107^137^maybeRemoveCall ( t, n, parent ) ;^[CLASS] StripCode Strip  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  n  parent  
[BugLab_Variable_Misuse]^eliminateKeysWithStripNamesFromObjLit ( t, parent ) ;^126^^^^^111^141^eliminateKeysWithStripNamesFromObjLit ( t, n ) ;^[CLASS] StripCode Strip  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  n  parent  
[BugLab_Argument_Swapping]^eliminateKeysWithStripNamesFromObjLit ( n, t ) ;^126^^^^^111^141^eliminateKeysWithStripNamesFromObjLit ( t, n ) ;^[CLASS] StripCode Strip  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  n  parent  
[BugLab_Variable_Misuse]^maybeEliminateExpressionByName ( t, parent, parent ) ;^130^^^^^115^145^maybeEliminateExpressionByName ( t, n, parent ) ;^[CLASS] StripCode Strip  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  n  parent  
[BugLab_Argument_Swapping]^maybeEliminateExpressionByName ( parent, n, t ) ;^130^^^^^115^145^maybeEliminateExpressionByName ( t, n, parent ) ;^[CLASS] StripCode Strip  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  n  parent  
[BugLab_Argument_Swapping]^maybeEliminateExpressionByName ( t, parent, n ) ;^130^^^^^115^145^maybeEliminateExpressionByName ( t, n, parent ) ;^[CLASS] StripCode Strip  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  n  parent  
[BugLab_Variable_Misuse]^if  ( isStripName ( name )  || isCallWhoseReturnValueShouldBeStripped ( parent.getFirstChild (  )  )  )  {^149^150^^^^144^163^if  ( isStripName ( name )  || isCallWhoseReturnValueShouldBeStripped ( nameNode.getFirstChild (  )  )  )  {^[CLASS] StripCode Strip  [METHOD] removeVarDeclarationsByNameOrRvalue [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  Scope  scope  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  n  nameNode  parent  String  name  
[BugLab_Variable_Misuse]^if  ( isStripName ( parentame )  || isCallWhoseReturnValueShouldBeStripped ( nameNode.getFirstChild (  )  )  )  {^149^150^^^^144^163^if  ( isStripName ( name )  || isCallWhoseReturnValueShouldBeStripped ( nameNode.getFirstChild (  )  )  )  {^[CLASS] StripCode Strip  [METHOD] removeVarDeclarationsByNameOrRvalue [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  Scope  scope  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  n  nameNode  parent  String  name  
[BugLab_Argument_Swapping]^if  ( isStripName ( nameNodeame )  || isCallWhoseReturnValueShouldBeStripped ( n.getFirstChild (  )  )  )  {^149^150^^^^144^163^if  ( isStripName ( name )  || isCallWhoseReturnValueShouldBeStripped ( nameNode.getFirstChild (  )  )  )  {^[CLASS] StripCode Strip  [METHOD] removeVarDeclarationsByNameOrRvalue [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  Scope  scope  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  n  nameNode  parent  String  name  
[BugLab_Wrong_Operator]^if  ( isStripName ( name )  && isCallWhoseReturnValueShouldBeStripped ( nameNode.getFirstChild (  )  )  )  {^149^150^^^^144^163^if  ( isStripName ( name )  || isCallWhoseReturnValueShouldBeStripped ( nameNode.getFirstChild (  )  )  )  {^[CLASS] StripCode Strip  [METHOD] removeVarDeclarationsByNameOrRvalue [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  Scope  scope  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  n  nameNode  parent  String  name  
[BugLab_Argument_Swapping]^varsToRemove.add ( name.getVar ( scope )  ) ;^153^^^^^144^163^varsToRemove.add ( scope.getVar ( name )  ) ;^[CLASS] StripCode Strip  [METHOD] removeVarDeclarationsByNameOrRvalue [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  Scope  scope  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  n  nameNode  parent  String  name  
[BugLab_Variable_Misuse]^n.removeChild ( parentameNode ) ;^154^^^^^144^163^n.removeChild ( nameNode ) ;^[CLASS] StripCode Strip  [METHOD] removeVarDeclarationsByNameOrRvalue [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  Scope  scope  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  n  nameNode  parent  String  name  
[BugLab_Variable_Misuse]^n.removeChild ( parent ) ;^154^^^^^144^163^n.removeChild ( nameNode ) ;^[CLASS] StripCode Strip  [METHOD] removeVarDeclarationsByNameOrRvalue [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  Scope  scope  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  n  nameNode  parent  String  name  
[BugLab_Argument_Swapping]^n.removeChild ( nameNodeameNode ) ;^154^^^^^144^163^n.removeChild ( nameNode ) ;^[CLASS] StripCode Strip  [METHOD] removeVarDeclarationsByNameOrRvalue [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  Scope  scope  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  n  nameNode  parent  String  name  
[BugLab_Argument_Swapping]^n.removeChild ( n ) ;^154^^^^^144^163^n.removeChild ( nameNode ) ;^[CLASS] StripCode Strip  [METHOD] removeVarDeclarationsByNameOrRvalue [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  Scope  scope  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  n  nameNode  parent  String  name  
[BugLab_Variable_Misuse]^for  ( Node parentameNode = n.getFirstChild (  ) ; nameNode != null;^146^^^^^144^163^for  ( Node nameNode = n.getFirstChild (  ) ; nameNode != null;^[CLASS] StripCode Strip  [METHOD] removeVarDeclarationsByNameOrRvalue [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  Scope  scope  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  n  nameNode  parent  String  name  
[BugLab_Variable_Misuse]^for  ( Node parent = n.getFirstChild (  ) ; nameNode != null;^146^^^^^144^163^for  ( Node nameNode = n.getFirstChild (  ) ; nameNode != null;^[CLASS] StripCode Strip  [METHOD] removeVarDeclarationsByNameOrRvalue [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  Scope  scope  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  n  nameNode  parent  String  name  
[BugLab_Argument_Swapping]^for  ( Node n = nameNode.getFirstChild (  ) ; nameNode != null;^146^^^^^144^163^for  ( Node nameNode = n.getFirstChild (  ) ; nameNode != null;^[CLASS] StripCode Strip  [METHOD] removeVarDeclarationsByNameOrRvalue [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  Scope  scope  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  n  nameNode  parent  String  name  
[BugLab_Wrong_Operator]^for  ( Node nameNode = n.getFirstChild (  ) ; nameNode == null;^146^^^^^144^163^for  ( Node nameNode = n.getFirstChild (  ) ; nameNode != null;^[CLASS] StripCode Strip  [METHOD] removeVarDeclarationsByNameOrRvalue [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  Scope  scope  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  n  nameNode  parent  String  name  
[BugLab_Argument_Swapping]^if  ( isStripName ( n )  || isCallWhoseReturnValueShouldBeStripped ( nameameNode.getFirstChild (  )  )  )  {^149^150^^^^144^163^if  ( isStripName ( name )  || isCallWhoseReturnValueShouldBeStripped ( nameNode.getFirstChild (  )  )  )  {^[CLASS] StripCode Strip  [METHOD] removeVarDeclarationsByNameOrRvalue [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  Scope  scope  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  n  nameNode  parent  String  name  
[BugLab_Variable_Misuse]^String name = parent.getString (  ) ;^148^^^^^144^163^String name = nameNode.getString (  ) ;^[CLASS] StripCode Strip  [METHOD] removeVarDeclarationsByNameOrRvalue [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  Scope  scope  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  n  nameNode  parent  String  name  
[BugLab_Variable_Misuse]^isCallWhoseReturnValueShouldBeStripped ( parent.getFirstChild (  )  )  )  {^150^^^^^144^163^isCallWhoseReturnValueShouldBeStripped ( nameNode.getFirstChild (  )  )  )  {^[CLASS] StripCode Strip  [METHOD] removeVarDeclarationsByNameOrRvalue [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  Scope  scope  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  n  nameNode  parent  String  name  
[BugLab_Variable_Misuse]^nameNode = parent.getNext (  )  )  {^147^^^^^144^163^nameNode = nameNode.getNext (  )  )  {^[CLASS] StripCode Strip  [METHOD] removeVarDeclarationsByNameOrRvalue [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  Scope  scope  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  n  nameNode  parent  String  name  
[BugLab_Variable_Misuse]^if  ( !n.hasChildrenameNode (  )  )  {^158^^^^^144^163^if  ( !n.hasChildren (  )  )  {^[CLASS] StripCode Strip  [METHOD] removeVarDeclarationsByNameOrRvalue [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  Scope  scope  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  n  nameNode  parent  String  name  
[BugLab_Variable_Misuse]^replaceWithEmpty ( nameNode, parent ) ;^160^^^^^144^163^replaceWithEmpty ( n, parent ) ;^[CLASS] StripCode Strip  [METHOD] removeVarDeclarationsByNameOrRvalue [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  Scope  scope  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  n  nameNode  parent  String  name  
[BugLab_Variable_Misuse]^replaceWithEmpty ( n, nameNode ) ;^160^^^^^144^163^replaceWithEmpty ( n, parent ) ;^[CLASS] StripCode Strip  [METHOD] removeVarDeclarationsByNameOrRvalue [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  Scope  scope  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  n  nameNode  parent  String  name  
[BugLab_Argument_Swapping]^replaceWithEmpty ( parent, n ) ;^160^^^^^144^163^replaceWithEmpty ( n, parent ) ;^[CLASS] StripCode Strip  [METHOD] removeVarDeclarationsByNameOrRvalue [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  Scope  scope  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  n  nameNode  parent  String  name  
[BugLab_Variable_Misuse]^if  ( !n.hasChildreparent (  )  )  {^158^^^^^144^163^if  ( !n.hasChildren (  )  )  {^[CLASS] StripCode Strip  [METHOD] removeVarDeclarationsByNameOrRvalue [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  Scope  scope  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  n  nameNode  parent  String  name  
[BugLab_Wrong_Literal]^while  ( false )  {^195^^^^^180^210^while  ( true )  {^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[BugLab_Variable_Misuse]^if  ( NodeUtil.isExpressionNode ( rvalue )  )  {^196^^^^^181^211^if  ( NodeUtil.isExpressionNode ( ancestor )  )  {^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[BugLab_Variable_Misuse]^Node ancParent = parent.getParent (  ) ;^198^^^^^183^213^Node ancParent = ancestor.getParent (  ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[BugLab_Variable_Misuse]^Node ancParent = rvalue.getParent (  ) ;^198^^^^^183^213^Node ancParent = ancestor.getParent (  ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[BugLab_Variable_Misuse]^replaceWithEmpty ( rvalue, ancParent ) ;^199^^^^^184^214^replaceWithEmpty ( ancestor, ancParent ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[BugLab_Variable_Misuse]^replaceWithEmpty ( ancestor, parent ) ;^199^^^^^184^214^replaceWithEmpty ( ancestor, ancParent ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[BugLab_Argument_Swapping]^replaceWithEmpty ( ancParent, ancestor ) ;^199^^^^^184^214^replaceWithEmpty ( ancestor, ancParent ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[BugLab_Variable_Misuse]^if  ( type != Token.this && type != Token.GETELEM && type != Token.CALL )  {^203^204^205^^^188^218^if  ( type != Token.GETPROP && type != Token.GETELEM && type != Token.CALL )  {^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[BugLab_Variable_Misuse]^if  ( type != Token.GETPROP && type != Token.GETELEM && type != Token.this )  {^203^204^205^^^188^218^if  ( type != Token.GETPROP && type != Token.GETELEM && type != Token.CALL )  {^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[BugLab_Wrong_Operator]^if  ( type != Token.GETPROP || type != Token.GETELEM && type != Token.CALL )  {^203^204^205^^^188^218^if  ( type != Token.GETPROP && type != Token.GETELEM && type != Token.CALL )  {^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[BugLab_Wrong_Operator]^if  ( type >= Token.GETPROP && type != Token.GETELEM && type != Token.CALL )  {^203^204^205^^^188^218^if  ( type != Token.GETPROP && type != Token.GETELEM && type != Token.CALL )  {^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[BugLab_Wrong_Operator]^if  ( type == Token.GETPROP && type != Token.GETELEM && type != Token.CALL )  {^203^204^205^^^188^218^if  ( type != Token.GETPROP && type != Token.GETELEM && type != Token.CALL )  {^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[BugLab_Variable_Misuse]^replaceWithNull ( rvalue, ancestor ) ;^206^^^^^203^208^replaceWithNull ( ancestorChild, ancestor ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[BugLab_Variable_Misuse]^replaceWithNull ( rvalueChild, ancestor ) ;^206^^^^^203^208^replaceWithNull ( ancestorChild, ancestor ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[BugLab_Argument_Swapping]^replaceWithNull ( ancestor, ancestorChild ) ;^206^^^^^203^208^replaceWithNull ( ancestorChild, ancestor ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[BugLab_Argument_Swapping]^replaceWithNull ( ancestorChildChild, ancestor ) ;^206^^^^^203^208^replaceWithNull ( ancestorChild, ancestor ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[BugLab_Variable_Misuse]^ancestorChild = rvalue;^209^^^^^194^224^ancestorChild = ancestor;^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[BugLab_Variable_Misuse]^if  ( NodeUtil.isExpressionNode ( n )  )  {^196^^^^^181^211^if  ( NodeUtil.isExpressionNode ( ancestor )  )  {^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[BugLab_Variable_Misuse]^Node ancParent = n.getParent (  ) ;^198^^^^^183^213^Node ancParent = ancestor.getParent (  ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[BugLab_Variable_Misuse]^int type = rvalue.getType (  ) ;^202^^^^^187^217^int type = ancestor.getType (  ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[BugLab_Variable_Misuse]^replaceWithNull ( rvalue, ancestor ) ;^206^^^^^191^221^replaceWithNull ( ancestorChild, ancestor ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[BugLab_Variable_Misuse]^replaceWithNull ( parentChild, ancestor ) ;^206^^^^^191^221^replaceWithNull ( ancestorChild, ancestor ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[BugLab_Argument_Swapping]^replaceWithNull ( ancestor, ancestorChild ) ;^206^^^^^191^221^replaceWithNull ( ancestorChild, ancestor ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[BugLab_Argument_Swapping]^replaceWithNull ( ancestorChildChild, ancestor ) ;^206^^^^^191^221^replaceWithNull ( ancestorChild, ancestor ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[BugLab_Variable_Misuse]^ancestor = n.getParent (  ) ;^210^^^^^195^225^ancestor = ancestor.getParent (  ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[BugLab_Variable_Misuse]^if  ( rvalue.getFirstChild (  )  == n && isReferenceToRemovedVar ( t, n )  )  {^187^^^^^172^202^if  ( parent.getFirstChild (  )  == n && isReferenceToRemovedVar ( t, n )  )  {^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[BugLab_Variable_Misuse]^if  ( parent.getFirstChild (  )  == rvalue && isReferenceToRemovedVar ( t, n )  )  {^187^^^^^172^202^if  ( parent.getFirstChild (  )  == n && isReferenceToRemovedVar ( t, n )  )  {^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[BugLab_Argument_Swapping]^if  ( n.getFirstChild (  )  == parent && isReferenceToRemovedVar ( t, n )  )  {^187^^^^^172^202^if  ( parent.getFirstChild (  )  == n && isReferenceToRemovedVar ( t, n )  )  {^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[BugLab_Wrong_Operator]^if  ( parent.getFirstChild (  )  == n || isReferenceToRemovedVar ( t, n )  )  {^187^^^^^172^202^if  ( parent.getFirstChild (  )  == n && isReferenceToRemovedVar ( t, n )  )  {^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[BugLab_Wrong_Operator]^if  ( parent.getFirstChild (  )  != n && isReferenceToRemovedVar ( t, n )  )  {^187^^^^^172^202^if  ( parent.getFirstChild (  )  == n && isReferenceToRemovedVar ( t, n )  )  {^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[BugLab_Variable_Misuse]^if  ( NodeUtil.isExpressionNode ( parent )  )  {^196^^^^^181^211^if  ( NodeUtil.isExpressionNode ( ancestor )  )  {^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[BugLab_Variable_Misuse]^replaceWithEmpty ( parent, ancParent ) ;^199^^^^^184^214^replaceWithEmpty ( ancestor, ancParent ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[BugLab_Variable_Misuse]^replaceWithEmpty ( ancestor, rvalue ) ;^199^^^^^184^214^replaceWithEmpty ( ancestor, ancParent ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[BugLab_Wrong_Operator]^if  ( type < Token.GETPROP && type != Token.GETELEM && type != Token.CALL )  {^203^204^205^^^188^218^if  ( type != Token.GETPROP && type != Token.GETELEM && type != Token.CALL )  {^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[BugLab_Variable_Misuse]^replaceWithNull ( parent, ancestor ) ;^206^^^^^203^208^replaceWithNull ( ancestorChild, ancestor ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[BugLab_Variable_Misuse]^ancestorChild = parent;^209^^^^^194^224^ancestorChild = ancestor;^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[BugLab_Variable_Misuse]^ancestor = parent.getParent (  ) ;^210^^^^^195^225^ancestor = ancestor.getParent (  ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[BugLab_Variable_Misuse]^int type = n.getType (  ) ;^202^^^^^187^217^int type = ancestor.getType (  ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[BugLab_Variable_Misuse]^replaceWithNull ( rvalueChild, ancestor ) ;^206^^^^^191^221^replaceWithNull ( ancestorChild, ancestor ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[BugLab_Variable_Misuse]^ancestor = rvalue.getParent (  ) ;^210^^^^^195^225^ancestor = ancestor.getParent (  ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[BugLab_Variable_Misuse]^if  ( type != Token.GETPROP && type != Token.this && type != Token.CALL )  {^203^204^205^^^188^218^if  ( type != Token.GETPROP && type != Token.GETELEM && type != Token.CALL )  {^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[BugLab_Wrong_Operator]^if  ( type > Token.GETPROP && type != Token.GETELEM && type != Token.CALL )  {^203^204^205^^^188^218^if  ( type != Token.GETPROP && type != Token.GETELEM && type != Token.CALL )  {^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[BugLab_Variable_Misuse]^replaceWithNull ( parentChild, ancestor ) ;^206^^^^^203^208^replaceWithNull ( ancestorChild, ancestor ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[BugLab_Variable_Misuse]^Node ancestor = rvalue.getParent (  ) ;^193^^^^^178^208^Node ancestor = parent.getParent (  ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[BugLab_Variable_Misuse]^Node ancestorChild = rvalue;^194^^^^^179^209^Node ancestorChild = parent;^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[BugLab_Variable_Misuse]^int type = parent.getType (  ) ;^202^^^^^187^217^int type = ancestor.getType (  ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[BugLab_Variable_Misuse]^replaceWithNull ( parent, ancestor ) ;^206^^^^^191^221^replaceWithNull ( ancestorChild, ancestor ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[BugLab_Wrong_Operator]^if  ( type <= Token.GETPROP && type != Token.GETELEM && type != Token.CALL )  {^203^204^205^^^188^218^if  ( type != Token.GETPROP && type != Token.GETELEM && type != Token.CALL )  {^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[BugLab_Variable_Misuse]^if  ( isReferenceToRemovedVar ( t, parent )  )  {^228^^^^^213^243^if  ( isReferenceToRemovedVar ( t, n )  )  {^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[BugLab_Variable_Misuse]^if  ( rvalue.getFirstChild (  )  == n )  {^229^^^^^214^244^if  ( parent.getFirstChild (  )  == n )  {^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[BugLab_Wrong_Operator]^if  ( parent.getFirstChild (  )  != n )  {^229^^^^^214^244^if  ( parent.getFirstChild (  )  == n )  {^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[BugLab_Variable_Misuse]^replaceWithNull ( rvalue, parent ) ;^245^^^^^229^247^replaceWithNull ( n, parent ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[BugLab_Variable_Misuse]^replaceWithNull ( n, rvalue ) ;^245^^^^^229^247^replaceWithNull ( n, parent ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[BugLab_Argument_Swapping]^replaceWithNull ( parent, n ) ;^245^^^^^229^247^replaceWithNull ( n, parent ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[BugLab_Variable_Misuse]^if  ( NodeUtil.isExpressionNode ( rvalue )  )  {^231^^^^^216^246^if  ( NodeUtil.isExpressionNode ( gramps )  )  {^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[BugLab_Variable_Misuse]^Node rvalue = greatGramps.getNext (  ) ;^238^^^^^231^242^Node rvalue = n.getNext (  ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[BugLab_Variable_Misuse]^Node rvalue = parent.getNext (  ) ;^238^^^^^231^242^Node rvalue = n.getNext (  ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[BugLab_Variable_Misuse]^parent.removeChild ( n ) ;^239^^^^^231^242^parent.removeChild ( rvalue ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[BugLab_Variable_Misuse]^gramps.replaceChild ( n, rvalue ) ;^240^^^^^231^242^gramps.replaceChild ( parent, rvalue ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[BugLab_Variable_Misuse]^gramps.replaceChild ( parent, n ) ;^240^^^^^231^242^gramps.replaceChild ( parent, rvalue ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[BugLab_Argument_Swapping]^gramps.replaceChild ( rvalue, parent ) ;^240^^^^^231^242^gramps.replaceChild ( parent, rvalue ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[BugLab_Variable_Misuse]^Node greatGramps = rvalue.getParent (  ) ;^233^^^^^218^248^Node greatGramps = gramps.getParent (  ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[BugLab_Variable_Misuse]^Node greatGramps = n.getParent (  ) ;^233^^^^^218^248^Node greatGramps = gramps.getParent (  ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[BugLab_Variable_Misuse]^replaceWithEmpty ( rvalue, greatGramps ) ;^234^^^^^219^249^replaceWithEmpty ( gramps, greatGramps ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[BugLab_Argument_Swapping]^replaceWithEmpty ( greatGramps, gramps ) ;^234^^^^^219^249^replaceWithEmpty ( gramps, greatGramps ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[BugLab_Variable_Misuse]^Node gramps = rvalue.getParent (  ) ;^230^^^^^215^245^Node gramps = parent.getParent (  ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[BugLab_Variable_Misuse]^Node rvalue = parent.getNext (  ) ;^238^^^^^223^253^Node rvalue = n.getNext (  ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[BugLab_Variable_Misuse]^Node gramps = n.getParent (  ) ;^230^^^^^215^245^Node gramps = parent.getParent (  ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[BugLab_Variable_Misuse]^replaceWithEmpty ( parent, greatGramps ) ;^234^^^^^219^249^replaceWithEmpty ( gramps, greatGramps ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[BugLab_Variable_Misuse]^replaceWithEmpty ( gramps, rvalue ) ;^234^^^^^219^249^replaceWithEmpty ( gramps, greatGramps ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[BugLab_Variable_Misuse]^parent.removeChild ( greatGramps ) ;^239^^^^^224^254^parent.removeChild ( rvalue ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[BugLab_Variable_Misuse]^gramps.replaceChild ( rvalue, rvalue ) ;^240^^^^^225^255^gramps.replaceChild ( parent, rvalue ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[BugLab_Variable_Misuse]^gramps.replaceChild ( parent, parent ) ;^240^^^^^225^255^gramps.replaceChild ( parent, rvalue ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[BugLab_Variable_Misuse]^Node rvalue = rvalue.getNext (  ) ;^238^^^^^231^242^Node rvalue = n.getNext (  ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[BugLab_Variable_Misuse]^parent.removeChild ( greatGramps ) ;^239^^^^^231^242^parent.removeChild ( rvalue ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[BugLab_Variable_Misuse]^gramps.replaceChild ( rvalue, rvalue ) ;^240^^^^^231^242^gramps.replaceChild ( parent, rvalue ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[BugLab_Variable_Misuse]^Node rvalue = greatGramps.getNext (  ) ;^238^^^^^223^253^Node rvalue = n.getNext (  ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[BugLab_Variable_Misuse]^if  ( greatGramps.getFirstChild (  )  == n )  {^229^^^^^214^244^if  ( parent.getFirstChild (  )  == n )  {^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[BugLab_Variable_Misuse]^replaceWithEmpty ( gramps, parent ) ;^234^^^^^219^249^replaceWithEmpty ( gramps, greatGramps ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[BugLab_Argument_Swapping]^gramps.replaceChild ( rvalue, parent ) ;^240^^^^^225^255^gramps.replaceChild ( parent, rvalue ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[BugLab_Variable_Misuse]^replaceWithNull ( rvalue, parent ) ;^245^^^^^230^260^replaceWithNull ( n, parent ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[BugLab_Variable_Misuse]^replaceWithNull ( n, rvalue ) ;^245^^^^^230^260^replaceWithNull ( n, parent ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[BugLab_Argument_Swapping]^replaceWithNull ( parent, n ) ;^245^^^^^230^260^replaceWithNull ( n, parent ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[BugLab_Variable_Misuse]^if  ( parent.getFirstChild (  )  == rvalue )  {^229^^^^^214^244^if  ( parent.getFirstChild (  )  == n )  {^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[BugLab_Wrong_Operator]^if  ( parent.getFirstChild (  )  >= n )  {^229^^^^^214^244^if  ( parent.getFirstChild (  )  == n )  {^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[BugLab_Variable_Misuse]^Node greatGramps = parent.getParent (  ) ;^233^^^^^218^248^Node greatGramps = gramps.getParent (  ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[BugLab_Variable_Misuse]^Node gramps = greatGramps.getParent (  ) ;^230^^^^^215^245^Node gramps = parent.getParent (  ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[BugLab_Variable_Misuse]^if  ( NodeUtil.isExpressionNode ( n )  )  {^231^^^^^216^246^if  ( NodeUtil.isExpressionNode ( gramps )  )  {^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[BugLab_Variable_Misuse]^Node rvalue = rvalue.getNext (  ) ;^238^^^^^223^253^Node rvalue = n.getNext (  ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[BugLab_Variable_Misuse]^parent.removeChild ( n ) ;^239^^^^^224^254^parent.removeChild ( rvalue ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[BugLab_Variable_Misuse]^gramps.replaceChild ( parent, n ) ;^240^^^^^225^255^gramps.replaceChild ( parent, rvalue ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[BugLab_Variable_Misuse]^if  ( isReferenceToRemovedVar ( t, greatGramps )  )  {^252^^^^^237^267^if  ( isReferenceToRemovedVar ( t, n )  )  {^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[BugLab_Variable_Misuse]^replaceWithNull ( greatGramps, parent ) ;^253^^^^^238^268^replaceWithNull ( n, parent ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[BugLab_Variable_Misuse]^replaceWithNull ( n, greatGramps ) ;^253^^^^^238^268^replaceWithNull ( n, parent ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[BugLab_Argument_Swapping]^replaceWithNull ( parent, n ) ;^253^^^^^238^268^replaceWithNull ( n, parent ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[BugLab_Variable_Misuse]^switch  ( rvalue.getType (  )  )  {^174^^^^^159^189^switch  ( parent.getType (  )  )  {^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[BugLab_Argument_Swapping]^if  ( parent.getFirstChild (  )  == t && isReferenceToRemovedVar ( n, n )  )  {^187^^^^^172^202^if  ( parent.getFirstChild (  )  == n && isReferenceToRemovedVar ( t, n )  )  {^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[BugLab_Variable_Misuse]^if  ( isReferenceToRemovedVar ( t, rvalue )  )  {^228^^^^^213^243^if  ( isReferenceToRemovedVar ( t, n )  )  {^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[BugLab_Argument_Swapping]^if  ( isReferenceToRemovedVar ( n, t )  )  {^228^^^^^213^243^if  ( isReferenceToRemovedVar ( t, n )  )  {^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[BugLab_Variable_Misuse]^gramps.replaceChild ( n, rvalue ) ;^240^^^^^225^255^gramps.replaceChild ( parent, rvalue ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[BugLab_Variable_Misuse]^gramps.replaceChild ( parent, greatGramps ) ;^240^^^^^225^255^gramps.replaceChild ( parent, rvalue ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[BugLab_Variable_Misuse]^if  ( isReferenceToRemovedVar ( t, parent )  )  {^252^^^^^237^267^if  ( isReferenceToRemovedVar ( t, n )  )  {^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[BugLab_Argument_Swapping]^if  ( isReferenceToRemovedVar ( n, t )  )  {^252^^^^^237^267^if  ( isReferenceToRemovedVar ( t, n )  )  {^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[BugLab_Variable_Misuse]^replaceWithNull ( n, rvalue ) ;^253^^^^^238^268^replaceWithNull ( n, parent ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[BugLab_Variable_Misuse]^Node lvalue = parent.getFirstChild (  ) ;^274^^^^^269^285^Node lvalue = n.getFirstChild (  ) ;^[CLASS] StripCode Strip  [METHOD] maybeEliminateAssignmentByLvalueName [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  gramps  lvalue  n  parent  
[BugLab_Variable_Misuse]^if  ( nameEndsWithFieldNameToStrip ( parent )  || qualifiedNameBeginsWithStripType ( lvalue )  )  {^275^276^^^^269^285^if  ( nameEndsWithFieldNameToStrip ( lvalue )  || qualifiedNameBeginsWithStripType ( lvalue )  )  {^[CLASS] StripCode Strip  [METHOD] maybeEliminateAssignmentByLvalueName [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  gramps  lvalue  n  parent  
[BugLab_Variable_Misuse]^if  ( parentameEndsWithFieldNameToStrip ( lvalue )  || qualifiedNameBeginsWithStripType ( lvalue )  )  {^275^276^^^^269^285^if  ( nameEndsWithFieldNameToStrip ( lvalue )  || qualifiedNameBeginsWithStripType ( lvalue )  )  {^[CLASS] StripCode Strip  [METHOD] maybeEliminateAssignmentByLvalueName [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  gramps  lvalue  n  parent  
[BugLab_Wrong_Operator]^if  ( nameEndsWithFieldNameToStrip ( lvalue )  && qualifiedNameBeginsWithStripType ( lvalue )  )  {^275^276^^^^269^285^if  ( nameEndsWithFieldNameToStrip ( lvalue )  || qualifiedNameBeginsWithStripType ( lvalue )  )  {^[CLASS] StripCode Strip  [METHOD] maybeEliminateAssignmentByLvalueName [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  gramps  lvalue  n  parent  
[BugLab_Variable_Misuse]^if  ( NodeUtil.isExpressionNode ( n )  )  {^277^^^^^269^285^if  ( NodeUtil.isExpressionNode ( parent )  )  {^[CLASS] StripCode Strip  [METHOD] maybeEliminateAssignmentByLvalueName [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  gramps  lvalue  n  parent  
[BugLab_Variable_Misuse]^replaceWithEmpty ( lvalue, parent ) ;^281^^^^^269^285^replaceWithEmpty ( n, parent ) ;^[CLASS] StripCode Strip  [METHOD] maybeEliminateAssignmentByLvalueName [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  gramps  lvalue  n  parent  
[BugLab_Variable_Misuse]^replaceWithEmpty ( n, lvalue ) ;^281^^^^^269^285^replaceWithEmpty ( n, parent ) ;^[CLASS] StripCode Strip  [METHOD] maybeEliminateAssignmentByLvalueName [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  gramps  lvalue  n  parent  
[BugLab_Argument_Swapping]^replaceWithEmpty ( parent, n ) ;^281^^^^^269^285^replaceWithEmpty ( n, parent ) ;^[CLASS] StripCode Strip  [METHOD] maybeEliminateAssignmentByLvalueName [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  gramps  lvalue  n  parent  
[BugLab_Variable_Misuse]^Node gramps = n.getParent (  ) ;^278^^^^^269^285^Node gramps = parent.getParent (  ) ;^[CLASS] StripCode Strip  [METHOD] maybeEliminateAssignmentByLvalueName [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  gramps  lvalue  n  parent  
[BugLab_Variable_Misuse]^replaceWithEmpty ( n, gramps ) ;^279^^^^^269^285^replaceWithEmpty ( parent, gramps ) ;^[CLASS] StripCode Strip  [METHOD] maybeEliminateAssignmentByLvalueName [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  gramps  lvalue  n  parent  
[BugLab_Argument_Swapping]^replaceWithEmpty ( gramps, parent ) ;^279^^^^^269^285^replaceWithEmpty ( parent, gramps ) ;^[CLASS] StripCode Strip  [METHOD] maybeEliminateAssignmentByLvalueName [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  gramps  lvalue  n  parent  
[BugLab_Variable_Misuse]^replaceWithEmpty ( parent, n ) ;^279^^^^^269^285^replaceWithEmpty ( parent, gramps ) ;^[CLASS] StripCode Strip  [METHOD] maybeEliminateAssignmentByLvalueName [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  gramps  lvalue  n  parent  
[BugLab_Variable_Misuse]^qualifiedNameBeginsWithStripType ( parent )  )  {^276^^^^^269^285^qualifiedNameBeginsWithStripType ( lvalue )  )  {^[CLASS] StripCode Strip  [METHOD] maybeEliminateAssignmentByLvalueName [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  gramps  lvalue  n  parent  
[BugLab_Variable_Misuse]^Node expression = parent.getFirstChild (  ) ;^303^^^^^299^314^Node expression = n.getFirstChild (  ) ;^[CLASS] StripCode Strip  [METHOD] maybeEliminateExpressionByName [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  expression  gramps  n  parent  
[BugLab_Variable_Misuse]^if  ( nameEndsWithFieldNameToStrip ( parent )  || qualifiedNameBeginsWithStripType ( expression )  )  {^304^305^^^^299^314^if  ( nameEndsWithFieldNameToStrip ( expression )  || qualifiedNameBeginsWithStripType ( expression )  )  {^[CLASS] StripCode Strip  [METHOD] maybeEliminateExpressionByName [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  expression  gramps  n  parent  
[BugLab_Variable_Misuse]^if  ( parentameEndsWithFieldNameToStrip ( expression )  || qualifiedNameBeginsWithStripType ( expression )  )  {^304^305^^^^299^314^if  ( nameEndsWithFieldNameToStrip ( expression )  || qualifiedNameBeginsWithStripType ( expression )  )  {^[CLASS] StripCode Strip  [METHOD] maybeEliminateExpressionByName [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  expression  gramps  n  parent  
[BugLab_Wrong_Operator]^if  ( nameEndsWithFieldNameToStrip ( expression )  && qualifiedNameBeginsWithStripType ( expression )  )  {^304^305^^^^299^314^if  ( nameEndsWithFieldNameToStrip ( expression )  || qualifiedNameBeginsWithStripType ( expression )  )  {^[CLASS] StripCode Strip  [METHOD] maybeEliminateExpressionByName [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  expression  gramps  n  parent  
[BugLab_Variable_Misuse]^if  ( NodeUtil.isExpressionNode ( n )  )  {^306^^^^^299^314^if  ( NodeUtil.isExpressionNode ( parent )  )  {^[CLASS] StripCode Strip  [METHOD] maybeEliminateExpressionByName [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  expression  gramps  n  parent  
[BugLab_Variable_Misuse]^replaceWithEmpty ( gramps, parent ) ;^310^^^^^299^314^replaceWithEmpty ( n, parent ) ;^[CLASS] StripCode Strip  [METHOD] maybeEliminateExpressionByName [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  expression  gramps  n  parent  
[BugLab_Variable_Misuse]^replaceWithEmpty ( n, gramps ) ;^310^^^^^299^314^replaceWithEmpty ( n, parent ) ;^[CLASS] StripCode Strip  [METHOD] maybeEliminateExpressionByName [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  expression  gramps  n  parent  
[BugLab_Argument_Swapping]^replaceWithEmpty ( parent, n ) ;^310^^^^^299^314^replaceWithEmpty ( n, parent ) ;^[CLASS] StripCode Strip  [METHOD] maybeEliminateExpressionByName [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  expression  gramps  n  parent  
[BugLab_Variable_Misuse]^Node gramps = n.getParent (  ) ;^307^^^^^299^314^Node gramps = parent.getParent (  ) ;^[CLASS] StripCode Strip  [METHOD] maybeEliminateExpressionByName [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  expression  gramps  n  parent  
[BugLab_Variable_Misuse]^replaceWithEmpty ( n, gramps ) ;^308^^^^^299^314^replaceWithEmpty ( parent, gramps ) ;^[CLASS] StripCode Strip  [METHOD] maybeEliminateExpressionByName [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  expression  gramps  n  parent  
[BugLab_Variable_Misuse]^replaceWithEmpty ( parent, n ) ;^308^^^^^299^314^replaceWithEmpty ( parent, gramps ) ;^[CLASS] StripCode Strip  [METHOD] maybeEliminateExpressionByName [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  expression  gramps  n  parent  
[BugLab_Argument_Swapping]^replaceWithEmpty ( gramps, parent ) ;^308^^^^^299^314^replaceWithEmpty ( parent, gramps ) ;^[CLASS] StripCode Strip  [METHOD] maybeEliminateExpressionByName [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  expression  gramps  n  parent  
[BugLab_Variable_Misuse]^qualifiedNameBeginsWithStripType ( parent )  )  {^305^^^^^299^314^qualifiedNameBeginsWithStripType ( expression )  )  {^[CLASS] StripCode Strip  [METHOD] maybeEliminateExpressionByName [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  expression  gramps  n  parent  
[BugLab_Wrong_Literal]^while  ( false )  {^336^^^^^321^351^while  ( true )  {^[CLASS] StripCode Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[BugLab_Variable_Misuse]^if  ( parent.getFirstChild (  )  != ancestorChild )  {^337^^^^^322^352^if  ( ancestor.getFirstChild (  )  != ancestorChild )  {^[CLASS] StripCode Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[BugLab_Variable_Misuse]^if  ( ancestor.getFirstChild (  )  != parent )  {^337^^^^^322^352^if  ( ancestor.getFirstChild (  )  != ancestorChild )  {^[CLASS] StripCode Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[BugLab_Argument_Swapping]^if  ( ancestorChild.getFirstChild (  )  != ancestor )  {^337^^^^^322^352^if  ( ancestor.getFirstChild (  )  != ancestorChild )  {^[CLASS] StripCode Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[BugLab_Wrong_Operator]^if  ( ancestor.getFirstChild (  )  <= ancestorChild )  {^337^^^^^322^352^if  ( ancestor.getFirstChild (  )  != ancestorChild )  {^[CLASS] StripCode Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[BugLab_Variable_Misuse]^replaceWithNull ( parent, ancestor ) ;^338^^^^^323^353^replaceWithNull ( ancestorChild, ancestor ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[BugLab_Variable_Misuse]^replaceWithNull ( parentChild, ancestor ) ;^338^^^^^323^353^replaceWithNull ( ancestorChild, ancestor ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[BugLab_Argument_Swapping]^replaceWithNull ( ancestor, ancestorChild ) ;^338^^^^^323^353^replaceWithNull ( ancestorChild, ancestor ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[BugLab_Argument_Swapping]^replaceWithNull ( ancestorChildChild, ancestor ) ;^338^^^^^323^353^replaceWithNull ( ancestorChild, ancestor ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[BugLab_Variable_Misuse]^if  ( NodeUtil.isExpressionNode ( parent )  )  {^341^^^^^326^356^if  ( NodeUtil.isExpressionNode ( ancestor )  )  {^[CLASS] StripCode Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[BugLab_Variable_Misuse]^Node ancParent = parent.getParent (  ) ;^343^^^^^328^358^Node ancParent = ancestor.getParent (  ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[BugLab_Variable_Misuse]^Node ancParent = n.getParent (  ) ;^343^^^^^328^358^Node ancParent = ancestor.getParent (  ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[BugLab_Variable_Misuse]^replaceWithEmpty ( ancestor, parent ) ;^344^^^^^329^359^replaceWithEmpty ( ancestor, ancParent ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[BugLab_Argument_Swapping]^replaceWithEmpty ( ancParent, ancestor ) ;^344^^^^^329^359^replaceWithEmpty ( ancestor, ancParent ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[BugLab_Variable_Misuse]^if  ( ancestorLevel != Token.GETPROP && type != Token.GETELEM && type != Token.CALL )  {^348^349^350^^^333^363^if  ( type != Token.GETPROP && type != Token.GETELEM && type != Token.CALL )  {^[CLASS] StripCode Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[BugLab_Variable_Misuse]^if  ( type != Token.GETPROP && type != Token.null && type != Token.CALL )  {^348^349^350^^^333^363^if  ( type != Token.GETPROP && type != Token.GETELEM && type != Token.CALL )  {^[CLASS] StripCode Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[BugLab_Wrong_Operator]^if  ( type != Token.GETPROP || type != Token.GETELEM && type != Token.CALL )  {^348^349^350^^^333^363^if  ( type != Token.GETPROP && type != Token.GETELEM && type != Token.CALL )  {^[CLASS] StripCode Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[BugLab_Wrong_Operator]^if  ( type == Token.GETPROP && type != Token.GETELEM && type != Token.CALL )  {^348^349^350^^^333^363^if  ( type != Token.GETPROP && type != Token.GETELEM && type != Token.CALL )  {^[CLASS] StripCode Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[BugLab_Wrong_Operator]^if  ( type >= Token.GETPROP && type != Token.GETELEM && type != Token.CALL )  {^348^349^350^^^333^363^if  ( type != Token.GETPROP && type != Token.GETELEM && type != Token.CALL )  {^[CLASS] StripCode Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[BugLab_Variable_Misuse]^replaceWithNull ( parent, ancestor ) ;^351^^^^^348^353^replaceWithNull ( ancestorChild, ancestor ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[BugLab_Variable_Misuse]^replaceWithNull ( parentChild, ancestor ) ;^351^^^^^348^353^replaceWithNull ( ancestorChild, ancestor ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[BugLab_Argument_Swapping]^replaceWithNull ( ancestor, ancestorChild ) ;^351^^^^^348^353^replaceWithNull ( ancestorChild, ancestor ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[BugLab_Argument_Swapping]^replaceWithNull ( ancestorChildChild, ancestor ) ;^351^^^^^348^353^replaceWithNull ( ancestorChild, ancestor ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[BugLab_Variable_Misuse]^ancestorChild = n;^354^^^^^339^369^ancestorChild = ancestor;^[CLASS] StripCode Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[BugLab_Variable_Misuse]^ancestor = parent.getParent (  ) ;^355^^^^^340^370^ancestor = ancestor.getParent (  ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[BugLab_Variable_Misuse]^int type = parent.getType (  ) ;^347^^^^^332^362^int type = ancestor.getType (  ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[BugLab_Variable_Misuse]^if  ( NodeUtil.isExpressionNode ( n )  )  {^341^^^^^326^356^if  ( NodeUtil.isExpressionNode ( ancestor )  )  {^[CLASS] StripCode Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[BugLab_Variable_Misuse]^replaceWithEmpty ( parent, ancParent ) ;^344^^^^^329^359^replaceWithEmpty ( ancestor, ancParent ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[BugLab_Variable_Misuse]^replaceWithNull ( parentChild, ancestor ) ;^351^^^^^336^366^replaceWithNull ( ancestorChild, ancestor ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[BugLab_Argument_Swapping]^replaceWithNull ( ancestor, ancestorChild ) ;^351^^^^^336^366^replaceWithNull ( ancestorChild, ancestor ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[BugLab_Argument_Swapping]^replaceWithNull ( ancestorChildChild, ancestor ) ;^351^^^^^336^366^replaceWithNull ( ancestorChild, ancestor ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[BugLab_Argument_Swapping]^if  ( isMethodCallThatTriggersRemoval ( t, parent, n )  )  {^328^^^^^313^343^if  ( isMethodCallThatTriggersRemoval ( t, n, parent )  )  {^[CLASS] StripCode Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[BugLab_Variable_Misuse]^ancestorChild = parent;^354^^^^^339^369^ancestorChild = ancestor;^[CLASS] StripCode Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[BugLab_Variable_Misuse]^replaceWithNull ( parent, ancestor ) ;^351^^^^^336^366^replaceWithNull ( ancestorChild, ancestor ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[BugLab_Wrong_Operator]^if  ( ancestor.getFirstChild (  )  == ancestorChild )  {^337^^^^^322^352^if  ( ancestor.getFirstChild (  )  != ancestorChild )  {^[CLASS] StripCode Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[BugLab_Wrong_Operator]^if  ( type <= Token.GETPROP && type != Token.GETELEM && type != Token.CALL )  {^348^349^350^^^333^363^if  ( type != Token.GETPROP && type != Token.GETELEM && type != Token.CALL )  {^[CLASS] StripCode Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[BugLab_Wrong_Operator]^if  ( type < Token.GETPROP && type != Token.GETELEM && type != Token.CALL )  {^348^349^350^^^333^363^if  ( type != Token.GETPROP && type != Token.GETELEM && type != Token.CALL )  {^[CLASS] StripCode Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[BugLab_Variable_Misuse]^Node ancestor = n;^333^^^^^318^348^Node ancestor = parent;^[CLASS] StripCode Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[BugLab_Variable_Misuse]^Node ancestorChild = parent;^334^^^^^319^349^Node ancestorChild = n;^[CLASS] StripCode Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[BugLab_Wrong_Literal]^int ancestorLevel = type;^335^^^^^320^350^int ancestorLevel = 1;^[CLASS] StripCode Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[BugLab_Variable_Misuse]^int type = n.getType (  ) ;^347^^^^^332^362^int type = ancestor.getType (  ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[BugLab_Variable_Misuse]^ancestor = n.getParent (  ) ;^355^^^^^340^370^ancestor = ancestor.getParent (  ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[BugLab_Variable_Misuse]^if  ( isMethodCallThatTriggersRemoval ( t, ancestorChild, parent )  )  {^328^^^^^313^343^if  ( isMethodCallThatTriggersRemoval ( t, n, parent )  )  {^[CLASS] StripCode Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[BugLab_Variable_Misuse]^if  ( isMethodCallThatTriggersRemoval ( t, n, ancestorChild )  )  {^328^^^^^313^343^if  ( isMethodCallThatTriggersRemoval ( t, n, parent )  )  {^[CLASS] StripCode Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[BugLab_Argument_Swapping]^if  ( isMethodCallThatTriggersRemoval ( n, t, parent )  )  {^328^^^^^313^343^if  ( isMethodCallThatTriggersRemoval ( t, n, parent )  )  {^[CLASS] StripCode Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[BugLab_Variable_Misuse]^Node key = value.getFirstChild (  ) ;^373^^^^^368^387^Node key = n.getFirstChild (  ) ;^[CLASS] StripCode Strip  [METHOD] eliminateKeysWithStripNamesFromObjLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  key  n  next  value  
[BugLab_Variable_Misuse]^while  ( key != nextull )  {^374^^^^^368^387^while  ( key != null )  {^[CLASS] StripCode Strip  [METHOD] eliminateKeysWithStripNamesFromObjLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  key  n  next  value  
[BugLab_Argument_Swapping]^while  ( n != keyull )  {^374^^^^^368^387^while  ( key != null )  {^[CLASS] StripCode Strip  [METHOD] eliminateKeysWithStripNamesFromObjLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  key  n  next  value  
[BugLab_Wrong_Operator]^while  ( key == null )  {^374^^^^^368^387^while  ( key != null )  {^[CLASS] StripCode Strip  [METHOD] eliminateKeysWithStripNamesFromObjLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  key  n  next  value  
[BugLab_Variable_Misuse]^if  ( next.getType (  )  == Token.STRING && isStripName ( key.getString (  )  )  )  {^375^376^^^^368^387^if  ( key.getType (  )  == Token.STRING && isStripName ( key.getString (  )  )  )  {^[CLASS] StripCode Strip  [METHOD] eliminateKeysWithStripNamesFromObjLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  key  n  next  value  
[BugLab_Wrong_Operator]^if  ( key.getType (  )  == Token.STRING || isStripName ( key.getString (  )  )  )  {^375^376^^^^368^387^if  ( key.getType (  )  == Token.STRING && isStripName ( key.getString (  )  )  )  {^[CLASS] StripCode Strip  [METHOD] eliminateKeysWithStripNamesFromObjLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  key  n  next  value  
[BugLab_Wrong_Operator]^if  ( key.getType (  )  <= Token.STRING && isStripName ( key.getString (  )  )  )  {^375^376^^^^368^387^if  ( key.getType (  )  == Token.STRING && isStripName ( key.getString (  )  )  )  {^[CLASS] StripCode Strip  [METHOD] eliminateKeysWithStripNamesFromObjLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  key  n  next  value  
[BugLab_Variable_Misuse]^key = value.getNext (  ) .getNext (  ) ;^384^^^^^368^387^key = key.getNext (  ) .getNext (  ) ;^[CLASS] StripCode Strip  [METHOD] eliminateKeysWithStripNamesFromObjLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  key  n  next  value  
[BugLab_Variable_Misuse]^key = value;^381^^^^^368^387^key = next;^[CLASS] StripCode Strip  [METHOD] eliminateKeysWithStripNamesFromObjLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  key  n  next  value  
[BugLab_Variable_Misuse]^Node value = next.getNext (  ) ;^377^^^^^368^387^Node value = key.getNext (  ) ;^[CLASS] StripCode Strip  [METHOD] eliminateKeysWithStripNamesFromObjLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  key  n  next  value  
[BugLab_Variable_Misuse]^Node next = n.getNext (  ) ;^378^^^^^368^387^Node next = value.getNext (  ) ;^[CLASS] StripCode Strip  [METHOD] eliminateKeysWithStripNamesFromObjLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  key  n  next  value  
[BugLab_Variable_Misuse]^Node value = value.getNext (  ) ;^377^^^^^368^387^Node value = key.getNext (  ) ;^[CLASS] StripCode Strip  [METHOD] eliminateKeysWithStripNamesFromObjLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  key  n  next  value  
[BugLab_Variable_Misuse]^Node next = next.getNext (  ) ;^378^^^^^368^387^Node next = value.getNext (  ) ;^[CLASS] StripCode Strip  [METHOD] eliminateKeysWithStripNamesFromObjLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  key  n  next  value  
[BugLab_Variable_Misuse]^n.removeChild ( value ) ;^379^^^^^368^387^n.removeChild ( key ) ;^[CLASS] StripCode Strip  [METHOD] eliminateKeysWithStripNamesFromObjLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  key  n  next  value  
[BugLab_Variable_Misuse]^n.removeChild ( next ) ;^380^^^^^368^387^n.removeChild ( value ) ;^[CLASS] StripCode Strip  [METHOD] eliminateKeysWithStripNamesFromObjLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  key  n  next  value  
[BugLab_Variable_Misuse]^if  ( value.getType (  )  == Token.STRING && isStripName ( key.getString (  )  )  )  {^375^376^^^^368^387^if  ( key.getType (  )  == Token.STRING && isStripName ( key.getString (  )  )  )  {^[CLASS] StripCode Strip  [METHOD] eliminateKeysWithStripNamesFromObjLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  key  n  next  value  
[BugLab_Variable_Misuse]^isStripName ( value.getString (  )  )  )  {^376^^^^^368^387^isStripName ( key.getString (  )  )  )  {^[CLASS] StripCode Strip  [METHOD] eliminateKeysWithStripNamesFromObjLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  key  n  next  value  
[BugLab_Wrong_Operator]^if  ( key.getType (  )  >= Token.STRING && isStripName ( key.getString (  )  )  )  {^375^376^^^^368^387^if  ( key.getType (  )  == Token.STRING && isStripName ( key.getString (  )  )  )  {^[CLASS] StripCode Strip  [METHOD] eliminateKeysWithStripNamesFromObjLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  key  n  next  value  
[BugLab_Wrong_Operator]^return n != null || n.getType (  )  == Token.CALL && n.hasChildren (  ) &&  ( qualifiedNameBeginsWithStripType ( n.getFirstChild (  )  )  || nameEndsWithFieldNameToStrip ( n.getFirstChild (  )  )  ) ;^403^404^405^^^402^406^return n != null && n.getType (  )  == Token.CALL && n.hasChildren (  ) &&  ( qualifiedNameBeginsWithStripType ( n.getFirstChild (  )  )  || nameEndsWithFieldNameToStrip ( n.getFirstChild (  )  )  ) ;^[CLASS] StripCode Strip  [METHOD] isCallWhoseReturnValueShouldBeStripped [RETURN_TYPE] boolean   Node n [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  n  
[BugLab_Wrong_Operator]^return n == null && n.getType (  )  == Token.CALL && n.hasChildren (  ) &&  ( qualifiedNameBeginsWithStripType ( n.getFirstChild (  )  )  || nameEndsWithFieldNameToStrip ( n.getFirstChild (  )  )  ) ;^403^404^405^^^402^406^return n != null && n.getType (  )  == Token.CALL && n.hasChildren (  ) &&  ( qualifiedNameBeginsWithStripType ( n.getFirstChild (  )  )  || nameEndsWithFieldNameToStrip ( n.getFirstChild (  )  )  ) ;^[CLASS] StripCode Strip  [METHOD] isCallWhoseReturnValueShouldBeStripped [RETURN_TYPE] boolean   Node n [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  n  
[BugLab_Wrong_Operator]^return n != null && n.getType (  )  != Token.CALL && n.hasChildren (  ) &&  ( qualifiedNameBeginsWithStripType ( n.getFirstChild (  )  )  || nameEndsWithFieldNameToStrip ( n.getFirstChild (  )  )  ) ;^403^404^405^^^402^406^return n != null && n.getType (  )  == Token.CALL && n.hasChildren (  ) &&  ( qualifiedNameBeginsWithStripType ( n.getFirstChild (  )  )  || nameEndsWithFieldNameToStrip ( n.getFirstChild (  )  )  ) ;^[CLASS] StripCode Strip  [METHOD] isCallWhoseReturnValueShouldBeStripped [RETURN_TYPE] boolean   Node n [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  n  
[BugLab_Wrong_Operator]^return n != null && n.getType (  )  == Token.CALL && n.hasChildren (  ) &&  ( qualifiedNameBeginsWithStripType ( n.getFirstChild (  )  )  && nameEndsWithFieldNameToStrip ( n.getFirstChild (  )  )  ) ;^403^404^405^^^402^406^return n != null && n.getType (  )  == Token.CALL && n.hasChildren (  ) &&  ( qualifiedNameBeginsWithStripType ( n.getFirstChild (  )  )  || nameEndsWithFieldNameToStrip ( n.getFirstChild (  )  )  ) ;^[CLASS] StripCode Strip  [METHOD] isCallWhoseReturnValueShouldBeStripped [RETURN_TYPE] boolean   Node n [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  n  
[BugLab_Wrong_Operator]^if  ( name == null )  {^432^^^^^431^445^if  ( name != null )  {^[CLASS] StripCode Strip  [METHOD] qualifiedNameBeginsWithStripType [RETURN_TYPE] boolean   String name [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  String  name  type  boolean  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  
[BugLab_Argument_Swapping]^if  ( type.equals ( name )  || name.startsWith ( type + "." )  )  {^434^^^^^431^445^if  ( name.equals ( type )  || name.startsWith ( type + "." )  )  {^[CLASS] StripCode Strip  [METHOD] qualifiedNameBeginsWithStripType [RETURN_TYPE] boolean   String name [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  String  name  type  boolean  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  
[BugLab_Wrong_Operator]^if  ( name.equals ( type )  && name.startsWith ( type + "." )  )  {^434^^^^^431^445^if  ( name.equals ( type )  || name.startsWith ( type + "." )  )  {^[CLASS] StripCode Strip  [METHOD] qualifiedNameBeginsWithStripType [RETURN_TYPE] boolean   String name [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  String  name  type  boolean  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  
[BugLab_Wrong_Operator]^if  ( name.equals ( type )  || name.startsWith ( type  ^  "." )  )  {^434^^^^^431^445^if  ( name.equals ( type )  || name.startsWith ( type + "." )  )  {^[CLASS] StripCode Strip  [METHOD] qualifiedNameBeginsWithStripType [RETURN_TYPE] boolean   String name [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  String  name  type  boolean  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  
[BugLab_Wrong_Literal]^return false;^435^^^^^431^445^return true;^[CLASS] StripCode Strip  [METHOD] qualifiedNameBeginsWithStripType [RETURN_TYPE] boolean   String name [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  String  name  type  boolean  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  
[BugLab_Argument_Swapping]^if  ( type.startsWith ( name )  )  {^439^^^^^431^445^if  ( name.startsWith ( type )  )  {^[CLASS] StripCode Strip  [METHOD] qualifiedNameBeginsWithStripType [RETURN_TYPE] boolean   String name [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  String  name  type  boolean  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  
[BugLab_Wrong_Literal]^return false;^440^^^^^431^445^return true;^[CLASS] StripCode Strip  [METHOD] qualifiedNameBeginsWithStripType [RETURN_TYPE] boolean   String name [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  String  name  type  boolean  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  
[BugLab_Wrong_Operator]^if  ( name.equals ( type )  || name.startsWith ( type  >>  "." )  )  {^434^^^^^431^445^if  ( name.equals ( type )  || name.startsWith ( type + "." )  )  {^[CLASS] StripCode Strip  [METHOD] qualifiedNameBeginsWithStripType [RETURN_TYPE] boolean   String name [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  String  name  type  boolean  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  
[BugLab_Wrong_Operator]^if  ( name.equals ( type )  || name.startsWith ( type  ||  "." )  )  {^434^^^^^431^445^if  ( name.equals ( type )  || name.startsWith ( type + "." )  )  {^[CLASS] StripCode Strip  [METHOD] qualifiedNameBeginsWithStripType [RETURN_TYPE] boolean   String name [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  String  name  type  boolean  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  
[BugLab_Wrong_Operator]^if  ( name.equals ( type )  || name.startsWith ( type  <=  "." )  )  {^434^^^^^431^445^if  ( name.equals ( type )  || name.startsWith ( type + "." )  )  {^[CLASS] StripCode Strip  [METHOD] qualifiedNameBeginsWithStripType [RETURN_TYPE] boolean   String name [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  String  name  type  boolean  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  
[BugLab_Wrong_Literal]^return true;^444^^^^^431^445^return false;^[CLASS] StripCode Strip  [METHOD] qualifiedNameBeginsWithStripType [RETURN_TYPE] boolean   String name [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  String  name  type  boolean  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  
[BugLab_Argument_Swapping]^Scope.Var var = name.getVar ( scope ) ;^458^^^^^455^460^Scope.Var var = scope.getVar ( name ) ;^[CLASS] StripCode Strip  [METHOD] isReferenceToRemovedVar [RETURN_TYPE] boolean   NodeTraversal t Node n [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  Scope  scope  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Var  var  Node  n  String  name  
[BugLab_Argument_Swapping]^return varsToRemovesToRemove.contains ( var ) ;^459^^^^^455^460^return varsToRemove.contains ( var ) ;^[CLASS] StripCode Strip  [METHOD] isReferenceToRemovedVar [RETURN_TYPE] boolean   NodeTraversal t Node n [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  Scope  scope  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Var  var  Node  n  String  name  
[BugLab_Argument_Swapping]^return var.contains ( varsToRemove ) ;^459^^^^^455^460^return varsToRemove.contains ( var ) ;^[CLASS] StripCode Strip  [METHOD] isReferenceToRemovedVar [RETURN_TYPE] boolean   NodeTraversal t Node n [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  Scope  scope  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Var  var  Node  n  String  name  
[BugLab_Variable_Misuse]^Node function = parent.getFirstChild (  ) ;^483^^^^^468^498^Node function = n.getFirstChild (  ) ;^[CLASS] StripCode Strip  [METHOD] isMethodCallThatTriggersRemoval [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  callee  function  gramps  n  parent  
[BugLab_Variable_Misuse]^if  ( parent == null || function.getType (  )  != Token.GETPROP )  {^484^^^^^469^499^if  ( function == null || function.getType (  )  != Token.GETPROP )  {^[CLASS] StripCode Strip  [METHOD] isMethodCallThatTriggersRemoval [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  callee  function  gramps  n  parent  
[BugLab_Wrong_Operator]^if  ( function == null && function.getType (  )  != Token.GETPROP )  {^484^^^^^469^499^if  ( function == null || function.getType (  )  != Token.GETPROP )  {^[CLASS] StripCode Strip  [METHOD] isMethodCallThatTriggersRemoval [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  callee  function  gramps  n  parent  
[BugLab_Wrong_Operator]^if  ( function != null || function.getType (  )  != Token.GETPROP )  {^484^^^^^469^499^if  ( function == null || function.getType (  )  != Token.GETPROP )  {^[CLASS] StripCode Strip  [METHOD] isMethodCallThatTriggersRemoval [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  callee  function  gramps  n  parent  
[BugLab_Wrong_Operator]^if  ( function == null || function.getType (  )  == Token.GETPROP )  {^484^^^^^469^499^if  ( function == null || function.getType (  )  != Token.GETPROP )  {^[CLASS] StripCode Strip  [METHOD] isMethodCallThatTriggersRemoval [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  callee  function  gramps  n  parent  
[BugLab_Wrong_Literal]^return true;^489^^^^^474^504^return false;^[CLASS] StripCode Strip  [METHOD] isMethodCallThatTriggersRemoval [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  callee  function  gramps  n  parent  
[BugLab_Variable_Misuse]^if  ( n != null && parent.getType (  )  == Token.NAME )  {^492^^^^^477^507^if  ( parent != null && parent.getType (  )  == Token.NAME )  {^[CLASS] StripCode Strip  [METHOD] isMethodCallThatTriggersRemoval [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  callee  function  gramps  n  parent  
[BugLab_Wrong_Operator]^if  ( parent != null || parent.getType (  )  == Token.NAME )  {^492^^^^^477^507^if  ( parent != null && parent.getType (  )  == Token.NAME )  {^[CLASS] StripCode Strip  [METHOD] isMethodCallThatTriggersRemoval [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  callee  function  gramps  n  parent  
[BugLab_Wrong_Operator]^if  ( parent == null && parent.getType (  )  == Token.NAME )  {^492^^^^^477^507^if  ( parent != null && parent.getType (  )  == Token.NAME )  {^[CLASS] StripCode Strip  [METHOD] isMethodCallThatTriggersRemoval [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  callee  function  gramps  n  parent  
[BugLab_Wrong_Operator]^if  ( parent != null && parent.getType (  )  != Token.NAME )  {^492^^^^^477^507^if  ( parent != null && parent.getType (  )  == Token.NAME )  {^[CLASS] StripCode Strip  [METHOD] isMethodCallThatTriggersRemoval [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  callee  function  gramps  n  parent  
[BugLab_Variable_Misuse]^if  ( gramps != null && gramps.getType (  )  == Token.2 )  {^494^^^^^479^509^if  ( gramps != null && gramps.getType (  )  == Token.VAR )  {^[CLASS] StripCode Strip  [METHOD] isMethodCallThatTriggersRemoval [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  callee  function  gramps  n  parent  
[BugLab_Wrong_Operator]^if  ( gramps != null || gramps.getType (  )  == Token.VAR )  {^494^^^^^479^509^if  ( gramps != null && gramps.getType (  )  == Token.VAR )  {^[CLASS] StripCode Strip  [METHOD] isMethodCallThatTriggersRemoval [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  callee  function  gramps  n  parent  
[BugLab_Wrong_Operator]^if  ( gramps == null && gramps.getType (  )  == Token.VAR )  {^494^^^^^479^509^if  ( gramps != null && gramps.getType (  )  == Token.VAR )  {^[CLASS] StripCode Strip  [METHOD] isMethodCallThatTriggersRemoval [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  callee  function  gramps  n  parent  
[BugLab_Wrong_Operator]^if  ( gramps != null && gramps.getType (  )  != Token.VAR )  {^494^^^^^479^509^if  ( gramps != null && gramps.getType (  )  == Token.VAR )  {^[CLASS] StripCode Strip  [METHOD] isMethodCallThatTriggersRemoval [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  callee  function  gramps  n  parent  
[BugLab_Wrong_Literal]^return true;^500^^^^^485^515^return false;^[CLASS] StripCode Strip  [METHOD] isMethodCallThatTriggersRemoval [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  callee  function  gramps  n  parent  
[BugLab_Variable_Misuse]^Node gramps = n.getParent (  ) ;^493^^^^^478^508^Node gramps = parent.getParent (  ) ;^[CLASS] StripCode Strip  [METHOD] isMethodCallThatTriggersRemoval [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  callee  function  gramps  n  parent  
[BugLab_Variable_Misuse]^if  ( parent != null && gramps.getType (  )  == Token.VAR )  {^494^^^^^479^509^if  ( gramps != null && gramps.getType (  )  == Token.VAR )  {^[CLASS] StripCode Strip  [METHOD] isMethodCallThatTriggersRemoval [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  callee  function  gramps  n  parent  
[BugLab_Variable_Misuse]^if  ( n != null && gramps.getType (  )  == Token.VAR )  {^494^^^^^479^509^if  ( gramps != null && gramps.getType (  )  == Token.VAR )  {^[CLASS] StripCode Strip  [METHOD] isMethodCallThatTriggersRemoval [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  callee  function  gramps  n  parent  
[BugLab_Variable_Misuse]^Node gramps = gramps.getParent (  ) ;^493^^^^^478^508^Node gramps = parent.getParent (  ) ;^[CLASS] StripCode Strip  [METHOD] isMethodCallThatTriggersRemoval [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  callee  function  gramps  n  parent  
[BugLab_Variable_Misuse]^Node callee = parent.getFirstChild (  ) ;^504^^^^^489^519^Node callee = function.getFirstChild (  ) ;^[CLASS] StripCode Strip  [METHOD] isMethodCallThatTriggersRemoval [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  callee  function  gramps  n  parent  
[BugLab_Variable_Misuse]^return nameEndsWithFieldNameToStrip ( callee )  || nameEndsWithFieldNameToStrip ( parent )  || qualifiedNameBeginsWithStripType ( callee )  || actsOnStripType ( t, n ) ;^505^506^507^508^^490^520^return nameEndsWithFieldNameToStrip ( callee )  || nameEndsWithFieldNameToStrip ( function )  || qualifiedNameBeginsWithStripType ( callee )  || actsOnStripType ( t, n ) ;^[CLASS] StripCode Strip  [METHOD] isMethodCallThatTriggersRemoval [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  callee  function  gramps  n  parent  
[BugLab_Variable_Misuse]^return parentameEndsWithFieldNameToStrip ( callee )  || nameEndsWithFieldNameToStrip ( function )  || qualifiedNameBeginsWithStripType ( callee )  || actsOnStripType ( t, n ) ;^505^506^507^508^^490^520^return nameEndsWithFieldNameToStrip ( callee )  || nameEndsWithFieldNameToStrip ( function )  || qualifiedNameBeginsWithStripType ( callee )  || actsOnStripType ( t, n ) ;^[CLASS] StripCode Strip  [METHOD] isMethodCallThatTriggersRemoval [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  callee  function  gramps  n  parent  
[BugLab_Argument_Swapping]^return nameEndsWithFieldNameToStrip ( function )  || nameEndsWithFieldNameToStrip ( callee )  || qualifiedNameBeginsWithStripType ( callee )  || actsOnStripType ( t, n ) ;^505^506^507^508^^490^520^return nameEndsWithFieldNameToStrip ( callee )  || nameEndsWithFieldNameToStrip ( function )  || qualifiedNameBeginsWithStripType ( callee )  || actsOnStripType ( t, n ) ;^[CLASS] StripCode Strip  [METHOD] isMethodCallThatTriggersRemoval [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  callee  function  gramps  n  parent  
[BugLab_Argument_Swapping]^return nameEndsWithFieldNameToStrip ( t )  || nameEndsWithFieldNameToStrip ( function )  || qualifiedNameBeginsWithStripType ( callee )  || actsOnStripType ( callee, n ) ;^505^506^507^508^^490^520^return nameEndsWithFieldNameToStrip ( callee )  || nameEndsWithFieldNameToStrip ( function )  || qualifiedNameBeginsWithStripType ( callee )  || actsOnStripType ( t, n ) ;^[CLASS] StripCode Strip  [METHOD] isMethodCallThatTriggersRemoval [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  callee  function  gramps  n  parent  
[BugLab_Argument_Swapping]^return functionameEndsWithFieldNameToStrip ( callee )  || nameEndsWithFieldNameToStrip ( n )  || qualifiedNameBeginsWithStripType ( callee )  || actsOnStripType ( t, n ) ;^505^506^507^508^^490^520^return nameEndsWithFieldNameToStrip ( callee )  || nameEndsWithFieldNameToStrip ( function )  || qualifiedNameBeginsWithStripType ( callee )  || actsOnStripType ( t, n ) ;^[CLASS] StripCode Strip  [METHOD] isMethodCallThatTriggersRemoval [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  callee  function  gramps  n  parent  
[BugLab_Wrong_Operator]^return nameEndsWithFieldNameToStrip ( callee )  && nameEndsWithFieldNameToStrip ( function )  || qualifiedNameBeginsWithStripType ( callee )  || actsOnStripType ( t, n ) ;^505^506^507^508^^490^520^return nameEndsWithFieldNameToStrip ( callee )  || nameEndsWithFieldNameToStrip ( function )  || qualifiedNameBeginsWithStripType ( callee )  || actsOnStripType ( t, n ) ;^[CLASS] StripCode Strip  [METHOD] isMethodCallThatTriggersRemoval [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  callee  function  gramps  n  parent  
[BugLab_Variable_Misuse]^return nameEndsWithFieldNameToStrip ( parent )  || nameEndsWithFieldNameToStrip ( function )  || qualifiedNameBeginsWithStripType ( callee )  || actsOnStripType ( t, n ) ;^505^506^507^508^^490^520^return nameEndsWithFieldNameToStrip ( callee )  || nameEndsWithFieldNameToStrip ( function )  || qualifiedNameBeginsWithStripType ( callee )  || actsOnStripType ( t, n ) ;^[CLASS] StripCode Strip  [METHOD] isMethodCallThatTriggersRemoval [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  callee  function  gramps  n  parent  
[BugLab_Variable_Misuse]^nameEndsWithFieldNameToStrip ( n )  || qualifiedNameBeginsWithStripType ( callee )  || actsOnStripType ( t, n ) ;^506^507^508^^^491^521^nameEndsWithFieldNameToStrip ( function )  || qualifiedNameBeginsWithStripType ( callee )  || actsOnStripType ( t, n ) ;^[CLASS] StripCode Strip  [METHOD] isMethodCallThatTriggersRemoval [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  callee  function  gramps  n  parent  
[BugLab_Variable_Misuse]^qualifiedNameBeginsWithStripType ( n )  || actsOnStripType ( t, n ) ;^507^508^^^^492^522^qualifiedNameBeginsWithStripType ( callee )  || actsOnStripType ( t, n ) ;^[CLASS] StripCode Strip  [METHOD] isMethodCallThatTriggersRemoval [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  callee  function  gramps  n  parent  
[BugLab_Variable_Misuse]^actsOnStripType ( t, parent ) ;^508^^^^^493^523^actsOnStripType ( t, n ) ;^[CLASS] StripCode Strip  [METHOD] isMethodCallThatTriggersRemoval [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  callee  function  gramps  n  parent  
[BugLab_Argument_Swapping]^actsOnStripType ( n, t ) ;^508^^^^^493^523^actsOnStripType ( t, n ) ;^[CLASS] StripCode Strip  [METHOD] isMethodCallThatTriggersRemoval [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  callee  function  gramps  n  parent  
[BugLab_Wrong_Operator]^if  ( n != null || n.getType (  )  == Token.GETPROP )  {^520^^^^^519^526^if  ( n != null && n.getType (  )  == Token.GETPROP )  {^[CLASS] StripCode Strip  [METHOD] nameEndsWithFieldNameToStrip [RETURN_TYPE] boolean   Node n [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  n  propNode  
[BugLab_Wrong_Operator]^if  ( n == null && n.getType (  )  == Token.GETPROP )  {^520^^^^^519^526^if  ( n != null && n.getType (  )  == Token.GETPROP )  {^[CLASS] StripCode Strip  [METHOD] nameEndsWithFieldNameToStrip [RETURN_TYPE] boolean   Node n [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  n  propNode  
[BugLab_Wrong_Operator]^if  ( n != null && n.getType (  )  != Token.GETPROP )  {^520^^^^^519^526^if  ( n != null && n.getType (  )  == Token.GETPROP )  {^[CLASS] StripCode Strip  [METHOD] nameEndsWithFieldNameToStrip [RETURN_TYPE] boolean   Node n [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  n  propNode  
[BugLab_Variable_Misuse]^return n != null && propNode.getType (  )  == Token.STRING && isStripName ( propNode.getString (  )  ) ;^522^523^^^^519^526^return propNode != null && propNode.getType (  )  == Token.STRING && isStripName ( propNode.getString (  )  ) ;^[CLASS] StripCode Strip  [METHOD] nameEndsWithFieldNameToStrip [RETURN_TYPE] boolean   Node n [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  n  propNode  
[BugLab_Wrong_Operator]^return propNode != null || propNode.getType (  )  == Token.STRING && isStripName ( propNode.getString (  )  ) ;^522^523^^^^519^526^return propNode != null && propNode.getType (  )  == Token.STRING && isStripName ( propNode.getString (  )  ) ;^[CLASS] StripCode Strip  [METHOD] nameEndsWithFieldNameToStrip [RETURN_TYPE] boolean   Node n [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  n  propNode  
[BugLab_Wrong_Operator]^return propNode == null && propNode.getType (  )  == Token.STRING && isStripName ( propNode.getString (  )  ) ;^522^523^^^^519^526^return propNode != null && propNode.getType (  )  == Token.STRING && isStripName ( propNode.getString (  )  ) ;^[CLASS] StripCode Strip  [METHOD] nameEndsWithFieldNameToStrip [RETURN_TYPE] boolean   Node n [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  n  propNode  
[BugLab_Wrong_Operator]^return propNode != null && propNode.getType (  )  != Token.STRING && isStripName ( propNode.getString (  )  ) ;^522^523^^^^519^526^return propNode != null && propNode.getType (  )  == Token.STRING && isStripName ( propNode.getString (  )  ) ;^[CLASS] StripCode Strip  [METHOD] nameEndsWithFieldNameToStrip [RETURN_TYPE] boolean   Node n [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  n  propNode  
[BugLab_Variable_Misuse]^Node propNode = propNode.getLastChild (  ) ;^521^^^^^519^526^Node propNode = n.getLastChild (  ) ;^[CLASS] StripCode Strip  [METHOD] nameEndsWithFieldNameToStrip [RETURN_TYPE] boolean   Node n [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  n  propNode  
[BugLab_Variable_Misuse]^isStripName ( n.getString (  )  ) ;^523^^^^^519^526^isStripName ( propNode.getString (  )  ) ;^[CLASS] StripCode Strip  [METHOD] nameEndsWithFieldNameToStrip [RETURN_TYPE] boolean   Node n [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  n  propNode  
[BugLab_Variable_Misuse]^if  ( propNode != null && n.getType (  )  == Token.GETPROP )  {^520^^^^^519^526^if  ( n != null && n.getType (  )  == Token.GETPROP )  {^[CLASS] StripCode Strip  [METHOD] nameEndsWithFieldNameToStrip [RETURN_TYPE] boolean   Node n [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  n  propNode  
[BugLab_Wrong_Literal]^return true;^525^^^^^519^526^return false;^[CLASS] StripCode Strip  [METHOD] nameEndsWithFieldNameToStrip [RETURN_TYPE] boolean   Node n [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  n  propNode  
[BugLab_Argument_Swapping]^SubclassRelationship classes = callNode.getCodingConvention (  ) .getClassesDefinedByCall ( compiler ) ;^539^540^^^^538^557^SubclassRelationship classes = compiler.getCodingConvention (  ) .getClassesDefinedByCall ( callNode ) ;^[CLASS] StripCode Strip  [METHOD] actsOnStripType [RETURN_TYPE] boolean   NodeTraversal t Node callNode [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  callNode  SubclassRelationship  classes  
[BugLab_Wrong_Operator]^if  ( classes == null )  {^541^^^^^538^557^if  ( classes != null )  {^[CLASS] StripCode Strip  [METHOD] actsOnStripType [RETURN_TYPE] boolean   NodeTraversal t Node callNode [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  callNode  SubclassRelationship  classes  
[BugLab_Wrong_Literal]^return false;^545^^^^^538^557^return true;^[CLASS] StripCode Strip  [METHOD] actsOnStripType [RETURN_TYPE] boolean   NodeTraversal t Node callNode [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  callNode  SubclassRelationship  classes  
[BugLab_Wrong_Literal]^return true;^556^^^^^538^557^return false;^[CLASS] StripCode Strip  [METHOD] actsOnStripType [RETURN_TYPE] boolean   NodeTraversal t Node callNode [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  callNode  SubclassRelationship  classes  
[BugLab_Variable_Misuse]^if  ( stripNameSuffixes.contains ( stripName )  || stripNamePrefixes.contains ( name )  )  {^567^568^^^^566^590^if  ( stripNameSuffixes.contains ( name )  || stripNamePrefixes.contains ( name )  )  {^[CLASS] StripCode Strip  [METHOD] isStripName [RETURN_TYPE] boolean   String name [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  String  lcName  name  stripName  boolean  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  
[BugLab_Argument_Swapping]^if  ( name.contains ( stripNameSuffixes )  || stripNamePrefixes.contains ( name )  )  {^567^568^^^^566^590^if  ( stripNameSuffixes.contains ( name )  || stripNamePrefixes.contains ( name )  )  {^[CLASS] StripCode Strip  [METHOD] isStripName [RETURN_TYPE] boolean   String name [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  String  lcName  name  stripName  boolean  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  
[BugLab_Argument_Swapping]^if  ( stripNamePrefixes.contains ( name )  || stripNameSuffixes.contains ( name )  )  {^567^568^^^^566^590^if  ( stripNameSuffixes.contains ( name )  || stripNamePrefixes.contains ( name )  )  {^[CLASS] StripCode Strip  [METHOD] isStripName [RETURN_TYPE] boolean   String name [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  String  lcName  name  stripName  boolean  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  
[BugLab_Wrong_Operator]^if  ( stripNameSuffixes.contains ( name )  && stripNamePrefixes.contains ( name )  )  {^567^568^^^^566^590^if  ( stripNameSuffixes.contains ( name )  || stripNamePrefixes.contains ( name )  )  {^[CLASS] StripCode Strip  [METHOD] isStripName [RETURN_TYPE] boolean   String name [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  String  lcName  name  stripName  boolean  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  
[BugLab_Wrong_Literal]^return false;^569^^^^^566^590^return true;^[CLASS] StripCode Strip  [METHOD] isStripName [RETURN_TYPE] boolean   String name [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  String  lcName  name  stripName  boolean  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  
[BugLab_Variable_Misuse]^stripNamePrefixes.contains ( stripName )  )  {^568^^^^^566^590^stripNamePrefixes.contains ( name )  )  {^[CLASS] StripCode Strip  [METHOD] isStripName [RETURN_TYPE] boolean   String name [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  String  lcName  name  stripName  boolean  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  
[BugLab_Variable_Misuse]^if  (  ( stripName.length (  )  == 0 )  || Character.isUpperCase ( name.charAt ( 0 )  )  )  {^572^^^^^566^590^if  (  ( name.length (  )  == 0 )  || Character.isUpperCase ( name.charAt ( 0 )  )  )  {^[CLASS] StripCode Strip  [METHOD] isStripName [RETURN_TYPE] boolean   String name [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  String  lcName  name  stripName  boolean  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  
[BugLab_Wrong_Operator]^if  (  ( name.length (  )  == 0 )  && Character.isUpperCase ( name.charAt ( 0 )  )  )  {^572^^^^^566^590^if  (  ( name.length (  )  == 0 )  || Character.isUpperCase ( name.charAt ( 0 )  )  )  {^[CLASS] StripCode Strip  [METHOD] isStripName [RETURN_TYPE] boolean   String name [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  String  lcName  name  stripName  boolean  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  
[BugLab_Wrong_Operator]^if  (  ( name.length (  )  != 0 )  || Character.isUpperCase ( name.charAt ( 0 )  )  )  {^572^^^^^566^590^if  (  ( name.length (  )  == 0 )  || Character.isUpperCase ( name.charAt ( 0 )  )  )  {^[CLASS] StripCode Strip  [METHOD] isStripName [RETURN_TYPE] boolean   String name [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  String  lcName  name  stripName  boolean  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  
[BugLab_Wrong_Literal]^return true;^573^^^^^566^590^return false;^[CLASS] StripCode Strip  [METHOD] isStripName [RETURN_TYPE] boolean   String name [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  String  lcName  name  stripName  boolean  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  
[BugLab_Wrong_Literal]^if  (  ( name.length (  )  == 1 )  || Character.isUpperCase ( name.charAt ( 1 )  )  )  {^572^^^^^566^590^if  (  ( name.length (  )  == 0 )  || Character.isUpperCase ( name.charAt ( 0 )  )  )  {^[CLASS] StripCode Strip  [METHOD] isStripName [RETURN_TYPE] boolean   String name [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  String  lcName  name  stripName  boolean  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  
[BugLab_Variable_Misuse]^String lcName = stripName.toLowerCase (  ) ;^576^^^^^566^590^String lcName = name.toLowerCase (  ) ;^[CLASS] StripCode Strip  [METHOD] isStripName [RETURN_TYPE] boolean   String name [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  String  lcName  name  stripName  boolean  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  
[BugLab_Variable_Misuse]^if  ( lcName.startsWith ( name.toLowerCase (  )  )  )  {^578^^^^^566^590^if  ( lcName.startsWith ( stripName.toLowerCase (  )  )  )  {^[CLASS] StripCode Strip  [METHOD] isStripName [RETURN_TYPE] boolean   String name [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  String  lcName  name  stripName  boolean  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  
[BugLab_Argument_Swapping]^if  ( stripName.startsWith ( lcName.toLowerCase (  )  )  )  {^578^^^^^566^590^if  ( lcName.startsWith ( stripName.toLowerCase (  )  )  )  {^[CLASS] StripCode Strip  [METHOD] isStripName [RETURN_TYPE] boolean   String name [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  String  lcName  name  stripName  boolean  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  
[BugLab_Wrong_Literal]^return false;^579^^^^^566^590^return true;^[CLASS] StripCode Strip  [METHOD] isStripName [RETURN_TYPE] boolean   String name [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  String  lcName  name  stripName  boolean  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  
[BugLab_Variable_Misuse]^if  ( name.startsWith ( stripName.toLowerCase (  )  )  )  {^578^^^^^566^590^if  ( lcName.startsWith ( stripName.toLowerCase (  )  )  )  {^[CLASS] StripCode Strip  [METHOD] isStripName [RETURN_TYPE] boolean   String name [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  String  lcName  name  stripName  boolean  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  
[BugLab_Variable_Misuse]^if  ( name.endsWith ( stripName.toLowerCase (  )  )  )  {^584^^^^^566^590^if  ( lcName.endsWith ( stripName.toLowerCase (  )  )  )  {^[CLASS] StripCode Strip  [METHOD] isStripName [RETURN_TYPE] boolean   String name [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  String  lcName  name  stripName  boolean  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  
[BugLab_Variable_Misuse]^if  ( lcName.endsWith ( name.toLowerCase (  )  )  )  {^584^^^^^566^590^if  ( lcName.endsWith ( stripName.toLowerCase (  )  )  )  {^[CLASS] StripCode Strip  [METHOD] isStripName [RETURN_TYPE] boolean   String name [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  String  lcName  name  stripName  boolean  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  
[BugLab_Argument_Swapping]^if  ( stripName.endsWith ( lcName.toLowerCase (  )  )  )  {^584^^^^^566^590^if  ( lcName.endsWith ( stripName.toLowerCase (  )  )  )  {^[CLASS] StripCode Strip  [METHOD] isStripName [RETURN_TYPE] boolean   String name [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  String  lcName  name  stripName  boolean  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  
[BugLab_Wrong_Literal]^return false;^585^^^^^566^590^return true;^[CLASS] StripCode Strip  [METHOD] isStripName [RETURN_TYPE] boolean   String name [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  String  lcName  name  stripName  boolean  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  
[BugLab_Wrong_Literal]^return true;^589^^^^^566^590^return false;^[CLASS] StripCode Strip  [METHOD] isStripName [RETURN_TYPE] boolean   String name [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  String  lcName  name  stripName  boolean  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  
[BugLab_Argument_Swapping]^NodeUtil.removeChild ( n, parent ) ;^611^^^^^610^612^NodeUtil.removeChild ( parent, n ) ;^[CLASS] StripCode Strip  [METHOD] replaceWithEmpty [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  n  parent  
[BugLab_Variable_Misuse]^switch  ( parent.getType (  )  )  {^97^^^^^82^112^switch  ( n.getType (  )  )  {^[CLASS] Strip  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  n  parent  
[BugLab_Variable_Misuse]^removeVarDeclarationsByNameOrRvalue ( t, n, n ) ;^99^^^^^84^114^removeVarDeclarationsByNameOrRvalue ( t, n, parent ) ;^[CLASS] Strip  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  n  parent  
[BugLab_Argument_Swapping]^removeVarDeclarationsByNameOrRvalue ( n, t, parent ) ;^99^^^^^84^114^removeVarDeclarationsByNameOrRvalue ( t, n, parent ) ;^[CLASS] Strip  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  n  parent  
[BugLab_Argument_Swapping]^removeVarDeclarationsByNameOrRvalue ( t, parent, n ) ;^99^^^^^84^114^removeVarDeclarationsByNameOrRvalue ( t, n, parent ) ;^[CLASS] Strip  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  n  parent  
[BugLab_Argument_Swapping]^removeVarDeclarationsByNameOrRvalue ( parent, n, t ) ;^99^^^^^84^114^removeVarDeclarationsByNameOrRvalue ( t, n, parent ) ;^[CLASS] Strip  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  n  parent  
[BugLab_Argument_Swapping]^maybeRemoveReferenceToRemovedVariable ( n, t, parent ) ;^103^^^^^88^118^maybeRemoveReferenceToRemovedVariable ( t, n, parent ) ;^[CLASS] Strip  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  n  parent  
[BugLab_Argument_Swapping]^maybeRemoveReferenceToRemovedVariable ( t, parent, n ) ;^103^^^^^88^118^maybeRemoveReferenceToRemovedVariable ( t, n, parent ) ;^[CLASS] Strip  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  n  parent  
[BugLab_Argument_Swapping]^maybeEliminateAssignmentByLvalueName ( parent, n, t ) ;^118^^^^^103^133^maybeEliminateAssignmentByLvalueName ( t, n, parent ) ;^[CLASS] Strip  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  n  parent  
[BugLab_Argument_Swapping]^maybeEliminateAssignmentByLvalueName ( t, parent, n ) ;^118^^^^^103^133^maybeEliminateAssignmentByLvalueName ( t, n, parent ) ;^[CLASS] Strip  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  n  parent  
[BugLab_Variable_Misuse]^maybeRemoveCall ( t, parent, parent ) ;^122^^^^^107^137^maybeRemoveCall ( t, n, parent ) ;^[CLASS] Strip  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  n  parent  
[BugLab_Argument_Swapping]^maybeRemoveCall ( n, t, parent ) ;^122^^^^^107^137^maybeRemoveCall ( t, n, parent ) ;^[CLASS] Strip  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  n  parent  
[BugLab_Argument_Swapping]^maybeRemoveCall ( t, parent, n ) ;^122^^^^^107^137^maybeRemoveCall ( t, n, parent ) ;^[CLASS] Strip  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  n  parent  
[BugLab_Variable_Misuse]^eliminateKeysWithStripNamesFromObjLit ( t, parent ) ;^126^^^^^111^141^eliminateKeysWithStripNamesFromObjLit ( t, n ) ;^[CLASS] Strip  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  n  parent  
[BugLab_Argument_Swapping]^eliminateKeysWithStripNamesFromObjLit ( n, t ) ;^126^^^^^111^141^eliminateKeysWithStripNamesFromObjLit ( t, n ) ;^[CLASS] Strip  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  n  parent  
[BugLab_Variable_Misuse]^maybeEliminateExpressionByName ( t, parent, parent ) ;^130^^^^^115^145^maybeEliminateExpressionByName ( t, n, parent ) ;^[CLASS] Strip  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  n  parent  
[BugLab_Variable_Misuse]^maybeEliminateExpressionByName ( t, n, n ) ;^130^^^^^115^145^maybeEliminateExpressionByName ( t, n, parent ) ;^[CLASS] Strip  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  n  parent  
[BugLab_Argument_Swapping]^maybeEliminateExpressionByName ( n, t, parent ) ;^130^^^^^115^145^maybeEliminateExpressionByName ( t, n, parent ) ;^[CLASS] Strip  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  n  parent  
[BugLab_Argument_Swapping]^maybeEliminateExpressionByName ( t, parent, n ) ;^130^^^^^115^145^maybeEliminateExpressionByName ( t, n, parent ) ;^[CLASS] Strip  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  n  parent  
[BugLab_Variable_Misuse]^if  ( isStripName ( name )  || isCallWhoseReturnValueShouldBeStripped ( parent.getFirstChild (  )  )  )  {^149^150^^^^144^163^if  ( isStripName ( name )  || isCallWhoseReturnValueShouldBeStripped ( nameNode.getFirstChild (  )  )  )  {^[CLASS] Strip  [METHOD] removeVarDeclarationsByNameOrRvalue [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  Scope  scope  NodeTraversal  t  Node  n  nameNode  parent  String  name  
[BugLab_Variable_Misuse]^if  ( isStripName ( parentame )  || isCallWhoseReturnValueShouldBeStripped ( nameNode.getFirstChild (  )  )  )  {^149^150^^^^144^163^if  ( isStripName ( name )  || isCallWhoseReturnValueShouldBeStripped ( nameNode.getFirstChild (  )  )  )  {^[CLASS] Strip  [METHOD] removeVarDeclarationsByNameOrRvalue [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  Scope  scope  NodeTraversal  t  Node  n  nameNode  parent  String  name  
[BugLab_Argument_Swapping]^if  ( isStripName ( nameNodeame )  || isCallWhoseReturnValueShouldBeStripped ( n.getFirstChild (  )  )  )  {^149^150^^^^144^163^if  ( isStripName ( name )  || isCallWhoseReturnValueShouldBeStripped ( nameNode.getFirstChild (  )  )  )  {^[CLASS] Strip  [METHOD] removeVarDeclarationsByNameOrRvalue [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  Scope  scope  NodeTraversal  t  Node  n  nameNode  parent  String  name  
[BugLab_Argument_Swapping]^if  ( isStripName ( nameame )  || isCallWhoseReturnValueShouldBeStripped ( nNode.getFirstChild (  )  )  )  {^149^150^^^^144^163^if  ( isStripName ( name )  || isCallWhoseReturnValueShouldBeStripped ( nameNode.getFirstChild (  )  )  )  {^[CLASS] Strip  [METHOD] removeVarDeclarationsByNameOrRvalue [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  Scope  scope  NodeTraversal  t  Node  n  nameNode  parent  String  name  
[BugLab_Wrong_Operator]^if  ( isStripName ( name )  && isCallWhoseReturnValueShouldBeStripped ( nameNode.getFirstChild (  )  )  )  {^149^150^^^^144^163^if  ( isStripName ( name )  || isCallWhoseReturnValueShouldBeStripped ( nameNode.getFirstChild (  )  )  )  {^[CLASS] Strip  [METHOD] removeVarDeclarationsByNameOrRvalue [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  Scope  scope  NodeTraversal  t  Node  n  nameNode  parent  String  name  
[BugLab_Argument_Swapping]^varsToRemove.add ( name.getVar ( scope )  ) ;^153^^^^^144^163^varsToRemove.add ( scope.getVar ( name )  ) ;^[CLASS] Strip  [METHOD] removeVarDeclarationsByNameOrRvalue [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  Scope  scope  NodeTraversal  t  Node  n  nameNode  parent  String  name  
[BugLab_Variable_Misuse]^n.removeChild ( parentameNode ) ;^154^^^^^144^163^n.removeChild ( nameNode ) ;^[CLASS] Strip  [METHOD] removeVarDeclarationsByNameOrRvalue [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  Scope  scope  NodeTraversal  t  Node  n  nameNode  parent  String  name  
[BugLab_Variable_Misuse]^n.removeChild ( parent ) ;^154^^^^^144^163^n.removeChild ( nameNode ) ;^[CLASS] Strip  [METHOD] removeVarDeclarationsByNameOrRvalue [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  Scope  scope  NodeTraversal  t  Node  n  nameNode  parent  String  name  
[BugLab_Argument_Swapping]^n.removeChild ( nameNodeameNode ) ;^154^^^^^144^163^n.removeChild ( nameNode ) ;^[CLASS] Strip  [METHOD] removeVarDeclarationsByNameOrRvalue [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  Scope  scope  NodeTraversal  t  Node  n  nameNode  parent  String  name  
[BugLab_Argument_Swapping]^n.removeChild ( n ) ;^154^^^^^144^163^n.removeChild ( nameNode ) ;^[CLASS] Strip  [METHOD] removeVarDeclarationsByNameOrRvalue [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  Scope  scope  NodeTraversal  t  Node  n  nameNode  parent  String  name  
[BugLab_Variable_Misuse]^for  ( Node parentameNode = n.getFirstChild (  ) ; nameNode != null;^146^^^^^144^163^for  ( Node nameNode = n.getFirstChild (  ) ; nameNode != null;^[CLASS] Strip  [METHOD] removeVarDeclarationsByNameOrRvalue [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  Scope  scope  NodeTraversal  t  Node  n  nameNode  parent  String  name  
[BugLab_Variable_Misuse]^for  ( Node parent = n.getFirstChild (  ) ; nameNode != null;^146^^^^^144^163^for  ( Node nameNode = n.getFirstChild (  ) ; nameNode != null;^[CLASS] Strip  [METHOD] removeVarDeclarationsByNameOrRvalue [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  Scope  scope  NodeTraversal  t  Node  n  nameNode  parent  String  name  
[BugLab_Argument_Swapping]^for  ( Node n = nameNode.getFirstChild (  ) ; nameNode != null;^146^^^^^144^163^for  ( Node nameNode = n.getFirstChild (  ) ; nameNode != null;^[CLASS] Strip  [METHOD] removeVarDeclarationsByNameOrRvalue [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  Scope  scope  NodeTraversal  t  Node  n  nameNode  parent  String  name  
[BugLab_Wrong_Operator]^for  ( Node nameNode = n.getFirstChild (  ) ; nameNode == null;^146^^^^^144^163^for  ( Node nameNode = n.getFirstChild (  ) ; nameNode != null;^[CLASS] Strip  [METHOD] removeVarDeclarationsByNameOrRvalue [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  Scope  scope  NodeTraversal  t  Node  n  nameNode  parent  String  name  
[BugLab_Argument_Swapping]^if  ( isStripName ( n )  || isCallWhoseReturnValueShouldBeStripped ( nameameNode.getFirstChild (  )  )  )  {^149^150^^^^144^163^if  ( isStripName ( name )  || isCallWhoseReturnValueShouldBeStripped ( nameNode.getFirstChild (  )  )  )  {^[CLASS] Strip  [METHOD] removeVarDeclarationsByNameOrRvalue [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  Scope  scope  NodeTraversal  t  Node  n  nameNode  parent  String  name  
[BugLab_Variable_Misuse]^String name = parent.getString (  ) ;^148^^^^^144^163^String name = nameNode.getString (  ) ;^[CLASS] Strip  [METHOD] removeVarDeclarationsByNameOrRvalue [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  Scope  scope  NodeTraversal  t  Node  n  nameNode  parent  String  name  
[BugLab_Variable_Misuse]^isCallWhoseReturnValueShouldBeStripped ( parent.getFirstChild (  )  )  )  {^150^^^^^144^163^isCallWhoseReturnValueShouldBeStripped ( nameNode.getFirstChild (  )  )  )  {^[CLASS] Strip  [METHOD] removeVarDeclarationsByNameOrRvalue [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  Scope  scope  NodeTraversal  t  Node  n  nameNode  parent  String  name  
[BugLab_Variable_Misuse]^nameNode = parent.getNext (  )  )  {^147^^^^^144^163^nameNode = nameNode.getNext (  )  )  {^[CLASS] Strip  [METHOD] removeVarDeclarationsByNameOrRvalue [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  Scope  scope  NodeTraversal  t  Node  n  nameNode  parent  String  name  
[BugLab_Variable_Misuse]^if  ( !n.hasChildrenameNode (  )  )  {^158^^^^^144^163^if  ( !n.hasChildren (  )  )  {^[CLASS] Strip  [METHOD] removeVarDeclarationsByNameOrRvalue [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  Scope  scope  NodeTraversal  t  Node  n  nameNode  parent  String  name  
[BugLab_Variable_Misuse]^replaceWithEmpty ( nameNode, parent ) ;^160^^^^^144^163^replaceWithEmpty ( n, parent ) ;^[CLASS] Strip  [METHOD] removeVarDeclarationsByNameOrRvalue [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  Scope  scope  NodeTraversal  t  Node  n  nameNode  parent  String  name  
[BugLab_Variable_Misuse]^replaceWithEmpty ( n, nameNode ) ;^160^^^^^144^163^replaceWithEmpty ( n, parent ) ;^[CLASS] Strip  [METHOD] removeVarDeclarationsByNameOrRvalue [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  Scope  scope  NodeTraversal  t  Node  n  nameNode  parent  String  name  
[BugLab_Argument_Swapping]^replaceWithEmpty ( parent, n ) ;^160^^^^^144^163^replaceWithEmpty ( n, parent ) ;^[CLASS] Strip  [METHOD] removeVarDeclarationsByNameOrRvalue [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  Scope  scope  NodeTraversal  t  Node  n  nameNode  parent  String  name  
[BugLab_Variable_Misuse]^if  ( !n.hasChildreparent (  )  )  {^158^^^^^144^163^if  ( !n.hasChildren (  )  )  {^[CLASS] Strip  [METHOD] removeVarDeclarationsByNameOrRvalue [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  Scope  scope  NodeTraversal  t  Node  n  nameNode  parent  String  name  
[BugLab_Wrong_Literal]^while  ( false )  {^195^^^^^180^210^while  ( true )  {^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[BugLab_Variable_Misuse]^if  ( NodeUtil.isExpressionNode ( rvalue )  )  {^196^^^^^181^211^if  ( NodeUtil.isExpressionNode ( ancestor )  )  {^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[BugLab_Variable_Misuse]^Node ancParent = parent.getParent (  ) ;^198^^^^^183^213^Node ancParent = ancestor.getParent (  ) ;^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[BugLab_Variable_Misuse]^replaceWithEmpty ( parent, ancParent ) ;^199^^^^^184^214^replaceWithEmpty ( ancestor, ancParent ) ;^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[BugLab_Variable_Misuse]^replaceWithEmpty ( ancestor, rvalue ) ;^199^^^^^184^214^replaceWithEmpty ( ancestor, ancParent ) ;^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[BugLab_Argument_Swapping]^replaceWithEmpty ( ancParent, ancestor ) ;^199^^^^^184^214^replaceWithEmpty ( ancestor, ancParent ) ;^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[BugLab_Wrong_Operator]^if  ( type != Token.GETPROP || type != Token.GETELEM && type != Token.CALL )  {^203^204^205^^^188^218^if  ( type != Token.GETPROP && type != Token.GETELEM && type != Token.CALL )  {^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[BugLab_Wrong_Operator]^if  ( type <= Token.GETPROP && type != Token.GETELEM && type != Token.CALL )  {^203^204^205^^^188^218^if  ( type != Token.GETPROP && type != Token.GETELEM && type != Token.CALL )  {^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[BugLab_Wrong_Operator]^if  ( type == Token.GETPROP && type != Token.GETELEM && type != Token.CALL )  {^203^204^205^^^188^218^if  ( type != Token.GETPROP && type != Token.GETELEM && type != Token.CALL )  {^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[BugLab_Variable_Misuse]^replaceWithNull ( rvalue, ancestor ) ;^206^^^^^203^208^replaceWithNull ( ancestorChild, ancestor ) ;^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[BugLab_Variable_Misuse]^replaceWithNull ( rvalueChild, ancestor ) ;^206^^^^^203^208^replaceWithNull ( ancestorChild, ancestor ) ;^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[BugLab_Argument_Swapping]^replaceWithNull ( ancestor, ancestorChild ) ;^206^^^^^203^208^replaceWithNull ( ancestorChild, ancestor ) ;^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[BugLab_Argument_Swapping]^replaceWithNull ( ancestorChildChild, ancestor ) ;^206^^^^^203^208^replaceWithNull ( ancestorChild, ancestor ) ;^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[BugLab_Variable_Misuse]^ancestorChild = parent;^209^^^^^194^224^ancestorChild = ancestor;^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[BugLab_Variable_Misuse]^ancestor = rvalue.getParent (  ) ;^210^^^^^195^225^ancestor = ancestor.getParent (  ) ;^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[BugLab_Variable_Misuse]^int type = rvalue.getType (  ) ;^202^^^^^187^217^int type = ancestor.getType (  ) ;^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[BugLab_Variable_Misuse]^if  ( NodeUtil.isExpressionNode ( n )  )  {^196^^^^^181^211^if  ( NodeUtil.isExpressionNode ( ancestor )  )  {^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[BugLab_Variable_Misuse]^Node ancParent = rvalue.getParent (  ) ;^198^^^^^183^213^Node ancParent = ancestor.getParent (  ) ;^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[BugLab_Variable_Misuse]^replaceWithEmpty ( rvalue, ancParent ) ;^199^^^^^184^214^replaceWithEmpty ( ancestor, ancParent ) ;^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[BugLab_Variable_Misuse]^replaceWithNull ( parent, ancestor ) ;^206^^^^^191^221^replaceWithNull ( ancestorChild, ancestor ) ;^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[BugLab_Variable_Misuse]^replaceWithNull ( rvalueChild, ancestor ) ;^206^^^^^191^221^replaceWithNull ( ancestorChild, ancestor ) ;^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[BugLab_Argument_Swapping]^replaceWithNull ( ancestor, ancestorChild ) ;^206^^^^^191^221^replaceWithNull ( ancestorChild, ancestor ) ;^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[BugLab_Argument_Swapping]^replaceWithNull ( ancestorChildChild, ancestor ) ;^206^^^^^191^221^replaceWithNull ( ancestorChild, ancestor ) ;^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[BugLab_Variable_Misuse]^if  ( rvalue.getFirstChild (  )  == n && isReferenceToRemovedVar ( t, n )  )  {^187^^^^^172^202^if  ( parent.getFirstChild (  )  == n && isReferenceToRemovedVar ( t, n )  )  {^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[BugLab_Variable_Misuse]^if  ( parent.getFirstChild (  )  == rvalue && isReferenceToRemovedVar ( t, n )  )  {^187^^^^^172^202^if  ( parent.getFirstChild (  )  == n && isReferenceToRemovedVar ( t, n )  )  {^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[BugLab_Argument_Swapping]^if  ( n.getFirstChild (  )  == parent && isReferenceToRemovedVar ( t, n )  )  {^187^^^^^172^202^if  ( parent.getFirstChild (  )  == n && isReferenceToRemovedVar ( t, n )  )  {^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[BugLab_Wrong_Operator]^if  ( parent.getFirstChild (  )  == n || isReferenceToRemovedVar ( t, n )  )  {^187^^^^^172^202^if  ( parent.getFirstChild (  )  == n && isReferenceToRemovedVar ( t, n )  )  {^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[BugLab_Wrong_Operator]^if  ( parent.getFirstChild (  )  != n && isReferenceToRemovedVar ( t, n )  )  {^187^^^^^172^202^if  ( parent.getFirstChild (  )  == n && isReferenceToRemovedVar ( t, n )  )  {^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[BugLab_Variable_Misuse]^ancestorChild = rvalue;^209^^^^^194^224^ancestorChild = ancestor;^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[BugLab_Variable_Misuse]^if  ( NodeUtil.isExpressionNode ( parent )  )  {^196^^^^^181^211^if  ( NodeUtil.isExpressionNode ( ancestor )  )  {^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[BugLab_Variable_Misuse]^replaceWithEmpty ( ancestor, parent ) ;^199^^^^^184^214^replaceWithEmpty ( ancestor, ancParent ) ;^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[BugLab_Variable_Misuse]^replaceWithNull ( rvalue, ancestor ) ;^206^^^^^191^221^replaceWithNull ( ancestorChild, ancestor ) ;^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[BugLab_Variable_Misuse]^replaceWithNull ( parentChild, ancestor ) ;^206^^^^^191^221^replaceWithNull ( ancestorChild, ancestor ) ;^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[BugLab_Variable_Misuse]^if  ( type != Token.GETPROP && type != Token.3 && type != Token.CALL )  {^203^204^205^^^188^218^if  ( type != Token.GETPROP && type != Token.GETELEM && type != Token.CALL )  {^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[BugLab_Wrong_Operator]^if  ( type >= Token.GETPROP && type != Token.GETELEM && type != Token.CALL )  {^203^204^205^^^188^218^if  ( type != Token.GETPROP && type != Token.GETELEM && type != Token.CALL )  {^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[BugLab_Variable_Misuse]^replaceWithNull ( parentChild, ancestor ) ;^206^^^^^203^208^replaceWithNull ( ancestorChild, ancestor ) ;^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[BugLab_Variable_Misuse]^Node ancestor = n.getParent (  ) ;^193^^^^^178^208^Node ancestor = parent.getParent (  ) ;^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[BugLab_Variable_Misuse]^Node ancestorChild = rvalue;^194^^^^^179^209^Node ancestorChild = parent;^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[BugLab_Variable_Misuse]^int type = n.getType (  ) ;^202^^^^^187^217^int type = ancestor.getType (  ) ;^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[BugLab_Variable_Misuse]^Node ancestor = greatGramps.getParent (  ) ;^193^^^^^178^208^Node ancestor = parent.getParent (  ) ;^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[BugLab_Variable_Misuse]^Node ancParent = n.getParent (  ) ;^198^^^^^183^213^Node ancParent = ancestor.getParent (  ) ;^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[BugLab_Variable_Misuse]^ancestor = n.getParent (  ) ;^210^^^^^195^225^ancestor = ancestor.getParent (  ) ;^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[BugLab_Variable_Misuse]^if  ( isReferenceToRemovedVar ( t, rvalue )  )  {^228^^^^^213^243^if  ( isReferenceToRemovedVar ( t, n )  )  {^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[BugLab_Argument_Swapping]^if  ( isReferenceToRemovedVar ( n, t )  )  {^228^^^^^213^243^if  ( isReferenceToRemovedVar ( t, n )  )  {^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[BugLab_Variable_Misuse]^if  ( n.getFirstChild (  )  == n )  {^229^^^^^214^244^if  ( parent.getFirstChild (  )  == n )  {^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[BugLab_Variable_Misuse]^if  ( parent.getFirstChild (  )  == parent )  {^229^^^^^214^244^if  ( parent.getFirstChild (  )  == n )  {^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[BugLab_Argument_Swapping]^if  ( n.getFirstChild (  )  == parent )  {^229^^^^^214^244^if  ( parent.getFirstChild (  )  == n )  {^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[BugLab_Wrong_Operator]^if  ( parent.getFirstChild (  )  >= n )  {^229^^^^^214^244^if  ( parent.getFirstChild (  )  == n )  {^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[BugLab_Variable_Misuse]^replaceWithNull ( rvalue, parent ) ;^245^^^^^229^247^replaceWithNull ( n, parent ) ;^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[BugLab_Variable_Misuse]^replaceWithNull ( n, rvalue ) ;^245^^^^^229^247^replaceWithNull ( n, parent ) ;^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[BugLab_Argument_Swapping]^replaceWithNull ( parent, n ) ;^245^^^^^229^247^replaceWithNull ( n, parent ) ;^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[BugLab_Variable_Misuse]^Node rvalue = greatGramps.getNext (  ) ;^238^^^^^231^242^Node rvalue = n.getNext (  ) ;^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[BugLab_Variable_Misuse]^parent.removeChild ( n ) ;^239^^^^^231^242^parent.removeChild ( rvalue ) ;^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[BugLab_Variable_Misuse]^gramps.replaceChild ( n, rvalue ) ;^240^^^^^231^242^gramps.replaceChild ( parent, rvalue ) ;^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[BugLab_Variable_Misuse]^gramps.replaceChild ( parent, parent ) ;^240^^^^^231^242^gramps.replaceChild ( parent, rvalue ) ;^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[BugLab_Argument_Swapping]^gramps.replaceChild ( rvalue, parent ) ;^240^^^^^231^242^gramps.replaceChild ( parent, rvalue ) ;^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[BugLab_Variable_Misuse]^Node greatGramps = rvalue.getParent (  ) ;^233^^^^^218^248^Node greatGramps = gramps.getParent (  ) ;^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[BugLab_Variable_Misuse]^replaceWithEmpty ( parent, greatGramps ) ;^234^^^^^219^249^replaceWithEmpty ( gramps, greatGramps ) ;^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[BugLab_Variable_Misuse]^replaceWithEmpty ( gramps, rvalue ) ;^234^^^^^219^249^replaceWithEmpty ( gramps, greatGramps ) ;^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[BugLab_Argument_Swapping]^replaceWithEmpty ( greatGramps, gramps ) ;^234^^^^^219^249^replaceWithEmpty ( gramps, greatGramps ) ;^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[BugLab_Variable_Misuse]^Node gramps = rvalue.getParent (  ) ;^230^^^^^215^245^Node gramps = parent.getParent (  ) ;^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[BugLab_Variable_Misuse]^Node rvalue = greatGramps.getNext (  ) ;^238^^^^^223^253^Node rvalue = n.getNext (  ) ;^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[BugLab_Variable_Misuse]^if  ( NodeUtil.isExpressionNode ( n )  )  {^231^^^^^216^246^if  ( NodeUtil.isExpressionNode ( gramps )  )  {^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[BugLab_Variable_Misuse]^Node greatGramps = parent.getParent (  ) ;^233^^^^^218^248^Node greatGramps = gramps.getParent (  ) ;^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[BugLab_Variable_Misuse]^replaceWithEmpty ( rvalue, greatGramps ) ;^234^^^^^219^249^replaceWithEmpty ( gramps, greatGramps ) ;^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[BugLab_Variable_Misuse]^parent.removeChild ( n ) ;^239^^^^^224^254^parent.removeChild ( rvalue ) ;^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[BugLab_Variable_Misuse]^gramps.replaceChild ( n, rvalue ) ;^240^^^^^225^255^gramps.replaceChild ( parent, rvalue ) ;^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[BugLab_Variable_Misuse]^gramps.replaceChild ( parent, n ) ;^240^^^^^225^255^gramps.replaceChild ( parent, rvalue ) ;^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[BugLab_Argument_Swapping]^gramps.replaceChild ( rvalue, parent ) ;^240^^^^^225^255^gramps.replaceChild ( parent, rvalue ) ;^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[BugLab_Variable_Misuse]^if  ( NodeUtil.isExpressionNode ( rvalue )  )  {^231^^^^^216^246^if  ( NodeUtil.isExpressionNode ( gramps )  )  {^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[BugLab_Variable_Misuse]^Node rvalue = parent.getNext (  ) ;^238^^^^^231^242^Node rvalue = n.getNext (  ) ;^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[BugLab_Variable_Misuse]^Node rvalue = parent.getNext (  ) ;^238^^^^^223^253^Node rvalue = n.getNext (  ) ;^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[BugLab_Variable_Misuse]^if  ( greatGramps.getFirstChild (  )  == n )  {^229^^^^^214^244^if  ( parent.getFirstChild (  )  == n )  {^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[BugLab_Variable_Misuse]^Node greatGramps = n.getParent (  ) ;^233^^^^^218^248^Node greatGramps = gramps.getParent (  ) ;^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[BugLab_Variable_Misuse]^Node rvalue = rvalue.getNext (  ) ;^238^^^^^223^253^Node rvalue = n.getNext (  ) ;^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[BugLab_Variable_Misuse]^parent.removeChild ( greatGramps ) ;^239^^^^^224^254^parent.removeChild ( rvalue ) ;^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[BugLab_Variable_Misuse]^gramps.replaceChild ( parent, parent ) ;^240^^^^^225^255^gramps.replaceChild ( parent, rvalue ) ;^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[BugLab_Variable_Misuse]^replaceWithNull ( rvalue, parent ) ;^245^^^^^230^260^replaceWithNull ( n, parent ) ;^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[BugLab_Variable_Misuse]^replaceWithNull ( n, rvalue ) ;^245^^^^^230^260^replaceWithNull ( n, parent ) ;^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[BugLab_Argument_Swapping]^replaceWithNull ( parent, n ) ;^245^^^^^230^260^replaceWithNull ( n, parent ) ;^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[BugLab_Variable_Misuse]^if  ( rvalue.getFirstChild (  )  == n )  {^229^^^^^214^244^if  ( parent.getFirstChild (  )  == n )  {^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[BugLab_Wrong_Operator]^if  ( parent.getFirstChild (  )  <= n )  {^229^^^^^214^244^if  ( parent.getFirstChild (  )  == n )  {^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[BugLab_Variable_Misuse]^replaceWithNull ( greatGramps, parent ) ;^245^^^^^229^247^replaceWithNull ( n, parent ) ;^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[BugLab_Variable_Misuse]^Node rvalue = rvalue.getNext (  ) ;^238^^^^^231^242^Node rvalue = n.getNext (  ) ;^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[BugLab_Variable_Misuse]^gramps.replaceChild ( greatGramps, rvalue ) ;^240^^^^^231^242^gramps.replaceChild ( parent, rvalue ) ;^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[BugLab_Variable_Misuse]^gramps.replaceChild ( parent, n ) ;^240^^^^^231^242^gramps.replaceChild ( parent, rvalue ) ;^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[BugLab_Variable_Misuse]^replaceWithEmpty ( gramps, parent ) ;^234^^^^^219^249^replaceWithEmpty ( gramps, greatGramps ) ;^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[BugLab_Variable_Misuse]^parent.removeChild ( greatGramps ) ;^239^^^^^231^242^parent.removeChild ( rvalue ) ;^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[BugLab_Argument_Swapping]^if  ( isReferenceToRemovedVar ( n, t )  )  {^252^^^^^237^267^if  ( isReferenceToRemovedVar ( t, n )  )  {^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[BugLab_Variable_Misuse]^replaceWithNull ( rvalue, parent ) ;^253^^^^^238^268^replaceWithNull ( n, parent ) ;^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[BugLab_Variable_Misuse]^replaceWithNull ( n, greatGramps ) ;^253^^^^^238^268^replaceWithNull ( n, parent ) ;^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[BugLab_Argument_Swapping]^replaceWithNull ( parent, n ) ;^253^^^^^238^268^replaceWithNull ( n, parent ) ;^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[BugLab_Variable_Misuse]^ancestorChild = n;^209^^^^^194^224^ancestorChild = ancestor;^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[BugLab_Variable_Misuse]^Node ancestor = rvalue.getParent (  ) ;^193^^^^^178^208^Node ancestor = parent.getParent (  ) ;^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[BugLab_Variable_Misuse]^if  ( greatGramps.getFirstChild (  )  == n && isReferenceToRemovedVar ( t, n )  )  {^187^^^^^172^202^if  ( parent.getFirstChild (  )  == n && isReferenceToRemovedVar ( t, n )  )  {^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[BugLab_Variable_Misuse]^if  ( parent.getFirstChild (  )  == parent && isReferenceToRemovedVar ( t, n )  )  {^187^^^^^172^202^if  ( parent.getFirstChild (  )  == n && isReferenceToRemovedVar ( t, n )  )  {^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[BugLab_Argument_Swapping]^if  ( parent.getFirstChild (  )  == t && isReferenceToRemovedVar ( n, n )  )  {^187^^^^^172^202^if  ( parent.getFirstChild (  )  == n && isReferenceToRemovedVar ( t, n )  )  {^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[BugLab_Variable_Misuse]^if  ( isReferenceToRemovedVar ( t, parent )  )  {^252^^^^^237^267^if  ( isReferenceToRemovedVar ( t, n )  )  {^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[BugLab_Variable_Misuse]^replaceWithNull ( n, rvalue ) ;^253^^^^^238^268^replaceWithNull ( n, parent ) ;^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[BugLab_Variable_Misuse]^Node lvalue = parent.getFirstChild (  ) ;^274^^^^^269^285^Node lvalue = n.getFirstChild (  ) ;^[CLASS] Strip  [METHOD] maybeEliminateAssignmentByLvalueName [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  gramps  lvalue  n  parent  
[BugLab_Variable_Misuse]^if  ( nameEndsWithFieldNameToStrip ( parent )  || qualifiedNameBeginsWithStripType ( lvalue )  )  {^275^276^^^^269^285^if  ( nameEndsWithFieldNameToStrip ( lvalue )  || qualifiedNameBeginsWithStripType ( lvalue )  )  {^[CLASS] Strip  [METHOD] maybeEliminateAssignmentByLvalueName [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  gramps  lvalue  n  parent  
[BugLab_Variable_Misuse]^if  ( parentameEndsWithFieldNameToStrip ( lvalue )  || qualifiedNameBeginsWithStripType ( lvalue )  )  {^275^276^^^^269^285^if  ( nameEndsWithFieldNameToStrip ( lvalue )  || qualifiedNameBeginsWithStripType ( lvalue )  )  {^[CLASS] Strip  [METHOD] maybeEliminateAssignmentByLvalueName [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  gramps  lvalue  n  parent  
[BugLab_Argument_Swapping]^if  ( lvalueameEndsWithFieldNameToStrip ( n )  || qualifiedNameBeginsWithStripType ( lvalue )  )  {^275^276^^^^269^285^if  ( nameEndsWithFieldNameToStrip ( lvalue )  || qualifiedNameBeginsWithStripType ( lvalue )  )  {^[CLASS] Strip  [METHOD] maybeEliminateAssignmentByLvalueName [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  gramps  lvalue  n  parent  
[BugLab_Wrong_Operator]^if  ( nameEndsWithFieldNameToStrip ( lvalue )  && qualifiedNameBeginsWithStripType ( lvalue )  )  {^275^276^^^^269^285^if  ( nameEndsWithFieldNameToStrip ( lvalue )  || qualifiedNameBeginsWithStripType ( lvalue )  )  {^[CLASS] Strip  [METHOD] maybeEliminateAssignmentByLvalueName [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  gramps  lvalue  n  parent  
[BugLab_Variable_Misuse]^if  ( NodeUtil.isExpressionNode ( n )  )  {^277^^^^^269^285^if  ( NodeUtil.isExpressionNode ( parent )  )  {^[CLASS] Strip  [METHOD] maybeEliminateAssignmentByLvalueName [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  gramps  lvalue  n  parent  
[BugLab_Variable_Misuse]^replaceWithEmpty ( lvalue, parent ) ;^281^^^^^269^285^replaceWithEmpty ( n, parent ) ;^[CLASS] Strip  [METHOD] maybeEliminateAssignmentByLvalueName [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  gramps  lvalue  n  parent  
[BugLab_Variable_Misuse]^replaceWithEmpty ( n, lvalue ) ;^281^^^^^269^285^replaceWithEmpty ( n, parent ) ;^[CLASS] Strip  [METHOD] maybeEliminateAssignmentByLvalueName [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  gramps  lvalue  n  parent  
[BugLab_Argument_Swapping]^replaceWithEmpty ( parent, n ) ;^281^^^^^269^285^replaceWithEmpty ( n, parent ) ;^[CLASS] Strip  [METHOD] maybeEliminateAssignmentByLvalueName [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  gramps  lvalue  n  parent  
[BugLab_Variable_Misuse]^Node gramps = n.getParent (  ) ;^278^^^^^269^285^Node gramps = parent.getParent (  ) ;^[CLASS] Strip  [METHOD] maybeEliminateAssignmentByLvalueName [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  gramps  lvalue  n  parent  
[BugLab_Variable_Misuse]^replaceWithEmpty ( n, gramps ) ;^279^^^^^269^285^replaceWithEmpty ( parent, gramps ) ;^[CLASS] Strip  [METHOD] maybeEliminateAssignmentByLvalueName [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  gramps  lvalue  n  parent  
[BugLab_Variable_Misuse]^replaceWithEmpty ( parent, n ) ;^279^^^^^269^285^replaceWithEmpty ( parent, gramps ) ;^[CLASS] Strip  [METHOD] maybeEliminateAssignmentByLvalueName [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  gramps  lvalue  n  parent  
[BugLab_Argument_Swapping]^replaceWithEmpty ( gramps, parent ) ;^279^^^^^269^285^replaceWithEmpty ( parent, gramps ) ;^[CLASS] Strip  [METHOD] maybeEliminateAssignmentByLvalueName [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  gramps  lvalue  n  parent  
[BugLab_Variable_Misuse]^qualifiedNameBeginsWithStripType ( parent )  )  {^276^^^^^269^285^qualifiedNameBeginsWithStripType ( lvalue )  )  {^[CLASS] Strip  [METHOD] maybeEliminateAssignmentByLvalueName [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  gramps  lvalue  n  parent  
[BugLab_Variable_Misuse]^Node expression = parent.getFirstChild (  ) ;^303^^^^^299^314^Node expression = n.getFirstChild (  ) ;^[CLASS] Strip  [METHOD] maybeEliminateExpressionByName [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  expression  gramps  n  parent  
[BugLab_Variable_Misuse]^if  ( nameEndsWithFieldNameToStrip ( parent )  || qualifiedNameBeginsWithStripType ( expression )  )  {^304^305^^^^299^314^if  ( nameEndsWithFieldNameToStrip ( expression )  || qualifiedNameBeginsWithStripType ( expression )  )  {^[CLASS] Strip  [METHOD] maybeEliminateExpressionByName [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  expression  gramps  n  parent  
[BugLab_Variable_Misuse]^if  ( parentameEndsWithFieldNameToStrip ( expression )  || qualifiedNameBeginsWithStripType ( expression )  )  {^304^305^^^^299^314^if  ( nameEndsWithFieldNameToStrip ( expression )  || qualifiedNameBeginsWithStripType ( expression )  )  {^[CLASS] Strip  [METHOD] maybeEliminateExpressionByName [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  expression  gramps  n  parent  
[BugLab_Argument_Swapping]^if  ( expressionameEndsWithFieldNameToStrip ( n )  || qualifiedNameBeginsWithStripType ( expression )  )  {^304^305^^^^299^314^if  ( nameEndsWithFieldNameToStrip ( expression )  || qualifiedNameBeginsWithStripType ( expression )  )  {^[CLASS] Strip  [METHOD] maybeEliminateExpressionByName [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  expression  gramps  n  parent  
[BugLab_Wrong_Operator]^if  ( nameEndsWithFieldNameToStrip ( expression )  && qualifiedNameBeginsWithStripType ( expression )  )  {^304^305^^^^299^314^if  ( nameEndsWithFieldNameToStrip ( expression )  || qualifiedNameBeginsWithStripType ( expression )  )  {^[CLASS] Strip  [METHOD] maybeEliminateExpressionByName [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  expression  gramps  n  parent  
[BugLab_Variable_Misuse]^if  ( NodeUtil.isExpressionNode ( n )  )  {^306^^^^^299^314^if  ( NodeUtil.isExpressionNode ( parent )  )  {^[CLASS] Strip  [METHOD] maybeEliminateExpressionByName [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  expression  gramps  n  parent  
[BugLab_Variable_Misuse]^replaceWithEmpty ( gramps, parent ) ;^310^^^^^299^314^replaceWithEmpty ( n, parent ) ;^[CLASS] Strip  [METHOD] maybeEliminateExpressionByName [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  expression  gramps  n  parent  
[BugLab_Variable_Misuse]^replaceWithEmpty ( n, gramps ) ;^310^^^^^299^314^replaceWithEmpty ( n, parent ) ;^[CLASS] Strip  [METHOD] maybeEliminateExpressionByName [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  expression  gramps  n  parent  
[BugLab_Argument_Swapping]^replaceWithEmpty ( parent, n ) ;^310^^^^^299^314^replaceWithEmpty ( n, parent ) ;^[CLASS] Strip  [METHOD] maybeEliminateExpressionByName [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  expression  gramps  n  parent  
[BugLab_Variable_Misuse]^Node gramps = n.getParent (  ) ;^307^^^^^299^314^Node gramps = parent.getParent (  ) ;^[CLASS] Strip  [METHOD] maybeEliminateExpressionByName [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  expression  gramps  n  parent  
[BugLab_Variable_Misuse]^replaceWithEmpty ( n, gramps ) ;^308^^^^^299^314^replaceWithEmpty ( parent, gramps ) ;^[CLASS] Strip  [METHOD] maybeEliminateExpressionByName [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  expression  gramps  n  parent  
[BugLab_Variable_Misuse]^replaceWithEmpty ( parent, n ) ;^308^^^^^299^314^replaceWithEmpty ( parent, gramps ) ;^[CLASS] Strip  [METHOD] maybeEliminateExpressionByName [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  expression  gramps  n  parent  
[BugLab_Argument_Swapping]^replaceWithEmpty ( gramps, parent ) ;^308^^^^^299^314^replaceWithEmpty ( parent, gramps ) ;^[CLASS] Strip  [METHOD] maybeEliminateExpressionByName [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  expression  gramps  n  parent  
[BugLab_Variable_Misuse]^qualifiedNameBeginsWithStripType ( parent )  )  {^305^^^^^299^314^qualifiedNameBeginsWithStripType ( expression )  )  {^[CLASS] Strip  [METHOD] maybeEliminateExpressionByName [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  expression  gramps  n  parent  
[BugLab_Wrong_Literal]^while  ( false )  {^336^^^^^321^351^while  ( true )  {^[CLASS] Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[BugLab_Variable_Misuse]^if  ( parent.getFirstChild (  )  != ancestorChild )  {^337^^^^^322^352^if  ( ancestor.getFirstChild (  )  != ancestorChild )  {^[CLASS] Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[BugLab_Variable_Misuse]^if  ( ancestor.getFirstChild (  )  != parent )  {^337^^^^^322^352^if  ( ancestor.getFirstChild (  )  != ancestorChild )  {^[CLASS] Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[BugLab_Argument_Swapping]^if  ( ancestorChild.getFirstChild (  )  != ancestor )  {^337^^^^^322^352^if  ( ancestor.getFirstChild (  )  != ancestorChild )  {^[CLASS] Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[BugLab_Wrong_Operator]^if  ( ancestor.getFirstChild (  )  >= ancestorChild )  {^337^^^^^322^352^if  ( ancestor.getFirstChild (  )  != ancestorChild )  {^[CLASS] Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[BugLab_Variable_Misuse]^replaceWithNull ( parent, ancestor ) ;^338^^^^^323^353^replaceWithNull ( ancestorChild, ancestor ) ;^[CLASS] Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[BugLab_Variable_Misuse]^replaceWithNull ( parentChild, ancestor ) ;^338^^^^^323^353^replaceWithNull ( ancestorChild, ancestor ) ;^[CLASS] Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[BugLab_Argument_Swapping]^replaceWithNull ( ancestor, ancestorChild ) ;^338^^^^^323^353^replaceWithNull ( ancestorChild, ancestor ) ;^[CLASS] Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[BugLab_Argument_Swapping]^replaceWithNull ( ancestorChildChild, ancestor ) ;^338^^^^^323^353^replaceWithNull ( ancestorChild, ancestor ) ;^[CLASS] Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[BugLab_Variable_Misuse]^if  ( NodeUtil.isExpressionNode ( parent )  )  {^341^^^^^326^356^if  ( NodeUtil.isExpressionNode ( ancestor )  )  {^[CLASS] Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[BugLab_Variable_Misuse]^Node ancParent = parent.getParent (  ) ;^343^^^^^328^358^Node ancParent = ancestor.getParent (  ) ;^[CLASS] Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[BugLab_Variable_Misuse]^replaceWithEmpty ( parent, ancParent ) ;^344^^^^^329^359^replaceWithEmpty ( ancestor, ancParent ) ;^[CLASS] Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[BugLab_Variable_Misuse]^replaceWithEmpty ( ancestor, parent ) ;^344^^^^^329^359^replaceWithEmpty ( ancestor, ancParent ) ;^[CLASS] Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[BugLab_Argument_Swapping]^replaceWithEmpty ( ancParent, ancestor ) ;^344^^^^^329^359^replaceWithEmpty ( ancestor, ancParent ) ;^[CLASS] Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[BugLab_Variable_Misuse]^if  ( ancestorLevel != Token.GETPROP && type != Token.GETELEM && type != Token.CALL )  {^348^349^350^^^333^363^if  ( type != Token.GETPROP && type != Token.GETELEM && type != Token.CALL )  {^[CLASS] Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[BugLab_Wrong_Operator]^if  ( type != Token.GETPROP || type != Token.GETELEM && type != Token.CALL )  {^348^349^350^^^333^363^if  ( type != Token.GETPROP && type != Token.GETELEM && type != Token.CALL )  {^[CLASS] Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[BugLab_Wrong_Operator]^if  ( type == Token.GETPROP && type != Token.GETELEM && type != Token.CALL )  {^348^349^350^^^333^363^if  ( type != Token.GETPROP && type != Token.GETELEM && type != Token.CALL )  {^[CLASS] Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[BugLab_Variable_Misuse]^replaceWithNull ( parent, ancestor ) ;^351^^^^^348^353^replaceWithNull ( ancestorChild, ancestor ) ;^[CLASS] Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[BugLab_Variable_Misuse]^replaceWithNull ( parentChild, ancestor ) ;^351^^^^^348^353^replaceWithNull ( ancestorChild, ancestor ) ;^[CLASS] Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[BugLab_Argument_Swapping]^replaceWithNull ( ancestor, ancestorChild ) ;^351^^^^^348^353^replaceWithNull ( ancestorChild, ancestor ) ;^[CLASS] Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[BugLab_Argument_Swapping]^replaceWithNull ( ancestorChildChild, ancestor ) ;^351^^^^^348^353^replaceWithNull ( ancestorChild, ancestor ) ;^[CLASS] Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[BugLab_Variable_Misuse]^ancestorChild = parent;^354^^^^^339^369^ancestorChild = ancestor;^[CLASS] Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[BugLab_Variable_Misuse]^ancestor = parent.getParent (  ) ;^355^^^^^340^370^ancestor = ancestor.getParent (  ) ;^[CLASS] Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[BugLab_Variable_Misuse]^int type = n.getType (  ) ;^347^^^^^332^362^int type = ancestor.getType (  ) ;^[CLASS] Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[BugLab_Variable_Misuse]^int type = parent.getType (  ) ;^347^^^^^332^362^int type = ancestor.getType (  ) ;^[CLASS] Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[BugLab_Variable_Misuse]^replaceWithNull ( parentChild, ancestor ) ;^351^^^^^336^366^replaceWithNull ( ancestorChild, ancestor ) ;^[CLASS] Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[BugLab_Argument_Swapping]^replaceWithNull ( ancestor, ancestorChild ) ;^351^^^^^336^366^replaceWithNull ( ancestorChild, ancestor ) ;^[CLASS] Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[BugLab_Argument_Swapping]^replaceWithNull ( ancestorChildChild, ancestor ) ;^351^^^^^336^366^replaceWithNull ( ancestorChild, ancestor ) ;^[CLASS] Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[BugLab_Variable_Misuse]^ancestor = n.getParent (  ) ;^355^^^^^340^370^ancestor = ancestor.getParent (  ) ;^[CLASS] Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[BugLab_Variable_Misuse]^if  ( isMethodCallThatTriggersRemoval ( t, parent, parent )  )  {^328^^^^^313^343^if  ( isMethodCallThatTriggersRemoval ( t, n, parent )  )  {^[CLASS] Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[BugLab_Variable_Misuse]^if  ( isMethodCallThatTriggersRemoval ( t, n, n )  )  {^328^^^^^313^343^if  ( isMethodCallThatTriggersRemoval ( t, n, parent )  )  {^[CLASS] Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[BugLab_Wrong_Operator]^if  ( ancestor.getFirstChild (  )  == ancestorChild )  {^337^^^^^322^352^if  ( ancestor.getFirstChild (  )  != ancestorChild )  {^[CLASS] Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[BugLab_Variable_Misuse]^Node ancParent = n.getParent (  ) ;^343^^^^^328^358^Node ancParent = ancestor.getParent (  ) ;^[CLASS] Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[BugLab_Variable_Misuse]^if  ( type != Token.4 && type != Token.GETELEM && type != Token.CALL )  {^348^349^350^^^333^363^if  ( type != Token.GETPROP && type != Token.GETELEM && type != Token.CALL )  {^[CLASS] Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[BugLab_Wrong_Operator]^if  ( type < Token.GETPROP && type != Token.GETELEM && type != Token.CALL )  {^348^349^350^^^333^363^if  ( type != Token.GETPROP && type != Token.GETELEM && type != Token.CALL )  {^[CLASS] Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[BugLab_Variable_Misuse]^ancestorChild = n;^354^^^^^339^369^ancestorChild = ancestor;^[CLASS] Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[BugLab_Variable_Misuse]^replaceWithNull ( parent, ancestor ) ;^351^^^^^336^366^replaceWithNull ( ancestorChild, ancestor ) ;^[CLASS] Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[BugLab_Wrong_Operator]^if  ( type <= Token.GETPROP && type != Token.GETELEM && type != Token.CALL )  {^348^349^350^^^333^363^if  ( type != Token.GETPROP && type != Token.GETELEM && type != Token.CALL )  {^[CLASS] Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[BugLab_Variable_Misuse]^Node ancestor = n;^333^^^^^318^348^Node ancestor = parent;^[CLASS] Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[BugLab_Variable_Misuse]^Node ancestorChild = parent;^334^^^^^319^349^Node ancestorChild = n;^[CLASS] Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[BugLab_Wrong_Literal]^int ancestorLevel = ancestorLevel;^335^^^^^320^350^int ancestorLevel = 1;^[CLASS] Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[BugLab_Variable_Misuse]^if  ( type != Token.null && type != Token.GETELEM && type != Token.CALL )  {^348^349^350^^^333^363^if  ( type != Token.GETPROP && type != Token.GETELEM && type != Token.CALL )  {^[CLASS] Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[BugLab_Wrong_Operator]^if  ( type > Token.GETPROP && type != Token.GETELEM && type != Token.CALL )  {^348^349^350^^^333^363^if  ( type != Token.GETPROP && type != Token.GETELEM && type != Token.CALL )  {^[CLASS] Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[BugLab_Wrong_Literal]^int ancestorLevel = type;^335^^^^^320^350^int ancestorLevel = 1;^[CLASS] Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[BugLab_Variable_Misuse]^if  ( isMethodCallThatTriggersRemoval ( t, n, ancestorChild )  )  {^328^^^^^313^343^if  ( isMethodCallThatTriggersRemoval ( t, n, parent )  )  {^[CLASS] Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[BugLab_Argument_Swapping]^if  ( isMethodCallThatTriggersRemoval ( n, t, parent )  )  {^328^^^^^313^343^if  ( isMethodCallThatTriggersRemoval ( t, n, parent )  )  {^[CLASS] Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[BugLab_Argument_Swapping]^if  ( isMethodCallThatTriggersRemoval ( t, parent, n )  )  {^328^^^^^313^343^if  ( isMethodCallThatTriggersRemoval ( t, n, parent )  )  {^[CLASS] Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[BugLab_Variable_Misuse]^Node key = value.getFirstChild (  ) ;^373^^^^^368^387^Node key = n.getFirstChild (  ) ;^[CLASS] Strip  [METHOD] eliminateKeysWithStripNamesFromObjLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] boolean  NodeTraversal  t  Node  key  n  next  value  
[BugLab_Variable_Misuse]^while  ( next != null )  {^374^^^^^368^387^while  ( key != null )  {^[CLASS] Strip  [METHOD] eliminateKeysWithStripNamesFromObjLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] boolean  NodeTraversal  t  Node  key  n  next  value  
[BugLab_Variable_Misuse]^while  ( key != nextull )  {^374^^^^^368^387^while  ( key != null )  {^[CLASS] Strip  [METHOD] eliminateKeysWithStripNamesFromObjLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] boolean  NodeTraversal  t  Node  key  n  next  value  
[BugLab_Wrong_Operator]^while  ( key == null )  {^374^^^^^368^387^while  ( key != null )  {^[CLASS] Strip  [METHOD] eliminateKeysWithStripNamesFromObjLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] boolean  NodeTraversal  t  Node  key  n  next  value  
[BugLab_Variable_Misuse]^if  ( next.getType (  )  == Token.STRING && isStripName ( key.getString (  )  )  )  {^375^376^^^^368^387^if  ( key.getType (  )  == Token.STRING && isStripName ( key.getString (  )  )  )  {^[CLASS] Strip  [METHOD] eliminateKeysWithStripNamesFromObjLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] boolean  NodeTraversal  t  Node  key  n  next  value  
[BugLab_Wrong_Operator]^if  ( key.getType (  )  == Token.STRING || isStripName ( key.getString (  )  )  )  {^375^376^^^^368^387^if  ( key.getType (  )  == Token.STRING && isStripName ( key.getString (  )  )  )  {^[CLASS] Strip  [METHOD] eliminateKeysWithStripNamesFromObjLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] boolean  NodeTraversal  t  Node  key  n  next  value  
[BugLab_Wrong_Operator]^if  ( key.getType (  )  >= Token.STRING && isStripName ( key.getString (  )  )  )  {^375^376^^^^368^387^if  ( key.getType (  )  == Token.STRING && isStripName ( key.getString (  )  )  )  {^[CLASS] Strip  [METHOD] eliminateKeysWithStripNamesFromObjLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] boolean  NodeTraversal  t  Node  key  n  next  value  
[BugLab_Variable_Misuse]^key = value.getNext (  ) .getNext (  ) ;^384^^^^^368^387^key = key.getNext (  ) .getNext (  ) ;^[CLASS] Strip  [METHOD] eliminateKeysWithStripNamesFromObjLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] boolean  NodeTraversal  t  Node  key  n  next  value  
[BugLab_Variable_Misuse]^Node value = next.getNext (  ) ;^377^^^^^368^387^Node value = key.getNext (  ) ;^[CLASS] Strip  [METHOD] eliminateKeysWithStripNamesFromObjLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] boolean  NodeTraversal  t  Node  key  n  next  value  
[BugLab_Variable_Misuse]^Node next = n.getNext (  ) ;^378^^^^^368^387^Node next = value.getNext (  ) ;^[CLASS] Strip  [METHOD] eliminateKeysWithStripNamesFromObjLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] boolean  NodeTraversal  t  Node  key  n  next  value  
[BugLab_Variable_Misuse]^Node value = value.getNext (  ) ;^377^^^^^368^387^Node value = key.getNext (  ) ;^[CLASS] Strip  [METHOD] eliminateKeysWithStripNamesFromObjLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] boolean  NodeTraversal  t  Node  key  n  next  value  
[BugLab_Variable_Misuse]^Node next = next.getNext (  ) ;^378^^^^^368^387^Node next = value.getNext (  ) ;^[CLASS] Strip  [METHOD] eliminateKeysWithStripNamesFromObjLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] boolean  NodeTraversal  t  Node  key  n  next  value  
[BugLab_Variable_Misuse]^n.removeChild ( value ) ;^379^^^^^368^387^n.removeChild ( key ) ;^[CLASS] Strip  [METHOD] eliminateKeysWithStripNamesFromObjLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] boolean  NodeTraversal  t  Node  key  n  next  value  
[BugLab_Variable_Misuse]^n.removeChild ( next ) ;^380^^^^^368^387^n.removeChild ( value ) ;^[CLASS] Strip  [METHOD] eliminateKeysWithStripNamesFromObjLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] boolean  NodeTraversal  t  Node  key  n  next  value  
[BugLab_Variable_Misuse]^key = value;^381^^^^^368^387^key = next;^[CLASS] Strip  [METHOD] eliminateKeysWithStripNamesFromObjLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] boolean  NodeTraversal  t  Node  key  n  next  value  
[BugLab_Variable_Misuse]^if  ( value.getType (  )  == Token.STRING && isStripName ( key.getString (  )  )  )  {^375^376^^^^368^387^if  ( key.getType (  )  == Token.STRING && isStripName ( key.getString (  )  )  )  {^[CLASS] Strip  [METHOD] eliminateKeysWithStripNamesFromObjLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] boolean  NodeTraversal  t  Node  key  n  next  value  
[BugLab_Variable_Misuse]^isStripName ( value.getString (  )  )  )  {^376^^^^^368^387^isStripName ( key.getString (  )  )  )  {^[CLASS] Strip  [METHOD] eliminateKeysWithStripNamesFromObjLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] boolean  NodeTraversal  t  Node  key  n  next  value  
[BugLab_Wrong_Operator]^if  ( key.getType (  )  != Token.STRING && isStripName ( key.getString (  )  )  )  {^375^376^^^^368^387^if  ( key.getType (  )  == Token.STRING && isStripName ( key.getString (  )  )  )  {^[CLASS] Strip  [METHOD] eliminateKeysWithStripNamesFromObjLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] boolean  NodeTraversal  t  Node  key  n  next  value  
[BugLab_Wrong_Operator]^return n != null || n.getType (  )  == Token.CALL && n.hasChildren (  ) &&  ( qualifiedNameBeginsWithStripType ( n.getFirstChild (  )  )  || nameEndsWithFieldNameToStrip ( n.getFirstChild (  )  )  ) ;^403^404^405^^^402^406^return n != null && n.getType (  )  == Token.CALL && n.hasChildren (  ) &&  ( qualifiedNameBeginsWithStripType ( n.getFirstChild (  )  )  || nameEndsWithFieldNameToStrip ( n.getFirstChild (  )  )  ) ;^[CLASS] Strip  [METHOD] isCallWhoseReturnValueShouldBeStripped [RETURN_TYPE] boolean   Node n [VARIABLES] boolean  Node  n  
[BugLab_Wrong_Operator]^return n == null && n.getType (  )  == Token.CALL && n.hasChildren (  ) &&  ( qualifiedNameBeginsWithStripType ( n.getFirstChild (  )  )  || nameEndsWithFieldNameToStrip ( n.getFirstChild (  )  )  ) ;^403^404^405^^^402^406^return n != null && n.getType (  )  == Token.CALL && n.hasChildren (  ) &&  ( qualifiedNameBeginsWithStripType ( n.getFirstChild (  )  )  || nameEndsWithFieldNameToStrip ( n.getFirstChild (  )  )  ) ;^[CLASS] Strip  [METHOD] isCallWhoseReturnValueShouldBeStripped [RETURN_TYPE] boolean   Node n [VARIABLES] boolean  Node  n  
[BugLab_Wrong_Operator]^return n != null && n.getType (  )  != Token.CALL && n.hasChildren (  ) &&  ( qualifiedNameBeginsWithStripType ( n.getFirstChild (  )  )  || nameEndsWithFieldNameToStrip ( n.getFirstChild (  )  )  ) ;^403^404^405^^^402^406^return n != null && n.getType (  )  == Token.CALL && n.hasChildren (  ) &&  ( qualifiedNameBeginsWithStripType ( n.getFirstChild (  )  )  || nameEndsWithFieldNameToStrip ( n.getFirstChild (  )  )  ) ;^[CLASS] Strip  [METHOD] isCallWhoseReturnValueShouldBeStripped [RETURN_TYPE] boolean   Node n [VARIABLES] boolean  Node  n  
[BugLab_Wrong_Operator]^return n != null && n.getType (  )  == Token.CALL && n.hasChildren (  ) &&  ( qualifiedNameBeginsWithStripType ( n.getFirstChild (  )  )  && nameEndsWithFieldNameToStrip ( n.getFirstChild (  )  )  ) ;^403^404^405^^^402^406^return n != null && n.getType (  )  == Token.CALL && n.hasChildren (  ) &&  ( qualifiedNameBeginsWithStripType ( n.getFirstChild (  )  )  || nameEndsWithFieldNameToStrip ( n.getFirstChild (  )  )  ) ;^[CLASS] Strip  [METHOD] isCallWhoseReturnValueShouldBeStripped [RETURN_TYPE] boolean   Node n [VARIABLES] boolean  Node  n  
[BugLab_Wrong_Operator]^if  ( name == null )  {^432^^^^^431^445^if  ( name != null )  {^[CLASS] Strip  [METHOD] qualifiedNameBeginsWithStripType [RETURN_TYPE] boolean   String name [VARIABLES] boolean  String  name  type  
[BugLab_Argument_Swapping]^if  ( type.equals ( name )  || name.startsWith ( type + "." )  )  {^434^^^^^431^445^if  ( name.equals ( type )  || name.startsWith ( type + "." )  )  {^[CLASS] Strip  [METHOD] qualifiedNameBeginsWithStripType [RETURN_TYPE] boolean   String name [VARIABLES] boolean  String  name  type  
[BugLab_Wrong_Operator]^if  ( name.equals ( type )  && name.startsWith ( type + "." )  )  {^434^^^^^431^445^if  ( name.equals ( type )  || name.startsWith ( type + "." )  )  {^[CLASS] Strip  [METHOD] qualifiedNameBeginsWithStripType [RETURN_TYPE] boolean   String name [VARIABLES] boolean  String  name  type  
[BugLab_Wrong_Operator]^if  ( name.equals ( type )  || name.startsWith ( type  >>  "." )  )  {^434^^^^^431^445^if  ( name.equals ( type )  || name.startsWith ( type + "." )  )  {^[CLASS] Strip  [METHOD] qualifiedNameBeginsWithStripType [RETURN_TYPE] boolean   String name [VARIABLES] boolean  String  name  type  
[BugLab_Wrong_Literal]^return false;^435^^^^^431^445^return true;^[CLASS] Strip  [METHOD] qualifiedNameBeginsWithStripType [RETURN_TYPE] boolean   String name [VARIABLES] boolean  String  name  type  
[BugLab_Argument_Swapping]^if  ( type.startsWith ( name )  )  {^439^^^^^431^445^if  ( name.startsWith ( type )  )  {^[CLASS] Strip  [METHOD] qualifiedNameBeginsWithStripType [RETURN_TYPE] boolean   String name [VARIABLES] boolean  String  name  type  
[BugLab_Wrong_Literal]^return false;^440^^^^^431^445^return true;^[CLASS] Strip  [METHOD] qualifiedNameBeginsWithStripType [RETURN_TYPE] boolean   String name [VARIABLES] boolean  String  name  type  
[BugLab_Wrong_Operator]^if  ( name.equals ( type )  || name.startsWith ( type  <  "." )  )  {^434^^^^^431^445^if  ( name.equals ( type )  || name.startsWith ( type + "." )  )  {^[CLASS] Strip  [METHOD] qualifiedNameBeginsWithStripType [RETURN_TYPE] boolean   String name [VARIABLES] boolean  String  name  type  
[BugLab_Wrong_Literal]^return true;^444^^^^^431^445^return false;^[CLASS] Strip  [METHOD] qualifiedNameBeginsWithStripType [RETURN_TYPE] boolean   String name [VARIABLES] boolean  String  name  type  
[BugLab_Argument_Swapping]^Scope.Var var = name.getVar ( scope ) ;^458^^^^^455^460^Scope.Var var = scope.getVar ( name ) ;^[CLASS] Strip  [METHOD] isReferenceToRemovedVar [RETURN_TYPE] boolean   NodeTraversal t Node n [VARIABLES] boolean  Scope  scope  NodeTraversal  t  Var  var  Node  n  String  name  
[BugLab_Variable_Misuse]^return thissToRemove.contains ( var ) ;^459^^^^^455^460^return varsToRemove.contains ( var ) ;^[CLASS] Strip  [METHOD] isReferenceToRemovedVar [RETURN_TYPE] boolean   NodeTraversal t Node n [VARIABLES] boolean  Scope  scope  NodeTraversal  t  Var  var  Node  n  String  name  
[BugLab_Variable_Misuse]^return null.contains ( var ) ;^459^^^^^455^460^return varsToRemove.contains ( var ) ;^[CLASS] Strip  [METHOD] isReferenceToRemovedVar [RETURN_TYPE] boolean   NodeTraversal t Node n [VARIABLES] boolean  Scope  scope  NodeTraversal  t  Var  var  Node  n  String  name  
[BugLab_Argument_Swapping]^return varsToRemovesToRemove.contains ( var ) ;^459^^^^^455^460^return varsToRemove.contains ( var ) ;^[CLASS] Strip  [METHOD] isReferenceToRemovedVar [RETURN_TYPE] boolean   NodeTraversal t Node n [VARIABLES] boolean  Scope  scope  NodeTraversal  t  Var  var  Node  n  String  name  
[BugLab_Argument_Swapping]^return var.contains ( varsToRemove ) ;^459^^^^^455^460^return varsToRemove.contains ( var ) ;^[CLASS] Strip  [METHOD] isReferenceToRemovedVar [RETURN_TYPE] boolean   NodeTraversal t Node n [VARIABLES] boolean  Scope  scope  NodeTraversal  t  Var  var  Node  n  String  name  
[BugLab_Variable_Misuse]^Node function = parent.getFirstChild (  ) ;^483^^^^^468^498^Node function = n.getFirstChild (  ) ;^[CLASS] Strip  [METHOD] isMethodCallThatTriggersRemoval [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  callee  function  gramps  n  parent  
[BugLab_Variable_Misuse]^if  ( n == null || function.getType (  )  != Token.GETPROP )  {^484^^^^^469^499^if  ( function == null || function.getType (  )  != Token.GETPROP )  {^[CLASS] Strip  [METHOD] isMethodCallThatTriggersRemoval [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  callee  function  gramps  n  parent  
[BugLab_Wrong_Operator]^if  ( function == null && function.getType (  )  != Token.GETPROP )  {^484^^^^^469^499^if  ( function == null || function.getType (  )  != Token.GETPROP )  {^[CLASS] Strip  [METHOD] isMethodCallThatTriggersRemoval [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  callee  function  gramps  n  parent  
[BugLab_Wrong_Operator]^if  ( function != null || function.getType (  )  != Token.GETPROP )  {^484^^^^^469^499^if  ( function == null || function.getType (  )  != Token.GETPROP )  {^[CLASS] Strip  [METHOD] isMethodCallThatTriggersRemoval [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  callee  function  gramps  n  parent  
[BugLab_Wrong_Operator]^if  ( function == null || function.getType (  )  == Token.GETPROP )  {^484^^^^^469^499^if  ( function == null || function.getType (  )  != Token.GETPROP )  {^[CLASS] Strip  [METHOD] isMethodCallThatTriggersRemoval [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  callee  function  gramps  n  parent  
[BugLab_Wrong_Literal]^return true;^489^^^^^474^504^return false;^[CLASS] Strip  [METHOD] isMethodCallThatTriggersRemoval [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  callee  function  gramps  n  parent  
[BugLab_Variable_Misuse]^if  ( parent == null || function.getType (  )  != Token.GETPROP )  {^484^^^^^469^499^if  ( function == null || function.getType (  )  != Token.GETPROP )  {^[CLASS] Strip  [METHOD] isMethodCallThatTriggersRemoval [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  callee  function  gramps  n  parent  
[BugLab_Variable_Misuse]^if  ( n != null && parent.getType (  )  == Token.NAME )  {^492^^^^^477^507^if  ( parent != null && parent.getType (  )  == Token.NAME )  {^[CLASS] Strip  [METHOD] isMethodCallThatTriggersRemoval [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  callee  function  gramps  n  parent  
[BugLab_Wrong_Operator]^if  ( parent != null || parent.getType (  )  == Token.NAME )  {^492^^^^^477^507^if  ( parent != null && parent.getType (  )  == Token.NAME )  {^[CLASS] Strip  [METHOD] isMethodCallThatTriggersRemoval [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  callee  function  gramps  n  parent  
[BugLab_Wrong_Operator]^if  ( parent == null && parent.getType (  )  == Token.NAME )  {^492^^^^^477^507^if  ( parent != null && parent.getType (  )  == Token.NAME )  {^[CLASS] Strip  [METHOD] isMethodCallThatTriggersRemoval [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  callee  function  gramps  n  parent  
[BugLab_Wrong_Operator]^if  ( parent != null && parent.getType (  )  != Token.NAME )  {^492^^^^^477^507^if  ( parent != null && parent.getType (  )  == Token.NAME )  {^[CLASS] Strip  [METHOD] isMethodCallThatTriggersRemoval [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  callee  function  gramps  n  parent  
[BugLab_Variable_Misuse]^if  ( parent != null && gramps.getType (  )  == Token.VAR )  {^494^^^^^479^509^if  ( gramps != null && gramps.getType (  )  == Token.VAR )  {^[CLASS] Strip  [METHOD] isMethodCallThatTriggersRemoval [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  callee  function  gramps  n  parent  
[BugLab_Wrong_Operator]^if  ( gramps != null || gramps.getType (  )  == Token.VAR )  {^494^^^^^479^509^if  ( gramps != null && gramps.getType (  )  == Token.VAR )  {^[CLASS] Strip  [METHOD] isMethodCallThatTriggersRemoval [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  callee  function  gramps  n  parent  
[BugLab_Wrong_Operator]^if  ( gramps == null && gramps.getType (  )  == Token.VAR )  {^494^^^^^479^509^if  ( gramps != null && gramps.getType (  )  == Token.VAR )  {^[CLASS] Strip  [METHOD] isMethodCallThatTriggersRemoval [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  callee  function  gramps  n  parent  
[BugLab_Wrong_Operator]^if  ( gramps != null && gramps.getType (  )  != Token.VAR )  {^494^^^^^479^509^if  ( gramps != null && gramps.getType (  )  == Token.VAR )  {^[CLASS] Strip  [METHOD] isMethodCallThatTriggersRemoval [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  callee  function  gramps  n  parent  
[BugLab_Wrong_Literal]^return true;^500^^^^^485^515^return false;^[CLASS] Strip  [METHOD] isMethodCallThatTriggersRemoval [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  callee  function  gramps  n  parent  
[BugLab_Variable_Misuse]^Node gramps = n.getParent (  ) ;^493^^^^^478^508^Node gramps = parent.getParent (  ) ;^[CLASS] Strip  [METHOD] isMethodCallThatTriggersRemoval [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  callee  function  gramps  n  parent  
[BugLab_Variable_Misuse]^Node gramps = gramps.getParent (  ) ;^493^^^^^478^508^Node gramps = parent.getParent (  ) ;^[CLASS] Strip  [METHOD] isMethodCallThatTriggersRemoval [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  callee  function  gramps  n  parent  
[BugLab_Variable_Misuse]^if  ( gramps != null && gramps.getType (  )  == Token.2 )  {^494^^^^^479^509^if  ( gramps != null && gramps.getType (  )  == Token.VAR )  {^[CLASS] Strip  [METHOD] isMethodCallThatTriggersRemoval [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  callee  function  gramps  n  parent  
[BugLab_Variable_Misuse]^if  ( n != null && gramps.getType (  )  == Token.VAR )  {^494^^^^^479^509^if  ( gramps != null && gramps.getType (  )  == Token.VAR )  {^[CLASS] Strip  [METHOD] isMethodCallThatTriggersRemoval [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  callee  function  gramps  n  parent  
[BugLab_Variable_Misuse]^return nameEndsWithFieldNameToStrip ( parent )  || nameEndsWithFieldNameToStrip ( function )  || qualifiedNameBeginsWithStripType ( callee )  || actsOnStripType ( t, n ) ;^505^506^507^508^^490^520^return nameEndsWithFieldNameToStrip ( callee )  || nameEndsWithFieldNameToStrip ( function )  || qualifiedNameBeginsWithStripType ( callee )  || actsOnStripType ( t, n ) ;^[CLASS] Strip  [METHOD] isMethodCallThatTriggersRemoval [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  callee  function  gramps  n  parent  
[BugLab_Variable_Misuse]^return nameEndsWithFieldNameToStrip ( callee )  || nameEndsWithFieldNameToStrip ( parent )  || qualifiedNameBeginsWithStripType ( callee )  || actsOnStripType ( t, n ) ;^505^506^507^508^^490^520^return nameEndsWithFieldNameToStrip ( callee )  || nameEndsWithFieldNameToStrip ( function )  || qualifiedNameBeginsWithStripType ( callee )  || actsOnStripType ( t, n ) ;^[CLASS] Strip  [METHOD] isMethodCallThatTriggersRemoval [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  callee  function  gramps  n  parent  
[BugLab_Variable_Misuse]^return parentameEndsWithFieldNameToStrip ( callee )  || nameEndsWithFieldNameToStrip ( function )  || qualifiedNameBeginsWithStripType ( callee )  || actsOnStripType ( t, n ) ;^505^506^507^508^^490^520^return nameEndsWithFieldNameToStrip ( callee )  || nameEndsWithFieldNameToStrip ( function )  || qualifiedNameBeginsWithStripType ( callee )  || actsOnStripType ( t, n ) ;^[CLASS] Strip  [METHOD] isMethodCallThatTriggersRemoval [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  callee  function  gramps  n  parent  
[BugLab_Argument_Swapping]^return calleeameEndsWithFieldNameToStrip ( n )  || nameEndsWithFieldNameToStrip ( function )  || qualifiedNameBeginsWithStripType ( callee )  || actsOnStripType ( t, n ) ;^505^506^507^508^^490^520^return nameEndsWithFieldNameToStrip ( callee )  || nameEndsWithFieldNameToStrip ( function )  || qualifiedNameBeginsWithStripType ( callee )  || actsOnStripType ( t, n ) ;^[CLASS] Strip  [METHOD] isMethodCallThatTriggersRemoval [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  callee  function  gramps  n  parent  
[BugLab_Argument_Swapping]^return nameEndsWithFieldNameToStrip ( callee )  || nameEndsWithFieldNameToStrip ( t )  || qualifiedNameBeginsWithStripType ( callee )  || actsOnStripType ( function, n ) ;^505^506^507^508^^490^520^return nameEndsWithFieldNameToStrip ( callee )  || nameEndsWithFieldNameToStrip ( function )  || qualifiedNameBeginsWithStripType ( callee )  || actsOnStripType ( t, n ) ;^[CLASS] Strip  [METHOD] isMethodCallThatTriggersRemoval [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  callee  function  gramps  n  parent  
[BugLab_Argument_Swapping]^return tameEndsWithFieldNameToStrip ( callee )  || nameEndsWithFieldNameToStrip ( function )  || qualifiedNameBeginsWithStripType ( callee )  || actsOnStripType ( n, n ) ;^505^506^507^508^^490^520^return nameEndsWithFieldNameToStrip ( callee )  || nameEndsWithFieldNameToStrip ( function )  || qualifiedNameBeginsWithStripType ( callee )  || actsOnStripType ( t, n ) ;^[CLASS] Strip  [METHOD] isMethodCallThatTriggersRemoval [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  callee  function  gramps  n  parent  
[BugLab_Argument_Swapping]^return functionameEndsWithFieldNameToStrip ( callee )  || nameEndsWithFieldNameToStrip ( n )  || qualifiedNameBeginsWithStripType ( callee )  || actsOnStripType ( t, n ) ;^505^506^507^508^^490^520^return nameEndsWithFieldNameToStrip ( callee )  || nameEndsWithFieldNameToStrip ( function )  || qualifiedNameBeginsWithStripType ( callee )  || actsOnStripType ( t, n ) ;^[CLASS] Strip  [METHOD] isMethodCallThatTriggersRemoval [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  callee  function  gramps  n  parent  
[BugLab_Wrong_Operator]^return nameEndsWithFieldNameToStrip ( callee )  && nameEndsWithFieldNameToStrip ( function )  || qualifiedNameBeginsWithStripType ( callee )  || actsOnStripType ( t, n ) ;^505^506^507^508^^490^520^return nameEndsWithFieldNameToStrip ( callee )  || nameEndsWithFieldNameToStrip ( function )  || qualifiedNameBeginsWithStripType ( callee )  || actsOnStripType ( t, n ) ;^[CLASS] Strip  [METHOD] isMethodCallThatTriggersRemoval [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  callee  function  gramps  n  parent  
[BugLab_Variable_Misuse]^qualifiedNameBeginsWithStripType ( parent )  || actsOnStripType ( t, n ) ;^507^508^^^^492^522^qualifiedNameBeginsWithStripType ( callee )  || actsOnStripType ( t, n ) ;^[CLASS] Strip  [METHOD] isMethodCallThatTriggersRemoval [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  callee  function  gramps  n  parent  
[BugLab_Variable_Misuse]^actsOnStripType ( t, parent ) ;^508^^^^^493^523^actsOnStripType ( t, n ) ;^[CLASS] Strip  [METHOD] isMethodCallThatTriggersRemoval [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  callee  function  gramps  n  parent  
[BugLab_Argument_Swapping]^actsOnStripType ( n, t ) ;^508^^^^^493^523^actsOnStripType ( t, n ) ;^[CLASS] Strip  [METHOD] isMethodCallThatTriggersRemoval [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  callee  function  gramps  n  parent  
[BugLab_Wrong_Operator]^if  ( n != null || n.getType (  )  == Token.GETPROP )  {^520^^^^^519^526^if  ( n != null && n.getType (  )  == Token.GETPROP )  {^[CLASS] Strip  [METHOD] nameEndsWithFieldNameToStrip [RETURN_TYPE] boolean   Node n [VARIABLES] boolean  Node  n  propNode  
[BugLab_Wrong_Operator]^if  ( n == null && n.getType (  )  == Token.GETPROP )  {^520^^^^^519^526^if  ( n != null && n.getType (  )  == Token.GETPROP )  {^[CLASS] Strip  [METHOD] nameEndsWithFieldNameToStrip [RETURN_TYPE] boolean   Node n [VARIABLES] boolean  Node  n  propNode  
[BugLab_Wrong_Operator]^if  ( n != null && n.getType (  )  != Token.GETPROP )  {^520^^^^^519^526^if  ( n != null && n.getType (  )  == Token.GETPROP )  {^[CLASS] Strip  [METHOD] nameEndsWithFieldNameToStrip [RETURN_TYPE] boolean   Node n [VARIABLES] boolean  Node  n  propNode  
[BugLab_Variable_Misuse]^return propNode != null && propNode.getType (  )  == Token.4 && isStripName ( propNode.getString (  )  ) ;^522^523^^^^519^526^return propNode != null && propNode.getType (  )  == Token.STRING && isStripName ( propNode.getString (  )  ) ;^[CLASS] Strip  [METHOD] nameEndsWithFieldNameToStrip [RETURN_TYPE] boolean   Node n [VARIABLES] boolean  Node  n  propNode  
[BugLab_Wrong_Operator]^return propNode != null || propNode.getType (  )  == Token.STRING && isStripName ( propNode.getString (  )  ) ;^522^523^^^^519^526^return propNode != null && propNode.getType (  )  == Token.STRING && isStripName ( propNode.getString (  )  ) ;^[CLASS] Strip  [METHOD] nameEndsWithFieldNameToStrip [RETURN_TYPE] boolean   Node n [VARIABLES] boolean  Node  n  propNode  
[BugLab_Wrong_Operator]^return propNode == null && propNode.getType (  )  == Token.STRING && isStripName ( propNode.getString (  )  ) ;^522^523^^^^519^526^return propNode != null && propNode.getType (  )  == Token.STRING && isStripName ( propNode.getString (  )  ) ;^[CLASS] Strip  [METHOD] nameEndsWithFieldNameToStrip [RETURN_TYPE] boolean   Node n [VARIABLES] boolean  Node  n  propNode  
[BugLab_Wrong_Operator]^return propNode != null && propNode.getType (  )  != Token.STRING && isStripName ( propNode.getString (  )  ) ;^522^523^^^^519^526^return propNode != null && propNode.getType (  )  == Token.STRING && isStripName ( propNode.getString (  )  ) ;^[CLASS] Strip  [METHOD] nameEndsWithFieldNameToStrip [RETURN_TYPE] boolean   Node n [VARIABLES] boolean  Node  n  propNode  
[BugLab_Variable_Misuse]^Node propNode = propNode.getLastChild (  ) ;^521^^^^^519^526^Node propNode = n.getLastChild (  ) ;^[CLASS] Strip  [METHOD] nameEndsWithFieldNameToStrip [RETURN_TYPE] boolean   Node n [VARIABLES] boolean  Node  n  propNode  
[BugLab_Variable_Misuse]^return n != null && propNode.getType (  )  == Token.STRING && isStripName ( propNode.getString (  )  ) ;^522^523^^^^519^526^return propNode != null && propNode.getType (  )  == Token.STRING && isStripName ( propNode.getString (  )  ) ;^[CLASS] Strip  [METHOD] nameEndsWithFieldNameToStrip [RETURN_TYPE] boolean   Node n [VARIABLES] boolean  Node  n  propNode  
[BugLab_Variable_Misuse]^isStripName ( n.getString (  )  ) ;^523^^^^^519^526^isStripName ( propNode.getString (  )  ) ;^[CLASS] Strip  [METHOD] nameEndsWithFieldNameToStrip [RETURN_TYPE] boolean   Node n [VARIABLES] boolean  Node  n  propNode  
[BugLab_Variable_Misuse]^if  ( propNode != null && n.getType (  )  == Token.GETPROP )  {^520^^^^^519^526^if  ( n != null && n.getType (  )  == Token.GETPROP )  {^[CLASS] Strip  [METHOD] nameEndsWithFieldNameToStrip [RETURN_TYPE] boolean   Node n [VARIABLES] boolean  Node  n  propNode  
[BugLab_Wrong_Literal]^return true;^525^^^^^519^526^return false;^[CLASS] Strip  [METHOD] nameEndsWithFieldNameToStrip [RETURN_TYPE] boolean   Node n [VARIABLES] boolean  Node  n  propNode  
[BugLab_Argument_Swapping]^SubclassRelationship classes = callNode.getCodingConvention (  ) .getClassesDefinedByCall ( compiler ) ;^539^540^^^^538^557^SubclassRelationship classes = compiler.getCodingConvention (  ) .getClassesDefinedByCall ( callNode ) ;^[CLASS] Strip  [METHOD] actsOnStripType [RETURN_TYPE] boolean   NodeTraversal t Node callNode [VARIABLES] boolean  NodeTraversal  t  Node  callNode  SubclassRelationship  classes  
[BugLab_Wrong_Operator]^if  ( classes == null )  {^541^^^^^538^557^if  ( classes != null )  {^[CLASS] Strip  [METHOD] actsOnStripType [RETURN_TYPE] boolean   NodeTraversal t Node callNode [VARIABLES] boolean  NodeTraversal  t  Node  callNode  SubclassRelationship  classes  
[BugLab_Wrong_Literal]^return false;^545^^^^^538^557^return true;^[CLASS] Strip  [METHOD] actsOnStripType [RETURN_TYPE] boolean   NodeTraversal t Node callNode [VARIABLES] boolean  NodeTraversal  t  Node  callNode  SubclassRelationship  classes  
[BugLab_Wrong_Literal]^return true;^556^^^^^538^557^return false;^[CLASS] Strip  [METHOD] actsOnStripType [RETURN_TYPE] boolean   NodeTraversal t Node callNode [VARIABLES] boolean  NodeTraversal  t  Node  callNode  SubclassRelationship  classes  
[BugLab_Variable_Misuse]^if  ( stripNameSuffixes.contains ( stripName )  || stripNamePrefixes.contains ( name )  )  {^567^568^^^^566^590^if  ( stripNameSuffixes.contains ( name )  || stripNamePrefixes.contains ( name )  )  {^[CLASS] Strip  [METHOD] isStripName [RETURN_TYPE] boolean   String name [VARIABLES] boolean  String  lcName  name  stripName  
[BugLab_Argument_Swapping]^if  ( name.contains ( stripNameSuffixes )  || stripNamePrefixes.contains ( name )  )  {^567^568^^^^566^590^if  ( stripNameSuffixes.contains ( name )  || stripNamePrefixes.contains ( name )  )  {^[CLASS] Strip  [METHOD] isStripName [RETURN_TYPE] boolean   String name [VARIABLES] boolean  String  lcName  name  stripName  
[BugLab_Argument_Swapping]^if  ( stripNamePrefixes.contains ( name )  || stripNameSuffixes.contains ( name )  )  {^567^568^^^^566^590^if  ( stripNameSuffixes.contains ( name )  || stripNamePrefixes.contains ( name )  )  {^[CLASS] Strip  [METHOD] isStripName [RETURN_TYPE] boolean   String name [VARIABLES] boolean  String  lcName  name  stripName  
[BugLab_Wrong_Operator]^if  ( stripNameSuffixes.contains ( name )  && stripNamePrefixes.contains ( name )  )  {^567^568^^^^566^590^if  ( stripNameSuffixes.contains ( name )  || stripNamePrefixes.contains ( name )  )  {^[CLASS] Strip  [METHOD] isStripName [RETURN_TYPE] boolean   String name [VARIABLES] boolean  String  lcName  name  stripName  
[BugLab_Wrong_Literal]^return false;^569^^^^^566^590^return true;^[CLASS] Strip  [METHOD] isStripName [RETURN_TYPE] boolean   String name [VARIABLES] boolean  String  lcName  name  stripName  
[BugLab_Variable_Misuse]^if  ( 4.contains ( name )  || stripNamePrefixes.contains ( name )  )  {^567^568^^^^566^590^if  ( stripNameSuffixes.contains ( name )  || stripNamePrefixes.contains ( name )  )  {^[CLASS] Strip  [METHOD] isStripName [RETURN_TYPE] boolean   String name [VARIABLES] boolean  String  lcName  name  stripName  
[BugLab_Variable_Misuse]^stripNamePrefixes.contains ( stripName )  )  {^568^^^^^566^590^stripNamePrefixes.contains ( name )  )  {^[CLASS] Strip  [METHOD] isStripName [RETURN_TYPE] boolean   String name [VARIABLES] boolean  String  lcName  name  stripName  
[BugLab_Variable_Misuse]^if  (  ( stripName.length (  )  == 0 )  || Character.isUpperCase ( name.charAt ( 0 )  )  )  {^572^^^^^566^590^if  (  ( name.length (  )  == 0 )  || Character.isUpperCase ( name.charAt ( 0 )  )  )  {^[CLASS] Strip  [METHOD] isStripName [RETURN_TYPE] boolean   String name [VARIABLES] boolean  String  lcName  name  stripName  
[BugLab_Wrong_Operator]^if  (  ( name.length (  )  == 0 )  && Character.isUpperCase ( name.charAt ( 0 )  )  )  {^572^^^^^566^590^if  (  ( name.length (  )  == 0 )  || Character.isUpperCase ( name.charAt ( 0 )  )  )  {^[CLASS] Strip  [METHOD] isStripName [RETURN_TYPE] boolean   String name [VARIABLES] boolean  String  lcName  name  stripName  
[BugLab_Wrong_Operator]^if  (  ( name.length (  )  != 0 )  || Character.isUpperCase ( name.charAt ( 0 )  )  )  {^572^^^^^566^590^if  (  ( name.length (  )  == 0 )  || Character.isUpperCase ( name.charAt ( 0 )  )  )  {^[CLASS] Strip  [METHOD] isStripName [RETURN_TYPE] boolean   String name [VARIABLES] boolean  String  lcName  name  stripName  
[BugLab_Wrong_Literal]^if  (  ( name.length (  )  == -1 )  || Character.isUpperCase ( name.charAt ( -1 )  )  )  {^572^^^^^566^590^if  (  ( name.length (  )  == 0 )  || Character.isUpperCase ( name.charAt ( 0 )  )  )  {^[CLASS] Strip  [METHOD] isStripName [RETURN_TYPE] boolean   String name [VARIABLES] boolean  String  lcName  name  stripName  
[BugLab_Wrong_Literal]^if  (  ( name.length (  )  == 1 )  || Character.isUpperCase ( name.charAt ( 1 )  )  )  {^572^^^^^566^590^if  (  ( name.length (  )  == 0 )  || Character.isUpperCase ( name.charAt ( 0 )  )  )  {^[CLASS] Strip  [METHOD] isStripName [RETURN_TYPE] boolean   String name [VARIABLES] boolean  String  lcName  name  stripName  
[BugLab_Wrong_Literal]^return true;^573^^^^^566^590^return false;^[CLASS] Strip  [METHOD] isStripName [RETURN_TYPE] boolean   String name [VARIABLES] boolean  String  lcName  name  stripName  
[BugLab_Variable_Misuse]^String lcName = stripName.toLowerCase (  ) ;^576^^^^^566^590^String lcName = name.toLowerCase (  ) ;^[CLASS] Strip  [METHOD] isStripName [RETURN_TYPE] boolean   String name [VARIABLES] boolean  String  lcName  name  stripName  
[BugLab_Variable_Misuse]^if  ( name.startsWith ( stripName.toLowerCase (  )  )  )  {^578^^^^^566^590^if  ( lcName.startsWith ( stripName.toLowerCase (  )  )  )  {^[CLASS] Strip  [METHOD] isStripName [RETURN_TYPE] boolean   String name [VARIABLES] boolean  String  lcName  name  stripName  
[BugLab_Variable_Misuse]^if  ( lcName.startsWith ( name.toLowerCase (  )  )  )  {^578^^^^^566^590^if  ( lcName.startsWith ( stripName.toLowerCase (  )  )  )  {^[CLASS] Strip  [METHOD] isStripName [RETURN_TYPE] boolean   String name [VARIABLES] boolean  String  lcName  name  stripName  
[BugLab_Argument_Swapping]^if  ( stripName.startsWith ( lcName.toLowerCase (  )  )  )  {^578^^^^^566^590^if  ( lcName.startsWith ( stripName.toLowerCase (  )  )  )  {^[CLASS] Strip  [METHOD] isStripName [RETURN_TYPE] boolean   String name [VARIABLES] boolean  String  lcName  name  stripName  
[BugLab_Wrong_Literal]^return false;^579^^^^^566^590^return true;^[CLASS] Strip  [METHOD] isStripName [RETURN_TYPE] boolean   String name [VARIABLES] boolean  String  lcName  name  stripName  
[BugLab_Variable_Misuse]^if  ( name.endsWith ( stripName.toLowerCase (  )  )  )  {^584^^^^^566^590^if  ( lcName.endsWith ( stripName.toLowerCase (  )  )  )  {^[CLASS] Strip  [METHOD] isStripName [RETURN_TYPE] boolean   String name [VARIABLES] boolean  String  lcName  name  stripName  
[BugLab_Variable_Misuse]^if  ( lcName.endsWith ( name.toLowerCase (  )  )  )  {^584^^^^^566^590^if  ( lcName.endsWith ( stripName.toLowerCase (  )  )  )  {^[CLASS] Strip  [METHOD] isStripName [RETURN_TYPE] boolean   String name [VARIABLES] boolean  String  lcName  name  stripName  
[BugLab_Argument_Swapping]^if  ( stripName.endsWith ( lcName.toLowerCase (  )  )  )  {^584^^^^^566^590^if  ( lcName.endsWith ( stripName.toLowerCase (  )  )  )  {^[CLASS] Strip  [METHOD] isStripName [RETURN_TYPE] boolean   String name [VARIABLES] boolean  String  lcName  name  stripName  
[BugLab_Wrong_Literal]^return false;^585^^^^^566^590^return true;^[CLASS] Strip  [METHOD] isStripName [RETURN_TYPE] boolean   String name [VARIABLES] boolean  String  lcName  name  stripName  
[BugLab_Wrong_Literal]^return true;^589^^^^^566^590^return false;^[CLASS] Strip  [METHOD] isStripName [RETURN_TYPE] boolean   String name [VARIABLES] boolean  String  lcName  name  stripName  
[BugLab_Variable_Misuse]^parent.replaceChild ( parent, new Node ( Token.NULL )  ) ;^600^^^^^599^601^parent.replaceChild ( n, new Node ( Token.NULL )  ) ;^[CLASS] Strip  [METHOD] replaceWithNull [RETURN_TYPE] void   Node n Node parent [VARIABLES] boolean  Node  n  parent  
[BugLab_Argument_Swapping]^NodeUtil.removeChild ( n, parent ) ;^611^^^^^610^612^NodeUtil.removeChild ( parent, n ) ;^[CLASS] Strip  [METHOD] replaceWithEmpty [RETURN_TYPE] void   Node n Node parent [VARIABLES] boolean  Node  n  parent  
