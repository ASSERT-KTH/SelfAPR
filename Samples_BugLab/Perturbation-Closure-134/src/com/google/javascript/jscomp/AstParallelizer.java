[BugLab_Variable_Misuse]^this.root = placeHolder;^75^^^^^67^79^this.root = root;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] <init> [RETURN_TYPE] Node,boolean)   Node> shouldSplit Node> shouldTraverse Node> placeHolderProvider Node root boolean includeRoot [VARIABLES] boolean  includeRoot  Node  before  original  placeHolder  root  Supplier  placeHolderProvider  List  detachPointList  forest  String  TEMP_NAME  Predicate  shouldSplit  shouldTraverse  
[BugLab_Variable_Misuse]^this.placeHolder = root;^219^^^^^218^222^this.placeHolder = placeHolder;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] <init> [RETURN_TYPE] Node)   Node placeHolder Node before Node orginal [VARIABLES] boolean  includeRoot  Node  before  orginal  original  placeHolder  root  Supplier  placeHolderProvider  List  detachPointList  forest  String  TEMP_NAME  Predicate  shouldSplit  shouldTraverse  
[BugLab_Variable_Misuse]^this.before = root;^220^^^^^218^222^this.before = before;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] <init> [RETURN_TYPE] Node)   Node placeHolder Node before Node orginal [VARIABLES] boolean  includeRoot  Node  before  orginal  original  placeHolder  root  Supplier  placeHolderProvider  List  detachPointList  forest  String  TEMP_NAME  Predicate  shouldSplit  shouldTraverse  
[BugLab_Variable_Misuse]^this.original = placeHolder;^221^^^^^218^222^this.original = orginal;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] <init> [RETURN_TYPE] Node)   Node placeHolder Node before Node orginal [VARIABLES] boolean  includeRoot  Node  before  orginal  original  placeHolder  root  Supplier  placeHolderProvider  List  detachPointList  forest  String  TEMP_NAME  Predicate  shouldSplit  shouldTraverse  
[BugLab_Variable_Misuse]^return NodeUtil.isFunction ( placeHolder ) ;^88^^^^^82^111^return NodeUtil.isFunction ( input ) ;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] createNewFunctionLevelAstParallelizer [RETURN_TYPE] AstParallelizer   Node root boolean globalPass [VARIABLES] boolean  globalPass  includeRoot  Node  before  ignored  input  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  Predicate  shouldSplit  shouldTraverse  
[BugLab_Wrong_Literal]^return false;^96^^^^^82^111^return true;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] createNewFunctionLevelAstParallelizer [RETURN_TYPE] AstParallelizer   Node root boolean globalPass [VARIABLES] boolean  globalPass  includeRoot  Node  before  ignored  input  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  Predicate  shouldSplit  shouldTraverse  
[BugLab_Variable_Misuse]^new Node ( Token.4 ) , new Node ( Token.BLOCK )  ) ;^106^^^^^82^111^new Node ( Token.LP ) , new Node ( Token.BLOCK )  ) ;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] createNewFunctionLevelAstParallelizer [RETURN_TYPE] AstParallelizer   Node root boolean globalPass [VARIABLES] boolean  globalPass  includeRoot  Node  before  ignored  input  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  Predicate  shouldSplit  shouldTraverse  
[BugLab_Variable_Misuse]^return new AstParallelizer ( shouldSplit, shouldTraverse, placeHolders, placeHolder, globalPass ) ;^109^110^^^^82^111^return new AstParallelizer ( shouldSplit, shouldTraverse, placeHolders, root, globalPass ) ;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] createNewFunctionLevelAstParallelizer [RETURN_TYPE] AstParallelizer   Node root boolean globalPass [VARIABLES] boolean  globalPass  includeRoot  Node  before  ignored  input  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  Predicate  shouldSplit  shouldTraverse  
[BugLab_Variable_Misuse]^return new AstParallelizer ( shouldSplit, shouldTraverse, placeHolders, root, includeRoot ) ;^109^110^^^^82^111^return new AstParallelizer ( shouldSplit, shouldTraverse, placeHolders, root, globalPass ) ;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] createNewFunctionLevelAstParallelizer [RETURN_TYPE] AstParallelizer   Node root boolean globalPass [VARIABLES] boolean  globalPass  includeRoot  Node  before  ignored  input  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  Predicate  shouldSplit  shouldTraverse  
[BugLab_Argument_Swapping]^return new AstParallelizer ( shouldTraverse, shouldSplit, placeHolders, root, globalPass ) ;^109^110^^^^82^111^return new AstParallelizer ( shouldSplit, shouldTraverse, placeHolders, root, globalPass ) ;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] createNewFunctionLevelAstParallelizer [RETURN_TYPE] AstParallelizer   Node root boolean globalPass [VARIABLES] boolean  globalPass  includeRoot  Node  before  ignored  input  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  Predicate  shouldSplit  shouldTraverse  
[BugLab_Argument_Swapping]^return new AstParallelizer ( shouldSplit, shouldTraverse, root, placeHolders, globalPass ) ;^109^110^^^^82^111^return new AstParallelizer ( shouldSplit, shouldTraverse, placeHolders, root, globalPass ) ;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] createNewFunctionLevelAstParallelizer [RETURN_TYPE] AstParallelizer   Node root boolean globalPass [VARIABLES] boolean  globalPass  includeRoot  Node  before  ignored  input  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  Predicate  shouldSplit  shouldTraverse  
[BugLab_Argument_Swapping]^return new AstParallelizer ( shouldSplit, root, placeHolders, shouldTraverse, globalPass ) ;^109^110^^^^82^111^return new AstParallelizer ( shouldSplit, shouldTraverse, placeHolders, root, globalPass ) ;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] createNewFunctionLevelAstParallelizer [RETURN_TYPE] AstParallelizer   Node root boolean globalPass [VARIABLES] boolean  globalPass  includeRoot  Node  before  ignored  input  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  Predicate  shouldSplit  shouldTraverse  
[BugLab_Argument_Swapping]^return new AstParallelizer ( shouldSplit, globalPass, placeHolders, root, shouldTraverse ) ;^109^110^^^^82^111^return new AstParallelizer ( shouldSplit, shouldTraverse, placeHolders, root, globalPass ) ;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] createNewFunctionLevelAstParallelizer [RETURN_TYPE] AstParallelizer   Node root boolean globalPass [VARIABLES] boolean  globalPass  includeRoot  Node  before  ignored  input  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  Predicate  shouldSplit  shouldTraverse  
[BugLab_Argument_Swapping]^return new AstParallelizer ( root, shouldTraverse, placeHolders, shouldSplit, globalPass ) ;^109^110^^^^82^111^return new AstParallelizer ( shouldSplit, shouldTraverse, placeHolders, root, globalPass ) ;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] createNewFunctionLevelAstParallelizer [RETURN_TYPE] AstParallelizer   Node root boolean globalPass [VARIABLES] boolean  globalPass  includeRoot  Node  before  ignored  input  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  Predicate  shouldSplit  shouldTraverse  
[BugLab_Argument_Swapping]^return new AstParallelizer ( shouldSplit, placeHolders, shouldTraverse, root, globalPass ) ;^109^110^^^^82^111^return new AstParallelizer ( shouldSplit, shouldTraverse, placeHolders, root, globalPass ) ;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] createNewFunctionLevelAstParallelizer [RETURN_TYPE] AstParallelizer   Node root boolean globalPass [VARIABLES] boolean  globalPass  includeRoot  Node  before  ignored  input  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  Predicate  shouldSplit  shouldTraverse  
[BugLab_Argument_Swapping]^return new AstParallelizer ( shouldSplit, shouldTraverse, placeHolders, globalPass, root ) ;^109^110^^^^82^111^return new AstParallelizer ( shouldSplit, shouldTraverse, placeHolders, root, globalPass ) ;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] createNewFunctionLevelAstParallelizer [RETURN_TYPE] AstParallelizer   Node root boolean globalPass [VARIABLES] boolean  globalPass  includeRoot  Node  before  ignored  input  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  Predicate  shouldSplit  shouldTraverse  
[BugLab_Variable_Misuse]^return NodeUtil.isFunction ( placeHolder ) ;^88^^^^^87^89^return NodeUtil.isFunction ( input ) ;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] apply [RETURN_TYPE] boolean   Node input [VARIABLES] boolean  globalPass  includeRoot  Node  before  ignored  input  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  Predicate  shouldSplit  shouldTraverse  
[BugLab_Wrong_Literal]^return false;^96^^^^^95^97^return true;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] apply [RETURN_TYPE] boolean   Node ignored [VARIABLES] boolean  globalPass  includeRoot  Node  before  ignored  input  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  Predicate  shouldSplit  shouldTraverse  
[BugLab_Variable_Misuse]^return new Node ( Token.FUNCTION, Node.newString ( Token.NAME, TEMP_NAME ) , new Node ( Token.1 ) , new Node ( Token.BLOCK )  ) ;^104^105^106^^^103^107^return new Node ( Token.FUNCTION, Node.newString ( Token.NAME, TEMP_NAME ) , new Node ( Token.LP ) , new Node ( Token.BLOCK )  ) ;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] get [RETURN_TYPE] Node   [VARIABLES] boolean  globalPass  includeRoot  Node  before  ignored  input  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  Predicate  shouldSplit  shouldTraverse  
[BugLab_Variable_Misuse]^return TEMP_NAME != null;^120^^^^^113^141^return sourceName != null;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] createNewFileLevelAstParallelizer [RETURN_TYPE] AstParallelizer   Node root [VARIABLES] boolean  globalPass  includeRoot  Node  before  ignored  input  n  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  sourceName  Predicate  shouldSplit  shouldTraverse  
[BugLab_Wrong_Operator]^return sourceName == null;^120^^^^^113^141^return sourceName != null;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] createNewFileLevelAstParallelizer [RETURN_TYPE] AstParallelizer   Node root [VARIABLES] boolean  globalPass  includeRoot  Node  before  ignored  input  n  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  sourceName  Predicate  shouldSplit  shouldTraverse  
[BugLab_Variable_Misuse]^String sourceName =  ( String )  root.getProp ( Node.SOURCENAME_PROP ) ;^119^^^^^113^141^String sourceName =  ( String )  input.getProp ( Node.SOURCENAME_PROP ) ;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] createNewFileLevelAstParallelizer [RETURN_TYPE] AstParallelizer   Node root [VARIABLES] boolean  globalPass  includeRoot  Node  before  ignored  input  n  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  sourceName  Predicate  shouldSplit  shouldTraverse  
[BugLab_Variable_Misuse]^String sourceName =  ( String )  placeHolder.getProp ( Node.SOURCENAME_PROP ) ;^119^^^^^113^141^String sourceName =  ( String )  input.getProp ( Node.SOURCENAME_PROP ) ;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] createNewFileLevelAstParallelizer [RETURN_TYPE] AstParallelizer   Node root [VARIABLES] boolean  globalPass  includeRoot  Node  before  ignored  input  n  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  sourceName  Predicate  shouldSplit  shouldTraverse  
[BugLab_Variable_Misuse]^return NodeUtil.newExpr ( Node.newString ( sourceName )  ) ;^128^^^^^113^141^return NodeUtil.newExpr ( Node.newString ( TEMP_NAME )  ) ;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] createNewFileLevelAstParallelizer [RETURN_TYPE] AstParallelizer   Node root [VARIABLES] boolean  globalPass  includeRoot  Node  before  ignored  input  n  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  sourceName  Predicate  shouldSplit  shouldTraverse  
[BugLab_Variable_Misuse]^return root.getType (  )  == Token.BLOCK;^136^^^^^113^141^return n.getType (  )  == Token.BLOCK;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] createNewFileLevelAstParallelizer [RETURN_TYPE] AstParallelizer   Node root [VARIABLES] boolean  globalPass  includeRoot  Node  before  ignored  input  n  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  sourceName  Predicate  shouldSplit  shouldTraverse  
[BugLab_Wrong_Operator]^return n.getType (  )  != Token.BLOCK;^136^^^^^113^141^return n.getType (  )  == Token.BLOCK;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] createNewFileLevelAstParallelizer [RETURN_TYPE] AstParallelizer   Node root [VARIABLES] boolean  globalPass  includeRoot  Node  before  ignored  input  n  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  sourceName  Predicate  shouldSplit  shouldTraverse  
[BugLab_Variable_Misuse]^Predicate<Node> shouldTraverse = originalew Predicate<Node> (  )  {^133^^^^^113^141^Predicate<Node> shouldTraverse = new Predicate<Node> (  )  {^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] createNewFileLevelAstParallelizer [RETURN_TYPE] AstParallelizer   Node root [VARIABLES] boolean  globalPass  includeRoot  Node  before  ignored  input  n  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  sourceName  Predicate  shouldSplit  shouldTraverse  
[BugLab_Variable_Misuse]^return new AstParallelizer ( shouldSplit, shouldTraverse, placeHolders, original, false ) ;^139^140^^^^113^141^return new AstParallelizer ( shouldSplit, shouldTraverse, placeHolders, root, false ) ;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] createNewFileLevelAstParallelizer [RETURN_TYPE] AstParallelizer   Node root [VARIABLES] boolean  globalPass  includeRoot  Node  before  ignored  input  n  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  sourceName  Predicate  shouldSplit  shouldTraverse  
[BugLab_Argument_Swapping]^return new AstParallelizer ( shouldTraverse, shouldSplit, placeHolders, root, false ) ;^139^140^^^^113^141^return new AstParallelizer ( shouldSplit, shouldTraverse, placeHolders, root, false ) ;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] createNewFileLevelAstParallelizer [RETURN_TYPE] AstParallelizer   Node root [VARIABLES] boolean  globalPass  includeRoot  Node  before  ignored  input  n  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  sourceName  Predicate  shouldSplit  shouldTraverse  
[BugLab_Argument_Swapping]^return new AstParallelizer ( shouldSplit, placeHolders, shouldTraverse, root, false ) ;^139^140^^^^113^141^return new AstParallelizer ( shouldSplit, shouldTraverse, placeHolders, root, false ) ;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] createNewFileLevelAstParallelizer [RETURN_TYPE] AstParallelizer   Node root [VARIABLES] boolean  globalPass  includeRoot  Node  before  ignored  input  n  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  sourceName  Predicate  shouldSplit  shouldTraverse  
[BugLab_Argument_Swapping]^return new AstParallelizer ( root, shouldTraverse, placeHolders, shouldSplit, false ) ;^139^140^^^^113^141^return new AstParallelizer ( shouldSplit, shouldTraverse, placeHolders, root, false ) ;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] createNewFileLevelAstParallelizer [RETURN_TYPE] AstParallelizer   Node root [VARIABLES] boolean  globalPass  includeRoot  Node  before  ignored  input  n  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  sourceName  Predicate  shouldSplit  shouldTraverse  
[BugLab_Wrong_Literal]^return new AstParallelizer ( shouldSplit, shouldTraverse, placeHolders, root, true ) ;^139^140^^^^113^141^return new AstParallelizer ( shouldSplit, shouldTraverse, placeHolders, root, false ) ;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] createNewFileLevelAstParallelizer [RETURN_TYPE] AstParallelizer   Node root [VARIABLES] boolean  globalPass  includeRoot  Node  before  ignored  input  n  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  sourceName  Predicate  shouldSplit  shouldTraverse  
[BugLab_Variable_Misuse]^return new AstParallelizer ( shouldSplit, shouldTraverse, placeHolders, placeHolder, false ) ;^139^140^^^^113^141^return new AstParallelizer ( shouldSplit, shouldTraverse, placeHolders, root, false ) ;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] createNewFileLevelAstParallelizer [RETURN_TYPE] AstParallelizer   Node root [VARIABLES] boolean  globalPass  includeRoot  Node  before  ignored  input  n  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  sourceName  Predicate  shouldSplit  shouldTraverse  
[BugLab_Argument_Swapping]^return new AstParallelizer ( placeHolders, shouldTraverse, shouldSplit, root, false ) ;^139^140^^^^113^141^return new AstParallelizer ( shouldSplit, shouldTraverse, placeHolders, root, false ) ;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] createNewFileLevelAstParallelizer [RETURN_TYPE] AstParallelizer   Node root [VARIABLES] boolean  globalPass  includeRoot  Node  before  ignored  input  n  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  sourceName  Predicate  shouldSplit  shouldTraverse  
[BugLab_Argument_Swapping]^return new AstParallelizer ( shouldSplit, shouldTraverse, root, placeHolders, false ) ;^139^140^^^^113^141^return new AstParallelizer ( shouldSplit, shouldTraverse, placeHolders, root, false ) ;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] createNewFileLevelAstParallelizer [RETURN_TYPE] AstParallelizer   Node root [VARIABLES] boolean  globalPass  includeRoot  Node  before  ignored  input  n  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  sourceName  Predicate  shouldSplit  shouldTraverse  
[BugLab_Variable_Misuse]^String sourceName =  ( String )  original.getProp ( Node.SOURCENAME_PROP ) ;^119^^^^^118^121^String sourceName =  ( String )  input.getProp ( Node.SOURCENAME_PROP ) ;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] apply [RETURN_TYPE] boolean   Node input [VARIABLES] boolean  globalPass  includeRoot  Node  before  ignored  input  n  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  sourceName  Predicate  shouldSplit  shouldTraverse  
[BugLab_Variable_Misuse]^return TEMP_NAME != null;^120^^^^^118^121^return sourceName != null;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] apply [RETURN_TYPE] boolean   Node input [VARIABLES] boolean  globalPass  includeRoot  Node  before  ignored  input  n  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  sourceName  Predicate  shouldSplit  shouldTraverse  
[BugLab_Wrong_Operator]^return sourceName == null;^120^^^^^118^121^return sourceName != null;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] apply [RETURN_TYPE] boolean   Node input [VARIABLES] boolean  globalPass  includeRoot  Node  before  ignored  input  n  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  sourceName  Predicate  shouldSplit  shouldTraverse  
[BugLab_Variable_Misuse]^return NodeUtil.newExpr ( Node.newString ( sourceName )  ) ;^128^^^^^127^129^return NodeUtil.newExpr ( Node.newString ( TEMP_NAME )  ) ;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] get [RETURN_TYPE] Node   [VARIABLES] boolean  globalPass  includeRoot  Node  before  ignored  input  n  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  sourceName  Predicate  shouldSplit  shouldTraverse  
[BugLab_Variable_Misuse]^return root.getType (  )  == Token.BLOCK;^136^^^^^135^137^return n.getType (  )  == Token.BLOCK;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] apply [RETURN_TYPE] boolean   Node n [VARIABLES] boolean  globalPass  includeRoot  Node  before  ignored  input  n  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  sourceName  Predicate  shouldSplit  shouldTraverse  
[BugLab_Wrong_Operator]^return n.getType (  )  != Token.BLOCK;^136^^^^^135^137^return n.getType (  )  == Token.BLOCK;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] apply [RETURN_TYPE] boolean   Node n [VARIABLES] boolean  globalPass  includeRoot  Node  before  ignored  input  n  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  sourceName  Predicate  shouldSplit  shouldTraverse  
[BugLab_Variable_Misuse]^detachPointList.add ( new DettachPoint ( root, before, orginal )  ) ;^147^^^^^146^148^detachPointList.add ( new DettachPoint ( placeHolder, before, orginal )  ) ;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] recordSplitPoint [RETURN_TYPE] void   Node placeHolder Node before Node orginal [VARIABLES] boolean  globalPass  includeRoot  Node  before  ignored  input  n  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  sourceName  Predicate  shouldSplit  shouldTraverse  
[BugLab_Variable_Misuse]^detachPointList.add ( new DettachPoint ( placeHolder, before, placeHolder )  ) ;^147^^^^^146^148^detachPointList.add ( new DettachPoint ( placeHolder, before, orginal )  ) ;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] recordSplitPoint [RETURN_TYPE] void   Node placeHolder Node before Node orginal [VARIABLES] boolean  globalPass  includeRoot  Node  before  ignored  input  n  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  sourceName  Predicate  shouldSplit  shouldTraverse  
[BugLab_Argument_Swapping]^detachPointList.add ( new DettachPoint ( before, placeHolder, orginal )  ) ;^147^^^^^146^148^detachPointList.add ( new DettachPoint ( placeHolder, before, orginal )  ) ;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] recordSplitPoint [RETURN_TYPE] void   Node placeHolder Node before Node orginal [VARIABLES] boolean  globalPass  includeRoot  Node  before  ignored  input  n  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  sourceName  Predicate  shouldSplit  shouldTraverse  
[BugLab_Argument_Swapping]^detachPointList.add ( new DettachPoint ( placeHolder, orginal, before )  ) ;^147^^^^^146^148^detachPointList.add ( new DettachPoint ( placeHolder, before, orginal )  ) ;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] recordSplitPoint [RETURN_TYPE] void   Node placeHolder Node before Node orginal [VARIABLES] boolean  globalPass  includeRoot  Node  before  ignored  input  n  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  sourceName  Predicate  shouldSplit  shouldTraverse  
[BugLab_Argument_Swapping]^detachPointList.add ( new DettachPoint ( orginal, before, placeHolder )  ) ;^147^^^^^146^148^detachPointList.add ( new DettachPoint ( placeHolder, before, orginal )  ) ;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] recordSplitPoint [RETURN_TYPE] void   Node placeHolder Node before Node orginal [VARIABLES] boolean  globalPass  includeRoot  Node  before  ignored  input  n  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  sourceName  Predicate  shouldSplit  shouldTraverse  
[BugLab_Variable_Misuse]^detachPointList.add ( new DettachPoint ( original, before, orginal )  ) ;^147^^^^^146^148^detachPointList.add ( new DettachPoint ( placeHolder, before, orginal )  ) ;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] recordSplitPoint [RETURN_TYPE] void   Node placeHolder Node before Node orginal [VARIABLES] boolean  globalPass  includeRoot  Node  before  ignored  input  n  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  sourceName  Predicate  shouldSplit  shouldTraverse  
[BugLab_Variable_Misuse]^detachPointList.add ( new DettachPoint ( placeHolder, placeHolder, orginal )  ) ;^147^^^^^146^148^detachPointList.add ( new DettachPoint ( placeHolder, before, orginal )  ) ;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] recordSplitPoint [RETURN_TYPE] void   Node placeHolder Node before Node orginal [VARIABLES] boolean  globalPass  includeRoot  Node  before  ignored  input  n  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  sourceName  Predicate  shouldSplit  shouldTraverse  
[BugLab_Variable_Misuse]^detachPointList.add ( new DettachPoint ( placeHolder, before, root )  ) ;^147^^^^^146^148^detachPointList.add ( new DettachPoint ( placeHolder, before, orginal )  ) ;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] recordSplitPoint [RETURN_TYPE] void   Node placeHolder Node before Node orginal [VARIABLES] boolean  globalPass  includeRoot  Node  before  ignored  input  n  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  sourceName  Predicate  shouldSplit  shouldTraverse  
[BugLab_Variable_Misuse]^if  ( globalPass )  {^156^^^^^155^161^if  ( includeRoot )  {^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] split [RETURN_TYPE] List   [VARIABLES] boolean  globalPass  includeRoot  Node  before  ignored  input  n  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  sourceName  Predicate  shouldSplit  shouldTraverse  
[BugLab_Variable_Misuse]^forest.add ( orginal ) ;^157^^^^^155^161^forest.add ( root ) ;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] split [RETURN_TYPE] List   [VARIABLES] boolean  globalPass  includeRoot  Node  before  ignored  input  n  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  sourceName  Predicate  shouldSplit  shouldTraverse  
[BugLab_Variable_Misuse]^split ( placeHolder ) ;^159^^^^^155^161^split ( root ) ;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] split [RETURN_TYPE] List   [VARIABLES] boolean  globalPass  includeRoot  Node  before  ignored  input  n  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  sourceName  Predicate  shouldSplit  shouldTraverse  
[BugLab_Variable_Misuse]^Node c = root.getFirstChild (  ) ;^164^^^^^163^186^Node c = n.getFirstChild (  ) ;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] split [RETURN_TYPE] void   Node n [VARIABLES] boolean  globalPass  includeRoot  Node  before  c  ignored  input  n  next  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  sourceName  Predicate  shouldSplit  shouldTraverse  
[BugLab_Variable_Misuse]^Node c = original.getFirstChild (  ) ;^164^^^^^163^186^Node c = n.getFirstChild (  ) ;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] split [RETURN_TYPE] void   Node n [VARIABLES] boolean  globalPass  includeRoot  Node  before  c  ignored  input  n  next  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  sourceName  Predicate  shouldSplit  shouldTraverse  
[BugLab_Variable_Misuse]^while  ( root != null )  {^166^^^^^163^186^while  ( c != null )  {^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] split [RETURN_TYPE] void   Node n [VARIABLES] boolean  globalPass  includeRoot  Node  before  c  ignored  input  n  next  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  sourceName  Predicate  shouldSplit  shouldTraverse  
[BugLab_Variable_Misuse]^while  ( c != originalull )  {^166^^^^^163^186^while  ( c != null )  {^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] split [RETURN_TYPE] void   Node n [VARIABLES] boolean  globalPass  includeRoot  Node  before  c  ignored  input  n  next  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  sourceName  Predicate  shouldSplit  shouldTraverse  
[BugLab_Wrong_Operator]^while  ( c == null )  {^166^^^^^163^186^while  ( c != null )  {^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] split [RETURN_TYPE] void   Node n [VARIABLES] boolean  globalPass  includeRoot  Node  before  c  ignored  input  n  next  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  sourceName  Predicate  shouldSplit  shouldTraverse  
[BugLab_Variable_Misuse]^if  ( shouldSplit.apply ( root )  )  {^168^^^^^163^186^if  ( shouldSplit.apply ( c )  )  {^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] split [RETURN_TYPE] void   Node n [VARIABLES] boolean  globalPass  includeRoot  Node  before  c  ignored  input  n  next  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  sourceName  Predicate  shouldSplit  shouldTraverse  
[BugLab_Variable_Misuse]^before = root;^182^^^^^163^186^before = c;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] split [RETURN_TYPE] void   Node n [VARIABLES] boolean  globalPass  includeRoot  Node  before  c  ignored  input  n  next  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  sourceName  Predicate  shouldSplit  shouldTraverse  
[BugLab_Variable_Misuse]^split ( placeHolder ) ;^181^^^^^163^186^split ( c ) ;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] split [RETURN_TYPE] void   Node n [VARIABLES] boolean  globalPass  includeRoot  Node  before  c  ignored  input  n  next  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  sourceName  Predicate  shouldSplit  shouldTraverse  
[BugLab_Variable_Misuse]^if  ( root == null )  {^170^^^^^163^186^if  ( before == null )  {^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] split [RETURN_TYPE] void   Node n [VARIABLES] boolean  globalPass  includeRoot  Node  before  c  ignored  input  n  next  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  sourceName  Predicate  shouldSplit  shouldTraverse  
[BugLab_Variable_Misuse]^if  ( before == rootull )  {^170^^^^^163^186^if  ( before == null )  {^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] split [RETURN_TYPE] void   Node n [VARIABLES] boolean  globalPass  includeRoot  Node  before  c  ignored  input  n  next  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  sourceName  Predicate  shouldSplit  shouldTraverse  
[BugLab_Argument_Swapping]^if  ( n == beforeull )  {^170^^^^^163^186^if  ( before == null )  {^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] split [RETURN_TYPE] void   Node n [VARIABLES] boolean  globalPass  includeRoot  Node  before  c  ignored  input  n  next  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  sourceName  Predicate  shouldSplit  shouldTraverse  
[BugLab_Wrong_Operator]^if  ( before != null )  {^170^^^^^163^186^if  ( before == null )  {^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] split [RETURN_TYPE] void   Node n [VARIABLES] boolean  globalPass  includeRoot  Node  before  c  ignored  input  n  next  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  sourceName  Predicate  shouldSplit  shouldTraverse  
[BugLab_Variable_Misuse]^n.addChildAfter ( original, c ) ;^174^^^^^163^186^n.addChildAfter ( placeHolder, c ) ;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] split [RETURN_TYPE] void   Node n [VARIABLES] boolean  globalPass  includeRoot  Node  before  c  ignored  input  n  next  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  sourceName  Predicate  shouldSplit  shouldTraverse  
[BugLab_Variable_Misuse]^n.addChildAfter ( placeHolder, placeHolder ) ;^174^^^^^163^186^n.addChildAfter ( placeHolder, c ) ;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] split [RETURN_TYPE] void   Node n [VARIABLES] boolean  globalPass  includeRoot  Node  before  c  ignored  input  n  next  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  sourceName  Predicate  shouldSplit  shouldTraverse  
[BugLab_Argument_Swapping]^n.addChildAfter ( c, placeHolder ) ;^174^^^^^163^186^n.addChildAfter ( placeHolder, c ) ;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] split [RETURN_TYPE] void   Node n [VARIABLES] boolean  globalPass  includeRoot  Node  before  c  ignored  input  n  next  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  sourceName  Predicate  shouldSplit  shouldTraverse  
[BugLab_Variable_Misuse]^n.removeChildAfter ( placeHolder ) ;^175^^^^^163^186^n.removeChildAfter ( before ) ;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] split [RETURN_TYPE] void   Node n [VARIABLES] boolean  globalPass  includeRoot  Node  before  c  ignored  input  n  next  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  sourceName  Predicate  shouldSplit  shouldTraverse  
[BugLab_Variable_Misuse]^forest.add ( placeHolder ) ;^176^^^^^163^186^forest.add ( c ) ;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] split [RETURN_TYPE] void   Node n [VARIABLES] boolean  globalPass  includeRoot  Node  before  c  ignored  input  n  next  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  sourceName  Predicate  shouldSplit  shouldTraverse  
[BugLab_Variable_Misuse]^forest.add ( original.removeFirstChild (  )  ) ;^171^^^^^163^186^forest.add ( n.removeFirstChild (  )  ) ;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] split [RETURN_TYPE] void   Node n [VARIABLES] boolean  globalPass  includeRoot  Node  before  c  ignored  input  n  next  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  sourceName  Predicate  shouldSplit  shouldTraverse  
[BugLab_Variable_Misuse]^n.addChildToFront ( root ) ;^172^^^^^163^186^n.addChildToFront ( placeHolder ) ;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] split [RETURN_TYPE] void   Node n [VARIABLES] boolean  globalPass  includeRoot  Node  before  c  ignored  input  n  next  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  sourceName  Predicate  shouldSplit  shouldTraverse  
[BugLab_Variable_Misuse]^before = root;^179^^^^^163^186^before = placeHolder;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] split [RETURN_TYPE] void   Node n [VARIABLES] boolean  globalPass  includeRoot  Node  before  c  ignored  input  n  next  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  sourceName  Predicate  shouldSplit  shouldTraverse  
[BugLab_Variable_Misuse]^forest.add ( root.removeFirstChild (  )  ) ;^171^^^^^163^186^forest.add ( n.removeFirstChild (  )  ) ;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] split [RETURN_TYPE] void   Node n [VARIABLES] boolean  globalPass  includeRoot  Node  before  c  ignored  input  n  next  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  sourceName  Predicate  shouldSplit  shouldTraverse  
[BugLab_Variable_Misuse]^forest.add ( orginal.removeFirstChild (  )  ) ;^171^^^^^163^186^forest.add ( n.removeFirstChild (  )  ) ;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] split [RETURN_TYPE] void   Node n [VARIABLES] boolean  globalPass  includeRoot  Node  before  c  ignored  input  n  next  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  sourceName  Predicate  shouldSplit  shouldTraverse  
[BugLab_Variable_Misuse]^n.addChildToFront ( orginal ) ;^172^^^^^163^186^n.addChildToFront ( placeHolder ) ;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] split [RETURN_TYPE] void   Node n [VARIABLES] boolean  globalPass  includeRoot  Node  before  c  ignored  input  n  next  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  sourceName  Predicate  shouldSplit  shouldTraverse  
[BugLab_Variable_Misuse]^n.addChildAfter ( root, c ) ;^174^^^^^163^186^n.addChildAfter ( placeHolder, c ) ;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] split [RETURN_TYPE] void   Node n [VARIABLES] boolean  globalPass  includeRoot  Node  before  c  ignored  input  n  next  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  sourceName  Predicate  shouldSplit  shouldTraverse  
[BugLab_Variable_Misuse]^n.addChildAfter ( placeHolder, root ) ;^174^^^^^163^186^n.addChildAfter ( placeHolder, c ) ;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] split [RETURN_TYPE] void   Node n [VARIABLES] boolean  globalPass  includeRoot  Node  before  c  ignored  input  n  next  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  sourceName  Predicate  shouldSplit  shouldTraverse  
[BugLab_Variable_Misuse]^n.removeChildAfter ( root ) ;^175^^^^^163^186^n.removeChildAfter ( before ) ;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] split [RETURN_TYPE] void   Node n [VARIABLES] boolean  globalPass  includeRoot  Node  before  c  ignored  input  n  next  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  sourceName  Predicate  shouldSplit  shouldTraverse  
[BugLab_Variable_Misuse]^forest.add ( root ) ;^176^^^^^163^186^forest.add ( c ) ;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] split [RETURN_TYPE] void   Node n [VARIABLES] boolean  globalPass  includeRoot  Node  before  c  ignored  input  n  next  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  sourceName  Predicate  shouldSplit  shouldTraverse  
[BugLab_Variable_Misuse]^recordSplitPoint ( root, before, c ) ;^178^^^^^163^186^recordSplitPoint ( placeHolder, before, c ) ;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] split [RETURN_TYPE] void   Node n [VARIABLES] boolean  globalPass  includeRoot  Node  before  c  ignored  input  n  next  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  sourceName  Predicate  shouldSplit  shouldTraverse  
[BugLab_Variable_Misuse]^recordSplitPoint ( placeHolder, before, root ) ;^178^^^^^163^186^recordSplitPoint ( placeHolder, before, c ) ;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] split [RETURN_TYPE] void   Node n [VARIABLES] boolean  globalPass  includeRoot  Node  before  c  ignored  input  n  next  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  sourceName  Predicate  shouldSplit  shouldTraverse  
[BugLab_Argument_Swapping]^recordSplitPoint ( before, placeHolder, c ) ;^178^^^^^163^186^recordSplitPoint ( placeHolder, before, c ) ;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] split [RETURN_TYPE] void   Node n [VARIABLES] boolean  globalPass  includeRoot  Node  before  c  ignored  input  n  next  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  sourceName  Predicate  shouldSplit  shouldTraverse  
[BugLab_Argument_Swapping]^recordSplitPoint ( placeHolder, c, before ) ;^178^^^^^163^186^recordSplitPoint ( placeHolder, before, c ) ;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] split [RETURN_TYPE] void   Node n [VARIABLES] boolean  globalPass  includeRoot  Node  before  c  ignored  input  n  next  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  sourceName  Predicate  shouldSplit  shouldTraverse  
[BugLab_Variable_Misuse]^if  ( before == originalull )  {^170^^^^^163^186^if  ( before == null )  {^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] split [RETURN_TYPE] void   Node n [VARIABLES] boolean  globalPass  includeRoot  Node  before  c  ignored  input  n  next  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  sourceName  Predicate  shouldSplit  shouldTraverse  
[BugLab_Variable_Misuse]^before = original;^179^^^^^163^186^before = placeHolder;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] split [RETURN_TYPE] void   Node n [VARIABLES] boolean  globalPass  includeRoot  Node  before  c  ignored  input  n  next  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  sourceName  Predicate  shouldSplit  shouldTraverse  
[BugLab_Variable_Misuse]^before = orginal;^182^^^^^163^186^before = c;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] split [RETURN_TYPE] void   Node n [VARIABLES] boolean  globalPass  includeRoot  Node  before  c  ignored  input  n  next  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  sourceName  Predicate  shouldSplit  shouldTraverse  
[BugLab_Variable_Misuse]^c = orginal;^184^^^^^163^186^c = next;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] split [RETURN_TYPE] void   Node n [VARIABLES] boolean  globalPass  includeRoot  Node  before  c  ignored  input  n  next  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  sourceName  Predicate  shouldSplit  shouldTraverse  
[BugLab_Variable_Misuse]^Node next = placeHolder.getNext (  ) ;^167^^^^^163^186^Node next = c.getNext (  ) ;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] split [RETURN_TYPE] void   Node n [VARIABLES] boolean  globalPass  includeRoot  Node  before  c  ignored  input  n  next  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  sourceName  Predicate  shouldSplit  shouldTraverse  
[BugLab_Variable_Misuse]^Node next = root.getNext (  ) ;^167^^^^^163^186^Node next = c.getNext (  ) ;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] split [RETURN_TYPE] void   Node n [VARIABLES] boolean  globalPass  includeRoot  Node  before  c  ignored  input  n  next  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  sourceName  Predicate  shouldSplit  shouldTraverse  
[BugLab_Variable_Misuse]^if  ( shouldSplit.apply ( placeHolder )  )  {^168^^^^^163^186^if  ( shouldSplit.apply ( c )  )  {^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] split [RETURN_TYPE] void   Node n [VARIABLES] boolean  globalPass  includeRoot  Node  before  c  ignored  input  n  next  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  sourceName  Predicate  shouldSplit  shouldTraverse  
[BugLab_Argument_Swapping]^if  ( c.apply ( shouldSplit )  )  {^168^^^^^163^186^if  ( shouldSplit.apply ( c )  )  {^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] split [RETURN_TYPE] void   Node n [VARIABLES] boolean  globalPass  includeRoot  Node  before  c  ignored  input  n  next  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  sourceName  Predicate  shouldSplit  shouldTraverse  
[BugLab_Variable_Misuse]^Node placeHolder = 4.get (  ) ;^169^^^^^163^186^Node placeHolder = placeHolderProvider.get (  ) ;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] split [RETURN_TYPE] void   Node n [VARIABLES] boolean  globalPass  includeRoot  Node  before  c  ignored  input  n  next  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  sourceName  Predicate  shouldSplit  shouldTraverse  
[BugLab_Variable_Misuse]^n.addChildAfter ( placeHolder, original ) ;^174^^^^^163^186^n.addChildAfter ( placeHolder, c ) ;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] split [RETURN_TYPE] void   Node n [VARIABLES] boolean  globalPass  includeRoot  Node  before  c  ignored  input  n  next  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  sourceName  Predicate  shouldSplit  shouldTraverse  
[BugLab_Variable_Misuse]^recordSplitPoint ( orginal, before, c ) ;^178^^^^^163^186^recordSplitPoint ( placeHolder, before, c ) ;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] split [RETURN_TYPE] void   Node n [VARIABLES] boolean  globalPass  includeRoot  Node  before  c  ignored  input  n  next  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  sourceName  Predicate  shouldSplit  shouldTraverse  
[BugLab_Variable_Misuse]^recordSplitPoint ( placeHolder, original, c ) ;^178^^^^^163^186^recordSplitPoint ( placeHolder, before, c ) ;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] split [RETURN_TYPE] void   Node n [VARIABLES] boolean  globalPass  includeRoot  Node  before  c  ignored  input  n  next  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  sourceName  Predicate  shouldSplit  shouldTraverse  
[BugLab_Argument_Swapping]^recordSplitPoint ( c, before, placeHolder ) ;^178^^^^^163^186^recordSplitPoint ( placeHolder, before, c ) ;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] split [RETURN_TYPE] void   Node n [VARIABLES] boolean  globalPass  includeRoot  Node  before  c  ignored  input  n  next  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  sourceName  Predicate  shouldSplit  shouldTraverse  
[BugLab_Variable_Misuse]^split ( root ) ;^181^^^^^163^186^split ( c ) ;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] split [RETURN_TYPE] void   Node n [VARIABLES] boolean  globalPass  includeRoot  Node  before  c  ignored  input  n  next  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  sourceName  Predicate  shouldSplit  shouldTraverse  
[BugLab_Variable_Misuse]^forest.add ( orginal ) ;^176^^^^^163^186^forest.add ( c ) ;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] split [RETURN_TYPE] void   Node n [VARIABLES] boolean  globalPass  includeRoot  Node  before  c  ignored  input  n  next  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  sourceName  Predicate  shouldSplit  shouldTraverse  
[BugLab_Variable_Misuse]^recordSplitPoint ( placeHolder, orginal, c ) ;^178^^^^^163^186^recordSplitPoint ( placeHolder, before, c ) ;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] split [RETURN_TYPE] void   Node n [VARIABLES] boolean  globalPass  includeRoot  Node  before  c  ignored  input  n  next  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  sourceName  Predicate  shouldSplit  shouldTraverse  
[BugLab_Variable_Misuse]^n.removeChildAfter ( original ) ;^175^^^^^163^186^n.removeChildAfter ( before ) ;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] split [RETURN_TYPE] void   Node n [VARIABLES] boolean  globalPass  includeRoot  Node  before  c  ignored  input  n  next  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  sourceName  Predicate  shouldSplit  shouldTraverse  
[BugLab_Variable_Misuse]^before = orginal;^179^^^^^163^186^before = placeHolder;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] split [RETURN_TYPE] void   Node n [VARIABLES] boolean  globalPass  includeRoot  Node  before  c  ignored  input  n  next  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  sourceName  Predicate  shouldSplit  shouldTraverse  
[BugLab_Variable_Misuse]^before = placeHolder;^182^^^^^163^186^before = c;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] split [RETURN_TYPE] void   Node n [VARIABLES] boolean  globalPass  includeRoot  Node  before  c  ignored  input  n  next  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  sourceName  Predicate  shouldSplit  shouldTraverse  
[BugLab_Variable_Misuse]^c = original;^184^^^^^163^186^c = next;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] split [RETURN_TYPE] void   Node n [VARIABLES] boolean  globalPass  includeRoot  Node  before  c  ignored  input  n  next  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  sourceName  Predicate  shouldSplit  shouldTraverse  
[BugLab_Variable_Misuse]^Node next = original.getNext (  ) ;^167^^^^^163^186^Node next = c.getNext (  ) ;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] split [RETURN_TYPE] void   Node n [VARIABLES] boolean  globalPass  includeRoot  Node  before  c  ignored  input  n  next  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  sourceName  Predicate  shouldSplit  shouldTraverse  
[BugLab_Variable_Misuse]^if  ( shouldSplit.apply ( original )  )  {^168^^^^^163^186^if  ( shouldSplit.apply ( c )  )  {^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] split [RETURN_TYPE] void   Node n [VARIABLES] boolean  globalPass  includeRoot  Node  before  c  ignored  input  n  next  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  sourceName  Predicate  shouldSplit  shouldTraverse  
[BugLab_Variable_Misuse]^split ( original ) ;^181^^^^^163^186^split ( c ) ;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] split [RETURN_TYPE] void   Node n [VARIABLES] boolean  globalPass  includeRoot  Node  before  c  ignored  input  n  next  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  sourceName  Predicate  shouldSplit  shouldTraverse  
[BugLab_Wrong_Operator]^DettachPoint entry = detachPointList.remove ( detachPointList.size (  )   <<  1 ) ;^194^^^^^191^197^DettachPoint entry = detachPointList.remove ( detachPointList.size (  )  - 1 ) ;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] join [RETURN_TYPE] void   [VARIABLES] boolean  globalPass  includeRoot  Node  before  c  ignored  input  n  next  orginal  original  placeHolder  root  DettachPoint  entry  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  sourceName  Predicate  shouldSplit  shouldTraverse  
[BugLab_Wrong_Literal]^DettachPoint entry = detachPointList.remove ( detachPointList.size (  )   ) ;^194^^^^^191^197^DettachPoint entry = detachPointList.remove ( detachPointList.size (  )  - 1 ) ;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] join [RETURN_TYPE] void   [VARIABLES] boolean  globalPass  includeRoot  Node  before  c  ignored  input  n  next  orginal  original  placeHolder  root  DettachPoint  entry  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  sourceName  Predicate  shouldSplit  shouldTraverse  
[BugLab_Wrong_Operator]^DettachPoint entry = detachPointList.remove ( detachPointList.size (  )   &&  1 ) ;^194^^^^^191^197^DettachPoint entry = detachPointList.remove ( detachPointList.size (  )  - 1 ) ;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] join [RETURN_TYPE] void   [VARIABLES] boolean  globalPass  includeRoot  Node  before  c  ignored  input  n  next  orginal  original  placeHolder  root  DettachPoint  entry  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  sourceName  Predicate  shouldSplit  shouldTraverse  
[BugLab_Wrong_Operator]^DettachPoint entry = detachPointList.remove ( detachPointList.size (  )   ||  1 ) ;^194^^^^^191^197^DettachPoint entry = detachPointList.remove ( detachPointList.size (  )  - 1 ) ;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] join [RETURN_TYPE] void   [VARIABLES] boolean  globalPass  includeRoot  Node  before  c  ignored  input  n  next  orginal  original  placeHolder  root  DettachPoint  entry  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  sourceName  Predicate  shouldSplit  shouldTraverse  
[BugLab_Wrong_Literal]^DettachPoint entry = detachPointList.remove ( detachPointList.size (  )  - 3 ) ;^194^^^^^191^197^DettachPoint entry = detachPointList.remove ( detachPointList.size (  )  - 1 ) ;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] join [RETURN_TYPE] void   [VARIABLES] boolean  globalPass  includeRoot  Node  before  c  ignored  input  n  next  orginal  original  placeHolder  root  DettachPoint  entry  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  sourceName  Predicate  shouldSplit  shouldTraverse  
[BugLab_Wrong_Operator]^if  ( placeHolder.getParent (  )  == null )  {^227^^^^^224^236^if  ( placeHolder.getParent (  )  != null )  {^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] reattach [RETURN_TYPE] void   [VARIABLES] boolean  globalPass  includeRoot  Node  before  c  ignored  input  n  next  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  sourceName  Predicate  shouldSplit  shouldTraverse  
[BugLab_Variable_Misuse]^if  ( root == null )  {^228^^^^^224^236^if  ( before == null )  {^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] reattach [RETURN_TYPE] void   [VARIABLES] boolean  globalPass  includeRoot  Node  before  c  ignored  input  n  next  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  sourceName  Predicate  shouldSplit  shouldTraverse  
[BugLab_Wrong_Operator]^if  ( before != null )  {^228^^^^^224^236^if  ( before == null )  {^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] reattach [RETURN_TYPE] void   [VARIABLES] boolean  globalPass  includeRoot  Node  before  c  ignored  input  n  next  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  sourceName  Predicate  shouldSplit  shouldTraverse  
[BugLab_Variable_Misuse]^placeHolder.getParent (  ) .addChildAfter ( original, root ) ;^232^^^^^224^236^placeHolder.getParent (  ) .addChildAfter ( original, before ) ;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] reattach [RETURN_TYPE] void   [VARIABLES] boolean  globalPass  includeRoot  Node  before  c  ignored  input  n  next  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  sourceName  Predicate  shouldSplit  shouldTraverse  
[BugLab_Argument_Swapping]^placeHolder.getParent (  ) .addChildAfter ( before, original ) ;^232^^^^^224^236^placeHolder.getParent (  ) .addChildAfter ( original, before ) ;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] reattach [RETURN_TYPE] void   [VARIABLES] boolean  globalPass  includeRoot  Node  before  c  ignored  input  n  next  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  sourceName  Predicate  shouldSplit  shouldTraverse  
[BugLab_Variable_Misuse]^placeHolder.getParent (  ) .removeChildAfter ( root ) ;^233^^^^^224^236^placeHolder.getParent (  ) .removeChildAfter ( original ) ;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] reattach [RETURN_TYPE] void   [VARIABLES] boolean  globalPass  includeRoot  Node  before  c  ignored  input  n  next  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  sourceName  Predicate  shouldSplit  shouldTraverse  
[BugLab_Variable_Misuse]^placeHolder.getParent (  ) .addChildrenToFront ( orginal ) ;^229^^^^^224^236^placeHolder.getParent (  ) .addChildrenToFront ( original ) ;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] reattach [RETURN_TYPE] void   [VARIABLES] boolean  globalPass  includeRoot  Node  before  c  ignored  input  n  next  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  sourceName  Predicate  shouldSplit  shouldTraverse  
[BugLab_Variable_Misuse]^placeHolder.getParent (  ) .removeChildAfter ( orginal ) ;^230^^^^^224^236^placeHolder.getParent (  ) .removeChildAfter ( original ) ;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] reattach [RETURN_TYPE] void   [VARIABLES] boolean  globalPass  includeRoot  Node  before  c  ignored  input  n  next  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  sourceName  Predicate  shouldSplit  shouldTraverse  
[BugLab_Variable_Misuse]^placeHolder.getParent (  ) .addChildAfter ( root, before ) ;^232^^^^^224^236^placeHolder.getParent (  ) .addChildAfter ( original, before ) ;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] reattach [RETURN_TYPE] void   [VARIABLES] boolean  globalPass  includeRoot  Node  before  c  ignored  input  n  next  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  sourceName  Predicate  shouldSplit  shouldTraverse  
[BugLab_Variable_Misuse]^if  ( original == null )  {^228^^^^^224^236^if  ( before == null )  {^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] reattach [RETURN_TYPE] void   [VARIABLES] boolean  globalPass  includeRoot  Node  before  c  ignored  input  n  next  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  sourceName  Predicate  shouldSplit  shouldTraverse  
[BugLab_Variable_Misuse]^placeHolder.getParent (  ) .removeChildAfter ( next ) ;^233^^^^^224^236^placeHolder.getParent (  ) .removeChildAfter ( original ) ;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] reattach [RETURN_TYPE] void   [VARIABLES] boolean  globalPass  includeRoot  Node  before  c  ignored  input  n  next  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  sourceName  Predicate  shouldSplit  shouldTraverse  
[BugLab_Variable_Misuse]^placeHolder.getParent (  ) .removeChildAfter ( root ) ;^230^^^^^224^236^placeHolder.getParent (  ) .removeChildAfter ( original ) ;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] reattach [RETURN_TYPE] void   [VARIABLES] boolean  globalPass  includeRoot  Node  before  c  ignored  input  n  next  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  sourceName  Predicate  shouldSplit  shouldTraverse  
[BugLab_Variable_Misuse]^if  ( original.getParent (  )  != null )  {^227^^^^^224^236^if  ( placeHolder.getParent (  )  != null )  {^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] reattach [RETURN_TYPE] void   [VARIABLES] boolean  globalPass  includeRoot  Node  before  c  ignored  input  n  next  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  sourceName  Predicate  shouldSplit  shouldTraverse  
[BugLab_Variable_Misuse]^placeHolder.getParent (  ) .addChildrenToFront ( root ) ;^229^^^^^224^236^placeHolder.getParent (  ) .addChildrenToFront ( original ) ;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] reattach [RETURN_TYPE] void   [VARIABLES] boolean  globalPass  includeRoot  Node  before  c  ignored  input  n  next  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  sourceName  Predicate  shouldSplit  shouldTraverse  
[BugLab_Variable_Misuse]^placeHolder.getParent (  ) .addChildAfter ( original, placeHolder ) ;^232^^^^^224^236^placeHolder.getParent (  ) .addChildAfter ( original, before ) ;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] reattach [RETURN_TYPE] void   [VARIABLES] boolean  globalPass  includeRoot  Node  before  c  ignored  input  n  next  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  sourceName  Predicate  shouldSplit  shouldTraverse  
[BugLab_Wrong_Literal]^return false;^96^^^^^95^97^return true;^[CLASS] 2  [METHOD] apply [RETURN_TYPE] boolean   Node ignored [VARIABLES] boolean  Node  ignored  
[BugLab_Variable_Misuse]^Node.newString ( Token.NAME, 4 ) , new Node ( Token.LP ) , new Node ( Token.BLOCK )  ) ;^105^106^^^^103^107^Node.newString ( Token.NAME, TEMP_NAME ) , new Node ( Token.LP ) , new Node ( Token.BLOCK )  ) ;^[CLASS] 3  [METHOD] get [RETURN_TYPE] Node   [VARIABLES] boolean  
[BugLab_Wrong_Operator]^return sourceName == null;^120^^^^^118^121^return sourceName != null;^[CLASS] 4  [METHOD] apply [RETURN_TYPE] boolean   Node input [VARIABLES] boolean  Node  input  String  sourceName  
[BugLab_Wrong_Operator]^return n.getType (  )  != Token.BLOCK;^136^^^^^135^137^return n.getType (  )  == Token.BLOCK;^[CLASS] 6  [METHOD] apply [RETURN_TYPE] boolean   Node n [VARIABLES] boolean  Node  n  
[BugLab_Variable_Misuse]^this.placeHolder = original;^219^^^^^218^222^this.placeHolder = placeHolder;^[CLASS] DettachPoint  [METHOD] <init> [RETURN_TYPE] Node)   Node placeHolder Node before Node orginal [VARIABLES] Node  before  orginal  original  placeHolder  boolean  
[BugLab_Variable_Misuse]^this.original = placeHolder;^221^^^^^218^222^this.original = orginal;^[CLASS] DettachPoint  [METHOD] <init> [RETURN_TYPE] Node)   Node placeHolder Node before Node orginal [VARIABLES] Node  before  orginal  original  placeHolder  boolean  
[BugLab_Variable_Misuse]^if  ( orginal.getParent (  )  != null )  {^227^^^^^224^236^if  ( placeHolder.getParent (  )  != null )  {^[CLASS] DettachPoint  [METHOD] reattach [RETURN_TYPE] void   [VARIABLES] Node  before  orginal  original  placeHolder  boolean  
[BugLab_Wrong_Operator]^if  ( placeHolder.getParent (  )  == null )  {^227^^^^^224^236^if  ( placeHolder.getParent (  )  != null )  {^[CLASS] DettachPoint  [METHOD] reattach [RETURN_TYPE] void   [VARIABLES] Node  before  orginal  original  placeHolder  boolean  
[BugLab_Variable_Misuse]^if  ( original == null )  {^228^^^^^224^236^if  ( before == null )  {^[CLASS] DettachPoint  [METHOD] reattach [RETURN_TYPE] void   [VARIABLES] Node  before  orginal  original  placeHolder  boolean  
[BugLab_Wrong_Operator]^if  ( before != null )  {^228^^^^^224^236^if  ( before == null )  {^[CLASS] DettachPoint  [METHOD] reattach [RETURN_TYPE] void   [VARIABLES] Node  before  orginal  original  placeHolder  boolean  
[BugLab_Variable_Misuse]^placeHolder.getParent (  ) .addChildAfter ( placeHolder, before ) ;^232^^^^^224^236^placeHolder.getParent (  ) .addChildAfter ( original, before ) ;^[CLASS] DettachPoint  [METHOD] reattach [RETURN_TYPE] void   [VARIABLES] Node  before  orginal  original  placeHolder  boolean  
[BugLab_Variable_Misuse]^placeHolder.getParent (  ) .addChildAfter ( original, original ) ;^232^^^^^224^236^placeHolder.getParent (  ) .addChildAfter ( original, before ) ;^[CLASS] DettachPoint  [METHOD] reattach [RETURN_TYPE] void   [VARIABLES] Node  before  orginal  original  placeHolder  boolean  
[BugLab_Argument_Swapping]^placeHolder.getParent (  ) .addChildAfter ( before, original ) ;^232^^^^^224^236^placeHolder.getParent (  ) .addChildAfter ( original, before ) ;^[CLASS] DettachPoint  [METHOD] reattach [RETURN_TYPE] void   [VARIABLES] Node  before  orginal  original  placeHolder  boolean  
[BugLab_Variable_Misuse]^placeHolder.getParent (  ) .removeChildAfter ( orginal ) ;^233^^^^^224^236^placeHolder.getParent (  ) .removeChildAfter ( original ) ;^[CLASS] DettachPoint  [METHOD] reattach [RETURN_TYPE] void   [VARIABLES] Node  before  orginal  original  placeHolder  boolean  
[BugLab_Variable_Misuse]^placeHolder.getParent (  ) .addChildrenToFront ( orginal ) ;^229^^^^^224^236^placeHolder.getParent (  ) .addChildrenToFront ( original ) ;^[CLASS] DettachPoint  [METHOD] reattach [RETURN_TYPE] void   [VARIABLES] Node  before  orginal  original  placeHolder  boolean  
[BugLab_Variable_Misuse]^placeHolder.getParent (  ) .removeChildAfter ( orginal ) ;^230^^^^^224^236^placeHolder.getParent (  ) .removeChildAfter ( original ) ;^[CLASS] DettachPoint  [METHOD] reattach [RETURN_TYPE] void   [VARIABLES] Node  before  orginal  original  placeHolder  boolean  
[BugLab_Variable_Misuse]^placeHolder.getParent (  ) .addChildAfter ( orginal, before ) ;^232^^^^^224^236^placeHolder.getParent (  ) .addChildAfter ( original, before ) ;^[CLASS] DettachPoint  [METHOD] reattach [RETURN_TYPE] void   [VARIABLES] Node  before  orginal  original  placeHolder  boolean  
[BugLab_Variable_Misuse]^if  ( placeHolder == null )  {^228^^^^^224^236^if  ( before == null )  {^[CLASS] DettachPoint  [METHOD] reattach [RETURN_TYPE] void   [VARIABLES] Node  before  orginal  original  placeHolder  boolean  
[BugLab_Variable_Misuse]^placeHolder.getParent (  ) .addChildAfter ( original, placeHolder ) ;^232^^^^^224^236^placeHolder.getParent (  ) .addChildAfter ( original, before ) ;^[CLASS] DettachPoint  [METHOD] reattach [RETURN_TYPE] void   [VARIABLES] Node  before  orginal  original  placeHolder  boolean  
[BugLab_Variable_Misuse]^if  ( original.getParent (  )  != null )  {^227^^^^^224^236^if  ( placeHolder.getParent (  )  != null )  {^[CLASS] DettachPoint  [METHOD] reattach [RETURN_TYPE] void   [VARIABLES] Node  before  orginal  original  placeHolder  boolean  
