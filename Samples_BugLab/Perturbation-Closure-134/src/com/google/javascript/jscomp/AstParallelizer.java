[buglab_swap_variables]^return new Node ( Token. Node.newString ( Token.NAME, TEMP_NAME ) , new Node ( Token.LP ) , new Node ( Token.BLOCK )  ) ;^104^105^106^^^82^111^return new Node ( Token.FUNCTION, Node.newString ( Token.NAME, TEMP_NAME ) , new Node ( Token.LP ) , new Node ( Token.BLOCK )  ) ;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] createNewFunctionLevelAstParallelizer [RETURN_TYPE] AstParallelizer   Node root boolean globalPass [VARIABLES] boolean  globalPass  includeRoot  Node  before  ignored  input  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  Predicate  shouldSplit  shouldTraverse  
[buglab_swap_variables]^return new Node ( Token.FUNCTION, Node.newString ( Token.NAME ) , new Node ( Token.LP ) , new Node ( Token.BLOCK )  ) ;^104^105^106^^^82^111^return new Node ( Token.FUNCTION, Node.newString ( Token.NAME, TEMP_NAME ) , new Node ( Token.LP ) , new Node ( Token.BLOCK )  ) ;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] createNewFunctionLevelAstParallelizer [RETURN_TYPE] AstParallelizer   Node root boolean globalPass [VARIABLES] boolean  globalPass  includeRoot  Node  before  ignored  input  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  Predicate  shouldSplit  shouldTraverse  
[buglab_swap_variables]^return new AstParallelizer ( globalPass, shouldTraverse, placeHolders, root, shouldSplit ) ;^109^110^^^^82^111^return new AstParallelizer ( shouldSplit, shouldTraverse, placeHolders, root, globalPass ) ;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] createNewFunctionLevelAstParallelizer [RETURN_TYPE] AstParallelizer   Node root boolean globalPass [VARIABLES] boolean  globalPass  includeRoot  Node  before  ignored  input  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  Predicate  shouldSplit  shouldTraverse  
[buglab_swap_variables]^return new AstParallelizer (  shouldTraverse, placeHolders, root, globalPass ) ;^109^110^^^^82^111^return new AstParallelizer ( shouldSplit, shouldTraverse, placeHolders, root, globalPass ) ;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] createNewFunctionLevelAstParallelizer [RETURN_TYPE] AstParallelizer   Node root boolean globalPass [VARIABLES] boolean  globalPass  includeRoot  Node  before  ignored  input  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  Predicate  shouldSplit  shouldTraverse  
[buglab_swap_variables]^return new AstParallelizer ( shouldTraverse, shouldSplit, placeHolders, root, globalPass ) ;^109^110^^^^82^111^return new AstParallelizer ( shouldSplit, shouldTraverse, placeHolders, root, globalPass ) ;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] createNewFunctionLevelAstParallelizer [RETURN_TYPE] AstParallelizer   Node root boolean globalPass [VARIABLES] boolean  globalPass  includeRoot  Node  before  ignored  input  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  Predicate  shouldSplit  shouldTraverse  
[buglab_swap_variables]^return new AstParallelizer ( shouldSplit,  placeHolders, root, globalPass ) ;^109^110^^^^82^111^return new AstParallelizer ( shouldSplit, shouldTraverse, placeHolders, root, globalPass ) ;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] createNewFunctionLevelAstParallelizer [RETURN_TYPE] AstParallelizer   Node root boolean globalPass [VARIABLES] boolean  globalPass  includeRoot  Node  before  ignored  input  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  Predicate  shouldSplit  shouldTraverse  
[buglab_swap_variables]^return new AstParallelizer ( shouldSplit, placeHolders, shouldTraverse, root, globalPass ) ;^109^110^^^^82^111^return new AstParallelizer ( shouldSplit, shouldTraverse, placeHolders, root, globalPass ) ;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] createNewFunctionLevelAstParallelizer [RETURN_TYPE] AstParallelizer   Node root boolean globalPass [VARIABLES] boolean  globalPass  includeRoot  Node  before  ignored  input  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  Predicate  shouldSplit  shouldTraverse  
[buglab_swap_variables]^return new AstParallelizer ( shouldSplit, shouldTraverse,  root, globalPass ) ;^109^110^^^^82^111^return new AstParallelizer ( shouldSplit, shouldTraverse, placeHolders, root, globalPass ) ;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] createNewFunctionLevelAstParallelizer [RETURN_TYPE] AstParallelizer   Node root boolean globalPass [VARIABLES] boolean  globalPass  includeRoot  Node  before  ignored  input  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  Predicate  shouldSplit  shouldTraverse  
[buglab_swap_variables]^return new AstParallelizer ( root, shouldTraverse, placeHolders, shouldSplit, globalPass ) ;^109^110^^^^82^111^return new AstParallelizer ( shouldSplit, shouldTraverse, placeHolders, root, globalPass ) ;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] createNewFunctionLevelAstParallelizer [RETURN_TYPE] AstParallelizer   Node root boolean globalPass [VARIABLES] boolean  globalPass  includeRoot  Node  before  ignored  input  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  Predicate  shouldSplit  shouldTraverse  
[buglab_swap_variables]^return new AstParallelizer ( shouldSplit, shouldTraverse, placeHolders,  globalPass ) ;^109^110^^^^82^111^return new AstParallelizer ( shouldSplit, shouldTraverse, placeHolders, root, globalPass ) ;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] createNewFunctionLevelAstParallelizer [RETURN_TYPE] AstParallelizer   Node root boolean globalPass [VARIABLES] boolean  globalPass  includeRoot  Node  before  ignored  input  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  Predicate  shouldSplit  shouldTraverse  
[buglab_swap_variables]^return new AstParallelizer ( shouldSplit, shouldTraverse, globalPass, root, placeHolders ) ;^109^110^^^^82^111^return new AstParallelizer ( shouldSplit, shouldTraverse, placeHolders, root, globalPass ) ;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] createNewFunctionLevelAstParallelizer [RETURN_TYPE] AstParallelizer   Node root boolean globalPass [VARIABLES] boolean  globalPass  includeRoot  Node  before  ignored  input  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  Predicate  shouldSplit  shouldTraverse  
[buglab_swap_variables]^return new AstParallelizer ( shouldSplit, shouldTraverse, placeHolders, root ) ;^109^110^^^^82^111^return new AstParallelizer ( shouldSplit, shouldTraverse, placeHolders, root, globalPass ) ;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] createNewFunctionLevelAstParallelizer [RETURN_TYPE] AstParallelizer   Node root boolean globalPass [VARIABLES] boolean  globalPass  includeRoot  Node  before  ignored  input  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  Predicate  shouldSplit  shouldTraverse  
[buglab_swap_variables]^return new AstParallelizer ( placeHolders, shouldTraverse, shouldSplit, root, globalPass ) ;^109^110^^^^82^111^return new AstParallelizer ( shouldSplit, shouldTraverse, placeHolders, root, globalPass ) ;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] createNewFunctionLevelAstParallelizer [RETURN_TYPE] AstParallelizer   Node root boolean globalPass [VARIABLES] boolean  globalPass  includeRoot  Node  before  ignored  input  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  Predicate  shouldSplit  shouldTraverse  
[buglab_swap_variables]^return new AstParallelizer ( shouldSplit, root, placeHolders, shouldTraverse, globalPass ) ;^109^110^^^^82^111^return new AstParallelizer ( shouldSplit, shouldTraverse, placeHolders, root, globalPass ) ;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] createNewFunctionLevelAstParallelizer [RETURN_TYPE] AstParallelizer   Node root boolean globalPass [VARIABLES] boolean  globalPass  includeRoot  Node  before  ignored  input  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  Predicate  shouldSplit  shouldTraverse  
[buglab_swap_variables]^return new AstParallelizer ( shouldSplit, shouldTraverse, placeHolders, globalPass, root ) ;^109^110^^^^82^111^return new AstParallelizer ( shouldSplit, shouldTraverse, placeHolders, root, globalPass ) ;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] createNewFunctionLevelAstParallelizer [RETURN_TYPE] AstParallelizer   Node root boolean globalPass [VARIABLES] boolean  globalPass  includeRoot  Node  before  ignored  input  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  Predicate  shouldSplit  shouldTraverse  
[buglab_swap_variables]^return new Node ( Token. Node.newString ( Token.NAME, TEMP_NAME ) , new Node ( Token.LP ) , new Node ( Token.BLOCK )  ) ;^104^105^106^^^103^107^return new Node ( Token.FUNCTION, Node.newString ( Token.NAME, TEMP_NAME ) , new Node ( Token.LP ) , new Node ( Token.BLOCK )  ) ;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] get [RETURN_TYPE] Node   [VARIABLES] boolean  globalPass  includeRoot  Node  before  ignored  input  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  Predicate  shouldSplit  shouldTraverse  
[buglab_swap_variables]^return new Node ( Token.FUNCTION, Node.newString ( Token.NAME ) , new Node ( Token.LP ) , new Node ( Token.BLOCK )  ) ;^104^105^106^^^103^107^return new Node ( Token.FUNCTION, Node.newString ( Token.NAME, TEMP_NAME ) , new Node ( Token.LP ) , new Node ( Token.BLOCK )  ) ;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] get [RETURN_TYPE] Node   [VARIABLES] boolean  globalPass  includeRoot  Node  before  ignored  input  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  Predicate  shouldSplit  shouldTraverse  
[buglab_swap_variables]^return new AstParallelizer ( root, shouldTraverse, placeHolders, shouldSplit, false ) ;^139^140^^^^113^141^return new AstParallelizer ( shouldSplit, shouldTraverse, placeHolders, root, false ) ;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] createNewFileLevelAstParallelizer [RETURN_TYPE] AstParallelizer   Node root [VARIABLES] boolean  globalPass  includeRoot  Node  before  ignored  input  n  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  sourceName  Predicate  shouldSplit  shouldTraverse  
[buglab_swap_variables]^return new AstParallelizer (  shouldTraverse, placeHolders, root, false ) ;^139^140^^^^113^141^return new AstParallelizer ( shouldSplit, shouldTraverse, placeHolders, root, false ) ;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] createNewFileLevelAstParallelizer [RETURN_TYPE] AstParallelizer   Node root [VARIABLES] boolean  globalPass  includeRoot  Node  before  ignored  input  n  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  sourceName  Predicate  shouldSplit  shouldTraverse  
[buglab_swap_variables]^return new AstParallelizer ( shouldSplit, placeHolders, shouldTraverse, root, false ) ;^139^140^^^^113^141^return new AstParallelizer ( shouldSplit, shouldTraverse, placeHolders, root, false ) ;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] createNewFileLevelAstParallelizer [RETURN_TYPE] AstParallelizer   Node root [VARIABLES] boolean  globalPass  includeRoot  Node  before  ignored  input  n  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  sourceName  Predicate  shouldSplit  shouldTraverse  
[buglab_swap_variables]^return new AstParallelizer ( shouldSplit,  placeHolders, root, false ) ;^139^140^^^^113^141^return new AstParallelizer ( shouldSplit, shouldTraverse, placeHolders, root, false ) ;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] createNewFileLevelAstParallelizer [RETURN_TYPE] AstParallelizer   Node root [VARIABLES] boolean  globalPass  includeRoot  Node  before  ignored  input  n  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  sourceName  Predicate  shouldSplit  shouldTraverse  
[buglab_swap_variables]^return new AstParallelizer ( placeHolders, shouldTraverse, shouldSplit, root, false ) ;^139^140^^^^113^141^return new AstParallelizer ( shouldSplit, shouldTraverse, placeHolders, root, false ) ;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] createNewFileLevelAstParallelizer [RETURN_TYPE] AstParallelizer   Node root [VARIABLES] boolean  globalPass  includeRoot  Node  before  ignored  input  n  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  sourceName  Predicate  shouldSplit  shouldTraverse  
[buglab_swap_variables]^return new AstParallelizer ( shouldSplit, shouldTraverse,  root, false ) ;^139^140^^^^113^141^return new AstParallelizer ( shouldSplit, shouldTraverse, placeHolders, root, false ) ;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] createNewFileLevelAstParallelizer [RETURN_TYPE] AstParallelizer   Node root [VARIABLES] boolean  globalPass  includeRoot  Node  before  ignored  input  n  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  sourceName  Predicate  shouldSplit  shouldTraverse  
[buglab_swap_variables]^return new AstParallelizer ( shouldSplit, shouldTraverse, placeHolders,  false ) ;^139^140^^^^113^141^return new AstParallelizer ( shouldSplit, shouldTraverse, placeHolders, root, false ) ;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] createNewFileLevelAstParallelizer [RETURN_TYPE] AstParallelizer   Node root [VARIABLES] boolean  globalPass  includeRoot  Node  before  ignored  input  n  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  sourceName  Predicate  shouldSplit  shouldTraverse  
[buglab_swap_variables]^return new AstParallelizer ( shouldTraverse, shouldSplit, placeHolders, root, false ) ;^139^140^^^^113^141^return new AstParallelizer ( shouldSplit, shouldTraverse, placeHolders, root, false ) ;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] createNewFileLevelAstParallelizer [RETURN_TYPE] AstParallelizer   Node root [VARIABLES] boolean  globalPass  includeRoot  Node  before  ignored  input  n  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  sourceName  Predicate  shouldSplit  shouldTraverse  
[buglab_swap_variables]^detachPointList.add ( new DettachPoint ( before, placeHolder, orginal )  ) ;^147^^^^^146^148^detachPointList.add ( new DettachPoint ( placeHolder, before, orginal )  ) ;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] recordSplitPoint [RETURN_TYPE] void   Node placeHolder Node before Node orginal [VARIABLES] boolean  globalPass  includeRoot  Node  before  ignored  input  n  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  sourceName  Predicate  shouldSplit  shouldTraverse  
[buglab_swap_variables]^detachPointList.add ( new DettachPoint (  before, orginal )  ) ;^147^^^^^146^148^detachPointList.add ( new DettachPoint ( placeHolder, before, orginal )  ) ;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] recordSplitPoint [RETURN_TYPE] void   Node placeHolder Node before Node orginal [VARIABLES] boolean  globalPass  includeRoot  Node  before  ignored  input  n  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  sourceName  Predicate  shouldSplit  shouldTraverse  
[buglab_swap_variables]^detachPointList.add ( new DettachPoint ( placeHolder,  orginal )  ) ;^147^^^^^146^148^detachPointList.add ( new DettachPoint ( placeHolder, before, orginal )  ) ;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] recordSplitPoint [RETURN_TYPE] void   Node placeHolder Node before Node orginal [VARIABLES] boolean  globalPass  includeRoot  Node  before  ignored  input  n  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  sourceName  Predicate  shouldSplit  shouldTraverse  
[buglab_swap_variables]^detachPointList.add ( new DettachPoint ( orginal, before, placeHolder )  ) ;^147^^^^^146^148^detachPointList.add ( new DettachPoint ( placeHolder, before, orginal )  ) ;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] recordSplitPoint [RETURN_TYPE] void   Node placeHolder Node before Node orginal [VARIABLES] boolean  globalPass  includeRoot  Node  before  ignored  input  n  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  sourceName  Predicate  shouldSplit  shouldTraverse  
[buglab_swap_variables]^detachPointList.add ( new DettachPoint ( placeHolder, before )  ) ;^147^^^^^146^148^detachPointList.add ( new DettachPoint ( placeHolder, before, orginal )  ) ;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] recordSplitPoint [RETURN_TYPE] void   Node placeHolder Node before Node orginal [VARIABLES] boolean  globalPass  includeRoot  Node  before  ignored  input  n  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  sourceName  Predicate  shouldSplit  shouldTraverse  
[buglab_swap_variables]^detachPointList.add ( new DettachPoint ( placeHolder, orginal, before )  ) ;^147^^^^^146^148^detachPointList.add ( new DettachPoint ( placeHolder, before, orginal )  ) ;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] recordSplitPoint [RETURN_TYPE] void   Node placeHolder Node before Node orginal [VARIABLES] boolean  globalPass  includeRoot  Node  before  ignored  input  n  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  sourceName  Predicate  shouldSplit  shouldTraverse  
[buglab_swap_variables]^while  ( n != cull )  {^166^^^^^163^186^while  ( c != null )  {^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] split [RETURN_TYPE] void   Node n [VARIABLES] boolean  globalPass  includeRoot  Node  before  c  ignored  input  n  next  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  sourceName  Predicate  shouldSplit  shouldTraverse  
[buglab_swap_variables]^if  ( c.apply ( shouldSplit )  )  {^168^^^^^163^186^if  ( shouldSplit.apply ( c )  )  {^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] split [RETURN_TYPE] void   Node n [VARIABLES] boolean  globalPass  includeRoot  Node  before  c  ignored  input  n  next  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  sourceName  Predicate  shouldSplit  shouldTraverse  
[buglab_swap_variables]^n.addChildAfter ( c, placeHolder ) ;^174^^^^^163^186^n.addChildAfter ( placeHolder, c ) ;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] split [RETURN_TYPE] void   Node n [VARIABLES] boolean  globalPass  includeRoot  Node  before  c  ignored  input  n  next  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  sourceName  Predicate  shouldSplit  shouldTraverse  
[buglab_swap_variables]^n.addChildAfter (  c ) ;^174^^^^^163^186^n.addChildAfter ( placeHolder, c ) ;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] split [RETURN_TYPE] void   Node n [VARIABLES] boolean  globalPass  includeRoot  Node  before  c  ignored  input  n  next  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  sourceName  Predicate  shouldSplit  shouldTraverse  
[buglab_swap_variables]^n.addChildAfter ( placeHolder ) ;^174^^^^^163^186^n.addChildAfter ( placeHolder, c ) ;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] split [RETURN_TYPE] void   Node n [VARIABLES] boolean  globalPass  includeRoot  Node  before  c  ignored  input  n  next  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  sourceName  Predicate  shouldSplit  shouldTraverse  
[buglab_swap_variables]^recordSplitPoint ( before, placeHolder, c ) ;^178^^^^^163^186^recordSplitPoint ( placeHolder, before, c ) ;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] split [RETURN_TYPE] void   Node n [VARIABLES] boolean  globalPass  includeRoot  Node  before  c  ignored  input  n  next  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  sourceName  Predicate  shouldSplit  shouldTraverse  
[buglab_swap_variables]^recordSplitPoint (  before, c ) ;^178^^^^^163^186^recordSplitPoint ( placeHolder, before, c ) ;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] split [RETURN_TYPE] void   Node n [VARIABLES] boolean  globalPass  includeRoot  Node  before  c  ignored  input  n  next  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  sourceName  Predicate  shouldSplit  shouldTraverse  
[buglab_swap_variables]^recordSplitPoint ( placeHolder,  c ) ;^178^^^^^163^186^recordSplitPoint ( placeHolder, before, c ) ;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] split [RETURN_TYPE] void   Node n [VARIABLES] boolean  globalPass  includeRoot  Node  before  c  ignored  input  n  next  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  sourceName  Predicate  shouldSplit  shouldTraverse  
[buglab_swap_variables]^recordSplitPoint ( placeHolder, c, before ) ;^178^^^^^163^186^recordSplitPoint ( placeHolder, before, c ) ;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] split [RETURN_TYPE] void   Node n [VARIABLES] boolean  globalPass  includeRoot  Node  before  c  ignored  input  n  next  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  sourceName  Predicate  shouldSplit  shouldTraverse  
[buglab_swap_variables]^recordSplitPoint ( placeHolder, before ) ;^178^^^^^163^186^recordSplitPoint ( placeHolder, before, c ) ;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] split [RETURN_TYPE] void   Node n [VARIABLES] boolean  globalPass  includeRoot  Node  before  c  ignored  input  n  next  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  sourceName  Predicate  shouldSplit  shouldTraverse  
[buglab_swap_variables]^if  ( n == beforeull )  {^170^^^^^163^186^if  ( before == null )  {^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] split [RETURN_TYPE] void   Node n [VARIABLES] boolean  globalPass  includeRoot  Node  before  c  ignored  input  n  next  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  sourceName  Predicate  shouldSplit  shouldTraverse  
[buglab_swap_variables]^recordSplitPoint ( c, before, placeHolder ) ;^178^^^^^163^186^recordSplitPoint ( placeHolder, before, c ) ;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] split [RETURN_TYPE] void   Node n [VARIABLES] boolean  globalPass  includeRoot  Node  before  c  ignored  input  n  next  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  sourceName  Predicate  shouldSplit  shouldTraverse  
[buglab_swap_variables]^placeHolder.getParent (  ) .addChildAfter (  before ) ;^232^^^^^224^236^placeHolder.getParent (  ) .addChildAfter ( original, before ) ;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] reattach [RETURN_TYPE] void   [VARIABLES] boolean  globalPass  includeRoot  Node  before  c  ignored  input  n  next  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  sourceName  Predicate  shouldSplit  shouldTraverse  
[buglab_swap_variables]^placeHolder.getParent (  ) .addChildAfter ( before, original ) ;^232^^^^^224^236^placeHolder.getParent (  ) .addChildAfter ( original, before ) ;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] reattach [RETURN_TYPE] void   [VARIABLES] boolean  globalPass  includeRoot  Node  before  c  ignored  input  n  next  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  sourceName  Predicate  shouldSplit  shouldTraverse  
[buglab_swap_variables]^placeHolder.getParent (  ) .addChildAfter ( original ) ;^232^^^^^224^236^placeHolder.getParent (  ) .addChildAfter ( original, before ) ;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] reattach [RETURN_TYPE] void   [VARIABLES] boolean  globalPass  includeRoot  Node  before  c  ignored  input  n  next  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  sourceName  Predicate  shouldSplit  shouldTraverse  
[buglab_swap_variables]^return new Node ( Token. Node.newString ( Token.NAME, TEMP_NAME ) , new Node ( Token.LP ) , new Node ( Token.BLOCK )  ) ;^104^105^106^^^103^107^return new Node ( Token.FUNCTION, Node.newString ( Token.NAME, TEMP_NAME ) , new Node ( Token.LP ) , new Node ( Token.BLOCK )  ) ;^[CLASS] 3  [METHOD] get [RETURN_TYPE] Node   [VARIABLES] boolean  
[buglab_swap_variables]^return new Node ( Token.FUNCTION, Node.newString ( Token.NAME ) , new Node ( Token.LP ) , new Node ( Token.BLOCK )  ) ;^104^105^106^^^103^107^return new Node ( Token.FUNCTION, Node.newString ( Token.NAME, TEMP_NAME ) , new Node ( Token.LP ) , new Node ( Token.BLOCK )  ) ;^[CLASS] 3  [METHOD] get [RETURN_TYPE] Node   [VARIABLES] boolean  
[buglab_swap_variables]^placeHolder.getParent (  ) .addChildAfter (  before ) ;^232^^^^^224^236^placeHolder.getParent (  ) .addChildAfter ( original, before ) ;^[CLASS] DettachPoint  [METHOD] reattach [RETURN_TYPE] void   [VARIABLES] Node  before  orginal  original  placeHolder  boolean  
[buglab_swap_variables]^placeHolder.getParent (  ) .addChildAfter ( before, original ) ;^232^^^^^224^236^placeHolder.getParent (  ) .addChildAfter ( original, before ) ;^[CLASS] DettachPoint  [METHOD] reattach [RETURN_TYPE] void   [VARIABLES] Node  before  orginal  original  placeHolder  boolean  
[buglab_swap_variables]^placeHolder.getParent (  ) .addChildAfter ( original ) ;^232^^^^^224^236^placeHolder.getParent (  ) .addChildAfter ( original, before ) ;^[CLASS] DettachPoint  [METHOD] reattach [RETURN_TYPE] void   [VARIABLES] Node  before  orginal  original  placeHolder  boolean  
